<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ABB.SrcML.Data</name>
    </assembly>
    <members>
        <member name="T:ABB.SrcML.Data.AbstractCodeParser">
            <summary>
            <para>AbstractCodeParser is used to parse SrcML files and extract useful info from the
            elements. Implementations of this class provide language-specific functions to extract
            useful data from the class.</para> <para>The entry point for this class is the
            <see cref="M:ABB.SrcML.Data.AbstractCodeParser.ParseFileUnit(System.Xml.Linq.XElement)"/> method.</para>
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.#ctor">
            <summary>
            Creates a new abstract code parser object. Should only be called by child classes.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.GetAliasElementsForFile(System.Xml.Linq.XElement)">
            <summary>
            Gets the alias elements for this file. This only returns the aliases at the root of the
            file
            </summary>
            <param name="fileUnit">The file unit to get the aliases from</param>
            <returns>The alias elements</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.GetParametersFromMethodElement(System.Xml.Linq.XElement)">
            <summary>
            Gets all of the parameters for this method. It finds the variable declarations in
            parameter list.
            </summary>
            <param name="methodElement">The method container</param>
            <returns>An enumerable of all the param XElements.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.GetParentTypeUseElements(System.Xml.Linq.XElement)">
            <summary>
            Gets the type use elements from a <see cref="P:ABB.SrcML.Data.AbstractCodeParser.TypeElementNames">type definition
            element</see>
            </summary>
            <param name="typeElement">The type element. Must belong to see
            cref="TypeElementNames"/&gt;</param>
            <returns>An enumerable of type uses that represent parent types</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.LogUnknown(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Logs the given element as unknown. This will do nothing if <see cref="P:ABB.SrcML.Data.AbstractCodeParser.UnknownLog"/> is null.
            </summary>
            <param name="element">The unknown element</param>
            <param name="context">The parser context</param>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.LogUnknown(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext,System.String)">
            <summary>
            Logs the given element as unknown along with an optional message. This will do nothing if <see cref="P:ABB.SrcML.Data.AbstractCodeParser.UnknownLog"/> is null.
            </summary>
            <param name="element">The unknown element</param>
            <param name="context">The parser context</param>
            <param name="message">An optional message</param>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.ParseStatement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Creates a <see cref="T:ABB.SrcML.Data.Statement"/> object from the given <paramref name="element"/>.
            This method simply dispatches to the appropriate element parsing method based on the name of the element.
            </summary>
            <param name="element">The element to parse.</param>
            <param name="context">The parser context to use.</param>
            <returns>A Statement corresponding to <paramref name="element"/>. 
            If an unknown element type is passed in, this method will return null if LogUnknownElements is true, or throw an exception if LogUnknownElements is false.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.ParseFileUnit(System.Xml.Linq.XElement)">
            <summary>
            Parses a file unit and returns a <see cref="P:ABB.SrcML.Data.NamespaceDefinition.IsGlobal">global</see>
            <see cref="T:ABB.SrcML.Data.NamespaceDefinition">namespace definition</see> object.
            </summary>
            <param name="unitElement">The file unit to parse. Must be a SRC.Unit element.</param>
            <returns>A global namespace definition for <paramref name="unitElement"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.ParseMethodElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Creates a <see cref="T:ABB.SrcML.Data.MethodDefinition"/> object for <paramref name="methodElement"/>.
            </summary>
            <param name="methodElement">The element to parse</param>
            <param name="context">The context to use</param>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.ParseParameterElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Generates a parameter declaration for the given parameter element
            </summary>
            <param name="paramElement">A <see cref="F:ABB.SrcML.SRC.Parameter"/> XElement</param>
            <param name="context">the parser context</param>
            <returns>A parameter declaration object</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.ParseIfElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Creates an <see cref="T:ABB.SrcML.Data.IfStatement"/> object for <paramref name="ifElement"/>.
            </summary>
            <param name="ifElement">The element to parse.</param>
            <param name="context">The context to use.</param>
            <returns>An IfStatement corresponding to ifElement.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.ParseWhileElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Creates a <see cref="T:ABB.SrcML.Data.WhileStatement"/> object for <paramref name="whileElement"/>.
            </summary>
            <param name="whileElement">The SRC.While element to parse.</param>
            <param name="context">The context to use.</param>
            <returns>A <see cref="T:ABB.SrcML.Data.WhileStatement"/> corresponding to <paramref name="whileElement"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.ParseForElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Creates a ForStatement from the given element.
            </summary>
            <param name="forElement">The SRC.For element to parse.</param>
            <param name="context">The parser context to use.</param>
            <returns>A ForStatement corresponding to forElement. 
            The return type is ConditionBlockStatement so that the Java parser can also return a ForeachStatement when necessary.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.ParseForeachElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Creates a ForeachStatement from the given element.
            </summary>
            <param name="foreachElement">The SRC.Foreach element to parse.</param>
            <param name="context">The parser context to use.</param>
            <returns>A ForeachStatement corresponding to foreachElement. </returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.ParseDoElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Creates a <see cref="T:ABB.SrcML.Data.DoWhileStatement"/> object for <paramref name="doElement"/>.
            </summary>
            <param name="doElement">The SRC.Do element to parse.</param>
            <param name="context">The context to use.</param>
            <returns>A <see cref="T:ABB.SrcML.Data.DoWhileStatement"/> corresponding to <paramref name="doElement"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.ParseSwitchElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Creates a <see cref="T:ABB.SrcML.Data.SwitchStatement"/> object for <paramref name="switchElement"/>.
            </summary>
            <param name="switchElement">The SRC.Switch element to parse.</param>
            <param name="context">The context to use.</param>
            <returns>A <see cref="T:ABB.SrcML.Data.SwitchStatement"/> corresponding to <paramref name="switchElement"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.ParseCaseElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Creates a <see cref="T:ABB.SrcML.Data.CaseStatement"/> object for <paramref name="caseElement"/>.
            </summary>
            <param name="caseElement">The SRC.Case or SRC.Default element to parse.</param>
            <param name="context">The context to use.</param>
            <returns>A <see cref="T:ABB.SrcML.Data.CaseStatement"/> corresponding to <paramref name="caseElement"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.ParseBreakElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Creates a <see cref="T:ABB.SrcML.Data.BreakStatement"/> object for <paramref name="breakElement"/>.
            </summary>
            <param name="breakElement">The SRC.Break element to parse.</param>
            <param name="context">The context to use.</param>
            <returns>A <see cref="T:ABB.SrcML.Data.BreakStatement"/> corresponding to <paramref name="breakElement"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.ParseContinueElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Creates a <see cref="T:ABB.SrcML.Data.ContinueStatement"/> object for <paramref name="continueElement"/>.
            </summary>
            <param name="continueElement">The SRC.Continue element to parse.</param>
            <param name="context">The context to use.</param>
            <returns>A <see cref="T:ABB.SrcML.Data.ContinueStatement"/> corresponding to <paramref name="continueElement"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.ParseGotoElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Creates a <see cref="T:ABB.SrcML.Data.GotoStatement"/> object for <paramref name="gotoElement"/>.
            </summary>
            <param name="gotoElement">The SRC.Goto element to parse.</param>
            <param name="context">The context to use.</param>
            <returns>A <see cref="T:ABB.SrcML.Data.GotoStatement"/> corresponding to <paramref name="gotoElement"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.ParseLabelElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Creates a <see cref="T:ABB.SrcML.Data.LabelStatement"/> object for <paramref name="labelElement"/>.
            </summary>
            <param name="labelElement">The SRC.Label element to parse.</param>
            <param name="context">The context to use.</param>
            <returns>A <see cref="T:ABB.SrcML.Data.LabelStatement"/> corresponding to <paramref name="labelElement"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.ParseReturnElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Creates a <see cref="T:ABB.SrcML.Data.ReturnStatement"/> object for <paramref name="returnElement"/>.
            </summary>
            <param name="returnElement">The SRC.Return element to parse.</param>
            <param name="context">The context to use.</param>
            <returns>A <see cref="T:ABB.SrcML.Data.ReturnStatement"/> corresponding to <paramref name="returnElement"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.ParseThrowElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Creates a <see cref="T:ABB.SrcML.Data.ThrowStatement"/> object for <paramref name="throwElement"/>.
            </summary>
            <param name="throwElement">The SRC.Throw element to parse.</param>
            <param name="context">The context to use.</param>
            <returns>A <see cref="T:ABB.SrcML.Data.ThrowStatement"/> corresponding to <paramref name="throwElement"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.ParseTryElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Creates a <see cref="T:ABB.SrcML.Data.TryStatement"/> object for <paramref name="tryElement"/>.
            </summary>
            <param name="tryElement">The SRC.Try element to parse.</param>
            <param name="context">The context to use.</param>
            <returns>A <see cref="T:ABB.SrcML.Data.TryStatement"/> corresponding to <paramref name="tryElement"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.ParseCatchElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Creates a <see cref="T:ABB.SrcML.Data.CatchStatement"/> object for <paramref name="catchElement"/>.
            </summary>
            <param name="catchElement">The SRC.Catch element to parse.</param>
            <param name="context">The context to use.</param>
            <returns>A <see cref="T:ABB.SrcML.Data.CatchStatement"/> corresponding to <paramref name="catchElement"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.ParseExpressionStatementElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Creates a <see cref="T:ABB.SrcML.Data.Statement"/> object for <paramref name="stmtElement"/>.
            The expression contained within <paramref name="stmtElement"/> will be parsed and placed in 
            Statement.Content.
            </summary>
            <param name="stmtElement">The SRC.ExpressionStatement element to parse.</param>
            <param name="context">The context to use.</param>
            <returns>A <see cref="T:ABB.SrcML.Data.Statement"/> corresponding to <paramref name="stmtElement"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.ParseDeclarationStatementElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Creates a <see cref="T:ABB.SrcML.Data.Statement"/> object for <paramref name="stmtElement"/>.
            The expression contained within <paramref name="stmtElement"/> will be parsed and placed in 
            Statement.Content.
            </summary>
            <param name="stmtElement">The SRC.DeclarationStatement element to parse.</param>
            <param name="context">The context to use.</param>
            <returns>A <see cref="T:ABB.SrcML.Data.DeclarationStatement"/> corresponding to <paramref name="stmtElement"/>.
            The return type is <see cref="T:ABB.SrcML.Data.Statement"/> so that subclasses can return another type, as necessary. </returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.ParseNamespaceElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Creates a <see cref="T:ABB.SrcML.Data.NamespaceDefinition"/> object for <paramref name="namespaceElement"/>
            </summary>
            <param name="namespaceElement">The element to parse.</param>
            <param name="context">The context to use.</param>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.ParseAliasElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Parses the given <paramref name="aliasElement"/> and creates an ImportStatement or AliasStatement from it.
            </summary>
            <param name="aliasElement">The alias element to parse.</param>
            <param name="context">The parser context to use.</param>
            <returns>An ImportStatement if the element is an import, or an AliasStatement if it is an alias.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.ParseTypeElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Parses an element corresponding to a type definition and creates a TypeDefinition object 
            </summary>
            <param name="typeElement">The type element to parse. This must be one of the elements contained in TypeElementNames.</param>
            <param name="context">The parser context</param>
            <returns>A TypeDefinition parsed from the element</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.ParseUnitElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Creates a global <see cref="T:ABB.SrcML.Data.NamespaceDefinition"/> object for <paramref name="unitElement"/>.
            </summary>
            <param name="unitElement">The SRC.Unit element to parse.</param>
            <param name="context">The parser context to use.</param>
            <returns>A NamespaceDefinition corresponding to <paramref name="unitElement"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.ParseBlockElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Creates a BlockStatement from the given block element. 
            This method is only for parsing free-standing blocks, which are very rare. 
            Most blocks are parsed by the construct they are attached to, e.g. an if-statement or class definition.
            </summary>
            <param name="blockElement">The SRC.Block element to parse.</param>
            <param name="context">The parser context to use.</param>
            <returns>A BlockStatement corresponding to blockElement.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.ParseExternElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Creates an ExternStatement from the given extern element.
            Note that only extern statements with a linkage specifier, e.g. "extern "C" int foo();", are marked up with SRC.Extern.
            </summary>
            <param name="externElement">The SRC.Extern element to parse.</param>
            <param name="context">The parser context to use.</param>
            <returns>An ExternStatement corresponding to externElement.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.ParseEmptyStatementElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Creates an empty Statement object from the given SRC.EmptyStatement element.
            </summary>
            <param name="emptyElement">A SRC.EmptyStatement element.</param>
            <param name="context">The parser context to use.</param>
            <returns>A Statement corresponding to <paramref name="emptyElement"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.ParseLockElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Parses the given <paramref name="lockElement"/> and creates a <see cref="T:ABB.SrcML.Data.LockStatement"/> from it.
            </summary>
            <param name="lockElement">The SRC.Lock element to parse.</param>
            <param name="context">The parser context to use.</param>
            <returns>A LockStatement created from the given lockElement.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.ParseExpression(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Creates an Expression from the given element.
            </summary>
            <param name="element">The element to parse.</param>
            <param name="context">The parser context to use.</param>
            <returns>An Expression parsed from the element.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.ParseExpression``1(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Creates an Expression from the given element.
            </summary>
            <typeparam name="T">The type of use to use when parsing name elements.</typeparam>
            <param name="element">The element to parse.</param>
            <param name="context">The parser context to use.</param>
            <returns>An Expression parsed from the element.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.ParseExpression(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},ABB.SrcML.Data.ParserContext)">
            <summary>
            Parses (possibly) multiple expression component elements, and combines them into an Expression. 
            All the elements must have the same parent.
            </summary>
            <param name="elements">The expression component elements to parse.</param>
            <param name="context">The parser context to use.</param>
            <returns>An Expression with each of the parsed elements as its components. 
            If <paramref name="elements"/> contains only a single value, the result will be the same as if it were parsed directly..</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.ParseExpression``1(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},ABB.SrcML.Data.ParserContext)">
            <summary>
            Parses (possibly) multiple expression component elements, and combines them into an Expression. 
            All the elements must have the same parent.
            </summary>
            <typeparam name="T">The use type to use when parsing name elements.</typeparam>
            <param name="elements">The expression component elements to parse.</param>
            <param name="context">The parser context to use.</param>
            <returns>An Expression with each of the parsed elements as its components. 
            If <paramref name="elements"/> contains only a single value, the result will be the same as if it were parsed directly..</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.ParseExpressionElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Creates an <see cref="T:ABB.SrcML.Data.Expression"/> object for <paramref name="expElement"/>.
            </summary>
            <param name="expElement">The SRC.Expression element to parse.</param>
            <param name="context">The context to use.</param>
            <returns>A <see cref="T:ABB.SrcML.Data.Expression"/> corresponding to <paramref name="expElement"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.ParseDeclarationElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Creates a variable declaration object from the given declaration element
            </summary>
            <param name="declElement">The SRC.Declaration element to parse.</param>
            <param name="context">The parser context.</param>
            <returns>A VariableDeclaration object corresponding to the given element.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.ParseNameUseElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Creates a NameUse object from the given name element.
            </summary>
            <param name="nameElement">The SRC.Name element to parse.</param>
            <param name="context">The parser context to use.</param>
            <returns>A NameUse corresponding to <paramref name="nameElement"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.ParseNameUseElement``1(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Creates a use object from the given name element.
            </summary>
            <typeparam name="T">The type of use to use for the name element. This must inherit from NameUse.</typeparam>
            <param name="nameElement">The SRC.Name element to parse.</param>
            <param name="context">The parser context to use.</param>
            <returns>A use corresponding to <paramref name="nameElement"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.ParseOperatorElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Creates an OperatorUse object from the given operator element.
            </summary>
            <param name="operatorElement">The OP.Operator element to parse.</param>
            <param name="context">The parser context to use.</param>
            <returns>An OperatorUse corresponding to <paramref name="operatorElement"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.ParseTypeUseElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Creates a <see cref="T:ABB.SrcML.Data.TypeUse"/> object for <paramref name="typeUseElement"/>.
            </summary>
            <param name="typeUseElement">The type use element to parse. This must be a SRC.Type or SRC.Name element.</param>
            <param name="context">The context to use.</param>
            <returns>A <see cref="T:ABB.SrcML.Data.TypeUse"/> corresponding to <paramref name="typeUseElement"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.ParseNamePrefix(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Parses the prefix out of the given name element, if it contains one.
            In a name usage like System.IO.File, File is the name and System.IO is the prefix.
            </summary>
            <param name="nameElement">The SRC.Name element to parse.</param>
            <param name="context">The parser context to use.</param>
            <returns>A NamePrefix object, or null if <paramref name="nameElement"/> contains no prefix.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.ParseCallElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Creates an <see cref="T:ABB.SrcML.Data.Expression"/> object for <paramref name="callElement"/>.
            </summary>
            <param name="callElement">The SRC.Call element to parse.</param>
            <param name="context">The context to use.</param>
            <returns>An <see cref="T:ABB.SrcML.Data.Expression"/> corresponding to <paramref name="callElement"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.ParseLiteralElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Creates a LiteralUse object from the given element
            </summary>
            <param name="literalElement">The element to parse. Must be a <see cref="F:ABB.SrcML.LIT.Literal"/> element.</param>
            <param name="context">the parser context</param>
            <returns>A LiteralUse corresponding to <paramref name="literalElement"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.ParseVariableUse(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Creates an <see cref="T:ABB.SrcML.Data.Expression"/> object for <paramref name="nameElement"/>.
            This returns an Expression rather than a VariableUse because any calling expression nested within the
            nameElement will be parsed and added to an Expression along with a VariableUse.
            </summary>
            <param name="nameElement">The SRC.Name element to parse.</param>
            <param name="context">The context to use.</param>
            <returns>An <see cref="T:ABB.SrcML.Data.Expression"/> corresponding to <paramref name="nameElement"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.GetAccessModifierForMethod(System.Xml.Linq.XElement)">
            <summary>
            Gets the access modifier for this method. For Java and C#, a "specifier" tag is placed
            in either the methodElement, or the typeElement in the method.
            </summary>
            <param name="methodElement">The methodElement</param>
            <returns>The first specifier encountered. If none, it returns see
            cref="AccessModifier.None"/></returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.GetAccessModifierForType(System.Xml.Linq.XElement)">
            <summary>
            Gets the access modifier for the given type
            </summary>
            <param name="typeElement">The type XElement</param>
            <returns>The access modifier for the type.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.GetAccessModifierFromTypeUseElement(System.Xml.Linq.XElement)">
            <summary>
            Determines the access modifier used within a type use element, i.e. SRC.Type
            </summary>
            <param name="typeElement">A SRC.Type element</param>
            <returns>An AccessModifier based on the specifier elements in the type use.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.GetAccessModifier(System.Xml.Linq.XElement)">
            <summary>
            Determines the access modifier used within the given element. This element must have SRC.Specifier element(s) as its children.
            </summary>
            <param name="element">An element that may contain children of type SRC.Specifer.</param>
            <returns>The access modifier used.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.GetTypeForBooleanLiteral(System.String)">
            <summary>
            Gets the type for a boolean literal
            </summary>
            <param name="literalValue">The literal value to parse</param>
            <returns>The type name</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.GetTypeForCharacterLiteral(System.String)">
            <summary>
            Gets the type for a character literal
            </summary>
            <param name="literalValue">the literal value to parse</param>
            <returns>The type name</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.GetTypeForLiteralValue(ABB.SrcML.Data.LiteralKind,System.String)">
            <summary>
            Gets the type of the literal element
            </summary>
            <param name="kind">The literal kind</param>
            <param name="literalValue">The value</param>
            <returns>The name of this type</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.GetTypeForNumberLiteral(System.String)">
            <summary>
            Gets the type for a number literal
            </summary>
            <param name="literalValue">The literal value to parse</param>
            <returns>The type name</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.GetTypeForStringLiteral(System.String)">
            <summary>
            Gets the type for a string literal
            </summary>
            <param name="literalValue">The literal value to parse</param>
            <returns>The type name</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.ContainerIsReference(System.Xml.Linq.XElement)">
            <summary>
            Checks to see if this callElement is a reference container
            </summary>
            <param name="element">The callElement to check</param>
            <returns>True if this is a reference container; false otherwise</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.GetFileNameForUnit(System.Xml.Linq.XElement)">
            <summary>
            Gets the filename for the given file unit.
            </summary>
            <param name="fileUnit">The file unit. <c>fileUnit.Name</c> must be /c></param>
            <returns>The file path represented by this
            <paramref name="fileUnit"/></returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.GetNameForMethod(System.Xml.Linq.XElement)">
            <summary>
            Gets the name for the method callElement
            </summary>
            <param name="methodElement">the method callElement to get the name for</param>
            <returns>The name of the method</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.GetNameForType(System.Xml.Linq.XElement)">
            <summary>
            Gets the name for the type element
            </summary>
            <param name="typeElement">The type element to get the name for</param>
            <returns>The name of the type</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.GetTextNodes(System.Xml.Linq.XElement)">
            <summary>
            Gets all of the text nodes that are children of the given element.
            </summary>
            <param name="element">The element</param>
            <returns>An enumerable of the XText elements for
            <paramref name="element"/></returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.GetChildExpressions(System.Xml.Linq.XElement)">
            <summary>
            Get the children of <paramref name="element"/> that are expressions.
            These may be elements of type SRC.Expression, SRC.Declaration or SRC.FunctionDeclaration.
            </summary>
            <param name="element">The parent element from which to find the child expressions.</param>
            <returns>An enumerable of the expression elements, or an empty enumerable if none is found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="element"/> is null.</exception>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.GetFirstChildExpression(System.Xml.Linq.XElement)">
            <summary>
            Get the first child of <paramref name="element"/> that is an expression.
            This might be an element of type SRC.Expression, SRC.Declaration or SRC.FunctionDeclaration.
            </summary>
            <param name="element">The parent element from which to find the child expression.</param>
            <returns>The first expression element, or null if none is found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="element"/> is null.</exception>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractCodeParser.MergeExpressions(ABB.SrcML.Data.Expression,ABB.SrcML.Data.Expression)">
            <summary>
            Creates a new expression containing the components of expression <paramref name="a"/> and the components of expression <paramref name="b"/>.
            If either expression does not have components, the root expression itself will be included instead.
            The expressions must be adjacent to each other in the original srcml.
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.AbstractCodeParser.AliasElementName">
            <summary> Returns the XName that represents an import or alias statement. </summary>
        </member>
        <member name="P:ABB.SrcML.Data.AbstractCodeParser.ContainerReferenceElementNames">
            <summary> Returns the XNames that represent reference elements (such as function_decl and class_decl) </summary>
        </member>
        <member name="P:ABB.SrcML.Data.AbstractCodeParser.MethodElementNames">
            <summary> Returns the XNames that represent types for this language. </summary>
        </member>
        <member name="P:ABB.SrcML.Data.AbstractCodeParser.NamespaceElementNames">
            <summary> Returns the XNames that represent namespaces for this language. </summary>
        </member>
        <member name="P:ABB.SrcML.Data.AbstractCodeParser.TypeElementNames">
            <summary> Returns the XNames that represent types for this language. </summary>
        </member>
        <member name="P:ABB.SrcML.Data.AbstractCodeParser.VariableDeclarationElementNames">
            <summary> Returns the XNames that represent variable declarations for this language. </summary>
        </member>
        <member name="P:ABB.SrcML.Data.AbstractCodeParser.ParserLanguage">
            <summary> Returns the Language that this parser supports. </summary>
        </member>
        <member name="P:ABB.SrcML.Data.AbstractCodeParser.UnknownLog">
            <summary>
            Writer to log unknown elements to. If null no logging is done
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.AbstractProgramElement">
            <summary>
            An abstract class representing a thing in a program. This exists to hold functionality common to
            both Statements and Expressions.
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.IXmlElement">
            <summary>
            IXmlElement is an internal interface used to aid in serialization. The <see cref="M:ABB.SrcML.Data.IXmlElement.GetXmlName"/> method is used by the
            serialization code to determine the XML element to surround the contents.
            
            In order to support both serialization and deserialization, there is a pattern for implementing this method:
            
            <example>
            This is how to implement <see cref="M:ABB.SrcML.Data.IXmlElement.GetXmlName"/> in order to support serialization and deserialization.
            <code>
            public class MyClass : IXmlElement {
                public const string XmlName = "MyClass";
                
                public string GetXmlName() { return MyClass.XmlName; }
            }
            </code>
            </example>
            
            If your new class is a subclass of <see cref="T:ABB.SrcML.Data.Statement"/> or <see cref="T:ABB.SrcML.Data.Expression"/>, you should also add it to
            either <see cref="F:ABB.SrcML.Data.XmlSerialization.XmlStatementMap"/> or <see cref="F:ABB.SrcML.Data.XmlSerialization.XmlExpressionMap"/>.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.IXmlElement.GetXmlName">
            <summary>
            Returns the default XML element name to use for this class.
            </summary>
            <returns>The XML element name</returns>
        </member>
        <member name="F:ABB.SrcML.Data.AbstractProgramElement.LanguageXmlName">
            <summary> XML Name for <see cref="P:ABB.SrcML.Data.AbstractProgramElement.ProgrammingLanguage"/> </summary>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractProgramElement.GetParent">
            <summary>Returns the parent of this element.</summary>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractProgramElement.GetChildren">
            <summary>Returns the children of this element.</summary>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractProgramElement.GetXmlName">
            <summary> Returns the XML name for this program element. </summary>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractProgramElement.GetAncestors">
            <summary>
            Gets all of the parents of this element
            </summary>
            <returns>The parents of this element</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractProgramElement.GetAncestors``1">
            <summary>
            Gets all of the parents of type <typeparamref name="T"/> of this element.
            </summary>
            <typeparam name="T">The type to filter the parent elements by</typeparam>
            <returns>The parents of type <typeparamref name="T"/></returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractProgramElement.GetAncestorsAndSelf">
            <summary>
            Gets all of parents of this element as well as this element.
            </summary>
            <returns>This element followed by its parents</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractProgramElement.GetAncestorsAndSelf``1">
            <summary>
            Gets all of the parents of this element as well as the element itself where the type is <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to filter the parent elements by</typeparam>
            <returns>This element followed by its parent elements where the type is <typeparamref name="T"/></returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractProgramElement.GetDescendants">
            <summary>
            Gets all of the descendant elements of this statement. This is every element that is rooted at this element.
            </summary>
            <returns>The descendants of this statement</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractProgramElement.GetDescendants``1">
            <summary>
            Gets all of the descendant elements of this element where the type is <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to filter the descendant elements by</typeparam>
            <returns>The descendants of type <typeparamref name="T"/> of this element</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractProgramElement.GetDescendantsAndSelf">
            <summary>
            Gets all of the descendants of this element as well as the element itself.
            </summary>
            <returns>This element, followed by all of its descendants</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractProgramElement.GetDescendantsAndSelf``1">
            <summary>
            Gets all of the descendants of this element as well as the element itself where the type is <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to filter the descendant elements by</typeparam>
            <returns>This element and its descendants where the type is <typeparamref name="T"/></returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractProgramElement.GetSiblingsBeforeSelf">
            <summary>
            Returns the siblings of this element (i.e. the children of its parent) that occur before this element.
            The siblings are returned in document order.
            </summary>
            <exception cref="T:System.InvalidOperationException">This element is not a child of its parent.</exception>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractProgramElement.GetSiblingsBeforeSelf``1">
            <summary>
            Returns the siblings of this element (i.e. the children of its parent) that occur before this element
            and have type T.
            The siblings are returned in document order.
            </summary>
            <exception cref="T:System.InvalidOperationException">This element is not a child of its parent.</exception>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractProgramElement.GetSiblingsAfterSelf">
            <summary>
            Returns the siblings of this element (i.e. the children of its parent) that occur after this element.
            The siblings are returned in document order.
            </summary>
            <exception cref="T:System.InvalidOperationException">This element is not a child of its parent.</exception>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractProgramElement.GetSiblingsAfterSelf``1">
            <summary>
            Returns the siblings of this element (i.e. the children of its parent) that occur after this element
            and have type T.
            The siblings are returned in document order.
            </summary>
            <exception cref="T:System.InvalidOperationException">This element is not a child of its parent.</exception>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractProgramElement.GetAncestorsAndStartingPoint(ABB.SrcML.Data.AbstractProgramElement)">
            <summary>
            Gets an element and all of its ancestors
            </summary>
            <param name="startingPoint">The first element to return</param>
            <returns>The <paramref name="startingPoint"/> and all of its ancestors</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractProgramElement.GetSchema">
            <summary> Returns the XML schema for this program element. </summary>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractProgramElement.ReadXml(System.Xml.XmlReader)">
            <summary>
            Read the current XML element into this object
            </summary>
            <param name="reader">The XML reader</param>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractProgramElement.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes all of the data to be serialized to <paramref name="writer"/>.
            This works by calling <see cref="M:ABB.SrcML.Data.AbstractProgramElement.WriteXmlAttributes(System.Xml.XmlWriter)"/>
            and then <see cref="M:ABB.SrcML.Data.AbstractProgramElement.WriteXmlContents(System.Xml.XmlWriter)"/>
            </summary>
            <param name="writer">The XML writer</param>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractProgramElement.ReadXmlAttributes(System.Xml.XmlReader)">
            <summary>
            Read the XML attributes from the current <paramref name="reader"/> position
            </summary>
            <param name="reader">The XML reader</param>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractProgramElement.WriteXmlAttributes(System.Xml.XmlWriter)">
            <summary>
            Writes XML attributes from this object to the XML writer
            </summary>
            <param name="writer">The XML writer</param>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractProgramElement.ReadXmlChild(System.Xml.XmlReader)">
            <summary>
            Processes the child of the current reader position into a child of this object.
            </summary>
            <param name="reader">The XML reader</param>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractProgramElement.WriteXmlContents(System.Xml.XmlWriter)">
            <summary>
            Writes the contents of this object to <paramref name="writer"/>.
            </summary>
            <param name="writer">The XML writer to write to</param>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractProgramElement.GetDescendants(ABB.SrcML.Data.AbstractProgramElement,System.Boolean)">
            <summary>
            Gets the <paramref name="startingPoint"/> (if <paramref name="returnStartingPoint"/> is true) and all of the descendants of the <paramref name="startingPoint"/>.
            </summary>
            <param name="startingPoint">The starting point</param>
            <param name="returnStartingPoint">If true, return the starting point first. Otherwise, just return  the descendants.</param>
            <returns><paramref name="startingPoint"/> (if <paramref name="returnStartingPoint"/> is true) and its descendants</returns>
        </member>
        <member name="P:ABB.SrcML.Data.AbstractProgramElement.ProgrammingLanguage">
            <summary>The language that this statement is written in.</summary>
        </member>
        <member name="T:ABB.SrcML.Data.AbstractQuery`1">
            <summary>
            Queries perform read-only operations on <see cref="T:ABB.SrcML.Data.AbstractWorkingSet"/> objects
            </summary>
            <typeparam name="TResult">The return type from the query</typeparam>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQuery`1.#ctor(ABB.SrcML.Data.AbstractWorkingSet,System.Threading.Tasks.TaskFactory)">
            <summary>
            Creates a new query object
            </summary>
            <param name="workingSet">The working set for this query</param>
            <param name="factory">The task factory for this query</param>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQuery`1.#ctor(ABB.SrcML.Data.AbstractWorkingSet,System.Int32)">
            <summary>
            Creates a new query object
            </summary>
            <param name="workingSet">The working set for this query</param>
            <param name="lockTimeout">The timeout to use for this query</param>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQuery`1.#ctor(ABB.SrcML.Data.AbstractWorkingSet,System.Int32,System.Threading.Tasks.TaskFactory)">
            <summary>
            Creates a new query object
            </summary>
            <param name="workingSet">The working set for this query</param>
            <param name="lockTimeout">The read lock timeout to use for this query</param>
            <param name="factory">The task factory for this query</param>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQuery`1.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            <see cref="M:ABB.SrcML.Data.AbstractQuery`1.Execute(ABB.SrcML.Data.Statement)">Executes the query</see> asynchronously on the <see cref="P:ABB.SrcML.Data.AbstractQuery`1.WorkingSet"/>
            </summary>
            <param name="cancellationToken">the cancellation token</param>
            <returns>A task with the query result</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQuery`1.ExecuteAsync">
            <summary>
            <see cref="M:ABB.SrcML.Data.AbstractQuery`1.Execute(ABB.SrcML.Data.Statement)">Executes the query</see> asynchronously on the <see cref="P:ABB.SrcML.Data.AbstractQuery`1.WorkingSet"/>
            </summary>
            <returns>A task with the query result</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQuery`1.Execute">
            <summary>
            <see cref="M:ABB.SrcML.Data.AbstractQuery`1.Execute(ABB.SrcML.Data.Statement)">Executes the query</see> on the <see cref="P:ABB.SrcML.Data.AbstractQuery`1.WorkingSet"/>
            </summary>
            <returns>The query result</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQuery`1.Execute(ABB.SrcML.Data.Statement)">
            <summary>
            Executes the query on <paramref name="root"/>
            </summary>
            <param name="root">The root to query</param>
            <returns>The query result</returns>
        </member>
        <member name="P:ABB.SrcML.Data.AbstractQuery`1.LockTimeout">
            <summary>
            The amount of time to wait for the <see cref="M:ABB.SrcML.Data.AbstractWorkingSet.TryObtainReadLock(System.Int32,ABB.SrcML.Data.NamespaceDefinition@)">read lock</see>
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.AbstractQuery`1.WorkingSet">
            <summary>
            The working set for this query
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.AbstractQuery`1.Factory">
            <summary>
            The task factory for asynchronous operations
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.AbstractQueryBase`2">
            <summary>
            This class is used to support query objects that have multiple parameters
            </summary>
            <typeparam name="TTuple">A tuple of the query parameters</typeparam>
            <typeparam name="TResult">The query result type</typeparam>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQueryBase`2.#ctor(ABB.SrcML.Data.AbstractWorkingSet,System.Int32,System.Threading.Tasks.TaskFactory)">
            <summary>
            Creates a new query object
            </summary>
            <param name="workingSet">The working set for this query</param>
            <param name="lockTimeout">The read lock timeout to use for this query</param>
            <param name="factory">The task factory for this query</param>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQueryBase`2.ExecuteAsync(`0,System.Threading.CancellationToken)">
            <summary>
            <see cref="M:ABB.SrcML.Data.AbstractQueryBase`2.ExecuteImpl(ABB.SrcML.Data.Statement,`0)">Executes the query</see> asynchronously on <see cref="P:ABB.SrcML.Data.AbstractQueryBase`2.WorkingSet"/>
            </summary>
            <param name="parameterTuple">A tuple with the query parameters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A task with the query result</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQueryBase`2.Execute(`0)">
            <summary>
            <see cref="M:ABB.SrcML.Data.AbstractQueryBase`2.ExecuteImpl(ABB.SrcML.Data.Statement,`0)">Executes the query</see> asynchronously on <see cref="P:ABB.SrcML.Data.AbstractQueryBase`2.WorkingSet"/>
            </summary>
            <param name="parameterTuple">A tuple with the query parameters</param>
            <returns>A task with the query result</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQueryBase`2.ExecuteImpl(ABB.SrcML.Data.Statement,`0)">
            <summary>
            Executes the query on <paramref name="root"/>
            </summary>
            <param name="root">The root to query</param>
            <param name="parameterTuple">A tuple with the query parameters</param>
            <returns>The query result</returns>
        </member>
        <member name="P:ABB.SrcML.Data.AbstractQueryBase`2.LockTimeout">
            <summary>
            The amount of time to wait for the <see cref="M:ABB.SrcML.Data.AbstractWorkingSet.TryObtainReadLock(System.Int32,ABB.SrcML.Data.NamespaceDefinition@)">read lock</see>
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.AbstractQueryBase`2.WorkingSet">
            <summary>
            The working set for this query
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.AbstractQueryBase`2.Factory">
            <summary>
            The task factory for asynchronous operations
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.AbstractQuery`2">
            <summary>
            An abstract query with one parameter
            </summary>
            <typeparam name="TParam">The query parameter type</typeparam>
            <typeparam name="TResult">The query result type</typeparam>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQuery`2.#ctor(ABB.SrcML.Data.AbstractWorkingSet,System.Int32)">
            <summary>
            Creates a new query object
            </summary>
            <param name="workingSet">The working set for this query</param>
            <param name="lockTimeout">The read lock timeout to use for this query</param>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQuery`2.#ctor(ABB.SrcML.Data.AbstractWorkingSet,System.Int32,System.Threading.Tasks.TaskFactory)">
            <summary>
            Creates a new query object
            </summary>
            <param name="workingSet">The working set for this query</param>
            <param name="lockTimeout">The read lock timeout to use for this query</param>
            <param name="factory">The task factory for this query</param>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQuery`2.ExecuteAsync(`0)">
            <summary>
            <see cref="M:ABB.SrcML.Data.AbstractQuery`2.Execute(ABB.SrcML.Data.Statement,`0)">Executes the query</see> asynchronously on the <see cref="P:ABB.SrcML.Data.AbstractQueryBase`2.WorkingSet"/>
            </summary>
            <param name="parameter">The first query parameter</param>
            <returns>A task with the query result</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQuery`2.ExecuteAsync(`0,System.Threading.CancellationToken)">
            <summary>
            <see cref="M:ABB.SrcML.Data.AbstractQuery`2.Execute(ABB.SrcML.Data.Statement,`0)">Executes the query</see> asynchronously on the <see cref="P:ABB.SrcML.Data.AbstractQueryBase`2.WorkingSet"/>
            </summary>
            <param name="parameter">The query parameter</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A task with the query result</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQuery`2.Execute(`0)">
            <summary>
            <see cref="M:ABB.SrcML.Data.AbstractQuery`2.Execute(ABB.SrcML.Data.Statement,`0)">Executes the query</see> on the <see cref="P:ABB.SrcML.Data.AbstractQueryBase`2.WorkingSet"/>
            </summary>
            <param name="parameter">The query parameter</param>
            <returns>A task with the query result</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQuery`2.Execute(ABB.SrcML.Data.Statement,`0)">
            <summary>
            Executes the query on the given <paramref name="root"/>
            </summary>
            <param name="root">The root to start the query at</param>
            <param name="parameter">The query parameter</param>
            <returns>The query result</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQuery`2.ExecuteImpl(ABB.SrcML.Data.Statement,System.Tuple{`0})">
            <summary>
            Executes the query on <paramref name="root"/>
            </summary>
            <param name="root">The root to query</param>
            <param name="parameterTuple">A tuple with the query parameters</param>
            <returns>The query result</returns>
        </member>
        <member name="T:ABB.SrcML.Data.AbstractQuery`3">
            <summary>
            An abstract query with two parameters
            </summary>
            <typeparam name="TParam1">The type for the first query parameter</typeparam>
            <typeparam name="TParam2">The type for the second query parameter</typeparam>
            <typeparam name="TResult">The query result type</typeparam>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQuery`3.#ctor(ABB.SrcML.Data.AbstractWorkingSet,System.Int32)">
            <summary>
            Creates a new query object
            </summary>
            <param name="workingSet">The working set for this query</param>
            <param name="lockTimeout">The read lock timeout to use for this query</param>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQuery`3.#ctor(ABB.SrcML.Data.AbstractWorkingSet,System.Int32,System.Threading.Tasks.TaskFactory)">
            <summary>
            Creates a new query object
            </summary>
            <param name="workingSet">The working set for this query</param>
            <param name="lockTimeout">The read lock timeout to use for this query</param>
            <param name="factory">The task factory for this query</param>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQuery`3.ExecuteAsync(`0,`1,System.Threading.CancellationToken)">
            <summary>
            <see cref="M:ABB.SrcML.Data.AbstractQuery`3.Execute(ABB.SrcML.Data.Statement,`0,`1)">Executes the query</see> asynchronously on the <see cref="P:ABB.SrcML.Data.AbstractQueryBase`2.WorkingSet"/>
            </summary>
            <param name="parameter1">The first query parameter</param>
            <param name="parameter2">The second query parameter</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A task with the query result</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQuery`3.ExecuteAsync(`0,`1)">
            <summary>
            <see cref="M:ABB.SrcML.Data.AbstractQuery`3.Execute(ABB.SrcML.Data.Statement,`0,`1)">Executes the query</see> asynchronously on the <see cref="P:ABB.SrcML.Data.AbstractQueryBase`2.WorkingSet"/>
            </summary>
            <param name="parameter1">The first query parameter</param>
            <param name="parameter2">The second query parameter</param>
            <returns>A task with the query result</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQuery`3.Execute(`0,`1)">
            <summary>
            <see cref="M:ABB.SrcML.Data.AbstractQuery`3.Execute(ABB.SrcML.Data.Statement,`0,`1)">Executes the query</see> on the <see cref="P:ABB.SrcML.Data.AbstractQueryBase`2.WorkingSet"/>
            </summary>
            <param name="parameter1">The first query parameter</param>
            <param name="parameter2">The second query parameter</param>
            <returns>The query result</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQuery`3.Execute(ABB.SrcML.Data.Statement,`0,`1)">
            <summary>
            Executes the query on <paramref name="root"/>
            </summary>
            <param name="root">The root to query</param>
            <param name="parameter1">The first query parameter</param>
            <param name="parameter2">The second query parameter</param>
            <returns>The query result</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQuery`3.ExecuteImpl(ABB.SrcML.Data.Statement,System.Tuple{`0,`1})">
            <summary>
            Executes the query on <paramref name="root"/>
            </summary>
            <param name="root">The root to query</param>
            <param name="parameter">A tuple with the query parameters</param>
            <returns>The query result</returns>
        </member>
        <member name="T:ABB.SrcML.Data.AbstractQuery`4">
            <summary>
            An abstract query with three parameters
            </summary>
            <typeparam name="TParam1">The type for the first query parameter</typeparam>
            <typeparam name="TParam2">The type for the second query parameter</typeparam>
            <typeparam name="TParam3">The type for the 3rd query parameter</typeparam>
            <typeparam name="TResult">The query result type</typeparam>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQuery`4.#ctor(ABB.SrcML.Data.AbstractWorkingSet,System.Int32)">
            <summary>
            Creates a new query object
            </summary>
            <param name="workingSet">The working set for this query</param>
            <param name="lockTimeout">The read lock timeout to use for this query</param>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQuery`4.#ctor(ABB.SrcML.Data.AbstractWorkingSet,System.Int32,System.Threading.Tasks.TaskFactory)">
            <summary>
            Creates a new query object
            </summary>
            <param name="workingSet">The working set for this query</param>
            <param name="lockTimeout">The read lock timeout to use for this query</param>
            <param name="factory">The task factory for this query</param>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQuery`4.ExecuteAsync(`0,`1,`2,System.Threading.CancellationToken)">
            <summary>
            <see cref="M:ABB.SrcML.Data.AbstractQuery`4.Execute(ABB.SrcML.Data.Statement,`0,`1,`2)">Executes the query</see> asynchronously on the <see cref="P:ABB.SrcML.Data.AbstractQueryBase`2.WorkingSet"/>
            </summary>
            <param name="parameter1">The first query parameter</param>
            <param name="parameter2">The second query parameter</param>
            <param name="parameter3">The third query parameter</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A task with the query result</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQuery`4.ExecuteAsync(`0,`1,`2)">
            <summary>
            <see cref="M:ABB.SrcML.Data.AbstractQuery`4.Execute(ABB.SrcML.Data.Statement,`0,`1,`2)">Executes the query</see> asynchronously on the <see cref="P:ABB.SrcML.Data.AbstractQueryBase`2.WorkingSet"/>
            </summary>
            <param name="parameter1">The first query parameter</param>
            <param name="parameter2">The second query parameter</param>
            <param name="parameter3">The third query parameter</param>
            <returns>A task with the query result</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQuery`4.Execute(`0,`1,`2)">
            <summary>
            <see cref="M:ABB.SrcML.Data.AbstractQuery`4.Execute(ABB.SrcML.Data.Statement,`0,`1,`2)">Executes the query</see> on the <see cref="P:ABB.SrcML.Data.AbstractQueryBase`2.WorkingSet"/>
            </summary>
            <param name="parameter1">The first query parameter</param>
            <param name="parameter2">The second query parameter</param>
            <param name="parameter3">The third query parameter</param>
            <returns>The query result</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQuery`4.Execute(ABB.SrcML.Data.Statement,`0,`1,`2)">
            <summary>
            Executes the query on <paramref name="root"/>
            </summary>
            <param name="root">The root to query</param>
            <param name="parameter1">The first query parameter</param>
            <param name="parameter2">The second query parameter</param>
            <param name="parameter3">The third query parameter</param>
            <returns>The query result</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQuery`4.ExecuteImpl(ABB.SrcML.Data.Statement,System.Tuple{`0,`1,`2})">
            <summary>
            Executes the query on <paramref name="root"/>
            </summary>
            <param name="root">The root to query</param>
            <param name="parameter">A tuple with the query parameters</param>
            <returns>The query result</returns>
        </member>
        <member name="T:ABB.SrcML.Data.AbstractQuery`5">
            <summary>
            An abstract query with four parameters
            </summary>
            <typeparam name="TParam1">The type for the first query parameter</typeparam>
            <typeparam name="TParam2">The type for the second query parameter</typeparam>
            <typeparam name="TParam3">The type for the third query parameter</typeparam>
            <typeparam name="TParam4">The type for the fourth query parameter</typeparam>
            <typeparam name="TResult">The query result type</typeparam>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQuery`5.#ctor(ABB.SrcML.Data.AbstractWorkingSet,System.Int32)">
            <summary>
            Creates a new query object
            </summary>
            <param name="workingSet">The working set for this query</param>
            <param name="lockTimeout">The read lock timeout to use for this query</param>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQuery`5.#ctor(ABB.SrcML.Data.AbstractWorkingSet,System.Int32,System.Threading.Tasks.TaskFactory)">
            <summary>
            Creates a new query object
            </summary>
            <param name="workingSet">The working set for this query</param>
            <param name="lockTimeout">The read lock timeout to use for this query</param>
            <param name="factory">The task factory for this query</param>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQuery`5.ExecuteAsync(`0,`1,`2,`3,System.Threading.CancellationToken)">
            <summary>
            <see cref="M:ABB.SrcML.Data.AbstractQuery`5.Execute(ABB.SrcML.Data.Statement,`0,`1,`2,`3)">Executes the query</see> asynchronously on the <see cref="P:ABB.SrcML.Data.AbstractQueryBase`2.WorkingSet"/>
            </summary>
            <param name="parameter1">The first query parameter</param>
            <param name="parameter2">The second query parameter</param>
            <param name="parameter3">The third query parameter</param>
            <param name="parameter4">The fourth query parameter</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A task with the query result</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQuery`5.ExecuteAsync(`0,`1,`2,`3)">
            <summary>
            <see cref="M:ABB.SrcML.Data.AbstractQuery`5.Execute(ABB.SrcML.Data.Statement,`0,`1,`2,`3)">Executes the query</see> asynchronously on the <see cref="P:ABB.SrcML.Data.AbstractQueryBase`2.WorkingSet"/>
            </summary>
            <param name="parameter1">The first query parameter</param>
            <param name="parameter2">The second query parameter</param>
            <param name="parameter3">The third query parameter</param>
            <param name="parameter4">The fourth query parameter</param>
            <returns>A task with the query result</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQuery`5.Execute(`0,`1,`2,`3)">
            <summary>
            <see cref="M:ABB.SrcML.Data.AbstractQuery`5.Execute(ABB.SrcML.Data.Statement,`0,`1,`2,`3)">Executes the query</see> on the <see cref="P:ABB.SrcML.Data.AbstractQueryBase`2.WorkingSet"/>
            </summary>
            <param name="parameter1">The first query parameter</param>
            <param name="parameter2">The second query parameter</param>
            <param name="parameter3">The third query parameter</param>
            <param name="parameter4">The fourth query parameter</param>
            <returns>The query result</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQuery`5.Execute(ABB.SrcML.Data.Statement,`0,`1,`2,`3)">
            <summary>
            Executes the query on <paramref name="root"/>
            </summary>
            <param name="root">The root to query</param>
            <param name="parameter1">The first query parameter</param>
            <param name="parameter2">The second query parameter</param>
            <param name="parameter3">The third query parameter</param>
            <param name="parameter4">The fourth query parameter</param>
            <returns>The query result</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQuery`5.ExecuteImpl(ABB.SrcML.Data.Statement,System.Tuple{`0,`1,`2,`3})">
            <summary>
            Executes the query on <paramref name="root"/>
            </summary>
            <param name="root">The root to query</param>
            <param name="parameter">A tuple with the query parameters</param>
            <returns>The query result</returns>
        </member>
        <member name="T:ABB.SrcML.Data.AbstractQuery`6">
            <summary>
            An abstract query with five parameters
            </summary>
            <typeparam name="TParam1">The type for the first query parameter</typeparam>
            <typeparam name="TParam2">The type for the second query parameter</typeparam>
            <typeparam name="TParam3">The type for the third query parameter</typeparam>
            <typeparam name="TParam4">The type for the fourth query parameter</typeparam>
            <typeparam name="TParam5">The type for the fifth query parameter</typeparam>
            <typeparam name="TResult">The query result type</typeparam>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQuery`6.#ctor(ABB.SrcML.Data.AbstractWorkingSet,System.Int32)">
            <summary>
            Creates a new query object
            </summary>
            <param name="workingSet">The working set for this query</param>
            <param name="lockTimeout">The read lock timeout to use for this query</param>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQuery`6.#ctor(ABB.SrcML.Data.AbstractWorkingSet,System.Int32,System.Threading.Tasks.TaskFactory)">
            <summary>
            Creates a new query object
            </summary>
            <param name="workingSet">The working set for this query</param>
            <param name="lockTimeout">The read lock timeout to use for this query</param>
            <param name="factory">The task factory for this query</param>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQuery`6.ExecuteAsync(`0,`1,`2,`3,`4,System.Threading.CancellationToken)">
            <summary>
            <see cref="M:ABB.SrcML.Data.AbstractQuery`6.Execute(ABB.SrcML.Data.Statement,`0,`1,`2,`3,`4)">Executes the query</see> asynchronously on the <see cref="P:ABB.SrcML.Data.AbstractQueryBase`2.WorkingSet"/>
            </summary>
            <param name="parameter1">The first query parameter</param>
            <param name="parameter2">The second query parameter</param>
            <param name="parameter3">The third query parameter</param>
            <param name="parameter4">The fourth query parameter</param>
            <param name="parameter5">The fifth query parameter</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A task with the query result</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQuery`6.ExecuteAsync(`0,`1,`2,`3,`4)">
            <summary>
            <see cref="M:ABB.SrcML.Data.AbstractQuery`6.Execute(ABB.SrcML.Data.Statement,`0,`1,`2,`3,`4)">Executes the query</see> asynchronously on the <see cref="P:ABB.SrcML.Data.AbstractQueryBase`2.WorkingSet"/>
            </summary>
            <param name="parameter1">The first query parameter</param>
            <param name="parameter2">The second query parameter</param>
            <param name="parameter3">The third query parameter</param>
            <param name="parameter4">The fourth query parameter</param>
            <param name="parameter5">The fifth query parameter</param>
            <returns>A task with the query result</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQuery`6.Execute(`0,`1,`2,`3,`4)">
            <summary>
            <see cref="M:ABB.SrcML.Data.AbstractQuery`6.Execute(ABB.SrcML.Data.Statement,`0,`1,`2,`3,`4)">Executes the query</see> asynchronously on the <see cref="P:ABB.SrcML.Data.AbstractQueryBase`2.WorkingSet"/>
            </summary>
            <param name="parameter1">The first query parameter</param>
            <param name="parameter2">The second query parameter</param>
            <param name="parameter3">The third query parameter</param>
            <param name="parameter4">The fourth query parameter</param>
            <param name="parameter5">The fifth query parameter</param>
            <returns>The query result</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQuery`6.Execute(ABB.SrcML.Data.Statement,`0,`1,`2,`3,`4)">
            <summary>
            Executes the query on <paramref name="root"/>
            </summary>
            <param name="root">The root to query</param>
            <param name="parameter1">The first query parameter</param>
            <param name="parameter2">The second query parameter</param>
            <param name="parameter3">The third query parameter</param>
            <param name="parameter4">The fourth query parameter</param>
            <param name="parameter5">The fifth query parameter</param>
            <returns>The query result</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractQuery`6.ExecuteImpl(ABB.SrcML.Data.Statement,System.Tuple{`0,`1,`2,`3,`4})">
            <summary>
            Executes the query on <paramref name="root"/>
            </summary>
            <param name="root">The root to query</param>
            <param name="parameter">A tuple with the query parameters</param>
            <returns>The query result</returns>
        </member>
        <member name="T:ABB.SrcML.Data.AbstractWorkingSet">
            <summary>
            Working set objects track a given <see cref="P:ABB.SrcML.Data.AbstractWorkingSet.Archive">data archive</see>. They maintain a merged scope based on files
            in <see cref="P:ABB.SrcML.Data.AbstractWorkingSet.Archive"/>. Sub-classes should maintain a subset of the <see cref="P:ABB.SrcML.Data.AbstractWorkingSet.Archive"/> files  for use by their clients
            Working set implementations should be changed by doing the following:
            
            <list type="number">
            <item><description>Obtain a write lock via <see cref="M:ABB.SrcML.Data.AbstractWorkingSet.TryObtainWriteLock(System.Int32,ABB.SrcML.Data.AbstractWorkingSet.GlobalScopeManager@)"/></description></item>
            <item><description></description>Modify the method possibly via calls to <see cref="M:ABB.SrcML.Data.AbstractWorkingSet.TryAddOrUpdateFile(ABB.SrcML.Data.AbstractWorkingSet.GlobalScopeManager,System.String)"/>,
            <see cref="M:ABB.SrcML.Data.AbstractWorkingSet.TryRemoveFile(ABB.SrcML.Data.AbstractWorkingSet.GlobalScopeManager,System.String)"/>, and <see cref="M:ABB.SrcML.Data.AbstractWorkingSet.ContainsFile(ABB.SrcML.Data.NamespaceDefinition,System.String)"/></item>
            <item><description>Release the write lock <see cref="M:ABB.SrcML.Data.AbstractWorkingSet.ReleaseWriteLock"/></description></item>
            <item><description>If the working set has changed, call <see cref="M:ABB.SrcML.Data.AbstractWorkingSet.OnChanged(System.EventArgs)"/> to notify subscribed clients</description></item>
            </list>
            
            Clients that use a working set can obtain the a <see cref="M:ABB.SrcML.Data.NamespaceDefinition.Merge(ABB.SrcML.Data.NamespaceDefinition)">merged scope</see> for
            the working set by calling <see cref="M:ABB.SrcML.Data.AbstractWorkingSet.TryObtainReadLock(System.Int32,ABB.SrcML.Data.NamespaceDefinition@)"/> and <see cref="M:ABB.SrcML.Data.AbstractWorkingSet.ReleaseReadLock"/>.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractWorkingSet.#ctor">
            <summary>
            Creates a new working set object
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractWorkingSet.#ctor(ABB.SrcML.Data.DataArchive,System.Threading.Tasks.TaskFactory)">
            <summary>
            Creates a new working set object
            </summary>
            <param name="archive">The archive to monitor</param>
            <param name="factory">The task factory</param>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractWorkingSet.ContainsFile(System.String)">
            <summary>
            Checks to see if the working set contains <paramref name="sourceFileName"/>. This calls 
            <see cref="M:ABB.SrcML.Data.AbstractWorkingSet.ContainsFile(System.String,System.Int32)"/> with <see cref="F:System.Threading.Timeout.Infinite"/> for the timeout.
            </summary>
            <param name="sourceFileName">The source file name to search for</param>
            <returns>True if the working set contains <paramref name="sourceFileName"/>, False if not</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractWorkingSet.ContainsFile(System.String,System.Int32)">
            <summary>
            Checks to see if the working set contains <paramref name="sourceFileName"/>
            </summary>
            <param name="sourceFileName">The source file name to search for</param>
            <param name="readLockTimeout">The timeout in milliseconds to wait for the read lock</param>
            <returns>True if the working set contains <paramref name="sourceFileName"/>, False otherwise</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractWorkingSet.Initialize">
            <summary>
            Sets up the working set
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractWorkingSet.InitializeAsync">
            <summary>
            Sets up the working set asynchronously
            </summary>
            <returns>The initialization task</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractWorkingSet.StartMonitoring">
            <summary>
            Starts monitoring <see cref="P:ABB.SrcML.Data.AbstractWorkingSet.Archive"/> by responding to
            <see cref="E:ABB.SrcML.AbstractArchive.FileChanged"/> with <see cref="M:ABB.SrcML.Data.AbstractWorkingSet.Archive_FileChanged(System.Object,ABB.SrcML.FileEventRaisedArgs)"/>.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractWorkingSet.StopMonitoring">
            <summary>
            Stops monitoring <see cref="P:ABB.SrcML.Data.AbstractWorkingSet.Archive"/>
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractWorkingSet.AddOrUpdateFile(System.String)">
            <summary>
            Adds the specified file from the data set. If the file is not present in the archive, then nothing happens
            </summary>
            <param name="sourceFileName">the source file to add</param>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractWorkingSet.AddOrUpdateFileAsync(System.String)">
            <summary>
            Adds the specified file from the data set. If the file is not present in the archive, then nothing happens
            </summary>
            <param name="sourceFileName">the source file to add</param>
            <returns>A task for this file update</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractWorkingSet.Clear">
            <summary>
            Clears the data in this working set
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractWorkingSet.RemoveFile(System.String)">
            <summary>
            Removes <paramref name="sourceFileName"/> from the working set.
            If the file does not exist, nothing is done.
            </summary>
            <param name="sourceFileName">The source file to remove</param>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractWorkingSet.RemoveFileAsync(System.String)">
            <summary>
            Removes <paramref name="sourceFileName"/> from the working set.
            If the file does not exist, nothing is done.
            </summary>
            <param name="sourceFileName">The source file to remove</param>
            <returns>A task for this file deletion</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractWorkingSet.RenameFile(System.String,System.String)">
            <summary>
            Renames <paramref name="oldSourceFileName"/> to <paramref name="newSourceFileName"/>
            </summary>
            <param name="oldSourceFileName">the old file name to be removed</param>
            <param name="newSourceFileName">the new file name to be added</param>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractWorkingSet.RenameFileAsync(System.String,System.String)">
            <summary>
            Renames <paramref name="oldSourceFileName"/> to <paramref name="newSourceFileName"/>
            </summary>
            <param name="oldSourceFileName">the old file name to be removed</param>
            <param name="newSourceFileName">the new file name to be added</param>
            <returns>A task for this file rename</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractWorkingSet.ReleaseReadLock">
            <summary>
            Releases the read lock
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractWorkingSet.ReleaseWriteLock">
            <summary>
            Releases the write lock
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractWorkingSet.TryObtainReadLock(System.Int32,ABB.SrcML.Data.NamespaceDefinition@)">
            <summary>
            Gets a read lock for this working set. If timeout is exceeded, then false is returned and <paramref name="globalScope"/> will be null.
            If the read lock is obtained, true is returned and <paramref name="globalScope"/> will contain the global scope object.
            </summary>
            <param name="millisecondsTimeout">the timeout</param>
            <param name="globalScope">out parameter for the global scope</param>
            <returns>True if the read lock was obtained; false otherwise</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractWorkingSet.TryObtainWriteLock(System.Int32,ABB.SrcML.Data.AbstractWorkingSet.GlobalScopeManager@)">
            <summary>
            Gets a write lock for this working set. If timeout is exceeded, then false is returned and <paramref name="scopeManager"/> will be null.
            If the write lock is obtained, true is returned and <paramref name="scopeManager"/> will contain the internal scope manager for this object.
            </summary>
            <param name="millisecondsTimeout">the timeout</param>
            <param name="scopeManager">out parameter for the global scope manager</param>
            <returns>True if the write lock was obtained; false otherwise</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractWorkingSet.Dispose">
            <summary>
            Dispose of this working set. The methods on this class will throw an ObjectDisposedException if they are called after Dispose is called.
            This will also call <see cref="M:ABB.SrcML.AbstractArchive.Dispose"/> on the <see cref="P:ABB.SrcML.Data.AbstractWorkingSet.Archive"/>.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractWorkingSet.Archive_FileChanged(System.Object,ABB.SrcML.FileEventRaisedArgs)">
            <summary>
            Responds to <see cref="E:ABB.SrcML.AbstractArchive.FileChanged"/> events from <see cref="P:ABB.SrcML.Data.AbstractWorkingSet.Archive"/>.
            Subclasses should override this method and only respond when the 
            </summary>
            <param name="sender">The event sender</param>
            <param name="e">The event argument</param>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractWorkingSet.ContainsFile(ABB.SrcML.Data.NamespaceDefinition,System.String)">
            <summary>
            Checks to see if the given <paramref name="globalScope"/> object contains <paramref name="sourceFileName"/>.
            </summary>
            <param name="globalScope">The global scope object</param>
            <param name="sourceFileName">The source file to check for</param>
            <returns>True if <paramref name="globalScope"/> contains <paramref name="sourceFileName"/></returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractWorkingSet.TryAddFile(ABB.SrcML.Data.NamespaceDefinition,System.String)">
            <summary>
            This method should only be used when initializing a working set. After initialization,
            <see cref="M:ABB.SrcML.Data.AbstractWorkingSet.TryAddOrUpdateFile(ABB.SrcML.Data.AbstractWorkingSet.GlobalScopeManager,System.String)"/> should be used as it first attempts to remove a file
            </summary>
            <param name="globalScope">The global scope object</param>
            <param name="sourceFileName">True if <paramref name="globalScope"/> was modified; false otherwise</param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractWorkingSet.TryAddOrUpdateFile(ABB.SrcML.Data.AbstractWorkingSet.GlobalScopeManager,System.String)">
            <summary>
            Adds or updates <paramref name="sourceFileName"/> in the given <paramref name="scopeManager"/>.
            The file is removed from the global scope in <paramref name="scopeManager"/> if it already exists via <see cref="M:ABB.SrcML.Data.AbstractWorkingSet.TryRemoveFile(ABB.SrcML.Data.AbstractWorkingSet.GlobalScopeManager,System.String)"/>.
            </summary>
            <param name="scopeManager">The global scope manager</param>
            <param name="sourceFileName">The source file to check for</param>
            <returns>True if the global scope was modified; false otherwise</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractWorkingSet.TryRemoveFile(ABB.SrcML.Data.AbstractWorkingSet.GlobalScopeManager,System.String)">
            <summary>
            Removes <paramref name="sourceFileName"/> from <paramref name="scopeManager"/>
            </summary>
            <param name="scopeManager">The global scope manager</param>
            <param name="sourceFileName">the source file to remove</param>
            <returns>True if the global scope was modified; false otherwise</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractWorkingSet.TryRenameFile(ABB.SrcML.Data.AbstractWorkingSet.GlobalScopeManager,System.String,System.String)">
            <summary>
            <see cref="M:ABB.SrcML.Data.AbstractWorkingSet.TryRemoveFile(ABB.SrcML.Data.AbstractWorkingSet.GlobalScopeManager,System.String)">Removes</see> <paramref name="oldSourceFileName"/> and
            <see cref="M:ABB.SrcML.Data.AbstractWorkingSet.TryAddOrUpdateFile(ABB.SrcML.Data.AbstractWorkingSet.GlobalScopeManager,System.String)">adds or updates</see> <paramref name="newSourceFileName"/>from
            the global scope.
            </summary>
            <param name="scopeManager">The global scope manager</param>
            <param name="oldSourceFileName">The old file name to remove</param>
            <param name="newSourceFileName">The new file name to add or update</param>
            <returns>True if the global scope was modified; false otherwise</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractWorkingSet.OnChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ABB.SrcML.Data.AbstractWorkingSet.Changed"/> event
            </summary>
            <param name="e">empty event args</param>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractWorkingSet.OnMonitoringStarted(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ABB.SrcML.Data.AbstractWorkingSet.MonitoringStarted"/> event
            </summary>
            <param name="e">empty event args</param>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractWorkingSet.OnMonitoringStopped(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ABB.SrcML.Data.AbstractWorkingSet.MonitoringStopped"/> event
            </summary>
            <param name="e">empty event args</param>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractWorkingSet.OnUpdateCompleted(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ABB.SrcML.Data.AbstractWorkingSet.UpdateCompleted"/> event
            </summary>
            <param name="e">empty event args</param>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractWorkingSet.OnUpdateStarted(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ABB.SrcML.Data.AbstractWorkingSet.UpdateStarted"/> event
            </summary>
            <param name="e">empty event args</param>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractWorkingSet.SubscribeToArchive">
            <summary>
            Subscribes <see cref="M:ABB.SrcML.Data.AbstractWorkingSet.Archive_FileChanged(System.Object,ABB.SrcML.FileEventRaisedArgs)"/> to <see cref="P:ABB.SrcML.Data.AbstractWorkingSet.Archive"/>
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractWorkingSet.UnsubscribeFromArchive">
            <summary>
            Unsubscribes <see cref="M:ABB.SrcML.Data.AbstractWorkingSet.Archive_FileChanged(System.Object,ABB.SrcML.FileEventRaisedArgs)"/> from <see cref="P:ABB.SrcML.Data.AbstractWorkingSet.Archive"/>
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractWorkingSet.SetBooleanField(System.Boolean@,System.Boolean,System.Action{System.EventArgs},System.Action{System.EventArgs})">
            <summary>
            Sets <paramref name="field"/> to <paramref name="value"/> and then executes the appropriate event handler if <paramref name="field"/> has changed
            </summary>
            <param name="field">The private field to set</param>
            <param name="value">The value</param>
            <param name="startEventHandler">The event handler to execute if <paramref name="value"/> is true</param>
            <param name="endEventHandler">The event handler to execute if <paramref name="value"/> is false</param>
            <returns>True if the <paramref name="field"/> has changed; false otherwise</returns>
        </member>
        <member name="E:ABB.SrcML.Data.AbstractWorkingSet.Changed">
            <summary>
            Event that indicates this working set has changed
            </summary>
        </member>
        <member name="E:ABB.SrcML.Data.AbstractWorkingSet.MonitoringStopped">
            <summary>
            Event that indicates that this working set is not monitoring <see cref="P:ABB.SrcML.Data.AbstractWorkingSet.Archive"/>
            </summary>
        </member>
        <member name="E:ABB.SrcML.Data.AbstractWorkingSet.MonitoringStarted">
            <summary>
            Event that indicates that this working has started monitoring <see cref="P:ABB.SrcML.Data.AbstractWorkingSet.Archive"/>
            </summary>
        </member>
        <member name="E:ABB.SrcML.Data.AbstractWorkingSet.UpdateCompleted">
            <summary>
            Event that indicates that an update has completed
            </summary>
        </member>
        <member name="E:ABB.SrcML.Data.AbstractWorkingSet.UpdateStarted">
            <summary>
            Event that indicates that an update has started
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.AbstractWorkingSet.Archive">
            <summary>
            Data archive for this working set
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.AbstractWorkingSet.Factory">
            <summary>
            The task factory to use for asynchronous methods
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.AbstractWorkingSet.IsDisposed">
            <summary>
            Returns true if <see cref="M:ABB.SrcML.Data.AbstractWorkingSet.Dispose"/> has been called
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.AbstractWorkingSet.IsMonitoring">
            <summary>
            True if the working set is currently monitoring <see cref="P:ABB.SrcML.Data.AbstractWorkingSet.Archive"/>; false, otherwise
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.AbstractWorkingSet.IsUpdating">
            <summary>
            True if this working set is currently updating; false otherwise
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.AbstractWorkingSet.UseAsynchronousMethods">
            <summary>
            If true, this working set will use asynchronous methods in <see cref="M:ABB.SrcML.Data.AbstractWorkingSet.Archive_FileChanged(System.Object,ABB.SrcML.FileEventRaisedArgs)"/>. By default, this is false.
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.AbstractWorkingSet.GlobalScopeManager">
            <summary>
            The global scope manager provides a reference to a global scope object. It is returned via <see cref="M:ABB.SrcML.Data.AbstractWorkingSet.TryObtainWriteLock(System.Int32,ABB.SrcML.Data.AbstractWorkingSet.GlobalScopeManager@)"/>.
            the global scope manager allows you to 
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractWorkingSet.GlobalScopeManager.#ctor">
            <summary>
            Create a new global scope manager
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.AbstractWorkingSet.GlobalScopeManager.GlobalScope">
            <summary>
            The global scope managed by this object
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.AbstractWorkingSetFactory">
            <summary>
            The abstract working set factory creates and sets up <see cref="T:ABB.SrcML.Data.AbstractWorkingSet"/> objects via the
            <see cref="M:ABB.SrcML.Data.AbstractWorkingSetFactory.CreateWorkingSet(System.String,ABB.SrcML.Data.DataArchive,System.Threading.Tasks.TaskFactory)"/> method (and similar methods)
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractWorkingSetFactory.#ctor">
            <summary>
            Creates a new abstract working set factory
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractWorkingSetFactory.CreateWorkingSet(System.String,ABB.SrcML.Data.DataArchive)">
            <summary>
            Creates and configures a new working set object
            </summary>
            <param name="basePath">The base path to store any data required by the working set</param>
            <param name="dataArchive">The data archive that this working set is based on</param>
            <returns>A new working set</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AbstractWorkingSetFactory.CreateWorkingSet(System.String,ABB.SrcML.Data.DataArchive,System.Threading.Tasks.TaskFactory)">
            <summary>
            Creates and configures a new working set object
            </summary>
            <param name="basePath">The base directory to store any data required by the working set</param>
            <param name="dataArchive">The data archive that this working set is based on</param>
            <param name="taskFactory">The task factory to use for any working set tasks</param>
            <returns>A new working set</returns>
        </member>
        <member name="T:ABB.SrcML.Data.DefaultWorkingSetFactory`1">
            <summary>
            Creates a new working set object of type <typeparamref name="TWorkingSetFactory"/>. For this factory the base directory path is unused.
            </summary>
            <typeparam name="TWorkingSetFactory">The working set type to create</typeparam>
        </member>
        <member name="M:ABB.SrcML.Data.DefaultWorkingSetFactory`1.CreateWorkingSet(System.String,ABB.SrcML.Data.DataArchive,System.Threading.Tasks.TaskFactory)">
            <summary>
            Creates and configures a new working set object
            </summary>
            <param name="basePath">The base directory to store any data required by the working set. This is unused by this factory</param>
            <param name="dataArchive">The data archive that this working set is based on</param>
            <param name="taskFactory">The task factory to use for any working set tasks</param>
            <returns>A new working set</returns>
        </member>
        <member name="T:ABB.SrcML.Data.AccessModifier">
            <summary>
            Enumerates the types of protection encountered in the supported programming languages
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.AccessModifier.None">
            <summary>
            None indicates that no access modifier was provided
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.AccessModifier.Private">
            <summary>
            Private
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.AccessModifier.Internal">
            <summary>
            Internal
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.AccessModifier.Protected">
            <summary>
            Protected
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.AccessModifier.ProtectedInternal">
            <summary>
            Protected Internal, used in C#
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.AccessModifier.Public">
            <summary>
            Public
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.AccessModifierExtensions">
            <summary>
            Contains extension methods for the AccessModifier enum.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.AccessModifierExtensions.ToKeywordString(ABB.SrcML.Data.AccessModifier)">
            <summary>
            Converts the enum value to its programming language keyword equivalent.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.AccessModifierExtensions.FromKeywordString(System.String)">
            <summary>
            Converts a keyword string to its enum value.
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.AliasStatement">
            <summary>
            Represents a statement declaring an alias in a file.
            For example: using File = System.IO.File;
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.Statement">
            <summary>
            Represents a statement in a program.
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.Statement.XmlChildrenName">
            <summary>XML name for the <see cref="P:ABB.SrcML.Data.Statement.ChildStatements"/> property</summary>
        </member>
        <member name="F:ABB.SrcML.Data.Statement.XmlContentName">
            <summary>XML name for the <see cref="P:ABB.SrcML.Data.Statement.Content"/> property</summary>
        </member>
        <member name="F:ABB.SrcML.Data.Statement.XmlLocationsName">
            <summary>XML name for the <see cref="P:ABB.SrcML.Data.Statement.Locations"/> property</summary>
        </member>
        <member name="F:ABB.SrcML.Data.Statement.XmlName">
            <summary>XML name for serialization</summary>
        </member>
        <member name="F:ABB.SrcML.Data.Statement.ChildStatementsList">
            <summary> Internal list of this statement's children. </summary>
        </member>
        <member name="F:ABB.SrcML.Data.Statement.LocationList">
            <summary> Internal list of this statements locations. </summary>
        </member>
        <member name="F:ABB.SrcML.Data.Statement.AliasMap">
            <summary>
            A collection of the AliasStatement and ImportStatements in the children of this statement.
            These aliases/imports are stored in reverse document order.
            The dictionary key is the file name.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.Statement.#ctor">
            <summary>Creates a new empty Statement.</summary>
        </member>
        <member name="M:ABB.SrcML.Data.Statement.AddChildStatement(ABB.SrcML.Data.Statement)">
            <summary>
            Adds the given Statement to the ChildStatements collection. Nothing will be done if <paramref name="child"/> is null.
            </summary>
            <param name="child">The Statement to add.</param>
        </member>
        <member name="M:ABB.SrcML.Data.Statement.AddChildStatements(System.Collections.Generic.IEnumerable{ABB.SrcML.Data.Statement})">
            <summary>
            Adds the given Statements to the ChildStatements collection.
            </summary>
            <param name="children">The Statements to add.</param>
        </member>
        <member name="M:ABB.SrcML.Data.Statement.AddLocation(ABB.SrcML.Data.SrcMLLocation)">
            <summary>
            Add the given SrcMLLocation to the Locations collection.
            </summary>
            <param name="location">The location to add.</param>
        </member>
        <member name="M:ABB.SrcML.Data.Statement.AddLocations(System.Collections.Generic.IEnumerable{ABB.SrcML.Data.SrcMLLocation})">
            <summary>
            Add the given SrcMLLocations to the Locations collection
            </summary>
            <param name="locations">The locations to add</param>
        </member>
        <member name="M:ABB.SrcML.Data.Statement.FindExpressions``1">
            <summary>
            Finds all of the expressions in this statement of type <typeparamref name="TExpression"/>. This method searches all of the child
            expressions and their descendants.
            </summary>
            <typeparam name="TExpression">The expression type to search for</typeparam>
            <returns>All expressions in this statement of type <typeparamref name="TExpression"/></returns>
        </member>
        <member name="M:ABB.SrcML.Data.Statement.FindExpressions``1(System.Boolean)">
            <summary>
            Finds all of the expressions in this statement of type <typeparamref name="TExpression"/>. This method searches all of the child
            expressions and their descendants.
            </summary>
            <typeparam name="TExpression">The expression type to search for</typeparam>
            <param name="searchDescendantStatements">If true, this will also return expressions from all of the descendant statements</param>
            <returns>All expressions rooted at this statement of type <typeparamref name="TExpression"/></returns>
        </member>
        <member name="M:ABB.SrcML.Data.Statement.GetParent">
            <summary>
            Returns the parent statement.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.Statement.GetChildren">
            <summary>
            Returns the child statements.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.Statement.GetAncestors">
            <summary>
            Gets all of the parents of this statement
            </summary>
            <returns>The parents of this statement</returns>
        </member>
        <member name="M:ABB.SrcML.Data.Statement.GetAncestorsAndSelf">
            <summary>
            Gets all of parents of this statement as well as this statement.
            </summary>
            <returns>This statement followed by its parents</returns>
        </member>
        <member name="M:ABB.SrcML.Data.Statement.GetDescendants">
            <summary>
            Gets all of the descendant statements of this statement. This is every statement that is rooted at this statement.
            </summary>
            <returns>The descendants of this statement</returns>
        </member>
        <member name="M:ABB.SrcML.Data.Statement.GetDescendantsAndSelf">
            <summary>
            Gets all of the descendants of this statement as well as the statement itself.
            </summary>
            <returns>This statement, followed by all of its descendants</returns>
        </member>
        <member name="M:ABB.SrcML.Data.Statement.GetSiblingsBeforeSelf">
            <summary>
            Returns the siblings of this statement (i.e. the children of its parent) that occur before this statement.
            The siblings are returned in document order.
            </summary>
            <exception cref="T:System.InvalidOperationException">This statement is not a child of its parent.</exception>
        </member>
        <member name="M:ABB.SrcML.Data.Statement.GetSiblingsAfterSelf">
            <summary>
            Returns the siblings of this statement (i.e. the children of its parent) that occur after this statement.
            The siblings are returned in document order.
            </summary>
            <exception cref="T:System.InvalidOperationException">This statement is not a child of its parent.</exception>
        </member>
        <member name="M:ABB.SrcML.Data.Statement.GetExpressions">
            <summary>
            Returns all the expressions within this statement.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.Statement.GetNamedChildren(System.String)">
            <summary>
            Returns the children of this statement that have the given name.
            This method searches only the immediate children, and not further descendants.
            </summary>
            <param name="name">The name to search for.</param>
        </member>
        <member name="M:ABB.SrcML.Data.Statement.GetNamedChildren(ABB.SrcML.Data.NameUse)">
            <summary>
            Returns the children of this statement that have the same name as the given <paramref name="use"/>.
            This method searches only the immediate children, and not further descendants.
            If the <paramref name="use"/> occurs within this statement, this method will return only the children
            that occur prior to that use.
            </summary>
            <param name="use">The use containing the name to search for.</param>
        </member>
        <member name="M:ABB.SrcML.Data.Statement.GetNamedChildren``1(System.String)">
            <summary>
            Returns the children of this statement that have the given name, and the given type.
            This method searches only the immediate children, and not further descendants.
            </summary>
            <typeparam name="T">The type of children to return.</typeparam>
            <param name="name">The name to search for.</param>
        </member>
        <member name="M:ABB.SrcML.Data.Statement.GetNamedChildren``1(ABB.SrcML.Data.NameUse)">
            <summary>
            Returns the children of this statement that have the same name as the given <paramref name="use"/>, and the given type.
            This method searches only the immediate children, and not further descendants.
            If the <paramref name="use"/> occurs within this statement, this method will return only the children
            that occur prior to that use.
            </summary>
            <typeparam name="T">The type of children to return.</typeparam>
            <param name="use">The use containing the name to search for.</param>
        </member>
        <member name="M:ABB.SrcML.Data.Statement.GetNamedChildren``1(System.String,System.Boolean)">
            <summary>
            Returns the children of this statement that have the given name, and the given type.
            This method searches only the immediate children, and not further descendants.
            </summary>
            <typeparam name="T">The type of children to return.</typeparam>
            <param name="name">The name to search for.</param>
            <param name="searchDeclarations">Whether to search the child DeclarationStatements for named entities.</param>
        </member>
        <member name="M:ABB.SrcML.Data.Statement.GetNamedChildren``1(ABB.SrcML.Data.NameUse,System.Boolean)">
            <summary>
            Returns the children of this statement that have the same name as the given <paramref name="use"/>, and the given type.
            This method searches only the immediate children, and not further descendants.
            If the <paramref name="use"/> occurs within this statement, this method will return only the children
            that occur prior to that use.
            </summary>
            <typeparam name="T">The type of children to return.</typeparam>
            <param name="use">The use containing the name to search for.</param>
            <param name="searchDeclarations">Whether to search the child DeclarationStatements for named entities.</param>
        </member>
        <member name="M:ABB.SrcML.Data.Statement.ClearChildren">
            <summary> Clears the <see cref="P:ABB.SrcML.Data.Statement.ChildStatements"/> collection. </summary>
        </member>
        <member name="M:ABB.SrcML.Data.Statement.RemoveChild(ABB.SrcML.Data.Statement)">
            <summary>
            Removes <paramref name="child"/> from <see cref="P:ABB.SrcML.Data.Statement.ChildStatements"/>.
            </summary>
            <param name="child">The child statement to remove.</param>
        </member>
        <member name="M:ABB.SrcML.Data.Statement.ReadXmlChild(System.Xml.XmlReader)">
            <summary>
            Processes the child of the current reader position into a child of this object.
            </summary>
            <param name="reader">The XML reader</param>
        </member>
        <member name="M:ABB.SrcML.Data.Statement.GetXmlName">
            <summary> Returns the XML name for this program element. </summary>
        </member>
        <member name="M:ABB.SrcML.Data.Statement.WriteXmlContents(System.Xml.XmlWriter)">
            <summary>
            Writes the contents of this object to <paramref name="writer"/>.
            </summary>
            <param name="writer">The XML writer to write to</param>
        </member>
        <member name="M:ABB.SrcML.Data.Statement.GetFileSpecificStatements(ABB.SrcML.Data.SourceLocation)">
            <summary>
            Returns the children of this statement that are file specific and occur prior to the given location (and in the same file).
            File specific statements may include items such as ImportStatements or AliasStatements.
            The returned statements are sorted in reverse document order.
            </summary>
            <param name="loc">The location to find the file specific statements for.</param>
        </member>
        <member name="M:ABB.SrcML.Data.Statement.GetStatementForLocation(ABB.SrcML.Data.SourceLocation)">
            <summary>
            Returns the innermost statement that surrounds the given source location.
            </summary>
            <param name="loc">The source location to search for.</param>
            <returns>The lowest child of this statement that surrounds the given location, or null if it cannot be found.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.Statement.GetStatementForLocation(System.String)">
            <summary>
            Returns the innermost statement that surrounds the given source location.
            </summary>
            <param name="xpath">The xpath to search for.</param>
            <returns>The lowest child of this statement that contains the given xpath, or null if it cannot be found.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.Statement.ContainsLocation(ABB.SrcML.Data.SourceLocation)">
            <summary>
            Returns true if this statement surrounds the given source location.
            </summary>
            <param name="loc">The source location to look for.</param>
            <returns>True if this is a container for the given location, False otherwise.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.Statement.ContainsLocation(System.Xml.Linq.XElement)">
            <summary>
            Returns true if this statement contains the given XElement. A statement
            contains an element if <see cref="P:ABB.SrcML.Data.SrcMLLocation.XPath"/> is a prefix for the XPath for
            <paramref name="element"/>.
            </summary>
            <param name="element">The element to look for</param>
            <returns>true if this statement contains <paramref name="element"/>. False otherwise.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.Statement.ContainsLocation(System.String)">
            <summary>
            Returns true if this statement contains the given XPath. A statement contains
            an xpath if <see cref="P:ABB.SrcML.Data.SrcMLLocation.XPath"/> is a prefix for <paramref name="xpath"/>
            </summary>
            <param name="xpath">The xpath to look for.</param>
            <returns>True if this statement contains the given xpath. False, otherwise.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.Statement.ToString">
            <summary>
            Returns a string representation of this statement.
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.Statement.ChildStatements">
            <summary>
            The statements that are nested below this one. 
            For example, the members of a class are children of the class statement, or the statements in an if-block are children of the if-statement.
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.Statement.ParentStatement">
            <summary>The statement that this statement is a child of.</summary>
        </member>
        <member name="P:ABB.SrcML.Data.Statement.Content">
            <summary>The expression, if any, contained within the statement.</summary>
        </member>
        <member name="P:ABB.SrcML.Data.Statement.Locations">
            <summary>
            The locations in the code where this statement is defined. 
            There may be multiple locations in the case of, for example, a method definition that has separate prototype and definition statements.
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.Statement.PrimaryLocation">
            <summary>
            The first non-reference location for the Statement.
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.Statement.PositionComparer">
            <summary>
            Sorts Statements based on their starting line/column, in document order.
            The file names are ignored.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.Statement.PositionComparer.Compare(ABB.SrcML.Data.Statement,ABB.SrcML.Data.Statement)">
            <summary>
            Returns a negative number if x comes before y, 0 if they are equal, or a positive number if x comes after y.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.Statement.PositionComparer.CompareLocation(ABB.SrcML.Data.SourceLocation,ABB.SrcML.Data.SourceLocation)">
            <summary>
            Returns a negative number if x comes before y, 0 if they are equal, or a positive number if x comes after y.
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.Statement.ReversePositionComparer">
            <summary>
            Sorts Statements based on their starting line/column, in reverse document order.
            The file names are ignored.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.Statement.ReversePositionComparer.Compare(ABB.SrcML.Data.Statement,ABB.SrcML.Data.Statement)">
            <summary>
            Returns a negative number if x comes before y, 0 if they are equal, or a positive number if x comes after y.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.Statement.ReversePositionComparer.CompareLocation(ABB.SrcML.Data.SourceLocation,ABB.SrcML.Data.SourceLocation)">
            <summary>
            Returns a negative number if x comes before y, 0 if they are equal, or a positive number if x comes after y.
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.AliasStatement.XmlName">
            <summary> The XML name for AliasStatement </summary>
        </member>
        <member name="F:ABB.SrcML.Data.AliasStatement.XmlTargetName">
            <summary> XML Name for <see cref="P:ABB.SrcML.Data.AliasStatement.Target"/> </summary>
        </member>
        <member name="F:ABB.SrcML.Data.AliasStatement.XmlAliasNameName">
            <summary> XML Name for <see cref="P:ABB.SrcML.Data.AliasStatement.AliasName"/> </summary>
        </member>
        <member name="M:ABB.SrcML.Data.AliasStatement.GetXmlName">
            <summary>
            Instance method for getting <see cref="F:ABB.SrcML.Data.AliasStatement.XmlName"/>
            </summary>
            <returns>Returns the XML name for AliasStatement</returns>
        </member>
        <member name="M:ABB.SrcML.Data.AliasStatement.ReadXmlChild(System.Xml.XmlReader)">
            <summary>
            Processes the child of the current reader position into a child of this object.
            </summary>
            <param name="reader">The XML reader</param>
        </member>
        <member name="M:ABB.SrcML.Data.AliasStatement.WriteXmlContents(System.Xml.XmlWriter)">
            <summary>
            Writes the contents of this object to <paramref name="writer"/>.
            </summary>
            <param name="writer">The XML writer to write to</param>
        </member>
        <member name="M:ABB.SrcML.Data.AliasStatement.GetExpressions">
            <summary>
            Returns all the expressions within this statement.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.AliasStatement.ToString">
            <summary>
            Returns a string representation of this statement.
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.AliasStatement.Target">
            <summary> The thing that the alias is pointing to. </summary>
        </member>
        <member name="P:ABB.SrcML.Data.AliasStatement.AliasName">
            <summary> The new declared name for the target. </summary>
        </member>
        <member name="T:ABB.SrcML.Data.BlockStatement">
            <summary>
            Represents a statement that contains a block of nested child statements.
            This class primarily exists just as a conceptual parent for child types.
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.BlockStatement.XmlName">
            <summary>
            The XML name for BlockStatement
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.BlockStatement.GetXmlName">
            <summary>
            Instance method for getting <see cref="F:ABB.SrcML.Data.BlockStatement.XmlName"/>
            </summary>
            <returns>Returns the XML name for BlockStatement</returns>
        </member>
        <member name="M:ABB.SrcML.Data.BlockStatement.ToString">
            <summary>
            Returns a string representation of this statement.
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.BreakStatement">
            <summary>
            Represents a break statement.
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.BreakStatement.XmlName">
            <summary>
            The XML name for BreakStatement
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.BreakStatement.GetXmlName">
            <summary>
            Instance method for getting <see cref="F:ABB.SrcML.Data.BreakStatement.XmlName"/>
            </summary>
            <returns>Returns the XML name for BreakStatement</returns>
        </member>
        <member name="M:ABB.SrcML.Data.BreakStatement.ToString">
            <summary>
            Returns a string representation of this statement.
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.BuiltInTypeFactory">
            <summary>
            The Built-In type factory creates on-demand instances of built-in types for each language.
            It creates and stores one <see cref="T:ABB.SrcML.Data.TypeDefinition"/> object for each
            <see cref="T:ABB.SrcML.Language"/>/built-in type pair. This factory is primarily used when
            comparing <see cref="T:ABB.SrcML.Data.TypeUse"/> objects for method parameters. A parameter and an argument
            should have the same <see cref="T:ABB.SrcML.Data.TypeDefinition"/> object.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.BuiltInTypeFactory.GetBuiltIn(ABB.SrcML.Data.TypeUse)">
            <summary>
            Returns the built-in type for the given type use
            </summary>
            <param name="use">the type use to locate</param>
            <returns>A type definition that matches the type use; null if this is not a
            built-in</returns>
        </member>
        <member name="M:ABB.SrcML.Data.BuiltInTypeFactory.IsBuiltIn(ABB.SrcML.Data.TypeUse)">
            <summary>
            Checks if the
            <paramref name="use">given type use</paramref> is a built-in type.
            </summary>
            <param name="use">The type use to test</param>
            <returns>true if this is a built-in type; false otherwise</returns>
        </member>
        <member name="T:ABB.SrcML.Data.CaseStatement">
            <summary>
            Represents a case statement within a switch.
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.ConditionBlockStatement">
            <summary>
            Represents a program control structure that contains a condition, e.g. an if statement or while loop.
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.ConditionBlockStatement.XmlConditionName">
            <summary> XML name for <see cref="P:ABB.SrcML.Data.ConditionBlockStatement.Condition"/>. </summary>
        </member>
        <member name="M:ABB.SrcML.Data.ConditionBlockStatement.ReadXmlChild(System.Xml.XmlReader)">
            <summary>
            Processes the child of the current reader position into a child of this object.
            </summary>
            <param name="reader">The XML reader</param>
        </member>
        <member name="M:ABB.SrcML.Data.ConditionBlockStatement.WriteXmlContents(System.Xml.XmlWriter)">
            <summary>
            Writes the contents of this object to <paramref name="writer"/>.
            </summary>
            <param name="writer">The XML writer to write to</param>
        </member>
        <member name="M:ABB.SrcML.Data.ConditionBlockStatement.GetExpressions">
            <summary>
            Returns all the expressions within this statement.
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.ConditionBlockStatement.Condition">
            <summary> The condition expression controlling the block. </summary>
        </member>
        <member name="F:ABB.SrcML.Data.CaseStatement.XmlName">
            <summary> The XML name for CaseStatement </summary>
        </member>
        <member name="F:ABB.SrcML.Data.CaseStatement.XmlIsDefaultName">
            <summary> XML Name for <see cref="P:ABB.SrcML.Data.CaseStatement.IsDefault"/> </summary>
        </member>
        <member name="M:ABB.SrcML.Data.CaseStatement.GetXmlName">
            <summary>
            Instance method for getting <see cref="F:ABB.SrcML.Data.CaseStatement.XmlName"/>
            </summary>
            <returns>Returns the XML name for CaseStatement</returns>
        </member>
        <member name="M:ABB.SrcML.Data.CaseStatement.WriteXmlAttributes(System.Xml.XmlWriter)">
            <summary>
            Writes XML attributes from this object to the XML writer
            </summary>
            <param name="writer">The XML writer</param>
        </member>
        <member name="M:ABB.SrcML.Data.CaseStatement.ReadXmlAttributes(System.Xml.XmlReader)">
            <summary>
            Read the XML attributes from the current <paramref name="reader"/> position
            </summary>
            <param name="reader">The XML reader</param>
        </member>
        <member name="M:ABB.SrcML.Data.CaseStatement.ToString">
            <summary>
            Returns a string representation of this statement.
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.CaseStatement.IsDefault">
            <summary> Indicates whether this case is the default for the switch. </summary>
        </member>
        <member name="T:ABB.SrcML.Data.CatchStatement">
            <summary>
            Represents a catch statement.
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.CatchStatement.XmlName">
            <summary> The XML name for CatchStatement </summary>
        </member>
        <member name="F:ABB.SrcML.Data.CatchStatement.XmlParameterName">
            <summary> XML Name for <see cref="P:ABB.SrcML.Data.CatchStatement.Parameter"/> </summary>
        </member>
        <member name="M:ABB.SrcML.Data.CatchStatement.GetXmlName">
            <summary>
            Instance method for getting <see cref="F:ABB.SrcML.Data.CatchStatement.XmlName"/>
            </summary>
            <returns>Returns the XML name for CatchStatement</returns>
        </member>
        <member name="M:ABB.SrcML.Data.CatchStatement.ReadXmlChild(System.Xml.XmlReader)">
            <summary>
            Processes the child of the current reader position into a child of this object.
            </summary>
            <param name="reader">The XML reader</param>
        </member>
        <member name="M:ABB.SrcML.Data.CatchStatement.WriteXmlContents(System.Xml.XmlWriter)">
            <summary>
            Writes the contents of this object to <paramref name="writer"/>.
            </summary>
            <param name="writer">The XML writer to write to</param>
        </member>
        <member name="M:ABB.SrcML.Data.CatchStatement.GetExpressions">
            <summary>
            Returns all the expressions within this statement.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.CatchStatement.ToString">
            <summary>
            Returns a string representation of this statement.
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.CatchStatement.Parameter">
            <summary> The exception that the catch statement will catch. </summary>
        </member>
        <member name="T:ABB.SrcML.Data.CompleteWorkingSet">
            <summary>
            The complete working set mirrors the internal <see cref="P:ABB.SrcML.Data.AbstractWorkingSet.Archive"/>.
            Use of this working set should be done like this:
            
            <example><code>
            var workingSet = new CompleteWorkingSet(archive);
            workingSet.Changed += (o,e) =&gt; { };
            workingSet.Initialize();
            workingSet.StartMonitoring();
            </code></example>
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.CompleteWorkingSet.#ctor">
            <summary>
            Creates a new complete working set object
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.CompleteWorkingSet.#ctor(ABB.SrcML.Data.DataArchive)">
            <summary>
            Creates a new complete working set object
            </summary>
            <param name="archive">The data archive to monitor</param>
        </member>
        <member name="M:ABB.SrcML.Data.CompleteWorkingSet.#ctor(ABB.SrcML.Data.DataArchive,System.Threading.Tasks.TaskFactory)">
            <summary>
            Creates a new complete working set object
            </summary>
            <param name="archive">The data archive to monitor</param>
            <param name="factory">The task factory for asynchronous methods</param>
        </member>
        <member name="M:ABB.SrcML.Data.CompleteWorkingSet.Initialize">
            <summary>
            Initialize the working set by reading the entire archive into one merged scope
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.CompleteWorkingSet.InitializeAsync">
            <summary>
            Asynchronously initialize the working set by reading the entire archive into one merged scope
            </summary>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.Data.CompleteWorkingSet.ReadArchive">
            <summary>
            Loads all of the files in the archive into a merged scope
            </summary>
            <returns>A global scope for the archive</returns>
        </member>
        <member name="T:ABB.SrcML.Data.ContinueStatement">
            <summary>
            Represents a continue statement.
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.ContinueStatement.XmlName">
            <summary> The XML name for ContinueStatement </summary>
        </member>
        <member name="M:ABB.SrcML.Data.ContinueStatement.GetXmlName">
            <summary>
            Instance method for getting <see cref="F:ABB.SrcML.Data.ContinueStatement.XmlName"/>
            </summary>
            <returns>Returns the XML name for ContinueStatement</returns>
        </member>
        <member name="M:ABB.SrcML.Data.ContinueStatement.ToString">
            <summary>
            Returns a string representation of this statement.
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.DataArchive">
            <summary>
            The data archive uses a <see cref="P:ABB.SrcML.Data.DataArchive.MonitoredArchive">SrcML Archive</see> to generate and store SrcML Data for each <see cref="P:ABB.SrcML.SrcMLArchive.FileUnits">file unit</see>.
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.DataArchive.DEFAULT_ARCHIVE_DIRECTORY">
            <summary>
            The default directory to store the data contents in
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.DataArchive.#ctor">
            <summary>
            Creates a data archive in <see cref="F:ABB.SrcML.Data.DataArchive.DEFAULT_ARCHIVE_DIRECTORY"/> within <see cref="P:System.Environment.CurrentDirectory"/> with no <see cref="P:ABB.SrcML.Data.DataArchive.MonitoredArchive"/>.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.DataArchive.#ctor(System.String,ABB.SrcML.SrcMLArchive,System.Boolean)">
            <summary>
            Creates a new data archive
            </summary>
            <param name="baseDirectory">The base directory</param>
            /// <param name="monitoredArchive">The srcML archive to monitor</param>
            <param name="useExistingData">If true, any existing data files in <see cref="P:ABB.SrcML.AbstractArchive.ArchivePath"/> will be used.</param>
        </member>
        <member name="M:ABB.SrcML.Data.DataArchive.#ctor(System.String,ABB.SrcML.SrcMLArchive)">
            <summary>
            Creates a new data archive
            </summary>
            <param name="baseDirectory">The base directory</param>
            <param name="monitoredArchive">The srcML archive to monitor</param>
        </member>
        <member name="M:ABB.SrcML.Data.DataArchive.#ctor(System.String,ABB.SrcML.SrcMLArchive,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Creates a new data archive
            </summary>
            <param name="baseDirectory">The base directory</param>
            <param name="monitoredArchive">The srcML archive to monitor</param>
            <param name="scheduler">The task scheduler to use for asynchronous tasks</param>
        </member>
        <member name="M:ABB.SrcML.Data.DataArchive.#ctor(System.String,System.String,System.Boolean,ABB.SrcML.SrcMLArchive)">
            <summary>
            Creates a new data archive
            </summary>
            <param name="baseDirectory">The base directory</param>
            <param name="dataDirectory">the directory to store the data files in. This will be created as a subdirectory of <paramref name="baseDirectory"/></param>
            <param name="useExistingData">If true, any existing data files in <see cref="P:ABB.SrcML.AbstractArchive.ArchivePath"/> will be used.</param>
            <param name="monitoredArchive">The srcML archive to monitor</param>
        </member>
        <member name="M:ABB.SrcML.Data.DataArchive.#ctor(System.String,System.String,System.Boolean,ABB.SrcML.SrcMLArchive,ABB.SrcML.Data.DataGenerator,ABB.SrcML.AbstractFileNameMapping,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Creates a new data archive
            </summary>
            <param name="baseDirectory">The base directory</param>
            <param name="dataDirectory">the directory to store the data files in. This will be created as a subdirectory of <paramref name="baseDirectory"/></param>
            <param name="useExistingData">If true, any existing data files in <see cref="P:ABB.SrcML.AbstractArchive.ArchivePath"/> will be used.</param>
            <param name="generator">The data generator to use for this archive</param>
            <param name="monitoredArchive">The srcML archive to monitor</param>
            <param name="mapping">the <see cref="T:ABB.SrcML.AbstractFileNameMapping"/> to use to map source paths to data file paths</param>
            <param name="scheduler">The task scheduler to use for asynchronous tasks</param>
        </member>
        <member name="M:ABB.SrcML.Data.DataArchive.GetData(System.String)">
            <summary>
            Gets the stored data for <paramref name="sourceFileName"/>
            </summary>
            <param name="sourceFileName">The source file to get data for</param>
            <returns>the namespace definition for <paramref name="sourceFileName"/></returns>
        </member>
        <member name="M:ABB.SrcML.Data.DataArchive.GetInputPath(System.String)">
            <summary>
            Overrides <see cref="M:ABB.SrcML.GeneratorArchive`1.GetInputPath(System.String)"/> in order to provide a srcML file to the
            <see cref="P:ABB.SrcML.GeneratorArchive`1.Generator"/>. It does this by calling <see cref="M:ABB.SrcML.GeneratorArchive`1.GetArchivePath(System.String)"/>
            </summary>
            <param name="sourcePath"></param>
            <returns></returns>
        </member>
        <member name="P:ABB.SrcML.Data.DataArchive.MonitoredArchive">
            <summary>
            The srcML archive to monitor for changes
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.DataFileNameMapping">
            <summary>
            File name mapping for data files
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.DataFileNameMapping.#ctor(System.String)">
            <summary>
            Create a new data file name mapping. This uses <see cref="F:ABB.SrcML.Data.XmlSerialization.DEFAULT_COMPRESSED_EXTENSION"/>
            as the extension for all target files.
            </summary>
            <param name="targetDirectory">The directory for the target files</param>
        </member>
        <member name="M:ABB.SrcML.Data.DataFileNameMapping.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new data file name mapping
            </summary>
            <param name="targetDirectory">The directory for the target files</param>
            <param name="compressionEnabled">
            If true, use <see cref="F:ABB.SrcML.Data.XmlSerialization.DEFAULT_COMPRESSED_EXTENSION">the default compression extension</see>.
            Otherwise, use <see cref="F:ABB.SrcML.Data.XmlSerialization.DEFAULT_EXTENSION">the default extension</see></param>.
        </member>
        <member name="M:ABB.SrcML.Data.DataFileNameMapping.GetSourcePathFromTargetFile(System.String)">
            <summary>
            Reads the source path from the <paramref name="targetPath"/>.
            This works by reading the XML and finding the first <see cref="F:ABB.SrcML.Data.SrcMLLocation.XmlName">Location</see> element.
            It then gets the <see cref="F:ABB.SrcML.Data.SourceLocation.XmlFileAttributeName">file attribute</see> within it. If the file
            is compressed, it should automatically decompress it.
            </summary>
            <param name="targetPath">The target path</param>
            <returns>The source path found in <paramref name="targetPath"/></returns>
        </member>
        <member name="T:ABB.SrcML.Data.DataGenerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.DataGenerator.#ctor">
            <summary>
            Creates a new data generator with no unknown logger
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.DataGenerator.Parse(System.String)">
            <summary>
            Parses a srcML file and returns a <see cref="T:ABB.SrcML.Data.NamespaceDefinition"/>
            </summary>
            <param name="srcMLFileName">The path to the srcML file</param>
            <returns>The namespace definition for <paramref name="srcMLFileName"/></returns>
        </member>
        <member name="M:ABB.SrcML.Data.DataGenerator.Parse(System.Xml.Linq.XElement)">
            <summary>
            Parses a srcML file unit element
            </summary>
            <param name="fileUnit">The srcML file unit element</param>
            <returns>The namespace definition for <paramref name="fileUnit"/></returns>
        </member>
        <member name="M:ABB.SrcML.Data.DataGenerator.GenerateImpl(System.String,System.String)">
            <summary>
            Generates <paramref name="outputFileName"/> from the srcML file designated by <paramref name="inputFileName"/>.
            This works by calling <see cref="M:ABB.SrcML.Data.DataGenerator.Parse(System.String)"/>.
            </summary>
            <param name="inputFileName">The path to a srcML file</param>
            <param name="outputFileName">the path to store the resulting namespace definition in.</param>
            <returns>true if <paramref name="outputFileName"/> was created; false otherwise.</returns>
        </member>
        <member name="P:ABB.SrcML.Data.DataGenerator.SupportedExtensions">
            <summary>
            The data generator supports the same set of extensions ".xml" as its extension
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.DataGenerator.UnknownLog">
            <summary>
            Sets the <see cref="P:ABB.SrcML.Data.AbstractCodeParser.UnknownLog"/> property for each <see cref="T:ABB.SrcML.Data.AbstractCodeParser"/>.
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.DeclarationStatement">
            <summary>
            Represents a statement that contains only variable declarations.
            This is analogous to the decl_stmt tag in srcML.
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.DeclarationStatement.XmlName">
            <summary> The XML name for DeclarationStatement. </summary>
        </member>
        <member name="M:ABB.SrcML.Data.DeclarationStatement.GetXmlName">
            <summary>
            Instance method for getting <see cref="F:ABB.SrcML.Data.ContinueStatement.XmlName"/>
            </summary>
            <returns>Returns the XML name for ContinueStatement</returns>
        </member>
        <member name="M:ABB.SrcML.Data.DeclarationStatement.GetDeclarations">
            <summary>
            Returns an enumerable of the variable declarations in this statement.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ABB.SrcML.Data.DoWhileStatement">
            <summary>
            Represents a do-while loop in a program.
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.DoWhileStatement.XmlName">
            <summary> The XML name for DoWhileStatement. </summary>
        </member>
        <member name="M:ABB.SrcML.Data.DoWhileStatement.GetXmlName">
            <summary> Returns the XML name for this program element. </summary>
        </member>
        <member name="M:ABB.SrcML.Data.DoWhileStatement.ToString">
            <summary>
            Returns a string representation of this statement.
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.ErrorRaisedArgs">
            <summary>
            Event arguments for capturing a thrown exception
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.ErrorRaisedArgs.#ctor(System.Exception)">
            <summary>
            Constructs a new event args object
            </summary>
            <param name="exception"></param>
        </member>
        <member name="P:ABB.SrcML.Data.ErrorRaisedArgs.Exception">
            <summary>
            The exception that was thrown
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.Expression">
            <summary>
            Represents an expression in a program.
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.Expression.XmlName">
            <summary> The XML name for Expression. </summary>
        </member>
        <member name="F:ABB.SrcML.Data.Expression.XmlComponentsName">
            <summary> The XML name for <see cref="P:ABB.SrcML.Data.Expression.Components"/>. </summary>
        </member>
        <member name="M:ABB.SrcML.Data.Expression.#ctor">
            <summary> Creates a new empty Expression. </summary>
        </member>
        <member name="M:ABB.SrcML.Data.Expression.AddComponent(ABB.SrcML.Data.Expression)">
            <summary>
            Adds the given Expression to the Components collection. Nothing will be done if <paramref name="component"/> is null.
            </summary>
            <param name="component">The component to add.</param>
        </member>
        <member name="M:ABB.SrcML.Data.Expression.AddComponents(System.Collections.Generic.IEnumerable{ABB.SrcML.Data.Expression})">
            <summary>
            Adds the given Expressions to the Components collection.
            </summary>
            <param name="components">The components to add.</param>
        </member>
        <member name="M:ABB.SrcML.Data.Expression.GetParent">
            <summary>
            Returns the parent expression.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.Expression.GetChildren">
            <summary>
            Returns the child expressions.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.Expression.GetAncestors">
            <summary>
            Gets all of the parent expressions of this expression.
            </summary>
            <returns>The parents of this expression.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.Expression.GetAncestorsAndSelf">
            <summary>
            Gets all of parent expressions of this expression as well as this expression.
            </summary>
            <returns>This expression followed by its parents.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.Expression.GetDescendants">
            <summary>
            Gets all of the descendant expressions of this expression. This is every expression that is rooted at this expression.
            </summary>
            <returns>The descendants of this expression.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.Expression.GetDescendantsAndSelf">
            <summary>
            Gets all of the descendants of this expression as well as the expression itself.
            </summary>
            <returns>This expression, followed by all of its descendants.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.Expression.GetSiblingsBeforeSelf">
            <summary>
            Returns the siblings of this expression (i.e. the children of its parent) that occur before this expression.
            The siblings are returned in document order.
            </summary>
            <exception cref="T:System.InvalidOperationException">This expression is not a child of its parent.</exception>
        </member>
        <member name="M:ABB.SrcML.Data.Expression.GetSiblingsAfterSelf">
            <summary>
            Returns the siblings of this expression (i.e. the children of its parent) that occur after this expression.
            The siblings are returned in document order.
            </summary>
            <exception cref="T:System.InvalidOperationException">This expression is not a child of its parent.</exception>
        </member>
        <member name="M:ABB.SrcML.Data.Expression.GetXmlName">
            <summary> Returns the XML name for this program element. </summary>
        </member>
        <member name="M:ABB.SrcML.Data.Expression.ReadXmlChild(System.Xml.XmlReader)">
            <summary>
            Processes the child of the current reader position into a child of this object.
            </summary>
            <param name="reader">The XML reader</param>
        </member>
        <member name="M:ABB.SrcML.Data.Expression.WriteXmlContents(System.Xml.XmlWriter)">
            <summary>
            Writes the contents of this object to <paramref name="writer"/>.
            </summary>
            <param name="writer">The XML writer to write to</param>
        </member>
        <member name="M:ABB.SrcML.Data.Expression.ToString">
            <summary> Returns a string representation of this expression. </summary>
        </member>
        <member name="M:ABB.SrcML.Data.Expression.ResolveType">
            <summary>
            Determines the possible types of this expression.
            </summary>
            <returns>An enumerable of the matching TypeDefinitions for this expression's possible types.</returns>
        </member>
        <member name="P:ABB.SrcML.Data.Expression.Components">
            <summary> The individual parts that comprise this expression. </summary>
        </member>
        <member name="P:ABB.SrcML.Data.Expression.ParentExpression">
            <summary> The expression that this sub-expression is a part of, if any. </summary>
        </member>
        <member name="P:ABB.SrcML.Data.Expression.ParentStatement">
            <summary> The statement containing this expression. </summary>
        </member>
        <member name="P:ABB.SrcML.Data.Expression.Location">
            <summary> The location in the code where this expression appears. </summary>
        </member>
        <member name="T:ABB.SrcML.Data.ExternStatement">
            <summary>
            Represents an extern statement in C/C++ that specifies a linkage type.
            Note that this is expected to be something like <code>extern "C" { #include&lt;stdio.h&gt; }</code>.
            
            Declarations that use extern as a storage specifier, such as <code>extern int myGlobalVar;</code>, will not be parsed as ExternStatements.
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.ExternStatement.XmlName">
            <summary> The XML name for ExternStatement. </summary>
        </member>
        <member name="F:ABB.SrcML.Data.ExternStatement.XmlLinkageTypeName">
            <summary> XML Name for <see cref="P:ABB.SrcML.Data.ExternStatement.LinkageType"/> </summary>
        </member>
        <member name="M:ABB.SrcML.Data.ExternStatement.GetXmlName">
            <summary>
            Instance method for getting <see cref="F:ABB.SrcML.Data.ExternStatement.XmlName"/>
            </summary>
            <returns>Returns the XML name for ExternStatement</returns>
        </member>
        <member name="M:ABB.SrcML.Data.ExternStatement.ReadXmlChild(System.Xml.XmlReader)">
            <summary>
            Processes the child of the current reader position into a child of this object.
            </summary>
            <param name="reader">The XML reader</param>
        </member>
        <member name="M:ABB.SrcML.Data.ExternStatement.WriteXmlContents(System.Xml.XmlWriter)">
            <summary>
            Writes the contents of this object to <paramref name="writer"/>.
            </summary>
            <param name="writer">The XML writer to write to</param>
        </member>
        <member name="M:ABB.SrcML.Data.ExternStatement.ToString">
            <summary>
            Returns a string representation of this statement.
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.ExternStatement.LinkageType">
            <summary>
            The specified linkage type.
            For example, in <code>extern "C" { #include&lt;stdio.h&gt; }</code> the linkage type is C.
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.ForeachStatement">
            <summary>
            Represents a foreach statement in a program.
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.ForeachStatement.XmlName">
            <summary> The XML name for ForeachStatement </summary>
        </member>
        <member name="M:ABB.SrcML.Data.ForeachStatement.GetXmlName">
            <summary>
            Instance method for getting <see cref="F:ABB.SrcML.Data.ForeachStatement.XmlName"/>
            </summary>
            <returns>Returns the XML name for ForeachStatement</returns>
        </member>
        <member name="M:ABB.SrcML.Data.ForeachStatement.ToString">
            <summary>
            Returns a string representation of this statement.
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.ForStatement">
            <summary>
            Represents a for-loop in a program.
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.ForStatement.XmlInitializerName">
            <summary> XML Name for <see cref="P:ABB.SrcML.Data.ForStatement.Initializer"/> </summary>
        </member>
        <member name="F:ABB.SrcML.Data.ForStatement.XmlIncrementerName">
            <summary> XML Name for <see cref="P:ABB.SrcML.Data.ForStatement.Incrementer"/> </summary>
        </member>
        <member name="F:ABB.SrcML.Data.ForStatement.XmlName">
            <summary> The XML name for ForStatement </summary>
        </member>
        <member name="M:ABB.SrcML.Data.ForStatement.GetXmlName">
            <summary>
            Instance method for getting <see cref="F:ABB.SrcML.Data.ForStatement.XmlName"/>
            </summary>
            <returns>Returns the XML name for ForStatement</returns>
        </member>
        <member name="M:ABB.SrcML.Data.ForStatement.ReadXmlChild(System.Xml.XmlReader)">
            <summary>
            Processes the child of the current reader position into a child of this object.
            </summary>
            <param name="reader">The XML reader</param>
        </member>
        <member name="M:ABB.SrcML.Data.ForStatement.WriteXmlContents(System.Xml.XmlWriter)">
            <summary>
            Writes the contents of this object to <paramref name="writer"/>.
            </summary>
            <param name="writer">The XML writer to write to</param>
        </member>
        <member name="M:ABB.SrcML.Data.ForStatement.GetExpressions">
            <summary>
            Returns all the expressions within this statement.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.ForStatement.ToString">
            <summary>
            Returns a string representation of this statement.
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.ForStatement.Initializer">
            <summary> The initialization expression for the for-loop. </summary>
        </member>
        <member name="P:ABB.SrcML.Data.ForStatement.Incrementer">
            <summary> The incrementer expression for the for-loop. </summary>
        </member>
        <member name="T:ABB.SrcML.Data.GotoStatement">
            <summary>
            Represents a goto statement in a program.
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.GotoStatement.XmlName">
            <summary> The XML name for GotoStatement </summary>
        </member>
        <member name="M:ABB.SrcML.Data.GotoStatement.GetXmlName">
            <summary>
            Instance method for getting <see cref="F:ABB.SrcML.Data.GotoStatement.XmlName"/>
            </summary>
            <returns>Returns the XML name for GotoStatement</returns>
        </member>
        <member name="M:ABB.SrcML.Data.GotoStatement.ToString">
            <summary>
            Returns a string representation of this statement.
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.IfStatement">
            <summary>
            Represents an if-statement in a program.
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.IfStatement.XmlName">
            <summary> The XML name for IfStatement. </summary>
        </member>
        <member name="F:ABB.SrcML.Data.IfStatement.XmlElseName">
            <summary> The XML name for <see cref="P:ABB.SrcML.Data.IfStatement.ElseStatements"/>. </summary>
        </member>
        <member name="M:ABB.SrcML.Data.IfStatement.#ctor">
            <summary> Creates a new empty IfStatement. </summary>
        </member>
        <member name="M:ABB.SrcML.Data.IfStatement.AddElseStatement(ABB.SrcML.Data.Statement)">
            <summary>
            Adds the given statement to the ElseStatements collection.
            If <paramref name="child"/> is null, nothing will be done.
            </summary>
            <param name="child">The statement to add.</param>
        </member>
        <member name="M:ABB.SrcML.Data.IfStatement.AddElseStatements(System.Collections.Generic.IEnumerable{ABB.SrcML.Data.Statement})">
            <summary>
            Adds the given statements to the ElseStatements collection.
            </summary>
            <param name="elseStatements">An enumerable of statements to add.</param>
        </member>
        <member name="M:ABB.SrcML.Data.IfStatement.GetChildren">
            <summary>
            Returns the child statements, including those in the Else block.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.IfStatement.GetXmlName">
            <summary> Returns the XML name for this program element. </summary>
        </member>
        <member name="M:ABB.SrcML.Data.IfStatement.ReadXmlChild(System.Xml.XmlReader)">
            <summary>
            Processes the child of the current reader position into a child of this object.
            </summary>
            <param name="reader">The XML reader</param>
        </member>
        <member name="M:ABB.SrcML.Data.IfStatement.WriteXmlContents(System.Xml.XmlWriter)">
            <summary>
            Writes the contents of this object to <paramref name="writer"/>.
            </summary>
            <param name="writer">The XML writer to write to</param>
        </member>
        <member name="M:ABB.SrcML.Data.IfStatement.GetNamedChildren``1(ABB.SrcML.Data.NameUse,System.Boolean)">
            <summary>
            Returns the children of this statement that have the same name as the given <paramref name="use"/>, and the given type.
            This method searches only the immediate children, and not further descendants.
            If the <paramref name="use"/> occurs within this statement, this method will return only the children
            that occur prior to that use.
            </summary>
            <typeparam name="T">The type of children to return.</typeparam>
            <param name="use">The use containing the name to search for.</param>
            <param name="searchDeclarations">Whether to search the child DeclarationStatements for named entities.</param>
        </member>
        <member name="M:ABB.SrcML.Data.IfStatement.ToString">
            <summary>
            Returns a string representation of this statement.
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.IfStatement.ElseStatements">
            <summary>
            The statements contained within the else block, if any.
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.ImportStatement">
            <summary>
            Represents a general import statement in a program. 
            (Depending on the programming language, this may use a keyword other than import.)
            For example:
            Java: import java.lang.*;
            C#:   using System.IO;
            C++:  using namespace std;
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.ImportStatement.XmlName">
            <summary> The XML name for ImportStatement </summary>
        </member>
        <member name="F:ABB.SrcML.Data.ImportStatement.XmlImportedNamespaceName">
            <summary> XML Name for <see cref="P:ABB.SrcML.Data.ImportStatement.ImportedNamespace"/> </summary>
        </member>
        <member name="M:ABB.SrcML.Data.ImportStatement.GetXmlName">
            <summary>
            Instance method for getting <see cref="F:ABB.SrcML.Data.ImportStatement.XmlName"/>
            </summary>
            <returns>Returns the XML name for ImportStatement</returns>
        </member>
        <member name="M:ABB.SrcML.Data.ImportStatement.ReadXmlChild(System.Xml.XmlReader)">
            <summary>
            Processes the child of the current reader position into a child of this object.
            </summary>
            <param name="reader">The XML reader</param>
        </member>
        <member name="M:ABB.SrcML.Data.ImportStatement.WriteXmlContents(System.Xml.XmlWriter)">
            <summary>
            Writes the contents of this object to <paramref name="writer"/>.
            </summary>
            <param name="writer">The XML writer to write to</param>
        </member>
        <member name="M:ABB.SrcML.Data.ImportStatement.GetExpressions">
            <summary>
            Returns all the expressions within this statement.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.ImportStatement.ToString">
            <summary>
            Returns a string representation of this statement.
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.ImportStatement.ImportedNamespace">
            <summary> The namespace being imported. </summary>
        </member>
        <member name="T:ABB.SrcML.Data.INamedEntity">
            <summary>
            Represents a programming construct that has a name, e.g. a method or a field.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.INamedEntity.GetLocations">
            <summary>
            Returns the locations where this entity appears in the source.
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.INamedEntity.Name">
            <summary> The name of the entity. </summary>
        </member>
        <member name="P:ABB.SrcML.Data.INamedEntity.Accessibility">
            <summary> The accessibility of the entity, e.g. public or private. </summary>
        </member>
        <member name="T:ABB.SrcML.Data.LabelStatement">
            <summary>
            Represents a label statement in a program.
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.LabelStatement.XmlName">
            <summary> The XML name for LabelStatement </summary>
        </member>
        <member name="F:ABB.SrcML.Data.LabelStatement.XmlLabelNameName">
            <summary> XML Name for <see cref="P:ABB.SrcML.Data.LabelStatement.Name"/> </summary>
        </member>
        <member name="M:ABB.SrcML.Data.LabelStatement.GetXmlName">
            <summary>
            Instance method for getting <see cref="F:ABB.SrcML.Data.LabelStatement.XmlName"/>
            </summary>
            <returns>Returns the XML name for LabelStatement</returns>
        </member>
        <member name="M:ABB.SrcML.Data.LabelStatement.ReadXmlChild(System.Xml.XmlReader)">
            <summary>
            Processes the child of the current reader position into a child of this object.
            </summary>
            <param name="reader">The XML reader</param>
        </member>
        <member name="M:ABB.SrcML.Data.LabelStatement.WriteXmlContents(System.Xml.XmlWriter)">
            <summary>
            Writes the contents of this object to <paramref name="writer"/>.
            </summary>
            <param name="writer">The XML writer to write to</param>
        </member>
        <member name="M:ABB.SrcML.Data.LabelStatement.ToString">
            <summary>
            Returns a string representation of this statement.
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.LabelStatement.Name">
            <summary> The text of the label. </summary>
        </member>
        <member name="T:ABB.SrcML.Data.LiteralKind">
            <summary>
            An enumeration of the different kinds of literals
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.LiteralKind.String">
            <summary>
            String literal
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.LiteralKind.Boolean">
            <summary>
            Boolean literal
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.LiteralKind.Character">
            <summary>
            Character literal
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.LiteralKind.Number">
            <summary>
            Number literal
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.LiteralKind.Null">
            <summary>
            Null literal
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.LiteralKindExtensions">
            <summary>
            Contains extension methods for the LiteralKind enum.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.LiteralKindExtensions.ToKeyword(ABB.SrcML.Data.LiteralKind)">
            <summary> Returns a keyword string for this LiteralKind. </summary>
        </member>
        <member name="M:ABB.SrcML.Data.LiteralKindExtensions.FromKeyword(System.String)">
            <summary> Returns a LiteralKind for the given keyword string. </summary>
        </member>
        <member name="T:ABB.SrcML.Data.LiteralUse">
            <summary>
            Represents a use of a literal in a program.
            For example, in "int a = 42;" 42 is a literal use.
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.LiteralUse.XmlName">
            <summary> The XML name for LiteralUse </summary>
        </member>
        <member name="F:ABB.SrcML.Data.LiteralUse.XmlKindName">
            <summary> XML Name for <see cref="P:ABB.SrcML.Data.LiteralUse.Kind"/> </summary>
        </member>
        <member name="F:ABB.SrcML.Data.LiteralUse.XmlTextName">
            <summary> XML Name for <see cref="P:ABB.SrcML.Data.LiteralUse.Text"/> </summary>
        </member>
        <member name="M:ABB.SrcML.Data.LiteralUse.GetLiteralKind(System.Xml.Linq.XElement)">
            <summary>
            Gets the literal kind from the
            <paramref name="literalElement"/></summary>
            <param name="literalElement">The literal element</param>
            <returns>The kind of element this is</returns>
        </member>
        <member name="M:ABB.SrcML.Data.LiteralUse.GetXmlName">
            <summary>
            Instance method for getting <see cref="F:ABB.SrcML.Data.LiteralUse.XmlName"/>
            </summary>
            <returns>Returns the XML name for LiteralUse</returns>
        </member>
        <member name="M:ABB.SrcML.Data.LiteralUse.ReadXmlAttributes(System.Xml.XmlReader)">
            <summary>
            Read the XML attributes from the current <paramref name="reader"/> position
            </summary>
            <param name="reader">The XML reader</param>
        </member>
        <member name="M:ABB.SrcML.Data.LiteralUse.WriteXmlAttributes(System.Xml.XmlWriter)">
            <summary>
            Writes XML attributes from this object to the XML writer
            </summary>
            <param name="writer">The XML writer</param>
        </member>
        <member name="M:ABB.SrcML.Data.LiteralUse.ToString">
            <summary> Returns the text value of this literal. </summary>
        </member>
        <member name="P:ABB.SrcML.Data.LiteralUse.Text">
            <summary>The text of the literal.</summary>
        </member>
        <member name="P:ABB.SrcML.Data.LiteralUse.Kind">
            <summary>The kind of literal.</summary>
        </member>
        <member name="T:ABB.SrcML.Data.CSharpCodeParser">
            <summary>
            Provides parsing facilities for the C# language
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.CSharpCodeParser.#ctor">
            <summary>
            Constructs a C# code parser
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.CSharpCodeParser.ContainerIsReference(System.Xml.Linq.XElement)">
            <summary>
            Tests whether this container is a reference or whether it includes a definition.
            </summary>
            <param name="element">The element to test</param>
            <returns>True if this is a reference element; false otherwise</returns>
        </member>
        <member name="M:ABB.SrcML.Data.CSharpCodeParser.GetParentTypeUseElements(System.Xml.Linq.XElement)">
            <summary>
            Gets the parent type elements for a type element
            </summary>
            <param name="typeElement">The type element to parse</param>
            <returns>The type use elements</returns>
        </member>
        <member name="M:ABB.SrcML.Data.CSharpCodeParser.GetTypeForBooleanLiteral(System.String)">
            <summary>
            Parses a C# boolean literal
            </summary>
            <param name="literalValue">The literal value</param>
            <returns>returns "bool"</returns>
        </member>
        <member name="M:ABB.SrcML.Data.CSharpCodeParser.GetTypeForCharacterLiteral(System.String)">
            <summary>
            Parses a C# character literal
            </summary>
            <param name="literalValue">The literal value</param>
            <returns>returns "char"</returns>
        </member>
        <member name="M:ABB.SrcML.Data.CSharpCodeParser.GetTypeForNumberLiteral(System.String)">
            <summary>
            Parses a C# number literal based on C# 4.0 in a Nutshell by Joseph Albahari and Ben
            Albahari, page 22.
            </summary>
            <param name="literalValue">The literal value</param>
            <returns>returns the appropriate numeric type</returns>
        </member>
        <member name="M:ABB.SrcML.Data.CSharpCodeParser.GetTypeForStringLiteral(System.String)">
            <summary>
            Parses a C# string literal
            </summary>
            <param name="literalValue">The literal value</param>
            <returns>Returns "string"</returns>
        </member>
        <member name="M:ABB.SrcML.Data.CSharpCodeParser.ParseNamespaceElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Parses a C# namespace block
            </summary>
            <param name="namespaceElement">the namespace element to parse</param>
            <param name="context">the parser context</param>
        </member>
        <member name="M:ABB.SrcML.Data.CSharpCodeParser.ParseAliasElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Parses the given <paramref name="aliasElement"/> and creates an ImportStatement or AliasStatement from it.
            </summary>
            <param name="aliasElement">The alias element to parse.</param>
            <param name="context">The parser context to use.</param>
            <returns>An ImportStatement if the element is an import, or an AliasStatement if it is an alias.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.CSharpCodeParser.ParseUsingBlockElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Parses the given <paramref name="usingElement"/> and creates a <see cref="T:ABB.SrcML.Data.UsingBlockStatement"/> from it.
            </summary>
            <param name="usingElement">The SRC.Using element to parse.</param>
            <param name="context">The parser context to use.</param>
            <returns>A UsingBlockStatement created from the given usingElement.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.CSharpCodeParser.ParseMethodElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Creates a <see cref="T:ABB.SrcML.Data.MethodDefinition"/> object for <paramref name="methodElement"/>.
            </summary>
            <param name="methodElement">The element to parse</param>
            <param name="context">The context to use</param>
        </member>
        <member name="M:ABB.SrcML.Data.CSharpCodeParser.ParseTypeElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Parses an element corresponding to a type definition and creates a TypeDefinition object 
            </summary>
            <param name="typeElement">The type element to parse. This must be one of the elements contained in TypeElementNames.</param>
            <param name="context">The parser context</param>
            <returns>A TypeDefinition parsed from the element</returns>
        </member>
        <member name="M:ABB.SrcML.Data.CSharpCodeParser.ParseDeclarationStatementElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Creates a <see cref="T:ABB.SrcML.Data.Statement"/> object for <paramref name="stmtElement"/>.
            The expression contained within <paramref name="stmtElement"/> will be parsed and placed in 
            Statement.Content.
            </summary>
            <param name="stmtElement">The SRC.ExpressionStatement element to parse.</param>
            <param name="context">The context to use.</param>
            <returns>A <see cref="T:ABB.SrcML.Data.Statement"/> corresponding to <paramref name="stmtElement"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.CSharpCodeParser.ParsePropertyDeclarationElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Creates a <see cref="T:ABB.SrcML.Data.PropertyDefinition"/> object for <paramref name="declElement"/>.
            </summary>
            <param name="declElement">The SRC.Declaration element to parse. This must be a declaration of a property.</param>
            <param name="context">The context to use.</param>
            <returns>A <see cref="T:ABB.SrcML.Data.PropertyDefinition"/> corresponding to <paramref name="declElement"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.CSharpCodeParser.ElementHasPartialKeyword(System.Xml.Linq.XElement)">
            <summary>
            Determines whether the given element contains a specifier element with the value "partial".
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.CSharpCodeParser.ParserLanguage">
            <summary>
            Returns <c>Language.CSharp</c>
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.LockStatement">
            <summary>
            Represents a lock statement in C#.
            These are of the form: 
            <code> lock(myObj) { ... } </code>
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.LockStatement.XmlName">
            <summary> The XML name for LockStatement </summary>
        </member>
        <member name="F:ABB.SrcML.Data.LockStatement.XmlLockExpressionName">
            <summary> XML Name for <see cref="P:ABB.SrcML.Data.LockStatement.LockExpression"/> </summary>
        </member>
        <member name="M:ABB.SrcML.Data.LockStatement.GetXmlName">
            <summary>
            Instance method for getting <see cref="F:ABB.SrcML.Data.LockStatement.XmlName"/>
            </summary>
            <returns>Returns the XML name for LockStatement</returns>
        </member>
        <member name="M:ABB.SrcML.Data.LockStatement.ReadXmlChild(System.Xml.XmlReader)">
            <summary>
            Processes the child of the current reader position into a child of this object.
            </summary>
            <param name="reader">The XML reader</param>
        </member>
        <member name="M:ABB.SrcML.Data.LockStatement.WriteXmlContents(System.Xml.XmlWriter)">
            <summary>
            Writes the contents of this object to <paramref name="writer"/>.
            </summary>
            <param name="writer">The XML writer to write to</param>
        </member>
        <member name="M:ABB.SrcML.Data.LockStatement.GetExpressions">
            <summary>
            Returns all the expressions within this statement.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.LockStatement.ToString">
            <summary>
            Returns a string representation of this statement.
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.LockStatement.LockExpression">
            <summary> The expression specifying the object being locked. </summary>
        </member>
        <member name="T:ABB.SrcML.Data.MethodCall">
            <summary>
            Represents a method call
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.NameUse">
            <summary>
            Represents the generalized use of a name. This does not distinguish whether the name represents a type, or variable, or what.
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.NameUse.XmlName">
            <summary> The XML name for NameUse </summary>
        </member>
        <member name="F:ABB.SrcML.Data.NameUse.XmlNameName">
            <summary> XML Name for <see cref="P:ABB.SrcML.Data.NameUse.Name"/> </summary>
        </member>
        <member name="F:ABB.SrcML.Data.NameUse.XmlPrefixName">
            <summary> XML Name for <see cref="P:ABB.SrcML.Data.NameUse.Prefix"/> </summary>
        </member>
        <member name="F:ABB.SrcML.Data.NameUse.aliases">
            <summary> The aliases and imports active at this use. </summary>
        </member>
        <member name="F:ABB.SrcML.Data.NameUse.NameInclusionOperators">
            <summary>
            The binary operators that indicate that the name on the right-hand side is a child of the left-hand side.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.NameUse.GetAliases">
            <summary>
            Determines the set of aliases active at the site of this name use, sorted in reverse document order.
            </summary>
            <returns>The AliasStatements occuring prior to this NameUse.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.NameUse.GetImports">
            <summary>
            Determines the set of imports active at the site of this name use, sorted in reverse document order.
            </summary>
            <returns>The ImportStatements occuring prior to this NameUse.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.NameUse.GetChildren">
            <summary>
            Returns the child expressions, including the Prefix.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.NameUse.GetXmlName">
            <summary>
            Instance method for getting <see cref="F:ABB.SrcML.Data.NameUse.XmlName"/>
            </summary>
            <returns>Returns the XML name for NameUse</returns>
        </member>
        <member name="M:ABB.SrcML.Data.NameUse.ReadXmlChild(System.Xml.XmlReader)">
            <summary>
            Processes the child of the current reader position into a child of this object.
            </summary>
            <param name="reader">The XML reader</param>
        </member>
        <member name="M:ABB.SrcML.Data.NameUse.ReadXmlAttributes(System.Xml.XmlReader)">
            <summary>
            Read the XML attributes from the current <paramref name="reader"/> position
            </summary>
            <param name="reader">The XML reader</param>
        </member>
        <member name="M:ABB.SrcML.Data.NameUse.WriteXmlContents(System.Xml.XmlWriter)">
            <summary>
            Writes the contents of this object to <paramref name="writer"/>.
            </summary>
            <param name="writer">The XML writer to write to</param>
        </member>
        <member name="M:ABB.SrcML.Data.NameUse.WriteXmlAttributes(System.Xml.XmlWriter)">
            <summary>
            Writes XML attributes from this object to the XML writer
            </summary>
            <param name="writer">The XML writer</param>
        </member>
        <member name="M:ABB.SrcML.Data.NameUse.ToString">
            <summary> Returns a string representation of this object. </summary>
        </member>
        <member name="M:ABB.SrcML.Data.NameUse.FindMatches">
            <summary>
            Finds definitions that match this name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.Data.NameUse.ResolveType">
            <summary>
            Determines the possible types of this expression.
            </summary>
            <returns>An enumerable of the matching TypeDefinitions for this expression's possible types.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.NameUse.GetCallingScope">
            <summary>
            If there is a calling expession preceding this NameUse, this method resolves it
            to determine the scope(s) in which to search for the use's name.
            </summary>
            <returns>An enumerable of the named entities that may contain the name being used in this NameUse.
            Returns null if there is no suitable calling expression.
            Returns an empty enumerable if there is a calling expression, but no matches are found.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.NameUse.DetermineAliases">
            <summary>
            Searches for the ImportStatements/AliasStatements that occur prior to this NameUse.
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.NameUse.Name">
            <summary> The name being used. </summary>
        </member>
        <member name="P:ABB.SrcML.Data.NameUse.Prefix">
            <summary>
            The prefix of the name. In a fully-qualified name like System.IO.File, the name is File and the prefix is System.IO.
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.NameUse.ParentStatement">
            <summary> The statement containing this expression. </summary>
        </member>
        <member name="F:ABB.SrcML.Data.MethodCall.XmlName">
            <summary> The XML name for MethodCall </summary>
        </member>
        <member name="F:ABB.SrcML.Data.MethodCall.XmlArgumentsName">
            <summary> XML Name for <see cref="P:ABB.SrcML.Data.MethodCall.Arguments"/> </summary>
        </member>
        <member name="F:ABB.SrcML.Data.MethodCall.XmlTypeArgumentsName">
            <summary> XML name for <see cref="P:ABB.SrcML.Data.MethodCall.TypeArguments"/> </summary>
        </member>
        <member name="F:ABB.SrcML.Data.MethodCall.XmlIsConstructorName">
            <summary> XML Name for <see cref="P:ABB.SrcML.Data.MethodCall.IsConstructor"/> </summary>
        </member>
        <member name="F:ABB.SrcML.Data.MethodCall.XmlIsConstructorInitializerName">
            <summary> XML Name for <see cref="P:ABB.SrcML.Data.MethodCall.IsConstructorInitializer"/></summary>
        </member>
        <member name="F:ABB.SrcML.Data.MethodCall.XmlIsDestructorName">
            <summary> XML Name for <see cref="P:ABB.SrcML.Data.MethodCall.IsDestructor"/> </summary>
        </member>
        <member name="M:ABB.SrcML.Data.MethodCall.#ctor">
            <summary>
            Creates a new MethodCall object
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.MethodCall.AddArgument(ABB.SrcML.Data.Expression)">
            <summary>
            Adds the given argument to the Arguments collection.
            </summary>
            <param name="arg">The argument to add.</param>
        </member>
        <member name="M:ABB.SrcML.Data.MethodCall.AddArguments(System.Collections.Generic.IEnumerable{ABB.SrcML.Data.Expression})">
            <summary>
            Adds the given arguments to the Arguments collection.
            </summary>
            <param name="args">The arguments to add.</param>
        </member>
        <member name="M:ABB.SrcML.Data.MethodCall.AddTypeArgument(ABB.SrcML.Data.TypeUse)">
            <summary>
            Adds the given type argument to the TypeArguments collection.
            </summary>
            <param name="arg">The type argument to add.</param>
        </member>
        <member name="M:ABB.SrcML.Data.MethodCall.AddTypeArguments(System.Collections.Generic.IEnumerable{ABB.SrcML.Data.TypeUse})">
            <summary>
            Adds the given type arguments to the TypeArguments collection.
            </summary>
            <param name="args">The type arguments to add.</param>
        </member>
        <member name="M:ABB.SrcML.Data.MethodCall.GetChildren">
            <summary>
            Returns the child expressions, including the TypeArguments and Arguments.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.MethodCall.ToString">
            <summary> Returns a string representation of this object. </summary>
        </member>
        <member name="M:ABB.SrcML.Data.MethodCall.FindFirstMatchingType">
            <summary>
            Gets the first type definition that matches the return type for this method
            </summary>
            <returns>The first matching type definition</returns>
        </member>
        <member name="M:ABB.SrcML.Data.MethodCall.FindMatches">
            <summary>
            Finds matching <see cref="T:ABB.SrcML.Data.MethodDefinition">method definitions</see> for this method call.
            This method searches for matches in the ancestor scopes of the call. Because method calls can also be
            to constructors and destructors, this will also search for matching types and then
            constructors within those types
            </summary>
            <returns>An enumerable of method definitions that match this method call</returns>
        </member>
        <member name="M:ABB.SrcML.Data.MethodCall.ResolveType">
            <summary>
            Finds all of the matching type definitions for the return type of this method definition
            </summary>
            <returns>An enumerable of the matching type definitions for this method</returns>
        </member>
        <member name="M:ABB.SrcML.Data.MethodCall.SignatureMatches(ABB.SrcML.Data.MethodDefinition)">
            <summary>
            Tests if the signature of the provided method definition matches this method call
            </summary>
            <param name="definition">The method definition to test</param>
            <returns>True if this method call matches the signature of the provided method definition, False otherwise.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.MethodCall.SignatureMatches(System.String,ABB.SrcML.Data.MethodDefinition)">
            <summary>
            Tests if the signature of the provided method definition matches this method call. The parameter <paramref name="callName"/>
            specifies the name to use for this method call. This is useful for cases where the call is a
            keyword, like "base", "this" or "super". The caller can first translate the keyword to the
            actual method name to match against.
            </summary>
            <param name="definition">The method definition to test</param>
            <param name="callName">The name to use for the method call.</param>
            <returns>True if this method call matches the signature of the provided method definition, False otherwise.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.MethodCall.GetXmlName">
            <summary>
            Instance method for getting <see cref="F:ABB.SrcML.Data.MethodCall.XmlName"/>
            </summary>
            <returns>Returns the XML name for MethodCall</returns>
        </member>
        <member name="M:ABB.SrcML.Data.MethodCall.ReadXmlAttributes(System.Xml.XmlReader)">
            <summary>
            Read the XML attributes from the current <paramref name="reader"/> position
            </summary>
            <param name="reader">The XML reader</param>
        </member>
        <member name="M:ABB.SrcML.Data.MethodCall.ReadXmlChild(System.Xml.XmlReader)">
            <summary>
            Processes the child of the current reader position into a child of this object.
            </summary>
            <param name="reader">The XML reader</param>
        </member>
        <member name="M:ABB.SrcML.Data.MethodCall.WriteXmlAttributes(System.Xml.XmlWriter)">
            <summary>
            Writes XML attributes from this object to the XML writer
            </summary>
            <param name="writer">The XML writer</param>
        </member>
        <member name="M:ABB.SrcML.Data.MethodCall.WriteXmlContents(System.Xml.XmlWriter)">
            <summary>
            Writes the contents of this object to <paramref name="writer"/>.
            </summary>
            <param name="writer">The XML writer to write to</param>
        </member>
        <member name="P:ABB.SrcML.Data.MethodCall.Arguments">
            <summary>
            The arguments to this call.
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.MethodCall.TypeArguments">
            <summary>
            The type arguments to this method call. 
            For example, in "Foo&lt;int&gt;(17)", int is a type argument.
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.MethodCall.IsConstructor">
            <summary> True if this is a call to a constructor </summary>
        </member>
        <member name="P:ABB.SrcML.Data.MethodCall.IsConstructorInitializer">
            <summary> True if this call appears in a constructor's initializer list. </summary>
        </member>
        <member name="P:ABB.SrcML.Data.MethodCall.IsDestructor">
            <summary> True if this is a call to a destructor </summary>
        </member>
        <member name="P:ABB.SrcML.Data.MethodCall.ParentStatement">
            <summary> The statement containing this expression. </summary>
        </member>
        <member name="T:ABB.SrcML.Data.NamePrefix">
            <summary>
            Represents the expression, if any, prefixing the use of a name.
            For example, in void Foo::Bar() {...}, "Foo::" is the prefix of Bar
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.NamePrefix.XmlName">
            <summary> The XML name for NamePrefix. </summary>
        </member>
        <member name="M:ABB.SrcML.Data.NamePrefix.FindMatches">
            <summary>
            Returns an enumerable of possible NamedScopes that this prefix might be referring to.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.NamePrefix.FindMatches(ABB.SrcML.Data.NamedScope)">
            <summary>
            Returns an enumerable of possible NamedScopes that this prefix might be referring to.
            </summary>
            <param name="root">The root NamedScope from which to begin searching for matches.</param>
        </member>
        <member name="M:ABB.SrcML.Data.NamePrefix.GetXmlName">
            <summary>
            Instance method for getting <see cref="F:ABB.SrcML.Data.NamePrefix.XmlName"/>
            </summary>
            <returns>Returns the XML name for NamePrefix</returns>
        </member>
        <member name="M:ABB.SrcML.Data.NamePrefix.ToString">
            <summary> Returns a string representation of this object. </summary>
        </member>
        <member name="P:ABB.SrcML.Data.NamePrefix.Names">
            <summary> The NameUses in this prefix. </summary>
        </member>
        <member name="T:ABB.SrcML.Data.NamedScope">
            <summary>
            Represents a program scope that has a name.
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.NamedScope.XmlName">
            <summary> The XML name for NamedScope. </summary>
        </member>
        <member name="F:ABB.SrcML.Data.NamedScope.XmlNameName">
            <summary> XML Name for <see cref="P:ABB.SrcML.Data.NamedScope.Name"/> </summary>
        </member>
        <member name="F:ABB.SrcML.Data.NamedScope.XmlPrefixName">
            <summary> XML Name for <see cref="T:ABB.SrcML.Data.NamePrefix"/> </summary>
        </member>
        <member name="F:ABB.SrcML.Data.NamedScope.XmlAccessibilityName">
            <summary> XML Name for <see cref="P:ABB.SrcML.Data.NamedScope.Accessibility"/> </summary>
        </member>
        <member name="M:ABB.SrcML.Data.NamedScope.#ctor">
            <summary> Creates an empty NamedScope. </summary>
        </member>
        <member name="M:ABB.SrcML.Data.NamedScope.AddChildStatement(ABB.SrcML.Data.Statement)">
            <summary>
            Adds the given Statement to the ChildStatements collection. Nothing will be done if <paramref name="child"/> is null.
            Updates the internal cache of named children, if appropriate.
            </summary>
            <param name="child">The Statement to add.</param>
        </member>
        <member name="M:ABB.SrcML.Data.NamedScope.RemoveChild(ABB.SrcML.Data.Statement)">
            <summary>
            Removes <paramref name="child"/> from the ChildStatements collection.
            Updates the internal cache of named children, if appropriate.
            </summary>
            <param name="child">The child statement to remove.</param>
        </member>
        <member name="M:ABB.SrcML.Data.NamedScope.GetFullName">
            <summary>
            Gets the full name by finding all of the named scope ancestors and combining them.
            </summary>
            <returns>The full name for this named scope</returns>
        </member>
        <member name="M:ABB.SrcML.Data.NamedScope.ReadXmlChild(System.Xml.XmlReader)">
            <summary>
            Processes the child of the current reader position into a child of this object.
            </summary>
            <param name="reader">The XML reader</param>
        </member>
        <member name="M:ABB.SrcML.Data.NamedScope.WriteXmlContents(System.Xml.XmlWriter)">
            <summary>
            Writes the contents of this object to <paramref name="writer"/>.
            </summary>
            <param name="writer">The XML writer to write to</param>
        </member>
        <member name="M:ABB.SrcML.Data.NamedScope.GetNamedChildren``1(ABB.SrcML.Data.NameUse,System.Boolean)">
            <summary>
            Returns the children of this statement that have the same name as the given <paramref name="use"/>, and the given type.
            This method searches only the immediate children, and not further descendants.
            The order of children within a NamedScope does not matter, so the location of the use is not taken into account.
            </summary>
            <typeparam name="T">The type of children to return.</typeparam>
            <param name="use">The use containing the name to search for.</param>
            <param name="searchDeclarations">Whether to search the child DeclarationStatements for named entities.</param>
        </member>
        <member name="M:ABB.SrcML.Data.NamedScope.GetNamedChildren``1(System.String,System.Boolean)">
            <summary>
            Returns the children of this statement named <paramref name="name"/> and the given <typeparamref name="T"/>.
            This method searches only the immediate children.
            In order to speed up the search, this method consults the internal name cache to get the list of matching <see cref="T:ABB.SrcML.Data.NamedScope">named scopes</see>
            </summary>
            <typeparam name="T">The type to filter on</typeparam>
            <param name="name">The name to search for</param>
            <param name="searchDeclarations">Whether to search the child declaration statements for named entities.</param>
            <returns>Any children of this statement named <paramref name="name"/> of type <typeparamref name="T"/></returns>
        </member>
        <member name="M:ABB.SrcML.Data.NamedScope.GetLocations">
            <summary>
            Returns the locations where this entity appears in the source.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.NamedScope.GetExpressions">
            <summary>
            Returns all the expressions within this statement.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.NamedScope.ToString">
            <summary>
            Returns a string representation of this statement.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.NamedScope.AddNamedChild(ABB.SrcML.Data.NamedScope)">
            <summary>
            Adds <paramref name="namedChild"/> to the name cache.
            If <paramref name="namedChild"/> is null, then nothing happens.
            </summary>
            <param name="namedChild">The named child to add</param>
        </member>
        <member name="M:ABB.SrcML.Data.NamedScope.RemoveNamedChild(ABB.SrcML.Data.NamedScope)">
            <summary>
            Removes <paramref name="namedChild"/> from the name cache.
            If <paramref name="namedChild"/>is null, then nothing happens.
            </summary>
            <param name="namedChild">The named child to remove</param>
        </member>
        <member name="P:ABB.SrcML.Data.NamedScope.Name">
            <summary> The name of the scope. </summary>
        </member>
        <member name="P:ABB.SrcML.Data.NamedScope.Prefix">
            <summary>
            For C/C++ methods, this property gives the specified scope that the method is defined in.
            For example, in the method <code>int A::B::MyFunction(char arg);</code> the NamePrefix is A::B.
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.NamedScope.Accessibility">
            <summary>
            The accessibility for this scope, e.g. public, private, etc.
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.NameHelper">
            <summary>
            <para>NameHelper provides a collection of static methods that aid in parsing elements of
            with a node type of <see cref="F:ABB.SrcML.SRC.Name"/>.</para> <para>The functions are
            targetted at helping to parse the common srcML idiom of nesting
            <see cref="F:ABB.SrcML.SRC.Name"/> elements within other <see cref="F:ABB.SrcML.SRC.Name">name
            elements.</see></para>
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.NameHelper.GetLastName(System.Xml.Linq.XElement)">
            <summary>
            Gets the string value for the <see cref="M:ABB.SrcML.Data.NameHelper.GetLastNameElement(System.Xml.Linq.XElement)">last name
            element</see> of
            <paramref name="nameElement"/></summary>
            <param name="nameElement">The name element</param>
            <returns>the string value for the last name in
            <paramref name="nameElement"/></returns>
        </member>
        <member name="M:ABB.SrcML.Data.NameHelper.GetLastNameElement(System.Xml.Linq.XElement)">
            <summary>
            Gets the last name from
            <paramref name="nameElement"/>. If
            <paramref name="nameElement"/> has no children of type <see cref="F:ABB.SrcML.SRC.Name"/>,
            it just returns
            <paramref name="nameElement"/>.
            </summary>
            <param name="nameElement">The name element</param>
            <returns>The last <see cref="F:ABB.SrcML.SRC.Name">name element</see> in
            <paramref name="nameElement"/>. If there are none, it returns
            <paramref name="nameElement"/></returns>
        </member>
        <member name="M:ABB.SrcML.Data.NameHelper.GetNameElementsExceptLast(System.Xml.Linq.XElement)">
            <summary>
            Gets all of the name elements from <paramref name="nameElement"/> except for the last one. If
            <paramref name="nameElement"/>has no children of type <see cref="F:ABB.SrcML.SRC.Name"/>,
            returns an empty enumerable.
            </summary>
            <param name="nameElement">The name element</param>
            <returns>An enumerable of <see cref="F:ABB.SrcML.SRC.Name">name elements</see> in
            <paramref name="nameElement"/>except for the <see cref="M:ABB.SrcML.Data.NameHelper.GetLastNameElement(System.Xml.Linq.XElement)">last
            </see></returns>
        </member>
        <member name="M:ABB.SrcML.Data.NameHelper.GetNameElementsFromName(System.Xml.Linq.XElement)">
            <summary>
            This helper function returns all of the names from a name element. If a name element has
            no children, it just yields the name element back. However, if the name element has
            child elements, it yields all of the child name elements.
            </summary>
            <param name="nameElement">The name element</param>
            <returns>An enumerable of either all the child names, or the root if there are
            none.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.NameHelper.GetNamesExceptLast(System.Xml.Linq.XElement)">
            <summary>
            Gets the string values for all of the name elements in
            <paramref name="nameElement"/><see cref="M:ABB.SrcML.Data.NameHelper.GetNameElementsExceptLast(System.Xml.Linq.XElement)">except for
            the last one</see>.
            </summary>
            <param name="nameElement">The name element</param>
            <returns>An enumerable of strings of all the name elements in
            <paramref name="nameElement"/>except for the last one. If there are no child elements,
            it returns an empty enumerable.</returns>
        </member>
        <member name="T:ABB.SrcML.Data.NamespaceUse">
            <summary>
            Represents the use of a namespace. This is primarily used in <see cref="T:ABB.SrcML.Data.AliasStatement"/> and <see cref="T:ABB.SrcML.Data.ImportStatement"/> objects.
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.NamespaceUse.XmlName">
            <summary> The XML name for NamespaceUse </summary>
        </member>
        <member name="M:ABB.SrcML.Data.NamespaceUse.GetXmlName">
            <summary>
            Instance method for getting <see cref="F:ABB.SrcML.Data.NamespaceUse.XmlName"/>
            </summary>
            <returns>Returns the XML name for NamespaceUse</returns>
        </member>
        <member name="M:ABB.SrcML.Data.NamespaceUse.ResolveType">
            <summary>
            Determines the possible types for this expression. 
            Since this is a NamespaceUse, there are never any matching types.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.NamespaceUse.FindMatches">
            <summary>
            Finds Namespaces that match this usage.
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.NullWorkingSet">
            <summary>
            The null working set object always has a null global scope object.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.NullWorkingSet.#ctor">
            <summary>
            Creates a new null working set object
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.NullWorkingSet.#ctor(ABB.SrcML.Data.DataArchive,System.Threading.Tasks.TaskFactory)">
            <summary>
            Creates a new null working set object
            </summary>
            <param name="archive">The data archive</param>
            <param name="factory">The task factory</param>
        </member>
        <member name="M:ABB.SrcML.Data.NullWorkingSet.Initialize">
            <summary>
            Initializes the working set. This does nothing.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.NullWorkingSet.InitializeAsync">
            <summary>
            Initializes the working set asynchronously. This does nothing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.Data.NullWorkingSet.Archive_FileChanged(System.Object,ABB.SrcML.FileEventRaisedArgs)">
            <summary>
            Method used to monitor <see cref="P:ABB.SrcML.Data.AbstractWorkingSet.Archive"/>. It does nothing.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ABB.SrcML.Data.OperatorUse">
            <summary>
            Represents the use of an operator in an expression.
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.OperatorUse.XmlName">
            <summary> The XML name for OperatorUse </summary>
        </member>
        <member name="F:ABB.SrcML.Data.OperatorUse.XmlTextName">
            <summary> XML Name for <see cref="P:ABB.SrcML.Data.OperatorUse.Text"/> </summary>
        </member>
        <member name="M:ABB.SrcML.Data.OperatorUse.GetXmlName">
            <summary>
            Instance method for getting <see cref="F:ABB.SrcML.Data.OperatorUse.XmlName"/>
            </summary>
            <returns>Returns the XML name for OperatorUse</returns>
        </member>
        <member name="M:ABB.SrcML.Data.OperatorUse.ReadXmlAttributes(System.Xml.XmlReader)">
            <summary>
            Read the XML attributes from the current <paramref name="reader"/> position
            </summary>
            <param name="reader">The XML reader</param>
        </member>
        <member name="M:ABB.SrcML.Data.OperatorUse.WriteXmlAttributes(System.Xml.XmlWriter)">
            <summary>
            Writes XML attributes from this object to the XML writer
            </summary>
            <param name="writer">The XML writer</param>
        </member>
        <member name="M:ABB.SrcML.Data.OperatorUse.ToString">
            <summary> Returns a string representation of this object. </summary>
        </member>
        <member name="P:ABB.SrcML.Data.OperatorUse.Text">
            <summary> The text of the operator. </summary>
        </member>
        <member name="T:ABB.SrcML.Data.ParseException">
            <summary>
            Represents an error from an <see cref="T:ABB.SrcML.Data.AbstractCodeParser"/>. The various parser functions are
            caught by <see cref="M:ABB.SrcML.Data.AbstractCodeParser.ParseFileUnit(System.Xml.Linq.XElement)"/> and rethrown as
            a ParseException.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.ParseException.#ctor(System.String,System.Int32,System.Int32,ABB.SrcML.Data.AbstractCodeParser,System.String,System.Exception)">
            <summary>
            Constructs a new ParseException
            </summary>
            <param name="fileName">The file name</param>
            <param name="lineNumber">The line number</param>
            <param name="columnNumber">The column number</param>
            <param name="parser">The parser object</param>
            <param name="message">Description of the exception</param>
            <param name="innerException">The exception being rethrown</param>
        </member>
        <member name="M:ABB.SrcML.Data.ParseException.#ctor(System.String,ABB.SrcML.Data.AbstractCodeParser,System.String)">
            <summary>
            Constructs a new ParseException
            </summary>
            <param name="fileName">The file name</param>
            <param name="parser">The parser object</param>
            <param name="message">Description of the exception</param>
        </member>
        <member name="M:ABB.SrcML.Data.ParseException.#ctor(System.String,ABB.SrcML.Data.AbstractCodeParser)">
            <summary>
            Constructs an exception object with a default message.
            </summary>
            <param name="fileName">The file name</param>
            <param name="parser">The parser object</param>
        </member>
        <member name="M:ABB.SrcML.Data.ParseException.ToString">
            <summary>
            A string representation of the exception. Includes the file name, line and column numbers, and the exception message.
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.ParseException.ColumnNumber">
            <summary>
            The column number that caused the exception
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.ParseException.FileName">
            <summary>
            The file name that caused the exception
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.ParseException.LineNumber">
            <summary>
            The line number that caused the exception
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.ParseException.Parser">
            <summary>
            The parser object that threw the exception
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.ParserContext">
            <summary>
            Parser context objects store the current state of the
            <see cref="M:ABB.SrcML.Data.AbstractCodeParser.ParseStatement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)"/> method.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.ParserContext.#ctor">
            <summary>
            Creates a new parser context
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.ParserContext.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Creates a new parser context
            </summary>
            <param name="fileUnit">The file unit for this context</param>
        </member>
        <member name="M:ABB.SrcML.Data.ParserContext.CreateLocation(System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Creates a location object for the given
            <paramref name="element"/>.
            </summary>
            <param name="element">The element to create a location for</param>
            <param name="isReference">whether or not this is a reference location</param>
            <returns>The new location object. The <see cref="P:ABB.SrcML.Data.SourceLocation.SourceFileName"/> will
            be set to see cref="FileName"/&gt;</returns>
        </member>
        <member name="M:ABB.SrcML.Data.ParserContext.CreateLocation(System.Xml.Linq.XElement)">
            <summary>
            Creates a location object for the given
            <paramref name="element"/>.
            </summary>
            <param name="element">The element to create a location for</param>
            <returns>The new location object. The <see cref="P:ABB.SrcML.Data.SourceLocation.SourceFileName"/> will
            be set to see cref="FileName"/&gt;</returns>
        </member>
        <member name="P:ABB.SrcML.Data.ParserContext.FileName">
            <summary>
            The file name from <see cref="P:ABB.SrcML.Data.ParserContext.FileUnit"/>
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.ParserContext.FileUnit">
            <summary>
            The file unit for this context. This should be set by a call to
            <see cref="M:ABB.SrcML.Data.AbstractCodeParser.ParseUnitElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)"/>. Alternatively, this can be set
            manually for calls to other Parse methods in <see cref="T:ABB.SrcML.Data.AbstractCodeParser"/>.
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.DataProject`1">
            <summary>
            The project class is a wrapper that automates the connections between <see cref="T:ABB.SrcML.Data.AbstractWorkingSet"/> objects, <see cref="T:ABB.SrcML.Data.DataArchive"/> objects, and <see cref="T:ABB.SrcML.SrcMLArchive"/> objects.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.DataProject`1.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new project object
            </summary>
            <param name="baseDirectory">The directory to store the data in</param>
            <param name="monitoredDirectory">The directory to monitor</param>
            <param name="srcMLBinaryDirectory">The directory with <c>src2srcml.exe</c></param>
        </member>
        <member name="M:ABB.SrcML.Data.DataProject`1.#ctor(System.Threading.Tasks.TaskScheduler,ABB.SrcML.AbstractFileMonitor,ABB.SrcML.SrcMLGenerator)">
            <summary>
            Creates a new project object
            </summary>
            <param name="scheduler">The task scheduler</param>
            <param name="monitor">The file monitor</param>
            <param name="srcmlGenerator">The generator object for srcML</param>
        </member>
        <member name="M:ABB.SrcML.Data.DataProject`1.SetupWorkingSet">
            <summary>
            Sets up the working set object
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.DataProject`1.Update">
            <summary>
            Updates all of the components of this working set:
            <list type="number">
            <item><description>Updates the <see cref="P:ABB.SrcML.SrcMLProject.SourceArchive"/> and <see cref="P:ABB.SrcML.SrcMLProject.NonSourceArchive"/> objects based on <see cref="P:ABB.SrcML.SrcMLProject.Monitor"/></description></item>
            <item><description>Updates the <see cref="P:ABB.SrcML.Data.DataProject`1.Data"/> based on the <see cref="P:ABB.SrcML.SrcMLProject.SourceArchive"/></description></item>
            <item><description>Updates the <see cref="P:ABB.SrcML.Data.DataProject`1.Data"/> based on the <see cref="P:ABB.SrcML.SrcMLProject.SourceArchive"/></description></item>
            </list>
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.DataProject`1.UpdateAsync">
            <summary>
            Updates all of the components of the working set asynchronously. This launches three tasks. Each task depends on its predecessor:
            <list type="number">
            <item><description>Update the <see cref="P:ABB.SrcML.SrcMLProject.SourceArchive"/> and the <see cref="P:ABB.SrcML.SrcMLProject.NonSourceArchive"/> objects based on <see cref="P:ABB.SrcML.SrcMLProject.Monitor"/></description></item>
            <item><description>Updates the <see cref="P:ABB.SrcML.Data.DataProject`1.Data"/> based on the <see cref="P:ABB.SrcML.SrcMLProject.SourceArchive"/></description></item>
            <item><description>Updates the <see cref="P:ABB.SrcML.Data.DataProject`1.Data"/> based on the <see cref="P:ABB.SrcML.SrcMLProject.SourceArchive"/></description></item>
            </list>
            </summary>
            <returns>The 3rd task</returns>
        </member>
        <member name="M:ABB.SrcML.Data.DataProject`1.StartMonitoring">
            <summary>
            Starts monitoring
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.DataProject`1.StopMonitoring">
            <summary>
            Stops monitoring
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.DataProject`1.Data">
            <summary>
            The archive for data
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.DataProject`1.ErrorLog">
            <summary>
            The error log to write srcML generation and parse errors to. If null, no errors are written.
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.DataProject`1.IsLoggingErrors">
            <summary>
            If true, exceptions are caught and logged to <see cref="P:ABB.SrcML.Data.DataProject`1.ErrorLog"/>. Otherwise, the exception is thrown.
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.DataProject`1.SourceArchiveMonitor">
            <summary>
            Monitor to connect <see cref="P:ABB.SrcML.SrcMLProject.SourceArchive"/> and <see cref="P:ABB.SrcML.Data.DataProject`1.Data"/>
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.DataProject`1.UnknownLog">
            <summary>
            If null, unknown elements found by <see cref="T:ABB.SrcML.Data.DataGenerator"/> are ignored. Otherwise, they are logged.
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.DataProject`1.WorkingSet">
            <summary>
            The working set
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.PropertyDefinition">
            <summary>
            Represents a property in C#.
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.PropertyDefinition.XmlName">
            <summary> The XML name for PropertyDefinition </summary>
        </member>
        <member name="F:ABB.SrcML.Data.PropertyDefinition.XmlGetterName">
            <summary> XML Name for <see cref="P:ABB.SrcML.Data.PropertyDefinition.Getter"/> </summary>
        </member>
        <member name="F:ABB.SrcML.Data.PropertyDefinition.XmlSetterName">
            <summary> XML Name for <see cref="P:ABB.SrcML.Data.PropertyDefinition.Setter"/> </summary>
        </member>
        <member name="F:ABB.SrcML.Data.PropertyDefinition.XmlReturnTypeName">
            <summary> XML Name for <see cref="P:ABB.SrcML.Data.PropertyDefinition.ReturnType"/> </summary>
        </member>
        <member name="M:ABB.SrcML.Data.PropertyDefinition.#ctor">
            <summary> Creates a new default PropertyDefinition. </summary>
        </member>
        <member name="M:ABB.SrcML.Data.PropertyDefinition.AddChildStatement(ABB.SrcML.Data.Statement)">
            <summary>
            Adds the given Statement to the ChildStatements collection.
            Also assigns it to Getter or Setter, as appropriate.
            </summary>
            <param name="child">The Statement to add.</param>
        </member>
        <member name="M:ABB.SrcML.Data.PropertyDefinition.GetXmlName">
            <summary>
            Instance method for getting <see cref="F:ABB.SrcML.Data.PropertyDefinition.XmlName"/>
            </summary>
            <returns>Returns the XML name for PropertyDefinition</returns>
        </member>
        <member name="M:ABB.SrcML.Data.PropertyDefinition.ReadXmlChild(System.Xml.XmlReader)">
            <summary>
            Processes the child of the current reader position into a child of this object.
            </summary>
            <param name="reader">The XML reader</param>
        </member>
        <member name="M:ABB.SrcML.Data.PropertyDefinition.WriteXmlContents(System.Xml.XmlWriter)">
            <summary>
            Writes the contents of this object to <paramref name="writer"/>.
            </summary>
            <param name="writer">The XML writer to write to</param>
        </member>
        <member name="M:ABB.SrcML.Data.PropertyDefinition.GetExpressions">
            <summary>
            Returns all the expressions within this statement.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.PropertyDefinition.ToString">
            <summary>
            Returns a string representation of this statement.
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.PropertyDefinition.ReturnType">
            <summary> The type of the property. </summary>
        </member>
        <member name="P:ABB.SrcML.Data.PropertyDefinition.Getter">
            <summary>
            The getter method for this property, if any.
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.PropertyDefinition.Setter">
            <summary>
            The setter method for this property, if any.
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.Queries.FindMethodCallsAtLocationQuery">
            <summary>
            This query finds all of the method calls at the given location
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.Queries.FindMethodCallsAtLocationQuery.#ctor(ABB.SrcML.Data.AbstractWorkingSet,System.Int32)">
            <summary>
            Creates a new query object
            </summary>
            <param name="workingSet">The working set to query</param>
            <param name="lockTimeout">The time in milliseconds to wait for the read lock</param>
        </member>
        <member name="M:ABB.SrcML.Data.Queries.FindMethodCallsAtLocationQuery.#ctor(ABB.SrcML.Data.AbstractWorkingSet,System.Int32,System.Threading.Tasks.TaskFactory)">
            <summary>
            Creates a new query object
            </summary>
            <param name="workingSet">The working set to query</param>
            <param name="lockTimeout">The time in milliseconds to wait for the read lock</param>
            <param name="factory">The task factory to use for asynchronous methods</param>
        </member>
        <member name="M:ABB.SrcML.Data.Queries.FindMethodCallsAtLocationQuery.Execute(ABB.SrcML.Data.Statement,ABB.SrcML.Data.SourceLocation)">
            <summary>
            Finds the <see cref="T:ABB.SrcML.Data.Queries.StatementForLocationQuery">furthest descendant</see> of <paramref name="root"/> that contains <paramref name="parameter"/>
            and then identifies all of the methods descended from that statement.
            Calls <see cref="M:ABB.SrcML.Data.Queries.FindMethodCallsAtLocationQuery.Query(ABB.SrcML.Data.Statement,ABB.SrcML.Data.SourceLocation)"/>.
            </summary>
            <param name="root">The root to query</param>
            <param name="parameter">The parameter to search for</param>
            <returns>A collection of method calls found at this location</returns>
        </member>
        <member name="M:ABB.SrcML.Data.Queries.FindMethodCallsAtLocationQuery.Query(ABB.SrcML.Data.Statement,ABB.SrcML.Data.SourceLocation)">
            <summary>
            Finds the <see cref="T:ABB.SrcML.Data.Queries.StatementForLocationQuery">furthest descendant</see> of <paramref name="root"/> that contains <paramref name="parameter"/>
            and then identifies all of the methods descended from that statement.
            </summary>
            <param name="root">The root to query</param>
            <param name="parameter">The parameter to search for</param>
            <returns>A collection of method calls found at this location</returns>
        </member>
        <member name="T:ABB.SrcML.Data.Queries.StatementForLocationQuery">
            <summary>
            This query object finds the deepest descendant of a statement that contains a given location
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.Queries.StatementForLocationQuery.#ctor(ABB.SrcML.Data.AbstractWorkingSet,System.Int32)">
            <summary>
            Create a new query object
            </summary>
            <param name="workingSet">The working set to query</param>
            <param name="lockTimeout">The time in milliseconds to wait for the read lock</param>
        </member>
        <member name="M:ABB.SrcML.Data.Queries.StatementForLocationQuery.#ctor(ABB.SrcML.Data.AbstractWorkingSet,System.Int32,System.Threading.Tasks.TaskFactory)">
            <summary>
            Create a new query object
            </summary>
            <param name="workingSet">The working set to query</param>
            <param name="lockTimeout">The time in milliseconds to wait for the read lock</param>
            <param name="factory">The task factory for asynchronous queries</param>
        </member>
        <member name="M:ABB.SrcML.Data.Queries.StatementForLocationQuery.Execute(ABB.SrcML.Data.Statement,ABB.SrcML.Data.SourceLocation)">
            <summary>
            Gets the last descendant of <paramref name="root"/> that contains the given <paramref name="parameter">location</paramref>
            </summary>
            <param name="root">The statement to query</param>
            <param name="parameter">The location to find</param>
            <returns>The furthest descendant of <paramref name="root"/> that contains <paramref name="parameter"/></returns>
        </member>
        <member name="M:ABB.SrcML.Data.Queries.StatementForLocationQuery.Query(ABB.SrcML.Data.Statement,ABB.SrcML.Data.SourceLocation)">
            <summary>
            Gets the last descendant of <paramref name="root"/> that contains the given <paramref name="parameter">location</paramref>
            </summary>
            <param name="root">The statement to query</param>
            <param name="parameter">The location to find</param>
            <returns>The furthest descendant of <paramref name="root"/> that contains <paramref name="parameter"/></returns>
        </member>
        <member name="T:ABB.SrcML.Data.Queries.StatementForLocationQuery`1">
            <summary>
            This query object finds the deepest descendant of a statement that contains a given location and has type <typeparamref name="TStatement"/>
            </summary>
            <typeparam name="TStatement"></typeparam>
        </member>
        <member name="M:ABB.SrcML.Data.Queries.StatementForLocationQuery`1.#ctor(ABB.SrcML.Data.AbstractWorkingSet,System.Int32)">
            <summary>
            Create a new query object
            </summary>
            <param name="workingSet">The working set to query</param>
            <param name="lockTimeout">The time in milliseconds to wait for the read lock</param>
        </member>
        <member name="M:ABB.SrcML.Data.Queries.StatementForLocationQuery`1.#ctor(ABB.SrcML.Data.AbstractWorkingSet,System.Int32,System.Threading.Tasks.TaskFactory)">
            <summary>
            Creates a new query object
            </summary>
            <param name="workingSet">The working set to query</param>
            <param name="lockTimeout">The time in milliseconds to wait for the read lock</param>
            <param name="factory">The task factory for asynchronous queries</param>
        </member>
        <member name="M:ABB.SrcML.Data.Queries.StatementForLocationQuery`1.Execute(ABB.SrcML.Data.Statement,ABB.SrcML.Data.SourceLocation)">
            <summary>
            Gets the last descendant of <paramref name="root"/> that contains the given <paramref name="parameter">location</paramref> of type <typeparamref name="TStatement"/>.
            Calls <see cref="M:ABB.SrcML.Data.Queries.StatementForLocationQuery`1.Query(ABB.SrcML.Data.Statement,ABB.SrcML.Data.SourceLocation)"/>.
            </summary>
            <param name="root">The statement to query</param>
            <param name="parameter">The location to find</param>
            <returns>The furthest descendant of <paramref name="root"/> that contains <paramref name="parameter"/> of type <typeparamref name="TStatement"/></returns>
        </member>
        <member name="M:ABB.SrcML.Data.Queries.StatementForLocationQuery`1.Query(ABB.SrcML.Data.Statement,ABB.SrcML.Data.SourceLocation)">
            <summary>
            Gets the last descendant of <paramref name="root"/> that contains the given <paramref name="parameter">location</paramref> of type <typeparamref name="TStatement"/>
            </summary>
            <param name="root">The statement to query</param>
            <param name="parameter">The location to find</param>
            <returns>The furthest descendant of <paramref name="root"/> that contains <paramref name="parameter"/> of type <typeparamref name="TStatement"/></returns>
        </member>
        <member name="T:ABB.SrcML.Data.ReturnStatement">
            <summary>
            Represents a return statement in a program.
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.ReturnStatement.XmlName">
            <summary> The XML name for ReturnStatement </summary>
        </member>
        <member name="M:ABB.SrcML.Data.ReturnStatement.GetXmlName">
            <summary>
            Instance method for getting <see cref="F:ABB.SrcML.Data.ReturnStatement.XmlName"/>
            </summary>
            <returns>Returns the XML name for ReturnStatement</returns>
        </member>
        <member name="M:ABB.SrcML.Data.ReturnStatement.ToString">
            <summary>
            Returns a string representation of this statement.
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.JavaCodeParser">
            <summary>
            Provides parsing facilities for the Java language
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.JavaCodeParser.#ctor">
            <summary>
            Creates a new java code parser object
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.JavaCodeParser.GetParentTypeUseElements(System.Xml.Linq.XElement)">
            <summary>
            Gets the parent type from a java type
            </summary>
            <param name="typeElement">The type element</param>
            <returns>The parent type elements for the class</returns>
        </member>
        <member name="M:ABB.SrcML.Data.JavaCodeParser.GetTypeForBooleanLiteral(System.String)">
            <summary>
            Parses a java boolean literal
            </summary>
            <param name="literalValue">the literal value</param>
            <returns>not implemented</returns>
        </member>
        <member name="M:ABB.SrcML.Data.JavaCodeParser.GetTypeForCharacterLiteral(System.String)">
            <summary>
            Parses a java character literal
            </summary>
            <param name="literalValue">the literal value</param>
            <returns>not implemented</returns>
        </member>
        <member name="M:ABB.SrcML.Data.JavaCodeParser.GetTypeForNumberLiteral(System.String)">
            <summary>
            Parses a java number literal
            </summary>
            <param name="literalValue">the literal value</param>
            <returns>not implemented</returns>
        </member>
        <member name="M:ABB.SrcML.Data.JavaCodeParser.GetTypeForStringLiteral(System.String)">
            <summary>
            Parses a java string
            </summary>
            <param name="literalValue">the literal value</param>
            <returns>Not implemented</returns>
        </member>
        <member name="M:ABB.SrcML.Data.JavaCodeParser.ParseNamespaceElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Creates a NamespaceDefinition object from the given Java package element.
            This will create a NamespaceDefinition for each component of the name, e.g. com.java.foo.bar, and link them as children of each other.
            This will not add any child statements to the bottom namespace.
            </summary>
            <param name="packageElement">The SRC.Package element to parse.</param>
            <param name="context">The parser context to use.</param>
            <returns>A NamespaceDefinition corresponding to <paramref name="packageElement"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.JavaCodeParser.ParseUnitElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Parses a java file unit. This handles the "package" directive by calling
            <see cref="M:ABB.SrcML.Data.JavaCodeParser.ParseNamespaceElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)"/>
            </summary>
            <param name="unitElement">The file unit to parse.</param>
            <param name="context">The parser context to use.</param>
        </member>
        <member name="M:ABB.SrcML.Data.JavaCodeParser.ParseForElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Creates a ForStatement or ForeachStatement from the given element.
            </summary>
            <param name="forElement">The SRC.For element to parse.</param>
            <param name="context">The parser context to use.</param>
            <returns>A ForStatement or ForeachStatement corresponding to forElement.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.JavaCodeParser.ParseAliasElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Parses the given <paramref name="aliasElement"/> and creates an ImportStatement or AliasStatement from it.
            </summary>
            <param name="aliasElement">The alias element to parse.</param>
            <param name="context">The parser context to use.</param>
            <returns>An ImportStatement if the element is an import, or an AliasStatement if it is an alias.</returns>
        </member>
        <member name="P:ABB.SrcML.Data.JavaCodeParser.ParserLanguage">
            <summary>
            Returns <c>Language.Java</c>
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.MethodDefinition">
            <summary>
            Represents a method definition in a program.
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.MethodDefinition.XmlName">
            <summary> The XML name for MethodDefinition </summary>
        </member>
        <member name="F:ABB.SrcML.Data.MethodDefinition.XmlConstructorInitializersName">
            <summary> XML Name for <see cref="P:ABB.SrcML.Data.MethodDefinition.ConstructorInitializers"/></summary>
        </member>
        <member name="F:ABB.SrcML.Data.MethodDefinition.XmlIsConstructorName">
            <summary> XML Name for <see cref="P:ABB.SrcML.Data.MethodDefinition.IsConstructor"/> </summary>
        </member>
        <member name="F:ABB.SrcML.Data.MethodDefinition.XmlIsDestructorName">
            <summary> XML Name for <see cref="P:ABB.SrcML.Data.MethodDefinition.IsDestructor"/> </summary>
        </member>
        <member name="F:ABB.SrcML.Data.MethodDefinition.XmlIsPartialName">
            <summary> XML Name for <see cref="P:ABB.SrcML.Data.MethodDefinition.IsPartial"/> </summary>
        </member>
        <member name="F:ABB.SrcML.Data.MethodDefinition.XmlParametersName">
            <summary> XML Name for <see cref="P:ABB.SrcML.Data.MethodDefinition.Parameters"/> </summary>
        </member>
        <member name="F:ABB.SrcML.Data.MethodDefinition.XmlReturnTypeName">
            <summary> XML Name for <see cref="P:ABB.SrcML.Data.MethodDefinition.ReturnType"/> </summary>
        </member>
        <member name="M:ABB.SrcML.Data.MethodDefinition.#ctor">
            <summary>
            Creates a new method definition object
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.MethodDefinition.AddMethodParameters(System.Collections.Generic.List{ABB.SrcML.Data.VariableDeclaration})">
            <summary>
            Adds set of method parameters to this method. If the <paramref name="parameters"/> have a different set of
            type name values than <see cref="P:ABB.SrcML.Data.MethodDefinition.Parameters"/>, then the current list is cleared
            and <paramref name="parameters"/> is used. If the variable type names match, then <paramref name="parameters"/>
            only matches if it has extra information (such as variable names or initializers).
            </summary>
            <param name="parameters">The collection of method parameters to add</param>
        </member>
        <member name="M:ABB.SrcML.Data.MethodDefinition.AddReturnType(ABB.SrcML.Data.TypeUse)">
            <summary>
            Adds a return type to the internal return type collection. If the <paramref name="returnType"/> has a different
            type name than this object, then the map is cleared and <paramref name="returnType" /> is the
            sole return type for this method.
            </summary>
            <param name="returnType">The return type object to add</param>
        </member>
        <member name="M:ABB.SrcML.Data.MethodDefinition.AddInitializer(ABB.SrcML.Data.MethodCall)">
            <summary>
            Adds the given initializer call to the ConstructorInitializers collection.
            </summary>
            <param name="initializerCall">The initializer to add.</param>
        </member>
        <member name="M:ABB.SrcML.Data.MethodDefinition.AddInitializers(System.Collections.Generic.IEnumerable{ABB.SrcML.Data.MethodCall})">
            <summary>
            Adds the given initializer calls to the ConstructorInitializers collection.
            </summary>
            <param name="initializerCalls">The initializers to add.</param>
        </member>
        <member name="M:ABB.SrcML.Data.MethodDefinition.GetXmlName">
            <summary>
            Instance method for getting <see cref="F:ABB.SrcML.Data.MethodDefinition.XmlName"/>
            </summary>
            <returns>Returns the XML name for MethodDefinition</returns>
        </member>
        <member name="M:ABB.SrcML.Data.MethodDefinition.GetExpressions">
            <summary>
            Returns all the expressions within this statement.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.MethodDefinition.ReadXmlAttributes(System.Xml.XmlReader)">
            <summary>
            Read the XML attributes from the current <paramref name="reader"/> position
            </summary>
            <param name="reader">The XML reader</param>
        </member>
        <member name="M:ABB.SrcML.Data.MethodDefinition.ReadXmlChild(System.Xml.XmlReader)">
            <summary>
            Processes the child of the current reader position into a child of this object.
            </summary>
            <param name="reader">The XML reader</param>
        </member>
        <member name="M:ABB.SrcML.Data.MethodDefinition.WriteXmlAttributes(System.Xml.XmlWriter)">
            <summary>
            Writes XML attributes from this object to the XML writer
            </summary>
            <param name="writer">The XML writer</param>
        </member>
        <member name="M:ABB.SrcML.Data.MethodDefinition.WriteXmlContents(System.Xml.XmlWriter)">
            <summary>
            Writes the contents of this object to <paramref name="writer"/>.
            </summary>
            <param name="writer">The XML writer to write to</param>
        </member>
        <member name="M:ABB.SrcML.Data.MethodDefinition.GetNamedChildren``1(ABB.SrcML.Data.NameUse,System.Boolean)">
            <summary>
            Returns the children of this MethodDefinition that have the same name as the given <paramref name="use"/>, and the given type.
            This method searches only the immediate children, and not further descendants.
            If the <paramref name="use"/> occurs within this MethodDefinition, only the children that occur prior to that use will be returned.
            </summary>
            <typeparam name="T">The type of children to return.</typeparam>
            <param name="use">The use containing the name to search for.</param>
            <param name="searchDeclarations">Whether to search the child DeclarationStatements for named entities.</param>
        </member>
        <member name="M:ABB.SrcML.Data.MethodDefinition.GetCallsToSelf">
            <summary>
            Finds the method calls that resolve to this MethodDefinition.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.MethodDefinition.GetCallsToSelf(ABB.SrcML.Data.Statement)">
            <summary>
            Finds the method calls that resolve to this MethodDefintion.
            </summary>
            <param name="rootScope">The Statement to search below for method calls.</param>
            <returns>An enumerable of MethodCalls located at/below <paramref name="rootScope"/> that resolve to this MethodDefinition.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.MethodDefinition.ToString">
            <summary>
            Returns a string representation of this statement.
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.MethodDefinition.IsConstructor">
            <summary> Indicates whether this method is a constructor. </summary>
        </member>
        <member name="P:ABB.SrcML.Data.MethodDefinition.IsDestructor">
            <summary> Indicates whether this method is a destructor. </summary>
        </member>
        <member name="P:ABB.SrcML.Data.MethodDefinition.IsPartial">
            <summary> Indicates whether this is a partial method. </summary>
        </member>
        <member name="P:ABB.SrcML.Data.MethodDefinition.Parameters">
            <summary> The parameters to the method. </summary>
        </member>
        <member name="P:ABB.SrcML.Data.MethodDefinition.ConstructorInitializers">
            <summary> The list of initialization calls appearing in a constructor. This is only applicable to C++ and C#. </summary>
        </member>
        <member name="P:ABB.SrcML.Data.MethodDefinition.ReturnType">
            <summary> The return type of the method. </summary>
        </member>
        <member name="T:ABB.SrcML.Data.NamespaceDefinition">
            <summary>
            Represents a namespace definition in a program.
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.NamespaceDefinition.XmlName">
            <summary> The XML name for NamespaceDefinition. </summary>
        </member>
        <member name="M:ABB.SrcML.Data.NamespaceDefinition.#ctor">
            <summary>
            Creates a new NamespaceDefinition object.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.NamespaceDefinition.GetXmlName">
            <summary>
            Instance method for getting <see cref="F:ABB.SrcML.Data.NamespaceDefinition.XmlName"/>
            </summary>
            <returns>Returns the XML name for NamespaceDefinition</returns>
        </member>
        <member name="M:ABB.SrcML.Data.NamespaceDefinition.GetNamedChildren``1(ABB.SrcML.Data.NameUse,System.Boolean)">
            <summary>
            Returns the children of this namespace that have the same name as the given <paramref name="use"/>, and the given type.
            This method searches only the immediate children, and not further descendants.
            If this is a global namespace, and the lanugage is C or C++, then only children that occur in the same file as, and prior to, the use will be returned.
            If there are no such children, then all matching children will be returned.
            </summary>
            <typeparam name="T">The type of children to return.</typeparam>
            <param name="use">The use containing the name to search for.</param>
            <param name="searchDeclarations">Whether to search the child DeclarationStatements for named entities.</param>
        </member>
        <member name="M:ABB.SrcML.Data.NamespaceDefinition.ToString">
            <summary>
            Returns a string representation of this statement.
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.NamespaceDefinition.IsAnonymous">
            <summary>
            Returns true if this is an anonymous namespace
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.NamespaceDefinition.IsGlobal">
            <summary>
            <para>Returns true if this namespace represents the global namespace</para> <para>A
            namespace is global if the <see cref="P:ABB.SrcML.Data.NamedScope.Name"/> is <c>String.Empty</c> and
            the namespace has no parent.</para>
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.CPlusPlusCodeParser">
            <summary>
            Provides parsing facilities for the C++ language
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.CPlusPlusCodeParser.#ctor">
            <summary>
            Creates a new C++ code parser object
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.CPlusPlusCodeParser.GetAccessModifierForMethod(System.Xml.Linq.XElement)">
            <summary>
            Gets the access modifiers for this method. In C++, methods are contained within
            "specifier" blocks
            </summary>
            <param name="methodElement">The method typeUseElement</param>
            <returns>The access modifier for this method; if none, it returns see
            cref="AccessModifier.None"/></returns>
        </member>
        <member name="M:ABB.SrcML.Data.CPlusPlusCodeParser.GetAccessModifierForType(System.Xml.Linq.XElement)">
            <summary>
            Gets the access modifier for this type. In C++, all types are public, so this always
            returns "public"
            </summary>
            <param name="typeElement">The type</param>
            <returns>the access modifier for this type.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.CPlusPlusCodeParser.GetNameForMethod(System.Xml.Linq.XElement)">
            <summary>
            Gets the name for a method. This is the unqualified name, not any class names that might
            be prepended to it.
            </summary>
            <param name="methodElement">The method typeUseElement</param>
            <returns>a string with the method name</returns>
        </member>
        <member name="M:ABB.SrcML.Data.CPlusPlusCodeParser.GetParametersFromMethodElement(System.Xml.Linq.XElement)">
            <summary>
            Checks if the method element has only one parameter "void" (which is really zero
            parameters in C/C++). If not, it just calls
            <see cref="M:ABB.SrcML.Data.AbstractCodeParser.GetParametersFromMethodElement(System.Xml.Linq.XElement)"/>
            </summary>
            <param name="methodElement">The method to get parameter elements for</param>
            <returns>An enumerable of parameter elements</returns>
        </member>
        <member name="M:ABB.SrcML.Data.CPlusPlusCodeParser.GetParentTypeUseElements(System.Xml.Linq.XElement)">
            <summary>
            Gets the parent types for this type. It parses the C++ ":" operator that appears in type
            definitions.
            </summary>
            <param name="typeElement">The type typeUseElement</param>
            <returns>A collection of type use elements that represent the parent classes</returns>
        </member>
        <member name="M:ABB.SrcML.Data.CPlusPlusCodeParser.GetTypeForBooleanLiteral(System.String)">
            <summary>
            Parses a C++ boolean literal
            </summary>
            <param name="literalValue">The literal value</param>
            <returns>Returns "bool"</returns>
        </member>
        <member name="M:ABB.SrcML.Data.CPlusPlusCodeParser.GetTypeForCharacterLiteral(System.String)">
            <summary>
            Parses a C++ character literal
            </summary>
            <param name="literalValue">The literal value</param>
            <returns>Returns "char"</returns>
        </member>
        <member name="M:ABB.SrcML.Data.CPlusPlusCodeParser.GetTypeForNumberLiteral(System.String)">
            <summary>
            Parses a C++ number literal
            </summary>
            <param name="literalValue">The literal value</param>
            <returns>Uses <see href="http://www.cplusplus.com/doc/tutorial/constants/">C++ number
            rules</see> to determine the proper type</returns>
        </member>
        <member name="M:ABB.SrcML.Data.CPlusPlusCodeParser.GetTypeForStringLiteral(System.String)">
            <summary>
            Parses a C++ string literal
            </summary>
            <param name="literalValue">The literal value</param>
            <returns>Returns "char*"</returns>
        </member>
        <member name="M:ABB.SrcML.Data.CPlusPlusCodeParser.ParseMethodElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Creates a method definition object from
            <paramref name="methodElement"/>. For C++, it looks for something like <code>int A::B::Foo(){ }</code>
            and adds "A::B" as the NamePrefix.
            </summary>
            <param name="methodElement">The method element to parse. This must be one of the elements contained in MethodElementNames.</param>
            <param name="context">The parser context</param>
            <returns>The method definition object for <paramref name="methodElement"/></returns>
        </member>
        <member name="M:ABB.SrcML.Data.CPlusPlusCodeParser.ParseNamespaceElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Creates a NamespaceDefinition object for the given namespace typeUseElement. This must
            be one of the typeUseElement types defined in NamespaceElementNames.
            </summary>
            <param name="namespaceElement">the namespace element</param>
            <param name="context">The parser context</param>
            <returns>a new NamespaceDefinition object</returns>
        </member>
        <member name="M:ABB.SrcML.Data.CPlusPlusCodeParser.ParseTypeElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Parses an element corresponding to a type definition and creates a TypeDefinition object 
            </summary>
            <param name="typeElement">The type element to parse. This must be one of the elements contained in TypeElementNames.</param>
            <param name="context">The parser context</param>
            <returns>A TypeDefinition parsed from the element</returns>
        </member>
        <member name="M:ABB.SrcML.Data.CPlusPlusCodeParser.ParseAliasElement(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext)">
            <summary>
            Parses the given <paramref name="aliasElement"/> and creates an ImportStatement or AliasStatement from it.
            </summary>
            <param name="aliasElement">The alias element to parse.</param>
            <param name="context">The parser context to use.</param>
            <returns>An ImportStatement if the element is an import, or an AliasStatement if it is an alias.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.CPlusPlusCodeParser.ParseClassChildren(System.Xml.Linq.XElement,ABB.SrcML.Data.ParserContext,ABB.SrcML.Data.AccessModifier)">
            <summary>
            This method parses and returns the children within the public/protected/private block under a C++ class, 
            and sets the specified access modifier on the children that support it.
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.CPlusPlusCodeParser.ParserLanguage">
            <summary>
            Returns <c>Language.CPlusPlus</c>
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.CPlusPlusCodeParser.SpecifierContainerNames">
            <summary>
            Returns the list of specifier containers (<see cref="F:ABB.SrcML.SRC.Private"/>,
            <see cref="F:ABB.SrcML.SRC.Protected"/>, and <see cref="F:ABB.SrcML.SRC.Public"/>
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.StatementDetachedException">
            <summary>
            Indicates that a given Statement does not have a global namespace (i.e. NamespaceDefinition.IsGlobal == true)
            as an ancestor.
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.StatementDetachedException.DetachedStatement">
            <summary>
            The Statement that is detached.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.StatementDetachedException.#ctor(ABB.SrcML.Data.Statement)">
            <summary>
            Creates a new exception.
            </summary>
            <param name="detachedStatement">The Statement that is detached.</param>
        </member>
        <member name="M:ABB.SrcML.Data.StatementDetachedException.#ctor(ABB.SrcML.Data.Statement,System.String)">
            <summary>
            Creates a new exception.
            </summary>
            <param name="detachedStatement">The Statement that is detached.</param>
            <param name="message">The desired message for the exception.</param>
        </member>
        <member name="T:ABB.SrcML.Data.SourceLocation">
            <summary>
            Source locations indicate where in the original source code a <see cref="T:ABB.SrcML.Data.AbstractProgramElement">program element</see> 
            is located. It stores the file name, line number, &amp; startingPosition.
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.SourceLocation.XmlName">
            <summary>XML name for serialization</summary>
        </member>
        <member name="F:ABB.SrcML.Data.SourceLocation.XmlFileAttributeName">
            <summary>XML name for the file attribute</summary>
        </member>
        <member name="F:ABB.SrcML.Data.SourceLocation.XmlStartingLineAttributeName">
            <summary>XML name for the starting line number</summary>
        </member>
        <member name="F:ABB.SrcML.Data.SourceLocation.XmlStartingColumnAttributeName">
            <summary>XML name for the starting column number</summary>
        </member>
        <member name="F:ABB.SrcML.Data.SourceLocation.XmlEndingLineAttributeName">
            <summary>XML name for the ending line number</summary>
        </member>
        <member name="F:ABB.SrcML.Data.SourceLocation.XmlEndingColumnAttributeName">
            <summary>XML name for the ending column number</summary>
        </member>
        <member name="M:ABB.SrcML.Data.SourceLocation.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new source location object
            </summary>
            <param name="fileName">The file name</param>
            <param name="startingLineNumber">The starting line number.</param>
            <param name="startingColumnNumber">The starting column within
            <paramref name="startingLineNumber"/></param>
        </member>
        <member name="M:ABB.SrcML.Data.SourceLocation.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new source location object
            </summary>
            <param name="fileName">The filename</param>
            <param name="startingLineNumber">the starting line number</param>
            <param name="startingPosition">The starting position within
            <paramref name="startingLineNumber"/></param>
            <param name="endingLineNumber">the ending line number</param>
            <param name="endingPosition">The ending position with
            <paramref name="endingLineNumber"/></param>
        </member>
        <member name="M:ABB.SrcML.Data.SourceLocation.#ctor">
            <summary>
            Creates a new empty SourceLocation
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.SourceLocation.Contains(ABB.SrcML.Data.SourceLocation)">
            <summary>
            Determines whether the given source location occurs within this location.
            </summary>
            <param name="otherLoc">The SourceLocation to test</param>
            <returns>True if this location subsumes the given location, False otherwise.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.SourceLocation.ToString">
            <summary>
            Returns a string representation of the SourceLocation.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.SourceLocation.GetSchema">
            <summary> Returns the XML schema for this object. </summary>
        </member>
        <member name="M:ABB.SrcML.Data.SourceLocation.GetXmlName">
            <summary> Returns the XML name for this object. </summary>
        </member>
        <member name="M:ABB.SrcML.Data.SourceLocation.ReadXml(System.Xml.XmlReader)">
            <summary>
            Read the current XML element into this object
            </summary>
            <param name="reader">The XML reader</param>
        </member>
        <member name="M:ABB.SrcML.Data.SourceLocation.ReadXmlAttributes(System.Xml.XmlReader)">
            <summary>
            Read the XML attributes from the current <paramref name="reader"/> position
            </summary>
            <param name="reader">The XML reader</param>
        </member>
        <member name="M:ABB.SrcML.Data.SourceLocation.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes all of the data to be serialized to <paramref name="writer"/>.
            </summary>
            <param name="writer">The XML writer</param>
        </member>
        <member name="P:ABB.SrcML.Data.SourceLocation.EndingColumnNumber">
            <summary>
            The ending column number for this location -- this is the starting starting position of
            this element's sibling.
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.SourceLocation.EndingLineNumber">
            <summary>
            The ending line number for this location -- this is the starting line number of this
            element's sibling.
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.SourceLocation.SourceFileName">
            <summary>
            The file name for this location
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.SourceLocation.StartingColumnNumber">
            <summary>
            The starting position within the line for this location
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.SourceLocation.StartingLineNumber">
            <summary>
            The starting line number for this location
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.SrcMLLocation">
            <summary>
            Represents a location in a SrcML document. This extends SourceLocation to include an XPath,
            and other relevant properties.
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.SrcMLLocation.XmlName">
            <summary>XML name for serialization</summary>
        </member>
        <member name="F:ABB.SrcML.Data.SrcMLLocation.XmlXPathAttributeName">
            <summary>XML attribute name for the <see cref="P:ABB.SrcML.Data.SrcMLLocation.XPath"/> property</summary>
        </member>
        <member name="F:ABB.SrcML.Data.SrcMLLocation.XmlIsReferenceAttribute">
            <summary>XML attribute name for the <see cref="P:ABB.SrcML.Data.SrcMLLocation.IsReference"/> property</summary>
        </member>
        <member name="M:ABB.SrcML.Data.SrcMLLocation.#ctor(System.Xml.Linq.XElement,System.String)">
            <summary>
            Creates a new srcML location object
            </summary>
            <param name="element">The srcML element that this location refers to</param>
            <param name="fileName">The filename</param>
        </member>
        <member name="M:ABB.SrcML.Data.SrcMLLocation.#ctor(System.Xml.Linq.XElement,System.Xml.Linq.XElement)">
            <summary>
            Creates a new srcML location object based on the given
            <see cref="T:System.Xml.Linq.XElement">XML element</see> and
            <see cref="F:ABB.SrcML.SRC.Unit">file unit</see>
            </summary>
            <param name="element">The element (should contain <see cref="T:ABB.SrcML.POS"/>
            attributes</param>
            <param name="fileUnit">The file unit (must be a see cref="ABB.SrcML.SRC.Unit"/&gt;)</param>
        </member>
        <member name="M:ABB.SrcML.Data.SrcMLLocation.#ctor(System.Xml.Linq.XElement,System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Creates a new srcML location object
            </summary>
            <param name="element">The srcML element that this location refers to</param>
            <param name="fileUnit">The file unit that contains
            <paramref name="element"/></param>
            <param name="isReferenceLocation">true if this is a reference location; false
            otherwise</param>
        </member>
        <member name="M:ABB.SrcML.Data.SrcMLLocation.#ctor(System.Xml.Linq.XElement,System.String,System.Boolean)">
            <summary>
            Creates a new srcML location object
            </summary>
            <param name="element">The srcML element that this location refers to</param>
            <param name="fileName">The filename</param>
            <param name="isReferenceLocation">true if this is a reference location; false
            otherwise</param>
        </member>
        <member name="M:ABB.SrcML.Data.SrcMLLocation.#ctor">
            <summary> Creates a new empty SrcMLLocation object. </summary>
        </member>
        <member name="M:ABB.SrcML.Data.SrcMLLocation.Contains(ABB.SrcML.Data.SourceLocation)">
            <summary>
            Determines whether the given source location occurs within this location. This will be
            determined using the XPath, if set.
            </summary>
            <param name="otherLoc">The SourceLocation to test</param>
            <returns>True if this location subsumes the given location, False otherwise.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.SrcMLLocation.GetXElement(ABB.SrcML.SrcMLArchive)">
            <summary>
            Gets the XElement referred to by <see cref="P:ABB.SrcML.Data.SrcMLLocation.XPath"/>.
            </summary>
            <param name="archive">The archive for this location</param>
            <returns>The XElement referred to by <see cref="P:ABB.SrcML.Data.SrcMLLocation.XPath"/></returns>
        </member>
        <member name="M:ABB.SrcML.Data.SrcMLLocation.GetXmlName">
            <summary> Returns the XML name for this program element. </summary>
        </member>
        <member name="M:ABB.SrcML.Data.SrcMLLocation.ReadXmlAttributes(System.Xml.XmlReader)">
            <summary>
            Read the XML attributes from the current <paramref name="reader"/> position
            </summary>
            <param name="reader">The XML reader</param>
        </member>
        <member name="M:ABB.SrcML.Data.SrcMLLocation.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes all of the data to be serialized to <paramref name="writer"/>.
            </summary>
            <param name="writer">The XML writer</param>
        </member>
        <member name="P:ABB.SrcML.Data.SrcMLLocation.IsReference">
            <summary>
            True if this location is a reference; false if it is a definition
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.SrcMLLocation.XPath">
            <summary>
            The XPath query that identifies this scope
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.StatementExtensions">
            <summary>
            The Statement Extensions class contains helper extension methods for statements
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.StatementExtensions.ContainsCallTo(ABB.SrcML.Data.Statement,ABB.SrcML.Data.MethodDefinition)">
            <summary>
            Tests whether this method contains any calls to <paramref name="otherMethod"/>
            </summary>
            <param name="root">The statement to start searching from</param>
            <param name="otherMethod">The other method</param>
            <returns>True if any of the calls in this method are a match for <paramref name="otherMethod"/></returns>
        </member>
        <member name="M:ABB.SrcML.Data.StatementExtensions.GetCallsTo(ABB.SrcML.Data.Statement,ABB.SrcML.Data.MethodDefinition,System.Boolean)">
            <summary>
            Gets all of the method calls in this statement that matches <paramref name="otherMethod"/>
            </summary>
            <param name="root">The statement to start searching from</param>
            <param name="otherMethod">The other method</param>
            <param name="searchDescendantStatements">If true, this will return all the method calls to<paramref name="otherMethod"/> from <paramref name="root"/> and its descendants</param>
        </member>
        <member name="T:ABB.SrcML.Data.SwitchStatement">
            <summary>
            Represents a switch statement in a program.
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.SwitchStatement.XmlName">
            <summary> The XML name for SwitchStatement </summary>
        </member>
        <member name="M:ABB.SrcML.Data.SwitchStatement.GetXmlName">
            <summary>
            Instance method for getting <see cref="F:ABB.SrcML.Data.SwitchStatement.XmlName"/>
            </summary>
            <returns>Returns the XML name for SwitchStatement</returns>
        </member>
        <member name="M:ABB.SrcML.Data.SwitchStatement.ToString">
            <summary>
            Returns a string representation of this statement.
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.ThrowStatement">
            <summary>
            Represents a throw statement in a program.
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.ThrowStatement.XmlName">
            <summary> The XML name for ThrowStatement </summary>
        </member>
        <member name="M:ABB.SrcML.Data.ThrowStatement.GetXmlName">
            <summary>
            Instance method for getting <see cref="F:ABB.SrcML.Data.ThrowStatement.XmlName"/>
            </summary>
            <returns>Returns the XML name for ThrowStatement</returns>
        </member>
        <member name="M:ABB.SrcML.Data.ThrowStatement.ToString">
            <summary>
            Returns a string representation of this statement.
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.TryStatement">
            <summary>
            Represents a try block in a program.
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.TryStatement.XmlName">
            <summary> The XML name for TryStatement </summary>
        </member>
        <member name="F:ABB.SrcML.Data.TryStatement.XmlCatchName">
            <summary> XML Name for <see cref="P:ABB.SrcML.Data.TryStatement.CatchStatements"/> </summary>
        </member>
        <member name="F:ABB.SrcML.Data.TryStatement.XmlFinallyName">
            <summary> XML Name for <see cref="P:ABB.SrcML.Data.TryStatement.FinallyStatements"/> </summary>
        </member>
        <member name="M:ABB.SrcML.Data.TryStatement.#ctor">
            <summary> Creates a new empty TryStatement. </summary>
        </member>
        <member name="M:ABB.SrcML.Data.TryStatement.GetXmlName">
            <summary>
            Instance method for getting <see cref="F:ABB.SrcML.Data.TryStatement.XmlName"/>
            </summary>
            <returns>Returns the XML name for TryStatement</returns>
        </member>
        <member name="M:ABB.SrcML.Data.TryStatement.AddCatchStatement(ABB.SrcML.Data.CatchStatement)">
            <summary>
            Adds the given catch to the CatchStatements collection.
            If <paramref name="catchStmt"/> is null, nothing will be done.
            </summary>
            <param name="catchStmt">The catch statement to add.</param>
        </member>
        <member name="M:ABB.SrcML.Data.TryStatement.AddCatchStatements(System.Collections.Generic.IEnumerable{ABB.SrcML.Data.CatchStatement})">
            <summary>
            Adds the given catches to the CatchStatements collection.
            </summary>
            <param name="catchStmts">An enumerable of catch statements to add.</param>
        </member>
        <member name="M:ABB.SrcML.Data.TryStatement.AddFinallyStatement(ABB.SrcML.Data.Statement)">
            <summary>
            Adds the given statement to the FinallyStatements collection.
            If <paramref name="finallyStmt"/> is null, nothing will be done.
            </summary>
            <param name="finallyStmt">The statement to add.</param>
        </member>
        <member name="M:ABB.SrcML.Data.TryStatement.AddFinallyStatements(System.Collections.Generic.IEnumerable{ABB.SrcML.Data.Statement})">
            <summary>
            Adds the given statements to the FinallyStatements collection.
            </summary>
            <param name="finallyStmts">An enumerable of statements to add.</param>
        </member>
        <member name="M:ABB.SrcML.Data.TryStatement.GetChildren">
            <summary>
            Returns the child statements, including the catch and finally statements.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.TryStatement.ReadXmlChild(System.Xml.XmlReader)">
            <summary>
            Processes the child of the current reader position into a child of this object.
            </summary>
            <param name="reader">The XML reader</param>
        </member>
        <member name="M:ABB.SrcML.Data.TryStatement.WriteXmlContents(System.Xml.XmlWriter)">
            <summary>
            Writes the contents of this object to <paramref name="writer"/>.
            </summary>
            <param name="writer">The XML writer to write to</param>
        </member>
        <member name="M:ABB.SrcML.Data.TryStatement.GetNamedChildren``1(ABB.SrcML.Data.NameUse,System.Boolean)">
            <summary>
            Returns the children of this statement that have the same name as the given <paramref name="use"/>, and the given type.
            This method searches only the immediate children, and not further descendants.
            If the <paramref name="use"/> occurs within this statement, this method will return only the children
            that occur prior to that use.
            </summary>
            <typeparam name="T">The type of children to return.</typeparam>
            <param name="use">The use containing the name to search for.</param>
            <param name="searchDeclarations">Whether to search the child DeclarationStatements for named entities.</param>
        </member>
        <member name="M:ABB.SrcML.Data.TryStatement.ToString">
            <summary>
            Returns a string representation of this statement.
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.TryStatement.CatchStatements">
            <summary> The catch statements associated with this try, if any. </summary>
        </member>
        <member name="P:ABB.SrcML.Data.TryStatement.FinallyStatements">
            <summary> The contents of the finally block associated with this try, if any. </summary>
        </member>
        <member name="T:ABB.SrcML.Data.TypeContainerUse">
            <summary>
            Represents a use of a program element that may contain types, e.g. namespaces or type definitions.
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.TypeContainerUse.XmlName">
            <summary> The XML name for TypeContainerUse </summary>
        </member>
        <member name="M:ABB.SrcML.Data.TypeContainerUse.GetXmlName">
            <summary>
            Instance method for getting <see cref="F:ABB.SrcML.Data.TypeContainerUse.XmlName"/>
            </summary>
            <returns>Returns the XML name for TypeContainerUse</returns>
        </member>
        <member name="M:ABB.SrcML.Data.TypeContainerUse.FindMatches">
            <summary>
            Finds TypeDefinitions or NamespaceDefinitions that match this name.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.TypeContainerUse.ResolveType">
            <summary>
            Determines the possible types of this expression.
            </summary>
            <returns>An enumerable of the matching TypeDefinitions for this expression's possible types.</returns>
        </member>
        <member name="T:ABB.SrcML.Data.TypeDefinition">
            <summary>
            Represents a type definition in a program.
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.TypeDefinition.XmlName">
            <summary> The XML name for TypeDefinition </summary>
        </member>
        <member name="F:ABB.SrcML.Data.TypeDefinition.XmlKindName">
            <summary> XML Name for <see cref="P:ABB.SrcML.Data.TypeDefinition.Kind"/> </summary>
        </member>
        <member name="F:ABB.SrcML.Data.TypeDefinition.XmlParentTypeNamesName">
            <summary> XML Name for <see cref="P:ABB.SrcML.Data.TypeDefinition.ParentTypeNames"/> </summary>
        </member>
        <member name="F:ABB.SrcML.Data.TypeDefinition.XmlIsPartialName">
            <summary> XML Name for <see cref="P:ABB.SrcML.Data.TypeDefinition.IsPartial"/> </summary>
        </member>
        <member name="M:ABB.SrcML.Data.TypeDefinition.#ctor">
            <summary> Creates a new type definition object </summary>
        </member>
        <member name="M:ABB.SrcML.Data.TypeDefinition.AddParentType(ABB.SrcML.Data.TypeUse)">
            <summary>
            Adds <paramref name="parentTypeUse"/>as a parent type for this type definition.
            </summary>
            <param name="parentTypeUse">The parent type to add</param>
        </member>
        <member name="M:ABB.SrcML.Data.TypeDefinition.GetXmlName">
            <summary>
            Instance method for getting <see cref="F:ABB.SrcML.Data.TypeDefinition.XmlName"/>
            </summary>
            <returns>Returns the XML name for TypeDefinition</returns>
        </member>
        <member name="M:ABB.SrcML.Data.TypeDefinition.GetTypeForKeyword(ABB.SrcML.Data.NameUse)">
            <summary>
            This handles the "this" keyword, the "base" keyword (C# only), and the "super" keyword (Java only).
            It searches for the appropriate type definition depending on the context of the usage.
            </summary>
            <param name="use">The use to find the containing type for</param>
            <returns>The type(s) referred to by the keyword</returns>
        </member>
        <member name="M:ABB.SrcML.Data.TypeDefinition.GetParentTypes(System.Boolean)">
            <summary>
            Resolves the parent type uses for this type definition.
            This method will only return the first 100 matches.
            </summary>
            <param name="recursive">Whether or not to recursively get the parents of this type's parents.</param>
            <returns>Matching parent types for this type</returns>
        </member>
        <member name="M:ABB.SrcML.Data.TypeDefinition.GetParentTypesAndSelf(System.Boolean)">
            <summary>
            Returns this class followed by all of its parent classes (via a call to
            <see cref="M:ABB.SrcML.Data.TypeDefinition.GetParentTypes(System.Boolean)"/>
            </summary>
            <param name="recursive">Whether or not to recursively get the parents of this type's parents.</param>
            <returns>An enumerable consisting of this object followed by the results of <see cref="M:ABB.SrcML.Data.TypeDefinition.GetParentTypes(System.Boolean)"/></returns>
        </member>
        <member name="M:ABB.SrcML.Data.TypeDefinition.GetExpressions">
            <summary>
            Returns all the expressions within this statement.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.TypeDefinition.SearchParentTypes(System.String)">
            <summary>
            Searches the parent types of this type for an INamedEntity with the given name.
            </summary>
            <param name="name">The name of the entity to search for.</param>
            <returns>The first matching entity found. In the case where a given parent type contains more than one matching entity, all of them are returned.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.TypeDefinition.SearchParentTypes``1(System.String,System.Func{``0,System.Boolean})">
            <summary>
            Searches the parent types of this type for entities with the given name and type, and where the given predicate is true.
            </summary>
            <typeparam name="T">The type of entities to search for.</typeparam>
            <param name="name">The name of the entity to search for.</param>
            <param name="predicate">A function to determine whether to return a given entity.</param>
            <returns>The first matching entity found. In the case where a given parent type contains more than one matching entity, all of them are returned.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.TypeDefinition.ReadXmlAttributes(System.Xml.XmlReader)">
            <summary>
            Read the XML attributes from the current <paramref name="reader"/> position
            </summary>
            <param name="reader">The XML reader</param>
        </member>
        <member name="M:ABB.SrcML.Data.TypeDefinition.ReadXmlChild(System.Xml.XmlReader)">
            <summary>
            Processes the child of the current reader position into a child of this object.
            </summary>
            <param name="reader">The XML reader</param>
        </member>
        <member name="M:ABB.SrcML.Data.TypeDefinition.WriteXmlAttributes(System.Xml.XmlWriter)">
            <summary>
            Writes XML attributes from this object to the XML writer
            </summary>
            <param name="writer">The XML writer</param>
        </member>
        <member name="M:ABB.SrcML.Data.TypeDefinition.WriteXmlContents(System.Xml.XmlWriter)">
            <summary>
            Writes the contents of this object to <paramref name="writer"/>.
            </summary>
            <param name="writer">The XML writer to write to</param>
        </member>
        <member name="M:ABB.SrcML.Data.TypeDefinition.ToString">
            <summary>
            Returns a string representation of this statement.
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.TypeDefinition.Kind">
            <summary>
            The kind of type this object represents, e.g. class, struct, etc.
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.TypeDefinition.ParentTypeNames">
            <summary> The parents of this type. </summary>
        </member>
        <member name="P:ABB.SrcML.Data.TypeDefinition.IsPartial">
            <summary> Indicates whether this is a partial type. </summary>
        </member>
        <member name="T:ABB.SrcML.Data.TypeKind">
            <summary>
            Enumerates the kinds of types encountered in the supported programming languages.
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.TypeKind.BuiltIn">
            <summary>
            Built-In type
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.TypeKind.Class">
            <summary>
            Class type
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.TypeKind.Struct">
            <summary>
            Struct type
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.TypeKind.Union">
            <summary>
            Union type
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.TypeKind.Interface">
            <summary>
            Interface type
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.TypeKind.Enumeration">
            <summary>
            Enumeration type
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.TypeKindExtensions">
            <summary>
            Contains extension methods for the TypeKind enum.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.TypeKindExtensions.ToKeyword(ABB.SrcML.Data.TypeKind)">
            <summary> Returns a keyword string for this TypeKind. </summary>
        </member>
        <member name="M:ABB.SrcML.Data.TypeKindExtensions.FromKeyword(System.String)">
            <summary> Returns a LiteralKind for the given keyword string. </summary>
        </member>
        <member name="T:ABB.SrcML.Data.TypeUse">
            <summary>
            Represents a use of a type. It is used in declarations and inheritance specifications, among other places.
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.TypeUse.XmlName">
            <summary> The XML name for TypeUse </summary>
        </member>
        <member name="F:ABB.SrcML.Data.TypeUse.XmlTypeParametersName">
            <summary> XML Name for <see cref="P:ABB.SrcML.Data.TypeUse.TypeParameters"/> </summary>
        </member>
        <member name="M:ABB.SrcML.Data.TypeUse.#ctor">
            <summary> Create a new type use object. </summary>
        </member>
        <member name="M:ABB.SrcML.Data.TypeUse.AddTypeParameter(ABB.SrcML.Data.TypeUse)">
            <summary>
            Adds a generic type parameter to this type use
            </summary>
            <param name="typeParameter">The type parameter to add</param>
        </member>
        <member name="M:ABB.SrcML.Data.TypeUse.AddTypeParameters(System.Collections.Generic.IEnumerable{ABB.SrcML.Data.TypeUse})">
            <summary>
            Adds all of the given type parameters to this type use element
            </summary>
            <param name="typeParameters">An enumerable of type use elements to add</param>
        </member>
        <member name="M:ABB.SrcML.Data.TypeUse.GetChildren">
            <summary>
            Returns the child expressions, including the TypeParameters.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.TypeUse.ResolveType">
            <summary>
            Finds all of the matches for this type
            </summary>
            <returns>All of the type definitions that match this type use</returns>
        </member>
        <member name="M:ABB.SrcML.Data.TypeUse.FindMatches">
            <summary>
            Finds TypeDefinitions that match this use.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.TypeUse.SignatureMatches(ABB.SrcML.Data.TypeDefinition)">
            <summary>
            Tests if this type use matches the signature for the given <paramref name="definition"/>.
            </summary>
            <param name="definition">the definition to compare to</param>
            <returns>true if the signatures match; false otherwise</returns>
        </member>
        <member name="M:ABB.SrcML.Data.TypeUse.GetXmlName">
            <summary>
            Instance method for getting <see cref="F:ABB.SrcML.Data.TypeUse.XmlName"/>
            </summary>
            <returns>Returns the XML name for TypeUse</returns>
        </member>
        <member name="M:ABB.SrcML.Data.TypeUse.ToString">
            <summary>
            Returns a string representation of this object.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.TypeUse.ReadXmlChild(System.Xml.XmlReader)">
            <summary>
            Processes the child of the current reader position into a child of this object.
            </summary>
            <param name="reader">The XML reader</param>
        </member>
        <member name="M:ABB.SrcML.Data.TypeUse.WriteXmlContents(System.Xml.XmlWriter)">
            <summary>
            Writes the contents of this object to <paramref name="writer"/>.
            </summary>
            <param name="writer">The XML writer to write to</param>
        </member>
        <member name="P:ABB.SrcML.Data.TypeUse.IsGeneric">
            <summary>
            Returns true if <see cref="P:ABB.SrcML.Data.TypeUse.TypeParameters"/> has any elements
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.TypeUse.TypeParameters">
            <summary>
            Parameters for the type use (indicates that this is a generic type use)
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.TypeUse.ParentStatement">
            <summary> The statement containing this expression. </summary>
        </member>
        <member name="T:ABB.SrcML.Data.UsingBlockStatement">
            <summary>
            Represents a using block statement in C#.
            These are of the form: 
            <code> using(Foo f = new Foo()) { ... } </code>
            Note that this is different from a using directive, e.g. <code>using System.Text;</code>
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.UsingBlockStatement.XmlName">
            <summary> The XML name for UsingBlockStatement </summary>
        </member>
        <member name="F:ABB.SrcML.Data.UsingBlockStatement.XmlInitializerName">
            <summary> XML Name for <see cref="P:ABB.SrcML.Data.UsingBlockStatement.Initializer"/> </summary>
        </member>
        <member name="M:ABB.SrcML.Data.UsingBlockStatement.GetXmlName">
            <summary>
            Instance method for getting <see cref="F:ABB.SrcML.Data.UsingBlockStatement.XmlName"/>
            </summary>
            <returns>Returns the XML name for UsingBlockStatement</returns>
        </member>
        <member name="M:ABB.SrcML.Data.UsingBlockStatement.ReadXmlChild(System.Xml.XmlReader)">
            <summary>
            Processes the child of the current reader position into a child of this object.
            </summary>
            <param name="reader">The XML reader</param>
        </member>
        <member name="M:ABB.SrcML.Data.UsingBlockStatement.WriteXmlContents(System.Xml.XmlWriter)">
            <summary>
            Writes the contents of this object to <paramref name="writer"/>.
            </summary>
            <param name="writer">The XML writer to write to</param>
        </member>
        <member name="M:ABB.SrcML.Data.UsingBlockStatement.GetExpressions">
            <summary>
            Returns all the expressions within this statement.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.UsingBlockStatement.ToString">
            <summary>
            Returns a string representation of this statement.
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.UsingBlockStatement.Initializer">
            <summary> The intialization expression for the using block. </summary>
        </member>
        <member name="T:ABB.SrcML.Data.VariableDeclaration">
            <summary>
            Represents a variable declaration
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.VariableDeclaration.XmlName">
            <summary> The XML name for VariableDeclaration </summary>
        </member>
        <member name="F:ABB.SrcML.Data.VariableDeclaration.XmlAccessibilityName">
            <summary> XML Name for <see cref="P:ABB.SrcML.Data.VariableDeclaration.Accessibility"/> </summary>
        </member>
        <member name="F:ABB.SrcML.Data.VariableDeclaration.XmlNameName">
            <summary> XML Name for <see cref="P:ABB.SrcML.Data.VariableDeclaration.Name"/> </summary>
        </member>
        <member name="F:ABB.SrcML.Data.VariableDeclaration.XmlTypeName">
            <summary> XML Name for <see cref="T:System.Type"/> </summary>
        </member>
        <member name="F:ABB.SrcML.Data.VariableDeclaration.XmlInitializerName">
            <summary> XML Name for <see cref="P:ABB.SrcML.Data.VariableDeclaration.Initializer"/> </summary>
        </member>
        <member name="F:ABB.SrcML.Data.VariableDeclaration.XmlRangeName">
            <summary> XML Name for <see cref="P:ABB.SrcML.Data.VariableDeclaration.Range"/> </summary>
        </member>
        <member name="M:ABB.SrcML.Data.VariableDeclaration.GetChildren">
            <summary>
            Returns the child expressions, including the VariableType, Initializer, and Range;
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.VariableDeclaration.GetLocations">
            <summary>
            Returns the locations where this entity appears in the source.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.VariableDeclaration.GetXmlName">
            <summary>
            Instance method for getting <see cref="F:ABB.SrcML.Data.VariableDeclaration.XmlName"/>
            </summary>
            <returns>Returns the XML name for VariableDeclaration</returns>
        </member>
        <member name="M:ABB.SrcML.Data.VariableDeclaration.ToString">
            <summary>
            Returns a string representation of this object.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.VariableDeclaration.ReadXmlChild(System.Xml.XmlReader)">
            <summary>
            Processes the child of the current reader position into a child of this object.
            </summary>
            <param name="reader">The XML reader</param>
        </member>
        <member name="M:ABB.SrcML.Data.VariableDeclaration.WriteXmlContents(System.Xml.XmlWriter)">
            <summary>
            Writes the contents of this object to <paramref name="writer"/>.
            </summary>
            <param name="writer">The XML writer to write to</param>
        </member>
        <member name="M:ABB.SrcML.Data.VariableDeclaration.ResolveType">
            <summary>
            Determines the type of this variable.
            </summary>
            <returns>An enumerable of the matching TypeDefinitions for this variable's type.</returns>
        </member>
        <member name="P:ABB.SrcML.Data.VariableDeclaration.Accessibility">
            <summary> The access modifier assigned to this type </summary>
        </member>
        <member name="P:ABB.SrcML.Data.VariableDeclaration.Name">
            <summary> The name of the variable </summary>
        </member>
        <member name="P:ABB.SrcML.Data.VariableDeclaration.VariableType">
            <summary> Description of the type for this variable </summary>
        </member>
        <member name="P:ABB.SrcML.Data.VariableDeclaration.Initializer">
            <summary> The expression, if any, used to intialize this variable </summary>
        </member>
        <member name="P:ABB.SrcML.Data.VariableDeclaration.Range">
            <summary> The range expression provided for this variable in a foreach loop. </summary>
        </member>
        <member name="P:ABB.SrcML.Data.VariableDeclaration.ParentStatement">
            <summary> The statement containing this expression. </summary>
        </member>
        <member name="T:ABB.SrcML.Data.VariableUse">
            <summary>
            The variable use class represents a use of a variable.
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.VariableUse.XmlName">
            <summary> The XML name for VariableUse </summary>
        </member>
        <member name="F:ABB.SrcML.Data.VariableUse.XmlIndexName">
            <summary> XML Name for <see cref="P:ABB.SrcML.Data.VariableUse.Index"/> </summary>
        </member>
        <member name="M:ABB.SrcML.Data.VariableUse.GetChildren">
            <summary>
            Returns the child expressions, including the Index.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.VariableUse.ToString">
            <summary> Returns a string representation of this object. </summary>
        </member>
        <member name="M:ABB.SrcML.Data.VariableUse.FindFirstMatchingType">
            <summary>
            Gets the first result from <see cref="M:ABB.SrcML.Data.VariableUse.ResolveType"/>
            </summary>
            <returns>The first matching variable type definition</returns>
        </member>
        <member name="M:ABB.SrcML.Data.VariableUse.FindMatches">
            <summary>
            Finds variable declarations that match this name.
            </summary>
            <returns>An enumerable of possible matches for this variable use.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.VariableUse.ResolveType">
            <summary>
            Finds all of the matching type definitions for all of the variable declarations that
            match this variable use
            </summary>
            <returns>An enumerable of matching type definitions</returns>
        </member>
        <member name="M:ABB.SrcML.Data.VariableUse.GetXmlName">
            <summary>
            Instance method for getting <see cref="F:ABB.SrcML.Data.VariableUse.XmlName"/>
            </summary>
            <returns>Returns the XML name for VariableUse</returns>
        </member>
        <member name="M:ABB.SrcML.Data.VariableUse.ReadXmlChild(System.Xml.XmlReader)">
            <summary>
            Processes the child of the current reader position into a child of this object.
            </summary>
            <param name="reader">The XML reader</param>
        </member>
        <member name="M:ABB.SrcML.Data.VariableUse.WriteXmlContents(System.Xml.XmlWriter)">
            <summary>
            Writes the contents of this object to <paramref name="writer"/>.
            </summary>
            <param name="writer">The XML writer to write to</param>
        </member>
        <member name="P:ABB.SrcML.Data.VariableUse.Index">
            <summary>
            The expression supplied as an index to the variable, if any.
            For example, in myVar[17] the index is 17.
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.VariableUse.ParentStatement">
            <summary> The statement containing this expression. </summary>
        </member>
        <member name="T:ABB.SrcML.Data.WhileStatement">
            <summary>
            Represents a while-loop in a program.
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.WhileStatement.XmlName">
            <summary> The XML name for WhileStatement </summary>
        </member>
        <member name="M:ABB.SrcML.Data.WhileStatement.GetXmlName">
            <summary>
            Instance method for getting <see cref="F:ABB.SrcML.Data.WhileStatement.XmlName"/>
            </summary>
            <returns>Returns the XML name for WhileStatement</returns>
        </member>
        <member name="M:ABB.SrcML.Data.WhileStatement.ToString">
            <summary>
            Returns a string representation of this statement.
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.XmlSerialization">
            <summary>
            XmlSerialization provides helper methods that aid in serializing and deserializing different objects in SrcML.Data.
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.XmlSerialization.DEFAULT_EXTENSION">
            <summary>
            The default extension to use for serialized files
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.XmlSerialization.DEFAULT_COMPRESSED_EXTENSION">
            <summary>
            The default extension to use for <see cref="T:System.IO.Compression.GZipStream">compressed</see> serialized files
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.XmlSerialization.Load(System.String)">
            <summary>
            Loads serialized data from <paramref name="fileName"/>. If <paramref name="fileName"/> has
            <see cref="F:ABB.SrcML.Data.XmlSerialization.DEFAULT_COMPRESSED_EXTENSION"/> as its extension it is treated as a compressed file.
            </summary>
            <param name="fileName">the file name to deserialize</param>
            <returns>The object stored in <paramref name="fileName"/></returns>
        </member>
        <member name="M:ABB.SrcML.Data.XmlSerialization.Load(System.String,System.Boolean)">
            <summary>
            Loads serialized data from <paramref name="fileName"/>
            </summary>
            <param name="fileName">The file name to deserialize</param>
            <param name="fileIsCompressed">If true, the file is decompressed through a <see cref="T:System.IO.Compression.GZipStream"/></param>
            <returns>The object stored in <paramref name="fileName"/></returns>
        </member>
        <member name="M:ABB.SrcML.Data.XmlSerialization.Load(System.IO.Stream)">
            <summary>
            Loads serialized data from <paramref name="inputStream"/>
            </summary>
            <param name="inputStream">The stream to deserialize from</param>
            <returns>The object stored in <paramref name="inputStream"/></returns>
        </member>
        <member name="M:ABB.SrcML.Data.XmlSerialization.WriteElement(ABB.SrcML.Data.IXmlElement,System.String)">
            <summary>
            Writes <paramref name="element"/> to <paramref name="fileName"/>.
            </summary>
            <param name="element">The element to serializer</param>
            <param name="fileName">The file name to write <paramref name="element"/> to</param>
        </member>
        <member name="M:ABB.SrcML.Data.XmlSerialization.WriteElement(ABB.SrcML.Data.IXmlElement,System.String,System.Boolean)">
            <summary>
            Writes <paramref name="element"/> to <paramref name="fileName"/> with or without <paramref name="compressionEnabled"/>
            </summary>
            <param name="element">The element to serialize</param>
            <param name="fileName">The file name to write <paramref name="fileName"/> to</param>
            <param name="compressionEnabled">if true, compress the output with <see cref="T:System.IO.Compression.GZipStream"/></param>
        </member>
        <member name="M:ABB.SrcML.Data.XmlSerialization.WriteElement(ABB.SrcML.Data.IXmlElement,System.IO.Stream)">
            <summary>
            Writes <paramref name="element"/> to <paramref name="outputStream"/>
            </summary>
            <param name="element">The element to serialize</param>
            <param name="outputStream">The output stream</param>
        </member>
        <member name="M:ABB.SrcML.Data.XmlSerialization.DeserializeExpression(System.Xml.XmlReader)">
            <summary>
            Deserializes the <see cref="T:ABB.SrcML.Data.Expression"/> at the current <paramref name="reader"/> position. This automatically looks up the correct
            object to instantiate based on <see cref="P:System.Xml.XmlReader.Name"/>.
            </summary>
            <param name="reader">The XML reader</param>
            <returns>A new expression of the appropriate type</returns>
        </member>
        <member name="M:ABB.SrcML.Data.XmlSerialization.DeserializeLocation(System.Xml.XmlReader)">
            <summary>
            Deserializes the <see cref="T:ABB.SrcML.Data.SourceLocation"/> at the current <paramref name="reader"/> position. This automatically looks up the correct
            object to instantiate based on <see cref="P:System.Xml.XmlReader.Name"/>.
            </summary>
            <param name="reader">The XML reader</param>
            <returns>A new location of the appropriate type</returns>
        </member>
        <member name="M:ABB.SrcML.Data.XmlSerialization.DeserializeStatement(System.Xml.XmlReader)">
            <summary>
            Deserializes the <see cref="T:ABB.SrcML.Data.Statement"/> at the current <paramref name="reader"/> position. This automatically looks up the correct
            object to instantiate based on <see cref="P:System.Xml.XmlReader.Name"/>.
            </summary>
            <param name="reader">The XML reader</param>
            <returns>A new statement object of the appropriate type</returns>
        </member>
        <member name="M:ABB.SrcML.Data.XmlSerialization.ReadChildLocations(System.Xml.XmlReader)">
            <summary>
            Deserializes a collection of <see cref="T:ABB.SrcML.Data.SourceLocation"/> objects from <paramref name="reader"/>.
            </summary>
            <param name="reader">The XML reader</param>
            <returns>An enumerable of <see cref="T:ABB.SrcML.Data.SourceLocation"/> objects</returns>
        </member>
        <member name="M:ABB.SrcML.Data.XmlSerialization.ReadChildExpressions(System.Xml.XmlReader)">
            <summary>
            Deserializes a collection of <see cref="T:ABB.SrcML.Data.Expression"/> objects from <paramref name="reader"/>.
            </summary>
            <param name="reader">The XML reader</param>
            <returns>An enumerable of <see cref="T:ABB.SrcML.Data.Expression"/> objects</returns>
        </member>
        <member name="M:ABB.SrcML.Data.XmlSerialization.ReadChildStatements(System.Xml.XmlReader)">
            <summary>
            Deserializes a collection of <see cref="T:ABB.SrcML.Data.Statement"/> objects from <paramref name="reader"/>.
            </summary>
            <param name="reader">The XML reader</param>
            <returns>An enumerable of <see cref="T:ABB.SrcML.Data.Statement"/> objects</returns>
        </member>
        <member name="M:ABB.SrcML.Data.XmlSerialization.WriteElement(System.Xml.XmlWriter,ABB.SrcML.Data.IXmlElement,System.String)">
            <summary>
            Writes the <paramref name="element"/> with <paramref name="writer"/>. The element name is taken from <see cref="M:ABB.SrcML.Data.IXmlElement.GetXmlName"/>.
            </summary>
            <param name="writer">The XML writer</param>
            <param name="element">The object to write</param>
            <param name="parentElementName">the parent element. If not null, <paramref name="element"/> is wrapped in an element with this name</param>
        </member>
        <member name="M:ABB.SrcML.Data.XmlSerialization.WriteCollection``1(System.Xml.XmlWriter,System.String,System.Collections.Generic.ICollection{``0})">
            <summary>
            Writes the given <paramref name="collection"/> to the <paramref name="writer"/> with the given <paramref name="collectionName">collection name</paramref>
            </summary>
            <typeparam name="T">the collection element type</typeparam>
            <param name="writer">The XML writer</param>
            <param name="collectionName">The element name to enclose the collection in</param>
            <param name="collection">The collection to serialize</param>
        </member>
        <member name="T:ABB.SrcML.Data.XNameMaps">
            <summary>
            This class houses a mapping of <see cref="T:System.Xml.Linq.XName"/> to
            <see cref="T:ABB.SrcML.Data.TypeKind"/>/
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.XNameMaps.GetKindForXElement(System.Xml.Linq.XElement)">
            <summary>
            gets the TypeKind for the given typeElement. The element must be of node type
            <see cref="F:ABB.SrcML.SRC.Struct"/>, <see cref="F:ABB.SrcML.SRC.StructDeclaration"/>, 
            <see cref="F:ABB.SrcML.SRC.Class"/>, <see cref="F:ABB.SrcML.SRC.ClassDeclaration"/>
            <see cref="F:ABB.SrcML.SRC.Union"/>, <see cref="F:ABB.SrcML.SRC.UnionDeclaration"/>, or
            <see cref="F:ABB.SrcML.SRC.Enum"/>
            </summary>
            <param name="typeElement">The type element</param>
            <returns>The kind of the type element</returns>
        </member>
    </members>
</doc>
