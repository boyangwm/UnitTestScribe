<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\Workspaces\SrcML.NET\TestInputs\method_def.cpp" pos:tabs="8"><cpp:include pos:line="1" pos:column="1">#<cpp:directive pos:line="1" pos:column="2">include</cpp:directive> <cpp:file pos:line="1" pos:column="10">&lt;iostream&gt;</cpp:file></cpp:include>

<class pos:line="3" pos:column="1">class <name pos:line="3" pos:column="7">MyClass</name> <block pos:line="3" pos:column="15">{<private type="default" pos:line="3" pos:column="16">
</private><public pos:line="4" pos:column="1">public:
    <constructor_decl><name pos:line="5" pos:column="5">MyClass</name><parameter_list pos:line="5" pos:column="12">()</parameter_list>;</constructor_decl>
    <constructor_decl><name pos:line="6" pos:column="5">MyClass</name><parameter_list pos:line="6" pos:column="12">(<param><decl><type><name pos:line="6" pos:column="13">int</name></type></decl></param>)</parameter_list>;</constructor_decl>
    <function_decl><type><name pos:line="7" pos:column="5">char</name><type:modifier pos:line="7" pos:column="9">*</type:modifier></type> <name pos:line="7" pos:column="11">foo</name><parameter_list pos:line="7" pos:column="14">(<param><decl><type><name pos:line="7" pos:column="15">int</name></type></decl></param>)</parameter_list>;</function_decl>
</public><private pos:line="8" pos:column="1">private:
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int</name></type> <name pos:line="9" pos:column="9">number</name></decl>;</decl_stmt>
    <function><type><name pos:line="10" pos:column="5">int</name></type> <name pos:line="10" pos:column="9">GetNumber</name><parameter_list pos:line="10" pos:column="18">()</parameter_list> <block pos:line="10" pos:column="21">{ <return pos:line="10" pos:column="23">return <expr><name pos:line="10" pos:column="30">number</name></expr>;</return>}</block></function>
</private>}</block>;</class>

<constructor><name><name pos:line="13" pos:column="1">MyClass</name><op:operator pos:line="13" pos:column="8">::</op:operator><name pos:line="13" pos:column="10">MyClass</name></name><parameter_list pos:line="13" pos:column="17">()</parameter_list> <block pos:line="13" pos:column="20">{
    <expr_stmt><expr><name pos:line="14" pos:column="5">number</name> <op:operator pos:line="14" pos:column="12">=</op:operator> <lit:literal type="number" pos:line="14" pos:column="14">17</lit:literal></expr>;</expr_stmt>
}</block></constructor>

<constructor><name><name pos:line="17" pos:column="1">MyClass</name><op:operator pos:line="17" pos:column="8">::</op:operator><name pos:line="17" pos:column="10">MyClass</name></name><parameter_list pos:line="17" pos:column="17">(<param><decl><type><name pos:line="17" pos:column="18">int</name></type> <name pos:line="17" pos:column="22">num</name></decl></param>)</parameter_list> <block pos:line="17" pos:column="27">{
    <expr_stmt><expr><name pos:line="18" pos:column="5">number</name> <op:operator pos:line="18" pos:column="12">=</op:operator> <name pos:line="18" pos:column="14">num</name></expr>;</expr_stmt>
}</block></constructor>

<function><type><name pos:line="21" pos:column="1">char</name><type:modifier pos:line="21" pos:column="5">*</type:modifier></type> <name><name pos:line="21" pos:column="7">MyClass</name><op:operator pos:line="21" pos:column="14">::</op:operator><name pos:line="21" pos:column="16">foo</name></name><parameter_list pos:line="21" pos:column="19">(<param><decl><type><name pos:line="21" pos:column="20">int</name></type> <name pos:line="21" pos:column="24">bar</name></decl></param>)</parameter_list> <block pos:line="21" pos:column="29">{
    <if pos:line="22" pos:column="5">if<condition pos:line="22" pos:column="7">(<expr><name pos:line="22" pos:column="8">bar</name> <op:operator pos:line="22" pos:column="12">&gt;</op:operator> <call><name pos:line="22" pos:column="14">GetNumber</name><argument_list pos:line="22" pos:column="23">()</argument_list></call></expr>)</condition><then pos:line="22" pos:column="26"> <block pos:line="22" pos:column="27">{
        <return pos:line="23" pos:column="9">return <expr><lit:literal type="string" pos:line="23" pos:column="16">"Hello, world!"</lit:literal></expr>;</return>
    }</block></then> <else pos:line="24" pos:column="7">else <block pos:line="24" pos:column="12">{
        <return pos:line="25" pos:column="9">return <expr><lit:literal type="string" pos:line="25" pos:column="16">"Goodbye cruel world!"</lit:literal></expr>;</return>
    }</block></else></if>
}</block></function>

<function><type><name pos:line="29" pos:column="1">int</name></type> <name pos:line="29" pos:column="5">main</name><parameter_list pos:line="29" pos:column="9">(<param><decl><type><name pos:line="29" pos:column="10">int</name></type> <name pos:line="29" pos:column="14">argc</name></decl></param>, <param><decl><type><name pos:line="29" pos:column="20">char</name><type:modifier pos:line="29" pos:column="24">*</type:modifier></type> <name><name pos:line="29" pos:column="26">argv</name><index pos:line="29" pos:column="30">[]</index></name></decl></param>)</parameter_list> <block pos:line="29" pos:column="34">{
    <decl_stmt><decl><type><name pos:line="30" pos:column="5">MyClass</name></type> <name pos:line="30" pos:column="13">mc</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name pos:line="31" pos:column="5">std</name><op:operator pos:line="31" pos:column="8">::</op:operator><name pos:line="31" pos:column="10">cout</name></name><op:operator pos:line="31" pos:column="14">&lt;&lt;</op:operator><name pos:line="31" pos:column="16">mc</name><op:operator pos:line="31" pos:column="18">.</op:operator><call><name pos:line="31" pos:column="19">foo</name><argument_list pos:line="31" pos:column="22">(<argument><expr><lit:literal type="number" pos:line="31" pos:column="23">5</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="31" pos:column="25">&lt;&lt;</op:operator><name><name pos:line="31" pos:column="27">std</name><op:operator pos:line="31" pos:column="30">::</op:operator><name pos:line="31" pos:column="32">endl</name></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name pos:line="32" pos:column="5">MyClass</name><type:modifier pos:line="32" pos:column="12">*</type:modifier></type> <name pos:line="32" pos:column="14">mc2</name> =<init pos:line="32" pos:column="19"> <expr><op:operator pos:line="32" pos:column="20">new</op:operator> <call><name pos:line="32" pos:column="24">MyClass</name><argument_list pos:line="32" pos:column="31">(<argument><expr><lit:literal type="number" pos:line="32" pos:column="32">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name pos:line="33" pos:column="5">std</name><op:operator pos:line="33" pos:column="8">::</op:operator><name pos:line="33" pos:column="10">cout</name></name><op:operator pos:line="33" pos:column="14">&lt;&lt;</op:operator><name pos:line="33" pos:column="16">mc2</name><op:operator pos:line="33" pos:column="19">-&gt;</op:operator><call><name pos:line="33" pos:column="21">foo</name><argument_list pos:line="33" pos:column="24">(<argument><expr><lit:literal type="number" pos:line="33" pos:column="25">5</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="33" pos:column="27">&lt;&lt;</op:operator><name><name pos:line="33" pos:column="29">std</name><op:operator pos:line="33" pos:column="32">::</op:operator><name pos:line="33" pos:column="34">endl</name></name></expr>;</expr_stmt>
    <return pos:line="34" pos:column="5">return <expr><lit:literal type="number" pos:line="34" pos:column="12">0</lit:literal></expr>;</return>
}</block></function>
</unit>
