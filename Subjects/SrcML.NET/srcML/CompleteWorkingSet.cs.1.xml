<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data\CompleteWorkingSet.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2014 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *  Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">System</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Collections</name><op:operator pos:line="13" pos:column="25">.</op:operator><name pos:line="13" pos:column="26">Concurrent</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Collections</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">Generic</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Linq</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Text</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Threading</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Threading</name><op:operator pos:line="18" pos:column="23">.</op:operator><name pos:line="18" pos:column="24">Tasks</name></name>;</using>

<namespace pos:line="20" pos:column="1">namespace <name><name pos:line="20" pos:column="11">ABB</name><op:operator pos:line="20" pos:column="14">.</op:operator><name pos:line="20" pos:column="15">SrcML</name><op:operator pos:line="20" pos:column="20">.</op:operator><name pos:line="20" pos:column="21">Data</name></name> <block pos:line="20" pos:column="26">{
    <comment type="line" pos:line="21" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="22" pos:column="5">/// The complete working set mirrors the internal &lt;see cref="AbstractWorkingSet.Archive"/&gt;.</comment>
    <comment type="line" pos:line="23" pos:column="5">/// Use of this working set should be done like this:</comment>
    <comment type="line" pos:line="24" pos:column="5">/// </comment>
    <comment type="line" pos:line="25" pos:column="5">/// &lt;example&gt;&lt;code&gt;</comment>
    <comment type="line" pos:line="26" pos:column="5">/// var workingSet = new CompleteWorkingSet(archive);</comment>
    <comment type="line" pos:line="27" pos:column="5">/// workingSet.Changed += (o,e) =&gt; { };</comment>
    <comment type="line" pos:line="28" pos:column="5">/// workingSet.Initialize();</comment>
    <comment type="line" pos:line="29" pos:column="5">/// workingSet.StartMonitoring();</comment>
    <comment type="line" pos:line="30" pos:column="5">/// &lt;/code&gt;&lt;/example&gt;</comment>
    <comment type="line" pos:line="31" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="32" pos:column="5">public</specifier> class <name pos:line="32" pos:column="18">CompleteWorkingSet</name> <super pos:line="32" pos:column="37">: <name pos:line="32" pos:column="39">AbstractWorkingSet</name></super> <block pos:line="32" pos:column="58">{
        <comment type="line" pos:line="33" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="34" pos:column="9">/// Creates a new complete working set object</comment>
        <comment type="line" pos:line="35" pos:column="9">/// &lt;/summary&gt;</comment>
        <constructor><specifier pos:line="36" pos:column="9">public</specifier> <name pos:line="36" pos:column="16">CompleteWorkingSet</name><parameter_list pos:line="36" pos:column="34">()</parameter_list> <member_list pos:line="36" pos:column="37">: <call><name pos:line="36" pos:column="39">this</name><argument_list pos:line="36" pos:column="43">(<argument><expr><name pos:line="36" pos:column="44">null</name></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="50">Task</name><op:operator pos:line="36" pos:column="54">.</op:operator><name pos:line="36" pos:column="55">Factory</name></name></expr></argument>)</argument_list></call> </member_list><block pos:line="36" pos:column="64">{ }</block></constructor>
        <comment type="line" pos:line="37" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="38" pos:column="9">/// Creates a new complete working set object</comment>
        <comment type="line" pos:line="39" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="40" pos:column="9">/// &lt;param name="archive"&gt;The data archive to monitor&lt;/param&gt;</comment>
        <constructor><specifier pos:line="41" pos:column="9">public</specifier> <name pos:line="41" pos:column="16">CompleteWorkingSet</name><parameter_list pos:line="41" pos:column="34">(<param><decl><type><name pos:line="41" pos:column="35">DataArchive</name></type> <name pos:line="41" pos:column="47">archive</name></decl></param>)</parameter_list> <member_list pos:line="41" pos:column="56">: <call><name pos:line="41" pos:column="58">this</name><argument_list pos:line="41" pos:column="62">(<argument><expr><name pos:line="41" pos:column="63">archive</name></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="72">Task</name><op:operator pos:line="41" pos:column="76">.</op:operator><name pos:line="41" pos:column="77">Factory</name></name></expr></argument>)</argument_list></call> </member_list><block pos:line="41" pos:column="86">{ }</block></constructor>

        <comment type="line" pos:line="43" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="44" pos:column="9">/// Creates a new complete working set object</comment>
        <comment type="line" pos:line="45" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="46" pos:column="9">/// &lt;param name="archive"&gt;The data archive to monitor&lt;/param&gt;</comment>
        <comment type="line" pos:line="47" pos:column="9">/// &lt;param name="factory"&gt;The task factory for asynchronous methods&lt;/param&gt;</comment>
        <constructor><specifier pos:line="48" pos:column="9">public</specifier> <name pos:line="48" pos:column="16">CompleteWorkingSet</name><parameter_list pos:line="48" pos:column="34">(<param><decl><type><name pos:line="48" pos:column="35">DataArchive</name></type> <name pos:line="48" pos:column="47">archive</name></decl></param>, <param><decl><type><name pos:line="48" pos:column="56">TaskFactory</name></type> <name pos:line="48" pos:column="68">factory</name></decl></param>)</parameter_list> <member_list pos:line="48" pos:column="77">: <call><name pos:line="48" pos:column="79">base</name><argument_list pos:line="48" pos:column="83">(<argument><expr><name pos:line="48" pos:column="84">archive</name></expr></argument>, <argument><expr><name pos:line="48" pos:column="93">factory</name></expr></argument>)</argument_list></call> </member_list><block pos:line="48" pos:column="102">{ }</block></constructor>

        <comment type="line" pos:line="50" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="51" pos:column="9">/// Initialize the working set by reading the entire archive into one merged scope</comment>
        <comment type="line" pos:line="52" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="53" pos:column="9">public</specifier> <specifier pos:line="53" pos:column="16">override</specifier> <name pos:line="53" pos:column="25">void</name></type> <name pos:line="53" pos:column="30">Initialize</name><parameter_list pos:line="53" pos:column="40">()</parameter_list> <block pos:line="53" pos:column="43">{
            <if pos:line="54" pos:column="13">if<condition pos:line="54" pos:column="15">(<expr><name pos:line="54" pos:column="16">IsDisposed</name></expr>)</condition><then pos:line="54" pos:column="27"> <block pos:line="54" pos:column="28">{ <throw pos:line="54" pos:column="30">throw <expr><op:operator pos:line="54" pos:column="36">new</op:operator> <call><name pos:line="54" pos:column="40">ObjectDisposedException</name><argument_list pos:line="54" pos:column="63">(<argument><expr><name pos:line="54" pos:column="64">null</name></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>
            <if pos:line="55" pos:column="13">if<condition pos:line="55" pos:column="15">(<expr><name pos:line="55" pos:column="16">null</name> <op:operator pos:line="55" pos:column="21">==</op:operator> <name pos:line="55" pos:column="24">Archive</name></expr>)</condition><then pos:line="55" pos:column="32"> <block pos:line="55" pos:column="33">{ <throw pos:line="55" pos:column="35">throw <expr><op:operator pos:line="55" pos:column="41">new</op:operator> <call><name pos:line="55" pos:column="45">InvalidOperationException</name><argument_list pos:line="55" pos:column="70">(<argument><expr><lit:literal type="string" pos:line="55" pos:column="71">"Archive is null"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>

            <decl_stmt><decl><type><name pos:line="57" pos:column="13">bool</name></type> <name pos:line="57" pos:column="18">workingSetChanged</name> <init pos:line="57" pos:column="36">= <expr><lit:literal type="boolean" pos:line="57" pos:column="38">false</lit:literal></expr></init></decl>;</decl_stmt>
            <try pos:line="58" pos:column="13">try <block pos:line="58" pos:column="17">{
                <expr_stmt><expr><name pos:line="59" pos:column="17">IsUpdating</name> <op:operator pos:line="59" pos:column="28">=</op:operator> <lit:literal type="boolean" pos:line="59" pos:column="30">true</lit:literal></expr>;</expr_stmt>
                
                <decl_stmt><decl><type><name pos:line="61" pos:column="17">var</name></type> <name pos:line="61" pos:column="21">mergedScopeFromArchive</name> <init pos:line="61" pos:column="44">= <expr><call><name pos:line="61" pos:column="46">ReadArchive</name><argument_list pos:line="61" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="62" pos:column="17">if<condition pos:line="62" pos:column="19">(<expr><name pos:line="62" pos:column="20">null</name> <op:operator pos:line="62" pos:column="25">!=</op:operator> <name pos:line="62" pos:column="28">mergedScopeFromArchive</name></expr>)</condition><then pos:line="62" pos:column="51"> <block pos:line="62" pos:column="52">{
                    <decl_stmt><decl><type><name pos:line="63" pos:column="21">GlobalScopeManager</name></type> <name pos:line="63" pos:column="40">scopeManager</name></decl>;</decl_stmt>
                    <if pos:line="64" pos:column="21">if<condition pos:line="64" pos:column="23">(<expr><call><name pos:line="64" pos:column="24">TryObtainWriteLock</name><argument_list pos:line="64" pos:column="42">(<argument><expr><name><name pos:line="64" pos:column="43">Timeout</name><op:operator pos:line="64" pos:column="50">.</op:operator><name pos:line="64" pos:column="51">Infinite</name></name></expr></argument>, <argument><expr pos:line="64" pos:column="61">out <name pos:line="64" pos:column="65">scopeManager</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="64" pos:column="79"> <block pos:line="64" pos:column="80">{
                        <try pos:line="65" pos:column="25">try <block pos:line="65" pos:column="29">{
                            <expr_stmt><expr><name><name pos:line="66" pos:column="29">scopeManager</name><op:operator pos:line="66" pos:column="41">.</op:operator><name pos:line="66" pos:column="42">GlobalScope</name></name> <op:operator pos:line="66" pos:column="54">=</op:operator> <name pos:line="66" pos:column="56">mergedScopeFromArchive</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name pos:line="67" pos:column="29">workingSetChanged</name> <op:operator pos:line="67" pos:column="47">=</op:operator> <lit:literal type="boolean" pos:line="67" pos:column="49">true</lit:literal></expr>;</expr_stmt>
                        }</block> <finally pos:line="68" pos:column="27">finally <block pos:line="68" pos:column="35">{
                            <expr_stmt><expr><call><name pos:line="69" pos:column="29">ReleaseWriteLock</name><argument_list pos:line="69" pos:column="45">()</argument_list></call></expr>;</expr_stmt>
                        }</block></finally></try>
                    }</block></then></if>
                }</block></then></if>
            }</block> <finally pos:line="73" pos:column="15">finally <block pos:line="73" pos:column="23">{
                <expr_stmt><expr><name pos:line="74" pos:column="17">IsUpdating</name> <op:operator pos:line="74" pos:column="28">=</op:operator> <lit:literal type="boolean" pos:line="74" pos:column="30">false</lit:literal></expr>;</expr_stmt>
            }</block></finally></try>
            
            <if pos:line="77" pos:column="13">if<condition pos:line="77" pos:column="15">(<expr><name pos:line="77" pos:column="16">workingSetChanged</name></expr>)</condition><then pos:line="77" pos:column="34"> <block pos:line="77" pos:column="35">{
                <expr_stmt><expr><call><name pos:line="78" pos:column="17">OnChanged</name><argument_list pos:line="78" pos:column="26">(<argument><expr><op:operator pos:line="78" pos:column="27">new</op:operator> <call><name pos:line="78" pos:column="31">EventArgs</name><argument_list pos:line="78" pos:column="40">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="82" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="83" pos:column="9">/// Asynchronously initialize the working set by reading the entire archive into one merged scope</comment>
        <comment type="line" pos:line="84" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="85" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="86" pos:column="9">public</specifier> <specifier pos:line="86" pos:column="16">override</specifier> <name pos:line="86" pos:column="25">Task</name></type> <name pos:line="86" pos:column="30">InitializeAsync</name><parameter_list pos:line="86" pos:column="45">()</parameter_list> <block pos:line="86" pos:column="48">{
            <if pos:line="87" pos:column="13">if<condition pos:line="87" pos:column="15">(<expr><name pos:line="87" pos:column="16">IsDisposed</name></expr>)</condition><then pos:line="87" pos:column="27"> <block pos:line="87" pos:column="28">{ <throw pos:line="87" pos:column="30">throw <expr><op:operator pos:line="87" pos:column="36">new</op:operator> <call><name pos:line="87" pos:column="40">ObjectDisposedException</name><argument_list pos:line="87" pos:column="63">(<argument><expr><name pos:line="87" pos:column="64">null</name></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>
            <if pos:line="88" pos:column="13">if<condition pos:line="88" pos:column="15">(<expr><name pos:line="88" pos:column="16">null</name> <op:operator pos:line="88" pos:column="21">==</op:operator> <name pos:line="88" pos:column="24">Archive</name></expr>)</condition><then pos:line="88" pos:column="32"> <block pos:line="88" pos:column="33">{ <throw pos:line="88" pos:column="35">throw <expr><op:operator pos:line="88" pos:column="41">new</op:operator> <call><name pos:line="88" pos:column="45">InvalidOperationException</name><argument_list pos:line="88" pos:column="70">(<argument><expr><lit:literal type="string" pos:line="88" pos:column="71">"Archive is null"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>

            <expr_stmt><expr><name pos:line="90" pos:column="13">IsUpdating</name> <op:operator pos:line="90" pos:column="24">=</op:operator> <lit:literal type="boolean" pos:line="90" pos:column="26">true</lit:literal></expr>;</expr_stmt>

            <return pos:line="92" pos:column="13">return <expr><call><name pos:line="92" pos:column="20">ReadArchiveAsync</name><argument_list pos:line="92" pos:column="36">()</argument_list></call><op:operator pos:line="92" pos:column="38">.</op:operator><call><name pos:line="92" pos:column="39">ContinueWith</name><argument_list pos:line="92" pos:column="51">(<argument><expr><lambda><parameter_list pos:line="92" pos:column="52">(<param><decl><name pos:line="92" pos:column="53">t</name></decl></param>)</parameter_list> <op:operator pos:line="92" pos:column="56">=&gt;</op:operator> <block pos:line="92" pos:column="59">{
                <decl_stmt><decl><type><name pos:line="93" pos:column="17">bool</name></type> <name pos:line="93" pos:column="22">globalScopeChanged</name> <init pos:line="93" pos:column="41">= <expr><lit:literal type="boolean" pos:line="93" pos:column="43">false</lit:literal></expr></init></decl>;</decl_stmt>

                <try pos:line="95" pos:column="17">try <block pos:line="95" pos:column="21">{
                    <if pos:line="96" pos:column="21">if<condition pos:line="96" pos:column="23">(<expr><name pos:line="96" pos:column="24">null</name> <op:operator pos:line="96" pos:column="29">!=</op:operator> <name><name pos:line="96" pos:column="32">t</name><op:operator pos:line="96" pos:column="33">.</op:operator><name pos:line="96" pos:column="34">Result</name></name></expr>)</condition><then pos:line="96" pos:column="41"> <block pos:line="96" pos:column="42">{
                        <decl_stmt><decl><type><name pos:line="97" pos:column="25">GlobalScopeManager</name></type> <name pos:line="97" pos:column="44">scopeManager</name></decl>;</decl_stmt>
                        <if pos:line="98" pos:column="25">if<condition pos:line="98" pos:column="27">(<expr><call><name pos:line="98" pos:column="28">TryObtainWriteLock</name><argument_list pos:line="98" pos:column="46">(<argument><expr><name><name pos:line="98" pos:column="47">Timeout</name><op:operator pos:line="98" pos:column="54">.</op:operator><name pos:line="98" pos:column="55">Infinite</name></name></expr></argument>, <argument><expr pos:line="98" pos:column="65">out <name pos:line="98" pos:column="69">scopeManager</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="98" pos:column="83"> <block pos:line="98" pos:column="84">{
                            <try pos:line="99" pos:column="29">try <block pos:line="99" pos:column="33">{
                                <expr_stmt><expr><name><name pos:line="100" pos:column="33">scopeManager</name><op:operator pos:line="100" pos:column="45">.</op:operator><name pos:line="100" pos:column="46">GlobalScope</name></name> <op:operator pos:line="100" pos:column="58">=</op:operator> <name><name pos:line="100" pos:column="60">t</name><op:operator pos:line="100" pos:column="61">.</op:operator><name pos:line="100" pos:column="62">Result</name></name></expr>;</expr_stmt>
                                <expr_stmt><expr><name pos:line="101" pos:column="33">globalScopeChanged</name> <op:operator pos:line="101" pos:column="52">=</op:operator> <lit:literal type="boolean" pos:line="101" pos:column="54">true</lit:literal></expr>;</expr_stmt>
                            }</block> <finally pos:line="102" pos:column="31">finally <block pos:line="102" pos:column="39">{
                                <expr_stmt><expr><call><name pos:line="103" pos:column="33">ReleaseWriteLock</name><argument_list pos:line="103" pos:column="49">()</argument_list></call></expr>;</expr_stmt>
                            }</block></finally></try>
                        }</block></then></if>
                    }</block></then></if>
                }</block> <finally pos:line="107" pos:column="19">finally <block pos:line="107" pos:column="27">{
                    <expr_stmt><expr><name pos:line="108" pos:column="21">IsUpdating</name> <op:operator pos:line="108" pos:column="32">=</op:operator> <lit:literal type="boolean" pos:line="108" pos:column="34">false</lit:literal></expr>;</expr_stmt>
                    <if pos:line="109" pos:column="21">if<condition pos:line="109" pos:column="23">(<expr><name pos:line="109" pos:column="24">globalScopeChanged</name></expr>)</condition><then pos:line="109" pos:column="43"> <block pos:line="109" pos:column="44">{
                        <expr_stmt><expr><call><name pos:line="110" pos:column="25">OnChanged</name><argument_list pos:line="110" pos:column="34">(<argument><expr><op:operator pos:line="110" pos:column="35">new</op:operator> <call><name pos:line="110" pos:column="39">EventArgs</name><argument_list pos:line="110" pos:column="48">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></finally></try>
            }</block></lambda></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="116" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="117" pos:column="9">/// Loads all of the files in the archive into a merged scope</comment>
        <comment type="line" pos:line="118" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="119" pos:column="9">/// &lt;returns&gt;A global scope for the archive&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="120" pos:column="9">protected</specifier> <name pos:line="120" pos:column="19">NamespaceDefinition</name></type> <name pos:line="120" pos:column="39">ReadArchive</name><parameter_list pos:line="120" pos:column="50">()</parameter_list> <block pos:line="120" pos:column="53">{
            <decl_stmt><decl><type><name pos:line="121" pos:column="13">NamespaceDefinition</name></type> <name pos:line="121" pos:column="33">globalScope</name> <init pos:line="121" pos:column="45">= <expr><name pos:line="121" pos:column="47">null</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="122" pos:column="13">IsUpdating</name> <op:operator pos:line="122" pos:column="24">=</op:operator> <lit:literal type="boolean" pos:line="122" pos:column="26">true</lit:literal></expr>;</expr_stmt>
                
            <decl_stmt><decl><type><name pos:line="124" pos:column="13">var</name></type> <name pos:line="124" pos:column="17">allData</name> <init pos:line="124" pos:column="25">= <expr><linq><from pos:line="124" pos:column="27">from <expr><name pos:line="124" pos:column="32">fileName</name></expr> <in pos:line="124" pos:column="41">in <expr><call><name><name pos:line="124" pos:column="44">Archive</name><op:operator pos:line="124" pos:column="51">.</op:operator><name pos:line="124" pos:column="52">GetFiles</name></name><argument_list pos:line="124" pos:column="60">()</argument_list></call></expr></in></from>
                            <select pos:line="125" pos:column="29">select <expr><call><name><name pos:line="125" pos:column="36">Archive</name><op:operator pos:line="125" pos:column="43">.</op:operator><name pos:line="125" pos:column="44">GetData</name></name><argument_list pos:line="125" pos:column="51">(<argument><expr><name pos:line="125" pos:column="52">fileName</name></expr></argument>)</argument_list></call></expr></select></linq></expr></init></decl>;</decl_stmt>
            <foreach pos:line="126" pos:column="13">foreach(<init><decl><type><name pos:line="126" pos:column="21">var</name></type> <name pos:line="126" pos:column="25">data</name> <range pos:line="126" pos:column="30">in <expr><name pos:line="126" pos:column="33">allData</name></expr></range></decl></init>) <block pos:line="126" pos:column="42">{
                <expr_stmt><expr><name pos:line="127" pos:column="17">globalScope</name> <op:operator pos:line="127" pos:column="29">=</op:operator> <op:operator pos:line="127" pos:column="31">(</op:operator><name pos:line="127" pos:column="32">null</name> <op:operator pos:line="127" pos:column="37">==</op:operator> <name pos:line="127" pos:column="40">globalScope</name> <op:operator pos:line="127" pos:column="52">?</op:operator> <name pos:line="127" pos:column="54">data</name> <op:operator pos:line="127" pos:column="59">:</op:operator> <call><name><name pos:line="127" pos:column="61">globalScope</name><op:operator pos:line="127" pos:column="72">.</op:operator><name pos:line="127" pos:column="73">Merge</name></name><argument_list pos:line="127" pos:column="78">(<argument><expr><name pos:line="127" pos:column="79">data</name></expr></argument>)</argument_list></call><op:operator pos:line="127" pos:column="84">)</op:operator></expr>;</expr_stmt>
            }</block></foreach>

            <return pos:line="130" pos:column="13">return <expr><name pos:line="130" pos:column="20">globalScope</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="133" pos:column="9">protected</specifier> <name><name pos:line="133" pos:column="19">Task</name><argument_list pos:line="133" pos:column="23">&lt;<argument><name pos:line="133" pos:column="24">NamespaceDefinition</name></argument>&gt;</argument_list></name></type> <name pos:line="133" pos:column="45">ReadArchiveAsync</name><parameter_list pos:line="133" pos:column="61">()</parameter_list> <block pos:line="133" pos:column="64">{
            <decl_stmt><decl><type><name><name pos:line="134" pos:column="13">BlockingCollection</name><argument_list pos:line="134" pos:column="31">&lt;<argument><name pos:line="134" pos:column="32">NamespaceDefinition</name></argument>&gt;</argument_list></name></type> <name pos:line="134" pos:column="53">fileScopes</name> <init pos:line="134" pos:column="64">= <expr><op:operator pos:line="134" pos:column="66">new</op:operator> <call><name><name pos:line="134" pos:column="70">BlockingCollection</name><argument_list pos:line="134" pos:column="88">&lt;<argument><name pos:line="134" pos:column="89">NamespaceDefinition</name></argument>&gt;</argument_list></name><argument_list pos:line="134" pos:column="109">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="136" pos:column="13">var</name></type> <name pos:line="136" pos:column="17">readTask</name> <init pos:line="136" pos:column="26">= <expr><call><name><name pos:line="136" pos:column="28">Factory</name><op:operator pos:line="136" pos:column="35">.</op:operator><name pos:line="136" pos:column="36">StartNew</name></name><argument_list pos:line="136" pos:column="44">(<argument><expr><lambda><parameter_list pos:line="136" pos:column="45">()</parameter_list> <op:operator pos:line="136" pos:column="48">=&gt;</op:operator> <block pos:line="136" pos:column="51">{
                <decl_stmt><decl><type><name pos:line="137" pos:column="17">var</name></type> <name pos:line="137" pos:column="21">options</name> <init pos:line="137" pos:column="29">= <expr><op:operator pos:line="137" pos:column="31">new</op:operator> <call><name pos:line="137" pos:column="35">ParallelOptions</name><argument_list pos:line="137" pos:column="50">()</argument_list></call> <block pos:line="137" pos:column="53">{ <expr_stmt><expr><name pos:line="137" pos:column="55">TaskScheduler</name> <op:operator pos:line="137" pos:column="69">=</op:operator> <name><name pos:line="137" pos:column="71">Factory</name><op:operator pos:line="137" pos:column="78">.</op:operator><name pos:line="137" pos:column="79">Scheduler</name></name></expr></expr_stmt> }</block></expr></init></decl></decl_stmt><empty_stmt pos:line="137" pos:column="90">;</empty_stmt>
                <expr_stmt><expr><call><name><name pos:line="138" pos:column="17">Parallel</name><op:operator pos:line="138" pos:column="25">.</op:operator><name pos:line="138" pos:column="26">ForEach</name></name><argument_list pos:line="138" pos:column="33">(<argument><expr><call><name><name pos:line="138" pos:column="34">Archive</name><op:operator pos:line="138" pos:column="41">.</op:operator><name pos:line="138" pos:column="42">GetFiles</name></name><argument_list pos:line="138" pos:column="50">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="138" pos:column="54">options</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="138" pos:column="63">(<param><decl><name pos:line="138" pos:column="64">fileName</name></decl></param>)</parameter_list> <op:operator pos:line="138" pos:column="74">=&gt;</op:operator> <block pos:line="138" pos:column="77">{
                    <decl_stmt><decl><type><name pos:line="139" pos:column="21">var</name></type> <name pos:line="139" pos:column="25">data</name> <init pos:line="139" pos:column="30">= <expr><call><name><name pos:line="139" pos:column="32">Archive</name><op:operator pos:line="139" pos:column="39">.</op:operator><name pos:line="139" pos:column="40">GetData</name></name><argument_list pos:line="139" pos:column="47">(<argument><expr><name pos:line="139" pos:column="48">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="140" pos:column="21">if<condition pos:line="140" pos:column="23">(<expr><name pos:line="140" pos:column="24">null</name> <op:operator pos:line="140" pos:column="29">!=</op:operator> <name pos:line="140" pos:column="32">data</name></expr>)</condition><then pos:line="140" pos:column="37"> <block pos:line="140" pos:column="38">{
                        <expr_stmt><expr><call><name><name pos:line="141" pos:column="25">fileScopes</name><op:operator pos:line="141" pos:column="35">.</op:operator><name pos:line="141" pos:column="36">Add</name></name><argument_list pos:line="141" pos:column="39">(<argument><expr><name pos:line="141" pos:column="40">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="144" pos:column="17">fileScopes</name><op:operator pos:line="144" pos:column="27">.</op:operator><name pos:line="144" pos:column="28">CompleteAdding</name></name><argument_list pos:line="144" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
            }</block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="147" pos:column="13">var</name></type> <name pos:line="147" pos:column="17">mergeTask</name> <init pos:line="147" pos:column="27">= <expr><call><name><name pos:line="147" pos:column="29">Factory</name><op:operator pos:line="147" pos:column="36">.</op:operator><name pos:line="147" pos:column="37">StartNew</name></name><argument_list pos:line="147" pos:column="45">(<argument><expr><lambda><parameter_list pos:line="147" pos:column="46">()</parameter_list> <op:operator pos:line="147" pos:column="49">=&gt;</op:operator> <block pos:line="147" pos:column="52">{
                <decl_stmt><decl><type><name pos:line="148" pos:column="17">NamespaceDefinition</name></type> <name pos:line="148" pos:column="37">globalScope</name> <init pos:line="148" pos:column="49">= <expr><name pos:line="148" pos:column="51">null</name></expr></init></decl>;</decl_stmt>
                <foreach pos:line="149" pos:column="17">foreach(<init><decl><type><name pos:line="149" pos:column="25">var</name></type> <name pos:line="149" pos:column="29">fileScope</name> <range pos:line="149" pos:column="39">in <expr><call><name><name pos:line="149" pos:column="42">fileScopes</name><op:operator pos:line="149" pos:column="52">.</op:operator><name pos:line="149" pos:column="53">GetConsumingEnumerable</name></name><argument_list pos:line="149" pos:column="75">()</argument_list></call></expr></range></decl></init>) <block pos:line="149" pos:column="79">{
                    <expr_stmt><expr><name pos:line="150" pos:column="21">globalScope</name> <op:operator pos:line="150" pos:column="33">=</op:operator> <op:operator pos:line="150" pos:column="35">(</op:operator><name pos:line="150" pos:column="36">null</name> <op:operator pos:line="150" pos:column="41">==</op:operator> <name pos:line="150" pos:column="44">globalScope</name> <op:operator pos:line="150" pos:column="56">?</op:operator> <name pos:line="150" pos:column="58">fileScope</name> <op:operator pos:line="150" pos:column="68">:</op:operator> <call><name><name pos:line="150" pos:column="70">globalScope</name><op:operator pos:line="150" pos:column="81">.</op:operator><name pos:line="150" pos:column="82">Merge</name></name><argument_list pos:line="150" pos:column="87">(<argument><expr><name pos:line="150" pos:column="88">fileScope</name></expr></argument>)</argument_list></call><op:operator pos:line="150" pos:column="98">)</op:operator></expr>;</expr_stmt>
                }</block></foreach>
                <return pos:line="152" pos:column="17">return <expr><name pos:line="152" pos:column="24">globalScope</name></expr>;</return>
            }</block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <return pos:line="155" pos:column="13">return <expr><name pos:line="155" pos:column="20">mergeTask</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
