<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\VisualStudio\ABB.SrcML.VisualStudio.SrcMLService\SrcMLGlobalService.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2013 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Jiang Zheng (ABB Group) - Initial implementation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">ABB</name><op:operator pos:line="12" pos:column="10">.</op:operator><name pos:line="12" pos:column="11">SrcML</name><op:operator pos:line="12" pos:column="16">.</op:operator><name pos:line="12" pos:column="17">Data</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">ABB</name><op:operator pos:line="13" pos:column="10">.</op:operator><name pos:line="13" pos:column="11">SrcML</name><op:operator pos:line="13" pos:column="16">.</op:operator><name pos:line="13" pos:column="17">Utilities</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">ABB</name><op:operator pos:line="14" pos:column="10">.</op:operator><name pos:line="14" pos:column="11">VisualStudio</name></name>;</using>
<using pos:line="15" pos:column="1">using <name pos:line="15" pos:column="7">EnvDTE</name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">Microsoft</name><op:operator pos:line="16" pos:column="16">.</op:operator><name pos:line="16" pos:column="17">VisualStudio</name><op:operator pos:line="16" pos:column="29">.</op:operator><name pos:line="16" pos:column="30">Shell</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">Microsoft</name><op:operator pos:line="17" pos:column="16">.</op:operator><name pos:line="17" pos:column="17">VisualStudio</name><op:operator pos:line="17" pos:column="29">.</op:operator><name pos:line="17" pos:column="30">Shell</name><op:operator pos:line="17" pos:column="35">.</op:operator><name pos:line="17" pos:column="36">Interop</name></name>;</using>
<using pos:line="18" pos:column="1">using <name pos:line="18" pos:column="7">System</name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">System</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">Collections</name><op:operator pos:line="19" pos:column="25">.</op:operator><name pos:line="19" pos:column="26">ObjectModel</name></name>;</using>
<using pos:line="20" pos:column="1">using <name><name pos:line="20" pos:column="7">System</name><op:operator pos:line="20" pos:column="13">.</op:operator><name pos:line="20" pos:column="14">IO</name></name>;</using>
<using pos:line="21" pos:column="1">using <name><name pos:line="21" pos:column="7">System</name><op:operator pos:line="21" pos:column="13">.</op:operator><name pos:line="21" pos:column="14">Threading</name></name>;</using>
<using pos:line="22" pos:column="1">using <name><name pos:line="22" pos:column="7">System</name><op:operator pos:line="22" pos:column="13">.</op:operator><name pos:line="22" pos:column="14">Timers</name></name>;</using>
<using pos:line="23" pos:column="1">using <name><name pos:line="23" pos:column="7">System</name><op:operator pos:line="23" pos:column="13">.</op:operator><name pos:line="23" pos:column="14">Xml</name><op:operator pos:line="23" pos:column="17">.</op:operator><name pos:line="23" pos:column="18">Linq</name></name>;</using>

<namespace pos:line="25" pos:column="1">namespace <name><name pos:line="25" pos:column="11">ABB</name><op:operator pos:line="25" pos:column="14">.</op:operator><name pos:line="25" pos:column="15">SrcML</name><op:operator pos:line="25" pos:column="20">.</op:operator><name pos:line="25" pos:column="21">VisualStudio</name></name> <block pos:line="25" pos:column="34">{

    <comment type="line" pos:line="27" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="28" pos:column="5">/// Step 4: Implement the global service class. This is the class that implements the global</comment>
    <comment type="line" pos:line="29" pos:column="5">/// service. All it needs to do is to implement the interfaces exposed by this service (in this</comment>
    <comment type="line" pos:line="30" pos:column="5">/// case ISrcMLGlobalService). This class also needs to implement the SSrcMLGlobalService</comment>
    <comment type="line" pos:line="31" pos:column="5">/// interface in order to notify the package that it is actually implementing this service.</comment>
    <comment type="line" pos:line="32" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="33" pos:column="5">public</specifier> class <name pos:line="33" pos:column="18">SrcMLGlobalService</name> <super pos:line="33" pos:column="37">: <name pos:line="33" pos:column="39">ISrcMLGlobalService</name>, <name pos:line="33" pos:column="60">SSrcMLGlobalService</name></super> <block pos:line="33" pos:column="80">{

        <comment type="line" pos:line="35" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="36" pos:column="9">/// The folder name of storing srcML archives.</comment>
        <comment type="line" pos:line="37" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="38" pos:column="9">private</specifier> <specifier pos:line="38" pos:column="17">const</specifier> <name pos:line="38" pos:column="23">string</name></type> <name pos:line="38" pos:column="30">srcMLArchivesFolderString</name> <init pos:line="38" pos:column="56">= <expr><lit:literal type="string" pos:line="38" pos:column="58">"\\SrcMLArchives"</lit:literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="40" pos:column="9">private</specifier> <specifier pos:line="40" pos:column="17">const</specifier> <name pos:line="40" pos:column="23">string</name></type> <name pos:line="40" pos:column="30">ResetFileName</name> <init pos:line="40" pos:column="44">= <expr><lit:literal type="string" pos:line="40" pos:column="46">"RESETSOLUTION"</lit:literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="42" pos:column="9">private</specifier> <name pos:line="42" pos:column="17">uint</name></type> <name pos:line="42" pos:column="22">amountCompleted</name> <init pos:line="42" pos:column="38">= <expr><lit:literal type="number" pos:line="42" pos:column="40">0</lit:literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="44" pos:column="9">private</specifier> <name pos:line="44" pos:column="17">uint</name></type> <name pos:line="44" pos:column="22">cookie</name> <init pos:line="44" pos:column="29">= <expr><lit:literal type="number" pos:line="44" pos:column="31">0</lit:literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="46" pos:column="9">public</specifier> <name pos:line="46" pos:column="16">SrcMLProject</name></type> <name pos:line="46" pos:column="29">CurrentProject</name> <block pos:line="46" pos:column="44">{ <function_decl><name pos:line="46" pos:column="46">get</name>;</function_decl> <function_decl><specifier pos:line="46" pos:column="51">private</specifier> <name pos:line="46" pos:column="59">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="48" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="49" pos:column="9">/// SrcML.NET's Solution Monitor.</comment>
        <comment type="line" pos:line="50" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="51" pos:column="9">public</specifier> <name pos:line="51" pos:column="16">SourceMonitor</name></type> <name pos:line="51" pos:column="30">CurrentMonitor</name> <block pos:line="51" pos:column="45">{ <function_decl><name pos:line="51" pos:column="47">get</name>;</function_decl> <function_decl><specifier pos:line="51" pos:column="52">private</specifier> <name pos:line="51" pos:column="60">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="53" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="54" pos:column="9">/// SrcML.NET's SrcMLArchive.</comment>
        <comment type="line" pos:line="55" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="56" pos:column="9">public</specifier> <name pos:line="56" pos:column="16">SrcMLArchive</name></type> <name pos:line="56" pos:column="29">CurrentSrcMLArchive</name> <block pos:line="56" pos:column="49">{
            <function><name pos:line="57" pos:column="13">get</name> <block pos:line="57" pos:column="17">{
                <return pos:line="58" pos:column="17">return <expr><op:operator pos:line="58" pos:column="24">(</op:operator><name pos:line="58" pos:column="25">null</name> <op:operator pos:line="58" pos:column="30">!=</op:operator> <name pos:line="58" pos:column="33">CurrentProject</name> <op:operator pos:line="58" pos:column="48">?</op:operator> <name><name pos:line="58" pos:column="50">CurrentProject</name><op:operator pos:line="58" pos:column="64">.</op:operator><name pos:line="58" pos:column="65">SourceArchive</name></name> <op:operator pos:line="58" pos:column="79">:</op:operator> <name pos:line="58" pos:column="81">null</name><op:operator pos:line="58" pos:column="85">)</op:operator></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="62" pos:column="9">private</specifier> <name pos:line="62" pos:column="17">int</name></type> <name pos:line="62" pos:column="21">frozen</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="63" pos:column="9">private</specifier> <name pos:line="63" pos:column="17">ReentrantTimer</name></type> <name pos:line="63" pos:column="32">SaveTimer</name></decl>;</decl_stmt>
        

        <comment type="line" pos:line="66" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="67" pos:column="9">/// Store in this variable the service provider that will be used to query for other</comment>
        <comment type="line" pos:line="68" pos:column="9">/// services.</comment>
        <comment type="line" pos:line="69" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="70" pos:column="9">private</specifier> <name pos:line="70" pos:column="17">IServiceProvider</name></type> <name pos:line="70" pos:column="34">serviceProvider</name></decl>;</decl_stmt>

        <comment type="line" pos:line="72" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="73" pos:column="9">/// The path of SrcML.NET Service VS extension.</comment>
        <comment type="line" pos:line="74" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="75" pos:column="9">private</specifier> <name pos:line="75" pos:column="17">string</name></type> <name pos:line="75" pos:column="24">SrcMLServiceDirectory</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="77" pos:column="9">private</specifier> <name pos:line="77" pos:column="17">ITaskManagerService</name></type> <name pos:line="77" pos:column="37">_taskManager</name></decl>;</decl_stmt>

        <comment type="line" pos:line="79" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="80" pos:column="9">/// Status bar service.</comment>
        <comment type="line" pos:line="81" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="82" pos:column="9">private</specifier> <name pos:line="82" pos:column="17">IVsStatusbar</name></type> <name pos:line="82" pos:column="30">statusBar</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="84" pos:column="9">public</specifier> <specifier pos:line="84" pos:column="16">const</specifier> <name pos:line="84" pos:column="22">int</name></type> <name pos:line="84" pos:column="26">DEFAULT_SAVE_INTERVAL</name> <init pos:line="84" pos:column="48">= <expr><lit:literal type="number" pos:line="84" pos:column="50">300</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="86" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="87" pos:column="9">/// Constructor.</comment>
        <comment type="line" pos:line="88" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="89" pos:column="9">/// &lt;param name="sp"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="90" pos:column="9">/// &lt;param name="extensionDirectory"&gt;&lt;/param&gt;</comment>
        <constructor><specifier pos:line="91" pos:column="9">public</specifier> <name pos:line="91" pos:column="16">SrcMLGlobalService</name><parameter_list pos:line="91" pos:column="34">(<param><decl><type><name pos:line="91" pos:column="35">IServiceProvider</name></type> <name pos:line="91" pos:column="52">sp</name></decl></param>, <param><decl><type><name pos:line="91" pos:column="56">string</name></type> <name pos:line="91" pos:column="63">extensionDirectory</name></decl></param>)</parameter_list> <block pos:line="91" pos:column="83">{
            <expr_stmt><expr><call><name><name pos:line="92" pos:column="13">SrcMLFileLogger</name><op:operator pos:line="92" pos:column="28">.</op:operator><name pos:line="92" pos:column="29">DefaultLogger</name><op:operator pos:line="92" pos:column="42">.</op:operator><name pos:line="92" pos:column="43">InfoFormat</name></name><argument_list pos:line="92" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="92" pos:column="54">"Constructing a new instance of SrcMLGlobalService in {0}"</lit:literal></expr></argument>, <argument><expr><name pos:line="92" pos:column="114">extensionDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="93" pos:column="13">serviceProvider</name> <op:operator pos:line="93" pos:column="29">=</op:operator> <name pos:line="93" pos:column="31">sp</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="94" pos:column="13">SrcMLServiceDirectory</name> <op:operator pos:line="94" pos:column="35">=</op:operator> <name pos:line="94" pos:column="37">extensionDirectory</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="95" pos:column="13">statusBar</name> <op:operator pos:line="95" pos:column="23">=</op:operator> <op:operator pos:line="95" pos:column="25">(</op:operator><name pos:line="95" pos:column="26">IVsStatusbar</name><op:operator pos:line="95" pos:column="38">)</op:operator> <call><name><name pos:line="95" pos:column="40">Package</name><op:operator pos:line="95" pos:column="47">.</op:operator><name pos:line="95" pos:column="48">GetGlobalService</name></name><argument_list pos:line="95" pos:column="64">(<argument><expr><call><name pos:line="95" pos:column="65">typeof</name><argument_list pos:line="95" pos:column="71">(<argument><expr><name pos:line="95" pos:column="72">SVsStatusbar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="96" pos:column="13">_taskManager</name> <op:operator pos:line="96" pos:column="26">=</op:operator> <op:operator pos:line="96" pos:column="28">(</op:operator><name pos:line="96" pos:column="29">ITaskManagerService</name><op:operator pos:line="96" pos:column="48">)</op:operator> <call><name><name pos:line="96" pos:column="50">Package</name><op:operator pos:line="96" pos:column="57">.</op:operator><name pos:line="96" pos:column="58">GetGlobalService</name></name><argument_list pos:line="96" pos:column="74">(<argument><expr><call><name pos:line="96" pos:column="75">typeof</name><argument_list pos:line="96" pos:column="81">(<argument><expr><name pos:line="96" pos:column="82">STaskManagerService</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="97" pos:column="13">SaveTimer</name> <op:operator pos:line="97" pos:column="23">=</op:operator> <op:operator pos:line="97" pos:column="25">new</op:operator> <call><name pos:line="97" pos:column="29">ReentrantTimer</name><argument_list pos:line="97" pos:column="43">(<argument><expr><lambda><parameter_list pos:line="97" pos:column="44">()</parameter_list> <op:operator pos:line="97" pos:column="47">=&gt;</op:operator> <call><name><name pos:line="97" pos:column="50">CurrentMonitor</name><op:operator pos:line="97" pos:column="64">.</op:operator><name pos:line="97" pos:column="65">Save</name></name><argument_list pos:line="97" pos:column="69">()</argument_list></call></lambda></expr></argument>, <argument><expr><name><name pos:line="97" pos:column="73">_taskManager</name><op:operator pos:line="97" pos:column="85">.</op:operator><name pos:line="97" pos:column="86">GlobalScheduler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="98" pos:column="13">SaveInterval</name> <op:operator pos:line="98" pos:column="26">=</op:operator> <name pos:line="98" pos:column="28">DEFAULT_SAVE_INTERVAL</name></expr>;</expr_stmt>
        }</block></constructor>

        <cpp:region pos:line="101" pos:column="9">#<cpp:directive pos:line="101" pos:column="10">region</cpp:directive> ISrcMLGlobalService Members</cpp:region>

        <decl_stmt><decl><type><specifier pos:line="103" pos:column="9">public</specifier> <specifier pos:line="103" pos:column="16">event</specifier> <name><name pos:line="103" pos:column="22">EventHandler</name><argument_list pos:line="103" pos:column="34">&lt;<argument><name pos:line="103" pos:column="35">DirectoryScanningMonitorEventArgs</name></argument>&gt;</argument_list></name></type> <name pos:line="103" pos:column="70">DirectoryAdded</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="104" pos:column="9">public</specifier> <specifier pos:line="104" pos:column="16">event</specifier> <name><name pos:line="104" pos:column="22">EventHandler</name><argument_list pos:line="104" pos:column="34">&lt;<argument><name pos:line="104" pos:column="35">DirectoryScanningMonitorEventArgs</name></argument>&gt;</argument_list></name></type> <name pos:line="104" pos:column="70">DirectoryRemoved</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="106" pos:column="9">public</specifier> <specifier pos:line="106" pos:column="16">event</specifier> <name pos:line="106" pos:column="22">EventHandler</name></type> <name pos:line="106" pos:column="35">MonitoringStarted</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="107" pos:column="9">public</specifier> <specifier pos:line="107" pos:column="16">event</specifier> <name pos:line="107" pos:column="22">EventHandler</name></type> <name pos:line="107" pos:column="35">MonitoringStopped</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="109" pos:column="9">public</specifier> <specifier pos:line="109" pos:column="16">event</specifier> <name><name pos:line="109" pos:column="22">EventHandler</name><argument_list pos:line="109" pos:column="34">&lt;<argument><name pos:line="109" pos:column="35">FileEventRaisedArgs</name></argument>&gt;</argument_list></name></type> <name pos:line="109" pos:column="56">SourceFileChanged</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="111" pos:column="9">public</specifier> <specifier pos:line="111" pos:column="16">event</specifier> <name pos:line="111" pos:column="22">EventHandler</name></type> <name pos:line="111" pos:column="35">UpdateArchivesStarted</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="112" pos:column="9">public</specifier> <specifier pos:line="112" pos:column="16">event</specifier> <name pos:line="112" pos:column="22">EventHandler</name></type> <name pos:line="112" pos:column="35">UpdateArchivesCompleted</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="114" pos:column="9">public</specifier> <name pos:line="114" pos:column="16">bool</name></type> <name pos:line="114" pos:column="21">IsMonitoring</name> <block pos:line="114" pos:column="34">{ <function_decl><name pos:line="114" pos:column="36">get</name>;</function_decl> <function_decl><specifier pos:line="114" pos:column="41">private</specifier> <name pos:line="114" pos:column="49">set</name>;</function_decl> }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="116" pos:column="9">public</specifier> <name pos:line="116" pos:column="16">bool</name></type> <name pos:line="116" pos:column="21">IsUpdating</name> <block pos:line="116" pos:column="32">{ <function_decl><name pos:line="116" pos:column="34">get</name>;</function_decl> <function_decl><specifier pos:line="116" pos:column="39">private</specifier> <name pos:line="116" pos:column="47">set</name>;</function_decl> }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="118" pos:column="9">public</specifier> <name><name pos:line="118" pos:column="16">ReadOnlyCollection</name><argument_list pos:line="118" pos:column="34">&lt;<argument><name pos:line="118" pos:column="35">string</name></argument>&gt;</argument_list></name></type> <name pos:line="118" pos:column="43">MonitoredDirectories</name> <block pos:line="118" pos:column="64">{ <function><name pos:line="118" pos:column="66">get</name> <block pos:line="118" pos:column="70">{ <return pos:line="118" pos:column="72">return <expr><op:operator pos:line="118" pos:column="79">(</op:operator><name pos:line="118" pos:column="80">CurrentMonitor</name> <op:operator pos:line="118" pos:column="95">==</op:operator> <name pos:line="118" pos:column="98">null</name> <op:operator pos:line="118" pos:column="103">?</op:operator> <name pos:line="118" pos:column="105">null</name> <op:operator pos:line="118" pos:column="110">:</op:operator> <name><name pos:line="118" pos:column="112">this</name><op:operator pos:line="118" pos:column="116">.</op:operator><name pos:line="118" pos:column="117">CurrentMonitor</name><op:operator pos:line="118" pos:column="131">.</op:operator><name pos:line="118" pos:column="132">MonitoredDirectories</name></name><op:operator pos:line="118" pos:column="152">)</op:operator></expr>;</return> }</block></function> }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="120" pos:column="9">public</specifier> <name pos:line="120" pos:column="16">double</name></type> <name pos:line="120" pos:column="23">SaveInterval</name> <block pos:line="120" pos:column="36">{
            <function><name pos:line="121" pos:column="13">get</name> <block pos:line="121" pos:column="17">{ <return pos:line="121" pos:column="19">return <expr><name><name pos:line="121" pos:column="26">SaveTimer</name><op:operator pos:line="121" pos:column="35">.</op:operator><name pos:line="121" pos:column="36">Interval</name></name> <op:operator pos:line="121" pos:column="45">/</op:operator> <lit:literal type="number" pos:line="121" pos:column="47">1000</lit:literal></expr>;</return> }</block></function>
            <function><name pos:line="122" pos:column="13">set</name> <block pos:line="122" pos:column="17">{ <expr_stmt><expr><name><name pos:line="122" pos:column="19">SaveTimer</name><op:operator pos:line="122" pos:column="28">.</op:operator><name pos:line="122" pos:column="29">Interval</name></name> <op:operator pos:line="122" pos:column="38">=</op:operator> <name pos:line="122" pos:column="40">value</name> <op:operator pos:line="122" pos:column="46">*</op:operator> <lit:literal type="number" pos:line="122" pos:column="48">1000</lit:literal></expr>;</expr_stmt> }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="125" pos:column="9">public</specifier> <name pos:line="125" pos:column="16">double</name></type> <name pos:line="125" pos:column="23">ScanInterval</name> <block pos:line="125" pos:column="36">{
            <function><name pos:line="126" pos:column="13">get</name> <block pos:line="126" pos:column="17">{ <return pos:line="126" pos:column="19">return <expr><op:operator pos:line="126" pos:column="26">(</op:operator><name pos:line="126" pos:column="27">CurrentMonitor</name> <op:operator pos:line="126" pos:column="42">==</op:operator> <name pos:line="126" pos:column="45">null</name> <op:operator pos:line="126" pos:column="50">?</op:operator> <name><name pos:line="126" pos:column="52">Double</name><op:operator pos:line="126" pos:column="58">.</op:operator><name pos:line="126" pos:column="59">NaN</name></name> <op:operator pos:line="126" pos:column="63">:</op:operator> <name><name pos:line="126" pos:column="65">CurrentMonitor</name><op:operator pos:line="126" pos:column="79">.</op:operator><name pos:line="126" pos:column="80">ScanInterval</name></name><op:operator pos:line="126" pos:column="92">)</op:operator></expr>;</return> }</block></function>
            <function><name pos:line="127" pos:column="13">set</name> <block pos:line="127" pos:column="17">{
                <if pos:line="128" pos:column="17">if<condition pos:line="128" pos:column="19">(<expr><name pos:line="128" pos:column="20">CurrentMonitor</name> <op:operator pos:line="128" pos:column="35">==</op:operator> <name pos:line="128" pos:column="38">null</name></expr>)</condition><then pos:line="128" pos:column="43">
                    <throw pos:line="129" pos:column="21">throw <expr><op:operator pos:line="129" pos:column="27">new</op:operator> <call><name pos:line="129" pos:column="31">InvalidOperationException</name><argument_list pos:line="129" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="129" pos:column="57">"There is no monitor to update"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
                <if pos:line="130" pos:column="17">if<condition pos:line="130" pos:column="19">(<expr><name pos:line="130" pos:column="20">value</name> <op:operator pos:line="130" pos:column="26">&lt;</op:operator> <lit:literal type="number" pos:line="130" pos:column="28">0.0</lit:literal></expr>)</condition><then pos:line="130" pos:column="32">
                    <throw pos:line="131" pos:column="21">throw <expr><op:operator pos:line="131" pos:column="27">new</op:operator> <call><name pos:line="131" pos:column="31">ArgumentOutOfRangeException</name><argument_list pos:line="131" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="131" pos:column="59">"value"</lit:literal></expr></argument>, <argument><expr><name pos:line="131" pos:column="68">value</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="131" pos:column="75">"ScanInterval must be greater than 0"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
                <expr_stmt><expr><name><name pos:line="132" pos:column="17">CurrentMonitor</name><op:operator pos:line="132" pos:column="31">.</op:operator><name pos:line="132" pos:column="32">ScanInterval</name></name> <op:operator pos:line="132" pos:column="45">=</op:operator> <name pos:line="132" pos:column="47">value</name></expr>;</expr_stmt>
            }</block></function>
        }</block></decl></decl_stmt>

        <function><type><specifier pos:line="136" pos:column="9">public</specifier> <name pos:line="136" pos:column="16">void</name></type> <name pos:line="136" pos:column="21">AddDirectoryToMonitor</name><parameter_list pos:line="136" pos:column="42">(<param><decl><type><name pos:line="136" pos:column="43">string</name></type> <name pos:line="136" pos:column="50">pathToDirectory</name></decl></param>)</parameter_list> <block pos:line="136" pos:column="67">{
            <if pos:line="137" pos:column="13">if<condition pos:line="137" pos:column="15">(<expr><name pos:line="137" pos:column="16">null</name> <op:operator pos:line="137" pos:column="21">==</op:operator> <name pos:line="137" pos:column="24">CurrentMonitor</name></expr>)</condition><then pos:line="137" pos:column="39"> <block pos:line="137" pos:column="40">{
                <throw pos:line="138" pos:column="17">throw <expr><op:operator pos:line="138" pos:column="23">new</op:operator> <call><name pos:line="138" pos:column="27">InvalidOperationException</name><argument_list pos:line="138" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="138" pos:column="53">"Only valid once a solution has been opened."</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <if pos:line="140" pos:column="13">if<condition pos:line="140" pos:column="15">(<expr><name pos:line="140" pos:column="16">null</name> <op:operator pos:line="140" pos:column="21">==</op:operator> <name pos:line="140" pos:column="24">pathToDirectory</name></expr>)</condition><then pos:line="140" pos:column="40"> <block pos:line="140" pos:column="41">{
                <throw pos:line="141" pos:column="17">throw <expr><op:operator pos:line="141" pos:column="23">new</op:operator> <call><name pos:line="141" pos:column="27">ArgumentNullException</name><argument_list pos:line="141" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="141" pos:column="49">"pathToDirectory"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <expr_stmt><expr><call><name><name pos:line="143" pos:column="13">CurrentMonitor</name><op:operator pos:line="143" pos:column="27">.</op:operator><name pos:line="143" pos:column="28">AddDirectory</name></name><argument_list pos:line="143" pos:column="40">(<argument><expr><name pos:line="143" pos:column="41">pathToDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="146" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="147" pos:column="9">/// Gets the XElement for the specified source file.</comment>
        <comment type="line" pos:line="148" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="149" pos:column="9">/// &lt;param name="sourceFilePath"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="150" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="151" pos:column="9">public</specifier> <name pos:line="151" pos:column="16">XElement</name></type> <name pos:line="151" pos:column="25">GetXElementForSourceFile</name><parameter_list pos:line="151" pos:column="49">(<param><decl><type><name pos:line="151" pos:column="50">string</name></type> <name pos:line="151" pos:column="57">sourceFilePath</name></decl></param>)</parameter_list> <block pos:line="151" pos:column="73">{
            <return pos:line="152" pos:column="13">return<expr><op:operator pos:line="152" pos:column="19">(</op:operator><name pos:line="152" pos:column="20">CurrentSrcMLArchive</name> <op:operator pos:line="152" pos:column="40">==</op:operator> <name pos:line="152" pos:column="43">null</name> <op:operator pos:line="152" pos:column="48">?</op:operator> <name pos:line="152" pos:column="50">null</name> <op:operator pos:line="152" pos:column="55">:</op:operator> <call><name><name pos:line="152" pos:column="57">CurrentSrcMLArchive</name><op:operator pos:line="152" pos:column="76">.</op:operator><name pos:line="152" pos:column="77">GetXElementForSourceFile</name></name><argument_list pos:line="152" pos:column="101">(<argument><expr><name pos:line="152" pos:column="102">sourceFilePath</name></expr></argument>)</argument_list></call><op:operator pos:line="152" pos:column="117">)</op:operator></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="155" pos:column="9">public</specifier> <name pos:line="155" pos:column="16">void</name></type> <name pos:line="155" pos:column="21">RemoveDirectoryFromMonitor</name><parameter_list pos:line="155" pos:column="47">(<param><decl><type><name pos:line="155" pos:column="48">string</name></type> <name pos:line="155" pos:column="55">pathToDirectory</name></decl></param>)</parameter_list> <block pos:line="155" pos:column="72">{
            <if pos:line="156" pos:column="13">if<condition pos:line="156" pos:column="15">(<expr><name pos:line="156" pos:column="16">null</name> <op:operator pos:line="156" pos:column="21">==</op:operator> <name pos:line="156" pos:column="24">CurrentMonitor</name></expr>)</condition><then pos:line="156" pos:column="39"> <block pos:line="156" pos:column="40">{
                <throw pos:line="157" pos:column="17">throw <expr><op:operator pos:line="157" pos:column="23">new</op:operator> <call><name pos:line="157" pos:column="27">InvalidOperationException</name><argument_list pos:line="157" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="157" pos:column="53">"Only valid once a solution has been opened."</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <if pos:line="159" pos:column="13">if<condition pos:line="159" pos:column="15">(<expr><name pos:line="159" pos:column="16">null</name> <op:operator pos:line="159" pos:column="21">==</op:operator> <name pos:line="159" pos:column="24">pathToDirectory</name></expr>)</condition><then pos:line="159" pos:column="40"> <block pos:line="159" pos:column="41">{
                <throw pos:line="160" pos:column="17">throw <expr><op:operator pos:line="160" pos:column="23">new</op:operator> <call><name pos:line="160" pos:column="27">ArgumentNullException</name><argument_list pos:line="160" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="160" pos:column="49">"pathToDirectory"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <expr_stmt><expr><call><name><name pos:line="163" pos:column="13">CurrentMonitor</name><op:operator pos:line="163" pos:column="27">.</op:operator><name pos:line="163" pos:column="28">RemoveDirectory</name></name><argument_list pos:line="163" pos:column="43">(<argument><expr><name pos:line="163" pos:column="44">pathToDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="166" pos:column="9">public</specifier> <name pos:line="166" pos:column="16">void</name></type> <name pos:line="166" pos:column="21">Reset</name><parameter_list pos:line="166" pos:column="26">()</parameter_list> <block pos:line="166" pos:column="29">{
            <decl_stmt><decl><type><name pos:line="167" pos:column="13">var</name></type> <name pos:line="167" pos:column="17">openSolution</name> <init pos:line="167" pos:column="30">= <expr><call><name pos:line="167" pos:column="32">GetOpenSolution</name><argument_list pos:line="167" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="168" pos:column="13">if<condition pos:line="168" pos:column="15">(<expr><name pos:line="168" pos:column="16">null</name> <op:operator pos:line="168" pos:column="21">!=</op:operator> <name pos:line="168" pos:column="24">openSolution</name></expr>)</condition><then pos:line="168" pos:column="37"> <block pos:line="168" pos:column="38">{
                <decl_stmt><decl><type><name pos:line="169" pos:column="17">var</name></type> <name pos:line="169" pos:column="21">baseDirectory</name> <init pos:line="169" pos:column="35">= <expr><call><name pos:line="169" pos:column="37">GetSrcMLArchiveFolder</name><argument_list pos:line="169" pos:column="58">(<argument><expr><name pos:line="169" pos:column="59">openSolution</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="170" pos:column="17">File</name><op:operator pos:line="170" pos:column="21">.</op:operator><name pos:line="170" pos:column="22">Create</name></name><argument_list pos:line="170" pos:column="28">(<argument><expr><call><name><name pos:line="170" pos:column="29">Path</name><op:operator pos:line="170" pos:column="33">.</op:operator><name pos:line="170" pos:column="34">Combine</name></name><argument_list pos:line="170" pos:column="41">(<argument><expr><name pos:line="170" pos:column="42">baseDirectory</name></expr></argument>, <argument><expr><name pos:line="170" pos:column="57">ResetFileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="170" pos:column="72">.</op:operator><call><name pos:line="170" pos:column="73">Close</name><argument_list pos:line="170" pos:column="78">()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="174" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="175" pos:column="9">/// SrcML service starts to monitor the opened solution.</comment>
        <comment type="line" pos:line="176" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="177" pos:column="9">/// &lt;param name="srcMLArchiveDirectory"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="178" pos:column="9">/// &lt;param name="shouldReset"&gt;&lt;/param&gt;</comment>
        <function><type><specifier pos:line="179" pos:column="9">public</specifier> <name pos:line="179" pos:column="16">void</name></type> <name pos:line="179" pos:column="21">StartMonitoring</name><parameter_list pos:line="179" pos:column="36">(<param><decl><type><name pos:line="179" pos:column="37">bool</name></type> <name pos:line="179" pos:column="42">shouldReset</name></decl></param>, <param><decl><type><name pos:line="179" pos:column="55">string</name></type> <name pos:line="179" pos:column="62">srcMLBinaryDirectory</name></decl></param>)</parameter_list> <block pos:line="179" pos:column="84">{
            <comment type="line" pos:line="180" pos:column="13">// Get the path of the folder that storing the srcML archives</comment>
            <decl_stmt><decl><type><name pos:line="181" pos:column="13">var</name></type> <name pos:line="181" pos:column="17">openSolution</name> <init pos:line="181" pos:column="30">= <expr><call><name pos:line="181" pos:column="32">GetOpenSolution</name><argument_list pos:line="181" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="182" pos:column="13">string</name></type> <name pos:line="182" pos:column="20">baseDirectory</name> <init pos:line="182" pos:column="34">= <expr><call><name pos:line="182" pos:column="36">GetSrcMLArchiveFolder</name><argument_list pos:line="182" pos:column="57">(<argument><expr><name pos:line="182" pos:column="58">openSolution</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="184" pos:column="13">SrcMLFileLogger</name><op:operator pos:line="184" pos:column="28">.</op:operator><name pos:line="184" pos:column="29">DefaultLogger</name><op:operator pos:line="184" pos:column="42">.</op:operator><name pos:line="184" pos:column="43">Info</name></name><argument_list pos:line="184" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="184" pos:column="48">"SrcMLGlobalService.StartMonitoring( "</lit:literal> <op:operator pos:line="184" pos:column="87">+</op:operator> <name pos:line="184" pos:column="89">baseDirectory</name> <op:operator pos:line="184" pos:column="103">+</op:operator> <lit:literal type="string" pos:line="184" pos:column="105">" )"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try pos:line="185" pos:column="13">try <block pos:line="185" pos:column="17">{

                <if pos:line="187" pos:column="17">if<condition pos:line="187" pos:column="19">(<expr><name pos:line="187" pos:column="20">shouldReset</name></expr>)</condition><then pos:line="187" pos:column="32"> <block pos:line="187" pos:column="33">{
                    <expr_stmt><expr><call><name><name pos:line="188" pos:column="21">SrcMLFileLogger</name><op:operator pos:line="188" pos:column="36">.</op:operator><name pos:line="188" pos:column="37">DefaultLogger</name><op:operator pos:line="188" pos:column="50">.</op:operator><name pos:line="188" pos:column="51">Info</name></name><argument_list pos:line="188" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="188" pos:column="56">"Reset flag is set - Removing "</lit:literal> <op:operator pos:line="188" pos:column="88">+</op:operator> <name pos:line="188" pos:column="90">baseDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="189" pos:column="21">Directory</name><op:operator pos:line="189" pos:column="30">.</op:operator><name pos:line="189" pos:column="31">Delete</name></name><argument_list pos:line="189" pos:column="37">(<argument><expr><name pos:line="189" pos:column="38">baseDirectory</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="189" pos:column="53">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <expr_stmt><expr><name pos:line="192" pos:column="17">CurrentMonitor</name> <op:operator pos:line="192" pos:column="32">=</op:operator> <op:operator pos:line="192" pos:column="34">new</op:operator> <call><name pos:line="192" pos:column="38">SourceMonitor</name><argument_list pos:line="192" pos:column="51">(<argument><expr><name pos:line="192" pos:column="52">openSolution</name></expr></argument>, <argument><expr><name><name pos:line="192" pos:column="66">DirectoryScanningMonitor</name><op:operator pos:line="192" pos:column="90">.</op:operator><name pos:line="192" pos:column="91">DEFAULT_SCAN_INTERVAL</name></name></expr></argument>, <argument><expr><name><name pos:line="192" pos:column="114">_taskManager</name><op:operator pos:line="192" pos:column="126">.</op:operator><name pos:line="192" pos:column="127">GlobalScheduler</name></name></expr></argument>, <argument><expr><name pos:line="192" pos:column="144">baseDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="193" pos:column="17">CurrentProject</name> <op:operator pos:line="193" pos:column="32">=</op:operator> <op:operator pos:line="193" pos:column="34">new</op:operator> <call><name pos:line="193" pos:column="38">SrcMLProject</name><argument_list pos:line="193" pos:column="50">(<argument><expr><name><name pos:line="193" pos:column="51">_taskManager</name><op:operator pos:line="193" pos:column="63">.</op:operator><name pos:line="193" pos:column="64">GlobalScheduler</name></name></expr></argument>, <argument><expr><name pos:line="193" pos:column="81">CurrentMonitor</name></expr></argument>, <argument><expr><op:operator pos:line="193" pos:column="97">new</op:operator> <call><name pos:line="193" pos:column="101">SrcMLGenerator</name><argument_list pos:line="193" pos:column="115">(<argument><expr><name pos:line="193" pos:column="116">srcMLBinaryDirectory</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line" pos:line="195" pos:column="17">// Create a new instance of SrcML.NET's solution monitor</comment>
                <if pos:line="196" pos:column="17">if<condition pos:line="196" pos:column="19">(<expr><name pos:line="196" pos:column="20">openSolution</name> <op:operator pos:line="196" pos:column="33">!=</op:operator> <name pos:line="196" pos:column="36">null</name></expr>)</condition><then pos:line="196" pos:column="41"> <block pos:line="196" pos:column="42">{
                    <expr_stmt><expr><name><name pos:line="197" pos:column="21">CurrentMonitor</name><op:operator pos:line="197" pos:column="35">.</op:operator><name pos:line="197" pos:column="36">DirectoryAdded</name></name> <op:operator pos:line="197" pos:column="51">+=</op:operator> <name pos:line="197" pos:column="54">RespondToDirectoryAddedEvent</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="198" pos:column="21">CurrentMonitor</name><op:operator pos:line="198" pos:column="35">.</op:operator><name pos:line="198" pos:column="36">DirectoryRemoved</name></name> <op:operator pos:line="198" pos:column="53">+=</op:operator> <name pos:line="198" pos:column="56">RespondToDirectoryRemovedEvent</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="199" pos:column="21">CurrentMonitor</name><op:operator pos:line="199" pos:column="35">.</op:operator><name pos:line="199" pos:column="36">UpdateArchivesStarted</name></name> <op:operator pos:line="199" pos:column="58">+=</op:operator> <name pos:line="199" pos:column="61">CurrentMonitor_UpdateArchivesStarted</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="200" pos:column="21">CurrentMonitor</name><op:operator pos:line="200" pos:column="35">.</op:operator><name pos:line="200" pos:column="36">UpdateArchivesCompleted</name></name> <op:operator pos:line="200" pos:column="60">+=</op:operator> <name pos:line="200" pos:column="63">CurrentMonitor_UpdateArchivesCompleted</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="201" pos:column="21">CurrentMonitor</name><op:operator pos:line="201" pos:column="35">.</op:operator><name pos:line="201" pos:column="36">AddDirectoriesFromSaveFile</name></name><argument_list pos:line="201" pos:column="62">()</argument_list></call></expr>;</expr_stmt>
                    <if pos:line="202" pos:column="21">if<condition pos:line="202" pos:column="23">(<expr><lit:literal type="number" pos:line="202" pos:column="24">0</lit:literal> <op:operator pos:line="202" pos:column="26">==</op:operator> <name><name pos:line="202" pos:column="29">CurrentMonitor</name><op:operator pos:line="202" pos:column="43">.</op:operator><name pos:line="202" pos:column="44">MonitoredDirectories</name><op:operator pos:line="202" pos:column="64">.</op:operator><name pos:line="202" pos:column="65">Count</name></name></expr>)</condition><then pos:line="202" pos:column="71"> <block pos:line="202" pos:column="72">{
                        <expr_stmt><expr><call><name><name pos:line="203" pos:column="25">CurrentMonitor</name><op:operator pos:line="203" pos:column="39">.</op:operator><name pos:line="203" pos:column="40">AddSolutionDirectories</name></name><argument_list pos:line="203" pos:column="62">()</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>

                <comment type="line" pos:line="207" pos:column="17">// Subscribe events from Solution Monitor</comment>
                <if pos:line="208" pos:column="17">if<condition pos:line="208" pos:column="19">(<expr><name pos:line="208" pos:column="20">CurrentMonitor</name> <op:operator pos:line="208" pos:column="35">!=</op:operator> <name pos:line="208" pos:column="38">null</name></expr>)</condition><then pos:line="208" pos:column="43"> <block pos:line="208" pos:column="44">{
                    <expr_stmt><expr><name><name pos:line="209" pos:column="21">CurrentMonitor</name><op:operator pos:line="209" pos:column="35">.</op:operator><name pos:line="209" pos:column="36">FileChanged</name></name> <op:operator pos:line="209" pos:column="48">+=</op:operator> <name pos:line="209" pos:column="51">RespondToFileChangedEvent</name></expr>;</expr_stmt>

                    <comment type="line" pos:line="211" pos:column="21">// Initialize the progress bar.</comment>
                    <if pos:line="212" pos:column="21">if<condition pos:line="212" pos:column="23">(<expr><name pos:line="212" pos:column="24">statusBar</name> <op:operator pos:line="212" pos:column="34">!=</op:operator> <name pos:line="212" pos:column="37">null</name></expr>)</condition><then pos:line="212" pos:column="42"> <block pos:line="212" pos:column="43">{
                        <expr_stmt><expr><call><name><name pos:line="213" pos:column="25">statusBar</name><op:operator pos:line="213" pos:column="34">.</op:operator><name pos:line="213" pos:column="35">Progress</name></name><argument_list pos:line="213" pos:column="43">(<argument><expr pos:line="213" pos:column="44">ref <name pos:line="213" pos:column="48">cookie</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="213" pos:column="56">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="213" pos:column="59">""</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="213" pos:column="63">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="213" pos:column="66">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <comment type="line" pos:line="215" pos:column="21">// Start monitoring</comment>
                    <decl_stmt><decl><type><name pos:line="216" pos:column="21">var</name></type> <name pos:line="216" pos:column="25">updateTask</name> <init pos:line="216" pos:column="36">= <expr><call><name><name pos:line="216" pos:column="38">CurrentMonitor</name><op:operator pos:line="216" pos:column="52">.</op:operator><name pos:line="216" pos:column="53">UpdateArchivesAsync</name></name><argument_list pos:line="216" pos:column="72">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><call><name><name pos:line="218" pos:column="21">CurrentMonitor</name><op:operator pos:line="218" pos:column="35">.</op:operator><name pos:line="218" pos:column="36">StartMonitoring</name></name><argument_list pos:line="218" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="219" pos:column="21">OnMonitoringStarted</name><argument_list pos:line="219" pos:column="40">(<argument><expr><op:operator pos:line="219" pos:column="41">new</op:operator> <call><name pos:line="219" pos:column="45">EventArgs</name><argument_list pos:line="219" pos:column="54">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="220" pos:column="21">SaveTimer</name><op:operator pos:line="220" pos:column="30">.</op:operator><name pos:line="220" pos:column="31">Start</name></name><argument_list pos:line="220" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block> <catch pos:line="222" pos:column="15">catch<parameter_list pos:line="222" pos:column="20">(<param><decl><type><name pos:line="222" pos:column="21">Exception</name></type> <name pos:line="222" pos:column="31">e</name></decl></param>)</parameter_list> <block pos:line="222" pos:column="34">{
                <expr_stmt><expr><call><name><name pos:line="223" pos:column="17">SrcMLFileLogger</name><op:operator pos:line="223" pos:column="32">.</op:operator><name pos:line="223" pos:column="33">DefaultLogger</name><op:operator pos:line="223" pos:column="46">.</op:operator><name pos:line="223" pos:column="47">Error</name></name><argument_list pos:line="223" pos:column="52">(<argument><expr><call><name><name pos:line="223" pos:column="53">SrcMLExceptionFormatter</name><op:operator pos:line="223" pos:column="76">.</op:operator><name pos:line="223" pos:column="77">CreateMessage</name></name><argument_list pos:line="223" pos:column="90">(<argument><expr><name pos:line="223" pos:column="91">e</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="223" pos:column="94">"Exception in SrcMLGlobalService.StartMonitoring()"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></function>

        <function><type><name pos:line="227" pos:column="9">void</name></type> <name pos:line="227" pos:column="14">CurrentMonitor_UpdateArchivesCompleted</name><parameter_list pos:line="227" pos:column="52">(<param><decl><type><name pos:line="227" pos:column="53">object</name></type> <name pos:line="227" pos:column="60">sender</name></decl></param>, <param><decl><type><name pos:line="227" pos:column="68">EventArgs</name></type> <name pos:line="227" pos:column="78">e</name></decl></param>)</parameter_list> <block pos:line="227" pos:column="81">{
            <expr_stmt><expr><call><name pos:line="228" pos:column="13">OnUpdateArchivesCompleted</name><argument_list pos:line="228" pos:column="38">(<argument><expr><name pos:line="228" pos:column="39">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><name pos:line="231" pos:column="9">void</name></type> <name pos:line="231" pos:column="14">CurrentMonitor_UpdateArchivesStarted</name><parameter_list pos:line="231" pos:column="50">(<param><decl><type><name pos:line="231" pos:column="51">object</name></type> <name pos:line="231" pos:column="58">sender</name></decl></param>, <param><decl><type><name pos:line="231" pos:column="66">EventArgs</name></type> <name pos:line="231" pos:column="76">e</name></decl></param>)</parameter_list> <block pos:line="231" pos:column="79">{
            <expr_stmt><expr><call><name pos:line="232" pos:column="13">OnUpdateArchivesStarted</name><argument_list pos:line="232" pos:column="36">(<argument><expr><name pos:line="232" pos:column="37">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="235" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="236" pos:column="9">/// SrcML service starts to monitor the opened solution.</comment>
        <comment type="line" pos:line="237" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="238" pos:column="9">public</specifier> <name pos:line="238" pos:column="16">void</name></type> <name pos:line="238" pos:column="21">StartMonitoring</name><parameter_list pos:line="238" pos:column="36">()</parameter_list> <block pos:line="238" pos:column="39">{
            <expr_stmt><expr><call><name><name pos:line="239" pos:column="13">SrcMLFileLogger</name><op:operator pos:line="239" pos:column="28">.</op:operator><name pos:line="239" pos:column="29">DefaultLogger</name><op:operator pos:line="239" pos:column="42">.</op:operator><name pos:line="239" pos:column="43">Info</name></name><argument_list pos:line="239" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="239" pos:column="48">"SrcMLGlobalService.StartMonitoring() - default"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="240" pos:column="13">StartMonitoring</name><argument_list pos:line="240" pos:column="28">(<argument><expr><call><name pos:line="240" pos:column="29">ShouldReset</name><argument_list pos:line="240" pos:column="40">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="240" pos:column="44">SrcMLHelper</name><op:operator pos:line="240" pos:column="55">.</op:operator><name pos:line="240" pos:column="56">GetSrcMLDefaultDirectory</name></name><argument_list pos:line="240" pos:column="80">(<argument><expr><name pos:line="240" pos:column="81">SrcMLServiceDirectory</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="243" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="244" pos:column="9">/// SrcML service stops monitoring the opened solution.</comment>
        <comment type="line" pos:line="245" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="246" pos:column="9">public</specifier> <name pos:line="246" pos:column="16">void</name></type> <name pos:line="246" pos:column="21">StopMonitoring</name><parameter_list pos:line="246" pos:column="35">()</parameter_list> <block pos:line="246" pos:column="38">{
            <expr_stmt><expr><call><name><name pos:line="247" pos:column="13">SrcMLFileLogger</name><op:operator pos:line="247" pos:column="28">.</op:operator><name pos:line="247" pos:column="29">DefaultLogger</name><op:operator pos:line="247" pos:column="42">.</op:operator><name pos:line="247" pos:column="43">Info</name></name><argument_list pos:line="247" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="247" pos:column="48">"SrcMLGlobalService.StopMonitoring()"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try pos:line="248" pos:column="13">try <block pos:line="248" pos:column="17">{
                <if pos:line="249" pos:column="17">if<condition pos:line="249" pos:column="19">(<expr><name pos:line="249" pos:column="20">CurrentMonitor</name> <op:operator pos:line="249" pos:column="35">!=</op:operator> <name pos:line="249" pos:column="38">null</name> <op:operator pos:line="249" pos:column="43">&amp;&amp;</op:operator> <name pos:line="249" pos:column="46">CurrentSrcMLArchive</name> <op:operator pos:line="249" pos:column="66">!=</op:operator> <name pos:line="249" pos:column="69">null</name></expr>)</condition><then pos:line="249" pos:column="74"> <block pos:line="249" pos:column="75">{
                    <expr_stmt><expr><call><name pos:line="250" pos:column="21">OnMonitoringStopped</name><argument_list pos:line="250" pos:column="40">(<argument><expr><op:operator pos:line="250" pos:column="41">new</op:operator> <call><name pos:line="250" pos:column="45">EventArgs</name><argument_list pos:line="250" pos:column="54">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="251" pos:column="21">SaveTimer</name><op:operator pos:line="251" pos:column="30">.</op:operator><name pos:line="251" pos:column="31">Stop</name></name><argument_list pos:line="251" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="252" pos:column="21">CurrentProject</name><op:operator pos:line="252" pos:column="35">.</op:operator><name pos:line="252" pos:column="36">StopMonitoring</name></name><argument_list pos:line="252" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="253" pos:column="21">CurrentMonitor</name><op:operator pos:line="253" pos:column="35">.</op:operator><name pos:line="253" pos:column="36">FileChanged</name></name> <op:operator pos:line="253" pos:column="48">-=</op:operator> <name pos:line="253" pos:column="51">RespondToFileChangedEvent</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="254" pos:column="21">CurrentMonitor</name><op:operator pos:line="254" pos:column="35">.</op:operator><name pos:line="254" pos:column="36">DirectoryAdded</name></name> <op:operator pos:line="254" pos:column="51">-=</op:operator> <name pos:line="254" pos:column="54">RespondToDirectoryAddedEvent</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="255" pos:column="21">CurrentMonitor</name><op:operator pos:line="255" pos:column="35">.</op:operator><name pos:line="255" pos:column="36">DirectoryRemoved</name></name> <op:operator pos:line="255" pos:column="53">-=</op:operator> <name pos:line="255" pos:column="56">RespondToDirectoryRemovedEvent</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="256" pos:column="21">CurrentProject</name><op:operator pos:line="256" pos:column="35">.</op:operator><name pos:line="256" pos:column="36">Dispose</name></name><argument_list pos:line="256" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="257" pos:column="21">CurrentProject</name> <op:operator pos:line="257" pos:column="36">=</op:operator> <name pos:line="257" pos:column="38">null</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="258" pos:column="21">CurrentMonitor</name> <op:operator pos:line="258" pos:column="36">=</op:operator> <name pos:line="258" pos:column="38">null</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block> <catch pos:line="260" pos:column="15">catch<parameter_list pos:line="260" pos:column="20">(<param><decl><type><name pos:line="260" pos:column="21">Exception</name></type> <name pos:line="260" pos:column="31">e</name></decl></param>)</parameter_list> <block pos:line="260" pos:column="34">{
                <expr_stmt><expr><call><name><name pos:line="261" pos:column="17">SrcMLFileLogger</name><op:operator pos:line="261" pos:column="32">.</op:operator><name pos:line="261" pos:column="33">DefaultLogger</name><op:operator pos:line="261" pos:column="46">.</op:operator><name pos:line="261" pos:column="47">Error</name></name><argument_list pos:line="261" pos:column="52">(<argument><expr><call><name><name pos:line="261" pos:column="53">SrcMLExceptionFormatter</name><op:operator pos:line="261" pos:column="76">.</op:operator><name pos:line="261" pos:column="77">CreateMessage</name></name><argument_list pos:line="261" pos:column="90">(<argument><expr><name pos:line="261" pos:column="91">e</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="261" pos:column="94">"Exception in SrcMLGlobalService.StopMonitoring()"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></function>

        <cpp:endregion pos:line="265" pos:column="9">#<cpp:directive pos:line="265" pos:column="10">endregion</cpp:directive> ISrcMLGlobalService Members</cpp:endregion>

        <comment type="line" pos:line="267" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="268" pos:column="9">/// Generate the folder path for storing srcML files. (For all the following four methods.)</comment>
        <comment type="line" pos:line="269" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="270" pos:column="9">/// &lt;param name="openSolution"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="271" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="272" pos:column="9">public</specifier> <name pos:line="272" pos:column="16">string</name></type> <name pos:line="272" pos:column="23">GetSrcMLArchiveFolder</name><parameter_list pos:line="272" pos:column="44">(<param><decl><type><name pos:line="272" pos:column="45">Solution</name></type> <name pos:line="272" pos:column="54">openSolution</name></decl></param>)</parameter_list> <block pos:line="272" pos:column="68">{
            <return pos:line="273" pos:column="13">return <expr><call><name pos:line="273" pos:column="20">CreateNamedFolder</name><argument_list pos:line="273" pos:column="37">(<argument><expr><name pos:line="273" pos:column="38">openSolution</name></expr></argument>, <argument><expr><name pos:line="273" pos:column="52">srcMLArchivesFolderString</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="276" pos:column="9">protected</specifier> <specifier pos:line="276" pos:column="19">virtual</specifier> <name pos:line="276" pos:column="27">void</name></type> <name pos:line="276" pos:column="32">OnDirectoryAdded</name><parameter_list pos:line="276" pos:column="48">(<param><decl><type><name pos:line="276" pos:column="49">DirectoryScanningMonitorEventArgs</name></type> <name pos:line="276" pos:column="83">e</name></decl></param>)</parameter_list> <block pos:line="276" pos:column="86">{
            <decl_stmt><decl><type><name><name pos:line="277" pos:column="13">EventHandler</name><argument_list pos:line="277" pos:column="25">&lt;<argument><name pos:line="277" pos:column="26">DirectoryScanningMonitorEventArgs</name></argument>&gt;</argument_list></name></type> <name pos:line="277" pos:column="61">handler</name> <init pos:line="277" pos:column="69">= <expr><name pos:line="277" pos:column="71">DirectoryAdded</name></expr></init></decl>;</decl_stmt>
            <if pos:line="278" pos:column="13">if<condition pos:line="278" pos:column="15">(<expr><name pos:line="278" pos:column="16">handler</name> <op:operator pos:line="278" pos:column="24">!=</op:operator> <name pos:line="278" pos:column="27">null</name></expr>)</condition><then pos:line="278" pos:column="32"> <block pos:line="278" pos:column="33">{
                <expr_stmt><expr><call><name pos:line="279" pos:column="17">handler</name><argument_list pos:line="279" pos:column="24">(<argument><expr><name pos:line="279" pos:column="25">this</name></expr></argument>, <argument><expr><name pos:line="279" pos:column="31">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="283" pos:column="9">protected</specifier> <specifier pos:line="283" pos:column="19">virtual</specifier> <name pos:line="283" pos:column="27">void</name></type> <name pos:line="283" pos:column="32">OnDirectoryRemoved</name><parameter_list pos:line="283" pos:column="50">(<param><decl><type><name pos:line="283" pos:column="51">DirectoryScanningMonitorEventArgs</name></type> <name pos:line="283" pos:column="85">e</name></decl></param>)</parameter_list> <block pos:line="283" pos:column="88">{
            <decl_stmt><decl><type><name><name pos:line="284" pos:column="13">EventHandler</name><argument_list pos:line="284" pos:column="25">&lt;<argument><name pos:line="284" pos:column="26">DirectoryScanningMonitorEventArgs</name></argument>&gt;</argument_list></name></type> <name pos:line="284" pos:column="61">handler</name> <init pos:line="284" pos:column="69">= <expr><name pos:line="284" pos:column="71">DirectoryRemoved</name></expr></init></decl>;</decl_stmt>
            <if pos:line="285" pos:column="13">if<condition pos:line="285" pos:column="15">(<expr><name pos:line="285" pos:column="16">handler</name> <op:operator pos:line="285" pos:column="24">!=</op:operator> <name pos:line="285" pos:column="27">null</name></expr>)</condition><then pos:line="285" pos:column="32"> <block pos:line="285" pos:column="33">{
                <expr_stmt><expr><call><name pos:line="286" pos:column="17">handler</name><argument_list pos:line="286" pos:column="24">(<argument><expr><name pos:line="286" pos:column="25">this</name></expr></argument>, <argument><expr><name pos:line="286" pos:column="31">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="290" pos:column="9">protected</specifier> <specifier pos:line="290" pos:column="19">virtual</specifier> <name pos:line="290" pos:column="27">void</name></type> <name pos:line="290" pos:column="32">OnFileChanged</name><parameter_list pos:line="290" pos:column="45">(<param><decl><type><name pos:line="290" pos:column="46">FileEventRaisedArgs</name></type> <name pos:line="290" pos:column="66">e</name></decl></param>)</parameter_list> <block pos:line="290" pos:column="69">{
            <decl_stmt><decl><type><name><name pos:line="291" pos:column="13">EventHandler</name><argument_list pos:line="291" pos:column="25">&lt;<argument><name pos:line="291" pos:column="26">FileEventRaisedArgs</name></argument>&gt;</argument_list></name></type> <name pos:line="291" pos:column="47">handler</name> <init pos:line="291" pos:column="55">= <expr><name pos:line="291" pos:column="57">SourceFileChanged</name></expr></init></decl>;</decl_stmt>
            <if pos:line="292" pos:column="13">if<condition pos:line="292" pos:column="15">(<expr><name pos:line="292" pos:column="16">handler</name> <op:operator pos:line="292" pos:column="24">!=</op:operator> <name pos:line="292" pos:column="27">null</name></expr>)</condition><then pos:line="292" pos:column="32"> <block pos:line="292" pos:column="33">{
                <expr_stmt><expr><call><name pos:line="293" pos:column="17">handler</name><argument_list pos:line="293" pos:column="24">(<argument><expr><name pos:line="293" pos:column="25">this</name></expr></argument>, <argument><expr><name pos:line="293" pos:column="31">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="297" pos:column="9">protected</specifier> <specifier pos:line="297" pos:column="19">virtual</specifier> <name pos:line="297" pos:column="27">void</name></type> <name pos:line="297" pos:column="32">OnMonitoringStarted</name><parameter_list pos:line="297" pos:column="51">(<param><decl><type><name pos:line="297" pos:column="52">EventArgs</name></type> <name pos:line="297" pos:column="62">e</name></decl></param>)</parameter_list> <block pos:line="297" pos:column="65">{
            <expr_stmt><expr><name pos:line="298" pos:column="13">IsMonitoring</name> <op:operator pos:line="298" pos:column="26">=</op:operator> <lit:literal type="boolean" pos:line="298" pos:column="28">true</lit:literal></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="299" pos:column="13">EventHandler</name></type> <name pos:line="299" pos:column="26">handler</name> <init pos:line="299" pos:column="34">= <expr><name pos:line="299" pos:column="36">MonitoringStarted</name></expr></init></decl>;</decl_stmt>
            <if pos:line="300" pos:column="13">if<condition pos:line="300" pos:column="15">(<expr><name pos:line="300" pos:column="16">handler</name> <op:operator pos:line="300" pos:column="24">!=</op:operator> <name pos:line="300" pos:column="27">null</name></expr>)</condition><then pos:line="300" pos:column="32"> <block pos:line="300" pos:column="33">{
                <expr_stmt><expr><call><name pos:line="301" pos:column="17">handler</name><argument_list pos:line="301" pos:column="24">(<argument><expr><name pos:line="301" pos:column="25">this</name></expr></argument>, <argument><expr><name pos:line="301" pos:column="31">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="305" pos:column="9">protected</specifier> <specifier pos:line="305" pos:column="19">virtual</specifier> <name pos:line="305" pos:column="27">void</name></type> <name pos:line="305" pos:column="32">OnMonitoringStopped</name><parameter_list pos:line="305" pos:column="51">(<param><decl><type><name pos:line="305" pos:column="52">EventArgs</name></type> <name pos:line="305" pos:column="62">e</name></decl></param>)</parameter_list> <block pos:line="305" pos:column="65">{
            <expr_stmt><expr><name pos:line="306" pos:column="13">IsMonitoring</name> <op:operator pos:line="306" pos:column="26">=</op:operator> <lit:literal type="boolean" pos:line="306" pos:column="28">false</lit:literal></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="307" pos:column="13">EventHandler</name></type> <name pos:line="307" pos:column="26">handler</name> <init pos:line="307" pos:column="34">= <expr><name pos:line="307" pos:column="36">MonitoringStopped</name></expr></init></decl>;</decl_stmt>
            <if pos:line="308" pos:column="13">if<condition pos:line="308" pos:column="15">(<expr><name pos:line="308" pos:column="16">handler</name> <op:operator pos:line="308" pos:column="24">!=</op:operator> <name pos:line="308" pos:column="27">null</name></expr>)</condition><then pos:line="308" pos:column="32"> <block pos:line="308" pos:column="33">{
                <expr_stmt><expr><call><name pos:line="309" pos:column="17">handler</name><argument_list pos:line="309" pos:column="24">(<argument><expr><name pos:line="309" pos:column="25">this</name></expr></argument>, <argument><expr><name pos:line="309" pos:column="31">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="313" pos:column="9">protected</specifier> <specifier pos:line="313" pos:column="19">virtual</specifier> <name pos:line="313" pos:column="27">void</name></type> <name pos:line="313" pos:column="32">OnUpdateArchivesStarted</name><parameter_list pos:line="313" pos:column="55">(<param><decl><type><name pos:line="313" pos:column="56">EventArgs</name></type> <name pos:line="313" pos:column="66">e</name></decl></param>)</parameter_list> <block pos:line="313" pos:column="69">{
            <expr_stmt><expr><name pos:line="314" pos:column="13">IsUpdating</name> <op:operator pos:line="314" pos:column="24">=</op:operator> <lit:literal type="boolean" pos:line="314" pos:column="26">true</lit:literal></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="315" pos:column="13">EventHandler</name></type> <name pos:line="315" pos:column="26">handler</name> <init pos:line="315" pos:column="34">= <expr><name pos:line="315" pos:column="36">UpdateArchivesStarted</name></expr></init></decl>;</decl_stmt>
            <if pos:line="316" pos:column="13">if<condition pos:line="316" pos:column="15">(<expr><name pos:line="316" pos:column="16">handler</name> <op:operator pos:line="316" pos:column="24">!=</op:operator> <name pos:line="316" pos:column="27">null</name></expr>)</condition><then pos:line="316" pos:column="32"> <block pos:line="316" pos:column="33">{
                <expr_stmt><expr><call><name pos:line="317" pos:column="17">handler</name><argument_list pos:line="317" pos:column="24">(<argument><expr><name pos:line="317" pos:column="25">this</name></expr></argument>, <argument><expr><name pos:line="317" pos:column="31">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="321" pos:column="9">protected</specifier> <specifier pos:line="321" pos:column="19">virtual</specifier> <name pos:line="321" pos:column="27">void</name></type> <name pos:line="321" pos:column="32">OnUpdateArchivesCompleted</name><parameter_list pos:line="321" pos:column="57">(<param><decl><type><name pos:line="321" pos:column="58">EventArgs</name></type> <name pos:line="321" pos:column="68">e</name></decl></param>)</parameter_list> <block pos:line="321" pos:column="71">{
            <expr_stmt><expr><name pos:line="322" pos:column="13">IsUpdating</name> <op:operator pos:line="322" pos:column="24">=</op:operator> <lit:literal type="boolean" pos:line="322" pos:column="26">false</lit:literal></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="323" pos:column="13">EventHandler</name></type> <name pos:line="323" pos:column="26">handler</name> <init pos:line="323" pos:column="34">= <expr><name pos:line="323" pos:column="36">UpdateArchivesCompleted</name></expr></init></decl>;</decl_stmt>
            <if pos:line="324" pos:column="13">if<condition pos:line="324" pos:column="15">(<expr><name pos:line="324" pos:column="16">handler</name> <op:operator pos:line="324" pos:column="24">!=</op:operator> <name pos:line="324" pos:column="27">null</name></expr>)</condition><then pos:line="324" pos:column="32"> <block pos:line="324" pos:column="33">{
                <expr_stmt><expr><call><name pos:line="325" pos:column="17">handler</name><argument_list pos:line="325" pos:column="24">(<argument><expr><name pos:line="325" pos:column="25">this</name></expr></argument>, <argument><expr><name pos:line="325" pos:column="31">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>
        <comment type="line" pos:line="328" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="329" pos:column="9">/// Get the open solution.</comment>
        <comment type="line" pos:line="330" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="331" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="332" pos:column="9">private</specifier> <specifier pos:line="332" pos:column="17">static</specifier> <name pos:line="332" pos:column="24">Solution</name></type> <name pos:line="332" pos:column="33">GetOpenSolution</name><parameter_list pos:line="332" pos:column="48">()</parameter_list> <block pos:line="332" pos:column="51">{
            <decl_stmt><decl><type><name pos:line="333" pos:column="13">var</name></type> <name pos:line="333" pos:column="17">dte</name> <init pos:line="333" pos:column="21">= <expr><call><name><name pos:line="333" pos:column="23">Package</name><op:operator pos:line="333" pos:column="30">.</op:operator><name pos:line="333" pos:column="31">GetGlobalService</name></name><argument_list pos:line="333" pos:column="47">(<argument><expr><call><name pos:line="333" pos:column="48">typeof</name><argument_list pos:line="333" pos:column="54">(<argument><expr><name pos:line="333" pos:column="55">DTE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="333" pos:column="61">as</op:operator> <name pos:line="333" pos:column="64">DTE</name></expr></init></decl>;</decl_stmt>
            <if pos:line="334" pos:column="13">if<condition pos:line="334" pos:column="15">(<expr><name pos:line="334" pos:column="16">dte</name> <op:operator pos:line="334" pos:column="20">!=</op:operator> <name pos:line="334" pos:column="23">null</name></expr>)</condition><then pos:line="334" pos:column="28"> <block pos:line="334" pos:column="29">{
                <decl_stmt><decl><type><name pos:line="335" pos:column="17">var</name></type> <name pos:line="335" pos:column="21">openSolution</name> <init pos:line="335" pos:column="34">= <expr><name><name pos:line="335" pos:column="36">dte</name><op:operator pos:line="335" pos:column="39">.</op:operator><name pos:line="335" pos:column="40">Solution</name></name></expr></init></decl>;</decl_stmt>
                <return pos:line="336" pos:column="17">return <expr><name pos:line="336" pos:column="24">openSolution</name></expr>;</return>
            }</block></then> <else pos:line="337" pos:column="15">else <block pos:line="337" pos:column="20">{
                <return pos:line="338" pos:column="17">return <expr><name pos:line="338" pos:column="24">null</name></expr>;</return>
            }</block></else></if>
        }</block></function>

        <function><type><specifier pos:line="342" pos:column="9">private</specifier> <name pos:line="342" pos:column="17">string</name></type> <name pos:line="342" pos:column="24">CreateFolder</name><parameter_list pos:line="342" pos:column="36">(<param><decl><type><name pos:line="342" pos:column="37">string</name></type> <name pos:line="342" pos:column="44">folderName</name></decl></param>, <param><decl><type><name pos:line="342" pos:column="56">string</name></type> <name pos:line="342" pos:column="63">parentDirectory</name></decl></param>)</parameter_list> <block pos:line="342" pos:column="80">{
            <if pos:line="343" pos:column="13">if<condition pos:line="343" pos:column="15">(<expr><op:operator pos:line="343" pos:column="16">!</op:operator><call><name><name pos:line="343" pos:column="17">File</name><op:operator pos:line="343" pos:column="21">.</op:operator><name pos:line="343" pos:column="22">Exists</name></name><argument_list pos:line="343" pos:column="28">(<argument><expr><name pos:line="343" pos:column="29">parentDirectory</name> <op:operator pos:line="343" pos:column="45">+</op:operator> <name pos:line="343" pos:column="47">folderName</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="343" pos:column="59"> <block pos:line="343" pos:column="60">{
                <decl_stmt><decl><type><name pos:line="344" pos:column="17">var</name></type> <name pos:line="344" pos:column="21">directoryInfo</name> <init pos:line="344" pos:column="35">= <expr><call><name><name pos:line="344" pos:column="37">Directory</name><op:operator pos:line="344" pos:column="46">.</op:operator><name pos:line="344" pos:column="47">CreateDirectory</name></name><argument_list pos:line="344" pos:column="62">(<argument><expr><name pos:line="344" pos:column="63">parentDirectory</name> <op:operator pos:line="344" pos:column="79">+</op:operator> <name pos:line="344" pos:column="81">folderName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return pos:line="345" pos:column="17">return <expr><name><name pos:line="345" pos:column="24">directoryInfo</name><op:operator pos:line="345" pos:column="37">.</op:operator><name pos:line="345" pos:column="38">FullName</name></name></expr>;</return>
            }</block></then> <else pos:line="346" pos:column="15">else <block pos:line="346" pos:column="20">{
                <return pos:line="347" pos:column="17">return <expr><name pos:line="347" pos:column="24">parentDirectory</name> <op:operator pos:line="347" pos:column="40">+</op:operator> <name pos:line="347" pos:column="42">folderName</name></expr>;</return>
            }</block></else></if>
        }</block></function>

        <function><type><specifier pos:line="351" pos:column="9">private</specifier> <name pos:line="351" pos:column="17">string</name></type> <name pos:line="351" pos:column="24">CreateNamedFolder</name><parameter_list pos:line="351" pos:column="41">(<param><decl><type><name pos:line="351" pos:column="42">Solution</name></type> <name pos:line="351" pos:column="51">openSolution</name></decl></param>, <param><decl><type><name pos:line="351" pos:column="65">string</name></type> <name pos:line="351" pos:column="72">str</name></decl></param>)</parameter_list> <block pos:line="351" pos:column="77">{
            <decl_stmt><decl><type><name pos:line="352" pos:column="13">var</name></type> <name pos:line="352" pos:column="17">srcMLFolder</name> <init pos:line="352" pos:column="29">= <expr><call><name pos:line="352" pos:column="31">CreateFolder</name><argument_list pos:line="352" pos:column="43">(<argument><expr><name pos:line="352" pos:column="44">str</name></expr></argument>, <argument><expr><name pos:line="352" pos:column="49">SrcMLServiceDirectory</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="353" pos:column="13">CreateFolder</name><argument_list pos:line="353" pos:column="25">(<argument><expr><call><name pos:line="353" pos:column="26">GetName</name><argument_list pos:line="353" pos:column="33">(<argument><expr><name pos:line="353" pos:column="34">openSolution</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="353" pos:column="49">srcMLFolder</name> <op:operator pos:line="353" pos:column="61">+</op:operator> <lit:literal type="string" pos:line="353" pos:column="63">"\\"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="354" pos:column="13">return <expr><name pos:line="354" pos:column="20">srcMLFolder</name> <op:operator pos:line="354" pos:column="32">+</op:operator> <lit:literal type="string" pos:line="354" pos:column="34">"\\"</lit:literal> <op:operator pos:line="354" pos:column="39">+</op:operator> <call><name pos:line="354" pos:column="41">GetName</name><argument_list pos:line="354" pos:column="48">(<argument><expr><name pos:line="354" pos:column="49">openSolution</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="357" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="358" pos:column="9">/// Display text on the Visual Studio status bar.</comment>
        <comment type="line" pos:line="359" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="360" pos:column="9">/// &lt;param name="text"&gt;&lt;/param&gt;</comment>
        <function><type><specifier pos:line="361" pos:column="9">private</specifier> <name pos:line="361" pos:column="17">void</name></type> <name pos:line="361" pos:column="22">DisplayTextOnStatusBar</name><parameter_list pos:line="361" pos:column="44">(<param><decl><type><name pos:line="361" pos:column="45">string</name></type> <name pos:line="361" pos:column="52">text</name></decl></param>)</parameter_list> <block pos:line="361" pos:column="58">{
            <if pos:line="362" pos:column="13">if<condition pos:line="362" pos:column="15">(<expr><name pos:line="362" pos:column="16">statusBar</name> <op:operator pos:line="362" pos:column="26">!=</op:operator> <name pos:line="362" pos:column="29">null</name></expr>)</condition><then pos:line="362" pos:column="34"> <block pos:line="362" pos:column="35">{
                <expr_stmt><expr><call><name><name pos:line="363" pos:column="17">statusBar</name><op:operator pos:line="363" pos:column="26">.</op:operator><name pos:line="363" pos:column="27">IsFrozen</name></name><argument_list pos:line="363" pos:column="35">(<argument><expr pos:line="363" pos:column="36">out <name pos:line="363" pos:column="40">frozen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="364" pos:column="17">if<condition pos:line="364" pos:column="19">(<expr><name pos:line="364" pos:column="20">frozen</name> <op:operator pos:line="364" pos:column="27">==</op:operator> <lit:literal type="number" pos:line="364" pos:column="30">0</lit:literal></expr>)</condition><then pos:line="364" pos:column="32"> <block pos:line="364" pos:column="33">{
                    <comment type="line" pos:line="365" pos:column="21">// Set the status bar text and make its display static.</comment>
                    <expr_stmt><expr><call><name><name pos:line="366" pos:column="21">statusBar</name><op:operator pos:line="366" pos:column="30">.</op:operator><name pos:line="366" pos:column="31">SetText</name></name><argument_list pos:line="366" pos:column="38">(<argument><expr><name pos:line="366" pos:column="39">text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="367" pos:column="21">statusBar</name><op:operator pos:line="367" pos:column="30">.</op:operator><name pos:line="367" pos:column="31">FreezeOutput</name></name><argument_list pos:line="367" pos:column="43">(<argument><expr><lit:literal type="number" pos:line="367" pos:column="44">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="line" pos:line="368" pos:column="21">// Clear the status bar text.</comment>
                    <expr_stmt><expr><call><name><name pos:line="369" pos:column="21">statusBar</name><op:operator pos:line="369" pos:column="30">.</op:operator><name pos:line="369" pos:column="31">FreezeOutput</name></name><argument_list pos:line="369" pos:column="43">(<argument><expr><lit:literal type="number" pos:line="369" pos:column="44">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="370" pos:column="21">statusBar</name><op:operator pos:line="370" pos:column="30">.</op:operator><name pos:line="370" pos:column="31">Clear</name></name><argument_list pos:line="370" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="375" pos:column="9">private</specifier> <name pos:line="375" pos:column="17">string</name></type> <name pos:line="375" pos:column="24">GetName</name><parameter_list pos:line="375" pos:column="31">(<param><decl><type><name pos:line="375" pos:column="32">Solution</name></type> <name pos:line="375" pos:column="41">openSolution</name></decl></param>)</parameter_list> <block pos:line="375" pos:column="55">{
            <decl_stmt><decl><type><name pos:line="376" pos:column="13">var</name></type> <name pos:line="376" pos:column="17">fullName</name> <init pos:line="376" pos:column="26">= <expr><name><name pos:line="376" pos:column="28">openSolution</name><op:operator pos:line="376" pos:column="40">.</op:operator><name pos:line="376" pos:column="41">FullName</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="377" pos:column="13">var</name></type> <name pos:line="377" pos:column="17">split</name> <init pos:line="377" pos:column="23">= <expr><call><name><name pos:line="377" pos:column="25">fullName</name><op:operator pos:line="377" pos:column="33">.</op:operator><name pos:line="377" pos:column="34">Split</name></name><argument_list pos:line="377" pos:column="39">(<argument><expr><lit:literal type="char" pos:line="377" pos:column="40">'\\'</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="378" pos:column="13">return <expr><name><name pos:line="378" pos:column="20">split</name><index pos:line="378" pos:column="25">[<expr><name><name pos:line="378" pos:column="26">split</name><op:operator pos:line="378" pos:column="31">.</op:operator><name pos:line="378" pos:column="32">Length</name></name> <op:operator pos:line="378" pos:column="39">-</op:operator> <lit:literal type="number" pos:line="378" pos:column="41">1</lit:literal></expr>]</index></name><op:operator pos:line="378" pos:column="43">.</op:operator><call><name pos:line="378" pos:column="44">Substring</name><argument_list pos:line="378" pos:column="53">(<argument><expr><lit:literal type="number" pos:line="378" pos:column="54">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="378" pos:column="57">split</name><index pos:line="378" pos:column="62">[<expr><name><name pos:line="378" pos:column="63">split</name><op:operator pos:line="378" pos:column="68">.</op:operator><name pos:line="378" pos:column="69">Length</name></name> <op:operator pos:line="378" pos:column="76">-</op:operator> <lit:literal type="number" pos:line="378" pos:column="78">1</lit:literal></expr>]</index></name><op:operator pos:line="378" pos:column="80">.</op:operator><name pos:line="378" pos:column="81">Length</name> <op:operator pos:line="378" pos:column="88">-</op:operator> <lit:literal type="number" pos:line="378" pos:column="90">4</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="378" pos:column="93">+</op:operator> <call><name><name pos:line="378" pos:column="95">fullName</name><op:operator pos:line="378" pos:column="103">.</op:operator><name pos:line="378" pos:column="104">GetHashCode</name></name><argument_list pos:line="378" pos:column="115">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="381" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="382" pos:column="9">/// Respond to the FileChanged event from Solution Monitor.</comment>
        <comment type="line" pos:line="383" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="384" pos:column="9">/// &lt;param name="sender"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="385" pos:column="9">/// &lt;param name="eventArgs"&gt;&lt;/param&gt;</comment>
        <function><type><specifier pos:line="386" pos:column="9">private</specifier> <name pos:line="386" pos:column="17">void</name></type> <name pos:line="386" pos:column="22">RespondToFileChangedEvent</name><parameter_list pos:line="386" pos:column="47">(<param><decl><type><name pos:line="386" pos:column="48">object</name></type> <name pos:line="386" pos:column="55">sender</name></decl></param>, <param><decl><type><name pos:line="386" pos:column="63">FileEventRaisedArgs</name></type> <name pos:line="386" pos:column="83">eventArgs</name></decl></param>)</parameter_list> <block pos:line="386" pos:column="94">{
            <expr_stmt><expr><call><name pos:line="387" pos:column="13">OnFileChanged</name><argument_list pos:line="387" pos:column="26">(<argument><expr><name pos:line="387" pos:column="27">eventArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="390" pos:column="9">private</specifier> <name pos:line="390" pos:column="17">void</name></type> <name pos:line="390" pos:column="22">RespondToDirectoryAddedEvent</name><parameter_list pos:line="390" pos:column="50">(<param><decl><type><name pos:line="390" pos:column="51">object</name></type> <name pos:line="390" pos:column="58">sender</name></decl></param>, <param><decl><type><name pos:line="390" pos:column="66">DirectoryScanningMonitorEventArgs</name></type> <name pos:line="390" pos:column="100">eventArgs</name></decl></param>)</parameter_list> <block pos:line="390" pos:column="111">{
            <expr_stmt><expr><call><name pos:line="391" pos:column="13">OnDirectoryAdded</name><argument_list pos:line="391" pos:column="29">(<argument><expr><name pos:line="391" pos:column="30">eventArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="394" pos:column="9">private</specifier> <name pos:line="394" pos:column="17">void</name></type> <name pos:line="394" pos:column="22">RespondToDirectoryRemovedEvent</name><parameter_list pos:line="394" pos:column="52">(<param><decl><type><name pos:line="394" pos:column="53">object</name></type> <name pos:line="394" pos:column="60">sender</name></decl></param>, <param><decl><type><name pos:line="394" pos:column="68">DirectoryScanningMonitorEventArgs</name></type> <name pos:line="394" pos:column="102">eventArgs</name></decl></param>)</parameter_list> <block pos:line="394" pos:column="113">{
            <expr_stmt><expr><call><name pos:line="395" pos:column="13">OnDirectoryRemoved</name><argument_list pos:line="395" pos:column="31">(<argument><expr><name pos:line="395" pos:column="32">eventArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="398" pos:column="9">private</specifier> <name pos:line="398" pos:column="17">bool</name></type> <name pos:line="398" pos:column="22">ShouldReset</name><parameter_list pos:line="398" pos:column="33">()</parameter_list> <block pos:line="398" pos:column="36">{
            <decl_stmt><decl><type><name pos:line="399" pos:column="13">var</name></type> <name pos:line="399" pos:column="17">openSolution</name> <init pos:line="399" pos:column="30">= <expr><call><name pos:line="399" pos:column="32">GetOpenSolution</name><argument_list pos:line="399" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="400" pos:column="13">if<condition pos:line="400" pos:column="15">(<expr><name pos:line="400" pos:column="16">null</name> <op:operator pos:line="400" pos:column="21">!=</op:operator> <name pos:line="400" pos:column="24">openSolution</name></expr>)</condition><then pos:line="400" pos:column="37"> <block pos:line="400" pos:column="38">{
                <decl_stmt><decl><type><name pos:line="401" pos:column="17">var</name></type> <name pos:line="401" pos:column="21">baseDirectory</name> <init pos:line="401" pos:column="35">= <expr><call><name pos:line="401" pos:column="37">GetSrcMLArchiveFolder</name><argument_list pos:line="401" pos:column="58">(<argument><expr><name pos:line="401" pos:column="59">openSolution</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return pos:line="402" pos:column="17">return <expr><call><name><name pos:line="402" pos:column="24">File</name><op:operator pos:line="402" pos:column="28">.</op:operator><name pos:line="402" pos:column="29">Exists</name></name><argument_list pos:line="402" pos:column="35">(<argument><expr><call><name><name pos:line="402" pos:column="36">Path</name><op:operator pos:line="402" pos:column="40">.</op:operator><name pos:line="402" pos:column="41">Combine</name></name><argument_list pos:line="402" pos:column="48">(<argument><expr><name pos:line="402" pos:column="49">baseDirectory</name></expr></argument>, <argument><expr><name pos:line="402" pos:column="64">ResetFileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
            <return pos:line="404" pos:column="13">return <expr><lit:literal type="boolean" pos:line="404" pos:column="20">false</lit:literal></expr>;</return>
        }</block></function>
        <function><type><name pos:line="406" pos:column="9">void</name></type> <name pos:line="406" pos:column="14">SaveTimer_Elapsed</name><parameter_list pos:line="406" pos:column="31">(<param><decl><type><name pos:line="406" pos:column="32">object</name></type> <name pos:line="406" pos:column="39">sender</name></decl></param>, <param><decl><type><name pos:line="406" pos:column="47">ElapsedEventArgs</name></type> <name pos:line="406" pos:column="64">e</name></decl></param>)</parameter_list> <block pos:line="406" pos:column="67">{
            <expr_stmt><expr><call><name><name pos:line="407" pos:column="13">CurrentMonitor</name><op:operator pos:line="407" pos:column="27">.</op:operator><name pos:line="407" pos:column="28">Save</name></name><argument_list pos:line="407" pos:column="32">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

    }</block></class>
}</block></namespace></unit>
