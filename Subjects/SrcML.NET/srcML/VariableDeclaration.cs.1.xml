<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data\VariableDeclaration.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2013 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *    Patrick Francis (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="13" pos:column="1">using <name pos:line="13" pos:column="7">System</name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Collections</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">Generic</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Linq</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Text</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Xml</name></name>;</using>

<namespace pos:line="19" pos:column="1">namespace <name><name pos:line="19" pos:column="11">ABB</name><op:operator pos:line="19" pos:column="14">.</op:operator><name pos:line="19" pos:column="15">SrcML</name><op:operator pos:line="19" pos:column="20">.</op:operator><name pos:line="19" pos:column="21">Data</name></name> <block pos:line="19" pos:column="26">{

    <comment type="line" pos:line="21" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="22" pos:column="5">/// Represents a variable declaration</comment>
    <comment type="line" pos:line="23" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="24" pos:column="5">public</specifier> class <name pos:line="24" pos:column="18">VariableDeclaration</name> <super pos:line="24" pos:column="38">: <name pos:line="24" pos:column="40">Expression</name>, <name pos:line="24" pos:column="52">INamedEntity</name></super> <block pos:line="24" pos:column="65">{
        <decl_stmt><decl><type><specifier pos:line="25" pos:column="9">private</specifier> <name pos:line="25" pos:column="17">TypeUse</name></type> <name pos:line="25" pos:column="25">varType</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="26" pos:column="9">private</specifier> <name pos:line="26" pos:column="17">Expression</name></type> <name pos:line="26" pos:column="28">initExpression</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="27" pos:column="9">private</specifier> <name pos:line="27" pos:column="17">Expression</name></type> <name pos:line="27" pos:column="28">rangeExpression</name></decl>;</decl_stmt>
        
        <comment type="line" pos:line="29" pos:column="9">/// &lt;summary&gt; The XML name for VariableDeclaration &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="30" pos:column="9">public</specifier> <specifier pos:line="30" pos:column="16">new</specifier> <specifier pos:line="30" pos:column="20">const</specifier> <name pos:line="30" pos:column="26">string</name></type> <name pos:line="30" pos:column="33">XmlName</name> <init pos:line="30" pos:column="41">= <expr><lit:literal type="string" pos:line="30" pos:column="43">"var"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="32" pos:column="9">/// &lt;summary&gt; XML Name for &lt;see cref="Accessibility" /&gt; &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="33" pos:column="9">public</specifier> <specifier pos:line="33" pos:column="16">const</specifier> <name pos:line="33" pos:column="22">string</name></type> <name pos:line="33" pos:column="29">XmlAccessibilityName</name> <init pos:line="33" pos:column="50">= <expr><lit:literal type="string" pos:line="33" pos:column="52">"Accessibility"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="35" pos:column="9">/// &lt;summary&gt; XML Name for &lt;see cref="Name" /&gt; &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="36" pos:column="9">public</specifier> <specifier pos:line="36" pos:column="16">const</specifier> <name pos:line="36" pos:column="22">string</name></type> <name pos:line="36" pos:column="29">XmlNameName</name> <init pos:line="36" pos:column="41">= <expr><lit:literal type="string" pos:line="36" pos:column="43">"Name"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="38" pos:column="9">/// &lt;summary&gt; XML Name for &lt;see cref="Type" /&gt; &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="39" pos:column="9">public</specifier> <specifier pos:line="39" pos:column="16">const</specifier> <name pos:line="39" pos:column="22">string</name></type> <name pos:line="39" pos:column="29">XmlTypeName</name> <init pos:line="39" pos:column="41">= <expr><lit:literal type="string" pos:line="39" pos:column="43">"Type"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="41" pos:column="9">/// &lt;summary&gt; XML Name for &lt;see cref="Initializer" /&gt; &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="42" pos:column="9">public</specifier> <specifier pos:line="42" pos:column="16">const</specifier> <name pos:line="42" pos:column="22">string</name></type> <name pos:line="42" pos:column="29">XmlInitializerName</name> <init pos:line="42" pos:column="48">= <expr><lit:literal type="string" pos:line="42" pos:column="50">"Initializer"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="44" pos:column="9">/// &lt;summary&gt; XML Name for &lt;see cref="Range"/&gt; &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="45" pos:column="9">public</specifier> <specifier pos:line="45" pos:column="16">const</specifier> <name pos:line="45" pos:column="22">string</name></type> <name pos:line="45" pos:column="29">XmlRangeName</name> <init pos:line="45" pos:column="42">= <expr><lit:literal type="string" pos:line="45" pos:column="44">"Range"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="47" pos:column="9">/// &lt;summary&gt; The access modifier assigned to this type &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="48" pos:column="9">public</specifier> <name pos:line="48" pos:column="16">AccessModifier</name></type> <name pos:line="48" pos:column="31">Accessibility</name> <block pos:line="48" pos:column="45">{ <function_decl><name pos:line="48" pos:column="47">get</name>;</function_decl> <function_decl><name pos:line="48" pos:column="52">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="50" pos:column="9">/// &lt;summary&gt; The name of the variable &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="51" pos:column="9">public</specifier> <name pos:line="51" pos:column="16">string</name></type> <name pos:line="51" pos:column="23">Name</name> <block pos:line="51" pos:column="28">{ <function_decl><name pos:line="51" pos:column="30">get</name>;</function_decl> <function_decl><name pos:line="51" pos:column="35">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="53" pos:column="9">/// &lt;summary&gt; Description of the type for this variable &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="54" pos:column="9">public</specifier> <specifier pos:line="54" pos:column="16">virtual</specifier> <name pos:line="54" pos:column="24">TypeUse</name></type> <name pos:line="54" pos:column="32">VariableType</name> <block pos:line="54" pos:column="45">{
            <function><name pos:line="55" pos:column="13">get</name> <block pos:line="55" pos:column="17">{ <return pos:line="55" pos:column="19">return <expr><name pos:line="55" pos:column="26">varType</name></expr>;</return> }</block></function>
            <function><name pos:line="56" pos:column="13">set</name> <block pos:line="56" pos:column="17">{
                <expr_stmt><expr><name pos:line="57" pos:column="17">varType</name> <op:operator pos:line="57" pos:column="25">=</op:operator> <name pos:line="57" pos:column="27">value</name></expr>;</expr_stmt>
                <if pos:line="58" pos:column="17">if<condition pos:line="58" pos:column="19">(<expr><name pos:line="58" pos:column="20">varType</name> <op:operator pos:line="58" pos:column="28">!=</op:operator> <name pos:line="58" pos:column="31">null</name></expr>)</condition><then pos:line="58" pos:column="36"> <block pos:line="58" pos:column="37">{
                    <expr_stmt><expr><name><name pos:line="59" pos:column="21">varType</name><op:operator pos:line="59" pos:column="28">.</op:operator><name pos:line="59" pos:column="29">ParentExpression</name></name> <op:operator pos:line="59" pos:column="46">=</op:operator> <name pos:line="59" pos:column="48">this</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="60" pos:column="21">varType</name><op:operator pos:line="60" pos:column="28">.</op:operator><name pos:line="60" pos:column="29">ParentStatement</name></name> <op:operator pos:line="60" pos:column="45">=</op:operator> <name><name pos:line="60" pos:column="47">this</name><op:operator pos:line="60" pos:column="51">.</op:operator><name pos:line="60" pos:column="52">ParentStatement</name></name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="65" pos:column="9">/// &lt;summary&gt; The expression, if any, used to intialize this variable &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="66" pos:column="9">public</specifier> <name pos:line="66" pos:column="16">Expression</name></type> <name pos:line="66" pos:column="27">Initializer</name> <block pos:line="66" pos:column="39">{
            <function><name pos:line="67" pos:column="13">get</name> <block pos:line="67" pos:column="17">{ <return pos:line="67" pos:column="19">return <expr><name pos:line="67" pos:column="26">initExpression</name></expr>;</return> }</block></function>
            <function><name pos:line="68" pos:column="13">set</name> <block pos:line="68" pos:column="17">{
                <expr_stmt><expr><name pos:line="69" pos:column="17">initExpression</name> <op:operator pos:line="69" pos:column="32">=</op:operator> <name pos:line="69" pos:column="34">value</name></expr>;</expr_stmt>
                <if pos:line="70" pos:column="17">if<condition pos:line="70" pos:column="19">(<expr><name pos:line="70" pos:column="20">initExpression</name> <op:operator pos:line="70" pos:column="35">!=</op:operator> <name pos:line="70" pos:column="38">null</name></expr>)</condition><then pos:line="70" pos:column="43"> <block pos:line="70" pos:column="44">{
                    <expr_stmt><expr><name><name pos:line="71" pos:column="21">initExpression</name><op:operator pos:line="71" pos:column="35">.</op:operator><name pos:line="71" pos:column="36">ParentExpression</name></name> <op:operator pos:line="71" pos:column="53">=</op:operator> <name pos:line="71" pos:column="55">this</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="72" pos:column="21">initExpression</name><op:operator pos:line="72" pos:column="35">.</op:operator><name pos:line="72" pos:column="36">ParentStatement</name></name> <op:operator pos:line="72" pos:column="52">=</op:operator> <name><name pos:line="72" pos:column="54">this</name><op:operator pos:line="72" pos:column="58">.</op:operator><name pos:line="72" pos:column="59">ParentStatement</name></name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="77" pos:column="9">/// &lt;summary&gt; The range expression provided for this variable in a foreach loop. &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="78" pos:column="9">public</specifier> <name pos:line="78" pos:column="16">Expression</name></type> <name pos:line="78" pos:column="27">Range</name> <block pos:line="78" pos:column="33">{
            <function><name pos:line="79" pos:column="13">get</name> <block pos:line="79" pos:column="17">{ <return pos:line="79" pos:column="19">return <expr><name pos:line="79" pos:column="26">rangeExpression</name></expr>;</return> }</block></function>
            <function><name pos:line="80" pos:column="13">set</name> <block pos:line="80" pos:column="17">{
                <expr_stmt><expr><name pos:line="81" pos:column="17">rangeExpression</name> <op:operator pos:line="81" pos:column="33">=</op:operator> <name pos:line="81" pos:column="35">value</name></expr>;</expr_stmt>
                <if pos:line="82" pos:column="17">if<condition pos:line="82" pos:column="19">(<expr><name pos:line="82" pos:column="20">rangeExpression</name> <op:operator pos:line="82" pos:column="36">!=</op:operator> <name pos:line="82" pos:column="39">null</name></expr>)</condition><then pos:line="82" pos:column="44"> <block pos:line="82" pos:column="45">{
                    <expr_stmt><expr><name><name pos:line="83" pos:column="21">rangeExpression</name><op:operator pos:line="83" pos:column="36">.</op:operator><name pos:line="83" pos:column="37">ParentExpression</name></name> <op:operator pos:line="83" pos:column="54">=</op:operator> <name pos:line="83" pos:column="56">this</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="84" pos:column="21">rangeExpression</name><op:operator pos:line="84" pos:column="36">.</op:operator><name pos:line="84" pos:column="37">ParentStatement</name></name> <op:operator pos:line="84" pos:column="53">=</op:operator> <name><name pos:line="84" pos:column="55">this</name><op:operator pos:line="84" pos:column="59">.</op:operator><name pos:line="84" pos:column="60">ParentStatement</name></name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="89" pos:column="9">/// &lt;summary&gt; The statement containing this expression. &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="90" pos:column="9">public</specifier> <specifier pos:line="90" pos:column="16">override</specifier> <name pos:line="90" pos:column="25">Statement</name></type> <name pos:line="90" pos:column="35">ParentStatement</name> <block pos:line="90" pos:column="51">{
            <function><name pos:line="91" pos:column="13">get</name> <block pos:line="91" pos:column="17">{ <return pos:line="91" pos:column="19">return <expr><name><name pos:line="91" pos:column="26">base</name><op:operator pos:line="91" pos:column="30">.</op:operator><name pos:line="91" pos:column="31">ParentStatement</name></name></expr>;</return> }</block></function>
            <function><name pos:line="92" pos:column="13">set</name> <block pos:line="92" pos:column="17">{
                <expr_stmt><expr><name><name pos:line="93" pos:column="17">base</name><op:operator pos:line="93" pos:column="21">.</op:operator><name pos:line="93" pos:column="22">ParentStatement</name></name> <op:operator pos:line="93" pos:column="38">=</op:operator> <name pos:line="93" pos:column="40">value</name></expr>;</expr_stmt>
                <if pos:line="94" pos:column="17">if<condition pos:line="94" pos:column="19">(<expr><name pos:line="94" pos:column="20">VariableType</name> <op:operator pos:line="94" pos:column="33">!=</op:operator> <name pos:line="94" pos:column="36">null</name></expr>)</condition><then pos:line="94" pos:column="41"> <block pos:line="94" pos:column="42">{ <expr_stmt><expr><name><name pos:line="94" pos:column="44">VariableType</name><op:operator pos:line="94" pos:column="56">.</op:operator><name pos:line="94" pos:column="57">ParentStatement</name></name> <op:operator pos:line="94" pos:column="73">=</op:operator> <name pos:line="94" pos:column="75">value</name></expr>;</expr_stmt> }</block></then></if>
                <if pos:line="95" pos:column="17">if<condition pos:line="95" pos:column="19">(<expr><name pos:line="95" pos:column="20">Initializer</name> <op:operator pos:line="95" pos:column="32">!=</op:operator> <name pos:line="95" pos:column="35">null</name></expr>)</condition><then pos:line="95" pos:column="40"> <block pos:line="95" pos:column="41">{ <expr_stmt><expr><name><name pos:line="95" pos:column="43">Initializer</name><op:operator pos:line="95" pos:column="54">.</op:operator><name pos:line="95" pos:column="55">ParentStatement</name></name> <op:operator pos:line="95" pos:column="71">=</op:operator> <name pos:line="95" pos:column="73">value</name></expr>;</expr_stmt> }</block></then></if>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="99" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="100" pos:column="9">/// Returns the child expressions, including the VariableType, Initializer, and Range;</comment>
        <comment type="line" pos:line="101" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="102" pos:column="9">protected</specifier> <specifier pos:line="102" pos:column="19">override</specifier> <name><name pos:line="102" pos:column="28">IEnumerable</name><argument_list pos:line="102" pos:column="39">&lt;<argument><name pos:line="102" pos:column="40">AbstractProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="102" pos:column="64">GetChildren</name><parameter_list pos:line="102" pos:column="75">()</parameter_list> <block pos:line="102" pos:column="78">{
            <if pos:line="103" pos:column="13">if<condition pos:line="103" pos:column="15">(<expr><name pos:line="103" pos:column="16">VariableType</name> <op:operator pos:line="103" pos:column="29">!=</op:operator> <name pos:line="103" pos:column="32">null</name></expr>)</condition><then pos:line="103" pos:column="37"> <block pos:line="103" pos:column="38">{
                <return><specifier pos:line="104" pos:column="17">yield</specifier> return <expr><name pos:line="104" pos:column="30">VariableType</name></expr>;</return>
            }</block></then></if>
            <if pos:line="106" pos:column="13">if<condition pos:line="106" pos:column="15">(<expr><name pos:line="106" pos:column="16">Initializer</name> <op:operator pos:line="106" pos:column="28">!=</op:operator> <name pos:line="106" pos:column="31">null</name></expr>)</condition><then pos:line="106" pos:column="36"> <block pos:line="106" pos:column="37">{
                <return><specifier pos:line="107" pos:column="17">yield</specifier> return <expr><name pos:line="107" pos:column="30">Initializer</name></expr>;</return>
            }</block></then></if>
            <if pos:line="109" pos:column="13">if<condition pos:line="109" pos:column="15">(<expr><name pos:line="109" pos:column="16">Range</name> <op:operator pos:line="109" pos:column="22">!=</op:operator> <name pos:line="109" pos:column="25">null</name></expr>)</condition><then pos:line="109" pos:column="30"> <block pos:line="109" pos:column="31">{
                <return><specifier pos:line="110" pos:column="17">yield</specifier> return <expr><name pos:line="110" pos:column="30">Range</name></expr>;</return>
            }</block></then></if>
            <foreach pos:line="112" pos:column="13">foreach(<init><decl><type><name pos:line="112" pos:column="21">var</name></type> <name pos:line="112" pos:column="25">child</name> <range pos:line="112" pos:column="31">in <expr><call><name><name pos:line="112" pos:column="34">base</name><op:operator pos:line="112" pos:column="38">.</op:operator><name pos:line="112" pos:column="39">GetChildren</name></name><argument_list pos:line="112" pos:column="50">()</argument_list></call></expr></range></decl></init>) <block pos:line="112" pos:column="54">{
                <return><specifier pos:line="113" pos:column="17">yield</specifier> return <expr><name pos:line="113" pos:column="30">child</name></expr>;</return>
            }</block></foreach>
        }</block></function>

        <comment type="line" pos:line="117" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="118" pos:column="9">/// Returns the locations where this entity appears in the source.</comment>
        <comment type="line" pos:line="119" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="120" pos:column="9">public</specifier> <name><name pos:line="120" pos:column="16">IEnumerable</name><argument_list pos:line="120" pos:column="27">&lt;<argument><name pos:line="120" pos:column="28">SrcMLLocation</name></argument>&gt;</argument_list></name></type> <name pos:line="120" pos:column="43">GetLocations</name><parameter_list pos:line="120" pos:column="55">()</parameter_list> <block pos:line="120" pos:column="58">{
            <return><specifier pos:line="121" pos:column="13">yield</specifier> return <expr><name pos:line="121" pos:column="26">Location</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="124" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="125" pos:column="9">/// Instance method for getting &lt;see cref="VariableDeclaration.XmlName"/&gt;</comment>
        <comment type="line" pos:line="126" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="127" pos:column="9">/// &lt;returns&gt;Returns the XML name for VariableDeclaration&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="128" pos:column="9">public</specifier> <specifier pos:line="128" pos:column="16">override</specifier> <name pos:line="128" pos:column="25">string</name></type> <name pos:line="128" pos:column="32">GetXmlName</name><parameter_list pos:line="128" pos:column="42">()</parameter_list> <block pos:line="128" pos:column="45">{ <return pos:line="128" pos:column="47">return <expr><name><name pos:line="128" pos:column="54">VariableDeclaration</name><op:operator pos:line="128" pos:column="73">.</op:operator><name pos:line="128" pos:column="74">XmlName</name></name></expr>;</return> }</block></function>

        <comment type="line" pos:line="130" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="131" pos:column="9">/// Returns a string representation of this object.</comment>
        <comment type="line" pos:line="132" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="133" pos:column="9">public</specifier> <specifier pos:line="133" pos:column="16">override</specifier> <name pos:line="133" pos:column="25">string</name></type> <name pos:line="133" pos:column="32">ToString</name><parameter_list pos:line="133" pos:column="40">()</parameter_list> <block pos:line="133" pos:column="43">{
            <decl_stmt><decl><type><name pos:line="134" pos:column="13">var</name></type> <name pos:line="134" pos:column="17">str</name> <init pos:line="134" pos:column="21">= <expr><op:operator pos:line="134" pos:column="23">new</op:operator> <call><name pos:line="134" pos:column="27">StringBuilder</name><argument_list pos:line="134" pos:column="40">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="135" pos:column="13">str</name><op:operator pos:line="135" pos:column="16">.</op:operator><name pos:line="135" pos:column="17">AppendFormat</name></name><argument_list pos:line="135" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="135" pos:column="30">"{0} {1}"</lit:literal></expr></argument>, <argument><expr><name pos:line="135" pos:column="41">VariableType</name></expr></argument>, <argument><expr><name pos:line="135" pos:column="55">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if pos:line="136" pos:column="13">if<condition pos:line="136" pos:column="15">(<expr><name pos:line="136" pos:column="16">Initializer</name> <op:operator pos:line="136" pos:column="28">!=</op:operator> <name pos:line="136" pos:column="31">null</name></expr>)</condition><then pos:line="136" pos:column="36"> <block pos:line="136" pos:column="37">{
                <expr_stmt><expr><call><name><name pos:line="137" pos:column="17">str</name><op:operator pos:line="137" pos:column="20">.</op:operator><name pos:line="137" pos:column="21">AppendFormat</name></name><argument_list pos:line="137" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="137" pos:column="34">" = {0}"</lit:literal></expr></argument>, <argument><expr><name pos:line="137" pos:column="44">Initializer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if pos:line="139" pos:column="13">if<condition pos:line="139" pos:column="15">(<expr><name pos:line="139" pos:column="16">Range</name> <op:operator pos:line="139" pos:column="22">!=</op:operator> <name pos:line="139" pos:column="25">null</name></expr>)</condition><then pos:line="139" pos:column="30"> <block pos:line="139" pos:column="31">{
                <if pos:line="140" pos:column="17">if<condition pos:line="140" pos:column="19">(<expr><name pos:line="140" pos:column="20">ProgrammingLanguage</name> <op:operator pos:line="140" pos:column="40">==</op:operator> <name><name pos:line="140" pos:column="43">Language</name><op:operator pos:line="140" pos:column="51">.</op:operator><name pos:line="140" pos:column="52">Java</name></name></expr>)</condition><then pos:line="140" pos:column="57"> <block pos:line="140" pos:column="58">{
                    <expr_stmt><expr><call><name><name pos:line="141" pos:column="21">str</name><op:operator pos:line="141" pos:column="24">.</op:operator><name pos:line="141" pos:column="25">AppendFormat</name></name><argument_list pos:line="141" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="141" pos:column="38">" : {0}"</lit:literal></expr></argument>, <argument><expr><name pos:line="141" pos:column="48">Range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="142" pos:column="19">else <block pos:line="142" pos:column="24">{
                    <expr_stmt><expr><call><name><name pos:line="143" pos:column="21">str</name><op:operator pos:line="143" pos:column="24">.</op:operator><name pos:line="143" pos:column="25">AppendFormat</name></name><argument_list pos:line="143" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="143" pos:column="38">" in {0}"</lit:literal></expr></argument>, <argument><expr><name pos:line="143" pos:column="49">Range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>
            <return pos:line="146" pos:column="13">return <expr><call><name><name pos:line="146" pos:column="20">str</name><op:operator pos:line="146" pos:column="23">.</op:operator><name pos:line="146" pos:column="24">ToString</name></name><argument_list pos:line="146" pos:column="32">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="149" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="150" pos:column="9">/// Processes the child of the current reader position into a child of this object.</comment>
        <comment type="line" pos:line="151" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="152" pos:column="9">/// &lt;param name="reader"&gt;The XML reader&lt;/param&gt;</comment>
        <function><type><specifier pos:line="153" pos:column="9">protected</specifier> <specifier pos:line="153" pos:column="19">override</specifier> <name pos:line="153" pos:column="28">void</name></type> <name pos:line="153" pos:column="33">ReadXmlChild</name><parameter_list pos:line="153" pos:column="45">(<param><decl><type><name pos:line="153" pos:column="46">XmlReader</name></type> <name pos:line="153" pos:column="56">reader</name></decl></param>)</parameter_list> <block pos:line="153" pos:column="64">{
            <if pos:line="154" pos:column="13">if<condition pos:line="154" pos:column="15">(<expr><name pos:line="154" pos:column="16">XmlAccessibilityName</name> <op:operator pos:line="154" pos:column="37">==</op:operator> <name><name pos:line="154" pos:column="40">reader</name><op:operator pos:line="154" pos:column="46">.</op:operator><name pos:line="154" pos:column="47">Name</name></name></expr>)</condition><then pos:line="154" pos:column="52"> <block pos:line="154" pos:column="53">{
                <expr_stmt><expr><name pos:line="155" pos:column="17">Accessibility</name> <op:operator pos:line="155" pos:column="31">=</op:operator> <call><name><name pos:line="155" pos:column="33">AccessModifierExtensions</name><op:operator pos:line="155" pos:column="57">.</op:operator><name pos:line="155" pos:column="58">FromKeywordString</name></name><argument_list pos:line="155" pos:column="75">(<argument><expr><call><name><name pos:line="155" pos:column="76">reader</name><op:operator pos:line="155" pos:column="82">.</op:operator><name pos:line="155" pos:column="83">ReadElementContentAsString</name></name><argument_list pos:line="155" pos:column="109">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="156" pos:column="15">else <if pos:line="156" pos:column="20">if<condition pos:line="156" pos:column="22">(<expr><name pos:line="156" pos:column="23">XmlNameName</name> <op:operator pos:line="156" pos:column="35">==</op:operator> <name><name pos:line="156" pos:column="38">reader</name><op:operator pos:line="156" pos:column="44">.</op:operator><name pos:line="156" pos:column="45">Name</name></name></expr>)</condition><then pos:line="156" pos:column="50"> <block pos:line="156" pos:column="51">{
                <expr_stmt><expr><name pos:line="157" pos:column="17">Name</name> <op:operator pos:line="157" pos:column="22">=</op:operator> <call><name><name pos:line="157" pos:column="24">reader</name><op:operator pos:line="157" pos:column="30">.</op:operator><name pos:line="157" pos:column="31">ReadElementContentAsString</name></name><argument_list pos:line="157" pos:column="57">()</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="158" pos:column="15">else <if pos:line="158" pos:column="20">if<condition pos:line="158" pos:column="22">(<expr><name pos:line="158" pos:column="23">XmlTypeName</name> <op:operator pos:line="158" pos:column="35">==</op:operator> <name><name pos:line="158" pos:column="38">reader</name><op:operator pos:line="158" pos:column="44">.</op:operator><name pos:line="158" pos:column="45">Name</name></name></expr>)</condition><then pos:line="158" pos:column="50"> <block pos:line="158" pos:column="51">{
                <expr_stmt><expr><name pos:line="159" pos:column="17">VariableType</name> <op:operator pos:line="159" pos:column="30">=</op:operator> <call><name><name pos:line="159" pos:column="32">XmlSerialization</name><op:operator pos:line="159" pos:column="48">.</op:operator><name pos:line="159" pos:column="49">ReadChildExpression</name></name><argument_list pos:line="159" pos:column="68">(<argument><expr><name pos:line="159" pos:column="69">reader</name></expr></argument>)</argument_list></call> <op:operator pos:line="159" pos:column="77">as</op:operator> <name pos:line="159" pos:column="80">TypeUse</name></expr>;</expr_stmt>
            }</block></then> <else pos:line="160" pos:column="15">else <if pos:line="160" pos:column="20">if<condition pos:line="160" pos:column="22">(<expr><name pos:line="160" pos:column="23">XmlInitializerName</name> <op:operator pos:line="160" pos:column="42">==</op:operator> <name><name pos:line="160" pos:column="45">reader</name><op:operator pos:line="160" pos:column="51">.</op:operator><name pos:line="160" pos:column="52">Name</name></name></expr>)</condition><then pos:line="160" pos:column="57"> <block pos:line="160" pos:column="58">{
                <expr_stmt><expr><name pos:line="161" pos:column="17">Initializer</name> <op:operator pos:line="161" pos:column="29">=</op:operator> <call><name><name pos:line="161" pos:column="31">XmlSerialization</name><op:operator pos:line="161" pos:column="47">.</op:operator><name pos:line="161" pos:column="48">ReadChildExpression</name></name><argument_list pos:line="161" pos:column="67">(<argument><expr><name pos:line="161" pos:column="68">reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="162" pos:column="15">else <if pos:line="162" pos:column="20">if<condition pos:line="162" pos:column="22">(<expr><name pos:line="162" pos:column="23">XmlRangeName</name> <op:operator pos:line="162" pos:column="36">==</op:operator> <name><name pos:line="162" pos:column="39">reader</name><op:operator pos:line="162" pos:column="45">.</op:operator><name pos:line="162" pos:column="46">Name</name></name></expr>)</condition><then pos:line="162" pos:column="51"> <block pos:line="162" pos:column="52">{
                <expr_stmt><expr><name pos:line="163" pos:column="17">Range</name> <op:operator pos:line="163" pos:column="23">=</op:operator> <call><name><name pos:line="163" pos:column="25">XmlSerialization</name><op:operator pos:line="163" pos:column="41">.</op:operator><name pos:line="163" pos:column="42">ReadChildExpression</name></name><argument_list pos:line="163" pos:column="61">(<argument><expr><name pos:line="163" pos:column="62">reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="164" pos:column="15">else <block pos:line="164" pos:column="20">{
                <expr_stmt><expr><call><name><name pos:line="165" pos:column="17">base</name><op:operator pos:line="165" pos:column="21">.</op:operator><name pos:line="165" pos:column="22">ReadXmlChild</name></name><argument_list pos:line="165" pos:column="34">(<argument><expr><name pos:line="165" pos:column="35">reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if></else></if></else></if></else></if></else></if>
        }</block></function>

        <comment type="line" pos:line="169" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="170" pos:column="9">/// Writes the contents of this object to &lt;paramref name="writer"/&gt;.</comment>
        <comment type="line" pos:line="171" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="172" pos:column="9">/// &lt;param name="writer"&gt;The XML writer to write to&lt;/param&gt;</comment>
        <function><type><specifier pos:line="173" pos:column="9">protected</specifier> <specifier pos:line="173" pos:column="19">override</specifier> <name pos:line="173" pos:column="28">void</name></type> <name pos:line="173" pos:column="33">WriteXmlContents</name><parameter_list pos:line="173" pos:column="49">(<param><decl><type><name pos:line="173" pos:column="50">XmlWriter</name></type> <name pos:line="173" pos:column="60">writer</name></decl></param>)</parameter_list> <block pos:line="173" pos:column="68">{
            <if pos:line="174" pos:column="13">if<condition pos:line="174" pos:column="15">(<expr><name><name pos:line="174" pos:column="16">AccessModifier</name><op:operator pos:line="174" pos:column="30">.</op:operator><name pos:line="174" pos:column="31">None</name></name> <op:operator pos:line="174" pos:column="36">!=</op:operator> <name pos:line="174" pos:column="39">Accessibility</name></expr>)</condition><then pos:line="174" pos:column="53"> <block pos:line="174" pos:column="54">{
                <expr_stmt><expr><call><name><name pos:line="175" pos:column="17">writer</name><op:operator pos:line="175" pos:column="23">.</op:operator><name pos:line="175" pos:column="24">WriteElementString</name></name><argument_list pos:line="175" pos:column="42">(<argument><expr><name pos:line="175" pos:column="43">XmlAccessibilityName</name></expr></argument>, <argument><expr><call><name><name pos:line="175" pos:column="65">Accessibility</name><op:operator pos:line="175" pos:column="78">.</op:operator><name pos:line="175" pos:column="79">ToKeywordString</name></name><argument_list pos:line="175" pos:column="94">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            
            <if pos:line="178" pos:column="13">if<condition pos:line="178" pos:column="15">(<expr><name pos:line="178" pos:column="16">null</name> <op:operator pos:line="178" pos:column="21">!=</op:operator> <name pos:line="178" pos:column="24">VariableType</name></expr>)</condition><then pos:line="178" pos:column="37"> <block pos:line="178" pos:column="38">{
                <expr_stmt><expr><call><name><name pos:line="179" pos:column="17">XmlSerialization</name><op:operator pos:line="179" pos:column="33">.</op:operator><name pos:line="179" pos:column="34">WriteElement</name></name><argument_list pos:line="179" pos:column="46">(<argument><expr><name pos:line="179" pos:column="47">writer</name></expr></argument>, <argument><expr><name pos:line="179" pos:column="55">VariableType</name></expr></argument>, <argument><expr><name pos:line="179" pos:column="69">XmlTypeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            
            <expr_stmt><expr><call><name><name pos:line="182" pos:column="13">writer</name><op:operator pos:line="182" pos:column="19">.</op:operator><name pos:line="182" pos:column="20">WriteElementString</name></name><argument_list pos:line="182" pos:column="38">(<argument><expr><name pos:line="182" pos:column="39">XmlNameName</name></expr></argument>, <argument><expr><name pos:line="182" pos:column="52">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if pos:line="184" pos:column="13">if<condition pos:line="184" pos:column="15">(<expr><name pos:line="184" pos:column="16">null</name> <op:operator pos:line="184" pos:column="21">!=</op:operator> <name pos:line="184" pos:column="24">Initializer</name></expr>)</condition><then pos:line="184" pos:column="36"> <block pos:line="184" pos:column="37">{
                <expr_stmt><expr><call><name><name pos:line="185" pos:column="17">XmlSerialization</name><op:operator pos:line="185" pos:column="33">.</op:operator><name pos:line="185" pos:column="34">WriteElement</name></name><argument_list pos:line="185" pos:column="46">(<argument><expr><name pos:line="185" pos:column="47">writer</name></expr></argument>, <argument><expr><name pos:line="185" pos:column="55">Initializer</name></expr></argument>, <argument><expr><name pos:line="185" pos:column="68">XmlInitializerName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if pos:line="188" pos:column="13">if<condition pos:line="188" pos:column="15">(<expr><name pos:line="188" pos:column="16">null</name> <op:operator pos:line="188" pos:column="21">!=</op:operator> <name pos:line="188" pos:column="24">Range</name></expr>)</condition><then pos:line="188" pos:column="30"> <block pos:line="188" pos:column="31">{
                <expr_stmt><expr><call><name><name pos:line="189" pos:column="17">XmlSerialization</name><op:operator pos:line="189" pos:column="33">.</op:operator><name pos:line="189" pos:column="34">WriteElement</name></name><argument_list pos:line="189" pos:column="46">(<argument><expr><name pos:line="189" pos:column="47">writer</name></expr></argument>, <argument><expr><name pos:line="189" pos:column="55">Range</name></expr></argument>, <argument><expr><name pos:line="189" pos:column="62">XmlRangeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name><name pos:line="192" pos:column="13">base</name><op:operator pos:line="192" pos:column="17">.</op:operator><name pos:line="192" pos:column="18">WriteXmlContents</name></name><argument_list pos:line="192" pos:column="34">(<argument><expr><name pos:line="192" pos:column="35">writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="195" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="196" pos:column="9">/// Determines the type of this variable.</comment>
        <comment type="line" pos:line="197" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="198" pos:column="9">/// &lt;returns&gt;An enumerable of the matching TypeDefinitions for this variable's type.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="199" pos:column="9">public</specifier> <specifier pos:line="199" pos:column="16">override</specifier> <name><name pos:line="199" pos:column="25">IEnumerable</name><argument_list pos:line="199" pos:column="36">&lt;<argument><name pos:line="199" pos:column="37">TypeDefinition</name></argument>&gt;</argument_list></name></type> <name pos:line="199" pos:column="53">ResolveType</name><parameter_list pos:line="199" pos:column="64">()</parameter_list> <block pos:line="199" pos:column="67">{
            <return pos:line="200" pos:column="13">return <expr><name pos:line="200" pos:column="20">VariableType</name> <op:operator pos:line="200" pos:column="33">!=</op:operator> <name pos:line="200" pos:column="36">null</name> <op:operator pos:line="200" pos:column="41">?</op:operator> <call><name><name pos:line="200" pos:column="43">VariableType</name><op:operator pos:line="200" pos:column="55">.</op:operator><name pos:line="200" pos:column="56">ResolveType</name></name><argument_list pos:line="200" pos:column="67">()</argument_list></call> <op:operator pos:line="200" pos:column="70">:</op:operator> <call><name><name pos:line="200" pos:column="72">Enumerable</name><op:operator pos:line="200" pos:column="82">.</op:operator><name><name pos:line="200" pos:column="83">Empty</name><argument_list pos:line="200" pos:column="88">&lt;<argument><name pos:line="200" pos:column="89">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="200" pos:column="104">()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
