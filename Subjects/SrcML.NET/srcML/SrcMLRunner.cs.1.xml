<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML\SrcMLRunner.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2010 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">System</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Collections</name><op:operator pos:line="13" pos:column="25">.</op:operator><name pos:line="13" pos:column="26">Generic</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">IO</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Linq</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Text</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">ABB</name><op:operator pos:line="17" pos:column="10">.</op:operator><name pos:line="17" pos:column="11">SrcML</name><op:operator pos:line="17" pos:column="16">.</op:operator><name pos:line="17" pos:column="17">Utilities</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Collections</name><op:operator pos:line="18" pos:column="25">.</op:operator><name pos:line="18" pos:column="26">ObjectModel</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">System</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">Globalization</name></name>;</using>
<using pos:line="20" pos:column="1">using <name><name pos:line="20" pos:column="7">System</name><op:operator pos:line="20" pos:column="13">.</op:operator><name pos:line="20" pos:column="14">Collections</name></name>;</using>

<namespace pos:line="22" pos:column="1">namespace <name><name pos:line="22" pos:column="11">ABB</name><op:operator pos:line="22" pos:column="14">.</op:operator><name pos:line="22" pos:column="15">SrcML</name></name>
<block pos:line="23" pos:column="1">{
    <comment type="line" pos:line="24" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="25" pos:column="5">/// Abstract class for controlling srcml executables (src2srcml, srcml2src, and srcdiff).</comment>
    <comment type="line" pos:line="26" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="27" pos:column="5">public</specifier> class <name pos:line="27" pos:column="18">SrcMLRunner</name> <super pos:line="27" pos:column="30">: <name pos:line="27" pos:column="32">ExecutableRunner</name></super>
    <block pos:line="28" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="29" pos:column="9">private</specifier> <specifier pos:line="29" pos:column="17">readonly</specifier> <name><name pos:line="29" pos:column="26">DefaultsDictionary</name><argument_list pos:line="29" pos:column="44">&lt;<argument><name pos:line="29" pos:column="45">string</name></argument>, <argument><name pos:line="29" pos:column="53">Language</name></argument>&gt;</argument_list></name></type> <name pos:line="29" pos:column="63">_extensionMapping</name> <init pos:line="29" pos:column="81">= <expr><op:operator pos:line="29" pos:column="83">new</op:operator> <call><name><name pos:line="29" pos:column="87">DefaultsDictionary</name><argument_list pos:line="29" pos:column="105">&lt;<argument><name pos:line="29" pos:column="106">string</name></argument>, <argument><name pos:line="29" pos:column="114">Language</name></argument>&gt;</argument_list></name><argument_list pos:line="29" pos:column="123">(<argument><expr><op:operator pos:line="29" pos:column="124">new</op:operator> <call><name><name pos:line="29" pos:column="128">Dictionary</name><argument_list pos:line="29" pos:column="138">&lt;<argument><name pos:line="29" pos:column="139">string</name></argument>, <argument><name pos:line="29" pos:column="147">Language</name></argument>&gt;</argument_list></name><argument_list pos:line="29" pos:column="156">(<argument><expr><name><name pos:line="29" pos:column="157">StringComparer</name><op:operator pos:line="29" pos:column="171">.</op:operator><name pos:line="29" pos:column="172">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call> <block pos:line="29" pos:column="191">{
                    <expr><block pos:line="30" pos:column="21">{ <expr><lit:literal type="string" pos:line="30" pos:column="23">".c"</lit:literal></expr> , <expr><name><name pos:line="30" pos:column="30">Language</name><op:operator pos:line="30" pos:column="38">.</op:operator><name pos:line="30" pos:column="39">C</name></name></expr> }</block></expr>,
                    <expr><block pos:line="31" pos:column="21">{ <expr><lit:literal type="string" pos:line="31" pos:column="23">".h"</lit:literal></expr>, <expr><name><name pos:line="31" pos:column="29">Language</name><op:operator pos:line="31" pos:column="37">.</op:operator><name pos:line="31" pos:column="38">C</name></name></expr> }</block></expr>,
                    <expr><block pos:line="32" pos:column="21">{ <expr><lit:literal type="string" pos:line="32" pos:column="23">".cpp"</lit:literal></expr>, <expr><name><name pos:line="32" pos:column="31">Language</name><op:operator pos:line="32" pos:column="39">.</op:operator><name pos:line="32" pos:column="40">CPlusPlus</name></name></expr> }</block></expr>,
                    <expr><block pos:line="33" pos:column="21">{ <expr><lit:literal type="string" pos:line="33" pos:column="23">".java"</lit:literal></expr>, <expr><name><name pos:line="33" pos:column="32">Language</name><op:operator pos:line="33" pos:column="40">.</op:operator><name pos:line="33" pos:column="41">Java</name></name></expr> }</block></expr>
        }</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="36" pos:column="9">private</specifier> <name><name pos:line="36" pos:column="17">Collection</name><argument_list pos:line="36" pos:column="27">&lt;<argument><name pos:line="36" pos:column="28">string</name></argument>&gt;</argument_list></name></type> <name pos:line="36" pos:column="36">_namespaceArguments</name></decl>;</decl_stmt>
        <comment type="line" pos:line="37" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="38" pos:column="9">/// Mapping of source extensions to their languages.</comment>
        <comment type="line" pos:line="39" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="40" pos:column="9">public</specifier> <name><name pos:line="40" pos:column="16">DefaultsDictionary</name><argument_list pos:line="40" pos:column="34">&lt;<argument><name pos:line="40" pos:column="35">string</name></argument>, <argument><name pos:line="40" pos:column="43">Language</name></argument>&gt;</argument_list></name></type> <name pos:line="40" pos:column="53">ExtensionMapping</name>
        <block pos:line="41" pos:column="9">{
            <function><name pos:line="42" pos:column="13">get</name>
            <block pos:line="43" pos:column="13">{
                <return pos:line="44" pos:column="17">return <expr><name pos:line="44" pos:column="24">_extensionMapping</name></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="48" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="49" pos:column="9">/// Gets or sets a value indicating whether to treat headers (.h files) as C plus plus].</comment>
        <comment type="line" pos:line="50" pos:column="9">/// If this property is set to &lt;c&gt;false&lt;/c&gt;, headers will be treated as C regardless of the language assigned to it</comment>
        <comment type="line" pos:line="51" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="52" pos:column="9">/// &lt;value&gt;</comment>
        <comment type="line" pos:line="53" pos:column="9">/// 	&lt;c&gt;true&lt;/c&gt; if [treat headers as C plus plus]; otherwise, &lt;c&gt;false&lt;/c&gt;.</comment>
        <comment type="line" pos:line="54" pos:column="9">/// &lt;/value&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="55" pos:column="9">public</specifier> <name pos:line="55" pos:column="16">bool</name></type> <name pos:line="55" pos:column="21">TreatHeadersAsCPlusPlus</name>
        <block pos:line="56" pos:column="9">{
            <function><name pos:line="57" pos:column="13">get</name>
            <block pos:line="58" pos:column="13">{
                <return pos:line="59" pos:column="17">return <expr><name><name pos:line="59" pos:column="24">ExtensionMapping</name><index pos:line="59" pos:column="40">[<expr><lit:literal type="string" pos:line="59" pos:column="41">".h"</lit:literal></expr>]</index></name> <op:operator pos:line="59" pos:column="47">==</op:operator> <name><name pos:line="59" pos:column="50">Language</name><op:operator pos:line="59" pos:column="58">.</op:operator><name pos:line="59" pos:column="59">CPlusPlus</name></name></expr>;</return>
            }</block></function>

            <function><name pos:line="62" pos:column="13">set</name>
            <block pos:line="63" pos:column="13">{
                <if pos:line="64" pos:column="17">if <condition pos:line="64" pos:column="20">(<expr><name pos:line="64" pos:column="21">value</name></expr>)</condition><then pos:line="64" pos:column="27">
                    <expr_stmt><expr><name><name pos:line="65" pos:column="21">ExtensionMapping</name><index pos:line="65" pos:column="37">[<expr><lit:literal type="string" pos:line="65" pos:column="38">".h"</lit:literal></expr>]</index></name> <op:operator pos:line="65" pos:column="44">=</op:operator> <name><name pos:line="65" pos:column="46">Language</name><op:operator pos:line="65" pos:column="54">.</op:operator><name pos:line="65" pos:column="55">CPlusPlus</name></name></expr>;</expr_stmt></then>
                <else pos:line="66" pos:column="17">else
                    <expr_stmt><expr><name><name pos:line="67" pos:column="21">ExtensionMapping</name><index pos:line="67" pos:column="37">[<expr><lit:literal type="string" pos:line="67" pos:column="38">".h"</lit:literal></expr>]</index></name> <op:operator pos:line="67" pos:column="44">=</op:operator> <name><name pos:line="67" pos:column="46">Language</name><op:operator pos:line="67" pos:column="54">.</op:operator><name pos:line="67" pos:column="55">C</name></name></expr>;</expr_stmt></else></if>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="71" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="72" pos:column="9">/// Gets or sets the list of common namespace arguments</comment>
        <comment type="line" pos:line="73" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="74" pos:column="9">/// &lt;value&gt;</comment>
        <comment type="line" pos:line="75" pos:column="9">/// The namespace arguments.</comment>
        <comment type="line" pos:line="76" pos:column="9">/// &lt;/value&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="77" pos:column="9">public</specifier> <name><name pos:line="77" pos:column="16">Collection</name><argument_list pos:line="77" pos:column="26">&lt;<argument><name pos:line="77" pos:column="27">string</name></argument>&gt;</argument_list></name></type> <name pos:line="77" pos:column="35">NamespaceArguments</name>
        <block pos:line="78" pos:column="9">{
            <function><name pos:line="79" pos:column="13">get</name>
            <block pos:line="80" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="81" pos:column="17">var</name></type> <name pos:line="81" pos:column="21">arguments</name> <init pos:line="81" pos:column="31">= <expr><linq><from pos:line="81" pos:column="33">from <expr><name pos:line="81" pos:column="38">arg</name></expr> <in pos:line="81" pos:column="42">in <expr><name><name pos:line="81" pos:column="45">this</name><op:operator pos:line="81" pos:column="49">.</op:operator><name pos:line="81" pos:column="50">_namespaceArguments</name></name></expr></in></from>
                                <select pos:line="82" pos:column="33">select <expr><name pos:line="82" pos:column="40">arg</name></expr></select></linq></expr></init></decl>;</decl_stmt>

                <return pos:line="84" pos:column="17">return <expr><op:operator pos:line="84" pos:column="24">new</op:operator> <call><name><name pos:line="84" pos:column="28">Collection</name><argument_list pos:line="84" pos:column="38">&lt;<argument><name pos:line="84" pos:column="39">string</name></argument>&gt;</argument_list></name><argument_list pos:line="84" pos:column="46">(<argument><expr><call><name><name pos:line="84" pos:column="47">arguments</name><op:operator pos:line="84" pos:column="56">.</op:operator><name pos:line="84" pos:column="57">ToList</name></name><argument_list pos:line="84" pos:column="63">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
            <function><specifier pos:line="86" pos:column="13">private</specifier> <name pos:line="86" pos:column="21">set</name>
            <block pos:line="87" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="88" pos:column="17">this</name><op:operator pos:line="88" pos:column="21">.</op:operator><name pos:line="88" pos:column="22">_namespaceArguments</name></name> <op:operator pos:line="88" pos:column="42">=</op:operator> <name pos:line="88" pos:column="44">value</name></expr>;</expr_stmt>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="92" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="93" pos:column="9">/// Initializes a new instance of the &lt;see cref="SrcMLRunner"/&gt; class.</comment>
        <comment type="line" pos:line="94" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="95" pos:column="9">/// &lt;param name="applicationDirectory"&gt;The application directory.&lt;/param&gt;</comment>
        <comment type="line" pos:line="96" pos:column="9">/// &lt;param name="executableName"&gt;Name of the executable.&lt;/param&gt;</comment>
        <comment type="line" pos:line="97" pos:column="9">/// &lt;param name="namespaceArguments"&gt;The namespace arguments.&lt;/param&gt;</comment>
        <constructor><specifier pos:line="98" pos:column="9">public</specifier> <name pos:line="98" pos:column="16">SrcMLRunner</name><parameter_list pos:line="98" pos:column="27">(<param><decl><type><name pos:line="98" pos:column="28">string</name></type> <name pos:line="98" pos:column="35">applicationDirectory</name></decl></param>, <param><decl><type><name pos:line="98" pos:column="57">string</name></type> <name pos:line="98" pos:column="64">executableName</name></decl></param>, <param><decl><type><name><name pos:line="98" pos:column="80">IEnumerable</name><argument_list pos:line="98" pos:column="91">&lt;<argument><name pos:line="98" pos:column="92">string</name></argument>&gt;</argument_list></name></type> <name pos:line="98" pos:column="100">namespaceArguments</name></decl></param>)</parameter_list>
            <member_list pos:line="99" pos:column="13">: <call><name pos:line="99" pos:column="15">base</name><argument_list pos:line="99" pos:column="19">(<argument><expr><name pos:line="99" pos:column="20">applicationDirectory</name></expr></argument>, <argument><expr><name pos:line="99" pos:column="42">executableName</name></expr></argument>)</argument_list></call> </member_list><block pos:line="99" pos:column="58">{
            <expr_stmt><expr><name><name pos:line="100" pos:column="13">this</name><op:operator pos:line="100" pos:column="17">.</op:operator><name pos:line="100" pos:column="18">NamespaceArguments</name></name> <op:operator pos:line="100" pos:column="37">=</op:operator> <op:operator pos:line="100" pos:column="39">new</op:operator> <call><name><name pos:line="100" pos:column="43">Collection</name><argument_list pos:line="100" pos:column="53">&lt;<argument><name pos:line="100" pos:column="54">string</name></argument>&gt;</argument_list></name><argument_list pos:line="100" pos:column="61">(<argument><expr><call><name><name pos:line="100" pos:column="62">namespaceArguments</name><op:operator pos:line="100" pos:column="80">.</op:operator><name pos:line="100" pos:column="81">ToList</name></name><argument_list pos:line="100" pos:column="87">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="103" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="104" pos:column="9">/// Initializes a new instance of the &lt;see cref="SrcMLRunner"/&gt; class.</comment>
        <comment type="line" pos:line="105" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="106" pos:column="9">/// &lt;param name="applicationDirectory"&gt;The application directory.&lt;/param&gt;</comment>
        <comment type="line" pos:line="107" pos:column="9">/// &lt;param name="executableName"&gt;Name of the executable.&lt;/param&gt;</comment>
        <constructor><specifier pos:line="108" pos:column="9">public</specifier> <name pos:line="108" pos:column="16">SrcMLRunner</name><parameter_list pos:line="108" pos:column="27">(<param><decl><type><name pos:line="108" pos:column="28">string</name></type> <name pos:line="108" pos:column="35">applicationDirectory</name></decl></param>, <param><decl><type><name pos:line="108" pos:column="57">string</name></type> <name pos:line="108" pos:column="64">executableName</name></decl></param>)</parameter_list>
            <member_list pos:line="109" pos:column="13">: <call><name pos:line="109" pos:column="15">this</name><argument_list pos:line="109" pos:column="19">(<argument><expr><name pos:line="109" pos:column="20">applicationDirectory</name></expr></argument>, <argument><expr><name pos:line="109" pos:column="42">executableName</name></expr></argument>, <argument><expr><op:operator pos:line="109" pos:column="58">new</op:operator><index pos:line="109" pos:column="61">[]</index> <block pos:line="109" pos:column="64">{ <expr><name><name pos:line="109" pos:column="66">LIT</name><op:operator pos:line="109" pos:column="69">.</op:operator><name pos:line="109" pos:column="70">ArgumentLabel</name></name></expr><op:operator pos:line="109" pos:column="83">,</op:operator> <expr><name><name pos:line="109" pos:column="85">OP</name><op:operator pos:line="109" pos:column="87">.</op:operator><name pos:line="109" pos:column="88">ArgumentLabel</name></name></expr><op:operator pos:line="109" pos:column="101">,</op:operator> <expr><name><name pos:line="109" pos:column="103">TYPE</name><op:operator pos:line="109" pos:column="107">.</op:operator><name pos:line="109" pos:column="108">ArgumentLabel</name></name></expr> }</block></expr></argument>)</argument_list></call>
        </member_list><block pos:line="110" pos:column="9">{

        }</block></constructor>

        <comment type="line" pos:line="114" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="115" pos:column="9">/// Runs this executable and places the output in the specified output file.</comment>
        <comment type="line" pos:line="116" pos:column="9">/// This executable is run with the following string &lt;c&gt;[this.ExecutablePath] --register-ext [ExtensionMapping] --output=[outputfile] [addititionlArguments]&lt;/c&gt;</comment>
        <comment type="line" pos:line="117" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="118" pos:column="9">/// &lt;param name="outputFile"&gt;The output file.&lt;/param&gt;</comment>
        <comment type="line" pos:line="119" pos:column="9">/// &lt;param name="additionalArguments"&gt;The additional arguments.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="120" pos:column="9">public</specifier> <name pos:line="120" pos:column="16">void</name></type> <name pos:line="120" pos:column="21">Run</name><parameter_list pos:line="120" pos:column="24">(<param><decl><type><name pos:line="120" pos:column="25">string</name></type> <name pos:line="120" pos:column="32">outputFile</name></decl></param>, <param><decl><type><name><name pos:line="120" pos:column="44">Collection</name><argument_list pos:line="120" pos:column="54">&lt;<argument><name pos:line="120" pos:column="55">string</name></argument>&gt;</argument_list></name></type> <name pos:line="120" pos:column="63">additionalArguments</name></decl></param>)</parameter_list>
        <block pos:line="121" pos:column="9">{
            <if pos:line="122" pos:column="13">if <condition pos:line="122" pos:column="16">(<expr><name pos:line="122" pos:column="17">null</name> <op:operator pos:line="122" pos:column="22">==</op:operator> <name pos:line="122" pos:column="25">additionalArguments</name></expr>)</condition><then pos:line="122" pos:column="45">
                <throw pos:line="123" pos:column="17">throw <expr><op:operator pos:line="123" pos:column="23">new</op:operator> <call><name pos:line="123" pos:column="27">ArgumentNullException</name><argument_list pos:line="123" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="123" pos:column="49">"additionalArguments"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="125" pos:column="13">var</name></type> <name pos:line="125" pos:column="17">arguments</name> <init pos:line="125" pos:column="27">= <expr><op:operator pos:line="125" pos:column="29">new</op:operator> <call><name><name pos:line="125" pos:column="33">Collection</name><argument_list pos:line="125" pos:column="43">&lt;<argument><name pos:line="125" pos:column="44">string</name></argument>&gt;</argument_list></name><argument_list pos:line="125" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="126" pos:column="13">foreach (<init><decl><type><name pos:line="126" pos:column="22">var</name></type> <name pos:line="126" pos:column="26">argument</name> <range pos:line="126" pos:column="35">in <expr><name><name pos:line="126" pos:column="38">this</name><op:operator pos:line="126" pos:column="42">.</op:operator><name pos:line="126" pos:column="43">NamespaceArguments</name></name></expr></range></decl></init>)
                <expr_stmt><expr><call><name><name pos:line="127" pos:column="17">arguments</name><op:operator pos:line="127" pos:column="26">.</op:operator><name pos:line="127" pos:column="27">Add</name></name><argument_list pos:line="127" pos:column="30">(<argument><expr><name pos:line="127" pos:column="31">argument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></foreach>

            <if pos:line="129" pos:column="13">if <condition pos:line="129" pos:column="16">(<expr><name><name pos:line="129" pos:column="17">ExtensionMapping</name><op:operator pos:line="129" pos:column="33">.</op:operator><name pos:line="129" pos:column="34">NonDefaultValueCount</name></name> <op:operator pos:line="129" pos:column="55">&gt;</op:operator> <lit:literal type="number" pos:line="129" pos:column="57">0</lit:literal></expr>)</condition><then pos:line="129" pos:column="59">
            <block pos:line="130" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="131" pos:column="17">arguments</name><op:operator pos:line="131" pos:column="26">.</op:operator><name pos:line="131" pos:column="27">Add</name></name><argument_list pos:line="131" pos:column="30">(<argument><expr><call><name><name pos:line="131" pos:column="31">String</name><op:operator pos:line="131" pos:column="37">.</op:operator><name pos:line="131" pos:column="38">Format</name></name><argument_list pos:line="131" pos:column="44">(<argument><expr><name><name pos:line="131" pos:column="45">CultureInfo</name><op:operator pos:line="131" pos:column="56">.</op:operator><name pos:line="131" pos:column="57">InvariantCulture</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="131" pos:column="75">"--register-ext {0}"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="131" pos:column="97">KsuAdapter</name><op:operator pos:line="131" pos:column="107">.</op:operator><name pos:line="131" pos:column="108">ConvertMappingToString</name></name><argument_list pos:line="131" pos:column="130">(<argument><expr><name pos:line="131" pos:column="131">ExtensionMapping</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name><name pos:line="134" pos:column="13">arguments</name><op:operator pos:line="134" pos:column="22">.</op:operator><name pos:line="134" pos:column="23">Add</name></name><argument_list pos:line="134" pos:column="26">(<argument><expr><call><name><name pos:line="134" pos:column="27">String</name><op:operator pos:line="134" pos:column="33">.</op:operator><name pos:line="134" pos:column="34">Format</name></name><argument_list pos:line="134" pos:column="40">(<argument><expr><name><name pos:line="134" pos:column="41">CultureInfo</name><op:operator pos:line="134" pos:column="52">.</op:operator><name pos:line="134" pos:column="53">InvariantCulture</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="134" pos:column="71">"--output=\"{0}\""</lit:literal></expr></argument>, <argument><expr><name pos:line="134" pos:column="91">outputFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <foreach pos:line="136" pos:column="13">foreach(<init><decl><type><name pos:line="136" pos:column="21">var</name></type> <name pos:line="136" pos:column="25">arg</name> <range pos:line="136" pos:column="29">in <expr><name pos:line="136" pos:column="32">additionalArguments</name></expr></range></decl></init>)
                <expr_stmt><expr><call><name><name pos:line="137" pos:column="17">arguments</name><op:operator pos:line="137" pos:column="26">.</op:operator><name pos:line="137" pos:column="27">Add</name></name><argument_list pos:line="137" pos:column="30">(<argument><expr><name pos:line="137" pos:column="31">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></foreach>

            <try pos:line="139" pos:column="13">try
            <block pos:line="140" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="141" pos:column="17">base</name><op:operator pos:line="141" pos:column="21">.</op:operator><name pos:line="141" pos:column="22">Run</name></name><argument_list pos:line="141" pos:column="25">(<argument><expr><name pos:line="141" pos:column="26">arguments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch pos:line="143" pos:column="13">catch <parameter_list pos:line="143" pos:column="19">(<param><decl><type><name pos:line="143" pos:column="20">SrcMLRuntimeException</name></type> <name pos:line="143" pos:column="42">e</name></decl></param>)</parameter_list>
            <block pos:line="144" pos:column="13">{
                <throw pos:line="145" pos:column="17">throw <expr><op:operator pos:line="145" pos:column="23">new</op:operator> <call><name pos:line="145" pos:column="27">SrcMLException</name><argument_list pos:line="145" pos:column="41">(<argument><expr><call><name><name pos:line="145" pos:column="42">String</name><op:operator pos:line="145" pos:column="48">.</op:operator><name pos:line="145" pos:column="49">Format</name></name><argument_list pos:line="145" pos:column="55">(<argument><expr><name><name pos:line="145" pos:column="56">CultureInfo</name><op:operator pos:line="145" pos:column="67">.</op:operator><name pos:line="145" pos:column="68">CurrentCulture</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="145" pos:column="84">"{0} encountered an error: {1}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="145" pos:column="117">this</name><op:operator pos:line="145" pos:column="121">.</op:operator><name pos:line="145" pos:column="122">ExecutablePath</name></name></expr></argument>, <argument><expr><name><name pos:line="145" pos:column="138">e</name><op:operator pos:line="145" pos:column="139">.</op:operator><name pos:line="145" pos:column="140">Message</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="145" pos:column="150">e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></function>

        <comment type="line" pos:line="149" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="150" pos:column="9">/// Runs this executable and places the output in the specified output file. The inputs are written to a temporary file that is deleted when finished.</comment>
        <comment type="line" pos:line="151" pos:column="9">/// This executable is run with the following string &lt;c&gt;[this.ExecutablePath] --register-ext [ExtensionMapping] --output=[outputfile] --files-from=[input file] [addititionlArguments]&lt;/c&gt;</comment>
        <comment type="line" pos:line="152" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="153" pos:column="9">/// &lt;param name="outputFile"&gt;The output file.&lt;/param&gt;</comment>
        <comment type="line" pos:line="154" pos:column="9">/// &lt;param name="additionalArguments"&gt;The additional arguments.&lt;/param&gt;</comment>
        <comment type="line" pos:line="155" pos:column="9">/// &lt;param name="inputs"&gt;The inputs.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="156" pos:column="9">public</specifier> <name pos:line="156" pos:column="16">void</name></type> <name pos:line="156" pos:column="21">Run</name><parameter_list pos:line="156" pos:column="24">(<param><decl><type><name pos:line="156" pos:column="25">string</name></type> <name pos:line="156" pos:column="32">outputFile</name></decl></param>, <param><decl><type><name><name pos:line="156" pos:column="44">Collection</name><argument_list pos:line="156" pos:column="54">&lt;<argument><name pos:line="156" pos:column="55">string</name></argument>&gt;</argument_list></name></type> <name pos:line="156" pos:column="63">additionalArguments</name></decl></param>, <param><decl><type><name><name pos:line="156" pos:column="84">Collection</name><argument_list pos:line="156" pos:column="94">&lt;<argument><name pos:line="156" pos:column="95">string</name></argument>&gt;</argument_list></name></type> <name pos:line="156" pos:column="103">inputs</name></decl></param>)</parameter_list>
        <block pos:line="157" pos:column="9">{
            <if pos:line="158" pos:column="13">if <condition pos:line="158" pos:column="16">(<expr><name pos:line="158" pos:column="17">null</name> <op:operator pos:line="158" pos:column="22">==</op:operator> <name pos:line="158" pos:column="25">inputs</name></expr>)</condition><then pos:line="158" pos:column="32">
                <throw pos:line="159" pos:column="17">throw <expr><op:operator pos:line="159" pos:column="23">new</op:operator> <call><name pos:line="159" pos:column="27">ArgumentNullException</name><argument_list pos:line="159" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="159" pos:column="49">"inputs"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="161" pos:column="13">var</name></type> <name pos:line="161" pos:column="17">arguments</name> <init pos:line="161" pos:column="27">= <expr><op:operator pos:line="161" pos:column="29">new</op:operator> <call><name><name pos:line="161" pos:column="33">Collection</name><argument_list pos:line="161" pos:column="43">&lt;<argument><name pos:line="161" pos:column="44">string</name></argument>&gt;</argument_list></name><argument_list pos:line="161" pos:column="51">(<argument><expr><name pos:line="161" pos:column="52">additionalArguments</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="163" pos:column="13">var</name></type> <name pos:line="163" pos:column="17">tempFileListing</name> <init pos:line="163" pos:column="33">= <expr><call><name><name pos:line="163" pos:column="35">Path</name><op:operator pos:line="163" pos:column="39">.</op:operator><name pos:line="163" pos:column="40">GetTempFileName</name></name><argument_list pos:line="163" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <using pos:line="164" pos:column="13">using (<decl><type><name pos:line="164" pos:column="20">StreamWriter</name></type> <name pos:line="164" pos:column="33">writer</name> <init pos:line="164" pos:column="40">= <expr><op:operator pos:line="164" pos:column="42">new</op:operator> <call><name pos:line="164" pos:column="46">StreamWriter</name><argument_list pos:line="164" pos:column="58">(<argument><expr><name pos:line="164" pos:column="59">tempFileListing</name></expr></argument>)</argument_list></call></expr></init></decl>)
            <block pos:line="165" pos:column="13">{
                <foreach pos:line="166" pos:column="17">foreach (<init><decl><type><name pos:line="166" pos:column="26">var</name></type> <name pos:line="166" pos:column="30">input</name> <range pos:line="166" pos:column="36">in <expr><name pos:line="166" pos:column="39">inputs</name></expr></range></decl></init>)
                <block pos:line="167" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="168" pos:column="21">writer</name><op:operator pos:line="168" pos:column="27">.</op:operator><name pos:line="168" pos:column="28">WriteLine</name></name><argument_list pos:line="168" pos:column="37">(<argument><expr><name pos:line="168" pos:column="38">input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
            }</block></using>
            <expr_stmt><expr><call><name><name pos:line="171" pos:column="13">arguments</name><op:operator pos:line="171" pos:column="22">.</op:operator><name pos:line="171" pos:column="23">Insert</name></name><argument_list pos:line="171" pos:column="29">(<argument><expr><lit:literal type="number" pos:line="171" pos:column="30">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="171" pos:column="33">String</name><op:operator pos:line="171" pos:column="39">.</op:operator><name pos:line="171" pos:column="40">Format</name></name><argument_list pos:line="171" pos:column="46">(<argument><expr><name><name pos:line="171" pos:column="47">CultureInfo</name><op:operator pos:line="171" pos:column="58">.</op:operator><name pos:line="171" pos:column="59">InvariantCulture</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="171" pos:column="77">"--files-from=\"{0}\""</lit:literal></expr></argument>, <argument><expr><name pos:line="171" pos:column="101">tempFileListing</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <try pos:line="173" pos:column="13">try
            <block pos:line="174" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="175" pos:column="17">this</name><op:operator pos:line="175" pos:column="21">.</op:operator><name pos:line="175" pos:column="22">Run</name></name><argument_list pos:line="175" pos:column="25">(<argument><expr><name pos:line="175" pos:column="26">outputFile</name></expr></argument>, <argument><expr><name pos:line="175" pos:column="38">arguments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch pos:line="177" pos:column="13">catch <parameter_list pos:line="177" pos:column="19">(<param><decl><type><name pos:line="177" pos:column="20">SrcMLException</name></type></decl></param>)</parameter_list>
            <block pos:line="178" pos:column="13">{
                <throw pos:line="179" pos:column="17">throw;</throw>
            }</block></catch>
            <finally pos:line="181" pos:column="13">finally
            <block pos:line="182" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="183" pos:column="17">File</name><op:operator pos:line="183" pos:column="21">.</op:operator><name pos:line="183" pos:column="22">Delete</name></name><argument_list pos:line="183" pos:column="28">(<argument><expr><name pos:line="183" pos:column="29">tempFileListing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
