<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML\SrcMLFile.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2010 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">System</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Collections</name><op:operator pos:line="13" pos:column="25">.</op:operator><name pos:line="13" pos:column="26">Generic</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Collections</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">ObjectModel</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">IO</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Linq</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Text</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Xml</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">System</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">Xml</name><op:operator pos:line="19" pos:column="17">.</op:operator><name pos:line="19" pos:column="18">Linq</name></name>;</using>

<namespace pos:line="21" pos:column="1">namespace <name><name pos:line="21" pos:column="11">ABB</name><op:operator pos:line="21" pos:column="14">.</op:operator><name pos:line="21" pos:column="15">SrcML</name></name> <block pos:line="21" pos:column="21">{

    <comment type="line" pos:line="23" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="24" pos:column="5">/// This class represents a SrcMLFile. The underlying data is stored in an XML file, and can be</comment>
    <comment type="line" pos:line="25" pos:column="5">/// accessed in a number of ways.</comment>
    <comment type="line" pos:line="26" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="27" pos:column="5">public</specifier> class <name pos:line="27" pos:column="18">SrcMLFile</name> <block pos:line="27" pos:column="28">{
        <decl_stmt><decl><type><specifier pos:line="28" pos:column="9">private</specifier> <name pos:line="28" pos:column="17">string</name></type> <name pos:line="28" pos:column="24">_archivePath</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="29" pos:column="9">private</specifier> <name pos:line="29" pos:column="17">XDocument</name></type> <name pos:line="29" pos:column="27">_document</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="30" pos:column="9">private</specifier> <name><name pos:line="30" pos:column="17">Dictionary</name><argument_list pos:line="30" pos:column="27">&lt;<argument><name pos:line="30" pos:column="28">XName</name></argument>, <argument><name pos:line="30" pos:column="35">XAttribute</name></argument>&gt;</argument_list></name></type> <name pos:line="30" pos:column="47">_rootAttributeDictionary</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="31" pos:column="9">private</specifier> <name pos:line="31" pos:column="17">string</name></type> <name pos:line="31" pos:column="24">_rootDirectory</name></decl>;</decl_stmt>

        <comment type="line" pos:line="33" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="34" pos:column="9">/// Instantiates a new SrcMLFile with the characteristics of another SrcMLFile.</comment>
        <comment type="line" pos:line="35" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="36" pos:column="9">/// &lt;param name="other"&gt;The SrcMLFile to copy.&lt;/param&gt;</comment>
        <constructor><specifier pos:line="37" pos:column="9">public</specifier> <name pos:line="37" pos:column="16">SrcMLFile</name><parameter_list pos:line="37" pos:column="25">(<param><decl><type><name pos:line="37" pos:column="26">SrcMLFile</name></type> <name pos:line="37" pos:column="36">other</name></decl></param>)</parameter_list> <block pos:line="37" pos:column="43">{
            <if pos:line="38" pos:column="13">if<condition pos:line="38" pos:column="15">(<expr><name pos:line="38" pos:column="16">null</name> <op:operator pos:line="38" pos:column="21">==</op:operator> <name pos:line="38" pos:column="24">other</name></expr>)</condition><then pos:line="38" pos:column="30">
                <throw pos:line="39" pos:column="17">throw <expr><op:operator pos:line="39" pos:column="23">new</op:operator> <call><name pos:line="39" pos:column="27">ArgumentNullException</name><argument_list pos:line="39" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="39" pos:column="49">"other"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <expr_stmt><expr><name><name pos:line="41" pos:column="13">this</name><op:operator pos:line="41" pos:column="17">.</op:operator><name pos:line="41" pos:column="18">_rootDirectory</name></name> <op:operator pos:line="41" pos:column="33">=</op:operator> <name><name pos:line="41" pos:column="35">other</name><op:operator pos:line="41" pos:column="40">.</op:operator><name pos:line="41" pos:column="41">_rootDirectory</name></name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="44" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="45" pos:column="9">/// Instantiates new SrcML file based on the given file.</comment>
        <comment type="line" pos:line="46" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="47" pos:column="9">/// &lt;param name="fileName"&gt;The file to read from.&lt;/param&gt;</comment>
        <constructor><specifier pos:line="48" pos:column="9">public</specifier> <name pos:line="48" pos:column="16">SrcMLFile</name><parameter_list pos:line="48" pos:column="25">(<param><decl><type><name pos:line="48" pos:column="26">string</name></type> <name pos:line="48" pos:column="33">fileName</name></decl></param>)</parameter_list> <block pos:line="48" pos:column="43">{
            <expr_stmt><expr><name><name pos:line="49" pos:column="13">this</name><op:operator pos:line="49" pos:column="17">.</op:operator><name pos:line="49" pos:column="18">ArchivePath</name></name> <op:operator pos:line="49" pos:column="30">=</op:operator> <name pos:line="49" pos:column="32">fileName</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="50" pos:column="13">this</name><op:operator pos:line="50" pos:column="17">.</op:operator><name pos:line="50" pos:column="18">_rootAttributeDictionary</name></name> <op:operator pos:line="50" pos:column="43">=</op:operator> <op:operator pos:line="50" pos:column="45">new</op:operator> <call><name><name pos:line="50" pos:column="49">Dictionary</name><argument_list pos:line="50" pos:column="59">&lt;<argument><name pos:line="50" pos:column="60">XName</name></argument>, <argument><name pos:line="50" pos:column="67">XAttribute</name></argument>&gt;</argument_list></name><argument_list pos:line="50" pos:column="78">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="51" pos:column="13">this</name><op:operator pos:line="51" pos:column="17">.</op:operator><name pos:line="51" pos:column="18">NumberOfNestedFileUnits</name></name> <op:operator pos:line="51" pos:column="42">=</op:operator> <call><name><name pos:line="51" pos:column="44">XmlHelper</name><op:operator pos:line="51" pos:column="53">.</op:operator><name pos:line="51" pos:column="54">StreamElements</name></name><argument_list pos:line="51" pos:column="68">(<argument><expr><name><name pos:line="51" pos:column="69">this</name><op:operator pos:line="51" pos:column="73">.</op:operator><name pos:line="51" pos:column="74">ArchivePath</name></name></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="87">SRC</name><op:operator pos:line="51" pos:column="90">.</op:operator><name pos:line="51" pos:column="91">Unit</name></name></expr></argument>)</argument_list></call><op:operator pos:line="51" pos:column="96">.</op:operator><call><name pos:line="51" pos:column="97">Count</name><argument_list pos:line="51" pos:column="102">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="52" pos:column="13">this</name><op:operator pos:line="52" pos:column="17">.</op:operator><name pos:line="52" pos:column="18">_rootDirectory</name></name> <op:operator pos:line="52" pos:column="33">=</op:operator> <call><name pos:line="52" pos:column="35">getCommonPath</name><argument_list pos:line="52" pos:column="48">()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <decl_stmt><decl><type><specifier pos:line="55" pos:column="9">public</specifier> <name pos:line="55" pos:column="16">string</name></type> <name pos:line="55" pos:column="23">ArchivePath</name> <block pos:line="55" pos:column="35">{
            <function><name pos:line="56" pos:column="13">get</name> <block pos:line="56" pos:column="17">{
                <return pos:line="57" pos:column="17">return <expr><name><name pos:line="57" pos:column="24">this</name><op:operator pos:line="57" pos:column="28">.</op:operator><name pos:line="57" pos:column="29">_archivePath</name></name></expr>;</return>
            }</block></function>
            <function><specifier pos:line="59" pos:column="13">protected</specifier> <name pos:line="59" pos:column="23">set</name> <block pos:line="59" pos:column="27">{
                <expr_stmt><expr><name><name pos:line="60" pos:column="17">this</name><op:operator pos:line="60" pos:column="21">.</op:operator><name pos:line="60" pos:column="22">_archivePath</name></name> <op:operator pos:line="60" pos:column="35">=</op:operator> <name pos:line="60" pos:column="37">value</name></expr>;</expr_stmt>
            }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="64" pos:column="9">public</specifier> <name pos:line="64" pos:column="16">string</name></type> <name pos:line="64" pos:column="23">FileName</name> <block pos:line="64" pos:column="32">{
            <function><name pos:line="65" pos:column="13">get</name> <block pos:line="65" pos:column="17">{
                <return pos:line="66" pos:column="17">return <expr><name><name pos:line="66" pos:column="24">this</name><op:operator pos:line="66" pos:column="28">.</op:operator><name pos:line="66" pos:column="29">ArchivePath</name></name></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="70" pos:column="9">public</specifier> <name><name pos:line="70" pos:column="16">IEnumerable</name><argument_list pos:line="70" pos:column="27">&lt;<argument><name pos:line="70" pos:column="28">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="70" pos:column="38">FileUnits</name> <block pos:line="70" pos:column="48">{
            <function><name pos:line="71" pos:column="13">get</name> <block pos:line="71" pos:column="17">{
                <if pos:line="72" pos:column="17">if<condition pos:line="72" pos:column="19">(<expr><lit:literal type="number" pos:line="72" pos:column="20">0</lit:literal> <op:operator pos:line="72" pos:column="22">==</op:operator> <name><name pos:line="72" pos:column="25">this</name><op:operator pos:line="72" pos:column="29">.</op:operator><name pos:line="72" pos:column="30">NumberOfNestedFileUnits</name></name></expr>)</condition><then pos:line="72" pos:column="54"> <block pos:line="72" pos:column="55">{
                    <decl_stmt><decl><type><name pos:line="73" pos:column="21">var</name></type> <name pos:line="73" pos:column="25">shortList</name> <init pos:line="73" pos:column="35">= <expr><op:operator pos:line="73" pos:column="37">new</op:operator> <call><name><name pos:line="73" pos:column="41">List</name><argument_list pos:line="73" pos:column="45">&lt;<argument><name pos:line="73" pos:column="46">XElement</name></argument>&gt;</argument_list></name><argument_list pos:line="73" pos:column="55">(<argument><expr><lit:literal type="number" pos:line="73" pos:column="56">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="74" pos:column="21">shortList</name><op:operator pos:line="74" pos:column="30">.</op:operator><name pos:line="74" pos:column="31">Add</name></name><argument_list pos:line="74" pos:column="34">(<argument><expr><call><name><name pos:line="74" pos:column="35">SrcMLElement</name><op:operator pos:line="74" pos:column="47">.</op:operator><name pos:line="74" pos:column="48">Load</name></name><argument_list pos:line="74" pos:column="52">(<argument><expr><name><name pos:line="74" pos:column="53">this</name><op:operator pos:line="74" pos:column="57">.</op:operator><name pos:line="74" pos:column="58">FileName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return pos:line="75" pos:column="21">return <expr><name pos:line="75" pos:column="28">shortList</name></expr>;</return>
                }</block></then></if>
                <decl_stmt><decl><type><name><name pos:line="77" pos:column="17">IEnumerable</name><argument_list pos:line="77" pos:column="28">&lt;<argument><name pos:line="77" pos:column="29">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="77" pos:column="39">units</name> <init pos:line="77" pos:column="45">= <expr><linq><from pos:line="77" pos:column="47">from <expr><name pos:line="77" pos:column="52">unit</name></expr> <in pos:line="77" pos:column="57">in <expr><call><name><name pos:line="77" pos:column="60">XmlHelper</name><op:operator pos:line="77" pos:column="69">.</op:operator><name pos:line="77" pos:column="70">StreamElements</name></name><argument_list pos:line="77" pos:column="84">(<argument><expr><name><name pos:line="77" pos:column="85">this</name><op:operator pos:line="77" pos:column="89">.</op:operator><name pos:line="77" pos:column="90">ArchivePath</name></name></expr></argument>, <argument><expr><name><name pos:line="77" pos:column="103">SRC</name><op:operator pos:line="77" pos:column="106">.</op:operator><name pos:line="77" pos:column="107">Unit</name></name></expr></argument>)</argument_list></call></expr></in></from>
                                              <where pos:line="78" pos:column="47">where <expr><call><name><name pos:line="78" pos:column="53">unit</name><op:operator pos:line="78" pos:column="57">.</op:operator><name pos:line="78" pos:column="58">Attribute</name></name><argument_list pos:line="78" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="78" pos:column="68">"filename"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="78" pos:column="80">!=</op:operator> <name pos:line="78" pos:column="83">null</name></expr></where>
                                              <select pos:line="79" pos:column="47">select <expr><name pos:line="79" pos:column="54">unit</name></expr></select></linq></expr></init></decl>;</decl_stmt>
                <return pos:line="80" pos:column="17">return <expr><name pos:line="80" pos:column="24">units</name></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="84" pos:column="9">public</specifier> <name pos:line="84" pos:column="16">int</name></type> <name pos:line="84" pos:column="20">NumberOfNestedFileUnits</name> <block pos:line="84" pos:column="44">{
            <function_decl><name pos:line="85" pos:column="13">get</name>;</function_decl>
            <function_decl><specifier pos:line="86" pos:column="13">protected</specifier> <name pos:line="86" pos:column="23">set</name>;</function_decl>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="89" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="90" pos:column="9">/// The project rootUnit directory for this SrcMLFile.</comment>
        <comment type="line" pos:line="91" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="92" pos:column="9">/// &lt;value&gt;The ProjectDirectory property gets &amp;amp; sets the rootUnit directory for this</comment>
        <comment type="line" pos:line="93" pos:column="9">/// SrcMLFile.&lt;/value&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="94" pos:column="9">public</specifier> <name pos:line="94" pos:column="16">string</name></type> <name pos:line="94" pos:column="23">ProjectDirectory</name> <block pos:line="94" pos:column="40">{
            <function><name pos:line="95" pos:column="13">get</name> <block pos:line="95" pos:column="17">{ <return pos:line="95" pos:column="19">return <expr><name pos:line="95" pos:column="26">_rootDirectory</name></expr>;</return> }</block></function>
            <function><name pos:line="96" pos:column="13">set</name> <block pos:line="96" pos:column="17">{
                <decl_stmt><decl><type><name pos:line="97" pos:column="17">var</name></type> <name pos:line="97" pos:column="21">units</name> <init pos:line="97" pos:column="27">= <expr><linq><from pos:line="97" pos:column="29">from <expr><name pos:line="97" pos:column="34">unit</name></expr> <in pos:line="97" pos:column="39">in <expr><name><name pos:line="97" pos:column="42">this</name><op:operator pos:line="97" pos:column="46">.</op:operator><name pos:line="97" pos:column="47">FileUnits</name></name></expr></in></from>
                            <where pos:line="98" pos:column="29">where <expr><call><name><name pos:line="98" pos:column="35">unit</name><op:operator pos:line="98" pos:column="39">.</op:operator><name pos:line="98" pos:column="40">Attribute</name></name><argument_list pos:line="98" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="98" pos:column="50">"filename"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="98" pos:column="62">!=</op:operator> <name pos:line="98" pos:column="65">null</name></expr></where>
                            <select pos:line="99" pos:column="29">select <expr><name pos:line="99" pos:column="36">unit</name></expr></select></linq></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name pos:line="101" pos:column="17">var</name></type> <name pos:line="101" pos:column="21">tempFileName</name> <init pos:line="101" pos:column="34">= <expr><call><name><name pos:line="101" pos:column="36">Path</name><op:operator pos:line="101" pos:column="40">.</op:operator><name pos:line="101" pos:column="41">GetTempFileName</name></name><argument_list pos:line="101" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <using pos:line="102" pos:column="17">using(<decl><type><name pos:line="102" pos:column="23">XmlWriter</name></type> <name pos:line="102" pos:column="33">xw</name> <init pos:line="102" pos:column="36">= <expr><call><name><name pos:line="102" pos:column="38">XmlWriter</name><op:operator pos:line="102" pos:column="47">.</op:operator><name pos:line="102" pos:column="48">Create</name></name><argument_list pos:line="102" pos:column="54">(<argument><expr><name pos:line="102" pos:column="55">tempFileName</name></expr></argument>, <argument><expr><op:operator pos:line="102" pos:column="69">new</op:operator> <call><name pos:line="102" pos:column="73">XmlWriterSettings</name><argument_list pos:line="102" pos:column="90">()</argument_list></call> <block pos:line="102" pos:column="93">{ <expr><name pos:line="102" pos:column="95">Indent</name> <op:operator pos:line="102" pos:column="102">=</op:operator> <lit:literal type="boolean" pos:line="102" pos:column="104">false</lit:literal></expr> }</block></expr></argument>)</argument_list></call></expr></init></decl>) <block pos:line="102" pos:column="114">{
                    <expr_stmt><expr><call><name><name pos:line="103" pos:column="21">xw</name><op:operator pos:line="103" pos:column="23">.</op:operator><name pos:line="103" pos:column="24">WriteStartElement</name></name><argument_list pos:line="103" pos:column="41">(<argument><expr><name><name pos:line="103" pos:column="42">SRC</name><op:operator pos:line="103" pos:column="45">.</op:operator><name pos:line="103" pos:column="46">Unit</name><op:operator pos:line="103" pos:column="50">.</op:operator><name pos:line="103" pos:column="51">LocalName</name></name></expr></argument>, <argument><expr><name><name pos:line="103" pos:column="62">SRC</name><op:operator pos:line="103" pos:column="65">.</op:operator><name pos:line="103" pos:column="66">Unit</name><op:operator pos:line="103" pos:column="70">.</op:operator><name pos:line="103" pos:column="71">NamespaceName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="104" pos:column="21">WriteXmlnsAttributes</name><argument_list pos:line="104" pos:column="41">(<argument><expr><name pos:line="104" pos:column="42">xw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <foreach pos:line="105" pos:column="21">foreach(<init><decl><type><name pos:line="105" pos:column="29">var</name></type> <name pos:line="105" pos:column="33">kvp</name> <range pos:line="105" pos:column="37">in <expr><name><name pos:line="105" pos:column="40">this</name><op:operator pos:line="105" pos:column="44">.</op:operator><name pos:line="105" pos:column="45">RootAttributeDictionary</name></name></expr></range></decl></init>) <block pos:line="105" pos:column="70">{
                        <expr_stmt><expr><call><name><name pos:line="106" pos:column="25">xw</name><op:operator pos:line="106" pos:column="27">.</op:operator><name pos:line="106" pos:column="28">WriteAttributeString</name></name><argument_list pos:line="106" pos:column="48">(<argument><expr><name><name pos:line="106" pos:column="49">kvp</name><op:operator pos:line="106" pos:column="52">.</op:operator><name pos:line="106" pos:column="53">Value</name><op:operator pos:line="106" pos:column="58">.</op:operator><name pos:line="106" pos:column="59">Name</name><op:operator pos:line="106" pos:column="63">.</op:operator><name pos:line="106" pos:column="64">LocalName</name></name></expr></argument>, <argument><expr><name><name pos:line="106" pos:column="75">kvp</name><op:operator pos:line="106" pos:column="78">.</op:operator><name pos:line="106" pos:column="79">Value</name><op:operator pos:line="106" pos:column="84">.</op:operator><name pos:line="106" pos:column="85">Name</name><op:operator pos:line="106" pos:column="89">.</op:operator><name pos:line="106" pos:column="90">NamespaceName</name></name></expr></argument>, <argument><expr><op:operator pos:line="106" pos:column="105">(</op:operator><lit:literal type="string" pos:line="106" pos:column="106">"dir"</lit:literal> <op:operator pos:line="106" pos:column="112">==</op:operator> <name><name pos:line="106" pos:column="115">kvp</name><op:operator pos:line="106" pos:column="118">.</op:operator><name pos:line="106" pos:column="119">Key</name> <type:modifier pos:line="106" pos:column="123">?</type:modifier></name> <name pos:line="106" pos:column="125">value</name> <op:operator pos:line="106" pos:column="131">:</op:operator> <name><name pos:line="106" pos:column="133">kvp</name><op:operator pos:line="106" pos:column="136">.</op:operator><name pos:line="106" pos:column="137">Value</name><op:operator pos:line="106" pos:column="142">.</op:operator><name pos:line="106" pos:column="143">Value</name></name><op:operator pos:line="106" pos:column="148">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></foreach>

                    <foreach pos:line="109" pos:column="21">foreach(<init><decl><type><name pos:line="109" pos:column="29">var</name></type> <name pos:line="109" pos:column="33">unit</name> <range pos:line="109" pos:column="38">in <expr><name pos:line="109" pos:column="41">units</name></expr></range></decl></init>) <block pos:line="109" pos:column="48">{
                        <decl_stmt><decl><type><name pos:line="110" pos:column="25">var</name></type> <name pos:line="110" pos:column="29">fileName</name> <init pos:line="110" pos:column="38">= <expr><call><name><name pos:line="110" pos:column="40">unit</name><op:operator pos:line="110" pos:column="44">.</op:operator><name pos:line="110" pos:column="45">Attribute</name></name><argument_list pos:line="110" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="110" pos:column="55">"filename"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="110" pos:column="66">.</op:operator><name pos:line="110" pos:column="67">Value</name></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name pos:line="111" pos:column="25">fileName</name> <op:operator pos:line="111" pos:column="34">=</op:operator> <call><name><name pos:line="111" pos:column="36">fileName</name><op:operator pos:line="111" pos:column="44">.</op:operator><name pos:line="111" pos:column="45">Replace</name></name><argument_list pos:line="111" pos:column="52">(<argument><expr><name pos:line="111" pos:column="53">_rootDirectory</name></expr></argument>, <argument><expr><name pos:line="111" pos:column="69">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="112" pos:column="25">unit</name><op:operator pos:line="112" pos:column="29">.</op:operator><name pos:line="112" pos:column="30">SetAttributeValue</name></name><argument_list pos:line="112" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="112" pos:column="48">"filename"</lit:literal></expr></argument>, <argument><expr><name pos:line="112" pos:column="60">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt><expr><call><name><name pos:line="114" pos:column="25">unit</name><op:operator pos:line="114" pos:column="29">.</op:operator><name pos:line="114" pos:column="30">WriteTo</name></name><argument_list pos:line="114" pos:column="37">(<argument><expr><name pos:line="114" pos:column="38">xw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></foreach>
                    <expr_stmt><expr><call><name><name pos:line="116" pos:column="21">xw</name><op:operator pos:line="116" pos:column="23">.</op:operator><name pos:line="116" pos:column="24">WriteEndElement</name></name><argument_list pos:line="116" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
                }</block></using>
                <expr_stmt><expr><call><name><name pos:line="118" pos:column="17">File</name><op:operator pos:line="118" pos:column="21">.</op:operator><name pos:line="118" pos:column="22">Delete</name></name><argument_list pos:line="118" pos:column="28">(<argument><expr><name><name pos:line="118" pos:column="29">this</name><op:operator pos:line="118" pos:column="33">.</op:operator><name pos:line="118" pos:column="34">ArchivePath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="119" pos:column="17">File</name><op:operator pos:line="119" pos:column="21">.</op:operator><name pos:line="119" pos:column="22">Move</name></name><argument_list pos:line="119" pos:column="26">(<argument><expr><name pos:line="119" pos:column="27">tempFileName</name></expr></argument>, <argument><expr><name><name pos:line="119" pos:column="41">this</name><op:operator pos:line="119" pos:column="45">.</op:operator><name pos:line="119" pos:column="46">ArchivePath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name pos:line="121" pos:column="17">_rootDirectory</name> <op:operator pos:line="121" pos:column="32">=</op:operator> <name pos:line="121" pos:column="34">value</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="122" pos:column="17">this</name><op:operator pos:line="122" pos:column="21">.</op:operator><name pos:line="122" pos:column="22">RootAttributeDictionary</name><index pos:line="122" pos:column="45">[<expr><lit:literal type="string" pos:line="122" pos:column="46">"dir"</lit:literal></expr>]</index></name> <op:operator pos:line="122" pos:column="53">=</op:operator> <op:operator pos:line="122" pos:column="55">new</op:operator> <call><name pos:line="122" pos:column="59">XAttribute</name><argument_list pos:line="122" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="122" pos:column="70">"dir"</lit:literal></expr></argument>, <argument><expr><name pos:line="122" pos:column="77">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="126" pos:column="9">public</specifier> <name><name pos:line="126" pos:column="16">Dictionary</name><argument_list pos:line="126" pos:column="26">&lt;<argument><name pos:line="126" pos:column="27">XName</name></argument>, <argument><name pos:line="126" pos:column="34">XAttribute</name></argument>&gt;</argument_list></name></type> <name pos:line="126" pos:column="46">RootAttributeDictionary</name> <block pos:line="126" pos:column="70">{
            <function><name pos:line="127" pos:column="13">get</name> <block pos:line="127" pos:column="17">{
                <return pos:line="128" pos:column="17">return <expr><name><name pos:line="128" pos:column="24">this</name><op:operator pos:line="128" pos:column="28">.</op:operator><name pos:line="128" pos:column="29">_rootAttributeDictionary</name></name></expr>;</return>
            }</block></function>
            <function><specifier pos:line="130" pos:column="13">protected</specifier> <name pos:line="130" pos:column="23">set</name> <block pos:line="130" pos:column="27">{
                <expr_stmt><expr><name><name pos:line="131" pos:column="17">this</name><op:operator pos:line="131" pos:column="21">.</op:operator><name pos:line="131" pos:column="22">_rootAttributeDictionary</name></name> <op:operator pos:line="131" pos:column="47">=</op:operator> <name pos:line="131" pos:column="49">value</name></expr>;</expr_stmt>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="135" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="136" pos:column="9">/// Write attribute strings for each SrcML namespace to the given XmlWriter. This should be</comment>
        <comment type="line" pos:line="137" pos:column="9">/// called immediately after XmlWriter.WriteStartElement.</comment>
        <comment type="line" pos:line="138" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="139" pos:column="9">/// &lt;param name="writer"&gt;Instance of XmlWriter to write to.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="140" pos:column="9">public</specifier> <specifier pos:line="140" pos:column="16">static</specifier> <name pos:line="140" pos:column="23">void</name></type> <name pos:line="140" pos:column="28">WriteXmlnsAttributes</name><parameter_list pos:line="140" pos:column="48">(<param><decl><type><name pos:line="140" pos:column="49">XmlWriter</name></type> <name pos:line="140" pos:column="59">writer</name></decl></param>)</parameter_list> <block pos:line="140" pos:column="67">{
            <if pos:line="141" pos:column="13">if<condition pos:line="141" pos:column="15">(<expr><name pos:line="141" pos:column="16">null</name> <op:operator pos:line="141" pos:column="21">==</op:operator> <name pos:line="141" pos:column="24">writer</name></expr>)</condition><then pos:line="141" pos:column="31">
                <throw pos:line="142" pos:column="17">throw <expr><op:operator pos:line="142" pos:column="23">new</op:operator> <call><name pos:line="142" pos:column="27">ArgumentNullException</name><argument_list pos:line="142" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="142" pos:column="49">"writer"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <expr_stmt><expr><call><name><name pos:line="144" pos:column="13">writer</name><op:operator pos:line="144" pos:column="19">.</op:operator><name pos:line="144" pos:column="20">WriteAttributeString</name></name><argument_list pos:line="144" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="144" pos:column="41">"xmlns"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="144" pos:column="50">CPP</name><op:operator pos:line="144" pos:column="53">.</op:operator><name pos:line="144" pos:column="54">Prefix</name></name></expr></argument>, <argument><expr><name pos:line="144" pos:column="62">null</name></expr></argument>, <argument><expr><name><name pos:line="144" pos:column="68">CPP</name><op:operator pos:line="144" pos:column="71">.</op:operator><name pos:line="144" pos:column="72">NS</name><op:operator pos:line="144" pos:column="74">.</op:operator><name pos:line="144" pos:column="75">NamespaceName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="145" pos:column="13">writer</name><op:operator pos:line="145" pos:column="19">.</op:operator><name pos:line="145" pos:column="20">WriteAttributeString</name></name><argument_list pos:line="145" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="145" pos:column="41">"xmlns"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="145" pos:column="50">LIT</name><op:operator pos:line="145" pos:column="53">.</op:operator><name pos:line="145" pos:column="54">Prefix</name></name></expr></argument>, <argument><expr><name pos:line="145" pos:column="62">null</name></expr></argument>, <argument><expr><name><name pos:line="145" pos:column="68">LIT</name><op:operator pos:line="145" pos:column="71">.</op:operator><name pos:line="145" pos:column="72">NS</name><op:operator pos:line="145" pos:column="74">.</op:operator><name pos:line="145" pos:column="75">NamespaceName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="146" pos:column="13">writer</name><op:operator pos:line="146" pos:column="19">.</op:operator><name pos:line="146" pos:column="20">WriteAttributeString</name></name><argument_list pos:line="146" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="146" pos:column="41">"xmlns"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="146" pos:column="50">OP</name><op:operator pos:line="146" pos:column="52">.</op:operator><name pos:line="146" pos:column="53">Prefix</name></name></expr></argument>, <argument><expr><name pos:line="146" pos:column="61">null</name></expr></argument>, <argument><expr><name><name pos:line="146" pos:column="67">OP</name><op:operator pos:line="146" pos:column="69">.</op:operator><name pos:line="146" pos:column="70">NS</name><op:operator pos:line="146" pos:column="72">.</op:operator><name pos:line="146" pos:column="73">NamespaceName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="147" pos:column="13">writer</name><op:operator pos:line="147" pos:column="19">.</op:operator><name pos:line="147" pos:column="20">WriteAttributeString</name></name><argument_list pos:line="147" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="147" pos:column="41">"xmlns"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="147" pos:column="50">POS</name><op:operator pos:line="147" pos:column="53">.</op:operator><name pos:line="147" pos:column="54">Prefix</name></name></expr></argument>, <argument><expr><name pos:line="147" pos:column="62">null</name></expr></argument>, <argument><expr><name><name pos:line="147" pos:column="68">POS</name><op:operator pos:line="147" pos:column="71">.</op:operator><name pos:line="147" pos:column="72">NS</name><op:operator pos:line="147" pos:column="74">.</op:operator><name pos:line="147" pos:column="75">NamespaceName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="148" pos:column="13">writer</name><op:operator pos:line="148" pos:column="19">.</op:operator><name pos:line="148" pos:column="20">WriteAttributeString</name></name><argument_list pos:line="148" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="148" pos:column="41">"xmlns"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="148" pos:column="50">TYPE</name><op:operator pos:line="148" pos:column="54">.</op:operator><name pos:line="148" pos:column="55">Prefix</name></name></expr></argument>, <argument><expr><name pos:line="148" pos:column="63">null</name></expr></argument>, <argument><expr><name><name pos:line="148" pos:column="69">TYPE</name><op:operator pos:line="148" pos:column="73">.</op:operator><name pos:line="148" pos:column="74">NS</name><op:operator pos:line="148" pos:column="76">.</op:operator><name pos:line="148" pos:column="77">NamespaceName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="151" pos:column="9">public</specifier> <name pos:line="151" pos:column="16">void</name></type> <name pos:line="151" pos:column="21">AddUnits</name><parameter_list pos:line="151" pos:column="29">(<param><decl><type><name><name pos:line="151" pos:column="30">IEnumerable</name><argument_list pos:line="151" pos:column="41">&lt;<argument><name pos:line="151" pos:column="42">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="151" pos:column="52">units</name></decl></param>)</parameter_list> <block pos:line="151" pos:column="59">{
            <decl_stmt><decl><type><name pos:line="152" pos:column="13">var</name></type> <name pos:line="152" pos:column="17">tmpFileName</name> <init pos:line="152" pos:column="29">= <expr><call><name><name pos:line="152" pos:column="31">Path</name><op:operator pos:line="152" pos:column="35">.</op:operator><name pos:line="152" pos:column="36">GetTempFileName</name></name><argument_list pos:line="152" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <using pos:line="153" pos:column="13">using(<decl><type><name pos:line="153" pos:column="19">XmlWriter</name></type> <name pos:line="153" pos:column="29">xw</name> <init pos:line="153" pos:column="32">= <expr><call><name><name pos:line="153" pos:column="34">XmlWriter</name><op:operator pos:line="153" pos:column="43">.</op:operator><name pos:line="153" pos:column="44">Create</name></name><argument_list pos:line="153" pos:column="50">(<argument><expr><name pos:line="153" pos:column="51">tmpFileName</name></expr></argument>, <argument><expr><op:operator pos:line="153" pos:column="64">new</op:operator> <call><name pos:line="153" pos:column="68">XmlWriterSettings</name><argument_list pos:line="153" pos:column="85">()</argument_list></call> <block pos:line="153" pos:column="88">{ <expr><name pos:line="153" pos:column="90">Indent</name> <op:operator pos:line="153" pos:column="97">=</op:operator> <lit:literal type="boolean" pos:line="153" pos:column="99">false</lit:literal></expr> }</block></expr></argument>)</argument_list></call></expr></init></decl>) <block pos:line="153" pos:column="109">{
                <expr_stmt><expr><call><name><name pos:line="154" pos:column="17">xw</name><op:operator pos:line="154" pos:column="19">.</op:operator><name pos:line="154" pos:column="20">WriteStartElement</name></name><argument_list pos:line="154" pos:column="37">(<argument><expr><name><name pos:line="154" pos:column="38">SRC</name><op:operator pos:line="154" pos:column="41">.</op:operator><name pos:line="154" pos:column="42">Unit</name><op:operator pos:line="154" pos:column="46">.</op:operator><name pos:line="154" pos:column="47">LocalName</name></name></expr></argument>, <argument><expr><name><name pos:line="154" pos:column="58">SRC</name><op:operator pos:line="154" pos:column="61">.</op:operator><name pos:line="154" pos:column="62">Unit</name><op:operator pos:line="154" pos:column="66">.</op:operator><name pos:line="154" pos:column="67">NamespaceName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="155" pos:column="17">WriteXmlnsAttributes</name><argument_list pos:line="155" pos:column="37">(<argument><expr><name pos:line="155" pos:column="38">xw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <foreach pos:line="157" pos:column="17">foreach(<init><decl><type><name pos:line="157" pos:column="25">var</name></type> <name pos:line="157" pos:column="29">unit</name> <range pos:line="157" pos:column="34">in <expr><name><name pos:line="157" pos:column="37">this</name><op:operator pos:line="157" pos:column="41">.</op:operator><name pos:line="157" pos:column="42">FileUnits</name></name></expr></range></decl></init>) <block pos:line="157" pos:column="53">{
                    <expr_stmt><expr><call><name><name pos:line="158" pos:column="21">unit</name><op:operator pos:line="158" pos:column="25">.</op:operator><name pos:line="158" pos:column="26">WriteTo</name></name><argument_list pos:line="158" pos:column="33">(<argument><expr><name pos:line="158" pos:column="34">xw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>

                <foreach pos:line="161" pos:column="17">foreach(<init><decl><type><name pos:line="161" pos:column="25">var</name></type> <name pos:line="161" pos:column="29">unit</name> <range pos:line="161" pos:column="34">in <expr><name pos:line="161" pos:column="37">units</name></expr></range></decl></init>) <block pos:line="161" pos:column="44">{
                    <expr_stmt><expr><call><name><name pos:line="162" pos:column="21">unit</name><op:operator pos:line="162" pos:column="25">.</op:operator><name pos:line="162" pos:column="26">WriteTo</name></name><argument_list pos:line="162" pos:column="33">(<argument><expr><name pos:line="162" pos:column="34">xw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>

                <expr_stmt><expr><call><name><name pos:line="165" pos:column="17">xw</name><op:operator pos:line="165" pos:column="19">.</op:operator><name pos:line="165" pos:column="20">WriteEndElement</name></name><argument_list pos:line="165" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
            }</block></using>
            <expr_stmt><expr><call><name><name pos:line="167" pos:column="13">File</name><op:operator pos:line="167" pos:column="17">.</op:operator><name pos:line="167" pos:column="18">Move</name></name><argument_list pos:line="167" pos:column="22">(<argument><expr><name pos:line="167" pos:column="23">tmpFileName</name></expr></argument>, <argument><expr><name><name pos:line="167" pos:column="36">this</name><op:operator pos:line="167" pos:column="40">.</op:operator><name pos:line="167" pos:column="41">FileName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="170" pos:column="9">public</specifier> <name pos:line="170" pos:column="16">void</name></type> <name pos:line="170" pos:column="21">DeleteUnits</name><parameter_list pos:line="170" pos:column="32">(<param><decl><type><name><name pos:line="170" pos:column="33">IEnumerable</name><argument_list pos:line="170" pos:column="44">&lt;<argument><name pos:line="170" pos:column="45">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="170" pos:column="55">units</name></decl></param>)</parameter_list> <block pos:line="170" pos:column="62">{
            <decl_stmt><decl><type><name pos:line="171" pos:column="13">var</name></type> <name pos:line="171" pos:column="17">tmpFileName</name> <init pos:line="171" pos:column="29">= <expr><call><name><name pos:line="171" pos:column="31">Path</name><op:operator pos:line="171" pos:column="35">.</op:operator><name pos:line="171" pos:column="36">GetTempFileName</name></name><argument_list pos:line="171" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <using pos:line="172" pos:column="13">using(<decl><type><name pos:line="172" pos:column="19">XmlWriter</name></type> <name pos:line="172" pos:column="29">xw</name> <init pos:line="172" pos:column="32">= <expr><call><name><name pos:line="172" pos:column="34">XmlWriter</name><op:operator pos:line="172" pos:column="43">.</op:operator><name pos:line="172" pos:column="44">Create</name></name><argument_list pos:line="172" pos:column="50">(<argument><expr><name pos:line="172" pos:column="51">tmpFileName</name></expr></argument>, <argument><expr><op:operator pos:line="172" pos:column="64">new</op:operator> <call><name pos:line="172" pos:column="68">XmlWriterSettings</name><argument_list pos:line="172" pos:column="85">()</argument_list></call> <block pos:line="172" pos:column="88">{ <expr><name pos:line="172" pos:column="90">Indent</name> <op:operator pos:line="172" pos:column="97">=</op:operator> <lit:literal type="boolean" pos:line="172" pos:column="99">false</lit:literal></expr> }</block></expr></argument>)</argument_list></call></expr></init></decl>) <block pos:line="172" pos:column="109">{
                <expr_stmt><expr><call><name><name pos:line="173" pos:column="17">xw</name><op:operator pos:line="173" pos:column="19">.</op:operator><name pos:line="173" pos:column="20">WriteStartElement</name></name><argument_list pos:line="173" pos:column="37">(<argument><expr><name><name pos:line="173" pos:column="38">SRC</name><op:operator pos:line="173" pos:column="41">.</op:operator><name pos:line="173" pos:column="42">Unit</name><op:operator pos:line="173" pos:column="46">.</op:operator><name pos:line="173" pos:column="47">LocalName</name></name></expr></argument>, <argument><expr><name><name pos:line="173" pos:column="58">SRC</name><op:operator pos:line="173" pos:column="61">.</op:operator><name pos:line="173" pos:column="62">Unit</name><op:operator pos:line="173" pos:column="66">.</op:operator><name pos:line="173" pos:column="67">NamespaceName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="174" pos:column="17">WriteXmlnsAttributes</name><argument_list pos:line="174" pos:column="37">(<argument><expr><name pos:line="174" pos:column="38">xw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="176" pos:column="17">var</name></type> <name pos:line="176" pos:column="21">remainingUnits</name> <init pos:line="176" pos:column="36">= <expr><name><name pos:line="176" pos:column="38">this</name><op:operator pos:line="176" pos:column="42">.</op:operator><name pos:line="176" pos:column="43">FileUnits</name></name></expr></init></decl>;</decl_stmt>
                <foreach pos:line="177" pos:column="17">foreach(<init><decl><type><name pos:line="177" pos:column="25">var</name></type> <name pos:line="177" pos:column="29">unit</name> <range pos:line="177" pos:column="34">in <expr><name pos:line="177" pos:column="37">remainingUnits</name></expr></range></decl></init>) <block pos:line="177" pos:column="53">{
                    <expr_stmt><expr><call><name><name pos:line="178" pos:column="21">unit</name><op:operator pos:line="178" pos:column="25">.</op:operator><name pos:line="178" pos:column="26">WriteTo</name></name><argument_list pos:line="178" pos:column="33">(<argument><expr><name pos:line="178" pos:column="34">xw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
                <expr_stmt><expr><call><name><name pos:line="180" pos:column="17">xw</name><op:operator pos:line="180" pos:column="19">.</op:operator><name pos:line="180" pos:column="20">WriteEndElement</name></name><argument_list pos:line="180" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
            }</block></using>
        }</block></function>

        <function><type><specifier pos:line="184" pos:column="9">public</specifier> <name pos:line="184" pos:column="16">void</name></type> <name pos:line="184" pos:column="21">ExportSource</name><parameter_list pos:line="184" pos:column="33">()</parameter_list> <block pos:line="184" pos:column="36">{
            <foreach pos:line="185" pos:column="13">foreach(<init><decl><type><name pos:line="185" pos:column="21">var</name></type> <name pos:line="185" pos:column="25">unit</name> <range pos:line="185" pos:column="30">in <expr><name><name pos:line="185" pos:column="33">this</name><op:operator pos:line="185" pos:column="37">.</op:operator><name pos:line="185" pos:column="38">FileUnits</name></name></expr></range></decl></init>) <block pos:line="185" pos:column="49">{
                <decl_stmt><decl><type><name pos:line="186" pos:column="17">var</name></type> <name pos:line="186" pos:column="21">path</name> <init pos:line="186" pos:column="26">= <expr><call><name pos:line="186" pos:column="28">GetPathForUnit</name><argument_list pos:line="186" pos:column="42">(<argument><expr><name pos:line="186" pos:column="43">unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <try pos:line="187" pos:column="17">try <block pos:line="187" pos:column="21">{
                    <expr_stmt><expr><call><name><name pos:line="188" pos:column="21">Directory</name><op:operator pos:line="188" pos:column="30">.</op:operator><name pos:line="188" pos:column="31">CreateDirectory</name></name><argument_list pos:line="188" pos:column="46">(<argument><expr><call><name><name pos:line="188" pos:column="47">Path</name><op:operator pos:line="188" pos:column="51">.</op:operator><name pos:line="188" pos:column="52">GetDirectoryName</name></name><argument_list pos:line="188" pos:column="68">(<argument><expr><name pos:line="188" pos:column="69">path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="189" pos:column="21">File</name><op:operator pos:line="189" pos:column="25">.</op:operator><name pos:line="189" pos:column="26">WriteAllText</name></name><argument_list pos:line="189" pos:column="38">(<argument><expr><name pos:line="189" pos:column="39">path</name></expr></argument>, <argument><expr><call><name><name pos:line="189" pos:column="45">unit</name><op:operator pos:line="189" pos:column="49">.</op:operator><name pos:line="189" pos:column="50">ToSource</name></name><argument_list pos:line="189" pos:column="58">()</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="189" pos:column="62">Encoding</name><op:operator pos:line="189" pos:column="70">.</op:operator><name pos:line="189" pos:column="71">UTF8</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch pos:line="190" pos:column="19">catch<parameter_list pos:line="190" pos:column="24">(<param><decl><type><name pos:line="190" pos:column="25">UnauthorizedAccessException</name></type></decl></param>)</parameter_list> <block pos:line="190" pos:column="54">{
                    <throw pos:line="191" pos:column="21">throw;</throw>
                }</block></catch></try>
            }</block></foreach>
        }</block></function>

        <function><type><specifier pos:line="196" pos:column="9">public</specifier> <name pos:line="196" pos:column="16">string</name></type> <name pos:line="196" pos:column="23">GetPathForUnit</name><parameter_list pos:line="196" pos:column="37">(<param><decl><type><name pos:line="196" pos:column="38">XElement</name></type> <name pos:line="196" pos:column="47">unit</name></decl></param>)</parameter_list> <block pos:line="196" pos:column="53">{
            <if pos:line="197" pos:column="13">if<condition pos:line="197" pos:column="15">(<expr><name pos:line="197" pos:column="16">null</name> <op:operator pos:line="197" pos:column="21">==</op:operator> <name pos:line="197" pos:column="24">unit</name></expr>)</condition><then pos:line="197" pos:column="29">
                <throw pos:line="198" pos:column="17">throw <expr><op:operator pos:line="198" pos:column="23">new</op:operator> <call><name pos:line="198" pos:column="27">ArgumentNullException</name><argument_list pos:line="198" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="198" pos:column="49">"unit"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <try pos:line="199" pos:column="13">try <block pos:line="199" pos:column="17">{
                <expr_stmt><expr><call><name><name pos:line="200" pos:column="17">SrcMLElement</name><op:operator pos:line="200" pos:column="29">.</op:operator><name pos:line="200" pos:column="30">ThrowExceptionOnInvalidName</name></name><argument_list pos:line="200" pos:column="57">(<argument><expr><name pos:line="200" pos:column="58">unit</name></expr></argument>, <argument><expr><name><name pos:line="200" pos:column="64">SRC</name><op:operator pos:line="200" pos:column="67">.</op:operator><name pos:line="200" pos:column="68">Unit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch pos:line="201" pos:column="15">catch<parameter_list pos:line="201" pos:column="20">(<param><decl><type><name pos:line="201" pos:column="21">SrcMLRequiredNameException</name></type> <name pos:line="201" pos:column="48">e</name></decl></param>)</parameter_list> <block pos:line="201" pos:column="51">{
                <throw pos:line="202" pos:column="17">throw <expr><op:operator pos:line="202" pos:column="23">new</op:operator> <call><name pos:line="202" pos:column="27">ArgumentException</name><argument_list pos:line="202" pos:column="44">(<argument><expr><name><name pos:line="202" pos:column="45">e</name><op:operator pos:line="202" pos:column="46">.</op:operator><name pos:line="202" pos:column="47">Message</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="202" pos:column="56">"unit"</lit:literal></expr></argument>, <argument><expr><name pos:line="202" pos:column="64">e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>

            <decl_stmt><decl><type><name pos:line="205" pos:column="13">var</name></type> <name pos:line="205" pos:column="17">fileName</name> <init pos:line="205" pos:column="26">= <expr><call><name><name pos:line="205" pos:column="28">unit</name><op:operator pos:line="205" pos:column="32">.</op:operator><name pos:line="205" pos:column="33">Attribute</name></name><argument_list pos:line="205" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="205" pos:column="43">"filename"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if pos:line="207" pos:column="13">if<condition pos:line="207" pos:column="15">(<expr><name pos:line="207" pos:column="16">null</name> <op:operator pos:line="207" pos:column="21">!=</op:operator> <name pos:line="207" pos:column="24">fileName</name></expr>)</condition><then pos:line="207" pos:column="33">
                <return pos:line="208" pos:column="17">return <expr><name><name pos:line="208" pos:column="24">fileName</name><op:operator pos:line="208" pos:column="32">.</op:operator><name pos:line="208" pos:column="33">Value</name></name></expr>;</return></then></if>

            <return pos:line="210" pos:column="13">return <expr><name pos:line="210" pos:column="20">null</name></expr>;</return>
            <comment type="line" pos:line="211" pos:column="13">//return fileName.Value;</comment>
        }</block></function>

        <comment type="line" pos:line="214" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="215" pos:column="9">/// Get this SrcML file as an XDocument. This should not be used on very large SrcML file as</comment>
        <comment type="line" pos:line="216" pos:column="9">/// it loads the entire XML file into memory.</comment>
        <comment type="line" pos:line="217" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="218" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><attribute pos:line="219" pos:column="9">[<expr><call><name><name pos:line="219" pos:column="10">System</name><op:operator pos:line="219" pos:column="16">.</op:operator><name pos:line="219" pos:column="17">Diagnostics</name><op:operator pos:line="219" pos:column="28">.</op:operator><name pos:line="219" pos:column="29">CodeAnalysis</name><op:operator pos:line="219" pos:column="41">.</op:operator><name pos:line="219" pos:column="42">SuppressMessage</name></name><argument_list pos:line="219" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="219" pos:column="58">"Microsoft.Design"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="219" pos:column="78">"CA1024:UsePropertiesWhereAppropriate"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="220" pos:column="9">public</specifier> <name pos:line="220" pos:column="16">XDocument</name></type> <name pos:line="220" pos:column="26">GetXDocument</name><parameter_list pos:line="220" pos:column="38">()</parameter_list> <block pos:line="220" pos:column="41">{
            <if pos:line="221" pos:column="13">if<condition pos:line="221" pos:column="15">(<expr><name pos:line="221" pos:column="16">null</name> <op:operator pos:line="221" pos:column="21">==</op:operator> <name pos:line="221" pos:column="24">_document</name></expr>)</condition><then pos:line="221" pos:column="34">
                <expr_stmt><expr><name pos:line="222" pos:column="17">_document</name> <op:operator pos:line="222" pos:column="27">=</op:operator> <call><name><name pos:line="222" pos:column="29">XDocument</name><op:operator pos:line="222" pos:column="38">.</op:operator><name pos:line="222" pos:column="39">Load</name></name><argument_list pos:line="222" pos:column="43">(<argument><expr><name><name pos:line="222" pos:column="44">this</name><op:operator pos:line="222" pos:column="48">.</op:operator><name pos:line="222" pos:column="49">ArchivePath</name></name></expr></argument>, <argument><expr><name><name pos:line="222" pos:column="62">LoadOptions</name><op:operator pos:line="222" pos:column="73">.</op:operator><name pos:line="222" pos:column="74">PreserveWhitespace</name></name> <op:operator pos:line="222" pos:column="93">|</op:operator> <name><name pos:line="222" pos:column="95">LoadOptions</name><op:operator pos:line="222" pos:column="106">.</op:operator><name pos:line="222" pos:column="107">SetLineInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            <return pos:line="223" pos:column="13">return <expr><name><name pos:line="223" pos:column="20">this</name><op:operator pos:line="223" pos:column="24">.</op:operator><name pos:line="223" pos:column="25">_document</name></name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="226" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="227" pos:column="9">/// Added by JZ on 12/3/2012 Read the srcML file and generate a string of the content of</comment>
        <comment type="line" pos:line="228" pos:column="9">/// this file.</comment>
        <comment type="line" pos:line="229" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="230" pos:column="9">/// &lt;returns&gt;The string of the content of this file.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="231" pos:column="9">public</specifier> <name pos:line="231" pos:column="16">string</name></type> <name pos:line="231" pos:column="23">GetXMLString</name><parameter_list pos:line="231" pos:column="35">()</parameter_list> <block pos:line="231" pos:column="38">{
            <decl_stmt><decl><type><name pos:line="232" pos:column="13">string</name></type> <name pos:line="232" pos:column="20">xml</name> <init pos:line="232" pos:column="24">= <expr><lit:literal type="string" pos:line="232" pos:column="26">""</lit:literal></expr></init></decl>;</decl_stmt>

            <try pos:line="234" pos:column="13">try <block pos:line="234" pos:column="17">{
                <using pos:line="235" pos:column="17">using(<decl><type><name pos:line="235" pos:column="23">StreamReader</name></type> <name pos:line="235" pos:column="36">sr</name> <init pos:line="235" pos:column="39">= <expr><op:operator pos:line="235" pos:column="41">new</op:operator> <call><name pos:line="235" pos:column="45">StreamReader</name><argument_list pos:line="235" pos:column="57">(<argument><expr><name><name pos:line="235" pos:column="58">this</name><op:operator pos:line="235" pos:column="62">.</op:operator><name pos:line="235" pos:column="63">ArchivePath</name></name></expr></argument>)</argument_list></call></expr></init></decl>) <block pos:line="235" pos:column="77">{
                    <decl_stmt><decl><type><name pos:line="236" pos:column="21">string</name></type> <name pos:line="236" pos:column="28">line</name></decl>;</decl_stmt>
                    <while pos:line="237" pos:column="21">while<condition pos:line="237" pos:column="26">(<expr><op:operator pos:line="237" pos:column="27">(</op:operator><name pos:line="237" pos:column="28">line</name> <op:operator pos:line="237" pos:column="33">=</op:operator> <call><name><name pos:line="237" pos:column="35">sr</name><op:operator pos:line="237" pos:column="37">.</op:operator><name pos:line="237" pos:column="38">ReadLine</name></name><argument_list pos:line="237" pos:column="46">()</argument_list></call><op:operator pos:line="237" pos:column="48">)</op:operator> <op:operator pos:line="237" pos:column="50">!=</op:operator> <name pos:line="237" pos:column="53">null</name></expr>)</condition> <block pos:line="237" pos:column="59">{
                        <expr_stmt><expr><name pos:line="238" pos:column="25">xml</name> <op:operator pos:line="238" pos:column="29">+=</op:operator> <name pos:line="238" pos:column="32">line</name></expr>;</expr_stmt>
                    }</block></while>
                }</block></using>
            }</block> <catch pos:line="241" pos:column="15">catch<parameter_list pos:line="241" pos:column="20">(<param><decl><type><name pos:line="241" pos:column="21">Exception</name></type> <name pos:line="241" pos:column="31">e</name></decl></param>)</parameter_list> <block pos:line="241" pos:column="34">{
                <expr_stmt><expr><call><name><name pos:line="242" pos:column="17">Console</name><op:operator pos:line="242" pos:column="24">.</op:operator><name pos:line="242" pos:column="25">WriteLine</name></name><argument_list pos:line="242" pos:column="34">(<argument><expr><name><name pos:line="242" pos:column="35">e</name><op:operator pos:line="242" pos:column="36">.</op:operator><name pos:line="242" pos:column="37">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>

            <return pos:line="245" pos:column="13">return <expr><name pos:line="245" pos:column="20">xml</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="248" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="249" pos:column="9">/// Gets the index number of a given filename from the SrcML document. If this is being</comment>
        <comment type="line" pos:line="250" pos:column="9">/// passed to SrcML.ExtractSourceFile(), +1 must be added to it.</comment>
        <comment type="line" pos:line="251" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="252" pos:column="9">/// &lt;param name="fileName"&gt;The filename to get an index for.&lt;/param&gt;</comment>
        <comment type="line" pos:line="253" pos:column="9">/// &lt;returns&gt;the index of the file. -1 if not found.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="254" pos:column="9">public</specifier> <name pos:line="254" pos:column="16">int</name></type> <name pos:line="254" pos:column="20">IndexOfUnit</name><parameter_list pos:line="254" pos:column="31">(<param><decl><type><name pos:line="254" pos:column="32">string</name></type> <name pos:line="254" pos:column="39">fileName</name></decl></param>)</parameter_list> <block pos:line="254" pos:column="49">{
            <decl_stmt><decl><type><name><name pos:line="255" pos:column="13">IEnumerable</name><argument_list pos:line="255" pos:column="24">&lt;<argument><name pos:line="255" pos:column="25">string</name></argument>&gt;</argument_list></name></type> <name pos:line="255" pos:column="33">filenames</name> <init pos:line="255" pos:column="43">= <expr><linq><from pos:line="255" pos:column="45">from <expr><name pos:line="255" pos:column="50">attr</name></expr> <in pos:line="255" pos:column="55">in <expr><call><name><name pos:line="255" pos:column="58">this</name><op:operator pos:line="255" pos:column="62">.</op:operator><name pos:line="255" pos:column="63">FileUnits</name><op:operator pos:line="255" pos:column="72">.</op:operator><name pos:line="255" pos:column="73">Attributes</name></name><argument_list pos:line="255" pos:column="83">(<argument><expr><lit:literal type="string" pos:line="255" pos:column="84">"filename"</lit:literal></expr></argument>)</argument_list></call></expr></in></from>
                                            <select pos:line="256" pos:column="45">select <expr><op:operator pos:line="256" pos:column="52">(</op:operator><name pos:line="256" pos:column="53">string</name><op:operator pos:line="256" pos:column="59">)</op:operator> <name pos:line="256" pos:column="61">attr</name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <return pos:line="257" pos:column="13">return <expr><call><name><name pos:line="257" pos:column="20">filenames</name><op:operator pos:line="257" pos:column="29">.</op:operator><name><name pos:line="257" pos:column="30">ToList</name><argument_list pos:line="257" pos:column="36">&lt;<argument><name pos:line="257" pos:column="37">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="257" pos:column="44">()</argument_list></call><op:operator pos:line="257" pos:column="46">.</op:operator><call><name pos:line="257" pos:column="47">IndexOf</name><argument_list pos:line="257" pos:column="54">(<argument><expr><call><name><name pos:line="257" pos:column="55">Path</name><op:operator pos:line="257" pos:column="59">.</op:operator><name pos:line="257" pos:column="60">GetFileName</name></name><argument_list pos:line="257" pos:column="71">(<argument><expr><name pos:line="257" pos:column="72">fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="260" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="261" pos:column="9">/// Merges this SrcMLFile with another SrcMLFile.</comment>
        <comment type="line" pos:line="262" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="263" pos:column="9">/// &lt;param name="other"&gt;The second SrcML File to merge with.&lt;/param&gt;</comment>
        <comment type="line" pos:line="264" pos:column="9">/// &lt;param name="outputFileName"&gt;The path to write the resulting SrcMLFile to.&lt;/param&gt;</comment>
        <comment type="line" pos:line="265" pos:column="9">/// &lt;returns&gt;The newly merged SrcMLFile.&lt;/returns&gt;</comment>
        <function><type><attribute pos:line="266" pos:column="9">[<expr><call><name><name pos:line="266" pos:column="10">System</name><op:operator pos:line="266" pos:column="16">.</op:operator><name pos:line="266" pos:column="17">Diagnostics</name><op:operator pos:line="266" pos:column="28">.</op:operator><name pos:line="266" pos:column="29">CodeAnalysis</name><op:operator pos:line="266" pos:column="41">.</op:operator><name pos:line="266" pos:column="42">SuppressMessage</name></name><argument_list pos:line="266" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="266" pos:column="58">"Microsoft.Design"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="266" pos:column="78">"CA1011:ConsiderPassingBaseTypesAsParameters"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="267" pos:column="9">public</specifier> <name pos:line="267" pos:column="16">SrcMLFile</name></type> <name pos:line="267" pos:column="26">Merge</name><parameter_list pos:line="267" pos:column="31">(<param><decl><type><name pos:line="267" pos:column="32">SrcMLFile</name></type> <name pos:line="267" pos:column="42">other</name></decl></param>, <param><decl><type><name pos:line="267" pos:column="49">string</name></type> <name pos:line="267" pos:column="56">outputFileName</name></decl></param>)</parameter_list> <block pos:line="267" pos:column="72">{
            <comment type="line" pos:line="268" pos:column="13">//if (null == other)</comment>
            <comment type="line" pos:line="269" pos:column="13">//    throw new ArgumentNullException("other");</comment>

            <using pos:line="271" pos:column="13">using(<decl><type><name pos:line="271" pos:column="19">XmlWriter</name></type> <name pos:line="271" pos:column="29">xw</name> <init pos:line="271" pos:column="32">= <expr><call><name><name pos:line="271" pos:column="34">XmlWriter</name><op:operator pos:line="271" pos:column="43">.</op:operator><name pos:line="271" pos:column="44">Create</name></name><argument_list pos:line="271" pos:column="50">(<argument><expr><name pos:line="271" pos:column="51">outputFileName</name></expr></argument>, <argument><expr><op:operator pos:line="271" pos:column="67">new</op:operator> <call><name pos:line="271" pos:column="71">XmlWriterSettings</name><argument_list pos:line="271" pos:column="88">()</argument_list></call> <block pos:line="271" pos:column="91">{ <expr><name pos:line="271" pos:column="93">Indent</name> <op:operator pos:line="271" pos:column="100">=</op:operator> <lit:literal type="boolean" pos:line="271" pos:column="102">false</lit:literal></expr> }</block></expr></argument>)</argument_list></call></expr></init></decl>) <block pos:line="271" pos:column="112">{
                <expr_stmt><expr><call><name><name pos:line="272" pos:column="17">xw</name><op:operator pos:line="272" pos:column="19">.</op:operator><name pos:line="272" pos:column="20">WriteStartElement</name></name><argument_list pos:line="272" pos:column="37">(<argument><expr><name><name pos:line="272" pos:column="38">SRC</name><op:operator pos:line="272" pos:column="41">.</op:operator><name pos:line="272" pos:column="42">Unit</name><op:operator pos:line="272" pos:column="46">.</op:operator><name pos:line="272" pos:column="47">LocalName</name></name></expr></argument>, <argument><expr><name><name pos:line="272" pos:column="58">SRC</name><op:operator pos:line="272" pos:column="61">.</op:operator><name pos:line="272" pos:column="62">Unit</name><op:operator pos:line="272" pos:column="66">.</op:operator><name pos:line="272" pos:column="67">NamespaceName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="273" pos:column="17">WriteXmlnsAttributes</name><argument_list pos:line="273" pos:column="37">(<argument><expr><name pos:line="273" pos:column="38">xw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <foreach pos:line="275" pos:column="17">foreach(<init><decl><type><name pos:line="275" pos:column="25">var</name></type> <name pos:line="275" pos:column="29">unit</name> <range pos:line="275" pos:column="34">in <expr><name><name pos:line="275" pos:column="37">this</name><op:operator pos:line="275" pos:column="41">.</op:operator><name pos:line="275" pos:column="42">FileUnits</name></name></expr></range></decl></init>) <block pos:line="275" pos:column="53">{
                    <expr_stmt><expr><call><name><name pos:line="276" pos:column="21">unit</name><op:operator pos:line="276" pos:column="25">.</op:operator><name pos:line="276" pos:column="26">WriteTo</name></name><argument_list pos:line="276" pos:column="33">(<argument><expr><name pos:line="276" pos:column="34">xw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>

                <if pos:line="279" pos:column="17">if<condition pos:line="279" pos:column="19">(<expr><name pos:line="279" pos:column="20">other</name> <op:operator pos:line="279" pos:column="26">!=</op:operator> <name pos:line="279" pos:column="29">null</name></expr>)</condition><then pos:line="279" pos:column="34"> <block pos:line="279" pos:column="35">{
                    <foreach pos:line="280" pos:column="21">foreach(<init><decl><type><name pos:line="280" pos:column="29">var</name></type> <name pos:line="280" pos:column="33">unit</name> <range pos:line="280" pos:column="38">in <expr><name><name pos:line="280" pos:column="41">other</name><op:operator pos:line="280" pos:column="46">.</op:operator><name pos:line="280" pos:column="47">FileUnits</name></name></expr></range></decl></init>) <block pos:line="280" pos:column="58">{
                        <expr_stmt><expr><call><name><name pos:line="281" pos:column="25">unit</name><op:operator pos:line="281" pos:column="29">.</op:operator><name pos:line="281" pos:column="30">WriteTo</name></name><argument_list pos:line="281" pos:column="37">(<argument><expr><name pos:line="281" pos:column="38">xw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></foreach>
                }</block></then></if>

                <expr_stmt><expr><call><name><name pos:line="285" pos:column="17">xw</name><op:operator pos:line="285" pos:column="19">.</op:operator><name pos:line="285" pos:column="20">WriteEndElement</name></name><argument_list pos:line="285" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
            }</block></using>
            <return pos:line="287" pos:column="13">return <expr><op:operator pos:line="287" pos:column="20">new</op:operator> <call><name pos:line="287" pos:column="24">SrcMLFile</name><argument_list pos:line="287" pos:column="33">(<argument><expr><name pos:line="287" pos:column="34">outputFileName</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="290" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="291" pos:column="9">/// Works in conjunction with &lt;see cref="AbstractDocument.FileUnits"/&gt; to execute a query</comment>
        <comment type="line" pos:line="292" pos:column="9">/// against each file in a SrcML document</comment>
        <comment type="line" pos:line="293" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="294" pos:column="9">/// &lt;param name="transform"&gt;The transform object with the</comment>
        <comment type="line" pos:line="295" pos:column="9">/// see cref="ITransform.Query"/&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="296" pos:column="9">/// &lt;returns&gt;yields each node that matches the query in</comment>
        <comment type="line" pos:line="297" pos:column="9">/// &lt;paramref name="transform"/&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="298" pos:column="9">public</specifier> <name><name pos:line="298" pos:column="16">IEnumerable</name><argument_list pos:line="298" pos:column="27">&lt;<argument><name pos:line="298" pos:column="28">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="298" pos:column="38">QueryEachUnit</name><parameter_list pos:line="298" pos:column="51">(<param><decl><type><name pos:line="298" pos:column="52">ITransform</name></type> <name pos:line="298" pos:column="63">transform</name></decl></param>)</parameter_list> <block pos:line="298" pos:column="74">{
            <foreach pos:line="299" pos:column="13">foreach(<init><decl><type><name pos:line="299" pos:column="21">var</name></type> <name pos:line="299" pos:column="25">unit</name> <range pos:line="299" pos:column="30">in <expr><name><name pos:line="299" pos:column="33">this</name><op:operator pos:line="299" pos:column="37">.</op:operator><name pos:line="299" pos:column="38">FileUnits</name></name></expr></range></decl></init>) <block pos:line="299" pos:column="49">{
                <foreach pos:line="300" pos:column="17">foreach(<init><decl><type><name pos:line="300" pos:column="25">var</name></type> <name pos:line="300" pos:column="29">result</name> <range pos:line="300" pos:column="36">in <expr><call><name><name pos:line="300" pos:column="39">transform</name><op:operator pos:line="300" pos:column="48">.</op:operator><name pos:line="300" pos:column="49">Query</name></name><argument_list pos:line="300" pos:column="54">(<argument><expr><name pos:line="300" pos:column="55">unit</name></expr></argument>)</argument_list></call></expr></range></decl></init>)
                    <return><specifier pos:line="301" pos:column="21">yield</specifier> return <expr><name pos:line="301" pos:column="34">result</name></expr>;</return></foreach>
            }</block></foreach>
        }</block></function>

        <comment type="line" pos:line="305" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="306" pos:column="9">/// Get the file path relative to &lt;see cref="ProjectDirectory"/&gt; for the unit containing the</comment>
        <comment type="line" pos:line="307" pos:column="9">/// given node.</comment>
        <comment type="line" pos:line="308" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="309" pos:column="9">/// &lt;param name="node"&gt;The node.&lt;/param&gt;</comment>
        <comment type="line" pos:line="310" pos:column="9">/// &lt;returns&gt;The relative file path to that node.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="311" pos:column="9">public</specifier> <name pos:line="311" pos:column="16">string</name></type> <name pos:line="311" pos:column="23">RelativePath</name><parameter_list pos:line="311" pos:column="35">(<param><decl><type><name pos:line="311" pos:column="36">XNode</name></type> <name pos:line="311" pos:column="42">node</name></decl></param>)</parameter_list> <block pos:line="311" pos:column="48">{
            <if pos:line="312" pos:column="13">if<condition pos:line="312" pos:column="15">(<expr><name pos:line="312" pos:column="16">null</name> <op:operator pos:line="312" pos:column="21">==</op:operator> <name pos:line="312" pos:column="24">node</name></expr>)</condition><then pos:line="312" pos:column="29">
                <throw pos:line="313" pos:column="17">throw <expr><op:operator pos:line="313" pos:column="23">new</op:operator> <call><name pos:line="313" pos:column="27">ArgumentNullException</name><argument_list pos:line="313" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="313" pos:column="49">"node"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="315" pos:column="13">var</name></type> <name pos:line="315" pos:column="17">unit</name> <init pos:line="315" pos:column="22">= <expr><call><name><name pos:line="315" pos:column="24">node</name><op:operator pos:line="315" pos:column="28">.</op:operator><name pos:line="315" pos:column="29">Ancestors</name></name><argument_list pos:line="315" pos:column="38">(<argument><expr><name><name pos:line="315" pos:column="39">SRC</name><op:operator pos:line="315" pos:column="42">.</op:operator><name pos:line="315" pos:column="43">Unit</name></name></expr></argument>)</argument_list></call><op:operator pos:line="315" pos:column="48">.</op:operator><call><name pos:line="315" pos:column="49">First</name><argument_list pos:line="315" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="316" pos:column="13">var</name></type> <name pos:line="316" pos:column="17">path</name> <init pos:line="316" pos:column="22">= <expr><call><name pos:line="316" pos:column="24">GetPathForUnit</name><argument_list pos:line="316" pos:column="38">(<argument><expr><name pos:line="316" pos:column="39">unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="318" pos:column="13">int</name></type> <name pos:line="318" pos:column="17">start</name> <init pos:line="318" pos:column="23">= <expr><name><name pos:line="318" pos:column="25">this</name><op:operator pos:line="318" pos:column="29">.</op:operator><name pos:line="318" pos:column="30">ProjectDirectory</name><op:operator pos:line="318" pos:column="46">.</op:operator><name pos:line="318" pos:column="47">Length</name></name></expr></init></decl>;</decl_stmt>
            <if pos:line="319" pos:column="13">if<condition pos:line="319" pos:column="15">(<expr><name><name pos:line="319" pos:column="16">this</name><op:operator pos:line="319" pos:column="20">.</op:operator><name pos:line="319" pos:column="21">ProjectDirectory</name><index pos:line="319" pos:column="37">[<expr><name pos:line="319" pos:column="38">start</name> <op:operator pos:line="319" pos:column="44">-</op:operator> <lit:literal type="number" pos:line="319" pos:column="46">1</lit:literal></expr>]</index></name> <op:operator pos:line="319" pos:column="49">!=</op:operator> <name><name pos:line="319" pos:column="52">Path</name><op:operator pos:line="319" pos:column="56">.</op:operator><name pos:line="319" pos:column="57">DirectorySeparatorChar</name></name></expr>)</condition><then pos:line="319" pos:column="80">
                <expr_stmt><expr><name pos:line="320" pos:column="17">start</name><op:operator pos:line="320" pos:column="22">++</op:operator></expr>;</expr_stmt></then></if>
            <expr_stmt><expr><name pos:line="321" pos:column="13">path</name> <op:operator pos:line="321" pos:column="18">=</op:operator> <call><name><name pos:line="321" pos:column="20">path</name><op:operator pos:line="321" pos:column="24">.</op:operator><name pos:line="321" pos:column="25">Substring</name></name><argument_list pos:line="321" pos:column="34">(<argument><expr><name pos:line="321" pos:column="35">start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:line="323" pos:column="13">return <expr><name pos:line="323" pos:column="20">path</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="326" pos:column="9">private</specifier> <name pos:line="326" pos:column="17">string</name></type> <name pos:line="326" pos:column="24">getCommonPath</name><parameter_list pos:line="326" pos:column="37">()</parameter_list> <block pos:line="326" pos:column="40">{
            <decl_stmt><decl><type><name pos:line="327" pos:column="13">XAttribute</name></type> <name pos:line="327" pos:column="24">dir</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="328" pos:column="13">string</name></type> <name pos:line="328" pos:column="20">commonPath</name></decl>;</decl_stmt>
            <if pos:line="329" pos:column="13">if<condition pos:line="329" pos:column="15">(<expr><call><name><name pos:line="329" pos:column="16">RootAttributeDictionary</name><op:operator pos:line="329" pos:column="39">.</op:operator><name pos:line="329" pos:column="40">TryGetValue</name></name><argument_list pos:line="329" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="329" pos:column="52">"dir"</lit:literal></expr></argument>, <argument><expr pos:line="329" pos:column="59">out <name pos:line="329" pos:column="63">dir</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="329" pos:column="68"> <block pos:line="329" pos:column="69">{
                <expr_stmt><expr><name pos:line="330" pos:column="17">commonPath</name> <op:operator pos:line="330" pos:column="28">=</op:operator> <name><name pos:line="330" pos:column="30">dir</name><op:operator pos:line="330" pos:column="33">.</op:operator><name pos:line="330" pos:column="34">Value</name></name></expr>;</expr_stmt>
            }</block></then> <else pos:line="331" pos:column="15">else <if pos:line="331" pos:column="20">if<condition pos:line="331" pos:column="22">(<expr><lit:literal type="number" pos:line="331" pos:column="23">0</lit:literal> <op:operator pos:line="331" pos:column="25">==</op:operator> <name><name pos:line="331" pos:column="28">this</name><op:operator pos:line="331" pos:column="32">.</op:operator><name pos:line="331" pos:column="33">NumberOfNestedFileUnits</name></name></expr>)</condition><then pos:line="331" pos:column="57"> <block pos:line="331" pos:column="58">{
                <expr_stmt><expr><name pos:line="332" pos:column="17">commonPath</name> <op:operator pos:line="332" pos:column="28">=</op:operator> <call><name><name pos:line="332" pos:column="30">Path</name><op:operator pos:line="332" pos:column="34">.</op:operator><name pos:line="332" pos:column="35">GetDirectoryName</name></name><argument_list pos:line="332" pos:column="51">(<argument><expr><call><name pos:line="332" pos:column="52">GetPathForUnit</name><argument_list pos:line="332" pos:column="66">(<argument><expr><call><name><name pos:line="332" pos:column="67">this</name><op:operator pos:line="332" pos:column="71">.</op:operator><name pos:line="332" pos:column="72">FileUnits</name><op:operator pos:line="332" pos:column="81">.</op:operator><name pos:line="332" pos:column="82">First</name></name><argument_list pos:line="332" pos:column="87">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="333" pos:column="15">else <block pos:line="333" pos:column="20">{
                <decl_stmt><decl><type><name pos:line="334" pos:column="17">var</name></type> <name pos:line="334" pos:column="21">folders</name> <init pos:line="334" pos:column="29">= <expr><linq><from pos:line="334" pos:column="31">from <expr><name pos:line="334" pos:column="36">unit</name></expr> <in pos:line="334" pos:column="41">in <expr><name><name pos:line="334" pos:column="44">this</name><op:operator pos:line="334" pos:column="48">.</op:operator><name pos:line="334" pos:column="49">FileUnits</name></name></expr></in></from>
                              <let pos:line="335" pos:column="31">let <expr><name pos:line="335" pos:column="35">path</name> <op:operator pos:line="335" pos:column="40">=</op:operator> <call><name><name pos:line="335" pos:column="42">Path</name><op:operator pos:line="335" pos:column="46">.</op:operator><name pos:line="335" pos:column="47">GetDirectoryName</name></name><argument_list pos:line="335" pos:column="63">(<argument><expr><call><name pos:line="335" pos:column="64">GetPathForUnit</name><argument_list pos:line="335" pos:column="78">(<argument><expr><name pos:line="335" pos:column="79">unit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></let>
                              <select pos:line="336" pos:column="31">select <expr><name pos:line="336" pos:column="38">path</name></expr></select></linq></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name pos:line="337" pos:column="17">commonPath</name> <op:operator pos:line="337" pos:column="28">=</op:operator> <call><name><name pos:line="337" pos:column="30">Utilities</name><op:operator pos:line="337" pos:column="39">.</op:operator><name pos:line="337" pos:column="40">FileHelper</name><op:operator pos:line="337" pos:column="50">.</op:operator><name pos:line="337" pos:column="51">GetCommonPath</name></name><argument_list pos:line="337" pos:column="64">(<argument><expr><name pos:line="337" pos:column="65">folders</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if></else></if>

            <return pos:line="340" pos:column="13">return <expr><name pos:line="340" pos:column="20">commonPath</name></expr>;</return>
        }</block></function>

        <cpp:region pos:line="343" pos:column="9">#<cpp:directive pos:line="343" pos:column="10">region</cpp:directive> Save</cpp:region>

        <comment type="line" pos:line="345" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="346" pos:column="9">/// Writes this SrcML file to</comment>
        <comment type="line" pos:line="347" pos:column="9">/// &lt;paramref name="fileName"/&gt;with changes stored in</comment>
        <comment type="line" pos:line="348" pos:column="9">/// &lt;paramref name="changedFiles"/&gt;. Currently, this only handles changes to existing files.</comment>
        <comment type="line" pos:line="349" pos:column="9">/// New files will be ignored.</comment>
        <comment type="line" pos:line="350" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="351" pos:column="9">/// &lt;param name="fileName"&gt;The file to write to. If it exists it will be deleted and</comment>
        <comment type="line" pos:line="352" pos:column="9">/// replaced.&lt;/param&gt;</comment>
        <comment type="line" pos:line="353" pos:column="9">/// &lt;param name="changedFiles"&gt;A list of units with changes. These will be substituted for</comment>
        <comment type="line" pos:line="354" pos:column="9">/// the original units.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="355" pos:column="9">public</specifier> <name pos:line="355" pos:column="16">void</name></type> <name pos:line="355" pos:column="21">Save</name><parameter_list pos:line="355" pos:column="25">(<param><decl><type><name pos:line="355" pos:column="26">string</name></type> <name pos:line="355" pos:column="33">fileName</name></decl></param>, <param><decl><type><name><name pos:line="355" pos:column="43">IEnumerable</name><argument_list pos:line="355" pos:column="54">&lt;<argument><name pos:line="355" pos:column="55">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="355" pos:column="65">changedFiles</name></decl></param>)</parameter_list> <block pos:line="355" pos:column="79">{
            <if pos:line="356" pos:column="13">if<condition pos:line="356" pos:column="15">(<expr><name pos:line="356" pos:column="16">null</name> <op:operator pos:line="356" pos:column="21">==</op:operator> <name pos:line="356" pos:column="24">changedFiles</name></expr>)</condition><then pos:line="356" pos:column="37">
                <throw pos:line="357" pos:column="17">throw <expr><op:operator pos:line="357" pos:column="23">new</op:operator> <call><name pos:line="357" pos:column="27">ArgumentNullException</name><argument_list pos:line="357" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="357" pos:column="49">"changedFiles"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="359" pos:column="13">var</name></type> <name pos:line="359" pos:column="17">tempFileName</name> <init pos:line="359" pos:column="30">= <expr><call><name><name pos:line="359" pos:column="32">Path</name><op:operator pos:line="359" pos:column="36">.</op:operator><name pos:line="359" pos:column="37">GetTempFileName</name></name><argument_list pos:line="359" pos:column="52">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="360" pos:column="13">Dictionary</name><argument_list pos:line="360" pos:column="23">&lt;<argument><name pos:line="360" pos:column="24">string</name></argument>, <argument><name pos:line="360" pos:column="32">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="360" pos:column="42">changedDict</name> <init pos:line="360" pos:column="54">= <expr><op:operator pos:line="360" pos:column="56">new</op:operator> <call><name><name pos:line="360" pos:column="60">Dictionary</name><argument_list pos:line="360" pos:column="70">&lt;<argument><name pos:line="360" pos:column="71">string</name></argument>, <argument><name pos:line="360" pos:column="79">XElement</name></argument>&gt;</argument_list></name><argument_list pos:line="360" pos:column="88">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <foreach pos:line="362" pos:column="13">foreach(<init><decl><type><name pos:line="362" pos:column="21">var</name></type> <name pos:line="362" pos:column="25">change</name> <range pos:line="362" pos:column="32">in <expr><name pos:line="362" pos:column="35">changedFiles</name></expr></range></decl></init>) <block pos:line="362" pos:column="49">{
                <decl_stmt><decl><type><name pos:line="363" pos:column="17">var</name></type> <name pos:line="363" pos:column="21">path</name> <init pos:line="363" pos:column="26">= <expr><call><name pos:line="363" pos:column="28">GetPathForUnit</name><argument_list pos:line="363" pos:column="42">(<argument><expr><name pos:line="363" pos:column="43">change</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name pos:line="364" pos:column="17">changedDict</name><index pos:line="364" pos:column="28">[<expr><name pos:line="364" pos:column="29">path</name></expr>]</index></name> <op:operator pos:line="364" pos:column="35">=</op:operator> <name pos:line="364" pos:column="37">change</name></expr>;</expr_stmt>
            }</block></foreach>

            <using pos:line="367" pos:column="13">using(<decl><type><name pos:line="367" pos:column="19">XmlWriter</name></type> <name pos:line="367" pos:column="29">xw</name> <init pos:line="367" pos:column="32">= <expr><call><name><name pos:line="367" pos:column="34">XmlWriter</name><op:operator pos:line="367" pos:column="43">.</op:operator><name pos:line="367" pos:column="44">Create</name></name><argument_list pos:line="367" pos:column="50">(<argument><expr><name pos:line="367" pos:column="51">tempFileName</name></expr></argument>, <argument><expr><op:operator pos:line="367" pos:column="65">new</op:operator> <call><name pos:line="367" pos:column="69">XmlWriterSettings</name><argument_list pos:line="367" pos:column="86">()</argument_list></call> <block pos:line="367" pos:column="89">{ <expr><name pos:line="367" pos:column="91">Indent</name> <op:operator pos:line="367" pos:column="98">=</op:operator> <lit:literal type="boolean" pos:line="367" pos:column="100">false</lit:literal></expr> }</block></expr></argument>)</argument_list></call></expr></init></decl>) <block pos:line="367" pos:column="110">{
                <expr_stmt><expr><call><name><name pos:line="368" pos:column="17">xw</name><op:operator pos:line="368" pos:column="19">.</op:operator><name pos:line="368" pos:column="20">WriteStartElement</name></name><argument_list pos:line="368" pos:column="37">(<argument><expr><name><name pos:line="368" pos:column="38">SRC</name><op:operator pos:line="368" pos:column="41">.</op:operator><name pos:line="368" pos:column="42">Unit</name><op:operator pos:line="368" pos:column="46">.</op:operator><name pos:line="368" pos:column="47">LocalName</name></name></expr></argument>, <argument><expr><name><name pos:line="368" pos:column="58">SRC</name><op:operator pos:line="368" pos:column="61">.</op:operator><name pos:line="368" pos:column="62">Unit</name><op:operator pos:line="368" pos:column="66">.</op:operator><name pos:line="368" pos:column="67">NamespaceName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="369" pos:column="17">WriteXmlnsAttributes</name><argument_list pos:line="369" pos:column="37">(<argument><expr><name pos:line="369" pos:column="38">xw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <foreach pos:line="371" pos:column="17">foreach(<init><decl><type><name pos:line="371" pos:column="25">var</name></type> <name pos:line="371" pos:column="29">unit</name> <range pos:line="371" pos:column="34">in <expr><name><name pos:line="371" pos:column="37">this</name><op:operator pos:line="371" pos:column="41">.</op:operator><name pos:line="371" pos:column="42">FileUnits</name></name></expr></range></decl></init>) <block pos:line="371" pos:column="53">{
                    <decl_stmt><decl><type><name pos:line="372" pos:column="21">string</name></type> <name pos:line="372" pos:column="28">path</name> <init pos:line="372" pos:column="33">= <expr><call><name pos:line="372" pos:column="35">GetPathForUnit</name><argument_list pos:line="372" pos:column="49">(<argument><expr><name pos:line="372" pos:column="50">unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><op:operator pos:line="374" pos:column="21">(</op:operator><call><name><name pos:line="374" pos:column="22">changedDict</name><op:operator pos:line="374" pos:column="33">.</op:operator><name pos:line="374" pos:column="34">ContainsKey</name></name><argument_list pos:line="374" pos:column="45">(<argument><expr><name pos:line="374" pos:column="46">path</name></expr></argument>)</argument_list></call> <op:operator pos:line="374" pos:column="52">?</op:operator> <name><name pos:line="374" pos:column="54">changedDict</name><index pos:line="374" pos:column="65">[<expr><name pos:line="374" pos:column="66">path</name></expr>]</index></name> <op:operator pos:line="374" pos:column="72">:</op:operator> <name pos:line="374" pos:column="74">unit</name><op:operator pos:line="374" pos:column="78">)</op:operator><op:operator pos:line="374" pos:column="79">.</op:operator><call><name pos:line="374" pos:column="80">WriteTo</name><argument_list pos:line="374" pos:column="87">(<argument><expr><name pos:line="374" pos:column="88">xw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
                <expr_stmt><expr><call><name><name pos:line="376" pos:column="17">xw</name><op:operator pos:line="376" pos:column="19">.</op:operator><name pos:line="376" pos:column="20">WriteEndElement</name></name><argument_list pos:line="376" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
            }</block></using>

            <if pos:line="379" pos:column="13">if<condition pos:line="379" pos:column="15">(<expr><call><name><name pos:line="379" pos:column="16">File</name><op:operator pos:line="379" pos:column="20">.</op:operator><name pos:line="379" pos:column="21">Exists</name></name><argument_list pos:line="379" pos:column="27">(<argument><expr><name pos:line="379" pos:column="28">fileName</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="379" pos:column="38">
                <expr_stmt><expr><call><name><name pos:line="380" pos:column="17">File</name><op:operator pos:line="380" pos:column="21">.</op:operator><name pos:line="380" pos:column="22">Delete</name></name><argument_list pos:line="380" pos:column="28">(<argument><expr><name pos:line="380" pos:column="29">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

            <expr_stmt><expr><call><name><name pos:line="382" pos:column="13">File</name><op:operator pos:line="382" pos:column="17">.</op:operator><name pos:line="382" pos:column="18">Move</name></name><argument_list pos:line="382" pos:column="22">(<argument><expr><name pos:line="382" pos:column="23">tempFileName</name></expr></argument>, <argument><expr><name pos:line="382" pos:column="37">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="385" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="386" pos:column="9">/// Writes changes to this SrcML file back to the current file</comment>
        <comment type="line" pos:line="387" pos:column="9">/// (&lt;see cref="AbstractDocument.FileName"/&gt;).</comment>
        <comment type="line" pos:line="388" pos:column="9">/// &lt;seealso cref="Save(string, IEnumerable&amp;lt;XElement&amp;gt;)"/&gt;</comment>
        <comment type="line" pos:line="389" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="390" pos:column="9">/// &lt;param name="changedFiles"&gt;a list of units with changes. These will be substituted for</comment>
        <comment type="line" pos:line="391" pos:column="9">/// the original units&lt;/param&gt;</comment>
        <function><type><specifier pos:line="392" pos:column="9">public</specifier> <name pos:line="392" pos:column="16">void</name></type> <name pos:line="392" pos:column="21">Save</name><parameter_list pos:line="392" pos:column="25">(<param><decl><type><name><name pos:line="392" pos:column="26">IEnumerable</name><argument_list pos:line="392" pos:column="37">&lt;<argument><name pos:line="392" pos:column="38">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="392" pos:column="48">changedFiles</name></decl></param>)</parameter_list> <block pos:line="392" pos:column="62">{
            <expr_stmt><expr><call><name pos:line="393" pos:column="13">Save</name><argument_list pos:line="393" pos:column="17">(<argument><expr><name><name pos:line="393" pos:column="18">this</name><op:operator pos:line="393" pos:column="22">.</op:operator><name pos:line="393" pos:column="23">ArchivePath</name></name></expr></argument>, <argument><expr><name pos:line="393" pos:column="36">changedFiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="396" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="397" pos:column="9">/// Writes this SrcML file to</comment>
        <comment type="line" pos:line="398" pos:column="9">/// &lt;paramref name="fileName"/&gt;without making any changes. &lt;para&gt;This is identical to</comment>
        <comment type="line" pos:line="399" pos:column="9">/// &lt;c&gt;srcmlDoc.Save(fileName, Enumerable.Empty&amp;lt;XElement&amp;gt;()&lt;/c&gt;&lt;/para&gt;</comment>
        <comment type="line" pos:line="400" pos:column="9">/// &lt;seealso cref="Enumerable.Empty&amp;lt;XElement&amp;gt;" /&gt;</comment>
        <comment type="line" pos:line="401" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="402" pos:column="9">/// &lt;param name="fileName"&gt;the file to write to. If it exists it will be deleted and</comment>
        <comment type="line" pos:line="403" pos:column="9">/// replaced.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="404" pos:column="9">public</specifier> <name pos:line="404" pos:column="16">void</name></type> <name pos:line="404" pos:column="21">Save</name><parameter_list pos:line="404" pos:column="25">(<param><decl><type><name pos:line="404" pos:column="26">string</name></type> <name pos:line="404" pos:column="33">fileName</name></decl></param>)</parameter_list> <block pos:line="404" pos:column="43">{
            <expr_stmt><expr><call><name pos:line="405" pos:column="13">Save</name><argument_list pos:line="405" pos:column="17">(<argument><expr><name pos:line="405" pos:column="18">fileName</name></expr></argument>, <argument><expr><call><name><name pos:line="405" pos:column="28">Enumerable</name><op:operator pos:line="405" pos:column="38">.</op:operator><name><name pos:line="405" pos:column="39">Empty</name><argument_list pos:line="405" pos:column="44">&lt;<argument><name pos:line="405" pos:column="45">XElement</name></argument>&gt;</argument_list></name></name><argument_list pos:line="405" pos:column="54">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="408" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="409" pos:column="9">/// Saves the document to the file. This uses &lt;see cref="System.Xml.Linq.XDocument"/&gt;, which</comment>
        <comment type="line" pos:line="410" pos:column="9">/// is more memory intensive. &lt;seealso cref="XDocument.Save(string)"/&gt;</comment>
        <comment type="line" pos:line="411" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="412" pos:column="9">/// &lt;param name="fileName"&gt;The filename to write to.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="413" pos:column="9">public</specifier> <name pos:line="413" pos:column="16">void</name></type> <name pos:line="413" pos:column="21">Write</name><parameter_list pos:line="413" pos:column="26">(<param><decl><type><name pos:line="413" pos:column="27">string</name></type> <name pos:line="413" pos:column="34">fileName</name></decl></param>)</parameter_list> <block pos:line="413" pos:column="44">{
            <decl_stmt><decl><type><name pos:line="414" pos:column="13">var</name></type> <name pos:line="414" pos:column="17">doc</name> <init pos:line="414" pos:column="21">= <expr><call><name pos:line="414" pos:column="23">GetXDocument</name><argument_list pos:line="414" pos:column="35">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="415" pos:column="13">var</name></type> <name pos:line="415" pos:column="17">tmp</name> <init pos:line="415" pos:column="21">= <expr><call><name><name pos:line="415" pos:column="23">Path</name><op:operator pos:line="415" pos:column="27">.</op:operator><name pos:line="415" pos:column="28">GetTempFileName</name></name><argument_list pos:line="415" pos:column="43">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="417" pos:column="13">doc</name><op:operator pos:line="417" pos:column="16">.</op:operator><name pos:line="417" pos:column="17">Save</name></name><argument_list pos:line="417" pos:column="21">(<argument><expr><name pos:line="417" pos:column="22">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if pos:line="419" pos:column="13">if<condition pos:line="419" pos:column="15">(<expr><call><name><name pos:line="419" pos:column="16">File</name><op:operator pos:line="419" pos:column="20">.</op:operator><name pos:line="419" pos:column="21">Exists</name></name><argument_list pos:line="419" pos:column="27">(<argument><expr><name pos:line="419" pos:column="28">fileName</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="419" pos:column="38">
                <expr_stmt><expr><call><name><name pos:line="420" pos:column="17">File</name><op:operator pos:line="420" pos:column="21">.</op:operator><name pos:line="420" pos:column="22">Delete</name></name><argument_list pos:line="420" pos:column="28">(<argument><expr><name pos:line="420" pos:column="29">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            <expr_stmt><expr><call><name><name pos:line="421" pos:column="13">File</name><op:operator pos:line="421" pos:column="17">.</op:operator><name pos:line="421" pos:column="18">Move</name></name><argument_list pos:line="421" pos:column="22">(<argument><expr><name pos:line="421" pos:column="23">tmp</name></expr></argument>, <argument><expr><name pos:line="421" pos:column="28">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name pos:line="423" pos:column="13">this</name><op:operator pos:line="423" pos:column="17">.</op:operator><name pos:line="423" pos:column="18">ArchivePath</name></name> <op:operator pos:line="423" pos:column="30">=</op:operator> <name pos:line="423" pos:column="32">fileName</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="426" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="427" pos:column="9">/// Writes the document back to the current file &lt;see cref="AbstractDocument.FileName"/&gt;.</comment>
        <comment type="line" pos:line="428" pos:column="9">/// &lt;seealso cref="Write(string)"/&gt;</comment>
        <comment type="line" pos:line="429" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="430" pos:column="9">public</specifier> <name pos:line="430" pos:column="16">void</name></type> <name pos:line="430" pos:column="21">Write</name><parameter_list pos:line="430" pos:column="26">()</parameter_list> <block pos:line="430" pos:column="29">{
            <expr_stmt><expr><call><name pos:line="431" pos:column="13">Write</name><argument_list pos:line="431" pos:column="18">(<argument><expr><name><name pos:line="431" pos:column="19">this</name><op:operator pos:line="431" pos:column="23">.</op:operator><name pos:line="431" pos:column="24">ArchivePath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <cpp:endregion pos:line="434" pos:column="9">#<cpp:directive pos:line="434" pos:column="10">endregion</cpp:directive> Save</cpp:endregion>
    }</block></class>
}</block></namespace></unit>
