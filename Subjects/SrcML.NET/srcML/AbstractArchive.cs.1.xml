<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML\AbstractArchive.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Xml</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">Linq</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">IO</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">System</name><op:operator pos:line="7" pos:column="13">.</op:operator><name pos:line="7" pos:column="14">Xml</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">System</name><op:operator pos:line="8" pos:column="13">.</op:operator><name pos:line="8" pos:column="14">Collections</name><op:operator pos:line="8" pos:column="25">.</op:operator><name pos:line="8" pos:column="26">ObjectModel</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">System</name><op:operator pos:line="9" pos:column="13">.</op:operator><name pos:line="9" pos:column="14">Threading</name></name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">System</name><op:operator pos:line="10" pos:column="13">.</op:operator><name pos:line="10" pos:column="14">Threading</name><op:operator pos:line="10" pos:column="23">.</op:operator><name pos:line="10" pos:column="24">Tasks</name></name>;</using>
<using pos:line="11" pos:column="1">using <name><name pos:line="11" pos:column="7">ABB</name><op:operator pos:line="11" pos:column="10">.</op:operator><name pos:line="11" pos:column="11">SrcML</name><op:operator pos:line="11" pos:column="16">.</op:operator><name pos:line="11" pos:column="17">Utilities</name></name>;</using>

<namespace pos:line="13" pos:column="1">namespace <name><name pos:line="13" pos:column="11">ABB</name><op:operator pos:line="13" pos:column="14">.</op:operator><name pos:line="13" pos:column="15">SrcML</name></name>
<block pos:line="14" pos:column="1">{
    <comment type="line" pos:line="15" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="16" pos:column="5">/// The abstract archive class is the base class for archives. Archives are responsible for recording changes to files and then raising an &lt;see cref="FileChanged"&gt;event&lt;/see&gt; when they are done.</comment>
    <comment type="line" pos:line="17" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="18" pos:column="5">public</specifier> <specifier pos:line="18" pos:column="12">abstract</specifier> class <name pos:line="18" pos:column="27">AbstractArchive</name> <super pos:line="18" pos:column="43">: <name pos:line="18" pos:column="45">IDisposable</name></super>
    <block pos:line="19" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="20" pos:column="9">private</specifier> <name pos:line="20" pos:column="17">string</name></type> <name pos:line="20" pos:column="24">_archivePath</name></decl>;</decl_stmt>

        <constructor><specifier pos:line="22" pos:column="9">protected</specifier> <name pos:line="22" pos:column="19">AbstractArchive</name><parameter_list pos:line="22" pos:column="34">(<param><decl><type><name pos:line="22" pos:column="35">string</name></type> <name pos:line="22" pos:column="42">baseDirectory</name></decl></param>, <param><decl><type><name pos:line="22" pos:column="57">string</name></type> <name pos:line="22" pos:column="64">archiveSubDirectory</name></decl></param>)</parameter_list>
            <member_list pos:line="23" pos:column="13">: <call><name pos:line="23" pos:column="15">this</name><argument_list pos:line="23" pos:column="19">(<argument><expr><name pos:line="23" pos:column="20">baseDirectory</name></expr></argument>, <argument><expr><name pos:line="23" pos:column="35">archiveSubDirectory</name></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="56">TaskScheduler</name><op:operator pos:line="23" pos:column="69">.</op:operator><name pos:line="23" pos:column="70">Default</name></name></expr></argument>)</argument_list></call></member_list><block pos:line="23" pos:column="78">{ }</block></constructor>

        <comment type="line" pos:line="25" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="26" pos:column="9">/// Sets the archive path for AbstractArchive objects</comment>
        <comment type="line" pos:line="27" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="28" pos:column="9">/// &lt;param name="baseDirectory"&gt;the base directory&lt;/param&gt;</comment>
        <comment type="line" pos:line="29" pos:column="9">/// &lt;param name="archiveSubDirectory"&gt;the relative path within &lt;paramref name="baseDirectory"/&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="30" pos:column="9">/// &lt;param name="scheduler"&gt;the scheduler to use for asynchronous methods&lt;/param&gt;</comment>
        <constructor><specifier pos:line="31" pos:column="9">protected</specifier> <name pos:line="31" pos:column="19">AbstractArchive</name><parameter_list pos:line="31" pos:column="34">(<param><decl><type><name pos:line="31" pos:column="35">string</name></type> <name pos:line="31" pos:column="42">baseDirectory</name></decl></param>, <param><decl><type><name pos:line="31" pos:column="57">string</name></type> <name pos:line="31" pos:column="64">archiveSubDirectory</name></decl></param>, <param><decl><type><name pos:line="31" pos:column="85">TaskScheduler</name></type> <name pos:line="31" pos:column="99">scheduler</name></decl></param>)</parameter_list> <block pos:line="31" pos:column="110">{
            <expr_stmt><expr><name><name pos:line="32" pos:column="13">this</name><op:operator pos:line="32" pos:column="17">.</op:operator><name pos:line="32" pos:column="18">ArchivePath</name></name> <op:operator pos:line="32" pos:column="30">=</op:operator> <call><name><name pos:line="32" pos:column="32">Path</name><op:operator pos:line="32" pos:column="36">.</op:operator><name pos:line="32" pos:column="37">Combine</name></name><argument_list pos:line="32" pos:column="44">(<argument><expr><name pos:line="32" pos:column="45">baseDirectory</name></expr></argument>, <argument><expr><name pos:line="32" pos:column="60">archiveSubDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="33" pos:column="13">this</name><op:operator pos:line="33" pos:column="17">.</op:operator><name pos:line="33" pos:column="18">Scheduler</name></name> <op:operator pos:line="33" pos:column="28">=</op:operator> <name pos:line="33" pos:column="30">scheduler</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="34" pos:column="13">this</name><op:operator pos:line="34" pos:column="17">.</op:operator><name pos:line="34" pos:column="18">Factory</name></name> <op:operator pos:line="34" pos:column="26">=</op:operator> <op:operator pos:line="34" pos:column="28">new</op:operator> <call><name pos:line="34" pos:column="32">TaskFactory</name><argument_list pos:line="34" pos:column="43">(<argument><expr><name pos:line="34" pos:column="44">Scheduler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <constructor><specifier pos:line="37" pos:column="9">private</specifier> <name pos:line="37" pos:column="17">AbstractArchive</name><parameter_list pos:line="37" pos:column="32">()</parameter_list>
        <block pos:line="38" pos:column="9">{
            
        }</block></constructor>

        <comment type="line" pos:line="42" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="43" pos:column="9">/// Returns true if this archive is empty</comment>
        <comment type="line" pos:line="44" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="45" pos:column="9">public</specifier> <specifier pos:line="45" pos:column="16">abstract</specifier> <name pos:line="45" pos:column="25">bool</name></type> <name pos:line="45" pos:column="30">IsEmpty</name> <block pos:line="45" pos:column="38">{ <function_decl><name pos:line="45" pos:column="40">get</name>;</function_decl> }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="47" pos:column="9">protected</specifier> <name pos:line="47" pos:column="19">TaskFactory</name></type> <name pos:line="47" pos:column="31">Factory</name> <block pos:line="47" pos:column="39">{ <function_decl><name pos:line="47" pos:column="41">get</name>;</function_decl> <function_decl><specifier pos:line="47" pos:column="46">private</specifier> <name pos:line="47" pos:column="54">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="49" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="50" pos:column="9">/// Task factory for the asynchronous methods</comment>
        <comment type="line" pos:line="51" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="52" pos:column="9">public</specifier> <name pos:line="52" pos:column="16">TaskScheduler</name></type> <name pos:line="52" pos:column="30">Scheduler</name> <block pos:line="52" pos:column="40">{ <function_decl><name pos:line="52" pos:column="42">get</name>;</function_decl> <function_decl><specifier pos:line="52" pos:column="47">protected</specifier> <name pos:line="52" pos:column="57">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="54" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="55" pos:column="9">/// the extensions supported by this collection. The strings returned by this property should match the ones returned by &lt;see cref="System.IO.Path.GetExtension(string)"/&gt;</comment>
        <comment type="line" pos:line="56" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="57" pos:column="9">public</specifier> <specifier pos:line="57" pos:column="16">abstract</specifier> <name><name pos:line="57" pos:column="25">ICollection</name><argument_list pos:line="57" pos:column="36">&lt;<argument><name pos:line="57" pos:column="37">string</name></argument>&gt;</argument_list></name></type> <name pos:line="57" pos:column="45">SupportedExtensions</name> <block pos:line="57" pos:column="65">{ <function_decl><name pos:line="57" pos:column="67">get</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="59" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="60" pos:column="9">/// This event should be raised whenever the archive updates its internal representation for a file</comment>
        <comment type="line" pos:line="61" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="62" pos:column="9">public</specifier> <specifier pos:line="62" pos:column="16">virtual</specifier> <specifier pos:line="62" pos:column="24">event</specifier> <name><name pos:line="62" pos:column="30">EventHandler</name><argument_list pos:line="62" pos:column="42">&lt;<argument><name pos:line="62" pos:column="43">FileEventRaisedArgs</name></argument>&gt;</argument_list></name></type> <name pos:line="62" pos:column="64">FileChanged</name></decl>;</decl_stmt>

        <comment type="line" pos:line="64" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="65" pos:column="9">/// Sub-classes of AbstractArchive should implement the "add or update file" functionality here in order to enable &lt;see cref="AddOrUpdateFile"/&gt; and &lt;see cref="AddOrUpdateFileAsync"/&gt;</comment>
        <comment type="line" pos:line="66" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="67" pos:column="9">/// &lt;param name="fileName"&gt;The file name to add or update. If the file exists, it is deleted and then added regardless of whether or not the file is outdated&lt;/param&gt;</comment>
        <function_decl><type><specifier pos:line="68" pos:column="9">protected</specifier> <specifier pos:line="68" pos:column="19">abstract</specifier> <name pos:line="68" pos:column="28">FileEventType</name><type:modifier pos:line="68" pos:column="41">?</type:modifier></type> <name pos:line="68" pos:column="43">AddOrUpdateFileImpl</name><parameter_list pos:line="68" pos:column="62">(<param><decl><type><name pos:line="68" pos:column="63">string</name></type> <name pos:line="68" pos:column="70">fileName</name></decl></param>)</parameter_list>;</function_decl>

        <comment type="line" pos:line="70" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="71" pos:column="9">/// Sub-classes of AbstractArchive should implement the "delete file" functionality here in order to enable &lt;see cref="DeleteFile"/&gt; and &lt;see cref="DeleteFileAsync"/&gt;</comment>
        <comment type="line" pos:line="72" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="73" pos:column="9">/// &lt;param name="fileName"&gt;The file name to delete. If it does not exist, nothing happens&lt;/param&gt;</comment>
        <function_decl><type><specifier pos:line="74" pos:column="9">protected</specifier> <specifier pos:line="74" pos:column="19">abstract</specifier> <name pos:line="74" pos:column="28">bool</name></type> <name pos:line="74" pos:column="33">DeleteFileImpl</name><parameter_list pos:line="74" pos:column="47">(<param><decl><type><name pos:line="74" pos:column="48">string</name></type> <name pos:line="74" pos:column="55">fileName</name></decl></param>)</parameter_list>;</function_decl>

        <comment type="line" pos:line="76" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="77" pos:column="9">/// Sub-classes of AbstractArchive should implement the "rename file" functionality here in order to enable &lt;see cref="RenameFile"/&gt; and &lt;see cref="RenameFileAsync"/&gt;</comment>
        <comment type="line" pos:line="78" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="79" pos:column="9">/// &lt;param name="oldFileName"&gt;the existing path&lt;/param&gt;</comment>
        <comment type="line" pos:line="80" pos:column="9">/// &lt;param name="newFileName"&gt;the new path&lt;/param&gt;</comment>
        <function_decl><type><specifier pos:line="81" pos:column="9">protected</specifier> <specifier pos:line="81" pos:column="19">abstract</specifier> <name pos:line="81" pos:column="28">bool</name></type> <name pos:line="81" pos:column="33">RenameFileImpl</name><parameter_list pos:line="81" pos:column="47">(<param><decl><type><name pos:line="81" pos:column="48">string</name></type> <name pos:line="81" pos:column="55">oldFileName</name></decl></param>, <param><decl><type><name pos:line="81" pos:column="68">string</name></type> <name pos:line="81" pos:column="75">newFileName</name></decl></param>)</parameter_list>;</function_decl>

        <comment type="line" pos:line="83" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="84" pos:column="9">/// Adds or updates &lt;paramref name="fileName"/&gt; within the archive</comment>
        <comment type="line" pos:line="85" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="86" pos:column="9">/// &lt;param name="fileName"&gt;The file name to add or update. If the file exists, it is deleted and then added regardless of whether or not the file is outdated&lt;/param&gt;</comment>
        <function><type><specifier pos:line="87" pos:column="9">public</specifier> <specifier pos:line="87" pos:column="16">virtual</specifier> <name pos:line="87" pos:column="24">void</name></type> <name pos:line="87" pos:column="29">AddOrUpdateFile</name><parameter_list pos:line="87" pos:column="44">(<param><decl><type><name pos:line="87" pos:column="45">string</name></type> <name pos:line="87" pos:column="52">fileName</name></decl></param>)</parameter_list> <block pos:line="87" pos:column="62">{
            <comment type="line" pos:line="88" pos:column="13">// LogExceptions(task);</comment>
            <decl_stmt><decl><type><name pos:line="89" pos:column="13">var</name></type> <name pos:line="89" pos:column="17">eventType</name> <init pos:line="89" pos:column="27">= <expr><call><name pos:line="89" pos:column="29">AddOrUpdateFileImpl</name><argument_list pos:line="89" pos:column="48">(<argument><expr><name pos:line="89" pos:column="49">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="90" pos:column="13">if<condition pos:line="90" pos:column="15">(<expr><name><name pos:line="90" pos:column="16">eventType</name><op:operator pos:line="90" pos:column="25">.</op:operator><name pos:line="90" pos:column="26">HasValue</name></name></expr>)</condition><then pos:line="90" pos:column="35"> <block pos:line="90" pos:column="36">{
                <expr_stmt><expr><call><name pos:line="91" pos:column="17">OnFileChanged</name><argument_list pos:line="91" pos:column="30">(<argument><expr><op:operator pos:line="91" pos:column="31">new</op:operator> <call><name pos:line="91" pos:column="35">FileEventRaisedArgs</name><argument_list pos:line="91" pos:column="54">(<argument><expr><name><name pos:line="91" pos:column="55">eventType</name><op:operator pos:line="91" pos:column="64">.</op:operator><name pos:line="91" pos:column="65">Value</name></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="72">fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="95" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="96" pos:column="9">/// Adds or updates &lt;paramref name="fileName"/&gt; within the archive asynchronously. A new &lt;see cref="System.Threading.Tasks.Task"/&gt; is run via &lt;see cref="TaskFactory"/&gt;.</comment>
        <comment type="line" pos:line="97" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="98" pos:column="9">/// &lt;param name="fileName"&gt;The file name to add or update. If the file exists, it is deleted and then added regardless of whether or not the file is outdated&lt;/param&gt;</comment>
        <function><type><specifier pos:line="99" pos:column="9">public</specifier> <specifier pos:line="99" pos:column="16">virtual</specifier> <name pos:line="99" pos:column="24">Task</name></type> <name pos:line="99" pos:column="29">AddOrUpdateFileAsync</name><parameter_list pos:line="99" pos:column="49">(<param><decl><type><name pos:line="99" pos:column="50">string</name></type> <name pos:line="99" pos:column="57">fileName</name></decl></param>)</parameter_list> <block pos:line="99" pos:column="67">{
            <comment type="line" pos:line="100" pos:column="13">//LogExceptions(task);</comment>
            <decl_stmt><decl><type><name pos:line="101" pos:column="13">var</name></type> <name pos:line="101" pos:column="17">task</name> <init pos:line="101" pos:column="22">= <expr><call><name><name pos:line="101" pos:column="24">this</name><op:operator pos:line="101" pos:column="28">.</op:operator><name pos:line="101" pos:column="29">Factory</name><op:operator pos:line="101" pos:column="36">.</op:operator><name pos:line="101" pos:column="37">StartNew</name></name><argument_list pos:line="101" pos:column="45">(<argument><expr><lambda><parameter_list pos:line="101" pos:column="46">()</parameter_list> <op:operator pos:line="101" pos:column="49">=&gt;</op:operator> <call><name pos:line="101" pos:column="52">AddOrUpdateFileImpl</name><argument_list pos:line="101" pos:column="71">(<argument><expr><name pos:line="101" pos:column="72">fileName</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="102" pos:column="13">task</name><op:operator pos:line="102" pos:column="17">.</op:operator><name pos:line="102" pos:column="18">ContinueWith</name></name><argument_list pos:line="102" pos:column="30">(<argument><expr><lambda><parameter_list pos:line="102" pos:column="31">(<param><decl><name pos:line="102" pos:column="32">t</name></decl></param>)</parameter_list> <op:operator pos:line="102" pos:column="35">=&gt;</op:operator> <block pos:line="102" pos:column="38">{
                <if pos:line="103" pos:column="17">if<condition pos:line="103" pos:column="19">(<expr><name><name pos:line="103" pos:column="20">t</name><op:operator pos:line="103" pos:column="21">.</op:operator><name pos:line="103" pos:column="22">Result</name><op:operator pos:line="103" pos:column="28">.</op:operator><name pos:line="103" pos:column="29">HasValue</name></name></expr>)</condition><then pos:line="103" pos:column="38"> <block pos:line="103" pos:column="39">{
                    <expr_stmt><expr><call><name pos:line="104" pos:column="21">OnFileChanged</name><argument_list pos:line="104" pos:column="34">(<argument><expr><op:operator pos:line="104" pos:column="35">new</op:operator> <call><name pos:line="104" pos:column="39">FileEventRaisedArgs</name><argument_list pos:line="104" pos:column="58">(<argument><expr><name><name pos:line="104" pos:column="59">t</name><op:operator pos:line="104" pos:column="60">.</op:operator><name pos:line="104" pos:column="61">Result</name><op:operator pos:line="104" pos:column="67">.</op:operator><name pos:line="104" pos:column="68">Value</name></name></expr></argument>, <argument><expr><name pos:line="104" pos:column="75">fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="107" pos:column="13">return <expr><name pos:line="107" pos:column="20">task</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="110" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="111" pos:column="9">/// Deletes &lt;paramref name="fileName"/&gt; from the archive</comment>
        <comment type="line" pos:line="112" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="113" pos:column="9">/// &lt;param name="fileName"&gt;The file name to delete. If it does not exist, nothing happens&lt;/param&gt;</comment>
        <function><type><specifier pos:line="114" pos:column="9">public</specifier> <specifier pos:line="114" pos:column="16">virtual</specifier> <name pos:line="114" pos:column="24">void</name></type> <name pos:line="114" pos:column="29">DeleteFile</name><parameter_list pos:line="114" pos:column="39">(<param><decl><type><name pos:line="114" pos:column="40">string</name></type> <name pos:line="114" pos:column="47">fileName</name></decl></param>)</parameter_list> <block pos:line="114" pos:column="57">{
            <comment type="line" pos:line="115" pos:column="13">// LogExceptions(task);</comment>
            <if pos:line="116" pos:column="13">if<condition pos:line="116" pos:column="15">(<expr><call><name pos:line="116" pos:column="16">DeleteFileImpl</name><argument_list pos:line="116" pos:column="30">(<argument><expr><name pos:line="116" pos:column="31">fileName</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="116" pos:column="41"> <block pos:line="116" pos:column="42">{
                <expr_stmt><expr><call><name pos:line="117" pos:column="17">OnFileChanged</name><argument_list pos:line="117" pos:column="30">(<argument><expr><op:operator pos:line="117" pos:column="31">new</op:operator> <call><name pos:line="117" pos:column="35">FileEventRaisedArgs</name><argument_list pos:line="117" pos:column="54">(<argument><expr><name><name pos:line="117" pos:column="55">FileEventType</name><op:operator pos:line="117" pos:column="68">.</op:operator><name pos:line="117" pos:column="69">FileDeleted</name></name></expr></argument>, <argument><expr><name pos:line="117" pos:column="82">fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="121" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="122" pos:column="9">/// Deletes &lt;paramref name="fileName"/&gt; from the archive asynchronously. A new &lt;see cref="System.Threading.Tasks.Task"/&gt; is run via &lt;see cref="TaskFactory"/&gt;.</comment>
        <comment type="line" pos:line="123" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="124" pos:column="9">/// &lt;param name="fileName"&gt;The file name to delete. If it does not exist, nothing happens&lt;/param&gt;</comment>
        <function><type><specifier pos:line="125" pos:column="9">public</specifier> <specifier pos:line="125" pos:column="16">virtual</specifier> <name pos:line="125" pos:column="24">Task</name></type> <name pos:line="125" pos:column="29">DeleteFileAsync</name><parameter_list pos:line="125" pos:column="44">(<param><decl><type><name pos:line="125" pos:column="45">string</name></type> <name pos:line="125" pos:column="52">fileName</name></decl></param>)</parameter_list> <block pos:line="125" pos:column="62">{
            <comment type="line" pos:line="126" pos:column="13">//LogExceptions(task);</comment>
            <decl_stmt><decl><type><name pos:line="127" pos:column="13">var</name></type> <name pos:line="127" pos:column="17">task</name> <init pos:line="127" pos:column="22">= <expr><call><name><name pos:line="127" pos:column="24">Factory</name><op:operator pos:line="127" pos:column="31">.</op:operator><name pos:line="127" pos:column="32">StartNew</name></name><argument_list pos:line="127" pos:column="40">(<argument><expr><lambda><parameter_list pos:line="127" pos:column="41">()</parameter_list> <op:operator pos:line="127" pos:column="44">=&gt;</op:operator> <call><name pos:line="127" pos:column="47">DeleteFileImpl</name><argument_list pos:line="127" pos:column="61">(<argument><expr><name pos:line="127" pos:column="62">fileName</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="128" pos:column="13">task</name><op:operator pos:line="128" pos:column="17">.</op:operator><name pos:line="128" pos:column="18">ContinueWith</name></name><argument_list pos:line="128" pos:column="30">(<argument><expr><lambda><parameter_list pos:line="128" pos:column="31">(<param><decl><name pos:line="128" pos:column="32">t</name></decl></param>)</parameter_list> <op:operator pos:line="128" pos:column="35">=&gt;</op:operator> <block pos:line="128" pos:column="38">{
                <if pos:line="129" pos:column="17">if<condition pos:line="129" pos:column="19">(<expr><name><name pos:line="129" pos:column="20">t</name><op:operator pos:line="129" pos:column="21">.</op:operator><name pos:line="129" pos:column="22">Result</name></name></expr>)</condition><then pos:line="129" pos:column="29"> <block pos:line="129" pos:column="30">{
                    <expr_stmt><expr><call><name pos:line="130" pos:column="21">OnFileChanged</name><argument_list pos:line="130" pos:column="34">(<argument><expr><op:operator pos:line="130" pos:column="35">new</op:operator> <call><name pos:line="130" pos:column="39">FileEventRaisedArgs</name><argument_list pos:line="130" pos:column="58">(<argument><expr><name><name pos:line="130" pos:column="59">FileEventType</name><op:operator pos:line="130" pos:column="72">.</op:operator><name pos:line="130" pos:column="73">FileDeleted</name></name></expr></argument>, <argument><expr><name pos:line="130" pos:column="86">fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="133" pos:column="13">return <expr><name pos:line="133" pos:column="20">task</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="136" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="137" pos:column="9">/// Renames the file to the new file name</comment>
        <comment type="line" pos:line="138" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="139" pos:column="9">/// &lt;param name="oldFileName"&gt;the existing path&lt;/param&gt;</comment>
        <comment type="line" pos:line="140" pos:column="9">/// &lt;param name="newFileName"&gt;the new path&lt;/param&gt;</comment>
        <function><type><specifier pos:line="141" pos:column="9">public</specifier> <specifier pos:line="141" pos:column="16">virtual</specifier> <name pos:line="141" pos:column="24">void</name></type> <name pos:line="141" pos:column="29">RenameFile</name><parameter_list pos:line="141" pos:column="39">(<param><decl><type><name pos:line="141" pos:column="40">string</name></type> <name pos:line="141" pos:column="47">oldFileName</name></decl></param>, <param><decl><type><name pos:line="141" pos:column="60">string</name></type> <name pos:line="141" pos:column="67">newFileName</name></decl></param>)</parameter_list> <block pos:line="141" pos:column="80">{
            <comment type="line" pos:line="142" pos:column="13">//LogExceptions(task);</comment>
            <if pos:line="143" pos:column="13">if<condition pos:line="143" pos:column="15">(<expr><call><name pos:line="143" pos:column="16">RenameFileImpl</name><argument_list pos:line="143" pos:column="30">(<argument><expr><name pos:line="143" pos:column="31">oldFileName</name></expr></argument>, <argument><expr><name pos:line="143" pos:column="44">newFileName</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="143" pos:column="57"> <block pos:line="143" pos:column="58">{
                <expr_stmt><expr><call><name pos:line="144" pos:column="17">OnFileChanged</name><argument_list pos:line="144" pos:column="30">(<argument><expr><op:operator pos:line="144" pos:column="31">new</op:operator> <call><name pos:line="144" pos:column="35">FileEventRaisedArgs</name><argument_list pos:line="144" pos:column="54">(<argument><expr><name><name pos:line="144" pos:column="55">FileEventType</name><op:operator pos:line="144" pos:column="68">.</op:operator><name pos:line="144" pos:column="69">FileRenamed</name></name></expr></argument>, <argument><expr><name pos:line="144" pos:column="82">newFileName</name></expr></argument>, <argument><expr><name pos:line="144" pos:column="95">oldFileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="148" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="149" pos:column="9">/// Renames the file to the new file name asynchronously. A new &lt;see cref="System.Threading.Tasks.Task"/&gt; is run via &lt;see cref="TaskFactory"/&gt;.</comment>
        <comment type="line" pos:line="150" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="151" pos:column="9">/// &lt;param name="oldFileName"&gt;the existing path&lt;/param&gt;</comment>
        <comment type="line" pos:line="152" pos:column="9">/// &lt;param name="newFileName"&gt;the new path&lt;/param&gt;</comment>
        <function><type><specifier pos:line="153" pos:column="9">public</specifier> <specifier pos:line="153" pos:column="16">virtual</specifier> <name pos:line="153" pos:column="24">Task</name></type> <name pos:line="153" pos:column="29">RenameFileAsync</name><parameter_list pos:line="153" pos:column="44">(<param><decl><type><name pos:line="153" pos:column="45">string</name></type> <name pos:line="153" pos:column="52">oldFileName</name></decl></param>, <param><decl><type><name pos:line="153" pos:column="65">string</name></type> <name pos:line="153" pos:column="72">newFileName</name></decl></param>)</parameter_list> <block pos:line="153" pos:column="85">{
            <comment type="line" pos:line="154" pos:column="13">//LogExceptions(task);</comment>
            <decl_stmt><decl><type><name pos:line="155" pos:column="13">var</name></type> <name pos:line="155" pos:column="17">task</name> <init pos:line="155" pos:column="22">= <expr><call><name><name pos:line="155" pos:column="24">Factory</name><op:operator pos:line="155" pos:column="31">.</op:operator><name pos:line="155" pos:column="32">StartNew</name></name><argument_list pos:line="155" pos:column="40">(<argument><expr><lambda><parameter_list pos:line="155" pos:column="41">()</parameter_list> <op:operator pos:line="155" pos:column="44">=&gt;</op:operator> <call><name pos:line="155" pos:column="47">RenameFileImpl</name><argument_list pos:line="155" pos:column="61">(<argument><expr><name pos:line="155" pos:column="62">oldFileName</name></expr></argument>, <argument><expr><name pos:line="155" pos:column="75">newFileName</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="156" pos:column="13">task</name><op:operator pos:line="156" pos:column="17">.</op:operator><name pos:line="156" pos:column="18">ContinueWith</name></name><argument_list pos:line="156" pos:column="30">(<argument><expr><lambda><parameter_list pos:line="156" pos:column="31">(<param><decl><name pos:line="156" pos:column="32">t</name></decl></param>)</parameter_list> <op:operator pos:line="156" pos:column="35">=&gt;</op:operator> <block pos:line="156" pos:column="38">{
                <if pos:line="157" pos:column="17">if<condition pos:line="157" pos:column="19">(<expr><name><name pos:line="157" pos:column="20">t</name><op:operator pos:line="157" pos:column="21">.</op:operator><name pos:line="157" pos:column="22">Result</name></name></expr>)</condition><then pos:line="157" pos:column="29"> <block pos:line="157" pos:column="30">{
                    <expr_stmt><expr><call><name pos:line="158" pos:column="21">OnFileChanged</name><argument_list pos:line="158" pos:column="34">(<argument><expr><op:operator pos:line="158" pos:column="35">new</op:operator> <call><name pos:line="158" pos:column="39">FileEventRaisedArgs</name><argument_list pos:line="158" pos:column="58">(<argument><expr><name><name pos:line="158" pos:column="59">FileEventType</name><op:operator pos:line="158" pos:column="72">.</op:operator><name pos:line="158" pos:column="73">FileRenamed</name></name></expr></argument>, <argument><expr><name pos:line="158" pos:column="86">newFileName</name></expr></argument>, <argument><expr><name pos:line="158" pos:column="99">oldFileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="161" pos:column="13">return <expr><name pos:line="161" pos:column="20">task</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="164" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="165" pos:column="9">/// Tests to see if the archive contains &lt;paramref name="fileName"/&gt;</comment>
        <comment type="line" pos:line="166" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="167" pos:column="9">/// &lt;param name="fileName"&gt;the file name to check for&lt;/param&gt;</comment>
        <comment type="line" pos:line="168" pos:column="9">/// &lt;returns&gt;True if the file is in the archive; false otherwise&lt;/returns&gt;</comment>
        <function_decl><type><specifier pos:line="169" pos:column="9">public</specifier> <specifier pos:line="169" pos:column="16">abstract</specifier> <name pos:line="169" pos:column="25">bool</name></type> <name pos:line="169" pos:column="30">ContainsFile</name><parameter_list pos:line="169" pos:column="42">(<param><decl><type><name pos:line="169" pos:column="43">string</name></type> <name pos:line="169" pos:column="50">fileName</name></decl></param>)</parameter_list>;</function_decl>

        <comment type="line" pos:line="171" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="172" pos:column="9">/// Compares file name with the archive representation</comment>
        <comment type="line" pos:line="173" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="174" pos:column="9">/// &lt;param name="fileName"&gt;the file name to check for&lt;/param&gt;</comment>
        <comment type="line" pos:line="175" pos:column="9">/// &lt;returns&gt;True if the archive version of the file is older than &lt;paramref name="fileName"/&gt;&lt;/returns&gt;</comment>
        <function_decl><type><specifier pos:line="176" pos:column="9">public</specifier> <specifier pos:line="176" pos:column="16">abstract</specifier> <name pos:line="176" pos:column="25">bool</name></type> <name pos:line="176" pos:column="30">IsOutdated</name><parameter_list pos:line="176" pos:column="40">(<param><decl><type><name pos:line="176" pos:column="41">string</name></type> <name pos:line="176" pos:column="48">fileName</name></decl></param>)</parameter_list>;</function_decl>

        <comment type="line" pos:line="178" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="179" pos:column="9">/// Gets all of the file names stored in this archive</comment>
        <comment type="line" pos:line="180" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="181" pos:column="9">/// &lt;returns&gt;An enumerable of filenames stored in this archive.&lt;/returns&gt;</comment>
        <function_decl><type><specifier pos:line="182" pos:column="9">public</specifier> <specifier pos:line="182" pos:column="16">abstract</specifier> <name><name pos:line="182" pos:column="25">Collection</name><argument_list pos:line="182" pos:column="35">&lt;<argument><name pos:line="182" pos:column="36">string</name></argument>&gt;</argument_list></name></type> <name pos:line="182" pos:column="44">GetFiles</name><parameter_list pos:line="182" pos:column="52">()</parameter_list>;</function_decl>

        <comment type="line" pos:line="184" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="185" pos:column="9">/// The path where this archive is stored.</comment>
        <comment type="line" pos:line="186" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="187" pos:column="9">public</specifier> <name pos:line="187" pos:column="16">string</name></type> <name pos:line="187" pos:column="23">ArchivePath</name>
        <block pos:line="188" pos:column="9">{
            <function><name pos:line="189" pos:column="13">get</name>
            <block pos:line="190" pos:column="13">{
                <return pos:line="191" pos:column="17">return <expr><name><name pos:line="191" pos:column="24">this</name><op:operator pos:line="191" pos:column="28">.</op:operator><name pos:line="191" pos:column="29">_archivePath</name></name></expr>;</return>
            }</block></function>
            <function><specifier pos:line="193" pos:column="13">protected</specifier> <name pos:line="193" pos:column="23">set</name>
            <block pos:line="194" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="195" pos:column="17">this</name><op:operator pos:line="195" pos:column="21">.</op:operator><name pos:line="195" pos:column="22">_archivePath</name></name> <op:operator pos:line="195" pos:column="35">=</op:operator> <name pos:line="195" pos:column="37">value</name></expr>;</expr_stmt>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="199" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="200" pos:column="9">/// Raise the FileChanged event.</comment>
        <comment type="line" pos:line="201" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="202" pos:column="9">/// &lt;param name="e"&gt;&lt;/param&gt;</comment>
        <function><type><specifier pos:line="203" pos:column="9">protected</specifier> <specifier pos:line="203" pos:column="19">virtual</specifier> <name pos:line="203" pos:column="27">void</name></type> <name pos:line="203" pos:column="32">OnFileChanged</name><parameter_list pos:line="203" pos:column="45">(<param><decl><type><name pos:line="203" pos:column="46">FileEventRaisedArgs</name></type> <name pos:line="203" pos:column="66">e</name></decl></param>)</parameter_list> <block pos:line="203" pos:column="69">{
            <decl_stmt><decl><type><name><name pos:line="204" pos:column="13">EventHandler</name><argument_list pos:line="204" pos:column="25">&lt;<argument><name pos:line="204" pos:column="26">FileEventRaisedArgs</name></argument>&gt;</argument_list></name></type> <name pos:line="204" pos:column="47">handler</name> <init pos:line="204" pos:column="55">= <expr><name pos:line="204" pos:column="57">FileChanged</name></expr></init></decl>;</decl_stmt>
            <if pos:line="205" pos:column="13">if<condition pos:line="205" pos:column="15">(<expr><name pos:line="205" pos:column="16">handler</name> <op:operator pos:line="205" pos:column="24">!=</op:operator> <name pos:line="205" pos:column="27">null</name></expr>)</condition><then pos:line="205" pos:column="32"> <block pos:line="205" pos:column="33">{
                <expr_stmt><expr><call><name pos:line="206" pos:column="17">handler</name><argument_list pos:line="206" pos:column="24">(<argument><expr><name pos:line="206" pos:column="25">this</name></expr></argument>, <argument><expr><name pos:line="206" pos:column="31">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="210" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="211" pos:column="9">/// Convenience function for logging exceptions upon task failure.</comment>
        <comment type="line" pos:line="212" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="213" pos:column="9">/// &lt;param name="task"&gt;&lt;/param&gt;</comment>
        <function><type><specifier pos:line="214" pos:column="9">protected</specifier> <name pos:line="214" pos:column="19">void</name></type> <name pos:line="214" pos:column="24">LogExceptions</name><parameter_list pos:line="214" pos:column="37">(<param><decl><type><name pos:line="214" pos:column="38">Task</name></type> <name pos:line="214" pos:column="43">task</name></decl></param>)</parameter_list> <block pos:line="214" pos:column="49">{
            <expr_stmt><expr><call><name><name pos:line="215" pos:column="13">task</name><op:operator pos:line="215" pos:column="17">.</op:operator><name pos:line="215" pos:column="18">ContinueWith</name></name><argument_list pos:line="215" pos:column="30">(<argument><expr><lambda><name pos:line="215" pos:column="31">t</name> <op:operator pos:line="215" pos:column="33">=&gt;</op:operator> <block pos:line="215" pos:column="36">{
                <foreach pos:line="216" pos:column="17">foreach(<init><decl><type><name pos:line="216" pos:column="25">var</name></type> <name pos:line="216" pos:column="29">exception</name> <range pos:line="216" pos:column="39">in <expr><name><name pos:line="216" pos:column="42">t</name><op:operator pos:line="216" pos:column="43">.</op:operator><name pos:line="216" pos:column="44">Exception</name><op:operator pos:line="216" pos:column="53">.</op:operator><name pos:line="216" pos:column="54">InnerExceptions</name></name></expr></range></decl></init>) <block pos:line="216" pos:column="71">{
                    <comment type="line" pos:line="217" pos:column="21">// logger.Error(exception);</comment>
                    <expr_stmt><expr><call><name><name pos:line="218" pos:column="21">Console</name><op:operator pos:line="218" pos:column="28">.</op:operator><name pos:line="218" pos:column="29">Error</name><op:operator pos:line="218" pos:column="34">.</op:operator><name pos:line="218" pos:column="35">WriteLine</name></name><argument_list pos:line="218" pos:column="44">(<argument><expr><name pos:line="218" pos:column="45">exception</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
            }</block></lambda></expr></argument>, <argument><expr><name><name pos:line="220" pos:column="16">TaskContinuationOptions</name><op:operator pos:line="220" pos:column="39">.</op:operator><name pos:line="220" pos:column="40">OnlyOnFaulted</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function_decl><type><specifier pos:line="223" pos:column="9">public</specifier> <specifier pos:line="223" pos:column="16">abstract</specifier> <name pos:line="223" pos:column="25">void</name></type> <name pos:line="223" pos:column="30">Save</name><parameter_list pos:line="223" pos:column="34">()</parameter_list>;</function_decl>

        <comment type="line" pos:line="225" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="226" pos:column="9">/// Disposes of this object</comment>
        <comment type="line" pos:line="227" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="228" pos:column="9">public</specifier> <specifier pos:line="228" pos:column="16">virtual</specifier> <name pos:line="228" pos:column="24">void</name></type> <name pos:line="228" pos:column="29">Dispose</name><parameter_list pos:line="228" pos:column="36">()</parameter_list> <block pos:line="228" pos:column="39">{
            <expr_stmt><expr><call><name pos:line="229" pos:column="13">Save</name><argument_list pos:line="229" pos:column="17">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="230" pos:column="13">FileChanged</name> <op:operator pos:line="230" pos:column="25">=</op:operator> <name pos:line="230" pos:column="27">null</name></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
