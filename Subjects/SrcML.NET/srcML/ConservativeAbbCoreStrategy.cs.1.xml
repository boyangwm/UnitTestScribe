<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML\Utilities\ConservativeAbbCoreStrategy.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>

<namespace pos:line="6" pos:column="1">namespace <name><name pos:line="6" pos:column="11">ABB</name><op:operator pos:line="6" pos:column="14">.</op:operator><name pos:line="6" pos:column="15">SrcML</name><op:operator pos:line="6" pos:column="20">.</op:operator><name pos:line="6" pos:column="21">Utilities</name></name> <block pos:line="6" pos:column="31">{
    <comment type="line" pos:line="7" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="8" pos:column="5">/// Computes the nubmer of cores available. This is a "conservative" strategy that is meant leave CPU resources free for other processes</comment>
    <comment type="line" pos:line="9" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="10" pos:column="5">public</specifier> class <name pos:line="10" pos:column="18">ConservativeAbbCoreStrategy</name> <super pos:line="10" pos:column="46">: <name pos:line="10" pos:column="48">IConcurrencyStrategy</name></super> <block pos:line="10" pos:column="69">{
        <decl_stmt><decl><type><specifier pos:line="11" pos:column="9">private</specifier> <name pos:line="11" pos:column="17">int</name></type> <name pos:line="11" pos:column="21">numberOfCores</name></decl>;</decl_stmt>

        <comment type="line" pos:line="13" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="14" pos:column="9">/// Creates a new conservative core strategy based on &lt;see cref="Environment.ProcessorCount"/&gt;</comment>
        <comment type="line" pos:line="15" pos:column="9">/// &lt;/summary&gt;</comment>
        <constructor><specifier pos:line="16" pos:column="9">public</specifier> <name pos:line="16" pos:column="16">ConservativeAbbCoreStrategy</name><parameter_list pos:line="16" pos:column="43">()</parameter_list> <member_list pos:line="16" pos:column="46">: <call><name pos:line="16" pos:column="48">this</name><argument_list pos:line="16" pos:column="52">(<argument><expr><name><name pos:line="16" pos:column="53">Environment</name><op:operator pos:line="16" pos:column="64">.</op:operator><name pos:line="16" pos:column="65">ProcessorCount</name></name></expr></argument>)</argument_list></call> </member_list><block pos:line="16" pos:column="81">{ }</block></constructor>

        <comment type="line" pos:line="18" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="19" pos:column="9">/// Creates a new conservative core strategy based on &lt;paramref name="processorCount"/&gt;</comment>
        <comment type="line" pos:line="20" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="21" pos:column="9">/// &lt;param name="processorCount"&gt;&lt;/param&gt;</comment>
        <constructor><specifier pos:line="22" pos:column="9">public</specifier> <name pos:line="22" pos:column="16">ConservativeAbbCoreStrategy</name><parameter_list pos:line="22" pos:column="43">(<param><decl><type><name pos:line="22" pos:column="44">int</name></type> <name pos:line="22" pos:column="48">processorCount</name></decl></param>)</parameter_list> <block pos:line="22" pos:column="64">{
            <if pos:line="23" pos:column="13">if<condition pos:line="23" pos:column="15">(<expr><name pos:line="23" pos:column="16">processorCount</name> <op:operator pos:line="23" pos:column="31">&lt;</op:operator> <lit:literal type="number" pos:line="23" pos:column="33">1</lit:literal></expr>)</condition><then pos:line="23" pos:column="35">
                <throw pos:line="24" pos:column="17">throw <expr><op:operator pos:line="24" pos:column="23">new</op:operator> <call><name pos:line="24" pos:column="27">ArgumentOutOfRangeException</name><argument_list pos:line="24" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="24" pos:column="55">"processorCount"</lit:literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="73">processorCount</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="24" pos:column="89">"processorCount should be greater than zero"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <expr_stmt><expr><name pos:line="26" pos:column="13">numberOfCores</name> <op:operator pos:line="26" pos:column="27">=</op:operator> <name pos:line="26" pos:column="29">processorCount</name></expr>;</expr_stmt>
        }</block></constructor>
        <comment type="line" pos:line="28" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="29" pos:column="9">/// If the number of cores is 4 or greater than or equal to 8, then half that value is returned as available.</comment>
        <comment type="line" pos:line="30" pos:column="9">/// If the number of cores is greater than 4 and less than 8, then 2 is returned.</comment>
        <comment type="line" pos:line="31" pos:column="9">/// Otherwise, 1 is returned.</comment>
        <comment type="line" pos:line="32" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="33" pos:column="9">/// &lt;returns&gt;The number of available cores as described above&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="34" pos:column="9">public</specifier> <name pos:line="34" pos:column="16">int</name></type> <name pos:line="34" pos:column="20">ComputeAvailableCores</name><parameter_list pos:line="34" pos:column="41">()</parameter_list> <block pos:line="34" pos:column="44">{
            <if pos:line="35" pos:column="13">if<condition pos:line="35" pos:column="15">(<expr><name pos:line="35" pos:column="16">numberOfCores</name> <op:operator pos:line="35" pos:column="30">==</op:operator> <lit:literal type="number" pos:line="35" pos:column="33">4</lit:literal> <op:operator pos:line="35" pos:column="35">||</op:operator> <name pos:line="35" pos:column="38">numberOfCores</name> <op:operator pos:line="35" pos:column="52">&gt;=</op:operator> <lit:literal type="number" pos:line="35" pos:column="55">8</lit:literal></expr>)</condition><then pos:line="35" pos:column="57">
                <return pos:line="36" pos:column="17">return <expr><name pos:line="36" pos:column="24">numberOfCores</name> <op:operator pos:line="36" pos:column="38">/</op:operator> <lit:literal type="number" pos:line="36" pos:column="40">2</lit:literal></expr>;</return></then></if>
            <if pos:line="37" pos:column="13">if<condition pos:line="37" pos:column="15">(<expr><name pos:line="37" pos:column="16">numberOfCores</name> <op:operator pos:line="37" pos:column="30">&gt;</op:operator> <lit:literal type="number" pos:line="37" pos:column="32">4</lit:literal> <op:operator pos:line="37" pos:column="34">&amp;&amp;</op:operator> <name pos:line="37" pos:column="37">numberOfCores</name> <op:operator pos:line="37" pos:column="51">&lt;</op:operator> <lit:literal type="number" pos:line="37" pos:column="53">8</lit:literal></expr>)</condition><then pos:line="37" pos:column="55">
                <return pos:line="38" pos:column="17">return <expr><lit:literal type="number" pos:line="38" pos:column="24">2</lit:literal></expr>;</return></then></if>
            <return pos:line="39" pos:column="13">return <expr><lit:literal type="number" pos:line="39" pos:column="20">1</lit:literal></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
