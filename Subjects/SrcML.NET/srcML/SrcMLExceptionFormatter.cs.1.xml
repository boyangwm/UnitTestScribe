<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML\Utilities\SrcMLExceptionFormatter.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>

<namespace pos:line="3" pos:column="1">namespace <name><name pos:line="3" pos:column="11">ABB</name><op:operator pos:line="3" pos:column="14">.</op:operator><name pos:line="3" pos:column="15">SrcML</name><op:operator pos:line="3" pos:column="20">.</op:operator><name pos:line="3" pos:column="21">Utilities</name></name>
<block pos:line="4" pos:column="1">{
    <comment type="line" pos:line="5" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="6" pos:column="5">/// Format the exception message</comment>
    <comment type="line" pos:line="7" pos:column="5">/// &lt;/summary&gt;</comment>
	<class><specifier pos:line="8" pos:column="9">public</specifier> class <name pos:line="8" pos:column="22">SrcMLExceptionFormatter</name>
	<block pos:line="9" pos:column="9">{
        <comment type="line" pos:line="10" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="11" pos:column="9">/// Return a formatted message string.</comment>
        <comment type="line" pos:line="12" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="13" pos:column="9">/// &lt;param name="ex"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="14" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="15" pos:column="9">public</specifier> <specifier pos:line="15" pos:column="16">static</specifier> <name pos:line="15" pos:column="23">string</name></type> <name pos:line="15" pos:column="30">CreateMessage</name><parameter_list pos:line="15" pos:column="43">(<param><decl><type><name pos:line="15" pos:column="44">Exception</name></type> <name pos:line="15" pos:column="54">ex</name></decl></param>)</parameter_list>
        <block pos:line="16" pos:column="9">{
            <return pos:line="17" pos:column="13">return <expr><call><name><name pos:line="17" pos:column="20">String</name><op:operator pos:line="17" pos:column="26">.</op:operator><name pos:line="17" pos:column="27">Format</name></name><argument_list pos:line="17" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="17" pos:column="34">"Message: {0}\nStackTrace: {1}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="67">ex</name><op:operator pos:line="17" pos:column="69">.</op:operator><name pos:line="17" pos:column="70">Message</name></name></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="79">ex</name><op:operator pos:line="17" pos:column="81">.</op:operator><name pos:line="17" pos:column="82">StackTrace</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="20" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="21" pos:column="9">/// Return a formatted message string.</comment>
        <comment type="line" pos:line="22" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="23" pos:column="9">/// &lt;param name="ex"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="24" pos:column="9">/// &lt;param name="message"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="25" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="26" pos:column="9">public</specifier> <specifier pos:line="26" pos:column="16">static</specifier> <name pos:line="26" pos:column="23">string</name></type> <name pos:line="26" pos:column="30">CreateMessage</name><parameter_list pos:line="26" pos:column="43">(<param><decl><type><name pos:line="26" pos:column="44">Exception</name></type> <name pos:line="26" pos:column="54">ex</name></decl></param>, <param><decl><type><name pos:line="26" pos:column="58">string</name></type> <name pos:line="26" pos:column="65">message</name></decl></param>)</parameter_list>
        <block pos:line="27" pos:column="9">{
            <return pos:line="28" pos:column="13">return <expr><call><name><name pos:line="28" pos:column="20">String</name><op:operator pos:line="28" pos:column="26">.</op:operator><name pos:line="28" pos:column="27">Format</name></name><argument_list pos:line="28" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="28" pos:column="34">"{0}\nMessage: {1}\nStackTrace: {2}"</lit:literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="72">message</name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="81">ex</name><op:operator pos:line="28" pos:column="83">.</op:operator><name pos:line="28" pos:column="84">Message</name></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="93">ex</name><op:operator pos:line="28" pos:column="95">.</op:operator><name pos:line="28" pos:column="96">StackTrace</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
	}</block></class>
}</block></namespace>
</unit>
