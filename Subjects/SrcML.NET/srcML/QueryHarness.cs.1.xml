<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML\QueryHarness.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2010 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">System</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Collections</name><op:operator pos:line="13" pos:column="25">.</op:operator><name pos:line="13" pos:column="26">Generic</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Linq</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Text</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Xml</name><op:operator pos:line="16" pos:column="17">.</op:operator><name pos:line="16" pos:column="18">Linq</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Reflection</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Globalization</name></name>;</using>

<namespace pos:line="20" pos:column="1">namespace <name><name pos:line="20" pos:column="11">ABB</name><op:operator pos:line="20" pos:column="14">.</op:operator><name pos:line="20" pos:column="15">SrcML</name></name>
<block pos:line="21" pos:column="1">{
    <comment type="line" pos:line="22" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="23" pos:column="5">/// QueryHarness is a test harness for methods with the &lt;see cref="QueryAttribute"/&gt;. The test takes a type and a method to be tested.</comment>
    <comment type="line" pos:line="24" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="25" pos:column="5">public</specifier> class <name pos:line="25" pos:column="18">QueryHarness</name> <super pos:line="25" pos:column="31">: <name pos:line="25" pos:column="33">ITransform</name></super>
    <block pos:line="26" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="27" pos:column="9">private</specifier> <name pos:line="27" pos:column="17">Type</name></type> <name pos:line="27" pos:column="22">_type</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="28" pos:column="9">private</specifier> <name pos:line="28" pos:column="17">MethodInfo</name></type> <name pos:line="28" pos:column="28">_method</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="29" pos:column="9">private</specifier> <name pos:line="29" pos:column="17">ConstructorInfo</name></type> <name pos:line="29" pos:column="33">_constructor</name></decl>;</decl_stmt>

        <comment type="line" pos:line="31" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="32" pos:column="9">/// Instantiates a new QueryFunctionTestObject with &lt;paramref name="type"/&gt; and &lt;paramref name="methodName"/&gt;.</comment>
        <comment type="line" pos:line="33" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="34" pos:column="9">/// &lt;param name="type"&gt;The type to make a query function for&lt;/param&gt;</comment>
        <comment type="line" pos:line="35" pos:column="9">/// &lt;param name="methodName"&gt;the method in &lt;paramref name="type"/&gt; to test&lt;/param&gt;</comment>
        <constructor><specifier pos:line="36" pos:column="9">public</specifier> <name pos:line="36" pos:column="16">QueryHarness</name><parameter_list pos:line="36" pos:column="28">(<param><decl><type><name pos:line="36" pos:column="29">Type</name></type> <name pos:line="36" pos:column="34">type</name></decl></param>, <param><decl><type><name pos:line="36" pos:column="40">string</name></type> <name pos:line="36" pos:column="47">methodName</name></decl></param>)</parameter_list> <member_list pos:line="36" pos:column="59">: <call><name pos:line="36" pos:column="61">this</name><argument_list pos:line="36" pos:column="65">(<argument><expr><name pos:line="36" pos:column="66">type</name></expr></argument>, <argument><expr><call><name pos:line="36" pos:column="72">GetMethod</name><argument_list pos:line="36" pos:column="81">(<argument><expr><name pos:line="36" pos:column="82">type</name></expr></argument>, <argument><expr><name pos:line="36" pos:column="88">methodName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
        </member_list><block pos:line="37" pos:column="9">{

        }</block></constructor>

        <comment type="line" pos:line="41" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="42" pos:column="9">/// Instantiates a new QueryFunctionTestObject with &lt;paramref name="type"/&gt; and &lt;paramref name="method"/&gt;.</comment>
        <comment type="line" pos:line="43" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="44" pos:column="9">/// &lt;param name="type"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="45" pos:column="9">/// &lt;param name="method"&gt;&lt;/param&gt;</comment>
        <constructor><specifier pos:line="46" pos:column="9">public</specifier> <name pos:line="46" pos:column="16">QueryHarness</name><parameter_list pos:line="46" pos:column="28">(<param><decl><type><name pos:line="46" pos:column="29">Type</name></type> <name pos:line="46" pos:column="34">type</name></decl></param>, <param><decl><type><name pos:line="46" pos:column="40">MethodInfo</name></type> <name pos:line="46" pos:column="51">method</name></decl></param>)</parameter_list>
        <block pos:line="47" pos:column="9">{
            <if pos:line="48" pos:column="13">if <condition pos:line="48" pos:column="16">(<expr><name pos:line="48" pos:column="17">null</name> <op:operator pos:line="48" pos:column="22">==</op:operator> <name pos:line="48" pos:column="25">type</name></expr>)</condition><then pos:line="48" pos:column="30">
                <throw pos:line="49" pos:column="17">throw <expr><op:operator pos:line="49" pos:column="23">new</op:operator> <call><name pos:line="49" pos:column="27">ArgumentNullException</name><argument_list pos:line="49" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="49" pos:column="49">"type"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="49" pos:column="57">"type cannot be null"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="50" pos:column="13">if <condition pos:line="50" pos:column="16">(<expr><name pos:line="50" pos:column="17">null</name> <op:operator pos:line="50" pos:column="22">==</op:operator> <name pos:line="50" pos:column="25">method</name></expr>)</condition><then pos:line="50" pos:column="32">
                <throw pos:line="51" pos:column="17">throw <expr><op:operator pos:line="51" pos:column="23">new</op:operator> <call><name pos:line="51" pos:column="27">ArgumentNullException</name><argument_list pos:line="51" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="51" pos:column="49">"method"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="51" pos:column="59">"method cannot be null"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <expr_stmt><expr><call><name pos:line="53" pos:column="13">CheckArguments</name><argument_list pos:line="53" pos:column="27">(<argument><expr><name pos:line="53" pos:column="28">type</name></expr></argument>, <argument><expr><name pos:line="53" pos:column="34">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="54" pos:column="13">this</name><op:operator pos:line="54" pos:column="17">.</op:operator><name pos:line="54" pos:column="18">_type</name></name> <op:operator pos:line="54" pos:column="24">=</op:operator> <name pos:line="54" pos:column="26">type</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="55" pos:column="13">_constructor</name> <op:operator pos:line="55" pos:column="26">=</op:operator> <call><name><name pos:line="55" pos:column="28">type</name><op:operator pos:line="55" pos:column="32">.</op:operator><name pos:line="55" pos:column="33">GetConstructor</name></name><argument_list pos:line="55" pos:column="47">(<argument><expr><name><name pos:line="55" pos:column="48">Type</name><op:operator pos:line="55" pos:column="52">.</op:operator><name pos:line="55" pos:column="53">EmptyTypes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="56" pos:column="13">this</name><op:operator pos:line="56" pos:column="17">.</op:operator><name pos:line="56" pos:column="18">_method</name></name> <op:operator pos:line="56" pos:column="26">=</op:operator> <name pos:line="56" pos:column="28">method</name></expr>;</expr_stmt>
        }</block></constructor>

        <constructor><specifier pos:line="59" pos:column="9">private</specifier> <name pos:line="59" pos:column="17">QueryHarness</name><parameter_list pos:line="59" pos:column="29">()</parameter_list>
        <block pos:line="60" pos:column="9">{

        }</block></constructor>

        <function><type><specifier pos:line="64" pos:column="9">private</specifier> <specifier pos:line="64" pos:column="17">static</specifier> <name pos:line="64" pos:column="24">void</name></type> <name pos:line="64" pos:column="29">CheckArguments</name><parameter_list pos:line="64" pos:column="43">(<param><decl><type><name pos:line="64" pos:column="44">Type</name></type> <name pos:line="64" pos:column="49">type</name></decl></param>, <param><decl><type><name pos:line="64" pos:column="55">MethodInfo</name></type> <name pos:line="64" pos:column="66">method</name></decl></param>)</parameter_list>
        <block pos:line="65" pos:column="9">{   
            <decl_stmt><decl><type><name pos:line="66" pos:column="13">var</name></type> <name pos:line="66" pos:column="17">defaultConstructors</name> <init pos:line="66" pos:column="37">= <expr><linq><from pos:line="66" pos:column="39">from <expr><name pos:line="66" pos:column="44">constructor</name></expr> <in pos:line="66" pos:column="56">in <expr><call><name><name pos:line="66" pos:column="59">type</name><op:operator pos:line="66" pos:column="63">.</op:operator><name pos:line="66" pos:column="64">GetConstructors</name></name><argument_list pos:line="66" pos:column="79">()</argument_list></call></expr></in></from>
                                      <where pos:line="67" pos:column="39">where <expr><name><name pos:line="67" pos:column="45">constructor</name><op:operator pos:line="67" pos:column="56">.</op:operator><name pos:line="67" pos:column="57">IsPublic</name></name></expr></where>
                                      <where pos:line="68" pos:column="39">where <expr><lit:literal type="number" pos:line="68" pos:column="45">0</lit:literal> <op:operator pos:line="68" pos:column="47">==</op:operator> <call><name><name pos:line="68" pos:column="50">constructor</name><op:operator pos:line="68" pos:column="61">.</op:operator><name pos:line="68" pos:column="62">GetParameters</name></name><argument_list pos:line="68" pos:column="75">()</argument_list></call><op:operator pos:line="68" pos:column="77">.</op:operator><name pos:line="68" pos:column="78">Length</name></expr></where>
                                      <select pos:line="69" pos:column="39">select <expr><name pos:line="69" pos:column="46">constructor</name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <if pos:line="70" pos:column="13">if <condition pos:line="70" pos:column="16">(<expr><lit:literal type="number" pos:line="70" pos:column="17">1</lit:literal> <op:operator pos:line="70" pos:column="19">!=</op:operator> <call><name><name pos:line="70" pos:column="22">defaultConstructors</name><op:operator pos:line="70" pos:column="41">.</op:operator><name pos:line="70" pos:column="42">Count</name></name><argument_list pos:line="70" pos:column="47">()</argument_list></call> <op:operator pos:line="70" pos:column="50">&amp;&amp;</op:operator> <op:operator pos:line="70" pos:column="53">!</op:operator><name><name pos:line="70" pos:column="54">method</name><op:operator pos:line="70" pos:column="60">.</op:operator><name pos:line="70" pos:column="61">IsStatic</name></name></expr>)</condition><then pos:line="70" pos:column="70">
                <throw pos:line="71" pos:column="17">throw <expr><op:operator pos:line="71" pos:column="23">new</op:operator> <call><name pos:line="71" pos:column="27">ArgumentException</name><argument_list pos:line="71" pos:column="44">(<argument><expr><call><name><name pos:line="71" pos:column="45">String</name><op:operator pos:line="71" pos:column="51">.</op:operator><name pos:line="71" pos:column="52">Format</name></name><argument_list pos:line="71" pos:column="58">(<argument><expr><name><name pos:line="71" pos:column="59">CultureInfo</name><op:operator pos:line="71" pos:column="70">.</op:operator><name pos:line="71" pos:column="71">CurrentCulture</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="71" pos:column="87">"{0} must have a public default constructor if {1} is not static"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="71" pos:column="154">type</name><op:operator pos:line="71" pos:column="158">.</op:operator><name pos:line="71" pos:column="159">FullName</name></name></expr></argument>, <argument><expr><name><name pos:line="71" pos:column="169">method</name><op:operator pos:line="71" pos:column="175">.</op:operator><name pos:line="71" pos:column="176">Name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="71" pos:column="183">"type"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
        }</block></function>

        <function><type><specifier pos:line="74" pos:column="9">private</specifier> <specifier pos:line="74" pos:column="17">static</specifier> <name pos:line="74" pos:column="24">MethodInfo</name></type> <name pos:line="74" pos:column="35">GetMethod</name><parameter_list pos:line="74" pos:column="44">(<param><decl><type><name pos:line="74" pos:column="45">Type</name></type> <name pos:line="74" pos:column="50">type</name></decl></param>, <param><decl><type><name pos:line="74" pos:column="56">string</name></type> <name pos:line="74" pos:column="63">methodName</name></decl></param>)</parameter_list>
        <block pos:line="75" pos:column="9">{
            <if pos:line="76" pos:column="13">if <condition pos:line="76" pos:column="16">(<expr><name pos:line="76" pos:column="17">null</name> <op:operator pos:line="76" pos:column="22">==</op:operator> <name pos:line="76" pos:column="25">type</name></expr>)</condition><then pos:line="76" pos:column="30">
                <throw pos:line="77" pos:column="17">throw <expr><op:operator pos:line="77" pos:column="23">new</op:operator> <call><name pos:line="77" pos:column="27">ArgumentNullException</name><argument_list pos:line="77" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="77" pos:column="49">"type"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="78" pos:column="13">if <condition pos:line="78" pos:column="16">(<expr><name pos:line="78" pos:column="17">null</name> <op:operator pos:line="78" pos:column="22">==</op:operator> <name pos:line="78" pos:column="25">methodName</name></expr>)</condition><then pos:line="78" pos:column="36">
                <throw pos:line="79" pos:column="17">throw <expr><op:operator pos:line="79" pos:column="23">new</op:operator> <call><name pos:line="79" pos:column="27">ArgumentNullException</name><argument_list pos:line="79" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="79" pos:column="49">"methodName"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="81" pos:column="13">MethodInfo</name></type> <name pos:line="81" pos:column="24">method</name> <init pos:line="81" pos:column="31">= <expr><call><name><name pos:line="81" pos:column="33">type</name><op:operator pos:line="81" pos:column="37">.</op:operator><name pos:line="81" pos:column="38">GetMethod</name></name><argument_list pos:line="81" pos:column="47">(<argument><expr><name pos:line="81" pos:column="48">methodName</name></expr></argument>, <argument><expr><op:operator pos:line="81" pos:column="60">new</op:operator> <name><name pos:line="81" pos:column="64">Type</name><index pos:line="81" pos:column="68">[]</index></name> <block pos:line="81" pos:column="71">{ <expr><call><name pos:line="81" pos:column="73">typeof</name><argument_list pos:line="81" pos:column="79">(<argument><expr><name pos:line="81" pos:column="80">XElement</name></expr></argument>)</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if pos:line="83" pos:column="13">if <condition pos:line="83" pos:column="16">(<expr><name pos:line="83" pos:column="17">null</name> <op:operator pos:line="83" pos:column="22">==</op:operator> <name pos:line="83" pos:column="25">method</name></expr>)</condition><then pos:line="83" pos:column="32">
                <throw pos:line="84" pos:column="17">throw <expr><op:operator pos:line="84" pos:column="23">new</op:operator> <call><name pos:line="84" pos:column="27">ArgumentException</name><argument_list pos:line="84" pos:column="44">(<argument><expr><call><name><name pos:line="84" pos:column="45">String</name><op:operator pos:line="84" pos:column="51">.</op:operator><name pos:line="84" pos:column="52">Format</name></name><argument_list pos:line="84" pos:column="58">(<argument><expr><name><name pos:line="84" pos:column="59">CultureInfo</name><op:operator pos:line="84" pos:column="70">.</op:operator><name pos:line="84" pos:column="71">CurrentCulture</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="84" pos:column="87">"{0} was not found in {1}"</lit:literal></expr></argument>, <argument><expr><name pos:line="84" pos:column="115">methodName</name></expr></argument>, <argument><expr><name><name pos:line="84" pos:column="127">type</name><op:operator pos:line="84" pos:column="131">.</op:operator><name pos:line="84" pos:column="132">FullName</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="84" pos:column="143">"methodName"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <return pos:line="85" pos:column="13">return <expr><name pos:line="85" pos:column="20">method</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="88" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="89" pos:column="9">/// Generates a QueryHarness object for each function in &lt;paramref name="type"/&gt; that has the &lt;see cref="QueryAttribute"/&gt;</comment>
        <comment type="line" pos:line="90" pos:column="9">/// and matches the &lt;see cref="ITransform.Query"/&gt; signature.</comment>
        <comment type="line" pos:line="91" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="92" pos:column="9">/// &lt;param name="type"&gt;The type to find queries in.&lt;/param&gt;</comment>
        <comment type="line" pos:line="93" pos:column="9">/// &lt;returns&gt;An IEnumerable of QueryHarness objects&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="94" pos:column="9">public</specifier> <specifier pos:line="94" pos:column="16">static</specifier> <name><name pos:line="94" pos:column="23">IEnumerable</name><argument_list pos:line="94" pos:column="34">&lt;<argument><name pos:line="94" pos:column="35">ITransform</name></argument>&gt;</argument_list></name></type> <name pos:line="94" pos:column="47">CreateFromType</name><parameter_list pos:line="94" pos:column="61">(<param><decl><type><name pos:line="94" pos:column="62">Type</name></type> <name pos:line="94" pos:column="67">type</name></decl></param>)</parameter_list>
        <block pos:line="95" pos:column="9">{
            <if pos:line="96" pos:column="13">if <condition pos:line="96" pos:column="16">(<expr><name pos:line="96" pos:column="17">null</name> <op:operator pos:line="96" pos:column="22">==</op:operator> <name pos:line="96" pos:column="25">type</name></expr>)</condition><then pos:line="96" pos:column="30">
                <throw pos:line="97" pos:column="17">throw <expr><op:operator pos:line="97" pos:column="23">new</op:operator> <call><name pos:line="97" pos:column="27">ArgumentNullException</name><argument_list pos:line="97" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="97" pos:column="49">"type"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="99" pos:column="13">var</name></type> <name pos:line="99" pos:column="17">tests</name> <init pos:line="99" pos:column="23">= <expr><linq><from pos:line="99" pos:column="25">from <expr><name pos:line="99" pos:column="30">method</name></expr> <in pos:line="99" pos:column="37">in <expr><call><name><name pos:line="99" pos:column="40">type</name><op:operator pos:line="99" pos:column="44">.</op:operator><name pos:line="99" pos:column="45">GetMethods</name></name><argument_list pos:line="99" pos:column="55">()</argument_list></call></expr></in></from>
                          <let pos:line="100" pos:column="27">let <expr><name pos:line="100" pos:column="31">attributes</name> <op:operator pos:line="100" pos:column="42">=</op:operator> <call><name><name pos:line="100" pos:column="44">method</name><op:operator pos:line="100" pos:column="50">.</op:operator><name pos:line="100" pos:column="51">GetCustomAttributes</name></name><argument_list pos:line="100" pos:column="70">(<argument><expr><call><name pos:line="100" pos:column="71">typeof</name><argument_list pos:line="100" pos:column="77">(<argument><expr><name pos:line="100" pos:column="78">QueryAttribute</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="100" pos:column="95">true</lit:literal></expr></argument>)</argument_list></call></expr></let>
                          <where pos:line="101" pos:column="27">where <expr><name pos:line="101" pos:column="33">null</name> <op:operator pos:line="101" pos:column="38">!=</op:operator> <name pos:line="101" pos:column="41">attributes</name> <op:operator pos:line="101" pos:column="52">&amp;&amp;</op:operator> <lit:literal type="number" pos:line="101" pos:column="55">0</lit:literal> <op:operator pos:line="101" pos:column="57">&lt;</op:operator> <name><name pos:line="101" pos:column="59">attributes</name><op:operator pos:line="101" pos:column="69">.</op:operator><name pos:line="101" pos:column="70">Length</name></name></expr></where>
                          <where pos:line="102" pos:column="27">where <expr><call><name pos:line="102" pos:column="33">typeof</name><argument_list pos:line="102" pos:column="39">(<argument><expr><name><name pos:line="102" pos:column="40">IEnumerable</name><argument_list pos:line="102" pos:column="51">&lt;<argument><name pos:line="102" pos:column="52">XElement</name></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call> <op:operator pos:line="102" pos:column="63">==</op:operator> <name><name pos:line="102" pos:column="66">method</name><op:operator pos:line="102" pos:column="72">.</op:operator><name pos:line="102" pos:column="73">ReturnType</name></name></expr></where>
                          <let pos:line="103" pos:column="27">let <expr><name pos:line="103" pos:column="31">parameters</name> <op:operator pos:line="103" pos:column="42">=</op:operator> <call><name><name pos:line="103" pos:column="44">method</name><op:operator pos:line="103" pos:column="50">.</op:operator><name pos:line="103" pos:column="51">GetParameters</name></name><argument_list pos:line="103" pos:column="64">()</argument_list></call></expr></let>
                          <where pos:line="104" pos:column="27">where <expr><lit:literal type="number" pos:line="104" pos:column="33">1</lit:literal> <op:operator pos:line="104" pos:column="35">==</op:operator> <name><name pos:line="104" pos:column="38">parameters</name><op:operator pos:line="104" pos:column="48">.</op:operator><name pos:line="104" pos:column="49">Length</name></name></expr></where>
                          <where pos:line="105" pos:column="27">where <expr><call><name pos:line="105" pos:column="33">typeof</name><argument_list pos:line="105" pos:column="39">(<argument><expr><name pos:line="105" pos:column="40">XElement</name></expr></argument>)</argument_list></call> <op:operator pos:line="105" pos:column="50">==</op:operator> <name><name pos:line="105" pos:column="53">parameters</name><index pos:line="105" pos:column="63">[<expr><lit:literal type="number" pos:line="105" pos:column="64">0</lit:literal></expr>]</index></name><op:operator pos:line="105" pos:column="66">.</op:operator><name pos:line="105" pos:column="67">ParameterType</name></expr></where>
                          <select pos:line="106" pos:column="27">select <expr><op:operator pos:line="106" pos:column="34">new</op:operator> <call><name pos:line="106" pos:column="38">QueryHarness</name><argument_list pos:line="106" pos:column="50">(<argument><expr><name pos:line="106" pos:column="51">type</name></expr></argument>, <argument><expr><name pos:line="106" pos:column="57">method</name></expr></argument>)</argument_list></call> <op:operator pos:line="106" pos:column="65">as</op:operator> <name pos:line="106" pos:column="68">ITransform</name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <return pos:line="107" pos:column="13">return <expr><name pos:line="107" pos:column="20">tests</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="110" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="111" pos:column="9">/// Gives the full signature of the function being tested.</comment>
        <comment type="line" pos:line="112" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="113" pos:column="9">/// &lt;returns&gt;The full signature &amp;lt;return type&amp;gt; &amp;lt;type&amp;gt;.&amp;lt;function name&amp;gt;(&amp;lt;parameter list&amp;gt;)&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="114" pos:column="9">public</specifier> <specifier pos:line="114" pos:column="16">override</specifier> <name pos:line="114" pos:column="25">string</name></type> <name pos:line="114" pos:column="32">ToString</name><parameter_list pos:line="114" pos:column="40">()</parameter_list>
        <block pos:line="115" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="116" pos:column="13">var</name></type> <name pos:line="116" pos:column="17">parameterTypeNames</name> <init pos:line="116" pos:column="36">= <expr><linq><from pos:line="116" pos:column="38">from <expr><name pos:line="116" pos:column="43">param</name></expr> <in pos:line="116" pos:column="49">in <expr><call><name><name pos:line="116" pos:column="52">_method</name><op:operator pos:line="116" pos:column="59">.</op:operator><name pos:line="116" pos:column="60">GetParameters</name></name><argument_list pos:line="116" pos:column="73">()</argument_list></call></expr></in></from>
                                     <select pos:line="117" pos:column="38">select <expr><name><name pos:line="117" pos:column="45">param</name><op:operator pos:line="117" pos:column="50">.</op:operator><name pos:line="117" pos:column="51">ParameterType</name><op:operator pos:line="117" pos:column="64">.</op:operator><name pos:line="117" pos:column="65">Name</name></name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="118" pos:column="13">var</name></type> <name pos:line="118" pos:column="17">parameters</name> <init pos:line="118" pos:column="28">= <expr><call><name><name pos:line="118" pos:column="30">String</name><op:operator pos:line="118" pos:column="36">.</op:operator><name pos:line="118" pos:column="37">Join</name></name><argument_list pos:line="118" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="118" pos:column="42">","</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="118" pos:column="47">parameterTypeNames</name><op:operator pos:line="118" pos:column="65">.</op:operator><name><name pos:line="118" pos:column="66">ToArray</name><argument_list pos:line="118" pos:column="73">&lt;<argument><name pos:line="118" pos:column="74">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="118" pos:column="81">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <return pos:line="120" pos:column="13">return <expr><call><name><name pos:line="120" pos:column="20">String</name><op:operator pos:line="120" pos:column="26">.</op:operator><name pos:line="120" pos:column="27">Format</name></name><argument_list pos:line="120" pos:column="33">(<argument><expr><name><name pos:line="120" pos:column="34">CultureInfo</name><op:operator pos:line="120" pos:column="45">.</op:operator><name pos:line="120" pos:column="46">InvariantCulture</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="120" pos:column="64">"&lt;QueryHarness {0} {1}.{2}({3})&gt;"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="120" pos:column="99">_method</name><op:operator pos:line="120" pos:column="106">.</op:operator><name pos:line="120" pos:column="107">ReturnType</name><op:operator pos:line="120" pos:column="117">.</op:operator><name pos:line="120" pos:column="118">Name</name></name></expr></argument>, <argument><expr><name><name pos:line="120" pos:column="124">_type</name><op:operator pos:line="120" pos:column="129">.</op:operator><name pos:line="120" pos:column="130">FullName</name></name></expr></argument>, <argument><expr><name><name pos:line="120" pos:column="140">_method</name><op:operator pos:line="120" pos:column="147">.</op:operator><name pos:line="120" pos:column="148">Name</name></name></expr></argument>, <argument><expr><name pos:line="120" pos:column="154">parameters</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
        <cpp:region pos:line="122" pos:column="9">#<cpp:directive pos:line="122" pos:column="10">region</cpp:directive> ITransform Members</cpp:region>
        <comment type="line" pos:line="123" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="124" pos:column="9">/// The query function takes the given type and executes its Query function.</comment>
        <comment type="line" pos:line="125" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="126" pos:column="9">/// &lt;param name="element"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="127" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="128" pos:column="9">public</specifier> <name><name pos:line="128" pos:column="16">IEnumerable</name><argument_list pos:line="128" pos:column="27">&lt;<argument><name pos:line="128" pos:column="28">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="128" pos:column="38">Query</name><parameter_list pos:line="128" pos:column="43">(<param><decl><type><name pos:line="128" pos:column="44">XElement</name></type> <name pos:line="128" pos:column="53">element</name></decl></param>)</parameter_list>
        <block pos:line="129" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="130" pos:column="13">var</name></type> <name pos:line="130" pos:column="17">instance</name> <init pos:line="130" pos:column="26">= <expr><op:operator pos:line="130" pos:column="28">(</op:operator><name><name pos:line="130" pos:column="29">this</name><op:operator pos:line="130" pos:column="33">.</op:operator><name pos:line="130" pos:column="34">_method</name><op:operator pos:line="130" pos:column="41">.</op:operator><name pos:line="130" pos:column="42">IsStatic</name> <type:modifier pos:line="130" pos:column="51">?</type:modifier></name> <name pos:line="130" pos:column="53">null</name> <op:operator pos:line="130" pos:column="58">:</op:operator> <call><name><name pos:line="130" pos:column="60">this</name><op:operator pos:line="130" pos:column="64">.</op:operator><name pos:line="130" pos:column="65">_constructor</name><op:operator pos:line="130" pos:column="77">.</op:operator><name pos:line="130" pos:column="78">Invoke</name></name><argument_list pos:line="130" pos:column="84">(<argument><expr><op:operator pos:line="130" pos:column="85">new</op:operator> <name><name pos:line="130" pos:column="89">object</name><index pos:line="130" pos:column="95">[]</index></name> <block pos:line="130" pos:column="98">{ }</block></expr></argument>)</argument_list></call><op:operator pos:line="130" pos:column="102">)</op:operator></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="131" pos:column="13">var</name></type> <name pos:line="131" pos:column="17">results</name> <init pos:line="131" pos:column="25">= <expr><call><name><name pos:line="131" pos:column="27">this</name><op:operator pos:line="131" pos:column="31">.</op:operator><name pos:line="131" pos:column="32">_method</name><op:operator pos:line="131" pos:column="39">.</op:operator><name pos:line="131" pos:column="40">Invoke</name></name><argument_list pos:line="131" pos:column="46">(<argument><expr><name pos:line="131" pos:column="47">instance</name></expr></argument>, <argument><expr><op:operator pos:line="131" pos:column="57">new</op:operator> <name><name pos:line="131" pos:column="61">object</name><index pos:line="131" pos:column="67">[]</index></name> <block pos:line="131" pos:column="70">{ <expr><name pos:line="131" pos:column="72">element</name></expr> }</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="132" pos:column="13">return <expr><name pos:line="132" pos:column="20">results</name> <op:operator pos:line="132" pos:column="28">as</op:operator> <name><name pos:line="132" pos:column="31">IEnumerable</name><argument_list pos:line="132" pos:column="42">&lt;<argument><name pos:line="132" pos:column="43">XElement</name></argument>&gt;</argument_list></name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="135" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="136" pos:column="9">/// This just returns the input &lt;paramref name="element"/&gt;</comment>
        <comment type="line" pos:line="137" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="138" pos:column="9">/// &lt;param name="element"&gt;The XElement to transform&lt;/param&gt;</comment>
        <comment type="line" pos:line="139" pos:column="9">/// &lt;returns&gt;&lt;paramref name="element"/&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="140" pos:column="9">public</specifier> <name pos:line="140" pos:column="16">XElement</name></type> <name pos:line="140" pos:column="25">Transform</name><parameter_list pos:line="140" pos:column="34">(<param><decl><type><name pos:line="140" pos:column="35">XElement</name></type> <name pos:line="140" pos:column="44">element</name></decl></param>)</parameter_list>
        <block pos:line="141" pos:column="9">{
            <return pos:line="142" pos:column="13">return <expr><name pos:line="142" pos:column="20">element</name></expr>;</return>
        }</block></function>

        <cpp:endregion pos:line="145" pos:column="9">#<cpp:directive pos:line="145" pos:column="10">endregion</cpp:directive></cpp:endregion>
    }</block></class>
}</block></namespace>
</unit>
