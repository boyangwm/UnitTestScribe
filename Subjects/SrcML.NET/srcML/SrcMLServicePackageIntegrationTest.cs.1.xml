<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\VisualStudio\ABB.SrcML.VisualStudio.SrcMLService.IntegrationTests\SrcMLServicePackageIntegrationTest.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Text</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Collections</name><op:operator pos:line="3" pos:column="25">.</op:operator><name pos:line="3" pos:column="26">Generic</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">IO</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Linq</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">Xml</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">Linq</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">ABB</name><op:operator pos:line="7" pos:column="10">.</op:operator><name pos:line="7" pos:column="11">SrcML</name><op:operator pos:line="7" pos:column="16">.</op:operator><name pos:line="7" pos:column="17">Utilities</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Microsoft</name><op:operator pos:line="8" pos:column="16">.</op:operator><name pos:line="8" pos:column="17">VisualStudio</name><op:operator pos:line="8" pos:column="29">.</op:operator><name pos:line="8" pos:column="30">TestTools</name><op:operator pos:line="8" pos:column="39">.</op:operator><name pos:line="8" pos:column="40">UnitTesting</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">Microsoft</name><op:operator pos:line="9" pos:column="16">.</op:operator><name pos:line="9" pos:column="17">VSSDK</name><op:operator pos:line="9" pos:column="22">.</op:operator><name pos:line="9" pos:column="23">Tools</name><op:operator pos:line="9" pos:column="28">.</op:operator><name pos:line="9" pos:column="29">VsIdeTesting</name></name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">Microsoft</name><op:operator pos:line="10" pos:column="16">.</op:operator><name pos:line="10" pos:column="17">VisualStudio</name><op:operator pos:line="10" pos:column="29">.</op:operator><name pos:line="10" pos:column="30">Shell</name><op:operator pos:line="10" pos:column="35">.</op:operator><name pos:line="10" pos:column="36">Interop</name></name>;</using>
<using pos:line="11" pos:column="1">using <name><name pos:line="11" pos:column="7">Microsoft</name><op:operator pos:line="11" pos:column="16">.</op:operator><name pos:line="11" pos:column="17">VisualStudio</name><op:operator pos:line="11" pos:column="29">.</op:operator><name pos:line="11" pos:column="30">Shell</name></name>;</using>
<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">EnvDTE</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">ABB</name><op:operator pos:line="13" pos:column="10">.</op:operator><name pos:line="13" pos:column="11">SrcML</name><op:operator pos:line="13" pos:column="16">.</op:operator><name pos:line="13" pos:column="17">VisualStudio</name><op:operator pos:line="13" pos:column="29">.</op:operator><name pos:line="13" pos:column="30">SrcMLService</name></name>;</using>

<comment type="line" pos:line="15" pos:column="1">// New added references</comment>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Windows</name><op:operator pos:line="16" pos:column="21">.</op:operator><name pos:line="16" pos:column="22">Forms</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">Microsoft</name><op:operator pos:line="17" pos:column="16">.</op:operator><name pos:line="17" pos:column="17">VisualStudio</name><op:operator pos:line="17" pos:column="29">.</op:operator><name pos:line="17" pos:column="30">ComponentModelHost</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">Microsoft</name><op:operator pos:line="18" pos:column="16">.</op:operator><name pos:line="18" pos:column="17">VsSDK</name><op:operator pos:line="18" pos:column="22">.</op:operator><name pos:line="18" pos:column="23">UnitTestLibrary</name></name>;</using>

<namespace pos:line="20" pos:column="1">namespace <name><name pos:line="20" pos:column="11">ABB</name><op:operator pos:line="20" pos:column="14">.</op:operator><name pos:line="20" pos:column="15">SrcML</name><op:operator pos:line="20" pos:column="20">.</op:operator><name pos:line="20" pos:column="21">VisualStudio</name><op:operator pos:line="20" pos:column="33">.</op:operator><name pos:line="20" pos:column="34">SrcMLService</name><op:operator pos:line="20" pos:column="46">.</op:operator><name pos:line="20" pos:column="47">IntegrationTests</name></name> <block pos:line="20" pos:column="64">{
    <comment type="line" pos:line="21" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="22" pos:column="5">/// Integration test for package validation</comment>
    <comment type="line" pos:line="23" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><attribute pos:line="24" pos:column="5">[<expr><name pos:line="24" pos:column="6">TestClass</name></expr>]</attribute>
    <specifier pos:line="25" pos:column="5">public</specifier> class <name pos:line="25" pos:column="18">SrcMLServicePackageIntegrationTests</name> <super pos:line="25" pos:column="54">: <name pos:line="25" pos:column="56">IInvoker</name></super> <block pos:line="25" pos:column="65">{

        <decl_stmt><decl><type><specifier pos:line="27" pos:column="9">private</specifier> <specifier pos:line="27" pos:column="17">static</specifier> <name pos:line="27" pos:column="24">IVsPackage</name></type> <name pos:line="27" pos:column="35">package</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="28" pos:column="9">private</specifier> <specifier pos:line="28" pos:column="17">static</specifier> <name pos:line="28" pos:column="24">ISrcMLGlobalService</name></type> <name pos:line="28" pos:column="44">srcMLService</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="29" pos:column="9">private</specifier> <specifier pos:line="29" pos:column="17">static</specifier> <name pos:line="29" pos:column="24">IComponentModel</name></type> <name pos:line="29" pos:column="40">context</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="30" pos:column="9">private</specifier> <specifier pos:line="30" pos:column="17">static</specifier> <name pos:line="30" pos:column="24">Solution</name></type> <name pos:line="30" pos:column="33">ModelSolution</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="31" pos:column="9">private</specifier> <specifier pos:line="31" pos:column="17">static</specifier> <name pos:line="31" pos:column="24">string</name></type> <name pos:line="31" pos:column="31">baseTestInputsFolder</name> <init pos:line="31" pos:column="52">= <expr><lit:literal type="string" pos:line="31" pos:column="54">@"..\..\..\TestInputs\SrcMLService\"</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="32" pos:column="9">private</specifier> <specifier pos:line="32" pos:column="17">static</specifier> <name pos:line="32" pos:column="24">string</name></type> <name pos:line="32" pos:column="31">testFileTemplateFolder</name> <init pos:line="32" pos:column="54">= <expr><call><name><name pos:line="32" pos:column="56">Path</name><op:operator pos:line="32" pos:column="60">.</op:operator><name pos:line="32" pos:column="61">GetFullPath</name></name><argument_list pos:line="32" pos:column="72">(<argument><expr><call><name><name pos:line="32" pos:column="73">Path</name><op:operator pos:line="32" pos:column="77">.</op:operator><name pos:line="32" pos:column="78">Combine</name></name><argument_list pos:line="32" pos:column="85">(<argument><expr><name pos:line="32" pos:column="86">baseTestInputsFolder</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="32" pos:column="108">"Template"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="33" pos:column="9">private</specifier> <specifier pos:line="33" pos:column="17">static</specifier> <name pos:line="33" pos:column="24">string</name></type> <name pos:line="33" pos:column="31">logFilePath</name> <init pos:line="33" pos:column="43">= <expr><call><name><name pos:line="33" pos:column="45">Path</name><op:operator pos:line="33" pos:column="49">.</op:operator><name pos:line="33" pos:column="50">GetFullPath</name></name><argument_list pos:line="33" pos:column="61">(<argument><expr><call><name><name pos:line="33" pos:column="62">Path</name><op:operator pos:line="33" pos:column="66">.</op:operator><name pos:line="33" pos:column="67">Combine</name></name><argument_list pos:line="33" pos:column="74">(<argument><expr><name pos:line="33" pos:column="75">baseTestInputsFolder</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="33" pos:column="97">"testlog.txt"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="34" pos:column="9">private</specifier> <specifier pos:line="34" pos:column="17">static</specifier> <name pos:line="34" pos:column="24">string</name></type> <name pos:line="34" pos:column="31">testCSharpSolutionFolder</name> <init pos:line="34" pos:column="56">= <expr><call><name><name pos:line="34" pos:column="58">Path</name><op:operator pos:line="34" pos:column="62">.</op:operator><name pos:line="34" pos:column="63">GetFullPath</name></name><argument_list pos:line="34" pos:column="74">(<argument><expr><call><name><name pos:line="34" pos:column="75">Path</name><op:operator pos:line="34" pos:column="79">.</op:operator><name pos:line="34" pos:column="80">Combine</name></name><argument_list pos:line="34" pos:column="87">(<argument><expr><name pos:line="34" pos:column="88">baseTestInputsFolder</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="34" pos:column="110">"TestCSharpSolution"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="35" pos:column="9">private</specifier> <specifier pos:line="35" pos:column="17">static</specifier> <name pos:line="35" pos:column="24">string</name></type> <name pos:line="35" pos:column="31">testCSharpSolutionFilePath</name> <init pos:line="35" pos:column="58">= <expr><call><name><name pos:line="35" pos:column="60">Path</name><op:operator pos:line="35" pos:column="64">.</op:operator><name pos:line="35" pos:column="65">Combine</name></name><argument_list pos:line="35" pos:column="72">(<argument><expr><name pos:line="35" pos:column="73">testCSharpSolutionFolder</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="35" pos:column="99">"TestCSharpSolution.sln"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="36" pos:column="9">private</specifier> <specifier pos:line="36" pos:column="17">static</specifier> <name pos:line="36" pos:column="24">string</name></type> <name pos:line="36" pos:column="31">testCSharpProjectFolder</name> <init pos:line="36" pos:column="55">= <expr><call><name><name pos:line="36" pos:column="57">Path</name><op:operator pos:line="36" pos:column="61">.</op:operator><name pos:line="36" pos:column="62">GetFullPath</name></name><argument_list pos:line="36" pos:column="73">(<argument><expr><call><name><name pos:line="36" pos:column="74">Path</name><op:operator pos:line="36" pos:column="78">.</op:operator><name pos:line="36" pos:column="79">Combine</name></name><argument_list pos:line="36" pos:column="86">(<argument><expr><name pos:line="36" pos:column="87">baseTestInputsFolder</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="36" pos:column="109">@"TestCSharpSolution\TestCSharpSolution"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="37" pos:column="9">private</specifier> <specifier pos:line="37" pos:column="17">static</specifier> <name pos:line="37" pos:column="24">string</name></type> <name pos:line="37" pos:column="31">testCSharpProjectFilePath</name> <init pos:line="37" pos:column="57">= <expr><call><name><name pos:line="37" pos:column="59">Path</name><op:operator pos:line="37" pos:column="63">.</op:operator><name pos:line="37" pos:column="64">Combine</name></name><argument_list pos:line="37" pos:column="71">(<argument><expr><name pos:line="37" pos:column="72">testCSharpProjectFolder</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="37" pos:column="97">"TestCSharpSolution.csproj"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="38" pos:column="9">private</specifier> <specifier pos:line="38" pos:column="17">static</specifier> <name pos:line="38" pos:column="24">string</name></type> <name pos:line="38" pos:column="31">testCPPSolutionFolder</name> <init pos:line="38" pos:column="53">= <expr><call><name><name pos:line="38" pos:column="55">Path</name><op:operator pos:line="38" pos:column="59">.</op:operator><name pos:line="38" pos:column="60">GetFullPath</name></name><argument_list pos:line="38" pos:column="71">(<argument><expr><call><name><name pos:line="38" pos:column="72">Path</name><op:operator pos:line="38" pos:column="76">.</op:operator><name pos:line="38" pos:column="77">Combine</name></name><argument_list pos:line="38" pos:column="84">(<argument><expr><name pos:line="38" pos:column="85">baseTestInputsFolder</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="38" pos:column="107">"TestCPPSolution"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="39" pos:column="9">private</specifier> <specifier pos:line="39" pos:column="17">static</specifier> <name pos:line="39" pos:column="24">string</name></type> <name pos:line="39" pos:column="31">testCPPSolutionFilePath</name> <init pos:line="39" pos:column="55">= <expr><call><name><name pos:line="39" pos:column="57">Path</name><op:operator pos:line="39" pos:column="61">.</op:operator><name pos:line="39" pos:column="62">Combine</name></name><argument_list pos:line="39" pos:column="69">(<argument><expr><name pos:line="39" pos:column="70">testCPPSolutionFolder</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="39" pos:column="93">"TestCPPSolution.sln"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="40" pos:column="9">private</specifier> <specifier pos:line="40" pos:column="17">static</specifier> <name pos:line="40" pos:column="24">string</name></type> <name pos:line="40" pos:column="31">testCPPProjectFolder</name> <init pos:line="40" pos:column="52">= <expr><call><name><name pos:line="40" pos:column="54">Path</name><op:operator pos:line="40" pos:column="58">.</op:operator><name pos:line="40" pos:column="59">GetFullPath</name></name><argument_list pos:line="40" pos:column="70">(<argument><expr><call><name><name pos:line="40" pos:column="71">Path</name><op:operator pos:line="40" pos:column="75">.</op:operator><name pos:line="40" pos:column="76">Combine</name></name><argument_list pos:line="40" pos:column="83">(<argument><expr><name pos:line="40" pos:column="84">baseTestInputsFolder</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="40" pos:column="106">@"TestCPPSolution\TestCPPSolution"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="41" pos:column="9">private</specifier> <specifier pos:line="41" pos:column="17">static</specifier> <name pos:line="41" pos:column="24">string</name></type> <name pos:line="41" pos:column="31">testCPPProjectFilePath</name> <init pos:line="41" pos:column="54">= <expr><call><name><name pos:line="41" pos:column="56">Path</name><op:operator pos:line="41" pos:column="60">.</op:operator><name pos:line="41" pos:column="61">Combine</name></name><argument_list pos:line="41" pos:column="68">(<argument><expr><name pos:line="41" pos:column="69">testCPPProjectFolder</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="41" pos:column="91">"TestCPPSolution.vcxproj"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="43" pos:column="9">private</specifier> <specifier pos:line="43" pos:column="17">static</specifier> <name pos:line="43" pos:column="24">bool</name></type> <name pos:line="43" pos:column="29">receivedFileAdded</name> <init pos:line="43" pos:column="47">= <expr><lit:literal type="boolean" pos:line="43" pos:column="49">false</lit:literal></expr></init><op:operator pos:line="43" pos:column="54">,</op:operator> <name pos:line="43" pos:column="56">receivedFileUpdated</name> <init pos:line="43" pos:column="76">= <expr><lit:literal type="boolean" pos:line="43" pos:column="78">false</lit:literal></expr></init><op:operator pos:line="43" pos:column="83">,</op:operator> <name pos:line="43" pos:column="85">receivedFileDeleted</name> <init pos:line="43" pos:column="105">= <expr><lit:literal type="boolean" pos:line="43" pos:column="107">false</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="44" pos:column="9">private</specifier> <specifier pos:line="44" pos:column="17">static</specifier> <name pos:line="44" pos:column="24">FileEventRaisedArgs</name></type> <name pos:line="44" pos:column="44">fera</name></decl>;</decl_stmt>

        <function><type><attribute pos:line="46" pos:column="9">[<expr><name pos:line="46" pos:column="10">ClassInitialize</name></expr>]</attribute>
        <specifier pos:line="47" pos:column="9">public</specifier> <specifier pos:line="47" pos:column="16">static</specifier> <name pos:line="47" pos:column="23">void</name></type> <name pos:line="47" pos:column="28">ClassInitialize</name><parameter_list pos:line="47" pos:column="43">(<param><decl><type><name pos:line="47" pos:column="44">TestContext</name></type> <name pos:line="47" pos:column="56">testContext</name></decl></param>)</parameter_list> <block pos:line="47" pos:column="69">{
            <comment type="line" pos:line="48" pos:column="13">// Create SrcMLServicePackage</comment>
            <decl_stmt><decl><type><name pos:line="49" pos:column="13">SrcMLServicePackage</name></type> <name pos:line="49" pos:column="33">packageObject</name> <init pos:line="49" pos:column="47">= <expr><op:operator pos:line="49" pos:column="49">new</op:operator> <call><name pos:line="49" pos:column="53">SrcMLServicePackage</name><argument_list pos:line="49" pos:column="72">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="50" pos:column="13">package</name> <op:operator pos:line="50" pos:column="21">=</op:operator> <op:operator pos:line="50" pos:column="23">(</op:operator><name pos:line="50" pos:column="24">IVsPackage</name><op:operator pos:line="50" pos:column="34">)</op:operator><name pos:line="50" pos:column="35">packageObject</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="51" pos:column="13">Assert</name><op:operator pos:line="51" pos:column="19">.</op:operator><name pos:line="51" pos:column="20">IsNotNull</name></name><argument_list pos:line="51" pos:column="29">(<argument><expr><name pos:line="51" pos:column="30">package</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="51" pos:column="39">"Get a null SrcMLServicePackage instance."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="52" pos:column="13">IServiceProvider</name></type> <name pos:line="52" pos:column="30">serviceProvider</name> <init pos:line="52" pos:column="46">= <expr><name pos:line="52" pos:column="48">package</name> <op:operator pos:line="52" pos:column="56">as</op:operator> <name pos:line="52" pos:column="59">IServiceProvider</name></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="53" pos:column="13">// Get SrcML Service</comment>
            <decl_stmt><decl><type><name pos:line="54" pos:column="13">object</name></type> <name pos:line="54" pos:column="20">o</name> <init pos:line="54" pos:column="22">= <expr><call><name><name pos:line="54" pos:column="24">serviceProvider</name><op:operator pos:line="54" pos:column="39">.</op:operator><name pos:line="54" pos:column="40">GetService</name></name><argument_list pos:line="54" pos:column="50">(<argument><expr><call><name pos:line="54" pos:column="51">typeof</name><argument_list pos:line="54" pos:column="57">(<argument><expr><name pos:line="54" pos:column="58">SSrcMLGlobalService</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="55" pos:column="13">Assert</name><op:operator pos:line="55" pos:column="19">.</op:operator><name pos:line="55" pos:column="20">IsNotNull</name></name><argument_list pos:line="55" pos:column="29">(<argument><expr><name pos:line="55" pos:column="30">o</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="55" pos:column="33">"GetService returned null for the global service."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="56" pos:column="13">srcMLService</name> <op:operator pos:line="56" pos:column="26">=</op:operator> <name pos:line="56" pos:column="28">o</name> <op:operator pos:line="56" pos:column="30">as</op:operator> <name pos:line="56" pos:column="33">ISrcMLGlobalService</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="57" pos:column="13">Assert</name><op:operator pos:line="57" pos:column="19">.</op:operator><name pos:line="57" pos:column="20">IsNotNull</name></name><argument_list pos:line="57" pos:column="29">(<argument><expr><name pos:line="57" pos:column="30">srcMLService</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="57" pos:column="44">"The service SSrcMLGlobalService does not implements ISrcMLGlobalService."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="59" pos:column="13">// Register SrcML Service events</comment>
            <expr_stmt><expr><name><name pos:line="60" pos:column="13">srcMLService</name><op:operator pos:line="60" pos:column="25">.</op:operator><name pos:line="60" pos:column="26">SourceFileChanged</name></name> <op:operator pos:line="60" pos:column="44">+=</op:operator> <name pos:line="60" pos:column="47">SourceFileChanged</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="61" pos:column="13">srcMLService</name><op:operator pos:line="61" pos:column="25">.</op:operator><name pos:line="61" pos:column="26">IsReadyChanged</name></name> <op:operator pos:line="61" pos:column="41">+=</op:operator> <name pos:line="61" pos:column="44">IsReadyChanged</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="62" pos:column="13">srcMLService</name><op:operator pos:line="62" pos:column="25">.</op:operator><name pos:line="62" pos:column="26">MonitoringStopped</name></name> <op:operator pos:line="62" pos:column="44">+=</op:operator> <name pos:line="62" pos:column="47">MonitoringStopped</name></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="65" pos:column="9">[<expr><name pos:line="65" pos:column="10">TestInitialize</name></expr>]</attribute>
        <specifier pos:line="66" pos:column="9">public</specifier> <name pos:line="66" pos:column="16">void</name></type> <name pos:line="66" pos:column="21">TestInitialize</name><parameter_list pos:line="66" pos:column="35">()</parameter_list> <block pos:line="66" pos:column="38">{
        }</block></function>

        <function><type><attribute pos:line="69" pos:column="9">[<expr><name pos:line="69" pos:column="10">TestMethod</name></expr>]</attribute>
        <attribute pos:line="70" pos:column="9">[<expr><call><name pos:line="70" pos:column="10">HostType</name><argument_list pos:line="70" pos:column="18">(<argument><expr><lit:literal type="string" pos:line="70" pos:column="19">"VS IDE"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="71" pos:column="9">public</specifier> <name pos:line="71" pos:column="16">void</name></type> <name pos:line="71" pos:column="21">FileLevelIncrementalUpdateTest</name><parameter_list pos:line="71" pos:column="51">()</parameter_list> <block pos:line="71" pos:column="54">{
            <comment type="line" pos:line="72" pos:column="13">// CSharp</comment>
            <expr_stmt><expr><call><name pos:line="73" pos:column="13">OpenSolution</name><argument_list pos:line="73" pos:column="25">(<argument><expr><name pos:line="73" pos:column="26">testCSharpSolutionFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="74" pos:column="13">CheckCSharpSolutionStartup</name><argument_list pos:line="74" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="75" pos:column="13">string</name></type> <name pos:line="75" pos:column="20">newFileName</name> <init pos:line="75" pos:column="32">= <expr><lit:literal type="string" pos:line="75" pos:column="34">"NewCSharpClass1.cs"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="76" pos:column="13">string</name></type> <name pos:line="76" pos:column="20">saveAsFileName</name> <init pos:line="76" pos:column="35">= <expr><lit:literal type="string" pos:line="76" pos:column="37">"NewCSharpClass111111.cs"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="77" pos:column="13">string</name></type> <name pos:line="77" pos:column="20">templateFilePath</name> <init pos:line="77" pos:column="37">= <expr><call><name><name pos:line="77" pos:column="39">Path</name><op:operator pos:line="77" pos:column="43">.</op:operator><name pos:line="77" pos:column="44">Combine</name></name><argument_list pos:line="77" pos:column="51">(<argument><expr><name pos:line="77" pos:column="52">testFileTemplateFolder</name></expr></argument>, <argument><expr><name pos:line="77" pos:column="76">newFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="78" pos:column="13">string</name></type> <name pos:line="78" pos:column="20">newFilePath</name> <init pos:line="78" pos:column="32">= <expr><call><name><name pos:line="78" pos:column="34">Path</name><op:operator pos:line="78" pos:column="38">.</op:operator><name pos:line="78" pos:column="39">Combine</name></name><argument_list pos:line="78" pos:column="46">(<argument><expr><name pos:line="78" pos:column="47">testCSharpProjectFolder</name></expr></argument>, <argument><expr><name pos:line="78" pos:column="72">newFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="79" pos:column="13">string</name></type> <name pos:line="79" pos:column="20">saveAsFilePath</name> <init pos:line="79" pos:column="35">= <expr><call><name><name pos:line="79" pos:column="37">Path</name><op:operator pos:line="79" pos:column="41">.</op:operator><name pos:line="79" pos:column="42">Combine</name></name><argument_list pos:line="79" pos:column="49">(<argument><expr><name pos:line="79" pos:column="50">testCSharpProjectFolder</name></expr></argument>, <argument><expr><name pos:line="79" pos:column="75">saveAsFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="80" pos:column="13">AddCSharpProjectItem</name><argument_list pos:line="80" pos:column="33">(<argument><expr><name pos:line="80" pos:column="34">testCSharpProjectFilePath</name></expr></argument>, <argument><expr><name pos:line="80" pos:column="61">templateFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="81" pos:column="13">CheckSrcMLFiles</name><argument_list pos:line="81" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="82" pos:column="13">System</name><op:operator pos:line="82" pos:column="19">.</op:operator><name pos:line="82" pos:column="20">Threading</name><op:operator pos:line="82" pos:column="29">.</op:operator><name pos:line="82" pos:column="30">Thread</name><op:operator pos:line="82" pos:column="36">.</op:operator><name pos:line="82" pos:column="37">Sleep</name></name><argument_list pos:line="82" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="82" pos:column="43">1000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="83" pos:column="13">SaveCSharpProjectItem</name><argument_list pos:line="83" pos:column="34">(<argument><expr><name pos:line="83" pos:column="35">newFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="84" pos:column="13">//CheckSrcMLFiles();    // EnvDTE.ProjectItem.Save() does not trigger IVsRunningDocTableEvents.OnAfterSave()</comment>
            <expr_stmt><expr><call><name><name pos:line="85" pos:column="13">System</name><op:operator pos:line="85" pos:column="19">.</op:operator><name pos:line="85" pos:column="20">Threading</name><op:operator pos:line="85" pos:column="29">.</op:operator><name pos:line="85" pos:column="30">Thread</name><op:operator pos:line="85" pos:column="36">.</op:operator><name pos:line="85" pos:column="37">Sleep</name></name><argument_list pos:line="85" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="85" pos:column="43">1000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="86" pos:column="13">RenameCSharpProjectItem</name><argument_list pos:line="86" pos:column="36">(<argument><expr><name pos:line="86" pos:column="37">newFilePath</name></expr></argument>, <argument><expr><name pos:line="86" pos:column="50">saveAsFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="87" pos:column="13">CheckSrcMLFiles</name><argument_list pos:line="87" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="88" pos:column="13">System</name><op:operator pos:line="88" pos:column="19">.</op:operator><name pos:line="88" pos:column="20">Threading</name><op:operator pos:line="88" pos:column="29">.</op:operator><name pos:line="88" pos:column="30">Thread</name><op:operator pos:line="88" pos:column="36">.</op:operator><name pos:line="88" pos:column="37">Sleep</name></name><argument_list pos:line="88" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="88" pos:column="43">1000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="89" pos:column="13">DeleteCSharpProjectItem</name><argument_list pos:line="89" pos:column="36">(<argument><expr><name pos:line="89" pos:column="37">saveAsFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="90" pos:column="13">CheckSrcMLFiles</name><argument_list pos:line="90" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="91" pos:column="13">System</name><op:operator pos:line="91" pos:column="19">.</op:operator><name pos:line="91" pos:column="20">Threading</name><op:operator pos:line="91" pos:column="29">.</op:operator><name pos:line="91" pos:column="30">Thread</name><op:operator pos:line="91" pos:column="36">.</op:operator><name pos:line="91" pos:column="37">Sleep</name></name><argument_list pos:line="91" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="91" pos:column="43">1000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="92" pos:column="13">CloseSolution</name><argument_list pos:line="92" pos:column="26">()</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="94" pos:column="13">// CPP</comment>
            <expr_stmt><expr><call><name pos:line="95" pos:column="13">OpenSolution</name><argument_list pos:line="95" pos:column="25">(<argument><expr><name pos:line="95" pos:column="26">testCPPSolutionFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="96" pos:column="13">CheckCPPSolutionStartup</name><argument_list pos:line="96" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="97" pos:column="13">newFileName</name> <op:operator pos:line="97" pos:column="25">=</op:operator> <lit:literal type="string" pos:line="97" pos:column="27">"NewCPPClass1.cpp"</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="98" pos:column="13">saveAsFileName</name> <op:operator pos:line="98" pos:column="28">=</op:operator> <lit:literal type="string" pos:line="98" pos:column="30">"NewCPPClass111111.cpp"</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="99" pos:column="13">templateFilePath</name> <op:operator pos:line="99" pos:column="30">=</op:operator> <call><name><name pos:line="99" pos:column="32">Path</name><op:operator pos:line="99" pos:column="36">.</op:operator><name pos:line="99" pos:column="37">Combine</name></name><argument_list pos:line="99" pos:column="44">(<argument><expr><name pos:line="99" pos:column="45">testFileTemplateFolder</name></expr></argument>, <argument><expr><name pos:line="99" pos:column="69">newFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="100" pos:column="13">newFilePath</name> <op:operator pos:line="100" pos:column="25">=</op:operator> <call><name><name pos:line="100" pos:column="27">Path</name><op:operator pos:line="100" pos:column="31">.</op:operator><name pos:line="100" pos:column="32">Combine</name></name><argument_list pos:line="100" pos:column="39">(<argument><expr><name pos:line="100" pos:column="40">testCPPProjectFolder</name></expr></argument>, <argument><expr><name pos:line="100" pos:column="62">newFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="101" pos:column="13">saveAsFilePath</name> <op:operator pos:line="101" pos:column="28">=</op:operator> <call><name><name pos:line="101" pos:column="30">Path</name><op:operator pos:line="101" pos:column="34">.</op:operator><name pos:line="101" pos:column="35">Combine</name></name><argument_list pos:line="101" pos:column="42">(<argument><expr><name pos:line="101" pos:column="43">testCPPProjectFolder</name></expr></argument>, <argument><expr><name pos:line="101" pos:column="65">saveAsFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="102" pos:column="13">AddCPPProjectItem</name><argument_list pos:line="102" pos:column="30">(<argument><expr><name pos:line="102" pos:column="31">testCPPProjectFilePath</name></expr></argument>, <argument><expr><name pos:line="102" pos:column="55">templateFilePath</name></expr></argument>, <argument><expr><name pos:line="102" pos:column="73">newFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="103" pos:column="13">CheckSrcMLFiles</name><argument_list pos:line="103" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="104" pos:column="13">System</name><op:operator pos:line="104" pos:column="19">.</op:operator><name pos:line="104" pos:column="20">Threading</name><op:operator pos:line="104" pos:column="29">.</op:operator><name pos:line="104" pos:column="30">Thread</name><op:operator pos:line="104" pos:column="36">.</op:operator><name pos:line="104" pos:column="37">Sleep</name></name><argument_list pos:line="104" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="104" pos:column="43">1000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="105" pos:column="13">//SaveCPPProjectItem(newFilePath);  // EnvDTE.ProjectItem.Save() is not implemented in VS for CPP project item. (NotImplementedException)</comment>
            <comment type="line" pos:line="106" pos:column="13">//System.Threading.Thread.Sleep(1000);</comment>
            <comment type="line" pos:line="107" pos:column="13">//RenameCPPProjectItem(newFilePath, saveAsFilePath);  // EnvDTE.ProjectItem.SaveAs() is not implemented in VS for CPP project item. (NotImplementedException)</comment>
            <comment type="line" pos:line="108" pos:column="13">//System.Threading.Thread.Sleep(1000);</comment>
            <comment type="line" pos:line="109" pos:column="13">//DeleteCPPProjectItem(saveAsFilePath);</comment>
            <expr_stmt><expr><call><name pos:line="110" pos:column="13">DeleteCPPProjectItem</name><argument_list pos:line="110" pos:column="33">(<argument><expr><name pos:line="110" pos:column="34">newFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="111" pos:column="13">CheckSrcMLFiles</name><argument_list pos:line="111" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="112" pos:column="13">System</name><op:operator pos:line="112" pos:column="19">.</op:operator><name pos:line="112" pos:column="20">Threading</name><op:operator pos:line="112" pos:column="29">.</op:operator><name pos:line="112" pos:column="30">Thread</name><op:operator pos:line="112" pos:column="36">.</op:operator><name pos:line="112" pos:column="37">Sleep</name></name><argument_list pos:line="112" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="112" pos:column="43">1000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="113" pos:column="13">CloseSolution</name><argument_list pos:line="113" pos:column="26">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="116" pos:column="9">[<expr><name pos:line="116" pos:column="10">TestMethod</name></expr>]</attribute>
        <attribute pos:line="117" pos:column="9">[<expr><call><name pos:line="117" pos:column="10">HostType</name><argument_list pos:line="117" pos:column="18">(<argument><expr><lit:literal type="string" pos:line="117" pos:column="19">"VS IDE"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="118" pos:column="9">public</specifier> <name pos:line="118" pos:column="16">void</name></type> <name pos:line="118" pos:column="21">ProjectLevelIncrementalUpdateTest</name><parameter_list pos:line="118" pos:column="54">()</parameter_list> <block pos:line="118" pos:column="57">{
            <comment type="line" pos:line="119" pos:column="13">// CPP</comment>
            <expr_stmt><expr><call><name pos:line="120" pos:column="13">OpenSolution</name><argument_list pos:line="120" pos:column="25">(<argument><expr><name pos:line="120" pos:column="26">testCPPSolutionFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="121" pos:column="13">CheckCPPSolutionStartup</name><argument_list pos:line="121" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="122" pos:column="13">string</name></type> <name pos:line="122" pos:column="20">templateProjectFilePath</name> <init pos:line="122" pos:column="44">= <expr><call><name><name pos:line="122" pos:column="46">Path</name><op:operator pos:line="122" pos:column="50">.</op:operator><name pos:line="122" pos:column="51">GetFullPath</name></name><argument_list pos:line="122" pos:column="62">(<argument><expr><call><name><name pos:line="122" pos:column="63">Path</name><op:operator pos:line="122" pos:column="67">.</op:operator><name pos:line="122" pos:column="68">Combine</name></name><argument_list pos:line="122" pos:column="75">(<argument><expr><name pos:line="122" pos:column="76">testFileTemplateFolder</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="122" pos:column="100">@"ConsoleApplication1\ConsoleApplication1\ConsoleApplication1.vcxproj"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="123" pos:column="13">//WriteLog(logFilePath, "templateProjectFilePath: [" + templateProjectFilePath + "]");</comment>
            <expr_stmt><expr><call><name pos:line="124" pos:column="13">AddCPPProject</name><argument_list pos:line="124" pos:column="26">(<argument><expr><name pos:line="124" pos:column="27">templateProjectFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="125" pos:column="13">CheckSrcMLFilesForNewCPPProject</name><argument_list pos:line="125" pos:column="44">(<argument><expr><lit:literal type="boolean" pos:line="125" pos:column="45">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="126" pos:column="13">System</name><op:operator pos:line="126" pos:column="19">.</op:operator><name pos:line="126" pos:column="20">Threading</name><op:operator pos:line="126" pos:column="29">.</op:operator><name pos:line="126" pos:column="30">Thread</name><op:operator pos:line="126" pos:column="36">.</op:operator><name pos:line="126" pos:column="37">Sleep</name></name><argument_list pos:line="126" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="126" pos:column="43">1000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="127" pos:column="13">RemoveCPPProject</name><argument_list pos:line="127" pos:column="29">(<argument><expr><name pos:line="127" pos:column="30">templateProjectFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="128" pos:column="13">CheckSrcMLFilesForNewCPPProject</name><argument_list pos:line="128" pos:column="44">(<argument><expr><lit:literal type="boolean" pos:line="128" pos:column="45">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="129" pos:column="13">//System.Threading.Thread.Sleep(1000);</comment>
            <expr_stmt><expr><call><name pos:line="130" pos:column="13">CloseSolution</name><argument_list pos:line="130" pos:column="26">()</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:line="132" pos:column="13">/*
            // CSharp
            OpenSolution(testCSharpSolutionFilePath);
            CheckCSharpSolutionStartup();
            templateProjectFilePath = Path.Combine(testFileTemplateFolder, @"ClassLibrary1\ClassLibrary1\ClassLibrary1.csproj");
            //WriteLog(logFilePath, "C# templateProjectFilePath: [" + templateProjectFilePath + "]");
            AddCSharpProject(templateProjectFilePath);
            CheckSrcMLFilesForNewCSharpProject(true);
            System.Threading.Thread.Sleep(1000);
            RemoveCSharpProject(templateProjectFilePath);
            CheckSrcMLFilesForNewCSharpProject(false);
            System.Threading.Thread.Sleep(1000);
            CloseSolution();
            */</comment>
        }</block></function>

        <function><type><attribute pos:line="148" pos:column="9">[<expr><name pos:line="148" pos:column="10">TestCleanup</name></expr>]</attribute>
        <specifier pos:line="149" pos:column="9">public</specifier> <name pos:line="149" pos:column="16">void</name></type> <name pos:line="149" pos:column="21">TestCleanup</name><parameter_list pos:line="149" pos:column="32">()</parameter_list> <block pos:line="149" pos:column="35">{
        }</block></function>

        <function><type><attribute pos:line="152" pos:column="9">[<expr><name pos:line="152" pos:column="10">ClassCleanup</name></expr>]</attribute>
        <specifier pos:line="153" pos:column="9">public</specifier> <specifier pos:line="153" pos:column="16">static</specifier> <name pos:line="153" pos:column="23">void</name></type> <name pos:line="153" pos:column="28">ClassCleanup</name><parameter_list pos:line="153" pos:column="40">()</parameter_list> <block pos:line="153" pos:column="43">{
            <expr_stmt><expr><name pos:line="154" pos:column="13">srcMLService</name> <op:operator pos:line="154" pos:column="26">=</op:operator> <name pos:line="154" pos:column="28">null</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="155" pos:column="13">package</name><op:operator pos:line="155" pos:column="20">.</op:operator><name pos:line="155" pos:column="21">SetSite</name></name><argument_list pos:line="155" pos:column="28">(<argument><expr><name pos:line="155" pos:column="29">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="156" pos:column="13">package</name><op:operator pos:line="156" pos:column="20">.</op:operator><name pos:line="156" pos:column="21">Close</name></name><argument_list pos:line="156" pos:column="26">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="157" pos:column="13">package</name> <op:operator pos:line="157" pos:column="21">=</op:operator> <name pos:line="157" pos:column="23">null</name></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="160" pos:column="9">public</specifier> <name pos:line="160" pos:column="16">void</name></type> <name pos:line="160" pos:column="21">OpenSolution</name><parameter_list pos:line="160" pos:column="33">(<param><decl><type><name pos:line="160" pos:column="34">string</name></type> <name pos:line="160" pos:column="41">testSolutionFilePath</name></decl></param>)</parameter_list> <block pos:line="160" pos:column="63">{
            <comment type="line" pos:line="161" pos:column="13">// Get the components service</comment>
            <expr_stmt><expr><name pos:line="162" pos:column="13">context</name> <op:operator pos:line="162" pos:column="21">=</op:operator> <call><name><name pos:line="162" pos:column="23">VsIdeTestHostContext</name><op:operator pos:line="162" pos:column="43">.</op:operator><name pos:line="162" pos:column="44">ServiceProvider</name><op:operator pos:line="162" pos:column="59">.</op:operator><name pos:line="162" pos:column="60">GetService</name></name><argument_list pos:line="162" pos:column="70">(<argument><expr><call><name pos:line="162" pos:column="71">typeof</name><argument_list pos:line="162" pos:column="77">(<argument><expr><name pos:line="162" pos:column="78">SComponentModel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="162" pos:column="96">as</op:operator> <name pos:line="162" pos:column="99">IComponentModel</name></expr>;</expr_stmt>
            <comment type="line" pos:line="163" pos:column="13">// Open a solution that is the initial state for your tests</comment>
            <expr_stmt><expr><name pos:line="164" pos:column="13">ModelSolution</name> <op:operator pos:line="164" pos:column="27">=</op:operator> <name><name pos:line="164" pos:column="29">VsIdeTestHostContext</name><op:operator pos:line="164" pos:column="49">.</op:operator><name pos:line="164" pos:column="50">Dte</name><op:operator pos:line="164" pos:column="53">.</op:operator><name pos:line="164" pos:column="54">Solution</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="165" pos:column="13">ModelSolution</name><op:operator pos:line="165" pos:column="26">.</op:operator><name pos:line="165" pos:column="27">Open</name></name><argument_list pos:line="165" pos:column="31">(<argument><expr><call><name><name pos:line="165" pos:column="32">Path</name><op:operator pos:line="165" pos:column="36">.</op:operator><name pos:line="165" pos:column="37">GetFullPath</name></name><argument_list pos:line="165" pos:column="48">(<argument><expr><name pos:line="165" pos:column="49">testSolutionFilePath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="166" pos:column="13">Assert</name><op:operator pos:line="166" pos:column="19">.</op:operator><name pos:line="166" pos:column="20">IsNotNull</name></name><argument_list pos:line="166" pos:column="29">(<argument><expr><name pos:line="166" pos:column="30">ModelSolution</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="166" pos:column="45">"VS solution not found"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="167" pos:column="13">// Start up</comment>
            <expr_stmt><expr><call><name><name pos:line="168" pos:column="13">srcMLService</name><op:operator pos:line="168" pos:column="25">.</op:operator><name pos:line="168" pos:column="26">StartMonitoring</name></name><argument_list pos:line="168" pos:column="41">(<argument><expr><lit:literal type="boolean" pos:line="168" pos:column="42">true</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="168" pos:column="48">SrcMLHelper</name><op:operator pos:line="168" pos:column="59">.</op:operator><name pos:line="168" pos:column="60">GetSrcMLDefaultDirectory</name></name><argument_list pos:line="168" pos:column="84">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="169" pos:column="13">System</name><op:operator pos:line="169" pos:column="19">.</op:operator><name pos:line="169" pos:column="20">Threading</name><op:operator pos:line="169" pos:column="29">.</op:operator><name pos:line="169" pos:column="30">Thread</name><op:operator pos:line="169" pos:column="36">.</op:operator><name pos:line="169" pos:column="37">Sleep</name></name><argument_list pos:line="169" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="169" pos:column="43">3000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="172" pos:column="9">public</specifier> <name pos:line="172" pos:column="16">void</name></type> <name pos:line="172" pos:column="21">CheckCSharpSolutionStartup</name><parameter_list pos:line="172" pos:column="47">()</parameter_list> <block pos:line="172" pos:column="50">{
            <decl_stmt><decl><type><name pos:line="173" pos:column="13">SrcMLArchive</name></type> <name pos:line="173" pos:column="26">archive</name> <init pos:line="173" pos:column="34">= <expr><call><name><name pos:line="173" pos:column="36">srcMLService</name><op:operator pos:line="173" pos:column="48">.</op:operator><name pos:line="173" pos:column="49">GetSrcMLArchive</name></name><argument_list pos:line="173" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="174" pos:column="13">Assert</name><op:operator pos:line="174" pos:column="19">.</op:operator><name pos:line="174" pos:column="20">IsNotNull</name></name><argument_list pos:line="174" pos:column="29">(<argument><expr><name pos:line="174" pos:column="30">archive</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="174" pos:column="39">"GetSrcMLArchive returned null."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="175" pos:column="13">string</name></type> <name pos:line="175" pos:column="20">sourcePath</name> <init pos:line="175" pos:column="31">= <expr><call><name><name pos:line="175" pos:column="33">Path</name><op:operator pos:line="175" pos:column="37">.</op:operator><name pos:line="175" pos:column="38">Combine</name></name><argument_list pos:line="175" pos:column="45">(<argument><expr><name pos:line="175" pos:column="46">testCSharpProjectFolder</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="175" pos:column="71">"Class1.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="176" pos:column="13">string</name></type> <name pos:line="176" pos:column="20">srcMLPath</name> <init pos:line="176" pos:column="30">= <expr><call><name><name pos:line="176" pos:column="32">archive</name><op:operator pos:line="176" pos:column="39">.</op:operator><name pos:line="176" pos:column="40">GetXmlPathForSourcePath</name></name><argument_list pos:line="176" pos:column="63">(<argument><expr><name pos:line="176" pos:column="64">sourcePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="177" pos:column="13">Assert</name><op:operator pos:line="177" pos:column="19">.</op:operator><name pos:line="177" pos:column="20">IsTrue</name></name><argument_list pos:line="177" pos:column="26">(<argument><expr><call><name><name pos:line="177" pos:column="27">File</name><op:operator pos:line="177" pos:column="31">.</op:operator><name pos:line="177" pos:column="32">Exists</name></name><argument_list pos:line="177" pos:column="38">(<argument><expr><name pos:line="177" pos:column="39">sourcePath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="177" pos:column="52">"The source file ["</lit:literal> <op:operator pos:line="177" pos:column="72">+</op:operator> <name pos:line="177" pos:column="74">sourcePath</name> <op:operator pos:line="177" pos:column="85">+</op:operator> <lit:literal type="string" pos:line="177" pos:column="87">"] does not exist."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="178" pos:column="13">Assert</name><op:operator pos:line="178" pos:column="19">.</op:operator><name pos:line="178" pos:column="20">IsTrue</name></name><argument_list pos:line="178" pos:column="26">(<argument><expr><call><name><name pos:line="178" pos:column="27">File</name><op:operator pos:line="178" pos:column="31">.</op:operator><name pos:line="178" pos:column="32">Exists</name></name><argument_list pos:line="178" pos:column="38">(<argument><expr><name pos:line="178" pos:column="39">srcMLPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="178" pos:column="51">"The srcML file ["</lit:literal> <op:operator pos:line="178" pos:column="70">+</op:operator> <name pos:line="178" pos:column="72">srcMLPath</name> <op:operator pos:line="178" pos:column="82">+</op:operator> <lit:literal type="string" pos:line="178" pos:column="84">"] does not exist."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="179" pos:column="13">Assert</name><op:operator pos:line="179" pos:column="19">.</op:operator><name pos:line="179" pos:column="20">AreEqual</name></name><argument_list pos:line="179" pos:column="28">(<argument><expr><op:operator pos:line="179" pos:column="29">new</op:operator> <call><name pos:line="179" pos:column="33">FileInfo</name><argument_list pos:line="179" pos:column="41">(<argument><expr><name pos:line="179" pos:column="42">sourcePath</name></expr></argument>)</argument_list></call><op:operator pos:line="179" pos:column="53">.</op:operator><name pos:line="179" pos:column="54">LastWriteTime</name></expr></argument>, <argument><expr><op:operator pos:line="179" pos:column="69">new</op:operator> <call><name pos:line="179" pos:column="73">FileInfo</name><argument_list pos:line="179" pos:column="81">(<argument><expr><name pos:line="179" pos:column="82">srcMLPath</name></expr></argument>)</argument_list></call><op:operator pos:line="179" pos:column="92">.</op:operator><name pos:line="179" pos:column="93">LastWriteTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="180" pos:column="13">XElement</name></type> <name pos:line="180" pos:column="22">xelement</name> <init pos:line="180" pos:column="31">= <expr><call><name><name pos:line="180" pos:column="33">srcMLService</name><op:operator pos:line="180" pos:column="45">.</op:operator><name pos:line="180" pos:column="46">GetXElementForSourceFile</name></name><argument_list pos:line="180" pos:column="70">(<argument><expr><name pos:line="180" pos:column="71">sourcePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="181" pos:column="13">Assert</name><op:operator pos:line="181" pos:column="19">.</op:operator><name pos:line="181" pos:column="20">IsNotNull</name></name><argument_list pos:line="181" pos:column="29">(<argument><expr><name pos:line="181" pos:column="30">xelement</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="181" pos:column="40">"GetXElementForSourceFile returned null."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="182" pos:column="13">string</name></type> <name pos:line="182" pos:column="20">sourcePathX</name> <init pos:line="182" pos:column="32">= <expr><call><name><name pos:line="182" pos:column="34">Path</name><op:operator pos:line="182" pos:column="38">.</op:operator><name pos:line="182" pos:column="39">Combine</name></name><argument_list pos:line="182" pos:column="46">(<argument><expr><name pos:line="182" pos:column="47">testCSharpProjectFolder</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="182" pos:column="72">"AlreadyDeletedClass1.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="183" pos:column="13">XElement</name></type> <name pos:line="183" pos:column="22">xelementX</name> <init pos:line="183" pos:column="32">= <expr><call><name><name pos:line="183" pos:column="34">srcMLService</name><op:operator pos:line="183" pos:column="46">.</op:operator><name pos:line="183" pos:column="47">GetXElementForSourceFile</name></name><argument_list pos:line="183" pos:column="71">(<argument><expr><name pos:line="183" pos:column="72">sourcePathX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="184" pos:column="13">Assert</name><op:operator pos:line="184" pos:column="19">.</op:operator><name pos:line="184" pos:column="20">IsNull</name></name><argument_list pos:line="184" pos:column="26">(<argument><expr><name pos:line="184" pos:column="27">xelementX</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="184" pos:column="38">"GetXElementForSourceFile returned not null."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="187" pos:column="9">public</specifier> <name pos:line="187" pos:column="16">void</name></type> <name pos:line="187" pos:column="21">CheckCPPSolutionStartup</name><parameter_list pos:line="187" pos:column="44">()</parameter_list> <block pos:line="187" pos:column="47">{
            <decl_stmt><decl><type><name pos:line="188" pos:column="13">SrcMLArchive</name></type> <name pos:line="188" pos:column="26">archive</name> <init pos:line="188" pos:column="34">= <expr><call><name><name pos:line="188" pos:column="36">srcMLService</name><op:operator pos:line="188" pos:column="48">.</op:operator><name pos:line="188" pos:column="49">GetSrcMLArchive</name></name><argument_list pos:line="188" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="189" pos:column="13">Assert</name><op:operator pos:line="189" pos:column="19">.</op:operator><name pos:line="189" pos:column="20">IsNotNull</name></name><argument_list pos:line="189" pos:column="29">(<argument><expr><name pos:line="189" pos:column="30">archive</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="189" pos:column="39">"GetSrcMLArchive returned null."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="190" pos:column="13">string</name></type> <name pos:line="190" pos:column="20">sourcePath1</name> <init pos:line="190" pos:column="32">= <expr><call><name><name pos:line="190" pos:column="34">Path</name><op:operator pos:line="190" pos:column="38">.</op:operator><name pos:line="190" pos:column="39">Combine</name></name><argument_list pos:line="190" pos:column="46">(<argument><expr><name pos:line="190" pos:column="47">testCPPProjectFolder</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="190" pos:column="69">"stdafx.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="191" pos:column="13">string</name></type> <name pos:line="191" pos:column="20">sourcePath2</name> <init pos:line="191" pos:column="32">= <expr><call><name><name pos:line="191" pos:column="34">Path</name><op:operator pos:line="191" pos:column="38">.</op:operator><name pos:line="191" pos:column="39">Combine</name></name><argument_list pos:line="191" pos:column="46">(<argument><expr><name pos:line="191" pos:column="47">testCPPProjectFolder</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="191" pos:column="69">"stdafx.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="192" pos:column="13">string</name></type> <name pos:line="192" pos:column="20">sourcePath3</name> <init pos:line="192" pos:column="32">= <expr><call><name><name pos:line="192" pos:column="34">Path</name><op:operator pos:line="192" pos:column="38">.</op:operator><name pos:line="192" pos:column="39">Combine</name></name><argument_list pos:line="192" pos:column="46">(<argument><expr><name pos:line="192" pos:column="47">testCPPProjectFolder</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="192" pos:column="69">"targetver.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="193" pos:column="13">string</name></type> <name pos:line="193" pos:column="20">sourcePath4</name> <init pos:line="193" pos:column="32">= <expr><call><name><name pos:line="193" pos:column="34">Path</name><op:operator pos:line="193" pos:column="38">.</op:operator><name pos:line="193" pos:column="39">Combine</name></name><argument_list pos:line="193" pos:column="46">(<argument><expr><name pos:line="193" pos:column="47">testCPPProjectFolder</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="193" pos:column="69">"TestCPPSolution.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="194" pos:column="13">string</name></type> <name pos:line="194" pos:column="20">srcMLPath1</name> <init pos:line="194" pos:column="31">= <expr><call><name><name pos:line="194" pos:column="33">archive</name><op:operator pos:line="194" pos:column="40">.</op:operator><name pos:line="194" pos:column="41">GetXmlPathForSourcePath</name></name><argument_list pos:line="194" pos:column="64">(<argument><expr><name pos:line="194" pos:column="65">sourcePath1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="195" pos:column="13">string</name></type> <name pos:line="195" pos:column="20">srcMLPath2</name> <init pos:line="195" pos:column="31">= <expr><call><name><name pos:line="195" pos:column="33">archive</name><op:operator pos:line="195" pos:column="40">.</op:operator><name pos:line="195" pos:column="41">GetXmlPathForSourcePath</name></name><argument_list pos:line="195" pos:column="64">(<argument><expr><name pos:line="195" pos:column="65">sourcePath2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="196" pos:column="13">string</name></type> <name pos:line="196" pos:column="20">srcMLPath3</name> <init pos:line="196" pos:column="31">= <expr><call><name><name pos:line="196" pos:column="33">archive</name><op:operator pos:line="196" pos:column="40">.</op:operator><name pos:line="196" pos:column="41">GetXmlPathForSourcePath</name></name><argument_list pos:line="196" pos:column="64">(<argument><expr><name pos:line="196" pos:column="65">sourcePath3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="197" pos:column="13">string</name></type> <name pos:line="197" pos:column="20">srcMLPath4</name> <init pos:line="197" pos:column="31">= <expr><call><name><name pos:line="197" pos:column="33">archive</name><op:operator pos:line="197" pos:column="40">.</op:operator><name pos:line="197" pos:column="41">GetXmlPathForSourcePath</name></name><argument_list pos:line="197" pos:column="64">(<argument><expr><name pos:line="197" pos:column="65">sourcePath4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="198" pos:column="13">Assert</name><op:operator pos:line="198" pos:column="19">.</op:operator><name pos:line="198" pos:column="20">IsTrue</name></name><argument_list pos:line="198" pos:column="26">(<argument><expr><call><name><name pos:line="198" pos:column="27">File</name><op:operator pos:line="198" pos:column="31">.</op:operator><name pos:line="198" pos:column="32">Exists</name></name><argument_list pos:line="198" pos:column="38">(<argument><expr><name pos:line="198" pos:column="39">sourcePath1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="198" pos:column="53">"The source file ["</lit:literal> <op:operator pos:line="198" pos:column="73">+</op:operator> <name pos:line="198" pos:column="75">sourcePath1</name> <op:operator pos:line="198" pos:column="87">+</op:operator> <lit:literal type="string" pos:line="198" pos:column="89">"] does not exist."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="199" pos:column="13">Assert</name><op:operator pos:line="199" pos:column="19">.</op:operator><name pos:line="199" pos:column="20">IsTrue</name></name><argument_list pos:line="199" pos:column="26">(<argument><expr><call><name><name pos:line="199" pos:column="27">File</name><op:operator pos:line="199" pos:column="31">.</op:operator><name pos:line="199" pos:column="32">Exists</name></name><argument_list pos:line="199" pos:column="38">(<argument><expr><name pos:line="199" pos:column="39">sourcePath2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="199" pos:column="53">"The source file ["</lit:literal> <op:operator pos:line="199" pos:column="73">+</op:operator> <name pos:line="199" pos:column="75">sourcePath2</name> <op:operator pos:line="199" pos:column="87">+</op:operator> <lit:literal type="string" pos:line="199" pos:column="89">"] does not exist."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="200" pos:column="13">Assert</name><op:operator pos:line="200" pos:column="19">.</op:operator><name pos:line="200" pos:column="20">IsTrue</name></name><argument_list pos:line="200" pos:column="26">(<argument><expr><call><name><name pos:line="200" pos:column="27">File</name><op:operator pos:line="200" pos:column="31">.</op:operator><name pos:line="200" pos:column="32">Exists</name></name><argument_list pos:line="200" pos:column="38">(<argument><expr><name pos:line="200" pos:column="39">sourcePath3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="200" pos:column="53">"The source file ["</lit:literal> <op:operator pos:line="200" pos:column="73">+</op:operator> <name pos:line="200" pos:column="75">sourcePath3</name> <op:operator pos:line="200" pos:column="87">+</op:operator> <lit:literal type="string" pos:line="200" pos:column="89">"] does not exist."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="201" pos:column="13">Assert</name><op:operator pos:line="201" pos:column="19">.</op:operator><name pos:line="201" pos:column="20">IsTrue</name></name><argument_list pos:line="201" pos:column="26">(<argument><expr><call><name><name pos:line="201" pos:column="27">File</name><op:operator pos:line="201" pos:column="31">.</op:operator><name pos:line="201" pos:column="32">Exists</name></name><argument_list pos:line="201" pos:column="38">(<argument><expr><name pos:line="201" pos:column="39">sourcePath4</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="201" pos:column="53">"The source file ["</lit:literal> <op:operator pos:line="201" pos:column="73">+</op:operator> <name pos:line="201" pos:column="75">sourcePath4</name> <op:operator pos:line="201" pos:column="87">+</op:operator> <lit:literal type="string" pos:line="201" pos:column="89">"] does not exist."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="202" pos:column="13">Assert</name><op:operator pos:line="202" pos:column="19">.</op:operator><name pos:line="202" pos:column="20">IsTrue</name></name><argument_list pos:line="202" pos:column="26">(<argument><expr><call><name><name pos:line="202" pos:column="27">File</name><op:operator pos:line="202" pos:column="31">.</op:operator><name pos:line="202" pos:column="32">Exists</name></name><argument_list pos:line="202" pos:column="38">(<argument><expr><name pos:line="202" pos:column="39">srcMLPath1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="202" pos:column="52">"The srcML file ["</lit:literal> <op:operator pos:line="202" pos:column="71">+</op:operator> <name pos:line="202" pos:column="73">srcMLPath1</name> <op:operator pos:line="202" pos:column="84">+</op:operator> <lit:literal type="string" pos:line="202" pos:column="86">"] does not exist."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="203" pos:column="13">Assert</name><op:operator pos:line="203" pos:column="19">.</op:operator><name pos:line="203" pos:column="20">IsTrue</name></name><argument_list pos:line="203" pos:column="26">(<argument><expr><call><name><name pos:line="203" pos:column="27">File</name><op:operator pos:line="203" pos:column="31">.</op:operator><name pos:line="203" pos:column="32">Exists</name></name><argument_list pos:line="203" pos:column="38">(<argument><expr><name pos:line="203" pos:column="39">srcMLPath2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="203" pos:column="52">"The srcML file ["</lit:literal> <op:operator pos:line="203" pos:column="71">+</op:operator> <name pos:line="203" pos:column="73">srcMLPath2</name> <op:operator pos:line="203" pos:column="84">+</op:operator> <lit:literal type="string" pos:line="203" pos:column="86">"] does not exist."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="204" pos:column="13">Assert</name><op:operator pos:line="204" pos:column="19">.</op:operator><name pos:line="204" pos:column="20">IsTrue</name></name><argument_list pos:line="204" pos:column="26">(<argument><expr><call><name><name pos:line="204" pos:column="27">File</name><op:operator pos:line="204" pos:column="31">.</op:operator><name pos:line="204" pos:column="32">Exists</name></name><argument_list pos:line="204" pos:column="38">(<argument><expr><name pos:line="204" pos:column="39">srcMLPath3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="204" pos:column="52">"The srcML file ["</lit:literal> <op:operator pos:line="204" pos:column="71">+</op:operator> <name pos:line="204" pos:column="73">srcMLPath3</name> <op:operator pos:line="204" pos:column="84">+</op:operator> <lit:literal type="string" pos:line="204" pos:column="86">"] does not exist."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="205" pos:column="13">Assert</name><op:operator pos:line="205" pos:column="19">.</op:operator><name pos:line="205" pos:column="20">IsTrue</name></name><argument_list pos:line="205" pos:column="26">(<argument><expr><call><name><name pos:line="205" pos:column="27">File</name><op:operator pos:line="205" pos:column="31">.</op:operator><name pos:line="205" pos:column="32">Exists</name></name><argument_list pos:line="205" pos:column="38">(<argument><expr><name pos:line="205" pos:column="39">srcMLPath4</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="205" pos:column="52">"The srcML file ["</lit:literal> <op:operator pos:line="205" pos:column="71">+</op:operator> <name pos:line="205" pos:column="73">srcMLPath4</name> <op:operator pos:line="205" pos:column="84">+</op:operator> <lit:literal type="string" pos:line="205" pos:column="86">"] does not exist."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="206" pos:column="13">Assert</name><op:operator pos:line="206" pos:column="19">.</op:operator><name pos:line="206" pos:column="20">AreEqual</name></name><argument_list pos:line="206" pos:column="28">(<argument><expr><op:operator pos:line="206" pos:column="29">new</op:operator> <call><name pos:line="206" pos:column="33">FileInfo</name><argument_list pos:line="206" pos:column="41">(<argument><expr><name pos:line="206" pos:column="42">sourcePath1</name></expr></argument>)</argument_list></call><op:operator pos:line="206" pos:column="54">.</op:operator><name pos:line="206" pos:column="55">LastWriteTime</name></expr></argument>, <argument><expr><op:operator pos:line="206" pos:column="70">new</op:operator> <call><name pos:line="206" pos:column="74">FileInfo</name><argument_list pos:line="206" pos:column="82">(<argument><expr><name pos:line="206" pos:column="83">srcMLPath1</name></expr></argument>)</argument_list></call><op:operator pos:line="206" pos:column="94">.</op:operator><name pos:line="206" pos:column="95">LastWriteTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="207" pos:column="13">Assert</name><op:operator pos:line="207" pos:column="19">.</op:operator><name pos:line="207" pos:column="20">AreEqual</name></name><argument_list pos:line="207" pos:column="28">(<argument><expr><op:operator pos:line="207" pos:column="29">new</op:operator> <call><name pos:line="207" pos:column="33">FileInfo</name><argument_list pos:line="207" pos:column="41">(<argument><expr><name pos:line="207" pos:column="42">sourcePath2</name></expr></argument>)</argument_list></call><op:operator pos:line="207" pos:column="54">.</op:operator><name pos:line="207" pos:column="55">LastWriteTime</name></expr></argument>, <argument><expr><op:operator pos:line="207" pos:column="70">new</op:operator> <call><name pos:line="207" pos:column="74">FileInfo</name><argument_list pos:line="207" pos:column="82">(<argument><expr><name pos:line="207" pos:column="83">srcMLPath2</name></expr></argument>)</argument_list></call><op:operator pos:line="207" pos:column="94">.</op:operator><name pos:line="207" pos:column="95">LastWriteTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="208" pos:column="13">Assert</name><op:operator pos:line="208" pos:column="19">.</op:operator><name pos:line="208" pos:column="20">AreEqual</name></name><argument_list pos:line="208" pos:column="28">(<argument><expr><op:operator pos:line="208" pos:column="29">new</op:operator> <call><name pos:line="208" pos:column="33">FileInfo</name><argument_list pos:line="208" pos:column="41">(<argument><expr><name pos:line="208" pos:column="42">sourcePath3</name></expr></argument>)</argument_list></call><op:operator pos:line="208" pos:column="54">.</op:operator><name pos:line="208" pos:column="55">LastWriteTime</name></expr></argument>, <argument><expr><op:operator pos:line="208" pos:column="70">new</op:operator> <call><name pos:line="208" pos:column="74">FileInfo</name><argument_list pos:line="208" pos:column="82">(<argument><expr><name pos:line="208" pos:column="83">srcMLPath3</name></expr></argument>)</argument_list></call><op:operator pos:line="208" pos:column="94">.</op:operator><name pos:line="208" pos:column="95">LastWriteTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="209" pos:column="13">Assert</name><op:operator pos:line="209" pos:column="19">.</op:operator><name pos:line="209" pos:column="20">AreEqual</name></name><argument_list pos:line="209" pos:column="28">(<argument><expr><op:operator pos:line="209" pos:column="29">new</op:operator> <call><name pos:line="209" pos:column="33">FileInfo</name><argument_list pos:line="209" pos:column="41">(<argument><expr><name pos:line="209" pos:column="42">sourcePath4</name></expr></argument>)</argument_list></call><op:operator pos:line="209" pos:column="54">.</op:operator><name pos:line="209" pos:column="55">LastWriteTime</name></expr></argument>, <argument><expr><op:operator pos:line="209" pos:column="70">new</op:operator> <call><name pos:line="209" pos:column="74">FileInfo</name><argument_list pos:line="209" pos:column="82">(<argument><expr><name pos:line="209" pos:column="83">srcMLPath4</name></expr></argument>)</argument_list></call><op:operator pos:line="209" pos:column="94">.</op:operator><name pos:line="209" pos:column="95">LastWriteTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="210" pos:column="13">XElement</name></type> <name pos:line="210" pos:column="22">xelement1</name> <init pos:line="210" pos:column="32">= <expr><call><name><name pos:line="210" pos:column="34">srcMLService</name><op:operator pos:line="210" pos:column="46">.</op:operator><name pos:line="210" pos:column="47">GetXElementForSourceFile</name></name><argument_list pos:line="210" pos:column="71">(<argument><expr><name pos:line="210" pos:column="72">sourcePath1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="211" pos:column="13">XElement</name></type> <name pos:line="211" pos:column="22">xelement2</name> <init pos:line="211" pos:column="32">= <expr><call><name><name pos:line="211" pos:column="34">srcMLService</name><op:operator pos:line="211" pos:column="46">.</op:operator><name pos:line="211" pos:column="47">GetXElementForSourceFile</name></name><argument_list pos:line="211" pos:column="71">(<argument><expr><name pos:line="211" pos:column="72">sourcePath2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="212" pos:column="13">XElement</name></type> <name pos:line="212" pos:column="22">xelement3</name> <init pos:line="212" pos:column="32">= <expr><call><name><name pos:line="212" pos:column="34">srcMLService</name><op:operator pos:line="212" pos:column="46">.</op:operator><name pos:line="212" pos:column="47">GetXElementForSourceFile</name></name><argument_list pos:line="212" pos:column="71">(<argument><expr><name pos:line="212" pos:column="72">sourcePath3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="213" pos:column="13">XElement</name></type> <name pos:line="213" pos:column="22">xelement4</name> <init pos:line="213" pos:column="32">= <expr><call><name><name pos:line="213" pos:column="34">srcMLService</name><op:operator pos:line="213" pos:column="46">.</op:operator><name pos:line="213" pos:column="47">GetXElementForSourceFile</name></name><argument_list pos:line="213" pos:column="71">(<argument><expr><name pos:line="213" pos:column="72">sourcePath4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="214" pos:column="13">Assert</name><op:operator pos:line="214" pos:column="19">.</op:operator><name pos:line="214" pos:column="20">IsNotNull</name></name><argument_list pos:line="214" pos:column="29">(<argument><expr><name pos:line="214" pos:column="30">xelement1</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="214" pos:column="41">"GetXElementForSourceFile returned null."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="215" pos:column="13">Assert</name><op:operator pos:line="215" pos:column="19">.</op:operator><name pos:line="215" pos:column="20">IsNotNull</name></name><argument_list pos:line="215" pos:column="29">(<argument><expr><name pos:line="215" pos:column="30">xelement2</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="215" pos:column="41">"GetXElementForSourceFile returned null."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="216" pos:column="13">Assert</name><op:operator pos:line="216" pos:column="19">.</op:operator><name pos:line="216" pos:column="20">IsNotNull</name></name><argument_list pos:line="216" pos:column="29">(<argument><expr><name pos:line="216" pos:column="30">xelement3</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="216" pos:column="41">"GetXElementForSourceFile returned null."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="217" pos:column="13">Assert</name><op:operator pos:line="217" pos:column="19">.</op:operator><name pos:line="217" pos:column="20">IsNotNull</name></name><argument_list pos:line="217" pos:column="29">(<argument><expr><name pos:line="217" pos:column="30">xelement4</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="217" pos:column="41">"GetXElementForSourceFile returned null."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="218" pos:column="13">string</name></type> <name pos:line="218" pos:column="20">sourcePathX</name> <init pos:line="218" pos:column="32">= <expr><call><name><name pos:line="218" pos:column="34">Path</name><op:operator pos:line="218" pos:column="38">.</op:operator><name pos:line="218" pos:column="39">Combine</name></name><argument_list pos:line="218" pos:column="46">(<argument><expr><name pos:line="218" pos:column="47">testCSharpProjectFolder</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="218" pos:column="72">"AlreadyDeletedClass1.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="219" pos:column="13">XElement</name></type> <name pos:line="219" pos:column="22">xelementX</name> <init pos:line="219" pos:column="32">= <expr><call><name><name pos:line="219" pos:column="34">srcMLService</name><op:operator pos:line="219" pos:column="46">.</op:operator><name pos:line="219" pos:column="47">GetXElementForSourceFile</name></name><argument_list pos:line="219" pos:column="71">(<argument><expr><name pos:line="219" pos:column="72">sourcePathX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="220" pos:column="13">Assert</name><op:operator pos:line="220" pos:column="19">.</op:operator><name pos:line="220" pos:column="20">IsNull</name></name><argument_list pos:line="220" pos:column="26">(<argument><expr><name pos:line="220" pos:column="27">xelementX</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="220" pos:column="38">"GetXElementForSourceFile returned not null."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="223" pos:column="9">public</specifier> <specifier pos:line="223" pos:column="16">static</specifier> <name pos:line="223" pos:column="23">void</name></type> <name pos:line="223" pos:column="28">SourceFileChanged</name><parameter_list pos:line="223" pos:column="45">(<param><decl><type><name pos:line="223" pos:column="46">object</name></type> <name pos:line="223" pos:column="53">sender</name></decl></param>, <param><decl><type><name pos:line="223" pos:column="61">FileEventRaisedArgs</name></type> <name pos:line="223" pos:column="81">args</name></decl></param>)</parameter_list> <block pos:line="223" pos:column="87">{
            <expr_stmt><expr><name pos:line="224" pos:column="13">fera</name> <op:operator pos:line="224" pos:column="18">=</op:operator> <name pos:line="224" pos:column="20">args</name></expr>;</expr_stmt>
            <switch pos:line="225" pos:column="13">switch<condition pos:line="225" pos:column="19">(<expr><name><name pos:line="225" pos:column="20">args</name><op:operator pos:line="225" pos:column="24">.</op:operator><name pos:line="225" pos:column="25">EventType</name></name></expr>)</condition> <block pos:line="225" pos:column="36">{
                <case pos:line="226" pos:column="17">case <expr><name><name pos:line="226" pos:column="22">FileEventType</name><op:operator pos:line="226" pos:column="35">.</op:operator><name pos:line="226" pos:column="36">FileAdded</name></name></expr>:
                    <expr_stmt><expr><name pos:line="227" pos:column="21">receivedFileAdded</name> <op:operator pos:line="227" pos:column="39">=</op:operator> <lit:literal type="boolean" pos:line="227" pos:column="41">true</lit:literal></expr>;</expr_stmt>
                    <break pos:line="228" pos:column="21">break;</break>
                </case><case pos:line="229" pos:column="17">case <expr><name><name pos:line="229" pos:column="22">FileEventType</name><op:operator pos:line="229" pos:column="35">.</op:operator><name pos:line="229" pos:column="36">FileChanged</name></name></expr>:
                    <expr_stmt><expr><name pos:line="230" pos:column="21">receivedFileUpdated</name> <op:operator pos:line="230" pos:column="41">=</op:operator> <lit:literal type="boolean" pos:line="230" pos:column="43">true</lit:literal></expr>;</expr_stmt>
                    <break pos:line="231" pos:column="21">break;</break>
                </case><case pos:line="232" pos:column="17">case <expr><name><name pos:line="232" pos:column="22">FileEventType</name><op:operator pos:line="232" pos:column="35">.</op:operator><name pos:line="232" pos:column="36">FileDeleted</name></name></expr>:
                    <expr_stmt><expr><name pos:line="233" pos:column="21">receivedFileDeleted</name> <op:operator pos:line="233" pos:column="41">=</op:operator> <lit:literal type="boolean" pos:line="233" pos:column="43">true</lit:literal></expr>;</expr_stmt>
                    <break pos:line="234" pos:column="21">break;</break>
            </case>}</block></switch>
        }</block></function>

        <function><type><specifier pos:line="238" pos:column="9">public</specifier> <name pos:line="238" pos:column="16">void</name></type> <name pos:line="238" pos:column="21">CheckSrcMLFiles</name><parameter_list pos:line="238" pos:column="36">()</parameter_list> <block pos:line="238" pos:column="39">{
            <decl_stmt><decl><type><name pos:line="239" pos:column="13">string</name></type> <name pos:line="239" pos:column="20">sourcePath</name> <init pos:line="239" pos:column="31">= <expr><name><name pos:line="239" pos:column="33">fera</name><op:operator pos:line="239" pos:column="37">.</op:operator><name pos:line="239" pos:column="38">FilePath</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="240" pos:column="13">string</name></type> <name pos:line="240" pos:column="20">oldSourcePath</name> <init pos:line="240" pos:column="34">= <expr><name><name pos:line="240" pos:column="36">fera</name><op:operator pos:line="240" pos:column="40">.</op:operator><name pos:line="240" pos:column="41">OldFilePath</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="241" pos:column="13">FileEventType</name></type> <name pos:line="241" pos:column="27">type</name> <init pos:line="241" pos:column="32">= <expr><name><name pos:line="241" pos:column="34">fera</name><op:operator pos:line="241" pos:column="38">.</op:operator><name pos:line="241" pos:column="39">EventType</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="242" pos:column="13">bool</name></type> <name pos:line="242" pos:column="18">hasSrcML</name> <init pos:line="242" pos:column="27">= <expr><name><name pos:line="242" pos:column="29">fera</name><op:operator pos:line="242" pos:column="33">.</op:operator><name pos:line="242" pos:column="34">HasSrcML</name></name></expr></init></decl>;</decl_stmt>
            <if pos:line="243" pos:column="13">if<condition pos:line="243" pos:column="15">(<expr><name pos:line="243" pos:column="16">type</name> <op:operator pos:line="243" pos:column="21">==</op:operator> <name><name pos:line="243" pos:column="24">FileEventType</name><op:operator pos:line="243" pos:column="37">.</op:operator><name pos:line="243" pos:column="38">FileAdded</name></name> <op:operator pos:line="243" pos:column="48">||</op:operator> <name pos:line="243" pos:column="51">type</name> <op:operator pos:line="243" pos:column="56">==</op:operator> <name><name pos:line="243" pos:column="59">FileEventType</name><op:operator pos:line="243" pos:column="72">.</op:operator><name pos:line="243" pos:column="73">FileChanged</name></name></expr>)</condition><then pos:line="243" pos:column="85"> <block pos:line="243" pos:column="86">{
                <expr_stmt><expr><call><name><name pos:line="244" pos:column="17">Assert</name><op:operator pos:line="244" pos:column="23">.</op:operator><name pos:line="244" pos:column="24">IsTrue</name></name><argument_list pos:line="244" pos:column="30">(<argument><expr><op:operator pos:line="244" pos:column="31">(</op:operator><name pos:line="244" pos:column="32">receivedFileAdded</name> <op:operator pos:line="244" pos:column="50">||</op:operator> <name pos:line="244" pos:column="53">receivedFileUpdated</name><op:operator pos:line="244" pos:column="72">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="245" pos:column="17">if<condition pos:line="245" pos:column="19">(<expr><name pos:line="245" pos:column="20">hasSrcML</name></expr>)</condition><then pos:line="245" pos:column="29"> <block pos:line="245" pos:column="30">{
                    <decl_stmt><decl><type><name pos:line="246" pos:column="21">SrcMLArchive</name></type> <name pos:line="246" pos:column="34">archive</name> <init pos:line="246" pos:column="42">= <expr><call><name><name pos:line="246" pos:column="44">srcMLService</name><op:operator pos:line="246" pos:column="56">.</op:operator><name pos:line="246" pos:column="57">GetSrcMLArchive</name></name><argument_list pos:line="246" pos:column="72">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="247" pos:column="21">Assert</name><op:operator pos:line="247" pos:column="27">.</op:operator><name pos:line="247" pos:column="28">IsNotNull</name></name><argument_list pos:line="247" pos:column="37">(<argument><expr><name pos:line="247" pos:column="38">archive</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="247" pos:column="47">"GetSrcMLArchive returned null."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name pos:line="248" pos:column="21">string</name></type> <name pos:line="248" pos:column="28">srcMLPath</name> <init pos:line="248" pos:column="38">= <expr><call><name><name pos:line="248" pos:column="40">archive</name><op:operator pos:line="248" pos:column="47">.</op:operator><name pos:line="248" pos:column="48">GetXmlPathForSourcePath</name></name><argument_list pos:line="248" pos:column="71">(<argument><expr><name pos:line="248" pos:column="72">sourcePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <comment type="line" pos:line="249" pos:column="21">////WriteLog(logFilePath, "Adding/Updating srcMLPath = " + srcMLPath);</comment>
                    <expr_stmt><expr><call><name><name pos:line="250" pos:column="21">Assert</name><op:operator pos:line="250" pos:column="27">.</op:operator><name pos:line="250" pos:column="28">IsTrue</name></name><argument_list pos:line="250" pos:column="34">(<argument><expr><call><name><name pos:line="250" pos:column="35">File</name><op:operator pos:line="250" pos:column="39">.</op:operator><name pos:line="250" pos:column="40">Exists</name></name><argument_list pos:line="250" pos:column="46">(<argument><expr><name pos:line="250" pos:column="47">srcMLPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="250" pos:column="59">"The srcML file ["</lit:literal> <op:operator pos:line="250" pos:column="78">+</op:operator> <name pos:line="250" pos:column="80">srcMLPath</name> <op:operator pos:line="250" pos:column="90">+</op:operator> <lit:literal type="string" pos:line="250" pos:column="92">"] does not exist."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="251" pos:column="21">Assert</name><op:operator pos:line="251" pos:column="27">.</op:operator><name pos:line="251" pos:column="28">AreEqual</name></name><argument_list pos:line="251" pos:column="36">(<argument><expr><op:operator pos:line="251" pos:column="37">new</op:operator> <call><name pos:line="251" pos:column="41">FileInfo</name><argument_list pos:line="251" pos:column="49">(<argument><expr><name pos:line="251" pos:column="50">sourcePath</name></expr></argument>)</argument_list></call><op:operator pos:line="251" pos:column="61">.</op:operator><name pos:line="251" pos:column="62">LastWriteTime</name></expr></argument>, <argument><expr><op:operator pos:line="251" pos:column="77">new</op:operator> <call><name pos:line="251" pos:column="81">FileInfo</name><argument_list pos:line="251" pos:column="89">(<argument><expr><name pos:line="251" pos:column="90">srcMLPath</name></expr></argument>)</argument_list></call><op:operator pos:line="251" pos:column="100">.</op:operator><name pos:line="251" pos:column="101">LastWriteTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name pos:line="252" pos:column="21">XElement</name></type> <name pos:line="252" pos:column="30">xelement</name> <init pos:line="252" pos:column="39">= <expr><call><name><name pos:line="252" pos:column="41">srcMLService</name><op:operator pos:line="252" pos:column="53">.</op:operator><name pos:line="252" pos:column="54">GetXElementForSourceFile</name></name><argument_list pos:line="252" pos:column="78">(<argument><expr><name pos:line="252" pos:column="79">sourcePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="253" pos:column="21">Assert</name><op:operator pos:line="253" pos:column="27">.</op:operator><name pos:line="253" pos:column="28">IsNotNull</name></name><argument_list pos:line="253" pos:column="37">(<argument><expr><name pos:line="253" pos:column="38">xelement</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="253" pos:column="48">"GetXElementForSourceFile returned null."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then> <else pos:line="255" pos:column="15">else <if pos:line="255" pos:column="20">if<condition pos:line="255" pos:column="22">(<expr><name pos:line="255" pos:column="23">type</name> <op:operator pos:line="255" pos:column="28">==</op:operator> <name><name pos:line="255" pos:column="31">FileEventType</name><op:operator pos:line="255" pos:column="44">.</op:operator><name pos:line="255" pos:column="45">FileDeleted</name></name></expr>)</condition><then pos:line="255" pos:column="57"> <block pos:line="255" pos:column="58">{
                <expr_stmt><expr><call><name><name pos:line="256" pos:column="17">Assert</name><op:operator pos:line="256" pos:column="23">.</op:operator><name pos:line="256" pos:column="24">IsTrue</name></name><argument_list pos:line="256" pos:column="30">(<argument><expr><name pos:line="256" pos:column="31">receivedFileDeleted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="257" pos:column="17">SrcMLArchive</name></type> <name pos:line="257" pos:column="30">archive</name> <init pos:line="257" pos:column="38">= <expr><call><name><name pos:line="257" pos:column="40">srcMLService</name><op:operator pos:line="257" pos:column="52">.</op:operator><name pos:line="257" pos:column="53">GetSrcMLArchive</name></name><argument_list pos:line="257" pos:column="68">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="258" pos:column="17">Assert</name><op:operator pos:line="258" pos:column="23">.</op:operator><name pos:line="258" pos:column="24">IsNotNull</name></name><argument_list pos:line="258" pos:column="33">(<argument><expr><name pos:line="258" pos:column="34">archive</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="258" pos:column="43">"GetSrcMLArchive returned null."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="259" pos:column="17">string</name></type> <name pos:line="259" pos:column="24">srcMLPath</name> <init pos:line="259" pos:column="34">= <expr><call><name><name pos:line="259" pos:column="36">archive</name><op:operator pos:line="259" pos:column="43">.</op:operator><name pos:line="259" pos:column="44">GetXmlPathForSourcePath</name></name><argument_list pos:line="259" pos:column="67">(<argument><expr><name pos:line="259" pos:column="68">sourcePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <comment type="line" pos:line="260" pos:column="17">////WriteLog(logFilePath, "Deleting srcMLPath = " + srcMLPath);</comment>
                <expr_stmt><expr><call><name><name pos:line="261" pos:column="17">Assert</name><op:operator pos:line="261" pos:column="23">.</op:operator><name pos:line="261" pos:column="24">IsFalse</name></name><argument_list pos:line="261" pos:column="31">(<argument><expr><call><name><name pos:line="261" pos:column="32">File</name><op:operator pos:line="261" pos:column="36">.</op:operator><name pos:line="261" pos:column="37">Exists</name></name><argument_list pos:line="261" pos:column="43">(<argument><expr><name pos:line="261" pos:column="44">srcMLPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="261" pos:column="56">"The srcML file ["</lit:literal> <op:operator pos:line="261" pos:column="75">+</op:operator> <name pos:line="261" pos:column="77">srcMLPath</name> <op:operator pos:line="261" pos:column="87">+</op:operator> <lit:literal type="string" pos:line="261" pos:column="89">"] still exists."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="262" pos:column="17">XElement</name></type> <name pos:line="262" pos:column="26">xelementX</name> <init pos:line="262" pos:column="36">= <expr><call><name><name pos:line="262" pos:column="38">srcMLService</name><op:operator pos:line="262" pos:column="50">.</op:operator><name pos:line="262" pos:column="51">GetXElementForSourceFile</name></name><argument_list pos:line="262" pos:column="75">(<argument><expr><name pos:line="262" pos:column="76">sourcePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="263" pos:column="17">Assert</name><op:operator pos:line="263" pos:column="23">.</op:operator><name pos:line="263" pos:column="24">IsNull</name></name><argument_list pos:line="263" pos:column="30">(<argument><expr><name pos:line="263" pos:column="31">xelementX</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="263" pos:column="42">"GetXElementForSourceFile returned not null."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>
            <expr_stmt><expr><name pos:line="265" pos:column="13">receivedFileAdded</name> <op:operator pos:line="265" pos:column="31">=</op:operator> <name pos:line="265" pos:column="33">receivedFileUpdated</name> <op:operator pos:line="265" pos:column="53">=</op:operator> <name pos:line="265" pos:column="55">receivedFileDeleted</name> <op:operator pos:line="265" pos:column="75">=</op:operator> <lit:literal type="boolean" pos:line="265" pos:column="77">false</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="266" pos:column="13">fera</name> <op:operator pos:line="266" pos:column="18">=</op:operator> <name pos:line="266" pos:column="20">null</name></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="269" pos:column="9">public</specifier> <name pos:line="269" pos:column="16">void</name></type> <name pos:line="269" pos:column="21">CheckSrcMLFilesForNewCSharpProject</name><parameter_list pos:line="269" pos:column="55">(<param><decl><type><name pos:line="269" pos:column="56">bool</name></type> <name pos:line="269" pos:column="61">flag</name></decl></param>)</parameter_list> <block pos:line="269" pos:column="67">{
            <decl_stmt><decl><type><name pos:line="270" pos:column="13">SrcMLArchive</name></type> <name pos:line="270" pos:column="26">archive</name> <init pos:line="270" pos:column="34">= <expr><call><name><name pos:line="270" pos:column="36">srcMLService</name><op:operator pos:line="270" pos:column="48">.</op:operator><name pos:line="270" pos:column="49">GetSrcMLArchive</name></name><argument_list pos:line="270" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="271" pos:column="13">Assert</name><op:operator pos:line="271" pos:column="19">.</op:operator><name pos:line="271" pos:column="20">IsNotNull</name></name><argument_list pos:line="271" pos:column="29">(<argument><expr><name pos:line="271" pos:column="30">archive</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="271" pos:column="39">"GetSrcMLArchive returned null."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="272" pos:column="13">string</name></type> <name pos:line="272" pos:column="20">addedCSharpProjectFolder</name> <init pos:line="272" pos:column="45">= <expr><call><name><name pos:line="272" pos:column="47">Path</name><op:operator pos:line="272" pos:column="51">.</op:operator><name pos:line="272" pos:column="52">Combine</name></name><argument_list pos:line="272" pos:column="59">(<argument><expr><name pos:line="272" pos:column="60">testFileTemplateFolder</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="272" pos:column="84">@"ClassLibrary1\ClassLibrary1"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="273" pos:column="13">string</name></type> <name pos:line="273" pos:column="20">sourcePath1</name> <init pos:line="273" pos:column="32">= <expr><call><name><name pos:line="273" pos:column="34">Path</name><op:operator pos:line="273" pos:column="38">.</op:operator><name pos:line="273" pos:column="39">Combine</name></name><argument_list pos:line="273" pos:column="46">(<argument><expr><name pos:line="273" pos:column="47">addedCSharpProjectFolder</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="273" pos:column="73">"Class1.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="274" pos:column="13">string</name></type> <name pos:line="274" pos:column="20">srcMLPath1</name> <init pos:line="274" pos:column="31">= <expr><call><name><name pos:line="274" pos:column="33">archive</name><op:operator pos:line="274" pos:column="40">.</op:operator><name pos:line="274" pos:column="41">GetXmlPathForSourcePath</name></name><argument_list pos:line="274" pos:column="64">(<argument><expr><name pos:line="274" pos:column="65">sourcePath1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="275" pos:column="13">if<condition pos:line="275" pos:column="15">(<expr><name pos:line="275" pos:column="16">flag</name></expr>)</condition><then pos:line="275" pos:column="21"> <block pos:line="275" pos:column="22">{  <comment type="line" pos:line="275" pos:column="25">//add</comment>
                <expr_stmt><expr><call><name><name pos:line="276" pos:column="17">Assert</name><op:operator pos:line="276" pos:column="23">.</op:operator><name pos:line="276" pos:column="24">IsTrue</name></name><argument_list pos:line="276" pos:column="30">(<argument><expr><call><name><name pos:line="276" pos:column="31">File</name><op:operator pos:line="276" pos:column="35">.</op:operator><name pos:line="276" pos:column="36">Exists</name></name><argument_list pos:line="276" pos:column="42">(<argument><expr><name pos:line="276" pos:column="43">sourcePath1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="276" pos:column="57">"The source file ["</lit:literal> <op:operator pos:line="276" pos:column="77">+</op:operator> <name pos:line="276" pos:column="79">sourcePath1</name> <op:operator pos:line="276" pos:column="91">+</op:operator> <lit:literal type="string" pos:line="276" pos:column="93">"] does not exist."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="277" pos:column="17">Assert</name><op:operator pos:line="277" pos:column="23">.</op:operator><name pos:line="277" pos:column="24">IsTrue</name></name><argument_list pos:line="277" pos:column="30">(<argument><expr><call><name><name pos:line="277" pos:column="31">File</name><op:operator pos:line="277" pos:column="35">.</op:operator><name pos:line="277" pos:column="36">Exists</name></name><argument_list pos:line="277" pos:column="42">(<argument><expr><name pos:line="277" pos:column="43">srcMLPath1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="277" pos:column="56">"The srcML file ["</lit:literal> <op:operator pos:line="277" pos:column="75">+</op:operator> <name pos:line="277" pos:column="77">srcMLPath1</name> <op:operator pos:line="277" pos:column="88">+</op:operator> <lit:literal type="string" pos:line="277" pos:column="90">"] does not exist."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="278" pos:column="17">Assert</name><op:operator pos:line="278" pos:column="23">.</op:operator><name pos:line="278" pos:column="24">AreEqual</name></name><argument_list pos:line="278" pos:column="32">(<argument><expr><op:operator pos:line="278" pos:column="33">new</op:operator> <call><name pos:line="278" pos:column="37">FileInfo</name><argument_list pos:line="278" pos:column="45">(<argument><expr><name pos:line="278" pos:column="46">sourcePath1</name></expr></argument>)</argument_list></call><op:operator pos:line="278" pos:column="58">.</op:operator><name pos:line="278" pos:column="59">LastWriteTime</name></expr></argument>, <argument><expr><op:operator pos:line="278" pos:column="74">new</op:operator> <call><name pos:line="278" pos:column="78">FileInfo</name><argument_list pos:line="278" pos:column="86">(<argument><expr><name pos:line="278" pos:column="87">srcMLPath1</name></expr></argument>)</argument_list></call><op:operator pos:line="278" pos:column="98">.</op:operator><name pos:line="278" pos:column="99">LastWriteTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="279" pos:column="17">XElement</name></type> <name pos:line="279" pos:column="26">xelement1</name> <init pos:line="279" pos:column="36">= <expr><call><name><name pos:line="279" pos:column="38">srcMLService</name><op:operator pos:line="279" pos:column="50">.</op:operator><name pos:line="279" pos:column="51">GetXElementForSourceFile</name></name><argument_list pos:line="279" pos:column="75">(<argument><expr><name pos:line="279" pos:column="76">sourcePath1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="280" pos:column="17">Assert</name><op:operator pos:line="280" pos:column="23">.</op:operator><name pos:line="280" pos:column="24">IsNotNull</name></name><argument_list pos:line="280" pos:column="33">(<argument><expr><name pos:line="280" pos:column="34">xelement1</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="280" pos:column="45">"GetXElementForSourceFile returned null."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="281" pos:column="15">else <block pos:line="281" pos:column="20">{    <comment type="line" pos:line="281" pos:column="25">//remove</comment>
                <expr_stmt><expr><call><name><name pos:line="282" pos:column="17">Assert</name><op:operator pos:line="282" pos:column="23">.</op:operator><name pos:line="282" pos:column="24">IsFalse</name></name><argument_list pos:line="282" pos:column="31">(<argument><expr><call><name><name pos:line="282" pos:column="32">File</name><op:operator pos:line="282" pos:column="36">.</op:operator><name pos:line="282" pos:column="37">Exists</name></name><argument_list pos:line="282" pos:column="43">(<argument><expr><name pos:line="282" pos:column="44">srcMLPath1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="282" pos:column="57">"The srcML file ["</lit:literal> <op:operator pos:line="282" pos:column="76">+</op:operator> <name pos:line="282" pos:column="78">srcMLPath1</name> <op:operator pos:line="282" pos:column="89">+</op:operator> <lit:literal type="string" pos:line="282" pos:column="91">"] still exists."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></function>

        <function><type><specifier pos:line="286" pos:column="9">public</specifier> <name pos:line="286" pos:column="16">void</name></type> <name pos:line="286" pos:column="21">CheckSrcMLFilesForNewCPPProject</name><parameter_list pos:line="286" pos:column="52">(<param><decl><type><name pos:line="286" pos:column="53">bool</name></type> <name pos:line="286" pos:column="58">flag</name></decl></param>)</parameter_list> <block pos:line="286" pos:column="64">{
            <decl_stmt><decl><type><name pos:line="287" pos:column="13">SrcMLArchive</name></type> <name pos:line="287" pos:column="26">archive</name> <init pos:line="287" pos:column="34">= <expr><call><name><name pos:line="287" pos:column="36">srcMLService</name><op:operator pos:line="287" pos:column="48">.</op:operator><name pos:line="287" pos:column="49">GetSrcMLArchive</name></name><argument_list pos:line="287" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="288" pos:column="13">Assert</name><op:operator pos:line="288" pos:column="19">.</op:operator><name pos:line="288" pos:column="20">IsNotNull</name></name><argument_list pos:line="288" pos:column="29">(<argument><expr><name pos:line="288" pos:column="30">archive</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="288" pos:column="39">"GetSrcMLArchive returned null."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="289" pos:column="13">string</name></type> <name pos:line="289" pos:column="20">addedCPPProjectFolder</name> <init pos:line="289" pos:column="42">= <expr><call><name><name pos:line="289" pos:column="44">Path</name><op:operator pos:line="289" pos:column="48">.</op:operator><name pos:line="289" pos:column="49">Combine</name></name><argument_list pos:line="289" pos:column="56">(<argument><expr><name pos:line="289" pos:column="57">testFileTemplateFolder</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="289" pos:column="81">@"ConsoleApplication1\ConsoleApplication1"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="290" pos:column="13">string</name></type> <name pos:line="290" pos:column="20">sourcePath1</name> <init pos:line="290" pos:column="32">= <expr><call><name><name pos:line="290" pos:column="34">Path</name><op:operator pos:line="290" pos:column="38">.</op:operator><name pos:line="290" pos:column="39">Combine</name></name><argument_list pos:line="290" pos:column="46">(<argument><expr><name pos:line="290" pos:column="47">addedCPPProjectFolder</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="290" pos:column="70">"stdafx.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="291" pos:column="13">string</name></type> <name pos:line="291" pos:column="20">sourcePath2</name> <init pos:line="291" pos:column="32">= <expr><call><name><name pos:line="291" pos:column="34">Path</name><op:operator pos:line="291" pos:column="38">.</op:operator><name pos:line="291" pos:column="39">Combine</name></name><argument_list pos:line="291" pos:column="46">(<argument><expr><name pos:line="291" pos:column="47">addedCPPProjectFolder</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="291" pos:column="70">"stdafx.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="292" pos:column="13">string</name></type> <name pos:line="292" pos:column="20">sourcePath3</name> <init pos:line="292" pos:column="32">= <expr><call><name><name pos:line="292" pos:column="34">Path</name><op:operator pos:line="292" pos:column="38">.</op:operator><name pos:line="292" pos:column="39">Combine</name></name><argument_list pos:line="292" pos:column="46">(<argument><expr><name pos:line="292" pos:column="47">addedCPPProjectFolder</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="292" pos:column="70">"targetver.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="293" pos:column="13">string</name></type> <name pos:line="293" pos:column="20">sourcePath4</name> <init pos:line="293" pos:column="32">= <expr><call><name><name pos:line="293" pos:column="34">Path</name><op:operator pos:line="293" pos:column="38">.</op:operator><name pos:line="293" pos:column="39">Combine</name></name><argument_list pos:line="293" pos:column="46">(<argument><expr><name pos:line="293" pos:column="47">addedCPPProjectFolder</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="293" pos:column="70">"ConsoleApplication1.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="294" pos:column="13">string</name></type> <name pos:line="294" pos:column="20">srcMLPath1</name> <init pos:line="294" pos:column="31">= <expr><call><name><name pos:line="294" pos:column="33">archive</name><op:operator pos:line="294" pos:column="40">.</op:operator><name pos:line="294" pos:column="41">GetXmlPathForSourcePath</name></name><argument_list pos:line="294" pos:column="64">(<argument><expr><name pos:line="294" pos:column="65">sourcePath1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="295" pos:column="13">string</name></type> <name pos:line="295" pos:column="20">srcMLPath2</name> <init pos:line="295" pos:column="31">= <expr><call><name><name pos:line="295" pos:column="33">archive</name><op:operator pos:line="295" pos:column="40">.</op:operator><name pos:line="295" pos:column="41">GetXmlPathForSourcePath</name></name><argument_list pos:line="295" pos:column="64">(<argument><expr><name pos:line="295" pos:column="65">sourcePath2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="296" pos:column="13">string</name></type> <name pos:line="296" pos:column="20">srcMLPath3</name> <init pos:line="296" pos:column="31">= <expr><call><name><name pos:line="296" pos:column="33">archive</name><op:operator pos:line="296" pos:column="40">.</op:operator><name pos:line="296" pos:column="41">GetXmlPathForSourcePath</name></name><argument_list pos:line="296" pos:column="64">(<argument><expr><name pos:line="296" pos:column="65">sourcePath3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="297" pos:column="13">string</name></type> <name pos:line="297" pos:column="20">srcMLPath4</name> <init pos:line="297" pos:column="31">= <expr><call><name><name pos:line="297" pos:column="33">archive</name><op:operator pos:line="297" pos:column="40">.</op:operator><name pos:line="297" pos:column="41">GetXmlPathForSourcePath</name></name><argument_list pos:line="297" pos:column="64">(<argument><expr><name pos:line="297" pos:column="65">sourcePath4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="298" pos:column="13">if<condition pos:line="298" pos:column="15">(<expr><name pos:line="298" pos:column="16">flag</name></expr>)</condition><then pos:line="298" pos:column="21"> <block pos:line="298" pos:column="22">{  <comment type="line" pos:line="298" pos:column="25">//add</comment>
                <expr_stmt><expr><call><name><name pos:line="299" pos:column="17">Assert</name><op:operator pos:line="299" pos:column="23">.</op:operator><name pos:line="299" pos:column="24">IsTrue</name></name><argument_list pos:line="299" pos:column="30">(<argument><expr><call><name><name pos:line="299" pos:column="31">File</name><op:operator pos:line="299" pos:column="35">.</op:operator><name pos:line="299" pos:column="36">Exists</name></name><argument_list pos:line="299" pos:column="42">(<argument><expr><name pos:line="299" pos:column="43">sourcePath1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="299" pos:column="57">"The source file ["</lit:literal> <op:operator pos:line="299" pos:column="77">+</op:operator> <name pos:line="299" pos:column="79">sourcePath1</name> <op:operator pos:line="299" pos:column="91">+</op:operator> <lit:literal type="string" pos:line="299" pos:column="93">"] does not exist."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="300" pos:column="17">Assert</name><op:operator pos:line="300" pos:column="23">.</op:operator><name pos:line="300" pos:column="24">IsTrue</name></name><argument_list pos:line="300" pos:column="30">(<argument><expr><call><name><name pos:line="300" pos:column="31">File</name><op:operator pos:line="300" pos:column="35">.</op:operator><name pos:line="300" pos:column="36">Exists</name></name><argument_list pos:line="300" pos:column="42">(<argument><expr><name pos:line="300" pos:column="43">sourcePath2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="300" pos:column="57">"The source file ["</lit:literal> <op:operator pos:line="300" pos:column="77">+</op:operator> <name pos:line="300" pos:column="79">sourcePath2</name> <op:operator pos:line="300" pos:column="91">+</op:operator> <lit:literal type="string" pos:line="300" pos:column="93">"] does not exist."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="301" pos:column="17">Assert</name><op:operator pos:line="301" pos:column="23">.</op:operator><name pos:line="301" pos:column="24">IsTrue</name></name><argument_list pos:line="301" pos:column="30">(<argument><expr><call><name><name pos:line="301" pos:column="31">File</name><op:operator pos:line="301" pos:column="35">.</op:operator><name pos:line="301" pos:column="36">Exists</name></name><argument_list pos:line="301" pos:column="42">(<argument><expr><name pos:line="301" pos:column="43">sourcePath3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="301" pos:column="57">"The source file ["</lit:literal> <op:operator pos:line="301" pos:column="77">+</op:operator> <name pos:line="301" pos:column="79">sourcePath3</name> <op:operator pos:line="301" pos:column="91">+</op:operator> <lit:literal type="string" pos:line="301" pos:column="93">"] does not exist."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="302" pos:column="17">Assert</name><op:operator pos:line="302" pos:column="23">.</op:operator><name pos:line="302" pos:column="24">IsTrue</name></name><argument_list pos:line="302" pos:column="30">(<argument><expr><call><name><name pos:line="302" pos:column="31">File</name><op:operator pos:line="302" pos:column="35">.</op:operator><name pos:line="302" pos:column="36">Exists</name></name><argument_list pos:line="302" pos:column="42">(<argument><expr><name pos:line="302" pos:column="43">sourcePath4</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="302" pos:column="57">"The source file ["</lit:literal> <op:operator pos:line="302" pos:column="77">+</op:operator> <name pos:line="302" pos:column="79">sourcePath4</name> <op:operator pos:line="302" pos:column="91">+</op:operator> <lit:literal type="string" pos:line="302" pos:column="93">"] does not exist."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="303" pos:column="17">Assert</name><op:operator pos:line="303" pos:column="23">.</op:operator><name pos:line="303" pos:column="24">IsTrue</name></name><argument_list pos:line="303" pos:column="30">(<argument><expr><call><name><name pos:line="303" pos:column="31">File</name><op:operator pos:line="303" pos:column="35">.</op:operator><name pos:line="303" pos:column="36">Exists</name></name><argument_list pos:line="303" pos:column="42">(<argument><expr><name pos:line="303" pos:column="43">srcMLPath1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="303" pos:column="56">"The srcML file ["</lit:literal> <op:operator pos:line="303" pos:column="75">+</op:operator> <name pos:line="303" pos:column="77">srcMLPath1</name> <op:operator pos:line="303" pos:column="88">+</op:operator> <lit:literal type="string" pos:line="303" pos:column="90">"] does not exist."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="304" pos:column="17">Assert</name><op:operator pos:line="304" pos:column="23">.</op:operator><name pos:line="304" pos:column="24">IsTrue</name></name><argument_list pos:line="304" pos:column="30">(<argument><expr><call><name><name pos:line="304" pos:column="31">File</name><op:operator pos:line="304" pos:column="35">.</op:operator><name pos:line="304" pos:column="36">Exists</name></name><argument_list pos:line="304" pos:column="42">(<argument><expr><name pos:line="304" pos:column="43">srcMLPath2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="304" pos:column="56">"The srcML file ["</lit:literal> <op:operator pos:line="304" pos:column="75">+</op:operator> <name pos:line="304" pos:column="77">srcMLPath2</name> <op:operator pos:line="304" pos:column="88">+</op:operator> <lit:literal type="string" pos:line="304" pos:column="90">"] does not exist."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="305" pos:column="17">Assert</name><op:operator pos:line="305" pos:column="23">.</op:operator><name pos:line="305" pos:column="24">IsTrue</name></name><argument_list pos:line="305" pos:column="30">(<argument><expr><call><name><name pos:line="305" pos:column="31">File</name><op:operator pos:line="305" pos:column="35">.</op:operator><name pos:line="305" pos:column="36">Exists</name></name><argument_list pos:line="305" pos:column="42">(<argument><expr><name pos:line="305" pos:column="43">srcMLPath3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="305" pos:column="56">"The srcML file ["</lit:literal> <op:operator pos:line="305" pos:column="75">+</op:operator> <name pos:line="305" pos:column="77">srcMLPath3</name> <op:operator pos:line="305" pos:column="88">+</op:operator> <lit:literal type="string" pos:line="305" pos:column="90">"] does not exist."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="306" pos:column="17">Assert</name><op:operator pos:line="306" pos:column="23">.</op:operator><name pos:line="306" pos:column="24">IsTrue</name></name><argument_list pos:line="306" pos:column="30">(<argument><expr><call><name><name pos:line="306" pos:column="31">File</name><op:operator pos:line="306" pos:column="35">.</op:operator><name pos:line="306" pos:column="36">Exists</name></name><argument_list pos:line="306" pos:column="42">(<argument><expr><name pos:line="306" pos:column="43">srcMLPath4</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="306" pos:column="56">"The srcML file ["</lit:literal> <op:operator pos:line="306" pos:column="75">+</op:operator> <name pos:line="306" pos:column="77">srcMLPath4</name> <op:operator pos:line="306" pos:column="88">+</op:operator> <lit:literal type="string" pos:line="306" pos:column="90">"] does not exist."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="307" pos:column="17">Assert</name><op:operator pos:line="307" pos:column="23">.</op:operator><name pos:line="307" pos:column="24">AreEqual</name></name><argument_list pos:line="307" pos:column="32">(<argument><expr><op:operator pos:line="307" pos:column="33">new</op:operator> <call><name pos:line="307" pos:column="37">FileInfo</name><argument_list pos:line="307" pos:column="45">(<argument><expr><name pos:line="307" pos:column="46">sourcePath1</name></expr></argument>)</argument_list></call><op:operator pos:line="307" pos:column="58">.</op:operator><name pos:line="307" pos:column="59">LastWriteTime</name></expr></argument>, <argument><expr><op:operator pos:line="307" pos:column="74">new</op:operator> <call><name pos:line="307" pos:column="78">FileInfo</name><argument_list pos:line="307" pos:column="86">(<argument><expr><name pos:line="307" pos:column="87">srcMLPath1</name></expr></argument>)</argument_list></call><op:operator pos:line="307" pos:column="98">.</op:operator><name pos:line="307" pos:column="99">LastWriteTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="308" pos:column="17">Assert</name><op:operator pos:line="308" pos:column="23">.</op:operator><name pos:line="308" pos:column="24">AreEqual</name></name><argument_list pos:line="308" pos:column="32">(<argument><expr><op:operator pos:line="308" pos:column="33">new</op:operator> <call><name pos:line="308" pos:column="37">FileInfo</name><argument_list pos:line="308" pos:column="45">(<argument><expr><name pos:line="308" pos:column="46">sourcePath2</name></expr></argument>)</argument_list></call><op:operator pos:line="308" pos:column="58">.</op:operator><name pos:line="308" pos:column="59">LastWriteTime</name></expr></argument>, <argument><expr><op:operator pos:line="308" pos:column="74">new</op:operator> <call><name pos:line="308" pos:column="78">FileInfo</name><argument_list pos:line="308" pos:column="86">(<argument><expr><name pos:line="308" pos:column="87">srcMLPath2</name></expr></argument>)</argument_list></call><op:operator pos:line="308" pos:column="98">.</op:operator><name pos:line="308" pos:column="99">LastWriteTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="309" pos:column="17">Assert</name><op:operator pos:line="309" pos:column="23">.</op:operator><name pos:line="309" pos:column="24">AreEqual</name></name><argument_list pos:line="309" pos:column="32">(<argument><expr><op:operator pos:line="309" pos:column="33">new</op:operator> <call><name pos:line="309" pos:column="37">FileInfo</name><argument_list pos:line="309" pos:column="45">(<argument><expr><name pos:line="309" pos:column="46">sourcePath3</name></expr></argument>)</argument_list></call><op:operator pos:line="309" pos:column="58">.</op:operator><name pos:line="309" pos:column="59">LastWriteTime</name></expr></argument>, <argument><expr><op:operator pos:line="309" pos:column="74">new</op:operator> <call><name pos:line="309" pos:column="78">FileInfo</name><argument_list pos:line="309" pos:column="86">(<argument><expr><name pos:line="309" pos:column="87">srcMLPath3</name></expr></argument>)</argument_list></call><op:operator pos:line="309" pos:column="98">.</op:operator><name pos:line="309" pos:column="99">LastWriteTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="310" pos:column="17">Assert</name><op:operator pos:line="310" pos:column="23">.</op:operator><name pos:line="310" pos:column="24">AreEqual</name></name><argument_list pos:line="310" pos:column="32">(<argument><expr><op:operator pos:line="310" pos:column="33">new</op:operator> <call><name pos:line="310" pos:column="37">FileInfo</name><argument_list pos:line="310" pos:column="45">(<argument><expr><name pos:line="310" pos:column="46">sourcePath4</name></expr></argument>)</argument_list></call><op:operator pos:line="310" pos:column="58">.</op:operator><name pos:line="310" pos:column="59">LastWriteTime</name></expr></argument>, <argument><expr><op:operator pos:line="310" pos:column="74">new</op:operator> <call><name pos:line="310" pos:column="78">FileInfo</name><argument_list pos:line="310" pos:column="86">(<argument><expr><name pos:line="310" pos:column="87">srcMLPath4</name></expr></argument>)</argument_list></call><op:operator pos:line="310" pos:column="98">.</op:operator><name pos:line="310" pos:column="99">LastWriteTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="311" pos:column="17">XElement</name></type> <name pos:line="311" pos:column="26">xelement1</name> <init pos:line="311" pos:column="36">= <expr><call><name><name pos:line="311" pos:column="38">srcMLService</name><op:operator pos:line="311" pos:column="50">.</op:operator><name pos:line="311" pos:column="51">GetXElementForSourceFile</name></name><argument_list pos:line="311" pos:column="75">(<argument><expr><name pos:line="311" pos:column="76">sourcePath1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="312" pos:column="17">XElement</name></type> <name pos:line="312" pos:column="26">xelement2</name> <init pos:line="312" pos:column="36">= <expr><call><name><name pos:line="312" pos:column="38">srcMLService</name><op:operator pos:line="312" pos:column="50">.</op:operator><name pos:line="312" pos:column="51">GetXElementForSourceFile</name></name><argument_list pos:line="312" pos:column="75">(<argument><expr><name pos:line="312" pos:column="76">sourcePath2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="313" pos:column="17">XElement</name></type> <name pos:line="313" pos:column="26">xelement3</name> <init pos:line="313" pos:column="36">= <expr><call><name><name pos:line="313" pos:column="38">srcMLService</name><op:operator pos:line="313" pos:column="50">.</op:operator><name pos:line="313" pos:column="51">GetXElementForSourceFile</name></name><argument_list pos:line="313" pos:column="75">(<argument><expr><name pos:line="313" pos:column="76">sourcePath3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="314" pos:column="17">XElement</name></type> <name pos:line="314" pos:column="26">xelement4</name> <init pos:line="314" pos:column="36">= <expr><call><name><name pos:line="314" pos:column="38">srcMLService</name><op:operator pos:line="314" pos:column="50">.</op:operator><name pos:line="314" pos:column="51">GetXElementForSourceFile</name></name><argument_list pos:line="314" pos:column="75">(<argument><expr><name pos:line="314" pos:column="76">sourcePath4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="315" pos:column="17">Assert</name><op:operator pos:line="315" pos:column="23">.</op:operator><name pos:line="315" pos:column="24">IsNotNull</name></name><argument_list pos:line="315" pos:column="33">(<argument><expr><name pos:line="315" pos:column="34">xelement1</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="315" pos:column="45">"GetXElementForSourceFile returned null."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="316" pos:column="17">Assert</name><op:operator pos:line="316" pos:column="23">.</op:operator><name pos:line="316" pos:column="24">IsNotNull</name></name><argument_list pos:line="316" pos:column="33">(<argument><expr><name pos:line="316" pos:column="34">xelement2</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="316" pos:column="45">"GetXElementForSourceFile returned null."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="317" pos:column="17">Assert</name><op:operator pos:line="317" pos:column="23">.</op:operator><name pos:line="317" pos:column="24">IsNotNull</name></name><argument_list pos:line="317" pos:column="33">(<argument><expr><name pos:line="317" pos:column="34">xelement3</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="317" pos:column="45">"GetXElementForSourceFile returned null."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="318" pos:column="17">Assert</name><op:operator pos:line="318" pos:column="23">.</op:operator><name pos:line="318" pos:column="24">IsNotNull</name></name><argument_list pos:line="318" pos:column="33">(<argument><expr><name pos:line="318" pos:column="34">xelement4</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="318" pos:column="45">"GetXElementForSourceFile returned null."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="319" pos:column="15">else <block pos:line="319" pos:column="20">{    <comment type="line" pos:line="319" pos:column="25">//remove</comment>
                <expr_stmt><expr><call><name><name pos:line="320" pos:column="17">Assert</name><op:operator pos:line="320" pos:column="23">.</op:operator><name pos:line="320" pos:column="24">IsFalse</name></name><argument_list pos:line="320" pos:column="31">(<argument><expr><call><name><name pos:line="320" pos:column="32">File</name><op:operator pos:line="320" pos:column="36">.</op:operator><name pos:line="320" pos:column="37">Exists</name></name><argument_list pos:line="320" pos:column="43">(<argument><expr><name pos:line="320" pos:column="44">srcMLPath1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="320" pos:column="57">"The srcML file ["</lit:literal> <op:operator pos:line="320" pos:column="76">+</op:operator> <name pos:line="320" pos:column="78">srcMLPath1</name> <op:operator pos:line="320" pos:column="89">+</op:operator> <lit:literal type="string" pos:line="320" pos:column="91">"] still exists."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="321" pos:column="17">Assert</name><op:operator pos:line="321" pos:column="23">.</op:operator><name pos:line="321" pos:column="24">IsFalse</name></name><argument_list pos:line="321" pos:column="31">(<argument><expr><call><name><name pos:line="321" pos:column="32">File</name><op:operator pos:line="321" pos:column="36">.</op:operator><name pos:line="321" pos:column="37">Exists</name></name><argument_list pos:line="321" pos:column="43">(<argument><expr><name pos:line="321" pos:column="44">srcMLPath2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="321" pos:column="57">"The srcML file ["</lit:literal> <op:operator pos:line="321" pos:column="76">+</op:operator> <name pos:line="321" pos:column="78">srcMLPath2</name> <op:operator pos:line="321" pos:column="89">+</op:operator> <lit:literal type="string" pos:line="321" pos:column="91">"] still exists."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="322" pos:column="17">Assert</name><op:operator pos:line="322" pos:column="23">.</op:operator><name pos:line="322" pos:column="24">IsFalse</name></name><argument_list pos:line="322" pos:column="31">(<argument><expr><call><name><name pos:line="322" pos:column="32">File</name><op:operator pos:line="322" pos:column="36">.</op:operator><name pos:line="322" pos:column="37">Exists</name></name><argument_list pos:line="322" pos:column="43">(<argument><expr><name pos:line="322" pos:column="44">srcMLPath3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="322" pos:column="57">"The srcML file ["</lit:literal> <op:operator pos:line="322" pos:column="76">+</op:operator> <name pos:line="322" pos:column="78">srcMLPath3</name> <op:operator pos:line="322" pos:column="89">+</op:operator> <lit:literal type="string" pos:line="322" pos:column="91">"] still exists."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="323" pos:column="17">Assert</name><op:operator pos:line="323" pos:column="23">.</op:operator><name pos:line="323" pos:column="24">IsFalse</name></name><argument_list pos:line="323" pos:column="31">(<argument><expr><call><name><name pos:line="323" pos:column="32">File</name><op:operator pos:line="323" pos:column="36">.</op:operator><name pos:line="323" pos:column="37">Exists</name></name><argument_list pos:line="323" pos:column="43">(<argument><expr><name pos:line="323" pos:column="44">srcMLPath4</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="323" pos:column="57">"The srcML file ["</lit:literal> <op:operator pos:line="323" pos:column="76">+</op:operator> <name pos:line="323" pos:column="78">srcMLPath4</name> <op:operator pos:line="323" pos:column="89">+</op:operator> <lit:literal type="string" pos:line="323" pos:column="91">"] still exists."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></function>

        <function><type><specifier pos:line="327" pos:column="9">public</specifier> <specifier pos:line="327" pos:column="16">static</specifier> <name pos:line="327" pos:column="23">void</name></type> <name pos:line="327" pos:column="28">IsReadyChanged</name><parameter_list pos:line="327" pos:column="42">(<param><decl><type><name pos:line="327" pos:column="43">object</name></type> <name pos:line="327" pos:column="50">sender</name></decl></param>, <param><decl><type><name pos:line="327" pos:column="58">IsReadyChangedEventArgs</name></type> <name pos:line="327" pos:column="82">args</name></decl></param>)</parameter_list> <block pos:line="327" pos:column="88">{
        }</block></function>

        <function><type><specifier pos:line="330" pos:column="9">public</specifier> <specifier pos:line="330" pos:column="16">static</specifier> <name pos:line="330" pos:column="23">void</name></type> <name pos:line="330" pos:column="28">MonitoringStopped</name><parameter_list pos:line="330" pos:column="45">(<param><decl><type><name pos:line="330" pos:column="46">object</name></type> <name pos:line="330" pos:column="53">sender</name></decl></param>, <param><decl><type><name pos:line="330" pos:column="61">EventArgs</name></type> <name pos:line="330" pos:column="71">args</name></decl></param>)</parameter_list> <block pos:line="330" pos:column="77">{
        }</block></function>

        <function><type><specifier pos:line="333" pos:column="9">public</specifier> <name pos:line="333" pos:column="16">void</name></type> <name pos:line="333" pos:column="21">AddCSharpProjectItem</name><parameter_list pos:line="333" pos:column="41">(<param><decl><type><name pos:line="333" pos:column="42">string</name></type> <name pos:line="333" pos:column="49">testProjectFilePath</name></decl></param>, <param><decl><type><name pos:line="333" pos:column="70">string</name></type> <name pos:line="333" pos:column="77">fromFilePath</name></decl></param>)</parameter_list> <block pos:line="333" pos:column="91">{
            <decl_stmt><decl><type><name pos:line="334" pos:column="13">var</name></type> <name pos:line="334" pos:column="17">allProjects</name> <init pos:line="334" pos:column="29">= <expr><name><name pos:line="334" pos:column="31">ModelSolution</name><op:operator pos:line="334" pos:column="44">.</op:operator><name pos:line="334" pos:column="45">Projects</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="335" pos:column="13">var</name></type> <name pos:line="335" pos:column="17">enumerator</name> <init pos:line="335" pos:column="28">= <expr><call><name><name pos:line="335" pos:column="30">allProjects</name><op:operator pos:line="335" pos:column="41">.</op:operator><name pos:line="335" pos:column="42">GetEnumerator</name></name><argument_list pos:line="335" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while pos:line="336" pos:column="13">while<condition pos:line="336" pos:column="18">(<expr><call><name><name pos:line="336" pos:column="19">enumerator</name><op:operator pos:line="336" pos:column="29">.</op:operator><name pos:line="336" pos:column="30">MoveNext</name></name><argument_list pos:line="336" pos:column="38">()</argument_list></call></expr>)</condition> <block pos:line="336" pos:column="42">{
                <decl_stmt><decl><type><name pos:line="337" pos:column="17">var</name></type> <name pos:line="337" pos:column="21">project</name> <init pos:line="337" pos:column="29">= <expr><op:operator pos:line="337" pos:column="31">(</op:operator><name pos:line="337" pos:column="32">Project</name><op:operator pos:line="337" pos:column="39">)</op:operator><name><name pos:line="337" pos:column="40">enumerator</name><op:operator pos:line="337" pos:column="50">.</op:operator><name pos:line="337" pos:column="51">Current</name></name></expr></init></decl>;</decl_stmt>
                <if pos:line="338" pos:column="17">if<condition pos:line="338" pos:column="19">(<expr><name pos:line="338" pos:column="20">project</name> <op:operator pos:line="338" pos:column="28">!=</op:operator> <name pos:line="338" pos:column="31">null</name> <op:operator pos:line="338" pos:column="36">&amp;&amp;</op:operator> <name><name pos:line="338" pos:column="39">project</name><op:operator pos:line="338" pos:column="46">.</op:operator><name pos:line="338" pos:column="47">ProjectItems</name></name> <op:operator pos:line="338" pos:column="60">!=</op:operator> <name pos:line="338" pos:column="63">null</name></expr>)</condition><then pos:line="338" pos:column="68"> <block pos:line="338" pos:column="69">{
                    <comment type="line" pos:line="339" pos:column="21">////WriteLog(logFilePath, "&gt;&gt; Project: [" + project.FullName + "]");</comment>
                    <if pos:line="340" pos:column="21">if<condition pos:line="340" pos:column="23">(<expr><call><name><name pos:line="340" pos:column="24">testProjectFilePath</name><op:operator pos:line="340" pos:column="43">.</op:operator><name pos:line="340" pos:column="44">Equals</name></name><argument_list pos:line="340" pos:column="50">(<argument><expr><name><name pos:line="340" pos:column="51">project</name><op:operator pos:line="340" pos:column="58">.</op:operator><name pos:line="340" pos:column="59">FullName</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="340" pos:column="69"> <block pos:line="340" pos:column="70">{
                        <expr_stmt><expr><call><name><name pos:line="341" pos:column="25">project</name><op:operator pos:line="341" pos:column="32">.</op:operator><name pos:line="341" pos:column="33">ProjectItems</name><op:operator pos:line="341" pos:column="45">.</op:operator><name pos:line="341" pos:column="46">AddFromFileCopy</name></name><argument_list pos:line="341" pos:column="61">(<argument><expr><name pos:line="341" pos:column="62">fromFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>
            }</block></while>
        }</block></function>

        <function><type><specifier pos:line="347" pos:column="9">public</specifier> <name pos:line="347" pos:column="16">void</name></type> <name pos:line="347" pos:column="21">AddCPPProjectItem</name><parameter_list pos:line="347" pos:column="38">(<param><decl><type><name pos:line="347" pos:column="39">string</name></type> <name pos:line="347" pos:column="46">testProjectFilePath</name></decl></param>, <param><decl><type><name pos:line="347" pos:column="67">string</name></type> <name pos:line="347" pos:column="74">fromFilePath</name></decl></param>, <param><decl><type><name pos:line="347" pos:column="88">string</name></type> <name pos:line="347" pos:column="95">newFilePath</name></decl></param>)</parameter_list> <block pos:line="347" pos:column="108">{
            <decl_stmt><decl><type><name pos:line="348" pos:column="13">var</name></type> <name pos:line="348" pos:column="17">allProjects</name> <init pos:line="348" pos:column="29">= <expr><name><name pos:line="348" pos:column="31">ModelSolution</name><op:operator pos:line="348" pos:column="44">.</op:operator><name pos:line="348" pos:column="45">Projects</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="349" pos:column="13">var</name></type> <name pos:line="349" pos:column="17">enumerator</name> <init pos:line="349" pos:column="28">= <expr><call><name><name pos:line="349" pos:column="30">allProjects</name><op:operator pos:line="349" pos:column="41">.</op:operator><name pos:line="349" pos:column="42">GetEnumerator</name></name><argument_list pos:line="349" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while pos:line="350" pos:column="13">while<condition pos:line="350" pos:column="18">(<expr><call><name><name pos:line="350" pos:column="19">enumerator</name><op:operator pos:line="350" pos:column="29">.</op:operator><name pos:line="350" pos:column="30">MoveNext</name></name><argument_list pos:line="350" pos:column="38">()</argument_list></call></expr>)</condition> <block pos:line="350" pos:column="42">{
                <decl_stmt><decl><type><name pos:line="351" pos:column="17">var</name></type> <name pos:line="351" pos:column="21">project</name> <init pos:line="351" pos:column="29">= <expr><op:operator pos:line="351" pos:column="31">(</op:operator><name pos:line="351" pos:column="32">Project</name><op:operator pos:line="351" pos:column="39">)</op:operator><name><name pos:line="351" pos:column="40">enumerator</name><op:operator pos:line="351" pos:column="50">.</op:operator><name pos:line="351" pos:column="51">Current</name></name></expr></init></decl>;</decl_stmt>
                <if pos:line="352" pos:column="17">if<condition pos:line="352" pos:column="19">(<expr><name pos:line="352" pos:column="20">project</name> <op:operator pos:line="352" pos:column="28">!=</op:operator> <name pos:line="352" pos:column="31">null</name> <op:operator pos:line="352" pos:column="36">&amp;&amp;</op:operator> <name><name pos:line="352" pos:column="39">project</name><op:operator pos:line="352" pos:column="46">.</op:operator><name pos:line="352" pos:column="47">ProjectItems</name></name> <op:operator pos:line="352" pos:column="60">!=</op:operator> <name pos:line="352" pos:column="63">null</name></expr>)</condition><then pos:line="352" pos:column="68"> <block pos:line="352" pos:column="69">{
                    <comment type="line" pos:line="353" pos:column="21">////WriteLog(logFilePath, "&gt;&gt; Project: [" + project.FullName + "]");</comment>
                    <if pos:line="354" pos:column="21">if<condition pos:line="354" pos:column="23">(<expr><call><name><name pos:line="354" pos:column="24">testProjectFilePath</name><op:operator pos:line="354" pos:column="43">.</op:operator><name pos:line="354" pos:column="44">Equals</name></name><argument_list pos:line="354" pos:column="50">(<argument><expr><name><name pos:line="354" pos:column="51">project</name><op:operator pos:line="354" pos:column="58">.</op:operator><name pos:line="354" pos:column="59">FullName</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="354" pos:column="69"> <block pos:line="354" pos:column="70">{
                        <expr_stmt><expr><call><name><name pos:line="355" pos:column="25">File</name><op:operator pos:line="355" pos:column="29">.</op:operator><name pos:line="355" pos:column="30">Copy</name></name><argument_list pos:line="355" pos:column="34">(<argument><expr><name pos:line="355" pos:column="35">fromFilePath</name></expr></argument>, <argument><expr><name pos:line="355" pos:column="49">newFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name pos:line="356" pos:column="25">ProjectItem</name></type> <name pos:line="356" pos:column="37">item</name> <init pos:line="356" pos:column="42">= <expr><call><name><name pos:line="356" pos:column="44">project</name><op:operator pos:line="356" pos:column="51">.</op:operator><name pos:line="356" pos:column="52">ProjectItems</name><op:operator pos:line="356" pos:column="64">.</op:operator><name pos:line="356" pos:column="65">AddFromFile</name></name><argument_list pos:line="356" pos:column="76">(<argument><expr><name pos:line="356" pos:column="77">newFilePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    }</block></then></if>
                }</block></then></if>
            }</block></while>
        }</block></function>

        <function><type><specifier pos:line="362" pos:column="9">public</specifier> <name pos:line="362" pos:column="16">void</name></type> <name pos:line="362" pos:column="21">SaveCSharpProjectItem</name><parameter_list pos:line="362" pos:column="42">(<param><decl><type><name pos:line="362" pos:column="43">string</name></type> <name pos:line="362" pos:column="50">filePath</name></decl></param>)</parameter_list> <block pos:line="362" pos:column="60">{
            <decl_stmt><decl><type><name pos:line="363" pos:column="13">var</name></type> <name pos:line="363" pos:column="17">projectItem</name> <init pos:line="363" pos:column="29">= <expr><call><name><name pos:line="363" pos:column="31">ModelSolution</name><op:operator pos:line="363" pos:column="44">.</op:operator><name pos:line="363" pos:column="45">FindProjectItem</name></name><argument_list pos:line="363" pos:column="60">(<argument><expr><name pos:line="363" pos:column="61">filePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="364" pos:column="13">if<condition pos:line="364" pos:column="15">(<expr><name pos:line="364" pos:column="16">projectItem</name> <op:operator pos:line="364" pos:column="28">!=</op:operator> <name pos:line="364" pos:column="31">null</name></expr>)</condition><then pos:line="364" pos:column="36"> <block pos:line="364" pos:column="37">{
                <comment type="line" pos:line="365" pos:column="17">////WriteLog(logFilePath, "ProjectItem to be saved: [" + projectItem.Name + "]");</comment>
                <expr_stmt><expr><call><name><name pos:line="366" pos:column="17">projectItem</name><op:operator pos:line="366" pos:column="28">.</op:operator><name pos:line="366" pos:column="29">Open</name></name><argument_list pos:line="366" pos:column="33">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="367" pos:column="17">projectItem</name><op:operator pos:line="367" pos:column="28">.</op:operator><name pos:line="367" pos:column="29">Save</name></name><argument_list pos:line="367" pos:column="33">()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="371" pos:column="9">public</specifier> <name pos:line="371" pos:column="16">void</name></type> <name pos:line="371" pos:column="21">SaveCPPProjectItem</name><parameter_list pos:line="371" pos:column="39">(<param><decl><type><name pos:line="371" pos:column="40">string</name></type> <name pos:line="371" pos:column="47">filePath</name></decl></param>)</parameter_list> <block pos:line="371" pos:column="57">{
            <decl_stmt><decl><type><name pos:line="372" pos:column="13">var</name></type> <name pos:line="372" pos:column="17">projectItem</name> <init pos:line="372" pos:column="29">= <expr><call><name><name pos:line="372" pos:column="31">ModelSolution</name><op:operator pos:line="372" pos:column="44">.</op:operator><name pos:line="372" pos:column="45">FindProjectItem</name></name><argument_list pos:line="372" pos:column="60">(<argument><expr><name pos:line="372" pos:column="61">filePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="373" pos:column="13">if<condition pos:line="373" pos:column="15">(<expr><name pos:line="373" pos:column="16">projectItem</name> <op:operator pos:line="373" pos:column="28">!=</op:operator> <name pos:line="373" pos:column="31">null</name></expr>)</condition><then pos:line="373" pos:column="36"> <block pos:line="373" pos:column="37">{
                <comment type="line" pos:line="374" pos:column="17">////WriteLog(logFilePath, "ProjectItem to be saved: [" + projectItem.Name + "]");</comment>
                <expr_stmt><expr><call><name><name pos:line="375" pos:column="17">projectItem</name><op:operator pos:line="375" pos:column="28">.</op:operator><name pos:line="375" pos:column="29">Open</name></name><argument_list pos:line="375" pos:column="33">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="376" pos:column="17">projectItem</name><op:operator pos:line="376" pos:column="28">.</op:operator><name pos:line="376" pos:column="29">Save</name></name><argument_list pos:line="376" pos:column="33">()</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="376" pos:column="37">// EnvDTE.ProjectItem.Save() is not implemented for CPP project item. (NotImplementedException)</comment>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="380" pos:column="9">public</specifier> <name pos:line="380" pos:column="16">void</name></type> <name pos:line="380" pos:column="21">RenameCSharpProjectItem</name><parameter_list pos:line="380" pos:column="44">(<param><decl><type><name pos:line="380" pos:column="45">string</name></type> <name pos:line="380" pos:column="52">filePath</name></decl></param>, <param><decl><type><name pos:line="380" pos:column="62">string</name></type> <name pos:line="380" pos:column="69">saveAsFilePath</name></decl></param>)</parameter_list> <block pos:line="380" pos:column="85">{
            <expr_stmt><expr><call><name pos:line="381" pos:column="13">SaveAsCSharpProjectItem</name><argument_list pos:line="381" pos:column="36">(<argument><expr><name pos:line="381" pos:column="37">filePath</name></expr></argument>, <argument><expr><name pos:line="381" pos:column="47">saveAsFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="382" pos:column="13">File</name><op:operator pos:line="382" pos:column="17">.</op:operator><name pos:line="382" pos:column="18">Delete</name></name><argument_list pos:line="382" pos:column="24">(<argument><expr><name pos:line="382" pos:column="25">filePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="385" pos:column="9">public</specifier> <name pos:line="385" pos:column="16">void</name></type> <name pos:line="385" pos:column="21">SaveAsCSharpProjectItem</name><parameter_list pos:line="385" pos:column="44">(<param><decl><type><name pos:line="385" pos:column="45">string</name></type> <name pos:line="385" pos:column="52">filePath</name></decl></param>, <param><decl><type><name pos:line="385" pos:column="62">string</name></type> <name pos:line="385" pos:column="69">saveAsFilePath</name></decl></param>)</parameter_list> <block pos:line="385" pos:column="85">{
            <decl_stmt><decl><type><name pos:line="386" pos:column="13">var</name></type> <name pos:line="386" pos:column="17">projectItem</name> <init pos:line="386" pos:column="29">= <expr><call><name><name pos:line="386" pos:column="31">ModelSolution</name><op:operator pos:line="386" pos:column="44">.</op:operator><name pos:line="386" pos:column="45">FindProjectItem</name></name><argument_list pos:line="386" pos:column="60">(<argument><expr><name pos:line="386" pos:column="61">filePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="387" pos:column="13">if<condition pos:line="387" pos:column="15">(<expr><name pos:line="387" pos:column="16">projectItem</name> <op:operator pos:line="387" pos:column="28">!=</op:operator> <name pos:line="387" pos:column="31">null</name></expr>)</condition><then pos:line="387" pos:column="36"> <block pos:line="387" pos:column="37">{
                <comment type="line" pos:line="388" pos:column="17">////WriteLog(logFilePath, "ProjectItem to be save-as-ed: [" + projectItem.Name + "]");</comment>
                <expr_stmt><expr><call><name><name pos:line="389" pos:column="17">projectItem</name><op:operator pos:line="389" pos:column="28">.</op:operator><name pos:line="389" pos:column="29">SaveAs</name></name><argument_list pos:line="389" pos:column="35">(<argument><expr><name pos:line="389" pos:column="36">saveAsFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="393" pos:column="9">public</specifier> <name pos:line="393" pos:column="16">void</name></type> <name pos:line="393" pos:column="21">RenameCPPProjectItem</name><parameter_list pos:line="393" pos:column="41">(<param><decl><type><name pos:line="393" pos:column="42">string</name></type> <name pos:line="393" pos:column="49">filePath</name></decl></param>, <param><decl><type><name pos:line="393" pos:column="59">string</name></type> <name pos:line="393" pos:column="66">saveAsFilePath</name></decl></param>)</parameter_list> <block pos:line="393" pos:column="82">{
            <expr_stmt><expr><call><name pos:line="394" pos:column="13">SaveAsCPPProjectItem</name><argument_list pos:line="394" pos:column="33">(<argument><expr><name pos:line="394" pos:column="34">filePath</name></expr></argument>, <argument><expr><name pos:line="394" pos:column="44">saveAsFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="395" pos:column="13">File</name><op:operator pos:line="395" pos:column="17">.</op:operator><name pos:line="395" pos:column="18">Delete</name></name><argument_list pos:line="395" pos:column="24">(<argument><expr><name pos:line="395" pos:column="25">filePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="398" pos:column="9">public</specifier> <name pos:line="398" pos:column="16">void</name></type> <name pos:line="398" pos:column="21">SaveAsCPPProjectItem</name><parameter_list pos:line="398" pos:column="41">(<param><decl><type><name pos:line="398" pos:column="42">string</name></type> <name pos:line="398" pos:column="49">filePath</name></decl></param>, <param><decl><type><name pos:line="398" pos:column="59">string</name></type> <name pos:line="398" pos:column="66">saveAsFilePath</name></decl></param>)</parameter_list> <block pos:line="398" pos:column="82">{
            <decl_stmt><decl><type><name pos:line="399" pos:column="13">var</name></type> <name pos:line="399" pos:column="17">projectItem</name> <init pos:line="399" pos:column="29">= <expr><call><name><name pos:line="399" pos:column="31">ModelSolution</name><op:operator pos:line="399" pos:column="44">.</op:operator><name pos:line="399" pos:column="45">FindProjectItem</name></name><argument_list pos:line="399" pos:column="60">(<argument><expr><name pos:line="399" pos:column="61">filePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="400" pos:column="13">if<condition pos:line="400" pos:column="15">(<expr><name pos:line="400" pos:column="16">projectItem</name> <op:operator pos:line="400" pos:column="28">!=</op:operator> <name pos:line="400" pos:column="31">null</name></expr>)</condition><then pos:line="400" pos:column="36"> <block pos:line="400" pos:column="37">{
                <comment type="line" pos:line="401" pos:column="17">////WriteLog(logFilePath, "ProjectItem to be save-as-ed: [" + projectItem.Name + "]");</comment>
                <expr_stmt><expr><call><name><name pos:line="402" pos:column="17">projectItem</name><op:operator pos:line="402" pos:column="28">.</op:operator><name pos:line="402" pos:column="29">SaveAs</name></name><argument_list pos:line="402" pos:column="35">(<argument><expr><name pos:line="402" pos:column="36">saveAsFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="402" pos:column="53">// EnvDTE.ProjectItem.SaveAs() is not implemented for CPP project item. (NotImplementedException)</comment>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="406" pos:column="9">public</specifier> <name pos:line="406" pos:column="16">void</name></type> <name pos:line="406" pos:column="21">DeleteCSharpProjectItem</name><parameter_list pos:line="406" pos:column="44">(<param><decl><type><name pos:line="406" pos:column="45">string</name></type> <name pos:line="406" pos:column="52">filePath</name></decl></param>)</parameter_list> <block pos:line="406" pos:column="62">{
            <decl_stmt><decl><type><name pos:line="407" pos:column="13">var</name></type> <name pos:line="407" pos:column="17">projectItem</name> <init pos:line="407" pos:column="29">= <expr><call><name><name pos:line="407" pos:column="31">ModelSolution</name><op:operator pos:line="407" pos:column="44">.</op:operator><name pos:line="407" pos:column="45">FindProjectItem</name></name><argument_list pos:line="407" pos:column="60">(<argument><expr><name pos:line="407" pos:column="61">filePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="408" pos:column="13">if<condition pos:line="408" pos:column="15">(<expr><name pos:line="408" pos:column="16">projectItem</name> <op:operator pos:line="408" pos:column="28">!=</op:operator> <name pos:line="408" pos:column="31">null</name></expr>)</condition><then pos:line="408" pos:column="36"> <block pos:line="408" pos:column="37">{
                <comment type="line" pos:line="409" pos:column="17">////WriteLog(logFilePath, "ProjectItem to be deleted: [" + projectItem.Name + "]");</comment>
                <expr_stmt><expr><call><name><name pos:line="410" pos:column="17">projectItem</name><op:operator pos:line="410" pos:column="28">.</op:operator><name pos:line="410" pos:column="29">Delete</name></name><argument_list pos:line="410" pos:column="35">()</argument_list></call></expr>;</expr_stmt>   <comment type="line" pos:line="410" pos:column="41">// File being deleted from the file system</comment>
                <comment type="line" pos:line="411" pos:column="17">//projectItem.Remove();   // File not being deleted from the file system, just removed from VS Solution Explorer</comment>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="415" pos:column="9">public</specifier> <name pos:line="415" pos:column="16">void</name></type> <name pos:line="415" pos:column="21">DeleteCPPProjectItem</name><parameter_list pos:line="415" pos:column="41">(<param><decl><type><name pos:line="415" pos:column="42">string</name></type> <name pos:line="415" pos:column="49">filePath</name></decl></param>)</parameter_list> <block pos:line="415" pos:column="59">{
            <decl_stmt><decl><type><name pos:line="416" pos:column="13">var</name></type> <name pos:line="416" pos:column="17">projectItem</name> <init pos:line="416" pos:column="29">= <expr><call><name><name pos:line="416" pos:column="31">ModelSolution</name><op:operator pos:line="416" pos:column="44">.</op:operator><name pos:line="416" pos:column="45">FindProjectItem</name></name><argument_list pos:line="416" pos:column="60">(<argument><expr><name pos:line="416" pos:column="61">filePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="417" pos:column="13">if<condition pos:line="417" pos:column="15">(<expr><name pos:line="417" pos:column="16">projectItem</name> <op:operator pos:line="417" pos:column="28">!=</op:operator> <name pos:line="417" pos:column="31">null</name></expr>)</condition><then pos:line="417" pos:column="36"> <block pos:line="417" pos:column="37">{
                <comment type="line" pos:line="418" pos:column="17">////WriteLog(logFilePath, "ProjectItem to be deleted: [" + projectItem.Name + "]");</comment>
                <expr_stmt><expr><call><name><name pos:line="419" pos:column="17">projectItem</name><op:operator pos:line="419" pos:column="28">.</op:operator><name pos:line="419" pos:column="29">Delete</name></name><argument_list pos:line="419" pos:column="35">()</argument_list></call></expr>;</expr_stmt>   <comment type="line" pos:line="419" pos:column="41">// File being deleted from the file system</comment>
                <comment type="line" pos:line="420" pos:column="17">//projectItem.Remove();   // File not being deleted from the file system, just removed from VS Solution Explorer</comment>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="424" pos:column="9">public</specifier> <name pos:line="424" pos:column="16">void</name></type> <name pos:line="424" pos:column="21">AddCPPProject</name><parameter_list pos:line="424" pos:column="34">(<param><decl><type><name pos:line="424" pos:column="35">string</name></type> <name pos:line="424" pos:column="42">templateProjectFilePath</name></decl></param>)</parameter_list> <block pos:line="424" pos:column="67">{
            <expr_stmt><expr><call><name><name pos:line="425" pos:column="13">ModelSolution</name><op:operator pos:line="425" pos:column="26">.</op:operator><name pos:line="425" pos:column="27">AddFromFile</name></name><argument_list pos:line="425" pos:column="38">(<argument><expr><name pos:line="425" pos:column="39">templateProjectFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="428" pos:column="9">public</specifier> <name pos:line="428" pos:column="16">void</name></type> <name pos:line="428" pos:column="21">AddCSharpProject</name><parameter_list pos:line="428" pos:column="37">(<param><decl><type><name pos:line="428" pos:column="38">string</name></type> <name pos:line="428" pos:column="45">templateProjectFilePath</name></decl></param>)</parameter_list> <block pos:line="428" pos:column="70">{
            <expr_stmt><expr><call><name><name pos:line="429" pos:column="13">ModelSolution</name><op:operator pos:line="429" pos:column="26">.</op:operator><name pos:line="429" pos:column="27">AddFromFile</name></name><argument_list pos:line="429" pos:column="38">(<argument><expr><name pos:line="429" pos:column="39">templateProjectFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="432" pos:column="9">public</specifier> <name pos:line="432" pos:column="16">void</name></type> <name pos:line="432" pos:column="21">RemoveCPPProject</name><parameter_list pos:line="432" pos:column="37">(<param><decl><type><name pos:line="432" pos:column="38">string</name></type> <name pos:line="432" pos:column="45">projectFilePath</name></decl></param>)</parameter_list> <block pos:line="432" pos:column="62">{
            <decl_stmt><decl><type><name pos:line="433" pos:column="13">var</name></type> <name pos:line="433" pos:column="17">allProjects</name> <init pos:line="433" pos:column="29">= <expr><name><name pos:line="433" pos:column="31">ModelSolution</name><op:operator pos:line="433" pos:column="44">.</op:operator><name pos:line="433" pos:column="45">Projects</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="434" pos:column="13">var</name></type> <name pos:line="434" pos:column="17">enumerator</name> <init pos:line="434" pos:column="28">= <expr><call><name><name pos:line="434" pos:column="30">allProjects</name><op:operator pos:line="434" pos:column="41">.</op:operator><name pos:line="434" pos:column="42">GetEnumerator</name></name><argument_list pos:line="434" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while pos:line="435" pos:column="13">while<condition pos:line="435" pos:column="18">(<expr><call><name><name pos:line="435" pos:column="19">enumerator</name><op:operator pos:line="435" pos:column="29">.</op:operator><name pos:line="435" pos:column="30">MoveNext</name></name><argument_list pos:line="435" pos:column="38">()</argument_list></call></expr>)</condition> <block pos:line="435" pos:column="42">{
                <decl_stmt><decl><type><name pos:line="436" pos:column="17">Project</name></type> <name pos:line="436" pos:column="25">project</name> <init pos:line="436" pos:column="33">= <expr><name><name pos:line="436" pos:column="35">enumerator</name><op:operator pos:line="436" pos:column="45">.</op:operator><name pos:line="436" pos:column="46">Current</name></name> <op:operator pos:line="436" pos:column="54">as</op:operator> <name pos:line="436" pos:column="57">Project</name></expr></init></decl>;</decl_stmt>
                <if pos:line="437" pos:column="17">if<condition pos:line="437" pos:column="19">(<expr><name pos:line="437" pos:column="20">project</name> <op:operator pos:line="437" pos:column="28">!=</op:operator> <name pos:line="437" pos:column="31">null</name> <op:operator pos:line="437" pos:column="36">&amp;&amp;</op:operator> <call><name><name pos:line="437" pos:column="39">projectFilePath</name><op:operator pos:line="437" pos:column="54">.</op:operator><name pos:line="437" pos:column="55">Equals</name></name><argument_list pos:line="437" pos:column="61">(<argument><expr><name><name pos:line="437" pos:column="62">project</name><op:operator pos:line="437" pos:column="69">.</op:operator><name pos:line="437" pos:column="70">FullName</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="437" pos:column="80"> <block pos:line="437" pos:column="81">{
                    <comment type="line" pos:line="438" pos:column="21">//WriteLog(logFilePath, "Project to be removed: [" + project.FullName + "]");</comment>
                    <expr_stmt><expr><call><name><name pos:line="439" pos:column="21">ModelSolution</name><op:operator pos:line="439" pos:column="34">.</op:operator><name pos:line="439" pos:column="35">Remove</name></name><argument_list pos:line="439" pos:column="41">(<argument><expr><name pos:line="439" pos:column="42">project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:line="440" pos:column="21">break;</break>
                }</block></then></if>
            }</block></while>
        }</block></function>

        <function><type><specifier pos:line="445" pos:column="9">public</specifier> <name pos:line="445" pos:column="16">void</name></type> <name pos:line="445" pos:column="21">RemoveCSharpProject</name><parameter_list pos:line="445" pos:column="40">(<param><decl><type><name pos:line="445" pos:column="41">string</name></type> <name pos:line="445" pos:column="48">projectFilePath</name></decl></param>)</parameter_list> <block pos:line="445" pos:column="65">{
            <decl_stmt><decl><type><name pos:line="446" pos:column="13">var</name></type> <name pos:line="446" pos:column="17">allProjects</name> <init pos:line="446" pos:column="29">= <expr><name><name pos:line="446" pos:column="31">ModelSolution</name><op:operator pos:line="446" pos:column="44">.</op:operator><name pos:line="446" pos:column="45">Projects</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="447" pos:column="13">var</name></type> <name pos:line="447" pos:column="17">enumerator</name> <init pos:line="447" pos:column="28">= <expr><call><name><name pos:line="447" pos:column="30">allProjects</name><op:operator pos:line="447" pos:column="41">.</op:operator><name pos:line="447" pos:column="42">GetEnumerator</name></name><argument_list pos:line="447" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while pos:line="448" pos:column="13">while<condition pos:line="448" pos:column="18">(<expr><call><name><name pos:line="448" pos:column="19">enumerator</name><op:operator pos:line="448" pos:column="29">.</op:operator><name pos:line="448" pos:column="30">MoveNext</name></name><argument_list pos:line="448" pos:column="38">()</argument_list></call></expr>)</condition> <block pos:line="448" pos:column="42">{
                <decl_stmt><decl><type><name pos:line="449" pos:column="17">Project</name></type> <name pos:line="449" pos:column="25">project</name> <init pos:line="449" pos:column="33">= <expr><name><name pos:line="449" pos:column="35">enumerator</name><op:operator pos:line="449" pos:column="45">.</op:operator><name pos:line="449" pos:column="46">Current</name></name> <op:operator pos:line="449" pos:column="54">as</op:operator> <name pos:line="449" pos:column="57">Project</name></expr></init></decl>;</decl_stmt>
                <if pos:line="450" pos:column="17">if<condition pos:line="450" pos:column="19">(<expr><name pos:line="450" pos:column="20">project</name> <op:operator pos:line="450" pos:column="28">!=</op:operator> <name pos:line="450" pos:column="31">null</name> <op:operator pos:line="450" pos:column="36">&amp;&amp;</op:operator> <call><name><name pos:line="450" pos:column="39">projectFilePath</name><op:operator pos:line="450" pos:column="54">.</op:operator><name pos:line="450" pos:column="55">Equals</name></name><argument_list pos:line="450" pos:column="61">(<argument><expr><name><name pos:line="450" pos:column="62">project</name><op:operator pos:line="450" pos:column="69">.</op:operator><name pos:line="450" pos:column="70">FullName</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="450" pos:column="80"> <block pos:line="450" pos:column="81">{
                    <comment type="line" pos:line="451" pos:column="21">//WriteLog(logFilePath, "C# Project to be removed: [" + project.FullName + "]");</comment>
                    <expr_stmt><expr><call><name><name pos:line="452" pos:column="21">ModelSolution</name><op:operator pos:line="452" pos:column="34">.</op:operator><name pos:line="452" pos:column="35">Remove</name></name><argument_list pos:line="452" pos:column="41">(<argument><expr><name pos:line="452" pos:column="42">project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:line="453" pos:column="21">break;</break>
                }</block></then></if>
            }</block></while>
        }</block></function>

        <function><type><specifier pos:line="458" pos:column="9">public</specifier> <name pos:line="458" pos:column="16">void</name></type> <name pos:line="458" pos:column="21">CloseSolution</name><parameter_list pos:line="458" pos:column="34">()</parameter_list> <block pos:line="458" pos:column="37">{
            <comment type="line" pos:line="459" pos:column="13">// Stop monitoring</comment>
            <expr_stmt><expr><call><name><name pos:line="460" pos:column="13">srcMLService</name><op:operator pos:line="460" pos:column="25">.</op:operator><name pos:line="460" pos:column="26">StopMonitoring</name></name><argument_list pos:line="460" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="461" pos:column="13">// Close the solution</comment>
            <expr_stmt><expr><call><name><name pos:line="462" pos:column="13">ModelSolution</name><op:operator pos:line="462" pos:column="26">.</op:operator><name pos:line="462" pos:column="27">Close</name></name><argument_list pos:line="462" pos:column="32">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="463" pos:column="13">ModelSolution</name> <op:operator pos:line="463" pos:column="27">=</op:operator> <name pos:line="463" pos:column="29">null</name></expr>;</expr_stmt>
        }</block></function>
        
        <comment type="line" pos:line="466" pos:column="9">// FROM MSDN: http://msdn.microsoft.com/en-us/library/gg985355.aspx#UiThread</comment>
        <comment type="line" pos:line="467" pos:column="9">// If your tests, or the methods under test, make changes to the model store, </comment>
        <comment type="line" pos:line="468" pos:column="9">// then you must execute them in the user interface thread. If you do not do this, </comment>
        <comment type="line" pos:line="469" pos:column="9">// you might see an AccessViolationException. Enclose the code of the test method in a call to Invoke:</comment>
        <comment type="line" pos:line="470" pos:column="9">// System.Windows.Forms.MethodInvoker</comment>
        <function><type><specifier pos:line="471" pos:column="9">public</specifier> <name pos:line="471" pos:column="16">void</name></type> <name pos:line="471" pos:column="21">Invoke</name><parameter_list pos:line="471" pos:column="27">(<param><decl><type><name pos:line="471" pos:column="28">MethodInvoker</name></type> <name pos:line="471" pos:column="42">globalSystemWindowsFormsMethodInvoker</name></decl></param>)</parameter_list> <block pos:line="471" pos:column="81">{
            <expr_stmt><expr><call><name><name pos:line="472" pos:column="13">UIThreadInvoker</name><op:operator pos:line="472" pos:column="28">.</op:operator><name pos:line="472" pos:column="29">Invoke</name></name><argument_list pos:line="472" pos:column="35">(<argument><expr><name pos:line="472" pos:column="36">globalSystemWindowsFormsMethodInvoker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="block" pos:line="475" pos:column="9">/*
        private static void WriteLog(string logFile, string str) {
            StreamWriter sw = new StreamWriter(logFile, true, System.Text.Encoding.ASCII);
            sw.WriteLine(str);
            sw.Close();
        }
        */</comment>
    }</block></class>

    <comment type="block" pos:line="484" pos:column="5">/* // The following code is generated by VS template, but does not work. 
    using(OleServiceProvider provider = OleServiceProvider.CreateOleServiceProviderWithBasicServices()) {
        int result = package.SetSite(provider);
        Assert.IsTrue(Microsoft.VisualStudio.ErrorHandler.Succeeded(result), "SetSite failed.");
        IServiceProvider serviceProvider = package as IServiceProvider;
        object o = serviceProvider.GetService(typeof(SSrcMLGlobalService));
        Assert.IsNotNull(o, "GetService returned null for the global service.");
        ISrcMLGlobalService service = o as ISrcMLGlobalService;
        Assert.IsNotNull(service, "The service SSrcMLGlobalService does not implements ISrcMLGlobalService.");
        ///////service.GlobalServiceFunction();
        ////service.StartMonitoring();
    }
    */</comment>
    
    <comment type="block" pos:line="498" pos:column="5">/* // The following code is generated by VS template.  This works except for those statements commented out by "////".
    /// &lt;summary&gt;
    /// Integration test for package validation
    /// &lt;/summary&gt;
    [TestClass]
    public class SrcMLServicePackageIntegrationTests {
        private delegate void ThreadInvoker();

        private TestContext testContextInstance;

        /// &lt;summary&gt;
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///&lt;/summary&gt;
        public TestContext TestContext {
            get {
                return testContextInstance;
            }
            set {
                testContextInstance = value;
            }
        }

        [TestMethod]
        [HostType("VS IDE")]
        public void PackageLoadTest() {
            UIThreadInvoker.Invoke((ThreadInvoker)delegate() {

                //Get the Shell Service
                IVsShell shellService = VsIdeTestHostContext.ServiceProvider.GetService(typeof(SVsShell)) as IVsShell;
                Assert.IsNotNull(shellService);

                //Validate package load
                IVsPackage package;
                Guid packageGuid = new Guid(GuidList.guidSrcMLServicePkgString);
                ////Assert.IsTrue(0 == shellService.LoadPackage(ref packageGuid, out package));
                ////Assert.IsNotNull(package, "Package failed to load");

            });
        }
    }
    */</comment>
}</block></namespace>

</unit>
