<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data.Test\MergeTests.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2014 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Patrick Francis (ABB Group) - initial API, implementation, &amp; documentation
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="13" pos:column="1">using <name pos:line="13" pos:column="7">System</name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Collections</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">Generic</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Linq</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Text</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Threading</name><op:operator pos:line="17" pos:column="23">.</op:operator><name pos:line="17" pos:column="24">Tasks</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">NUnit</name><op:operator pos:line="18" pos:column="12">.</op:operator><name pos:line="18" pos:column="13">Framework</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">ABB</name><op:operator pos:line="19" pos:column="10">.</op:operator><name pos:line="19" pos:column="11">SrcML</name><op:operator pos:line="19" pos:column="16">.</op:operator><name pos:line="19" pos:column="17">Test</name><op:operator pos:line="19" pos:column="21">.</op:operator><name pos:line="19" pos:column="22">Utilities</name></name>;</using>

<namespace pos:line="21" pos:column="1">namespace <name><name pos:line="21" pos:column="11">ABB</name><op:operator pos:line="21" pos:column="14">.</op:operator><name pos:line="21" pos:column="15">SrcML</name><op:operator pos:line="21" pos:column="20">.</op:operator><name pos:line="21" pos:column="21">Data</name><op:operator pos:line="21" pos:column="25">.</op:operator><name pos:line="21" pos:column="26">Test</name></name> <block pos:line="21" pos:column="31">{
    <class><attribute pos:line="22" pos:column="5">[<expr><name pos:line="22" pos:column="6">TestFixture</name></expr>]</attribute>
    <attribute pos:line="23" pos:column="5">[<expr><call><name pos:line="23" pos:column="6">Category</name><argument_list pos:line="23" pos:column="14">(<argument><expr><lit:literal type="string" pos:line="23" pos:column="15">"Build"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="24" pos:column="5">public</specifier> class <name pos:line="24" pos:column="18">MergeTests</name> <block pos:line="24" pos:column="29">{
        <decl_stmt><decl><type><specifier pos:line="25" pos:column="9">private</specifier> <name><name pos:line="25" pos:column="17">Dictionary</name><argument_list pos:line="25" pos:column="27">&lt;<argument><name pos:line="25" pos:column="28">Language</name></argument>, <argument><name pos:line="25" pos:column="38">AbstractCodeParser</name></argument>&gt;</argument_list></name></type> <name pos:line="25" pos:column="58">CodeParser</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="26" pos:column="9">private</specifier> <name><name pos:line="26" pos:column="17">Dictionary</name><argument_list pos:line="26" pos:column="27">&lt;<argument><name pos:line="26" pos:column="28">Language</name></argument>, <argument><name pos:line="26" pos:column="38">SrcMLFileUnitSetup</name></argument>&gt;</argument_list></name></type> <name pos:line="26" pos:column="58">FileUnitSetup</name></decl>;</decl_stmt>

        <function><type><attribute pos:line="28" pos:column="9">[<expr><name pos:line="28" pos:column="10">TestFixtureSetUp</name></expr>]</attribute>
        <specifier pos:line="29" pos:column="9">public</specifier> <name pos:line="29" pos:column="16">void</name></type> <name pos:line="29" pos:column="21">ClassSetup</name><parameter_list pos:line="29" pos:column="31">()</parameter_list> <block pos:line="29" pos:column="34">{
            <expr_stmt><expr><name pos:line="30" pos:column="13">FileUnitSetup</name> <op:operator pos:line="30" pos:column="27">=</op:operator> <op:operator pos:line="30" pos:column="29">new</op:operator> <call><name><name pos:line="30" pos:column="33">Dictionary</name><argument_list pos:line="30" pos:column="43">&lt;<argument><name pos:line="30" pos:column="44">Language</name></argument>, <argument><name pos:line="30" pos:column="54">SrcMLFileUnitSetup</name></argument>&gt;</argument_list></name><argument_list pos:line="30" pos:column="73">()</argument_list></call> <block pos:line="30" pos:column="76">{
                <expr><block pos:line="31" pos:column="17">{ <expr><name><name pos:line="31" pos:column="19">Language</name><op:operator pos:line="31" pos:column="27">.</op:operator><name pos:line="31" pos:column="28">CPlusPlus</name></name></expr><op:operator pos:line="31" pos:column="37">,</op:operator> <expr><op:operator pos:line="31" pos:column="39">new</op:operator> <call><name pos:line="31" pos:column="43">SrcMLFileUnitSetup</name><argument_list pos:line="31" pos:column="61">(<argument><expr><name><name pos:line="31" pos:column="62">Language</name><op:operator pos:line="31" pos:column="70">.</op:operator><name pos:line="31" pos:column="71">CPlusPlus</name></name></expr></argument>)</argument_list></call></expr> }</block></expr><op:operator pos:line="31" pos:column="83">,</op:operator>
                <expr><block pos:line="32" pos:column="17">{ <expr><name><name pos:line="32" pos:column="19">Language</name><op:operator pos:line="32" pos:column="27">.</op:operator><name pos:line="32" pos:column="28">Java</name></name></expr><op:operator pos:line="32" pos:column="32">,</op:operator> <expr><op:operator pos:line="32" pos:column="34">new</op:operator> <call><name pos:line="32" pos:column="38">SrcMLFileUnitSetup</name><argument_list pos:line="32" pos:column="56">(<argument><expr><name><name pos:line="32" pos:column="57">Language</name><op:operator pos:line="32" pos:column="65">.</op:operator><name pos:line="32" pos:column="66">Java</name></name></expr></argument>)</argument_list></call></expr> }</block></expr><op:operator pos:line="32" pos:column="73">,</op:operator>
                <expr><block pos:line="33" pos:column="17">{ <expr><name><name pos:line="33" pos:column="19">Language</name><op:operator pos:line="33" pos:column="27">.</op:operator><name pos:line="33" pos:column="28">CSharp</name></name></expr><op:operator pos:line="33" pos:column="34">,</op:operator> <expr><op:operator pos:line="33" pos:column="36">new</op:operator> <call><name pos:line="33" pos:column="40">SrcMLFileUnitSetup</name><argument_list pos:line="33" pos:column="58">(<argument><expr><name><name pos:line="33" pos:column="59">Language</name><op:operator pos:line="33" pos:column="67">.</op:operator><name pos:line="33" pos:column="68">CSharp</name></name></expr></argument>)</argument_list></call></expr> }</block></expr>
            }</block></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="35" pos:column="13">CodeParser</name> <op:operator pos:line="35" pos:column="24">=</op:operator> <op:operator pos:line="35" pos:column="26">new</op:operator> <call><name><name pos:line="35" pos:column="30">Dictionary</name><argument_list pos:line="35" pos:column="40">&lt;<argument><name pos:line="35" pos:column="41">Language</name></argument>, <argument><name pos:line="35" pos:column="51">AbstractCodeParser</name></argument>&gt;</argument_list></name><argument_list pos:line="35" pos:column="70">()</argument_list></call> <block pos:line="35" pos:column="73">{
                <expr><block pos:line="36" pos:column="17">{ <expr><name><name pos:line="36" pos:column="19">Language</name><op:operator pos:line="36" pos:column="27">.</op:operator><name pos:line="36" pos:column="28">CPlusPlus</name></name></expr><op:operator pos:line="36" pos:column="37">,</op:operator> <expr><op:operator pos:line="36" pos:column="39">new</op:operator> <call><name pos:line="36" pos:column="43">CPlusPlusCodeParser</name><argument_list pos:line="36" pos:column="62">()</argument_list></call></expr> }</block></expr><op:operator pos:line="36" pos:column="66">,</op:operator>
                <expr><block pos:line="37" pos:column="17">{ <expr><name><name pos:line="37" pos:column="19">Language</name><op:operator pos:line="37" pos:column="27">.</op:operator><name pos:line="37" pos:column="28">Java</name></name></expr><op:operator pos:line="37" pos:column="32">,</op:operator> <expr><op:operator pos:line="37" pos:column="34">new</op:operator> <call><name pos:line="37" pos:column="38">JavaCodeParser</name><argument_list pos:line="37" pos:column="52">()</argument_list></call></expr> }</block></expr><op:operator pos:line="37" pos:column="56">,</op:operator>
                <expr><block pos:line="38" pos:column="17">{ <expr><name><name pos:line="38" pos:column="19">Language</name><op:operator pos:line="38" pos:column="27">.</op:operator><name pos:line="38" pos:column="28">CSharp</name></name></expr><op:operator pos:line="38" pos:column="34">,</op:operator> <expr><op:operator pos:line="38" pos:column="36">new</op:operator> <call><name pos:line="38" pos:column="40">CSharpCodeParser</name><argument_list pos:line="38" pos:column="56">()</argument_list></call></expr> }</block></expr>
            }</block></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="42" pos:column="9">[<expr><name pos:line="42" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="43" pos:column="9">public</specifier> <name pos:line="43" pos:column="16">void</name></type> <name pos:line="43" pos:column="21">TestConstructorMerge_Cpp</name><parameter_list pos:line="43" pos:column="45">()</parameter_list> <block pos:line="43" pos:column="48">{
            <comment type="line" pos:line="44" pos:column="13">//A.h class A { A(); };</comment>
            <decl_stmt><decl><type><name pos:line="45" pos:column="13">string</name></type> <name pos:line="45" pos:column="20">header_xml</name> <init pos:line="45" pos:column="31">= <expr><lit:literal type="string" pos:line="45" pos:column="33">@"&lt;class&gt;class &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{&lt;private type=""default&gt; &lt;constructor_decl&gt;&lt;name&gt;A&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt;;&lt;/constructor_decl&gt; &lt;/private&gt;}&lt;/block&gt;;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="47" pos:column="13">//A.cpp A::A() { }</comment>
            <decl_stmt><decl><type><name pos:line="48" pos:column="13">string</name></type> <name pos:line="48" pos:column="20">impl_xml</name> <init pos:line="48" pos:column="29">= <expr><lit:literal type="string" pos:line="48" pos:column="31">@"&lt;constructor&gt;&lt;name&gt;&lt;name&gt;A&lt;/name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;&lt;name&gt;A&lt;/name&gt;&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/constructor&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="50" pos:column="13">var</name></type> <name pos:line="50" pos:column="17">header</name> <init pos:line="50" pos:column="24">= <expr><name><name pos:line="50" pos:column="26">FileUnitSetup</name><index pos:line="50" pos:column="39">[<expr><name><name pos:line="50" pos:column="40">Language</name><op:operator pos:line="50" pos:column="48">.</op:operator><name pos:line="50" pos:column="49">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="50" pos:column="59">.</op:operator><call><name pos:line="50" pos:column="60">GetFileUnitForXmlSnippet</name><argument_list pos:line="50" pos:column="84">(<argument><expr><name pos:line="50" pos:column="85">header_xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="50" pos:column="97">"A.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="51" pos:column="13">var</name></type> <name pos:line="51" pos:column="17">implementation</name> <init pos:line="51" pos:column="32">= <expr><name><name pos:line="51" pos:column="34">FileUnitSetup</name><index pos:line="51" pos:column="47">[<expr><name><name pos:line="51" pos:column="48">Language</name><op:operator pos:line="51" pos:column="56">.</op:operator><name pos:line="51" pos:column="57">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="51" pos:column="67">.</op:operator><call><name pos:line="51" pos:column="68">GetFileUnitForXmlSnippet</name><argument_list pos:line="51" pos:column="92">(<argument><expr><name pos:line="51" pos:column="93">impl_xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="51" pos:column="103">"A.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="53" pos:column="13">var</name></type> <name pos:line="53" pos:column="17">headerScope</name> <init pos:line="53" pos:column="29">= <expr><name><name pos:line="53" pos:column="31">CodeParser</name><index pos:line="53" pos:column="41">[<expr><name><name pos:line="53" pos:column="42">Language</name><op:operator pos:line="53" pos:column="50">.</op:operator><name pos:line="53" pos:column="51">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="53" pos:column="61">.</op:operator><call><name pos:line="53" pos:column="62">ParseFileUnit</name><argument_list pos:line="53" pos:column="75">(<argument><expr><name pos:line="53" pos:column="76">header</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="54" pos:column="13">var</name></type> <name pos:line="54" pos:column="17">implementationScope</name> <init pos:line="54" pos:column="37">= <expr><name><name pos:line="54" pos:column="39">CodeParser</name><index pos:line="54" pos:column="49">[<expr><name><name pos:line="54" pos:column="50">Language</name><op:operator pos:line="54" pos:column="58">.</op:operator><name pos:line="54" pos:column="59">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="54" pos:column="69">.</op:operator><call><name pos:line="54" pos:column="70">ParseFileUnit</name><argument_list pos:line="54" pos:column="83">(<argument><expr><name pos:line="54" pos:column="84">implementation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="56" pos:column="13">var</name></type> <name pos:line="56" pos:column="17">globalScope</name> <init pos:line="56" pos:column="29">= <expr><call><name><name pos:line="56" pos:column="31">headerScope</name><op:operator pos:line="56" pos:column="42">.</op:operator><name pos:line="56" pos:column="43">Merge</name></name><argument_list pos:line="56" pos:column="48">(<argument><expr><name pos:line="56" pos:column="49">implementationScope</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="58" pos:column="13">Assert</name><op:operator pos:line="58" pos:column="19">.</op:operator><name pos:line="58" pos:column="20">AreEqual</name></name><argument_list pos:line="58" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="58" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="58" pos:column="32">globalScope</name><op:operator pos:line="58" pos:column="43">.</op:operator><name pos:line="58" pos:column="44">ChildStatements</name><op:operator pos:line="58" pos:column="59">.</op:operator><name pos:line="58" pos:column="60">Count</name></name><argument_list pos:line="58" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="60" pos:column="13">var</name></type> <name pos:line="60" pos:column="17">typeA</name> <init pos:line="60" pos:column="23">= <expr><call><name><name pos:line="60" pos:column="25">globalScope</name><op:operator pos:line="60" pos:column="36">.</op:operator><name pos:line="60" pos:column="37">ChildStatements</name><op:operator pos:line="60" pos:column="52">.</op:operator><name pos:line="60" pos:column="53">First</name></name><argument_list pos:line="60" pos:column="58">()</argument_list></call> <op:operator pos:line="60" pos:column="61">as</op:operator> <name pos:line="60" pos:column="64">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="61" pos:column="13">Assert</name><op:operator pos:line="61" pos:column="19">.</op:operator><name pos:line="61" pos:column="20">AreEqual</name></name><argument_list pos:line="61" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="61" pos:column="29">"A"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="61" pos:column="34">typeA</name><op:operator pos:line="61" pos:column="39">.</op:operator><name pos:line="61" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="62" pos:column="13">Assert</name><op:operator pos:line="62" pos:column="19">.</op:operator><name pos:line="62" pos:column="20">AreEqual</name></name><argument_list pos:line="62" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="62" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="62" pos:column="32">typeA</name><op:operator pos:line="62" pos:column="37">.</op:operator><name pos:line="62" pos:column="38">ChildStatements</name><op:operator pos:line="62" pos:column="53">.</op:operator><name pos:line="62" pos:column="54">Count</name></name><argument_list pos:line="62" pos:column="59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="63" pos:column="13">Assert</name><op:operator pos:line="63" pos:column="19">.</op:operator><name pos:line="63" pos:column="20">AreEqual</name></name><argument_list pos:line="63" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="63" pos:column="29">"A.h"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="63" pos:column="36">typeA</name><op:operator pos:line="63" pos:column="41">.</op:operator><name pos:line="63" pos:column="42">PrimaryLocation</name><op:operator pos:line="63" pos:column="57">.</op:operator><name pos:line="63" pos:column="58">SourceFileName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="65" pos:column="13">var</name></type> <name pos:line="65" pos:column="17">constructor</name> <init pos:line="65" pos:column="29">= <expr><call><name><name pos:line="65" pos:column="31">typeA</name><op:operator pos:line="65" pos:column="36">.</op:operator><name pos:line="65" pos:column="37">ChildStatements</name><op:operator pos:line="65" pos:column="52">.</op:operator><name pos:line="65" pos:column="53">First</name></name><argument_list pos:line="65" pos:column="58">()</argument_list></call> <op:operator pos:line="65" pos:column="61">as</op:operator> <name pos:line="65" pos:column="64">MethodDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="66" pos:column="13">Assert</name><op:operator pos:line="66" pos:column="19">.</op:operator><name pos:line="66" pos:column="20">That</name></name><argument_list pos:line="66" pos:column="24">(<argument><expr><name><name pos:line="66" pos:column="25">constructor</name><op:operator pos:line="66" pos:column="36">.</op:operator><name pos:line="66" pos:column="37">IsConstructor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="67" pos:column="13">Assert</name><op:operator pos:line="67" pos:column="19">.</op:operator><name pos:line="67" pos:column="20">IsFalse</name></name><argument_list pos:line="67" pos:column="27">(<argument><expr><name><name pos:line="67" pos:column="28">constructor</name><op:operator pos:line="67" pos:column="39">.</op:operator><name pos:line="67" pos:column="40">IsDestructor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="68" pos:column="13">Assert</name><op:operator pos:line="68" pos:column="19">.</op:operator><name pos:line="68" pos:column="20">IsFalse</name></name><argument_list pos:line="68" pos:column="27">(<argument><expr><name><name pos:line="68" pos:column="28">constructor</name><op:operator pos:line="68" pos:column="39">.</op:operator><name pos:line="68" pos:column="40">IsPartial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="69" pos:column="13">Assert</name><op:operator pos:line="69" pos:column="19">.</op:operator><name pos:line="69" pos:column="20">AreEqual</name></name><argument_list pos:line="69" pos:column="28">(<argument><expr><name><name pos:line="69" pos:column="29">AccessModifier</name><op:operator pos:line="69" pos:column="43">.</op:operator><name pos:line="69" pos:column="44">Private</name></name></expr></argument>, <argument><expr><name><name pos:line="69" pos:column="53">constructor</name><op:operator pos:line="69" pos:column="64">.</op:operator><name pos:line="69" pos:column="65">Accessibility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="70" pos:column="13">Assert</name><op:operator pos:line="70" pos:column="19">.</op:operator><name pos:line="70" pos:column="20">AreEqual</name></name><argument_list pos:line="70" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="70" pos:column="29">"A.cpp"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="70" pos:column="38">constructor</name><op:operator pos:line="70" pos:column="49">.</op:operator><name pos:line="70" pos:column="50">PrimaryLocation</name><op:operator pos:line="70" pos:column="65">.</op:operator><name pos:line="70" pos:column="66">SourceFileName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="73" pos:column="9">[<expr><name pos:line="73" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="74" pos:column="9">public</specifier> <name pos:line="74" pos:column="16">void</name></type> <name pos:line="74" pos:column="21">TestNestedConstructorMerge_Cpp</name><parameter_list pos:line="74" pos:column="51">()</parameter_list> <block pos:line="74" pos:column="54">{
            <comment type="line" pos:line="75" pos:column="13">//Foo.h</comment>
            <comment type="line" pos:line="76" pos:column="13">//class Foo </comment>
            <comment type="line" pos:line="77" pos:column="13">//{</comment>
            <comment type="line" pos:line="78" pos:column="13">//public:</comment>
            <comment type="line" pos:line="79" pos:column="13">//    Foo(int, int, char);</comment>
            <comment type="line" pos:line="80" pos:column="13">//    virtual ~Foo();</comment>
            <comment type="line" pos:line="81" pos:column="13">//    struct Bar</comment>
            <comment type="line" pos:line="82" pos:column="13">//    {</comment>
            <comment type="line" pos:line="83" pos:column="13">//        Bar(float, float);</comment>
            <comment type="line" pos:line="84" pos:column="13">//        virtual ~Bar();</comment>
            <comment type="line" pos:line="85" pos:column="13">//    }</comment>
            <comment type="line" pos:line="86" pos:column="13">//};</comment>
            <decl_stmt><decl><type><name pos:line="87" pos:column="13">string</name></type> <name pos:line="87" pos:column="20">headerXml</name> <init pos:line="87" pos:column="30">= <expr><lit:literal type="string" pos:line="87" pos:column="32">@"&lt;class&gt;class &lt;name&gt;Foo&lt;/name&gt; 
&lt;block&gt;{&lt;private type=""default&gt;
&lt;/private&gt;&lt;public&gt;public:
    &lt;constructor_decl&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt;&lt;/decl&gt;&lt;/param&gt;, &lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt;&lt;/decl&gt;&lt;/param&gt;, &lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;char&lt;/name&gt;&lt;/type&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt;;&lt;/constructor_decl&gt;
    &lt;destructor_decl&gt;&lt;specifier&gt;virtual&lt;/specifier&gt; &lt;name&gt;~&lt;name&gt;Foo&lt;/name&gt;&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt;;&lt;/destructor_decl&gt;
    &lt;struct&gt;struct &lt;name&gt;Bar&lt;/name&gt;
    &lt;block&gt;{&lt;public type=""default&gt;
        &lt;constructor_decl&gt;&lt;name&gt;Bar&lt;/name&gt;&lt;parameter_list&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;float&lt;/name&gt;&lt;/type&gt;&lt;/decl&gt;&lt;/param&gt;, &lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;float&lt;/name&gt;&lt;/type&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt;;&lt;/constructor_decl&gt;
        &lt;destructor_decl&gt;&lt;specifier&gt;virtual&lt;/specifier&gt; &lt;name&gt;~&lt;name&gt;Bar&lt;/name&gt;&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt;;&lt;/destructor_decl&gt;
    &lt;/public&gt;}&lt;/block&gt;
&lt;decl/&gt;&lt;/struct&gt;&lt;/public&gt;}&lt;/block&gt;;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="98" pos:column="13">//Foo.cpp</comment>
            <comment type="line" pos:line="99" pos:column="13">//Foo::Bar::Bar(float a, float b) { }</comment>
            <comment type="line" pos:line="100" pos:column="13">//Foo::Bar::~Bar() { }</comment>
            <comment type="line" pos:line="101" pos:column="13">//</comment>
            <comment type="line" pos:line="102" pos:column="13">//Foo::Foo(int a, int b, char c) { }</comment>
            <comment type="line" pos:line="103" pos:column="13">//Foo::~Foo() { }</comment>
            <decl_stmt><decl><type><name pos:line="104" pos:column="13">string</name></type> <name pos:line="104" pos:column="20">implXml</name> <init pos:line="104" pos:column="28">= <expr><lit:literal type="string" pos:line="104" pos:column="30">@"&lt;constructor&gt;&lt;name&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;&lt;name&gt;Bar&lt;/name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;&lt;name&gt;Bar&lt;/name&gt;&lt;/name&gt;&lt;parameter_list&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;float&lt;/name&gt;&lt;/type&gt; &lt;name&gt;a&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;, &lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;float&lt;/name&gt;&lt;/type&gt; &lt;name&gt;b&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/constructor&gt;
&lt;destructor&gt;&lt;name&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;&lt;name&gt;Bar&lt;/name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;~&lt;name&gt;Bar&lt;/name&gt;&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/destructor&gt;

&lt;constructor&gt;&lt;name&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;/name&gt;&lt;parameter_list&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;a&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;, &lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;b&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;, &lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;char&lt;/name&gt;&lt;/type&gt; &lt;name&gt;c&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/constructor&gt;
&lt;destructor&gt;&lt;name&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;~&lt;name&gt;Foo&lt;/name&gt;&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/destructor&gt;
"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="110" pos:column="13">var</name></type> <name pos:line="110" pos:column="17">header</name> <init pos:line="110" pos:column="24">= <expr><name><name pos:line="110" pos:column="26">FileUnitSetup</name><index pos:line="110" pos:column="39">[<expr><name><name pos:line="110" pos:column="40">Language</name><op:operator pos:line="110" pos:column="48">.</op:operator><name pos:line="110" pos:column="49">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="110" pos:column="59">.</op:operator><call><name pos:line="110" pos:column="60">GetFileUnitForXmlSnippet</name><argument_list pos:line="110" pos:column="84">(<argument><expr><name pos:line="110" pos:column="85">headerXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="110" pos:column="96">"Foo.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="111" pos:column="13">var</name></type> <name pos:line="111" pos:column="17">implementation</name> <init pos:line="111" pos:column="32">= <expr><name><name pos:line="111" pos:column="34">FileUnitSetup</name><index pos:line="111" pos:column="47">[<expr><name><name pos:line="111" pos:column="48">Language</name><op:operator pos:line="111" pos:column="56">.</op:operator><name pos:line="111" pos:column="57">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="111" pos:column="67">.</op:operator><call><name pos:line="111" pos:column="68">GetFileUnitForXmlSnippet</name><argument_list pos:line="111" pos:column="92">(<argument><expr><name pos:line="111" pos:column="93">implXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="111" pos:column="102">"Foo.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="113" pos:column="13">var</name></type> <name pos:line="113" pos:column="17">headerScope</name> <init pos:line="113" pos:column="29">= <expr><name><name pos:line="113" pos:column="31">CodeParser</name><index pos:line="113" pos:column="41">[<expr><name><name pos:line="113" pos:column="42">Language</name><op:operator pos:line="113" pos:column="50">.</op:operator><name pos:line="113" pos:column="51">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="113" pos:column="61">.</op:operator><call><name pos:line="113" pos:column="62">ParseFileUnit</name><argument_list pos:line="113" pos:column="75">(<argument><expr><name pos:line="113" pos:column="76">header</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="114" pos:column="13">var</name></type> <name pos:line="114" pos:column="17">implementationScope</name> <init pos:line="114" pos:column="37">= <expr><name><name pos:line="114" pos:column="39">CodeParser</name><index pos:line="114" pos:column="49">[<expr><name><name pos:line="114" pos:column="50">Language</name><op:operator pos:line="114" pos:column="58">.</op:operator><name pos:line="114" pos:column="59">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="114" pos:column="69">.</op:operator><call><name pos:line="114" pos:column="70">ParseFileUnit</name><argument_list pos:line="114" pos:column="83">(<argument><expr><name pos:line="114" pos:column="84">implementation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="116" pos:column="13">var</name></type> <name pos:line="116" pos:column="17">globalScope</name> <init pos:line="116" pos:column="29">= <expr><call><name><name pos:line="116" pos:column="31">headerScope</name><op:operator pos:line="116" pos:column="42">.</op:operator><name pos:line="116" pos:column="43">Merge</name></name><argument_list pos:line="116" pos:column="48">(<argument><expr><name pos:line="116" pos:column="49">implementationScope</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="117" pos:column="13">Assert</name><op:operator pos:line="117" pos:column="19">.</op:operator><name pos:line="117" pos:column="20">AreEqual</name></name><argument_list pos:line="117" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="117" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="117" pos:column="32">globalScope</name><op:operator pos:line="117" pos:column="43">.</op:operator><name pos:line="117" pos:column="44">ChildStatements</name><op:operator pos:line="117" pos:column="59">.</op:operator><name pos:line="117" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="119" pos:column="13">var</name></type> <name pos:line="119" pos:column="17">foo</name> <init pos:line="119" pos:column="21">= <expr><call><name><name pos:line="119" pos:column="23">globalScope</name><op:operator pos:line="119" pos:column="34">.</op:operator><name><name pos:line="119" pos:column="35">GetDescendants</name><argument_list pos:line="119" pos:column="49">&lt;<argument><name pos:line="119" pos:column="50">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="119" pos:column="65">()</argument_list></call><op:operator pos:line="119" pos:column="67">.</op:operator><call><name pos:line="119" pos:column="68">First</name><argument_list pos:line="119" pos:column="73">(<argument><expr><lambda><name pos:line="119" pos:column="74">t</name> <op:operator pos:line="119" pos:column="76">=&gt;</op:operator> <name><name pos:line="119" pos:column="79">t</name><op:operator pos:line="119" pos:column="80">.</op:operator><name pos:line="119" pos:column="81">Name</name></name> <op:operator pos:line="119" pos:column="86">==</op:operator> <lit:literal type="string" pos:line="119" pos:column="89">"Foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="120" pos:column="13">Assert</name><op:operator pos:line="120" pos:column="19">.</op:operator><name pos:line="120" pos:column="20">AreEqual</name></name><argument_list pos:line="120" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="120" pos:column="29">3</lit:literal></expr></argument>, <argument><expr><name><name pos:line="120" pos:column="32">foo</name><op:operator pos:line="120" pos:column="35">.</op:operator><name pos:line="120" pos:column="36">ChildStatements</name><op:operator pos:line="120" pos:column="51">.</op:operator><name pos:line="120" pos:column="52">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="121" pos:column="13">Assert</name><op:operator pos:line="121" pos:column="19">.</op:operator><name pos:line="121" pos:column="20">AreEqual</name></name><argument_list pos:line="121" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="121" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="121" pos:column="32">foo</name><op:operator pos:line="121" pos:column="35">.</op:operator><name pos:line="121" pos:column="36">ChildStatements</name><op:operator pos:line="121" pos:column="51">.</op:operator><name><name pos:line="121" pos:column="52">OfType</name><argument_list pos:line="121" pos:column="58">&lt;<argument><name pos:line="121" pos:column="59">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="121" pos:column="76">()</argument_list></call><op:operator pos:line="121" pos:column="78">.</op:operator><call><name pos:line="121" pos:column="79">Count</name><argument_list pos:line="121" pos:column="84">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="122" pos:column="13">Assert</name><op:operator pos:line="122" pos:column="19">.</op:operator><name pos:line="122" pos:column="20">AreEqual</name></name><argument_list pos:line="122" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="122" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="122" pos:column="32">foo</name><op:operator pos:line="122" pos:column="35">.</op:operator><name pos:line="122" pos:column="36">ChildStatements</name><op:operator pos:line="122" pos:column="51">.</op:operator><name><name pos:line="122" pos:column="52">OfType</name><argument_list pos:line="122" pos:column="58">&lt;<argument><name pos:line="122" pos:column="59">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="122" pos:column="74">()</argument_list></call><op:operator pos:line="122" pos:column="76">.</op:operator><call><name pos:line="122" pos:column="77">Count</name><argument_list pos:line="122" pos:column="82">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="123" pos:column="13">Assert</name><op:operator pos:line="123" pos:column="19">.</op:operator><name pos:line="123" pos:column="20">AreEqual</name></name><argument_list pos:line="123" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="123" pos:column="29">"Foo.h"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="123" pos:column="38">foo</name><op:operator pos:line="123" pos:column="41">.</op:operator><name pos:line="123" pos:column="42">PrimaryLocation</name><op:operator pos:line="123" pos:column="57">.</op:operator><name pos:line="123" pos:column="58">SourceFileName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="125" pos:column="13">var</name></type> <name pos:line="125" pos:column="17">bar</name> <init pos:line="125" pos:column="21">= <expr><call><name><name pos:line="125" pos:column="23">globalScope</name><op:operator pos:line="125" pos:column="34">.</op:operator><name><name pos:line="125" pos:column="35">GetDescendants</name><argument_list pos:line="125" pos:column="49">&lt;<argument><name pos:line="125" pos:column="50">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="125" pos:column="65">()</argument_list></call><op:operator pos:line="125" pos:column="67">.</op:operator><call><name pos:line="125" pos:column="68">First</name><argument_list pos:line="125" pos:column="73">(<argument><expr><lambda><name pos:line="125" pos:column="74">t</name> <op:operator pos:line="125" pos:column="76">=&gt;</op:operator> <name><name pos:line="125" pos:column="79">t</name><op:operator pos:line="125" pos:column="80">.</op:operator><name pos:line="125" pos:column="81">Name</name></name> <op:operator pos:line="125" pos:column="86">==</op:operator> <lit:literal type="string" pos:line="125" pos:column="89">"Bar"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="126" pos:column="13">Assert</name><op:operator pos:line="126" pos:column="19">.</op:operator><name pos:line="126" pos:column="20">AreEqual</name></name><argument_list pos:line="126" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="126" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="126" pos:column="32">bar</name><op:operator pos:line="126" pos:column="35">.</op:operator><name pos:line="126" pos:column="36">ChildStatements</name><op:operator pos:line="126" pos:column="51">.</op:operator><name pos:line="126" pos:column="52">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="127" pos:column="13">Assert</name><op:operator pos:line="127" pos:column="19">.</op:operator><name pos:line="127" pos:column="20">AreEqual</name></name><argument_list pos:line="127" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="127" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="127" pos:column="32">bar</name><op:operator pos:line="127" pos:column="35">.</op:operator><name pos:line="127" pos:column="36">ChildStatements</name><op:operator pos:line="127" pos:column="51">.</op:operator><name><name pos:line="127" pos:column="52">OfType</name><argument_list pos:line="127" pos:column="58">&lt;<argument><name pos:line="127" pos:column="59">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="127" pos:column="76">()</argument_list></call><op:operator pos:line="127" pos:column="78">.</op:operator><call><name pos:line="127" pos:column="79">Count</name><argument_list pos:line="127" pos:column="84">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="128" pos:column="13">Assert</name><op:operator pos:line="128" pos:column="19">.</op:operator><name pos:line="128" pos:column="20">AreEqual</name></name><argument_list pos:line="128" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="128" pos:column="29">"Foo.h"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="128" pos:column="38">bar</name><op:operator pos:line="128" pos:column="41">.</op:operator><name pos:line="128" pos:column="42">PrimaryLocation</name><op:operator pos:line="128" pos:column="57">.</op:operator><name pos:line="128" pos:column="58">SourceFileName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="130" pos:column="13">var</name></type> <name pos:line="130" pos:column="17">barConstructor</name> <init pos:line="130" pos:column="32">= <expr><call><name><name pos:line="130" pos:column="34">bar</name><op:operator pos:line="130" pos:column="37">.</op:operator><name><name pos:line="130" pos:column="38">GetNamedChildren</name><argument_list pos:line="130" pos:column="54">&lt;<argument><name pos:line="130" pos:column="55">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="130" pos:column="72">(<argument><expr><lit:literal type="string" pos:line="130" pos:column="73">"Bar"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="130" pos:column="79">.</op:operator><call><name pos:line="130" pos:column="80">First</name><argument_list pos:line="130" pos:column="85">(<argument><expr><lambda><name pos:line="130" pos:column="86">m</name> <op:operator pos:line="130" pos:column="88">=&gt;</op:operator> <name><name pos:line="130" pos:column="91">m</name><op:operator pos:line="130" pos:column="92">.</op:operator><name pos:line="130" pos:column="93">IsConstructor</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="131" pos:column="13">Assert</name><op:operator pos:line="131" pos:column="19">.</op:operator><name pos:line="131" pos:column="20">AreEqual</name></name><argument_list pos:line="131" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="131" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="131" pos:column="32">barConstructor</name><op:operator pos:line="131" pos:column="46">.</op:operator><name pos:line="131" pos:column="47">Locations</name><op:operator pos:line="131" pos:column="56">.</op:operator><name pos:line="131" pos:column="57">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="132" pos:column="13">Assert</name><op:operator pos:line="132" pos:column="19">.</op:operator><name pos:line="132" pos:column="20">AreEqual</name></name><argument_list pos:line="132" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="132" pos:column="29">"Foo.cpp"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="132" pos:column="40">barConstructor</name><op:operator pos:line="132" pos:column="54">.</op:operator><name pos:line="132" pos:column="55">PrimaryLocation</name><op:operator pos:line="132" pos:column="70">.</op:operator><name pos:line="132" pos:column="71">SourceFileName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="135" pos:column="9">[<expr><name pos:line="135" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="136" pos:column="9">public</specifier> <name pos:line="136" pos:column="16">void</name></type> <name pos:line="136" pos:column="21">TestDestructorMerge_Cpp</name><parameter_list pos:line="136" pos:column="44">()</parameter_list> <block pos:line="136" pos:column="47">{
            <comment type="line" pos:line="137" pos:column="13">//A.h class A { ~A(); };</comment>
            <decl_stmt><decl><type><name pos:line="138" pos:column="13">string</name></type> <name pos:line="138" pos:column="20">header_xml</name> <init pos:line="138" pos:column="31">= <expr><lit:literal type="string" pos:line="138" pos:column="33">@"&lt;class&gt;class &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{&lt;private type=""default&gt; &lt;destructor_decl&gt;&lt;name&gt;~&lt;name&gt;A&lt;/name&gt;&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt;;&lt;/destructor_decl&gt; &lt;/private&gt;}&lt;/block&gt;;&lt;/class&gt;
"</lit:literal></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="141" pos:column="13">//A.cpp A::~A() { }</comment>
            <decl_stmt><decl><type><name pos:line="142" pos:column="13">string</name></type> <name pos:line="142" pos:column="20">impl_xml</name> <init pos:line="142" pos:column="29">= <expr><lit:literal type="string" pos:line="142" pos:column="31">@"&lt;destructor&gt;&lt;name&gt;&lt;name&gt;A&lt;/name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;~&lt;name&gt;A&lt;/name&gt;&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/destructor&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="144" pos:column="13">var</name></type> <name pos:line="144" pos:column="17">header</name> <init pos:line="144" pos:column="24">= <expr><name><name pos:line="144" pos:column="26">FileUnitSetup</name><index pos:line="144" pos:column="39">[<expr><name><name pos:line="144" pos:column="40">Language</name><op:operator pos:line="144" pos:column="48">.</op:operator><name pos:line="144" pos:column="49">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="144" pos:column="59">.</op:operator><call><name pos:line="144" pos:column="60">GetFileUnitForXmlSnippet</name><argument_list pos:line="144" pos:column="84">(<argument><expr><name pos:line="144" pos:column="85">header_xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="144" pos:column="97">"A.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="145" pos:column="13">var</name></type> <name pos:line="145" pos:column="17">implementation</name> <init pos:line="145" pos:column="32">= <expr><name><name pos:line="145" pos:column="34">FileUnitSetup</name><index pos:line="145" pos:column="47">[<expr><name><name pos:line="145" pos:column="48">Language</name><op:operator pos:line="145" pos:column="56">.</op:operator><name pos:line="145" pos:column="57">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="145" pos:column="67">.</op:operator><call><name pos:line="145" pos:column="68">GetFileUnitForXmlSnippet</name><argument_list pos:line="145" pos:column="92">(<argument><expr><name pos:line="145" pos:column="93">impl_xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="145" pos:column="103">"A.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="147" pos:column="13">var</name></type> <name pos:line="147" pos:column="17">headerScope</name> <init pos:line="147" pos:column="29">= <expr><name><name pos:line="147" pos:column="31">CodeParser</name><index pos:line="147" pos:column="41">[<expr><name><name pos:line="147" pos:column="42">Language</name><op:operator pos:line="147" pos:column="50">.</op:operator><name pos:line="147" pos:column="51">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="147" pos:column="61">.</op:operator><call><name pos:line="147" pos:column="62">ParseFileUnit</name><argument_list pos:line="147" pos:column="75">(<argument><expr><name pos:line="147" pos:column="76">header</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="148" pos:column="13">var</name></type> <name pos:line="148" pos:column="17">implementationScope</name> <init pos:line="148" pos:column="37">= <expr><name><name pos:line="148" pos:column="39">CodeParser</name><index pos:line="148" pos:column="49">[<expr><name><name pos:line="148" pos:column="50">Language</name><op:operator pos:line="148" pos:column="58">.</op:operator><name pos:line="148" pos:column="59">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="148" pos:column="69">.</op:operator><call><name pos:line="148" pos:column="70">ParseFileUnit</name><argument_list pos:line="148" pos:column="83">(<argument><expr><name pos:line="148" pos:column="84">implementation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="150" pos:column="13">var</name></type> <name pos:line="150" pos:column="17">globalScope</name> <init pos:line="150" pos:column="29">= <expr><call><name><name pos:line="150" pos:column="31">headerScope</name><op:operator pos:line="150" pos:column="42">.</op:operator><name pos:line="150" pos:column="43">Merge</name></name><argument_list pos:line="150" pos:column="48">(<argument><expr><name pos:line="150" pos:column="49">implementationScope</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="152" pos:column="13">Assert</name><op:operator pos:line="152" pos:column="19">.</op:operator><name pos:line="152" pos:column="20">AreEqual</name></name><argument_list pos:line="152" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="152" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="152" pos:column="32">globalScope</name><op:operator pos:line="152" pos:column="43">.</op:operator><name pos:line="152" pos:column="44">ChildStatements</name><op:operator pos:line="152" pos:column="59">.</op:operator><name pos:line="152" pos:column="60">Count</name></name><argument_list pos:line="152" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="154" pos:column="13">var</name></type> <name pos:line="154" pos:column="17">typeA</name> <init pos:line="154" pos:column="23">= <expr><call><name><name pos:line="154" pos:column="25">globalScope</name><op:operator pos:line="154" pos:column="36">.</op:operator><name pos:line="154" pos:column="37">ChildStatements</name><op:operator pos:line="154" pos:column="52">.</op:operator><name pos:line="154" pos:column="53">First</name></name><argument_list pos:line="154" pos:column="58">()</argument_list></call> <op:operator pos:line="154" pos:column="61">as</op:operator> <name pos:line="154" pos:column="64">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="155" pos:column="13">Assert</name><op:operator pos:line="155" pos:column="19">.</op:operator><name pos:line="155" pos:column="20">AreEqual</name></name><argument_list pos:line="155" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="155" pos:column="29">"A"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="155" pos:column="34">typeA</name><op:operator pos:line="155" pos:column="39">.</op:operator><name pos:line="155" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="156" pos:column="13">Assert</name><op:operator pos:line="156" pos:column="19">.</op:operator><name pos:line="156" pos:column="20">AreEqual</name></name><argument_list pos:line="156" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="156" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="156" pos:column="32">typeA</name><op:operator pos:line="156" pos:column="37">.</op:operator><name pos:line="156" pos:column="38">ChildStatements</name><op:operator pos:line="156" pos:column="53">.</op:operator><name pos:line="156" pos:column="54">Count</name></name><argument_list pos:line="156" pos:column="59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="157" pos:column="13">Assert</name><op:operator pos:line="157" pos:column="19">.</op:operator><name pos:line="157" pos:column="20">AreEqual</name></name><argument_list pos:line="157" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="157" pos:column="29">"A.h"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="157" pos:column="36">typeA</name><op:operator pos:line="157" pos:column="41">.</op:operator><name pos:line="157" pos:column="42">PrimaryLocation</name><op:operator pos:line="157" pos:column="57">.</op:operator><name pos:line="157" pos:column="58">SourceFileName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="159" pos:column="13">var</name></type> <name pos:line="159" pos:column="17">destructor</name> <init pos:line="159" pos:column="28">= <expr><call><name><name pos:line="159" pos:column="30">typeA</name><op:operator pos:line="159" pos:column="35">.</op:operator><name pos:line="159" pos:column="36">ChildStatements</name><op:operator pos:line="159" pos:column="51">.</op:operator><name pos:line="159" pos:column="52">First</name></name><argument_list pos:line="159" pos:column="57">()</argument_list></call> <op:operator pos:line="159" pos:column="60">as</op:operator> <name pos:line="159" pos:column="63">MethodDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="160" pos:column="13">Assert</name><op:operator pos:line="160" pos:column="19">.</op:operator><name pos:line="160" pos:column="20">That</name></name><argument_list pos:line="160" pos:column="24">(<argument><expr><name><name pos:line="160" pos:column="25">destructor</name><op:operator pos:line="160" pos:column="35">.</op:operator><name pos:line="160" pos:column="36">IsDestructor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="161" pos:column="13">Assert</name><op:operator pos:line="161" pos:column="19">.</op:operator><name pos:line="161" pos:column="20">IsFalse</name></name><argument_list pos:line="161" pos:column="27">(<argument><expr><name><name pos:line="161" pos:column="28">destructor</name><op:operator pos:line="161" pos:column="38">.</op:operator><name pos:line="161" pos:column="39">IsConstructor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="162" pos:column="13">Assert</name><op:operator pos:line="162" pos:column="19">.</op:operator><name pos:line="162" pos:column="20">IsFalse</name></name><argument_list pos:line="162" pos:column="27">(<argument><expr><name><name pos:line="162" pos:column="28">destructor</name><op:operator pos:line="162" pos:column="38">.</op:operator><name pos:line="162" pos:column="39">IsPartial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="163" pos:column="13">Assert</name><op:operator pos:line="163" pos:column="19">.</op:operator><name pos:line="163" pos:column="20">AreEqual</name></name><argument_list pos:line="163" pos:column="28">(<argument><expr><name><name pos:line="163" pos:column="29">AccessModifier</name><op:operator pos:line="163" pos:column="43">.</op:operator><name pos:line="163" pos:column="44">Private</name></name></expr></argument>, <argument><expr><name><name pos:line="163" pos:column="53">destructor</name><op:operator pos:line="163" pos:column="63">.</op:operator><name pos:line="163" pos:column="64">Accessibility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="164" pos:column="13">Assert</name><op:operator pos:line="164" pos:column="19">.</op:operator><name pos:line="164" pos:column="20">AreEqual</name></name><argument_list pos:line="164" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="164" pos:column="29">"A.cpp"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="164" pos:column="38">destructor</name><op:operator pos:line="164" pos:column="48">.</op:operator><name pos:line="164" pos:column="49">PrimaryLocation</name><op:operator pos:line="164" pos:column="64">.</op:operator><name pos:line="164" pos:column="65">SourceFileName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <function><type><attribute pos:line="166" pos:column="9">[<expr><name pos:line="166" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="167" pos:column="9">public</specifier> <name pos:line="167" pos:column="16">void</name></type> <name pos:line="167" pos:column="21">TestMethodDefinitionMerge_Cpp</name><parameter_list pos:line="167" pos:column="50">()</parameter_list> <block pos:line="167" pos:column="53">{
            <comment type="line" pos:line="168" pos:column="13">// # A.h class A { int Foo(); };</comment>
            <decl_stmt><decl><type><name pos:line="169" pos:column="13">string</name></type> <name pos:line="169" pos:column="20">header_xml</name> <init pos:line="169" pos:column="31">= <expr><lit:literal type="string" pos:line="169" pos:column="33">@"&lt;class&gt;class &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{&lt;private type=""default&gt;
    &lt;function_decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt;;&lt;/function_decl&gt;
&lt;/private&gt;}&lt;/block&gt;;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="173" pos:column="13">// # A.cpp int A::Foo() { int bar = 1; return bar; }</comment>
            <decl_stmt><decl><type><name pos:line="174" pos:column="13">string</name></type> <name pos:line="174" pos:column="20">impl_xml</name> <init pos:line="174" pos:column="29">= <expr><lit:literal type="string" pos:line="174" pos:column="31">@"&lt;function&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;&lt;name&gt;A&lt;/name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;bar&lt;/name&gt; &lt;init&gt;= &lt;expr&gt;&lt;lit:literal type=""number&gt;1&lt;/lit:literal&gt;&lt;/expr&gt;&lt;/init&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt; &lt;return&gt;return &lt;expr&gt;&lt;name&gt;bar&lt;/name&gt;&lt;/expr&gt;;&lt;/return&gt; }&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="176" pos:column="13">var</name></type> <name pos:line="176" pos:column="17">header</name> <init pos:line="176" pos:column="24">= <expr><name><name pos:line="176" pos:column="26">FileUnitSetup</name><index pos:line="176" pos:column="39">[<expr><name><name pos:line="176" pos:column="40">Language</name><op:operator pos:line="176" pos:column="48">.</op:operator><name pos:line="176" pos:column="49">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="176" pos:column="59">.</op:operator><call><name pos:line="176" pos:column="60">GetFileUnitForXmlSnippet</name><argument_list pos:line="176" pos:column="84">(<argument><expr><name pos:line="176" pos:column="85">header_xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="176" pos:column="97">"A.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="177" pos:column="13">var</name></type> <name pos:line="177" pos:column="17">implementation</name> <init pos:line="177" pos:column="32">= <expr><name><name pos:line="177" pos:column="34">FileUnitSetup</name><index pos:line="177" pos:column="47">[<expr><name><name pos:line="177" pos:column="48">Language</name><op:operator pos:line="177" pos:column="56">.</op:operator><name pos:line="177" pos:column="57">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="177" pos:column="67">.</op:operator><call><name pos:line="177" pos:column="68">GetFileUnitForXmlSnippet</name><argument_list pos:line="177" pos:column="92">(<argument><expr><name pos:line="177" pos:column="93">impl_xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="177" pos:column="103">"A.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="179" pos:column="13">var</name></type> <name pos:line="179" pos:column="17">headerScope</name> <init pos:line="179" pos:column="29">= <expr><name><name pos:line="179" pos:column="31">CodeParser</name><index pos:line="179" pos:column="41">[<expr><name><name pos:line="179" pos:column="42">Language</name><op:operator pos:line="179" pos:column="50">.</op:operator><name pos:line="179" pos:column="51">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="179" pos:column="61">.</op:operator><call><name pos:line="179" pos:column="62">ParseFileUnit</name><argument_list pos:line="179" pos:column="75">(<argument><expr><name pos:line="179" pos:column="76">header</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="180" pos:column="13">var</name></type> <name pos:line="180" pos:column="17">implementationScope</name> <init pos:line="180" pos:column="37">= <expr><name><name pos:line="180" pos:column="39">CodeParser</name><index pos:line="180" pos:column="49">[<expr><name><name pos:line="180" pos:column="50">Language</name><op:operator pos:line="180" pos:column="58">.</op:operator><name pos:line="180" pos:column="59">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="180" pos:column="69">.</op:operator><call><name pos:line="180" pos:column="70">ParseFileUnit</name><argument_list pos:line="180" pos:column="83">(<argument><expr><name pos:line="180" pos:column="84">implementation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="182" pos:column="13">var</name></type> <name pos:line="182" pos:column="17">globalScope</name> <init pos:line="182" pos:column="29">= <expr><call><name><name pos:line="182" pos:column="31">headerScope</name><op:operator pos:line="182" pos:column="42">.</op:operator><name pos:line="182" pos:column="43">Merge</name></name><argument_list pos:line="182" pos:column="48">(<argument><expr><name pos:line="182" pos:column="49">implementationScope</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="184" pos:column="13">Assert</name><op:operator pos:line="184" pos:column="19">.</op:operator><name pos:line="184" pos:column="20">AreEqual</name></name><argument_list pos:line="184" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="184" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="184" pos:column="32">globalScope</name><op:operator pos:line="184" pos:column="43">.</op:operator><name pos:line="184" pos:column="44">ChildStatements</name><op:operator pos:line="184" pos:column="59">.</op:operator><name pos:line="184" pos:column="60">Count</name></name><argument_list pos:line="184" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="186" pos:column="13">var</name></type> <name pos:line="186" pos:column="17">typeA</name> <init pos:line="186" pos:column="23">= <expr><call><name><name pos:line="186" pos:column="25">globalScope</name><op:operator pos:line="186" pos:column="36">.</op:operator><name pos:line="186" pos:column="37">ChildStatements</name><op:operator pos:line="186" pos:column="52">.</op:operator><name pos:line="186" pos:column="53">First</name></name><argument_list pos:line="186" pos:column="58">()</argument_list></call> <op:operator pos:line="186" pos:column="61">as</op:operator> <name pos:line="186" pos:column="64">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="187" pos:column="13">Assert</name><op:operator pos:line="187" pos:column="19">.</op:operator><name pos:line="187" pos:column="20">AreEqual</name></name><argument_list pos:line="187" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="187" pos:column="29">"A"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="187" pos:column="34">typeA</name><op:operator pos:line="187" pos:column="39">.</op:operator><name pos:line="187" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="188" pos:column="13">Assert</name><op:operator pos:line="188" pos:column="19">.</op:operator><name pos:line="188" pos:column="20">AreEqual</name></name><argument_list pos:line="188" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="188" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="188" pos:column="32">typeA</name><op:operator pos:line="188" pos:column="37">.</op:operator><name pos:line="188" pos:column="38">ChildStatements</name><op:operator pos:line="188" pos:column="53">.</op:operator><name pos:line="188" pos:column="54">Count</name></name><argument_list pos:line="188" pos:column="59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="189" pos:column="13">Assert</name><op:operator pos:line="189" pos:column="19">.</op:operator><name pos:line="189" pos:column="20">AreEqual</name></name><argument_list pos:line="189" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="189" pos:column="29">"A.h"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="189" pos:column="36">typeA</name><op:operator pos:line="189" pos:column="41">.</op:operator><name pos:line="189" pos:column="42">PrimaryLocation</name><op:operator pos:line="189" pos:column="57">.</op:operator><name pos:line="189" pos:column="58">SourceFileName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="191" pos:column="13">var</name></type> <name pos:line="191" pos:column="17">methodFoo</name> <init pos:line="191" pos:column="27">= <expr><call><name><name pos:line="191" pos:column="29">typeA</name><op:operator pos:line="191" pos:column="34">.</op:operator><name pos:line="191" pos:column="35">ChildStatements</name><op:operator pos:line="191" pos:column="50">.</op:operator><name pos:line="191" pos:column="51">First</name></name><argument_list pos:line="191" pos:column="56">()</argument_list></call> <op:operator pos:line="191" pos:column="59">as</op:operator> <name pos:line="191" pos:column="62">MethodDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="192" pos:column="13">Assert</name><op:operator pos:line="192" pos:column="19">.</op:operator><name pos:line="192" pos:column="20">AreEqual</name></name><argument_list pos:line="192" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="192" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="192" pos:column="36">methodFoo</name><op:operator pos:line="192" pos:column="45">.</op:operator><name pos:line="192" pos:column="46">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="193" pos:column="13">Assert</name><op:operator pos:line="193" pos:column="19">.</op:operator><name pos:line="193" pos:column="20">AreEqual</name></name><argument_list pos:line="193" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="193" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="193" pos:column="32">methodFoo</name><op:operator pos:line="193" pos:column="41">.</op:operator><name pos:line="193" pos:column="42">ChildStatements</name><op:operator pos:line="193" pos:column="57">.</op:operator><name pos:line="193" pos:column="58">Count</name></name><argument_list pos:line="193" pos:column="63">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="194" pos:column="13">// TODO Assert.AreEqual(1, methodFoo.DeclaredVariables.Count());</comment>
            <expr_stmt><expr><call><name><name pos:line="195" pos:column="13">Assert</name><op:operator pos:line="195" pos:column="19">.</op:operator><name pos:line="195" pos:column="20">AreEqual</name></name><argument_list pos:line="195" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="195" pos:column="29">"A.cpp"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="195" pos:column="38">methodFoo</name><op:operator pos:line="195" pos:column="47">.</op:operator><name pos:line="195" pos:column="48">PrimaryLocation</name><op:operator pos:line="195" pos:column="63">.</op:operator><name pos:line="195" pos:column="64">SourceFileName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="196" pos:column="13">Assert</name><op:operator pos:line="196" pos:column="19">.</op:operator><name pos:line="196" pos:column="20">AreEqual</name></name><argument_list pos:line="196" pos:column="28">(<argument><expr><name><name pos:line="196" pos:column="29">AccessModifier</name><op:operator pos:line="196" pos:column="43">.</op:operator><name pos:line="196" pos:column="44">Private</name></name></expr></argument>, <argument><expr><name><name pos:line="196" pos:column="53">methodFoo</name><op:operator pos:line="196" pos:column="62">.</op:operator><name pos:line="196" pos:column="63">Accessibility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="199" pos:column="9">[<expr><name pos:line="199" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="200" pos:column="9">public</specifier> <name pos:line="200" pos:column="16">void</name></type> <name pos:line="200" pos:column="21">TestMethodDefinitionMerge_NoParameterName</name><parameter_list pos:line="200" pos:column="62">()</parameter_list> <block pos:line="200" pos:column="65">{
            <comment type="line" pos:line="201" pos:column="13">////Foo.h</comment>
            <comment type="line" pos:line="202" pos:column="13">//int Foo(char);</comment>
            <decl_stmt><decl><type><name pos:line="203" pos:column="13">string</name></type> <name pos:line="203" pos:column="20">declXml</name> <init pos:line="203" pos:column="28">= <expr><lit:literal type="string" pos:line="203" pos:column="30">"&lt;function_decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;char&lt;/name&gt;&lt;/type&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt;;&lt;/function_decl&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="204" pos:column="13">var</name></type> <name pos:line="204" pos:column="17">fileunitDecl</name> <init pos:line="204" pos:column="30">= <expr><name><name pos:line="204" pos:column="32">FileUnitSetup</name><index pos:line="204" pos:column="45">[<expr><name><name pos:line="204" pos:column="46">Language</name><op:operator pos:line="204" pos:column="54">.</op:operator><name pos:line="204" pos:column="55">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="204" pos:column="65">.</op:operator><call><name pos:line="204" pos:column="66">GetFileUnitForXmlSnippet</name><argument_list pos:line="204" pos:column="90">(<argument><expr><name pos:line="204" pos:column="91">declXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="204" pos:column="100">"Foo.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="205" pos:column="13">var</name></type> <name pos:line="205" pos:column="17">declarationScope</name> <init pos:line="205" pos:column="34">= <expr><name><name pos:line="205" pos:column="36">CodeParser</name><index pos:line="205" pos:column="46">[<expr><name><name pos:line="205" pos:column="47">Language</name><op:operator pos:line="205" pos:column="55">.</op:operator><name pos:line="205" pos:column="56">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="205" pos:column="66">.</op:operator><call><name pos:line="205" pos:column="67">ParseFileUnit</name><argument_list pos:line="205" pos:column="80">(<argument><expr><name pos:line="205" pos:column="81">fileunitDecl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="207" pos:column="13">////Foo.cpp</comment>
            <comment type="line" pos:line="208" pos:column="13">//int Foo(char bar) { return 0; }</comment>
            <decl_stmt><decl><type><name pos:line="209" pos:column="13">string</name></type> <name pos:line="209" pos:column="20">defXml</name> <init pos:line="209" pos:column="27">= <expr><lit:literal type="string" pos:line="209" pos:column="29">"&lt;function&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;char&lt;/name&gt;&lt;/type&gt; &lt;name&gt;bar&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt; &lt;block&gt;{ &lt;return&gt;return &lt;expr&gt;&lt;lit:literal type=\"number\"&gt;0&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt; }&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="210" pos:column="13">var</name></type> <name pos:line="210" pos:column="17">fileUnitDef</name> <init pos:line="210" pos:column="29">= <expr><name><name pos:line="210" pos:column="31">FileUnitSetup</name><index pos:line="210" pos:column="44">[<expr><name><name pos:line="210" pos:column="45">Language</name><op:operator pos:line="210" pos:column="53">.</op:operator><name pos:line="210" pos:column="54">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="210" pos:column="64">.</op:operator><call><name pos:line="210" pos:column="65">GetFileUnitForXmlSnippet</name><argument_list pos:line="210" pos:column="89">(<argument><expr><name pos:line="210" pos:column="90">defXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="210" pos:column="98">"Foo.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="212" pos:column="13">var</name></type> <name pos:line="212" pos:column="17">globalScope</name> <init pos:line="212" pos:column="29">= <expr><op:operator pos:line="212" pos:column="31">new</op:operator> <call><name pos:line="212" pos:column="35">NamespaceDefinition</name><argument_list pos:line="212" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="213" pos:column="13">var</name></type> <name pos:line="213" pos:column="17">definitionScope</name> <init pos:line="213" pos:column="33">= <expr><name><name pos:line="213" pos:column="35">CodeParser</name><index pos:line="213" pos:column="45">[<expr><name><name pos:line="213" pos:column="46">Language</name><op:operator pos:line="213" pos:column="54">.</op:operator><name pos:line="213" pos:column="55">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="213" pos:column="65">.</op:operator><call><name pos:line="213" pos:column="66">ParseFileUnit</name><argument_list pos:line="213" pos:column="79">(<argument><expr><name pos:line="213" pos:column="80">fileUnitDef</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name pos:line="215" pos:column="13">globalScope</name> <op:operator pos:line="215" pos:column="25">=</op:operator> <call><name><name pos:line="215" pos:column="27">globalScope</name><op:operator pos:line="215" pos:column="38">.</op:operator><name pos:line="215" pos:column="39">Merge</name></name><argument_list pos:line="215" pos:column="44">(<argument><expr><name pos:line="215" pos:column="45">declarationScope</name></expr></argument>)</argument_list></call> <op:operator pos:line="215" pos:column="63">as</op:operator> <name pos:line="215" pos:column="66">NamespaceDefinition</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="216" pos:column="13">globalScope</name> <op:operator pos:line="216" pos:column="25">=</op:operator> <call><name><name pos:line="216" pos:column="27">globalScope</name><op:operator pos:line="216" pos:column="38">.</op:operator><name pos:line="216" pos:column="39">Merge</name></name><argument_list pos:line="216" pos:column="44">(<argument><expr><name pos:line="216" pos:column="45">definitionScope</name></expr></argument>)</argument_list></call> <op:operator pos:line="216" pos:column="62">as</op:operator> <name pos:line="216" pos:column="65">NamespaceDefinition</name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="218" pos:column="13">Assert</name><op:operator pos:line="218" pos:column="19">.</op:operator><name pos:line="218" pos:column="20">AreEqual</name></name><argument_list pos:line="218" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="218" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="218" pos:column="32">globalScope</name><op:operator pos:line="218" pos:column="43">.</op:operator><name pos:line="218" pos:column="44">ChildStatements</name><op:operator pos:line="218" pos:column="59">.</op:operator><name pos:line="218" pos:column="60">Count</name></name><argument_list pos:line="218" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="219" pos:column="13">var</name></type> <name pos:line="219" pos:column="17">methodFoo</name> <init pos:line="219" pos:column="27">= <expr><name><name pos:line="219" pos:column="29">globalScope</name><op:operator pos:line="219" pos:column="40">.</op:operator><name pos:line="219" pos:column="41">ChildStatements</name><index pos:line="219" pos:column="56">[<expr><lit:literal type="number" pos:line="219" pos:column="57">0</lit:literal></expr>]</index></name> <op:operator pos:line="219" pos:column="60">as</op:operator> <name pos:line="219" pos:column="63">MethodDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="220" pos:column="13">Assert</name><op:operator pos:line="220" pos:column="19">.</op:operator><name pos:line="220" pos:column="20">IsNotNull</name></name><argument_list pos:line="220" pos:column="29">(<argument><expr><name pos:line="220" pos:column="30">methodFoo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="222" pos:column="13">Assert</name><op:operator pos:line="222" pos:column="19">.</op:operator><name pos:line="222" pos:column="20">AreEqual</name></name><argument_list pos:line="222" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="222" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="222" pos:column="36">methodFoo</name><op:operator pos:line="222" pos:column="45">.</op:operator><name pos:line="222" pos:column="46">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="223" pos:column="13">Assert</name><op:operator pos:line="223" pos:column="19">.</op:operator><name pos:line="223" pos:column="20">AreEqual</name></name><argument_list pos:line="223" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="223" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="223" pos:column="32">methodFoo</name><op:operator pos:line="223" pos:column="41">.</op:operator><name pos:line="223" pos:column="42">Parameters</name><op:operator pos:line="223" pos:column="52">.</op:operator><name pos:line="223" pos:column="53">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="225" pos:column="13">var</name></type> <name pos:line="225" pos:column="17">parameter</name> <init pos:line="225" pos:column="27">= <expr><name><name pos:line="225" pos:column="29">methodFoo</name><op:operator pos:line="225" pos:column="38">.</op:operator><name pos:line="225" pos:column="39">Parameters</name><index pos:line="225" pos:column="49">[<expr><lit:literal type="number" pos:line="225" pos:column="50">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="226" pos:column="13">Assert</name><op:operator pos:line="226" pos:column="19">.</op:operator><name pos:line="226" pos:column="20">AreEqual</name></name><argument_list pos:line="226" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="226" pos:column="29">"char"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="226" pos:column="37">parameter</name><op:operator pos:line="226" pos:column="46">.</op:operator><name pos:line="226" pos:column="47">VariableType</name><op:operator pos:line="226" pos:column="59">.</op:operator><name pos:line="226" pos:column="60">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="227" pos:column="13">Assert</name><op:operator pos:line="227" pos:column="19">.</op:operator><name pos:line="227" pos:column="20">AreEqual</name></name><argument_list pos:line="227" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="227" pos:column="29">"bar"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="227" pos:column="36">parameter</name><op:operator pos:line="227" pos:column="45">.</op:operator><name pos:line="227" pos:column="46">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="230" pos:column="9">[<expr><name pos:line="230" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="231" pos:column="9">public</specifier> <name pos:line="231" pos:column="16">void</name></type> <name pos:line="231" pos:column="21">TestCreateMethodDefinition_TwoUnresolvedParents</name><parameter_list pos:line="231" pos:column="68">()</parameter_list> <block pos:line="231" pos:column="71">{
            <comment type="line" pos:line="232" pos:column="13">// # B.h namespace A { class B { }; }</comment>
            <decl_stmt><decl><type><name pos:line="233" pos:column="13">string</name></type> <name pos:line="233" pos:column="20">xmlh</name> <init pos:line="233" pos:column="25">= <expr><lit:literal type="string" pos:line="233" pos:column="27">@"&lt;namespace&gt;namespace &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{
    &lt;class&gt;class &lt;name&gt;B&lt;/name&gt; &lt;block&gt;{&lt;private type=""default&gt;
    &lt;/private&gt;}&lt;/block&gt;;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="238" pos:column="13">// # B.cpp int A::B::Foo() { return 0; }</comment>
            <decl_stmt><decl><type><name pos:line="239" pos:column="13">string</name></type> <name pos:line="239" pos:column="20">xmlcpp</name> <init pos:line="239" pos:column="27">= <expr><lit:literal type="string" pos:line="239" pos:column="29">@"&lt;function&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;&lt;name&gt;A&lt;/name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;&lt;name&gt;B&lt;/name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{
}&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="242" pos:column="13">var</name></type> <name pos:line="242" pos:column="17">xmlHeader</name> <init pos:line="242" pos:column="27">= <expr><name><name pos:line="242" pos:column="29">FileUnitSetup</name><index pos:line="242" pos:column="42">[<expr><name><name pos:line="242" pos:column="43">Language</name><op:operator pos:line="242" pos:column="51">.</op:operator><name pos:line="242" pos:column="52">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="242" pos:column="62">.</op:operator><call><name pos:line="242" pos:column="63">GetFileUnitForXmlSnippet</name><argument_list pos:line="242" pos:column="87">(<argument><expr><name pos:line="242" pos:column="88">xmlh</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="242" pos:column="94">"B.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="243" pos:column="13">var</name></type> <name pos:line="243" pos:column="17">xmlImpl</name> <init pos:line="243" pos:column="25">= <expr><name><name pos:line="243" pos:column="27">FileUnitSetup</name><index pos:line="243" pos:column="40">[<expr><name><name pos:line="243" pos:column="41">Language</name><op:operator pos:line="243" pos:column="49">.</op:operator><name pos:line="243" pos:column="50">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="243" pos:column="60">.</op:operator><call><name pos:line="243" pos:column="61">GetFileUnitForXmlSnippet</name><argument_list pos:line="243" pos:column="85">(<argument><expr><name pos:line="243" pos:column="86">xmlcpp</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="243" pos:column="94">"B.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="245" pos:column="13">var</name></type> <name pos:line="245" pos:column="17">headerScope</name> <init pos:line="245" pos:column="29">= <expr><name><name pos:line="245" pos:column="31">CodeParser</name><index pos:line="245" pos:column="41">[<expr><name><name pos:line="245" pos:column="42">Language</name><op:operator pos:line="245" pos:column="50">.</op:operator><name pos:line="245" pos:column="51">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="245" pos:column="61">.</op:operator><call><name pos:line="245" pos:column="62">ParseFileUnit</name><argument_list pos:line="245" pos:column="75">(<argument><expr><name pos:line="245" pos:column="76">xmlHeader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="246" pos:column="13">var</name></type> <name pos:line="246" pos:column="17">implementationScope</name> <init pos:line="246" pos:column="37">= <expr><name><name pos:line="246" pos:column="39">CodeParser</name><index pos:line="246" pos:column="49">[<expr><name><name pos:line="246" pos:column="50">Language</name><op:operator pos:line="246" pos:column="58">.</op:operator><name pos:line="246" pos:column="59">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="246" pos:column="69">.</op:operator><call><name pos:line="246" pos:column="70">ParseFileUnit</name><argument_list pos:line="246" pos:column="83">(<argument><expr><name pos:line="246" pos:column="84">xmlImpl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="247" pos:column="13">var</name></type> <name pos:line="247" pos:column="17">globalScope</name> <init pos:line="247" pos:column="29">= <expr><call><name><name pos:line="247" pos:column="31">headerScope</name><op:operator pos:line="247" pos:column="42">.</op:operator><name pos:line="247" pos:column="43">Merge</name></name><argument_list pos:line="247" pos:column="48">(<argument><expr><name pos:line="247" pos:column="49">implementationScope</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="249" pos:column="13">Assert</name><op:operator pos:line="249" pos:column="19">.</op:operator><name pos:line="249" pos:column="20">AreEqual</name></name><argument_list pos:line="249" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="249" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="249" pos:column="32">globalScope</name><op:operator pos:line="249" pos:column="43">.</op:operator><name pos:line="249" pos:column="44">ChildStatements</name><op:operator pos:line="249" pos:column="59">.</op:operator><name pos:line="249" pos:column="60">Count</name></name><argument_list pos:line="249" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="251" pos:column="13">var</name></type> <name pos:line="251" pos:column="17">namespaceA</name> <init pos:line="251" pos:column="28">= <expr><call><name><name pos:line="251" pos:column="30">globalScope</name><op:operator pos:line="251" pos:column="41">.</op:operator><name pos:line="251" pos:column="42">ChildStatements</name><op:operator pos:line="251" pos:column="57">.</op:operator><name pos:line="251" pos:column="58">First</name></name><argument_list pos:line="251" pos:column="63">()</argument_list></call> <op:operator pos:line="251" pos:column="66">as</op:operator> <name pos:line="251" pos:column="69">NamespaceDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="252" pos:column="13">Assert</name><op:operator pos:line="252" pos:column="19">.</op:operator><name pos:line="252" pos:column="20">AreEqual</name></name><argument_list pos:line="252" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="252" pos:column="29">"A"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="252" pos:column="34">namespaceA</name><op:operator pos:line="252" pos:column="44">.</op:operator><name pos:line="252" pos:column="45">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="253" pos:column="13">Assert</name><op:operator pos:line="253" pos:column="19">.</op:operator><name pos:line="253" pos:column="20">AreEqual</name></name><argument_list pos:line="253" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="253" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="253" pos:column="32">namespaceA</name><op:operator pos:line="253" pos:column="42">.</op:operator><name pos:line="253" pos:column="43">ChildStatements</name><op:operator pos:line="253" pos:column="58">.</op:operator><name pos:line="253" pos:column="59">Count</name></name><argument_list pos:line="253" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="254" pos:column="13">Assert</name><op:operator pos:line="254" pos:column="19">.</op:operator><name pos:line="254" pos:column="20">AreEqual</name></name><argument_list pos:line="254" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="254" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="254" pos:column="32">namespaceA</name><op:operator pos:line="254" pos:column="42">.</op:operator><name pos:line="254" pos:column="43">Locations</name><op:operator pos:line="254" pos:column="52">.</op:operator><name pos:line="254" pos:column="53">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="256" pos:column="13">var</name></type> <name pos:line="256" pos:column="17">typeB</name> <init pos:line="256" pos:column="23">= <expr><call><name><name pos:line="256" pos:column="25">namespaceA</name><op:operator pos:line="256" pos:column="35">.</op:operator><name pos:line="256" pos:column="36">ChildStatements</name><op:operator pos:line="256" pos:column="51">.</op:operator><name pos:line="256" pos:column="52">First</name></name><argument_list pos:line="256" pos:column="57">()</argument_list></call> <op:operator pos:line="256" pos:column="60">as</op:operator> <name pos:line="256" pos:column="63">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="257" pos:column="13">Assert</name><op:operator pos:line="257" pos:column="19">.</op:operator><name pos:line="257" pos:column="20">AreEqual</name></name><argument_list pos:line="257" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="257" pos:column="29">"A.B"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="257" pos:column="36">typeB</name><op:operator pos:line="257" pos:column="41">.</op:operator><name pos:line="257" pos:column="42">GetFullName</name></name><argument_list pos:line="257" pos:column="53">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="258" pos:column="13">Assert</name><op:operator pos:line="258" pos:column="19">.</op:operator><name pos:line="258" pos:column="20">AreEqual</name></name><argument_list pos:line="258" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="258" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="258" pos:column="32">typeB</name><op:operator pos:line="258" pos:column="37">.</op:operator><name pos:line="258" pos:column="38">ChildStatements</name><op:operator pos:line="258" pos:column="53">.</op:operator><name pos:line="258" pos:column="54">Count</name></name><argument_list pos:line="258" pos:column="59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="259" pos:column="13">Assert</name><op:operator pos:line="259" pos:column="19">.</op:operator><name pos:line="259" pos:column="20">AreEqual</name></name><argument_list pos:line="259" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="259" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="259" pos:column="32">typeB</name><op:operator pos:line="259" pos:column="37">.</op:operator><name pos:line="259" pos:column="38">Locations</name><op:operator pos:line="259" pos:column="47">.</op:operator><name pos:line="259" pos:column="48">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="261" pos:column="13">var</name></type> <name pos:line="261" pos:column="17">methodFoo</name> <init pos:line="261" pos:column="27">= <expr><call><name><name pos:line="261" pos:column="29">typeB</name><op:operator pos:line="261" pos:column="34">.</op:operator><name pos:line="261" pos:column="35">ChildStatements</name><op:operator pos:line="261" pos:column="50">.</op:operator><name pos:line="261" pos:column="51">First</name></name><argument_list pos:line="261" pos:column="56">()</argument_list></call> <op:operator pos:line="261" pos:column="59">as</op:operator> <name pos:line="261" pos:column="62">MethodDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="262" pos:column="13">Assert</name><op:operator pos:line="262" pos:column="19">.</op:operator><name pos:line="262" pos:column="20">AreEqual</name></name><argument_list pos:line="262" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="262" pos:column="29">"A.B.Foo"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="262" pos:column="40">methodFoo</name><op:operator pos:line="262" pos:column="49">.</op:operator><name pos:line="262" pos:column="50">GetFullName</name></name><argument_list pos:line="262" pos:column="61">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="263" pos:column="13">Assert</name><op:operator pos:line="263" pos:column="19">.</op:operator><name pos:line="263" pos:column="20">AreEqual</name></name><argument_list pos:line="263" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="263" pos:column="29">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="263" pos:column="32">methodFoo</name><op:operator pos:line="263" pos:column="41">.</op:operator><name pos:line="263" pos:column="42">ChildStatements</name><op:operator pos:line="263" pos:column="57">.</op:operator><name pos:line="263" pos:column="58">Count</name></name><argument_list pos:line="263" pos:column="63">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="264" pos:column="13">Assert</name><op:operator pos:line="264" pos:column="19">.</op:operator><name pos:line="264" pos:column="20">AreEqual</name></name><argument_list pos:line="264" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="264" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="264" pos:column="32">methodFoo</name><op:operator pos:line="264" pos:column="41">.</op:operator><name pos:line="264" pos:column="42">Locations</name><op:operator pos:line="264" pos:column="51">.</op:operator><name pos:line="264" pos:column="52">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="266" pos:column="13">Assert</name><op:operator pos:line="266" pos:column="19">.</op:operator><name pos:line="266" pos:column="20">AreSame</name></name><argument_list pos:line="266" pos:column="27">(<argument><expr><name pos:line="266" pos:column="28">globalScope</name></expr></argument>, <argument><expr><name><name pos:line="266" pos:column="41">namespaceA</name><op:operator pos:line="266" pos:column="51">.</op:operator><name pos:line="266" pos:column="52">ParentStatement</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="267" pos:column="13">Assert</name><op:operator pos:line="267" pos:column="19">.</op:operator><name pos:line="267" pos:column="20">AreSame</name></name><argument_list pos:line="267" pos:column="27">(<argument><expr><name pos:line="267" pos:column="28">namespaceA</name></expr></argument>, <argument><expr><name><name pos:line="267" pos:column="40">typeB</name><op:operator pos:line="267" pos:column="45">.</op:operator><name pos:line="267" pos:column="46">ParentStatement</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="268" pos:column="13">Assert</name><op:operator pos:line="268" pos:column="19">.</op:operator><name pos:line="268" pos:column="20">AreSame</name></name><argument_list pos:line="268" pos:column="27">(<argument><expr><name pos:line="268" pos:column="28">typeB</name></expr></argument>, <argument><expr><name><name pos:line="268" pos:column="35">methodFoo</name><op:operator pos:line="268" pos:column="44">.</op:operator><name pos:line="268" pos:column="45">ParentStatement</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="271" pos:column="9">[<expr><name pos:line="271" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="272" pos:column="9">public</specifier> <name pos:line="272" pos:column="16">void</name></type> <name pos:line="272" pos:column="21">TestCreateMethodDefinition_TwoUnresolvedParentsWithPrototype</name><parameter_list pos:line="272" pos:column="81">()</parameter_list> <block pos:line="272" pos:column="84">{
            <comment type="line" pos:line="273" pos:column="13">// # B.h namespace A { class B { int Foo(); }; }</comment>
            <decl_stmt><decl><type><name pos:line="274" pos:column="13">string</name></type> <name pos:line="274" pos:column="20">xmlh</name> <init pos:line="274" pos:column="25">= <expr><lit:literal type="string" pos:line="274" pos:column="27">@"&lt;namespace&gt;namespace &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{ &lt;class&gt;class &lt;name&gt;B&lt;/name&gt; &lt;block&gt;{&lt;private type=""default&gt; &lt;function_decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt;;&lt;/function_decl&gt; &lt;/private&gt;}&lt;/block&gt;;&lt;/class&gt; }&lt;/block&gt;&lt;/namespace&gt;
"</lit:literal></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="277" pos:column="13">// # B.cpp int A::B::Foo() { return 0; }</comment>
            <decl_stmt><decl><type><name pos:line="278" pos:column="13">string</name></type> <name pos:line="278" pos:column="20">xmlcpp</name> <init pos:line="278" pos:column="27">= <expr><lit:literal type="string" pos:line="278" pos:column="29">@"&lt;function&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;&lt;name&gt;A&lt;/name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;&lt;name&gt;B&lt;/name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{
}&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="281" pos:column="13">var</name></type> <name pos:line="281" pos:column="17">xmlHeader</name> <init pos:line="281" pos:column="27">= <expr><name><name pos:line="281" pos:column="29">FileUnitSetup</name><index pos:line="281" pos:column="42">[<expr><name><name pos:line="281" pos:column="43">Language</name><op:operator pos:line="281" pos:column="51">.</op:operator><name pos:line="281" pos:column="52">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="281" pos:column="62">.</op:operator><call><name pos:line="281" pos:column="63">GetFileUnitForXmlSnippet</name><argument_list pos:line="281" pos:column="87">(<argument><expr><name pos:line="281" pos:column="88">xmlh</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="281" pos:column="94">"B.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="282" pos:column="13">var</name></type> <name pos:line="282" pos:column="17">xmlImpl</name> <init pos:line="282" pos:column="25">= <expr><name><name pos:line="282" pos:column="27">FileUnitSetup</name><index pos:line="282" pos:column="40">[<expr><name><name pos:line="282" pos:column="41">Language</name><op:operator pos:line="282" pos:column="49">.</op:operator><name pos:line="282" pos:column="50">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="282" pos:column="60">.</op:operator><call><name pos:line="282" pos:column="61">GetFileUnitForXmlSnippet</name><argument_list pos:line="282" pos:column="85">(<argument><expr><name pos:line="282" pos:column="86">xmlcpp</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="282" pos:column="94">"B.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="284" pos:column="13">var</name></type> <name pos:line="284" pos:column="17">headerScope</name> <init pos:line="284" pos:column="29">= <expr><name><name pos:line="284" pos:column="31">CodeParser</name><index pos:line="284" pos:column="41">[<expr><name><name pos:line="284" pos:column="42">Language</name><op:operator pos:line="284" pos:column="50">.</op:operator><name pos:line="284" pos:column="51">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="284" pos:column="61">.</op:operator><call><name pos:line="284" pos:column="62">ParseFileUnit</name><argument_list pos:line="284" pos:column="75">(<argument><expr><name pos:line="284" pos:column="76">xmlHeader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="285" pos:column="13">var</name></type> <name pos:line="285" pos:column="17">implementationScope</name> <init pos:line="285" pos:column="37">= <expr><name><name pos:line="285" pos:column="39">CodeParser</name><index pos:line="285" pos:column="49">[<expr><name><name pos:line="285" pos:column="50">Language</name><op:operator pos:line="285" pos:column="58">.</op:operator><name pos:line="285" pos:column="59">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="285" pos:column="69">.</op:operator><call><name pos:line="285" pos:column="70">ParseFileUnit</name><argument_list pos:line="285" pos:column="83">(<argument><expr><name pos:line="285" pos:column="84">xmlImpl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="286" pos:column="13">var</name></type> <name pos:line="286" pos:column="17">globalScope</name> <init pos:line="286" pos:column="29">= <expr><call><name><name pos:line="286" pos:column="31">headerScope</name><op:operator pos:line="286" pos:column="42">.</op:operator><name pos:line="286" pos:column="43">Merge</name></name><argument_list pos:line="286" pos:column="48">(<argument><expr><name pos:line="286" pos:column="49">implementationScope</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="288" pos:column="13">Assert</name><op:operator pos:line="288" pos:column="19">.</op:operator><name pos:line="288" pos:column="20">AreEqual</name></name><argument_list pos:line="288" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="288" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="288" pos:column="32">globalScope</name><op:operator pos:line="288" pos:column="43">.</op:operator><name pos:line="288" pos:column="44">ChildStatements</name><op:operator pos:line="288" pos:column="59">.</op:operator><name pos:line="288" pos:column="60">Count</name></name><argument_list pos:line="288" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="290" pos:column="13">var</name></type> <name pos:line="290" pos:column="17">namespaceA</name> <init pos:line="290" pos:column="28">= <expr><call><name><name pos:line="290" pos:column="30">globalScope</name><op:operator pos:line="290" pos:column="41">.</op:operator><name pos:line="290" pos:column="42">ChildStatements</name><op:operator pos:line="290" pos:column="57">.</op:operator><name pos:line="290" pos:column="58">First</name></name><argument_list pos:line="290" pos:column="63">()</argument_list></call> <op:operator pos:line="290" pos:column="66">as</op:operator> <name pos:line="290" pos:column="69">NamespaceDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="291" pos:column="13">Assert</name><op:operator pos:line="291" pos:column="19">.</op:operator><name pos:line="291" pos:column="20">AreEqual</name></name><argument_list pos:line="291" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="291" pos:column="29">"A"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="291" pos:column="34">namespaceA</name><op:operator pos:line="291" pos:column="44">.</op:operator><name pos:line="291" pos:column="45">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="292" pos:column="13">Assert</name><op:operator pos:line="292" pos:column="19">.</op:operator><name pos:line="292" pos:column="20">AreEqual</name></name><argument_list pos:line="292" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="292" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="292" pos:column="32">namespaceA</name><op:operator pos:line="292" pos:column="42">.</op:operator><name pos:line="292" pos:column="43">ChildStatements</name><op:operator pos:line="292" pos:column="58">.</op:operator><name pos:line="292" pos:column="59">Count</name></name><argument_list pos:line="292" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="293" pos:column="13">Assert</name><op:operator pos:line="293" pos:column="19">.</op:operator><name pos:line="293" pos:column="20">AreEqual</name></name><argument_list pos:line="293" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="293" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="293" pos:column="32">namespaceA</name><op:operator pos:line="293" pos:column="42">.</op:operator><name pos:line="293" pos:column="43">Locations</name><op:operator pos:line="293" pos:column="52">.</op:operator><name pos:line="293" pos:column="53">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="295" pos:column="13">var</name></type> <name pos:line="295" pos:column="17">typeB</name> <init pos:line="295" pos:column="23">= <expr><call><name><name pos:line="295" pos:column="25">namespaceA</name><op:operator pos:line="295" pos:column="35">.</op:operator><name pos:line="295" pos:column="36">ChildStatements</name><op:operator pos:line="295" pos:column="51">.</op:operator><name pos:line="295" pos:column="52">First</name></name><argument_list pos:line="295" pos:column="57">()</argument_list></call> <op:operator pos:line="295" pos:column="60">as</op:operator> <name pos:line="295" pos:column="63">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="296" pos:column="13">Assert</name><op:operator pos:line="296" pos:column="19">.</op:operator><name pos:line="296" pos:column="20">AreEqual</name></name><argument_list pos:line="296" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="296" pos:column="29">"A.B"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="296" pos:column="36">typeB</name><op:operator pos:line="296" pos:column="41">.</op:operator><name pos:line="296" pos:column="42">GetFullName</name></name><argument_list pos:line="296" pos:column="53">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="297" pos:column="13">Assert</name><op:operator pos:line="297" pos:column="19">.</op:operator><name pos:line="297" pos:column="20">AreEqual</name></name><argument_list pos:line="297" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="297" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="297" pos:column="32">typeB</name><op:operator pos:line="297" pos:column="37">.</op:operator><name pos:line="297" pos:column="38">ChildStatements</name><op:operator pos:line="297" pos:column="53">.</op:operator><name pos:line="297" pos:column="54">Count</name></name><argument_list pos:line="297" pos:column="59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="298" pos:column="13">Assert</name><op:operator pos:line="298" pos:column="19">.</op:operator><name pos:line="298" pos:column="20">AreEqual</name></name><argument_list pos:line="298" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="298" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="298" pos:column="32">typeB</name><op:operator pos:line="298" pos:column="37">.</op:operator><name pos:line="298" pos:column="38">Locations</name><op:operator pos:line="298" pos:column="47">.</op:operator><name pos:line="298" pos:column="48">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="300" pos:column="13">var</name></type> <name pos:line="300" pos:column="17">methodFoo</name> <init pos:line="300" pos:column="27">= <expr><call><name><name pos:line="300" pos:column="29">typeB</name><op:operator pos:line="300" pos:column="34">.</op:operator><name pos:line="300" pos:column="35">ChildStatements</name><op:operator pos:line="300" pos:column="50">.</op:operator><name pos:line="300" pos:column="51">First</name></name><argument_list pos:line="300" pos:column="56">()</argument_list></call> <op:operator pos:line="300" pos:column="59">as</op:operator> <name pos:line="300" pos:column="62">MethodDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="301" pos:column="13">Assert</name><op:operator pos:line="301" pos:column="19">.</op:operator><name pos:line="301" pos:column="20">AreEqual</name></name><argument_list pos:line="301" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="301" pos:column="29">"A.B.Foo"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="301" pos:column="40">methodFoo</name><op:operator pos:line="301" pos:column="49">.</op:operator><name pos:line="301" pos:column="50">GetFullName</name></name><argument_list pos:line="301" pos:column="61">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="302" pos:column="13">Assert</name><op:operator pos:line="302" pos:column="19">.</op:operator><name pos:line="302" pos:column="20">AreEqual</name></name><argument_list pos:line="302" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="302" pos:column="29">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="302" pos:column="32">methodFoo</name><op:operator pos:line="302" pos:column="41">.</op:operator><name pos:line="302" pos:column="42">ChildStatements</name><op:operator pos:line="302" pos:column="57">.</op:operator><name pos:line="302" pos:column="58">Count</name></name><argument_list pos:line="302" pos:column="63">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="303" pos:column="13">Assert</name><op:operator pos:line="303" pos:column="19">.</op:operator><name pos:line="303" pos:column="20">AreEqual</name></name><argument_list pos:line="303" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="303" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="303" pos:column="32">methodFoo</name><op:operator pos:line="303" pos:column="41">.</op:operator><name pos:line="303" pos:column="42">Locations</name><op:operator pos:line="303" pos:column="51">.</op:operator><name pos:line="303" pos:column="52">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="305" pos:column="13">Assert</name><op:operator pos:line="305" pos:column="19">.</op:operator><name pos:line="305" pos:column="20">AreSame</name></name><argument_list pos:line="305" pos:column="27">(<argument><expr><name pos:line="305" pos:column="28">globalScope</name></expr></argument>, <argument><expr><name><name pos:line="305" pos:column="41">namespaceA</name><op:operator pos:line="305" pos:column="51">.</op:operator><name pos:line="305" pos:column="52">ParentStatement</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="306" pos:column="13">Assert</name><op:operator pos:line="306" pos:column="19">.</op:operator><name pos:line="306" pos:column="20">AreSame</name></name><argument_list pos:line="306" pos:column="27">(<argument><expr><name pos:line="306" pos:column="28">namespaceA</name></expr></argument>, <argument><expr><name><name pos:line="306" pos:column="40">typeB</name><op:operator pos:line="306" pos:column="45">.</op:operator><name pos:line="306" pos:column="46">ParentStatement</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="307" pos:column="13">Assert</name><op:operator pos:line="307" pos:column="19">.</op:operator><name pos:line="307" pos:column="20">AreSame</name></name><argument_list pos:line="307" pos:column="27">(<argument><expr><name pos:line="307" pos:column="28">typeB</name></expr></argument>, <argument><expr><name><name pos:line="307" pos:column="35">methodFoo</name><op:operator pos:line="307" pos:column="44">.</op:operator><name pos:line="307" pos:column="45">ParentStatement</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <function><type><attribute pos:line="309" pos:column="9">[<expr><name pos:line="309" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="310" pos:column="9">public</specifier> <name pos:line="310" pos:column="16">void</name></type> <name pos:line="310" pos:column="21">TestMethodDefinitionMerge_NoParameters</name><parameter_list pos:line="310" pos:column="59">()</parameter_list> <block pos:line="310" pos:column="62">{
            <comment type="line" pos:line="311" pos:column="13">////Foo.h</comment>
            <comment type="line" pos:line="312" pos:column="13">//int Foo();</comment>
            <decl_stmt><decl><type><name pos:line="313" pos:column="13">string</name></type> <name pos:line="313" pos:column="20">declXml</name> <init pos:line="313" pos:column="28">= <expr><lit:literal type="string" pos:line="313" pos:column="30">"&lt;function_decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt;;&lt;/function_decl&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="314" pos:column="13">var</name></type> <name pos:line="314" pos:column="17">fileunitDecl</name> <init pos:line="314" pos:column="30">= <expr><name><name pos:line="314" pos:column="32">FileUnitSetup</name><index pos:line="314" pos:column="45">[<expr><name><name pos:line="314" pos:column="46">Language</name><op:operator pos:line="314" pos:column="54">.</op:operator><name pos:line="314" pos:column="55">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="314" pos:column="65">.</op:operator><call><name pos:line="314" pos:column="66">GetFileUnitForXmlSnippet</name><argument_list pos:line="314" pos:column="90">(<argument><expr><name pos:line="314" pos:column="91">declXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="314" pos:column="100">"Foo.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="315" pos:column="13">var</name></type> <name pos:line="315" pos:column="17">declarationScope</name> <init pos:line="315" pos:column="34">= <expr><name><name pos:line="315" pos:column="36">CodeParser</name><index pos:line="315" pos:column="46">[<expr><name><name pos:line="315" pos:column="47">Language</name><op:operator pos:line="315" pos:column="55">.</op:operator><name pos:line="315" pos:column="56">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="315" pos:column="66">.</op:operator><call><name pos:line="315" pos:column="67">ParseFileUnit</name><argument_list pos:line="315" pos:column="80">(<argument><expr><name pos:line="315" pos:column="81">fileunitDecl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="317" pos:column="13">////Foo.cpp</comment>
            <comment type="line" pos:line="318" pos:column="13">//int Foo() { return 0; }</comment>
            <decl_stmt><decl><type><name pos:line="319" pos:column="13">string</name></type> <name pos:line="319" pos:column="20">defXml</name> <init pos:line="319" pos:column="27">= <expr><lit:literal type="string" pos:line="319" pos:column="29">@"&lt;function&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;return&gt;return &lt;expr&gt;&lt;lit:literal type=""number&gt;0&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt; }&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="320" pos:column="13">var</name></type> <name pos:line="320" pos:column="17">fileUnitDef</name> <init pos:line="320" pos:column="29">= <expr><name><name pos:line="320" pos:column="31">FileUnitSetup</name><index pos:line="320" pos:column="44">[<expr><name><name pos:line="320" pos:column="45">Language</name><op:operator pos:line="320" pos:column="53">.</op:operator><name pos:line="320" pos:column="54">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="320" pos:column="64">.</op:operator><call><name pos:line="320" pos:column="65">GetFileUnitForXmlSnippet</name><argument_list pos:line="320" pos:column="89">(<argument><expr><name pos:line="320" pos:column="90">defXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="320" pos:column="98">"Foo.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="321" pos:column="13">var</name></type> <name pos:line="321" pos:column="17">definitionScope</name> <init pos:line="321" pos:column="33">= <expr><name><name pos:line="321" pos:column="35">CodeParser</name><index pos:line="321" pos:column="45">[<expr><name><name pos:line="321" pos:column="46">Language</name><op:operator pos:line="321" pos:column="54">.</op:operator><name pos:line="321" pos:column="55">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="321" pos:column="65">.</op:operator><call><name pos:line="321" pos:column="66">ParseFileUnit</name><argument_list pos:line="321" pos:column="79">(<argument><expr><name pos:line="321" pos:column="80">fileUnitDef</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="323" pos:column="13">var</name></type> <name pos:line="323" pos:column="17">globalScope</name> <init pos:line="323" pos:column="29">= <expr><call><name><name pos:line="323" pos:column="31">declarationScope</name><op:operator pos:line="323" pos:column="47">.</op:operator><name pos:line="323" pos:column="48">Merge</name></name><argument_list pos:line="323" pos:column="53">(<argument><expr><name pos:line="323" pos:column="54">definitionScope</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="325" pos:column="13">Assert</name><op:operator pos:line="325" pos:column="19">.</op:operator><name pos:line="325" pos:column="20">AreEqual</name></name><argument_list pos:line="325" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="325" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="325" pos:column="32">globalScope</name><op:operator pos:line="325" pos:column="43">.</op:operator><name pos:line="325" pos:column="44">ChildStatements</name><op:operator pos:line="325" pos:column="59">.</op:operator><name pos:line="325" pos:column="60">Count</name></name><argument_list pos:line="325" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="326" pos:column="13">Assert</name><op:operator pos:line="326" pos:column="19">.</op:operator><name pos:line="326" pos:column="20">AreEqual</name></name><argument_list pos:line="326" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="326" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="326" pos:column="36">(</op:operator><op:operator pos:line="326" pos:column="37">(</op:operator><name pos:line="326" pos:column="38">MethodDefinition</name><op:operator pos:line="326" pos:column="54">)</op:operator> <call><name><name pos:line="326" pos:column="56">globalScope</name><op:operator pos:line="326" pos:column="67">.</op:operator><name pos:line="326" pos:column="68">ChildStatements</name><op:operator pos:line="326" pos:column="83">.</op:operator><name pos:line="326" pos:column="84">First</name></name><argument_list pos:line="326" pos:column="89">()</argument_list></call><op:operator pos:line="326" pos:column="91">)</op:operator><op:operator pos:line="326" pos:column="92">.</op:operator><name pos:line="326" pos:column="93">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>


        <function><type><attribute pos:line="330" pos:column="9">[<expr><name pos:line="330" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="331" pos:column="9">public</specifier> <name pos:line="331" pos:column="16">void</name></type> <name pos:line="331" pos:column="21">TestNamespaceMerge_Cpp</name><parameter_list pos:line="331" pos:column="43">()</parameter_list> <block pos:line="331" pos:column="46">{
            <comment type="line" pos:line="332" pos:column="13">// # D.h namespace A { namespace B { namespace C { class D { }; } } }</comment>
            <decl_stmt><decl><type><name pos:line="333" pos:column="13">string</name></type> <name pos:line="333" pos:column="20">d_xml</name> <init pos:line="333" pos:column="26">= <expr><lit:literal type="string" pos:line="333" pos:column="28">@"&lt;namespace&gt;namespace &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{
    &lt;namespace&gt;namespace &lt;name&gt;B&lt;/name&gt; &lt;block&gt;{
        &lt;namespace&gt;namespace &lt;name&gt;C&lt;/name&gt; &lt;block&gt;{
             &lt;class&gt;class &lt;name&gt;D&lt;/name&gt; &lt;block&gt;{&lt;private type=""default&gt; &lt;/private&gt;}&lt;/block&gt;;&lt;/class&gt;
         }&lt;/block&gt;&lt;/namespace&gt;
    }&lt;/block&gt;&lt;/namespace&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="341" pos:column="13">// # E.h namespace A { namespace B { namespace C { class E { }; } } }</comment>
            <decl_stmt><decl><type><name pos:line="342" pos:column="13">string</name></type> <name pos:line="342" pos:column="20">e_xml</name> <init pos:line="342" pos:column="26">= <expr><lit:literal type="string" pos:line="342" pos:column="28">@"&lt;namespace&gt;namespace &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{
    &lt;namespace&gt;namespace &lt;name&gt;B&lt;/name&gt; &lt;block&gt;{
        &lt;namespace&gt;namespace &lt;name&gt;C&lt;/name&gt; &lt;block&gt;{
             &lt;class&gt;class &lt;name&gt;E&lt;/name&gt; &lt;block&gt;{&lt;private type=""default&gt; &lt;/private&gt;}&lt;/block&gt;;&lt;/class&gt;
         }&lt;/block&gt;&lt;/namespace&gt;
    }&lt;/block&gt;&lt;/namespace&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="350" pos:column="13">// # F.h namespace D { class F { }; }</comment>
            <decl_stmt><decl><type><name pos:line="351" pos:column="13">string</name></type> <name pos:line="351" pos:column="20">f_xml</name> <init pos:line="351" pos:column="26">= <expr><lit:literal type="string" pos:line="351" pos:column="28">@"&lt;namespace&gt;namespace &lt;name&gt;D&lt;/name&gt; &lt;block&gt;{
    &lt;class&gt;class &lt;name&gt;F&lt;/name&gt; &lt;block&gt;{&lt;private type=""default&gt; &lt;/private&gt;}&lt;/block&gt;;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="355" pos:column="13">var</name></type> <name pos:line="355" pos:column="17">fileUnitD</name> <init pos:line="355" pos:column="27">= <expr><name><name pos:line="355" pos:column="29">FileUnitSetup</name><index pos:line="355" pos:column="42">[<expr><name><name pos:line="355" pos:column="43">Language</name><op:operator pos:line="355" pos:column="51">.</op:operator><name pos:line="355" pos:column="52">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="355" pos:column="62">.</op:operator><call><name pos:line="355" pos:column="63">GetFileUnitForXmlSnippet</name><argument_list pos:line="355" pos:column="87">(<argument><expr><name pos:line="355" pos:column="88">d_xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="355" pos:column="95">"D.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="356" pos:column="13">var</name></type> <name pos:line="356" pos:column="17">fileUnitE</name> <init pos:line="356" pos:column="27">= <expr><name><name pos:line="356" pos:column="29">FileUnitSetup</name><index pos:line="356" pos:column="42">[<expr><name><name pos:line="356" pos:column="43">Language</name><op:operator pos:line="356" pos:column="51">.</op:operator><name pos:line="356" pos:column="52">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="356" pos:column="62">.</op:operator><call><name pos:line="356" pos:column="63">GetFileUnitForXmlSnippet</name><argument_list pos:line="356" pos:column="87">(<argument><expr><name pos:line="356" pos:column="88">e_xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="356" pos:column="95">"E.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="357" pos:column="13">var</name></type> <name pos:line="357" pos:column="17">fileUnitF</name> <init pos:line="357" pos:column="27">= <expr><name><name pos:line="357" pos:column="29">FileUnitSetup</name><index pos:line="357" pos:column="42">[<expr><name><name pos:line="357" pos:column="43">Language</name><op:operator pos:line="357" pos:column="51">.</op:operator><name pos:line="357" pos:column="52">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="357" pos:column="62">.</op:operator><call><name pos:line="357" pos:column="63">GetFileUnitForXmlSnippet</name><argument_list pos:line="357" pos:column="87">(<argument><expr><name pos:line="357" pos:column="88">f_xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="357" pos:column="95">"F.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="359" pos:column="13">var</name></type> <name pos:line="359" pos:column="17">globalScope</name> <init pos:line="359" pos:column="29">= <expr><op:operator pos:line="359" pos:column="31">new</op:operator> <call><name pos:line="359" pos:column="35">NamespaceDefinition</name><argument_list pos:line="359" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="360" pos:column="13">var</name></type> <name pos:line="360" pos:column="17">scopeD</name> <init pos:line="360" pos:column="24">= <expr><name><name pos:line="360" pos:column="26">CodeParser</name><index pos:line="360" pos:column="36">[<expr><name><name pos:line="360" pos:column="37">Language</name><op:operator pos:line="360" pos:column="45">.</op:operator><name pos:line="360" pos:column="46">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="360" pos:column="56">.</op:operator><call><name pos:line="360" pos:column="57">ParseFileUnit</name><argument_list pos:line="360" pos:column="70">(<argument><expr><name pos:line="360" pos:column="71">fileUnitD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="361" pos:column="13">var</name></type> <name pos:line="361" pos:column="17">scopeE</name> <init pos:line="361" pos:column="24">= <expr><name><name pos:line="361" pos:column="26">CodeParser</name><index pos:line="361" pos:column="36">[<expr><name><name pos:line="361" pos:column="37">Language</name><op:operator pos:line="361" pos:column="45">.</op:operator><name pos:line="361" pos:column="46">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="361" pos:column="56">.</op:operator><call><name pos:line="361" pos:column="57">ParseFileUnit</name><argument_list pos:line="361" pos:column="70">(<argument><expr><name pos:line="361" pos:column="71">fileUnitE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="362" pos:column="13">var</name></type> <name pos:line="362" pos:column="17">scopeF</name> <init pos:line="362" pos:column="24">= <expr><name><name pos:line="362" pos:column="26">CodeParser</name><index pos:line="362" pos:column="36">[<expr><name><name pos:line="362" pos:column="37">Language</name><op:operator pos:line="362" pos:column="45">.</op:operator><name pos:line="362" pos:column="46">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="362" pos:column="56">.</op:operator><call><name pos:line="362" pos:column="57">ParseFileUnit</name><argument_list pos:line="362" pos:column="70">(<argument><expr><name pos:line="362" pos:column="71">fileUnitF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name pos:line="364" pos:column="13">globalScope</name> <op:operator pos:line="364" pos:column="25">=</op:operator> <call><name><name pos:line="364" pos:column="27">globalScope</name><op:operator pos:line="364" pos:column="38">.</op:operator><name pos:line="364" pos:column="39">Merge</name></name><argument_list pos:line="364" pos:column="44">(<argument><expr><name pos:line="364" pos:column="45">scopeD</name></expr></argument>)</argument_list></call><op:operator pos:line="364" pos:column="52">.</op:operator><call><name pos:line="364" pos:column="53">Merge</name><argument_list pos:line="364" pos:column="58">(<argument><expr><name pos:line="364" pos:column="59">scopeE</name></expr></argument>)</argument_list></call><op:operator pos:line="364" pos:column="66">.</op:operator><call><name pos:line="364" pos:column="67">Merge</name><argument_list pos:line="364" pos:column="72">(<argument><expr><name pos:line="364" pos:column="73">scopeF</name></expr></argument>)</argument_list></call> <op:operator pos:line="364" pos:column="81">as</op:operator> <name pos:line="364" pos:column="84">NamespaceDefinition</name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="366" pos:column="13">Assert</name><op:operator pos:line="366" pos:column="19">.</op:operator><name pos:line="366" pos:column="20">AreEqual</name></name><argument_list pos:line="366" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="366" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="366" pos:column="32">globalScope</name><op:operator pos:line="366" pos:column="43">.</op:operator><name pos:line="366" pos:column="44">ChildStatements</name><op:operator pos:line="366" pos:column="59">.</op:operator><name pos:line="366" pos:column="60">Count</name></name><argument_list pos:line="366" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="368" pos:column="13">var</name></type> <name pos:line="368" pos:column="17">namespaceA</name> <init pos:line="368" pos:column="28">= <expr><call><name><name pos:line="368" pos:column="30">globalScope</name><op:operator pos:line="368" pos:column="41">.</op:operator><name pos:line="368" pos:column="42">ChildStatements</name><op:operator pos:line="368" pos:column="57">.</op:operator><name pos:line="368" pos:column="58">First</name></name><argument_list pos:line="368" pos:column="63">()</argument_list></call> <op:operator pos:line="368" pos:column="66">as</op:operator> <name pos:line="368" pos:column="69">NamespaceDefinition</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="369" pos:column="13">var</name></type> <name pos:line="369" pos:column="17">namespaceD</name> <init pos:line="369" pos:column="28">= <expr><call><name><name pos:line="369" pos:column="30">globalScope</name><op:operator pos:line="369" pos:column="41">.</op:operator><name pos:line="369" pos:column="42">ChildStatements</name><op:operator pos:line="369" pos:column="57">.</op:operator><name pos:line="369" pos:column="58">Last</name></name><argument_list pos:line="369" pos:column="62">()</argument_list></call> <op:operator pos:line="369" pos:column="65">as</op:operator> <name pos:line="369" pos:column="68">NamespaceDefinition</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="371" pos:column="13">Assert</name><op:operator pos:line="371" pos:column="19">.</op:operator><name pos:line="371" pos:column="20">AreEqual</name></name><argument_list pos:line="371" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="371" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="371" pos:column="32">namespaceA</name><op:operator pos:line="371" pos:column="42">.</op:operator><name pos:line="371" pos:column="43">ChildStatements</name><op:operator pos:line="371" pos:column="58">.</op:operator><name pos:line="371" pos:column="59">Count</name></name><argument_list pos:line="371" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="372" pos:column="13">Assert</name><op:operator pos:line="372" pos:column="19">.</op:operator><name pos:line="372" pos:column="20">AreEqual</name></name><argument_list pos:line="372" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="372" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="372" pos:column="32">namespaceD</name><op:operator pos:line="372" pos:column="42">.</op:operator><name pos:line="372" pos:column="43">ChildStatements</name><op:operator pos:line="372" pos:column="58">.</op:operator><name pos:line="372" pos:column="59">Count</name></name><argument_list pos:line="372" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="373" pos:column="13">Assert</name><op:operator pos:line="373" pos:column="19">.</op:operator><name pos:line="373" pos:column="20">AreEqual</name></name><argument_list pos:line="373" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="373" pos:column="29">"A"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="373" pos:column="34">namespaceA</name><op:operator pos:line="373" pos:column="44">.</op:operator><name pos:line="373" pos:column="45">GetFullName</name></name><argument_list pos:line="373" pos:column="56">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="374" pos:column="13">Assert</name><op:operator pos:line="374" pos:column="19">.</op:operator><name pos:line="374" pos:column="20">AreEqual</name></name><argument_list pos:line="374" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="374" pos:column="29">"D"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="374" pos:column="34">namespaceD</name><op:operator pos:line="374" pos:column="44">.</op:operator><name pos:line="374" pos:column="45">GetFullName</name></name><argument_list pos:line="374" pos:column="56">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="376" pos:column="13">var</name></type> <name pos:line="376" pos:column="17">namespaceB</name> <init pos:line="376" pos:column="28">= <expr><call><name><name pos:line="376" pos:column="30">namespaceA</name><op:operator pos:line="376" pos:column="40">.</op:operator><name pos:line="376" pos:column="41">ChildStatements</name><op:operator pos:line="376" pos:column="56">.</op:operator><name pos:line="376" pos:column="57">First</name></name><argument_list pos:line="376" pos:column="62">()</argument_list></call> <op:operator pos:line="376" pos:column="65">as</op:operator> <name pos:line="376" pos:column="68">NamespaceDefinition</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="377" pos:column="13">var</name></type> <name pos:line="377" pos:column="17">typeF</name> <init pos:line="377" pos:column="23">= <expr><call><name><name pos:line="377" pos:column="25">namespaceD</name><op:operator pos:line="377" pos:column="35">.</op:operator><name pos:line="377" pos:column="36">ChildStatements</name><op:operator pos:line="377" pos:column="51">.</op:operator><name pos:line="377" pos:column="52">First</name></name><argument_list pos:line="377" pos:column="57">()</argument_list></call> <op:operator pos:line="377" pos:column="60">as</op:operator> <name pos:line="377" pos:column="63">TypeDefinition</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="379" pos:column="13">Assert</name><op:operator pos:line="379" pos:column="19">.</op:operator><name pos:line="379" pos:column="20">AreEqual</name></name><argument_list pos:line="379" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="379" pos:column="29">"B"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="379" pos:column="34">namespaceB</name><op:operator pos:line="379" pos:column="44">.</op:operator><name pos:line="379" pos:column="45">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="380" pos:column="13">Assert</name><op:operator pos:line="380" pos:column="19">.</op:operator><name pos:line="380" pos:column="20">AreEqual</name></name><argument_list pos:line="380" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="380" pos:column="29">"F"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="380" pos:column="34">typeF</name><op:operator pos:line="380" pos:column="39">.</op:operator><name pos:line="380" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="381" pos:column="13">Assert</name><op:operator pos:line="381" pos:column="19">.</op:operator><name pos:line="381" pos:column="20">AreEqual</name></name><argument_list pos:line="381" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="381" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="381" pos:column="32">namespaceB</name><op:operator pos:line="381" pos:column="42">.</op:operator><name pos:line="381" pos:column="43">ChildStatements</name><op:operator pos:line="381" pos:column="58">.</op:operator><name pos:line="381" pos:column="59">Count</name></name><argument_list pos:line="381" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="383" pos:column="13">var</name></type> <name pos:line="383" pos:column="17">namespaceC</name> <init pos:line="383" pos:column="28">= <expr><call><name><name pos:line="383" pos:column="30">namespaceB</name><op:operator pos:line="383" pos:column="40">.</op:operator><name pos:line="383" pos:column="41">ChildStatements</name><op:operator pos:line="383" pos:column="56">.</op:operator><name pos:line="383" pos:column="57">First</name></name><argument_list pos:line="383" pos:column="62">()</argument_list></call> <op:operator pos:line="383" pos:column="65">as</op:operator> <name pos:line="383" pos:column="68">NamespaceDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="384" pos:column="13">Assert</name><op:operator pos:line="384" pos:column="19">.</op:operator><name pos:line="384" pos:column="20">AreEqual</name></name><argument_list pos:line="384" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="384" pos:column="29">"C"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="384" pos:column="34">namespaceC</name><op:operator pos:line="384" pos:column="44">.</op:operator><name pos:line="384" pos:column="45">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="385" pos:column="13">Assert</name><op:operator pos:line="385" pos:column="19">.</op:operator><name pos:line="385" pos:column="20">AreEqual</name></name><argument_list pos:line="385" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="385" pos:column="29">"A.B"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="385" pos:column="36">namespaceC</name><op:operator pos:line="385" pos:column="46">.</op:operator><name><name pos:line="385" pos:column="47">GetAncestors</name><argument_list pos:line="385" pos:column="59">&lt;<argument><name pos:line="385" pos:column="60">NamespaceDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="385" pos:column="80">()</argument_list></call><op:operator pos:line="385" pos:column="82">.</op:operator><call><name pos:line="385" pos:column="83">First</name><argument_list pos:line="385" pos:column="88">()</argument_list></call><op:operator pos:line="385" pos:column="90">.</op:operator><call><name pos:line="385" pos:column="91">GetFullName</name><argument_list pos:line="385" pos:column="102">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="386" pos:column="13">Assert</name><op:operator pos:line="386" pos:column="19">.</op:operator><name pos:line="386" pos:column="20">AreEqual</name></name><argument_list pos:line="386" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="386" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="386" pos:column="32">namespaceC</name><op:operator pos:line="386" pos:column="42">.</op:operator><name pos:line="386" pos:column="43">ChildStatements</name><op:operator pos:line="386" pos:column="58">.</op:operator><name pos:line="386" pos:column="59">Count</name></name><argument_list pos:line="386" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="387" pos:column="13">var</name></type> <name pos:line="387" pos:column="17">typeD</name> <init pos:line="387" pos:column="23">= <expr><call><name><name pos:line="387" pos:column="25">namespaceC</name><op:operator pos:line="387" pos:column="35">.</op:operator><name pos:line="387" pos:column="36">ChildStatements</name><op:operator pos:line="387" pos:column="51">.</op:operator><name pos:line="387" pos:column="52">First</name></name><argument_list pos:line="387" pos:column="57">()</argument_list></call> <op:operator pos:line="387" pos:column="60">as</op:operator> <name pos:line="387" pos:column="63">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="388" pos:column="13">var</name></type> <name pos:line="388" pos:column="17">typeE</name> <init pos:line="388" pos:column="23">= <expr><call><name><name pos:line="388" pos:column="25">namespaceC</name><op:operator pos:line="388" pos:column="35">.</op:operator><name pos:line="388" pos:column="36">ChildStatements</name><op:operator pos:line="388" pos:column="51">.</op:operator><name pos:line="388" pos:column="52">Last</name></name><argument_list pos:line="388" pos:column="56">()</argument_list></call> <op:operator pos:line="388" pos:column="59">as</op:operator> <name pos:line="388" pos:column="62">TypeDefinition</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="390" pos:column="13">Assert</name><op:operator pos:line="390" pos:column="19">.</op:operator><name pos:line="390" pos:column="20">That</name></name><argument_list pos:line="390" pos:column="24">(<argument><expr><name><name pos:line="390" pos:column="25">typeD</name><op:operator pos:line="390" pos:column="30">.</op:operator><name pos:line="390" pos:column="31">ParentStatement</name></name> <op:operator pos:line="390" pos:column="47">==</op:operator> <name><name pos:line="390" pos:column="50">typeE</name><op:operator pos:line="390" pos:column="55">.</op:operator><name pos:line="390" pos:column="56">ParentStatement</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="391" pos:column="13">Assert</name><op:operator pos:line="391" pos:column="19">.</op:operator><name pos:line="391" pos:column="20">That</name></name><argument_list pos:line="391" pos:column="24">(<argument><expr><name><name pos:line="391" pos:column="25">typeD</name><op:operator pos:line="391" pos:column="30">.</op:operator><name pos:line="391" pos:column="31">ParentStatement</name></name> <op:operator pos:line="391" pos:column="47">==</op:operator> <name pos:line="391" pos:column="50">namespaceC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="393" pos:column="13">Assert</name><op:operator pos:line="393" pos:column="19">.</op:operator><name pos:line="393" pos:column="20">AreEqual</name></name><argument_list pos:line="393" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="393" pos:column="29">"A.B.C.D"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="393" pos:column="40">typeD</name><op:operator pos:line="393" pos:column="45">.</op:operator><name pos:line="393" pos:column="46">GetFullName</name></name><argument_list pos:line="393" pos:column="57">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="394" pos:column="13">Assert</name><op:operator pos:line="394" pos:column="19">.</op:operator><name pos:line="394" pos:column="20">AreEqual</name></name><argument_list pos:line="394" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="394" pos:column="29">"A.B.C.E"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="394" pos:column="40">typeE</name><op:operator pos:line="394" pos:column="45">.</op:operator><name pos:line="394" pos:column="46">GetFullName</name></name><argument_list pos:line="394" pos:column="57">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="395" pos:column="13">Assert</name><op:operator pos:line="395" pos:column="19">.</op:operator><name pos:line="395" pos:column="20">AreEqual</name></name><argument_list pos:line="395" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="395" pos:column="29">"D.F"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="395" pos:column="36">typeF</name><op:operator pos:line="395" pos:column="41">.</op:operator><name pos:line="395" pos:column="42">GetFullName</name></name><argument_list pos:line="395" pos:column="53">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="398" pos:column="9">[<expr><name pos:line="398" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="399" pos:column="9">public</specifier> <name pos:line="399" pos:column="16">void</name></type> <name pos:line="399" pos:column="21">TestNamespaceMerge_Java</name><parameter_list pos:line="399" pos:column="44">()</parameter_list> <block pos:line="399" pos:column="47">{
            <comment type="line" pos:line="400" pos:column="13">// # D.java package A.B.C; class D { public void Foo() { } }</comment>
            <decl_stmt><decl><type><name pos:line="401" pos:column="13">string</name></type> <name pos:line="401" pos:column="20">d_xml</name> <init pos:line="401" pos:column="26">= <expr><lit:literal type="string" pos:line="401" pos:column="28">@"&lt;package&gt;package &lt;name&gt;&lt;name&gt;A&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;B&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;C&lt;/name&gt;&lt;/name&gt;;&lt;/package&gt; &lt;class&gt;class &lt;name&gt;D&lt;/name&gt; &lt;block&gt;{ &lt;function&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/function&gt; }&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="403" pos:column="13">// # E.java package A.B.C; class E { public void Bar() { } }</comment>
            <decl_stmt><decl><type><name pos:line="404" pos:column="13">string</name></type> <name pos:line="404" pos:column="20">e_xml</name> <init pos:line="404" pos:column="26">= <expr><lit:literal type="string" pos:line="404" pos:column="28">@"&lt;package&gt;package &lt;name&gt;&lt;name&gt;A&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;B&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;C&lt;/name&gt;&lt;/name&gt;;&lt;/package&gt; &lt;class&gt;class &lt;name&gt;E&lt;/name&gt; &lt;block&gt;{ &lt;function&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Bar&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/function&gt; }&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="406" pos:column="13">// # F.java package D; class F { public void Oof() { } }</comment>
            <decl_stmt><decl><type><name pos:line="407" pos:column="13">string</name></type> <name pos:line="407" pos:column="20">f_xml</name> <init pos:line="407" pos:column="26">= <expr><lit:literal type="string" pos:line="407" pos:column="28">@"&lt;package&gt;package &lt;name&gt;D&lt;/name&gt;;&lt;/package&gt; &lt;class&gt;class &lt;name&gt;F&lt;/name&gt; &lt;block&gt;{ &lt;function&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Oof&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/function&gt; }&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="409" pos:column="13">var</name></type> <name pos:line="409" pos:column="17">fileUnitD</name> <init pos:line="409" pos:column="27">= <expr><name><name pos:line="409" pos:column="29">FileUnitSetup</name><index pos:line="409" pos:column="42">[<expr><name><name pos:line="409" pos:column="43">Language</name><op:operator pos:line="409" pos:column="51">.</op:operator><name pos:line="409" pos:column="52">Java</name></name></expr>]</index></name><op:operator pos:line="409" pos:column="57">.</op:operator><call><name pos:line="409" pos:column="58">GetFileUnitForXmlSnippet</name><argument_list pos:line="409" pos:column="82">(<argument><expr><name pos:line="409" pos:column="83">d_xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="409" pos:column="90">"D.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="410" pos:column="13">var</name></type> <name pos:line="410" pos:column="17">fileUnitE</name> <init pos:line="410" pos:column="27">= <expr><name><name pos:line="410" pos:column="29">FileUnitSetup</name><index pos:line="410" pos:column="42">[<expr><name><name pos:line="410" pos:column="43">Language</name><op:operator pos:line="410" pos:column="51">.</op:operator><name pos:line="410" pos:column="52">Java</name></name></expr>]</index></name><op:operator pos:line="410" pos:column="57">.</op:operator><call><name pos:line="410" pos:column="58">GetFileUnitForXmlSnippet</name><argument_list pos:line="410" pos:column="82">(<argument><expr><name pos:line="410" pos:column="83">e_xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="410" pos:column="90">"E.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="411" pos:column="13">var</name></type> <name pos:line="411" pos:column="17">fileUnitF</name> <init pos:line="411" pos:column="27">= <expr><name><name pos:line="411" pos:column="29">FileUnitSetup</name><index pos:line="411" pos:column="42">[<expr><name><name pos:line="411" pos:column="43">Language</name><op:operator pos:line="411" pos:column="51">.</op:operator><name pos:line="411" pos:column="52">Java</name></name></expr>]</index></name><op:operator pos:line="411" pos:column="57">.</op:operator><call><name pos:line="411" pos:column="58">GetFileUnitForXmlSnippet</name><argument_list pos:line="411" pos:column="82">(<argument><expr><name pos:line="411" pos:column="83">f_xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="411" pos:column="90">"F.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="413" pos:column="13">var</name></type> <name pos:line="413" pos:column="17">globalScopeD</name> <init pos:line="413" pos:column="30">= <expr><name><name pos:line="413" pos:column="32">CodeParser</name><index pos:line="413" pos:column="42">[<expr><name><name pos:line="413" pos:column="43">Language</name><op:operator pos:line="413" pos:column="51">.</op:operator><name pos:line="413" pos:column="52">Java</name></name></expr>]</index></name><op:operator pos:line="413" pos:column="57">.</op:operator><call><name pos:line="413" pos:column="58">ParseFileUnit</name><argument_list pos:line="413" pos:column="71">(<argument><expr><name pos:line="413" pos:column="72">fileUnitD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="414" pos:column="13">var</name></type> <name pos:line="414" pos:column="17">globalScopeE</name> <init pos:line="414" pos:column="30">= <expr><name><name pos:line="414" pos:column="32">CodeParser</name><index pos:line="414" pos:column="42">[<expr><name><name pos:line="414" pos:column="43">Language</name><op:operator pos:line="414" pos:column="51">.</op:operator><name pos:line="414" pos:column="52">Java</name></name></expr>]</index></name><op:operator pos:line="414" pos:column="57">.</op:operator><call><name pos:line="414" pos:column="58">ParseFileUnit</name><argument_list pos:line="414" pos:column="71">(<argument><expr><name pos:line="414" pos:column="72">fileUnitE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="415" pos:column="13">var</name></type> <name pos:line="415" pos:column="17">globalScopeF</name> <init pos:line="415" pos:column="30">= <expr><name><name pos:line="415" pos:column="32">CodeParser</name><index pos:line="415" pos:column="42">[<expr><name><name pos:line="415" pos:column="43">Language</name><op:operator pos:line="415" pos:column="51">.</op:operator><name pos:line="415" pos:column="52">Java</name></name></expr>]</index></name><op:operator pos:line="415" pos:column="57">.</op:operator><call><name pos:line="415" pos:column="58">ParseFileUnit</name><argument_list pos:line="415" pos:column="71">(<argument><expr><name pos:line="415" pos:column="72">fileUnitF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="416" pos:column="13">var</name></type> <name pos:line="416" pos:column="17">globalScope</name> <init pos:line="416" pos:column="29">= <expr><call><name><name pos:line="416" pos:column="31">globalScopeD</name><op:operator pos:line="416" pos:column="43">.</op:operator><name pos:line="416" pos:column="44">Merge</name></name><argument_list pos:line="416" pos:column="49">(<argument><expr><name pos:line="416" pos:column="50">globalScopeE</name></expr></argument>)</argument_list></call><op:operator pos:line="416" pos:column="63">.</op:operator><call><name pos:line="416" pos:column="64">Merge</name><argument_list pos:line="416" pos:column="69">(<argument><expr><name pos:line="416" pos:column="70">globalScopeF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="418" pos:column="13">Assert</name><op:operator pos:line="418" pos:column="19">.</op:operator><name pos:line="418" pos:column="20">AreEqual</name></name><argument_list pos:line="418" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="418" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="418" pos:column="32">globalScope</name><op:operator pos:line="418" pos:column="43">.</op:operator><name pos:line="418" pos:column="44">ChildStatements</name><op:operator pos:line="418" pos:column="59">.</op:operator><name pos:line="418" pos:column="60">Count</name></name><argument_list pos:line="418" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="420" pos:column="13">var</name></type> <name pos:line="420" pos:column="17">packageA</name> <init pos:line="420" pos:column="26">= <expr><call><name><name pos:line="420" pos:column="28">globalScope</name><op:operator pos:line="420" pos:column="39">.</op:operator><name pos:line="420" pos:column="40">ChildStatements</name><op:operator pos:line="420" pos:column="55">.</op:operator><name pos:line="420" pos:column="56">First</name></name><argument_list pos:line="420" pos:column="61">()</argument_list></call> <op:operator pos:line="420" pos:column="64">as</op:operator> <name pos:line="420" pos:column="67">NamespaceDefinition</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="421" pos:column="13">var</name></type> <name pos:line="421" pos:column="17">packageD</name> <init pos:line="421" pos:column="26">= <expr><call><name><name pos:line="421" pos:column="28">globalScope</name><op:operator pos:line="421" pos:column="39">.</op:operator><name pos:line="421" pos:column="40">ChildStatements</name><op:operator pos:line="421" pos:column="55">.</op:operator><name pos:line="421" pos:column="56">Last</name></name><argument_list pos:line="421" pos:column="60">()</argument_list></call> <op:operator pos:line="421" pos:column="63">as</op:operator> <name pos:line="421" pos:column="66">NamespaceDefinition</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="423" pos:column="13">Assert</name><op:operator pos:line="423" pos:column="19">.</op:operator><name pos:line="423" pos:column="20">AreEqual</name></name><argument_list pos:line="423" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="423" pos:column="29">"A"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="423" pos:column="34">packageA</name><op:operator pos:line="423" pos:column="42">.</op:operator><name pos:line="423" pos:column="43">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="424" pos:column="13">Assert</name><op:operator pos:line="424" pos:column="19">.</op:operator><name pos:line="424" pos:column="20">AreEqual</name></name><argument_list pos:line="424" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="424" pos:column="29">"D"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="424" pos:column="34">packageD</name><op:operator pos:line="424" pos:column="42">.</op:operator><name pos:line="424" pos:column="43">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="426" pos:column="13">var</name></type> <name pos:line="426" pos:column="17">packageAB</name> <init pos:line="426" pos:column="27">= <expr><call><name><name pos:line="426" pos:column="29">packageA</name><op:operator pos:line="426" pos:column="37">.</op:operator><name pos:line="426" pos:column="38">ChildStatements</name><op:operator pos:line="426" pos:column="53">.</op:operator><name pos:line="426" pos:column="54">First</name></name><argument_list pos:line="426" pos:column="59">()</argument_list></call> <op:operator pos:line="426" pos:column="62">as</op:operator> <name pos:line="426" pos:column="65">NamespaceDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="427" pos:column="13">Assert</name><op:operator pos:line="427" pos:column="19">.</op:operator><name pos:line="427" pos:column="20">AreEqual</name></name><argument_list pos:line="427" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="427" pos:column="29">"B"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="427" pos:column="34">packageAB</name><op:operator pos:line="427" pos:column="43">.</op:operator><name pos:line="427" pos:column="44">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="428" pos:column="13">Assert</name><op:operator pos:line="428" pos:column="19">.</op:operator><name pos:line="428" pos:column="20">AreEqual</name></name><argument_list pos:line="428" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="428" pos:column="29">"A.B"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="428" pos:column="36">packageAB</name><op:operator pos:line="428" pos:column="45">.</op:operator><name pos:line="428" pos:column="46">GetFullName</name></name><argument_list pos:line="428" pos:column="57">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="430" pos:column="13">var</name></type> <name pos:line="430" pos:column="17">packageABC</name> <init pos:line="430" pos:column="28">= <expr><call><name><name pos:line="430" pos:column="30">packageAB</name><op:operator pos:line="430" pos:column="39">.</op:operator><name pos:line="430" pos:column="40">ChildStatements</name><op:operator pos:line="430" pos:column="55">.</op:operator><name pos:line="430" pos:column="56">First</name></name><argument_list pos:line="430" pos:column="61">()</argument_list></call> <op:operator pos:line="430" pos:column="64">as</op:operator> <name pos:line="430" pos:column="67">NamespaceDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="431" pos:column="13">Assert</name><op:operator pos:line="431" pos:column="19">.</op:operator><name pos:line="431" pos:column="20">AreEqual</name></name><argument_list pos:line="431" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="431" pos:column="29">"C"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="431" pos:column="34">packageABC</name><op:operator pos:line="431" pos:column="44">.</op:operator><name pos:line="431" pos:column="45">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="433" pos:column="13">Assert</name><op:operator pos:line="433" pos:column="19">.</op:operator><name pos:line="433" pos:column="20">AreEqual</name></name><argument_list pos:line="433" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="433" pos:column="29">"C"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="433" pos:column="34">packageABC</name><op:operator pos:line="433" pos:column="44">.</op:operator><name pos:line="433" pos:column="45">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="434" pos:column="13">Assert</name><op:operator pos:line="434" pos:column="19">.</op:operator><name pos:line="434" pos:column="20">AreEqual</name></name><argument_list pos:line="434" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="434" pos:column="29">"A.B.C"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="434" pos:column="38">packageABC</name><op:operator pos:line="434" pos:column="48">.</op:operator><name pos:line="434" pos:column="49">GetFullName</name></name><argument_list pos:line="434" pos:column="60">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="436" pos:column="13">var</name></type> <name pos:line="436" pos:column="17">typeD</name> <init pos:line="436" pos:column="23">= <expr><call><name><name pos:line="436" pos:column="25">packageABC</name><op:operator pos:line="436" pos:column="35">.</op:operator><name pos:line="436" pos:column="36">ChildStatements</name><op:operator pos:line="436" pos:column="51">.</op:operator><name pos:line="436" pos:column="52">First</name></name><argument_list pos:line="436" pos:column="57">()</argument_list></call> <op:operator pos:line="436" pos:column="60">as</op:operator> <name pos:line="436" pos:column="63">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="437" pos:column="13">var</name></type> <name pos:line="437" pos:column="17">typeE</name> <init pos:line="437" pos:column="23">= <expr><call><name><name pos:line="437" pos:column="25">packageABC</name><op:operator pos:line="437" pos:column="35">.</op:operator><name pos:line="437" pos:column="36">ChildStatements</name><op:operator pos:line="437" pos:column="51">.</op:operator><name pos:line="437" pos:column="52">Last</name></name><argument_list pos:line="437" pos:column="56">()</argument_list></call> <op:operator pos:line="437" pos:column="59">as</op:operator> <name pos:line="437" pos:column="62">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="438" pos:column="13">var</name></type> <name pos:line="438" pos:column="17">typeF</name> <init pos:line="438" pos:column="23">= <expr><call><name><name pos:line="438" pos:column="25">packageD</name><op:operator pos:line="438" pos:column="33">.</op:operator><name pos:line="438" pos:column="34">ChildStatements</name><op:operator pos:line="438" pos:column="49">.</op:operator><name pos:line="438" pos:column="50">First</name></name><argument_list pos:line="438" pos:column="55">()</argument_list></call> <op:operator pos:line="438" pos:column="58">as</op:operator> <name pos:line="438" pos:column="61">TypeDefinition</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="440" pos:column="13">Assert</name><op:operator pos:line="440" pos:column="19">.</op:operator><name pos:line="440" pos:column="20">AreEqual</name></name><argument_list pos:line="440" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="440" pos:column="29">"D"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="440" pos:column="34">typeD</name><op:operator pos:line="440" pos:column="39">.</op:operator><name pos:line="440" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="441" pos:column="13">Assert</name><op:operator pos:line="441" pos:column="19">.</op:operator><name pos:line="441" pos:column="20">AreEqual</name></name><argument_list pos:line="441" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="441" pos:column="29">"E"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="441" pos:column="34">typeE</name><op:operator pos:line="441" pos:column="39">.</op:operator><name pos:line="441" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="442" pos:column="13">Assert</name><op:operator pos:line="442" pos:column="19">.</op:operator><name pos:line="442" pos:column="20">That</name></name><argument_list pos:line="442" pos:column="24">(<argument><expr><name><name pos:line="442" pos:column="25">typeD</name><op:operator pos:line="442" pos:column="30">.</op:operator><name pos:line="442" pos:column="31">ParentStatement</name></name> <op:operator pos:line="442" pos:column="47">==</op:operator> <name><name pos:line="442" pos:column="50">typeE</name><op:operator pos:line="442" pos:column="55">.</op:operator><name pos:line="442" pos:column="56">ParentStatement</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="444" pos:column="13">Assert</name><op:operator pos:line="444" pos:column="19">.</op:operator><name pos:line="444" pos:column="20">That</name></name><argument_list pos:line="444" pos:column="24">(<argument><expr><name><name pos:line="444" pos:column="25">typeD</name><op:operator pos:line="444" pos:column="30">.</op:operator><name pos:line="444" pos:column="31">ParentStatement</name></name> <op:operator pos:line="444" pos:column="47">!=</op:operator> <name><name pos:line="444" pos:column="50">typeF</name><op:operator pos:line="444" pos:column="55">.</op:operator><name pos:line="444" pos:column="56">ParentStatement</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="447" pos:column="9">[<expr><name pos:line="447" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="448" pos:column="9">public</specifier> <name pos:line="448" pos:column="16">void</name></type> <name pos:line="448" pos:column="21">TestMethodDefinitionMerge_DifferentPrefixes</name><parameter_list pos:line="448" pos:column="64">()</parameter_list> <block pos:line="448" pos:column="67">{
            <comment type="line" pos:line="449" pos:column="13">////A.cpp</comment>
            <comment type="line" pos:line="450" pos:column="13">// int A::Foo() { return 0; }</comment>
            <decl_stmt><decl><type><name pos:line="451" pos:column="13">string</name></type> <name pos:line="451" pos:column="20">aCpp</name> <init pos:line="451" pos:column="25">= <expr><lit:literal type="string" pos:line="451" pos:column="27">@"&lt;function&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;&lt;name&gt;A&lt;/name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;return&gt;return &lt;expr&gt;&lt;lit:literal type=""number&gt;0&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt; }&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="452" pos:column="13">var</name></type> <name pos:line="452" pos:column="17">fileUnitA</name> <init pos:line="452" pos:column="27">= <expr><name><name pos:line="452" pos:column="29">FileUnitSetup</name><index pos:line="452" pos:column="42">[<expr><name><name pos:line="452" pos:column="43">Language</name><op:operator pos:line="452" pos:column="51">.</op:operator><name pos:line="452" pos:column="52">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="452" pos:column="62">.</op:operator><call><name pos:line="452" pos:column="63">GetFileUnitForXmlSnippet</name><argument_list pos:line="452" pos:column="87">(<argument><expr><name pos:line="452" pos:column="88">aCpp</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="452" pos:column="94">"A.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="453" pos:column="13">var</name></type> <name pos:line="453" pos:column="17">aScope</name> <init pos:line="453" pos:column="24">= <expr><name><name pos:line="453" pos:column="26">CodeParser</name><index pos:line="453" pos:column="36">[<expr><name><name pos:line="453" pos:column="37">Language</name><op:operator pos:line="453" pos:column="45">.</op:operator><name pos:line="453" pos:column="46">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="453" pos:column="56">.</op:operator><call><name pos:line="453" pos:column="57">ParseFileUnit</name><argument_list pos:line="453" pos:column="70">(<argument><expr><name pos:line="453" pos:column="71">fileUnitA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="455" pos:column="13">////B.cpp</comment>
            <comment type="line" pos:line="456" pos:column="13">// int B::Foo() { return 1; }</comment>
            <decl_stmt><decl><type><name pos:line="457" pos:column="13">string</name></type> <name pos:line="457" pos:column="20">bCpp</name> <init pos:line="457" pos:column="25">= <expr><lit:literal type="string" pos:line="457" pos:column="27">@"&lt;function&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;&lt;name&gt;B&lt;/name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;return&gt;return &lt;expr&gt;&lt;lit:literal type=""number&gt;1&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt; }&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="458" pos:column="13">var</name></type> <name pos:line="458" pos:column="17">fileUnitB</name> <init pos:line="458" pos:column="27">= <expr><name><name pos:line="458" pos:column="29">FileUnitSetup</name><index pos:line="458" pos:column="42">[<expr><name><name pos:line="458" pos:column="43">Language</name><op:operator pos:line="458" pos:column="51">.</op:operator><name pos:line="458" pos:column="52">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="458" pos:column="62">.</op:operator><call><name pos:line="458" pos:column="63">GetFileUnitForXmlSnippet</name><argument_list pos:line="458" pos:column="87">(<argument><expr><name pos:line="458" pos:column="88">bCpp</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="458" pos:column="94">"B.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="459" pos:column="13">var</name></type> <name pos:line="459" pos:column="17">bScope</name> <init pos:line="459" pos:column="24">= <expr><name><name pos:line="459" pos:column="26">CodeParser</name><index pos:line="459" pos:column="36">[<expr><name><name pos:line="459" pos:column="37">Language</name><op:operator pos:line="459" pos:column="45">.</op:operator><name pos:line="459" pos:column="46">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="459" pos:column="56">.</op:operator><call><name pos:line="459" pos:column="57">ParseFileUnit</name><argument_list pos:line="459" pos:column="70">(<argument><expr><name pos:line="459" pos:column="71">fileUnitB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="461" pos:column="13">var</name></type> <name pos:line="461" pos:column="17">globalScope</name> <init pos:line="461" pos:column="29">= <expr><call><name><name pos:line="461" pos:column="31">aScope</name><op:operator pos:line="461" pos:column="37">.</op:operator><name pos:line="461" pos:column="38">Merge</name></name><argument_list pos:line="461" pos:column="43">(<argument><expr><name pos:line="461" pos:column="44">bScope</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="463" pos:column="13">Assert</name><op:operator pos:line="463" pos:column="19">.</op:operator><name pos:line="463" pos:column="20">AreEqual</name></name><argument_list pos:line="463" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="463" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="463" pos:column="32">globalScope</name><op:operator pos:line="463" pos:column="43">.</op:operator><name pos:line="463" pos:column="44">ChildStatements</name><op:operator pos:line="463" pos:column="59">.</op:operator><name pos:line="463" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <function><type><attribute pos:line="465" pos:column="9">[<expr><name pos:line="465" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="466" pos:column="9">public</specifier> <name pos:line="466" pos:column="16">void</name></type> <name pos:line="466" pos:column="21">TestPartialClassMerge_CSharp</name><parameter_list pos:line="466" pos:column="49">()</parameter_list> <block pos:line="466" pos:column="52">{
            <comment type="line" pos:line="467" pos:column="13">////A1.cs</comment>
            <comment type="line" pos:line="468" pos:column="13">//public partial class A {</comment>
            <comment type="line" pos:line="469" pos:column="13">//    public int Execute() {</comment>
            <comment type="line" pos:line="470" pos:column="13">//        return 0;</comment>
            <comment type="line" pos:line="471" pos:column="13">//    }</comment>
            <comment type="line" pos:line="472" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="473" pos:column="13">string</name></type> <name pos:line="473" pos:column="20">a1Xml</name> <init pos:line="473" pos:column="26">= <expr><lit:literal type="string" pos:line="473" pos:column="28">@"&lt;class&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;specifier&gt;partial&lt;/specifier&gt; class &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{
    &lt;function&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Execute&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{
        &lt;return&gt;return &lt;expr&gt;&lt;lit:literal type=""number&gt;0&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt;
    }&lt;/block&gt;&lt;/function&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="478" pos:column="13">var</name></type> <name pos:line="478" pos:column="17">a1FileUnit</name> <init pos:line="478" pos:column="28">= <expr><name><name pos:line="478" pos:column="30">FileUnitSetup</name><index pos:line="478" pos:column="43">[<expr><name><name pos:line="478" pos:column="44">Language</name><op:operator pos:line="478" pos:column="52">.</op:operator><name pos:line="478" pos:column="53">CSharp</name></name></expr>]</index></name><op:operator pos:line="478" pos:column="60">.</op:operator><call><name pos:line="478" pos:column="61">GetFileUnitForXmlSnippet</name><argument_list pos:line="478" pos:column="85">(<argument><expr><name pos:line="478" pos:column="86">a1Xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="478" pos:column="93">"A1.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="479" pos:column="13">var</name></type> <name pos:line="479" pos:column="17">globalScope</name> <init pos:line="479" pos:column="29">= <expr><name><name pos:line="479" pos:column="31">CodeParser</name><index pos:line="479" pos:column="41">[<expr><name><name pos:line="479" pos:column="42">Language</name><op:operator pos:line="479" pos:column="50">.</op:operator><name pos:line="479" pos:column="51">CSharp</name></name></expr>]</index></name><op:operator pos:line="479" pos:column="58">.</op:operator><call><name pos:line="479" pos:column="59">ParseFileUnit</name><argument_list pos:line="479" pos:column="72">(<argument><expr><name pos:line="479" pos:column="73">a1FileUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="480" pos:column="13">////A2.cs</comment>
            <comment type="line" pos:line="481" pos:column="13">//public partial class A {</comment>
            <comment type="line" pos:line="482" pos:column="13">//    private bool Foo() {</comment>
            <comment type="line" pos:line="483" pos:column="13">//        return true;</comment>
            <comment type="line" pos:line="484" pos:column="13">//    }</comment>
            <comment type="line" pos:line="485" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="486" pos:column="13">string</name></type> <name pos:line="486" pos:column="20">a2Xml</name> <init pos:line="486" pos:column="26">= <expr><lit:literal type="string" pos:line="486" pos:column="28">@"&lt;class&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;specifier&gt;partial&lt;/specifier&gt; class &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{
    &lt;function&gt;&lt;type&gt;&lt;specifier&gt;private&lt;/specifier&gt; &lt;name&gt;bool&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{
        &lt;return&gt;return &lt;expr&gt;&lt;lit:literal type=""boolean&gt;true&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt;
    }&lt;/block&gt;&lt;/function&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="491" pos:column="13">var</name></type> <name pos:line="491" pos:column="17">a2FileUnit</name> <init pos:line="491" pos:column="28">= <expr><name><name pos:line="491" pos:column="30">FileUnitSetup</name><index pos:line="491" pos:column="43">[<expr><name><name pos:line="491" pos:column="44">Language</name><op:operator pos:line="491" pos:column="52">.</op:operator><name pos:line="491" pos:column="53">CSharp</name></name></expr>]</index></name><op:operator pos:line="491" pos:column="60">.</op:operator><call><name pos:line="491" pos:column="61">GetFileUnitForXmlSnippet</name><argument_list pos:line="491" pos:column="85">(<argument><expr><name pos:line="491" pos:column="86">a2Xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="491" pos:column="93">"A2.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="492" pos:column="13">globalScope</name> <op:operator pos:line="492" pos:column="25">=</op:operator> <call><name><name pos:line="492" pos:column="27">globalScope</name><op:operator pos:line="492" pos:column="38">.</op:operator><name pos:line="492" pos:column="39">Merge</name></name><argument_list pos:line="492" pos:column="44">(<argument><expr><name><name pos:line="492" pos:column="45">CodeParser</name><index pos:line="492" pos:column="55">[<expr><name><name pos:line="492" pos:column="56">Language</name><op:operator pos:line="492" pos:column="64">.</op:operator><name pos:line="492" pos:column="65">CSharp</name></name></expr>]</index></name><op:operator pos:line="492" pos:column="72">.</op:operator><call><name pos:line="492" pos:column="73">ParseFileUnit</name><argument_list pos:line="492" pos:column="86">(<argument><expr><name pos:line="492" pos:column="87">a2FileUnit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="494" pos:column="13">Assert</name><op:operator pos:line="494" pos:column="19">.</op:operator><name pos:line="494" pos:column="20">AreEqual</name></name><argument_list pos:line="494" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="494" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="494" pos:column="32">globalScope</name><op:operator pos:line="494" pos:column="43">.</op:operator><name pos:line="494" pos:column="44">ChildStatements</name><op:operator pos:line="494" pos:column="59">.</op:operator><name pos:line="494" pos:column="60">Count</name></name><argument_list pos:line="494" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="495" pos:column="13">var</name></type> <name pos:line="495" pos:column="17">typeA</name> <init pos:line="495" pos:column="23">= <expr><call><name><name pos:line="495" pos:column="25">globalScope</name><op:operator pos:line="495" pos:column="36">.</op:operator><name pos:line="495" pos:column="37">ChildStatements</name><op:operator pos:line="495" pos:column="52">.</op:operator><name pos:line="495" pos:column="53">First</name></name><argument_list pos:line="495" pos:column="58">()</argument_list></call> <op:operator pos:line="495" pos:column="61">as</op:operator> <name pos:line="495" pos:column="64">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="496" pos:column="13">Assert</name><op:operator pos:line="496" pos:column="19">.</op:operator><name pos:line="496" pos:column="20">IsNotNull</name></name><argument_list pos:line="496" pos:column="29">(<argument><expr><name pos:line="496" pos:column="30">typeA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="497" pos:column="13">Assert</name><op:operator pos:line="497" pos:column="19">.</op:operator><name pos:line="497" pos:column="20">AreEqual</name></name><argument_list pos:line="497" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="497" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="497" pos:column="32">typeA</name><op:operator pos:line="497" pos:column="37">.</op:operator><name pos:line="497" pos:column="38">ChildStatements</name><op:operator pos:line="497" pos:column="53">.</op:operator><name><name pos:line="497" pos:column="54">OfType</name><argument_list pos:line="497" pos:column="60">&lt;<argument><name pos:line="497" pos:column="61">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="497" pos:column="78">()</argument_list></call><op:operator pos:line="497" pos:column="80">.</op:operator><call><name pos:line="497" pos:column="81">Count</name><argument_list pos:line="497" pos:column="86">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="498" pos:column="13">Assert</name><op:operator pos:line="498" pos:column="19">.</op:operator><name pos:line="498" pos:column="20">IsTrue</name></name><argument_list pos:line="498" pos:column="26">(<argument><expr><call><name><name pos:line="498" pos:column="27">typeA</name><op:operator pos:line="498" pos:column="32">.</op:operator><name pos:line="498" pos:column="33">ChildStatements</name><op:operator pos:line="498" pos:column="48">.</op:operator><name><name pos:line="498" pos:column="49">OfType</name><argument_list pos:line="498" pos:column="55">&lt;<argument><name pos:line="498" pos:column="56">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="498" pos:column="73">()</argument_list></call><op:operator pos:line="498" pos:column="75">.</op:operator><call><name pos:line="498" pos:column="76">Any</name><argument_list pos:line="498" pos:column="79">(<argument><expr><lambda><name pos:line="498" pos:column="80">m</name> <op:operator pos:line="498" pos:column="82">=&gt;</op:operator> <name><name pos:line="498" pos:column="85">m</name><op:operator pos:line="498" pos:column="86">.</op:operator><name pos:line="498" pos:column="87">Name</name></name> <op:operator pos:line="498" pos:column="92">==</op:operator> <lit:literal type="string" pos:line="498" pos:column="95">"Execute"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="499" pos:column="13">Assert</name><op:operator pos:line="499" pos:column="19">.</op:operator><name pos:line="499" pos:column="20">IsTrue</name></name><argument_list pos:line="499" pos:column="26">(<argument><expr><call><name><name pos:line="499" pos:column="27">typeA</name><op:operator pos:line="499" pos:column="32">.</op:operator><name pos:line="499" pos:column="33">ChildStatements</name><op:operator pos:line="499" pos:column="48">.</op:operator><name><name pos:line="499" pos:column="49">OfType</name><argument_list pos:line="499" pos:column="55">&lt;<argument><name pos:line="499" pos:column="56">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="499" pos:column="73">()</argument_list></call><op:operator pos:line="499" pos:column="75">.</op:operator><call><name pos:line="499" pos:column="76">Any</name><argument_list pos:line="499" pos:column="79">(<argument><expr><lambda><name pos:line="499" pos:column="80">m</name> <op:operator pos:line="499" pos:column="82">=&gt;</op:operator> <name><name pos:line="499" pos:column="85">m</name><op:operator pos:line="499" pos:column="86">.</op:operator><name pos:line="499" pos:column="87">Name</name></name> <op:operator pos:line="499" pos:column="92">==</op:operator> <lit:literal type="string" pos:line="499" pos:column="95">"Foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="502" pos:column="9">[<expr><name pos:line="502" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="503" pos:column="9">public</specifier> <name pos:line="503" pos:column="16">void</name></type> <name pos:line="503" pos:column="21">TestPartialMethodMerge_CSharp</name><parameter_list pos:line="503" pos:column="50">()</parameter_list> <block pos:line="503" pos:column="53">{
            <comment type="line" pos:line="504" pos:column="13">////A1.cs</comment>
            <comment type="line" pos:line="505" pos:column="13">//public partial class A {</comment>
            <comment type="line" pos:line="506" pos:column="13">//    public partial int Foo();</comment>
            <comment type="line" pos:line="507" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="508" pos:column="13">string</name></type> <name pos:line="508" pos:column="20">a1Xml</name> <init pos:line="508" pos:column="26">= <expr><lit:literal type="string" pos:line="508" pos:column="28">@"&lt;class&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;specifier&gt;partial&lt;/specifier&gt; class &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{
    &lt;function_decl&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;specifier&gt;partial&lt;/specifier&gt; &lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt;;&lt;/function_decl&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="511" pos:column="13">var</name></type> <name pos:line="511" pos:column="17">a1FileUnit</name> <init pos:line="511" pos:column="28">= <expr><name><name pos:line="511" pos:column="30">FileUnitSetup</name><index pos:line="511" pos:column="43">[<expr><name><name pos:line="511" pos:column="44">Language</name><op:operator pos:line="511" pos:column="52">.</op:operator><name pos:line="511" pos:column="53">CSharp</name></name></expr>]</index></name><op:operator pos:line="511" pos:column="60">.</op:operator><call><name pos:line="511" pos:column="61">GetFileUnitForXmlSnippet</name><argument_list pos:line="511" pos:column="85">(<argument><expr><name pos:line="511" pos:column="86">a1Xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="511" pos:column="93">"A1.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="512" pos:column="13">var</name></type> <name pos:line="512" pos:column="17">globalScope</name> <init pos:line="512" pos:column="29">= <expr><name><name pos:line="512" pos:column="31">CodeParser</name><index pos:line="512" pos:column="41">[<expr><name><name pos:line="512" pos:column="42">Language</name><op:operator pos:line="512" pos:column="50">.</op:operator><name pos:line="512" pos:column="51">CSharp</name></name></expr>]</index></name><op:operator pos:line="512" pos:column="58">.</op:operator><call><name pos:line="512" pos:column="59">ParseFileUnit</name><argument_list pos:line="512" pos:column="72">(<argument><expr><name pos:line="512" pos:column="73">a1FileUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="513" pos:column="13">////A2.cs</comment>
            <comment type="line" pos:line="514" pos:column="13">//public partial class A {</comment>
            <comment type="line" pos:line="515" pos:column="13">//    public partial int Foo() { return 42; }</comment>
            <comment type="line" pos:line="516" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="517" pos:column="13">string</name></type> <name pos:line="517" pos:column="20">a2Xml</name> <init pos:line="517" pos:column="26">= <expr><lit:literal type="string" pos:line="517" pos:column="28">@"&lt;class&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;specifier&gt;partial&lt;/specifier&gt; class &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{
    &lt;function&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;specifier&gt;partial&lt;/specifier&gt; &lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;return&gt;return &lt;expr&gt;&lt;lit:literal type=""number&gt;42&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt; }&lt;/block&gt;&lt;/function&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="520" pos:column="13">var</name></type> <name pos:line="520" pos:column="17">a2FileUnit</name> <init pos:line="520" pos:column="28">= <expr><name><name pos:line="520" pos:column="30">FileUnitSetup</name><index pos:line="520" pos:column="43">[<expr><name><name pos:line="520" pos:column="44">Language</name><op:operator pos:line="520" pos:column="52">.</op:operator><name pos:line="520" pos:column="53">CSharp</name></name></expr>]</index></name><op:operator pos:line="520" pos:column="60">.</op:operator><call><name pos:line="520" pos:column="61">GetFileUnitForXmlSnippet</name><argument_list pos:line="520" pos:column="85">(<argument><expr><name pos:line="520" pos:column="86">a2Xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="520" pos:column="93">"A2.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="521" pos:column="13">globalScope</name> <op:operator pos:line="521" pos:column="25">=</op:operator> <call><name><name pos:line="521" pos:column="27">globalScope</name><op:operator pos:line="521" pos:column="38">.</op:operator><name pos:line="521" pos:column="39">Merge</name></name><argument_list pos:line="521" pos:column="44">(<argument><expr><name><name pos:line="521" pos:column="45">CodeParser</name><index pos:line="521" pos:column="55">[<expr><name><name pos:line="521" pos:column="56">Language</name><op:operator pos:line="521" pos:column="64">.</op:operator><name pos:line="521" pos:column="65">CSharp</name></name></expr>]</index></name><op:operator pos:line="521" pos:column="72">.</op:operator><call><name pos:line="521" pos:column="73">ParseFileUnit</name><argument_list pos:line="521" pos:column="86">(<argument><expr><name pos:line="521" pos:column="87">a2FileUnit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="523" pos:column="13">Assert</name><op:operator pos:line="523" pos:column="19">.</op:operator><name pos:line="523" pos:column="20">AreEqual</name></name><argument_list pos:line="523" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="523" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="523" pos:column="32">globalScope</name><op:operator pos:line="523" pos:column="43">.</op:operator><name pos:line="523" pos:column="44">ChildStatements</name><op:operator pos:line="523" pos:column="59">.</op:operator><name pos:line="523" pos:column="60">Count</name></name><argument_list pos:line="523" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="524" pos:column="13">var</name></type> <name pos:line="524" pos:column="17">typeA</name> <init pos:line="524" pos:column="23">= <expr><call><name><name pos:line="524" pos:column="25">globalScope</name><op:operator pos:line="524" pos:column="36">.</op:operator><name pos:line="524" pos:column="37">ChildStatements</name><op:operator pos:line="524" pos:column="52">.</op:operator><name pos:line="524" pos:column="53">First</name></name><argument_list pos:line="524" pos:column="58">()</argument_list></call> <op:operator pos:line="524" pos:column="61">as</op:operator> <name pos:line="524" pos:column="64">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="525" pos:column="13">Assert</name><op:operator pos:line="525" pos:column="19">.</op:operator><name pos:line="525" pos:column="20">IsNotNull</name></name><argument_list pos:line="525" pos:column="29">(<argument><expr><name pos:line="525" pos:column="30">typeA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="526" pos:column="13">Assert</name><op:operator pos:line="526" pos:column="19">.</op:operator><name pos:line="526" pos:column="20">AreEqual</name></name><argument_list pos:line="526" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="526" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="526" pos:column="32">typeA</name><op:operator pos:line="526" pos:column="37">.</op:operator><name pos:line="526" pos:column="38">ChildStatements</name><op:operator pos:line="526" pos:column="53">.</op:operator><name><name pos:line="526" pos:column="54">OfType</name><argument_list pos:line="526" pos:column="60">&lt;<argument><name pos:line="526" pos:column="61">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="526" pos:column="78">()</argument_list></call><op:operator pos:line="526" pos:column="80">.</op:operator><call><name pos:line="526" pos:column="81">Count</name><argument_list pos:line="526" pos:column="86">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="527" pos:column="13">var</name></type> <name pos:line="527" pos:column="17">foo</name> <init pos:line="527" pos:column="21">= <expr><call><name><name pos:line="527" pos:column="23">typeA</name><op:operator pos:line="527" pos:column="28">.</op:operator><name pos:line="527" pos:column="29">ChildStatements</name><op:operator pos:line="527" pos:column="44">.</op:operator><name pos:line="527" pos:column="45">First</name></name><argument_list pos:line="527" pos:column="50">()</argument_list></call> <op:operator pos:line="527" pos:column="53">as</op:operator> <name pos:line="527" pos:column="56">MethodDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="528" pos:column="13">Assert</name><op:operator pos:line="528" pos:column="19">.</op:operator><name pos:line="528" pos:column="20">IsNotNull</name></name><argument_list pos:line="528" pos:column="29">(<argument><expr><name pos:line="528" pos:column="30">foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="529" pos:column="13">Assert</name><op:operator pos:line="529" pos:column="19">.</op:operator><name pos:line="529" pos:column="20">AreEqual</name></name><argument_list pos:line="529" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="529" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="529" pos:column="36">foo</name><op:operator pos:line="529" pos:column="39">.</op:operator><name pos:line="529" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="532" pos:column="9">[<expr><name pos:line="532" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="533" pos:column="9">public</specifier> <name pos:line="533" pos:column="16">void</name></type> <name pos:line="533" pos:column="21">TestUnresolvedParentMerge_ClassEncounteredFirst_Cpp</name><parameter_list pos:line="533" pos:column="72">()</parameter_list> <block pos:line="533" pos:column="75">{
            <comment type="line" pos:line="534" pos:column="13">// # A.cpp int A::Foo() { return 0; }</comment>
            <comment type="line" pos:line="535" pos:column="13">//</comment>
            <comment type="line" pos:line="536" pos:column="13">// int A::Bar() { return 0; }</comment>
            <decl_stmt><decl><type><name pos:line="537" pos:column="13">string</name></type> <name pos:line="537" pos:column="20">xmlcpp</name> <init pos:line="537" pos:column="27">= <expr><lit:literal type="string" pos:line="537" pos:column="29">@"&lt;function&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;&lt;name&gt;A&lt;/name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{
     &lt;return&gt;return &lt;expr&gt;&lt;lit:literal type=""number&gt;0&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt;
}&lt;/block&gt;&lt;/function&gt;

&lt;function&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;&lt;name&gt;A&lt;/name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;&lt;name&gt;Bar&lt;/name&gt;&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{
     &lt;return&gt;return &lt;expr&gt;&lt;lit:literal type=""number&gt;0&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt;
}&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="545" pos:column="13">// # A.h class A { };</comment>
            <decl_stmt><decl><type><name pos:line="546" pos:column="13">string</name></type> <name pos:line="546" pos:column="20">xmlh</name> <init pos:line="546" pos:column="25">= <expr><lit:literal type="string" pos:line="546" pos:column="27">@"&lt;class&gt;class &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{&lt;private type=""default&gt;
&lt;/private&gt;}&lt;/block&gt;;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="549" pos:column="13">var</name></type> <name pos:line="549" pos:column="17">xmlImpl</name> <init pos:line="549" pos:column="25">= <expr><name><name pos:line="549" pos:column="27">FileUnitSetup</name><index pos:line="549" pos:column="40">[<expr><name><name pos:line="549" pos:column="41">Language</name><op:operator pos:line="549" pos:column="49">.</op:operator><name pos:line="549" pos:column="50">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="549" pos:column="60">.</op:operator><call><name pos:line="549" pos:column="61">GetFileUnitForXmlSnippet</name><argument_list pos:line="549" pos:column="85">(<argument><expr><name pos:line="549" pos:column="86">xmlcpp</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="549" pos:column="94">"A.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="550" pos:column="13">var</name></type> <name pos:line="550" pos:column="17">xmlHeader</name> <init pos:line="550" pos:column="27">= <expr><name><name pos:line="550" pos:column="29">FileUnitSetup</name><index pos:line="550" pos:column="42">[<expr><name><name pos:line="550" pos:column="43">Language</name><op:operator pos:line="550" pos:column="51">.</op:operator><name pos:line="550" pos:column="52">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="550" pos:column="62">.</op:operator><call><name pos:line="550" pos:column="63">GetFileUnitForXmlSnippet</name><argument_list pos:line="550" pos:column="87">(<argument><expr><name pos:line="550" pos:column="88">xmlh</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="550" pos:column="94">"A.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="552" pos:column="13">var</name></type> <name pos:line="552" pos:column="17">globalScope</name> <init pos:line="552" pos:column="29">= <expr><name><name pos:line="552" pos:column="31">CodeParser</name><index pos:line="552" pos:column="41">[<expr><name><name pos:line="552" pos:column="42">Language</name><op:operator pos:line="552" pos:column="50">.</op:operator><name pos:line="552" pos:column="51">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="552" pos:column="61">.</op:operator><call><name pos:line="552" pos:column="62">ParseFileUnit</name><argument_list pos:line="552" pos:column="75">(<argument><expr><name pos:line="552" pos:column="76">xmlHeader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="553" pos:column="13">Assert</name><op:operator pos:line="553" pos:column="19">.</op:operator><name pos:line="553" pos:column="20">AreEqual</name></name><argument_list pos:line="553" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="553" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="553" pos:column="32">globalScope</name><op:operator pos:line="553" pos:column="43">.</op:operator><name pos:line="553" pos:column="44">ChildStatements</name><op:operator pos:line="553" pos:column="59">.</op:operator><name pos:line="553" pos:column="60">Count</name></name><argument_list pos:line="553" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="555" pos:column="13">var</name></type> <name pos:line="555" pos:column="17">typeA</name> <init pos:line="555" pos:column="23">= <expr><call><name><name pos:line="555" pos:column="25">globalScope</name><op:operator pos:line="555" pos:column="36">.</op:operator><name pos:line="555" pos:column="37">ChildStatements</name><op:operator pos:line="555" pos:column="52">.</op:operator><name pos:line="555" pos:column="53">First</name></name><argument_list pos:line="555" pos:column="58">()</argument_list></call> <op:operator pos:line="555" pos:column="61">as</op:operator> <name pos:line="555" pos:column="64">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="556" pos:column="13">Assert</name><op:operator pos:line="556" pos:column="19">.</op:operator><name pos:line="556" pos:column="20">AreEqual</name></name><argument_list pos:line="556" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="556" pos:column="29">"A"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="556" pos:column="34">typeA</name><op:operator pos:line="556" pos:column="39">.</op:operator><name pos:line="556" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="557" pos:column="13">Assert</name><op:operator pos:line="557" pos:column="19">.</op:operator><name pos:line="557" pos:column="20">AreEqual</name></name><argument_list pos:line="557" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="557" pos:column="29">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="557" pos:column="32">typeA</name><op:operator pos:line="557" pos:column="37">.</op:operator><name pos:line="557" pos:column="38">ChildStatements</name><op:operator pos:line="557" pos:column="53">.</op:operator><name pos:line="557" pos:column="54">Count</name></name><argument_list pos:line="557" pos:column="59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="559" pos:column="13">globalScope</name> <op:operator pos:line="559" pos:column="25">=</op:operator> <call><name><name pos:line="559" pos:column="27">globalScope</name><op:operator pos:line="559" pos:column="38">.</op:operator><name pos:line="559" pos:column="39">Merge</name></name><argument_list pos:line="559" pos:column="44">(<argument><expr><name><name pos:line="559" pos:column="45">CodeParser</name><index pos:line="559" pos:column="55">[<expr><name><name pos:line="559" pos:column="56">Language</name><op:operator pos:line="559" pos:column="64">.</op:operator><name pos:line="559" pos:column="65">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="559" pos:column="75">.</op:operator><call><name pos:line="559" pos:column="76">ParseFileUnit</name><argument_list pos:line="559" pos:column="89">(<argument><expr><name pos:line="559" pos:column="90">xmlImpl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="560" pos:column="13">Assert</name><op:operator pos:line="560" pos:column="19">.</op:operator><name pos:line="560" pos:column="20">AreEqual</name></name><argument_list pos:line="560" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="560" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="560" pos:column="32">globalScope</name><op:operator pos:line="560" pos:column="43">.</op:operator><name pos:line="560" pos:column="44">ChildStatements</name><op:operator pos:line="560" pos:column="59">.</op:operator><name pos:line="560" pos:column="60">Count</name></name><argument_list pos:line="560" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="562" pos:column="13">typeA</name> <op:operator pos:line="562" pos:column="19">=</op:operator> <call><name><name pos:line="562" pos:column="21">globalScope</name><op:operator pos:line="562" pos:column="32">.</op:operator><name pos:line="562" pos:column="33">ChildStatements</name><op:operator pos:line="562" pos:column="48">.</op:operator><name pos:line="562" pos:column="49">First</name></name><argument_list pos:line="562" pos:column="54">()</argument_list></call> <op:operator pos:line="562" pos:column="57">as</op:operator> <name pos:line="562" pos:column="60">TypeDefinition</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="563" pos:column="13">Assert</name><op:operator pos:line="563" pos:column="19">.</op:operator><name pos:line="563" pos:column="20">AreEqual</name></name><argument_list pos:line="563" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="563" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="563" pos:column="32">typeA</name><op:operator pos:line="563" pos:column="37">.</op:operator><name pos:line="563" pos:column="38">ChildStatements</name><op:operator pos:line="563" pos:column="53">.</op:operator><name pos:line="563" pos:column="54">Count</name></name><argument_list pos:line="563" pos:column="59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="565" pos:column="13">var</name></type> <name pos:line="565" pos:column="17">aDotFoo</name> <init pos:line="565" pos:column="25">= <expr><call><name><name pos:line="565" pos:column="27">typeA</name><op:operator pos:line="565" pos:column="32">.</op:operator><name pos:line="565" pos:column="33">ChildStatements</name><op:operator pos:line="565" pos:column="48">.</op:operator><name pos:line="565" pos:column="49">First</name></name><argument_list pos:line="565" pos:column="54">()</argument_list></call> <op:operator pos:line="565" pos:column="57">as</op:operator> <name pos:line="565" pos:column="60">MethodDefinition</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="566" pos:column="13">var</name></type> <name pos:line="566" pos:column="17">aDotBar</name> <init pos:line="566" pos:column="25">= <expr><call><name><name pos:line="566" pos:column="27">typeA</name><op:operator pos:line="566" pos:column="32">.</op:operator><name pos:line="566" pos:column="33">ChildStatements</name><op:operator pos:line="566" pos:column="48">.</op:operator><name pos:line="566" pos:column="49">Last</name></name><argument_list pos:line="566" pos:column="53">()</argument_list></call> <op:operator pos:line="566" pos:column="56">as</op:operator> <name pos:line="566" pos:column="59">MethodDefinition</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="568" pos:column="13">Assert</name><op:operator pos:line="568" pos:column="19">.</op:operator><name pos:line="568" pos:column="20">AreEqual</name></name><argument_list pos:line="568" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="568" pos:column="29">"A.Foo"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="568" pos:column="38">aDotFoo</name><op:operator pos:line="568" pos:column="45">.</op:operator><name pos:line="568" pos:column="46">GetFullName</name></name><argument_list pos:line="568" pos:column="57">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="569" pos:column="13">Assert</name><op:operator pos:line="569" pos:column="19">.</op:operator><name pos:line="569" pos:column="20">AreEqual</name></name><argument_list pos:line="569" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="569" pos:column="29">"A.Bar"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="569" pos:column="38">aDotBar</name><op:operator pos:line="569" pos:column="45">.</op:operator><name pos:line="569" pos:column="46">GetFullName</name></name><argument_list pos:line="569" pos:column="57">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="571" pos:column="13">Assert</name><op:operator pos:line="571" pos:column="19">.</op:operator><name pos:line="571" pos:column="20">AreSame</name></name><argument_list pos:line="571" pos:column="27">(<argument><expr><name pos:line="571" pos:column="28">typeA</name></expr></argument>, <argument><expr><name><name pos:line="571" pos:column="35">aDotFoo</name><op:operator pos:line="571" pos:column="42">.</op:operator><name pos:line="571" pos:column="43">ParentStatement</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="572" pos:column="13">Assert</name><op:operator pos:line="572" pos:column="19">.</op:operator><name pos:line="572" pos:column="20">AreSame</name></name><argument_list pos:line="572" pos:column="27">(<argument><expr><name pos:line="572" pos:column="28">typeA</name></expr></argument>, <argument><expr><name><name pos:line="572" pos:column="35">aDotFoo</name><op:operator pos:line="572" pos:column="42">.</op:operator><name pos:line="572" pos:column="43">ParentStatement</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="573" pos:column="13">Assert</name><op:operator pos:line="573" pos:column="19">.</op:operator><name pos:line="573" pos:column="20">AreSame</name></name><argument_list pos:line="573" pos:column="27">(<argument><expr><name pos:line="573" pos:column="28">globalScope</name></expr></argument>, <argument><expr><name><name pos:line="573" pos:column="41">typeA</name><op:operator pos:line="573" pos:column="46">.</op:operator><name pos:line="573" pos:column="47">ParentStatement</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="575" pos:column="13">Assert</name><op:operator pos:line="575" pos:column="19">.</op:operator><name pos:line="575" pos:column="20">AreEqual</name></name><argument_list pos:line="575" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="575" pos:column="29">"A.h"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="575" pos:column="36">typeA</name><op:operator pos:line="575" pos:column="41">.</op:operator><name pos:line="575" pos:column="42">PrimaryLocation</name><op:operator pos:line="575" pos:column="57">.</op:operator><name pos:line="575" pos:column="58">SourceFileName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="578" pos:column="9">[<expr><name pos:line="578" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="579" pos:column="9">public</specifier> <name pos:line="579" pos:column="16">void</name></type> <name pos:line="579" pos:column="21">TestUnresolvedParentMerge_MethodsEncounteredFirst_Cpp</name><parameter_list pos:line="579" pos:column="74">()</parameter_list> <block pos:line="579" pos:column="77">{
            <comment type="line" pos:line="580" pos:column="13">// # A.cpp int A::Foo() { return 0; }</comment>
            <comment type="line" pos:line="581" pos:column="13">//</comment>
            <comment type="line" pos:line="582" pos:column="13">// int A::Bar() { return 0; }</comment>
            <decl_stmt><decl><type><name pos:line="583" pos:column="13">string</name></type> <name pos:line="583" pos:column="20">xmlcpp</name> <init pos:line="583" pos:column="27">= <expr><lit:literal type="string" pos:line="583" pos:column="29">@"&lt;function&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;&lt;name&gt;A&lt;/name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{
     &lt;return&gt;return &lt;expr&gt;&lt;lit:literal type=""number&gt;0&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt;
}&lt;/block&gt;&lt;/function&gt;

&lt;function&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;&lt;name&gt;A&lt;/name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;&lt;name&gt;Bar&lt;/name&gt;&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{
     &lt;return&gt;return &lt;expr&gt;&lt;lit:literal type=""number&gt;0&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt;
}&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="591" pos:column="13">// # A.h class A { };</comment>
            <decl_stmt><decl><type><name pos:line="592" pos:column="13">string</name></type> <name pos:line="592" pos:column="20">xmlh</name> <init pos:line="592" pos:column="25">= <expr><lit:literal type="string" pos:line="592" pos:column="27">@"&lt;class&gt;class &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{&lt;private type=""default&gt;
&lt;/private&gt;}&lt;/block&gt;;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="595" pos:column="13">var</name></type> <name pos:line="595" pos:column="17">xmlImpl</name> <init pos:line="595" pos:column="25">= <expr><name><name pos:line="595" pos:column="27">FileUnitSetup</name><index pos:line="595" pos:column="40">[<expr><name><name pos:line="595" pos:column="41">Language</name><op:operator pos:line="595" pos:column="49">.</op:operator><name pos:line="595" pos:column="50">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="595" pos:column="60">.</op:operator><call><name pos:line="595" pos:column="61">GetFileUnitForXmlSnippet</name><argument_list pos:line="595" pos:column="85">(<argument><expr><name pos:line="595" pos:column="86">xmlcpp</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="595" pos:column="94">"A.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="596" pos:column="13">var</name></type> <name pos:line="596" pos:column="17">xmlHeader</name> <init pos:line="596" pos:column="27">= <expr><name><name pos:line="596" pos:column="29">FileUnitSetup</name><index pos:line="596" pos:column="42">[<expr><name><name pos:line="596" pos:column="43">Language</name><op:operator pos:line="596" pos:column="51">.</op:operator><name pos:line="596" pos:column="52">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="596" pos:column="62">.</op:operator><call><name pos:line="596" pos:column="63">GetFileUnitForXmlSnippet</name><argument_list pos:line="596" pos:column="87">(<argument><expr><name pos:line="596" pos:column="88">xmlh</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="596" pos:column="94">"A.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="598" pos:column="13">var</name></type> <name pos:line="598" pos:column="17">globalScope</name> <init pos:line="598" pos:column="29">= <expr><name><name pos:line="598" pos:column="31">CodeParser</name><index pos:line="598" pos:column="41">[<expr><name><name pos:line="598" pos:column="42">Language</name><op:operator pos:line="598" pos:column="50">.</op:operator><name pos:line="598" pos:column="51">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="598" pos:column="61">.</op:operator><call><name pos:line="598" pos:column="62">ParseFileUnit</name><argument_list pos:line="598" pos:column="75">(<argument><expr><name pos:line="598" pos:column="76">xmlImpl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="599" pos:column="13">Assert</name><op:operator pos:line="599" pos:column="19">.</op:operator><name pos:line="599" pos:column="20">AreEqual</name></name><argument_list pos:line="599" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="599" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="599" pos:column="32">globalScope</name><op:operator pos:line="599" pos:column="43">.</op:operator><name pos:line="599" pos:column="44">ChildStatements</name><op:operator pos:line="599" pos:column="59">.</op:operator><name pos:line="599" pos:column="60">Count</name></name><argument_list pos:line="599" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="601" pos:column="13">var</name></type> <name pos:line="601" pos:column="17">methodFoo</name> <init pos:line="601" pos:column="27">= <expr><call><name><name pos:line="601" pos:column="29">globalScope</name><op:operator pos:line="601" pos:column="40">.</op:operator><name pos:line="601" pos:column="41">ChildStatements</name><op:operator pos:line="601" pos:column="56">.</op:operator><name pos:line="601" pos:column="57">First</name></name><argument_list pos:line="601" pos:column="62">()</argument_list></call> <op:operator pos:line="601" pos:column="65">as</op:operator> <name pos:line="601" pos:column="68">MethodDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="602" pos:column="13">Assert</name><op:operator pos:line="602" pos:column="19">.</op:operator><name pos:line="602" pos:column="20">AreEqual</name></name><argument_list pos:line="602" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="602" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="602" pos:column="36">methodFoo</name><op:operator pos:line="602" pos:column="45">.</op:operator><name pos:line="602" pos:column="46">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="603" pos:column="13">Assert</name><op:operator pos:line="603" pos:column="19">.</op:operator><name pos:line="603" pos:column="20">AreEqual</name></name><argument_list pos:line="603" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="603" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="603" pos:column="32">methodFoo</name><op:operator pos:line="603" pos:column="41">.</op:operator><name pos:line="603" pos:column="42">ChildStatements</name><op:operator pos:line="603" pos:column="57">.</op:operator><name pos:line="603" pos:column="58">Count</name></name><argument_list pos:line="603" pos:column="63">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="605" pos:column="13">var</name></type> <name pos:line="605" pos:column="17">methodBar</name> <init pos:line="605" pos:column="27">= <expr><call><name><name pos:line="605" pos:column="29">globalScope</name><op:operator pos:line="605" pos:column="40">.</op:operator><name pos:line="605" pos:column="41">ChildStatements</name><op:operator pos:line="605" pos:column="56">.</op:operator><name pos:line="605" pos:column="57">Last</name></name><argument_list pos:line="605" pos:column="61">()</argument_list></call> <op:operator pos:line="605" pos:column="64">as</op:operator> <name pos:line="605" pos:column="67">MethodDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="606" pos:column="13">Assert</name><op:operator pos:line="606" pos:column="19">.</op:operator><name pos:line="606" pos:column="20">AreEqual</name></name><argument_list pos:line="606" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="606" pos:column="29">"Bar"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="606" pos:column="36">methodBar</name><op:operator pos:line="606" pos:column="45">.</op:operator><name pos:line="606" pos:column="46">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="607" pos:column="13">Assert</name><op:operator pos:line="607" pos:column="19">.</op:operator><name pos:line="607" pos:column="20">AreEqual</name></name><argument_list pos:line="607" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="607" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="607" pos:column="32">methodBar</name><op:operator pos:line="607" pos:column="41">.</op:operator><name pos:line="607" pos:column="42">ChildStatements</name><op:operator pos:line="607" pos:column="57">.</op:operator><name pos:line="607" pos:column="58">Count</name></name><argument_list pos:line="607" pos:column="63">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="609" pos:column="13">Assert</name><op:operator pos:line="609" pos:column="19">.</op:operator><name pos:line="609" pos:column="20">AreEqual</name></name><argument_list pos:line="609" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="609" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="609" pos:column="36">methodFoo</name><op:operator pos:line="609" pos:column="45">.</op:operator><name pos:line="609" pos:column="46">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="610" pos:column="13">Assert</name><op:operator pos:line="610" pos:column="19">.</op:operator><name pos:line="610" pos:column="20">AreEqual</name></name><argument_list pos:line="610" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="610" pos:column="29">"A.Foo"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="610" pos:column="38">methodFoo</name><op:operator pos:line="610" pos:column="47">.</op:operator><name pos:line="610" pos:column="48">GetFullName</name></name><argument_list pos:line="610" pos:column="59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="611" pos:column="13">Assert</name><op:operator pos:line="611" pos:column="19">.</op:operator><name pos:line="611" pos:column="20">AreEqual</name></name><argument_list pos:line="611" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="611" pos:column="29">"Bar"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="611" pos:column="36">methodBar</name><op:operator pos:line="611" pos:column="45">.</op:operator><name pos:line="611" pos:column="46">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="612" pos:column="13">Assert</name><op:operator pos:line="612" pos:column="19">.</op:operator><name pos:line="612" pos:column="20">AreEqual</name></name><argument_list pos:line="612" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="612" pos:column="29">"A.Bar"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="612" pos:column="38">methodBar</name><op:operator pos:line="612" pos:column="47">.</op:operator><name pos:line="612" pos:column="48">GetFullName</name></name><argument_list pos:line="612" pos:column="59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="614" pos:column="13">globalScope</name> <op:operator pos:line="614" pos:column="25">=</op:operator> <call><name><name pos:line="614" pos:column="27">globalScope</name><op:operator pos:line="614" pos:column="38">.</op:operator><name pos:line="614" pos:column="39">Merge</name></name><argument_list pos:line="614" pos:column="44">(<argument><expr><name><name pos:line="614" pos:column="45">CodeParser</name><index pos:line="614" pos:column="55">[<expr><name><name pos:line="614" pos:column="56">Language</name><op:operator pos:line="614" pos:column="64">.</op:operator><name pos:line="614" pos:column="65">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="614" pos:column="75">.</op:operator><call><name pos:line="614" pos:column="76">ParseFileUnit</name><argument_list pos:line="614" pos:column="89">(<argument><expr><name pos:line="614" pos:column="90">xmlHeader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="616" pos:column="13">Assert</name><op:operator pos:line="616" pos:column="19">.</op:operator><name pos:line="616" pos:column="20">AreEqual</name></name><argument_list pos:line="616" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="616" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="616" pos:column="32">globalScope</name><op:operator pos:line="616" pos:column="43">.</op:operator><name pos:line="616" pos:column="44">ChildStatements</name><op:operator pos:line="616" pos:column="59">.</op:operator><name pos:line="616" pos:column="60">Count</name></name><argument_list pos:line="616" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="618" pos:column="13">var</name></type> <name pos:line="618" pos:column="17">typeA</name> <init pos:line="618" pos:column="23">= <expr><call><name><name pos:line="618" pos:column="25">globalScope</name><op:operator pos:line="618" pos:column="36">.</op:operator><name pos:line="618" pos:column="37">ChildStatements</name><op:operator pos:line="618" pos:column="52">.</op:operator><name pos:line="618" pos:column="53">First</name></name><argument_list pos:line="618" pos:column="58">()</argument_list></call> <op:operator pos:line="618" pos:column="61">as</op:operator> <name pos:line="618" pos:column="64">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="619" pos:column="13">Assert</name><op:operator pos:line="619" pos:column="19">.</op:operator><name pos:line="619" pos:column="20">AreEqual</name></name><argument_list pos:line="619" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="619" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="619" pos:column="32">typeA</name><op:operator pos:line="619" pos:column="37">.</op:operator><name pos:line="619" pos:column="38">ChildStatements</name><op:operator pos:line="619" pos:column="53">.</op:operator><name pos:line="619" pos:column="54">Count</name></name><argument_list pos:line="619" pos:column="59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="621" pos:column="13">var</name></type> <name pos:line="621" pos:column="17">aDotFoo</name> <init pos:line="621" pos:column="25">= <expr><call><name><name pos:line="621" pos:column="27">typeA</name><op:operator pos:line="621" pos:column="32">.</op:operator><name pos:line="621" pos:column="33">ChildStatements</name><op:operator pos:line="621" pos:column="48">.</op:operator><name pos:line="621" pos:column="49">First</name></name><argument_list pos:line="621" pos:column="54">()</argument_list></call> <op:operator pos:line="621" pos:column="57">as</op:operator> <name pos:line="621" pos:column="60">MethodDefinition</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="622" pos:column="13">var</name></type> <name pos:line="622" pos:column="17">aDotBar</name> <init pos:line="622" pos:column="25">= <expr><call><name><name pos:line="622" pos:column="27">typeA</name><op:operator pos:line="622" pos:column="32">.</op:operator><name pos:line="622" pos:column="33">ChildStatements</name><op:operator pos:line="622" pos:column="48">.</op:operator><name pos:line="622" pos:column="49">Last</name></name><argument_list pos:line="622" pos:column="53">()</argument_list></call> <op:operator pos:line="622" pos:column="56">as</op:operator> <name pos:line="622" pos:column="59">MethodDefinition</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="624" pos:column="13">Assert</name><op:operator pos:line="624" pos:column="19">.</op:operator><name pos:line="624" pos:column="20">AreEqual</name></name><argument_list pos:line="624" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="624" pos:column="29">"A.Foo"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="624" pos:column="38">aDotFoo</name><op:operator pos:line="624" pos:column="45">.</op:operator><name pos:line="624" pos:column="46">GetFullName</name></name><argument_list pos:line="624" pos:column="57">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="625" pos:column="13">Assert</name><op:operator pos:line="625" pos:column="19">.</op:operator><name pos:line="625" pos:column="20">AreEqual</name></name><argument_list pos:line="625" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="625" pos:column="29">"A.Bar"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="625" pos:column="38">aDotBar</name><op:operator pos:line="625" pos:column="45">.</op:operator><name pos:line="625" pos:column="46">GetFullName</name></name><argument_list pos:line="625" pos:column="57">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="627" pos:column="13">Assert</name><op:operator pos:line="627" pos:column="19">.</op:operator><name pos:line="627" pos:column="20">AreSame</name></name><argument_list pos:line="627" pos:column="27">(<argument><expr><name pos:line="627" pos:column="28">methodFoo</name></expr></argument>, <argument><expr><name pos:line="627" pos:column="39">aDotFoo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="628" pos:column="13">Assert</name><op:operator pos:line="628" pos:column="19">.</op:operator><name pos:line="628" pos:column="20">AreSame</name></name><argument_list pos:line="628" pos:column="27">(<argument><expr><name pos:line="628" pos:column="28">methodBar</name></expr></argument>, <argument><expr><name pos:line="628" pos:column="39">aDotBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="630" pos:column="13">Assert</name><op:operator pos:line="630" pos:column="19">.</op:operator><name pos:line="630" pos:column="20">AreSame</name></name><argument_list pos:line="630" pos:column="27">(<argument><expr><name pos:line="630" pos:column="28">typeA</name></expr></argument>, <argument><expr><name><name pos:line="630" pos:column="35">methodFoo</name><op:operator pos:line="630" pos:column="44">.</op:operator><name pos:line="630" pos:column="45">ParentStatement</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="631" pos:column="13">Assert</name><op:operator pos:line="631" pos:column="19">.</op:operator><name pos:line="631" pos:column="20">AreSame</name></name><argument_list pos:line="631" pos:column="27">(<argument><expr><name pos:line="631" pos:column="28">typeA</name></expr></argument>, <argument><expr><name><name pos:line="631" pos:column="35">methodBar</name><op:operator pos:line="631" pos:column="44">.</op:operator><name pos:line="631" pos:column="45">ParentStatement</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="632" pos:column="13">Assert</name><op:operator pos:line="632" pos:column="19">.</op:operator><name pos:line="632" pos:column="20">AreSame</name></name><argument_list pos:line="632" pos:column="27">(<argument><expr><name pos:line="632" pos:column="28">globalScope</name></expr></argument>, <argument><expr><name><name pos:line="632" pos:column="41">typeA</name><op:operator pos:line="632" pos:column="46">.</op:operator><name pos:line="632" pos:column="47">ParentStatement</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="634" pos:column="13">Assert</name><op:operator pos:line="634" pos:column="19">.</op:operator><name pos:line="634" pos:column="20">AreEqual</name></name><argument_list pos:line="634" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="634" pos:column="29">"A.h"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="634" pos:column="36">typeA</name><op:operator pos:line="634" pos:column="41">.</op:operator><name pos:line="634" pos:column="42">PrimaryLocation</name><op:operator pos:line="634" pos:column="57">.</op:operator><name pos:line="634" pos:column="58">SourceFileName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
