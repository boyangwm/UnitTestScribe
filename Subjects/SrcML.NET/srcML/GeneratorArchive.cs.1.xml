<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML\GeneratorArchive.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2014 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - Initial implementation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">System</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Collections</name><op:operator pos:line="13" pos:column="25">.</op:operator><name pos:line="13" pos:column="26">Generic</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Collections</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">ObjectModel</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">IO</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Linq</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Text</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Threading</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">System</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">Threading</name><op:operator pos:line="19" pos:column="23">.</op:operator><name pos:line="19" pos:column="24">Tasks</name></name>;</using>

<namespace pos:line="21" pos:column="1">namespace <name><name pos:line="21" pos:column="11">ABB</name><op:operator pos:line="21" pos:column="14">.</op:operator><name pos:line="21" pos:column="15">SrcML</name></name> <block pos:line="21" pos:column="21">{
    <comment type="line" pos:line="22" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="23" pos:column="5">/// keeps track of files by using the provided &lt;see cref="Generator"/&gt;. The files in the archive have their last-write time set to the corresponding file on disk</comment>
    <comment type="line" pos:line="24" pos:column="5">/// &lt;/summary&gt;</comment>
    <comment type="line" pos:line="25" pos:column="5">/// &lt;typeparam name="TGenerator"&gt;The generator type for this archive&lt;/typeparam&gt;</comment>
    <class><specifier pos:line="26" pos:column="5">public</specifier> class <name><name pos:line="26" pos:column="18">GeneratorArchive</name><argument_list pos:line="26" pos:column="34">&lt;<argument><name pos:line="26" pos:column="35">TGenerator</name></argument>&gt;</argument_list></name> <super pos:line="26" pos:column="47">: <name pos:line="26" pos:column="49">AbstractArchive</name></super> <where pos:line="26" pos:column="65">where <name pos:line="26" pos:column="71">TGenerator</name> : <name pos:line="26" pos:column="84">AbstractGenerator</name></where> <block pos:line="26" pos:column="102">{
        <decl_stmt><decl><type><specifier pos:line="27" pos:column="9">private</specifier> <name pos:line="27" pos:column="17">AbstractFileNameMapping</name></type> <name pos:line="27" pos:column="41">_fileMapping</name></decl>;</decl_stmt>

        <comment type="line" pos:line="29" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="30" pos:column="9">/// The generator to use to power this archive</comment>
        <comment type="line" pos:line="31" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="32" pos:column="9">public</specifier> <name pos:line="32" pos:column="16">TGenerator</name></type> <name pos:line="32" pos:column="27">Generator</name> <block pos:line="32" pos:column="37">{ <function_decl><name pos:line="32" pos:column="39">get</name>;</function_decl> <function_decl><name pos:line="32" pos:column="44">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="34" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="35" pos:column="9">/// </comment>
        <comment type="line" pos:line="36" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="37" pos:column="9">/// &lt;param name="baseDirectory"&gt;The parent directory of &lt;paramref name="archiveDirectory"/&gt;. &lt;see cref="AbstractArchive.ArchivePath"/&gt; will be set to &lt;c&gt;Path.Combine(baseDirectory, archiveDirectory)&lt;/c&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="38" pos:column="9">/// &lt;param name="archiveDirectory"&gt;The directory to store the archive files in&lt;/param&gt;</comment>
        <comment type="line" pos:line="39" pos:column="9">/// &lt;param name="useExistingArchive"&gt;if true, use any files found in the archive directory. Otherwise, delete them&lt;/param&gt;</comment>
        <comment type="line" pos:line="40" pos:column="9">/// &lt;param name="generator"&gt;The generator to use&lt;/param&gt;</comment>
        <comment type="line" pos:line="41" pos:column="9">/// &lt;param name="mapping"&gt;The file name mapping&lt;/param&gt;</comment>
        <comment type="line" pos:line="42" pos:column="9">/// &lt;param name="scheduler"&gt;The task scheduler for asynchronous tasks&lt;/param&gt;</comment>
        <constructor><specifier pos:line="43" pos:column="9">public</specifier> <name pos:line="43" pos:column="16">GeneratorArchive</name><parameter_list pos:line="43" pos:column="32">(<param><decl><type><name pos:line="43" pos:column="33">string</name></type> <name pos:line="43" pos:column="40">baseDirectory</name></decl></param>, <param><decl><type><name pos:line="43" pos:column="55">string</name></type> <name pos:line="43" pos:column="62">archiveDirectory</name></decl></param>, <param><decl><type><name pos:line="43" pos:column="80">bool</name></type> <name pos:line="43" pos:column="85">useExistingArchive</name></decl></param>, <param><decl><type><name pos:line="43" pos:column="105">TGenerator</name></type> <name pos:line="43" pos:column="116">generator</name></decl></param>, <param><decl><type><name pos:line="43" pos:column="127">AbstractFileNameMapping</name></type> <name pos:line="43" pos:column="151">mapping</name></decl></param>, <param><decl><type><name pos:line="43" pos:column="160">TaskScheduler</name></type> <name pos:line="43" pos:column="174">scheduler</name></decl></param>)</parameter_list>
        <member_list pos:line="44" pos:column="9">: <call><name pos:line="44" pos:column="11">base</name><argument_list pos:line="44" pos:column="15">(<argument><expr><name pos:line="44" pos:column="16">baseDirectory</name></expr></argument>, <argument><expr><name pos:line="44" pos:column="31">archiveDirectory</name></expr></argument>, <argument><expr><name pos:line="44" pos:column="49">scheduler</name></expr></argument>)</argument_list></call> </member_list><block pos:line="44" pos:column="60">{
            <expr_stmt><expr><name pos:line="45" pos:column="13">_fileMapping</name> <op:operator pos:line="45" pos:column="26">=</op:operator> <name pos:line="45" pos:column="28">mapping</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="46" pos:column="13">Generator</name> <op:operator pos:line="46" pos:column="23">=</op:operator> <name pos:line="46" pos:column="25">generator</name></expr>;</expr_stmt>
            <if pos:line="47" pos:column="13">if<condition pos:line="47" pos:column="15">(<expr><op:operator pos:line="47" pos:column="16">!</op:operator><call><name><name pos:line="47" pos:column="17">Directory</name><op:operator pos:line="47" pos:column="26">.</op:operator><name pos:line="47" pos:column="27">Exists</name></name><argument_list pos:line="47" pos:column="33">(<argument><expr><name><name pos:line="47" pos:column="34">this</name><op:operator pos:line="47" pos:column="38">.</op:operator><name pos:line="47" pos:column="39">ArchivePath</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="47" pos:column="52"> <block pos:line="47" pos:column="53">{
                <expr_stmt><expr><call><name><name pos:line="48" pos:column="17">Directory</name><op:operator pos:line="48" pos:column="26">.</op:operator><name pos:line="48" pos:column="27">CreateDirectory</name></name><argument_list pos:line="48" pos:column="42">(<argument><expr><name><name pos:line="48" pos:column="43">this</name><op:operator pos:line="48" pos:column="47">.</op:operator><name pos:line="48" pos:column="48">ArchivePath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="49" pos:column="15">else <if pos:line="49" pos:column="20">if<condition pos:line="49" pos:column="22">(<expr><op:operator pos:line="49" pos:column="23">!</op:operator><name pos:line="49" pos:column="24">useExistingArchive</name></expr>)</condition><then pos:line="49" pos:column="43"> <block pos:line="49" pos:column="44">{
                <foreach pos:line="50" pos:column="17">foreach(<init><decl><type><name pos:line="50" pos:column="25">var</name></type> <name pos:line="50" pos:column="29">fileName</name> <range pos:line="50" pos:column="38">in <expr><call><name pos:line="50" pos:column="41">GetArchivedFiles</name><argument_list pos:line="50" pos:column="57">()</argument_list></call><op:operator pos:line="50" pos:column="59">.</op:operator><call><name pos:line="50" pos:column="60">ToList</name><argument_list pos:line="50" pos:column="66">()</argument_list></call></expr></range></decl></init>) <block pos:line="50" pos:column="70">{
                    <expr_stmt><expr><call><name><name pos:line="51" pos:column="21">File</name><op:operator pos:line="51" pos:column="25">.</op:operator><name pos:line="51" pos:column="26">Delete</name></name><argument_list pos:line="51" pos:column="32">(<argument><expr><name pos:line="51" pos:column="33">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
            }</block></then></if></else></if>
        }</block></constructor>

        <comment type="line" pos:line="56" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="57" pos:column="9">/// Uses &lt;see cref="Generator"/&gt; to generate output for &lt;paramref name="sourcePath"/&gt;</comment>
        <comment type="line" pos:line="58" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="59" pos:column="9">/// &lt;param name="sourcePath"&gt;the input file&lt;/param&gt;</comment>
        <function><type><specifier pos:line="60" pos:column="9">public</specifier> <name pos:line="60" pos:column="16">void</name></type> <name pos:line="60" pos:column="21">GenerateOutputForSource</name><parameter_list pos:line="60" pos:column="44">(<param><decl><type><name pos:line="60" pos:column="45">string</name></type> <name pos:line="60" pos:column="52">sourcePath</name></decl></param>)</parameter_list> <block pos:line="60" pos:column="64">{
            <decl_stmt><decl><type><name pos:line="61" pos:column="13">var</name></type> <name pos:line="61" pos:column="17">inputPath</name> <init pos:line="61" pos:column="27">= <expr><call><name pos:line="61" pos:column="29">GetInputPath</name><argument_list pos:line="61" pos:column="41">(<argument><expr><name pos:line="61" pos:column="42">sourcePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="62" pos:column="13">var</name></type> <name pos:line="62" pos:column="17">outputPath</name> <init pos:line="62" pos:column="28">= <expr><call><name pos:line="62" pos:column="30">GetArchivePath</name><argument_list pos:line="62" pos:column="44">(<argument><expr><name pos:line="62" pos:column="45">sourcePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="64" pos:column="13">var</name></type> <name pos:line="64" pos:column="17">directory</name> <init pos:line="64" pos:column="27">= <expr><call><name><name pos:line="64" pos:column="29">Path</name><op:operator pos:line="64" pos:column="33">.</op:operator><name pos:line="64" pos:column="34">GetDirectoryName</name></name><argument_list pos:line="64" pos:column="50">(<argument><expr><name pos:line="64" pos:column="51">outputPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="65" pos:column="13">if<condition pos:line="65" pos:column="15">(<expr><op:operator pos:line="65" pos:column="16">!</op:operator><call><name><name pos:line="65" pos:column="17">Directory</name><op:operator pos:line="65" pos:column="26">.</op:operator><name pos:line="65" pos:column="27">Exists</name></name><argument_list pos:line="65" pos:column="33">(<argument><expr><name pos:line="65" pos:column="34">directory</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="65" pos:column="45"> <block pos:line="65" pos:column="46">{
                <expr_stmt><expr><call><name><name pos:line="66" pos:column="17">Directory</name><op:operator pos:line="66" pos:column="26">.</op:operator><name pos:line="66" pos:column="27">CreateDirectory</name></name><argument_list pos:line="66" pos:column="42">(<argument><expr><name pos:line="66" pos:column="43">directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="69" pos:column="13">var</name></type> <name pos:line="69" pos:column="17">lastWriteTime</name> <init pos:line="69" pos:column="31">= <expr><call><name><name pos:line="69" pos:column="33">File</name><op:operator pos:line="69" pos:column="37">.</op:operator><name pos:line="69" pos:column="38">GetLastWriteTime</name></name><argument_list pos:line="69" pos:column="54">(<argument><expr><name pos:line="69" pos:column="55">sourcePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="70" pos:column="13">var</name></type> <name pos:line="70" pos:column="17">extension</name> <init pos:line="70" pos:column="27">= <expr><call><name><name pos:line="70" pos:column="29">Path</name><op:operator pos:line="70" pos:column="33">.</op:operator><name pos:line="70" pos:column="34">GetExtension</name></name><argument_list pos:line="70" pos:column="46">(<argument><expr><name pos:line="70" pos:column="47">outputPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <decl_stmt><decl><type><name pos:line="72" pos:column="13">var</name></type> <name pos:line="72" pos:column="17">tempFileName</name> <init pos:line="72" pos:column="30">= <expr><call><name><name pos:line="72" pos:column="32">Path</name><op:operator pos:line="72" pos:column="36">.</op:operator><name pos:line="72" pos:column="37">Combine</name></name><argument_list pos:line="72" pos:column="44">(<argument><expr><call><name><name pos:line="72" pos:column="45">Path</name><op:operator pos:line="72" pos:column="49">.</op:operator><name pos:line="72" pos:column="50">GetTempPath</name></name><argument_list pos:line="72" pos:column="61">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="72" pos:column="65">Path</name><op:operator pos:line="72" pos:column="69">.</op:operator><name pos:line="72" pos:column="70">ChangeExtension</name></name><argument_list pos:line="72" pos:column="85">(<argument><expr><call><name><name pos:line="72" pos:column="86">Path</name><op:operator pos:line="72" pos:column="90">.</op:operator><name pos:line="72" pos:column="91">GetRandomFileName</name></name><argument_list pos:line="72" pos:column="108">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="72" pos:column="112">extension</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <if pos:line="74" pos:column="13">if<condition pos:line="74" pos:column="15">(<expr><call><name><name pos:line="74" pos:column="16">this</name><op:operator pos:line="74" pos:column="20">.</op:operator><name pos:line="74" pos:column="21">Generator</name><op:operator pos:line="74" pos:column="30">.</op:operator><name pos:line="74" pos:column="31">Generate</name></name><argument_list pos:line="74" pos:column="39">(<argument><expr><name pos:line="74" pos:column="40">inputPath</name></expr></argument>, <argument><expr><name pos:line="74" pos:column="51">tempFileName</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="74" pos:column="65"> <block pos:line="74" pos:column="66">{
                <for pos:line="75" pos:column="17">for(<init><decl><type><name pos:line="75" pos:column="21">int</name></type> <name pos:line="75" pos:column="25">i</name> <init pos:line="75" pos:column="27">= <expr><lit:literal type="number" pos:line="75" pos:column="29">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="75" pos:column="32">i</name> <op:operator pos:line="75" pos:column="34">&lt;</op:operator> <lit:literal type="number" pos:line="75" pos:column="36">10</lit:literal></expr>;</condition> <incr><expr><name pos:line="75" pos:column="40">i</name><op:operator pos:line="75" pos:column="41">++</op:operator></expr></incr>) <block pos:line="75" pos:column="45">{
                    <try pos:line="76" pos:column="21">try <block pos:line="76" pos:column="25">{
                        <expr_stmt><expr><call><name><name pos:line="77" pos:column="25">File</name><op:operator pos:line="77" pos:column="29">.</op:operator><name pos:line="77" pos:column="30">Copy</name></name><argument_list pos:line="77" pos:column="34">(<argument><expr><name pos:line="77" pos:column="35">tempFileName</name></expr></argument>, <argument><expr><name pos:line="77" pos:column="49">outputPath</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="77" pos:column="61">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="78" pos:column="25">File</name><op:operator pos:line="78" pos:column="29">.</op:operator><name pos:line="78" pos:column="30">SetLastWriteTime</name></name><argument_list pos:line="78" pos:column="46">(<argument><expr><name pos:line="78" pos:column="47">outputPath</name></expr></argument>, <argument><expr><name pos:line="78" pos:column="59">lastWriteTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block> <catch pos:line="79" pos:column="23">catch<parameter_list pos:line="79" pos:column="28">(<param><decl><type><name pos:line="79" pos:column="29">IOException</name></type></decl></param>)</parameter_list> <block pos:line="79" pos:column="42">{
                        <expr_stmt><expr><call><name><name pos:line="80" pos:column="25">Thread</name><op:operator pos:line="80" pos:column="31">.</op:operator><name pos:line="80" pos:column="32">Sleep</name></name><argument_list pos:line="80" pos:column="37">(<argument><expr><lit:literal type="number" pos:line="80" pos:column="38">10</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></catch></try>
                }</block></for>
                <expr_stmt><expr><call><name><name pos:line="83" pos:column="17">File</name><op:operator pos:line="83" pos:column="21">.</op:operator><name pos:line="83" pos:column="22">Delete</name></name><argument_list pos:line="83" pos:column="28">(<argument><expr><name pos:line="83" pos:column="29">tempFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="87" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="88" pos:column="9">/// Gets the archive path for &lt;paramref name="sourcePath"/&gt;</comment>
        <comment type="line" pos:line="89" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="90" pos:column="9">/// &lt;param name="sourcePath"&gt;The source path&lt;/param&gt;</comment>
        <comment type="line" pos:line="91" pos:column="9">/// &lt;returns&gt;The full path within the archive for &lt;paramref name="sourcePath"/&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="92" pos:column="9">public</specifier> <specifier pos:line="92" pos:column="16">virtual</specifier> <name pos:line="92" pos:column="24">string</name></type> <name pos:line="92" pos:column="31">GetArchivePath</name><parameter_list pos:line="92" pos:column="45">(<param><decl><type><name pos:line="92" pos:column="46">string</name></type> <name pos:line="92" pos:column="53">sourcePath</name></decl></param>)</parameter_list> <block pos:line="92" pos:column="65">{
            <return pos:line="93" pos:column="13">return <expr><call><name><name pos:line="93" pos:column="20">_fileMapping</name><op:operator pos:line="93" pos:column="32">.</op:operator><name pos:line="93" pos:column="33">GetTargetPath</name></name><argument_list pos:line="93" pos:column="46">(<argument><expr><name pos:line="93" pos:column="47">sourcePath</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="96" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="97" pos:column="9">/// Gets the source path for an archive path</comment>
        <comment type="line" pos:line="98" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="99" pos:column="9">/// &lt;param name="archivePath"&gt;A path within the archive&lt;/param&gt;</comment>
        <comment type="line" pos:line="100" pos:column="9">/// &lt;returns&gt;The path on disk that corresponds to &lt;paramref name="archivePath"/&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="101" pos:column="9">public</specifier> <specifier pos:line="101" pos:column="16">virtual</specifier> <name pos:line="101" pos:column="24">string</name></type> <name pos:line="101" pos:column="31">GetSourcePath</name><parameter_list pos:line="101" pos:column="44">(<param><decl><type><name pos:line="101" pos:column="45">string</name></type> <name pos:line="101" pos:column="52">archivePath</name></decl></param>)</parameter_list> <block pos:line="101" pos:column="65">{
            <return pos:line="102" pos:column="13">return <expr><call><name><name pos:line="102" pos:column="20">_fileMapping</name><op:operator pos:line="102" pos:column="32">.</op:operator><name pos:line="102" pos:column="33">GetSourcePath</name></name><argument_list pos:line="102" pos:column="46">(<argument><expr><name pos:line="102" pos:column="47">archivePath</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="105" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="106" pos:column="9">/// Gets all of the archived files in this archive.</comment>
        <comment type="line" pos:line="107" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="108" pos:column="9">/// &lt;returns&gt;An enumerable of the stored files&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="109" pos:column="9">protected</specifier> <specifier pos:line="109" pos:column="19">virtual</specifier> <name><name pos:line="109" pos:column="27">IEnumerable</name><argument_list pos:line="109" pos:column="38">&lt;<argument><name pos:line="109" pos:column="39">string</name></argument>&gt;</argument_list></name></type> <name pos:line="109" pos:column="47">GetArchivedFiles</name><parameter_list pos:line="109" pos:column="63">()</parameter_list> <block pos:line="109" pos:column="66">{
            <return pos:line="110" pos:column="13">return <expr><call><name><name pos:line="110" pos:column="20">_fileMapping</name><op:operator pos:line="110" pos:column="32">.</op:operator><name pos:line="110" pos:column="33">GetTargetFiles</name></name><argument_list pos:line="110" pos:column="47">()</argument_list></call></expr>;</return>
        }</block></function>

        <cpp:region pos:line="113" pos:column="9">#<cpp:directive pos:line="113" pos:column="10">region</cpp:directive> AbstractArchive members</cpp:region>
        <comment type="line" pos:line="114" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="115" pos:column="9">/// Returns true if this archive is empty</comment>
        <comment type="line" pos:line="116" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="117" pos:column="9">public</specifier> <specifier pos:line="117" pos:column="16">override</specifier> <name pos:line="117" pos:column="25">bool</name></type> <name pos:line="117" pos:column="30">IsEmpty</name> <block pos:line="117" pos:column="38">{
            <function><name pos:line="118" pos:column="13">get</name> <block pos:line="118" pos:column="17">{ <return pos:line="118" pos:column="19">return <expr><lit:literal type="number" pos:line="118" pos:column="26">0</lit:literal> <op:operator pos:line="118" pos:column="28">==</op:operator> <call><name pos:line="118" pos:column="31">GetArchivedFiles</name><argument_list pos:line="118" pos:column="47">()</argument_list></call><op:operator pos:line="118" pos:column="49">.</op:operator><call><name pos:line="118" pos:column="50">Count</name><argument_list pos:line="118" pos:column="55">()</argument_list></call></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="121" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="122" pos:column="9">/// The list of extensions supported by the archive (taken from &lt;see cref="Generator"/&gt;)</comment>
        <comment type="line" pos:line="123" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="124" pos:column="9">public</specifier> <specifier pos:line="124" pos:column="16">override</specifier> <name><name pos:line="124" pos:column="25">ICollection</name><argument_list pos:line="124" pos:column="36">&lt;<argument><name pos:line="124" pos:column="37">string</name></argument>&gt;</argument_list></name></type> <name pos:line="124" pos:column="45">SupportedExtensions</name> <block pos:line="124" pos:column="65">{
            <function><name pos:line="125" pos:column="13">get</name> <block pos:line="125" pos:column="17">{ <return pos:line="125" pos:column="19">return <expr><name><name pos:line="125" pos:column="26">Generator</name><op:operator pos:line="125" pos:column="35">.</op:operator><name pos:line="125" pos:column="36">SupportedExtensions</name></name></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="128" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="129" pos:column="9">/// Uses &lt;see cref="Generator"/&gt; to create a copy of the file in the archive.</comment>
        <comment type="line" pos:line="130" pos:column="9">/// If the file already exists in the archive, &lt;see cref="FileEventType.FileChanged"/&gt; is returned</comment>
        <comment type="line" pos:line="131" pos:column="9">/// Otherwise, &lt;see cref="FileEventType.FileAdded"/&gt; is returned.</comment>
        <comment type="line" pos:line="132" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="133" pos:column="9">/// &lt;param name="fileName"&gt;The file to add or update&lt;/param&gt;</comment>
        <comment type="line" pos:line="134" pos:column="9">/// &lt;returns&gt;The file event type for for this operation. If null, then the method failed.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="135" pos:column="9">protected</specifier> <specifier pos:line="135" pos:column="19">override</specifier> <name pos:line="135" pos:column="28">FileEventType</name><type:modifier pos:line="135" pos:column="41">?</type:modifier></type> <name pos:line="135" pos:column="43">AddOrUpdateFileImpl</name><parameter_list pos:line="135" pos:column="62">(<param><decl><type><name pos:line="135" pos:column="63">string</name></type> <name pos:line="135" pos:column="70">fileName</name></decl></param>)</parameter_list> <block pos:line="135" pos:column="80">{
            <decl_stmt><decl><type><name pos:line="136" pos:column="13">bool</name></type> <name pos:line="136" pos:column="18">fileAlreadyExists</name> <init pos:line="136" pos:column="36">= <expr><call><name><name pos:line="136" pos:column="38">this</name><op:operator pos:line="136" pos:column="42">.</op:operator><name pos:line="136" pos:column="43">ContainsFile</name></name><argument_list pos:line="136" pos:column="55">(<argument><expr><name pos:line="136" pos:column="56">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="137" pos:column="13">if<condition pos:line="137" pos:column="15">(<expr><call><name><name pos:line="137" pos:column="16">File</name><op:operator pos:line="137" pos:column="20">.</op:operator><name pos:line="137" pos:column="21">Exists</name></name><argument_list pos:line="137" pos:column="27">(<argument><expr><name pos:line="137" pos:column="28">fileName</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="137" pos:column="38"> <block pos:line="137" pos:column="39">{
                <expr_stmt><expr><call><name pos:line="138" pos:column="17">GenerateOutputForSource</name><argument_list pos:line="138" pos:column="40">(<argument><expr><name pos:line="138" pos:column="41">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="139" pos:column="17">return <expr><op:operator pos:line="139" pos:column="24">(</op:operator><name pos:line="139" pos:column="25">fileAlreadyExists</name> <op:operator pos:line="139" pos:column="43">?</op:operator> <name><name pos:line="139" pos:column="45">FileEventType</name><op:operator pos:line="139" pos:column="58">.</op:operator><name pos:line="139" pos:column="59">FileChanged</name></name> <op:operator pos:line="139" pos:column="71">:</op:operator> <name><name pos:line="139" pos:column="73">FileEventType</name><op:operator pos:line="139" pos:column="86">.</op:operator><name pos:line="139" pos:column="87">FileAdded</name></name><op:operator pos:line="139" pos:column="96">)</op:operator></expr>;</return>
            }</block></then></if>
            <return pos:line="141" pos:column="13">return <expr><name pos:line="141" pos:column="20">null</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="144" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="145" pos:column="9">/// Deletes &lt;paramref name="fileName"/&gt; from the archive.</comment>
        <comment type="line" pos:line="146" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="147" pos:column="9">/// &lt;param name="fileName"&gt;The file to delete&lt;/param&gt;</comment>
        <comment type="line" pos:line="148" pos:column="9">/// &lt;returns&gt;True if the file was successfully removed from the archive&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="149" pos:column="9">protected</specifier> <specifier pos:line="149" pos:column="19">override</specifier> <name pos:line="149" pos:column="28">bool</name></type> <name pos:line="149" pos:column="33">DeleteFileImpl</name><parameter_list pos:line="149" pos:column="47">(<param><decl><type><name pos:line="149" pos:column="48">string</name></type> <name pos:line="149" pos:column="55">fileName</name></decl></param>)</parameter_list> <block pos:line="149" pos:column="65">{
            <decl_stmt><decl><type><name pos:line="150" pos:column="13">var</name></type> <name pos:line="150" pos:column="17">archivePath</name> <init pos:line="150" pos:column="29">= <expr><call><name pos:line="150" pos:column="31">GetArchivePath</name><argument_list pos:line="150" pos:column="45">(<argument><expr><name pos:line="150" pos:column="46">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="151" pos:column="13">if<condition pos:line="151" pos:column="15">(<expr><call><name><name pos:line="151" pos:column="16">File</name><op:operator pos:line="151" pos:column="20">.</op:operator><name pos:line="151" pos:column="21">Exists</name></name><argument_list pos:line="151" pos:column="27">(<argument><expr><name pos:line="151" pos:column="28">archivePath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="151" pos:column="41"> <block pos:line="151" pos:column="42">{
                <expr_stmt><expr><call><name><name pos:line="152" pos:column="17">File</name><op:operator pos:line="152" pos:column="21">.</op:operator><name pos:line="152" pos:column="22">Delete</name></name><argument_list pos:line="152" pos:column="28">(<argument><expr><name pos:line="152" pos:column="29">archivePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="153" pos:column="17">return <expr><lit:literal type="boolean" pos:line="153" pos:column="24">true</lit:literal></expr>;</return>
            }</block></then></if>
            <return pos:line="155" pos:column="13">return <expr><lit:literal type="boolean" pos:line="155" pos:column="20">false</lit:literal></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="158" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="159" pos:column="9">/// Renames the file from &lt;paramref name="oldFileName"/&gt; to &lt;paramref name="newFileName"/&gt; in the archive.</comment>
        <comment type="line" pos:line="160" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="161" pos:column="9">/// &lt;param name="oldFileName"&gt;The old file name&lt;/param&gt;</comment>
        <comment type="line" pos:line="162" pos:column="9">/// &lt;param name="newFileName"&gt;The new file name&lt;/param&gt;</comment>
        <comment type="line" pos:line="163" pos:column="9">/// &lt;returns&gt;True if the rename succeeds. False otherwise.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="164" pos:column="9">protected</specifier> <specifier pos:line="164" pos:column="19">override</specifier> <name pos:line="164" pos:column="28">bool</name></type> <name pos:line="164" pos:column="33">RenameFileImpl</name><parameter_list pos:line="164" pos:column="47">(<param><decl><type><name pos:line="164" pos:column="48">string</name></type> <name pos:line="164" pos:column="55">oldFileName</name></decl></param>, <param><decl><type><name pos:line="164" pos:column="68">string</name></type> <name pos:line="164" pos:column="75">newFileName</name></decl></param>)</parameter_list> <block pos:line="164" pos:column="88">{
            <decl_stmt><decl><type><name pos:line="165" pos:column="13">var</name></type> <name pos:line="165" pos:column="17">oldArchivePath</name> <init pos:line="165" pos:column="32">= <expr><call><name pos:line="165" pos:column="34">GetArchivePath</name><argument_list pos:line="165" pos:column="48">(<argument><expr><name pos:line="165" pos:column="49">oldFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="166" pos:column="13">var</name></type> <name pos:line="166" pos:column="17">newAchivePath</name> <init pos:line="166" pos:column="31">= <expr><call><name pos:line="166" pos:column="33">GetArchivePath</name><argument_list pos:line="166" pos:column="47">(<argument><expr><name pos:line="166" pos:column="48">newFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if pos:line="168" pos:column="13">if<condition pos:line="168" pos:column="15">(<expr><call><name><name pos:line="168" pos:column="16">File</name><op:operator pos:line="168" pos:column="20">.</op:operator><name pos:line="168" pos:column="21">Exists</name></name><argument_list pos:line="168" pos:column="27">(<argument><expr><name pos:line="168" pos:column="28">oldArchivePath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="168" pos:column="44"> <block pos:line="168" pos:column="45">{
                <expr_stmt><expr><call><name><name pos:line="169" pos:column="17">File</name><op:operator pos:line="169" pos:column="21">.</op:operator><name pos:line="169" pos:column="22">Delete</name></name><argument_list pos:line="169" pos:column="28">(<argument><expr><name pos:line="169" pos:column="29">oldArchivePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if pos:line="171" pos:column="13">if<condition pos:line="171" pos:column="15">(<expr><call><name><name pos:line="171" pos:column="16">File</name><op:operator pos:line="171" pos:column="20">.</op:operator><name pos:line="171" pos:column="21">Exists</name></name><argument_list pos:line="171" pos:column="27">(<argument><expr><name pos:line="171" pos:column="28">newFileName</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="171" pos:column="41"> <block pos:line="171" pos:column="42">{
                <expr_stmt><expr><call><name pos:line="172" pos:column="17">GenerateOutputForSource</name><argument_list pos:line="172" pos:column="40">(<argument><expr><name pos:line="172" pos:column="41">newFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="173" pos:column="17">return <expr><lit:literal type="boolean" pos:line="173" pos:column="24">true</lit:literal></expr>;</return>
            }</block></then></if>
            <return pos:line="175" pos:column="13">return <expr><lit:literal type="boolean" pos:line="175" pos:column="20">false</lit:literal></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="178" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="179" pos:column="9">/// Checks to see if the file is in the archive</comment>
        <comment type="line" pos:line="180" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="181" pos:column="9">/// &lt;param name="fileName"&gt;The file to check for&lt;/param&gt;</comment>
        <comment type="line" pos:line="182" pos:column="9">/// &lt;returns&gt;true if &lt;paramref name="fileName"/&gt; is in the archive; false otherwise&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="183" pos:column="9">public</specifier> <specifier pos:line="183" pos:column="16">override</specifier> <name pos:line="183" pos:column="25">bool</name></type> <name pos:line="183" pos:column="30">ContainsFile</name><parameter_list pos:line="183" pos:column="42">(<param><decl><type><name pos:line="183" pos:column="43">string</name></type> <name pos:line="183" pos:column="50">fileName</name></decl></param>)</parameter_list> <block pos:line="183" pos:column="60">{
            <decl_stmt><decl><type><name pos:line="184" pos:column="13">var</name></type> <name pos:line="184" pos:column="17">archivePath</name> <init pos:line="184" pos:column="29">= <expr><call><name pos:line="184" pos:column="31">GetArchivePath</name><argument_list pos:line="184" pos:column="45">(<argument><expr><name pos:line="184" pos:column="46">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="185" pos:column="13">return <expr><call><name><name pos:line="185" pos:column="20">File</name><op:operator pos:line="185" pos:column="24">.</op:operator><name pos:line="185" pos:column="25">Exists</name></name><argument_list pos:line="185" pos:column="31">(<argument><expr><name pos:line="185" pos:column="32">archivePath</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="188" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="189" pos:column="9">/// Checks if the archive is up to date with respect to &lt;paramref name="fileName"/&gt;.</comment>
        <comment type="line" pos:line="190" pos:column="9">/// If the file is &lt;see cref="ContainsFile"&gt;not in the archive&lt;/see&gt;, it is outdated.</comment>
        <comment type="line" pos:line="191" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="192" pos:column="9">/// &lt;param name="fileName"&gt;The file name to check for&lt;/param&gt;</comment>
        <comment type="line" pos:line="193" pos:column="9">/// &lt;returns&gt;true if the archive is outdated&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="194" pos:column="9">public</specifier> <specifier pos:line="194" pos:column="16">override</specifier> <name pos:line="194" pos:column="25">bool</name></type> <name pos:line="194" pos:column="30">IsOutdated</name><parameter_list pos:line="194" pos:column="40">(<param><decl><type><name pos:line="194" pos:column="41">string</name></type> <name pos:line="194" pos:column="48">fileName</name></decl></param>)</parameter_list> <block pos:line="194" pos:column="58">{
            <decl_stmt><decl><type><name pos:line="195" pos:column="13">var</name></type> <name pos:line="195" pos:column="17">sourceFileInfo</name> <init pos:line="195" pos:column="32">= <expr><op:operator pos:line="195" pos:column="34">new</op:operator> <call><name pos:line="195" pos:column="38">FileInfo</name><argument_list pos:line="195" pos:column="46">(<argument><expr><name pos:line="195" pos:column="47">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="196" pos:column="13">var</name></type> <name pos:line="196" pos:column="17">archivePath</name> <init pos:line="196" pos:column="29">= <expr><call><name pos:line="196" pos:column="31">GetArchivePath</name><argument_list pos:line="196" pos:column="45">(<argument><expr><name pos:line="196" pos:column="46">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="197" pos:column="13">var</name></type> <name pos:line="197" pos:column="17">archiveFileInfo</name> <init pos:line="197" pos:column="33">= <expr><op:operator pos:line="197" pos:column="35">new</op:operator> <call><name pos:line="197" pos:column="39">FileInfo</name><argument_list pos:line="197" pos:column="47">(<argument><expr><name pos:line="197" pos:column="48">archivePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <return pos:line="199" pos:column="13">return <expr><name><name pos:line="199" pos:column="20">sourceFileInfo</name><op:operator pos:line="199" pos:column="34">.</op:operator><name pos:line="199" pos:column="35">Exists</name></name> <op:operator pos:line="199" pos:column="42">!=</op:operator> <name><name pos:line="199" pos:column="45">archiveFileInfo</name><op:operator pos:line="199" pos:column="60">.</op:operator><name pos:line="199" pos:column="61">Exists</name></name> <op:operator pos:line="199" pos:column="68">||</op:operator> <name><name pos:line="199" pos:column="71">sourceFileInfo</name><op:operator pos:line="199" pos:column="85">.</op:operator><name pos:line="199" pos:column="86">LastWriteTime</name></name> <op:operator pos:line="199" pos:column="100">!=</op:operator> <name><name pos:line="199" pos:column="103">archiveFileInfo</name><op:operator pos:line="199" pos:column="118">.</op:operator><name pos:line="199" pos:column="119">LastWriteTime</name></name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="202" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="203" pos:column="9">/// Gets all of the source file names stored in this archive</comment>
        <comment type="line" pos:line="204" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="205" pos:column="9">/// &lt;returns&gt;A collection of the file names stored in this archive&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="206" pos:column="9">public</specifier> <specifier pos:line="206" pos:column="16">override</specifier> <name><name pos:line="206" pos:column="25">Collection</name><argument_list pos:line="206" pos:column="35">&lt;<argument><name pos:line="206" pos:column="36">string</name></argument>&gt;</argument_list></name></type> <name pos:line="206" pos:column="44">GetFiles</name><parameter_list pos:line="206" pos:column="52">()</parameter_list> <block pos:line="206" pos:column="55">{

            <decl_stmt><decl><type><name pos:line="208" pos:column="13">var</name></type> <name pos:line="208" pos:column="17">sourceFiles</name> <init pos:line="208" pos:column="29">= <expr><linq><from pos:line="208" pos:column="31">from <expr><name pos:line="208" pos:column="36">archivePath</name></expr> <in pos:line="208" pos:column="48">in <expr><call><name pos:line="208" pos:column="51">GetArchivedFiles</name><argument_list pos:line="208" pos:column="67">()</argument_list></call></expr></in></from>
                              <select pos:line="209" pos:column="31">select <expr><call><name pos:line="209" pos:column="38">GetSourcePath</name><argument_list pos:line="209" pos:column="51">(<argument><expr><name pos:line="209" pos:column="52">archivePath</name></expr></argument>)</argument_list></call></expr></select></linq></expr></init></decl>;</decl_stmt>

            <return pos:line="211" pos:column="13">return <expr><op:operator pos:line="211" pos:column="20">new</op:operator> <call><name><name pos:line="211" pos:column="24">Collection</name><argument_list pos:line="211" pos:column="34">&lt;<argument><name pos:line="211" pos:column="35">string</name></argument>&gt;</argument_list></name><argument_list pos:line="211" pos:column="42">(<argument><expr><call><name><name pos:line="211" pos:column="43">sourceFiles</name><op:operator pos:line="211" pos:column="54">.</op:operator><name pos:line="211" pos:column="55">ToList</name></name><argument_list pos:line="211" pos:column="61">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="214" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="215" pos:column="9">/// Saves the file name mapping to disk</comment>
        <comment type="line" pos:line="216" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="217" pos:column="9">public</specifier> <specifier pos:line="217" pos:column="16">override</specifier> <name pos:line="217" pos:column="25">void</name></type> <name pos:line="217" pos:column="30">Save</name><parameter_list pos:line="217" pos:column="34">()</parameter_list> <block pos:line="217" pos:column="37">{
            <expr_stmt><expr><call><name><name pos:line="218" pos:column="13">_fileMapping</name><op:operator pos:line="218" pos:column="25">.</op:operator><name pos:line="218" pos:column="26">SaveMapping</name></name><argument_list pos:line="218" pos:column="37">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <cpp:endregion pos:line="220" pos:column="9">#<cpp:directive pos:line="220" pos:column="10">endregion</cpp:directive> AbstractArchive members</cpp:endregion>

        <comment type="line" pos:line="222" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="223" pos:column="9">/// For a given source path, get the input path that should be passed by the &lt;see cref="Generator"/&gt;. By default, this is just the source path.</comment>
        <comment type="line" pos:line="224" pos:column="9">/// It may be overriden in archives that require a file related to the &lt;paramref name="sourcePath"/&gt; (&lt;seealso cref="DataArchive.GetInputPath"/&gt;</comment>
        <comment type="line" pos:line="225" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="226" pos:column="9">/// &lt;param name="sourcePath"&gt;The source path&lt;/param&gt;</comment>
        <comment type="line" pos:line="227" pos:column="9">/// &lt;returns&gt;The generator path that corresponds to the &lt;paramref name="sourcePath"/&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="228" pos:column="9">protected</specifier> <specifier pos:line="228" pos:column="19">virtual</specifier> <name pos:line="228" pos:column="27">string</name></type> <name pos:line="228" pos:column="34">GetInputPath</name><parameter_list pos:line="228" pos:column="46">(<param><decl><type><name pos:line="228" pos:column="47">string</name></type> <name pos:line="228" pos:column="54">sourcePath</name></decl></param>)</parameter_list> <block pos:line="228" pos:column="66">{
            <return pos:line="229" pos:column="13">return <expr><name pos:line="229" pos:column="20">sourcePath</name></expr>;</return>
        }</block></function>

        <cpp:region pos:line="232" pos:column="9">#<cpp:directive pos:line="232" pos:column="10">region</cpp:directive> IDisposable members</cpp:region>
        <comment type="line" pos:line="233" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="234" pos:column="9">/// Disposes of the internal &lt;see cref="AbstractFileNameMapping"/&gt; and then calls &lt;see cref="AbstractArchive.Dispose()"/&gt;</comment>
        <comment type="line" pos:line="235" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="236" pos:column="9">public</specifier> <specifier pos:line="236" pos:column="16">override</specifier> <name pos:line="236" pos:column="25">void</name></type> <name pos:line="236" pos:column="30">Dispose</name><parameter_list pos:line="236" pos:column="37">()</parameter_list> <block pos:line="236" pos:column="40">{
            <expr_stmt><expr><call><name><name pos:line="237" pos:column="13">_fileMapping</name><op:operator pos:line="237" pos:column="25">.</op:operator><name pos:line="237" pos:column="26">Dispose</name></name><argument_list pos:line="237" pos:column="33">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="238" pos:column="13">base</name><op:operator pos:line="238" pos:column="17">.</op:operator><name pos:line="238" pos:column="18">Dispose</name></name><argument_list pos:line="238" pos:column="25">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <cpp:endregion pos:line="240" pos:column="9">#<cpp:directive pos:line="240" pos:column="10">endregion</cpp:directive> IDisposable members</cpp:endregion>
    }</block></class>
}</block></namespace>
</unit>
