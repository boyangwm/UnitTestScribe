<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="D:\Research\Subjects\SrcML.NET\TestInputs\class_test_main.cpp" pos:tabs="8"><cpp:include pos:line="1" pos:column="1">#<cpp:directive pos:line="1" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="1" pos:column="10">"class_test.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="2" pos:column="1">#<cpp:directive pos:line="2" pos:column="2">include</cpp:directive> <cpp:file pos:line="2" pos:column="10">&lt;iostream&gt;</cpp:file></cpp:include>

<function><type><name pos:line="4" pos:column="1">int</name></type> <name pos:line="4" pos:column="5">main</name><parameter_list pos:line="4" pos:column="9">()</parameter_list> <block pos:line="4" pos:column="12">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">TestClass</name></type> <name pos:line="5" pos:column="13">test</name> <init pos:line="5" pos:column="18">= <expr><call><name pos:line="5" pos:column="20">TestClass</name><argument_list pos:line="5" pos:column="29">()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">TestClass</name> <type:modifier pos:line="6" pos:column="13">*</type:modifier></type><name pos:line="6" pos:column="14">test_pointer</name> <init pos:line="6" pos:column="27">= <expr><op:operator pos:line="6" pos:column="29">new</op:operator> <call><name pos:line="6" pos:column="33">TestClass</name><argument_list pos:line="6" pos:column="42">()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name pos:line="7" pos:column="3">test</name><op:operator pos:line="7" pos:column="7">.</op:operator><name pos:line="7" pos:column="8">z</name></name> <op:operator pos:line="7" pos:column="10">=</op:operator> <lit:literal type="number" pos:line="7" pos:column="12">5</lit:literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name pos:line="8" pos:column="3">test_pointer</name><op:operator pos:line="8" pos:column="15">-&gt;</op:operator><name pos:line="8" pos:column="17">z</name></name> <op:operator pos:line="8" pos:column="19">=</op:operator> <lit:literal type="number" pos:line="8" pos:column="21">5</lit:literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name pos:line="9" pos:column="3">std</name><op:operator pos:line="9" pos:column="6">::</op:operator><name pos:line="9" pos:column="8">cout</name></name> <op:operator pos:line="9" pos:column="13">&lt;&lt;</op:operator> <lit:literal type="string" pos:line="9" pos:column="16">"test.z = "</lit:literal> <op:operator pos:line="9" pos:column="28">&lt;&lt;</op:operator> <name><name pos:line="9" pos:column="31">test</name><op:operator pos:line="9" pos:column="35">.</op:operator><name pos:line="9" pos:column="36">z</name></name> <op:operator pos:line="9" pos:column="38">&lt;&lt;</op:operator> <name><name pos:line="9" pos:column="41">std</name><op:operator pos:line="9" pos:column="44">::</op:operator><name pos:line="9" pos:column="46">endl</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name pos:line="10" pos:column="3">std</name><op:operator pos:line="10" pos:column="6">::</op:operator><name pos:line="10" pos:column="8">cout</name></name> <op:operator pos:line="10" pos:column="13">&lt;&lt;</op:operator> <lit:literal type="string" pos:line="10" pos:column="16">"test_pointer-&gt;z = "</lit:literal> <op:operator pos:line="10" pos:column="37">&lt;&lt;</op:operator> <name><name pos:line="10" pos:column="40">test_pointer</name><op:operator pos:line="10" pos:column="52">-&gt;</op:operator><name pos:line="10" pos:column="54">z</name></name> <op:operator pos:line="10" pos:column="56">&lt;&lt;</op:operator> <name><name pos:line="10" pos:column="59">std</name><op:operator pos:line="10" pos:column="62">::</op:operator><name pos:line="10" pos:column="64">endl</name></name></expr>;</expr_stmt>
  <return pos:line="11" pos:column="3">return <expr><lit:literal type="number" pos:line="11" pos:column="10">0</lit:literal></expr>;</return>
}</block></function>
</unit>
