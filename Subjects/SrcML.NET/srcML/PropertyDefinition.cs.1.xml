<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data\PropertyDefinition.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2014 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Patrick Francis (ABB Group) - initial API, implementation, &amp; documentation
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Collections</name><op:operator pos:line="13" pos:column="25">.</op:operator><name pos:line="13" pos:column="26">Generic</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Linq</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Xml</name></name>;</using>

<namespace pos:line="17" pos:column="1">namespace <name><name pos:line="17" pos:column="11">ABB</name><op:operator pos:line="17" pos:column="14">.</op:operator><name pos:line="17" pos:column="15">SrcML</name><op:operator pos:line="17" pos:column="20">.</op:operator><name pos:line="17" pos:column="21">Data</name></name> <block pos:line="17" pos:column="26">{
    <comment type="line" pos:line="18" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="19" pos:column="5">/// Represents a property in C#.</comment>
    <comment type="line" pos:line="20" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="21" pos:column="5">public</specifier> class <name pos:line="21" pos:column="18">PropertyDefinition</name> <super pos:line="21" pos:column="37">: <name pos:line="21" pos:column="39">NamedScope</name></super> <block pos:line="21" pos:column="50">{
        <decl_stmt><decl><type><specifier pos:line="22" pos:column="9">private</specifier> <name pos:line="22" pos:column="17">MethodDefinition</name></type> <name pos:line="22" pos:column="34">getter</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="23" pos:column="9">private</specifier> <name pos:line="23" pos:column="17">MethodDefinition</name></type> <name pos:line="23" pos:column="34">setter</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="24" pos:column="9">private</specifier> <name pos:line="24" pos:column="17">TypeUse</name></type> <name pos:line="24" pos:column="25">returnType</name></decl>;</decl_stmt>

        <comment type="line" pos:line="26" pos:column="9">/// &lt;summary&gt; The XML name for PropertyDefinition &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="27" pos:column="9">public</specifier> <specifier pos:line="27" pos:column="16">new</specifier> <specifier pos:line="27" pos:column="20">const</specifier> <name pos:line="27" pos:column="26">string</name></type> <name pos:line="27" pos:column="33">XmlName</name> <init pos:line="27" pos:column="41">= <expr><lit:literal type="string" pos:line="27" pos:column="43">"Property"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="29" pos:column="9">/// &lt;summary&gt; XML Name for &lt;see cref="Getter" /&gt; &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="30" pos:column="9">public</specifier> <specifier pos:line="30" pos:column="16">const</specifier> <name pos:line="30" pos:column="22">string</name></type> <name pos:line="30" pos:column="29">XmlGetterName</name> <init pos:line="30" pos:column="43">= <expr><lit:literal type="string" pos:line="30" pos:column="45">"Getter"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="32" pos:column="9">/// &lt;summary&gt; XML Name for &lt;see cref="Setter" /&gt; &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="33" pos:column="9">public</specifier> <specifier pos:line="33" pos:column="16">const</specifier> <name pos:line="33" pos:column="22">string</name></type> <name pos:line="33" pos:column="29">XmlSetterName</name> <init pos:line="33" pos:column="43">= <expr><lit:literal type="string" pos:line="33" pos:column="45">"Setter"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="35" pos:column="9">/// &lt;summary&gt; XML Name for &lt;see cref="ReturnType" /&gt; &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="36" pos:column="9">public</specifier> <specifier pos:line="36" pos:column="16">const</specifier> <name pos:line="36" pos:column="22">string</name></type> <name pos:line="36" pos:column="29">XmlReturnTypeName</name> <init pos:line="36" pos:column="47">= <expr><lit:literal type="string" pos:line="36" pos:column="49">"ReturnType"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="38" pos:column="9">/// &lt;summary&gt; Creates a new default PropertyDefinition. &lt;/summary&gt;</comment>
        <constructor><specifier pos:line="39" pos:column="9">public</specifier> <name pos:line="39" pos:column="16">PropertyDefinition</name><parameter_list pos:line="39" pos:column="34">()</parameter_list> <member_list pos:line="39" pos:column="37">: <call><name pos:line="39" pos:column="39">base</name><argument_list pos:line="39" pos:column="43">()</argument_list></call> </member_list><block pos:line="39" pos:column="46">{
            <expr_stmt><expr><name pos:line="40" pos:column="13">getter</name> <op:operator pos:line="40" pos:column="20">=</op:operator> <name pos:line="40" pos:column="22">null</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="41" pos:column="13">setter</name> <op:operator pos:line="41" pos:column="20">=</op:operator> <name pos:line="41" pos:column="22">null</name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="44" pos:column="9">/// &lt;summary&gt; The type of the property. &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="45" pos:column="9">public</specifier> <name pos:line="45" pos:column="16">TypeUse</name></type> <name pos:line="45" pos:column="24">ReturnType</name> <block pos:line="45" pos:column="35">{
            <function><name pos:line="46" pos:column="13">get</name> <block pos:line="46" pos:column="17">{ <return pos:line="46" pos:column="19">return <expr><name pos:line="46" pos:column="26">returnType</name></expr>;</return> }</block></function>
            <function><name pos:line="47" pos:column="13">set</name> <block pos:line="47" pos:column="17">{
                <expr_stmt><expr><name pos:line="48" pos:column="17">returnType</name> <op:operator pos:line="48" pos:column="28">=</op:operator> <name pos:line="48" pos:column="30">value</name></expr>;</expr_stmt>
                <if pos:line="49" pos:column="17">if<condition pos:line="49" pos:column="19">(<expr><name pos:line="49" pos:column="20">returnType</name> <op:operator pos:line="49" pos:column="31">!=</op:operator> <name pos:line="49" pos:column="34">null</name></expr>)</condition><then pos:line="49" pos:column="39"> <block pos:line="49" pos:column="40">{
                    <expr_stmt><expr><name><name pos:line="50" pos:column="21">returnType</name><op:operator pos:line="50" pos:column="31">.</op:operator><name pos:line="50" pos:column="32">ParentStatement</name></name> <op:operator pos:line="50" pos:column="48">=</op:operator> <name pos:line="50" pos:column="50">this</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="55" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="56" pos:column="9">/// The getter method for this property, if any.</comment>
        <comment type="line" pos:line="57" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="58" pos:column="9">public</specifier> <name pos:line="58" pos:column="16">MethodDefinition</name></type> <name pos:line="58" pos:column="33">Getter</name> <block pos:line="58" pos:column="40">{
            <function><name pos:line="59" pos:column="13">get</name> <block pos:line="59" pos:column="17">{
                <if pos:line="60" pos:column="17">if<condition pos:line="60" pos:column="19">(<expr><name pos:line="60" pos:column="20">getter</name> <op:operator pos:line="60" pos:column="27">==</op:operator> <name pos:line="60" pos:column="30">null</name></expr>)</condition><then pos:line="60" pos:column="35"> <block pos:line="60" pos:column="36">{
                    <expr_stmt><expr><name pos:line="61" pos:column="21">getter</name> <op:operator pos:line="61" pos:column="28">=</op:operator> <call><name pos:line="61" pos:column="30">SearchForGetter</name><argument_list pos:line="61" pos:column="45">()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <return pos:line="63" pos:column="17">return <expr><name pos:line="63" pos:column="24">getter</name></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="67" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="68" pos:column="9">/// The setter method for this property, if any.</comment>
        <comment type="line" pos:line="69" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="70" pos:column="9">public</specifier> <name pos:line="70" pos:column="16">MethodDefinition</name></type> <name pos:line="70" pos:column="33">Setter</name> <block pos:line="70" pos:column="40">{
            <function><name pos:line="71" pos:column="13">get</name> <block pos:line="71" pos:column="17">{
                <if pos:line="72" pos:column="17">if<condition pos:line="72" pos:column="19">(<expr><name pos:line="72" pos:column="20">setter</name> <op:operator pos:line="72" pos:column="27">==</op:operator> <name pos:line="72" pos:column="30">null</name></expr>)</condition><then pos:line="72" pos:column="35"> <block pos:line="72" pos:column="36">{
                    <expr_stmt><expr><name pos:line="73" pos:column="21">setter</name> <op:operator pos:line="73" pos:column="28">=</op:operator> <call><name pos:line="73" pos:column="30">SearchForSetter</name><argument_list pos:line="73" pos:column="45">()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <return pos:line="75" pos:column="17">return <expr><name pos:line="75" pos:column="24">setter</name></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="79" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="80" pos:column="9">/// Adds the given Statement to the ChildStatements collection.</comment>
        <comment type="line" pos:line="81" pos:column="9">/// Also assigns it to Getter or Setter, as appropriate.</comment>
        <comment type="line" pos:line="82" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="83" pos:column="9">/// &lt;param name="child"&gt;The Statement to add.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="84" pos:column="9">public</specifier> <specifier pos:line="84" pos:column="16">override</specifier> <name pos:line="84" pos:column="25">void</name></type> <name pos:line="84" pos:column="30">AddChildStatement</name><parameter_list pos:line="84" pos:column="47">(<param><decl><type><name pos:line="84" pos:column="48">Statement</name></type> <name pos:line="84" pos:column="58">child</name></decl></param>)</parameter_list> <block pos:line="84" pos:column="65">{
            <expr_stmt><expr><call><name><name pos:line="85" pos:column="13">base</name><op:operator pos:line="85" pos:column="17">.</op:operator><name pos:line="85" pos:column="18">AddChildStatement</name></name><argument_list pos:line="85" pos:column="35">(<argument><expr><name pos:line="85" pos:column="36">child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if pos:line="86" pos:column="13">if<condition pos:line="86" pos:column="15">(<expr><name pos:line="86" pos:column="16">null</name> <op:operator pos:line="86" pos:column="21">!=</op:operator> <name pos:line="86" pos:column="24">child</name></expr>)</condition><then pos:line="86" pos:column="30"> <block pos:line="86" pos:column="31">{
                <decl_stmt><decl><type><name pos:line="87" pos:column="17">var</name></type> <name pos:line="87" pos:column="21">method</name> <init pos:line="87" pos:column="28">= <expr><name pos:line="87" pos:column="30">child</name> <op:operator pos:line="87" pos:column="36">as</op:operator> <name pos:line="87" pos:column="39">MethodDefinition</name></expr></init></decl>;</decl_stmt>
                <if pos:line="88" pos:column="17">if<condition pos:line="88" pos:column="19">(<expr><name pos:line="88" pos:column="20">method</name> <op:operator pos:line="88" pos:column="27">!=</op:operator> <name pos:line="88" pos:column="30">null</name></expr>)</condition><then pos:line="88" pos:column="35"> <block pos:line="88" pos:column="36">{
                    <if pos:line="89" pos:column="21">if<condition pos:line="89" pos:column="23">(<expr><name><name pos:line="89" pos:column="24">method</name><op:operator pos:line="89" pos:column="30">.</op:operator><name pos:line="89" pos:column="31">Name</name></name> <op:operator pos:line="89" pos:column="36">==</op:operator> <lit:literal type="string" pos:line="89" pos:column="39">"get"</lit:literal></expr>)</condition><then pos:line="89" pos:column="45"> <block pos:line="89" pos:column="46">{
                        <expr_stmt><expr><name><name pos:line="90" pos:column="25">this</name><op:operator pos:line="90" pos:column="29">.</op:operator><name pos:line="90" pos:column="30">getter</name></name> <op:operator pos:line="90" pos:column="37">=</op:operator> <name pos:line="90" pos:column="39">method</name></expr>;</expr_stmt>
                    }</block></then> <else pos:line="91" pos:column="23">else <if pos:line="91" pos:column="28">if<condition pos:line="91" pos:column="30">(<expr><name><name pos:line="91" pos:column="31">method</name><op:operator pos:line="91" pos:column="37">.</op:operator><name pos:line="91" pos:column="38">Name</name></name> <op:operator pos:line="91" pos:column="43">==</op:operator> <lit:literal type="string" pos:line="91" pos:column="46">"set"</lit:literal></expr>)</condition><then pos:line="91" pos:column="52"> <block pos:line="91" pos:column="53">{
                        <expr_stmt><expr><name><name pos:line="92" pos:column="25">this</name><op:operator pos:line="92" pos:column="29">.</op:operator><name pos:line="92" pos:column="30">setter</name></name> <op:operator pos:line="92" pos:column="37">=</op:operator> <name pos:line="92" pos:column="39">method</name></expr>;</expr_stmt>
                    }</block></then></if></else></if>
                }</block></then></if>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="98" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="99" pos:column="9">/// Instance method for getting &lt;see cref="PropertyDefinition.XmlName"/&gt;</comment>
        <comment type="line" pos:line="100" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="101" pos:column="9">/// &lt;returns&gt;Returns the XML name for PropertyDefinition&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="102" pos:column="9">public</specifier> <specifier pos:line="102" pos:column="16">override</specifier> <name pos:line="102" pos:column="25">string</name></type> <name pos:line="102" pos:column="32">GetXmlName</name><parameter_list pos:line="102" pos:column="42">()</parameter_list> <block pos:line="102" pos:column="45">{ <return pos:line="102" pos:column="47">return <expr><name><name pos:line="102" pos:column="54">PropertyDefinition</name><op:operator pos:line="102" pos:column="72">.</op:operator><name pos:line="102" pos:column="73">XmlName</name></name></expr>;</return> }</block></function>

        <comment type="line" pos:line="104" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="105" pos:column="9">/// Processes the child of the current reader position into a child of this object.</comment>
        <comment type="line" pos:line="106" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="107" pos:column="9">/// &lt;param name="reader"&gt;The XML reader&lt;/param&gt;</comment>
        <function><type><specifier pos:line="108" pos:column="9">protected</specifier> <specifier pos:line="108" pos:column="19">override</specifier> <name pos:line="108" pos:column="28">void</name></type> <name pos:line="108" pos:column="33">ReadXmlChild</name><parameter_list pos:line="108" pos:column="45">(<param><decl><type><name pos:line="108" pos:column="46">XmlReader</name></type> <name pos:line="108" pos:column="56">reader</name></decl></param>)</parameter_list> <block pos:line="108" pos:column="64">{
            <if pos:line="109" pos:column="13">if<condition pos:line="109" pos:column="15">(<expr><name pos:line="109" pos:column="16">XmlGetterName</name> <op:operator pos:line="109" pos:column="30">==</op:operator> <name><name pos:line="109" pos:column="33">reader</name><op:operator pos:line="109" pos:column="39">.</op:operator><name pos:line="109" pos:column="40">Name</name></name></expr>)</condition><then pos:line="109" pos:column="45"> <block pos:line="109" pos:column="46">{
                <expr_stmt><expr><name pos:line="110" pos:column="17">getter</name> <op:operator pos:line="110" pos:column="24">=</op:operator> <call><name><name pos:line="110" pos:column="26">XmlSerialization</name><op:operator pos:line="110" pos:column="42">.</op:operator><name pos:line="110" pos:column="43">ReadChildStatement</name></name><argument_list pos:line="110" pos:column="61">(<argument><expr><name pos:line="110" pos:column="62">reader</name></expr></argument>)</argument_list></call> <op:operator pos:line="110" pos:column="70">as</op:operator> <name pos:line="110" pos:column="73">MethodDefinition</name></expr>;</expr_stmt>
            }</block></then> <else pos:line="111" pos:column="15">else <if pos:line="111" pos:column="20">if<condition pos:line="111" pos:column="22">(<expr><name pos:line="111" pos:column="23">XmlSetterName</name> <op:operator pos:line="111" pos:column="37">==</op:operator> <name><name pos:line="111" pos:column="40">reader</name><op:operator pos:line="111" pos:column="46">.</op:operator><name pos:line="111" pos:column="47">Name</name></name></expr>)</condition><then pos:line="111" pos:column="52"> <block pos:line="111" pos:column="53">{
                <expr_stmt><expr><name pos:line="112" pos:column="17">setter</name> <op:operator pos:line="112" pos:column="24">=</op:operator> <call><name><name pos:line="112" pos:column="26">XmlSerialization</name><op:operator pos:line="112" pos:column="42">.</op:operator><name pos:line="112" pos:column="43">ReadChildStatement</name></name><argument_list pos:line="112" pos:column="61">(<argument><expr><name pos:line="112" pos:column="62">reader</name></expr></argument>)</argument_list></call> <op:operator pos:line="112" pos:column="70">as</op:operator> <name pos:line="112" pos:column="73">MethodDefinition</name></expr>;</expr_stmt>
            }</block></then> <else pos:line="113" pos:column="15">else <if pos:line="113" pos:column="20">if<condition pos:line="113" pos:column="22">(<expr><name pos:line="113" pos:column="23">XmlReturnTypeName</name> <op:operator pos:line="113" pos:column="41">==</op:operator> <name><name pos:line="113" pos:column="44">reader</name><op:operator pos:line="113" pos:column="50">.</op:operator><name pos:line="113" pos:column="51">Name</name></name></expr>)</condition><then pos:line="113" pos:column="56"> <block pos:line="113" pos:column="57">{
                <expr_stmt><expr><name pos:line="114" pos:column="17">ReturnType</name> <op:operator pos:line="114" pos:column="28">=</op:operator> <call><name><name pos:line="114" pos:column="30">XmlSerialization</name><op:operator pos:line="114" pos:column="46">.</op:operator><name pos:line="114" pos:column="47">ReadChildExpression</name></name><argument_list pos:line="114" pos:column="66">(<argument><expr><name pos:line="114" pos:column="67">reader</name></expr></argument>)</argument_list></call> <op:operator pos:line="114" pos:column="75">as</op:operator> <name pos:line="114" pos:column="78">TypeUse</name></expr>;</expr_stmt>
            }</block></then> <else pos:line="115" pos:column="15">else <block pos:line="115" pos:column="20">{
                <expr_stmt><expr><call><name><name pos:line="116" pos:column="17">base</name><op:operator pos:line="116" pos:column="21">.</op:operator><name pos:line="116" pos:column="22">ReadXmlChild</name></name><argument_list pos:line="116" pos:column="34">(<argument><expr><name pos:line="116" pos:column="35">reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if></else></if></else></if>
        }</block></function>

        <comment type="line" pos:line="120" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="121" pos:column="9">/// Writes the contents of this object to &lt;paramref name="writer"/&gt;.</comment>
        <comment type="line" pos:line="122" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="123" pos:column="9">/// &lt;param name="writer"&gt;The XML writer to write to&lt;/param&gt;</comment>
        <function><type><specifier pos:line="124" pos:column="9">protected</specifier> <specifier pos:line="124" pos:column="19">override</specifier> <name pos:line="124" pos:column="28">void</name></type> <name pos:line="124" pos:column="33">WriteXmlContents</name><parameter_list pos:line="124" pos:column="49">(<param><decl><type><name pos:line="124" pos:column="50">XmlWriter</name></type> <name pos:line="124" pos:column="60">writer</name></decl></param>)</parameter_list> <block pos:line="124" pos:column="68">{
            <expr_stmt><expr><call><name><name pos:line="125" pos:column="13">base</name><op:operator pos:line="125" pos:column="17">.</op:operator><name pos:line="125" pos:column="18">WriteXmlContents</name></name><argument_list pos:line="125" pos:column="34">(<argument><expr><name pos:line="125" pos:column="35">writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if pos:line="126" pos:column="13">if<condition pos:line="126" pos:column="15">(<expr><name pos:line="126" pos:column="16">null</name> <op:operator pos:line="126" pos:column="21">!=</op:operator> <name pos:line="126" pos:column="24">Getter</name></expr>)</condition><then pos:line="126" pos:column="31"> <block pos:line="126" pos:column="32">{
                <expr_stmt><expr><call><name><name pos:line="127" pos:column="17">XmlSerialization</name><op:operator pos:line="127" pos:column="33">.</op:operator><name pos:line="127" pos:column="34">WriteElement</name></name><argument_list pos:line="127" pos:column="46">(<argument><expr><name pos:line="127" pos:column="47">writer</name></expr></argument>, <argument><expr><name pos:line="127" pos:column="55">Getter</name></expr></argument>, <argument><expr><name pos:line="127" pos:column="63">XmlGetterName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if pos:line="129" pos:column="13">if<condition pos:line="129" pos:column="15">(<expr><name pos:line="129" pos:column="16">null</name> <op:operator pos:line="129" pos:column="21">!=</op:operator> <name pos:line="129" pos:column="24">Setter</name></expr>)</condition><then pos:line="129" pos:column="31"> <block pos:line="129" pos:column="32">{
                <expr_stmt><expr><call><name><name pos:line="130" pos:column="17">XmlSerialization</name><op:operator pos:line="130" pos:column="33">.</op:operator><name pos:line="130" pos:column="34">WriteElement</name></name><argument_list pos:line="130" pos:column="46">(<argument><expr><name pos:line="130" pos:column="47">writer</name></expr></argument>, <argument><expr><name pos:line="130" pos:column="55">Setter</name></expr></argument>, <argument><expr><name pos:line="130" pos:column="63">XmlSetterName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if pos:line="132" pos:column="13">if<condition pos:line="132" pos:column="15">(<expr><name pos:line="132" pos:column="16">null</name> <op:operator pos:line="132" pos:column="21">!=</op:operator> <name pos:line="132" pos:column="24">ReturnType</name></expr>)</condition><then pos:line="132" pos:column="35"> <block pos:line="132" pos:column="36">{
                <expr_stmt><expr><call><name><name pos:line="133" pos:column="17">XmlSerialization</name><op:operator pos:line="133" pos:column="33">.</op:operator><name pos:line="133" pos:column="34">WriteElement</name></name><argument_list pos:line="133" pos:column="46">(<argument><expr><name pos:line="133" pos:column="47">writer</name></expr></argument>, <argument><expr><name pos:line="133" pos:column="55">ReturnType</name></expr></argument>, <argument><expr><name pos:line="133" pos:column="67">XmlReturnTypeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="137" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="138" pos:column="9">/// Returns all the expressions within this statement.</comment>
        <comment type="line" pos:line="139" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="140" pos:column="9">public</specifier> <specifier pos:line="140" pos:column="16">override</specifier> <name><name pos:line="140" pos:column="25">IEnumerable</name><argument_list pos:line="140" pos:column="36">&lt;<argument><name pos:line="140" pos:column="37">Expression</name></argument>&gt;</argument_list></name></type> <name pos:line="140" pos:column="49">GetExpressions</name><parameter_list pos:line="140" pos:column="63">()</parameter_list> <block pos:line="140" pos:column="66">{
            <if pos:line="141" pos:column="13">if<condition pos:line="141" pos:column="15">(<expr><name pos:line="141" pos:column="16">ReturnType</name> <op:operator pos:line="141" pos:column="27">!=</op:operator> <name pos:line="141" pos:column="30">null</name></expr>)</condition><then pos:line="141" pos:column="35"> <block pos:line="141" pos:column="36">{
                <return><specifier pos:line="142" pos:column="17">yield</specifier> return <expr><name pos:line="142" pos:column="30">ReturnType</name></expr>;</return>
            }</block></then></if>
            <if pos:line="144" pos:column="13">if<condition pos:line="144" pos:column="15">(<expr><name pos:line="144" pos:column="16">Prefix</name> <op:operator pos:line="144" pos:column="23">!=</op:operator> <name pos:line="144" pos:column="26">null</name></expr>)</condition><then pos:line="144" pos:column="31"> <block pos:line="144" pos:column="32">{
                <return><specifier pos:line="145" pos:column="17">yield</specifier> return <expr><name pos:line="145" pos:column="30">Prefix</name></expr>;</return>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="149" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="150" pos:column="9">/// Returns a string representation of this statement.</comment>
        <comment type="line" pos:line="151" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="152" pos:column="9">public</specifier> <specifier pos:line="152" pos:column="16">override</specifier> <name pos:line="152" pos:column="25">string</name></type> <name pos:line="152" pos:column="32">ToString</name><parameter_list pos:line="152" pos:column="40">()</parameter_list> <block pos:line="152" pos:column="43">{
            <if pos:line="153" pos:column="13">if<condition pos:line="153" pos:column="15">(<expr><name pos:line="153" pos:column="16">Accessibility</name> <op:operator pos:line="153" pos:column="30">==</op:operator> <name><name pos:line="153" pos:column="33">AccessModifier</name><op:operator pos:line="153" pos:column="47">.</op:operator><name pos:line="153" pos:column="48">None</name></name></expr>)</condition><then pos:line="153" pos:column="53"> <block pos:line="153" pos:column="54">{
                <return pos:line="154" pos:column="17">return <expr><call><name><name pos:line="154" pos:column="24">string</name><op:operator pos:line="154" pos:column="30">.</op:operator><name pos:line="154" pos:column="31">Format</name></name><argument_list pos:line="154" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="154" pos:column="38">"{0} {1}"</lit:literal></expr></argument>, <argument><expr><name pos:line="154" pos:column="49">ReturnType</name></expr></argument>, <argument><expr><name pos:line="154" pos:column="61">Name</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then> <else pos:line="155" pos:column="15">else <block pos:line="155" pos:column="20">{
                <return pos:line="156" pos:column="17">return <expr><call><name><name pos:line="156" pos:column="24">string</name><op:operator pos:line="156" pos:column="30">.</op:operator><name pos:line="156" pos:column="31">Format</name></name><argument_list pos:line="156" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="156" pos:column="38">"{0} {1} {2}"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="156" pos:column="53">Accessibility</name><op:operator pos:line="156" pos:column="66">.</op:operator><name pos:line="156" pos:column="67">ToKeywordString</name></name><argument_list pos:line="156" pos:column="82">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="156" pos:column="86">ReturnType</name></expr></argument>, <argument><expr><name pos:line="156" pos:column="98">Name</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></else></if>
        }</block></function>

        <cpp:region pos:line="160" pos:column="9">#<cpp:directive pos:line="160" pos:column="10">region</cpp:directive> Private Methods</cpp:region>
        <function><type><specifier pos:line="161" pos:column="9">private</specifier> <name pos:line="161" pos:column="17">MethodDefinition</name></type> <name pos:line="161" pos:column="34">SearchForGetter</name><parameter_list pos:line="161" pos:column="49">()</parameter_list> <block pos:line="161" pos:column="52">{
            <return pos:line="162" pos:column="13">return <expr><call><name><name pos:line="162" pos:column="20">ChildStatements</name><op:operator pos:line="162" pos:column="35">.</op:operator><name><name pos:line="162" pos:column="36">OfType</name><argument_list pos:line="162" pos:column="42">&lt;<argument><name pos:line="162" pos:column="43">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="162" pos:column="60">()</argument_list></call><op:operator pos:line="162" pos:column="62">.</op:operator><call><name pos:line="162" pos:column="63">FirstOrDefault</name><argument_list pos:line="162" pos:column="77">(<argument><expr><lambda><name pos:line="162" pos:column="78">m</name> <op:operator pos:line="162" pos:column="80">=&gt;</op:operator> <name><name pos:line="162" pos:column="83">m</name><op:operator pos:line="162" pos:column="84">.</op:operator><name pos:line="162" pos:column="85">Name</name></name> <op:operator pos:line="162" pos:column="90">==</op:operator> <lit:literal type="string" pos:line="162" pos:column="93">"get"</lit:literal></lambda></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="165" pos:column="9">private</specifier> <name pos:line="165" pos:column="17">MethodDefinition</name></type> <name pos:line="165" pos:column="34">SearchForSetter</name><parameter_list pos:line="165" pos:column="49">()</parameter_list> <block pos:line="165" pos:column="52">{
            <return pos:line="166" pos:column="13">return <expr><call><name><name pos:line="166" pos:column="20">ChildStatements</name><op:operator pos:line="166" pos:column="35">.</op:operator><name><name pos:line="166" pos:column="36">OfType</name><argument_list pos:line="166" pos:column="42">&lt;<argument><name pos:line="166" pos:column="43">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="166" pos:column="60">()</argument_list></call><op:operator pos:line="166" pos:column="62">.</op:operator><call><name pos:line="166" pos:column="63">FirstOrDefault</name><argument_list pos:line="166" pos:column="77">(<argument><expr><lambda><name pos:line="166" pos:column="78">m</name> <op:operator pos:line="166" pos:column="80">=&gt;</op:operator> <name><name pos:line="166" pos:column="83">m</name><op:operator pos:line="166" pos:column="84">.</op:operator><name pos:line="166" pos:column="85">Name</name></name> <op:operator pos:line="166" pos:column="90">==</op:operator> <lit:literal type="string" pos:line="166" pos:column="93">"set"</lit:literal></lambda></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
        <cpp:endregion pos:line="168" pos:column="9">#<cpp:directive pos:line="168" pos:column="10">endregion</cpp:directive></cpp:endregion>
    }</block></class>
}</block></namespace>
</unit>
