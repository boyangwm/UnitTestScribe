<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data.Test\SourceLocationTests.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">NUnit</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">Framework</name></name>;</using>

<namespace pos:line="3" pos:column="1">namespace <name><name pos:line="3" pos:column="11">ABB</name><op:operator pos:line="3" pos:column="14">.</op:operator><name pos:line="3" pos:column="15">SrcML</name><op:operator pos:line="3" pos:column="20">.</op:operator><name pos:line="3" pos:column="21">Data</name><op:operator pos:line="3" pos:column="25">.</op:operator><name pos:line="3" pos:column="26">Test</name></name> <block pos:line="3" pos:column="31">{

    <class><attribute pos:line="5" pos:column="5">[<expr><name pos:line="5" pos:column="6">TestFixture</name></expr>]</attribute>
    <attribute pos:line="6" pos:column="5">[<expr><call><name pos:line="6" pos:column="6">Category</name><argument_list pos:line="6" pos:column="14">(<argument><expr><lit:literal type="string" pos:line="6" pos:column="15">"Build"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="7" pos:column="5">internal</specifier> class <name pos:line="7" pos:column="20">SourceLocationTests</name> <block pos:line="7" pos:column="40">{

        <function><type><attribute pos:line="9" pos:column="9">[<expr><name pos:line="9" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="10" pos:column="9">public</specifier> <name pos:line="10" pos:column="16">void</name></type> <name pos:line="10" pos:column="21">TestContains_DifferentLines</name><parameter_list pos:line="10" pos:column="48">()</parameter_list> <block pos:line="10" pos:column="51">{
            <decl_stmt><decl><type><name pos:line="11" pos:column="13">var</name></type> <name pos:line="11" pos:column="17">outer</name> <init pos:line="11" pos:column="23">= <expr><op:operator pos:line="11" pos:column="25">new</op:operator> <call><name pos:line="11" pos:column="29">SourceLocation</name><argument_list pos:line="11" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="11" pos:column="44">"Foo.cpp"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="11" pos:column="55">3</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="11" pos:column="58">5</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="11" pos:column="61">10</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="11" pos:column="65">60</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="12" pos:column="13">var</name></type> <name pos:line="12" pos:column="17">inner</name> <init pos:line="12" pos:column="23">= <expr><op:operator pos:line="12" pos:column="25">new</op:operator> <call><name pos:line="12" pos:column="29">SourceLocation</name><argument_list pos:line="12" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="12" pos:column="44">"Foo.cpp"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="12" pos:column="55">4</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="12" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="12" pos:column="61">5</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="12" pos:column="64">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="13" pos:column="13">Assert</name><op:operator pos:line="13" pos:column="19">.</op:operator><name pos:line="13" pos:column="20">IsTrue</name></name><argument_list pos:line="13" pos:column="26">(<argument><expr><call><name><name pos:line="13" pos:column="27">outer</name><op:operator pos:line="13" pos:column="32">.</op:operator><name pos:line="13" pos:column="33">Contains</name></name><argument_list pos:line="13" pos:column="41">(<argument><expr><name pos:line="13" pos:column="42">inner</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="14" pos:column="13">Assert</name><op:operator pos:line="14" pos:column="19">.</op:operator><name pos:line="14" pos:column="20">IsFalse</name></name><argument_list pos:line="14" pos:column="27">(<argument><expr><call><name><name pos:line="14" pos:column="28">inner</name><op:operator pos:line="14" pos:column="33">.</op:operator><name pos:line="14" pos:column="34">Contains</name></name><argument_list pos:line="14" pos:column="42">(<argument><expr><name pos:line="14" pos:column="43">outer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="17" pos:column="9">[<expr><name pos:line="17" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="18" pos:column="9">public</specifier> <name pos:line="18" pos:column="16">void</name></type> <name pos:line="18" pos:column="21">TestContains_Overlapping</name><parameter_list pos:line="18" pos:column="45">()</parameter_list> <block pos:line="18" pos:column="48">{
            <decl_stmt><decl><type><name pos:line="19" pos:column="13">var</name></type> <name pos:line="19" pos:column="17">outer</name> <init pos:line="19" pos:column="23">= <expr><op:operator pos:line="19" pos:column="25">new</op:operator> <call><name pos:line="19" pos:column="29">SourceLocation</name><argument_list pos:line="19" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="19" pos:column="44">"Foo.cpp"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="19" pos:column="55">3</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="19" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="19" pos:column="61">10</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="19" pos:column="65">60</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="20" pos:column="13">var</name></type> <name pos:line="20" pos:column="17">inner</name> <init pos:line="20" pos:column="23">= <expr><op:operator pos:line="20" pos:column="25">new</op:operator> <call><name pos:line="20" pos:column="29">SourceLocation</name><argument_list pos:line="20" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="20" pos:column="44">"Foo.cpp"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="20" pos:column="55">4</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="20" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="20" pos:column="61">11</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="20" pos:column="65">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="21" pos:column="13">Assert</name><op:operator pos:line="21" pos:column="19">.</op:operator><name pos:line="21" pos:column="20">IsFalse</name></name><argument_list pos:line="21" pos:column="27">(<argument><expr><call><name><name pos:line="21" pos:column="28">outer</name><op:operator pos:line="21" pos:column="33">.</op:operator><name pos:line="21" pos:column="34">Contains</name></name><argument_list pos:line="21" pos:column="42">(<argument><expr><name pos:line="21" pos:column="43">inner</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="22" pos:column="13">Assert</name><op:operator pos:line="22" pos:column="19">.</op:operator><name pos:line="22" pos:column="20">IsFalse</name></name><argument_list pos:line="22" pos:column="27">(<argument><expr><call><name><name pos:line="22" pos:column="28">inner</name><op:operator pos:line="22" pos:column="33">.</op:operator><name pos:line="22" pos:column="34">Contains</name></name><argument_list pos:line="22" pos:column="42">(<argument><expr><name pos:line="22" pos:column="43">outer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="25" pos:column="9">[<expr><name pos:line="25" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="26" pos:column="9">public</specifier> <name pos:line="26" pos:column="16">void</name></type> <name pos:line="26" pos:column="21">TestContains_Point</name><parameter_list pos:line="26" pos:column="39">()</parameter_list> <block pos:line="26" pos:column="42">{
            <decl_stmt><decl><type><name pos:line="27" pos:column="13">var</name></type> <name pos:line="27" pos:column="17">outer</name> <init pos:line="27" pos:column="23">= <expr><op:operator pos:line="27" pos:column="25">new</op:operator> <call><name pos:line="27" pos:column="29">SourceLocation</name><argument_list pos:line="27" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="27" pos:column="44">"Foo.cpp"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="27" pos:column="55">3</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="27" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="27" pos:column="61">10</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="27" pos:column="65">60</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="28" pos:column="13">var</name></type> <name pos:line="28" pos:column="17">inner</name> <init pos:line="28" pos:column="23">= <expr><op:operator pos:line="28" pos:column="25">new</op:operator> <call><name pos:line="28" pos:column="29">SourceLocation</name><argument_list pos:line="28" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="28" pos:column="44">"Foo.cpp"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="28" pos:column="55">4</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="28" pos:column="58">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="29" pos:column="13">Assert</name><op:operator pos:line="29" pos:column="19">.</op:operator><name pos:line="29" pos:column="20">IsTrue</name></name><argument_list pos:line="29" pos:column="26">(<argument><expr><call><name><name pos:line="29" pos:column="27">outer</name><op:operator pos:line="29" pos:column="32">.</op:operator><name pos:line="29" pos:column="33">Contains</name></name><argument_list pos:line="29" pos:column="41">(<argument><expr><name pos:line="29" pos:column="42">inner</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="30" pos:column="13">Assert</name><op:operator pos:line="30" pos:column="19">.</op:operator><name pos:line="30" pos:column="20">IsFalse</name></name><argument_list pos:line="30" pos:column="27">(<argument><expr><call><name><name pos:line="30" pos:column="28">inner</name><op:operator pos:line="30" pos:column="33">.</op:operator><name pos:line="30" pos:column="34">Contains</name></name><argument_list pos:line="30" pos:column="42">(<argument><expr><name pos:line="30" pos:column="43">outer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="33" pos:column="9">[<expr><name pos:line="33" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="34" pos:column="9">public</specifier> <name pos:line="34" pos:column="16">void</name></type> <name pos:line="34" pos:column="21">TestContains_SameLine</name><parameter_list pos:line="34" pos:column="42">()</parameter_list> <block pos:line="34" pos:column="45">{
            <decl_stmt><decl><type><name pos:line="35" pos:column="13">var</name></type> <name pos:line="35" pos:column="17">outer</name> <init pos:line="35" pos:column="23">= <expr><op:operator pos:line="35" pos:column="25">new</op:operator> <call><name pos:line="35" pos:column="29">SourceLocation</name><argument_list pos:line="35" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="35" pos:column="44">"Foo.cpp"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="35" pos:column="55">3</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="35" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="35" pos:column="61">10</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="35" pos:column="65">60</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="36" pos:column="13">var</name></type> <name pos:line="36" pos:column="17">inner</name> <init pos:line="36" pos:column="23">= <expr><op:operator pos:line="36" pos:column="25">new</op:operator> <call><name pos:line="36" pos:column="29">SourceLocation</name><argument_list pos:line="36" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="36" pos:column="44">"Foo.cpp"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="36" pos:column="55">3</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="36" pos:column="58">3</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="36" pos:column="61">3</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="36" pos:column="64">5</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="37" pos:column="13">Assert</name><op:operator pos:line="37" pos:column="19">.</op:operator><name pos:line="37" pos:column="20">IsTrue</name></name><argument_list pos:line="37" pos:column="26">(<argument><expr><call><name><name pos:line="37" pos:column="27">outer</name><op:operator pos:line="37" pos:column="32">.</op:operator><name pos:line="37" pos:column="33">Contains</name></name><argument_list pos:line="37" pos:column="41">(<argument><expr><name pos:line="37" pos:column="42">inner</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="38" pos:column="13">Assert</name><op:operator pos:line="38" pos:column="19">.</op:operator><name pos:line="38" pos:column="20">IsFalse</name></name><argument_list pos:line="38" pos:column="27">(<argument><expr><call><name><name pos:line="38" pos:column="28">inner</name><op:operator pos:line="38" pos:column="33">.</op:operator><name pos:line="38" pos:column="34">Contains</name></name><argument_list pos:line="38" pos:column="42">(<argument><expr><name pos:line="38" pos:column="43">outer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
