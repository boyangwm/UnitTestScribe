<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data.Test\FileRemovalTests_Cpp.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Threading</name><op:operator pos:line="5" pos:column="23">.</op:operator><name pos:line="5" pos:column="24">Tasks</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">NUnit</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">Framework</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">ABB</name><op:operator pos:line="7" pos:column="10">.</op:operator><name pos:line="7" pos:column="11">SrcML</name><op:operator pos:line="7" pos:column="16">.</op:operator><name pos:line="7" pos:column="17">Test</name><op:operator pos:line="7" pos:column="21">.</op:operator><name pos:line="7" pos:column="22">Utilities</name></name>;</using>

<namespace pos:line="9" pos:column="1">namespace <name><name pos:line="9" pos:column="11">ABB</name><op:operator pos:line="9" pos:column="14">.</op:operator><name pos:line="9" pos:column="15">SrcML</name><op:operator pos:line="9" pos:column="20">.</op:operator><name pos:line="9" pos:column="21">Data</name><op:operator pos:line="9" pos:column="25">.</op:operator><name pos:line="9" pos:column="26">Test</name></name> <block pos:line="9" pos:column="31">{
    <class><attribute pos:line="10" pos:column="5">[<expr><name pos:line="10" pos:column="6">TestFixture</name></expr><op:operator pos:line="10" pos:column="17">,</op:operator> <expr><call><name pos:line="10" pos:column="19">Category</name><argument_list pos:line="10" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="10" pos:column="28">"Build"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="11" pos:column="5">public</specifier> class <name pos:line="11" pos:column="18">FileRemovalTests_Cpp</name> <block pos:line="11" pos:column="39">{
        <decl_stmt><decl><type><specifier pos:line="12" pos:column="9">private</specifier> <name pos:line="12" pos:column="17">CPlusPlusCodeParser</name></type> <name pos:line="12" pos:column="37">CodeParser</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="13" pos:column="9">private</specifier> <name pos:line="13" pos:column="17">SrcMLFileUnitSetup</name></type> <name pos:line="13" pos:column="36">FileUnitSetup</name></decl>;</decl_stmt>

        <function><type><attribute pos:line="15" pos:column="9">[<expr><name pos:line="15" pos:column="10">TestFixtureSetUp</name></expr>]</attribute>
        <specifier pos:line="16" pos:column="9">public</specifier> <name pos:line="16" pos:column="16">void</name></type> <name pos:line="16" pos:column="21">ClassSetup</name><parameter_list pos:line="16" pos:column="31">()</parameter_list> <block pos:line="16" pos:column="34">{
            <expr_stmt><expr><name pos:line="17" pos:column="13">FileUnitSetup</name> <op:operator pos:line="17" pos:column="27">=</op:operator> <op:operator pos:line="17" pos:column="29">new</op:operator> <call><name pos:line="17" pos:column="33">SrcMLFileUnitSetup</name><argument_list pos:line="17" pos:column="51">(<argument><expr><name><name pos:line="17" pos:column="52">Language</name><op:operator pos:line="17" pos:column="60">.</op:operator><name pos:line="17" pos:column="61">CPlusPlus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="18" pos:column="13">CodeParser</name> <op:operator pos:line="18" pos:column="24">=</op:operator> <op:operator pos:line="18" pos:column="26">new</op:operator> <call><name pos:line="18" pos:column="30">CPlusPlusCodeParser</name><argument_list pos:line="18" pos:column="49">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="21" pos:column="9">[<expr><name pos:line="21" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="22" pos:column="9">public</specifier> <name pos:line="22" pos:column="16">void</name></type> <name pos:line="22" pos:column="21">TestRemoveClassDefinition</name><parameter_list pos:line="22" pos:column="46">()</parameter_list> <block pos:line="22" pos:column="49">{
            <comment type="line" pos:line="23" pos:column="13">////A.cpp</comment>
            <comment type="line" pos:line="24" pos:column="13">//int Foo::Add(int b) {</comment>
            <comment type="line" pos:line="25" pos:column="13">//  return this-&gt;a + b;</comment>
            <comment type="line" pos:line="26" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="27" pos:column="13">string</name></type> <name pos:line="27" pos:column="20">cppXml</name> <init pos:line="27" pos:column="27">= <expr><lit:literal type="string" pos:line="27" pos:column="29">@"&lt;function&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;&lt;name&gt;Add&lt;/name&gt;&lt;/name&gt;&lt;parameter_list&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;b&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt; &lt;block&gt;{
  &lt;return&gt;return &lt;expr&gt;&lt;name&gt;this&lt;/name&gt;&lt;op:operator&gt;-&amp;gt;&lt;/op:operator&gt;&lt;name&gt;a&lt;/name&gt; &lt;op:operator&gt;+&lt;/op:operator&gt; &lt;name&gt;b&lt;/name&gt;&lt;/expr&gt;;&lt;/return&gt;
}&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="30" pos:column="13">var</name></type> <name pos:line="30" pos:column="17">cppFileunit</name> <init pos:line="30" pos:column="29">= <expr><call><name><name pos:line="30" pos:column="31">FileUnitSetup</name><op:operator pos:line="30" pos:column="44">.</op:operator><name pos:line="30" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="30" pos:column="69">(<argument><expr><name pos:line="30" pos:column="70">cppXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="30" pos:column="78">"A.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="31" pos:column="13">var</name></type> <name pos:line="31" pos:column="17">beforeScope</name> <init pos:line="31" pos:column="29">= <expr><call><name><name pos:line="31" pos:column="31">CodeParser</name><op:operator pos:line="31" pos:column="41">.</op:operator><name pos:line="31" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="31" pos:column="55">(<argument><expr><name pos:line="31" pos:column="56">cppFileunit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="32" pos:column="13">////A.h</comment>
            <comment type="line" pos:line="33" pos:column="13">//class Foo {</comment>
            <comment type="line" pos:line="34" pos:column="13">//  public:</comment>
            <comment type="line" pos:line="35" pos:column="13">//    int a;</comment>
            <comment type="line" pos:line="36" pos:column="13">//    int Add(int b);</comment>
            <comment type="line" pos:line="37" pos:column="13">//};</comment>
            <decl_stmt><decl><type><name pos:line="38" pos:column="13">string</name></type> <name pos:line="38" pos:column="20">hXml</name> <init pos:line="38" pos:column="25">= <expr><lit:literal type="string" pos:line="38" pos:column="27">@"&lt;class&gt;class &lt;name&gt;Foo&lt;/name&gt; &lt;block&gt;{&lt;private type=""default&gt;
  &lt;/private&gt;&lt;public&gt;public:
    &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;a&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
    &lt;function_decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Add&lt;/name&gt;&lt;parameter_list&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;b&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt;;&lt;/function_decl&gt;
&lt;/public&gt;}&lt;/block&gt;;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="43" pos:column="13">var</name></type> <name pos:line="43" pos:column="17">hFileunit</name> <init pos:line="43" pos:column="27">= <expr><call><name><name pos:line="43" pos:column="29">FileUnitSetup</name><op:operator pos:line="43" pos:column="42">.</op:operator><name pos:line="43" pos:column="43">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="43" pos:column="67">(<argument><expr><name pos:line="43" pos:column="68">hXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="43" pos:column="74">"A.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="44" pos:column="13">var</name></type> <name pos:line="44" pos:column="17">afterScope</name> <init pos:line="44" pos:column="28">= <expr><call><name><name pos:line="44" pos:column="30">beforeScope</name><op:operator pos:line="44" pos:column="41">.</op:operator><name pos:line="44" pos:column="42">Merge</name></name><argument_list pos:line="44" pos:column="47">(<argument><expr><call><name><name pos:line="44" pos:column="48">CodeParser</name><op:operator pos:line="44" pos:column="58">.</op:operator><name pos:line="44" pos:column="59">ParseFileUnit</name></name><argument_list pos:line="44" pos:column="72">(<argument><expr><name pos:line="44" pos:column="73">hFileunit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="46" pos:column="13">Assert</name><op:operator pos:line="46" pos:column="19">.</op:operator><name pos:line="46" pos:column="20">AreEqual</name></name><argument_list pos:line="46" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="46" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="46" pos:column="32">afterScope</name><op:operator pos:line="46" pos:column="42">.</op:operator><name pos:line="46" pos:column="43">ChildStatements</name><op:operator pos:line="46" pos:column="58">.</op:operator><name pos:line="46" pos:column="59">Count</name></name><argument_list pos:line="46" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="47" pos:column="13">Assert</name><op:operator pos:line="47" pos:column="19">.</op:operator><name pos:line="47" pos:column="20">IsNotNull</name></name><argument_list pos:line="47" pos:column="29">(<argument><expr><call><name><name pos:line="47" pos:column="30">afterScope</name><op:operator pos:line="47" pos:column="40">.</op:operator><name pos:line="47" pos:column="41">ChildStatements</name><op:operator pos:line="47" pos:column="56">.</op:operator><name pos:line="47" pos:column="57">First</name></name><argument_list pos:line="47" pos:column="62">()</argument_list></call> <op:operator pos:line="47" pos:column="65">as</op:operator> <name pos:line="47" pos:column="68">TypeDefinition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="49" pos:column="13">afterScope</name><op:operator pos:line="49" pos:column="23">.</op:operator><name pos:line="49" pos:column="24">RemoveFile</name></name><argument_list pos:line="49" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="49" pos:column="35">"A.h"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="51" pos:column="13">DataAssert</name><op:operator pos:line="51" pos:column="23">.</op:operator><name pos:line="51" pos:column="24">StatementsAreEqual</name></name><argument_list pos:line="51" pos:column="42">(<argument><expr><name pos:line="51" pos:column="43">beforeScope</name></expr></argument>, <argument><expr><name pos:line="51" pos:column="56">afterScope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="54" pos:column="9">[<expr><name pos:line="54" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="55" pos:column="9">public</specifier> <name pos:line="55" pos:column="16">void</name></type> <name pos:line="55" pos:column="21">TestRemoveMethodFromClass</name><parameter_list pos:line="55" pos:column="46">()</parameter_list> <block pos:line="55" pos:column="49">{
            <comment type="line" pos:line="56" pos:column="13">////A.cpp</comment>
            <comment type="line" pos:line="57" pos:column="13">//int Foo::Add(int b) {</comment>
            <comment type="line" pos:line="58" pos:column="13">//  return this-&gt;a + b;</comment>
            <comment type="line" pos:line="59" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="60" pos:column="13">string</name></type> <name pos:line="60" pos:column="20">cppXml</name> <init pos:line="60" pos:column="27">= <expr><lit:literal type="string" pos:line="60" pos:column="29">@"&lt;function&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;&lt;name&gt;Add&lt;/name&gt;&lt;/name&gt;&lt;parameter_list&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;b&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt; &lt;block&gt;{
  &lt;return&gt;return &lt;expr&gt;&lt;name&gt;this&lt;/name&gt;&lt;op:operator&gt;-&amp;gt;&lt;/op:operator&gt;&lt;name&gt;a&lt;/name&gt; &lt;op:operator&gt;+&lt;/op:operator&gt; &lt;name&gt;b&lt;/name&gt;&lt;/expr&gt;;&lt;/return&gt;
}&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="63" pos:column="13">var</name></type> <name pos:line="63" pos:column="17">cppFileUnit</name> <init pos:line="63" pos:column="29">= <expr><call><name><name pos:line="63" pos:column="31">FileUnitSetup</name><op:operator pos:line="63" pos:column="44">.</op:operator><name pos:line="63" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="63" pos:column="69">(<argument><expr><name pos:line="63" pos:column="70">cppXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="63" pos:column="78">"A.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <comment type="line" pos:line="65" pos:column="13">////A.h</comment>
            <comment type="line" pos:line="66" pos:column="13">//class Foo {</comment>
            <comment type="line" pos:line="67" pos:column="13">//  public:</comment>
            <comment type="line" pos:line="68" pos:column="13">//    int a;</comment>
            <comment type="line" pos:line="69" pos:column="13">//    int Add(int b);</comment>
            <comment type="line" pos:line="70" pos:column="13">//};</comment>
            <decl_stmt><decl><type><name pos:line="71" pos:column="13">string</name></type> <name pos:line="71" pos:column="20">hXml</name> <init pos:line="71" pos:column="25">= <expr><lit:literal type="string" pos:line="71" pos:column="27">@"&lt;class&gt;class &lt;name&gt;Foo&lt;/name&gt; &lt;block&gt;{&lt;private type=""default&gt;
  &lt;/private&gt;&lt;public&gt;public:
    &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;a&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
    &lt;function_decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Add&lt;/name&gt;&lt;parameter_list&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;b&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt;;&lt;/function_decl&gt;
&lt;/public&gt;}&lt;/block&gt;;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="76" pos:column="13">var</name></type> <name pos:line="76" pos:column="17">hFileunit</name> <init pos:line="76" pos:column="27">= <expr><call><name><name pos:line="76" pos:column="29">FileUnitSetup</name><op:operator pos:line="76" pos:column="42">.</op:operator><name pos:line="76" pos:column="43">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="76" pos:column="67">(<argument><expr><name pos:line="76" pos:column="68">hXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="76" pos:column="74">"A.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="78" pos:column="13">var</name></type> <name pos:line="78" pos:column="17">beforeScope</name> <init pos:line="78" pos:column="29">= <expr><call><name><name pos:line="78" pos:column="31">CodeParser</name><op:operator pos:line="78" pos:column="41">.</op:operator><name pos:line="78" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="78" pos:column="55">(<argument><expr><name pos:line="78" pos:column="56">hFileunit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="79" pos:column="13">var</name></type> <name pos:line="79" pos:column="17">afterScope</name> <init pos:line="79" pos:column="28">= <expr><call><name><name pos:line="79" pos:column="30">beforeScope</name><op:operator pos:line="79" pos:column="41">.</op:operator><name pos:line="79" pos:column="42">Merge</name></name><argument_list pos:line="79" pos:column="47">(<argument><expr><call><name><name pos:line="79" pos:column="48">CodeParser</name><op:operator pos:line="79" pos:column="58">.</op:operator><name pos:line="79" pos:column="59">ParseFileUnit</name></name><argument_list pos:line="79" pos:column="72">(<argument><expr><name pos:line="79" pos:column="73">cppFileUnit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <expr_stmt><expr><call><name><name pos:line="81" pos:column="13">Assert</name><op:operator pos:line="81" pos:column="19">.</op:operator><name pos:line="81" pos:column="20">AreEqual</name></name><argument_list pos:line="81" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="81" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="81" pos:column="32">afterScope</name><op:operator pos:line="81" pos:column="42">.</op:operator><name pos:line="81" pos:column="43">ChildStatements</name><op:operator pos:line="81" pos:column="58">.</op:operator><name pos:line="81" pos:column="59">Count</name></name><argument_list pos:line="81" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="82" pos:column="13">Assert</name><op:operator pos:line="82" pos:column="19">.</op:operator><name pos:line="82" pos:column="20">IsNotNull</name></name><argument_list pos:line="82" pos:column="29">(<argument><expr><call><name><name pos:line="82" pos:column="30">afterScope</name><op:operator pos:line="82" pos:column="40">.</op:operator><name pos:line="82" pos:column="41">ChildStatements</name><op:operator pos:line="82" pos:column="56">.</op:operator><name pos:line="82" pos:column="57">First</name></name><argument_list pos:line="82" pos:column="62">()</argument_list></call> <op:operator pos:line="82" pos:column="65">as</op:operator> <name pos:line="82" pos:column="68">TypeDefinition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="84" pos:column="13">afterScope</name><op:operator pos:line="84" pos:column="23">.</op:operator><name pos:line="84" pos:column="24">RemoveFile</name></name><argument_list pos:line="84" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="84" pos:column="35">"A.cpp"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="86" pos:column="13">DataAssert</name><op:operator pos:line="86" pos:column="23">.</op:operator><name pos:line="86" pos:column="24">StatementsAreEqual</name></name><argument_list pos:line="86" pos:column="42">(<argument><expr><name pos:line="86" pos:column="43">beforeScope</name></expr></argument>, <argument><expr><name pos:line="86" pos:column="56">afterScope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="89" pos:column="9">[<expr><name pos:line="89" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="90" pos:column="9">public</specifier> <name pos:line="90" pos:column="16">void</name></type> <name pos:line="90" pos:column="21">TestRemoveMethodDeclaration_Global</name><parameter_list pos:line="90" pos:column="55">()</parameter_list> <block pos:line="90" pos:column="58">{
            <comment type="line" pos:line="91" pos:column="13">////Foo.cpp</comment>
            <comment type="line" pos:line="92" pos:column="13">//int Foo(char bar) { return 0; }</comment>
            <decl_stmt><decl><type><name pos:line="93" pos:column="13">string</name></type> <name pos:line="93" pos:column="20">defXml</name> <init pos:line="93" pos:column="27">= <expr><lit:literal type="string" pos:line="93" pos:column="29">"&lt;function&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;char&lt;/name&gt;&lt;/type&gt; &lt;name&gt;bar&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt; &lt;block&gt;{ &lt;return&gt;return &lt;expr&gt;&lt;lit:literal type=\"number\"&gt;0&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt; }&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="94" pos:column="13">var</name></type> <name pos:line="94" pos:column="17">fileUnitDef</name> <init pos:line="94" pos:column="29">= <expr><call><name><name pos:line="94" pos:column="31">FileUnitSetup</name><op:operator pos:line="94" pos:column="44">.</op:operator><name pos:line="94" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="94" pos:column="69">(<argument><expr><name pos:line="94" pos:column="70">defXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="94" pos:column="78">"Foo.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="95" pos:column="13">var</name></type> <name pos:line="95" pos:column="17">beforeScope</name> <init pos:line="95" pos:column="29">= <expr><call><name><name pos:line="95" pos:column="31">CodeParser</name><op:operator pos:line="95" pos:column="41">.</op:operator><name pos:line="95" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="95" pos:column="55">(<argument><expr><name pos:line="95" pos:column="56">fileUnitDef</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="97" pos:column="13">////Foo.h</comment>
            <comment type="line" pos:line="98" pos:column="13">//int Foo(char bar);</comment>
            <decl_stmt><decl><type><name pos:line="99" pos:column="13">string</name></type> <name pos:line="99" pos:column="20">declXml</name> <init pos:line="99" pos:column="28">= <expr><lit:literal type="string" pos:line="99" pos:column="30">"&lt;function_decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;char&lt;/name&gt;&lt;/type&gt; &lt;name&gt;bar&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt;;&lt;/function_decl&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="100" pos:column="13">var</name></type> <name pos:line="100" pos:column="17">fileunitDecl</name> <init pos:line="100" pos:column="30">= <expr><call><name><name pos:line="100" pos:column="32">FileUnitSetup</name><op:operator pos:line="100" pos:column="45">.</op:operator><name pos:line="100" pos:column="46">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="100" pos:column="70">(<argument><expr><name pos:line="100" pos:column="71">declXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="100" pos:column="80">"Foo.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="101" pos:column="13">var</name></type> <name pos:line="101" pos:column="17">afterScope</name> <init pos:line="101" pos:column="28">= <expr><call><name><name pos:line="101" pos:column="30">beforeScope</name><op:operator pos:line="101" pos:column="41">.</op:operator><name pos:line="101" pos:column="42">Merge</name></name><argument_list pos:line="101" pos:column="47">(<argument><expr><call><name><name pos:line="101" pos:column="48">CodeParser</name><op:operator pos:line="101" pos:column="58">.</op:operator><name pos:line="101" pos:column="59">ParseFileUnit</name></name><argument_list pos:line="101" pos:column="72">(<argument><expr><name pos:line="101" pos:column="73">fileunitDecl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="103" pos:column="13">Assert</name><op:operator pos:line="103" pos:column="19">.</op:operator><name pos:line="103" pos:column="20">AreEqual</name></name><argument_list pos:line="103" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="103" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="103" pos:column="32">afterScope</name><op:operator pos:line="103" pos:column="42">.</op:operator><name pos:line="103" pos:column="43">ChildStatements</name><op:operator pos:line="103" pos:column="58">.</op:operator><name pos:line="103" pos:column="59">Count</name></name><argument_list pos:line="103" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="104" pos:column="13">Assert</name><op:operator pos:line="104" pos:column="19">.</op:operator><name pos:line="104" pos:column="20">AreEqual</name></name><argument_list pos:line="104" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="104" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="104" pos:column="36">(</op:operator><op:operator pos:line="104" pos:column="37">(</op:operator><name pos:line="104" pos:column="38">MethodDefinition</name><op:operator pos:line="104" pos:column="54">)</op:operator> <call><name><name pos:line="104" pos:column="56">afterScope</name><op:operator pos:line="104" pos:column="66">.</op:operator><name pos:line="104" pos:column="67">ChildStatements</name><op:operator pos:line="104" pos:column="82">.</op:operator><name pos:line="104" pos:column="83">First</name></name><argument_list pos:line="104" pos:column="88">()</argument_list></call><op:operator pos:line="104" pos:column="90">)</op:operator><op:operator pos:line="104" pos:column="91">.</op:operator><name pos:line="104" pos:column="92">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="106" pos:column="13">afterScope</name><op:operator pos:line="106" pos:column="23">.</op:operator><name pos:line="106" pos:column="24">RemoveFile</name></name><argument_list pos:line="106" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="106" pos:column="35">"Foo.h"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="108" pos:column="13">DataAssert</name><op:operator pos:line="108" pos:column="23">.</op:operator><name pos:line="108" pos:column="24">StatementsAreEqual</name></name><argument_list pos:line="108" pos:column="42">(<argument><expr><name pos:line="108" pos:column="43">beforeScope</name></expr></argument>, <argument><expr><name pos:line="108" pos:column="56">afterScope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="111" pos:column="9">[<expr><name pos:line="111" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="112" pos:column="9">public</specifier> <name pos:line="112" pos:column="16">void</name></type> <name pos:line="112" pos:column="21">TestRemoveMethodDefinition_Class</name><parameter_list pos:line="112" pos:column="53">()</parameter_list> <block pos:line="112" pos:column="56">{
            <comment type="line" pos:line="113" pos:column="13">////A.h</comment>
            <comment type="line" pos:line="114" pos:column="13">//class Foo {</comment>
            <comment type="line" pos:line="115" pos:column="13">//  public:</comment>
            <comment type="line" pos:line="116" pos:column="13">//    int a;</comment>
            <comment type="line" pos:line="117" pos:column="13">//    int Add(int b);</comment>
            <comment type="line" pos:line="118" pos:column="13">//};</comment>
            <decl_stmt><decl><type><name pos:line="119" pos:column="13">string</name></type> <name pos:line="119" pos:column="20">hXml</name> <init pos:line="119" pos:column="25">= <expr><lit:literal type="string" pos:line="119" pos:column="27">@"&lt;class&gt;class &lt;name&gt;Foo&lt;/name&gt; &lt;block&gt;{&lt;private type=""default&gt;
  &lt;/private&gt;&lt;public&gt;public:
    &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;a&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
    &lt;function_decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Add&lt;/name&gt;&lt;parameter_list&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;b&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt;;&lt;/function_decl&gt;
&lt;/public&gt;}&lt;/block&gt;;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="124" pos:column="13">var</name></type> <name pos:line="124" pos:column="17">hFileunit</name> <init pos:line="124" pos:column="27">= <expr><call><name><name pos:line="124" pos:column="29">FileUnitSetup</name><op:operator pos:line="124" pos:column="42">.</op:operator><name pos:line="124" pos:column="43">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="124" pos:column="67">(<argument><expr><name pos:line="124" pos:column="68">hXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="124" pos:column="74">"A.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="125" pos:column="13">var</name></type> <name pos:line="125" pos:column="17">beforeScope</name> <init pos:line="125" pos:column="29">= <expr><call><name><name pos:line="125" pos:column="31">CodeParser</name><op:operator pos:line="125" pos:column="41">.</op:operator><name pos:line="125" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="125" pos:column="55">(<argument><expr><name pos:line="125" pos:column="56">hFileunit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="127" pos:column="13">////A.cpp</comment>
            <comment type="line" pos:line="128" pos:column="13">//int Foo::Add(int b) {</comment>
            <comment type="line" pos:line="129" pos:column="13">//  return this-&gt;a + b;</comment>
            <comment type="line" pos:line="130" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="131" pos:column="13">string</name></type> <name pos:line="131" pos:column="20">cppXml</name> <init pos:line="131" pos:column="27">= <expr><lit:literal type="string" pos:line="131" pos:column="29">@"&lt;function&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;&lt;name&gt;Add&lt;/name&gt;&lt;/name&gt;&lt;parameter_list&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;b&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt; &lt;block&gt;{
  &lt;return&gt;return &lt;expr&gt;&lt;name&gt;this&lt;/name&gt;&lt;op:operator&gt;-&amp;gt;&lt;/op:operator&gt;&lt;name&gt;a&lt;/name&gt; &lt;op:operator&gt;+&lt;/op:operator&gt; &lt;name&gt;b&lt;/name&gt;&lt;/expr&gt;;&lt;/return&gt;
}&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="134" pos:column="13">var</name></type> <name pos:line="134" pos:column="17">cppFileunit</name> <init pos:line="134" pos:column="29">= <expr><call><name><name pos:line="134" pos:column="31">FileUnitSetup</name><op:operator pos:line="134" pos:column="44">.</op:operator><name pos:line="134" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="134" pos:column="69">(<argument><expr><name pos:line="134" pos:column="70">cppXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="134" pos:column="78">"A.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="135" pos:column="13">var</name></type> <name pos:line="135" pos:column="17">afterScope</name> <init pos:line="135" pos:column="28">= <expr><call><name><name pos:line="135" pos:column="30">beforeScope</name><op:operator pos:line="135" pos:column="41">.</op:operator><name pos:line="135" pos:column="42">Merge</name></name><argument_list pos:line="135" pos:column="47">(<argument><expr><call><name><name pos:line="135" pos:column="48">CodeParser</name><op:operator pos:line="135" pos:column="58">.</op:operator><name pos:line="135" pos:column="59">ParseFileUnit</name></name><argument_list pos:line="135" pos:column="72">(<argument><expr><name pos:line="135" pos:column="73">cppFileunit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="137" pos:column="13">Assert</name><op:operator pos:line="137" pos:column="19">.</op:operator><name pos:line="137" pos:column="20">AreEqual</name></name><argument_list pos:line="137" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="137" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="137" pos:column="32">afterScope</name><op:operator pos:line="137" pos:column="42">.</op:operator><name pos:line="137" pos:column="43">ChildStatements</name><op:operator pos:line="137" pos:column="58">.</op:operator><name pos:line="137" pos:column="59">Count</name></name><argument_list pos:line="137" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="138" pos:column="13">var</name></type> <name pos:line="138" pos:column="17">foo</name> <init pos:line="138" pos:column="21">= <expr><call><name><name pos:line="138" pos:column="23">afterScope</name><op:operator pos:line="138" pos:column="33">.</op:operator><name pos:line="138" pos:column="34">ChildStatements</name><op:operator pos:line="138" pos:column="49">.</op:operator><name pos:line="138" pos:column="50">First</name></name><argument_list pos:line="138" pos:column="55">()</argument_list></call> <op:operator pos:line="138" pos:column="58">as</op:operator> <name pos:line="138" pos:column="61">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="139" pos:column="13">Assert</name><op:operator pos:line="139" pos:column="19">.</op:operator><name pos:line="139" pos:column="20">IsNotNull</name></name><argument_list pos:line="139" pos:column="29">(<argument><expr><name pos:line="139" pos:column="30">foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="140" pos:column="13">//Assert.AreEqual(1, foo.DeclaredVariables.Count());</comment>

            <expr_stmt><expr><call><name><name pos:line="142" pos:column="13">afterScope</name><op:operator pos:line="142" pos:column="23">.</op:operator><name pos:line="142" pos:column="24">RemoveFile</name></name><argument_list pos:line="142" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="142" pos:column="35">"A.cpp"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="144" pos:column="13">DataAssert</name><op:operator pos:line="144" pos:column="23">.</op:operator><name pos:line="144" pos:column="24">StatementsAreEqual</name></name><argument_list pos:line="144" pos:column="42">(<argument><expr><name pos:line="144" pos:column="43">beforeScope</name></expr></argument>, <argument><expr><name pos:line="144" pos:column="56">afterScope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="147" pos:column="9">[<expr><name pos:line="147" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="148" pos:column="9">public</specifier> <name pos:line="148" pos:column="16">void</name></type> <name pos:line="148" pos:column="21">TestRemoveMethodDefinition_Global</name><parameter_list pos:line="148" pos:column="54">()</parameter_list> <block pos:line="148" pos:column="57">{
            <comment type="line" pos:line="149" pos:column="13">////Foo.h</comment>
            <comment type="line" pos:line="150" pos:column="13">//int Foo(char bar);</comment>
            <decl_stmt><decl><type><name pos:line="151" pos:column="13">string</name></type> <name pos:line="151" pos:column="20">declXml</name> <init pos:line="151" pos:column="28">= <expr><lit:literal type="string" pos:line="151" pos:column="30">"&lt;function_decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;char&lt;/name&gt;&lt;/type&gt; &lt;name&gt;bar&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt;;&lt;/function_decl&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="152" pos:column="13">var</name></type> <name pos:line="152" pos:column="17">fileunitDecl</name> <init pos:line="152" pos:column="30">= <expr><call><name><name pos:line="152" pos:column="32">FileUnitSetup</name><op:operator pos:line="152" pos:column="45">.</op:operator><name pos:line="152" pos:column="46">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="152" pos:column="70">(<argument><expr><name pos:line="152" pos:column="71">declXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="152" pos:column="80">"Foo.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="153" pos:column="13">var</name></type> <name pos:line="153" pos:column="17">beforeScope</name> <init pos:line="153" pos:column="29">= <expr><call><name><name pos:line="153" pos:column="31">CodeParser</name><op:operator pos:line="153" pos:column="41">.</op:operator><name pos:line="153" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="153" pos:column="55">(<argument><expr><name pos:line="153" pos:column="56">fileunitDecl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="155" pos:column="13">////Foo.cpp</comment>
            <comment type="line" pos:line="156" pos:column="13">//int Foo(char bar) { return 0; }</comment>
            <decl_stmt><decl><type><name pos:line="157" pos:column="13">string</name></type> <name pos:line="157" pos:column="20">defXml</name> <init pos:line="157" pos:column="27">= <expr><lit:literal type="string" pos:line="157" pos:column="29">"&lt;function&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;char&lt;/name&gt;&lt;/type&gt; &lt;name&gt;bar&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt; &lt;block&gt;{ &lt;return&gt;return &lt;expr&gt;&lt;lit:literal type=\"number\"&gt;0&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt; }&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="158" pos:column="13">var</name></type> <name pos:line="158" pos:column="17">fileUnitDef</name> <init pos:line="158" pos:column="29">= <expr><call><name><name pos:line="158" pos:column="31">FileUnitSetup</name><op:operator pos:line="158" pos:column="44">.</op:operator><name pos:line="158" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="158" pos:column="69">(<argument><expr><name pos:line="158" pos:column="70">defXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="158" pos:column="78">"Foo.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="159" pos:column="13">var</name></type> <name pos:line="159" pos:column="17">afterScope</name> <init pos:line="159" pos:column="28">= <expr><call><name><name pos:line="159" pos:column="30">beforeScope</name><op:operator pos:line="159" pos:column="41">.</op:operator><name pos:line="159" pos:column="42">Merge</name></name><argument_list pos:line="159" pos:column="47">(<argument><expr><call><name><name pos:line="159" pos:column="48">CodeParser</name><op:operator pos:line="159" pos:column="58">.</op:operator><name pos:line="159" pos:column="59">ParseFileUnit</name></name><argument_list pos:line="159" pos:column="72">(<argument><expr><name pos:line="159" pos:column="73">fileUnitDef</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="161" pos:column="13">Assert</name><op:operator pos:line="161" pos:column="19">.</op:operator><name pos:line="161" pos:column="20">AreEqual</name></name><argument_list pos:line="161" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="161" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="161" pos:column="32">afterScope</name><op:operator pos:line="161" pos:column="42">.</op:operator><name pos:line="161" pos:column="43">ChildStatements</name><op:operator pos:line="161" pos:column="58">.</op:operator><name pos:line="161" pos:column="59">Count</name></name><argument_list pos:line="161" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="162" pos:column="13">Assert</name><op:operator pos:line="162" pos:column="19">.</op:operator><name pos:line="162" pos:column="20">AreEqual</name></name><argument_list pos:line="162" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="162" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="162" pos:column="36">(</op:operator><op:operator pos:line="162" pos:column="37">(</op:operator><name pos:line="162" pos:column="38">MethodDefinition</name><op:operator pos:line="162" pos:column="54">)</op:operator> <call><name><name pos:line="162" pos:column="56">afterScope</name><op:operator pos:line="162" pos:column="66">.</op:operator><name pos:line="162" pos:column="67">ChildStatements</name><op:operator pos:line="162" pos:column="82">.</op:operator><name pos:line="162" pos:column="83">First</name></name><argument_list pos:line="162" pos:column="88">()</argument_list></call><op:operator pos:line="162" pos:column="90">)</op:operator><op:operator pos:line="162" pos:column="91">.</op:operator><name pos:line="162" pos:column="92">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="164" pos:column="13">afterScope</name><op:operator pos:line="164" pos:column="23">.</op:operator><name pos:line="164" pos:column="24">RemoveFile</name></name><argument_list pos:line="164" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="164" pos:column="35">"Foo.cpp"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="166" pos:column="13">DataAssert</name><op:operator pos:line="166" pos:column="23">.</op:operator><name pos:line="166" pos:column="24">StatementsAreEqual</name></name><argument_list pos:line="166" pos:column="42">(<argument><expr><name pos:line="166" pos:column="43">beforeScope</name></expr></argument>, <argument><expr><name pos:line="166" pos:column="56">afterScope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="169" pos:column="9">[<expr><name pos:line="169" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="170" pos:column="9">public</specifier> <name pos:line="170" pos:column="16">void</name></type> <name pos:line="170" pos:column="21">TestRemoveMethodFromGlobal</name><parameter_list pos:line="170" pos:column="47">()</parameter_list> <block pos:line="170" pos:column="50">{
            <comment type="line" pos:line="171" pos:column="13">////Foo.cpp</comment>
            <comment type="line" pos:line="172" pos:column="13">//int Foo() { return 0; }</comment>
            <decl_stmt><decl><type><name pos:line="173" pos:column="13">string</name></type> <name pos:line="173" pos:column="20">fooXml</name> <init pos:line="173" pos:column="27">= <expr><lit:literal type="string" pos:line="173" pos:column="29">@"&lt;function&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;return&gt;return &lt;expr&gt;&lt;lit:literal type=""number&gt;0&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt; }&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="174" pos:column="13">var</name></type> <name pos:line="174" pos:column="17">fileunitFoo</name> <init pos:line="174" pos:column="29">= <expr><call><name><name pos:line="174" pos:column="31">FileUnitSetup</name><op:operator pos:line="174" pos:column="44">.</op:operator><name pos:line="174" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="174" pos:column="69">(<argument><expr><name pos:line="174" pos:column="70">fooXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="174" pos:column="78">"Foo.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="175" pos:column="13">var</name></type> <name pos:line="175" pos:column="17">beforeScope</name> <init pos:line="175" pos:column="29">= <expr><call><name><name pos:line="175" pos:column="31">CodeParser</name><op:operator pos:line="175" pos:column="41">.</op:operator><name pos:line="175" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="175" pos:column="55">(<argument><expr><name pos:line="175" pos:column="56">fileunitFoo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="177" pos:column="13">////Baz.cpp</comment>
            <comment type="line" pos:line="178" pos:column="13">//char* Baz() { return "Hello, World!"; }</comment>
            <decl_stmt><decl><type><name pos:line="179" pos:column="13">string</name></type> <name pos:line="179" pos:column="20">bazXml</name> <init pos:line="179" pos:column="27">= <expr><lit:literal type="string" pos:line="179" pos:column="29">"&lt;function&gt;&lt;type&gt;&lt;name&gt;char&lt;/name&gt;&lt;type:modifier&gt;*&lt;/type:modifier&gt;&lt;/type&gt; &lt;name&gt;Baz&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;return&gt;return &lt;expr&gt;&lt;lit:literal type=\"string\"&gt;\"Hello, World!\"&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt; }&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="180" pos:column="13">var</name></type> <name pos:line="180" pos:column="17">fileunitBaz</name> <init pos:line="180" pos:column="29">= <expr><call><name><name pos:line="180" pos:column="31">FileUnitSetup</name><op:operator pos:line="180" pos:column="44">.</op:operator><name pos:line="180" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="180" pos:column="69">(<argument><expr><name pos:line="180" pos:column="70">bazXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="180" pos:column="78">"Baz.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="181" pos:column="13">var</name></type> <name pos:line="181" pos:column="17">afterScope</name> <init pos:line="181" pos:column="28">= <expr><call><name><name pos:line="181" pos:column="30">beforeScope</name><op:operator pos:line="181" pos:column="41">.</op:operator><name pos:line="181" pos:column="42">Merge</name></name><argument_list pos:line="181" pos:column="47">(<argument><expr><call><name><name pos:line="181" pos:column="48">CodeParser</name><op:operator pos:line="181" pos:column="58">.</op:operator><name pos:line="181" pos:column="59">ParseFileUnit</name></name><argument_list pos:line="181" pos:column="72">(<argument><expr><name pos:line="181" pos:column="73">fileunitBaz</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="182" pos:column="13">Assert</name><op:operator pos:line="182" pos:column="19">.</op:operator><name pos:line="182" pos:column="20">AreEqual</name></name><argument_list pos:line="182" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="182" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="182" pos:column="32">afterScope</name><op:operator pos:line="182" pos:column="42">.</op:operator><name pos:line="182" pos:column="43">ChildStatements</name><op:operator pos:line="182" pos:column="58">.</op:operator><name><name pos:line="182" pos:column="59">OfType</name><argument_list pos:line="182" pos:column="65">&lt;<argument><name pos:line="182" pos:column="66">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="182" pos:column="83">()</argument_list></call><op:operator pos:line="182" pos:column="85">.</op:operator><call><name pos:line="182" pos:column="86">Count</name><argument_list pos:line="182" pos:column="91">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="184" pos:column="13">afterScope</name><op:operator pos:line="184" pos:column="23">.</op:operator><name pos:line="184" pos:column="24">RemoveFile</name></name><argument_list pos:line="184" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="184" pos:column="35">"Baz.cpp"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="186" pos:column="13">DataAssert</name><op:operator pos:line="186" pos:column="23">.</op:operator><name pos:line="186" pos:column="24">StatementsAreEqual</name></name><argument_list pos:line="186" pos:column="42">(<argument><expr><name pos:line="186" pos:column="43">beforeScope</name></expr></argument>, <argument><expr><name pos:line="186" pos:column="56">afterScope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="189" pos:column="9">[<expr><name pos:line="189" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="190" pos:column="9">public</specifier> <name pos:line="190" pos:column="16">void</name></type> <name pos:line="190" pos:column="21">TestRemoveNamespace</name><parameter_list pos:line="190" pos:column="40">()</parameter_list> <block pos:line="190" pos:column="43">{
            <comment type="line" pos:line="191" pos:column="13">////A.cpp</comment>
            <comment type="line" pos:line="192" pos:column="13">//namespace A {</comment>
            <comment type="line" pos:line="193" pos:column="13">//	int Foo(){ return 0;}</comment>
            <comment type="line" pos:line="194" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="195" pos:column="13">string</name></type> <name pos:line="195" pos:column="20">aXml</name> <init pos:line="195" pos:column="25">= <expr><lit:literal type="string" pos:line="195" pos:column="27">@"&lt;namespace&gt;namespace &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{
    &lt;function&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt;&lt;block&gt;{ &lt;return&gt;return &lt;expr&gt;&lt;lit:literal type=""number&gt;0&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt;}&lt;/block&gt;&lt;/function&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="198" pos:column="13">var</name></type> <name pos:line="198" pos:column="17">aFileunit</name> <init pos:line="198" pos:column="27">= <expr><call><name><name pos:line="198" pos:column="29">FileUnitSetup</name><op:operator pos:line="198" pos:column="42">.</op:operator><name pos:line="198" pos:column="43">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="198" pos:column="67">(<argument><expr><name pos:line="198" pos:column="68">aXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="198" pos:column="74">"A.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="199" pos:column="13">var</name></type> <name pos:line="199" pos:column="17">beforeScope</name> <init pos:line="199" pos:column="29">= <expr><call><name><name pos:line="199" pos:column="31">CodeParser</name><op:operator pos:line="199" pos:column="41">.</op:operator><name pos:line="199" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="199" pos:column="55">(<argument><expr><name pos:line="199" pos:column="56">aFileunit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="201" pos:column="13">////B.cpp</comment>
            <comment type="line" pos:line="202" pos:column="13">//namespace B {</comment>
            <comment type="line" pos:line="203" pos:column="13">//    char* Bar(){return "Hello, World!";}</comment>
            <comment type="line" pos:line="204" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="205" pos:column="13">string</name></type> <name pos:line="205" pos:column="20">bXml</name> <init pos:line="205" pos:column="25">= <expr><lit:literal type="string" pos:line="205" pos:column="27">@"&lt;namespace&gt;namespace &lt;name&gt;B&lt;/name&gt; &lt;block&gt;{
    &lt;function&gt;&lt;type&gt;&lt;name&gt;char&lt;/name&gt;&lt;type:modifier&gt;*&lt;/type:modifier&gt;&lt;/type&gt; &lt;name&gt;Bar&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt;&lt;block&gt;{&lt;return&gt;return &lt;expr&gt;&lt;lit:literal type=""string&gt;""Hello, World!&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt;}&lt;/block&gt;&lt;/function&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="208" pos:column="13">var</name></type> <name pos:line="208" pos:column="17">bFileunit</name> <init pos:line="208" pos:column="27">= <expr><call><name><name pos:line="208" pos:column="29">FileUnitSetup</name><op:operator pos:line="208" pos:column="42">.</op:operator><name pos:line="208" pos:column="43">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="208" pos:column="67">(<argument><expr><name pos:line="208" pos:column="68">bXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="208" pos:column="74">"B.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="209" pos:column="13">var</name></type> <name pos:line="209" pos:column="17">afterScope</name> <init pos:line="209" pos:column="28">= <expr><call><name><name pos:line="209" pos:column="30">beforeScope</name><op:operator pos:line="209" pos:column="41">.</op:operator><name pos:line="209" pos:column="42">Merge</name></name><argument_list pos:line="209" pos:column="47">(<argument><expr><call><name><name pos:line="209" pos:column="48">CodeParser</name><op:operator pos:line="209" pos:column="58">.</op:operator><name pos:line="209" pos:column="59">ParseFileUnit</name></name><argument_list pos:line="209" pos:column="72">(<argument><expr><name pos:line="209" pos:column="73">bFileunit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="211" pos:column="13">Assert</name><op:operator pos:line="211" pos:column="19">.</op:operator><name pos:line="211" pos:column="20">AreEqual</name></name><argument_list pos:line="211" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="211" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="211" pos:column="32">afterScope</name><op:operator pos:line="211" pos:column="42">.</op:operator><name pos:line="211" pos:column="43">ChildStatements</name><op:operator pos:line="211" pos:column="58">.</op:operator><name><name pos:line="211" pos:column="59">OfType</name><argument_list pos:line="211" pos:column="65">&lt;<argument><name pos:line="211" pos:column="66">NamespaceDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="211" pos:column="86">()</argument_list></call><op:operator pos:line="211" pos:column="88">.</op:operator><call><name pos:line="211" pos:column="89">Count</name><argument_list pos:line="211" pos:column="94">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="213" pos:column="13">afterScope</name><op:operator pos:line="213" pos:column="23">.</op:operator><name pos:line="213" pos:column="24">RemoveFile</name></name><argument_list pos:line="213" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="213" pos:column="35">"B.cpp"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="215" pos:column="13">DataAssert</name><op:operator pos:line="215" pos:column="23">.</op:operator><name pos:line="215" pos:column="24">StatementsAreEqual</name></name><argument_list pos:line="215" pos:column="42">(<argument><expr><name pos:line="215" pos:column="43">beforeScope</name></expr></argument>, <argument><expr><name pos:line="215" pos:column="56">afterScope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="218" pos:column="9">[<expr><name pos:line="218" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="219" pos:column="9">public</specifier> <name pos:line="219" pos:column="16">void</name></type> <name pos:line="219" pos:column="21">TestRemovePartOfNamespace</name><parameter_list pos:line="219" pos:column="46">()</parameter_list> <block pos:line="219" pos:column="49">{
            <comment type="line" pos:line="220" pos:column="13">////A1.cpp</comment>
            <comment type="line" pos:line="221" pos:column="13">//namespace A {</comment>
            <comment type="line" pos:line="222" pos:column="13">//	int Foo(){ return 0;}</comment>
            <comment type="line" pos:line="223" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="224" pos:column="13">string</name></type> <name pos:line="224" pos:column="20">a1Xml</name> <init pos:line="224" pos:column="26">= <expr><lit:literal type="string" pos:line="224" pos:column="28">@"&lt;namespace&gt;namespace &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{
    &lt;function&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt;&lt;block&gt;{ &lt;return&gt;return &lt;expr&gt;&lt;lit:literal type=""number&gt;0&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt;}&lt;/block&gt;&lt;/function&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="227" pos:column="13">var</name></type> <name pos:line="227" pos:column="17">a1FileUnit</name> <init pos:line="227" pos:column="28">= <expr><call><name><name pos:line="227" pos:column="30">FileUnitSetup</name><op:operator pos:line="227" pos:column="43">.</op:operator><name pos:line="227" pos:column="44">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="227" pos:column="68">(<argument><expr><name pos:line="227" pos:column="69">a1Xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="227" pos:column="76">"A1.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="228" pos:column="13">var</name></type> <name pos:line="228" pos:column="17">beforeScope</name> <init pos:line="228" pos:column="29">= <expr><call><name><name pos:line="228" pos:column="31">CodeParser</name><op:operator pos:line="228" pos:column="41">.</op:operator><name pos:line="228" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="228" pos:column="55">(<argument><expr><name pos:line="228" pos:column="56">a1FileUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="230" pos:column="13">////A2.cpp</comment>
            <comment type="line" pos:line="231" pos:column="13">//namespace A {</comment>
            <comment type="line" pos:line="232" pos:column="13">//    char* Bar(){return "Hello, World!";}</comment>
            <comment type="line" pos:line="233" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="234" pos:column="13">string</name></type> <name pos:line="234" pos:column="20">a2Xml</name> <init pos:line="234" pos:column="26">= <expr><lit:literal type="string" pos:line="234" pos:column="28">@"&lt;namespace&gt;namespace &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{
    &lt;function&gt;&lt;type&gt;&lt;name&gt;char&lt;/name&gt;&lt;type:modifier&gt;*&lt;/type:modifier&gt;&lt;/type&gt; &lt;name&gt;Bar&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt;&lt;block&gt;{&lt;return&gt;return &lt;expr&gt;&lt;lit:literal type=""string&gt;""Hello, World!&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt;}&lt;/block&gt;&lt;/function&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="237" pos:column="13">var</name></type> <name pos:line="237" pos:column="17">a2Fileunit</name> <init pos:line="237" pos:column="28">= <expr><call><name><name pos:line="237" pos:column="30">FileUnitSetup</name><op:operator pos:line="237" pos:column="43">.</op:operator><name pos:line="237" pos:column="44">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="237" pos:column="68">(<argument><expr><name pos:line="237" pos:column="69">a2Xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="237" pos:column="76">"A2.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="238" pos:column="13">var</name></type> <name pos:line="238" pos:column="17">afterScope</name> <init pos:line="238" pos:column="28">= <expr><call><name><name pos:line="238" pos:column="30">beforeScope</name><op:operator pos:line="238" pos:column="41">.</op:operator><name pos:line="238" pos:column="42">Merge</name></name><argument_list pos:line="238" pos:column="47">(<argument><expr><call><name><name pos:line="238" pos:column="48">CodeParser</name><op:operator pos:line="238" pos:column="58">.</op:operator><name pos:line="238" pos:column="59">ParseFileUnit</name></name><argument_list pos:line="238" pos:column="72">(<argument><expr><name pos:line="238" pos:column="73">a2Fileunit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="240" pos:column="13">Assert</name><op:operator pos:line="240" pos:column="19">.</op:operator><name pos:line="240" pos:column="20">AreEqual</name></name><argument_list pos:line="240" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="240" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="240" pos:column="32">afterScope</name><op:operator pos:line="240" pos:column="42">.</op:operator><name pos:line="240" pos:column="43">ChildStatements</name><op:operator pos:line="240" pos:column="58">.</op:operator><name><name pos:line="240" pos:column="59">OfType</name><argument_list pos:line="240" pos:column="65">&lt;<argument><name pos:line="240" pos:column="66">NamespaceDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="240" pos:column="86">()</argument_list></call><op:operator pos:line="240" pos:column="88">.</op:operator><call><name pos:line="240" pos:column="89">Count</name><argument_list pos:line="240" pos:column="94">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="241" pos:column="13">Assert</name><op:operator pos:line="241" pos:column="19">.</op:operator><name pos:line="241" pos:column="20">AreEqual</name></name><argument_list pos:line="241" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="241" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="241" pos:column="32">afterScope</name><op:operator pos:line="241" pos:column="42">.</op:operator><name pos:line="241" pos:column="43">ChildStatements</name><op:operator pos:line="241" pos:column="58">.</op:operator><name pos:line="241" pos:column="59">First</name></name><argument_list pos:line="241" pos:column="64">()</argument_list></call><op:operator pos:line="241" pos:column="66">.</op:operator><call><name><name pos:line="241" pos:column="67">ChildStatements</name><op:operator pos:line="241" pos:column="82">.</op:operator><name><name pos:line="241" pos:column="83">OfType</name><argument_list pos:line="241" pos:column="89">&lt;<argument><name pos:line="241" pos:column="90">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="241" pos:column="107">()</argument_list></call><op:operator pos:line="241" pos:column="109">.</op:operator><call><name pos:line="241" pos:column="110">Count</name><argument_list pos:line="241" pos:column="115">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="243" pos:column="13">afterScope</name><op:operator pos:line="243" pos:column="23">.</op:operator><name pos:line="243" pos:column="24">RemoveFile</name></name><argument_list pos:line="243" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="243" pos:column="35">"A2.cpp"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="245" pos:column="13">DataAssert</name><op:operator pos:line="245" pos:column="23">.</op:operator><name pos:line="245" pos:column="24">StatementsAreEqual</name></name><argument_list pos:line="245" pos:column="42">(<argument><expr><name pos:line="245" pos:column="43">beforeScope</name></expr></argument>, <argument><expr><name pos:line="245" pos:column="56">afterScope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="248" pos:column="9">[<expr><name pos:line="248" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="249" pos:column="9">public</specifier> <name pos:line="249" pos:column="16">void</name></type> <name pos:line="249" pos:column="21">TestCppRemovalWithNamespaceAndClass</name><parameter_list pos:line="249" pos:column="56">()</parameter_list> <block pos:line="249" pos:column="59">{
            <comment type="line" pos:line="250" pos:column="13">//Foo.h</comment>
            <comment type="line" pos:line="251" pos:column="13">//namespace A {</comment>
            <comment type="line" pos:line="252" pos:column="13">//	class Foo {</comment>
            <comment type="line" pos:line="253" pos:column="13">//		public:</comment>
            <comment type="line" pos:line="254" pos:column="13">//			int Bar(int b);</comment>
            <comment type="line" pos:line="255" pos:column="13">//	};</comment>
            <comment type="line" pos:line="256" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="257" pos:column="13">string</name></type> <name pos:line="257" pos:column="20">hXml</name> <init pos:line="257" pos:column="25">= <expr><lit:literal type="string" pos:line="257" pos:column="27">@"&lt;namespace&gt;namespace &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{
	&lt;class&gt;class &lt;name&gt;Foo&lt;/name&gt; &lt;block&gt;{&lt;private type=""default&gt;
		&lt;/private&gt;&lt;public&gt;public:
			&lt;function_decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Bar&lt;/name&gt;&lt;parameter_list&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;b&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt;;&lt;/function_decl&gt;
	&lt;/public&gt;}&lt;/block&gt;;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="264" pos:column="13">//Foo.cpp</comment>
            <comment type="line" pos:line="265" pos:column="13">//int A::Foo::Bar(int b) { }</comment>
            <decl_stmt><decl><type><name pos:line="266" pos:column="13">string</name></type> <name pos:line="266" pos:column="20">cppXml</name> <init pos:line="266" pos:column="27">= <expr><lit:literal type="string" pos:line="266" pos:column="29">@"&lt;function&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;&lt;name&gt;A&lt;/name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;&lt;name&gt;Bar&lt;/name&gt;&lt;/name&gt;&lt;parameter_list&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;b&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="268" pos:column="13">var</name></type> <name pos:line="268" pos:column="17">hFileUnit</name> <init pos:line="268" pos:column="27">= <expr><call><name><name pos:line="268" pos:column="29">FileUnitSetup</name><op:operator pos:line="268" pos:column="42">.</op:operator><name pos:line="268" pos:column="43">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="268" pos:column="67">(<argument><expr><name pos:line="268" pos:column="68">hXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="268" pos:column="74">"Foo.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="269" pos:column="13">var</name></type> <name pos:line="269" pos:column="17">cppFileUnit</name> <init pos:line="269" pos:column="29">= <expr><call><name><name pos:line="269" pos:column="31">FileUnitSetup</name><op:operator pos:line="269" pos:column="44">.</op:operator><name pos:line="269" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="269" pos:column="69">(<argument><expr><name pos:line="269" pos:column="70">cppXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="269" pos:column="78">"Foo.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="271" pos:column="13">var</name></type> <name pos:line="271" pos:column="17">beforeScope</name> <init pos:line="271" pos:column="29">= <expr><call><name><name pos:line="271" pos:column="31">CodeParser</name><op:operator pos:line="271" pos:column="41">.</op:operator><name pos:line="271" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="271" pos:column="55">(<argument><expr><name pos:line="271" pos:column="56">hFileUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="272" pos:column="13">var</name></type> <name pos:line="272" pos:column="17">afterScope</name> <init pos:line="272" pos:column="28">= <expr><call><name><name pos:line="272" pos:column="30">beforeScope</name><op:operator pos:line="272" pos:column="41">.</op:operator><name pos:line="272" pos:column="42">Merge</name></name><argument_list pos:line="272" pos:column="47">(<argument><expr><call><name><name pos:line="272" pos:column="48">CodeParser</name><op:operator pos:line="272" pos:column="58">.</op:operator><name pos:line="272" pos:column="59">ParseFileUnit</name></name><argument_list pos:line="272" pos:column="72">(<argument><expr><name pos:line="272" pos:column="73">cppFileUnit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="274" pos:column="13">afterScope</name><op:operator pos:line="274" pos:column="23">.</op:operator><name pos:line="274" pos:column="24">RemoveFile</name></name><argument_list pos:line="274" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="274" pos:column="35">"Foo.cpp"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="276" pos:column="13">DataAssert</name><op:operator pos:line="276" pos:column="23">.</op:operator><name pos:line="276" pos:column="24">StatementsAreEqual</name></name><argument_list pos:line="276" pos:column="42">(<argument><expr><name pos:line="276" pos:column="43">beforeScope</name></expr></argument>, <argument><expr><name pos:line="276" pos:column="56">afterScope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="279" pos:column="9">[<expr><name pos:line="279" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="280" pos:column="9">public</specifier> <name pos:line="280" pos:column="16">void</name></type> <name pos:line="280" pos:column="21">TestHeaderRemovalWithNamespaceAndClass</name><parameter_list pos:line="280" pos:column="59">()</parameter_list> <block pos:line="280" pos:column="62">{
            <comment type="line" pos:line="281" pos:column="13">//Foo.h</comment>
            <comment type="line" pos:line="282" pos:column="13">//namespace A {</comment>
            <comment type="line" pos:line="283" pos:column="13">//	class Foo {</comment>
            <comment type="line" pos:line="284" pos:column="13">//		public:</comment>
            <comment type="line" pos:line="285" pos:column="13">//			int Bar(int b);</comment>
            <comment type="line" pos:line="286" pos:column="13">//	};</comment>
            <comment type="line" pos:line="287" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="288" pos:column="13">string</name></type> <name pos:line="288" pos:column="20">hXml</name> <init pos:line="288" pos:column="25">= <expr><lit:literal type="string" pos:line="288" pos:column="27">@"&lt;namespace&gt;namespace &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{
	&lt;class&gt;class &lt;name&gt;Foo&lt;/name&gt; &lt;block&gt;{&lt;private type=""default&gt;
		&lt;/private&gt;&lt;public&gt;public:
			&lt;function_decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Bar&lt;/name&gt;&lt;parameter_list&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;b&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt;;&lt;/function_decl&gt;
	&lt;/public&gt;}&lt;/block&gt;;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="295" pos:column="13">//Foo.cpp</comment>
            <comment type="line" pos:line="296" pos:column="13">//int A::Foo::Bar(int b) { }</comment>
            <decl_stmt><decl><type><name pos:line="297" pos:column="13">string</name></type> <name pos:line="297" pos:column="20">cppXml</name> <init pos:line="297" pos:column="27">= <expr><lit:literal type="string" pos:line="297" pos:column="29">@"&lt;function&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;&lt;name&gt;A&lt;/name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;&lt;name&gt;Bar&lt;/name&gt;&lt;/name&gt;&lt;parameter_list&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;b&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="299" pos:column="13">var</name></type> <name pos:line="299" pos:column="17">hFileUnit</name> <init pos:line="299" pos:column="27">= <expr><call><name><name pos:line="299" pos:column="29">FileUnitSetup</name><op:operator pos:line="299" pos:column="42">.</op:operator><name pos:line="299" pos:column="43">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="299" pos:column="67">(<argument><expr><name pos:line="299" pos:column="68">hXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="299" pos:column="74">"Foo.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="300" pos:column="13">var</name></type> <name pos:line="300" pos:column="17">cppFileUnit</name> <init pos:line="300" pos:column="29">= <expr><call><name><name pos:line="300" pos:column="31">FileUnitSetup</name><op:operator pos:line="300" pos:column="44">.</op:operator><name pos:line="300" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="300" pos:column="69">(<argument><expr><name pos:line="300" pos:column="70">cppXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="300" pos:column="78">"Foo.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="302" pos:column="13">var</name></type> <name pos:line="302" pos:column="17">beforeScope</name> <init pos:line="302" pos:column="29">= <expr><call><name><name pos:line="302" pos:column="31">CodeParser</name><op:operator pos:line="302" pos:column="41">.</op:operator><name pos:line="302" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="302" pos:column="55">(<argument><expr><name pos:line="302" pos:column="56">cppFileUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="303" pos:column="13">var</name></type> <name pos:line="303" pos:column="17">afterScope</name> <init pos:line="303" pos:column="28">= <expr><call><name><name pos:line="303" pos:column="30">beforeScope</name><op:operator pos:line="303" pos:column="41">.</op:operator><name pos:line="303" pos:column="42">Merge</name></name><argument_list pos:line="303" pos:column="47">(<argument><expr><call><name><name pos:line="303" pos:column="48">CodeParser</name><op:operator pos:line="303" pos:column="58">.</op:operator><name pos:line="303" pos:column="59">ParseFileUnit</name></name><argument_list pos:line="303" pos:column="72">(<argument><expr><name pos:line="303" pos:column="73">hFileUnit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="305" pos:column="13">afterScope</name><op:operator pos:line="305" pos:column="23">.</op:operator><name pos:line="305" pos:column="24">RemoveFile</name></name><argument_list pos:line="305" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="305" pos:column="35">"Foo.h"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="307" pos:column="13">DataAssert</name><op:operator pos:line="307" pos:column="23">.</op:operator><name pos:line="307" pos:column="24">StatementsAreEqual</name></name><argument_list pos:line="307" pos:column="42">(<argument><expr><name pos:line="307" pos:column="43">beforeScope</name></expr></argument>, <argument><expr><name pos:line="307" pos:column="56">afterScope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="310" pos:column="9">[<expr><name pos:line="310" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="311" pos:column="9">public</specifier> <name pos:line="311" pos:column="16">void</name></type> <name pos:line="311" pos:column="21">TestTestHelper</name><parameter_list pos:line="311" pos:column="35">()</parameter_list> <block pos:line="311" pos:column="38">{
            <comment type="line" pos:line="312" pos:column="13">////A.h</comment>
            <comment type="line" pos:line="313" pos:column="13">//class Foo {</comment>
            <comment type="line" pos:line="314" pos:column="13">//  public:</comment>
            <comment type="line" pos:line="315" pos:column="13">//    int a;</comment>
            <comment type="line" pos:line="316" pos:column="13">//    int Add(int b);</comment>
            <comment type="line" pos:line="317" pos:column="13">//};</comment>
            <decl_stmt><decl><type><name pos:line="318" pos:column="13">string</name></type> <name pos:line="318" pos:column="20">xml</name> <init pos:line="318" pos:column="24">= <expr><lit:literal type="string" pos:line="318" pos:column="26">@"&lt;class&gt;class &lt;name&gt;Foo&lt;/name&gt; &lt;block&gt;{&lt;private type=""default&gt;
  &lt;/private&gt;&lt;public&gt;public:
    &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;a&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
    &lt;function_decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Add&lt;/name&gt;&lt;parameter_list&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;b&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt;;&lt;/function_decl&gt;
&lt;/public&gt;}&lt;/block&gt;;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="323" pos:column="13">var</name></type> <name pos:line="323" pos:column="17">fileunit</name> <init pos:line="323" pos:column="26">= <expr><call><name><name pos:line="323" pos:column="28">FileUnitSetup</name><op:operator pos:line="323" pos:column="41">.</op:operator><name pos:line="323" pos:column="42">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="323" pos:column="66">(<argument><expr><name pos:line="323" pos:column="67">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="323" pos:column="72">"A.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="324" pos:column="13">var</name></type> <name pos:line="324" pos:column="17">scope1</name> <init pos:line="324" pos:column="24">= <expr><call><name><name pos:line="324" pos:column="26">CodeParser</name><op:operator pos:line="324" pos:column="36">.</op:operator><name pos:line="324" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="324" pos:column="50">(<argument><expr><name pos:line="324" pos:column="51">fileunit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="325" pos:column="13">var</name></type> <name pos:line="325" pos:column="17">scope2</name> <init pos:line="325" pos:column="24">= <expr><call><name><name pos:line="325" pos:column="26">CodeParser</name><op:operator pos:line="325" pos:column="36">.</op:operator><name pos:line="325" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="325" pos:column="50">(<argument><expr><name pos:line="325" pos:column="51">fileunit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="326" pos:column="13">DataAssert</name><op:operator pos:line="326" pos:column="23">.</op:operator><name pos:line="326" pos:column="24">StatementsAreEqual</name></name><argument_list pos:line="326" pos:column="42">(<argument><expr><name pos:line="326" pos:column="43">scope1</name></expr></argument>, <argument><expr><name pos:line="326" pos:column="51">scope2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
