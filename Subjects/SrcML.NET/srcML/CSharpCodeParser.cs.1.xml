<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data\CSharpCodeParser.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2013 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Patrick Francis (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">System</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Collections</name><op:operator pos:line="13" pos:column="25">.</op:operator><name pos:line="13" pos:column="26">Generic</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Linq</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Xml</name><op:operator pos:line="15" pos:column="17">.</op:operator><name pos:line="15" pos:column="18">Linq</name></name>;</using>

<namespace pos:line="17" pos:column="1">namespace <name><name pos:line="17" pos:column="11">ABB</name><op:operator pos:line="17" pos:column="14">.</op:operator><name pos:line="17" pos:column="15">SrcML</name><op:operator pos:line="17" pos:column="20">.</op:operator><name pos:line="17" pos:column="21">Data</name></name> <block pos:line="17" pos:column="26">{

    <comment type="line" pos:line="19" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="20" pos:column="5">/// Provides parsing facilities for the C# language</comment>
    <comment type="line" pos:line="21" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="22" pos:column="5">public</specifier> class <name pos:line="22" pos:column="18">CSharpCodeParser</name> <super pos:line="22" pos:column="35">: <name pos:line="22" pos:column="37">AbstractCodeParser</name></super> <block pos:line="22" pos:column="56">{

        <comment type="line" pos:line="24" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="25" pos:column="9">/// Constructs a C# code parser</comment>
        <comment type="line" pos:line="26" pos:column="9">/// &lt;/summary&gt;</comment>
        <constructor><specifier pos:line="27" pos:column="9">public</specifier> <name pos:line="27" pos:column="16">CSharpCodeParser</name><parameter_list pos:line="27" pos:column="32">()</parameter_list>
            <member_list pos:line="28" pos:column="13">: <call><name pos:line="28" pos:column="15">base</name><argument_list pos:line="28" pos:column="19">()</argument_list></call> </member_list><block pos:line="28" pos:column="22">{
            <expr_stmt><expr><name><name pos:line="29" pos:column="13">this</name><op:operator pos:line="29" pos:column="17">.</op:operator><name pos:line="29" pos:column="18">TypeElementNames</name></name> <op:operator pos:line="29" pos:column="35">=</op:operator> <op:operator pos:line="29" pos:column="37">new</op:operator> <name><name pos:line="29" pos:column="41">HashSet</name><argument_list pos:line="29" pos:column="48">&lt;<argument><name pos:line="29" pos:column="49">XName</name></argument>&gt;</argument_list></name> <block pos:line="29" pos:column="56">{ <expr><name><name pos:line="29" pos:column="58">SRC</name><op:operator pos:line="29" pos:column="61">.</op:operator><name pos:line="29" pos:column="62">Class</name></name></expr><op:operator pos:line="29" pos:column="67">,</op:operator> <expr><name><name pos:line="29" pos:column="69">SRC</name><op:operator pos:line="29" pos:column="72">.</op:operator><name pos:line="29" pos:column="73">Enum</name></name></expr><op:operator pos:line="29" pos:column="77">,</op:operator> <expr><name><name pos:line="29" pos:column="79">SRC</name><op:operator pos:line="29" pos:column="82">.</op:operator><name pos:line="29" pos:column="83">Struct</name></name></expr> }</block></expr>;</expr_stmt> <comment type="line" pos:line="29" pos:column="93">//SRC.Interface?</comment>
            <expr_stmt><expr><name><name pos:line="30" pos:column="13">this</name><op:operator pos:line="30" pos:column="17">.</op:operator><name pos:line="30" pos:column="18">AliasElementName</name></name> <op:operator pos:line="30" pos:column="35">=</op:operator> <name><name pos:line="30" pos:column="37">SRC</name><op:operator pos:line="30" pos:column="40">.</op:operator><name pos:line="30" pos:column="41">Using</name></name></expr>;</expr_stmt>
            <comment type="line" pos:line="31" pos:column="13">//TODO: what else needs to be set here?</comment>
        }</block></constructor>

        <comment type="line" pos:line="34" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="35" pos:column="9">/// Returns &lt;c&gt;Language.CSharp&lt;/c&gt;</comment>
        <comment type="line" pos:line="36" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="37" pos:column="9">public</specifier> <specifier pos:line="37" pos:column="16">override</specifier> <name pos:line="37" pos:column="25">Language</name></type> <name pos:line="37" pos:column="34">ParserLanguage</name> <block pos:line="37" pos:column="49">{
            <function><name pos:line="38" pos:column="13">get</name> <block pos:line="38" pos:column="17">{ <return pos:line="38" pos:column="19">return <expr><name><name pos:line="38" pos:column="26">Language</name><op:operator pos:line="38" pos:column="34">.</op:operator><name pos:line="38" pos:column="35">CSharp</name></name></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="41" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="42" pos:column="9">/// Tests whether this container is a reference or whether it includes a definition.</comment>
        <comment type="line" pos:line="43" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="44" pos:column="9">/// &lt;param name="element"&gt;The element to test&lt;/param&gt;</comment>
        <comment type="line" pos:line="45" pos:column="9">/// &lt;returns&gt;True if this is a reference element; false otherwise&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="46" pos:column="9">protected</specifier> <specifier pos:line="46" pos:column="19">override</specifier> <name pos:line="46" pos:column="28">bool</name></type> <name pos:line="46" pos:column="33">ContainerIsReference</name><parameter_list pos:line="46" pos:column="53">(<param><decl><type><name pos:line="46" pos:column="54">XElement</name></type> <name pos:line="46" pos:column="63">element</name></decl></param>)</parameter_list> <block pos:line="46" pos:column="72">{
            <if pos:line="47" pos:column="13">if<condition pos:line="47" pos:column="15">(<expr><name pos:line="47" pos:column="16">element</name> <op:operator pos:line="47" pos:column="24">==</op:operator> <name pos:line="47" pos:column="27">null</name></expr>)</condition><then pos:line="47" pos:column="32"> <block pos:line="47" pos:column="33">{
                <throw pos:line="48" pos:column="17">throw <expr><op:operator pos:line="48" pos:column="23">new</op:operator> <call><name pos:line="48" pos:column="27">ArgumentNullException</name><argument_list pos:line="48" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="48" pos:column="49">"element"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="51" pos:column="13">var</name></type> <name pos:line="51" pos:column="17">functionNames</name> <init pos:line="51" pos:column="31">= <expr><op:operator pos:line="51" pos:column="33">new</op:operator><index pos:line="51" pos:column="36">[]</index> <block pos:line="51" pos:column="39">{ <expr><name><name pos:line="51" pos:column="41">SRC</name><op:operator pos:line="51" pos:column="44">.</op:operator><name pos:line="51" pos:column="45">Function</name></name></expr>, <expr><name><name pos:line="51" pos:column="55">SRC</name><op:operator pos:line="51" pos:column="58">.</op:operator><name pos:line="51" pos:column="59">Constructor</name></name></expr>, <expr><name><name pos:line="51" pos:column="72">SRC</name><op:operator pos:line="51" pos:column="75">.</op:operator><name pos:line="51" pos:column="76">Destructor</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="52" pos:column="13">bool</name></type> <name pos:line="52" pos:column="18">isReference</name> <init pos:line="52" pos:column="30">= <expr><lit:literal type="boolean" pos:line="52" pos:column="32">false</lit:literal></expr></init></decl>;</decl_stmt>
            <if pos:line="53" pos:column="13">if<condition pos:line="53" pos:column="15">(<expr><call><name><name pos:line="53" pos:column="16">functionNames</name><op:operator pos:line="53" pos:column="29">.</op:operator><name pos:line="53" pos:column="30">Contains</name></name><argument_list pos:line="53" pos:column="38">(<argument><expr><name><name pos:line="53" pos:column="39">element</name><op:operator pos:line="53" pos:column="46">.</op:operator><name pos:line="53" pos:column="47">Name</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="53" pos:column="53"> <block pos:line="53" pos:column="54">{
                <decl_stmt><decl><type><name pos:line="54" pos:column="17">var</name></type> <name pos:line="54" pos:column="21">typeElement</name> <init pos:line="54" pos:column="33">= <expr><call><name><name pos:line="54" pos:column="35">element</name><op:operator pos:line="54" pos:column="42">.</op:operator><name pos:line="54" pos:column="43">Element</name></name><argument_list pos:line="54" pos:column="50">(<argument><expr><name><name pos:line="54" pos:column="51">SRC</name><op:operator pos:line="54" pos:column="54">.</op:operator><name pos:line="54" pos:column="55">Type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="55" pos:column="17">if<condition pos:line="55" pos:column="19">(<expr><name pos:line="55" pos:column="20">typeElement</name> <op:operator pos:line="55" pos:column="32">!=</op:operator> <name pos:line="55" pos:column="35">null</name> <op:operator pos:line="55" pos:column="40">&amp;&amp;</op:operator> <call><name><name pos:line="55" pos:column="43">typeElement</name><op:operator pos:line="55" pos:column="54">.</op:operator><name pos:line="55" pos:column="55">Elements</name></name><argument_list pos:line="55" pos:column="63">(<argument><expr><name><name pos:line="55" pos:column="64">SRC</name><op:operator pos:line="55" pos:column="67">.</op:operator><name pos:line="55" pos:column="68">Specifier</name></name></expr></argument>)</argument_list></call><op:operator pos:line="55" pos:column="78">.</op:operator><call><name pos:line="55" pos:column="79">Any</name><argument_list pos:line="55" pos:column="82">(<argument><expr><lambda><name pos:line="55" pos:column="83">spec</name> <op:operator pos:line="55" pos:column="88">=&gt;</op:operator> <name><name pos:line="55" pos:column="91">spec</name><op:operator pos:line="55" pos:column="95">.</op:operator><name pos:line="55" pos:column="96">Value</name></name> <op:operator pos:line="55" pos:column="102">==</op:operator> <lit:literal type="string" pos:line="55" pos:column="105">"partial"</lit:literal></lambda></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="55" pos:column="116"> <block pos:line="55" pos:column="117">{
                    <comment type="line" pos:line="56" pos:column="21">//partial method</comment>
                    <if pos:line="57" pos:column="21">if<condition pos:line="57" pos:column="23">(<expr><call><name><name pos:line="57" pos:column="24">element</name><op:operator pos:line="57" pos:column="31">.</op:operator><name pos:line="57" pos:column="32">Element</name></name><argument_list pos:line="57" pos:column="39">(<argument><expr><name><name pos:line="57" pos:column="40">SRC</name><op:operator pos:line="57" pos:column="43">.</op:operator><name pos:line="57" pos:column="44">Block</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="57" pos:column="51">==</op:operator> <name pos:line="57" pos:column="54">null</name></expr>)</condition><then pos:line="57" pos:column="59"> <block pos:line="57" pos:column="60">{
                        <expr_stmt><expr><name pos:line="58" pos:column="25">isReference</name> <op:operator pos:line="58" pos:column="37">=</op:operator> <lit:literal type="boolean" pos:line="58" pos:column="39">true</lit:literal></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>
            }</block></then></if>
            <return pos:line="62" pos:column="13">return <expr><name pos:line="62" pos:column="20">isReference</name> <op:operator pos:line="62" pos:column="32">||</op:operator> <call><name><name pos:line="62" pos:column="35">base</name><op:operator pos:line="62" pos:column="39">.</op:operator><name pos:line="62" pos:column="40">ContainerIsReference</name></name><argument_list pos:line="62" pos:column="60">(<argument><expr><name pos:line="62" pos:column="61">element</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="65" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="66" pos:column="9">/// Gets the parent type elements for a type element</comment>
        <comment type="line" pos:line="67" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="68" pos:column="9">/// &lt;param name="typeElement"&gt;The type element to parse&lt;/param&gt;</comment>
        <comment type="line" pos:line="69" pos:column="9">/// &lt;returns&gt;The type use elements&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="70" pos:column="9">protected</specifier> <specifier pos:line="70" pos:column="19">override</specifier> <name><name pos:line="70" pos:column="28">IEnumerable</name><argument_list pos:line="70" pos:column="39">&lt;<argument><name pos:line="70" pos:column="40">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="70" pos:column="50">GetParentTypeUseElements</name><parameter_list pos:line="70" pos:column="74">(<param><decl><type><name pos:line="70" pos:column="75">XElement</name></type> <name pos:line="70" pos:column="84">typeElement</name></decl></param>)</parameter_list> <block pos:line="70" pos:column="97">{
            <decl_stmt><decl><type><name pos:line="71" pos:column="13">var</name></type> <name pos:line="71" pos:column="17">superElement</name> <init pos:line="71" pos:column="30">= <expr><call><name><name pos:line="71" pos:column="32">typeElement</name><op:operator pos:line="71" pos:column="43">.</op:operator><name pos:line="71" pos:column="44">Element</name></name><argument_list pos:line="71" pos:column="51">(<argument><expr><name><name pos:line="71" pos:column="52">SRC</name><op:operator pos:line="71" pos:column="55">.</op:operator><name pos:line="71" pos:column="56">Super</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="72" pos:column="13">if<condition pos:line="72" pos:column="15">(<expr><name pos:line="72" pos:column="16">superElement</name> <op:operator pos:line="72" pos:column="29">!=</op:operator> <name pos:line="72" pos:column="32">null</name></expr>)</condition><then pos:line="72" pos:column="37"> <block pos:line="72" pos:column="38">{
                <return pos:line="73" pos:column="17">return <expr><call><name><name pos:line="73" pos:column="24">superElement</name><op:operator pos:line="73" pos:column="36">.</op:operator><name pos:line="73" pos:column="37">Elements</name></name><argument_list pos:line="73" pos:column="45">(<argument><expr><name><name pos:line="73" pos:column="46">SRC</name><op:operator pos:line="73" pos:column="49">.</op:operator><name pos:line="73" pos:column="50">Name</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
            <return pos:line="75" pos:column="13">return <expr><call><name><name pos:line="75" pos:column="20">Enumerable</name><op:operator pos:line="75" pos:column="30">.</op:operator><name><name pos:line="75" pos:column="31">Empty</name><argument_list pos:line="75" pos:column="36">&lt;<argument><name pos:line="75" pos:column="37">XElement</name></argument>&gt;</argument_list></name></name><argument_list pos:line="75" pos:column="46">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="78" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="79" pos:column="9">/// Parses a C# boolean literal</comment>
        <comment type="line" pos:line="80" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="81" pos:column="9">/// &lt;param name="literalValue"&gt;The literal value&lt;/param&gt;</comment>
        <comment type="line" pos:line="82" pos:column="9">/// &lt;returns&gt;returns "bool"&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="83" pos:column="9">protected</specifier> <specifier pos:line="83" pos:column="19">override</specifier> <name pos:line="83" pos:column="28">string</name></type> <name pos:line="83" pos:column="35">GetTypeForBooleanLiteral</name><parameter_list pos:line="83" pos:column="59">(<param><decl><type><name pos:line="83" pos:column="60">string</name></type> <name pos:line="83" pos:column="67">literalValue</name></decl></param>)</parameter_list> <block pos:line="83" pos:column="81">{
            <return pos:line="84" pos:column="13">return <expr><lit:literal type="string" pos:line="84" pos:column="20">"bool"</lit:literal></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="87" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="88" pos:column="9">/// Parses a C# character literal</comment>
        <comment type="line" pos:line="89" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="90" pos:column="9">/// &lt;param name="literalValue"&gt;The literal value&lt;/param&gt;</comment>
        <comment type="line" pos:line="91" pos:column="9">/// &lt;returns&gt;returns "char"&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="92" pos:column="9">protected</specifier> <specifier pos:line="92" pos:column="19">override</specifier> <name pos:line="92" pos:column="28">string</name></type> <name pos:line="92" pos:column="35">GetTypeForCharacterLiteral</name><parameter_list pos:line="92" pos:column="61">(<param><decl><type><name pos:line="92" pos:column="62">string</name></type> <name pos:line="92" pos:column="69">literalValue</name></decl></param>)</parameter_list> <block pos:line="92" pos:column="83">{
            <return pos:line="93" pos:column="13">return <expr><lit:literal type="string" pos:line="93" pos:column="20">"char"</lit:literal></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="96" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="97" pos:column="9">/// Parses a C# number literal based on C# 4.0 in a Nutshell by Joseph Albahari and Ben</comment>
        <comment type="line" pos:line="98" pos:column="9">/// Albahari, page 22.</comment>
        <comment type="line" pos:line="99" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="100" pos:column="9">/// &lt;param name="literalValue"&gt;The literal value&lt;/param&gt;</comment>
        <comment type="line" pos:line="101" pos:column="9">/// &lt;returns&gt;returns the appropriate numeric type&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="102" pos:column="9">protected</specifier> <specifier pos:line="102" pos:column="19">override</specifier> <name pos:line="102" pos:column="28">string</name></type> <name pos:line="102" pos:column="35">GetTypeForNumberLiteral</name><parameter_list pos:line="102" pos:column="58">(<param><decl><type><name pos:line="102" pos:column="59">string</name></type> <name pos:line="102" pos:column="66">literalValue</name></decl></param>)</parameter_list> <block pos:line="102" pos:column="80">{
            <comment type="line" pos:line="103" pos:column="13">//rules taken from C# 4.0 in a Nutshell by Joseph Albahari and Ben Albahari, page 22.</comment>
            <decl_stmt><decl><type><name pos:line="104" pos:column="13">bool</name></type> <name pos:line="104" pos:column="18">isHex</name> <init pos:line="104" pos:column="24">= <expr><call><name><name pos:line="104" pos:column="26">literalValue</name><op:operator pos:line="104" pos:column="38">.</op:operator><name pos:line="104" pos:column="39">StartsWith</name></name><argument_list pos:line="104" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="104" pos:column="50">"0x"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="105" pos:column="13">string</name></type> <name pos:line="105" pos:column="20">suffix</name></decl>;</decl_stmt>
            <if pos:line="106" pos:column="13">if<condition pos:line="106" pos:column="15">(<expr><call><name><name pos:line="106" pos:column="16">literalValue</name><op:operator pos:line="106" pos:column="28">.</op:operator><name pos:line="106" pos:column="29">EndsWith</name></name><argument_list pos:line="106" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="106" pos:column="38">"UL"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="106" pos:column="44">||</op:operator> <call><name><name pos:line="106" pos:column="47">literalValue</name><op:operator pos:line="106" pos:column="59">.</op:operator><name pos:line="106" pos:column="60">EndsWith</name></name><argument_list pos:line="106" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="106" pos:column="69">"LU"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="106" pos:column="75"> <block pos:line="106" pos:column="76">{
                <expr_stmt><expr><name pos:line="107" pos:column="17">suffix</name> <op:operator pos:line="107" pos:column="24">=</op:operator> <call><name><name pos:line="107" pos:column="26">literalValue</name><op:operator pos:line="107" pos:column="38">.</op:operator><name pos:line="107" pos:column="39">Substring</name></name><argument_list pos:line="107" pos:column="48">(<argument><expr><name><name pos:line="107" pos:column="49">literalValue</name><op:operator pos:line="107" pos:column="61">.</op:operator><name pos:line="107" pos:column="62">Length</name></name> <op:operator pos:line="107" pos:column="69">-</op:operator> <lit:literal type="number" pos:line="107" pos:column="71">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="108" pos:column="15">else <block pos:line="108" pos:column="20">{
                <expr_stmt><expr><name pos:line="109" pos:column="17">suffix</name> <op:operator pos:line="109" pos:column="24">=</op:operator> <call><name><name pos:line="109" pos:column="26">literalValue</name><op:operator pos:line="109" pos:column="38">.</op:operator><name pos:line="109" pos:column="39">Substring</name></name><argument_list pos:line="109" pos:column="48">(<argument><expr><name><name pos:line="109" pos:column="49">literalValue</name><op:operator pos:line="109" pos:column="61">.</op:operator><name pos:line="109" pos:column="62">Length</name></name> <op:operator pos:line="109" pos:column="69">-</op:operator> <lit:literal type="number" pos:line="109" pos:column="71">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <comment type="line" pos:line="111" pos:column="13">//process suffix</comment>
            <if pos:line="112" pos:column="13">if<condition pos:line="112" pos:column="15">(<expr><call><name><name pos:line="112" pos:column="16">string</name><op:operator pos:line="112" pos:column="22">.</op:operator><name pos:line="112" pos:column="23">Compare</name></name><argument_list pos:line="112" pos:column="30">(<argument><expr><name pos:line="112" pos:column="31">suffix</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="112" pos:column="39">"F"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="112" pos:column="44">StringComparison</name><op:operator pos:line="112" pos:column="60">.</op:operator><name pos:line="112" pos:column="61">InvariantCultureIgnoreCase</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="112" pos:column="89">==</op:operator> <lit:literal type="number" pos:line="112" pos:column="92">0</lit:literal> <op:operator pos:line="112" pos:column="94">&amp;&amp;</op:operator> <op:operator pos:line="112" pos:column="97">!</op:operator><name pos:line="112" pos:column="98">isHex</name></expr>)</condition><then pos:line="112" pos:column="104"> <block pos:line="112" pos:column="105">{
                <return pos:line="113" pos:column="17">return <expr><lit:literal type="string" pos:line="113" pos:column="24">"float"</lit:literal></expr>;</return>
            }</block></then></if>
            <if pos:line="115" pos:column="13">if<condition pos:line="115" pos:column="15">(<expr><call><name><name pos:line="115" pos:column="16">string</name><op:operator pos:line="115" pos:column="22">.</op:operator><name pos:line="115" pos:column="23">Compare</name></name><argument_list pos:line="115" pos:column="30">(<argument><expr><name pos:line="115" pos:column="31">suffix</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="115" pos:column="39">"D"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="115" pos:column="44">StringComparison</name><op:operator pos:line="115" pos:column="60">.</op:operator><name pos:line="115" pos:column="61">InvariantCultureIgnoreCase</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="115" pos:column="89">==</op:operator> <lit:literal type="number" pos:line="115" pos:column="92">0</lit:literal></expr>)</condition><then pos:line="115" pos:column="94"> <block pos:line="115" pos:column="95">{
                <return pos:line="116" pos:column="17">return <expr><lit:literal type="string" pos:line="116" pos:column="24">"double"</lit:literal></expr>;</return>
            }</block></then></if>
            <if pos:line="118" pos:column="13">if<condition pos:line="118" pos:column="15">(<expr><call><name><name pos:line="118" pos:column="16">string</name><op:operator pos:line="118" pos:column="22">.</op:operator><name pos:line="118" pos:column="23">Compare</name></name><argument_list pos:line="118" pos:column="30">(<argument><expr><name pos:line="118" pos:column="31">suffix</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="118" pos:column="39">"M"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="118" pos:column="44">StringComparison</name><op:operator pos:line="118" pos:column="60">.</op:operator><name pos:line="118" pos:column="61">InvariantCultureIgnoreCase</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="118" pos:column="89">==</op:operator> <lit:literal type="number" pos:line="118" pos:column="92">0</lit:literal></expr>)</condition><then pos:line="118" pos:column="94"> <block pos:line="118" pos:column="95">{
                <return pos:line="119" pos:column="17">return <expr><lit:literal type="string" pos:line="119" pos:column="24">"decimal"</lit:literal></expr>;</return>
            }</block></then></if>
            <if pos:line="121" pos:column="13">if<condition pos:line="121" pos:column="15">(<expr><call><name><name pos:line="121" pos:column="16">string</name><op:operator pos:line="121" pos:column="22">.</op:operator><name pos:line="121" pos:column="23">Compare</name></name><argument_list pos:line="121" pos:column="30">(<argument><expr><name pos:line="121" pos:column="31">suffix</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="121" pos:column="39">"U"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="121" pos:column="44">StringComparison</name><op:operator pos:line="121" pos:column="60">.</op:operator><name pos:line="121" pos:column="61">InvariantCultureIgnoreCase</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="121" pos:column="89">==</op:operator> <lit:literal type="number" pos:line="121" pos:column="92">0</lit:literal></expr>)</condition><then pos:line="121" pos:column="94"> <block pos:line="121" pos:column="95">{
                <return pos:line="122" pos:column="17">return <expr><lit:literal type="string" pos:line="122" pos:column="24">"uint"</lit:literal></expr>;</return>
            }</block></then></if>
            <if pos:line="124" pos:column="13">if<condition pos:line="124" pos:column="15">(<expr><call><name><name pos:line="124" pos:column="16">string</name><op:operator pos:line="124" pos:column="22">.</op:operator><name pos:line="124" pos:column="23">Compare</name></name><argument_list pos:line="124" pos:column="30">(<argument><expr><name pos:line="124" pos:column="31">suffix</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="124" pos:column="39">"L"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="124" pos:column="44">StringComparison</name><op:operator pos:line="124" pos:column="60">.</op:operator><name pos:line="124" pos:column="61">InvariantCultureIgnoreCase</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="124" pos:column="89">==</op:operator> <lit:literal type="number" pos:line="124" pos:column="92">0</lit:literal></expr>)</condition><then pos:line="124" pos:column="94"> <block pos:line="124" pos:column="95">{
                <return pos:line="125" pos:column="17">return <expr><lit:literal type="string" pos:line="125" pos:column="24">"long"</lit:literal></expr>;</return>
            }</block></then></if>
            <if pos:line="127" pos:column="13">if<condition pos:line="127" pos:column="15">(<expr><call><name><name pos:line="127" pos:column="16">string</name><op:operator pos:line="127" pos:column="22">.</op:operator><name pos:line="127" pos:column="23">Compare</name></name><argument_list pos:line="127" pos:column="30">(<argument><expr><name pos:line="127" pos:column="31">suffix</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="127" pos:column="39">"UL"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="127" pos:column="45">StringComparison</name><op:operator pos:line="127" pos:column="61">.</op:operator><name pos:line="127" pos:column="62">InvariantCultureIgnoreCase</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="127" pos:column="90">==</op:operator> <lit:literal type="number" pos:line="127" pos:column="93">0</lit:literal> <op:operator pos:line="127" pos:column="95">||</op:operator>
               <call><name><name pos:line="128" pos:column="16">string</name><op:operator pos:line="128" pos:column="22">.</op:operator><name pos:line="128" pos:column="23">Compare</name></name><argument_list pos:line="128" pos:column="30">(<argument><expr><name pos:line="128" pos:column="31">suffix</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="128" pos:column="39">"LU"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="128" pos:column="45">StringComparison</name><op:operator pos:line="128" pos:column="61">.</op:operator><name pos:line="128" pos:column="62">InvariantCultureIgnoreCase</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="128" pos:column="90">==</op:operator> <lit:literal type="number" pos:line="128" pos:column="93">0</lit:literal></expr>)</condition><then pos:line="128" pos:column="95"> <block pos:line="128" pos:column="96">{
                <return pos:line="129" pos:column="17">return <expr><lit:literal type="string" pos:line="129" pos:column="24">"ulong"</lit:literal></expr>;</return>
            }</block></then></if>
            <comment type="line" pos:line="131" pos:column="13">//no (valid) suffix, infer type</comment>
            <if pos:line="132" pos:column="13">if<condition pos:line="132" pos:column="15">(<expr><call><name><name pos:line="132" pos:column="16">literalValue</name><op:operator pos:line="132" pos:column="28">.</op:operator><name pos:line="132" pos:column="29">Contains</name></name><argument_list pos:line="132" pos:column="37">(<argument><expr><lit:literal type="char" pos:line="132" pos:column="38">'.'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="132" pos:column="43">||</op:operator> <call><name><name pos:line="132" pos:column="46">literalValue</name><op:operator pos:line="132" pos:column="58">.</op:operator><name pos:line="132" pos:column="59">Contains</name></name><argument_list pos:line="132" pos:column="67">(<argument><expr><lit:literal type="char" pos:line="132" pos:column="68">'E'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="132" pos:column="73"> <block pos:line="132" pos:column="74">{
                <return pos:line="133" pos:column="17">return <expr><lit:literal type="string" pos:line="133" pos:column="24">"double"</lit:literal></expr>;</return>
            }</block></then></if>
            <comment type="line" pos:line="135" pos:column="13">//TODO: determine proper integral type based on size of literal, i.e. int, uint, long, or ulong</comment>
            <return pos:line="136" pos:column="13">return <expr><lit:literal type="string" pos:line="136" pos:column="20">"int"</lit:literal></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="139" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="140" pos:column="9">/// Parses a C# string literal</comment>
        <comment type="line" pos:line="141" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="142" pos:column="9">/// &lt;param name="literalValue"&gt;The literal value&lt;/param&gt;</comment>
        <comment type="line" pos:line="143" pos:column="9">/// &lt;returns&gt;Returns "string"&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="144" pos:column="9">protected</specifier> <specifier pos:line="144" pos:column="19">override</specifier> <name pos:line="144" pos:column="28">string</name></type> <name pos:line="144" pos:column="35">GetTypeForStringLiteral</name><parameter_list pos:line="144" pos:column="58">(<param><decl><type><name pos:line="144" pos:column="59">string</name></type> <name pos:line="144" pos:column="66">literalValue</name></decl></param>)</parameter_list> <block pos:line="144" pos:column="80">{
            <return pos:line="145" pos:column="13">return <expr><lit:literal type="string" pos:line="145" pos:column="20">"string"</lit:literal></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="148" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="149" pos:column="9">/// Parses a C# namespace block</comment>
        <comment type="line" pos:line="150" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="151" pos:column="9">/// &lt;param name="namespaceElement"&gt;the namespace element to parse&lt;/param&gt;</comment>
        <comment type="line" pos:line="152" pos:column="9">/// &lt;param name="context"&gt;the parser context&lt;/param&gt;</comment>
        <function><type><specifier pos:line="153" pos:column="9">protected</specifier> <specifier pos:line="153" pos:column="19">override</specifier> <name pos:line="153" pos:column="28">NamespaceDefinition</name></type> <name pos:line="153" pos:column="48">ParseNamespaceElement</name><parameter_list pos:line="153" pos:column="69">(<param><decl><type><name pos:line="153" pos:column="70">XElement</name></type> <name pos:line="153" pos:column="79">namespaceElement</name></decl></param>, <param><decl><type><name pos:line="153" pos:column="97">ParserContext</name></type> <name pos:line="153" pos:column="111">context</name></decl></param>)</parameter_list> <block pos:line="153" pos:column="120">{
            <if pos:line="154" pos:column="13">if<condition pos:line="154" pos:column="15">(<expr><name pos:line="154" pos:column="16">namespaceElement</name> <op:operator pos:line="154" pos:column="33">==</op:operator> <name pos:line="154" pos:column="36">null</name></expr>)</condition><then pos:line="154" pos:column="41">
                <throw pos:line="155" pos:column="17">throw <expr><op:operator pos:line="155" pos:column="23">new</op:operator> <call><name pos:line="155" pos:column="27">ArgumentNullException</name><argument_list pos:line="155" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="155" pos:column="49">"namespaceElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="156" pos:column="13">if<condition pos:line="156" pos:column="15">(<expr><op:operator pos:line="156" pos:column="16">!</op:operator><call><name><name pos:line="156" pos:column="17">NamespaceElementNames</name><op:operator pos:line="156" pos:column="38">.</op:operator><name pos:line="156" pos:column="39">Contains</name></name><argument_list pos:line="156" pos:column="47">(<argument><expr><name><name pos:line="156" pos:column="48">namespaceElement</name><op:operator pos:line="156" pos:column="64">.</op:operator><name pos:line="156" pos:column="65">Name</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="156" pos:column="71">
                <throw pos:line="157" pos:column="17">throw <expr><op:operator pos:line="157" pos:column="23">new</op:operator> <call><name pos:line="157" pos:column="27">ArgumentException</name><argument_list pos:line="157" pos:column="44">(<argument><expr><call><name><name pos:line="157" pos:column="45">string</name><op:operator pos:line="157" pos:column="51">.</op:operator><name pos:line="157" pos:column="52">Format</name></name><argument_list pos:line="157" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="157" pos:column="59">"Not a valid namespace element: {0}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="157" pos:column="97">namespaceElement</name><op:operator pos:line="157" pos:column="113">.</op:operator><name pos:line="157" pos:column="114">Name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="157" pos:column="121">"namespaceElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="158" pos:column="13">if<condition pos:line="158" pos:column="15">(<expr><name pos:line="158" pos:column="16">context</name> <op:operator pos:line="158" pos:column="24">==</op:operator> <name pos:line="158" pos:column="27">null</name></expr>)</condition><then pos:line="158" pos:column="32">
                <throw pos:line="159" pos:column="17">throw <expr><op:operator pos:line="159" pos:column="23">new</op:operator> <call><name pos:line="159" pos:column="27">ArgumentNullException</name><argument_list pos:line="159" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="159" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="161" pos:column="13">var</name></type> <name pos:line="161" pos:column="17">nameElement</name> <init pos:line="161" pos:column="29">= <expr><call><name><name pos:line="161" pos:column="31">namespaceElement</name><op:operator pos:line="161" pos:column="47">.</op:operator><name pos:line="161" pos:column="48">Element</name></name><argument_list pos:line="161" pos:column="55">(<argument><expr><name><name pos:line="161" pos:column="56">SRC</name><op:operator pos:line="161" pos:column="59">.</op:operator><name pos:line="161" pos:column="60">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="162" pos:column="13">if<condition pos:line="162" pos:column="15">(<expr><name pos:line="162" pos:column="16">nameElement</name> <op:operator pos:line="162" pos:column="28">==</op:operator> <name pos:line="162" pos:column="31">null</name></expr>)</condition><then pos:line="162" pos:column="36"> <block pos:line="162" pos:column="37">{
                <throw pos:line="163" pos:column="17">throw <expr><op:operator pos:line="163" pos:column="23">new</op:operator> <call><name pos:line="163" pos:column="27">ParseException</name><argument_list pos:line="163" pos:column="41">(<argument><expr><name><name pos:line="163" pos:column="42">context</name><op:operator pos:line="163" pos:column="49">.</op:operator><name pos:line="163" pos:column="50">FileName</name></name></expr></argument>, <argument><expr><call><name><name pos:line="163" pos:column="60">namespaceElement</name><op:operator pos:line="163" pos:column="76">.</op:operator><name pos:line="163" pos:column="77">GetSrcLineNumber</name></name><argument_list pos:line="163" pos:column="93">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="163" pos:column="97">namespaceElement</name><op:operator pos:line="163" pos:column="113">.</op:operator><name pos:line="163" pos:column="114">GetSrcLinePosition</name></name><argument_list pos:line="163" pos:column="132">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="163" pos:column="136">this</name></expr></argument>,
                                         <argument><expr><lit:literal type="string" pos:line="164" pos:column="42">"No SRC.Name element found in namespace."</lit:literal></expr></argument>, <argument><expr><name pos:line="164" pos:column="85">null</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <comment type="line" pos:line="167" pos:column="13">//parse the name and create a NamespaceDefinition for each component</comment>
            <decl_stmt><decl><type><name pos:line="168" pos:column="13">NamespaceDefinition</name></type> <name pos:line="168" pos:column="33">topNS</name> <init pos:line="168" pos:column="39">= <expr><name pos:line="168" pos:column="41">null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="169" pos:column="13">NamespaceDefinition</name></type> <name pos:line="169" pos:column="33">lastNS</name> <init pos:line="169" pos:column="40">= <expr><name pos:line="169" pos:column="42">null</name></expr></init></decl>;</decl_stmt>
            <foreach pos:line="170" pos:column="13">foreach(<init><decl><type><name pos:line="170" pos:column="21">var</name></type> <name pos:line="170" pos:column="25">name</name> <range pos:line="170" pos:column="30">in <expr><call><name><name pos:line="170" pos:column="33">NameHelper</name><op:operator pos:line="170" pos:column="43">.</op:operator><name pos:line="170" pos:column="44">GetNameElementsFromName</name></name><argument_list pos:line="170" pos:column="67">(<argument><expr><name pos:line="170" pos:column="68">nameElement</name></expr></argument>)</argument_list></call></expr></range></decl></init>) <block pos:line="170" pos:column="82">{
                <decl_stmt><decl><type><name pos:line="171" pos:column="17">var</name></type> <name pos:line="171" pos:column="21">newNS</name> <init pos:line="171" pos:column="27">= <expr><op:operator pos:line="171" pos:column="29">new</op:operator> <name pos:line="171" pos:column="33">NamespaceDefinition</name> <block pos:line="171" pos:column="53">{
                    <expr><name pos:line="172" pos:column="21">Name</name> <op:operator pos:line="172" pos:column="26">=</op:operator> <name><name pos:line="172" pos:column="28">name</name><op:operator pos:line="172" pos:column="32">.</op:operator><name pos:line="172" pos:column="33">Value</name></name></expr>,
                    <expr><name pos:line="173" pos:column="21">ProgrammingLanguage</name> <op:operator pos:line="173" pos:column="41">=</op:operator> <name pos:line="173" pos:column="43">ParserLanguage</name></expr>
                }</block></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="175" pos:column="17">newNS</name><op:operator pos:line="175" pos:column="22">.</op:operator><name pos:line="175" pos:column="23">AddLocation</name></name><argument_list pos:line="175" pos:column="34">(<argument><expr><call><name><name pos:line="175" pos:column="35">context</name><op:operator pos:line="175" pos:column="42">.</op:operator><name pos:line="175" pos:column="43">CreateLocation</name></name><argument_list pos:line="175" pos:column="57">(<argument><expr><name pos:line="175" pos:column="58">name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="176" pos:column="17">if<condition pos:line="176" pos:column="19">(<expr><name pos:line="176" pos:column="20">topNS</name> <op:operator pos:line="176" pos:column="26">==</op:operator> <name pos:line="176" pos:column="29">null</name></expr>)</condition><then pos:line="176" pos:column="34"> <block pos:line="176" pos:column="35">{ <expr_stmt><expr><name pos:line="176" pos:column="37">topNS</name> <op:operator pos:line="176" pos:column="43">=</op:operator> <name pos:line="176" pos:column="45">newNS</name></expr>;</expr_stmt> }</block></then></if>
                <if pos:line="177" pos:column="17">if<condition pos:line="177" pos:column="19">(<expr><name pos:line="177" pos:column="20">lastNS</name> <op:operator pos:line="177" pos:column="27">!=</op:operator> <name pos:line="177" pos:column="30">null</name></expr>)</condition><then pos:line="177" pos:column="35"> <block pos:line="177" pos:column="36">{
                    <expr_stmt><expr><call><name><name pos:line="178" pos:column="21">lastNS</name><op:operator pos:line="178" pos:column="27">.</op:operator><name pos:line="178" pos:column="28">AddChildStatement</name></name><argument_list pos:line="178" pos:column="45">(<argument><expr><name pos:line="178" pos:column="46">newNS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name pos:line="180" pos:column="17">lastNS</name> <op:operator pos:line="180" pos:column="24">=</op:operator> <name pos:line="180" pos:column="26">newNS</name></expr>;</expr_stmt>
            }</block></foreach>

            <comment type="line" pos:line="183" pos:column="13">//add body of namespace to lastNS</comment>
            <decl_stmt><decl><type><name pos:line="184" pos:column="13">var</name></type> <name pos:line="184" pos:column="17">blockElement</name> <init pos:line="184" pos:column="30">= <expr><call><name><name pos:line="184" pos:column="32">namespaceElement</name><op:operator pos:line="184" pos:column="48">.</op:operator><name pos:line="184" pos:column="49">Element</name></name><argument_list pos:line="184" pos:column="56">(<argument><expr><name><name pos:line="184" pos:column="57">SRC</name><op:operator pos:line="184" pos:column="60">.</op:operator><name pos:line="184" pos:column="61">Block</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="185" pos:column="13">if<condition pos:line="185" pos:column="15">(<expr><name pos:line="185" pos:column="16">blockElement</name> <op:operator pos:line="185" pos:column="29">!=</op:operator> <name pos:line="185" pos:column="32">null</name></expr>)</condition><then pos:line="185" pos:column="37"> <block pos:line="185" pos:column="38">{
                <foreach pos:line="186" pos:column="17">foreach(<init><decl><type><name pos:line="186" pos:column="25">var</name></type> <name pos:line="186" pos:column="29">child</name> <range pos:line="186" pos:column="35">in <expr><call><name><name pos:line="186" pos:column="38">blockElement</name><op:operator pos:line="186" pos:column="50">.</op:operator><name pos:line="186" pos:column="51">Elements</name></name><argument_list pos:line="186" pos:column="59">()</argument_list></call></expr></range></decl></init>) <block pos:line="186" pos:column="63">{
                    <expr_stmt><expr><call><name><name pos:line="187" pos:column="21">lastNS</name><op:operator pos:line="187" pos:column="27">.</op:operator><name pos:line="187" pos:column="28">AddChildStatement</name></name><argument_list pos:line="187" pos:column="45">(<argument><expr><call><name pos:line="187" pos:column="46">ParseStatement</name><argument_list pos:line="187" pos:column="60">(<argument><expr><name pos:line="187" pos:column="61">child</name></expr></argument>, <argument><expr><name pos:line="187" pos:column="68">context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
            }</block></then></if>

            <return pos:line="191" pos:column="13">return <expr><name pos:line="191" pos:column="20">topNS</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="194" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="195" pos:column="9">/// Parses the given &lt;paramref name="aliasElement"/&gt; and creates an ImportStatement or AliasStatement from it.</comment>
        <comment type="line" pos:line="196" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="197" pos:column="9">/// &lt;param name="aliasElement"&gt;The alias element to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="198" pos:column="9">/// &lt;param name="context"&gt;The parser context to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="199" pos:column="9">/// &lt;returns&gt;An ImportStatement if the element is an import, or an AliasStatement if it is an alias.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="200" pos:column="9">protected</specifier> <specifier pos:line="200" pos:column="19">override</specifier> <name pos:line="200" pos:column="28">Statement</name></type> <name pos:line="200" pos:column="38">ParseAliasElement</name><parameter_list pos:line="200" pos:column="55">(<param><decl><type><name pos:line="200" pos:column="56">XElement</name></type> <name pos:line="200" pos:column="65">aliasElement</name></decl></param>, <param><decl><type><name pos:line="200" pos:column="79">ParserContext</name></type> <name pos:line="200" pos:column="93">context</name></decl></param>)</parameter_list> <block pos:line="200" pos:column="102">{
            <if pos:line="201" pos:column="13">if<condition pos:line="201" pos:column="15">(<expr><name pos:line="201" pos:column="16">aliasElement</name> <op:operator pos:line="201" pos:column="29">==</op:operator> <name pos:line="201" pos:column="32">null</name></expr>)</condition><then pos:line="201" pos:column="37">
                <throw pos:line="202" pos:column="17">throw <expr><op:operator pos:line="202" pos:column="23">new</op:operator> <call><name pos:line="202" pos:column="27">ArgumentNullException</name><argument_list pos:line="202" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="202" pos:column="49">"aliasElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="203" pos:column="13">if<condition pos:line="203" pos:column="15">(<expr><name><name pos:line="203" pos:column="16">aliasElement</name><op:operator pos:line="203" pos:column="28">.</op:operator><name pos:line="203" pos:column="29">Name</name></name> <op:operator pos:line="203" pos:column="34">!=</op:operator> <name pos:line="203" pos:column="37">AliasElementName</name></expr>)</condition><then pos:line="203" pos:column="54">
                <throw pos:line="204" pos:column="17">throw <expr><op:operator pos:line="204" pos:column="23">new</op:operator> <call><name pos:line="204" pos:column="27">ArgumentException</name><argument_list pos:line="204" pos:column="44">(<argument><expr><call><name><name pos:line="204" pos:column="45">string</name><op:operator pos:line="204" pos:column="51">.</op:operator><name pos:line="204" pos:column="52">Format</name></name><argument_list pos:line="204" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="204" pos:column="59">"Must be a SRC.{0} element"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="204" pos:column="88">AliasElementName</name><op:operator pos:line="204" pos:column="104">.</op:operator><name pos:line="204" pos:column="105">LocalName</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="204" pos:column="117">"aliasElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="205" pos:column="13">if<condition pos:line="205" pos:column="15">(<expr><name pos:line="205" pos:column="16">context</name> <op:operator pos:line="205" pos:column="24">==</op:operator> <name pos:line="205" pos:column="27">null</name></expr>)</condition><then pos:line="205" pos:column="32">
                <throw pos:line="206" pos:column="17">throw <expr><op:operator pos:line="206" pos:column="23">new</op:operator> <call><name pos:line="206" pos:column="27">ArgumentNullException</name><argument_list pos:line="206" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="206" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            
            <decl_stmt><decl><type><name pos:line="208" pos:column="13">Statement</name></type> <name pos:line="208" pos:column="23">stmt</name> <init pos:line="208" pos:column="28">= <expr><name pos:line="208" pos:column="30">null</name></expr></init></decl>;</decl_stmt>
            <if pos:line="209" pos:column="13">if<condition pos:line="209" pos:column="15">(<expr><call><name pos:line="209" pos:column="16">GetTextNodes</name><argument_list pos:line="209" pos:column="28">(<argument><expr><name pos:line="209" pos:column="29">aliasElement</name></expr></argument>)</argument_list></call><op:operator pos:line="209" pos:column="42">.</op:operator><call><name pos:line="209" pos:column="43">Any</name><argument_list pos:line="209" pos:column="46">(<argument><expr><lambda><name pos:line="209" pos:column="47">n</name> <op:operator pos:line="209" pos:column="49">=&gt;</op:operator> <call><name><name pos:line="209" pos:column="52">n</name><op:operator pos:line="209" pos:column="53">.</op:operator><name pos:line="209" pos:column="54">Value</name><op:operator pos:line="209" pos:column="59">.</op:operator><name pos:line="209" pos:column="60">Contains</name></name><argument_list pos:line="209" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="209" pos:column="69">"("</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="209" pos:column="75"> <block pos:line="209" pos:column="76">{
                <comment type="line" pos:line="210" pos:column="17">//using block</comment>
                <expr_stmt><expr><name pos:line="211" pos:column="17">stmt</name> <op:operator pos:line="211" pos:column="22">=</op:operator> <call><name pos:line="211" pos:column="24">ParseUsingBlockElement</name><argument_list pos:line="211" pos:column="46">(<argument><expr><name pos:line="211" pos:column="47">aliasElement</name></expr></argument>, <argument><expr><name pos:line="211" pos:column="61">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="212" pos:column="15">else <if pos:line="212" pos:column="20">if<condition pos:line="212" pos:column="22">(<expr><call><name><name pos:line="212" pos:column="23">aliasElement</name><op:operator pos:line="212" pos:column="35">.</op:operator><name pos:line="212" pos:column="36">Element</name></name><argument_list pos:line="212" pos:column="43">(<argument><expr><name><name pos:line="212" pos:column="44">SRC</name><op:operator pos:line="212" pos:column="47">.</op:operator><name pos:line="212" pos:column="48">Init</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="212" pos:column="54">!=</op:operator> <name pos:line="212" pos:column="57">null</name></expr>)</condition><then pos:line="212" pos:column="62"> <block pos:line="212" pos:column="63">{
                <comment type="line" pos:line="213" pos:column="17">//alias</comment>
                <decl_stmt><decl><type><name pos:line="214" pos:column="17">var</name></type> <name pos:line="214" pos:column="21">alias</name> <init pos:line="214" pos:column="27">= <expr><op:operator pos:line="214" pos:column="29">new</op:operator> <call><name pos:line="214" pos:column="33">AliasStatement</name><argument_list pos:line="214" pos:column="47">()</argument_list></call> <block pos:line="214" pos:column="50">{<expr><name pos:line="214" pos:column="51">ProgrammingLanguage</name> <op:operator pos:line="214" pos:column="71">=</op:operator> <name pos:line="214" pos:column="73">ParserLanguage</name></expr>}</block></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="215" pos:column="17">alias</name><op:operator pos:line="215" pos:column="22">.</op:operator><name pos:line="215" pos:column="23">AddLocation</name></name><argument_list pos:line="215" pos:column="34">(<argument><expr><call><name><name pos:line="215" pos:column="35">context</name><op:operator pos:line="215" pos:column="42">.</op:operator><name pos:line="215" pos:column="43">CreateLocation</name></name><argument_list pos:line="215" pos:column="57">(<argument><expr><name pos:line="215" pos:column="58">aliasElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="217" pos:column="17">var</name></type> <name pos:line="217" pos:column="21">nameElement</name> <init pos:line="217" pos:column="33">= <expr><call><name><name pos:line="217" pos:column="35">aliasElement</name><op:operator pos:line="217" pos:column="47">.</op:operator><name pos:line="217" pos:column="48">Element</name></name><argument_list pos:line="217" pos:column="55">(<argument><expr><name><name pos:line="217" pos:column="56">SRC</name><op:operator pos:line="217" pos:column="59">.</op:operator><name pos:line="217" pos:column="60">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="218" pos:column="17">if<condition pos:line="218" pos:column="19">(<expr><name pos:line="218" pos:column="20">nameElement</name> <op:operator pos:line="218" pos:column="32">!=</op:operator> <name pos:line="218" pos:column="35">null</name></expr>)</condition><then pos:line="218" pos:column="40"> <block pos:line="218" pos:column="41">{
                    <expr_stmt><expr><name><name pos:line="219" pos:column="21">alias</name><op:operator pos:line="219" pos:column="26">.</op:operator><name pos:line="219" pos:column="27">AliasName</name></name> <op:operator pos:line="219" pos:column="37">=</op:operator> <name><name pos:line="219" pos:column="39">nameElement</name><op:operator pos:line="219" pos:column="50">.</op:operator><name pos:line="219" pos:column="51">Value</name></name></expr>;</expr_stmt>
                }</block></then></if>

                <decl_stmt><decl><type><name pos:line="222" pos:column="17">var</name></type> <name pos:line="222" pos:column="21">initElement</name> <init pos:line="222" pos:column="33">= <expr><call><name><name pos:line="222" pos:column="35">aliasElement</name><op:operator pos:line="222" pos:column="47">.</op:operator><name pos:line="222" pos:column="48">Element</name></name><argument_list pos:line="222" pos:column="55">(<argument><expr><name><name pos:line="222" pos:column="56">SRC</name><op:operator pos:line="222" pos:column="59">.</op:operator><name pos:line="222" pos:column="60">Init</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name pos:line="223" pos:column="17">alias</name><op:operator pos:line="223" pos:column="22">.</op:operator><name pos:line="223" pos:column="23">Target</name></name> <op:operator pos:line="223" pos:column="30">=</op:operator> <call><name><name pos:line="223" pos:column="32">ParseExpression</name><argument_list pos:line="223" pos:column="47">&lt;<argument><name pos:line="223" pos:column="48">TypeContainerUse</name></argument>&gt;</argument_list></name><argument_list pos:line="223" pos:column="65">(<argument><expr><call><name pos:line="223" pos:column="66">GetFirstChildExpression</name><argument_list pos:line="223" pos:column="89">(<argument><expr><name pos:line="223" pos:column="90">initElement</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="223" pos:column="104">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                
                <expr_stmt><expr><name pos:line="225" pos:column="17">stmt</name> <op:operator pos:line="225" pos:column="22">=</op:operator> <name pos:line="225" pos:column="24">alias</name></expr>;</expr_stmt>
            }</block></then> <else pos:line="226" pos:column="15">else <block pos:line="226" pos:column="20">{
                <comment type="line" pos:line="227" pos:column="17">//import</comment>
                <decl_stmt><decl><type><name pos:line="228" pos:column="17">var</name></type> <name pos:line="228" pos:column="21">import</name> <init pos:line="228" pos:column="28">= <expr><op:operator pos:line="228" pos:column="30">new</op:operator> <call><name pos:line="228" pos:column="34">ImportStatement</name><argument_list pos:line="228" pos:column="49">()</argument_list></call> <block pos:line="228" pos:column="52">{<expr><name pos:line="228" pos:column="53">ProgrammingLanguage</name> <op:operator pos:line="228" pos:column="73">=</op:operator> <name pos:line="228" pos:column="75">ParserLanguage</name></expr>}</block></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="229" pos:column="17">import</name><op:operator pos:line="229" pos:column="23">.</op:operator><name pos:line="229" pos:column="24">AddLocation</name></name><argument_list pos:line="229" pos:column="35">(<argument><expr><call><name><name pos:line="229" pos:column="36">context</name><op:operator pos:line="229" pos:column="43">.</op:operator><name pos:line="229" pos:column="44">CreateLocation</name></name><argument_list pos:line="229" pos:column="58">(<argument><expr><name pos:line="229" pos:column="59">aliasElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="231" pos:column="17">var</name></type> <name pos:line="231" pos:column="21">nameElement</name> <init pos:line="231" pos:column="33">= <expr><call><name><name pos:line="231" pos:column="35">aliasElement</name><op:operator pos:line="231" pos:column="47">.</op:operator><name pos:line="231" pos:column="48">Element</name></name><argument_list pos:line="231" pos:column="55">(<argument><expr><name><name pos:line="231" pos:column="56">SRC</name><op:operator pos:line="231" pos:column="59">.</op:operator><name pos:line="231" pos:column="60">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="232" pos:column="17">if<condition pos:line="232" pos:column="19">(<expr><name pos:line="232" pos:column="20">nameElement</name> <op:operator pos:line="232" pos:column="32">!=</op:operator> <name pos:line="232" pos:column="35">null</name></expr>)</condition><then pos:line="232" pos:column="40"> <block pos:line="232" pos:column="41">{
                    <expr_stmt><expr><name><name pos:line="233" pos:column="21">import</name><op:operator pos:line="233" pos:column="27">.</op:operator><name pos:line="233" pos:column="28">ImportedNamespace</name></name> <op:operator pos:line="233" pos:column="46">=</op:operator> <call><name><name pos:line="233" pos:column="48">ParseNameUseElement</name><argument_list pos:line="233" pos:column="67">&lt;<argument><name pos:line="233" pos:column="68">NamespaceUse</name></argument>&gt;</argument_list></name><argument_list pos:line="233" pos:column="81">(<argument><expr><name pos:line="233" pos:column="82">nameElement</name></expr></argument>, <argument><expr><name pos:line="233" pos:column="95">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <expr_stmt><expr><name pos:line="236" pos:column="17">stmt</name> <op:operator pos:line="236" pos:column="22">=</op:operator> <name pos:line="236" pos:column="24">import</name></expr>;</expr_stmt>
            }</block></else></if></else></if>
            
            <return pos:line="239" pos:column="13">return <expr><name pos:line="239" pos:column="20">stmt</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="242" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="243" pos:column="9">/// Parses the given &lt;paramref name="usingElement"/&gt; and creates a &lt;see cref="UsingBlockStatement"/&gt; from it.</comment>
        <comment type="line" pos:line="244" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="245" pos:column="9">/// &lt;param name="usingElement"&gt;The SRC.Using element to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="246" pos:column="9">/// &lt;param name="context"&gt;The parser context to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="247" pos:column="9">/// &lt;returns&gt;A UsingBlockStatement created from the given usingElement.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="248" pos:column="9">protected</specifier> <specifier pos:line="248" pos:column="19">virtual</specifier> <name pos:line="248" pos:column="27">UsingBlockStatement</name></type> <name pos:line="248" pos:column="47">ParseUsingBlockElement</name><parameter_list pos:line="248" pos:column="69">(<param><decl><type><name pos:line="248" pos:column="70">XElement</name></type> <name pos:line="248" pos:column="79">usingElement</name></decl></param>, <param><decl><type><name pos:line="248" pos:column="93">ParserContext</name></type> <name pos:line="248" pos:column="107">context</name></decl></param>)</parameter_list> <block pos:line="248" pos:column="116">{
            <if pos:line="249" pos:column="13">if<condition pos:line="249" pos:column="15">(<expr><name pos:line="249" pos:column="16">usingElement</name> <op:operator pos:line="249" pos:column="29">==</op:operator> <name pos:line="249" pos:column="32">null</name></expr>)</condition><then pos:line="249" pos:column="37">
                <throw pos:line="250" pos:column="17">throw <expr><op:operator pos:line="250" pos:column="23">new</op:operator> <call><name pos:line="250" pos:column="27">ArgumentNullException</name><argument_list pos:line="250" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="250" pos:column="49">"usingElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="251" pos:column="13">if<condition pos:line="251" pos:column="15">(<expr><name><name pos:line="251" pos:column="16">usingElement</name><op:operator pos:line="251" pos:column="28">.</op:operator><name pos:line="251" pos:column="29">Name</name></name> <op:operator pos:line="251" pos:column="34">!=</op:operator> <name><name pos:line="251" pos:column="37">SRC</name><op:operator pos:line="251" pos:column="40">.</op:operator><name pos:line="251" pos:column="41">Using</name></name></expr>)</condition><then pos:line="251" pos:column="47">
                <throw pos:line="252" pos:column="17">throw <expr><op:operator pos:line="252" pos:column="23">new</op:operator> <call><name pos:line="252" pos:column="27">ArgumentException</name><argument_list pos:line="252" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="252" pos:column="45">"Must be a SRC.Using element"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="252" pos:column="76">"usingElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="253" pos:column="13">if<condition pos:line="253" pos:column="15">(<expr><name pos:line="253" pos:column="16">context</name> <op:operator pos:line="253" pos:column="24">==</op:operator> <name pos:line="253" pos:column="27">null</name></expr>)</condition><then pos:line="253" pos:column="32">
                <throw pos:line="254" pos:column="17">throw <expr><op:operator pos:line="254" pos:column="23">new</op:operator> <call><name pos:line="254" pos:column="27">ArgumentNullException</name><argument_list pos:line="254" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="254" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="256" pos:column="13">var</name></type> <name pos:line="256" pos:column="17">usingStmt</name> <init pos:line="256" pos:column="27">= <expr><op:operator pos:line="256" pos:column="29">new</op:operator> <call><name pos:line="256" pos:column="33">UsingBlockStatement</name><argument_list pos:line="256" pos:column="52">()</argument_list></call> <block pos:line="256" pos:column="55">{<expr><name pos:line="256" pos:column="56">ProgrammingLanguage</name> <op:operator pos:line="256" pos:column="76">=</op:operator> <name pos:line="256" pos:column="78">ParserLanguage</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="257" pos:column="13">usingStmt</name><op:operator pos:line="257" pos:column="22">.</op:operator><name pos:line="257" pos:column="23">AddLocation</name></name><argument_list pos:line="257" pos:column="34">(<argument><expr><call><name><name pos:line="257" pos:column="35">context</name><op:operator pos:line="257" pos:column="42">.</op:operator><name pos:line="257" pos:column="43">CreateLocation</name></name><argument_list pos:line="257" pos:column="57">(<argument><expr><name pos:line="257" pos:column="58">usingElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <foreach pos:line="259" pos:column="13">foreach(<init><decl><type><name pos:line="259" pos:column="21">var</name></type> <name pos:line="259" pos:column="25">child</name> <range pos:line="259" pos:column="31">in <expr><call><name><name pos:line="259" pos:column="34">usingElement</name><op:operator pos:line="259" pos:column="46">.</op:operator><name pos:line="259" pos:column="47">Elements</name></name><argument_list pos:line="259" pos:column="55">()</argument_list></call></expr></range></decl></init>) <block pos:line="259" pos:column="59">{
                <if pos:line="260" pos:column="17">if<condition pos:line="260" pos:column="19">(<expr><name><name pos:line="260" pos:column="20">child</name><op:operator pos:line="260" pos:column="25">.</op:operator><name pos:line="260" pos:column="26">Name</name></name> <op:operator pos:line="260" pos:column="31">==</op:operator> <name><name pos:line="260" pos:column="34">SRC</name><op:operator pos:line="260" pos:column="37">.</op:operator><name pos:line="260" pos:column="38">Init</name></name></expr>)</condition><then pos:line="260" pos:column="43"> <block pos:line="260" pos:column="44">{
                    <comment type="line" pos:line="261" pos:column="21">//TODO: waiting for update to srcml</comment>
                    <expr_stmt><expr><name><name pos:line="262" pos:column="21">usingStmt</name><op:operator pos:line="262" pos:column="30">.</op:operator><name pos:line="262" pos:column="31">Initializer</name></name> <op:operator pos:line="262" pos:column="43">=</op:operator> <call><name pos:line="262" pos:column="45">ParseExpression</name><argument_list pos:line="262" pos:column="60">(<argument><expr><call><name pos:line="262" pos:column="61">GetChildExpressions</name><argument_list pos:line="262" pos:column="80">(<argument><expr><name pos:line="262" pos:column="81">child</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="262" pos:column="89">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="264" pos:column="17">else <if pos:line="264" pos:column="22">if<condition pos:line="264" pos:column="24">(<expr><name><name pos:line="264" pos:column="25">child</name><op:operator pos:line="264" pos:column="30">.</op:operator><name pos:line="264" pos:column="31">Name</name></name> <op:operator pos:line="264" pos:column="36">==</op:operator> <name><name pos:line="264" pos:column="39">SRC</name><op:operator pos:line="264" pos:column="42">.</op:operator><name pos:line="264" pos:column="43">Block</name></name></expr>)</condition><then pos:line="264" pos:column="49"> <block pos:line="264" pos:column="50">{
                    <decl_stmt><decl><type><name pos:line="265" pos:column="21">var</name></type> <name pos:line="265" pos:column="25">blockStatements</name> <init pos:line="265" pos:column="41">= <expr><call><name><name pos:line="265" pos:column="43">child</name><op:operator pos:line="265" pos:column="48">.</op:operator><name pos:line="265" pos:column="49">Elements</name></name><argument_list pos:line="265" pos:column="57">()</argument_list></call><op:operator pos:line="265" pos:column="59">.</op:operator><call><name pos:line="265" pos:column="60">Select</name><argument_list pos:line="265" pos:column="66">(<argument><expr><lambda><name pos:line="265" pos:column="67">e</name> <op:operator pos:line="265" pos:column="69">=&gt;</op:operator> <call><name pos:line="265" pos:column="72">ParseStatement</name><argument_list pos:line="265" pos:column="86">(<argument><expr><name pos:line="265" pos:column="87">e</name></expr></argument>, <argument><expr><name pos:line="265" pos:column="90">context</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="266" pos:column="21">usingStmt</name><op:operator pos:line="266" pos:column="30">.</op:operator><name pos:line="266" pos:column="31">AddChildStatements</name></name><argument_list pos:line="266" pos:column="49">(<argument><expr><name pos:line="266" pos:column="50">blockStatements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="267" pos:column="19">else <block pos:line="267" pos:column="24">{
                    <expr_stmt><expr><call><name><name pos:line="268" pos:column="21">usingStmt</name><op:operator pos:line="268" pos:column="30">.</op:operator><name pos:line="268" pos:column="31">AddChildStatement</name></name><argument_list pos:line="268" pos:column="48">(<argument><expr><call><name pos:line="268" pos:column="49">ParseStatement</name><argument_list pos:line="268" pos:column="63">(<argument><expr><name pos:line="268" pos:column="64">child</name></expr></argument>, <argument><expr><name pos:line="268" pos:column="71">context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if></else></if>
            }</block></foreach>

            <return pos:line="272" pos:column="13">return <expr><name pos:line="272" pos:column="20">usingStmt</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="275" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="276" pos:column="9">/// Creates a &lt;see cref="MethodDefinition"/&gt; object for &lt;paramref name="methodElement"/&gt;.</comment>
        <comment type="line" pos:line="277" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="278" pos:column="9">/// &lt;param name="methodElement"&gt;The element to parse&lt;/param&gt;</comment>
        <comment type="line" pos:line="279" pos:column="9">/// &lt;param name="context"&gt;The context to use&lt;/param&gt;</comment>
        <function><type><specifier pos:line="280" pos:column="9">protected</specifier> <specifier pos:line="280" pos:column="19">override</specifier> <name pos:line="280" pos:column="28">MethodDefinition</name></type> <name pos:line="280" pos:column="45">ParseMethodElement</name><parameter_list pos:line="280" pos:column="63">(<param><decl><type><name pos:line="280" pos:column="64">XElement</name></type> <name pos:line="280" pos:column="73">methodElement</name></decl></param>, <param><decl><type><name pos:line="280" pos:column="88">ParserContext</name></type> <name pos:line="280" pos:column="102">context</name></decl></param>)</parameter_list> <block pos:line="280" pos:column="111">{
            <decl_stmt><decl><type><name pos:line="281" pos:column="13">var</name></type> <name pos:line="281" pos:column="17">methodDefinition</name> <init pos:line="281" pos:column="34">= <expr><call><name><name pos:line="281" pos:column="36">base</name><op:operator pos:line="281" pos:column="40">.</op:operator><name pos:line="281" pos:column="41">ParseMethodElement</name></name><argument_list pos:line="281" pos:column="59">(<argument><expr><name pos:line="281" pos:column="60">methodElement</name></expr></argument>, <argument><expr><name pos:line="281" pos:column="75">context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <decl_stmt><decl><type><name pos:line="283" pos:column="13">var</name></type> <name pos:line="283" pos:column="17">typeElement</name> <init pos:line="283" pos:column="29">= <expr><call><name><name pos:line="283" pos:column="31">methodElement</name><op:operator pos:line="283" pos:column="44">.</op:operator><name pos:line="283" pos:column="45">Elements</name></name><argument_list pos:line="283" pos:column="53">(<argument><expr><name><name pos:line="283" pos:column="54">SRC</name><op:operator pos:line="283" pos:column="57">.</op:operator><name pos:line="283" pos:column="58">Type</name></name></expr></argument>)</argument_list></call><op:operator pos:line="283" pos:column="63">.</op:operator><call><name pos:line="283" pos:column="64">FirstOrDefault</name><argument_list pos:line="283" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="284" pos:column="13">methodDefinition</name><op:operator pos:line="284" pos:column="29">.</op:operator><name pos:line="284" pos:column="30">IsPartial</name></name> <op:operator pos:line="284" pos:column="40">=</op:operator> <call><name pos:line="284" pos:column="42">ElementHasPartialKeyword</name><argument_list pos:line="284" pos:column="66">(<argument><expr><name pos:line="284" pos:column="67">null</name> <op:operator pos:line="284" pos:column="72">==</op:operator> <name pos:line="284" pos:column="75">typeElement</name> <op:operator pos:line="284" pos:column="87">?</op:operator> <name pos:line="284" pos:column="89">methodElement</name> <op:operator pos:line="284" pos:column="103">:</op:operator> <name pos:line="284" pos:column="105">typeElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:line="286" pos:column="13">return <expr><name pos:line="286" pos:column="20">methodDefinition</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="289" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="290" pos:column="9">/// Parses an element corresponding to a type definition and creates a TypeDefinition object </comment>
        <comment type="line" pos:line="291" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="292" pos:column="9">/// &lt;param name="typeElement"&gt;The type element to parse. This must be one of the elements contained in TypeElementNames.&lt;/param&gt;</comment>
        <comment type="line" pos:line="293" pos:column="9">/// &lt;param name="context"&gt;The parser context&lt;/param&gt;</comment>
        <comment type="line" pos:line="294" pos:column="9">/// &lt;returns&gt;A TypeDefinition parsed from the element&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="295" pos:column="9">protected</specifier> <specifier pos:line="295" pos:column="19">override</specifier> <name pos:line="295" pos:column="28">TypeDefinition</name></type> <name pos:line="295" pos:column="43">ParseTypeElement</name><parameter_list pos:line="295" pos:column="59">(<param><decl><type><name pos:line="295" pos:column="60">XElement</name></type> <name pos:line="295" pos:column="69">typeElement</name></decl></param>, <param><decl><type><name pos:line="295" pos:column="82">ParserContext</name></type> <name pos:line="295" pos:column="96">context</name></decl></param>)</parameter_list> <block pos:line="295" pos:column="105">{
            <decl_stmt><decl><type><name pos:line="296" pos:column="13">var</name></type> <name pos:line="296" pos:column="17">typeDefinition</name> <init pos:line="296" pos:column="32">= <expr><call><name><name pos:line="296" pos:column="34">base</name><op:operator pos:line="296" pos:column="38">.</op:operator><name pos:line="296" pos:column="39">ParseTypeElement</name></name><argument_list pos:line="296" pos:column="55">(<argument><expr><name pos:line="296" pos:column="56">typeElement</name></expr></argument>, <argument><expr><name pos:line="296" pos:column="69">context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="297" pos:column="13">typeDefinition</name><op:operator pos:line="297" pos:column="27">.</op:operator><name pos:line="297" pos:column="28">IsPartial</name></name> <op:operator pos:line="297" pos:column="38">=</op:operator> <call><name pos:line="297" pos:column="40">ElementHasPartialKeyword</name><argument_list pos:line="297" pos:column="64">(<argument><expr><name pos:line="297" pos:column="65">typeElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="298" pos:column="13">return <expr><name pos:line="298" pos:column="20">typeDefinition</name></expr>;</return>
        }</block></function>

        
        <comment type="line" pos:line="302" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="303" pos:column="9">/// Creates a &lt;see cref="Statement"/&gt; object for &lt;paramref name="stmtElement"/&gt;.</comment>
        <comment type="line" pos:line="304" pos:column="9">/// The expression contained within &lt;paramref name="stmtElement"/&gt; will be parsed and placed in </comment>
        <comment type="line" pos:line="305" pos:column="9">/// Statement.Content.</comment>
        <comment type="line" pos:line="306" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="307" pos:column="9">/// &lt;param name="stmtElement"&gt;The SRC.ExpressionStatement element to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="308" pos:column="9">/// &lt;param name="context"&gt;The context to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="309" pos:column="9">/// &lt;returns&gt;A &lt;see cref="Statement"/&gt; corresponding to &lt;paramref name="stmtElement"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="310" pos:column="9">protected</specifier> <specifier pos:line="310" pos:column="19">override</specifier> <name pos:line="310" pos:column="28">Statement</name></type> <name pos:line="310" pos:column="38">ParseDeclarationStatementElement</name><parameter_list pos:line="310" pos:column="70">(<param><decl><type><name pos:line="310" pos:column="71">XElement</name></type> <name pos:line="310" pos:column="80">stmtElement</name></decl></param>, <param><decl><type><name pos:line="310" pos:column="93">ParserContext</name></type> <name pos:line="310" pos:column="107">context</name></decl></param>)</parameter_list> <block pos:line="310" pos:column="116">{
            <if pos:line="311" pos:column="13">if<condition pos:line="311" pos:column="15">(<expr><name pos:line="311" pos:column="16">stmtElement</name> <op:operator pos:line="311" pos:column="28">==</op:operator> <name pos:line="311" pos:column="31">null</name></expr>)</condition><then pos:line="311" pos:column="36">
                <throw pos:line="312" pos:column="17">throw <expr><op:operator pos:line="312" pos:column="23">new</op:operator> <call><name pos:line="312" pos:column="27">ArgumentNullException</name><argument_list pos:line="312" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="312" pos:column="49">"stmtElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="313" pos:column="13">if<condition pos:line="313" pos:column="15">(<expr><name><name pos:line="313" pos:column="16">stmtElement</name><op:operator pos:line="313" pos:column="27">.</op:operator><name pos:line="313" pos:column="28">Name</name></name> <op:operator pos:line="313" pos:column="33">!=</op:operator> <name><name pos:line="313" pos:column="36">SRC</name><op:operator pos:line="313" pos:column="39">.</op:operator><name pos:line="313" pos:column="40">DeclarationStatement</name></name></expr>)</condition><then pos:line="313" pos:column="61">
                <throw pos:line="314" pos:column="17">throw <expr><op:operator pos:line="314" pos:column="23">new</op:operator> <call><name pos:line="314" pos:column="27">ArgumentException</name><argument_list pos:line="314" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="314" pos:column="45">"Must be a SRC.DeclarationStatement element"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="314" pos:column="91">"stmtElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="315" pos:column="13">if<condition pos:line="315" pos:column="15">(<expr><name pos:line="315" pos:column="16">context</name> <op:operator pos:line="315" pos:column="24">==</op:operator> <name pos:line="315" pos:column="27">null</name></expr>)</condition><then pos:line="315" pos:column="32">
                <throw pos:line="316" pos:column="17">throw <expr><op:operator pos:line="316" pos:column="23">new</op:operator> <call><name pos:line="316" pos:column="27">ArgumentNullException</name><argument_list pos:line="316" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="316" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            
            <comment type="line" pos:line="318" pos:column="13">//first check if this is a property and parse accordingly</comment>
            <decl_stmt><decl><type><name pos:line="319" pos:column="13">var</name></type> <name pos:line="319" pos:column="17">declElement</name> <init pos:line="319" pos:column="29">= <expr><call><name><name pos:line="319" pos:column="31">stmtElement</name><op:operator pos:line="319" pos:column="42">.</op:operator><name pos:line="319" pos:column="43">Element</name></name><argument_list pos:line="319" pos:column="50">(<argument><expr><name><name pos:line="319" pos:column="51">SRC</name><op:operator pos:line="319" pos:column="54">.</op:operator><name pos:line="319" pos:column="55">Declaration</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="320" pos:column="13">if<condition pos:line="320" pos:column="15">(<expr><name pos:line="320" pos:column="16">declElement</name> <op:operator pos:line="320" pos:column="28">!=</op:operator> <name pos:line="320" pos:column="31">null</name></expr>)</condition><then pos:line="320" pos:column="36"> <block pos:line="320" pos:column="37">{
                <decl_stmt><decl><type><name pos:line="321" pos:column="17">var</name></type> <name pos:line="321" pos:column="21">blockElement</name> <init pos:line="321" pos:column="34">= <expr><call><name><name pos:line="321" pos:column="36">declElement</name><op:operator pos:line="321" pos:column="47">.</op:operator><name pos:line="321" pos:column="48">Element</name></name><argument_list pos:line="321" pos:column="55">(<argument><expr><name><name pos:line="321" pos:column="56">SRC</name><op:operator pos:line="321" pos:column="59">.</op:operator><name pos:line="321" pos:column="60">Block</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="322" pos:column="17">if<condition pos:line="322" pos:column="19">(<expr><name pos:line="322" pos:column="20">blockElement</name> <op:operator pos:line="322" pos:column="33">!=</op:operator> <name pos:line="322" pos:column="36">null</name></expr>)</condition><then pos:line="322" pos:column="41"> <block pos:line="322" pos:column="42">{
                    <comment type="line" pos:line="323" pos:column="21">//this is a property</comment>
                    <return pos:line="324" pos:column="21">return <expr><call><name pos:line="324" pos:column="28">ParsePropertyDeclarationElement</name><argument_list pos:line="324" pos:column="59">(<argument><expr><name pos:line="324" pos:column="60">declElement</name></expr></argument>, <argument><expr><name pos:line="324" pos:column="73">context</name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></then></if>
            }</block></then></if>

            <comment type="line" pos:line="328" pos:column="13">//otherwise, parse as base:</comment>
            <return pos:line="329" pos:column="13">return <expr><call><name><name pos:line="329" pos:column="20">base</name><op:operator pos:line="329" pos:column="24">.</op:operator><name pos:line="329" pos:column="25">ParseDeclarationStatementElement</name></name><argument_list pos:line="329" pos:column="57">(<argument><expr><name pos:line="329" pos:column="58">stmtElement</name></expr></argument>, <argument><expr><name pos:line="329" pos:column="71">context</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="332" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="333" pos:column="9">/// Creates a &lt;see cref="PropertyDefinition"/&gt; object for &lt;paramref name="declElement"/&gt;.</comment>
        <comment type="line" pos:line="334" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="335" pos:column="9">/// &lt;param name="declElement"&gt;The SRC.Declaration element to parse. This must be a declaration of a property.&lt;/param&gt;</comment>
        <comment type="line" pos:line="336" pos:column="9">/// &lt;param name="context"&gt;The context to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="337" pos:column="9">/// &lt;returns&gt;A &lt;see cref="PropertyDefinition"/&gt; corresponding to &lt;paramref name="declElement"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="338" pos:column="9">protected</specifier> <specifier pos:line="338" pos:column="19">virtual</specifier> <name pos:line="338" pos:column="27">PropertyDefinition</name></type> <name pos:line="338" pos:column="46">ParsePropertyDeclarationElement</name><parameter_list pos:line="338" pos:column="77">(<param><decl><type><name pos:line="338" pos:column="78">XElement</name></type> <name pos:line="338" pos:column="87">declElement</name></decl></param>, <param><decl><type><name pos:line="338" pos:column="100">ParserContext</name></type> <name pos:line="338" pos:column="114">context</name></decl></param>)</parameter_list> <block pos:line="338" pos:column="123">{
            <if pos:line="339" pos:column="13">if<condition pos:line="339" pos:column="15">(<expr><name pos:line="339" pos:column="16">declElement</name> <op:operator pos:line="339" pos:column="28">==</op:operator> <name pos:line="339" pos:column="31">null</name></expr>)</condition><then pos:line="339" pos:column="36">
                <throw pos:line="340" pos:column="17">throw <expr><op:operator pos:line="340" pos:column="23">new</op:operator> <call><name pos:line="340" pos:column="27">ArgumentNullException</name><argument_list pos:line="340" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="340" pos:column="49">"declElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="341" pos:column="13">if<condition pos:line="341" pos:column="15">(<expr><name><name pos:line="341" pos:column="16">declElement</name><op:operator pos:line="341" pos:column="27">.</op:operator><name pos:line="341" pos:column="28">Name</name></name> <op:operator pos:line="341" pos:column="33">!=</op:operator> <name><name pos:line="341" pos:column="36">SRC</name><op:operator pos:line="341" pos:column="39">.</op:operator><name pos:line="341" pos:column="40">Declaration</name></name></expr>)</condition><then pos:line="341" pos:column="52">
                <throw pos:line="342" pos:column="17">throw <expr><op:operator pos:line="342" pos:column="23">new</op:operator> <call><name pos:line="342" pos:column="27">ArgumentException</name><argument_list pos:line="342" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="342" pos:column="45">"Must be a SRC.Declaration element"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="342" pos:column="82">"declElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="343" pos:column="13">if<condition pos:line="343" pos:column="15">(<expr><name pos:line="343" pos:column="16">context</name> <op:operator pos:line="343" pos:column="24">==</op:operator> <name pos:line="343" pos:column="27">null</name></expr>)</condition><then pos:line="343" pos:column="32">
                <throw pos:line="344" pos:column="17">throw <expr><op:operator pos:line="344" pos:column="23">new</op:operator> <call><name pos:line="344" pos:column="27">ArgumentNullException</name><argument_list pos:line="344" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="344" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="346" pos:column="13">var</name></type> <name pos:line="346" pos:column="17">propertyDef</name> <init pos:line="346" pos:column="29">= <expr><op:operator pos:line="346" pos:column="31">new</op:operator> <name pos:line="346" pos:column="35">PropertyDefinition</name> <block pos:line="346" pos:column="54">{<expr><name pos:line="346" pos:column="55">ProgrammingLanguage</name> <op:operator pos:line="346" pos:column="75">=</op:operator> <name pos:line="346" pos:column="77">ParserLanguage</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="347" pos:column="13">propertyDef</name><op:operator pos:line="347" pos:column="24">.</op:operator><name pos:line="347" pos:column="25">AddLocation</name></name><argument_list pos:line="347" pos:column="36">(<argument><expr><call><name><name pos:line="347" pos:column="37">context</name><op:operator pos:line="347" pos:column="44">.</op:operator><name pos:line="347" pos:column="45">CreateLocation</name></name><argument_list pos:line="347" pos:column="59">(<argument><expr><name pos:line="347" pos:column="60">declElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <foreach pos:line="349" pos:column="13">foreach(<init><decl><type><name pos:line="349" pos:column="21">var</name></type> <name pos:line="349" pos:column="25">child</name> <range pos:line="349" pos:column="31">in <expr><call><name><name pos:line="349" pos:column="34">declElement</name><op:operator pos:line="349" pos:column="45">.</op:operator><name pos:line="349" pos:column="46">Elements</name></name><argument_list pos:line="349" pos:column="54">()</argument_list></call></expr></range></decl></init>) <block pos:line="349" pos:column="58">{
                <if pos:line="350" pos:column="17">if<condition pos:line="350" pos:column="19">(<expr><name><name pos:line="350" pos:column="20">child</name><op:operator pos:line="350" pos:column="25">.</op:operator><name pos:line="350" pos:column="26">Name</name></name> <op:operator pos:line="350" pos:column="31">==</op:operator> <name><name pos:line="350" pos:column="34">SRC</name><op:operator pos:line="350" pos:column="37">.</op:operator><name pos:line="350" pos:column="38">Type</name></name></expr>)</condition><then pos:line="350" pos:column="43"> <block pos:line="350" pos:column="44">{
                    <expr_stmt><expr><name><name pos:line="351" pos:column="21">propertyDef</name><op:operator pos:line="351" pos:column="32">.</op:operator><name pos:line="351" pos:column="33">Accessibility</name></name> <op:operator pos:line="351" pos:column="47">=</op:operator> <call><name pos:line="351" pos:column="49">GetAccessModifierFromTypeUseElement</name><argument_list pos:line="351" pos:column="84">(<argument><expr><name pos:line="351" pos:column="85">child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="352" pos:column="21">propertyDef</name><op:operator pos:line="352" pos:column="32">.</op:operator><name pos:line="352" pos:column="33">ReturnType</name></name> <op:operator pos:line="352" pos:column="44">=</op:operator> <call><name pos:line="352" pos:column="46">ParseTypeUseElement</name><argument_list pos:line="352" pos:column="65">(<argument><expr><name pos:line="352" pos:column="66">child</name></expr></argument>, <argument><expr><name pos:line="352" pos:column="73">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="354" pos:column="17">else <if pos:line="354" pos:column="22">if<condition pos:line="354" pos:column="24">(<expr><name><name pos:line="354" pos:column="25">child</name><op:operator pos:line="354" pos:column="30">.</op:operator><name pos:line="354" pos:column="31">Name</name></name> <op:operator pos:line="354" pos:column="36">==</op:operator> <name><name pos:line="354" pos:column="39">SRC</name><op:operator pos:line="354" pos:column="42">.</op:operator><name pos:line="354" pos:column="43">Name</name></name></expr>)</condition><then pos:line="354" pos:column="48"> <block pos:line="354" pos:column="49">{
                    <expr_stmt><expr><name><name pos:line="355" pos:column="21">propertyDef</name><op:operator pos:line="355" pos:column="32">.</op:operator><name pos:line="355" pos:column="33">Name</name></name> <op:operator pos:line="355" pos:column="38">=</op:operator> <name><name pos:line="355" pos:column="40">child</name><op:operator pos:line="355" pos:column="45">.</op:operator><name pos:line="355" pos:column="46">Value</name></name></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="357" pos:column="17">else <if pos:line="357" pos:column="22">if<condition pos:line="357" pos:column="24">(<expr><name><name pos:line="357" pos:column="25">child</name><op:operator pos:line="357" pos:column="30">.</op:operator><name pos:line="357" pos:column="31">Name</name></name> <op:operator pos:line="357" pos:column="36">==</op:operator> <name><name pos:line="357" pos:column="39">SRC</name><op:operator pos:line="357" pos:column="42">.</op:operator><name pos:line="357" pos:column="43">Block</name></name></expr>)</condition><then pos:line="357" pos:column="49"> <block pos:line="357" pos:column="50">{
                    <comment type="line" pos:line="358" pos:column="21">//add children from block. This should be the getter/setter methods</comment>
                    <decl_stmt><decl><type><name pos:line="359" pos:column="21">var</name></type> <name pos:line="359" pos:column="25">blockStatements</name> <init pos:line="359" pos:column="41">= <expr><call><name><name pos:line="359" pos:column="43">child</name><op:operator pos:line="359" pos:column="48">.</op:operator><name pos:line="359" pos:column="49">Elements</name></name><argument_list pos:line="359" pos:column="57">()</argument_list></call><op:operator pos:line="359" pos:column="59">.</op:operator><call><name pos:line="359" pos:column="60">Select</name><argument_list pos:line="359" pos:column="66">(<argument><expr><lambda><name pos:line="359" pos:column="67">e</name> <op:operator pos:line="359" pos:column="69">=&gt;</op:operator> <call><name pos:line="359" pos:column="72">ParseStatement</name><argument_list pos:line="359" pos:column="86">(<argument><expr><name pos:line="359" pos:column="87">e</name></expr></argument>, <argument><expr><name pos:line="359" pos:column="90">context</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="360" pos:column="21">propertyDef</name><op:operator pos:line="360" pos:column="32">.</op:operator><name pos:line="360" pos:column="33">AddChildStatements</name></name><argument_list pos:line="360" pos:column="51">(<argument><expr><name pos:line="360" pos:column="52">blockStatements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="361" pos:column="19">else <block pos:line="361" pos:column="24">{
                    <expr_stmt><expr><call><name><name pos:line="362" pos:column="21">propertyDef</name><op:operator pos:line="362" pos:column="32">.</op:operator><name pos:line="362" pos:column="33">AddChildStatement</name></name><argument_list pos:line="362" pos:column="50">(<argument><expr><call><name pos:line="362" pos:column="51">ParseStatement</name><argument_list pos:line="362" pos:column="65">(<argument><expr><name pos:line="362" pos:column="66">child</name></expr></argument>, <argument><expr><name pos:line="362" pos:column="73">context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if></else></if></else></if>
            }</block></foreach>

            <return pos:line="366" pos:column="13">return <expr><name pos:line="366" pos:column="20">propertyDef</name></expr>;</return>
        }</block></function>

        <cpp:region pos:line="369" pos:column="9">#<cpp:directive pos:line="369" pos:column="10">region</cpp:directive> Private methods</cpp:region>

        <comment type="line" pos:line="371" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="372" pos:column="9">/// Determines whether the given element contains a specifier element with the value "partial".</comment>
        <comment type="line" pos:line="373" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="374" pos:column="9">private</specifier> <name pos:line="374" pos:column="17">bool</name></type> <name pos:line="374" pos:column="22">ElementHasPartialKeyword</name><parameter_list pos:line="374" pos:column="46">(<param><decl><type><name pos:line="374" pos:column="47">XElement</name></type> <name pos:line="374" pos:column="56">element</name></decl></param>)</parameter_list> <block pos:line="374" pos:column="65">{
            <decl_stmt><decl><type><name pos:line="375" pos:column="13">var</name></type> <name pos:line="375" pos:column="17">partials</name> <init pos:line="375" pos:column="26">= <expr><linq><from pos:line="375" pos:column="28">from <expr><name pos:line="375" pos:column="33">specifier</name></expr> <in pos:line="375" pos:column="43">in <expr><call><name><name pos:line="375" pos:column="46">element</name><op:operator pos:line="375" pos:column="53">.</op:operator><name pos:line="375" pos:column="54">Elements</name></name><argument_list pos:line="375" pos:column="62">(<argument><expr><name><name pos:line="375" pos:column="63">SRC</name><op:operator pos:line="375" pos:column="66">.</op:operator><name pos:line="375" pos:column="67">Specifier</name></name></expr></argument>)</argument_list></call></expr></in></from>
                           <where pos:line="376" pos:column="28">where <expr><name><name pos:line="376" pos:column="34">specifier</name><op:operator pos:line="376" pos:column="43">.</op:operator><name pos:line="376" pos:column="44">Value</name></name> <op:operator pos:line="376" pos:column="50">==</op:operator> <lit:literal type="string" pos:line="376" pos:column="53">"partial"</lit:literal></expr></where>
                           <select pos:line="377" pos:column="28">select <expr><name pos:line="377" pos:column="35">specifier</name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <return pos:line="378" pos:column="13">return <expr><call><name><name pos:line="378" pos:column="20">partials</name><op:operator pos:line="378" pos:column="28">.</op:operator><name pos:line="378" pos:column="29">Any</name></name><argument_list pos:line="378" pos:column="32">()</argument_list></call></expr>;</return>
        }</block></function>

        <cpp:endregion pos:line="381" pos:column="9">#<cpp:directive pos:line="381" pos:column="10">endregion</cpp:directive> Private methods</cpp:endregion>
    }</block></class>
}</block></namespace></unit>
