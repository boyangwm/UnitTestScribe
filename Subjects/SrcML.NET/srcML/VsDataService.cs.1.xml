<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\VisualStudio\ABB.SrcML.VisualStudio.SrcMLService\VsDataService.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2014 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine(ABB Group) - Initial implementation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">ABB</name><op:operator pos:line="12" pos:column="10">.</op:operator><name pos:line="12" pos:column="11">SrcML</name><op:operator pos:line="12" pos:column="16">.</op:operator><name pos:line="12" pos:column="17">Data</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">ABB</name><op:operator pos:line="13" pos:column="10">.</op:operator><name pos:line="13" pos:column="11">VisualStudio</name></name>;</using>
<using pos:line="14" pos:column="1">using <name pos:line="14" pos:column="7">System</name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Collections</name><op:operator pos:line="15" pos:column="25">.</op:operator><name pos:line="15" pos:column="26">Generic</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">IO</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Linq</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Text</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">System</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">Threading</name><op:operator pos:line="19" pos:column="23">.</op:operator><name pos:line="19" pos:column="24">Tasks</name></name>;</using>
<using pos:line="20" pos:column="1">using <name><name pos:line="20" pos:column="7">System</name><op:operator pos:line="20" pos:column="13">.</op:operator><name pos:line="20" pos:column="14">Windows</name></name>;</using>

<namespace pos:line="22" pos:column="1">namespace <name><name pos:line="22" pos:column="11">ABB</name><op:operator pos:line="22" pos:column="14">.</op:operator><name pos:line="22" pos:column="15">SrcML</name><op:operator pos:line="22" pos:column="20">.</op:operator><name pos:line="22" pos:column="21">VisualStudio</name></name> <block pos:line="22" pos:column="34">{
    <comment type="line" pos:line="23" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="24" pos:column="5">/// The VS Data service responds to file change events from &lt;see cref="VsMonitoringService"/&gt; and keeps &lt;see cref="CurrentWorkingSet"/&gt; up to date.</comment>
    <comment type="line" pos:line="25" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="26" pos:column="5">public</specifier> class <name pos:line="26" pos:column="18">VsDataService</name> <super pos:line="26" pos:column="32">: <name pos:line="26" pos:column="34">AbstractMonitoringService</name>, <name pos:line="26" pos:column="61">ISrcMLDataService</name>, <name pos:line="26" pos:column="80">SSrcMLDataService</name></super> <block pos:line="26" pos:column="98">{
        <decl_stmt><decl><type><specifier pos:line="27" pos:column="9">private</specifier> <name><name pos:line="27" pos:column="17">ArchiveMonitor</name><argument_list pos:line="27" pos:column="31">&lt;<argument><name pos:line="27" pos:column="32">SrcMLArchive</name></argument>&gt;</argument_list></name></type> <name pos:line="27" pos:column="46">_srcMonitor</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="28" pos:column="9">private</specifier> <name pos:line="28" pos:column="17">ISrcMLGlobalService</name></type> <name pos:line="28" pos:column="37">_srcMLService</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="29" pos:column="9">private</specifier> <name pos:line="29" pos:column="17">IWorkingSetRegistrarService</name></type> <name pos:line="29" pos:column="45">_workingSetFactories</name></decl>;</decl_stmt>

        <comment type="line" pos:line="31" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="32" pos:column="9">/// Creates a new data service</comment>
        <comment type="line" pos:line="33" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="34" pos:column="9">/// &lt;param name="serviceProvider"&gt;The container where this service is sited&lt;/param&gt;</comment>
        <comment type="line" pos:line="35" pos:column="9">/// &lt;param name="taskManagerService"&gt;The task manager&lt;/param&gt;</comment>
        <comment type="line" pos:line="36" pos:column="9">/// &lt;param name="srcMLService"&gt;The srcML service&lt;/param&gt;</comment>
        <comment type="line" pos:line="37" pos:column="9">/// &lt;param name="workingSetService"&gt;The working set factory service&lt;/param&gt;</comment>
        <constructor><specifier pos:line="38" pos:column="9">public</specifier> <name pos:line="38" pos:column="16">VsDataService</name><parameter_list pos:line="38" pos:column="29">(<param><decl><type><name pos:line="38" pos:column="30">SrcMLServicePackage</name></type> <name pos:line="38" pos:column="50">serviceProvider</name></decl></param>, <param><decl><type><name pos:line="38" pos:column="67">ITaskManagerService</name></type> <name pos:line="38" pos:column="87">taskManagerService</name></decl></param>, <param><decl><type><name pos:line="38" pos:column="107">ISrcMLGlobalService</name></type> <name pos:line="38" pos:column="127">srcMLService</name></decl></param>, <param><decl><type><name pos:line="38" pos:column="141">IWorkingSetRegistrarService</name></type> <name pos:line="38" pos:column="169">workingSetService</name></decl></param>)</parameter_list>
            <member_list pos:line="39" pos:column="13">: <call><name pos:line="39" pos:column="15">base</name><argument_list pos:line="39" pos:column="19">(<argument><expr><name pos:line="39" pos:column="20">serviceProvider</name></expr></argument>, <argument><expr><name pos:line="39" pos:column="37">taskManagerService</name></expr></argument>)</argument_list></call> </member_list><block pos:line="39" pos:column="57">{
            <expr_stmt><expr><name pos:line="40" pos:column="13">_srcMLService</name> <op:operator pos:line="40" pos:column="27">=</op:operator> <name pos:line="40" pos:column="29">srcMLService</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="41" pos:column="13">_workingSetFactories</name> <op:operator pos:line="41" pos:column="34">=</op:operator> <name pos:line="41" pos:column="36">workingSetService</name></expr>;</expr_stmt>

            <if pos:line="43" pos:column="13">if<condition pos:line="43" pos:column="15">(<expr><name><name pos:line="43" pos:column="16">_srcMLService</name><op:operator pos:line="43" pos:column="29">.</op:operator><name pos:line="43" pos:column="30">IsMonitoring</name></name></expr>)</condition><then pos:line="43" pos:column="43"> <block pos:line="43" pos:column="44">{
                <expr_stmt><expr><call><name pos:line="44" pos:column="17">_srcMLService_MonitoringStarted</name><argument_list pos:line="44" pos:column="48">(<argument><expr><name pos:line="44" pos:column="49">this</name></expr></argument>, <argument><expr><op:operator pos:line="44" pos:column="55">new</op:operator> <call><name pos:line="44" pos:column="59">EventArgs</name><argument_list pos:line="44" pos:column="68">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name pos:line="46" pos:column="13">Subscribe</name><argument_list pos:line="46" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="49" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="50" pos:column="9">/// Raised whenever a file is processed</comment>
        <comment type="line" pos:line="51" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="52" pos:column="9">public</specifier> <specifier pos:line="52" pos:column="16">event</specifier> <name><name pos:line="52" pos:column="22">EventHandler</name><argument_list pos:line="52" pos:column="34">&lt;<argument><name pos:line="52" pos:column="35">FileEventRaisedArgs</name></argument>&gt;</argument_list></name></type> <name pos:line="52" pos:column="56">FileProcessed</name></decl>;</decl_stmt>

        <comment type="line" pos:line="54" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="55" pos:column="9">/// The data archive for the current solution</comment>
        <comment type="line" pos:line="56" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="57" pos:column="9">public</specifier> <name pos:line="57" pos:column="16">DataArchive</name></type> <name pos:line="57" pos:column="28">CurrentDataArchive</name> <block pos:line="57" pos:column="47">{ <function_decl><name pos:line="57" pos:column="49">get</name>;</function_decl> <function_decl><specifier pos:line="57" pos:column="54">private</specifier> <name pos:line="57" pos:column="62">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="59" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="60" pos:column="9">/// The working set for the current solution</comment>
        <comment type="line" pos:line="61" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="62" pos:column="9">public</specifier> <name pos:line="62" pos:column="16">AbstractWorkingSet</name></type> <name pos:line="62" pos:column="35">CurrentWorkingSet</name> <block pos:line="62" pos:column="53">{ <function_decl><name pos:line="62" pos:column="55">get</name>;</function_decl> <function_decl><specifier pos:line="62" pos:column="60">private</specifier> <name pos:line="62" pos:column="68">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="64" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="65" pos:column="9">/// Saves the state for this service</comment>
        <comment type="line" pos:line="66" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="67" pos:column="9">protected</specifier> <specifier pos:line="67" pos:column="19">override</specifier> <name pos:line="67" pos:column="28">void</name></type> <name pos:line="67" pos:column="33">Save</name><parameter_list pos:line="67" pos:column="37">()</parameter_list> <block pos:line="67" pos:column="40">{
            <expr_stmt><expr><call><name><name pos:line="68" pos:column="13">_srcMonitor</name><op:operator pos:line="68" pos:column="24">.</op:operator><name pos:line="68" pos:column="25">Save</name></name><argument_list pos:line="68" pos:column="29">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="71" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="72" pos:column="9">/// Sets up the &lt;see cref="CurrentDataArchive"/&gt; and &lt;see cref="CurrentWorkingSet"/&gt; to respond to events from the srcML service</comment>
        <comment type="line" pos:line="73" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="74" pos:column="9">protected</specifier> <specifier pos:line="74" pos:column="19">override</specifier> <name pos:line="74" pos:column="28">void</name></type> <name pos:line="74" pos:column="33">Setup</name><parameter_list pos:line="74" pos:column="38">()</parameter_list> <block pos:line="74" pos:column="41">{
            <decl_stmt><decl><type><name pos:line="75" pos:column="13">string</name></type> <name pos:line="75" pos:column="20">storagePath</name> <init pos:line="75" pos:column="32">= <expr><name><name pos:line="75" pos:column="34">_srcMLService</name><op:operator pos:line="75" pos:column="47">.</op:operator><name pos:line="75" pos:column="48">CurrentMonitor</name><op:operator pos:line="75" pos:column="62">.</op:operator><name pos:line="75" pos:column="63">MonitorStoragePath</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="76" pos:column="13">SrcMLArchive</name></type> <name pos:line="76" pos:column="26">sourceArchive</name> <init pos:line="76" pos:column="40">= <expr><name><name pos:line="76" pos:column="42">_srcMLService</name><op:operator pos:line="76" pos:column="55">.</op:operator><name pos:line="76" pos:column="56">CurrentSrcMLArchive</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name pos:line="78" pos:column="13">CurrentDataArchive</name> <op:operator pos:line="78" pos:column="32">=</op:operator> <op:operator pos:line="78" pos:column="34">new</op:operator> <call><name pos:line="78" pos:column="38">DataArchive</name><argument_list pos:line="78" pos:column="49">(<argument><expr><name pos:line="78" pos:column="50">storagePath</name></expr></argument>, <argument><expr><name pos:line="78" pos:column="63">sourceArchive</name></expr></argument>, <argument><expr><name pos:line="78" pos:column="78">GlobalScheduler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="79" pos:column="13">CurrentDataArchive</name><op:operator pos:line="79" pos:column="31">.</op:operator><name pos:line="79" pos:column="32">Generator</name><op:operator pos:line="79" pos:column="41">.</op:operator><name pos:line="79" pos:column="42">ErrorLog</name></name> <op:operator pos:line="79" pos:column="51">=</op:operator> <name><name pos:line="79" pos:column="53">sourceArchive</name><op:operator pos:line="79" pos:column="66">.</op:operator><name pos:line="79" pos:column="67">Generator</name><op:operator pos:line="79" pos:column="76">.</op:operator><name pos:line="79" pos:column="77">ErrorLog</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="80" pos:column="13">CurrentDataArchive</name><op:operator pos:line="80" pos:column="31">.</op:operator><name pos:line="80" pos:column="32">Generator</name><op:operator pos:line="80" pos:column="41">.</op:operator><name pos:line="80" pos:column="42">IsLoggingErrors</name></name> <op:operator pos:line="80" pos:column="58">=</op:operator> <lit:literal type="boolean" pos:line="80" pos:column="60">true</lit:literal></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="82" pos:column="13">_srcMonitor</name> <op:operator pos:line="82" pos:column="25">=</op:operator> <op:operator pos:line="82" pos:column="27">new</op:operator> <call><name><name pos:line="82" pos:column="31">ArchiveMonitor</name><argument_list pos:line="82" pos:column="45">&lt;<argument><name pos:line="82" pos:column="46">SrcMLArchive</name></argument>&gt;</argument_list></name><argument_list pos:line="82" pos:column="59">(<argument><expr><name pos:line="82" pos:column="60">GlobalScheduler</name></expr></argument>, <argument><expr><name pos:line="82" pos:column="77">storagePath</name></expr></argument>, <argument><expr><name pos:line="82" pos:column="90">sourceArchive</name></expr></argument>, <argument><expr><name pos:line="82" pos:column="105">CurrentDataArchive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="83" pos:column="13">CurrentWorkingSet</name> <op:operator pos:line="83" pos:column="31">=</op:operator> <call><name><name pos:line="83" pos:column="33">_workingSetFactories</name><op:operator pos:line="83" pos:column="53">.</op:operator><name pos:line="83" pos:column="54">Default</name><op:operator pos:line="83" pos:column="61">.</op:operator><name pos:line="83" pos:column="62">CreateWorkingSet</name></name><argument_list pos:line="83" pos:column="78">(<argument><expr><name pos:line="83" pos:column="79">storagePath</name></expr></argument>, <argument><expr><name pos:line="83" pos:column="92">CurrentDataArchive</name></expr></argument>, <argument><expr><name pos:line="83" pos:column="112">GlobalTaskFactory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="84" pos:column="13">CurrentWorkingSet</name><op:operator pos:line="84" pos:column="30">.</op:operator><name pos:line="84" pos:column="31">UseAsynchronousMethods</name></name> <op:operator pos:line="84" pos:column="54">=</op:operator> <lit:literal type="boolean" pos:line="84" pos:column="56">true</lit:literal></expr>;</expr_stmt>
        }</block></function>

        <decl_stmt><decl><type><specifier pos:line="87" pos:column="9">const</specifier> <name pos:line="87" pos:column="15">string</name></type> <name pos:line="87" pos:column="22">WS_FAILOVER_FILENAME</name> <init pos:line="87" pos:column="43">= <expr><lit:literal type="string" pos:line="87" pos:column="45">"FAILOVER_COMPLETE_WORKINGSET"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="89" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="90" pos:column="9">/// Implementation method for &lt;see cref="AbstractMonitoringService.Update"/&gt;</comment>
        <comment type="line" pos:line="91" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="92" pos:column="9">protected</specifier> <specifier pos:line="92" pos:column="19">override</specifier> <name pos:line="92" pos:column="28">void</name></type> <name pos:line="92" pos:column="33">UpdateImpl</name><parameter_list pos:line="92" pos:column="43">()</parameter_list> <block pos:line="92" pos:column="46">{
            <expr_stmt><expr><call><name><name pos:line="93" pos:column="13">_srcMonitor</name><op:operator pos:line="93" pos:column="24">.</op:operator><name pos:line="93" pos:column="25">UpdateArchivesAsync</name></name><argument_list pos:line="93" pos:column="44">()</argument_list></call><op:operator pos:line="93" pos:column="46">.</op:operator><call><name pos:line="93" pos:column="47">Wait</name><argument_list pos:line="93" pos:column="51">()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="95" pos:column="13">bool</name></type> <name pos:line="95" pos:column="18">workingSetFailed</name> <init pos:line="95" pos:column="35">= <expr><lit:literal type="boolean" pos:line="95" pos:column="37">false</lit:literal></expr></init></decl>;</decl_stmt>
            <try pos:line="96" pos:column="13">try <block pos:line="96" pos:column="17">{
                <expr_stmt><expr><call><name><name pos:line="97" pos:column="17">CurrentWorkingSet</name><op:operator pos:line="97" pos:column="34">.</op:operator><name pos:line="97" pos:column="35">InitializeAsync</name></name><argument_list pos:line="97" pos:column="50">()</argument_list></call><op:operator pos:line="97" pos:column="52">.</op:operator><call><name pos:line="97" pos:column="53">Wait</name><argument_list pos:line="97" pos:column="57">()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch pos:line="98" pos:column="15">catch<parameter_list pos:line="98" pos:column="20">(<param><decl><type><name pos:line="98" pos:column="21">AggregateException</name></type> <name pos:line="98" pos:column="40">e</name></decl></param>)</parameter_list> <block pos:line="98" pos:column="43">{
                <expr_stmt><expr><name pos:line="99" pos:column="17">workingSetFailed</name> <op:operator pos:line="99" pos:column="34">=</op:operator> <lit:literal type="boolean" pos:line="99" pos:column="36">true</lit:literal></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="100" pos:column="17">var</name></type> <name pos:line="100" pos:column="21">logFileName</name> <init pos:line="100" pos:column="33">= <expr><call><name><name pos:line="100" pos:column="35">Path</name><op:operator pos:line="100" pos:column="39">.</op:operator><name pos:line="100" pos:column="40">Combine</name></name><argument_list pos:line="100" pos:column="47">(<argument><expr><name><name pos:line="100" pos:column="48">ServiceProvider</name><op:operator pos:line="100" pos:column="63">.</op:operator><name pos:line="100" pos:column="64">ExtensionDirectory</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="100" pos:column="84">"update_error.log"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="101" pos:column="17">bool</name></type> <name pos:line="101" pos:column="22">logFileIsNew</name> <init pos:line="101" pos:column="35">= <expr><op:operator pos:line="101" pos:column="37">!</op:operator><call><name><name pos:line="101" pos:column="38">File</name><op:operator pos:line="101" pos:column="42">.</op:operator><name pos:line="101" pos:column="43">Exists</name></name><argument_list pos:line="101" pos:column="49">(<argument><expr><name pos:line="101" pos:column="50">logFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <using pos:line="102" pos:column="17">using(<decl><type><name pos:line="102" pos:column="23">var</name></type> <name pos:line="102" pos:column="27">error</name> <init pos:line="102" pos:column="33">= <expr><op:operator pos:line="102" pos:column="35">new</op:operator> <call><name pos:line="102" pos:column="39">StreamWriter</name><argument_list pos:line="102" pos:column="51">(<argument><expr><name pos:line="102" pos:column="52">logFileName</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="102" pos:column="65">true</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>) <block pos:line="102" pos:column="72">{
                    <if pos:line="103" pos:column="21">if<condition pos:line="103" pos:column="23">(<expr><name pos:line="103" pos:column="24">logFileIsNew</name></expr>)</condition><then pos:line="103" pos:column="37"> <block pos:line="103" pos:column="38">{
                        <expr_stmt><expr><call><name><name pos:line="104" pos:column="25">error</name><op:operator pos:line="104" pos:column="30">.</op:operator><name pos:line="104" pos:column="31">WriteLine</name></name><argument_list pos:line="104" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="104" pos:column="41">"Please e-mail the contents of this file to US-prodet@abb.com"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="105" pos:column="25">error</name><op:operator pos:line="105" pos:column="30">.</op:operator><name pos:line="105" pos:column="31">WriteLine</name></name><argument_list pos:line="105" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="106" pos:column="25">error</name><op:operator pos:line="106" pos:column="30">.</op:operator><name pos:line="106" pos:column="31">WriteLine</name></name><argument_list pos:line="106" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="106" pos:column="41">"Calling Assembly: {0}"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="106" pos:column="66">this</name><op:operator pos:line="106" pos:column="70">.</op:operator><name pos:line="106" pos:column="71">GetType</name></name><argument_list pos:line="106" pos:column="78">()</argument_list></call><op:operator pos:line="106" pos:column="80">.</op:operator><name pos:line="106" pos:column="81">AssemblyQualifiedName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="107" pos:column="25">error</name><op:operator pos:line="107" pos:column="30">.</op:operator><name pos:line="107" pos:column="31">WriteLine</name></name><argument_list pos:line="107" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="107" pos:column="41">"Working Set: {0}"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="107" pos:column="61">CurrentWorkingSet</name><op:operator pos:line="107" pos:column="78">.</op:operator><name pos:line="107" pos:column="79">GetType</name></name><argument_list pos:line="107" pos:column="86">()</argument_list></call><op:operator pos:line="107" pos:column="88">.</op:operator><name pos:line="107" pos:column="89">AssemblyQualifiedName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    
                    <foreach pos:line="110" pos:column="21">foreach(<init><decl><type><name pos:line="110" pos:column="29">var</name></type> <name pos:line="110" pos:column="33">exception</name> <range pos:line="110" pos:column="43">in <expr><name><name pos:line="110" pos:column="46">e</name><op:operator pos:line="110" pos:column="47">.</op:operator><name pos:line="110" pos:column="48">InnerExceptions</name></name></expr></range></decl></init>) <block pos:line="110" pos:column="65">{
                        <expr_stmt><expr><call><name><name pos:line="111" pos:column="25">error</name><op:operator pos:line="111" pos:column="30">.</op:operator><name pos:line="111" pos:column="31">WriteLine</name></name><argument_list pos:line="111" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="112" pos:column="25">error</name><op:operator pos:line="112" pos:column="30">.</op:operator><name pos:line="112" pos:column="31">WriteLine</name></name><argument_list pos:line="112" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="112" pos:column="41">"========================================================="</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="113" pos:column="25">error</name><op:operator pos:line="113" pos:column="30">.</op:operator><name pos:line="113" pos:column="31">WriteLine</name></name><argument_list pos:line="113" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="113" pos:column="41">"Message: {0}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="113" pos:column="57">exception</name><op:operator pos:line="113" pos:column="66">.</op:operator><name pos:line="113" pos:column="67">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="114" pos:column="25">error</name><op:operator pos:line="114" pos:column="30">.</op:operator><name pos:line="114" pos:column="31">WriteLine</name></name><argument_list pos:line="114" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="114" pos:column="41">"Source: {0}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="114" pos:column="56">exception</name><op:operator pos:line="114" pos:column="65">.</op:operator><name pos:line="114" pos:column="66">Source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="115" pos:column="25">error</name><op:operator pos:line="115" pos:column="30">.</op:operator><name pos:line="115" pos:column="31">WriteLine</name></name><argument_list pos:line="115" pos:column="40">(<argument><expr><name><name pos:line="115" pos:column="41">exception</name><op:operator pos:line="115" pos:column="50">.</op:operator><name pos:line="115" pos:column="51">StackTrace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></foreach>
                }</block></using>

                <if pos:line="119" pos:column="17">if<condition pos:line="119" pos:column="19">(<expr><name pos:line="119" pos:column="20">workingSetFailed</name></expr>)</condition><then pos:line="119" pos:column="37"> <block pos:line="119" pos:column="38">{
                    <decl_stmt><decl><type><name pos:line="120" pos:column="21">var</name></type> <name pos:line="120" pos:column="25">failoverFileName</name> <init pos:line="120" pos:column="42">= <expr><call><name><name pos:line="120" pos:column="44">Path</name><op:operator pos:line="120" pos:column="48">.</op:operator><name pos:line="120" pos:column="49">Combine</name></name><argument_list pos:line="120" pos:column="56">(<argument><expr><name><name pos:line="120" pos:column="57">_srcMonitor</name><op:operator pos:line="120" pos:column="68">.</op:operator><name pos:line="120" pos:column="69">MonitorStoragePath</name></name></expr></argument>, <argument><expr><name pos:line="120" pos:column="89">WS_FAILOVER_FILENAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="121" pos:column="21">bool</name></type> <name pos:line="121" pos:column="26">useCompleteWorkingSet</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="122" pos:column="21">bool</name></type> <name pos:line="122" pos:column="26">askUser</name> <init pos:line="122" pos:column="34">= <expr><lit:literal type="boolean" pos:line="122" pos:column="36">true</lit:literal></expr></init></decl>;</decl_stmt>

                    <if pos:line="124" pos:column="21">if<condition pos:line="124" pos:column="23">(<expr><call><name><name pos:line="124" pos:column="24">File</name><op:operator pos:line="124" pos:column="28">.</op:operator><name pos:line="124" pos:column="29">Exists</name></name><argument_list pos:line="124" pos:column="35">(<argument><expr><name pos:line="124" pos:column="36">failoverFileName</name></expr></argument>)</argument_list></call> <op:operator pos:line="124" pos:column="54">&amp;&amp;</op:operator> <call><name><name pos:line="124" pos:column="57">Boolean</name><op:operator pos:line="124" pos:column="64">.</op:operator><name pos:line="124" pos:column="65">TryParse</name></name><argument_list pos:line="124" pos:column="73">(<argument><expr><call><name><name pos:line="124" pos:column="74">File</name><op:operator pos:line="124" pos:column="78">.</op:operator><name pos:line="124" pos:column="79">ReadAllText</name></name><argument_list pos:line="124" pos:column="90">(<argument><expr><name pos:line="124" pos:column="91">failoverFileName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr pos:line="124" pos:column="110">out <name pos:line="124" pos:column="114">useCompleteWorkingSet</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="124" pos:column="137"> <block pos:line="124" pos:column="138">{
                        <expr_stmt><expr><name pos:line="125" pos:column="25">askUser</name> <op:operator pos:line="125" pos:column="33">=</op:operator> <lit:literal type="boolean" pos:line="125" pos:column="35">false</lit:literal></expr>;</expr_stmt>
                    }</block></then> <else pos:line="126" pos:column="23">else <block pos:line="126" pos:column="28">{
                        <expr_stmt><expr><name pos:line="127" pos:column="25">useCompleteWorkingSet</name> <op:operator pos:line="127" pos:column="47">=</op:operator> <lit:literal type="boolean" pos:line="127" pos:column="49">false</lit:literal></expr>;</expr_stmt>
                    }</block></else></if>

                    <if pos:line="130" pos:column="21">if<condition pos:line="130" pos:column="23">(<expr><name pos:line="130" pos:column="24">askUser</name></expr>)</condition><then pos:line="130" pos:column="32"> <block pos:line="130" pos:column="33">{
                        <decl_stmt><decl><type><name pos:line="131" pos:column="25">string</name></type> <name pos:line="131" pos:column="32">message</name> <init pos:line="131" pos:column="40">= <expr><call><name><name pos:line="131" pos:column="42">String</name><op:operator pos:line="131" pos:column="48">.</op:operator><name pos:line="131" pos:column="49">Format</name></name><argument_list pos:line="131" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="131" pos:column="56">"Prodet selective analysis has encountered an error. Do you want to load analysis for all files? Your solution has {0} files. Solutions with &gt;1000 files may consume too much memory."</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="131" pos:column="240">CurrentDataArchive</name><op:operator pos:line="131" pos:column="258">.</op:operator><name pos:line="131" pos:column="259">GetFiles</name></name><argument_list pos:line="131" pos:column="267">()</argument_list></call><op:operator pos:line="131" pos:column="269">.</op:operator><call><name pos:line="131" pos:column="270">Count</name><argument_list pos:line="131" pos:column="275">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name pos:line="132" pos:column="25">int</name></type> <name pos:line="132" pos:column="29">fileCount</name> <init pos:line="132" pos:column="39">= <expr><call><name><name pos:line="132" pos:column="41">CurrentDataArchive</name><op:operator pos:line="132" pos:column="59">.</op:operator><name pos:line="132" pos:column="60">GetFiles</name></name><argument_list pos:line="132" pos:column="68">()</argument_list></call><op:operator pos:line="132" pos:column="70">.</op:operator><call><name pos:line="132" pos:column="71">Count</name><argument_list pos:line="132" pos:column="76">()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name pos:line="133" pos:column="25">MessageBoxResult</name></type> <name pos:line="133" pos:column="42">defaultResult</name> <init pos:line="133" pos:column="56">= <expr><op:operator pos:line="133" pos:column="58">(</op:operator><name pos:line="133" pos:column="59">fileCount</name> <op:operator pos:line="133" pos:column="69">&gt;</op:operator> <lit:literal type="number" pos:line="133" pos:column="71">1000</lit:literal> <op:operator pos:line="133" pos:column="76">?</op:operator> <name><name pos:line="133" pos:column="78">MessageBoxResult</name><op:operator pos:line="133" pos:column="94">.</op:operator><name pos:line="133" pos:column="95">No</name></name> <op:operator pos:line="133" pos:column="98">:</op:operator> <name><name pos:line="133" pos:column="100">MessageBoxResult</name><op:operator pos:line="133" pos:column="116">.</op:operator><name pos:line="133" pos:column="117">Yes</name></name><op:operator pos:line="133" pos:column="120">)</op:operator></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name pos:line="134" pos:column="25">Application</name><op:operator pos:line="134" pos:column="36">.</op:operator><name pos:line="134" pos:column="37">Current</name><op:operator pos:line="134" pos:column="44">.</op:operator><name pos:line="134" pos:column="45">Dispatcher</name><op:operator pos:line="134" pos:column="55">.</op:operator><name pos:line="134" pos:column="56">Invoke</name></name><argument_list pos:line="134" pos:column="62">(<argument><expr><op:operator pos:line="134" pos:column="63">new</op:operator> <call><name pos:line="134" pos:column="67">Action</name><argument_list pos:line="134" pos:column="73">(<argument><expr><lambda><parameter_list pos:line="134" pos:column="74">()</parameter_list> <op:operator pos:line="134" pos:column="77">=&gt;</op:operator> <block pos:line="134" pos:column="80">{
                            <decl_stmt><decl><type><name pos:line="135" pos:column="29">var</name></type> <name pos:line="135" pos:column="33">userInput</name> <init pos:line="135" pos:column="43">= <expr><call><name><name pos:line="135" pos:column="45">MessageBox</name><op:operator pos:line="135" pos:column="55">.</op:operator><name pos:line="135" pos:column="56">Show</name></name><argument_list pos:line="135" pos:column="60">(<argument><expr><name><name pos:line="135" pos:column="61">Application</name><op:operator pos:line="135" pos:column="72">.</op:operator><name pos:line="135" pos:column="73">Current</name><op:operator pos:line="135" pos:column="80">.</op:operator><name pos:line="135" pos:column="81">MainWindow</name></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="93">message</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="135" pos:column="102">"Working Set Error"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="135" pos:column="123">MessageBoxButton</name><op:operator pos:line="135" pos:column="139">.</op:operator><name pos:line="135" pos:column="140">YesNo</name></name></expr></argument>, <argument><expr><name><name pos:line="135" pos:column="147">MessageBoxImage</name><op:operator pos:line="135" pos:column="162">.</op:operator><name pos:line="135" pos:column="163">Error</name></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="170">defaultResult</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                            <switch pos:line="137" pos:column="29">switch<condition pos:line="137" pos:column="35">(<expr><name pos:line="137" pos:column="36">userInput</name></expr>)</condition> <block pos:line="137" pos:column="47">{
                                <case pos:line="138" pos:column="33">case <expr><name><name pos:line="138" pos:column="38">MessageBoxResult</name><op:operator pos:line="138" pos:column="54">.</op:operator><name pos:line="138" pos:column="55">Yes</name></name></expr>:
                                    <expr_stmt><expr><name pos:line="139" pos:column="37">useCompleteWorkingSet</name> <op:operator pos:line="139" pos:column="59">=</op:operator> <lit:literal type="boolean" pos:line="139" pos:column="61">true</lit:literal></expr>;</expr_stmt>
                                    <break pos:line="140" pos:column="37">break;</break>
                                </case><case pos:line="141" pos:column="33">case <expr><name><name pos:line="141" pos:column="38">MessageBoxResult</name><op:operator pos:line="141" pos:column="54">.</op:operator><name pos:line="141" pos:column="55">No</name></name></expr>:
                                    <expr_stmt><expr><name pos:line="142" pos:column="37">useCompleteWorkingSet</name> <op:operator pos:line="142" pos:column="59">=</op:operator> <lit:literal type="boolean" pos:line="142" pos:column="61">false</lit:literal></expr>;</expr_stmt>
                                    <break pos:line="143" pos:column="37">break;</break>
                                </case><default pos:line="144" pos:column="33">default:
                                    <expr_stmt><expr><name pos:line="145" pos:column="37">useCompleteWorkingSet</name> <op:operator pos:line="145" pos:column="59">=</op:operator> <lit:literal type="boolean" pos:line="145" pos:column="61">false</lit:literal></expr>;</expr_stmt>
                                    <break pos:line="146" pos:column="37">break;</break>
                            </default>}</block></switch>
                        }</block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt><expr><call><name><name pos:line="150" pos:column="25">File</name><op:operator pos:line="150" pos:column="29">.</op:operator><name pos:line="150" pos:column="30">WriteAllText</name></name><argument_list pos:line="150" pos:column="42">(<argument><expr><name pos:line="150" pos:column="43">failoverFileName</name></expr></argument>, <argument><expr><call><name><name pos:line="150" pos:column="61">useCompleteWorkingSet</name><op:operator pos:line="150" pos:column="82">.</op:operator><name pos:line="150" pos:column="83">ToString</name></name><argument_list pos:line="150" pos:column="91">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>

                    <if pos:line="153" pos:column="21">if<condition pos:line="153" pos:column="23">(<expr><name pos:line="153" pos:column="24">logFileIsNew</name></expr>)</condition><then pos:line="153" pos:column="37"> <block pos:line="153" pos:column="38">{
                        <expr_stmt><expr><call><name><name pos:line="154" pos:column="25">System</name><op:operator pos:line="154" pos:column="31">.</op:operator><name pos:line="154" pos:column="32">Diagnostics</name><op:operator pos:line="154" pos:column="43">.</op:operator><name pos:line="154" pos:column="44">Process</name><op:operator pos:line="154" pos:column="51">.</op:operator><name pos:line="154" pos:column="52">Start</name></name><argument_list pos:line="154" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="154" pos:column="58">"notepad.exe"</lit:literal></expr></argument>, <argument><expr><name pos:line="154" pos:column="73">logFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>

                    <expr_stmt><expr><call><name><name pos:line="157" pos:column="21">CurrentWorkingSet</name><op:operator pos:line="157" pos:column="38">.</op:operator><name pos:line="157" pos:column="39">Dispose</name></name><argument_list pos:line="157" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
                    <if pos:line="158" pos:column="21">if<condition pos:line="158" pos:column="23">(<expr><name pos:line="158" pos:column="24">useCompleteWorkingSet</name></expr>)</condition><then pos:line="158" pos:column="46"> <block pos:line="158" pos:column="47">{
                        <expr_stmt><expr><name pos:line="159" pos:column="25">CurrentWorkingSet</name> <op:operator pos:line="159" pos:column="43">=</op:operator> <op:operator pos:line="159" pos:column="45">new</op:operator> <call><name pos:line="159" pos:column="49">CompleteWorkingSet</name><argument_list pos:line="159" pos:column="67">(<argument><expr><name pos:line="159" pos:column="68">CurrentDataArchive</name></expr></argument>, <argument><expr><name pos:line="159" pos:column="88">GlobalTaskFactory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="160" pos:column="25">CurrentWorkingSet</name><op:operator pos:line="160" pos:column="42">.</op:operator><name pos:line="160" pos:column="43">InitializeAsync</name></name><argument_list pos:line="160" pos:column="58">()</argument_list></call><op:operator pos:line="160" pos:column="60">.</op:operator><call><name pos:line="160" pos:column="61">Wait</name><argument_list pos:line="160" pos:column="65">()</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else pos:line="161" pos:column="23">else <block pos:line="161" pos:column="28">{
                        <expr_stmt><expr><name pos:line="162" pos:column="25">CurrentWorkingSet</name> <op:operator pos:line="162" pos:column="43">=</op:operator> <name pos:line="162" pos:column="45">null</name></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then></if>
            }</block></catch></try>
        }</block></function>

        <comment type="line" pos:line="168" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="169" pos:column="9">/// Implementation method for &lt;see cref="AbstractMonitoringService.StartMonitoring"/&gt;</comment>
        <comment type="line" pos:line="170" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="171" pos:column="9">protected</specifier> <specifier pos:line="171" pos:column="19">override</specifier> <name pos:line="171" pos:column="28">void</name></type> <name pos:line="171" pos:column="33">StartMonitoringImpl</name><parameter_list pos:line="171" pos:column="52">()</parameter_list> <block pos:line="171" pos:column="55">{
            <expr_stmt><expr><name><name pos:line="172" pos:column="13">_srcMonitor</name><op:operator pos:line="172" pos:column="24">.</op:operator><name pos:line="172" pos:column="25">FileChanged</name></name> <op:operator pos:line="172" pos:column="37">+=</op:operator> <name pos:line="172" pos:column="40">_srcMonitor_FileChanged</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="173" pos:column="13">_srcMonitor</name><op:operator pos:line="173" pos:column="24">.</op:operator><name pos:line="173" pos:column="25">StartMonitoring</name></name><argument_list pos:line="173" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="174" pos:column="13">CurrentWorkingSet</name><op:operator pos:line="174" pos:column="30">.</op:operator><name pos:line="174" pos:column="31">StartMonitoring</name></name><argument_list pos:line="174" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="177" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="178" pos:column="9">/// Implementation method for &lt;see cref="AbstractMonitoringService.StopMonitoring"/&gt;</comment>
        <comment type="line" pos:line="179" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="180" pos:column="9">protected</specifier> <specifier pos:line="180" pos:column="19">override</specifier> <name pos:line="180" pos:column="28">void</name></type> <name pos:line="180" pos:column="33">StopMonitoringImpl</name><parameter_list pos:line="180" pos:column="51">()</parameter_list> <block pos:line="180" pos:column="54">{
            <if pos:line="181" pos:column="13">if<condition pos:line="181" pos:column="15">(<expr><name pos:line="181" pos:column="16">null</name> <op:operator pos:line="181" pos:column="21">!=</op:operator> <name pos:line="181" pos:column="24">CurrentWorkingSet</name></expr>)</condition><then pos:line="181" pos:column="42"> <block pos:line="181" pos:column="43">{
                <expr_stmt><expr><name><name pos:line="182" pos:column="17">_srcMonitor</name><op:operator pos:line="182" pos:column="28">.</op:operator><name pos:line="182" pos:column="29">FileChanged</name></name> <op:operator pos:line="182" pos:column="41">-=</op:operator> <name pos:line="182" pos:column="44">_srcMonitor_FileChanged</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="183" pos:column="17">CurrentWorkingSet</name><op:operator pos:line="183" pos:column="34">.</op:operator><name pos:line="183" pos:column="35">StopMonitoring</name></name><argument_list pos:line="183" pos:column="49">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="184" pos:column="17">_srcMonitor</name><op:operator pos:line="184" pos:column="28">.</op:operator><name pos:line="184" pos:column="29">StopMonitoring</name></name><argument_list pos:line="184" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="185" pos:column="17">CurrentWorkingSet</name><op:operator pos:line="185" pos:column="34">.</op:operator><name pos:line="185" pos:column="35">Dispose</name></name><argument_list pos:line="185" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="186" pos:column="17">_srcMonitor</name><op:operator pos:line="186" pos:column="28">.</op:operator><name pos:line="186" pos:column="29">Dispose</name></name><argument_list pos:line="186" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="187" pos:column="17">CurrentWorkingSet</name> <op:operator pos:line="187" pos:column="35">=</op:operator> <name pos:line="187" pos:column="37">null</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="188" pos:column="17">CurrentDataArchive</name> <op:operator pos:line="188" pos:column="36">=</op:operator> <name pos:line="188" pos:column="38">null</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="189" pos:column="17">_srcMonitor</name> <op:operator pos:line="189" pos:column="29">=</op:operator> <name pos:line="189" pos:column="31">null</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="193" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="194" pos:column="9">/// Raises the &lt;see cref="FileProcessed"/&gt; event</comment>
        <comment type="line" pos:line="195" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="196" pos:column="9">/// &lt;param name="e"&gt;&lt;/param&gt;</comment>
        <function><type><specifier pos:line="197" pos:column="9">protected</specifier> <specifier pos:line="197" pos:column="19">virtual</specifier> <name pos:line="197" pos:column="27">void</name></type> <name pos:line="197" pos:column="32">OnFileProcessed</name><parameter_list pos:line="197" pos:column="47">(<param><decl><type><name pos:line="197" pos:column="48">FileEventRaisedArgs</name></type> <name pos:line="197" pos:column="68">e</name></decl></param>)</parameter_list> <block pos:line="197" pos:column="71">{
            <decl_stmt><decl><type><name><name pos:line="198" pos:column="13">EventHandler</name><argument_list pos:line="198" pos:column="25">&lt;<argument><name pos:line="198" pos:column="26">FileEventRaisedArgs</name></argument>&gt;</argument_list></name></type> <name pos:line="198" pos:column="47">handler</name> <init pos:line="198" pos:column="55">= <expr><name pos:line="198" pos:column="57">FileProcessed</name></expr></init></decl>;</decl_stmt>
            <if pos:line="199" pos:column="13">if<condition pos:line="199" pos:column="15">(<expr><name pos:line="199" pos:column="16">null</name> <op:operator pos:line="199" pos:column="21">!=</op:operator> <name pos:line="199" pos:column="24">handler</name></expr>)</condition><then pos:line="199" pos:column="32"> <block pos:line="199" pos:column="33">{
                <expr_stmt><expr><call><name pos:line="200" pos:column="17">handler</name><argument_list pos:line="200" pos:column="24">(<argument><expr><name pos:line="200" pos:column="25">this</name></expr></argument>, <argument><expr><name pos:line="200" pos:column="31">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="204" pos:column="9">private</specifier> <name pos:line="204" pos:column="17">void</name></type> <name pos:line="204" pos:column="22">Subscribe</name><parameter_list pos:line="204" pos:column="31">()</parameter_list> <block pos:line="204" pos:column="34">{
            <if pos:line="205" pos:column="13">if<condition pos:line="205" pos:column="15">(<expr><name pos:line="205" pos:column="16">null</name> <op:operator pos:line="205" pos:column="21">!=</op:operator> <name pos:line="205" pos:column="24">_srcMLService</name></expr>)</condition><then pos:line="205" pos:column="38"> <block pos:line="205" pos:column="39">{
                <expr_stmt><expr><name><name pos:line="206" pos:column="17">_srcMLService</name><op:operator pos:line="206" pos:column="30">.</op:operator><name pos:line="206" pos:column="31">MonitoringStarted</name></name> <op:operator pos:line="206" pos:column="49">+=</op:operator> <name pos:line="206" pos:column="52">_srcMLService_MonitoringStarted</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="207" pos:column="17">_srcMLService</name><op:operator pos:line="207" pos:column="30">.</op:operator><name pos:line="207" pos:column="31">MonitoringStopped</name></name> <op:operator pos:line="207" pos:column="49">+=</op:operator> <name pos:line="207" pos:column="52">_srcMLService_MonitoringStopped</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><name pos:line="211" pos:column="9">void</name></type> <name pos:line="211" pos:column="14">_srcMonitor_FileChanged</name><parameter_list pos:line="211" pos:column="37">(<param><decl><type><name pos:line="211" pos:column="38">object</name></type> <name pos:line="211" pos:column="45">sender</name></decl></param>, <param><decl><type><name pos:line="211" pos:column="53">FileEventRaisedArgs</name></type> <name pos:line="211" pos:column="73">e</name></decl></param>)</parameter_list> <block pos:line="211" pos:column="76">{
            <expr_stmt><expr><call><name pos:line="212" pos:column="13">OnFileProcessed</name><argument_list pos:line="212" pos:column="28">(<argument><expr><name pos:line="212" pos:column="29">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="215" pos:column="9">private</specifier> <name pos:line="215" pos:column="17">void</name></type> <name pos:line="215" pos:column="22">_srcMLService_MonitoringStopped</name><parameter_list pos:line="215" pos:column="53">(<param><decl><type><name pos:line="215" pos:column="54">object</name></type> <name pos:line="215" pos:column="61">sender</name></decl></param>, <param><decl><type><name pos:line="215" pos:column="69">EventArgs</name></type> <name pos:line="215" pos:column="79">e</name></decl></param>)</parameter_list> <block pos:line="215" pos:column="82">{
            <expr_stmt><expr><call><name pos:line="216" pos:column="13">StopMonitoring</name><argument_list pos:line="216" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="219" pos:column="9">private</specifier> <name pos:line="219" pos:column="17">void</name></type> <name pos:line="219" pos:column="22">_srcMLService_MonitoringStarted</name><parameter_list pos:line="219" pos:column="53">(<param><decl><type><name pos:line="219" pos:column="54">object</name></type> <name pos:line="219" pos:column="61">sender</name></decl></param>, <param><decl><type><name pos:line="219" pos:column="69">EventArgs</name></type> <name pos:line="219" pos:column="79">e</name></decl></param>)</parameter_list> <block pos:line="219" pos:column="82">{
            <expr_stmt><expr><call><name pos:line="220" pos:column="13">StartMonitoring</name><argument_list pos:line="220" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
