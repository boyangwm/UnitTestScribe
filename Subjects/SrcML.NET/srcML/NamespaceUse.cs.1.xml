<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data\NamespaceUse.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2014 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *    Patrick Francis (ABB Group) - API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="13" pos:column="1">using <name pos:line="13" pos:column="7">System</name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Linq</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Collections</name><op:operator pos:line="15" pos:column="25">.</op:operator><name pos:line="15" pos:column="26">Generic</name></name>;</using>

<namespace pos:line="17" pos:column="1">namespace <name><name pos:line="17" pos:column="11">ABB</name><op:operator pos:line="17" pos:column="14">.</op:operator><name pos:line="17" pos:column="15">SrcML</name><op:operator pos:line="17" pos:column="20">.</op:operator><name pos:line="17" pos:column="21">Data</name></name> <block pos:line="17" pos:column="26">{

    <comment type="line" pos:line="19" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="20" pos:column="5">/// Represents the use of a namespace. This is primarily used in &lt;see cref="AliasStatement"/&gt; and &lt;see cref="ImportStatement"/&gt; objects.</comment>
    <comment type="line" pos:line="21" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="22" pos:column="5">public</specifier> class <name pos:line="22" pos:column="18">NamespaceUse</name> <super pos:line="22" pos:column="31">: <name pos:line="22" pos:column="33">NameUse</name></super> <block pos:line="22" pos:column="41">{
        <comment type="line" pos:line="23" pos:column="9">/// &lt;summary&gt; The XML name for NamespaceUse &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="24" pos:column="9">public</specifier> <specifier pos:line="24" pos:column="16">new</specifier> <specifier pos:line="24" pos:column="20">const</specifier> <name pos:line="24" pos:column="26">string</name></type> <name pos:line="24" pos:column="33">XmlName</name> <init pos:line="24" pos:column="41">= <expr><lit:literal type="string" pos:line="24" pos:column="43">"nsu"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="26" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="27" pos:column="9">/// Instance method for getting &lt;see cref="NamespaceUse.XmlName"/&gt;</comment>
        <comment type="line" pos:line="28" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="29" pos:column="9">/// &lt;returns&gt;Returns the XML name for NamespaceUse&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="30" pos:column="9">public</specifier> <specifier pos:line="30" pos:column="16">override</specifier> <name pos:line="30" pos:column="25">string</name></type> <name pos:line="30" pos:column="32">GetXmlName</name><parameter_list pos:line="30" pos:column="42">()</parameter_list> <block pos:line="30" pos:column="45">{ <return pos:line="30" pos:column="47">return <expr><name><name pos:line="30" pos:column="54">NamespaceUse</name><op:operator pos:line="30" pos:column="66">.</op:operator><name pos:line="30" pos:column="67">XmlName</name></name></expr>;</return> }</block></function>

        <comment type="line" pos:line="32" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="33" pos:column="9">/// Determines the possible types for this expression. </comment>
        <comment type="line" pos:line="34" pos:column="9">/// Since this is a NamespaceUse, there are never any matching types.</comment>
        <comment type="line" pos:line="35" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="36" pos:column="9">public</specifier> <specifier pos:line="36" pos:column="16">override</specifier> <name><name pos:line="36" pos:column="25">IEnumerable</name><argument_list pos:line="36" pos:column="36">&lt;<argument><name pos:line="36" pos:column="37">TypeDefinition</name></argument>&gt;</argument_list></name></type> <name pos:line="36" pos:column="53">ResolveType</name><parameter_list pos:line="36" pos:column="64">()</parameter_list> <block pos:line="36" pos:column="67">{
            <return pos:line="37" pos:column="13">return <expr><call><name><name pos:line="37" pos:column="20">Enumerable</name><op:operator pos:line="37" pos:column="30">.</op:operator><name><name pos:line="37" pos:column="31">Empty</name><argument_list pos:line="37" pos:column="36">&lt;<argument><name pos:line="37" pos:column="37">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="37" pos:column="52">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="40" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="41" pos:column="9">/// Finds Namespaces that match this usage.</comment>
        <comment type="line" pos:line="42" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="43" pos:column="9">public</specifier> <specifier pos:line="43" pos:column="16">override</specifier> <name><name pos:line="43" pos:column="25">IEnumerable</name><argument_list pos:line="43" pos:column="36">&lt;<argument><name pos:line="43" pos:column="37">INamedEntity</name></argument>&gt;</argument_list></name></type> <name pos:line="43" pos:column="51">FindMatches</name><parameter_list pos:line="43" pos:column="62">()</parameter_list> <block pos:line="43" pos:column="65">{
            <if pos:line="44" pos:column="13">if<condition pos:line="44" pos:column="15">(<expr><name><name pos:line="44" pos:column="16">this</name><op:operator pos:line="44" pos:column="20">.</op:operator><name pos:line="44" pos:column="21">ParentStatement</name></name> <op:operator pos:line="44" pos:column="37">==</op:operator> <name pos:line="44" pos:column="40">null</name></expr>)</condition><then pos:line="44" pos:column="45"> <block pos:line="44" pos:column="46">{
                <throw pos:line="45" pos:column="17">throw <expr><op:operator pos:line="45" pos:column="23">new</op:operator> <call><name pos:line="45" pos:column="27">InvalidOperationException</name><argument_list pos:line="45" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="45" pos:column="53">"ParentStatement is null"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <comment type="line" pos:line="48" pos:column="13">//TODO: determine if we need to consider aliases in this method</comment>

            <comment type="line" pos:line="50" pos:column="13">//If there's a calling expression, match and search under results</comment>
            <decl_stmt><decl><type><name pos:line="51" pos:column="13">var</name></type> <name pos:line="51" pos:column="17">callingScopes</name> <init pos:line="51" pos:column="31">= <expr><call><name pos:line="51" pos:column="33">GetCallingScope</name><argument_list pos:line="51" pos:column="48">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="52" pos:column="13">if<condition pos:line="52" pos:column="15">(<expr><name pos:line="52" pos:column="16">callingScopes</name> <op:operator pos:line="52" pos:column="30">!=</op:operator> <name pos:line="52" pos:column="33">null</name></expr>)</condition><then pos:line="52" pos:column="38"> <block pos:line="52" pos:column="39">{
                <return pos:line="53" pos:column="17">return <expr><call><name><name pos:line="53" pos:column="24">callingScopes</name><op:operator pos:line="53" pos:column="37">.</op:operator><name pos:line="53" pos:column="38">SelectMany</name></name><argument_list pos:line="53" pos:column="48">(<argument><expr><lambda><name pos:line="53" pos:column="49">s</name> <op:operator pos:line="53" pos:column="51">=&gt;</op:operator> <call><name><name pos:line="53" pos:column="54">s</name><op:operator pos:line="53" pos:column="55">.</op:operator><name><name pos:line="53" pos:column="56">GetNamedChildren</name><argument_list pos:line="53" pos:column="72">&lt;<argument><name pos:line="53" pos:column="73">NamespaceDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="53" pos:column="93">(<argument><expr><name><name pos:line="53" pos:column="94">this</name><op:operator pos:line="53" pos:column="98">.</op:operator><name pos:line="53" pos:column="99">Name</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>

            <comment type="line" pos:line="56" pos:column="13">//search for namespace starting from the global root</comment>
            <decl_stmt><decl><type><name pos:line="57" pos:column="13">var</name></type> <name pos:line="57" pos:column="17">globalNS</name> <init pos:line="57" pos:column="26">= <expr><call><name><name pos:line="57" pos:column="28">this</name><op:operator pos:line="57" pos:column="32">.</op:operator><name pos:line="57" pos:column="33">ParentStatement</name><op:operator pos:line="57" pos:column="48">.</op:operator><name><name pos:line="57" pos:column="49">GetAncestorsAndSelf</name><argument_list pos:line="57" pos:column="68">&lt;<argument><name pos:line="57" pos:column="69">NamespaceDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="57" pos:column="89">()</argument_list></call><op:operator pos:line="57" pos:column="91">.</op:operator><call><name pos:line="57" pos:column="92">FirstOrDefault</name><argument_list pos:line="57" pos:column="106">(<argument><expr><lambda><name pos:line="57" pos:column="107">nd</name> <op:operator pos:line="57" pos:column="110">=&gt;</op:operator> <name><name pos:line="57" pos:column="113">nd</name><op:operator pos:line="57" pos:column="115">.</op:operator><name pos:line="57" pos:column="116">IsGlobal</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="58" pos:column="13">if<condition pos:line="58" pos:column="15">(<expr><name pos:line="58" pos:column="16">globalNS</name> <op:operator pos:line="58" pos:column="25">==</op:operator> <name pos:line="58" pos:column="28">null</name></expr>)</condition><then pos:line="58" pos:column="33"> <block pos:line="58" pos:column="34">{
                <throw pos:line="59" pos:column="17">throw <expr><op:operator pos:line="59" pos:column="23">new</op:operator> <call><name pos:line="59" pos:column="27">StatementDetachedException</name><argument_list pos:line="59" pos:column="53">(<argument><expr><name><name pos:line="59" pos:column="54">this</name><op:operator pos:line="59" pos:column="58">.</op:operator><name pos:line="59" pos:column="59">ParentStatement</name></name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <return pos:line="61" pos:column="13">return <expr><call><name><name pos:line="61" pos:column="20">globalNS</name><op:operator pos:line="61" pos:column="28">.</op:operator><name><name pos:line="61" pos:column="29">GetNamedChildren</name><argument_list pos:line="61" pos:column="45">&lt;<argument><name pos:line="61" pos:column="46">NamespaceDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="61" pos:column="66">(<argument><expr><name><name pos:line="61" pos:column="67">this</name><op:operator pos:line="61" pos:column="71">.</op:operator><name pos:line="61" pos:column="72">Name</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
