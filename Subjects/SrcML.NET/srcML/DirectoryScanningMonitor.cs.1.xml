<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML\DirectoryScanningMonitor.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2013 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - Initial implementation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">ABB</name><op:operator pos:line="12" pos:column="10">.</op:operator><name pos:line="12" pos:column="11">SrcML</name><op:operator pos:line="12" pos:column="16">.</op:operator><name pos:line="12" pos:column="17">Utilities</name></name>;</using>
<using pos:line="13" pos:column="1">using <name pos:line="13" pos:column="7">System</name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Collections</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Collections</name><op:operator pos:line="15" pos:column="25">.</op:operator><name pos:line="15" pos:column="26">Generic</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Collections</name><op:operator pos:line="16" pos:column="25">.</op:operator><name pos:line="16" pos:column="26">ObjectModel</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">IO</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Linq</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">System</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">Text</name></name>;</using>
<using pos:line="20" pos:column="1">using <name><name pos:line="20" pos:column="7">System</name><op:operator pos:line="20" pos:column="13">.</op:operator><name pos:line="20" pos:column="14">Text</name><op:operator pos:line="20" pos:column="18">.</op:operator><name pos:line="20" pos:column="19">RegularExpressions</name></name>;</using>
<using pos:line="21" pos:column="1">using <name><name pos:line="21" pos:column="7">System</name><op:operator pos:line="21" pos:column="13">.</op:operator><name pos:line="21" pos:column="14">Threading</name></name>;</using>
<using pos:line="22" pos:column="1">using <name><name pos:line="22" pos:column="7">System</name><op:operator pos:line="22" pos:column="13">.</op:operator><name pos:line="22" pos:column="14">Threading</name><op:operator pos:line="22" pos:column="23">.</op:operator><name pos:line="22" pos:column="24">Tasks</name></name>;</using>

<namespace pos:line="24" pos:column="1">namespace <name><name pos:line="24" pos:column="11">ABB</name><op:operator pos:line="24" pos:column="14">.</op:operator><name pos:line="24" pos:column="15">SrcML</name></name> <block pos:line="24" pos:column="21">{

    <comment type="line" pos:line="26" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="27" pos:column="5">/// The directory scanning monitor scans a collection of directories every</comment>
    <comment type="line" pos:line="28" pos:column="5">/// &lt;see cref="ScanInterval" /&gt; seconds for source changes and updates the appropriate</comment>
    <comment type="line" pos:line="29" pos:column="5">/// &lt;see cref="AbstractArchive"&gt;archives&lt;/see&gt;. &lt;para&gt;The directory scanning monitor lets you</comment>
    <comment type="line" pos:line="30" pos:column="5">/// periodically scan a set of folders and &lt;/para&gt;</comment>
    <comment type="line" pos:line="31" pos:column="5">/// &lt;/summary&gt;</comment>
    <comment type="line" pos:line="32" pos:column="5">/// &lt;remarks&gt;</comment>
    <comment type="line" pos:line="33" pos:column="5">/// The directory scanning monitor uses a &lt;see cref="System.Timers.Timer"/&gt; to periodically scan</comment>
    <comment type="line" pos:line="34" pos:column="5">/// each directory in &lt;see cref="MonitoredDirectories"/&gt;. It first examines all of the archived</comment>
    <comment type="line" pos:line="35" pos:column="5">/// files to identify files that have been deleted. Next, it checks the files</comment>
    <comment type="line" pos:line="36" pos:column="5">/// &lt;/remarks&gt;</comment>
    <class><specifier pos:line="37" pos:column="5">public</specifier> class <name pos:line="37" pos:column="18">DirectoryScanningMonitor</name> <super pos:line="37" pos:column="43">: <name pos:line="37" pos:column="45">AbstractFileMonitor</name></super> <block pos:line="37" pos:column="65">{
        <decl_stmt><decl><type><specifier pos:line="38" pos:column="9">public</specifier> <specifier pos:line="38" pos:column="16">const</specifier> <name pos:line="38" pos:column="22">int</name></type> <name pos:line="38" pos:column="26">DEFAULT_SCAN_INTERVAL</name> <init pos:line="38" pos:column="48">= <expr><lit:literal type="number" pos:line="38" pos:column="50">60</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="39" pos:column="9">public</specifier> <specifier pos:line="39" pos:column="16">const</specifier> <name pos:line="39" pos:column="22">string</name></type> <name pos:line="39" pos:column="29">MONITOR_LIST_FILENAME</name> <init pos:line="39" pos:column="51">= <expr><lit:literal type="string" pos:line="39" pos:column="53">"monitored_directories.txt"</lit:literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="41" pos:column="9">private</specifier> <specifier pos:line="41" pos:column="17">static</specifier> <name><name pos:line="41" pos:column="24">HashSet</name><argument_list pos:line="41" pos:column="31">&lt;<argument><name pos:line="41" pos:column="32">string</name></argument>&gt;</argument_list></name></type> <name pos:line="41" pos:column="40">Exclusions</name> <init pos:line="41" pos:column="51">= <expr><op:operator pos:line="41" pos:column="53">new</op:operator> <call><name><name pos:line="41" pos:column="57">HashSet</name><argument_list pos:line="41" pos:column="64">&lt;<argument><name pos:line="41" pos:column="65">string</name></argument>&gt;</argument_list></name><argument_list pos:line="41" pos:column="72">(<argument><expr><op:operator pos:line="41" pos:column="73">new</op:operator> <call><name><name pos:line="41" pos:column="77">List</name><argument_list pos:line="41" pos:column="81">&lt;<argument><name pos:line="41" pos:column="82">string</name></argument>&gt;</argument_list></name><argument_list pos:line="41" pos:column="89">()</argument_list></call> <block pos:line="41" pos:column="92">{
            <expr><lit:literal type="string" pos:line="42" pos:column="13">"bin"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="42" pos:column="20">"obj"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="42" pos:column="27">"TestResults"</lit:literal></expr>
        }</block></expr></argument>, <argument><expr><name><name pos:line="43" pos:column="12">StringComparer</name><op:operator pos:line="43" pos:column="26">.</op:operator><name pos:line="43" pos:column="27">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="45" pos:column="9">private</specifier> <specifier pos:line="45" pos:column="17">static</specifier> <name><name pos:line="45" pos:column="24">HashSet</name><argument_list pos:line="45" pos:column="31">&lt;<argument><name pos:line="45" pos:column="32">string</name></argument>&gt;</argument_list></name></type> <name pos:line="45" pos:column="40">FileExclusionPrefixes</name> <init pos:line="45" pos:column="62">= <expr><op:operator pos:line="45" pos:column="64">new</op:operator> <call><name><name pos:line="45" pos:column="68">HashSet</name><argument_list pos:line="45" pos:column="75">&lt;<argument><name pos:line="45" pos:column="76">string</name></argument>&gt;</argument_list></name><argument_list pos:line="45" pos:column="83">(<argument><expr><op:operator pos:line="45" pos:column="84">new</op:operator> <call><name><name pos:line="45" pos:column="88">List</name><argument_list pos:line="45" pos:column="92">&lt;<argument><name pos:line="45" pos:column="93">string</name></argument>&gt;</argument_list></name><argument_list pos:line="45" pos:column="100">()</argument_list></call> <block pos:line="45" pos:column="103">{
            <expr><lit:literal type="string" pos:line="46" pos:column="13">"#"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="46" pos:column="18">"~"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="46" pos:column="23">"."</lit:literal></expr>
        }</block></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="12">StringComparer</name><op:operator pos:line="47" pos:column="26">.</op:operator><name pos:line="47" pos:column="27">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="49" pos:column="9">private</specifier> <specifier pos:line="49" pos:column="17">static</specifier> <name><name pos:line="49" pos:column="24">HashSet</name><argument_list pos:line="49" pos:column="31">&lt;<argument><name pos:line="49" pos:column="32">string</name></argument>&gt;</argument_list></name></type> <name pos:line="49" pos:column="40">ForbiddenDirectories</name> <init pos:line="49" pos:column="61">= <expr><call><name pos:line="49" pos:column="63">GetForbiddenDirectories</name><argument_list pos:line="49" pos:column="86">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="50" pos:column="9">private</specifier> <specifier pos:line="50" pos:column="17">static</specifier> <name pos:line="50" pos:column="24">Regex</name></type> <name pos:line="50" pos:column="30">BackupDirectoryRegex</name> <init pos:line="50" pos:column="51">= <expr><op:operator pos:line="50" pos:column="53">new</op:operator> <call><name pos:line="50" pos:column="57">Regex</name><argument_list pos:line="50" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="50" pos:column="63">@"^backup\d*$"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="50" pos:column="79">RegexOptions</name><op:operator pos:line="50" pos:column="91">.</op:operator><name pos:line="50" pos:column="92">IgnoreCase</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="52" pos:column="9">private</specifier> <name><name pos:line="52" pos:column="17">List</name><argument_list pos:line="52" pos:column="21">&lt;<argument><name pos:line="52" pos:column="22">string</name></argument>&gt;</argument_list></name></type> <name pos:line="52" pos:column="30">folders</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="53" pos:column="9">private</specifier> <name pos:line="53" pos:column="17">ReentrantTimer</name></type> <name pos:line="53" pos:column="32">ScanTimer</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="54" pos:column="9">private</specifier> <name pos:line="54" pos:column="17">int</name></type> <name pos:line="54" pos:column="21">syncPoint</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="56" pos:column="9">public</specifier> <specifier pos:line="56" pos:column="16">event</specifier> <name><name pos:line="56" pos:column="22">EventHandler</name><argument_list pos:line="56" pos:column="34">&lt;<argument><name pos:line="56" pos:column="35">DirectoryScanningMonitorEventArgs</name></argument>&gt;</argument_list></name></type> <name pos:line="56" pos:column="70">DirectoryAdded</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="57" pos:column="9">public</specifier> <specifier pos:line="57" pos:column="16">event</specifier> <name><name pos:line="57" pos:column="22">EventHandler</name><argument_list pos:line="57" pos:column="34">&lt;<argument><name pos:line="57" pos:column="35">DirectoryScanningMonitorEventArgs</name></argument>&gt;</argument_list></name></type> <name pos:line="57" pos:column="70">DirectoryRemoved</name></decl>;</decl_stmt>

        <comment type="line" pos:line="59" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="60" pos:column="9">/// Creates a new directory scanning monitor</comment>
        <comment type="line" pos:line="61" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="62" pos:column="9">/// &lt;param name="baseDirectory"&gt;The base directory to use for the archives of this monitor&lt;/param&gt;</comment>
        <comment type="line" pos:line="63" pos:column="9">/// &lt;param name="scanInterval"&gt;The &lt;see cref="ScanInterval"/&gt; in seconds&lt;/param&gt;</comment>
        <constructor><specifier pos:line="64" pos:column="9">public</specifier> <name pos:line="64" pos:column="16">DirectoryScanningMonitor</name><parameter_list pos:line="64" pos:column="40">(<param><decl><type><name pos:line="64" pos:column="41">string</name></type> <name pos:line="64" pos:column="48">baseDirectory</name></decl></param>, <param><decl><type><name pos:line="64" pos:column="63">double</name></type> <name pos:line="64" pos:column="70">scanInterval</name></decl></param>)</parameter_list> <member_list pos:line="64" pos:column="84">: <call><name pos:line="64" pos:column="86">this</name><argument_list pos:line="64" pos:column="90">(<argument><expr><name pos:line="64" pos:column="91">MONITOR_LIST_FILENAME</name></expr></argument>, <argument><expr><name pos:line="64" pos:column="114">scanInterval</name></expr></argument>, <argument><expr><name><name pos:line="64" pos:column="128">TaskScheduler</name><op:operator pos:line="64" pos:column="141">.</op:operator><name pos:line="64" pos:column="142">Default</name></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="151">baseDirectory</name></expr></argument>, <argument><expr><name pos:line="64" pos:column="166">null</name></expr></argument>)</argument_list></call> </member_list><block pos:line="64" pos:column="172">{ }</block></constructor>

        <comment type="line" pos:line="66" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="67" pos:column="9">/// Create a new directory scanning monitor</comment>
        <comment type="line" pos:line="68" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="69" pos:column="9">/// &lt;param name="monitorFileName"&gt;The file name to save the list of monitored directories</comment>
        <comment type="line" pos:line="70" pos:column="9">/// to&lt;/param&gt;</comment>
        <comment type="line" pos:line="71" pos:column="9">/// &lt;param name="scanInterval"&gt;The &lt;see cref="ScanInterval"/&gt; in seconds&lt;/param&gt;</comment>
        <comment type="line" pos:line="72" pos:column="9">/// &lt;param name="baseDirectory"&gt;The base directory to use for the archives of this</comment>
        <comment type="line" pos:line="73" pos:column="9">/// monitor&lt;/param&gt;</comment>
        <comment type="line" pos:line="74" pos:column="9">/// &lt;param name="defaultArchive"&gt;The default archive to use&lt;/param&gt;</comment>
        <comment type="line" pos:line="75" pos:column="9">/// &lt;param name="otherArchives"&gt;Other archives for specific extensions&lt;/param&gt;</comment>
        <constructor><specifier pos:line="76" pos:column="9">public</specifier> <name pos:line="76" pos:column="16">DirectoryScanningMonitor</name><parameter_list pos:line="76" pos:column="40">(<param><decl><type><name pos:line="76" pos:column="41">string</name></type> <name pos:line="76" pos:column="48">monitorFileName</name></decl></param>, <param><decl><type><name pos:line="76" pos:column="65">double</name></type> <name pos:line="76" pos:column="72">scanInterval</name></decl></param>, <param><decl><type><name pos:line="76" pos:column="86">string</name></type> <name pos:line="76" pos:column="93">baseDirectory</name></decl></param>, <param><decl><type><name pos:line="76" pos:column="108">AbstractArchive</name></type> <name pos:line="76" pos:column="124">defaultArchive</name></decl></param>, <param><decl><type><specifier pos:line="76" pos:column="140">params</specifier> <name><name pos:line="76" pos:column="147">AbstractArchive</name><index pos:line="76" pos:column="162">[]</index></name></type> <name pos:line="76" pos:column="165">otherArchives</name></decl></param>)</parameter_list>
            <member_list pos:line="77" pos:column="13">: <call><name pos:line="77" pos:column="15">base</name><argument_list pos:line="77" pos:column="19">(<argument><expr><name pos:line="77" pos:column="20">baseDirectory</name></expr></argument>, <argument><expr><name pos:line="77" pos:column="35">defaultArchive</name></expr></argument>, <argument><expr><name pos:line="77" pos:column="51">otherArchives</name></expr></argument>)</argument_list></call> </member_list><block pos:line="77" pos:column="66">{
            <expr_stmt><expr><name pos:line="78" pos:column="13">MonitoredDirectoriesFilePath</name> <op:operator pos:line="78" pos:column="42">=</op:operator> <call><name><name pos:line="78" pos:column="44">Path</name><op:operator pos:line="78" pos:column="48">.</op:operator><name pos:line="78" pos:column="49">Combine</name></name><argument_list pos:line="78" pos:column="56">(<argument><expr><name pos:line="78" pos:column="57">baseDirectory</name></expr></argument>, <argument><expr><name pos:line="78" pos:column="72">monitorFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="79" pos:column="13">folders</name> <op:operator pos:line="79" pos:column="21">=</op:operator> <op:operator pos:line="79" pos:column="23">new</op:operator> <call><name><name pos:line="79" pos:column="27">List</name><argument_list pos:line="79" pos:column="31">&lt;<argument><name pos:line="79" pos:column="32">string</name></argument>&gt;</argument_list></name><argument_list pos:line="79" pos:column="39">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="81" pos:column="13">ScanTimer</name> <op:operator pos:line="81" pos:column="23">=</op:operator> <op:operator pos:line="81" pos:column="25">new</op:operator> <call><name pos:line="81" pos:column="29">ReentrantTimer</name><argument_list pos:line="81" pos:column="43">(<argument><expr><lambda><parameter_list pos:line="81" pos:column="44">()</parameter_list> <op:operator pos:line="81" pos:column="47">=&gt;</op:operator> <call><name pos:line="81" pos:column="50">UpdateArchives</name><argument_list pos:line="81" pos:column="64">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="82" pos:column="13">ScanTimer</name><op:operator pos:line="82" pos:column="22">.</op:operator><name pos:line="82" pos:column="23">AutoReset</name></name> <op:operator pos:line="82" pos:column="33">=</op:operator> <lit:literal type="boolean" pos:line="82" pos:column="35">true</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="83" pos:column="13">ScanInterval</name> <op:operator pos:line="83" pos:column="26">=</op:operator> <name pos:line="83" pos:column="28">scanInterval</name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="86" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="87" pos:column="9">/// Create a new directory scanning monitor</comment>
        <comment type="line" pos:line="88" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="89" pos:column="9">/// &lt;param name="monitorFileName"&gt;The file name to save the list of monitored directories</comment>
        <comment type="line" pos:line="90" pos:column="9">/// to&lt;/param&gt;</comment>
        <comment type="line" pos:line="91" pos:column="9">/// &lt;param name="scanInterval"&gt;The &lt;see cref="ScanInterval"/&gt; in seconds&lt;/param&gt;</comment>
        <comment type="line" pos:line="92" pos:column="9">/// &lt;param name="baseDirectory"&gt;The base directory to use for the archives of this</comment>
        <comment type="line" pos:line="93" pos:column="9">/// monitor&lt;/param&gt;</comment>
        <comment type="line" pos:line="94" pos:column="9">/// &lt;param name="defaultArchive"&gt;The default archive to use&lt;/param&gt;</comment>
        <comment type="line" pos:line="95" pos:column="9">/// &lt;param name="otherArchives"&gt;Other archives for specific extensions&lt;/param&gt;</comment>
        <constructor><specifier pos:line="96" pos:column="9">public</specifier> <name pos:line="96" pos:column="16">DirectoryScanningMonitor</name><parameter_list pos:line="96" pos:column="40">(<param><decl><type><name pos:line="96" pos:column="41">string</name></type> <name pos:line="96" pos:column="48">monitorFileName</name></decl></param>, <param><decl><type><name pos:line="96" pos:column="65">double</name></type> <name pos:line="96" pos:column="72">scanInterval</name></decl></param>, <param><decl><type><name pos:line="96" pos:column="86">TaskScheduler</name></type> <name pos:line="96" pos:column="100">scheduler</name></decl></param>, <param><decl><type><name pos:line="96" pos:column="111">string</name></type> <name pos:line="96" pos:column="118">baseDirectory</name></decl></param>, <param><decl><type><name pos:line="96" pos:column="133">AbstractArchive</name></type> <name pos:line="96" pos:column="149">defaultArchive</name></decl></param>, <param><decl><type><specifier pos:line="96" pos:column="165">params</specifier> <name><name pos:line="96" pos:column="172">AbstractArchive</name><index pos:line="96" pos:column="187">[]</index></name></type> <name pos:line="96" pos:column="190">otherArchives</name></decl></param>)</parameter_list>
            <member_list pos:line="97" pos:column="13">: <call><name pos:line="97" pos:column="15">base</name><argument_list pos:line="97" pos:column="19">(<argument><expr><name pos:line="97" pos:column="20">scheduler</name></expr></argument>, <argument><expr><name pos:line="97" pos:column="31">baseDirectory</name></expr></argument>, <argument><expr><name pos:line="97" pos:column="46">defaultArchive</name></expr></argument>, <argument><expr><name pos:line="97" pos:column="62">otherArchives</name></expr></argument>)</argument_list></call> </member_list><block pos:line="97" pos:column="77">{
            <expr_stmt><expr><name pos:line="98" pos:column="13">MonitoredDirectoriesFilePath</name> <op:operator pos:line="98" pos:column="42">=</op:operator> <call><name><name pos:line="98" pos:column="44">Path</name><op:operator pos:line="98" pos:column="48">.</op:operator><name pos:line="98" pos:column="49">Combine</name></name><argument_list pos:line="98" pos:column="56">(<argument><expr><name pos:line="98" pos:column="57">baseDirectory</name></expr></argument>, <argument><expr><name pos:line="98" pos:column="72">monitorFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="99" pos:column="13">folders</name> <op:operator pos:line="99" pos:column="21">=</op:operator> <op:operator pos:line="99" pos:column="23">new</op:operator> <call><name><name pos:line="99" pos:column="27">List</name><argument_list pos:line="99" pos:column="31">&lt;<argument><name pos:line="99" pos:column="32">string</name></argument>&gt;</argument_list></name><argument_list pos:line="99" pos:column="39">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="101" pos:column="13">ScanTimer</name> <op:operator pos:line="101" pos:column="23">=</op:operator> <op:operator pos:line="101" pos:column="25">new</op:operator> <call><name pos:line="101" pos:column="29">ReentrantTimer</name><argument_list pos:line="101" pos:column="43">(<argument><expr><lambda><parameter_list pos:line="101" pos:column="44">()</parameter_list> <op:operator pos:line="101" pos:column="47">=&gt;</op:operator> <call><name pos:line="101" pos:column="50">UpdateArchivesAsync</name><argument_list pos:line="101" pos:column="69">()</argument_list></call></lambda></expr></argument>, <argument><expr><name pos:line="101" pos:column="73">scheduler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="102" pos:column="13">ScanTimer</name><op:operator pos:line="102" pos:column="22">.</op:operator><name pos:line="102" pos:column="23">AutoReset</name></name> <op:operator pos:line="102" pos:column="33">=</op:operator> <lit:literal type="boolean" pos:line="102" pos:column="35">true</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="103" pos:column="13">ScanInterval</name> <op:operator pos:line="103" pos:column="26">=</op:operator> <name pos:line="103" pos:column="28">scanInterval</name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="106" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="107" pos:column="9">/// Create a new directory scanning monitor</comment>
        <comment type="line" pos:line="108" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="109" pos:column="9">/// &lt;param name="foldersToMonitor"&gt;An initial list of</comment>
        <comment type="line" pos:line="110" pos:column="9">/// &lt;see cref="MonitoredDirectories"&gt;folders to /see&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="111" pos:column="9">/// &lt;param name="scanInterval"&gt;The &lt;see cref="ScanInterval"/&gt; in seconds&lt;/param&gt;</comment>
        <comment type="line" pos:line="112" pos:column="9">/// &lt;param name="baseDirectory"&gt;The base directory to use for the archives of this</comment>
        <comment type="line" pos:line="113" pos:column="9">/// monitor&lt;/param&gt;</comment>
        <comment type="line" pos:line="114" pos:column="9">/// &lt;param name="defaultArchive"&gt;The default archive to use&lt;/param&gt;</comment>
        <comment type="line" pos:line="115" pos:column="9">/// &lt;param name="otherArchives"&gt;Other archives for specific extensions&lt;/param&gt;</comment>
        <constructor><specifier pos:line="116" pos:column="9">public</specifier> <name pos:line="116" pos:column="16">DirectoryScanningMonitor</name><parameter_list pos:line="116" pos:column="40">(<param><decl><type><name pos:line="116" pos:column="41">double</name></type> <name pos:line="116" pos:column="48">scanInterval</name></decl></param>, <param><decl><type><name pos:line="116" pos:column="62">string</name></type> <name pos:line="116" pos:column="69">baseDirectory</name></decl></param>, <param><decl><type><name pos:line="116" pos:column="84">AbstractArchive</name></type> <name pos:line="116" pos:column="100">defaultArchive</name></decl></param>, <param><decl><type><specifier pos:line="116" pos:column="116">params</specifier> <name><name pos:line="116" pos:column="123">AbstractArchive</name><index pos:line="116" pos:column="138">[]</index></name></type> <name pos:line="116" pos:column="141">otherArchives</name></decl></param>)</parameter_list>
            <member_list pos:line="117" pos:column="13">: <call><name pos:line="117" pos:column="15">this</name><argument_list pos:line="117" pos:column="19">(<argument><expr><name pos:line="117" pos:column="20">MONITOR_LIST_FILENAME</name></expr></argument>, <argument><expr><name pos:line="117" pos:column="43">scanInterval</name></expr></argument>, <argument><expr><name pos:line="117" pos:column="57">baseDirectory</name></expr></argument>, <argument><expr><name pos:line="117" pos:column="72">defaultArchive</name></expr></argument>, <argument><expr><name pos:line="117" pos:column="88">otherArchives</name></expr></argument>)</argument_list></call> </member_list><block pos:line="117" pos:column="103">{ }</block></constructor>

        <comment type="line" pos:line="119" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="120" pos:column="9">/// Create a new directory scanning monitor</comment>
        <comment type="line" pos:line="121" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="122" pos:column="9">/// &lt;param name="foldersToMonitor"&gt;An initial list of</comment>
        <comment type="line" pos:line="123" pos:column="9">/// &lt;see cref="MonitoredDirectories"&gt;folders to &lt;/see&gt; monitor&lt;/param&gt;</comment>
        <comment type="line" pos:line="124" pos:column="9">/// &lt;param name="baseDirectory"&gt;The base directory to use for the archives of this</comment>
        <comment type="line" pos:line="125" pos:column="9">/// monitor&lt;/param&gt;</comment>
        <comment type="line" pos:line="126" pos:column="9">/// &lt;param name="defaultArchive"&gt;The default archive to use&lt;/param&gt;</comment>
        <comment type="line" pos:line="127" pos:column="9">/// &lt;param name="otherArchives"&gt;Other archives for specific extensions&lt;/param&gt;</comment>
        <constructor><specifier pos:line="128" pos:column="9">public</specifier> <name pos:line="128" pos:column="16">DirectoryScanningMonitor</name><parameter_list pos:line="128" pos:column="40">(<param><decl><type><name pos:line="128" pos:column="41">string</name></type> <name pos:line="128" pos:column="48">baseDirectory</name></decl></param>, <param><decl><type><name pos:line="128" pos:column="63">AbstractArchive</name></type> <name pos:line="128" pos:column="79">defaultArchive</name></decl></param>, <param><decl><type><specifier pos:line="128" pos:column="95">params</specifier> <name><name pos:line="128" pos:column="102">AbstractArchive</name><index pos:line="128" pos:column="117">[]</index></name></type> <name pos:line="128" pos:column="120">otherArchives</name></decl></param>)</parameter_list>
            <member_list pos:line="129" pos:column="13">: <call><name pos:line="129" pos:column="15">this</name><argument_list pos:line="129" pos:column="19">(<argument><expr><name pos:line="129" pos:column="20">MONITOR_LIST_FILENAME</name></expr></argument>, <argument><expr><name pos:line="129" pos:column="43">DEFAULT_SCAN_INTERVAL</name></expr></argument>, <argument><expr><name pos:line="129" pos:column="66">baseDirectory</name></expr></argument>, <argument><expr><name pos:line="129" pos:column="81">defaultArchive</name></expr></argument>, <argument><expr><name pos:line="129" pos:column="97">otherArchives</name></expr></argument>)</argument_list></call> </member_list><block pos:line="129" pos:column="112">{ }</block></constructor>

        <comment type="line" pos:line="131" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="132" pos:column="9">/// A read only collection of the directories being monitored. &lt;para&gt;Use</comment>
        <comment type="line" pos:line="133" pos:column="9">/// &lt;see cref="AddDirectory(string)"/&gt; to add a directory and</comment>
        <comment type="line" pos:line="134" pos:column="9">/// &lt;see cref="RemoveDirectory(string)"/&gt; to remove one.&lt;/para&gt;</comment>
        <comment type="line" pos:line="135" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="136" pos:column="9">public</specifier> <name><name pos:line="136" pos:column="16">ReadOnlyCollection</name><argument_list pos:line="136" pos:column="34">&lt;<argument><name pos:line="136" pos:column="35">string</name></argument>&gt;</argument_list></name></type> <name pos:line="136" pos:column="43">MonitoredDirectories</name> <block pos:line="136" pos:column="64">{
            <function><name pos:line="137" pos:column="13">get</name> <block pos:line="137" pos:column="17">{
                <decl_stmt><decl><type><name pos:line="138" pos:column="17">var</name></type> <name pos:line="138" pos:column="21">answer</name> <init pos:line="138" pos:column="28">= <expr><op:operator pos:line="138" pos:column="30">new</op:operator> <call><name><name pos:line="138" pos:column="34">List</name><argument_list pos:line="138" pos:column="38">&lt;<argument><name pos:line="138" pos:column="39">string</name></argument>&gt;</argument_list></name><argument_list pos:line="138" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="139" pos:column="17">var</name></type> <name pos:line="139" pos:column="21">foldersAsCollection</name> <init pos:line="139" pos:column="41">= <expr><name pos:line="139" pos:column="43">folders</name> <op:operator pos:line="139" pos:column="51">as</op:operator> <name pos:line="139" pos:column="54">ICollection</name></expr></init></decl>;</decl_stmt>
                <lock pos:line="140" pos:column="17">lock(<expr><name><name pos:line="140" pos:column="22">foldersAsCollection</name><op:operator pos:line="140" pos:column="41">.</op:operator><name pos:line="140" pos:column="42">SyncRoot</name></name></expr>) <block pos:line="140" pos:column="52">{
                    <expr_stmt><expr><call><name><name pos:line="141" pos:column="21">answer</name><op:operator pos:line="141" pos:column="27">.</op:operator><name pos:line="141" pos:column="28">AddRange</name></name><argument_list pos:line="141" pos:column="36">(<argument><expr><name pos:line="141" pos:column="37">folders</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></lock>
                <return pos:line="143" pos:column="17">return <expr><op:operator pos:line="143" pos:column="24">new</op:operator> <call><name><name pos:line="143" pos:column="28">ReadOnlyCollection</name><argument_list pos:line="143" pos:column="46">&lt;<argument><name pos:line="143" pos:column="47">string</name></argument>&gt;</argument_list></name><argument_list pos:line="143" pos:column="54">(<argument><expr><name pos:line="143" pos:column="55">answer</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="147" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="148" pos:column="9">/// The scan interval is the number of seconds between each scan. By default it is set to</comment>
        <comment type="line" pos:line="149" pos:column="9">/// 60.</comment>
        <comment type="line" pos:line="150" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="151" pos:column="9">public</specifier> <name pos:line="151" pos:column="16">double</name></type> <name pos:line="151" pos:column="23">ScanInterval</name> <block pos:line="151" pos:column="36">{
            <function><name pos:line="152" pos:column="13">get</name> <block pos:line="152" pos:column="17">{ <return pos:line="152" pos:column="19">return <expr><name><name pos:line="152" pos:column="26">ScanTimer</name><op:operator pos:line="152" pos:column="35">.</op:operator><name pos:line="152" pos:column="36">Interval</name></name> <op:operator pos:line="152" pos:column="45">/</op:operator> <lit:literal type="number" pos:line="152" pos:column="47">1000</lit:literal></expr>;</return> }</block></function>
            <function><name pos:line="153" pos:column="13">set</name> <block pos:line="153" pos:column="17">{ <expr_stmt><expr><name><name pos:line="153" pos:column="19">ScanTimer</name><op:operator pos:line="153" pos:column="28">.</op:operator><name pos:line="153" pos:column="29">Interval</name></name> <op:operator pos:line="153" pos:column="38">=</op:operator> <name pos:line="153" pos:column="40">value</name> <op:operator pos:line="153" pos:column="46">*</op:operator> <lit:literal type="number" pos:line="153" pos:column="48">1000</lit:literal></expr>;</expr_stmt> }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="156" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="157" pos:column="9">/// the file path to save the list of directories to when &lt;see cref="WriteMonitoringList"/&gt;</comment>
        <comment type="line" pos:line="158" pos:column="9">/// is called.</comment>
        <comment type="line" pos:line="159" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="160" pos:column="9">protected</specifier> <name pos:line="160" pos:column="19">string</name></type> <name pos:line="160" pos:column="26">MonitoredDirectoriesFilePath</name> <block pos:line="160" pos:column="55">{ <function_decl><name pos:line="160" pos:column="57">get</name>;</function_decl> <function_decl><specifier pos:line="160" pos:column="62">private</specifier> <name pos:line="160" pos:column="70">set</name>;</function_decl> }</block></decl></decl_stmt>

        <function><type><specifier pos:line="162" pos:column="9">public</specifier> <name pos:line="162" pos:column="16">bool</name></type> <name pos:line="162" pos:column="21">DirectoryIsExcluded</name><parameter_list pos:line="162" pos:column="40">(<param><decl><type><name pos:line="162" pos:column="41">string</name></type> <name pos:line="162" pos:column="48">directoryPath</name></decl></param>)</parameter_list> <block pos:line="162" pos:column="63">{
            <decl_stmt><decl><type><name pos:line="163" pos:column="13">var</name></type> <name pos:line="163" pos:column="17">dirName</name> <init pos:line="163" pos:column="25">= <expr><call><name><name pos:line="163" pos:column="27">Path</name><op:operator pos:line="163" pos:column="31">.</op:operator><name pos:line="163" pos:column="32">GetFileName</name></name><argument_list pos:line="163" pos:column="43">(<argument><expr><call><name><name pos:line="163" pos:column="44">directoryPath</name><op:operator pos:line="163" pos:column="57">.</op:operator><name pos:line="163" pos:column="58">TrimEnd</name></name><argument_list pos:line="163" pos:column="65">(<argument><expr><name><name pos:line="163" pos:column="66">Path</name><op:operator pos:line="163" pos:column="70">.</op:operator><name pos:line="163" pos:column="71">DirectorySeparatorChar</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="164" pos:column="13">bool</name></type> <name pos:line="164" pos:column="18">startsWithDot</name> <init pos:line="164" pos:column="32">= <expr><call><name><name pos:line="164" pos:column="34">dirName</name><op:operator pos:line="164" pos:column="41">.</op:operator><name pos:line="164" pos:column="42">StartsWith</name></name><argument_list pos:line="164" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="164" pos:column="53">"."</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="165" pos:column="13">return <expr><call><name><name pos:line="165" pos:column="20">Exclusions</name><op:operator pos:line="165" pos:column="30">.</op:operator><name pos:line="165" pos:column="31">Contains</name></name><argument_list pos:line="165" pos:column="39">(<argument><expr><name pos:line="165" pos:column="40">dirName</name></expr></argument>)</argument_list></call> <op:operator pos:line="165" pos:column="49">||</op:operator> <name pos:line="165" pos:column="52">startsWithDot</name> <op:operator pos:line="165" pos:column="66">||</op:operator> <call><name><name pos:line="165" pos:column="69">BackupDirectoryRegex</name><op:operator pos:line="165" pos:column="89">.</op:operator><name pos:line="165" pos:column="90">IsMatch</name></name><argument_list pos:line="165" pos:column="97">(<argument><expr><name pos:line="165" pos:column="98">dirName</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="168" pos:column="9">public</specifier> <specifier pos:line="168" pos:column="16">static</specifier> <name pos:line="168" pos:column="23">bool</name></type> <name pos:line="168" pos:column="28">DirectoryIsForbidden</name><parameter_list pos:line="168" pos:column="48">(<param><decl><type><name pos:line="168" pos:column="49">string</name></type> <name pos:line="168" pos:column="56">directoryPath</name></decl></param>)</parameter_list> <block pos:line="168" pos:column="71">{
            <if pos:line="169" pos:column="13">if<condition pos:line="169" pos:column="15">(<expr><name pos:line="169" pos:column="16">null</name> <op:operator pos:line="169" pos:column="21">==</op:operator> <name pos:line="169" pos:column="24">directoryPath</name></expr>)</condition><then pos:line="169" pos:column="38">
                <throw pos:line="170" pos:column="17">throw <expr><op:operator pos:line="170" pos:column="23">new</op:operator> <call><name pos:line="170" pos:column="27">ArgumentNullException</name><argument_list pos:line="170" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="170" pos:column="49">"directoryPath"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <decl_stmt><decl><type><name pos:line="171" pos:column="13">var</name></type> <name pos:line="171" pos:column="17">info</name> <init pos:line="171" pos:column="22">= <expr><op:operator pos:line="171" pos:column="24">new</op:operator> <call><name pos:line="171" pos:column="28">DirectoryInfo</name><argument_list pos:line="171" pos:column="41">(<argument><expr><name pos:line="171" pos:column="42">directoryPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <return pos:line="173" pos:column="13">return <expr><op:operator pos:line="173" pos:column="20">(</op:operator><name><name pos:line="173" pos:column="21">info</name><op:operator pos:line="173" pos:column="25">.</op:operator><name pos:line="173" pos:column="26">Parent</name></name> <op:operator pos:line="173" pos:column="33">==</op:operator> <name pos:line="173" pos:column="36">null</name><op:operator pos:line="173" pos:column="40">)</op:operator> <op:operator pos:line="173" pos:column="42">||</op:operator> <call><name><name pos:line="173" pos:column="45">ForbiddenDirectories</name><op:operator pos:line="173" pos:column="65">.</op:operator><name pos:line="173" pos:column="66">Contains</name></name><argument_list pos:line="173" pos:column="74">(<argument><expr><call><name pos:line="173" pos:column="75">GetFullPathForDirectory</name><argument_list pos:line="173" pos:column="98">(<argument><expr><name pos:line="173" pos:column="99">directoryPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="176" pos:column="9">public</specifier> <specifier pos:line="176" pos:column="16">static</specifier> <name pos:line="176" pos:column="23">bool</name></type> <name pos:line="176" pos:column="28">FileIsExcluded</name><parameter_list pos:line="176" pos:column="42">(<param><decl><type><name pos:line="176" pos:column="43">string</name></type> <name pos:line="176" pos:column="50">filePath</name></decl></param>)</parameter_list> <block pos:line="176" pos:column="60">{
            <if pos:line="177" pos:column="13">if<condition pos:line="177" pos:column="15">(<expr><name pos:line="177" pos:column="16">null</name> <op:operator pos:line="177" pos:column="21">==</op:operator> <name pos:line="177" pos:column="24">filePath</name></expr>)</condition><then pos:line="177" pos:column="33"> <block pos:line="177" pos:column="34">{
                <throw pos:line="178" pos:column="17">throw <expr><op:operator pos:line="178" pos:column="23">new</op:operator> <call><name pos:line="178" pos:column="27">ArgumentNullException</name><argument_list pos:line="178" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="178" pos:column="49">"filePath"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <decl_stmt><decl><type><name pos:line="180" pos:column="13">var</name></type> <name pos:line="180" pos:column="17">fullPath</name> <init pos:line="180" pos:column="26">= <expr><call><name><name pos:line="180" pos:column="28">Path</name><op:operator pos:line="180" pos:column="32">.</op:operator><name pos:line="180" pos:column="33">GetFullPath</name></name><argument_list pos:line="180" pos:column="44">(<argument><expr><name pos:line="180" pos:column="45">filePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="181" pos:column="13">var</name></type> <name pos:line="181" pos:column="17">fileName</name> <init pos:line="181" pos:column="26">= <expr><call><name><name pos:line="181" pos:column="28">Path</name><op:operator pos:line="181" pos:column="32">.</op:operator><name pos:line="181" pos:column="33">GetFileName</name></name><argument_list pos:line="181" pos:column="44">(<argument><expr><name pos:line="181" pos:column="45">fullPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <return pos:line="183" pos:column="13">return <expr><call><name><name pos:line="183" pos:column="20">FileExclusionPrefixes</name><op:operator pos:line="183" pos:column="41">.</op:operator><name pos:line="183" pos:column="42">Any</name></name><argument_list pos:line="183" pos:column="45">(<argument><expr><lambda><name pos:line="183" pos:column="46">p</name> <op:operator pos:line="183" pos:column="48">=&gt;</op:operator> <call><name><name pos:line="183" pos:column="51">fileName</name><op:operator pos:line="183" pos:column="59">.</op:operator><name pos:line="183" pos:column="60">StartsWith</name></name><argument_list pos:line="183" pos:column="70">(<argument><expr><name pos:line="183" pos:column="71">p</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
        <comment type="line" pos:line="185" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="186" pos:column="9">/// Loads the list of monitored directories from &lt;see cref="MonitoredDirectoriesFilePath"/&gt;.</comment>
        <comment type="line" pos:line="187" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="188" pos:column="9">public</specifier> <name pos:line="188" pos:column="16">void</name></type> <name pos:line="188" pos:column="21">AddDirectoriesFromSaveFile</name><parameter_list pos:line="188" pos:column="47">()</parameter_list> <block pos:line="188" pos:column="50">{
            <if pos:line="189" pos:column="13">if<condition pos:line="189" pos:column="15">(<expr><call><name><name pos:line="189" pos:column="16">File</name><op:operator pos:line="189" pos:column="20">.</op:operator><name pos:line="189" pos:column="21">Exists</name></name><argument_list pos:line="189" pos:column="27">(<argument><expr><name pos:line="189" pos:column="28">MonitoredDirectoriesFilePath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="189" pos:column="58"> <block pos:line="189" pos:column="59">{
                <foreach pos:line="190" pos:column="17">foreach(<init><decl><type><name pos:line="190" pos:column="25">var</name></type> <name pos:line="190" pos:column="29">folderPath</name> <range pos:line="190" pos:column="40">in <expr><call><name><name pos:line="190" pos:column="43">File</name><op:operator pos:line="190" pos:column="47">.</op:operator><name pos:line="190" pos:column="48">ReadAllLines</name></name><argument_list pos:line="190" pos:column="60">(<argument><expr><name pos:line="190" pos:column="61">MonitoredDirectoriesFilePath</name></expr></argument>)</argument_list></call></expr></range></decl></init>) <block pos:line="190" pos:column="92">{
                    <expr_stmt><expr><call><name pos:line="191" pos:column="21">AddDirectory</name><argument_list pos:line="191" pos:column="33">(<argument><expr><name pos:line="191" pos:column="34">folderPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="196" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="197" pos:column="9">/// Add a folder to &lt;see cref="MonitoredDirectories"/&gt;</comment>
        <comment type="line" pos:line="198" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="199" pos:column="9">/// &lt;param name="directoryPath"&gt;The directory to start monitoring&lt;/param&gt;</comment>
        <comment type="line" pos:line="200" pos:column="9">/// &lt;remarks&gt;</comment>
        <comment type="line" pos:line="201" pos:column="9">/// Throws a &lt;see cref="DirectoryScanningMonitorSubDirectoryException"/&gt; if</comment>
        <comment type="line" pos:line="202" pos:column="9">/// &lt;paramref name="directoryPath"/&gt;is a subdirectory of an existing directory.</comment>
        <comment type="line" pos:line="203" pos:column="9">/// &lt;/remarks&gt;</comment>
        <function><type><specifier pos:line="204" pos:column="9">public</specifier> <name pos:line="204" pos:column="16">void</name></type> <name pos:line="204" pos:column="21">AddDirectory</name><parameter_list pos:line="204" pos:column="33">(<param><decl><type><name pos:line="204" pos:column="34">string</name></type> <name pos:line="204" pos:column="41">directoryPath</name></decl></param>)</parameter_list> <block pos:line="204" pos:column="56">{
            <decl_stmt><decl><type><name pos:line="205" pos:column="13">var</name></type> <name pos:line="205" pos:column="17">fullPath</name> <init pos:line="205" pos:column="26">= <expr><call><name pos:line="205" pos:column="28">GetFullPathForDirectory</name><argument_list pos:line="205" pos:column="51">(<argument><expr><name pos:line="205" pos:column="52">directoryPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="206" pos:column="13">bool</name></type> <name pos:line="206" pos:column="18">alreadyMonitoringDirectory</name> <init pos:line="206" pos:column="45">= <expr><lit:literal type="boolean" pos:line="206" pos:column="47">false</lit:literal></expr></init></decl>;</decl_stmt>

            <if pos:line="208" pos:column="13">if<condition pos:line="208" pos:column="15">(<expr><call><name pos:line="208" pos:column="16">DirectoryIsForbidden</name><argument_list pos:line="208" pos:column="36">(<argument><expr><name pos:line="208" pos:column="37">fullPath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="208" pos:column="47"> <block pos:line="208" pos:column="48">{
                <throw pos:line="209" pos:column="17">throw <expr><op:operator pos:line="209" pos:column="23">new</op:operator> <call><name pos:line="209" pos:column="27">ForbiddenDirectoryException</name><argument_list pos:line="209" pos:column="54">(<argument><expr><name pos:line="209" pos:column="55">fullPath</name></expr></argument>, <argument><expr><op:operator pos:line="209" pos:column="65">(</op:operator><call><name><name pos:line="209" pos:column="66">ForbiddenDirectories</name><op:operator pos:line="209" pos:column="86">.</op:operator><name pos:line="209" pos:column="87">Contains</name></name><argument_list pos:line="209" pos:column="95">(<argument><expr><name pos:line="209" pos:column="96">fullPath</name></expr></argument>)</argument_list></call> <op:operator pos:line="209" pos:column="106">?</op:operator> <name><name pos:line="209" pos:column="108">ForbiddenDirectoryException</name><op:operator pos:line="209" pos:column="135">.</op:operator><name pos:line="209" pos:column="136">ISSPECIALDIR</name></name> <op:operator pos:line="209" pos:column="149">:</op:operator> <name><name pos:line="209" pos:column="151">ForbiddenDirectoryException</name><op:operator pos:line="209" pos:column="178">.</op:operator><name pos:line="209" pos:column="179">ISROOT</name></name><op:operator pos:line="209" pos:column="185">)</op:operator></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <foreach pos:line="212" pos:column="13">foreach(<init><decl><type><name pos:line="212" pos:column="21">var</name></type> <name pos:line="212" pos:column="25">directory</name> <range pos:line="212" pos:column="35">in <expr><name pos:line="212" pos:column="38">MonitoredDirectories</name></expr></range></decl></init>) <block pos:line="212" pos:column="60">{
                <if pos:line="213" pos:column="17">if<condition pos:line="213" pos:column="19">(<expr><call><name><name pos:line="213" pos:column="20">fullPath</name><op:operator pos:line="213" pos:column="28">.</op:operator><name pos:line="213" pos:column="29">StartsWith</name></name><argument_list pos:line="213" pos:column="39">(<argument><expr><name pos:line="213" pos:column="40">directory</name></expr></argument>, <argument><expr><name><name pos:line="213" pos:column="51">StringComparison</name><op:operator pos:line="213" pos:column="67">.</op:operator><name pos:line="213" pos:column="68">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="213" pos:column="87"> <block pos:line="213" pos:column="88">{
                    <expr_stmt><expr><name pos:line="214" pos:column="21">alreadyMonitoringDirectory</name> <op:operator pos:line="214" pos:column="48">=</op:operator> <op:operator pos:line="214" pos:column="50">(</op:operator><name><name pos:line="214" pos:column="51">fullPath</name><op:operator pos:line="214" pos:column="59">.</op:operator><name pos:line="214" pos:column="60">Length</name></name> <op:operator pos:line="214" pos:column="67">==</op:operator> <name><name pos:line="214" pos:column="70">directory</name><op:operator pos:line="214" pos:column="79">.</op:operator><name pos:line="214" pos:column="80">Length</name></name><op:operator pos:line="214" pos:column="86">)</op:operator></expr>;</expr_stmt>
                    <if pos:line="215" pos:column="21">if<condition pos:line="215" pos:column="23">(<expr><name pos:line="215" pos:column="24">alreadyMonitoringDirectory</name></expr>)</condition><then pos:line="215" pos:column="51"> <block pos:line="215" pos:column="52">{
                        <break pos:line="216" pos:column="25">break;</break>
                    }</block></then></if>
                    <throw pos:line="218" pos:column="21">throw <expr><op:operator pos:line="218" pos:column="27">new</op:operator> <call><name pos:line="218" pos:column="31">DirectoryScanningMonitorSubDirectoryException</name><argument_list pos:line="218" pos:column="76">(<argument><expr><name pos:line="218" pos:column="77">directoryPath</name></expr></argument>, <argument><expr><name pos:line="218" pos:column="92">directory</name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
            }</block></foreach>
            <if pos:line="221" pos:column="13">if<condition pos:line="221" pos:column="15">(<expr><op:operator pos:line="221" pos:column="16">!</op:operator><name pos:line="221" pos:column="17">alreadyMonitoringDirectory</name></expr>)</condition><then pos:line="221" pos:column="44"> <block pos:line="221" pos:column="45">{
                <decl_stmt><decl><type><name pos:line="222" pos:column="17">var</name></type> <name pos:line="222" pos:column="21">foldersAsCollection</name> <init pos:line="222" pos:column="41">= <expr><name pos:line="222" pos:column="43">folders</name> <op:operator pos:line="222" pos:column="51">as</op:operator> <name pos:line="222" pos:column="54">ICollection</name></expr></init></decl>;</decl_stmt>
                <lock pos:line="223" pos:column="17">lock(<expr><name><name pos:line="223" pos:column="22">foldersAsCollection</name><op:operator pos:line="223" pos:column="41">.</op:operator><name pos:line="223" pos:column="42">SyncRoot</name></name></expr>) <block pos:line="223" pos:column="52">{
                    <expr_stmt><expr><call><name><name pos:line="224" pos:column="21">folders</name><op:operator pos:line="224" pos:column="28">.</op:operator><name pos:line="224" pos:column="29">Add</name></name><argument_list pos:line="224" pos:column="32">(<argument><expr><name pos:line="224" pos:column="33">fullPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></lock>

                <expr_stmt><expr><call><name pos:line="227" pos:column="17">OnDirectoryAdded</name><argument_list pos:line="227" pos:column="33">(<argument><expr><op:operator pos:line="227" pos:column="34">new</op:operator> <call><name pos:line="227" pos:column="38">DirectoryScanningMonitorEventArgs</name><argument_list pos:line="227" pos:column="71">(<argument><expr><name pos:line="227" pos:column="72">fullPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if pos:line="229" pos:column="17">if<condition pos:line="229" pos:column="19">(<expr><name><name pos:line="229" pos:column="20">ScanTimer</name><op:operator pos:line="229" pos:column="29">.</op:operator><name pos:line="229" pos:column="30">Enabled</name></name></expr>)</condition><then pos:line="229" pos:column="38"> <block pos:line="229" pos:column="39">{
                    <expr_stmt><expr><call><name><name pos:line="230" pos:column="21">ScanTimer</name><op:operator pos:line="230" pos:column="30">.</op:operator><name pos:line="230" pos:column="31">ExecuteWhenIdle</name></name><argument_list pos:line="230" pos:column="46">(<argument><expr><lambda><parameter_list pos:line="230" pos:column="47">()</parameter_list> <op:operator pos:line="230" pos:column="50">=&gt;</op:operator> <block pos:line="230" pos:column="53">{
                        <expr_stmt><expr><call><name pos:line="231" pos:column="25">OnUpdateArchivesStarted</name><argument_list pos:line="231" pos:column="48">(<argument><expr><op:operator pos:line="231" pos:column="49">new</op:operator> <call><name pos:line="231" pos:column="53">EventArgs</name><argument_list pos:line="231" pos:column="62">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <foreach pos:line="232" pos:column="25">foreach(<init><decl><type><name pos:line="232" pos:column="33">var</name></type> <name pos:line="232" pos:column="37">fileName</name> <range pos:line="232" pos:column="46">in <expr><call><name pos:line="232" pos:column="49">EnumerateDirectory</name><argument_list pos:line="232" pos:column="67">(<argument><expr><name pos:line="232" pos:column="68">fullPath</name></expr></argument>)</argument_list></call></expr></range></decl></init>) <block pos:line="232" pos:column="79">{
                            <expr_stmt><expr><call><name pos:line="233" pos:column="29">UpdateFile</name><argument_list pos:line="233" pos:column="39">(<argument><expr><name pos:line="233" pos:column="40">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></foreach>
                        <expr_stmt><expr><call><name pos:line="235" pos:column="25">OnUpdateArchivesCompleted</name><argument_list pos:line="235" pos:column="50">(<argument><expr><op:operator pos:line="235" pos:column="51">new</op:operator> <call><name pos:line="235" pos:column="55">EventArgs</name><argument_list pos:line="235" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="241" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="242" pos:column="9">/// Returns an enumerable of all the files in</comment>
        <comment type="line" pos:line="243" pos:column="9">/// &lt;paramref name="directory"/&gt;.</comment>
        <comment type="line" pos:line="244" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="245" pos:column="9">/// &lt;param name="directory"&gt;The directory to enumerate&lt;/param&gt;</comment>
        <comment type="line" pos:line="246" pos:column="9">/// &lt;returns&gt;An enumerable of the full file names in</comment>
        <comment type="line" pos:line="247" pos:column="9">/// &lt;paramref name="directory"/&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="248" pos:column="9">public</specifier> <name><name pos:line="248" pos:column="16">IEnumerable</name><argument_list pos:line="248" pos:column="27">&lt;<argument><name pos:line="248" pos:column="28">string</name></argument>&gt;</argument_list></name></type> <name pos:line="248" pos:column="36">EnumerateDirectory</name><parameter_list pos:line="248" pos:column="54">(<param><decl><type><name pos:line="248" pos:column="55">string</name></type> <name pos:line="248" pos:column="62">directory</name></decl></param>)</parameter_list> <block pos:line="248" pos:column="73">{
            <if pos:line="249" pos:column="13">if<condition pos:line="249" pos:column="15">(<expr><name pos:line="249" pos:column="16">null</name> <op:operator pos:line="249" pos:column="21">==</op:operator> <name pos:line="249" pos:column="24">directory</name></expr>)</condition><then pos:line="249" pos:column="34">
                <throw pos:line="250" pos:column="17">throw <expr><op:operator pos:line="250" pos:column="23">new</op:operator> <call><name pos:line="250" pos:column="27">ArgumentNullException</name><argument_list pos:line="250" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="250" pos:column="49">"directory"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <if pos:line="252" pos:column="13">if<condition pos:line="252" pos:column="15">(<expr><op:operator pos:line="252" pos:column="16">!</op:operator><call><name pos:line="252" pos:column="17">DirectoryIsExcluded</name><argument_list pos:line="252" pos:column="36">(<argument><expr><name pos:line="252" pos:column="37">directory</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="252" pos:column="48"> <block pos:line="252" pos:column="49">{
                <decl_stmt><decl><type><name pos:line="253" pos:column="17">String</name><index pos:line="253" pos:column="23">[]</index></type> <name pos:line="253" pos:column="26">subdirectories</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="254" pos:column="17">String</name><index pos:line="254" pos:column="23">[]</index></type> <name pos:line="254" pos:column="26">files</name></decl>;</decl_stmt>
                <try pos:line="255" pos:column="17">try <block pos:line="255" pos:column="21">{
                    <expr_stmt><expr><name pos:line="256" pos:column="21">subdirectories</name> <op:operator pos:line="256" pos:column="36">=</op:operator> <call><name><name pos:line="256" pos:column="38">Directory</name><op:operator pos:line="256" pos:column="47">.</op:operator><name pos:line="256" pos:column="48">GetDirectories</name></name><argument_list pos:line="256" pos:column="62">(<argument><expr><name pos:line="256" pos:column="63">directory</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="256" pos:column="74">"*"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="256" pos:column="79">SearchOption</name><op:operator pos:line="256" pos:column="91">.</op:operator><name pos:line="256" pos:column="92">TopDirectoryOnly</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch pos:line="257" pos:column="19">catch<parameter_list pos:line="257" pos:column="24">(<param><decl><type><name pos:line="257" pos:column="25">Exception</name></type></decl></param>)</parameter_list> <block pos:line="257" pos:column="36">{
                    <expr_stmt><expr><name pos:line="258" pos:column="21">subdirectories</name> <op:operator pos:line="258" pos:column="36">=</op:operator> <op:operator pos:line="258" pos:column="38">new</op:operator> <name><name pos:line="258" pos:column="42">string</name><index pos:line="258" pos:column="48">[<expr><lit:literal type="number" pos:line="258" pos:column="49">0</lit:literal></expr>]</index></name></expr>;</expr_stmt>
                }</block></catch></try>

                <foreach pos:line="261" pos:column="17">foreach(<init><decl><type><name pos:line="261" pos:column="25">var</name></type> <name pos:line="261" pos:column="29">dir</name> <range pos:line="261" pos:column="33">in <expr><name pos:line="261" pos:column="36">subdirectories</name></expr></range></decl></init>) <block pos:line="261" pos:column="52">{
                    <foreach pos:line="262" pos:column="21">foreach(<init><decl><type><name pos:line="262" pos:column="29">var</name></type> <name pos:line="262" pos:column="33">filePath</name> <range pos:line="262" pos:column="42">in <expr><call><name pos:line="262" pos:column="45">EnumerateDirectory</name><argument_list pos:line="262" pos:column="63">(<argument><expr><name pos:line="262" pos:column="64">dir</name></expr></argument>)</argument_list></call></expr></range></decl></init>) <block pos:line="262" pos:column="70">{
                        <return><specifier pos:line="263" pos:column="25">yield</specifier> return <expr><name pos:line="263" pos:column="38">filePath</name></expr>;</return>
                    }</block></foreach>
                }</block></foreach>

                <try pos:line="267" pos:column="17">try <block pos:line="267" pos:column="21">{
                    <expr_stmt><expr><name pos:line="268" pos:column="21">files</name> <op:operator pos:line="268" pos:column="27">=</op:operator> <call><name><name pos:line="268" pos:column="29">Directory</name><op:operator pos:line="268" pos:column="38">.</op:operator><name pos:line="268" pos:column="39">GetFiles</name></name><argument_list pos:line="268" pos:column="47">(<argument><expr><name pos:line="268" pos:column="48">directory</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="268" pos:column="59">"*"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="268" pos:column="64">SearchOption</name><op:operator pos:line="268" pos:column="76">.</op:operator><name pos:line="268" pos:column="77">TopDirectoryOnly</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch pos:line="269" pos:column="19">catch<parameter_list pos:line="269" pos:column="24">(<param><decl><type><name pos:line="269" pos:column="25">Exception</name></type></decl></param>)</parameter_list> <block pos:line="269" pos:column="36">{
                    <expr_stmt><expr><name pos:line="270" pos:column="21">files</name> <op:operator pos:line="270" pos:column="27">=</op:operator> <op:operator pos:line="270" pos:column="29">new</op:operator> <name><name pos:line="270" pos:column="33">string</name><index pos:line="270" pos:column="39">[<expr><lit:literal type="number" pos:line="270" pos:column="40">0</lit:literal></expr>]</index></name></expr>;</expr_stmt>
                }</block></catch></try>
                <decl_stmt><decl><type><name pos:line="272" pos:column="17">var</name></type> <name pos:line="272" pos:column="21">validFiles</name> <init pos:line="272" pos:column="32">= <expr><linq><from pos:line="272" pos:column="34">from <expr><name pos:line="272" pos:column="39">filePath</name></expr> <in pos:line="272" pos:column="48">in <expr><name pos:line="272" pos:column="51">files</name></expr></in></from>
                                 <let pos:line="273" pos:column="34">let <expr><name pos:line="273" pos:column="38">fileName</name> <op:operator pos:line="273" pos:column="47">=</op:operator> <call><name><name pos:line="273" pos:column="49">Path</name><op:operator pos:line="273" pos:column="53">.</op:operator><name pos:line="273" pos:column="54">GetFileName</name></name><argument_list pos:line="273" pos:column="65">(<argument><expr><name pos:line="273" pos:column="66">filePath</name></expr></argument>)</argument_list></call></expr></let>
                                 <where pos:line="274" pos:column="34">where <expr><op:operator pos:line="274" pos:column="40">!</op:operator><call><name pos:line="274" pos:column="41">FileIsExcluded</name><argument_list pos:line="274" pos:column="55">(<argument><expr><name pos:line="274" pos:column="56">filePath</name></expr></argument>)</argument_list></call></expr></where>
                                 <select pos:line="275" pos:column="34">select <expr><name pos:line="275" pos:column="41">filePath</name></expr></select></linq></expr></init></decl>;</decl_stmt>

                <foreach pos:line="277" pos:column="17">foreach(<init><decl><type><name pos:line="277" pos:column="25">var</name></type> <name pos:line="277" pos:column="29">filePath</name> <range pos:line="277" pos:column="38">in <expr><name pos:line="277" pos:column="41">validFiles</name></expr></range></decl></init>) <block pos:line="277" pos:column="53">{
                    <return><specifier pos:line="278" pos:column="21">yield</specifier> return <expr><name pos:line="278" pos:column="34">filePath</name></expr>;</return>
                }</block></foreach>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="283" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="284" pos:column="9">/// Returns an enumerable of all the monitored files</comment>
        <comment type="line" pos:line="285" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="286" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="287" pos:column="9">public</specifier> <specifier pos:line="287" pos:column="16">override</specifier> <name><name pos:line="287" pos:column="25">IEnumerable</name><argument_list pos:line="287" pos:column="36">&lt;<argument><name pos:line="287" pos:column="37">string</name></argument>&gt;</argument_list></name></type> <name pos:line="287" pos:column="45">EnumerateMonitoredFiles</name><parameter_list pos:line="287" pos:column="68">()</parameter_list> <block pos:line="287" pos:column="71">{
            <decl_stmt><decl><type><name pos:line="288" pos:column="13">var</name></type> <name pos:line="288" pos:column="17">monitoredFiles</name> <init pos:line="288" pos:column="32">= <expr><linq><from pos:line="288" pos:column="34">from <expr><name pos:line="288" pos:column="39">directory</name></expr> <in pos:line="288" pos:column="49">in <expr><name pos:line="288" pos:column="52">MonitoredDirectories</name></expr></in></from>
                                 <from pos:line="289" pos:column="34">from <expr><name pos:line="289" pos:column="39">fileName</name></expr> <in pos:line="289" pos:column="48">in <expr><call><name pos:line="289" pos:column="51">EnumerateDirectory</name><argument_list pos:line="289" pos:column="69">(<argument><expr><name pos:line="289" pos:column="70">directory</name></expr></argument>)</argument_list></call></expr></in></from>
                                 <select pos:line="290" pos:column="34">select <expr><name pos:line="290" pos:column="41">fileName</name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <return pos:line="291" pos:column="13">return <expr><name pos:line="291" pos:column="20">monitoredFiles</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="294" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="295" pos:column="9">/// Checks to see if</comment>
        <comment type="line" pos:line="296" pos:column="9">/// &lt;paramref name="fileName"/&gt;is in any of the &lt;see cref="MonitoredDirectories"/&gt;.</comment>
        <comment type="line" pos:line="297" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="298" pos:column="9">/// &lt;param name="fileName"&gt;The file name to check&lt;/param&gt;</comment>
        <comment type="line" pos:line="299" pos:column="9">/// &lt;returns&gt;True if the file is in a &lt;see cref="MonitoredDirectories"&gt;monitored</comment>
        <comment type="line" pos:line="300" pos:column="9">/// directory&lt;/see&gt;, false otherwise&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="301" pos:column="9">public</specifier> <name pos:line="301" pos:column="16">bool</name></type> <name pos:line="301" pos:column="21">IsMonitoringFile</name><parameter_list pos:line="301" pos:column="37">(<param><decl><type><name pos:line="301" pos:column="38">string</name></type> <name pos:line="301" pos:column="45">fileName</name></decl></param>)</parameter_list> <block pos:line="301" pos:column="55">{
            <decl_stmt><decl><type><name pos:line="302" pos:column="13">var</name></type> <name pos:line="302" pos:column="17">fullPath</name> <init pos:line="302" pos:column="26">= <expr><call><name><name pos:line="302" pos:column="28">Path</name><op:operator pos:line="302" pos:column="32">.</op:operator><name pos:line="302" pos:column="33">GetFullPath</name></name><argument_list pos:line="302" pos:column="44">(<argument><expr><name pos:line="302" pos:column="45">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="303" pos:column="13">return <expr><call><name><name pos:line="303" pos:column="20">MonitoredDirectories</name><op:operator pos:line="303" pos:column="40">.</op:operator><name pos:line="303" pos:column="41">Any</name></name><argument_list pos:line="303" pos:column="44">(<argument><expr><lambda><name pos:line="303" pos:column="45">d</name> <op:operator pos:line="303" pos:column="47">=&gt;</op:operator> <call><name><name pos:line="303" pos:column="50">fullPath</name><op:operator pos:line="303" pos:column="58">.</op:operator><name pos:line="303" pos:column="59">StartsWith</name></name><argument_list pos:line="303" pos:column="69">(<argument><expr><name pos:line="303" pos:column="70">d</name></expr></argument>, <argument><expr><name><name pos:line="303" pos:column="73">StringComparison</name><op:operator pos:line="303" pos:column="89">.</op:operator><name pos:line="303" pos:column="90">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="306" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="307" pos:column="9">/// Remove a directory from &lt;see cref="MonitoredDirectories"/&gt;. Files in this directory will</comment>
        <comment type="line" pos:line="308" pos:column="9">/// be removed from all archives.</comment>
        <comment type="line" pos:line="309" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="310" pos:column="9">/// &lt;param name="directoryPath"&gt;The directory to remove&lt;/param&gt;</comment>
        <comment type="line" pos:line="311" pos:column="9">/// &lt;remarks&gt;</comment>
        <comment type="line" pos:line="312" pos:column="9">/// If</comment>
        <comment type="line" pos:line="313" pos:column="9">/// &lt;paramref name="directoryPath"/&gt;is not in &lt;see cref="MonitoredDirectories"/&gt; this method</comment>
        <comment type="line" pos:line="314" pos:column="9">/// has no effect.</comment>
        <comment type="line" pos:line="315" pos:column="9">/// &lt;/remarks&gt;</comment>
        <function><type><specifier pos:line="316" pos:column="9">public</specifier> <name pos:line="316" pos:column="16">void</name></type> <name pos:line="316" pos:column="21">RemoveDirectory</name><parameter_list pos:line="316" pos:column="36">(<param><decl><type><name pos:line="316" pos:column="37">string</name></type> <name pos:line="316" pos:column="44">directoryPath</name></decl></param>)</parameter_list> <block pos:line="316" pos:column="59">{
            <decl_stmt><decl><type><name pos:line="317" pos:column="13">var</name></type> <name pos:line="317" pos:column="17">directoryFullPath</name> <init pos:line="317" pos:column="35">= <expr><call><name pos:line="317" pos:column="37">GetFullPathForDirectory</name><argument_list pos:line="317" pos:column="60">(<argument><expr><name pos:line="317" pos:column="61">directoryPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="319" pos:column="13">bool</name></type> <name pos:line="319" pos:column="18">directoryIsMonitored</name> <init pos:line="319" pos:column="39">= <expr><lit:literal type="boolean" pos:line="319" pos:column="41">false</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="321" pos:column="13">var</name></type> <name pos:line="321" pos:column="17">folderAsCollection</name> <init pos:line="321" pos:column="36">= <expr><name pos:line="321" pos:column="38">folders</name> <op:operator pos:line="321" pos:column="46">as</op:operator> <name pos:line="321" pos:column="49">ICollection</name></expr></init></decl>;</decl_stmt>
            <lock pos:line="322" pos:column="13">lock(<expr><name><name pos:line="322" pos:column="18">folderAsCollection</name><op:operator pos:line="322" pos:column="36">.</op:operator><name pos:line="322" pos:column="37">SyncRoot</name></name></expr>) <block pos:line="322" pos:column="47">{
                <expr_stmt><expr><name pos:line="323" pos:column="17">directoryIsMonitored</name> <op:operator pos:line="323" pos:column="38">=</op:operator> <call><name><name pos:line="323" pos:column="40">folders</name><op:operator pos:line="323" pos:column="47">.</op:operator><name pos:line="323" pos:column="48">Contains</name></name><argument_list pos:line="323" pos:column="56">(<argument><expr><name pos:line="323" pos:column="57">directoryFullPath</name></expr></argument>, <argument><expr><name><name pos:line="323" pos:column="76">StringComparer</name><op:operator pos:line="323" pos:column="90">.</op:operator><name pos:line="323" pos:column="91">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="324" pos:column="17">if<condition pos:line="324" pos:column="19">(<expr><name pos:line="324" pos:column="20">directoryIsMonitored</name></expr>)</condition><then pos:line="324" pos:column="41"> <block pos:line="324" pos:column="42">{
                    <expr_stmt><expr><call><name><name pos:line="325" pos:column="21">folders</name><op:operator pos:line="325" pos:column="28">.</op:operator><name pos:line="325" pos:column="29">Remove</name></name><argument_list pos:line="325" pos:column="35">(<argument><expr><name pos:line="325" pos:column="36">directoryFullPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></lock>
            
            <if pos:line="329" pos:column="13">if<condition pos:line="329" pos:column="15">(<expr><name pos:line="329" pos:column="16">directoryIsMonitored</name></expr>)</condition><then pos:line="329" pos:column="37"> <block pos:line="329" pos:column="38">{
                <expr_stmt><expr><call><name pos:line="330" pos:column="17">OnDirectoryRemoved</name><argument_list pos:line="330" pos:column="35">(<argument><expr><op:operator pos:line="330" pos:column="36">new</op:operator> <call><name pos:line="330" pos:column="40">DirectoryScanningMonitorEventArgs</name><argument_list pos:line="330" pos:column="73">(<argument><expr><name pos:line="330" pos:column="74">directoryFullPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="331" pos:column="17">ScanTimer</name><op:operator pos:line="331" pos:column="26">.</op:operator><name pos:line="331" pos:column="27">ExecuteWhenIdle</name></name><argument_list pos:line="331" pos:column="42">(<argument><expr><lambda><parameter_list pos:line="331" pos:column="43">()</parameter_list> <op:operator pos:line="331" pos:column="46">=&gt;</op:operator> <block pos:line="331" pos:column="49">{
                    <expr_stmt><expr><call><name pos:line="332" pos:column="21">OnUpdateArchivesStarted</name><argument_list pos:line="332" pos:column="44">(<argument><expr><op:operator pos:line="332" pos:column="45">new</op:operator> <call><name pos:line="332" pos:column="49">EventArgs</name><argument_list pos:line="332" pos:column="58">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <foreach pos:line="333" pos:column="21">foreach(<init><decl><type><name pos:line="333" pos:column="29">var</name></type> <name pos:line="333" pos:column="33">fileName</name> <range pos:line="333" pos:column="42">in <expr><call><name pos:line="333" pos:column="45">GetArchivedFiles</name><argument_list pos:line="333" pos:column="61">()</argument_list></call></expr></range></decl></init>) <block pos:line="333" pos:column="65">{
                        <if pos:line="334" pos:column="25">if<condition pos:line="334" pos:column="27">(<expr><call><name><name pos:line="334" pos:column="28">fileName</name><op:operator pos:line="334" pos:column="36">.</op:operator><name pos:line="334" pos:column="37">StartsWith</name></name><argument_list pos:line="334" pos:column="47">(<argument><expr><name pos:line="334" pos:column="48">directoryFullPath</name></expr></argument>, <argument><expr><name><name pos:line="334" pos:column="67">StringComparison</name><op:operator pos:line="334" pos:column="83">.</op:operator><name pos:line="334" pos:column="84">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="334" pos:column="103"> <block pos:line="334" pos:column="104">{
                            <expr_stmt><expr><call><name pos:line="335" pos:column="29">DeleteFile</name><argument_list pos:line="335" pos:column="39">(<argument><expr><name pos:line="335" pos:column="40">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></foreach>
                    <expr_stmt><expr><call><name pos:line="338" pos:column="21">OnUpdateArchivesCompleted</name><argument_list pos:line="338" pos:column="46">(<argument><expr><op:operator pos:line="338" pos:column="47">new</op:operator> <call><name pos:line="338" pos:column="51">EventArgs</name><argument_list pos:line="338" pos:column="60">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            
        }</block></function>

        <function><type><specifier pos:line="344" pos:column="9">public</specifier> <specifier pos:line="344" pos:column="16">override</specifier> <name pos:line="344" pos:column="25">void</name></type> <name pos:line="344" pos:column="30">Save</name><parameter_list pos:line="344" pos:column="34">()</parameter_list> <block pos:line="344" pos:column="37">{
            <expr_stmt><expr><call><name pos:line="345" pos:column="13">WriteMonitoringList</name><argument_list pos:line="345" pos:column="32">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="346" pos:column="13">base</name><op:operator pos:line="346" pos:column="17">.</op:operator><name pos:line="346" pos:column="18">Save</name></name><argument_list pos:line="346" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <comment type="line" pos:line="348" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="349" pos:column="9">/// Start scanning &lt;see cref="MonitoredDirectories"&gt;monitored directories&lt;/see&gt; every</comment>
        <comment type="line" pos:line="350" pos:column="9">/// &lt;see cref="ScanInterval"/&gt; seconds.</comment>
        <comment type="line" pos:line="351" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="352" pos:column="9">/// &lt;remarks&gt;</comment>
        <comment type="line" pos:line="353" pos:column="9">/// Has no effect if the monitor is already running.</comment>
        <comment type="line" pos:line="354" pos:column="9">/// &lt;/remarks&gt;</comment>
        <function><type><specifier pos:line="355" pos:column="9">public</specifier> <specifier pos:line="355" pos:column="16">override</specifier> <name pos:line="355" pos:column="25">void</name></type> <name pos:line="355" pos:column="30">StartMonitoring</name><parameter_list pos:line="355" pos:column="45">()</parameter_list> <block pos:line="355" pos:column="48">{
            <expr_stmt><expr><call><name><name pos:line="356" pos:column="13">ScanTimer</name><op:operator pos:line="356" pos:column="22">.</op:operator><name pos:line="356" pos:column="23">Start</name></name><argument_list pos:line="356" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="359" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="360" pos:column="9">/// Stop monitoring &lt;see cref="MonitoredDirectories"&gt;monitored directories&lt;/see&gt;.</comment>
        <comment type="line" pos:line="361" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="362" pos:column="9">/// &lt;remarks&gt;</comment>
        <comment type="line" pos:line="363" pos:column="9">/// Stops monitoring</comment>
        <comment type="line" pos:line="364" pos:column="9">/// &lt;/remarks&gt;</comment>
        <function><type><specifier pos:line="365" pos:column="9">public</specifier> <specifier pos:line="365" pos:column="16">override</specifier> <name pos:line="365" pos:column="25">void</name></type> <name pos:line="365" pos:column="30">StopMonitoring</name><parameter_list pos:line="365" pos:column="44">()</parameter_list> <block pos:line="365" pos:column="47">{
            <if pos:line="366" pos:column="13">if<condition pos:line="366" pos:column="15">(<expr><name><name pos:line="366" pos:column="16">ScanTimer</name><op:operator pos:line="366" pos:column="25">.</op:operator><name pos:line="366" pos:column="26">Enabled</name></name></expr>)</condition><then pos:line="366" pos:column="34"> <block pos:line="366" pos:column="35">{
                <expr_stmt><expr><call><name><name pos:line="367" pos:column="17">ScanTimer</name><op:operator pos:line="367" pos:column="26">.</op:operator><name pos:line="367" pos:column="27">Stop</name></name><argument_list pos:line="367" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="368" pos:column="17">base</name><op:operator pos:line="368" pos:column="21">.</op:operator><name pos:line="368" pos:column="22">StopMonitoring</name></name><argument_list pos:line="368" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="372" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="373" pos:column="9">/// Writes the current list of &lt;see cref="MonitoredDirectories"/&gt; to</comment>
        <comment type="line" pos:line="374" pos:column="9">/// &lt;paramref name="fileName"/&gt;&lt;/summary&gt;</comment>
        <comment type="line" pos:line="375" pos:column="9">/// &lt;param name="fileName"&gt;The file name to write the list of directories to&lt;/param&gt;</comment>
        <function><type><specifier pos:line="376" pos:column="9">public</specifier> <name pos:line="376" pos:column="16">void</name></type> <name pos:line="376" pos:column="21">WriteMonitoringList</name><parameter_list pos:line="376" pos:column="40">()</parameter_list> <block pos:line="376" pos:column="43">{
            <expr_stmt><expr><call><name><name pos:line="377" pos:column="13">File</name><op:operator pos:line="377" pos:column="17">.</op:operator><name pos:line="377" pos:column="18">WriteAllLines</name></name><argument_list pos:line="377" pos:column="31">(<argument><expr><name pos:line="377" pos:column="32">MonitoredDirectoriesFilePath</name></expr></argument>, <argument><expr><name pos:line="377" pos:column="62">MonitoredDirectories</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="380" pos:column="9">protected</specifier> <specifier pos:line="380" pos:column="19">override</specifier> <name pos:line="380" pos:column="28">void</name></type> <name pos:line="380" pos:column="33">Dispose</name><parameter_list pos:line="380" pos:column="40">(<param><decl><type><name pos:line="380" pos:column="41">bool</name></type> <name pos:line="380" pos:column="46">disposing</name></decl></param>)</parameter_list> <block pos:line="380" pos:column="57">{
            <if pos:line="381" pos:column="13">if<condition pos:line="381" pos:column="15">(<expr><name pos:line="381" pos:column="16">disposing</name></expr>)</condition><then pos:line="381" pos:column="26"> <block pos:line="381" pos:column="27">{
                <expr_stmt><expr><call><name pos:line="382" pos:column="17">WriteMonitoringList</name><argument_list pos:line="382" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name pos:line="384" pos:column="13">base</name><op:operator pos:line="384" pos:column="17">.</op:operator><name pos:line="384" pos:column="18">Dispose</name></name><argument_list pos:line="384" pos:column="25">(<argument><expr><name pos:line="384" pos:column="26">disposing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="387" pos:column="9">protected</specifier> <specifier pos:line="387" pos:column="19">virtual</specifier> <name pos:line="387" pos:column="27">void</name></type> <name pos:line="387" pos:column="32">OnDirectoryAdded</name><parameter_list pos:line="387" pos:column="48">(<param><decl><type><name pos:line="387" pos:column="49">DirectoryScanningMonitorEventArgs</name></type> <name pos:line="387" pos:column="83">e</name></decl></param>)</parameter_list> <block pos:line="387" pos:column="86">{
            <decl_stmt><decl><type><name><name pos:line="388" pos:column="13">EventHandler</name><argument_list pos:line="388" pos:column="25">&lt;<argument><name pos:line="388" pos:column="26">DirectoryScanningMonitorEventArgs</name></argument>&gt;</argument_list></name></type> <name pos:line="388" pos:column="61">handler</name> <init pos:line="388" pos:column="69">= <expr><name pos:line="388" pos:column="71">DirectoryAdded</name></expr></init></decl>;</decl_stmt>
            <if pos:line="389" pos:column="13">if<condition pos:line="389" pos:column="15">(<expr><name pos:line="389" pos:column="16">null</name> <op:operator pos:line="389" pos:column="21">!=</op:operator> <name pos:line="389" pos:column="24">handler</name></expr>)</condition><then pos:line="389" pos:column="32"> <block pos:line="389" pos:column="33">{
                <expr_stmt><expr><call><name pos:line="390" pos:column="17">handler</name><argument_list pos:line="390" pos:column="24">(<argument><expr><name pos:line="390" pos:column="25">this</name></expr></argument>, <argument><expr><name pos:line="390" pos:column="31">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="394" pos:column="9">protected</specifier> <specifier pos:line="394" pos:column="19">virtual</specifier> <name pos:line="394" pos:column="27">void</name></type> <name pos:line="394" pos:column="32">OnDirectoryRemoved</name><parameter_list pos:line="394" pos:column="50">(<param><decl><type><name pos:line="394" pos:column="51">DirectoryScanningMonitorEventArgs</name></type> <name pos:line="394" pos:column="85">e</name></decl></param>)</parameter_list> <block pos:line="394" pos:column="88">{
            <decl_stmt><decl><type><name><name pos:line="395" pos:column="13">EventHandler</name><argument_list pos:line="395" pos:column="25">&lt;<argument><name pos:line="395" pos:column="26">DirectoryScanningMonitorEventArgs</name></argument>&gt;</argument_list></name></type> <name pos:line="395" pos:column="61">handler</name> <init pos:line="395" pos:column="69">= <expr><name pos:line="395" pos:column="71">DirectoryRemoved</name></expr></init></decl>;</decl_stmt>
            <if pos:line="396" pos:column="13">if<condition pos:line="396" pos:column="15">(<expr><name pos:line="396" pos:column="16">null</name> <op:operator pos:line="396" pos:column="21">!=</op:operator> <name pos:line="396" pos:column="24">handler</name></expr>)</condition><then pos:line="396" pos:column="32"> <block pos:line="396" pos:column="33">{
                <expr_stmt><expr><call><name pos:line="397" pos:column="17">handler</name><argument_list pos:line="397" pos:column="24">(<argument><expr><name pos:line="397" pos:column="25">this</name></expr></argument>, <argument><expr><name pos:line="397" pos:column="31">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="401" pos:column="9">private</specifier> <specifier pos:line="401" pos:column="17">static</specifier> <name><name pos:line="401" pos:column="24">HashSet</name><argument_list pos:line="401" pos:column="31">&lt;<argument><name pos:line="401" pos:column="32">string</name></argument>&gt;</argument_list></name></type> <name pos:line="401" pos:column="40">GetForbiddenDirectories</name><parameter_list pos:line="401" pos:column="63">()</parameter_list> <block pos:line="401" pos:column="66">{
            <decl_stmt><decl><type><name pos:line="402" pos:column="13">var</name></type> <name pos:line="402" pos:column="17">forbiddenDirectories</name> <init pos:line="402" pos:column="38">= <expr><op:operator pos:line="402" pos:column="40">new</op:operator> <call><name><name pos:line="402" pos:column="44">HashSet</name><argument_list pos:line="402" pos:column="51">&lt;<argument><name pos:line="402" pos:column="52">string</name></argument>&gt;</argument_list></name><argument_list pos:line="402" pos:column="59">(<argument><expr><name><name pos:line="402" pos:column="60">StringComparer</name><op:operator pos:line="402" pos:column="74">.</op:operator><name pos:line="402" pos:column="75">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="403" pos:column="13">var</name></type> <name pos:line="403" pos:column="17">userProfile</name> <init pos:line="403" pos:column="29">= <expr><call><name><name pos:line="403" pos:column="31">Environment</name><op:operator pos:line="403" pos:column="42">.</op:operator><name pos:line="403" pos:column="43">GetEnvironmentVariable</name></name><argument_list pos:line="403" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="403" pos:column="66">"USERPROFILE"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="404" pos:column="13">if<condition pos:line="404" pos:column="15">(<expr><name pos:line="404" pos:column="16">null</name> <op:operator pos:line="404" pos:column="21">!=</op:operator> <name pos:line="404" pos:column="24">userProfile</name></expr>)</condition><then pos:line="404" pos:column="36"> <block pos:line="404" pos:column="37">{
                <expr_stmt><expr><call><name><name pos:line="405" pos:column="17">forbiddenDirectories</name><op:operator pos:line="405" pos:column="37">.</op:operator><name pos:line="405" pos:column="38">Add</name></name><argument_list pos:line="405" pos:column="41">(<argument><expr><call><name pos:line="405" pos:column="42">GetFullPathForDirectory</name><argument_list pos:line="405" pos:column="65">(<argument><expr><name pos:line="405" pos:column="66">userProfile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="408" pos:column="13">string</name></type> <name pos:line="408" pos:column="20">myDocuments</name> <init pos:line="408" pos:column="32">= <expr><name pos:line="408" pos:column="34">null</name></expr></init></decl>;</decl_stmt>
            <foreach pos:line="409" pos:column="13">foreach(<init><decl><type><name pos:line="409" pos:column="21">var</name></type> <name pos:line="409" pos:column="25">specialFolder</name> <range pos:line="409" pos:column="39">in <expr><op:operator pos:line="409" pos:column="42">(</op:operator><name><name pos:line="409" pos:column="43">Environment</name><op:operator pos:line="409" pos:column="54">.</op:operator><name pos:line="409" pos:column="55">SpecialFolder</name><index pos:line="409" pos:column="68">[]</index></name><op:operator pos:line="409" pos:column="70">)</op:operator> <call><name><name pos:line="409" pos:column="72">Enum</name><op:operator pos:line="409" pos:column="76">.</op:operator><name pos:line="409" pos:column="77">GetValues</name></name><argument_list pos:line="409" pos:column="86">(<argument><expr><call><name pos:line="409" pos:column="87">typeof</name><argument_list pos:line="409" pos:column="93">(<argument><expr><name><name pos:line="409" pos:column="94">Environment</name><op:operator pos:line="409" pos:column="105">.</op:operator><name pos:line="409" pos:column="106">SpecialFolder</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></range></decl></init>) <block pos:line="409" pos:column="123">{
                <decl_stmt><decl><type><name pos:line="410" pos:column="17">var</name></type> <name pos:line="410" pos:column="21">directory</name> <init pos:line="410" pos:column="31">= <expr><call><name><name pos:line="410" pos:column="33">Environment</name><op:operator pos:line="410" pos:column="44">.</op:operator><name pos:line="410" pos:column="45">GetFolderPath</name></name><argument_list pos:line="410" pos:column="58">(<argument><expr><name pos:line="410" pos:column="59">specialFolder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="411" pos:column="17">if<condition pos:line="411" pos:column="19">(<expr><op:operator pos:line="411" pos:column="20">!</op:operator><call><name><name pos:line="411" pos:column="21">string</name><op:operator pos:line="411" pos:column="27">.</op:operator><name pos:line="411" pos:column="28">IsNullOrWhiteSpace</name></name><argument_list pos:line="411" pos:column="46">(<argument><expr><name pos:line="411" pos:column="47">directory</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="411" pos:column="58"> <block pos:line="411" pos:column="59">{
                    <expr_stmt><expr><call><name><name pos:line="412" pos:column="21">forbiddenDirectories</name><op:operator pos:line="412" pos:column="41">.</op:operator><name pos:line="412" pos:column="42">Add</name></name><argument_list pos:line="412" pos:column="45">(<argument><expr><call><name pos:line="412" pos:column="46">GetFullPathForDirectory</name><argument_list pos:line="412" pos:column="69">(<argument><expr><name pos:line="412" pos:column="70">directory</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <if pos:line="414" pos:column="17">if<condition pos:line="414" pos:column="19">(<expr><name pos:line="414" pos:column="20">specialFolder</name> <op:operator pos:line="414" pos:column="34">==</op:operator> <name><name pos:line="414" pos:column="37">Environment</name><op:operator pos:line="414" pos:column="48">.</op:operator><name pos:line="414" pos:column="49">SpecialFolder</name><op:operator pos:line="414" pos:column="62">.</op:operator><name pos:line="414" pos:column="63">MyDocuments</name></name></expr>)</condition><then pos:line="414" pos:column="75"> <block pos:line="414" pos:column="76">{
                    <expr_stmt><expr><name pos:line="415" pos:column="21">myDocuments</name> <op:operator pos:line="415" pos:column="33">=</op:operator> <name pos:line="415" pos:column="35">directory</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></foreach>

            <foreach pos:line="419" pos:column="13">foreach(<init><decl><type><name pos:line="419" pos:column="21">var</name></type> <name pos:line="419" pos:column="25">year</name> <range pos:line="419" pos:column="30">in <expr><op:operator pos:line="419" pos:column="33">new</op:operator><index pos:line="419" pos:column="36">[]</index> <block pos:line="419" pos:column="39">{ <expr><lit:literal type="string" pos:line="419" pos:column="41">"2005"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="419" pos:column="49">"2008"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="419" pos:column="57">"2010"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="419" pos:column="65">"2012"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="419" pos:column="73">"2013"</lit:literal></expr> }</block></expr></range></decl></init>) <block pos:line="419" pos:column="83">{
                <decl_stmt><decl><type><name pos:line="420" pos:column="17">var</name></type> <name pos:line="420" pos:column="21">directory</name> <init pos:line="420" pos:column="31">= <expr><lit:literal type="string" pos:line="420" pos:column="33">"Visual Studio "</lit:literal> <op:operator pos:line="420" pos:column="50">+</op:operator> <name pos:line="420" pos:column="52">year</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="421" pos:column="17">forbiddenDirectories</name><op:operator pos:line="421" pos:column="37">.</op:operator><name pos:line="421" pos:column="38">Add</name></name><argument_list pos:line="421" pos:column="41">(<argument><expr><call><name pos:line="421" pos:column="42">GetFullPathForDirectory</name><argument_list pos:line="421" pos:column="65">(<argument><expr><call><name><name pos:line="421" pos:column="66">Path</name><op:operator pos:line="421" pos:column="70">.</op:operator><name pos:line="421" pos:column="71">Combine</name></name><argument_list pos:line="421" pos:column="78">(<argument><expr><name pos:line="421" pos:column="79">myDocuments</name></expr></argument>, <argument><expr><name pos:line="421" pos:column="92">directory</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="422" pos:column="17">forbiddenDirectories</name><op:operator pos:line="422" pos:column="37">.</op:operator><name pos:line="422" pos:column="38">Add</name></name><argument_list pos:line="422" pos:column="41">(<argument><expr><call><name pos:line="422" pos:column="42">GetFullPathForDirectory</name><argument_list pos:line="422" pos:column="65">(<argument><expr><call><name><name pos:line="422" pos:column="66">Path</name><op:operator pos:line="422" pos:column="70">.</op:operator><name pos:line="422" pos:column="71">Combine</name></name><argument_list pos:line="422" pos:column="78">(<argument><expr><name pos:line="422" pos:column="79">myDocuments</name></expr></argument>, <argument><expr><name pos:line="422" pos:column="92">directory</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="422" pos:column="103">"Projects"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>

            <return pos:line="425" pos:column="13">return <expr><name pos:line="425" pos:column="20">forbiddenDirectories</name></expr>;</return>
        }</block></function>

        
        <comment type="line" pos:line="429" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="430" pos:column="9">/// Gets the full path for a given directory. This is normalized to include a trailing directory separator.</comment>
        <comment type="line" pos:line="431" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="432" pos:column="9">/// &lt;param name="directory"&gt;The directory to get a full path for.&lt;/param&gt;</comment>
        <comment type="line" pos:line="433" pos:column="9">/// &lt;returns&gt;The full path for &lt;paramref name="directory"/&gt;, with a trailing directory separator.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="434" pos:column="9">private</specifier> <specifier pos:line="434" pos:column="17">static</specifier> <name pos:line="434" pos:column="24">string</name></type> <name pos:line="434" pos:column="31">GetFullPathForDirectory</name><parameter_list pos:line="434" pos:column="54">(<param><decl><type><name pos:line="434" pos:column="55">string</name></type> <name pos:line="434" pos:column="62">directory</name></decl></param>)</parameter_list> <block pos:line="434" pos:column="73">{
            <if pos:line="435" pos:column="13">if<condition pos:line="435" pos:column="15">(<expr><call><name><name pos:line="435" pos:column="16">string</name><op:operator pos:line="435" pos:column="22">.</op:operator><name pos:line="435" pos:column="23">IsNullOrWhiteSpace</name></name><argument_list pos:line="435" pos:column="41">(<argument><expr><name pos:line="435" pos:column="42">directory</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="435" pos:column="53"> <block pos:line="435" pos:column="54">{
                <throw pos:line="436" pos:column="17">throw <expr><op:operator pos:line="436" pos:column="23">new</op:operator> <call><name pos:line="436" pos:column="27">ArgumentException</name><argument_list pos:line="436" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="436" pos:column="45">"path cannot be null, empty, or whitespace"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="436" pos:column="90">"directory"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <decl_stmt><decl><type><name pos:line="438" pos:column="13">var</name></type> <name pos:line="438" pos:column="17">path</name> <init pos:line="438" pos:column="22">= <expr><call><name><name pos:line="438" pos:column="24">Path</name><op:operator pos:line="438" pos:column="28">.</op:operator><name pos:line="438" pos:column="29">GetFullPath</name></name><argument_list pos:line="438" pos:column="40">(<argument><expr><name pos:line="438" pos:column="41">directory</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="439" pos:column="13">if<condition pos:line="439" pos:column="15">(<expr><name><name pos:line="439" pos:column="16">path</name><op:operator pos:line="439" pos:column="20">.</op:operator><name pos:line="439" pos:column="21">Length</name></name> <op:operator pos:line="439" pos:column="28">&gt;</op:operator> <lit:literal type="number" pos:line="439" pos:column="30">0</lit:literal> <op:operator pos:line="439" pos:column="32">&amp;&amp;</op:operator> <name><name pos:line="439" pos:column="35">path</name><index pos:line="439" pos:column="39">[<expr><name><name pos:line="439" pos:column="40">path</name><op:operator pos:line="439" pos:column="44">.</op:operator><name pos:line="439" pos:column="45">Length</name></name> <op:operator pos:line="439" pos:column="52">-</op:operator> <lit:literal type="number" pos:line="439" pos:column="54">1</lit:literal></expr>]</index></name> <op:operator pos:line="439" pos:column="57">!=</op:operator> <name><name pos:line="439" pos:column="60">Path</name><op:operator pos:line="439" pos:column="64">.</op:operator><name pos:line="439" pos:column="65">DirectorySeparatorChar</name></name></expr>)</condition><then pos:line="439" pos:column="88"> <block pos:line="439" pos:column="89">{
                <expr_stmt><expr><name pos:line="440" pos:column="17">path</name> <op:operator pos:line="440" pos:column="22">+=</op:operator> <name><name pos:line="440" pos:column="25">Path</name><op:operator pos:line="440" pos:column="29">.</op:operator><name pos:line="440" pos:column="30">DirectorySeparatorChar</name></name></expr>;</expr_stmt>
            }</block></then></if>
            <return pos:line="442" pos:column="13">return <expr><name pos:line="442" pos:column="20">path</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
