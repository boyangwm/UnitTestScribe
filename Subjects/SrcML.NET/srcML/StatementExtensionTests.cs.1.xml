<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data.Test\StatementExtensionTests.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2013 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">ABB</name><op:operator pos:line="12" pos:column="10">.</op:operator><name pos:line="12" pos:column="11">SrcML</name><op:operator pos:line="12" pos:column="16">.</op:operator><name pos:line="12" pos:column="17">Test</name><op:operator pos:line="12" pos:column="21">.</op:operator><name pos:line="12" pos:column="22">Utilities</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">NUnit</name><op:operator pos:line="13" pos:column="12">.</op:operator><name pos:line="13" pos:column="13">Framework</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Collections</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">Generic</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Linq</name></name>;</using>

<namespace pos:line="17" pos:column="1">namespace <name><name pos:line="17" pos:column="11">ABB</name><op:operator pos:line="17" pos:column="14">.</op:operator><name pos:line="17" pos:column="15">SrcML</name><op:operator pos:line="17" pos:column="20">.</op:operator><name pos:line="17" pos:column="21">Data</name><op:operator pos:line="17" pos:column="25">.</op:operator><name pos:line="17" pos:column="26">Test</name></name> <block pos:line="17" pos:column="31">{

    <class><attribute pos:line="19" pos:column="5">[<expr><name pos:line="19" pos:column="6">TestFixture</name></expr>]</attribute>
    <attribute pos:line="20" pos:column="5">[<expr><call><name pos:line="20" pos:column="6">Category</name><argument_list pos:line="20" pos:column="14">(<argument><expr><lit:literal type="string" pos:line="20" pos:column="15">"Build"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="21" pos:column="5">public</specifier> class <name pos:line="21" pos:column="18">StatementExtensionTests</name> <block pos:line="21" pos:column="42">{
        <decl_stmt><decl><type><specifier pos:line="22" pos:column="9">private</specifier> <name><name pos:line="22" pos:column="17">Dictionary</name><argument_list pos:line="22" pos:column="27">&lt;<argument><name pos:line="22" pos:column="28">Language</name></argument>, <argument><name pos:line="22" pos:column="38">AbstractCodeParser</name></argument>&gt;</argument_list></name></type> <name pos:line="22" pos:column="58">CodeParser</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="23" pos:column="9">private</specifier> <name><name pos:line="23" pos:column="17">Dictionary</name><argument_list pos:line="23" pos:column="27">&lt;<argument><name pos:line="23" pos:column="28">Language</name></argument>, <argument><name pos:line="23" pos:column="38">SrcMLFileUnitSetup</name></argument>&gt;</argument_list></name></type> <name pos:line="23" pos:column="58">FileUnitSetup</name></decl>;</decl_stmt>

        <function><type><attribute pos:line="25" pos:column="9">[<expr><name pos:line="25" pos:column="10">TestFixtureSetUp</name></expr>]</attribute>
        <specifier pos:line="26" pos:column="9">public</specifier> <name pos:line="26" pos:column="16">void</name></type> <name pos:line="26" pos:column="21">ClassSetup</name><parameter_list pos:line="26" pos:column="31">()</parameter_list> <block pos:line="26" pos:column="34">{
            <expr_stmt><expr><name pos:line="27" pos:column="13">FileUnitSetup</name> <op:operator pos:line="27" pos:column="27">=</op:operator> <op:operator pos:line="27" pos:column="29">new</op:operator> <call><name><name pos:line="27" pos:column="33">Dictionary</name><argument_list pos:line="27" pos:column="43">&lt;<argument><name pos:line="27" pos:column="44">Language</name></argument>, <argument><name pos:line="27" pos:column="54">SrcMLFileUnitSetup</name></argument>&gt;</argument_list></name><argument_list pos:line="27" pos:column="73">()</argument_list></call> <block pos:line="27" pos:column="76">{
                <expr><block pos:line="28" pos:column="17">{ <expr><name><name pos:line="28" pos:column="19">Language</name><op:operator pos:line="28" pos:column="27">.</op:operator><name pos:line="28" pos:column="28">CPlusPlus</name></name></expr><op:operator pos:line="28" pos:column="37">,</op:operator> <expr><op:operator pos:line="28" pos:column="39">new</op:operator> <call><name pos:line="28" pos:column="43">SrcMLFileUnitSetup</name><argument_list pos:line="28" pos:column="61">(<argument><expr><name><name pos:line="28" pos:column="62">Language</name><op:operator pos:line="28" pos:column="70">.</op:operator><name pos:line="28" pos:column="71">CPlusPlus</name></name></expr></argument>)</argument_list></call></expr> }</block></expr><op:operator pos:line="28" pos:column="83">,</op:operator>
                <expr><block pos:line="29" pos:column="17">{ <expr><name><name pos:line="29" pos:column="19">Language</name><op:operator pos:line="29" pos:column="27">.</op:operator><name pos:line="29" pos:column="28">CSharp</name></name></expr><op:operator pos:line="29" pos:column="34">,</op:operator> <expr><op:operator pos:line="29" pos:column="36">new</op:operator> <call><name pos:line="29" pos:column="40">SrcMLFileUnitSetup</name><argument_list pos:line="29" pos:column="58">(<argument><expr><name><name pos:line="29" pos:column="59">Language</name><op:operator pos:line="29" pos:column="67">.</op:operator><name pos:line="29" pos:column="68">CSharp</name></name></expr></argument>)</argument_list></call></expr> }</block></expr><op:operator pos:line="29" pos:column="77">,</op:operator>
                <expr><block pos:line="30" pos:column="17">{ <expr><name><name pos:line="30" pos:column="19">Language</name><op:operator pos:line="30" pos:column="27">.</op:operator><name pos:line="30" pos:column="28">Java</name></name></expr><op:operator pos:line="30" pos:column="32">,</op:operator> <expr><op:operator pos:line="30" pos:column="34">new</op:operator> <call><name pos:line="30" pos:column="38">SrcMLFileUnitSetup</name><argument_list pos:line="30" pos:column="56">(<argument><expr><name><name pos:line="30" pos:column="57">Language</name><op:operator pos:line="30" pos:column="65">.</op:operator><name pos:line="30" pos:column="66">Java</name></name></expr></argument>)</argument_list></call></expr> }</block></expr><op:operator pos:line="30" pos:column="73">,</op:operator>
            }</block></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="32" pos:column="13">CodeParser</name> <op:operator pos:line="32" pos:column="24">=</op:operator> <op:operator pos:line="32" pos:column="26">new</op:operator> <call><name><name pos:line="32" pos:column="30">Dictionary</name><argument_list pos:line="32" pos:column="40">&lt;<argument><name pos:line="32" pos:column="41">Language</name></argument>, <argument><name pos:line="32" pos:column="51">AbstractCodeParser</name></argument>&gt;</argument_list></name><argument_list pos:line="32" pos:column="70">()</argument_list></call> <block pos:line="32" pos:column="73">{
                <expr><block pos:line="33" pos:column="17">{ <expr><name><name pos:line="33" pos:column="19">Language</name><op:operator pos:line="33" pos:column="27">.</op:operator><name pos:line="33" pos:column="28">CPlusPlus</name></name></expr><op:operator pos:line="33" pos:column="37">,</op:operator> <expr><op:operator pos:line="33" pos:column="39">new</op:operator> <call><name pos:line="33" pos:column="43">CPlusPlusCodeParser</name><argument_list pos:line="33" pos:column="62">()</argument_list></call></expr> }</block></expr><op:operator pos:line="33" pos:column="66">,</op:operator>
                <expr><block pos:line="34" pos:column="17">{ <expr><name><name pos:line="34" pos:column="19">Language</name><op:operator pos:line="34" pos:column="27">.</op:operator><name pos:line="34" pos:column="28">CSharp</name></name></expr><op:operator pos:line="34" pos:column="34">,</op:operator> <expr><op:operator pos:line="34" pos:column="36">new</op:operator> <call><name pos:line="34" pos:column="40">CSharpCodeParser</name><argument_list pos:line="34" pos:column="56">()</argument_list></call></expr> }</block></expr><op:operator pos:line="34" pos:column="60">,</op:operator>
                <expr><block pos:line="35" pos:column="17">{ <expr><name><name pos:line="35" pos:column="19">Language</name><op:operator pos:line="35" pos:column="27">.</op:operator><name pos:line="35" pos:column="28">Java</name></name></expr><op:operator pos:line="35" pos:column="32">,</op:operator> <expr><op:operator pos:line="35" pos:column="34">new</op:operator> <call><name pos:line="35" pos:column="38">JavaCodeParser</name><argument_list pos:line="35" pos:column="52">()</argument_list></call></expr> }</block></expr><op:operator pos:line="35" pos:column="56">,</op:operator>
            }</block></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="39" pos:column="9">[<expr><name pos:line="39" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="40" pos:column="9">public</specifier> <name pos:line="40" pos:column="16">void</name></type> <name pos:line="40" pos:column="21">TestGetCallsTo_Simple</name><parameter_list pos:line="40" pos:column="42">()</parameter_list> <block pos:line="40" pos:column="45">{
            <comment type="line" pos:line="41" pos:column="13">//void foo() {</comment>
            <comment type="line" pos:line="42" pos:column="13">//  printf("Hello");</comment>
            <comment type="line" pos:line="43" pos:column="13">//}</comment>
            <comment type="line" pos:line="44" pos:column="13">//</comment>
            <comment type="line" pos:line="45" pos:column="13">//int main() {</comment>
            <comment type="line" pos:line="46" pos:column="13">//  foo();</comment>
            <comment type="line" pos:line="47" pos:column="13">//  return 0;</comment>
            <comment type="line" pos:line="48" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="49" pos:column="13">string</name></type> <name pos:line="49" pos:column="20">xml</name> <init pos:line="49" pos:column="24">= <expr><lit:literal type="string" pos:line="49" pos:column="26">@"&lt;function&gt;&lt;type&gt;&lt;name pos:line=""1"" pos:column="&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""1"" pos:column="&gt;foo&lt;/name&gt;&lt;parameter_list pos:line=""1"" pos:column="&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""1"" pos:column=""&gt;{
  &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name pos:line=""2"" pos:column="&gt;printf&lt;/name&gt;&lt;argument_list pos:line=""2"" pos:column="&gt;(&lt;argument&gt;&lt;expr&gt;&lt;lit:literal type=""string"" pos:line=""2"" pos:column=&gt;""Hello&lt;/lit:literal&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
}&lt;/block&gt;&lt;/function&gt;

&lt;function&gt;&lt;type&gt;&lt;name pos:line=""5"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""5"" pos:column="&gt;main&lt;/name&gt;&lt;parameter_list pos:line=""5"" pos:column="&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""5"" pos:column=""&gt;{
  &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name pos:line=""6"" pos:column="&gt;foo&lt;/name&gt;&lt;argument_list pos:line=""6"" pos:column="&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
  &lt;return pos:line=""7"" pos:column="&gt;return &lt;expr&gt;&lt;lit:literal type=""number"" pos:line=""7"" pos:column=&gt;0&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt;
}&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="57" pos:column="13">var</name></type> <name pos:line="57" pos:column="17">xmlElement</name> <init pos:line="57" pos:column="28">= <expr><name><name pos:line="57" pos:column="30">FileUnitSetup</name><index pos:line="57" pos:column="43">[<expr><name><name pos:line="57" pos:column="44">Language</name><op:operator pos:line="57" pos:column="52">.</op:operator><name pos:line="57" pos:column="53">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="57" pos:column="63">.</op:operator><call><name pos:line="57" pos:column="64">GetFileUnitForXmlSnippet</name><argument_list pos:line="57" pos:column="88">(<argument><expr><name pos:line="57" pos:column="89">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="57" pos:column="94">"foo.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="59" pos:column="13">var</name></type> <name pos:line="59" pos:column="17">globalScope</name> <init pos:line="59" pos:column="29">= <expr><name><name pos:line="59" pos:column="31">CodeParser</name><index pos:line="59" pos:column="41">[<expr><name><name pos:line="59" pos:column="42">Language</name><op:operator pos:line="59" pos:column="50">.</op:operator><name pos:line="59" pos:column="51">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="59" pos:column="61">.</op:operator><call><name pos:line="59" pos:column="62">ParseFileUnit</name><argument_list pos:line="59" pos:column="75">(<argument><expr><name pos:line="59" pos:column="76">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="60" pos:column="13">var</name></type> <name pos:line="60" pos:column="17">fooMethod</name> <init pos:line="60" pos:column="27">= <expr><call><name><name pos:line="60" pos:column="29">globalScope</name><op:operator pos:line="60" pos:column="40">.</op:operator><name><name pos:line="60" pos:column="41">GetNamedChildren</name><argument_list pos:line="60" pos:column="57">&lt;<argument><name pos:line="60" pos:column="58">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="60" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="60" pos:column="76">"foo"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="60" pos:column="82">.</op:operator><call><name pos:line="60" pos:column="83">First</name><argument_list pos:line="60" pos:column="88">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="61" pos:column="13">var</name></type> <name pos:line="61" pos:column="17">mainMethod</name> <init pos:line="61" pos:column="28">= <expr><call><name><name pos:line="61" pos:column="30">globalScope</name><op:operator pos:line="61" pos:column="41">.</op:operator><name><name pos:line="61" pos:column="42">GetNamedChildren</name><argument_list pos:line="61" pos:column="58">&lt;<argument><name pos:line="61" pos:column="59">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="61" pos:column="76">(<argument><expr><lit:literal type="string" pos:line="61" pos:column="77">"main"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="61" pos:column="84">.</op:operator><call><name pos:line="61" pos:column="85">First</name><argument_list pos:line="61" pos:column="90">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="63" pos:column="13">Assert</name><op:operator pos:line="63" pos:column="19">.</op:operator><name pos:line="63" pos:column="20">That</name></name><argument_list pos:line="63" pos:column="24">(<argument><expr><call><name><name pos:line="63" pos:column="25">mainMethod</name><op:operator pos:line="63" pos:column="35">.</op:operator><name pos:line="63" pos:column="36">ContainsCallTo</name></name><argument_list pos:line="63" pos:column="50">(<argument><expr><name pos:line="63" pos:column="51">fooMethod</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="64" pos:column="13">var</name></type> <name pos:line="64" pos:column="17">fooCalls</name> <init pos:line="64" pos:column="26">= <expr><call><name><name pos:line="64" pos:column="28">mainMethod</name><op:operator pos:line="64" pos:column="38">.</op:operator><name pos:line="64" pos:column="39">GetCallsTo</name></name><argument_list pos:line="64" pos:column="49">(<argument><expr><name pos:line="64" pos:column="50">fooMethod</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="64" pos:column="61">true</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="64" pos:column="66">.</op:operator><call><name pos:line="64" pos:column="67">ToList</name><argument_list pos:line="64" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="65" pos:column="13">Assert</name><op:operator pos:line="65" pos:column="19">.</op:operator><name pos:line="65" pos:column="20">AreEqual</name></name><argument_list pos:line="65" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="65" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="65" pos:column="32">fooCalls</name><op:operator pos:line="65" pos:column="40">.</op:operator><name pos:line="65" pos:column="41">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="66" pos:column="13">var</name></type> <name pos:line="66" pos:column="17">expectedFooCall</name> <init pos:line="66" pos:column="33">= <expr><call><name><name pos:line="66" pos:column="35">mainMethod</name><op:operator pos:line="66" pos:column="45">.</op:operator><name><name pos:line="66" pos:column="46">FindExpressions</name><argument_list pos:line="66" pos:column="61">&lt;<argument><name pos:line="66" pos:column="62">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="66" pos:column="73">(<argument><expr><lit:literal type="boolean" pos:line="66" pos:column="74">true</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="66" pos:column="79">.</op:operator><call><name pos:line="66" pos:column="80">First</name><argument_list pos:line="66" pos:column="85">(<argument><expr><lambda><name pos:line="66" pos:column="86">mc</name> <op:operator pos:line="66" pos:column="89">=&gt;</op:operator> <name><name pos:line="66" pos:column="92">mc</name><op:operator pos:line="66" pos:column="94">.</op:operator><name pos:line="66" pos:column="95">Name</name></name> <op:operator pos:line="66" pos:column="100">==</op:operator> <lit:literal type="string" pos:line="66" pos:column="103">"foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="67" pos:column="13">Assert</name><op:operator pos:line="67" pos:column="19">.</op:operator><name pos:line="67" pos:column="20">AreSame</name></name><argument_list pos:line="67" pos:column="27">(<argument><expr><name pos:line="67" pos:column="28">expectedFooCall</name></expr></argument>, <argument><expr><name><name pos:line="67" pos:column="45">fooCalls</name><index pos:line="67" pos:column="53">[<expr><lit:literal type="number" pos:line="67" pos:column="54">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="69" pos:column="13">var</name></type> <name pos:line="69" pos:column="17">callsToFoo</name> <init pos:line="69" pos:column="28">= <expr><call><name><name pos:line="69" pos:column="30">fooMethod</name><op:operator pos:line="69" pos:column="39">.</op:operator><name pos:line="69" pos:column="40">GetCallsToSelf</name></name><argument_list pos:line="69" pos:column="54">()</argument_list></call><op:operator pos:line="69" pos:column="56">.</op:operator><call><name pos:line="69" pos:column="57">ToList</name><argument_list pos:line="69" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="70" pos:column="13">Assert</name><op:operator pos:line="70" pos:column="19">.</op:operator><name pos:line="70" pos:column="20">AreEqual</name></name><argument_list pos:line="70" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="70" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="70" pos:column="32">callsToFoo</name><op:operator pos:line="70" pos:column="42">.</op:operator><name pos:line="70" pos:column="43">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="71" pos:column="13">Assert</name><op:operator pos:line="71" pos:column="19">.</op:operator><name pos:line="71" pos:column="20">AreSame</name></name><argument_list pos:line="71" pos:column="27">(<argument><expr><name pos:line="71" pos:column="28">expectedFooCall</name></expr></argument>, <argument><expr><name><name pos:line="71" pos:column="45">callsToFoo</name><index pos:line="71" pos:column="55">[<expr><lit:literal type="number" pos:line="71" pos:column="56">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="74" pos:column="9">[<expr><name pos:line="74" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="75" pos:column="9">public</specifier> <name pos:line="75" pos:column="16">void</name></type> <name pos:line="75" pos:column="21">TestGetCallsTo_Multiple</name><parameter_list pos:line="75" pos:column="44">()</parameter_list> <block pos:line="75" pos:column="47">{
            <comment type="line" pos:line="76" pos:column="13">//void star() { }</comment>
            <comment type="line" pos:line="77" pos:column="13">//</comment>
            <comment type="line" pos:line="78" pos:column="13">//void bar() { star(); }</comment>
            <comment type="line" pos:line="79" pos:column="13">//</comment>
            <comment type="line" pos:line="80" pos:column="13">//void foo() {</comment>
            <comment type="line" pos:line="81" pos:column="13">//    bar();</comment>
            <comment type="line" pos:line="82" pos:column="13">//    if(0) bar();</comment>
            <comment type="line" pos:line="83" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="84" pos:column="13">string</name></type> <name pos:line="84" pos:column="20">xml</name> <init pos:line="84" pos:column="24">= <expr><lit:literal type="string" pos:line="84" pos:column="26">@"&lt;function&gt;&lt;type&gt;&lt;name pos:line=""1"" pos:column="&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""1"" pos:column="&gt;star&lt;/name&gt;&lt;parameter_list pos:line=""1"" pos:column=""&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""1"" pos:column=""&gt;{ }&lt;/block&gt;&lt;/function&gt;

&lt;function&gt;&lt;type&gt;&lt;name pos:line=""3"" pos:column="&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""3"" pos:column="&gt;bar&lt;/name&gt;&lt;parameter_list pos:line=""3"" pos:column="&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""3"" pos:column=""&gt;{ &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name pos:line=""3"" pos:column=""&gt;star&lt;/name&gt;&lt;argument_list pos:line=""3"" pos:column=""&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt; }&lt;/block&gt;&lt;/function&gt;

&lt;function&gt;&lt;type&gt;&lt;name pos:line=""5"" pos:column="&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""5"" pos:column="&gt;foo&lt;/name&gt;&lt;parameter_list pos:line=""5"" pos:column="&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""5"" pos:column=""&gt;{
    &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name pos:line=""6"" pos:column="&gt;bar&lt;/name&gt;&lt;argument_list pos:line=""6"" pos:column="&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
    &lt;if pos:line=""7"" pos:column="&gt;if&lt;condition pos:line=""7"" pos:column="&gt;(&lt;expr&gt;&lt;lit:literal type=""number"" pos:line=""7"" pos:column&gt;0&lt;/lit:literal&gt;&lt;/expr&gt;)&lt;/condition&gt;&lt;then pos:line=""7"" pos:column=""&gt; &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name pos:line=""7"" pos:column=""&gt;bar&lt;/name&gt;&lt;argument_list pos:line=""7"" pos:column=""&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;&lt;/then&gt;&lt;/if&gt;
}&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="93" pos:column="13">var</name></type> <name pos:line="93" pos:column="17">unit</name> <init pos:line="93" pos:column="22">= <expr><name><name pos:line="93" pos:column="24">FileUnitSetup</name><index pos:line="93" pos:column="37">[<expr><name><name pos:line="93" pos:column="38">Language</name><op:operator pos:line="93" pos:column="46">.</op:operator><name pos:line="93" pos:column="47">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="93" pos:column="57">.</op:operator><call><name pos:line="93" pos:column="58">GetFileUnitForXmlSnippet</name><argument_list pos:line="93" pos:column="82">(<argument><expr><name pos:line="93" pos:column="83">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="93" pos:column="88">"test.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="95" pos:column="13">var</name></type> <name pos:line="95" pos:column="17">globalScope</name> <init pos:line="95" pos:column="29">= <expr><name><name pos:line="95" pos:column="31">CodeParser</name><index pos:line="95" pos:column="41">[<expr><name><name pos:line="95" pos:column="42">Language</name><op:operator pos:line="95" pos:column="50">.</op:operator><name pos:line="95" pos:column="51">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="95" pos:column="61">.</op:operator><call><name pos:line="95" pos:column="62">ParseFileUnit</name><argument_list pos:line="95" pos:column="75">(<argument><expr><name pos:line="95" pos:column="76">unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="97" pos:column="13">var</name></type> <name pos:line="97" pos:column="17">methodFoo</name> <init pos:line="97" pos:column="27">= <expr><call><name><name pos:line="97" pos:column="29">globalScope</name><op:operator pos:line="97" pos:column="40">.</op:operator><name><name pos:line="97" pos:column="41">GetDescendants</name><argument_list pos:line="97" pos:column="55">&lt;<argument><name pos:line="97" pos:column="56">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="97" pos:column="73">()</argument_list></call><op:operator pos:line="97" pos:column="75">.</op:operator><call><name pos:line="97" pos:column="76">First</name><argument_list pos:line="97" pos:column="81">(<argument><expr><lambda><name pos:line="97" pos:column="82">md</name> <op:operator pos:line="97" pos:column="85">=&gt;</op:operator> <name><name pos:line="97" pos:column="88">md</name><op:operator pos:line="97" pos:column="90">.</op:operator><name pos:line="97" pos:column="91">Name</name></name> <op:operator pos:line="97" pos:column="96">==</op:operator> <lit:literal type="string" pos:line="97" pos:column="99">"foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="98" pos:column="13">var</name></type> <name pos:line="98" pos:column="17">methodBar</name> <init pos:line="98" pos:column="27">= <expr><call><name><name pos:line="98" pos:column="29">globalScope</name><op:operator pos:line="98" pos:column="40">.</op:operator><name><name pos:line="98" pos:column="41">GetDescendants</name><argument_list pos:line="98" pos:column="55">&lt;<argument><name pos:line="98" pos:column="56">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="98" pos:column="73">()</argument_list></call><op:operator pos:line="98" pos:column="75">.</op:operator><call><name pos:line="98" pos:column="76">First</name><argument_list pos:line="98" pos:column="81">(<argument><expr><lambda><name pos:line="98" pos:column="82">md</name> <op:operator pos:line="98" pos:column="85">=&gt;</op:operator> <name><name pos:line="98" pos:column="88">md</name><op:operator pos:line="98" pos:column="90">.</op:operator><name pos:line="98" pos:column="91">Name</name></name> <op:operator pos:line="98" pos:column="96">==</op:operator> <lit:literal type="string" pos:line="98" pos:column="99">"bar"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="99" pos:column="13">var</name></type> <name pos:line="99" pos:column="17">methodStar</name> <init pos:line="99" pos:column="28">= <expr><call><name><name pos:line="99" pos:column="30">globalScope</name><op:operator pos:line="99" pos:column="41">.</op:operator><name><name pos:line="99" pos:column="42">GetDescendants</name><argument_list pos:line="99" pos:column="56">&lt;<argument><name pos:line="99" pos:column="57">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="99" pos:column="74">()</argument_list></call><op:operator pos:line="99" pos:column="76">.</op:operator><call><name pos:line="99" pos:column="77">First</name><argument_list pos:line="99" pos:column="82">(<argument><expr><lambda><name pos:line="99" pos:column="83">md</name> <op:operator pos:line="99" pos:column="86">=&gt;</op:operator> <name><name pos:line="99" pos:column="89">md</name><op:operator pos:line="99" pos:column="91">.</op:operator><name pos:line="99" pos:column="92">Name</name></name> <op:operator pos:line="99" pos:column="97">==</op:operator> <lit:literal type="string" pos:line="99" pos:column="100">"star"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="101" pos:column="13">Assert</name><op:operator pos:line="101" pos:column="19">.</op:operator><name pos:line="101" pos:column="20">That</name></name><argument_list pos:line="101" pos:column="24">(<argument><expr><call><name><name pos:line="101" pos:column="25">methodFoo</name><op:operator pos:line="101" pos:column="34">.</op:operator><name pos:line="101" pos:column="35">ContainsCallTo</name></name><argument_list pos:line="101" pos:column="49">(<argument><expr><name pos:line="101" pos:column="50">methodBar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="102" pos:column="13">Assert</name><op:operator pos:line="102" pos:column="19">.</op:operator><name pos:line="102" pos:column="20">AreEqual</name></name><argument_list pos:line="102" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="102" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="102" pos:column="32">methodFoo</name><op:operator pos:line="102" pos:column="41">.</op:operator><name pos:line="102" pos:column="42">GetCallsTo</name></name><argument_list pos:line="102" pos:column="52">(<argument><expr><name pos:line="102" pos:column="53">methodBar</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="102" pos:column="64">true</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="102" pos:column="69">.</op:operator><call><name pos:line="102" pos:column="70">Count</name><argument_list pos:line="102" pos:column="75">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="104" pos:column="13">Assert</name><op:operator pos:line="104" pos:column="19">.</op:operator><name pos:line="104" pos:column="20">That</name></name><argument_list pos:line="104" pos:column="24">(<argument><expr><call><name><name pos:line="104" pos:column="25">methodBar</name><op:operator pos:line="104" pos:column="34">.</op:operator><name pos:line="104" pos:column="35">ContainsCallTo</name></name><argument_list pos:line="104" pos:column="49">(<argument><expr><name pos:line="104" pos:column="50">methodStar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="105" pos:column="13">Assert</name><op:operator pos:line="105" pos:column="19">.</op:operator><name pos:line="105" pos:column="20">AreEqual</name></name><argument_list pos:line="105" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="105" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="105" pos:column="32">methodBar</name><op:operator pos:line="105" pos:column="41">.</op:operator><name pos:line="105" pos:column="42">GetCallsTo</name></name><argument_list pos:line="105" pos:column="52">(<argument><expr><name pos:line="105" pos:column="53">methodStar</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="105" pos:column="65">true</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="105" pos:column="70">.</op:operator><call><name pos:line="105" pos:column="71">Count</name><argument_list pos:line="105" pos:column="76">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="107" pos:column="13">Assert</name><op:operator pos:line="107" pos:column="19">.</op:operator><name pos:line="107" pos:column="20">IsFalse</name></name><argument_list pos:line="107" pos:column="27">(<argument><expr><call><name><name pos:line="107" pos:column="28">methodFoo</name><op:operator pos:line="107" pos:column="37">.</op:operator><name pos:line="107" pos:column="38">ContainsCallTo</name></name><argument_list pos:line="107" pos:column="52">(<argument><expr><name pos:line="107" pos:column="53">methodStar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="108" pos:column="13">Assert</name><op:operator pos:line="108" pos:column="19">.</op:operator><name pos:line="108" pos:column="20">IsFalse</name></name><argument_list pos:line="108" pos:column="27">(<argument><expr><call><name><name pos:line="108" pos:column="28">methodBar</name><op:operator pos:line="108" pos:column="37">.</op:operator><name pos:line="108" pos:column="38">ContainsCallTo</name></name><argument_list pos:line="108" pos:column="52">(<argument><expr><name pos:line="108" pos:column="53">methodFoo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="109" pos:column="13">Assert</name><op:operator pos:line="109" pos:column="19">.</op:operator><name pos:line="109" pos:column="20">IsFalse</name></name><argument_list pos:line="109" pos:column="27">(<argument><expr><call><name><name pos:line="109" pos:column="28">methodStar</name><op:operator pos:line="109" pos:column="38">.</op:operator><name pos:line="109" pos:column="39">ContainsCallTo</name></name><argument_list pos:line="109" pos:column="53">(<argument><expr><name pos:line="109" pos:column="54">methodFoo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="110" pos:column="13">Assert</name><op:operator pos:line="110" pos:column="19">.</op:operator><name pos:line="110" pos:column="20">IsFalse</name></name><argument_list pos:line="110" pos:column="27">(<argument><expr><call><name><name pos:line="110" pos:column="28">methodStar</name><op:operator pos:line="110" pos:column="38">.</op:operator><name pos:line="110" pos:column="39">ContainsCallTo</name></name><argument_list pos:line="110" pos:column="53">(<argument><expr><name pos:line="110" pos:column="54">methodBar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="113" pos:column="9">[<expr><name pos:line="113" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="114" pos:column="9">public</specifier> <name pos:line="114" pos:column="16">void</name></type> <name pos:line="114" pos:column="21">TestGetCallsTo_Masking</name><parameter_list pos:line="114" pos:column="43">()</parameter_list> <block pos:line="114" pos:column="46">{
            <comment type="line" pos:line="115" pos:column="13">//void foo() { printf("Global foo"); }</comment>
            <comment type="line" pos:line="116" pos:column="13">//</comment>
            <comment type="line" pos:line="117" pos:column="13">//class Bar {</comment>
            <comment type="line" pos:line="118" pos:column="13">//public:</comment>
            <comment type="line" pos:line="119" pos:column="13">//  void foo() { printf("Bar::foo"); }</comment>
            <comment type="line" pos:line="120" pos:column="13">//  void baz() { foo(); }</comment>
            <comment type="line" pos:line="121" pos:column="13">//};</comment>
            <decl_stmt><decl><type><name pos:line="122" pos:column="13">var</name></type> <name pos:line="122" pos:column="17">xml</name> <init pos:line="122" pos:column="21">= <expr><lit:literal type="string" pos:line="122" pos:column="23">@"&lt;function&gt;&lt;type&gt;&lt;name pos:line=""1"" pos:column="&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""1"" pos:column="&gt;foo&lt;/name&gt;&lt;parameter_list pos:line=""1"" pos:column="&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""1"" pos:column=""&gt;{ &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name pos:line=""1"" pos:column=""&gt;printf&lt;/name&gt;&lt;argument_list pos:line=""1"" pos:column=""&gt;(&lt;argument&gt;&lt;expr&gt;&lt;lit:literal type=""string"" pos:line=""1"" pos:column=&gt;""Global foo&lt;/lit:literal&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt; }&lt;/block&gt;&lt;/function&gt;

&lt;class pos:line=""3"" pos:column="&gt;class &lt;name pos:line=""3"" pos:column="&gt;Bar&lt;/name&gt; &lt;block pos:line=""3"" pos:column=""&gt;{&lt;private type=""default"" pos:line=""3"" pos:column=&gt;
&lt;/private&gt;&lt;public pos:line=""4"" pos:column="&gt;public:
  &lt;function&gt;&lt;type&gt;&lt;name pos:line=""5"" pos:column="&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""5"" pos:column="&gt;foo&lt;/name&gt;&lt;parameter_list pos:line=""5"" pos:column=""&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""5"" pos:column=""&gt;{ &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name pos:line=""5"" pos:column=""&gt;printf&lt;/name&gt;&lt;argument_list pos:line=""5"" pos:column=""&gt;(&lt;argument&gt;&lt;expr&gt;&lt;lit:literal type=""string"" pos:line=""5"" pos:column=&gt;""Bar::foo&lt;/lit:literal&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt; }&lt;/block&gt;&lt;/function&gt;
  &lt;function&gt;&lt;type&gt;&lt;name pos:line=""6"" pos:column="&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""6"" pos:column="&gt;baz&lt;/name&gt;&lt;parameter_list pos:line=""6"" pos:column=""&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""6"" pos:column=""&gt;{ &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name pos:line=""6"" pos:column=""&gt;foo&lt;/name&gt;&lt;argument_list pos:line=""6"" pos:column=""&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt; }&lt;/block&gt;&lt;/function&gt;
&lt;/public&gt;}&lt;/block&gt;;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="129" pos:column="13">var</name></type> <name pos:line="129" pos:column="17">xmlElement</name> <init pos:line="129" pos:column="28">= <expr><name><name pos:line="129" pos:column="30">FileUnitSetup</name><index pos:line="129" pos:column="43">[<expr><name><name pos:line="129" pos:column="44">Language</name><op:operator pos:line="129" pos:column="52">.</op:operator><name pos:line="129" pos:column="53">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="129" pos:column="63">.</op:operator><call><name pos:line="129" pos:column="64">GetFileUnitForXmlSnippet</name><argument_list pos:line="129" pos:column="88">(<argument><expr><name pos:line="129" pos:column="89">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="129" pos:column="94">"Bar.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="131" pos:column="13">var</name></type> <name pos:line="131" pos:column="17">globalScope</name> <init pos:line="131" pos:column="29">= <expr><name><name pos:line="131" pos:column="31">CodeParser</name><index pos:line="131" pos:column="41">[<expr><name><name pos:line="131" pos:column="42">Language</name><op:operator pos:line="131" pos:column="50">.</op:operator><name pos:line="131" pos:column="51">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="131" pos:column="61">.</op:operator><call><name pos:line="131" pos:column="62">ParseFileUnit</name><argument_list pos:line="131" pos:column="75">(<argument><expr><name pos:line="131" pos:column="76">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="132" pos:column="13">var</name></type> <name pos:line="132" pos:column="17">globalFooMethod</name> <init pos:line="132" pos:column="33">= <expr><call><name><name pos:line="132" pos:column="35">globalScope</name><op:operator pos:line="132" pos:column="46">.</op:operator><name><name pos:line="132" pos:column="47">GetNamedChildren</name><argument_list pos:line="132" pos:column="63">&lt;<argument><name pos:line="132" pos:column="64">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="132" pos:column="81">(<argument><expr><lit:literal type="string" pos:line="132" pos:column="82">"foo"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="132" pos:column="88">.</op:operator><call><name pos:line="132" pos:column="89">First</name><argument_list pos:line="132" pos:column="94">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="133" pos:column="13">var</name></type> <name pos:line="133" pos:column="17">bar</name> <init pos:line="133" pos:column="21">= <expr><call><name><name pos:line="133" pos:column="23">globalScope</name><op:operator pos:line="133" pos:column="34">.</op:operator><name><name pos:line="133" pos:column="35">GetNamedChildren</name><argument_list pos:line="133" pos:column="51">&lt;<argument><name pos:line="133" pos:column="52">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="133" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="133" pos:column="68">"Bar"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="133" pos:column="74">.</op:operator><call><name pos:line="133" pos:column="75">First</name><argument_list pos:line="133" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="134" pos:column="13">var</name></type> <name pos:line="134" pos:column="17">barFooMethod</name> <init pos:line="134" pos:column="30">= <expr><call><name><name pos:line="134" pos:column="32">bar</name><op:operator pos:line="134" pos:column="35">.</op:operator><name><name pos:line="134" pos:column="36">GetNamedChildren</name><argument_list pos:line="134" pos:column="52">&lt;<argument><name pos:line="134" pos:column="53">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="134" pos:column="70">(<argument><expr><lit:literal type="string" pos:line="134" pos:column="71">"foo"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="134" pos:column="77">.</op:operator><call><name pos:line="134" pos:column="78">First</name><argument_list pos:line="134" pos:column="83">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="135" pos:column="13">var</name></type> <name pos:line="135" pos:column="17">bazMethod</name> <init pos:line="135" pos:column="27">= <expr><call><name><name pos:line="135" pos:column="29">bar</name><op:operator pos:line="135" pos:column="32">.</op:operator><name><name pos:line="135" pos:column="33">GetNamedChildren</name><argument_list pos:line="135" pos:column="49">&lt;<argument><name pos:line="135" pos:column="50">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="135" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="135" pos:column="68">"baz"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="135" pos:column="74">.</op:operator><call><name pos:line="135" pos:column="75">First</name><argument_list pos:line="135" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="137" pos:column="13">Assert</name><op:operator pos:line="137" pos:column="19">.</op:operator><name pos:line="137" pos:column="20">That</name></name><argument_list pos:line="137" pos:column="24">(<argument><expr><call><name><name pos:line="137" pos:column="25">bazMethod</name><op:operator pos:line="137" pos:column="34">.</op:operator><name pos:line="137" pos:column="35">ContainsCallTo</name></name><argument_list pos:line="137" pos:column="49">(<argument><expr><name pos:line="137" pos:column="50">barFooMethod</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="138" pos:column="13">Assert</name><op:operator pos:line="138" pos:column="19">.</op:operator><name pos:line="138" pos:column="20">IsFalse</name></name><argument_list pos:line="138" pos:column="27">(<argument><expr><call><name><name pos:line="138" pos:column="28">bazMethod</name><op:operator pos:line="138" pos:column="37">.</op:operator><name pos:line="138" pos:column="38">ContainsCallTo</name></name><argument_list pos:line="138" pos:column="52">(<argument><expr><name pos:line="138" pos:column="53">globalFooMethod</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="139" pos:column="13">var</name></type> <name pos:line="139" pos:column="17">fooCalls</name> <init pos:line="139" pos:column="26">= <expr><call><name><name pos:line="139" pos:column="28">bazMethod</name><op:operator pos:line="139" pos:column="37">.</op:operator><name pos:line="139" pos:column="38">GetCallsTo</name></name><argument_list pos:line="139" pos:column="48">(<argument><expr><name pos:line="139" pos:column="49">barFooMethod</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="139" pos:column="63">true</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="139" pos:column="68">.</op:operator><call><name pos:line="139" pos:column="69">ToList</name><argument_list pos:line="139" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="140" pos:column="13">Assert</name><op:operator pos:line="140" pos:column="19">.</op:operator><name pos:line="140" pos:column="20">AreEqual</name></name><argument_list pos:line="140" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="140" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="140" pos:column="32">fooCalls</name><op:operator pos:line="140" pos:column="40">.</op:operator><name pos:line="140" pos:column="41">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="141" pos:column="13">var</name></type> <name pos:line="141" pos:column="17">expectedFooCall</name> <init pos:line="141" pos:column="33">= <expr><call><name><name pos:line="141" pos:column="35">bazMethod</name><op:operator pos:line="141" pos:column="44">.</op:operator><name><name pos:line="141" pos:column="45">FindExpressions</name><argument_list pos:line="141" pos:column="60">&lt;<argument><name pos:line="141" pos:column="61">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="141" pos:column="72">(<argument><expr><lit:literal type="boolean" pos:line="141" pos:column="73">true</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="141" pos:column="78">.</op:operator><call><name pos:line="141" pos:column="79">First</name><argument_list pos:line="141" pos:column="84">(<argument><expr><lambda><name pos:line="141" pos:column="85">mc</name> <op:operator pos:line="141" pos:column="88">=&gt;</op:operator> <name><name pos:line="141" pos:column="91">mc</name><op:operator pos:line="141" pos:column="93">.</op:operator><name pos:line="141" pos:column="94">Name</name></name> <op:operator pos:line="141" pos:column="99">==</op:operator> <lit:literal type="string" pos:line="141" pos:column="102">"foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="142" pos:column="13">Assert</name><op:operator pos:line="142" pos:column="19">.</op:operator><name pos:line="142" pos:column="20">AreSame</name></name><argument_list pos:line="142" pos:column="27">(<argument><expr><name pos:line="142" pos:column="28">expectedFooCall</name></expr></argument>, <argument><expr><name><name pos:line="142" pos:column="45">fooCalls</name><index pos:line="142" pos:column="53">[<expr><lit:literal type="number" pos:line="142" pos:column="54">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="144" pos:column="13">Assert</name><op:operator pos:line="144" pos:column="19">.</op:operator><name pos:line="144" pos:column="20">IsEmpty</name></name><argument_list pos:line="144" pos:column="27">(<argument><expr><call><name><name pos:line="144" pos:column="28">globalFooMethod</name><op:operator pos:line="144" pos:column="43">.</op:operator><name pos:line="144" pos:column="44">GetCallsToSelf</name></name><argument_list pos:line="144" pos:column="58">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="145" pos:column="13">Assert</name><op:operator pos:line="145" pos:column="19">.</op:operator><name pos:line="145" pos:column="20">AreEqual</name></name><argument_list pos:line="145" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="145" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="145" pos:column="32">barFooMethod</name><op:operator pos:line="145" pos:column="44">.</op:operator><name pos:line="145" pos:column="45">GetCallsToSelf</name></name><argument_list pos:line="145" pos:column="59">()</argument_list></call><op:operator pos:line="145" pos:column="61">.</op:operator><call><name pos:line="145" pos:column="62">Count</name><argument_list pos:line="145" pos:column="67">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="148" pos:column="9">[<expr><name pos:line="148" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="149" pos:column="9">public</specifier> <name pos:line="149" pos:column="16">void</name></type> <name pos:line="149" pos:column="21">TestGetCallsTo_NonRecursive</name><parameter_list pos:line="149" pos:column="48">()</parameter_list> <block pos:line="149" pos:column="51">{
            <comment type="line" pos:line="150" pos:column="13">//int Qux() { return 42; }</comment>
            <comment type="line" pos:line="151" pos:column="13">//int Xyzzy() { return 17; }</comment>
            <comment type="line" pos:line="152" pos:column="13">//</comment>
            <comment type="line" pos:line="153" pos:column="13">//void foo() {</comment>
            <comment type="line" pos:line="154" pos:column="13">//  if(Qux()) {</comment>
            <comment type="line" pos:line="155" pos:column="13">//    print(Xyzzy());</comment>
            <comment type="line" pos:line="156" pos:column="13">//  }</comment>
            <comment type="line" pos:line="157" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="158" pos:column="13">string</name></type> <name pos:line="158" pos:column="20">xml</name> <init pos:line="158" pos:column="24">= <expr><lit:literal type="string" pos:line="158" pos:column="26">@"&lt;function&gt;&lt;type&gt;&lt;name pos:line=""1"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""1"" pos:column="&gt;Qux&lt;/name&gt;&lt;parameter_list pos:line=""1"" pos:column="&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""1"" pos:column=""&gt;{ &lt;return pos:line=""1"" pos:column=""&gt;return &lt;expr&gt;&lt;lit:literal type=""number"" pos:line=""1"" pos:column=&gt;42&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt; }&lt;/block&gt;&lt;/function&gt;
&lt;function&gt;&lt;type&gt;&lt;name pos:line=""2"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""2"" pos:column="&gt;Xyzzy&lt;/name&gt;&lt;parameter_list pos:line=""2"" pos:column=""&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""2"" pos:column=""&gt;{ &lt;return pos:line=""2"" pos:column=""&gt;return &lt;expr&gt;&lt;lit:literal type=""number"" pos:line=""2"" pos:column=&gt;17&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt; }&lt;/block&gt;&lt;/function&gt;

&lt;function&gt;&lt;type&gt;&lt;name pos:line=""4"" pos:column="&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""4"" pos:column="&gt;foo&lt;/name&gt;&lt;parameter_list pos:line=""4"" pos:column="&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""4"" pos:column=""&gt;{
  &lt;if pos:line=""5"" pos:column="&gt;if&lt;condition pos:line=""5"" pos:column="&gt;(&lt;expr&gt;&lt;call&gt;&lt;name pos:line=""5"" pos:column="&gt;Qux&lt;/name&gt;&lt;argument_list pos:line=""5"" pos:column="&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;)&lt;/condition&gt;&lt;then pos:line=""5"" pos:column=""&gt; &lt;block pos:line=""5"" pos:column=""&gt;{
    &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name pos:line=""6"" pos:column="&gt;print&lt;/name&gt;&lt;argument_list pos:line=""6"" pos:column=""&gt;(&lt;argument&gt;&lt;expr&gt;&lt;call&gt;&lt;name pos:line=""6"" pos:column=""&gt;Xyzzy&lt;/name&gt;&lt;argument_list pos:line=""6"" pos:column=""&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
  }&lt;/block&gt;&lt;/then&gt;&lt;/if&gt;
}&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="166" pos:column="13">var</name></type> <name pos:line="166" pos:column="17">xmlElement</name> <init pos:line="166" pos:column="28">= <expr><name><name pos:line="166" pos:column="30">FileUnitSetup</name><index pos:line="166" pos:column="43">[<expr><name><name pos:line="166" pos:column="44">Language</name><op:operator pos:line="166" pos:column="52">.</op:operator><name pos:line="166" pos:column="53">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="166" pos:column="63">.</op:operator><call><name pos:line="166" pos:column="64">GetFileUnitForXmlSnippet</name><argument_list pos:line="166" pos:column="88">(<argument><expr><name pos:line="166" pos:column="89">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="166" pos:column="94">"foo.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="168" pos:column="13">var</name></type> <name pos:line="168" pos:column="17">globalScope</name> <init pos:line="168" pos:column="29">= <expr><name><name pos:line="168" pos:column="31">CodeParser</name><index pos:line="168" pos:column="41">[<expr><name><name pos:line="168" pos:column="42">Language</name><op:operator pos:line="168" pos:column="50">.</op:operator><name pos:line="168" pos:column="51">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="168" pos:column="61">.</op:operator><call><name pos:line="168" pos:column="62">ParseFileUnit</name><argument_list pos:line="168" pos:column="75">(<argument><expr><name pos:line="168" pos:column="76">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="169" pos:column="13">var</name></type> <name pos:line="169" pos:column="17">quxMethod</name> <init pos:line="169" pos:column="27">= <expr><call><name><name pos:line="169" pos:column="29">globalScope</name><op:operator pos:line="169" pos:column="40">.</op:operator><name><name pos:line="169" pos:column="41">GetNamedChildren</name><argument_list pos:line="169" pos:column="57">&lt;<argument><name pos:line="169" pos:column="58">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="169" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="169" pos:column="76">"Qux"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="169" pos:column="82">.</op:operator><call><name pos:line="169" pos:column="83">First</name><argument_list pos:line="169" pos:column="88">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="170" pos:column="13">var</name></type> <name pos:line="170" pos:column="17">xyzzyMethod</name> <init pos:line="170" pos:column="29">= <expr><call><name><name pos:line="170" pos:column="31">globalScope</name><op:operator pos:line="170" pos:column="42">.</op:operator><name><name pos:line="170" pos:column="43">GetNamedChildren</name><argument_list pos:line="170" pos:column="59">&lt;<argument><name pos:line="170" pos:column="60">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="170" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="170" pos:column="78">"Xyzzy"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="170" pos:column="86">.</op:operator><call><name pos:line="170" pos:column="87">First</name><argument_list pos:line="170" pos:column="92">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="171" pos:column="13">var</name></type> <name pos:line="171" pos:column="17">ifStmt</name> <init pos:line="171" pos:column="24">= <expr><call><name><name pos:line="171" pos:column="26">globalScope</name><op:operator pos:line="171" pos:column="37">.</op:operator><name><name pos:line="171" pos:column="38">GetDescendants</name><argument_list pos:line="171" pos:column="52">&lt;<argument><name pos:line="171" pos:column="53">IfStatement</name></argument>&gt;</argument_list></name></name><argument_list pos:line="171" pos:column="65">()</argument_list></call><op:operator pos:line="171" pos:column="67">.</op:operator><call><name pos:line="171" pos:column="68">First</name><argument_list pos:line="171" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="173" pos:column="13">Assert</name><op:operator pos:line="173" pos:column="19">.</op:operator><name pos:line="173" pos:column="20">That</name></name><argument_list pos:line="173" pos:column="24">(<argument><expr><call><name><name pos:line="173" pos:column="25">ifStmt</name><op:operator pos:line="173" pos:column="31">.</op:operator><name pos:line="173" pos:column="32">ContainsCallTo</name></name><argument_list pos:line="173" pos:column="46">(<argument><expr><name pos:line="173" pos:column="47">quxMethod</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="174" pos:column="13">Assert</name><op:operator pos:line="174" pos:column="19">.</op:operator><name pos:line="174" pos:column="20">That</name></name><argument_list pos:line="174" pos:column="24">(<argument><expr><call><name><name pos:line="174" pos:column="25">ifStmt</name><op:operator pos:line="174" pos:column="31">.</op:operator><name pos:line="174" pos:column="32">ContainsCallTo</name></name><argument_list pos:line="174" pos:column="46">(<argument><expr><name pos:line="174" pos:column="47">xyzzyMethod</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="176" pos:column="13">Assert</name><op:operator pos:line="176" pos:column="19">.</op:operator><name pos:line="176" pos:column="20">AreEqual</name></name><argument_list pos:line="176" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="176" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="176" pos:column="32">ifStmt</name><op:operator pos:line="176" pos:column="38">.</op:operator><name pos:line="176" pos:column="39">GetCallsTo</name></name><argument_list pos:line="176" pos:column="49">(<argument><expr><name pos:line="176" pos:column="50">quxMethod</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="176" pos:column="61">false</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="176" pos:column="67">.</op:operator><call><name pos:line="176" pos:column="68">Count</name><argument_list pos:line="176" pos:column="73">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="177" pos:column="13">Assert</name><op:operator pos:line="177" pos:column="19">.</op:operator><name pos:line="177" pos:column="20">AreEqual</name></name><argument_list pos:line="177" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="177" pos:column="29">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="177" pos:column="32">ifStmt</name><op:operator pos:line="177" pos:column="38">.</op:operator><name pos:line="177" pos:column="39">GetCallsTo</name></name><argument_list pos:line="177" pos:column="49">(<argument><expr><name pos:line="177" pos:column="50">xyzzyMethod</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="177" pos:column="63">false</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="177" pos:column="69">.</op:operator><call><name pos:line="177" pos:column="70">Count</name><argument_list pos:line="177" pos:column="75">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
