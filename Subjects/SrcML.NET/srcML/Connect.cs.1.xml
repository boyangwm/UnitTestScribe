<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\VisualStudio\ABB.SrcML.VisualStudio.PreviewAddIn\Connect.cs" pos:tabs="8"><macro><name pos:line="1" pos:column="1">ï»¿</name></macro><comment type="block" pos:line="1" pos:column="4">/******************************************************************************
 * Copyright (c) 2011 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">System</name>;</using>
<using pos:line="13" pos:column="1">using <name pos:line="13" pos:column="7">Extensibility</name>;</using>
<using pos:line="14" pos:column="1">using <name pos:line="14" pos:column="7">EnvDTE</name>;</using>
<using pos:line="15" pos:column="1">using <name pos:line="15" pos:column="7">EnvDTE80</name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Reflection</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Windows</name><op:operator pos:line="17" pos:column="21">.</op:operator><name pos:line="17" pos:column="22">Forms</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">IO</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">System</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">Collections</name><op:operator pos:line="19" pos:column="25">.</op:operator><name pos:line="19" pos:column="26">Generic</name></name>;</using>

<namespace pos:line="21" pos:column="1">namespace <name><name pos:line="21" pos:column="11">ABB</name><op:operator pos:line="21" pos:column="14">.</op:operator><name pos:line="21" pos:column="15">SrcML</name><op:operator pos:line="21" pos:column="20">.</op:operator><name pos:line="21" pos:column="21">VisualStudio</name><op:operator pos:line="21" pos:column="33">.</op:operator><name pos:line="21" pos:column="34">PreviewAddIn</name></name>
<block pos:line="22" pos:column="1">{
    <comment type="line" pos:line="23" pos:column="5">/// &lt;summary&gt;The object for implementing an Add-in.&lt;/summary&gt;</comment>
    <comment type="line" pos:line="24" pos:column="5">/// &lt;seealso class='IDTExtensibility2' /&gt;</comment>
    <class><specifier pos:line="25" pos:column="5">public</specifier> class <name pos:line="25" pos:column="18">Connect</name> <super pos:line="25" pos:column="26">: <name pos:line="25" pos:column="28">IDTExtensibility2</name>, <name pos:line="25" pos:column="47">IDTCommandTarget</name></super>
    <block pos:line="26" pos:column="5">{
        <comment type="line" pos:line="27" pos:column="9">/// &lt;summary&gt;Implements the constructor for the Add-in object. Place your initialization code within this method.&lt;/summary&gt;</comment>
        <constructor><specifier pos:line="28" pos:column="9">public</specifier> <name pos:line="28" pos:column="16">Connect</name><parameter_list pos:line="28" pos:column="23">()</parameter_list>
        <block pos:line="29" pos:column="9">{
        }</block></constructor>

        <comment type="line" pos:line="32" pos:column="9">/// &lt;summary&gt;Implements the OnConnection method of the IDTExtensibility2 interface. Receives notification that the Add-in is being loaded.&lt;/summary&gt;</comment>
        <comment type="line" pos:line="33" pos:column="9">/// &lt;param term='application'&gt;Root object of the host application.&lt;/param&gt;</comment>
        <comment type="line" pos:line="34" pos:column="9">/// &lt;param term='connectMode'&gt;Describes how the Add-in is being loaded.&lt;/param&gt;</comment>
        <comment type="line" pos:line="35" pos:column="9">/// &lt;param term='addInInst'&gt;Object representing this Add-in.&lt;/param&gt;</comment>
        <comment type="line" pos:line="36" pos:column="9">/// &lt;seealso class='IDTExtensibility2' /&gt;</comment>
        <function><type><specifier pos:line="37" pos:column="9">public</specifier> <name pos:line="37" pos:column="16">void</name></type> <name pos:line="37" pos:column="21">OnConnection</name><parameter_list pos:line="37" pos:column="33">(<param><decl><type><name pos:line="37" pos:column="34">object</name></type> <name pos:line="37" pos:column="41">application</name></decl></param>, <param><decl><type><name pos:line="37" pos:column="54">ext_ConnectMode</name></type> <name pos:line="37" pos:column="70">connectMode</name></decl></param>, <param><decl><type><name pos:line="37" pos:column="83">object</name></type> <name pos:line="37" pos:column="90">addInInst</name></decl></param>, <param><decl><type><specifier pos:line="37" pos:column="101">ref</specifier> <name pos:line="37" pos:column="105">Array</name></type> <name pos:line="37" pos:column="111">custom</name></decl></param>)</parameter_list>
        <block pos:line="38" pos:column="9">{
            <expr_stmt><expr><name pos:line="39" pos:column="13">_applicationObject</name> <op:operator pos:line="39" pos:column="32">=</op:operator> <op:operator pos:line="39" pos:column="34">(</op:operator><name pos:line="39" pos:column="35">DTE2</name><op:operator pos:line="39" pos:column="39">)</op:operator><name pos:line="39" pos:column="40">application</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="40" pos:column="13">_addInInstance</name> <op:operator pos:line="40" pos:column="28">=</op:operator> <op:operator pos:line="40" pos:column="30">(</op:operator><name pos:line="40" pos:column="31">AddIn</name><op:operator pos:line="40" pos:column="36">)</op:operator><name pos:line="40" pos:column="37">addInInst</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="41" pos:column="13">_toolWindows</name> <op:operator pos:line="41" pos:column="26">=</op:operator> <op:operator pos:line="41" pos:column="28">(</op:operator><name pos:line="41" pos:column="29">Windows2</name><op:operator pos:line="41" pos:column="37">)</op:operator><name><name pos:line="41" pos:column="38">_applicationObject</name><op:operator pos:line="41" pos:column="56">.</op:operator><name pos:line="41" pos:column="57">Windows</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="42" pos:column="13">_buildEvents</name> <op:operator pos:line="42" pos:column="26">=</op:operator> <name><name pos:line="42" pos:column="28">_applicationObject</name><op:operator pos:line="42" pos:column="46">.</op:operator><name pos:line="42" pos:column="47">DTE</name><op:operator pos:line="42" pos:column="50">.</op:operator><name pos:line="42" pos:column="51">Events</name><op:operator pos:line="42" pos:column="57">.</op:operator><name pos:line="42" pos:column="58">BuildEvents</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="43" pos:column="13">_solutionEvents</name> <op:operator pos:line="43" pos:column="29">=</op:operator> <name><name pos:line="43" pos:column="31">_applicationObject</name><op:operator pos:line="43" pos:column="49">.</op:operator><name pos:line="43" pos:column="50">DTE</name><op:operator pos:line="43" pos:column="53">.</op:operator><name pos:line="43" pos:column="54">Events</name><op:operator pos:line="43" pos:column="60">.</op:operator><name pos:line="43" pos:column="61">SolutionEvents</name></name></expr>;</expr_stmt>

            <switch pos:line="45" pos:column="13">switch <condition pos:line="45" pos:column="20">(<expr><name pos:line="45" pos:column="21">connectMode</name></expr>)</condition>
            <block pos:line="46" pos:column="13">{
                <case pos:line="47" pos:column="17">case <expr><name><name pos:line="47" pos:column="22">ext_ConnectMode</name><op:operator pos:line="47" pos:column="37">.</op:operator><name pos:line="47" pos:column="38">ext_cm_UISetup</name></name></expr>:
                    <break pos:line="48" pos:column="21">break;</break>
                </case><case pos:line="49" pos:column="17">case <expr><name><name pos:line="49" pos:column="22">ext_ConnectMode</name><op:operator pos:line="49" pos:column="37">.</op:operator><name pos:line="49" pos:column="38">ext_cm_Startup</name></name></expr>:
                    <break pos:line="50" pos:column="21">break;</break>
                </case><case pos:line="51" pos:column="17">case <expr><name><name pos:line="51" pos:column="22">ext_ConnectMode</name><op:operator pos:line="51" pos:column="37">.</op:operator><name pos:line="51" pos:column="38">ext_cm_AfterStartup</name></name></expr>:
                    <expr_stmt><expr><call><name pos:line="52" pos:column="21">DisplayToolWindow</name><argument_list pos:line="52" pos:column="38">()</argument_list></call></expr>;</expr_stmt>
                    <if pos:line="53" pos:column="21">if <condition pos:line="53" pos:column="24">(<expr><name><name pos:line="53" pos:column="25">_applicationObject</name><op:operator pos:line="53" pos:column="43">.</op:operator><name pos:line="53" pos:column="44">Solution</name><op:operator pos:line="53" pos:column="52">.</op:operator><name pos:line="53" pos:column="53">IsOpen</name></name></expr>)</condition><then pos:line="53" pos:column="60">
                    <block pos:line="54" pos:column="21">{
                        <expr_stmt><expr><call><name pos:line="55" pos:column="25">_buildEvents_OnBuildDone</name><argument_list pos:line="55" pos:column="49">(<argument><expr><name><name pos:line="55" pos:column="50">vsBuildScope</name><op:operator pos:line="55" pos:column="62">.</op:operator><name pos:line="55" pos:column="63">vsBuildScopeSolution</name></name></expr></argument>, <argument><expr><name><name pos:line="55" pos:column="85">vsBuildAction</name><op:operator pos:line="55" pos:column="98">.</op:operator><name pos:line="55" pos:column="99">vsBuildActionBuild</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name pos:line="56" pos:column="25">_solutionEvents_Opened</name><argument_list pos:line="56" pos:column="47">()</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <break pos:line="58" pos:column="21">break;</break>
            </case>}</block></switch>
        }</block></function>

        <function><type><name pos:line="62" pos:column="9">void</name></type> <name pos:line="62" pos:column="14">RegisterForEvents</name><parameter_list pos:line="62" pos:column="31">()</parameter_list>
        <block pos:line="63" pos:column="9">{
            <expr_stmt><expr><name pos:line="64" pos:column="13">_buildEvents</name> <op:operator pos:line="64" pos:column="26">=</op:operator> <name><name pos:line="64" pos:column="28">_applicationObject</name><op:operator pos:line="64" pos:column="46">.</op:operator><name pos:line="64" pos:column="47">DTE</name><op:operator pos:line="64" pos:column="50">.</op:operator><name pos:line="64" pos:column="51">Events</name><op:operator pos:line="64" pos:column="57">.</op:operator><name pos:line="64" pos:column="58">BuildEvents</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="65" pos:column="13">_solutionEvents</name> <op:operator pos:line="65" pos:column="29">=</op:operator> <name><name pos:line="65" pos:column="31">_applicationObject</name><op:operator pos:line="65" pos:column="49">.</op:operator><name pos:line="65" pos:column="50">DTE</name><op:operator pos:line="65" pos:column="53">.</op:operator><name pos:line="65" pos:column="54">Events</name><op:operator pos:line="65" pos:column="60">.</op:operator><name pos:line="65" pos:column="61">SolutionEvents</name></name></expr>;</expr_stmt>

            <expr_stmt><expr><name><name pos:line="67" pos:column="13">_buildEvents</name><op:operator pos:line="67" pos:column="25">.</op:operator><name pos:line="67" pos:column="26">OnBuildDone</name></name> <op:operator pos:line="67" pos:column="38">+=</op:operator> <name pos:line="67" pos:column="41">_buildEvents_OnBuildDone</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="68" pos:column="13">_solutionEvents</name><op:operator pos:line="68" pos:column="28">.</op:operator><name pos:line="68" pos:column="29">Opened</name></name> <op:operator pos:line="68" pos:column="36">+=</op:operator> <name pos:line="68" pos:column="39">_solutionEvents_Opened</name></expr>;</expr_stmt>

            <expr_stmt><expr><name><name pos:line="70" pos:column="13">_previewControl</name><op:operator pos:line="70" pos:column="28">.</op:operator><name pos:line="70" pos:column="29">SrcMLFileCreatedEvent</name></name> <op:operator pos:line="70" pos:column="51">+=</op:operator> <name pos:line="70" pos:column="54">HandleSrcMLFileCreatedEvent</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="71" pos:column="13">_previewControl</name><op:operator pos:line="71" pos:column="28">.</op:operator><name pos:line="71" pos:column="29">OpenFileEvent</name></name> <op:operator pos:line="71" pos:column="43">+=</op:operator> <name pos:line="71" pos:column="46">HandleOpenFileEvent</name></expr>;</expr_stmt>
        }</block></function>

        <function><type><name pos:line="74" pos:column="9">void</name></type> <name pos:line="74" pos:column="14">UnRegisterForEvents</name><parameter_list pos:line="74" pos:column="33">()</parameter_list>
        <block pos:line="75" pos:column="9">{
            <expr_stmt><expr><name><name pos:line="76" pos:column="13">_previewControl</name><op:operator pos:line="76" pos:column="28">.</op:operator><name pos:line="76" pos:column="29">SrcMLFileCreatedEvent</name></name> <op:operator pos:line="76" pos:column="51">-=</op:operator> <name pos:line="76" pos:column="54">HandleSrcMLFileCreatedEvent</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="77" pos:column="13">_previewControl</name><op:operator pos:line="77" pos:column="28">.</op:operator><name pos:line="77" pos:column="29">OpenFileEvent</name></name> <op:operator pos:line="77" pos:column="43">-=</op:operator> <name pos:line="77" pos:column="46">HandleOpenFileEvent</name></expr>;</expr_stmt>

            <expr_stmt><expr><name><name pos:line="79" pos:column="13">_buildEvents</name><op:operator pos:line="79" pos:column="25">.</op:operator><name pos:line="79" pos:column="26">OnBuildDone</name></name> <op:operator pos:line="79" pos:column="38">-=</op:operator> <name pos:line="79" pos:column="41">_buildEvents_OnBuildDone</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="80" pos:column="13">_solutionEvents</name><op:operator pos:line="80" pos:column="28">.</op:operator><name pos:line="80" pos:column="29">Opened</name></name> <op:operator pos:line="80" pos:column="36">-=</op:operator> <name pos:line="80" pos:column="39">_solutionEvents_Opened</name></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="82" pos:column="13">_buildEvents</name> <op:operator pos:line="82" pos:column="26">=</op:operator> <name pos:line="82" pos:column="28">null</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="83" pos:column="13">_solutionEvents</name> <op:operator pos:line="83" pos:column="29">=</op:operator> <name pos:line="83" pos:column="31">null</name></expr>;</expr_stmt>
        }</block></function>

        <function><type><name pos:line="86" pos:column="9">void</name></type> <name pos:line="86" pos:column="14">_buildEvents_OnBuildDone</name><parameter_list pos:line="86" pos:column="38">(<param><decl><type><name pos:line="86" pos:column="39">vsBuildScope</name></type> <name pos:line="86" pos:column="52">Scope</name></decl></param>, <param><decl><type><name pos:line="86" pos:column="59">vsBuildAction</name></type> <name pos:line="86" pos:column="73">Action</name></decl></param>)</parameter_list>
        <block pos:line="87" pos:column="9">{
            <switch pos:line="88" pos:column="13">switch <condition pos:line="88" pos:column="20">(<expr><name pos:line="88" pos:column="21">Action</name></expr>)</condition>
            <block pos:line="89" pos:column="13">{
                <case pos:line="90" pos:column="17">case <expr><name><name pos:line="90" pos:column="22">vsBuildAction</name><op:operator pos:line="90" pos:column="35">.</op:operator><name pos:line="90" pos:column="36">vsBuildActionClean</name></name></expr>:
                </case><case pos:line="91" pos:column="17">case <expr><name><name pos:line="91" pos:column="22">vsBuildAction</name><op:operator pos:line="91" pos:column="35">.</op:operator><name pos:line="91" pos:column="36">vsBuildActionDeploy</name></name></expr>:
                    <break pos:line="92" pos:column="21">break;</break>
                </case><case pos:line="93" pos:column="17">case <expr><name><name pos:line="93" pos:column="22">vsBuildAction</name><op:operator pos:line="93" pos:column="35">.</op:operator><name pos:line="93" pos:column="36">vsBuildActionBuild</name></name></expr>:
                </case><case pos:line="94" pos:column="17">case <expr><name><name pos:line="94" pos:column="22">vsBuildAction</name><op:operator pos:line="94" pos:column="35">.</op:operator><name pos:line="94" pos:column="36">vsBuildActionRebuildAll</name></name></expr>:
                    <decl_stmt><decl><type><name pos:line="95" pos:column="21">var</name></type> <name pos:line="95" pos:column="25">outputDir</name> <init pos:line="95" pos:column="35">= <expr><call><name pos:line="95" pos:column="37">getOutputPath</name><argument_list pos:line="95" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="96" pos:column="21">var</name></type> <name pos:line="96" pos:column="25">dlls</name> <init pos:line="96" pos:column="30">= <expr><call><name pos:line="96" pos:column="32">getBuiltDlls</name><argument_list pos:line="96" pos:column="44">(<argument><expr><name pos:line="96" pos:column="45">outputDir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="97" pos:column="21">_previewControl</name><op:operator pos:line="97" pos:column="36">.</op:operator><name pos:line="97" pos:column="37">processBuiltDlls</name></name><argument_list pos:line="97" pos:column="53">(<argument><expr><name pos:line="97" pos:column="54">dlls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break pos:line="98" pos:column="21">break;</break>
            </case>}</block></switch>
        }</block></function>

        <function><type><name pos:line="102" pos:column="9">void</name></type> <name pos:line="102" pos:column="14">_solutionEvents_Opened</name><parameter_list pos:line="102" pos:column="36">()</parameter_list>
        <block pos:line="103" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="104" pos:column="13">DirectoryInfo</name></type> <name pos:line="104" pos:column="27">srcmlFolder</name></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="106" pos:column="13">var</name></type> <name pos:line="106" pos:column="17">firstProject</name> <init pos:line="106" pos:column="30">= <expr><call><name><name pos:line="106" pos:column="32">_applicationObject</name><op:operator pos:line="106" pos:column="50">.</op:operator><name pos:line="106" pos:column="51">Solution</name><op:operator pos:line="106" pos:column="59">.</op:operator><name pos:line="106" pos:column="60">Projects</name><op:operator pos:line="106" pos:column="68">.</op:operator><name pos:line="106" pos:column="69">Item</name></name><argument_list pos:line="106" pos:column="73">(<argument><expr><lit:literal type="number" pos:line="106" pos:column="74">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="107" pos:column="13">if <condition pos:line="107" pos:column="16">(<expr><name pos:line="107" pos:column="17">null</name> <op:operator pos:line="107" pos:column="22">!=</op:operator> <name pos:line="107" pos:column="25">firstProject</name></expr>)</condition><then pos:line="107" pos:column="38">
            <block pos:line="108" pos:column="13">{
                <expr_stmt><expr><name pos:line="109" pos:column="17">_srcmldir</name> <op:operator pos:line="109" pos:column="27">=</op:operator> <call><name><name pos:line="109" pos:column="29">firstProject</name><op:operator pos:line="109" pos:column="41">.</op:operator><name pos:line="109" pos:column="42">ProjectItems</name><op:operator pos:line="109" pos:column="54">.</op:operator><name pos:line="109" pos:column="55">Item</name></name><argument_list pos:line="109" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="109" pos:column="60">"SrcML Files"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="110" pos:column="17">srcmlFolder</name> <op:operator pos:line="110" pos:column="29">=</op:operator> <op:operator pos:line="110" pos:column="31">new</op:operator> <call><name pos:line="110" pos:column="35">DirectoryInfo</name><argument_list pos:line="110" pos:column="48">(<argument><expr><call><name><name pos:line="110" pos:column="49">_srcmldir</name><op:operator pos:line="110" pos:column="58">.</op:operator><name pos:line="110" pos:column="59">get_FileNames</name></name><argument_list pos:line="110" pos:column="72">(<argument><expr><lit:literal type="number" pos:line="110" pos:column="73">0</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="111" pos:column="17">_previewControl</name><op:operator pos:line="111" pos:column="32">.</op:operator><name pos:line="111" pos:column="33">LoadSrcMLFiles</name></name><argument_list pos:line="111" pos:column="47">(<argument><expr><name pos:line="111" pos:column="48">srcmlFolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><name pos:line="115" pos:column="9">void</name></type> <name pos:line="115" pos:column="14">HandleSrcMLFileCreatedEvent</name><parameter_list pos:line="115" pos:column="41">(<param><decl><type><name pos:line="115" pos:column="42">Object</name></type> <name pos:line="115" pos:column="49">sender</name></decl></param>, <param><decl><type><name pos:line="115" pos:column="57">SrcMLFileCreatedEventArgs</name></type> <name pos:line="115" pos:column="83">e</name></decl></param>)</parameter_list>
        <block pos:line="116" pos:column="9">{
            <if pos:line="117" pos:column="13">if <condition pos:line="117" pos:column="16">(<expr><name pos:line="117" pos:column="17">_srcmldir</name> <op:operator pos:line="117" pos:column="27">!=</op:operator> <name pos:line="117" pos:column="30">null</name></expr>)</condition><then pos:line="117" pos:column="35">
            <block pos:line="118" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="119" pos:column="17">_srcmldir</name><op:operator pos:line="119" pos:column="26">.</op:operator><name pos:line="119" pos:column="27">ProjectItems</name><op:operator pos:line="119" pos:column="39">.</op:operator><name pos:line="119" pos:column="40">AddFromFile</name></name><argument_list pos:line="119" pos:column="51">(<argument><expr><name><name pos:line="119" pos:column="52">e</name><op:operator pos:line="119" pos:column="53">.</op:operator><name pos:line="119" pos:column="54">Path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><name pos:line="123" pos:column="9">void</name></type> <name pos:line="123" pos:column="14">HandleOpenFileEvent</name><parameter_list pos:line="123" pos:column="33">(<param><decl><type><name pos:line="123" pos:column="34">Object</name></type> <name pos:line="123" pos:column="41">sender</name></decl></param>, <param><decl><type><name pos:line="123" pos:column="49">OpenFileEventArgs</name></type> <name pos:line="123" pos:column="67">e</name></decl></param>)</parameter_list>
        <block pos:line="124" pos:column="9">{
            <if pos:line="125" pos:column="13">if <condition pos:line="125" pos:column="16">(<expr><call><name><name pos:line="125" pos:column="17">File</name><op:operator pos:line="125" pos:column="21">.</op:operator><name pos:line="125" pos:column="22">Exists</name></name><argument_list pos:line="125" pos:column="28">(<argument><expr><name><name pos:line="125" pos:column="29">e</name><op:operator pos:line="125" pos:column="30">.</op:operator><name pos:line="125" pos:column="31">Path</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="125" pos:column="37">
            <block pos:line="126" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="127" pos:column="17">Window</name></type> <name pos:line="127" pos:column="24">window</name> <init pos:line="127" pos:column="31">= <expr><call><name><name pos:line="127" pos:column="33">_applicationObject</name><op:operator pos:line="127" pos:column="51">.</op:operator><name pos:line="127" pos:column="52">ItemOperations</name><op:operator pos:line="127" pos:column="66">.</op:operator><name pos:line="127" pos:column="67">OpenFile</name></name><argument_list pos:line="127" pos:column="75">(<argument><expr><name><name pos:line="127" pos:column="76">e</name><op:operator pos:line="127" pos:column="77">.</op:operator><name pos:line="127" pos:column="78">Path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="128" pos:column="17">TextWindow</name></type> <name pos:line="128" pos:column="28">textWindow</name> <init pos:line="128" pos:column="39">= <expr><call><name><name pos:line="128" pos:column="41">window</name><op:operator pos:line="128" pos:column="47">.</op:operator><name pos:line="128" pos:column="48">Document</name><op:operator pos:line="128" pos:column="56">.</op:operator><name pos:line="128" pos:column="57">Object</name></name><argument_list pos:line="128" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="128" pos:column="64">"TextWindow"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="128" pos:column="78">as</op:operator> <name pos:line="128" pos:column="81">TextWindow</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="129" pos:column="17">textWindow</name><op:operator pos:line="129" pos:column="27">.</op:operator><name pos:line="129" pos:column="28">Selection</name><op:operator pos:line="129" pos:column="37">.</op:operator><name pos:line="129" pos:column="38">GotoLine</name></name><argument_list pos:line="129" pos:column="46">(<argument><expr><name><name pos:line="129" pos:column="47">e</name><op:operator pos:line="129" pos:column="48">.</op:operator><name pos:line="129" pos:column="49">LineNumber</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else pos:line="131" pos:column="13">else
            <block pos:line="132" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="133" pos:column="17">MessageBox</name><op:operator pos:line="133" pos:column="27">.</op:operator><name pos:line="133" pos:column="28">Show</name></name><argument_list pos:line="133" pos:column="32">(<argument><expr><call><name><name pos:line="133" pos:column="33">String</name><op:operator pos:line="133" pos:column="39">.</op:operator><name pos:line="133" pos:column="40">Format</name></name><argument_list pos:line="133" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="133" pos:column="47">"{0} does not exist (but if it did, it might have line {1}!"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="133" pos:column="109">e</name><op:operator pos:line="133" pos:column="110">.</op:operator><name pos:line="133" pos:column="111">Path</name></name></expr></argument>, <argument><expr><name><name pos:line="133" pos:column="117">e</name><op:operator pos:line="133" pos:column="118">.</op:operator><name pos:line="133" pos:column="119">LineNumber</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></function>
        <function><type><name pos:line="136" pos:column="9">string</name></type> <name pos:line="136" pos:column="16">getOutputPath</name><parameter_list pos:line="136" pos:column="29">()</parameter_list>
        <block pos:line="137" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="138" pos:column="13">var</name></type> <name pos:line="138" pos:column="17">project</name> <init pos:line="138" pos:column="25">= <expr><call><name><name pos:line="138" pos:column="27">_applicationObject</name><op:operator pos:line="138" pos:column="45">.</op:operator><name pos:line="138" pos:column="46">Solution</name><op:operator pos:line="138" pos:column="54">.</op:operator><name pos:line="138" pos:column="55">Projects</name><op:operator pos:line="138" pos:column="63">.</op:operator><name pos:line="138" pos:column="64">Item</name></name><argument_list pos:line="138" pos:column="68">(<argument><expr><lit:literal type="number" pos:line="138" pos:column="69">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="139" pos:column="13">var</name></type> <name pos:line="139" pos:column="17">config</name> <init pos:line="139" pos:column="24">= <expr><name><name pos:line="139" pos:column="26">project</name><op:operator pos:line="139" pos:column="33">.</op:operator><name pos:line="139" pos:column="34">ConfigurationManager</name><op:operator pos:line="139" pos:column="54">.</op:operator><name pos:line="139" pos:column="55">ActiveConfiguration</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="141" pos:column="13">var</name></type> <name pos:line="141" pos:column="17">props</name> <init pos:line="141" pos:column="23">= <expr><name><name pos:line="141" pos:column="25">config</name><op:operator pos:line="141" pos:column="31">.</op:operator><name pos:line="141" pos:column="32">Properties</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="142" pos:column="13">var</name></type> <name pos:line="142" pos:column="17">output</name> <init pos:line="142" pos:column="24">= <expr><call><name><name pos:line="142" pos:column="26">props</name><op:operator pos:line="142" pos:column="31">.</op:operator><name pos:line="142" pos:column="32">Item</name></name><argument_list pos:line="142" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="142" pos:column="37">"OutputPath"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="144" pos:column="13">var</name></type> <name pos:line="144" pos:column="17">outputPath</name> <init pos:line="144" pos:column="28">= <expr><call><name><name pos:line="144" pos:column="30">Path</name><op:operator pos:line="144" pos:column="34">.</op:operator><name pos:line="144" pos:column="35">Combine</name></name><argument_list pos:line="144" pos:column="42">(<argument><expr><call><name><name pos:line="144" pos:column="43">Path</name><op:operator pos:line="144" pos:column="47">.</op:operator><name pos:line="144" pos:column="48">GetDirectoryName</name></name><argument_list pos:line="144" pos:column="64">(<argument><expr><name><name pos:line="144" pos:column="65">project</name><op:operator pos:line="144" pos:column="72">.</op:operator><name pos:line="144" pos:column="73">FullName</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="144" pos:column="84">output</name><op:operator pos:line="144" pos:column="90">.</op:operator><name pos:line="144" pos:column="91">Value</name><op:operator pos:line="144" pos:column="96">.</op:operator><name pos:line="144" pos:column="97">ToString</name></name><argument_list pos:line="144" pos:column="105">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <return pos:line="146" pos:column="13">return <expr><name pos:line="146" pos:column="20">outputPath</name></expr>;</return>
        }</block></function>
        <function><type><specifier pos:line="148" pos:column="9">private</specifier> <name><name pos:line="148" pos:column="17">List</name><argument_list pos:line="148" pos:column="21">&lt;<argument><name pos:line="148" pos:column="22">string</name></argument>&gt;</argument_list></name></type> <name pos:line="148" pos:column="30">getBuiltDlls</name><parameter_list pos:line="148" pos:column="42">(<param><decl><type><name pos:line="148" pos:column="43">string</name></type> <name pos:line="148" pos:column="50">outputPath</name></decl></param>)</parameter_list>
        <block pos:line="149" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="150" pos:column="13">List</name><argument_list pos:line="150" pos:column="17">&lt;<argument><name pos:line="150" pos:column="18">string</name></argument>&gt;</argument_list></name></type> <name pos:line="150" pos:column="26">results</name> <init pos:line="150" pos:column="34">= <expr><op:operator pos:line="150" pos:column="36">new</op:operator> <call><name><name pos:line="150" pos:column="40">List</name><argument_list pos:line="150" pos:column="44">&lt;<argument><name pos:line="150" pos:column="45">string</name></argument>&gt;</argument_list></name><argument_list pos:line="150" pos:column="52">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="151" pos:column="13">DirectoryInfo</name></type> <name pos:line="151" pos:column="27">folder</name> <init pos:line="151" pos:column="34">= <expr><op:operator pos:line="151" pos:column="36">new</op:operator> <call><name pos:line="151" pos:column="40">DirectoryInfo</name><argument_list pos:line="151" pos:column="53">(<argument><expr><name pos:line="151" pos:column="54">outputPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="152" pos:column="13">FileInfo</name><index pos:line="152" pos:column="21">[]</index></type> <name pos:line="152" pos:column="24">dlls</name> <init pos:line="152" pos:column="29">= <expr><call><name><name pos:line="152" pos:column="31">folder</name><op:operator pos:line="152" pos:column="37">.</op:operator><name pos:line="152" pos:column="38">GetFiles</name></name><argument_list pos:line="152" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="152" pos:column="47">"*.dll"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <foreach pos:line="154" pos:column="13">foreach (<init><decl><type><name pos:line="154" pos:column="22">var</name></type> <name pos:line="154" pos:column="26">dll</name> <range pos:line="154" pos:column="30">in <expr><name pos:line="154" pos:column="33">dlls</name></expr></range></decl></init>)
                <expr_stmt><expr><call><name><name pos:line="155" pos:column="17">results</name><op:operator pos:line="155" pos:column="24">.</op:operator><name pos:line="155" pos:column="25">Add</name></name><argument_list pos:line="155" pos:column="28">(<argument><expr><name><name pos:line="155" pos:column="29">dll</name><op:operator pos:line="155" pos:column="32">.</op:operator><name pos:line="155" pos:column="33">FullName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></foreach>
            
            <return pos:line="157" pos:column="13">return <expr><name pos:line="157" pos:column="20">results</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="160" pos:column="9">/// &lt;summary&gt;Implements the OnDisconnection method of the IDTExtensibility2 interface. Receives notification that the Add-in is being unloaded.&lt;/summary&gt;</comment>
        <comment type="line" pos:line="161" pos:column="9">/// &lt;param term='disconnectMode'&gt;Describes how the Add-in is being unloaded.&lt;/param&gt;</comment>
        <comment type="line" pos:line="162" pos:column="9">/// &lt;param term='custom'&gt;Array of parameters that are host application specific.&lt;/param&gt;</comment>
        <comment type="line" pos:line="163" pos:column="9">/// &lt;seealso class='IDTExtensibility2' /&gt;</comment>
        <function><type><specifier pos:line="164" pos:column="9">public</specifier> <name pos:line="164" pos:column="16">void</name></type> <name pos:line="164" pos:column="21">OnDisconnection</name><parameter_list pos:line="164" pos:column="36">(<param><decl><type><name pos:line="164" pos:column="37">ext_DisconnectMode</name></type> <name pos:line="164" pos:column="56">disconnectMode</name></decl></param>, <param><decl><type><specifier pos:line="164" pos:column="72">ref</specifier> <name pos:line="164" pos:column="76">Array</name></type> <name pos:line="164" pos:column="82">custom</name></decl></param>)</parameter_list>
        <block pos:line="165" pos:column="9">{
        }</block></function>

        <comment type="line" pos:line="168" pos:column="9">/// &lt;summary&gt;Implements the OnAddInsUpdate method of the IDTExtensibility2 interface. Receives notification when the collection of Add-ins has changed.&lt;/summary&gt;</comment>
        <comment type="line" pos:line="169" pos:column="9">/// &lt;param term='custom'&gt;Array of parameters that are host application specific.&lt;/param&gt;</comment>
        <comment type="line" pos:line="170" pos:column="9">/// &lt;seealso class='IDTExtensibility2' /&gt;		</comment>
        <function><type><specifier pos:line="171" pos:column="9">public</specifier> <name pos:line="171" pos:column="16">void</name></type> <name pos:line="171" pos:column="21">OnAddInsUpdate</name><parameter_list pos:line="171" pos:column="35">(<param><decl><type><specifier pos:line="171" pos:column="36">ref</specifier> <name pos:line="171" pos:column="40">Array</name></type> <name pos:line="171" pos:column="46">custom</name></decl></param>)</parameter_list>
        <block pos:line="172" pos:column="9">{
        }</block></function>

        <comment type="line" pos:line="175" pos:column="9">/// &lt;summary&gt;Implements the OnStartupComplete method of the IDTExtensibility2 interface. Receives notification that the host application has completed loading.&lt;/summary&gt;</comment>
        <comment type="line" pos:line="176" pos:column="9">/// &lt;param term='custom'&gt;Array of parameters that are host application specific.&lt;/param&gt;</comment>
        <comment type="line" pos:line="177" pos:column="9">/// &lt;seealso class='IDTExtensibility2' /&gt;</comment>
        <function><type><specifier pos:line="178" pos:column="9">public</specifier> <name pos:line="178" pos:column="16">void</name></type> <name pos:line="178" pos:column="21">OnStartupComplete</name><parameter_list pos:line="178" pos:column="38">(<param><decl><type><specifier pos:line="178" pos:column="39">ref</specifier> <name pos:line="178" pos:column="43">Array</name></type> <name pos:line="178" pos:column="49">custom</name></decl></param>)</parameter_list>
        <block pos:line="179" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="180" pos:column="13">DisplayToolWindow</name><argument_list pos:line="180" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="183" pos:column="9">/// &lt;summary&gt;Implements the OnBeginShutdown method of the IDTExtensibility2 interface. Receives notification that the host application is being unloaded.&lt;/summary&gt;</comment>
        <comment type="line" pos:line="184" pos:column="9">/// &lt;param term='custom'&gt;Array of parameters that are host application specific.&lt;/param&gt;</comment>
        <comment type="line" pos:line="185" pos:column="9">/// &lt;seealso class='IDTExtensibility2' /&gt;</comment>
        <function><type><specifier pos:line="186" pos:column="9">public</specifier> <name pos:line="186" pos:column="16">void</name></type> <name pos:line="186" pos:column="21">OnBeginShutdown</name><parameter_list pos:line="186" pos:column="36">(<param><decl><type><specifier pos:line="186" pos:column="37">ref</specifier> <name pos:line="186" pos:column="41">Array</name></type> <name pos:line="186" pos:column="47">custom</name></decl></param>)</parameter_list>
        <block pos:line="187" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="188" pos:column="13">UnRegisterForEvents</name><argument_list pos:line="188" pos:column="32">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="189" pos:column="13">_toolWindow</name><op:operator pos:line="189" pos:column="24">.</op:operator><name pos:line="189" pos:column="25">Close</name></name><argument_list pos:line="189" pos:column="30">(<argument><expr><name><name pos:line="189" pos:column="31">vsSaveChanges</name><op:operator pos:line="189" pos:column="44">.</op:operator><name pos:line="189" pos:column="45">vsSaveChangesNo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="192" pos:column="9">private</specifier> <name pos:line="192" pos:column="17">void</name></type> <name pos:line="192" pos:column="22">DisplayToolWindow</name><parameter_list pos:line="192" pos:column="39">()</parameter_list>
        <block pos:line="193" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="194" pos:column="13">object</name></type> <name pos:line="194" pos:column="20">objTemp</name> <init pos:line="194" pos:column="28">= <expr><name pos:line="194" pos:column="30">null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="195" pos:column="13">Assembly</name></type> <name pos:line="195" pos:column="22">assembly</name> <init pos:line="195" pos:column="31">= <expr><call><name><name pos:line="195" pos:column="33">Assembly</name><op:operator pos:line="195" pos:column="41">.</op:operator><name pos:line="195" pos:column="42">GetCallingAssembly</name></name><argument_list pos:line="195" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <try pos:line="197" pos:column="13">try
            <block pos:line="198" pos:column="13">{
                <expr_stmt><expr><name pos:line="199" pos:column="17">_toolWindow</name> <op:operator pos:line="199" pos:column="29">=</op:operator> <call><name><name pos:line="199" pos:column="31">_toolWindows</name><op:operator pos:line="199" pos:column="43">.</op:operator><name pos:line="199" pos:column="44">CreateToolWindow2</name></name><argument_list pos:line="199" pos:column="61">(<argument><expr><name><name pos:line="199" pos:column="62">this</name><op:operator pos:line="199" pos:column="66">.</op:operator><name pos:line="199" pos:column="67">_addInInstance</name></name></expr></argument>, <argument><expr><name><name pos:line="199" pos:column="83">assembly</name><op:operator pos:line="199" pos:column="91">.</op:operator><name pos:line="199" pos:column="92">Location</name></name></expr></argument>,
                    <argument><expr><lit:literal type="string" pos:line="200" pos:column="21">"ABB.SrcML.VisualStudio.PreviewAddIn.TransformPreviewControl"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="200" pos:column="84">"SrcML Preview Pane"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="200" pos:column="106">TransformPreviewControl</name><op:operator pos:line="200" pos:column="129">.</op:operator><name pos:line="200" pos:column="130">GUID</name></name></expr></argument>, <argument><expr pos:line="200" pos:column="136">ref <name pos:line="200" pos:column="140">objTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="201" pos:column="17">if <condition pos:line="201" pos:column="20">(<expr><name pos:line="201" pos:column="21">_toolWindow</name> <op:operator pos:line="201" pos:column="33">!=</op:operator> <name pos:line="201" pos:column="36">null</name></expr>)</condition><then pos:line="201" pos:column="41">
                <block pos:line="202" pos:column="17">{
                    <expr_stmt><expr><name pos:line="203" pos:column="21">_previewControl</name> <op:operator pos:line="203" pos:column="37">=</op:operator> <name pos:line="203" pos:column="39">objTemp</name> <op:operator pos:line="203" pos:column="47">as</op:operator> <name pos:line="203" pos:column="50">TransformPreviewControl</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="204" pos:column="21">_toolWindow</name><op:operator pos:line="204" pos:column="32">.</op:operator><name pos:line="204" pos:column="33">Visible</name></name> <op:operator pos:line="204" pos:column="41">=</op:operator> <lit:literal type="boolean" pos:line="204" pos:column="43">true</lit:literal></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name pos:line="206" pos:column="21">RegisterForEvents</name><argument_list pos:line="206" pos:column="38">()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block>
            <catch pos:line="209" pos:column="13">catch <parameter_list pos:line="209" pos:column="19">(<param><decl><type><name pos:line="209" pos:column="20">Exception</name></type> <name pos:line="209" pos:column="30">e</name></decl></param>)</parameter_list>
            <block pos:line="210" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="211" pos:column="17">String</name></type> <name pos:line="211" pos:column="24">msg</name> <init pos:line="211" pos:column="28">= <expr><name><name pos:line="211" pos:column="30">assembly</name><op:operator pos:line="211" pos:column="38">.</op:operator><name pos:line="211" pos:column="39">Location</name></name> <op:operator pos:line="211" pos:column="48">+</op:operator> <lit:literal type="string" pos:line="211" pos:column="50">"\n"</lit:literal></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name pos:line="212" pos:column="17">msg</name> <op:operator pos:line="212" pos:column="21">+=</op:operator> <name><name pos:line="212" pos:column="24">e</name><op:operator pos:line="212" pos:column="25">.</op:operator><name pos:line="212" pos:column="26">Source</name></name> <op:operator pos:line="212" pos:column="33">+</op:operator> <lit:literal type="string" pos:line="212" pos:column="35">": "</lit:literal> <op:operator pos:line="212" pos:column="40">+</op:operator> <name><name pos:line="212" pos:column="42">e</name><op:operator pos:line="212" pos:column="43">.</op:operator><name pos:line="212" pos:column="44">Message</name></name> <op:operator pos:line="212" pos:column="52">+</op:operator> <lit:literal type="string" pos:line="212" pos:column="54">"\n"</lit:literal> <op:operator pos:line="212" pos:column="59">+</op:operator> <name><name pos:line="212" pos:column="61">e</name><op:operator pos:line="212" pos:column="62">.</op:operator><name pos:line="212" pos:column="63">StackTrace</name></name></expr>;</expr_stmt>
                <if pos:line="213" pos:column="17">if <condition pos:line="213" pos:column="20">(<expr><name><name pos:line="213" pos:column="21">e</name><op:operator pos:line="213" pos:column="22">.</op:operator><name pos:line="213" pos:column="23">InnerException</name></name> <op:operator pos:line="213" pos:column="38">!=</op:operator> <name pos:line="213" pos:column="41">null</name></expr>)</condition><then pos:line="213" pos:column="46">
                    <expr_stmt><expr><name pos:line="214" pos:column="21">msg</name> <op:operator pos:line="214" pos:column="25">+=</op:operator> <lit:literal type="string" pos:line="214" pos:column="28">"\n\n"</lit:literal> <op:operator pos:line="214" pos:column="35">+</op:operator> <name><name pos:line="214" pos:column="37">e</name><op:operator pos:line="214" pos:column="38">.</op:operator><name pos:line="214" pos:column="39">InnerException</name><op:operator pos:line="214" pos:column="53">.</op:operator><name pos:line="214" pos:column="54">Source</name></name> <op:operator pos:line="214" pos:column="61">+</op:operator> <lit:literal type="string" pos:line="214" pos:column="63">": "</lit:literal> <op:operator pos:line="214" pos:column="68">+</op:operator> <name><name pos:line="214" pos:column="70">e</name><op:operator pos:line="214" pos:column="71">.</op:operator><name pos:line="214" pos:column="72">InnerException</name><op:operator pos:line="214" pos:column="86">.</op:operator><name pos:line="214" pos:column="87">Message</name></name> <op:operator pos:line="214" pos:column="95">+</op:operator> <lit:literal type="string" pos:line="214" pos:column="97">"\n"</lit:literal> <op:operator pos:line="214" pos:column="102">+</op:operator> <name><name pos:line="214" pos:column="104">e</name><op:operator pos:line="214" pos:column="105">.</op:operator><name pos:line="214" pos:column="106">InnerException</name><op:operator pos:line="214" pos:column="120">.</op:operator><name pos:line="214" pos:column="121">StackTrace</name></name></expr>;</expr_stmt></then></if>
                <expr_stmt><expr><call><name><name pos:line="215" pos:column="17">MessageBox</name><op:operator pos:line="215" pos:column="27">.</op:operator><name pos:line="215" pos:column="28">Show</name></name><argument_list pos:line="215" pos:column="32">(<argument><expr><name pos:line="215" pos:column="33">msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></function>
        <comment type="line" pos:line="218" pos:column="9">/// &lt;summary&gt;Implements the QueryStatus method of the IDTCommandTarget interface. This is called when the command's availability is updated&lt;/summary&gt;</comment>
        <comment type="line" pos:line="219" pos:column="9">/// &lt;param term='commandName'&gt;The name of the command to determine state for.&lt;/param&gt;</comment>
        <comment type="line" pos:line="220" pos:column="9">/// &lt;param term='neededText'&gt;Text that is needed for the command.&lt;/param&gt;</comment>
        <comment type="line" pos:line="221" pos:column="9">/// &lt;param term='status'&gt;The state of the command in the user interface.&lt;/param&gt;</comment>
        <comment type="line" pos:line="222" pos:column="9">/// &lt;param term='commandText'&gt;Text requested by the neededText parameter.&lt;/param&gt;</comment>
        <comment type="line" pos:line="223" pos:column="9">/// &lt;seealso class='Exec' /&gt;</comment>
        <function><type><specifier pos:line="224" pos:column="9">public</specifier> <name pos:line="224" pos:column="16">void</name></type> <name pos:line="224" pos:column="21">QueryStatus</name><parameter_list pos:line="224" pos:column="32">(<param><decl><type><name pos:line="224" pos:column="33">string</name></type> <name pos:line="224" pos:column="40">commandName</name></decl></param>, <param><decl><type><name pos:line="224" pos:column="53">vsCommandStatusTextWanted</name></type> <name pos:line="224" pos:column="79">neededText</name></decl></param>, <param><decl><type><specifier pos:line="224" pos:column="91">ref</specifier> <name pos:line="224" pos:column="95">vsCommandStatus</name></type> <name pos:line="224" pos:column="111">status</name></decl></param>, <param><decl><type><specifier pos:line="224" pos:column="119">ref</specifier> <name pos:line="224" pos:column="123">object</name></type> <name pos:line="224" pos:column="130">commandText</name></decl></param>)</parameter_list>
        <block pos:line="225" pos:column="9">{
            <if pos:line="226" pos:column="13">if<condition pos:line="226" pos:column="15">(<expr><name pos:line="226" pos:column="16">neededText</name> <op:operator pos:line="226" pos:column="27">==</op:operator> <name><name pos:line="226" pos:column="30">vsCommandStatusTextWanted</name><op:operator pos:line="226" pos:column="55">.</op:operator><name pos:line="226" pos:column="56">vsCommandStatusTextWantedNone</name></name></expr>)</condition><then pos:line="226" pos:column="86">
            <block pos:line="227" pos:column="13">{
                <if pos:line="228" pos:column="17">if <condition pos:line="228" pos:column="20">(<expr><name pos:line="228" pos:column="21">commandName</name> <op:operator pos:line="228" pos:column="33">==</op:operator> <lit:literal type="string" pos:line="228" pos:column="36">"ABB.SrcML.VisualStudio.PreviewAddIn.Connect.SrcMLPreviewAddin"</lit:literal></expr>)</condition><then pos:line="228" pos:column="100">
                <block pos:line="229" pos:column="17">{
                    <expr_stmt><expr><name pos:line="230" pos:column="21">status</name> <op:operator pos:line="230" pos:column="28">=</op:operator> <op:operator pos:line="230" pos:column="30">(</op:operator><name pos:line="230" pos:column="31">vsCommandStatus</name><op:operator pos:line="230" pos:column="46">)</op:operator><name><name pos:line="230" pos:column="47">vsCommandStatus</name><op:operator pos:line="230" pos:column="62">.</op:operator><name pos:line="230" pos:column="63">vsCommandStatusSupported</name></name><op:operator pos:line="230" pos:column="87">|</op:operator><name><name pos:line="230" pos:column="88">vsCommandStatus</name><op:operator pos:line="230" pos:column="103">.</op:operator><name pos:line="230" pos:column="104">vsCommandStatusEnabled</name></name></expr>;</expr_stmt>
                    <return pos:line="231" pos:column="21">return;</return>
                }</block></then></if>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="236" pos:column="9">/// &lt;summary&gt;Implements the Exec method of the IDTCommandTarget interface. This is called when the command is invoked.&lt;/summary&gt;</comment>
        <comment type="line" pos:line="237" pos:column="9">/// &lt;param term='commandName'&gt;The name of the command to execute.&lt;/param&gt;</comment>
        <comment type="line" pos:line="238" pos:column="9">/// &lt;param term='executeOption'&gt;Describes how the command should be run.&lt;/param&gt;</comment>
        <comment type="line" pos:line="239" pos:column="9">/// &lt;param term='varIn'&gt;Parameters passed from the caller to the command handler.&lt;/param&gt;</comment>
        <comment type="line" pos:line="240" pos:column="9">/// &lt;param term='varOut'&gt;Parameters passed from the command handler to the caller.&lt;/param&gt;</comment>
        <comment type="line" pos:line="241" pos:column="9">/// &lt;param term='handled'&gt;Informs the caller if the command was handled or not.&lt;/param&gt;</comment>
        <comment type="line" pos:line="242" pos:column="9">/// &lt;seealso class='Exec' /&gt;</comment>
        <function><type><specifier pos:line="243" pos:column="9">public</specifier> <name pos:line="243" pos:column="16">void</name></type> <name pos:line="243" pos:column="21">Exec</name><parameter_list pos:line="243" pos:column="25">(<param><decl><type><name pos:line="243" pos:column="26">string</name></type> <name pos:line="243" pos:column="33">commandName</name></decl></param>, <param><decl><type><name pos:line="243" pos:column="46">vsCommandExecOption</name></type> <name pos:line="243" pos:column="66">executeOption</name></decl></param>, <param><decl><type><specifier pos:line="243" pos:column="81">ref</specifier> <name pos:line="243" pos:column="85">object</name></type> <name pos:line="243" pos:column="92">varIn</name></decl></param>, <param><decl><type><specifier pos:line="243" pos:column="99">ref</specifier> <name pos:line="243" pos:column="103">object</name></type> <name pos:line="243" pos:column="110">varOut</name></decl></param>, <param><decl><type><specifier pos:line="243" pos:column="118">ref</specifier> <name pos:line="243" pos:column="122">bool</name></type> <name pos:line="243" pos:column="127">handled</name></decl></param>)</parameter_list>
        <block pos:line="244" pos:column="9">{
            <expr_stmt><expr><name pos:line="245" pos:column="13">handled</name> <op:operator pos:line="245" pos:column="21">=</op:operator> <lit:literal type="boolean" pos:line="245" pos:column="23">false</lit:literal></expr>;</expr_stmt>
            <if pos:line="246" pos:column="13">if<condition pos:line="246" pos:column="15">(<expr><name pos:line="246" pos:column="16">executeOption</name> <op:operator pos:line="246" pos:column="30">==</op:operator> <name><name pos:line="246" pos:column="33">vsCommandExecOption</name><op:operator pos:line="246" pos:column="52">.</op:operator><name pos:line="246" pos:column="53">vsCommandExecOptionDoDefault</name></name></expr>)</condition><then pos:line="246" pos:column="82">
            <block pos:line="247" pos:column="13">{
                <if pos:line="248" pos:column="17">if <condition pos:line="248" pos:column="20">(<expr><name pos:line="248" pos:column="21">commandName</name> <op:operator pos:line="248" pos:column="33">==</op:operator> <lit:literal type="string" pos:line="248" pos:column="36">"ABB.SrcML.VisualStudio.PreviewAddIn.Connect.SrcMLPreviewAddin"</lit:literal></expr>)</condition><then pos:line="248" pos:column="100">
                <block pos:line="249" pos:column="17">{
                    <expr_stmt><expr><name pos:line="250" pos:column="21">handled</name> <op:operator pos:line="250" pos:column="29">=</op:operator> <lit:literal type="boolean" pos:line="250" pos:column="31">true</lit:literal></expr>;</expr_stmt>
                    <return pos:line="251" pos:column="21">return;</return>
                }</block></then></if>
            }</block></then></if>
        }</block></function>
        <decl_stmt><decl><type><specifier pos:line="255" pos:column="9">private</specifier> <name pos:line="255" pos:column="17">DTE2</name></type> <name pos:line="255" pos:column="22">_applicationObject</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="256" pos:column="9">private</specifier> <name pos:line="256" pos:column="17">AddIn</name></type> <name pos:line="256" pos:column="23">_addInInstance</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="257" pos:column="9">private</specifier> <name pos:line="257" pos:column="17">ProjectItem</name></type> <name pos:line="257" pos:column="29">_srcmldir</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="259" pos:column="9">private</specifier> <name pos:line="259" pos:column="17">Window</name></type> <name pos:line="259" pos:column="24">_toolWindow</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="260" pos:column="9">private</specifier> <name pos:line="260" pos:column="17">Windows2</name></type> <name pos:line="260" pos:column="26">_toolWindows</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="261" pos:column="9">private</specifier> <name pos:line="261" pos:column="17">TransformPreviewControl</name></type> <name pos:line="261" pos:column="41">_previewControl</name></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><specifier pos:line="263" pos:column="9">private</specifier> <name pos:line="263" pos:column="17">BuildEvents</name></type> <name pos:line="263" pos:column="29">_buildEvents</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="264" pos:column="9">private</specifier> <name pos:line="264" pos:column="17">SolutionEvents</name></type> <name pos:line="264" pos:column="32">_solutionEvents</name></decl>;</decl_stmt>
    }</block></class>
}</block></namespace></unit>
