<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\VisualStudio\ABB.SrcML.VisualStudio.SrcMLService\AbstractMonitoringService.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2014 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine(ABB Group) - Initial implementation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">ABB</name><op:operator pos:line="12" pos:column="10">.</op:operator><name pos:line="12" pos:column="11">SrcML</name><op:operator pos:line="12" pos:column="16">.</op:operator><name pos:line="12" pos:column="17">Utilities</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">ABB</name><op:operator pos:line="13" pos:column="10">.</op:operator><name pos:line="13" pos:column="11">VisualStudio</name></name>;</using>
<using pos:line="14" pos:column="1">using <name pos:line="14" pos:column="7">System</name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Threading</name><op:operator pos:line="15" pos:column="23">.</op:operator><name pos:line="15" pos:column="24">Tasks</name></name>;</using>

<namespace pos:line="17" pos:column="1">namespace <name><name pos:line="17" pos:column="11">ABB</name><op:operator pos:line="17" pos:column="14">.</op:operator><name pos:line="17" pos:column="15">SrcML</name><op:operator pos:line="17" pos:column="20">.</op:operator><name pos:line="17" pos:column="21">VisualStudio</name></name> <block pos:line="17" pos:column="34">{

    <comment type="line" pos:line="19" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="20" pos:column="5">/// Abstract class for monitoring services. This contains common functionality and operations for making monitors within Visual Studio.</comment>
    <comment type="line" pos:line="21" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="22" pos:column="5">public</specifier> <specifier pos:line="22" pos:column="12">abstract</specifier> class <name pos:line="22" pos:column="27">AbstractMonitoringService</name> <block pos:line="22" pos:column="53">{
        <decl_stmt><decl><type><specifier pos:line="23" pos:column="9">private</specifier> <name pos:line="23" pos:column="17">bool</name></type> <name pos:line="23" pos:column="22">_isMonitoring</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="24" pos:column="9">private</specifier> <name pos:line="24" pos:column="17">bool</name></type> <name pos:line="24" pos:column="22">_isUpdating</name></decl>;</decl_stmt>

        <comment type="line" pos:line="26" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="27" pos:column="9">/// Default interval for the save timer in milliseconds</comment>
        <comment type="line" pos:line="28" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="29" pos:column="9">public</specifier> <specifier pos:line="29" pos:column="16">const</specifier> <name pos:line="29" pos:column="22">int</name></type> <name pos:line="29" pos:column="26">DEFAULT_SAVE_INTERVAL</name> <init pos:line="29" pos:column="48">= <expr><lit:literal type="number" pos:line="29" pos:column="50">300</lit:literal></expr></init></decl>;</decl_stmt>

        <constructor><specifier pos:line="31" pos:column="9">private</specifier> <name pos:line="31" pos:column="17">AbstractMonitoringService</name><parameter_list pos:line="31" pos:column="42">()</parameter_list> <block pos:line="31" pos:column="45">{
        }</block></constructor>

        <comment type="line" pos:line="34" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="35" pos:column="9">/// Create a new abstract monitoring service</comment>
        <comment type="line" pos:line="36" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="37" pos:column="9">/// &lt;param name="serviceProvider"&gt;The container where this service will be sited&lt;/param&gt;</comment>
        <comment type="line" pos:line="38" pos:column="9">/// &lt;param name="taskManagerService"&gt;The task manager service for executing tasks&lt;/param&gt;</comment>
        <constructor><specifier pos:line="39" pos:column="9">protected</specifier> <name pos:line="39" pos:column="19">AbstractMonitoringService</name><parameter_list pos:line="39" pos:column="44">(<param><decl><type><name pos:line="39" pos:column="45">SrcMLServicePackage</name></type> <name pos:line="39" pos:column="65">serviceProvider</name></decl></param>, <param><decl><type><name pos:line="39" pos:column="82">ITaskManagerService</name></type> <name pos:line="39" pos:column="102">taskManagerService</name></decl></param>)</parameter_list> <block pos:line="39" pos:column="122">{
            <expr_stmt><expr><name pos:line="40" pos:column="13">ServiceProvider</name> <op:operator pos:line="40" pos:column="29">=</op:operator> <name pos:line="40" pos:column="31">serviceProvider</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="41" pos:column="13">SaveTimer</name> <op:operator pos:line="41" pos:column="23">=</op:operator> <op:operator pos:line="41" pos:column="25">new</op:operator> <call><name pos:line="41" pos:column="29">ReentrantTimer</name><argument_list pos:line="41" pos:column="43">(<argument><expr><name pos:line="41" pos:column="44">Save</name></expr></argument>, <argument><expr><name pos:line="41" pos:column="50">GlobalScheduler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="42" pos:column="13">SaveInterval</name> <op:operator pos:line="42" pos:column="26">=</op:operator> <name pos:line="42" pos:column="28">DEFAULT_SAVE_INTERVAL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="43" pos:column="13">_isMonitoring</name> <op:operator pos:line="43" pos:column="27">=</op:operator> <lit:literal type="boolean" pos:line="43" pos:column="29">false</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="44" pos:column="13">_isUpdating</name> <op:operator pos:line="44" pos:column="25">=</op:operator> <lit:literal type="boolean" pos:line="44" pos:column="27">false</lit:literal></expr>;</expr_stmt>
            <if pos:line="45" pos:column="13">if <condition pos:line="45" pos:column="16">(<expr><name pos:line="45" pos:column="17">taskManagerService</name> <op:operator pos:line="45" pos:column="36">!=</op:operator> <name pos:line="45" pos:column="39">null</name></expr>)</condition><then pos:line="45" pos:column="44">
            <block pos:line="46" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="47" pos:column="17">this</name><op:operator pos:line="47" pos:column="21">.</op:operator><name pos:line="47" pos:column="22">TaskManager</name></name> <op:operator pos:line="47" pos:column="34">=</op:operator> <name pos:line="47" pos:column="36">taskManagerService</name></expr>;</expr_stmt>                
            }</block></then></if>
        }</block></constructor>

        <comment type="line" pos:line="51" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="52" pos:column="9">/// The monitoring started event</comment>
        <comment type="line" pos:line="53" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="54" pos:column="9">public</specifier> <specifier pos:line="54" pos:column="16">event</specifier> <name pos:line="54" pos:column="22">EventHandler</name></type> <name pos:line="54" pos:column="35">MonitoringStarted</name></decl>;</decl_stmt>

        <comment type="line" pos:line="56" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="57" pos:column="9">/// The monitoring stopped event</comment>
        <comment type="line" pos:line="58" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="59" pos:column="9">public</specifier> <specifier pos:line="59" pos:column="16">event</specifier> <name pos:line="59" pos:column="22">EventHandler</name></type> <name pos:line="59" pos:column="35">MonitoringStopped</name></decl>;</decl_stmt>

        <comment type="line" pos:line="61" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="62" pos:column="9">/// The update started event</comment>
        <comment type="line" pos:line="63" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="64" pos:column="9">public</specifier> <specifier pos:line="64" pos:column="16">event</specifier> <name pos:line="64" pos:column="22">EventHandler</name></type> <name pos:line="64" pos:column="35">UpdateStarted</name></decl>;</decl_stmt>

        <comment type="line" pos:line="66" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="67" pos:column="9">/// The update completed event</comment>
        <comment type="line" pos:line="68" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="69" pos:column="9">public</specifier> <specifier pos:line="69" pos:column="16">event</specifier> <name pos:line="69" pos:column="22">EventHandler</name></type> <name pos:line="69" pos:column="35">UpdateCompleted</name></decl>;</decl_stmt>

        <comment type="line" pos:line="71" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="72" pos:column="9">/// True if this monitor is currently monitoring; false if not</comment>
        <comment type="line" pos:line="73" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="74" pos:column="9">public</specifier> <name pos:line="74" pos:column="16">bool</name></type> <name pos:line="74" pos:column="21">IsMonitoring</name> <block pos:line="74" pos:column="34">{
            <function><name pos:line="75" pos:column="13">get</name> <block pos:line="75" pos:column="17">{ <return pos:line="75" pos:column="19">return <expr><name pos:line="75" pos:column="26">_isMonitoring</name></expr>;</return> }</block></function>
            <function><specifier pos:line="76" pos:column="13">protected</specifier> <name pos:line="76" pos:column="23">set</name> <block pos:line="76" pos:column="27">{
                <if pos:line="77" pos:column="17">if<condition pos:line="77" pos:column="19">(<expr><name pos:line="77" pos:column="20">_isMonitoring</name> <op:operator pos:line="77" pos:column="34">!=</op:operator> <name pos:line="77" pos:column="37">value</name></expr>)</condition><then pos:line="77" pos:column="43"> <block pos:line="77" pos:column="44">{
                    <expr_stmt><expr><name pos:line="78" pos:column="21">_isMonitoring</name> <op:operator pos:line="78" pos:column="35">=</op:operator> <name pos:line="78" pos:column="37">value</name></expr>;</expr_stmt>
                    <expr_stmt><expr><op:operator pos:line="79" pos:column="21">(</op:operator><name pos:line="79" pos:column="22">_isMonitoring</name> <op:operator pos:line="79" pos:column="36">?</op:operator> <op:operator pos:line="79" pos:column="38">(</op:operator><name><name pos:line="79" pos:column="39">Action</name><argument_list pos:line="79" pos:column="45">&lt;<argument><name pos:line="79" pos:column="46">EventArgs</name></argument>&gt;</argument_list></name><op:operator pos:line="79" pos:column="56">)</op:operator> <name pos:line="79" pos:column="58">OnMonitoringStarted</name> <op:operator pos:line="79" pos:column="78">:</op:operator> <name pos:line="79" pos:column="80">OnMonitoringStopped</name><op:operator pos:line="79" pos:column="99">)</op:operator><op:operator pos:line="79" pos:column="100">(</op:operator><op:operator pos:line="79" pos:column="101">new</op:operator> <call><name pos:line="79" pos:column="105">EventArgs</name><argument_list pos:line="79" pos:column="114">()</argument_list></call><op:operator pos:line="79" pos:column="116">)</op:operator></expr>;</expr_stmt>
                }</block></then></if>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="84" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="85" pos:column="9">/// True if this monitor is currently updating; false if not</comment>
        <comment type="line" pos:line="86" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="87" pos:column="9">public</specifier> <name pos:line="87" pos:column="16">bool</name></type> <name pos:line="87" pos:column="21">IsUpdating</name> <block pos:line="87" pos:column="32">{
            <function><name pos:line="88" pos:column="13">get</name> <block pos:line="88" pos:column="17">{ <return pos:line="88" pos:column="19">return <expr><name pos:line="88" pos:column="26">_isUpdating</name></expr>;</return> }</block></function>
            <function><specifier pos:line="89" pos:column="13">protected</specifier> <name pos:line="89" pos:column="23">set</name> <block pos:line="89" pos:column="27">{
                <if pos:line="90" pos:column="17">if<condition pos:line="90" pos:column="19">(<expr><name pos:line="90" pos:column="20">_isUpdating</name> <op:operator pos:line="90" pos:column="32">!=</op:operator> <name pos:line="90" pos:column="35">value</name></expr>)</condition><then pos:line="90" pos:column="41"> <block pos:line="90" pos:column="42">{
                    <expr_stmt><expr><name pos:line="91" pos:column="21">_isUpdating</name> <op:operator pos:line="91" pos:column="33">=</op:operator> <name pos:line="91" pos:column="35">value</name></expr>;</expr_stmt>
                    <expr_stmt><expr><op:operator pos:line="92" pos:column="21">(</op:operator><name pos:line="92" pos:column="22">_isUpdating</name> <op:operator pos:line="92" pos:column="34">?</op:operator> <op:operator pos:line="92" pos:column="36">(</op:operator><name><name pos:line="92" pos:column="37">Action</name><argument_list pos:line="92" pos:column="43">&lt;<argument><name pos:line="92" pos:column="44">EventArgs</name></argument>&gt;</argument_list></name><op:operator pos:line="92" pos:column="54">)</op:operator> <name pos:line="92" pos:column="56">OnUpdateStarted</name> <op:operator pos:line="92" pos:column="72">:</op:operator> <name pos:line="92" pos:column="74">OnUpdateCompleted</name><op:operator pos:line="92" pos:column="91">)</op:operator><op:operator pos:line="92" pos:column="92">(</op:operator><op:operator pos:line="92" pos:column="93">new</op:operator> <call><name pos:line="92" pos:column="97">EventArgs</name><argument_list pos:line="92" pos:column="106">()</argument_list></call><op:operator pos:line="92" pos:column="108">)</op:operator></expr>;</expr_stmt>
                }</block></then></if>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="97" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="98" pos:column="9">/// The interval at which to save state in seconds.</comment>
        <comment type="line" pos:line="99" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="100" pos:column="9">public</specifier> <name pos:line="100" pos:column="16">double</name></type> <name pos:line="100" pos:column="23">SaveInterval</name> <block pos:line="100" pos:column="36">{
            <function><name pos:line="101" pos:column="13">get</name> <block pos:line="101" pos:column="17">{ <return pos:line="101" pos:column="19">return <expr><name><name pos:line="101" pos:column="26">SaveTimer</name><op:operator pos:line="101" pos:column="35">.</op:operator><name pos:line="101" pos:column="36">Interval</name></name> <op:operator pos:line="101" pos:column="45">/</op:operator> <lit:literal type="number" pos:line="101" pos:column="47">1000</lit:literal></expr>;</return> }</block></function>
            <function><name pos:line="102" pos:column="13">set</name> <block pos:line="102" pos:column="17">{ <expr_stmt><expr><name><name pos:line="102" pos:column="19">SaveTimer</name><op:operator pos:line="102" pos:column="28">.</op:operator><name pos:line="102" pos:column="29">Interval</name></name> <op:operator pos:line="102" pos:column="38">=</op:operator> <name pos:line="102" pos:column="40">value</name> <op:operator pos:line="102" pos:column="46">*</op:operator> <lit:literal type="number" pos:line="102" pos:column="48">1000</lit:literal></expr>;</expr_stmt> }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="105" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="106" pos:column="9">/// The timer for periodically saving state</comment>
        <comment type="line" pos:line="107" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="108" pos:column="9">public</specifier> <name pos:line="108" pos:column="16">ReentrantTimer</name></type> <name pos:line="108" pos:column="31">SaveTimer</name> <block pos:line="108" pos:column="41">{ <function_decl><name pos:line="108" pos:column="43">get</name>;</function_decl> <function_decl><specifier pos:line="108" pos:column="48">private</specifier> <name pos:line="108" pos:column="56">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="110" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="111" pos:column="9">/// Starts monitoring</comment>
        <comment type="line" pos:line="112" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="113" pos:column="9">public</specifier> <specifier pos:line="113" pos:column="16">virtual</specifier> <name pos:line="113" pos:column="24">void</name></type> <name pos:line="113" pos:column="29">StartMonitoring</name><parameter_list pos:line="113" pos:column="44">()</parameter_list> <block pos:line="113" pos:column="47">{
            <expr_stmt><expr><call><name><name pos:line="114" pos:column="13">GlobalTaskFactory</name><op:operator pos:line="114" pos:column="30">.</op:operator><name pos:line="114" pos:column="31">StartNew</name></name><argument_list pos:line="114" pos:column="39">(<argument><expr><name pos:line="114" pos:column="40">Setup</name></expr></argument>)</argument_list></call>
                <op:operator pos:line="115" pos:column="17">.</op:operator><call><name pos:line="115" pos:column="18">ContinueWith</name><argument_list pos:line="115" pos:column="30">(<argument><expr><lambda><parameter_list pos:line="115" pos:column="31">(<param><decl><name pos:line="115" pos:column="32">t</name></decl></param>)</parameter_list> <op:operator pos:line="115" pos:column="35">=&gt;</op:operator> <call><name pos:line="115" pos:column="38">Update</name><argument_list pos:line="115" pos:column="44">()</argument_list></call></lambda></expr></argument>)</argument_list></call>
                <op:operator pos:line="116" pos:column="17">.</op:operator><call><name pos:line="116" pos:column="18">ContinueWith</name><argument_list pos:line="116" pos:column="30">(<argument><expr><lambda><parameter_list pos:line="116" pos:column="31">(<param><decl><name pos:line="116" pos:column="32">t</name></decl></param>)</parameter_list> <op:operator pos:line="116" pos:column="35">=&gt;</op:operator> <call><name pos:line="116" pos:column="38">Save</name><argument_list pos:line="116" pos:column="42">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="116" pos:column="45">.</op:operator><call><name pos:line="116" pos:column="46">ContinueWith</name><argument_list pos:line="116" pos:column="58">(<argument><expr><lambda><parameter_list pos:line="116" pos:column="59">(<param><decl><name pos:line="116" pos:column="60">t</name></decl></param>)</parameter_list> <op:operator pos:line="116" pos:column="63">=&gt;</op:operator> <block pos:line="116" pos:column="66">{
                    <expr_stmt><expr><name pos:line="117" pos:column="21">IsMonitoring</name> <op:operator pos:line="117" pos:column="34">=</op:operator> <lit:literal type="boolean" pos:line="117" pos:column="36">true</lit:literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="118" pos:column="21">SaveTimer</name><op:operator pos:line="118" pos:column="30">.</op:operator><name pos:line="118" pos:column="31">Start</name></name><argument_list pos:line="118" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="119" pos:column="21">StartMonitoringImpl</name><argument_list pos:line="119" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
                }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="123" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="124" pos:column="9">/// Stops monitoring</comment>
        <comment type="line" pos:line="125" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="126" pos:column="9">public</specifier> <specifier pos:line="126" pos:column="16">virtual</specifier> <name pos:line="126" pos:column="24">void</name></type> <name pos:line="126" pos:column="29">StopMonitoring</name><parameter_list pos:line="126" pos:column="43">()</parameter_list> <block pos:line="126" pos:column="46">{
            <expr_stmt><expr><name pos:line="127" pos:column="13">IsMonitoring</name> <op:operator pos:line="127" pos:column="26">=</op:operator> <lit:literal type="boolean" pos:line="127" pos:column="28">false</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="128" pos:column="13">SaveTimer</name><op:operator pos:line="128" pos:column="22">.</op:operator><name pos:line="128" pos:column="23">Stop</name></name><argument_list pos:line="128" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="129" pos:column="13">StopMonitoringImpl</name><argument_list pos:line="129" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="132" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="133" pos:column="9">/// The container for this service</comment>
        <comment type="line" pos:line="134" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="135" pos:column="9">protected</specifier> <name pos:line="135" pos:column="19">SrcMLServicePackage</name></type> <name pos:line="135" pos:column="39">ServiceProvider</name> <block pos:line="135" pos:column="55">{ <function_decl><name pos:line="135" pos:column="57">get</name>;</function_decl> <function_decl><specifier pos:line="135" pos:column="62">private</specifier> <name pos:line="135" pos:column="70">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="137" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="138" pos:column="9">/// The task manager</comment>
        <comment type="line" pos:line="139" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="140" pos:column="9">protected</specifier> <name pos:line="140" pos:column="19">ITaskManagerService</name></type> <name pos:line="140" pos:column="39">TaskManager</name> <block pos:line="140" pos:column="51">{ <function_decl><name pos:line="140" pos:column="53">get</name>;</function_decl> <function_decl><specifier pos:line="140" pos:column="58">private</specifier> <name pos:line="140" pos:column="66">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="142" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="143" pos:column="9">/// The task factory for executing tasks</comment>
        <comment type="line" pos:line="144" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="145" pos:column="9">protected</specifier> <name pos:line="145" pos:column="19">TaskFactory</name></type> <name pos:line="145" pos:column="31">GlobalTaskFactory</name> <block pos:line="145" pos:column="49">{ <function><name pos:line="145" pos:column="51">get</name> <block pos:line="145" pos:column="55">{ <return pos:line="145" pos:column="57">return <expr><op:operator pos:line="145" pos:column="64">(</op:operator><name pos:line="145" pos:column="65">null</name> <op:operator pos:line="145" pos:column="70">!=</op:operator> <name pos:line="145" pos:column="73">TaskManager</name> <op:operator pos:line="145" pos:column="85">?</op:operator> <name><name pos:line="145" pos:column="87">TaskManager</name><op:operator pos:line="145" pos:column="98">.</op:operator><name pos:line="145" pos:column="99">GlobalFactory</name></name> <op:operator pos:line="145" pos:column="113">:</op:operator> <name><name pos:line="145" pos:column="115">Task</name><op:operator pos:line="145" pos:column="119">.</op:operator><name pos:line="145" pos:column="120">Factory</name></name><op:operator pos:line="145" pos:column="127">)</op:operator></expr>;</return> }</block></function> }</block></decl></decl_stmt>

        <comment type="line" pos:line="147" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="148" pos:column="9">/// The task scheduler for scheduling tasks</comment>
        <comment type="line" pos:line="149" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="150" pos:column="9">protected</specifier> <name pos:line="150" pos:column="19">TaskScheduler</name></type> <name pos:line="150" pos:column="33">GlobalScheduler</name> <block pos:line="150" pos:column="49">{ <function><name pos:line="150" pos:column="51">get</name> <block pos:line="150" pos:column="55">{ <return pos:line="150" pos:column="57">return <expr><op:operator pos:line="150" pos:column="64">(</op:operator><name pos:line="150" pos:column="65">null</name> <op:operator pos:line="150" pos:column="70">!=</op:operator> <name pos:line="150" pos:column="73">TaskManager</name> <op:operator pos:line="150" pos:column="85">?</op:operator> <name><name pos:line="150" pos:column="87">TaskManager</name><op:operator pos:line="150" pos:column="98">.</op:operator><name pos:line="150" pos:column="99">GlobalScheduler</name></name> <op:operator pos:line="150" pos:column="115">:</op:operator> <name><name pos:line="150" pos:column="117">TaskScheduler</name><op:operator pos:line="150" pos:column="130">.</op:operator><name pos:line="150" pos:column="131">Default</name></name><op:operator pos:line="150" pos:column="138">)</op:operator></expr>;</return> }</block></function> }</block></decl></decl_stmt>

        <comment type="line" pos:line="152" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="153" pos:column="9">/// Executed when &lt;see cref="MonitoringStarted"/&gt; is raised</comment>
        <comment type="line" pos:line="154" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="155" pos:column="9">/// &lt;param name="e"&gt;The event arguments&lt;/param&gt;</comment>
        <function><type><specifier pos:line="156" pos:column="9">protected</specifier> <specifier pos:line="156" pos:column="19">virtual</specifier> <name pos:line="156" pos:column="27">void</name></type> <name pos:line="156" pos:column="32">OnMonitoringStarted</name><parameter_list pos:line="156" pos:column="51">(<param><decl><type><name pos:line="156" pos:column="52">EventArgs</name></type> <name pos:line="156" pos:column="62">e</name></decl></param>)</parameter_list> <block pos:line="156" pos:column="65">{
            <decl_stmt><decl><type><name pos:line="157" pos:column="13">EventHandler</name></type> <name pos:line="157" pos:column="26">handler</name> <init pos:line="157" pos:column="34">= <expr><name pos:line="157" pos:column="36">MonitoringStarted</name></expr></init></decl>;</decl_stmt>
            <if pos:line="158" pos:column="13">if<condition pos:line="158" pos:column="15">(<expr><name pos:line="158" pos:column="16">null</name> <op:operator pos:line="158" pos:column="21">!=</op:operator> <name pos:line="158" pos:column="24">handler</name></expr>)</condition><then pos:line="158" pos:column="32"> <block pos:line="158" pos:column="33">{
                <expr_stmt><expr><call><name pos:line="159" pos:column="17">handler</name><argument_list pos:line="159" pos:column="24">(<argument><expr><name pos:line="159" pos:column="25">this</name></expr></argument>, <argument><expr><name pos:line="159" pos:column="31">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="163" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="164" pos:column="9">/// Executed when &lt;see cref="MonitoringStopped"/&gt; is raised</comment>
        <comment type="line" pos:line="165" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="166" pos:column="9">/// &lt;param name="e"&gt;The event arguments&lt;/param&gt;</comment>
        <function><type><specifier pos:line="167" pos:column="9">protected</specifier> <specifier pos:line="167" pos:column="19">virtual</specifier> <name pos:line="167" pos:column="27">void</name></type> <name pos:line="167" pos:column="32">OnMonitoringStopped</name><parameter_list pos:line="167" pos:column="51">(<param><decl><type><name pos:line="167" pos:column="52">EventArgs</name></type> <name pos:line="167" pos:column="62">e</name></decl></param>)</parameter_list> <block pos:line="167" pos:column="65">{
            <decl_stmt><decl><type><name pos:line="168" pos:column="13">EventHandler</name></type> <name pos:line="168" pos:column="26">handler</name> <init pos:line="168" pos:column="34">= <expr><name pos:line="168" pos:column="36">MonitoringStopped</name></expr></init></decl>;</decl_stmt>
            <if pos:line="169" pos:column="13">if<condition pos:line="169" pos:column="15">(<expr><name pos:line="169" pos:column="16">null</name> <op:operator pos:line="169" pos:column="21">!=</op:operator> <name pos:line="169" pos:column="24">handler</name></expr>)</condition><then pos:line="169" pos:column="32"> <block pos:line="169" pos:column="33">{
                <expr_stmt><expr><call><name pos:line="170" pos:column="17">handler</name><argument_list pos:line="170" pos:column="24">(<argument><expr><name pos:line="170" pos:column="25">this</name></expr></argument>, <argument><expr><name pos:line="170" pos:column="31">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="174" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="175" pos:column="9">/// Executed when &lt;see cref="UpdateCompleted"/&gt; is raised</comment>
        <comment type="line" pos:line="176" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="177" pos:column="9">/// &lt;param name="e"&gt;The event arguments&lt;/param&gt;</comment>
        <function><type><specifier pos:line="178" pos:column="9">protected</specifier> <specifier pos:line="178" pos:column="19">virtual</specifier> <name pos:line="178" pos:column="27">void</name></type> <name pos:line="178" pos:column="32">OnUpdateCompleted</name><parameter_list pos:line="178" pos:column="49">(<param><decl><type><name pos:line="178" pos:column="50">EventArgs</name></type> <name pos:line="178" pos:column="60">e</name></decl></param>)</parameter_list> <block pos:line="178" pos:column="63">{
            <decl_stmt><decl><type><name pos:line="179" pos:column="13">EventHandler</name></type> <name pos:line="179" pos:column="26">handler</name> <init pos:line="179" pos:column="34">= <expr><name pos:line="179" pos:column="36">UpdateCompleted</name></expr></init></decl>;</decl_stmt>
            <if pos:line="180" pos:column="13">if<condition pos:line="180" pos:column="15">(<expr><name pos:line="180" pos:column="16">null</name> <op:operator pos:line="180" pos:column="21">!=</op:operator> <name pos:line="180" pos:column="24">handler</name></expr>)</condition><then pos:line="180" pos:column="32"> <block pos:line="180" pos:column="33">{
                <expr_stmt><expr><call><name pos:line="181" pos:column="17">handler</name><argument_list pos:line="181" pos:column="24">(<argument><expr><name pos:line="181" pos:column="25">this</name></expr></argument>, <argument><expr><name pos:line="181" pos:column="31">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="185" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="186" pos:column="9">/// Executed when &lt;see cref="UpdateStarted"/&gt; is raised</comment>
        <comment type="line" pos:line="187" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="188" pos:column="9">/// &lt;param name="e"&gt;The event arguments&lt;/param&gt;</comment>
        <function><type><specifier pos:line="189" pos:column="9">protected</specifier> <specifier pos:line="189" pos:column="19">virtual</specifier> <name pos:line="189" pos:column="27">void</name></type> <name pos:line="189" pos:column="32">OnUpdateStarted</name><parameter_list pos:line="189" pos:column="47">(<param><decl><type><name pos:line="189" pos:column="48">EventArgs</name></type> <name pos:line="189" pos:column="58">e</name></decl></param>)</parameter_list> <block pos:line="189" pos:column="61">{
            <decl_stmt><decl><type><name pos:line="190" pos:column="13">EventHandler</name></type> <name pos:line="190" pos:column="26">handler</name> <init pos:line="190" pos:column="34">= <expr><name pos:line="190" pos:column="36">UpdateStarted</name></expr></init></decl>;</decl_stmt>
            <if pos:line="191" pos:column="13">if<condition pos:line="191" pos:column="15">(<expr><name pos:line="191" pos:column="16">null</name> <op:operator pos:line="191" pos:column="21">!=</op:operator> <name pos:line="191" pos:column="24">handler</name></expr>)</condition><then pos:line="191" pos:column="32"> <block pos:line="191" pos:column="33">{
                <expr_stmt><expr><call><name pos:line="192" pos:column="17">handler</name><argument_list pos:line="192" pos:column="24">(<argument><expr><name pos:line="192" pos:column="25">this</name></expr></argument>, <argument><expr><name pos:line="192" pos:column="31">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="196" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="197" pos:column="9">/// Saves the monitor state</comment>
        <comment type="line" pos:line="198" pos:column="9">/// &lt;/summary&gt;</comment>
        <function_decl><type><specifier pos:line="199" pos:column="9">protected</specifier> <specifier pos:line="199" pos:column="19">abstract</specifier> <name pos:line="199" pos:column="28">void</name></type> <name pos:line="199" pos:column="33">Save</name><parameter_list pos:line="199" pos:column="37">()</parameter_list>;</function_decl>

        <comment type="line" pos:line="201" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="202" pos:column="9">/// Sets up the monitor prior to monitoring</comment>
        <comment type="line" pos:line="203" pos:column="9">/// &lt;/summary&gt;</comment>
        <function_decl><type><specifier pos:line="204" pos:column="9">protected</specifier> <specifier pos:line="204" pos:column="19">abstract</specifier> <name pos:line="204" pos:column="28">void</name></type> <name pos:line="204" pos:column="33">Setup</name><parameter_list pos:line="204" pos:column="38">()</parameter_list>;</function_decl>

        <comment type="line" pos:line="206" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="207" pos:column="9">/// Updates the monitor</comment>
        <comment type="line" pos:line="208" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="209" pos:column="9">public</specifier> <name pos:line="209" pos:column="16">void</name></type> <name pos:line="209" pos:column="21">Update</name><parameter_list pos:line="209" pos:column="27">()</parameter_list> <block pos:line="209" pos:column="30">{
            <try pos:line="210" pos:column="13">try <block pos:line="210" pos:column="17">{
                <expr_stmt><expr><name pos:line="211" pos:column="17">IsUpdating</name> <op:operator pos:line="211" pos:column="28">=</op:operator> <lit:literal type="boolean" pos:line="211" pos:column="30">true</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="212" pos:column="17">UpdateImpl</name><argument_list pos:line="212" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
            }</block> <finally pos:line="213" pos:column="15">finally <block pos:line="213" pos:column="23">{
                <expr_stmt><expr><name pos:line="214" pos:column="17">IsUpdating</name> <op:operator pos:line="214" pos:column="28">=</op:operator> <lit:literal type="boolean" pos:line="214" pos:column="30">false</lit:literal></expr>;</expr_stmt>
            }</block></finally></try>
        }</block></function>

        <comment type="line" pos:line="218" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="219" pos:column="9">/// Implementation method for &lt;see cref="Update"/&gt;</comment>
        <comment type="line" pos:line="220" pos:column="9">/// &lt;/summary&gt;</comment>
        <function_decl><type><specifier pos:line="221" pos:column="9">protected</specifier> <specifier pos:line="221" pos:column="19">abstract</specifier> <name pos:line="221" pos:column="28">void</name></type> <name pos:line="221" pos:column="33">UpdateImpl</name><parameter_list pos:line="221" pos:column="43">()</parameter_list>;</function_decl>

        <comment type="line" pos:line="223" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="224" pos:column="9">/// Implementation method for &lt;see cref="StartMonitoring"/&gt;</comment>
        <comment type="line" pos:line="225" pos:column="9">/// &lt;/summary&gt;</comment>
        <function_decl><type><specifier pos:line="226" pos:column="9">protected</specifier> <specifier pos:line="226" pos:column="19">abstract</specifier> <name pos:line="226" pos:column="28">void</name></type> <name pos:line="226" pos:column="33">StartMonitoringImpl</name><parameter_list pos:line="226" pos:column="52">()</parameter_list>;</function_decl>

        <comment type="line" pos:line="228" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="229" pos:column="9">/// Implementation method for &lt;see cref="StopMonitoring"/&gt;</comment>
        <comment type="line" pos:line="230" pos:column="9">/// &lt;/summary&gt;</comment>
        <function_decl><type><specifier pos:line="231" pos:column="9">protected</specifier> <specifier pos:line="231" pos:column="19">abstract</specifier> <name pos:line="231" pos:column="28">void</name></type> <name pos:line="231" pos:column="33">StopMonitoringImpl</name><parameter_list pos:line="231" pos:column="51">()</parameter_list>;</function_decl>
    }</block></class>
}</block></namespace></unit>
