<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data\CatchStatement.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2014 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Patrick Francis (ABB Group) - initial API, implementation, &amp; documentation
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="13" pos:column="1">using <name pos:line="13" pos:column="7">System</name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Collections</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">Generic</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Linq</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Text</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Xml</name></name>;</using>

<namespace pos:line="19" pos:column="1">namespace <name><name pos:line="19" pos:column="11">ABB</name><op:operator pos:line="19" pos:column="14">.</op:operator><name pos:line="19" pos:column="15">SrcML</name><op:operator pos:line="19" pos:column="20">.</op:operator><name pos:line="19" pos:column="21">Data</name></name> <block pos:line="19" pos:column="26">{
    <comment type="line" pos:line="20" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="21" pos:column="5">/// Represents a catch statement.</comment>
    <comment type="line" pos:line="22" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="23" pos:column="5">public</specifier> class <name pos:line="23" pos:column="18">CatchStatement</name> <super pos:line="23" pos:column="33">: <name pos:line="23" pos:column="35">BlockStatement</name></super> <block pos:line="23" pos:column="50">{
        <decl_stmt><decl><type><specifier pos:line="24" pos:column="9">private</specifier> <name pos:line="24" pos:column="17">VariableDeclaration</name></type> <name pos:line="24" pos:column="37">parameter</name></decl>;</decl_stmt>
        
        <comment type="line" pos:line="26" pos:column="9">/// &lt;summary&gt; The XML name for CatchStatement &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="27" pos:column="9">public</specifier> <specifier pos:line="27" pos:column="16">new</specifier> <specifier pos:line="27" pos:column="20">const</specifier> <name pos:line="27" pos:column="26">string</name></type> <name pos:line="27" pos:column="33">XmlName</name> <init pos:line="27" pos:column="41">= <expr><lit:literal type="string" pos:line="27" pos:column="43">"Catch"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="29" pos:column="9">/// &lt;summary&gt; XML Name for &lt;see cref="Parameter" /&gt; &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="30" pos:column="9">public</specifier> <specifier pos:line="30" pos:column="16">const</specifier> <name pos:line="30" pos:column="22">string</name></type> <name pos:line="30" pos:column="29">XmlParameterName</name> <init pos:line="30" pos:column="46">= <expr><lit:literal type="string" pos:line="30" pos:column="48">"Parameter"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="32" pos:column="9">/// &lt;summary&gt; The exception that the catch statement will catch. &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="33" pos:column="9">public</specifier> <name pos:line="33" pos:column="16">VariableDeclaration</name></type> <name pos:line="33" pos:column="36">Parameter</name> <block pos:line="33" pos:column="46">{
            <function><name pos:line="34" pos:column="13">get</name> <block pos:line="34" pos:column="17">{ <return pos:line="34" pos:column="19">return <expr><name pos:line="34" pos:column="26">parameter</name></expr>;</return> }</block></function>
            <function><name pos:line="35" pos:column="13">set</name> <block pos:line="35" pos:column="17">{
                <expr_stmt><expr><name pos:line="36" pos:column="17">parameter</name> <op:operator pos:line="36" pos:column="27">=</op:operator> <name pos:line="36" pos:column="29">value</name></expr>;</expr_stmt>
                <if pos:line="37" pos:column="17">if<condition pos:line="37" pos:column="19">(<expr><name pos:line="37" pos:column="20">parameter</name> <op:operator pos:line="37" pos:column="30">!=</op:operator> <name pos:line="37" pos:column="33">null</name></expr>)</condition><then pos:line="37" pos:column="38"> <block pos:line="37" pos:column="39">{
                    <expr_stmt><expr><name><name pos:line="38" pos:column="21">parameter</name><op:operator pos:line="38" pos:column="30">.</op:operator><name pos:line="38" pos:column="31">ParentStatement</name></name> <op:operator pos:line="38" pos:column="47">=</op:operator> <name pos:line="38" pos:column="49">this</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="43" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="44" pos:column="9">/// Instance method for getting &lt;see cref="CatchStatement.XmlName"/&gt;</comment>
        <comment type="line" pos:line="45" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="46" pos:column="9">/// &lt;returns&gt;Returns the XML name for CatchStatement&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="47" pos:column="9">public</specifier> <specifier pos:line="47" pos:column="16">override</specifier> <name pos:line="47" pos:column="25">string</name></type> <name pos:line="47" pos:column="32">GetXmlName</name><parameter_list pos:line="47" pos:column="42">()</parameter_list> <block pos:line="47" pos:column="45">{ <return pos:line="47" pos:column="47">return <expr><name><name pos:line="47" pos:column="54">CatchStatement</name><op:operator pos:line="47" pos:column="68">.</op:operator><name pos:line="47" pos:column="69">XmlName</name></name></expr>;</return> }</block></function>

        <comment type="line" pos:line="49" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="50" pos:column="9">/// Processes the child of the current reader position into a child of this object.</comment>
        <comment type="line" pos:line="51" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="52" pos:column="9">/// &lt;param name="reader"&gt;The XML reader&lt;/param&gt;</comment>
        <function><type><specifier pos:line="53" pos:column="9">protected</specifier> <specifier pos:line="53" pos:column="19">override</specifier> <name pos:line="53" pos:column="28">void</name></type> <name pos:line="53" pos:column="33">ReadXmlChild</name><parameter_list pos:line="53" pos:column="45">(<param><decl><type><name pos:line="53" pos:column="46">XmlReader</name></type> <name pos:line="53" pos:column="56">reader</name></decl></param>)</parameter_list> <block pos:line="53" pos:column="64">{
            <if pos:line="54" pos:column="13">if<condition pos:line="54" pos:column="15">(<expr><name pos:line="54" pos:column="16">XmlParameterName</name> <op:operator pos:line="54" pos:column="33">==</op:operator> <name><name pos:line="54" pos:column="36">reader</name><op:operator pos:line="54" pos:column="42">.</op:operator><name pos:line="54" pos:column="43">Name</name></name></expr>)</condition><then pos:line="54" pos:column="48"> <block pos:line="54" pos:column="49">{
                <expr_stmt><expr><name pos:line="55" pos:column="17">Parameter</name> <op:operator pos:line="55" pos:column="27">=</op:operator> <call><name><name pos:line="55" pos:column="29">XmlSerialization</name><op:operator pos:line="55" pos:column="45">.</op:operator><name pos:line="55" pos:column="46">ReadChildExpression</name></name><argument_list pos:line="55" pos:column="65">(<argument><expr><name pos:line="55" pos:column="66">reader</name></expr></argument>)</argument_list></call> <op:operator pos:line="55" pos:column="74">as</op:operator> <name pos:line="55" pos:column="77">VariableDeclaration</name></expr>;</expr_stmt>
            }</block></then> <else pos:line="56" pos:column="15">else <block pos:line="56" pos:column="20">{
                <expr_stmt><expr><call><name><name pos:line="57" pos:column="17">base</name><op:operator pos:line="57" pos:column="21">.</op:operator><name pos:line="57" pos:column="22">ReadXmlChild</name></name><argument_list pos:line="57" pos:column="34">(<argument><expr><name pos:line="57" pos:column="35">reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></function>

        <comment type="line" pos:line="61" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="62" pos:column="9">/// Writes the contents of this object to &lt;paramref name="writer"/&gt;.</comment>
        <comment type="line" pos:line="63" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="64" pos:column="9">/// &lt;param name="writer"&gt;The XML writer to write to&lt;/param&gt;</comment>
        <function><type><specifier pos:line="65" pos:column="9">protected</specifier> <specifier pos:line="65" pos:column="19">override</specifier> <name pos:line="65" pos:column="28">void</name></type> <name pos:line="65" pos:column="33">WriteXmlContents</name><parameter_list pos:line="65" pos:column="49">(<param><decl><type><name pos:line="65" pos:column="50">XmlWriter</name></type> <name pos:line="65" pos:column="60">writer</name></decl></param>)</parameter_list> <block pos:line="65" pos:column="68">{
            <if pos:line="66" pos:column="13">if<condition pos:line="66" pos:column="15">(<expr><name pos:line="66" pos:column="16">null</name> <op:operator pos:line="66" pos:column="21">!=</op:operator> <name pos:line="66" pos:column="24">Parameter</name></expr>)</condition><then pos:line="66" pos:column="34"> <block pos:line="66" pos:column="35">{
                <expr_stmt><expr><call><name><name pos:line="67" pos:column="17">XmlSerialization</name><op:operator pos:line="67" pos:column="33">.</op:operator><name pos:line="67" pos:column="34">WriteElement</name></name><argument_list pos:line="67" pos:column="46">(<argument><expr><name pos:line="67" pos:column="47">writer</name></expr></argument>, <argument><expr><name pos:line="67" pos:column="55">Parameter</name></expr></argument>, <argument><expr><name pos:line="67" pos:column="66">XmlParameterName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name pos:line="69" pos:column="13">base</name><op:operator pos:line="69" pos:column="17">.</op:operator><name pos:line="69" pos:column="18">WriteXmlContents</name></name><argument_list pos:line="69" pos:column="34">(<argument><expr><name pos:line="69" pos:column="35">writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="72" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="73" pos:column="9">/// Returns all the expressions within this statement.</comment>
        <comment type="line" pos:line="74" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="75" pos:column="9">public</specifier> <specifier pos:line="75" pos:column="16">override</specifier> <name><name pos:line="75" pos:column="25">IEnumerable</name><argument_list pos:line="75" pos:column="36">&lt;<argument><name pos:line="75" pos:column="37">Expression</name></argument>&gt;</argument_list></name></type> <name pos:line="75" pos:column="49">GetExpressions</name><parameter_list pos:line="75" pos:column="63">()</parameter_list> <block pos:line="75" pos:column="66">{
            <if pos:line="76" pos:column="13">if<condition pos:line="76" pos:column="15">(<expr><name pos:line="76" pos:column="16">Parameter</name> <op:operator pos:line="76" pos:column="26">!=</op:operator> <name pos:line="76" pos:column="29">null</name></expr>)</condition><then pos:line="76" pos:column="34"> <block pos:line="76" pos:column="35">{
                <return><specifier pos:line="77" pos:column="17">yield</specifier> return <expr><name pos:line="77" pos:column="30">Parameter</name></expr>;</return>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="81" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="82" pos:column="9">/// Returns a string representation of this statement.</comment>
        <comment type="line" pos:line="83" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="84" pos:column="9">public</specifier> <specifier pos:line="84" pos:column="16">override</specifier> <name pos:line="84" pos:column="25">string</name></type> <name pos:line="84" pos:column="32">ToString</name><parameter_list pos:line="84" pos:column="40">()</parameter_list> <block pos:line="84" pos:column="43">{
            <return pos:line="85" pos:column="13">return <expr><call><name><name pos:line="85" pos:column="20">string</name><op:operator pos:line="85" pos:column="26">.</op:operator><name pos:line="85" pos:column="27">Format</name></name><argument_list pos:line="85" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="85" pos:column="34">"catch({0})"</lit:literal></expr></argument>, <argument><expr><name pos:line="85" pos:column="48">Parameter</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
