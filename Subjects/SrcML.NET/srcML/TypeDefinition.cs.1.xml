<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data\TypeDefinition.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2013 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *    Patrick Francis (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Text</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">ABB</name><op:operator pos:line="14" pos:column="10">.</op:operator><name pos:line="14" pos:column="11">SrcML</name><op:operator pos:line="14" pos:column="16">.</op:operator><name pos:line="14" pos:column="17">Utilities</name></name>;</using>
<using pos:line="15" pos:column="1">using <name pos:line="15" pos:column="7">System</name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Collections</name><op:operator pos:line="16" pos:column="25">.</op:operator><name pos:line="16" pos:column="26">Generic</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Collections</name><op:operator pos:line="17" pos:column="25">.</op:operator><name pos:line="17" pos:column="26">ObjectModel</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Diagnostics</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">System</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">Linq</name></name>;</using>
<using pos:line="20" pos:column="1">using <name><name pos:line="20" pos:column="7">System</name><op:operator pos:line="20" pos:column="13">.</op:operator><name pos:line="20" pos:column="14">Xml</name></name>;</using>

<namespace pos:line="22" pos:column="1">namespace <name><name pos:line="22" pos:column="11">ABB</name><op:operator pos:line="22" pos:column="14">.</op:operator><name pos:line="22" pos:column="15">SrcML</name><op:operator pos:line="22" pos:column="20">.</op:operator><name pos:line="22" pos:column="21">Data</name></name> <block pos:line="22" pos:column="26">{
    <comment type="line" pos:line="23" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="24" pos:column="5">/// Represents a type definition in a program.</comment>
    <comment type="line" pos:line="25" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="26" pos:column="5">public</specifier> class <name pos:line="26" pos:column="18">TypeDefinition</name> <super pos:line="26" pos:column="33">: <name pos:line="26" pos:column="35">NamedScope</name></super> <block pos:line="26" pos:column="46">{
        <decl_stmt><decl><type><specifier pos:line="27" pos:column="9">private</specifier> <name><name pos:line="27" pos:column="17">Collection</name><argument_list pos:line="27" pos:column="27">&lt;<argument><name pos:line="27" pos:column="28">TypeUse</name></argument>&gt;</argument_list></name></type> <name pos:line="27" pos:column="37">parentTypeCollection</name></decl>;</decl_stmt>

        <comment type="line" pos:line="29" pos:column="9">/// &lt;summary&gt; The XML name for TypeDefinition &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="30" pos:column="9">public</specifier> <specifier pos:line="30" pos:column="16">new</specifier> <specifier pos:line="30" pos:column="20">const</specifier> <name pos:line="30" pos:column="26">string</name></type> <name pos:line="30" pos:column="33">XmlName</name> <init pos:line="30" pos:column="41">= <expr><lit:literal type="string" pos:line="30" pos:column="43">"Type"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="32" pos:column="9">/// &lt;summary&gt; XML Name for &lt;see cref="Kind" /&gt; &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="33" pos:column="9">public</specifier> <specifier pos:line="33" pos:column="16">const</specifier> <name pos:line="33" pos:column="22">string</name></type> <name pos:line="33" pos:column="29">XmlKindName</name> <init pos:line="33" pos:column="41">= <expr><lit:literal type="string" pos:line="33" pos:column="43">"kind"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="35" pos:column="9">/// &lt;summary&gt; XML Name for &lt;see cref="ParentTypeNames" /&gt; &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="36" pos:column="9">public</specifier> <specifier pos:line="36" pos:column="16">const</specifier> <name pos:line="36" pos:column="22">string</name></type> <name pos:line="36" pos:column="29">XmlParentTypeNamesName</name> <init pos:line="36" pos:column="52">= <expr><lit:literal type="string" pos:line="36" pos:column="54">"ParentTypes"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="38" pos:column="9">/// &lt;summary&gt; XML Name for &lt;see cref="IsPartial" /&gt; &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="39" pos:column="9">public</specifier> <specifier pos:line="39" pos:column="16">const</specifier> <name pos:line="39" pos:column="22">string</name></type> <name pos:line="39" pos:column="29">XmlIsPartialName</name> <init pos:line="39" pos:column="46">= <expr><lit:literal type="string" pos:line="39" pos:column="48">"IsPartial"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="41" pos:column="9">/// &lt;summary&gt; Creates a new type definition object &lt;/summary&gt;</comment>
        <constructor><specifier pos:line="42" pos:column="9">public</specifier> <name pos:line="42" pos:column="16">TypeDefinition</name><parameter_list pos:line="42" pos:column="30">()</parameter_list>
            <member_list pos:line="43" pos:column="13">: <call><name pos:line="43" pos:column="15">base</name><argument_list pos:line="43" pos:column="19">()</argument_list></call> </member_list><block pos:line="43" pos:column="22">{
            <expr_stmt><expr><name pos:line="44" pos:column="13">parentTypeCollection</name> <op:operator pos:line="44" pos:column="34">=</op:operator> <op:operator pos:line="44" pos:column="36">new</op:operator> <call><name><name pos:line="44" pos:column="40">Collection</name><argument_list pos:line="44" pos:column="50">&lt;<argument><name pos:line="44" pos:column="51">TypeUse</name></argument>&gt;</argument_list></name><argument_list pos:line="44" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="45" pos:column="13">ParentTypeNames</name> <op:operator pos:line="45" pos:column="29">=</op:operator> <op:operator pos:line="45" pos:column="31">new</op:operator> <call><name><name pos:line="45" pos:column="35">ReadOnlyCollection</name><argument_list pos:line="45" pos:column="53">&lt;<argument><name pos:line="45" pos:column="54">TypeUse</name></argument>&gt;</argument_list></name><argument_list pos:line="45" pos:column="62">(<argument><expr><name pos:line="45" pos:column="63">parentTypeCollection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="46" pos:column="13">IsPartial</name> <op:operator pos:line="46" pos:column="23">=</op:operator> <lit:literal type="boolean" pos:line="46" pos:column="25">false</lit:literal></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="49" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="50" pos:column="9">/// The kind of type this object represents, e.g. class, struct, etc.</comment>
        <comment type="line" pos:line="51" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="52" pos:column="9">public</specifier> <name pos:line="52" pos:column="16">TypeKind</name></type> <name pos:line="52" pos:column="25">Kind</name> <block pos:line="52" pos:column="30">{ <function_decl><name pos:line="52" pos:column="32">get</name>;</function_decl> <function_decl><name pos:line="52" pos:column="37">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="54" pos:column="9">/// &lt;summary&gt; The parents of this type. &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="55" pos:column="9">public</specifier> <name><name pos:line="55" pos:column="16">ReadOnlyCollection</name><argument_list pos:line="55" pos:column="34">&lt;<argument><name pos:line="55" pos:column="35">TypeUse</name></argument>&gt;</argument_list></name></type> <name pos:line="55" pos:column="44">ParentTypeNames</name> <block pos:line="55" pos:column="60">{ <function_decl><name pos:line="55" pos:column="62">get</name>;</function_decl> <function_decl><specifier pos:line="55" pos:column="67">protected</specifier> <name pos:line="55" pos:column="77">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="57" pos:column="9">/// &lt;summary&gt; Indicates whether this is a partial type. &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="58" pos:column="9">public</specifier> <name pos:line="58" pos:column="16">bool</name></type> <name pos:line="58" pos:column="21">IsPartial</name> <block pos:line="58" pos:column="31">{ <function_decl><name pos:line="58" pos:column="33">get</name>;</function_decl> <function_decl><name pos:line="58" pos:column="38">set</name>;</function_decl> }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="60" pos:column="9">protected</specifier> <specifier pos:line="60" pos:column="19">override</specifier> <name pos:line="60" pos:column="28">bool</name></type> <name pos:line="60" pos:column="33">ToBeDeleted</name> <block pos:line="60" pos:column="45">{ <function><name pos:line="60" pos:column="47">get</name> <block pos:line="60" pos:column="51">{ <return pos:line="60" pos:column="53">return <expr><call><name><name pos:line="60" pos:column="60">Locations</name><op:operator pos:line="60" pos:column="69">.</op:operator><name pos:line="60" pos:column="70">All</name></name><argument_list pos:line="60" pos:column="73">(<argument><expr><lambda><name pos:line="60" pos:column="74">l</name> <op:operator pos:line="60" pos:column="76">=&gt;</op:operator> <name><name pos:line="60" pos:column="79">l</name><op:operator pos:line="60" pos:column="80">.</op:operator><name pos:line="60" pos:column="81">IsReference</name></name></lambda></expr></argument>)</argument_list></call></expr>;</return> }</block></function> }</block></decl></decl_stmt>

        <comment type="line" pos:line="62" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="63" pos:column="9">/// Adds &lt;paramref name="parentTypeUse"/&gt;as a parent type for this type definition.</comment>
        <comment type="line" pos:line="64" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="65" pos:column="9">/// &lt;param name="parentTypeUse"&gt;The parent type to add&lt;/param&gt;</comment>
        <function><type><specifier pos:line="66" pos:column="9">public</specifier> <name pos:line="66" pos:column="16">void</name></type> <name pos:line="66" pos:column="21">AddParentType</name><parameter_list pos:line="66" pos:column="34">(<param><decl><type><name pos:line="66" pos:column="35">TypeUse</name></type> <name pos:line="66" pos:column="43">parentTypeUse</name></decl></param>)</parameter_list> <block pos:line="66" pos:column="58">{
            <if pos:line="67" pos:column="13">if<condition pos:line="67" pos:column="15">(<expr><name pos:line="67" pos:column="16">null</name> <op:operator pos:line="67" pos:column="21">==</op:operator> <name pos:line="67" pos:column="24">parentTypeUse</name></expr>)</condition><then pos:line="67" pos:column="38">
                <throw pos:line="68" pos:column="17">throw <expr><op:operator pos:line="68" pos:column="23">new</op:operator> <call><name pos:line="68" pos:column="27">ArgumentNullException</name><argument_list pos:line="68" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="68" pos:column="49">"parentTypeUse"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <expr_stmt><expr><name><name pos:line="70" pos:column="13">parentTypeUse</name><op:operator pos:line="70" pos:column="26">.</op:operator><name pos:line="70" pos:column="27">ParentStatement</name></name> <op:operator pos:line="70" pos:column="43">=</op:operator> <name pos:line="70" pos:column="45">this</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="71" pos:column="13">parentTypeCollection</name><op:operator pos:line="71" pos:column="33">.</op:operator><name pos:line="71" pos:column="34">Add</name></name><argument_list pos:line="71" pos:column="37">(<argument><expr><name pos:line="71" pos:column="38">parentTypeUse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="74" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="75" pos:column="9">/// Instance method for getting &lt;see cref="TypeDefinition.XmlName"/&gt;</comment>
        <comment type="line" pos:line="76" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="77" pos:column="9">/// &lt;returns&gt;Returns the XML name for TypeDefinition&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="78" pos:column="9">public</specifier> <specifier pos:line="78" pos:column="16">override</specifier> <name pos:line="78" pos:column="25">string</name></type> <name pos:line="78" pos:column="32">GetXmlName</name><parameter_list pos:line="78" pos:column="42">()</parameter_list> <block pos:line="78" pos:column="45">{ <return pos:line="78" pos:column="47">return <expr><name><name pos:line="78" pos:column="54">TypeDefinition</name><op:operator pos:line="78" pos:column="68">.</op:operator><name pos:line="78" pos:column="69">XmlName</name></name></expr>;</return> }</block></function>

        <function><type><specifier pos:line="80" pos:column="9">public</specifier> <specifier pos:line="80" pos:column="16">override</specifier> <name pos:line="80" pos:column="25">Statement</name></type> <name pos:line="80" pos:column="35">Merge</name><parameter_list pos:line="80" pos:column="40">(<param><decl><type><name pos:line="80" pos:column="41">Statement</name></type> <name pos:line="80" pos:column="51">otherStatement</name></decl></param>)</parameter_list> <block pos:line="80" pos:column="67">{
            <return pos:line="81" pos:column="13">return <expr><call><name pos:line="81" pos:column="20">Merge</name><argument_list pos:line="81" pos:column="25">(<argument><expr><name pos:line="81" pos:column="26">otherStatement</name> <op:operator pos:line="81" pos:column="41">as</op:operator> <name pos:line="81" pos:column="44">TypeDefinition</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="84" pos:column="9">public</specifier> <name pos:line="84" pos:column="16">TypeDefinition</name></type> <name pos:line="84" pos:column="31">Merge</name><parameter_list pos:line="84" pos:column="36">(<param><decl><type><name pos:line="84" pos:column="37">TypeDefinition</name></type> <name pos:line="84" pos:column="52">otherType</name></decl></param>)</parameter_list> <block pos:line="84" pos:column="63">{
            <if pos:line="85" pos:column="13">if<condition pos:line="85" pos:column="15">(<expr><name pos:line="85" pos:column="16">null</name> <op:operator pos:line="85" pos:column="21">==</op:operator> <name pos:line="85" pos:column="24">otherType</name></expr>)</condition><then pos:line="85" pos:column="34"> <block pos:line="85" pos:column="35">{
                <throw pos:line="86" pos:column="17">throw <expr><op:operator pos:line="86" pos:column="23">new</op:operator> <call><name pos:line="86" pos:column="27">ArgumentNullException</name><argument_list pos:line="86" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="86" pos:column="49">"otherType"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <decl_stmt><decl><type><name pos:line="88" pos:column="13">TypeDefinition</name></type> <name pos:line="88" pos:column="28">combinedType</name> <init pos:line="88" pos:column="41">= <expr><call><name><name pos:line="88" pos:column="43">Merge</name><argument_list pos:line="88" pos:column="48">&lt;<argument><name pos:line="88" pos:column="49">TypeDefinition</name></argument>&gt;</argument_list></name><argument_list pos:line="88" pos:column="64">(<argument><expr><name pos:line="88" pos:column="65">this</name></expr></argument>, <argument><expr><name pos:line="88" pos:column="71">otherType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="89" pos:column="13">combinedType</name><op:operator pos:line="89" pos:column="25">.</op:operator><name pos:line="89" pos:column="26">Kind</name></name> <op:operator pos:line="89" pos:column="31">=</op:operator> <name><name pos:line="89" pos:column="33">this</name><op:operator pos:line="89" pos:column="37">.</op:operator><name pos:line="89" pos:column="38">Kind</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="90" pos:column="13">combinedType</name><op:operator pos:line="90" pos:column="25">.</op:operator><name pos:line="90" pos:column="26">IsPartial</name></name> <op:operator pos:line="90" pos:column="36">=</op:operator> <name><name pos:line="90" pos:column="38">this</name><op:operator pos:line="90" pos:column="42">.</op:operator><name pos:line="90" pos:column="43">IsPartial</name></name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="91" pos:column="13">TypeDefinition</name></type> <name pos:line="91" pos:column="28">typeWithParents</name> <init pos:line="91" pos:column="44">= <expr><name pos:line="91" pos:column="46">null</name></expr></init></decl>;</decl_stmt>
            <if pos:line="92" pos:column="13">if<condition pos:line="92" pos:column="15">(<expr><name><name pos:line="92" pos:column="16">this</name><op:operator pos:line="92" pos:column="20">.</op:operator><name pos:line="92" pos:column="21">ParentTypeNames</name><op:operator pos:line="92" pos:column="36">.</op:operator><name pos:line="92" pos:column="37">Count</name></name> <op:operator pos:line="92" pos:column="43">&gt;</op:operator> <lit:literal type="number" pos:line="92" pos:column="45">0</lit:literal></expr>)</condition><then pos:line="92" pos:column="47"> <block pos:line="92" pos:column="48">{
                <expr_stmt><expr><name pos:line="93" pos:column="17">typeWithParents</name> <op:operator pos:line="93" pos:column="33">=</op:operator> <name pos:line="93" pos:column="35">this</name></expr>;</expr_stmt>
            }</block></then> <else pos:line="94" pos:column="15">else <if pos:line="94" pos:column="20">if<condition pos:line="94" pos:column="22">(<expr><name><name pos:line="94" pos:column="23">otherType</name><op:operator pos:line="94" pos:column="32">.</op:operator><name pos:line="94" pos:column="33">ParentTypeNames</name><op:operator pos:line="94" pos:column="48">.</op:operator><name pos:line="94" pos:column="49">Count</name></name> <op:operator pos:line="94" pos:column="55">&gt;</op:operator> <lit:literal type="number" pos:line="94" pos:column="57">0</lit:literal></expr>)</condition><then pos:line="94" pos:column="59"> <block pos:line="94" pos:column="60">{
                <expr_stmt><expr><name pos:line="95" pos:column="17">typeWithParents</name> <op:operator pos:line="95" pos:column="33">=</op:operator> <name pos:line="95" pos:column="35">otherType</name></expr>;</expr_stmt>
            }</block></then></if></else></if>

            <if pos:line="98" pos:column="13">if<condition pos:line="98" pos:column="15">(<expr><name pos:line="98" pos:column="16">null</name> <op:operator pos:line="98" pos:column="21">!=</op:operator> <name pos:line="98" pos:column="24">typeWithParents</name></expr>)</condition><then pos:line="98" pos:column="40"> <block pos:line="98" pos:column="41">{
                <foreach pos:line="99" pos:column="17">foreach(<init><decl><type><name pos:line="99" pos:column="25">var</name></type> <name pos:line="99" pos:column="29">parentType</name> <range pos:line="99" pos:column="40">in <expr><name><name pos:line="99" pos:column="43">typeWithParents</name><op:operator pos:line="99" pos:column="58">.</op:operator><name pos:line="99" pos:column="59">ParentTypeNames</name></name></expr></range></decl></init>) <block pos:line="99" pos:column="76">{
                    <expr_stmt><expr><call><name><name pos:line="100" pos:column="21">combinedType</name><op:operator pos:line="100" pos:column="33">.</op:operator><name pos:line="100" pos:column="34">AddParentType</name></name><argument_list pos:line="100" pos:column="47">(<argument><expr><name pos:line="100" pos:column="48">parentType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
            }</block></then></if>

            <return pos:line="104" pos:column="13">return <expr><name pos:line="104" pos:column="20">combinedType</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="107" pos:column="9">//public override void RemoveFile(string fileName) {</comment>
        <comment type="line" pos:line="108" pos:column="9">//    int definitionLocationCount = RemoveLocations(fileName);</comment>
        <comment type="line" pos:line="109" pos:column="9">//    RemoveFile(fileName, 0 == definitionLocationCount);</comment>
        <comment type="line" pos:line="110" pos:column="9">//}</comment>
        <function><type><specifier pos:line="111" pos:column="9">protected</specifier> <specifier pos:line="111" pos:column="19">override</specifier> <name pos:line="111" pos:column="28">string</name></type> <name pos:line="111" pos:column="35">ComputeMergeId</name><parameter_list pos:line="111" pos:column="49">()</parameter_list> <block pos:line="111" pos:column="52">{
            <if pos:line="112" pos:column="13">if<condition pos:line="112" pos:column="15">(<expr><name><name pos:line="112" pos:column="16">Language</name><op:operator pos:line="112" pos:column="24">.</op:operator><name pos:line="112" pos:column="25">Java</name></name> <op:operator pos:line="112" pos:column="30">==</op:operator> <name pos:line="112" pos:column="33">ProgrammingLanguage</name> <op:operator pos:line="112" pos:column="53">||</op:operator> <name><name pos:line="112" pos:column="56">Language</name><op:operator pos:line="112" pos:column="64">.</op:operator><name pos:line="112" pos:column="65">CSharp</name></name> <op:operator pos:line="112" pos:column="72">==</op:operator> <name pos:line="112" pos:column="75">ProgrammingLanguage</name> <op:operator pos:line="112" pos:column="95">&amp;&amp;</op:operator> <op:operator pos:line="112" pos:column="98">!</op:operator><name pos:line="112" pos:column="99">IsPartial</name></expr>)</condition><then pos:line="112" pos:column="109"> <block pos:line="112" pos:column="110">{
                <return pos:line="113" pos:column="17">return <expr><call><name><name pos:line="113" pos:column="24">base</name><op:operator pos:line="113" pos:column="28">.</op:operator><name pos:line="113" pos:column="29">ComputeMergeId</name></name><argument_list pos:line="113" pos:column="43">()</argument_list></call></expr>;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="116" pos:column="13">char</name></type> <name pos:line="116" pos:column="18">typeSpecifier</name></decl>;</decl_stmt>
            <switch pos:line="117" pos:column="13">switch<condition pos:line="117" pos:column="19">(<expr><name pos:line="117" pos:column="20">Kind</name></expr>)</condition> <block pos:line="117" pos:column="26">{
                <case pos:line="118" pos:column="17">case <expr><name><name pos:line="118" pos:column="22">TypeKind</name><op:operator pos:line="118" pos:column="30">.</op:operator><name pos:line="118" pos:column="31">Class</name></name></expr>:
                    <expr_stmt><expr><name pos:line="119" pos:column="21">typeSpecifier</name> <op:operator pos:line="119" pos:column="35">=</op:operator> <lit:literal type="char" pos:line="119" pos:column="37">'C'</lit:literal></expr>;</expr_stmt>
                    <break pos:line="120" pos:column="21">break;</break>
                </case><case pos:line="121" pos:column="17">case <expr><name><name pos:line="121" pos:column="22">TypeKind</name><op:operator pos:line="121" pos:column="30">.</op:operator><name pos:line="121" pos:column="31">Enumeration</name></name></expr>:
                    <expr_stmt><expr><name pos:line="122" pos:column="21">typeSpecifier</name> <op:operator pos:line="122" pos:column="35">=</op:operator> <lit:literal type="char" pos:line="122" pos:column="37">'E'</lit:literal></expr>;</expr_stmt>
                    <break pos:line="123" pos:column="21">break;</break>
                </case><case pos:line="124" pos:column="17">case <expr><name><name pos:line="124" pos:column="22">TypeKind</name><op:operator pos:line="124" pos:column="30">.</op:operator><name pos:line="124" pos:column="31">Interface</name></name></expr>:
                    <expr_stmt><expr><name pos:line="125" pos:column="21">typeSpecifier</name> <op:operator pos:line="125" pos:column="35">=</op:operator> <lit:literal type="char" pos:line="125" pos:column="37">'I'</lit:literal></expr>;</expr_stmt>
                    <break pos:line="126" pos:column="21">break;</break>
                </case><case pos:line="127" pos:column="17">case <expr><name><name pos:line="127" pos:column="22">TypeKind</name><op:operator pos:line="127" pos:column="30">.</op:operator><name pos:line="127" pos:column="31">Struct</name></name></expr>:
                    <expr_stmt><expr><name pos:line="128" pos:column="21">typeSpecifier</name> <op:operator pos:line="128" pos:column="35">=</op:operator> <lit:literal type="char" pos:line="128" pos:column="37">'S'</lit:literal></expr>;</expr_stmt>
                    <break pos:line="129" pos:column="21">break;</break>
                </case><case pos:line="130" pos:column="17">case <expr><name><name pos:line="130" pos:column="22">TypeKind</name><op:operator pos:line="130" pos:column="30">.</op:operator><name pos:line="130" pos:column="31">Union</name></name></expr>:
                    <expr_stmt><expr><name pos:line="131" pos:column="21">typeSpecifier</name> <op:operator pos:line="131" pos:column="35">=</op:operator> <lit:literal type="char" pos:line="131" pos:column="37">'U'</lit:literal></expr>;</expr_stmt>
                    <break pos:line="132" pos:column="21">break;</break>
                </case><default pos:line="133" pos:column="17">default:
                    <expr_stmt><expr><name pos:line="134" pos:column="21">typeSpecifier</name> <op:operator pos:line="134" pos:column="35">=</op:operator> <lit:literal type="char" pos:line="134" pos:column="37">'T'</lit:literal></expr>;</expr_stmt>
                    <break pos:line="135" pos:column="21">break;</break>
            </default>}</block></switch>

            <decl_stmt><decl><type><name pos:line="138" pos:column="13">string</name></type> <name pos:line="138" pos:column="20">id</name> <init pos:line="138" pos:column="23">= <expr><call><name><name pos:line="138" pos:column="25">String</name><op:operator pos:line="138" pos:column="31">.</op:operator><name pos:line="138" pos:column="32">Format</name></name><argument_list pos:line="138" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="138" pos:column="39">"{0}:T{1}:{2}"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="138" pos:column="55">KsuAdapter</name><op:operator pos:line="138" pos:column="65">.</op:operator><name pos:line="138" pos:column="66">GetLanguage</name></name><argument_list pos:line="138" pos:column="77">(<argument><expr><name pos:line="138" pos:column="78">ProgrammingLanguage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="138" pos:column="100">typeSpecifier</name></expr></argument>, <argument><expr><name><name pos:line="138" pos:column="115">this</name><op:operator pos:line="138" pos:column="119">.</op:operator><name pos:line="138" pos:column="120">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="139" pos:column="13">return <expr><name pos:line="139" pos:column="20">id</name></expr>;</return>
        }</block></function>
        
        <comment type="line" pos:line="142" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="143" pos:column="9">/// This handles the "this" keyword, the "base" keyword (C# only), and the "super" keyword (Java only).</comment>
        <comment type="line" pos:line="144" pos:column="9">/// It searches for the appropriate type definition depending on the context of the usage.</comment>
        <comment type="line" pos:line="145" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="146" pos:column="9">/// &lt;param name="use"&gt;The use to find the containing type for&lt;/param&gt;</comment>
        <comment type="line" pos:line="147" pos:column="9">/// &lt;returns&gt;The type(s) referred to by the keyword&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="148" pos:column="9">public</specifier> <specifier pos:line="148" pos:column="16">static</specifier> <name><name pos:line="148" pos:column="23">IEnumerable</name><argument_list pos:line="148" pos:column="34">&lt;<argument><name pos:line="148" pos:column="35">TypeDefinition</name></argument>&gt;</argument_list></name></type> <name pos:line="148" pos:column="51">GetTypeForKeyword</name><parameter_list pos:line="148" pos:column="68">(<param><decl><type><name pos:line="148" pos:column="69">NameUse</name></type> <name pos:line="148" pos:column="77">use</name></decl></param>)</parameter_list> <block pos:line="148" pos:column="82">{
            <if pos:line="149" pos:column="13">if<condition pos:line="149" pos:column="15">(<expr><name pos:line="149" pos:column="16">use</name> <op:operator pos:line="149" pos:column="20">==</op:operator> <name pos:line="149" pos:column="23">null</name></expr>)</condition><then pos:line="149" pos:column="28"> <block pos:line="149" pos:column="29">{ <throw pos:line="149" pos:column="31">throw <expr><op:operator pos:line="149" pos:column="37">new</op:operator> <call><name pos:line="149" pos:column="41">ArgumentNullException</name><argument_list pos:line="149" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="149" pos:column="63">"use"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>
            <if pos:line="150" pos:column="13">if<condition pos:line="150" pos:column="15">(<expr><name><name pos:line="150" pos:column="16">use</name><op:operator pos:line="150" pos:column="19">.</op:operator><name pos:line="150" pos:column="20">ParentStatement</name></name> <op:operator pos:line="150" pos:column="36">==</op:operator> <name pos:line="150" pos:column="39">null</name></expr>)</condition><then pos:line="150" pos:column="44"> <block pos:line="150" pos:column="45">{
                <throw pos:line="151" pos:column="17">throw <expr><op:operator pos:line="151" pos:column="23">new</op:operator> <call><name pos:line="151" pos:column="27">ArgumentException</name><argument_list pos:line="151" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="151" pos:column="45">"ParentStatement is null"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="151" pos:column="72">"use"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <if pos:line="154" pos:column="13">if<condition pos:line="154" pos:column="15">(<expr><name><name pos:line="154" pos:column="16">use</name><op:operator pos:line="154" pos:column="19">.</op:operator><name pos:line="154" pos:column="20">Name</name></name> <op:operator pos:line="154" pos:column="25">==</op:operator> <lit:literal type="string" pos:line="154" pos:column="28">"this"</lit:literal></expr>)</condition><then pos:line="154" pos:column="35"> <block pos:line="154" pos:column="36">{
                <comment type="line" pos:line="155" pos:column="17">//return the surrounding type definition</comment>
                <return pos:line="156" pos:column="17">return <expr><call><name><name pos:line="156" pos:column="24">use</name><op:operator pos:line="156" pos:column="27">.</op:operator><name pos:line="156" pos:column="28">ParentStatement</name><op:operator pos:line="156" pos:column="43">.</op:operator><name><name pos:line="156" pos:column="44">GetAncestorsAndSelf</name><argument_list pos:line="156" pos:column="63">&lt;<argument><name pos:line="156" pos:column="64">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="156" pos:column="79">()</argument_list></call><op:operator pos:line="156" pos:column="81">.</op:operator><call><name pos:line="156" pos:column="82">Take</name><argument_list pos:line="156" pos:column="86">(<argument><expr><lit:literal type="number" pos:line="156" pos:column="87">1</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
            <if pos:line="158" pos:column="13">if<condition pos:line="158" pos:column="15">(<expr><op:operator pos:line="158" pos:column="16">(</op:operator><name><name pos:line="158" pos:column="17">use</name><op:operator pos:line="158" pos:column="20">.</op:operator><name pos:line="158" pos:column="21">Name</name></name> <op:operator pos:line="158" pos:column="26">==</op:operator> <lit:literal type="string" pos:line="158" pos:column="29">"base"</lit:literal> <op:operator pos:line="158" pos:column="36">&amp;&amp;</op:operator> <name><name pos:line="158" pos:column="39">use</name><op:operator pos:line="158" pos:column="42">.</op:operator><name pos:line="158" pos:column="43">ProgrammingLanguage</name></name> <op:operator pos:line="158" pos:column="63">==</op:operator> <name><name pos:line="158" pos:column="66">Language</name><op:operator pos:line="158" pos:column="74">.</op:operator><name pos:line="158" pos:column="75">CSharp</name></name><op:operator pos:line="158" pos:column="81">)</op:operator> <op:operator pos:line="158" pos:column="83">||</op:operator>
               <op:operator pos:line="159" pos:column="16">(</op:operator><name><name pos:line="159" pos:column="17">use</name><op:operator pos:line="159" pos:column="20">.</op:operator><name pos:line="159" pos:column="21">Name</name></name> <op:operator pos:line="159" pos:column="26">==</op:operator> <lit:literal type="string" pos:line="159" pos:column="29">"super"</lit:literal> <op:operator pos:line="159" pos:column="37">&amp;&amp;</op:operator> <name><name pos:line="159" pos:column="40">use</name><op:operator pos:line="159" pos:column="43">.</op:operator><name pos:line="159" pos:column="44">ProgrammingLanguage</name></name> <op:operator pos:line="159" pos:column="64">==</op:operator> <name><name pos:line="159" pos:column="67">Language</name><op:operator pos:line="159" pos:column="75">.</op:operator><name pos:line="159" pos:column="76">Java</name></name><op:operator pos:line="159" pos:column="80">)</op:operator></expr>)</condition><then pos:line="159" pos:column="82"> <block pos:line="159" pos:column="83">{
                <comment type="line" pos:line="160" pos:column="17">//return all the parent classes of the surrounding type definition</comment>
                <decl_stmt><decl><type><name pos:line="161" pos:column="17">var</name></type> <name pos:line="161" pos:column="21">enclosingType</name> <init pos:line="161" pos:column="35">= <expr><call><name><name pos:line="161" pos:column="37">use</name><op:operator pos:line="161" pos:column="40">.</op:operator><name pos:line="161" pos:column="41">ParentStatement</name><op:operator pos:line="161" pos:column="56">.</op:operator><name><name pos:line="161" pos:column="57">GetAncestorsAndSelf</name><argument_list pos:line="161" pos:column="76">&lt;<argument><name pos:line="161" pos:column="77">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="161" pos:column="92">()</argument_list></call><op:operator pos:line="161" pos:column="94">.</op:operator><call><name pos:line="161" pos:column="95">FirstOrDefault</name><argument_list pos:line="161" pos:column="109">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="162" pos:column="17">if<condition pos:line="162" pos:column="19">(<expr><name pos:line="162" pos:column="20">enclosingType</name> <op:operator pos:line="162" pos:column="34">==</op:operator> <name pos:line="162" pos:column="37">null</name></expr>)</condition><then pos:line="162" pos:column="42"> <block pos:line="162" pos:column="43">{
                    <return pos:line="163" pos:column="21">return <expr><call><name><name pos:line="163" pos:column="28">Enumerable</name><op:operator pos:line="163" pos:column="38">.</op:operator><name><name pos:line="163" pos:column="39">Empty</name><argument_list pos:line="163" pos:column="44">&lt;<argument><name pos:line="163" pos:column="45">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="163" pos:column="60">()</argument_list></call></expr>;</return>
                }</block></then> <else pos:line="164" pos:column="19">else <block pos:line="164" pos:column="24">{
                    <return pos:line="165" pos:column="21">return <expr><call><name><name pos:line="165" pos:column="28">enclosingType</name><op:operator pos:line="165" pos:column="41">.</op:operator><name pos:line="165" pos:column="42">GetParentTypes</name></name><argument_list pos:line="165" pos:column="56">(<argument><expr><lit:literal type="boolean" pos:line="165" pos:column="57">true</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
                }</block></else></if>
            }</block></then></if>

            <return pos:line="169" pos:column="13">return <expr><call><name><name pos:line="169" pos:column="20">Enumerable</name><op:operator pos:line="169" pos:column="30">.</op:operator><name><name pos:line="169" pos:column="31">Empty</name><argument_list pos:line="169" pos:column="36">&lt;<argument><name pos:line="169" pos:column="37">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="169" pos:column="52">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="172" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="173" pos:column="9">/// Resolves the parent type uses for this type definition.</comment>
        <comment type="line" pos:line="174" pos:column="9">/// This method will only return the first 100 matches.</comment>
        <comment type="line" pos:line="175" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="176" pos:column="9">/// &lt;param name="recursive"&gt;Whether or not to recursively get the parents of this type's parents.&lt;/param&gt;</comment>
        <comment type="line" pos:line="177" pos:column="9">/// &lt;returns&gt;Matching parent types for this type&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="178" pos:column="9">public</specifier> <name><name pos:line="178" pos:column="16">IEnumerable</name><argument_list pos:line="178" pos:column="27">&lt;<argument><name pos:line="178" pos:column="28">TypeDefinition</name></argument>&gt;</argument_list></name></type> <name pos:line="178" pos:column="44">GetParentTypes</name><parameter_list pos:line="178" pos:column="58">(<param><decl><type><name pos:line="178" pos:column="59">bool</name></type> <name pos:line="178" pos:column="64">recursive</name></decl></param>)</parameter_list> <block pos:line="178" pos:column="75">{
            <decl_stmt><decl><type><name><name pos:line="179" pos:column="13">IEnumerable</name><argument_list pos:line="179" pos:column="24">&lt;<argument><name pos:line="179" pos:column="25">TypeDefinition</name></argument>&gt;</argument_list></name></type> <name pos:line="179" pos:column="41">results</name></decl>;</decl_stmt>
            <if pos:line="180" pos:column="13">if<condition pos:line="180" pos:column="15">(<expr><name pos:line="180" pos:column="16">recursive</name></expr>)</condition><then pos:line="180" pos:column="26"> <block pos:line="180" pos:column="27">{
                <expr_stmt><expr><name pos:line="181" pos:column="17">results</name> <op:operator pos:line="181" pos:column="25">=</op:operator> <linq><from pos:line="181" pos:column="27">from <expr><name pos:line="181" pos:column="32">typeUse</name></expr> <in pos:line="181" pos:column="40">in <expr><name pos:line="181" pos:column="43">ParentTypeNames</name></expr></in></from>
                          <from pos:line="182" pos:column="27">from <expr><name pos:line="182" pos:column="32">type</name></expr> <in pos:line="182" pos:column="37">in <expr><call><name><name pos:line="182" pos:column="40">typeUse</name><op:operator pos:line="182" pos:column="47">.</op:operator><name pos:line="182" pos:column="48">ResolveType</name></name><argument_list pos:line="182" pos:column="59">()</argument_list></call></expr></in></from>
                          <from pos:line="183" pos:column="27">from <expr><name pos:line="183" pos:column="32">nextType</name></expr> <in pos:line="183" pos:column="41">in <expr><call><name><name pos:line="183" pos:column="44">type</name><op:operator pos:line="183" pos:column="48">.</op:operator><name pos:line="183" pos:column="49">GetParentTypesAndSelf</name></name><argument_list pos:line="183" pos:column="70">(<argument><expr><name pos:line="183" pos:column="71">recursive</name></expr></argument>)</argument_list></call></expr></in></from>
                          <select pos:line="184" pos:column="27">select <expr><name pos:line="184" pos:column="34">nextType</name></expr></select></linq></expr>;</expr_stmt>
            }</block></then> <else pos:line="185" pos:column="15">else <block pos:line="185" pos:column="20">{
                <expr_stmt><expr><name pos:line="186" pos:column="17">results</name> <op:operator pos:line="186" pos:column="25">=</op:operator> <call><name><name pos:line="186" pos:column="27">ParentTypeNames</name><op:operator pos:line="186" pos:column="42">.</op:operator><name pos:line="186" pos:column="43">SelectMany</name></name><argument_list pos:line="186" pos:column="53">(<argument><expr><lambda><name pos:line="186" pos:column="54">typeUse</name> <op:operator pos:line="186" pos:column="62">=&gt;</op:operator> <call><name><name pos:line="186" pos:column="65">typeUse</name><op:operator pos:line="186" pos:column="72">.</op:operator><name pos:line="186" pos:column="73">ResolveType</name></name><argument_list pos:line="186" pos:column="84">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <return pos:line="188" pos:column="13">return <expr><call><name><name pos:line="188" pos:column="20">results</name><op:operator pos:line="188" pos:column="27">.</op:operator><name pos:line="188" pos:column="28">Take</name></name><argument_list pos:line="188" pos:column="32">(<argument><expr><lit:literal type="number" pos:line="188" pos:column="33">100</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="191" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="192" pos:column="9">/// Returns this class followed by all of its parent classes (via a call to</comment>
        <comment type="line" pos:line="193" pos:column="9">/// &lt;see cref="GetParentTypes(bool)"/&gt;</comment>
        <comment type="line" pos:line="194" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="195" pos:column="9">/// &lt;param name="recursive"&gt;Whether or not to recursively get the parents of this type's parents.&lt;/param&gt;</comment>
        <comment type="line" pos:line="196" pos:column="9">/// &lt;returns&gt;An enumerable consisting of this object followed by the results of &lt;see cref="GetParentTypes(bool)"/&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="197" pos:column="9">public</specifier> <name><name pos:line="197" pos:column="16">IEnumerable</name><argument_list pos:line="197" pos:column="27">&lt;<argument><name pos:line="197" pos:column="28">TypeDefinition</name></argument>&gt;</argument_list></name></type> <name pos:line="197" pos:column="44">GetParentTypesAndSelf</name><parameter_list pos:line="197" pos:column="65">(<param><decl><type><name pos:line="197" pos:column="66">bool</name></type> <name pos:line="197" pos:column="71">recursive</name></decl></param>)</parameter_list> <block pos:line="197" pos:column="82">{
            <return pos:line="198" pos:column="13">return <expr><call><name><name pos:line="198" pos:column="20">Enumerable</name><op:operator pos:line="198" pos:column="30">.</op:operator><name pos:line="198" pos:column="31">Repeat</name></name><argument_list pos:line="198" pos:column="37">(<argument><expr><name pos:line="198" pos:column="38">this</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="198" pos:column="44">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="198" pos:column="46">.</op:operator><call><name pos:line="198" pos:column="47">Concat</name><argument_list pos:line="198" pos:column="53">(<argument><expr><call><name pos:line="198" pos:column="54">GetParentTypes</name><argument_list pos:line="198" pos:column="68">(<argument><expr><name pos:line="198" pos:column="69">recursive</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="201" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="202" pos:column="9">/// Returns all the expressions within this statement.</comment>
        <comment type="line" pos:line="203" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="204" pos:column="9">public</specifier> <specifier pos:line="204" pos:column="16">override</specifier> <name><name pos:line="204" pos:column="25">IEnumerable</name><argument_list pos:line="204" pos:column="36">&lt;<argument><name pos:line="204" pos:column="37">Expression</name></argument>&gt;</argument_list></name></type> <name pos:line="204" pos:column="49">GetExpressions</name><parameter_list pos:line="204" pos:column="63">()</parameter_list> <block pos:line="204" pos:column="66">{
            <if pos:line="205" pos:column="13">if<condition pos:line="205" pos:column="15">(<expr><name pos:line="205" pos:column="16">Prefix</name> <op:operator pos:line="205" pos:column="23">!=</op:operator> <name pos:line="205" pos:column="26">null</name></expr>)</condition><then pos:line="205" pos:column="31"> <block pos:line="205" pos:column="32">{
                <return><specifier pos:line="206" pos:column="17">yield</specifier> return <expr><name pos:line="206" pos:column="30">Prefix</name></expr>;</return>
            }</block></then></if>
            <comment type="line" pos:line="208" pos:column="13">//TODO: return type parameters, once added</comment>
            <foreach pos:line="209" pos:column="13">foreach(<init><decl><type><name pos:line="209" pos:column="21">var</name></type> <name pos:line="209" pos:column="25">parent</name> <range pos:line="209" pos:column="32">in <expr><name pos:line="209" pos:column="35">ParentTypeNames</name></expr></range></decl></init>) <block pos:line="209" pos:column="52">{
                <return><specifier pos:line="210" pos:column="17">yield</specifier> return <expr><name pos:line="210" pos:column="30">parent</name></expr>;</return>
            }</block></foreach>
        }</block></function>

        <comment type="line" pos:line="214" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="215" pos:column="9">/// Searches the parent types of this type for an INamedEntity with the given name.</comment>
        <comment type="line" pos:line="216" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="217" pos:column="9">/// &lt;param name="name"&gt;The name of the entity to search for.&lt;/param&gt;</comment>
        <comment type="line" pos:line="218" pos:column="9">/// &lt;returns&gt;The first matching entity found. In the case where a given parent type contains more than one matching entity, all of them are returned.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="219" pos:column="9">public</specifier> <name><name pos:line="219" pos:column="16">IEnumerable</name><argument_list pos:line="219" pos:column="27">&lt;<argument><name pos:line="219" pos:column="28">INamedEntity</name></argument>&gt;</argument_list></name></type> <name pos:line="219" pos:column="42">SearchParentTypes</name><parameter_list pos:line="219" pos:column="59">(<param><decl><type><name pos:line="219" pos:column="60">string</name></type> <name pos:line="219" pos:column="67">name</name></decl></param>)</parameter_list> <block pos:line="219" pos:column="73">{
            <foreach pos:line="220" pos:column="13">foreach(<init><decl><type><name pos:line="220" pos:column="21">var</name></type> <name pos:line="220" pos:column="25">parent</name> <range pos:line="220" pos:column="32">in <expr><call><name pos:line="220" pos:column="35">GetParentTypes</name><argument_list pos:line="220" pos:column="49">(<argument><expr><lit:literal type="boolean" pos:line="220" pos:column="50">true</lit:literal></expr></argument>)</argument_list></call></expr></range></decl></init>) <block pos:line="220" pos:column="57">{
                <decl_stmt><decl><type><name pos:line="221" pos:column="17">var</name></type> <name pos:line="221" pos:column="21">matches</name> <init pos:line="221" pos:column="29">= <expr><call><name><name pos:line="221" pos:column="31">parent</name><op:operator pos:line="221" pos:column="37">.</op:operator><name pos:line="221" pos:column="38">GetNamedChildren</name></name><argument_list pos:line="221" pos:column="54">(<argument><expr><name pos:line="221" pos:column="55">name</name></expr></argument>)</argument_list></call><op:operator pos:line="221" pos:column="60">.</op:operator><call><name pos:line="221" pos:column="61">ToList</name><argument_list pos:line="221" pos:column="67">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="222" pos:column="17">if<condition pos:line="222" pos:column="19">(<expr><call><name><name pos:line="222" pos:column="20">matches</name><op:operator pos:line="222" pos:column="27">.</op:operator><name pos:line="222" pos:column="28">Any</name></name><argument_list pos:line="222" pos:column="31">()</argument_list></call></expr>)</condition><then pos:line="222" pos:column="34"> <block pos:line="222" pos:column="35">{
                    <return pos:line="223" pos:column="21">return <expr><name pos:line="223" pos:column="28">matches</name></expr>;</return>
                }</block></then></if>
            }</block></foreach>
            <return pos:line="226" pos:column="13">return <expr><call><name><name pos:line="226" pos:column="20">Enumerable</name><op:operator pos:line="226" pos:column="30">.</op:operator><name><name pos:line="226" pos:column="31">Empty</name><argument_list pos:line="226" pos:column="36">&lt;<argument><name pos:line="226" pos:column="37">INamedEntity</name></argument>&gt;</argument_list></name></name><argument_list pos:line="226" pos:column="50">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="229" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="230" pos:column="9">/// Searches the parent types of this type for entities with the given name and type, and where the given predicate is true.</comment>
        <comment type="line" pos:line="231" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="232" pos:column="9">/// &lt;typeparam name="T"&gt;The type of entities to search for.&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="233" pos:column="9">/// &lt;param name="name"&gt;The name of the entity to search for.&lt;/param&gt;</comment>
        <comment type="line" pos:line="234" pos:column="9">/// &lt;param name="predicate"&gt;A function to determine whether to return a given entity.&lt;/param&gt;</comment>
        <comment type="line" pos:line="235" pos:column="9">/// &lt;returns&gt;The first matching entity found. In the case where a given parent type contains more than one matching entity, all of them are returned.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="236" pos:column="9">public</specifier> <name><name pos:line="236" pos:column="16">IEnumerable</name><argument_list pos:line="236" pos:column="27">&lt;<argument><name pos:line="236" pos:column="28">T</name></argument>&gt;</argument_list></name></type> <name><name pos:line="236" pos:column="31">SearchParentTypes</name><argument_list pos:line="236" pos:column="48">&lt;<argument><name pos:line="236" pos:column="49">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="236" pos:column="51">(<param><decl><type><name pos:line="236" pos:column="52">string</name></type> <name pos:line="236" pos:column="59">name</name></decl></param>, <param><decl><type><name><name pos:line="236" pos:column="65">Func</name><argument_list pos:line="236" pos:column="69">&lt;<argument><name pos:line="236" pos:column="70">T</name></argument>, <argument><name pos:line="236" pos:column="73">bool</name></argument>&gt;</argument_list></name></type> <name pos:line="236" pos:column="79">predicate</name></decl></param>)</parameter_list> <where pos:line="236" pos:column="90">where <name pos:line="236" pos:column="96">T</name> : <name pos:line="236" pos:column="100">INamedEntity</name></where> <block pos:line="236" pos:column="113">{
            <foreach pos:line="237" pos:column="13">foreach(<init><decl><type><name pos:line="237" pos:column="21">var</name></type> <name pos:line="237" pos:column="25">parent</name> <range pos:line="237" pos:column="32">in <expr><call><name pos:line="237" pos:column="35">GetParentTypes</name><argument_list pos:line="237" pos:column="49">(<argument><expr><lit:literal type="boolean" pos:line="237" pos:column="50">true</lit:literal></expr></argument>)</argument_list></call></expr></range></decl></init>) <block pos:line="237" pos:column="57">{
                <decl_stmt><decl><type><name pos:line="238" pos:column="17">var</name></type> <name pos:line="238" pos:column="21">matches</name> <init pos:line="238" pos:column="29">= <expr><call><name><name pos:line="238" pos:column="31">parent</name><op:operator pos:line="238" pos:column="37">.</op:operator><name><name pos:line="238" pos:column="38">GetNamedChildren</name><argument_list pos:line="238" pos:column="54">&lt;<argument><name pos:line="238" pos:column="55">T</name></argument>&gt;</argument_list></name></name><argument_list pos:line="238" pos:column="57">(<argument><expr><name pos:line="238" pos:column="58">name</name></expr></argument>)</argument_list></call><op:operator pos:line="238" pos:column="63">.</op:operator><call><name pos:line="238" pos:column="64">Where</name><argument_list pos:line="238" pos:column="69">(<argument><expr><name pos:line="238" pos:column="70">predicate</name></expr></argument>)</argument_list></call><op:operator pos:line="238" pos:column="80">.</op:operator><call><name pos:line="238" pos:column="81">ToList</name><argument_list pos:line="238" pos:column="87">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="239" pos:column="17">if<condition pos:line="239" pos:column="19">(<expr><call><name><name pos:line="239" pos:column="20">matches</name><op:operator pos:line="239" pos:column="27">.</op:operator><name pos:line="239" pos:column="28">Any</name></name><argument_list pos:line="239" pos:column="31">()</argument_list></call></expr>)</condition><then pos:line="239" pos:column="34"> <block pos:line="239" pos:column="35">{
                    <return pos:line="240" pos:column="21">return <expr><name pos:line="240" pos:column="28">matches</name></expr>;</return>
                }</block></then></if>
            }</block></foreach>
            <return pos:line="243" pos:column="13">return <expr><call><name><name pos:line="243" pos:column="20">Enumerable</name><op:operator pos:line="243" pos:column="30">.</op:operator><name><name pos:line="243" pos:column="31">Empty</name><argument_list pos:line="243" pos:column="36">&lt;<argument><name pos:line="243" pos:column="37">T</name></argument>&gt;</argument_list></name></name><argument_list pos:line="243" pos:column="39">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="246" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="247" pos:column="9">/// Read the XML attributes from the current &lt;paramref name="reader"/&gt; position</comment>
        <comment type="line" pos:line="248" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="249" pos:column="9">/// &lt;param name="reader"&gt;The XML reader&lt;/param&gt;</comment>
        <function><type><specifier pos:line="250" pos:column="9">protected</specifier> <specifier pos:line="250" pos:column="19">override</specifier> <name pos:line="250" pos:column="28">void</name></type> <name pos:line="250" pos:column="33">ReadXmlAttributes</name><parameter_list pos:line="250" pos:column="50">(<param><decl><type><name pos:line="250" pos:column="51">XmlReader</name></type> <name pos:line="250" pos:column="61">reader</name></decl></param>)</parameter_list> <block pos:line="250" pos:column="69">{
            <decl_stmt><decl><type><name pos:line="251" pos:column="13">var</name></type> <name pos:line="251" pos:column="17">attribute</name> <init pos:line="251" pos:column="27">= <expr><call><name><name pos:line="251" pos:column="29">reader</name><op:operator pos:line="251" pos:column="35">.</op:operator><name pos:line="251" pos:column="36">GetAttribute</name></name><argument_list pos:line="251" pos:column="48">(<argument><expr><name pos:line="251" pos:column="49">XmlIsPartialName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="252" pos:column="13">if<condition pos:line="252" pos:column="15">(<expr><name pos:line="252" pos:column="16">null</name> <op:operator pos:line="252" pos:column="21">!=</op:operator> <name pos:line="252" pos:column="24">attribute</name></expr>)</condition><then pos:line="252" pos:column="34"> <block pos:line="252" pos:column="35">{
                <expr_stmt><expr><name pos:line="253" pos:column="17">IsPartial</name> <op:operator pos:line="253" pos:column="27">=</op:operator> <call><name><name pos:line="253" pos:column="29">XmlConvert</name><op:operator pos:line="253" pos:column="39">.</op:operator><name pos:line="253" pos:column="40">ToBoolean</name></name><argument_list pos:line="253" pos:column="49">(<argument><expr><name pos:line="253" pos:column="50">attribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name pos:line="255" pos:column="13">Kind</name> <op:operator pos:line="255" pos:column="18">=</op:operator> <call><name><name pos:line="255" pos:column="20">TypeKindExtensions</name><op:operator pos:line="255" pos:column="38">.</op:operator><name pos:line="255" pos:column="39">FromKeyword</name></name><argument_list pos:line="255" pos:column="50">(<argument><expr><call><name><name pos:line="255" pos:column="51">reader</name><op:operator pos:line="255" pos:column="57">.</op:operator><name pos:line="255" pos:column="58">GetAttribute</name></name><argument_list pos:line="255" pos:column="70">(<argument><expr><name pos:line="255" pos:column="71">XmlKindName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="256" pos:column="13">base</name><op:operator pos:line="256" pos:column="17">.</op:operator><name pos:line="256" pos:column="18">ReadXmlAttributes</name></name><argument_list pos:line="256" pos:column="35">(<argument><expr><name pos:line="256" pos:column="36">reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="259" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="260" pos:column="9">/// Processes the child of the current reader position into a child of this object.</comment>
        <comment type="line" pos:line="261" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="262" pos:column="9">/// &lt;param name="reader"&gt;The XML reader&lt;/param&gt;</comment>
        <function><type><specifier pos:line="263" pos:column="9">protected</specifier> <specifier pos:line="263" pos:column="19">override</specifier> <name pos:line="263" pos:column="28">void</name></type> <name pos:line="263" pos:column="33">ReadXmlChild</name><parameter_list pos:line="263" pos:column="45">(<param><decl><type><name pos:line="263" pos:column="46">XmlReader</name></type> <name pos:line="263" pos:column="56">reader</name></decl></param>)</parameter_list> <block pos:line="263" pos:column="64">{
            <if pos:line="264" pos:column="13">if<condition pos:line="264" pos:column="15">(<expr><name pos:line="264" pos:column="16">XmlParentTypeNamesName</name> <op:operator pos:line="264" pos:column="39">==</op:operator> <name><name pos:line="264" pos:column="42">reader</name><op:operator pos:line="264" pos:column="48">.</op:operator><name pos:line="264" pos:column="49">Name</name></name></expr>)</condition><then pos:line="264" pos:column="54"> <block pos:line="264" pos:column="55">{
                <foreach pos:line="265" pos:column="17">foreach(<init><decl><type><name pos:line="265" pos:column="25">var</name></type> <name pos:line="265" pos:column="29">parentType</name> <range pos:line="265" pos:column="40">in <expr><call><name><name pos:line="265" pos:column="43">XmlSerialization</name><op:operator pos:line="265" pos:column="59">.</op:operator><name pos:line="265" pos:column="60">ReadChildExpressions</name></name><argument_list pos:line="265" pos:column="80">(<argument><expr><name pos:line="265" pos:column="81">reader</name></expr></argument>)</argument_list></call><op:operator pos:line="265" pos:column="88">.</op:operator><call><name><name pos:line="265" pos:column="89">Cast</name><argument_list pos:line="265" pos:column="93">&lt;<argument><name pos:line="265" pos:column="94">TypeUse</name></argument>&gt;</argument_list></name><argument_list pos:line="265" pos:column="102">()</argument_list></call></expr></range></decl></init>) <block pos:line="265" pos:column="106">{
                    <expr_stmt><expr><call><name pos:line="266" pos:column="21">AddParentType</name><argument_list pos:line="266" pos:column="34">(<argument><expr><name pos:line="266" pos:column="35">parentType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
            }</block></then> <else pos:line="268" pos:column="15">else <block pos:line="268" pos:column="20">{
                <expr_stmt><expr><call><name><name pos:line="269" pos:column="17">base</name><op:operator pos:line="269" pos:column="21">.</op:operator><name pos:line="269" pos:column="22">ReadXmlChild</name></name><argument_list pos:line="269" pos:column="34">(<argument><expr><name pos:line="269" pos:column="35">reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></function>

        <comment type="line" pos:line="273" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="274" pos:column="9">/// Writes XML attributes from this object to the XML writer</comment>
        <comment type="line" pos:line="275" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="276" pos:column="9">/// &lt;param name="writer"&gt;The XML writer&lt;/param&gt;</comment>
        <function><type><specifier pos:line="277" pos:column="9">protected</specifier> <specifier pos:line="277" pos:column="19">override</specifier> <name pos:line="277" pos:column="28">void</name></type> <name pos:line="277" pos:column="33">WriteXmlAttributes</name><parameter_list pos:line="277" pos:column="51">(<param><decl><type><name pos:line="277" pos:column="52">XmlWriter</name></type> <name pos:line="277" pos:column="62">writer</name></decl></param>)</parameter_list> <block pos:line="277" pos:column="70">{
            <expr_stmt><expr><call><name><name pos:line="278" pos:column="13">writer</name><op:operator pos:line="278" pos:column="19">.</op:operator><name pos:line="278" pos:column="20">WriteAttributeString</name></name><argument_list pos:line="278" pos:column="40">(<argument><expr><name pos:line="278" pos:column="41">XmlKindName</name></expr></argument>, <argument><expr><call><name><name pos:line="278" pos:column="54">Kind</name><op:operator pos:line="278" pos:column="58">.</op:operator><name pos:line="278" pos:column="59">ToKeyword</name></name><argument_list pos:line="278" pos:column="68">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if pos:line="279" pos:column="13">if<condition pos:line="279" pos:column="15">(<expr><name pos:line="279" pos:column="16">IsPartial</name></expr>)</condition><then pos:line="279" pos:column="26"> <block pos:line="279" pos:column="27">{
                <expr_stmt><expr><call><name><name pos:line="280" pos:column="17">writer</name><op:operator pos:line="280" pos:column="23">.</op:operator><name pos:line="280" pos:column="24">WriteAttributeString</name></name><argument_list pos:line="280" pos:column="44">(<argument><expr><name pos:line="280" pos:column="45">XmlIsPartialName</name></expr></argument>, <argument><expr><call><name><name pos:line="280" pos:column="63">XmlConvert</name><op:operator pos:line="280" pos:column="73">.</op:operator><name pos:line="280" pos:column="74">ToString</name></name><argument_list pos:line="280" pos:column="82">(<argument><expr><name pos:line="280" pos:column="83">IsPartial</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name pos:line="282" pos:column="13">base</name><op:operator pos:line="282" pos:column="17">.</op:operator><name pos:line="282" pos:column="18">WriteXmlAttributes</name></name><argument_list pos:line="282" pos:column="36">(<argument><expr><name pos:line="282" pos:column="37">writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="285" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="286" pos:column="9">/// Writes the contents of this object to &lt;paramref name="writer"/&gt;.</comment>
        <comment type="line" pos:line="287" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="288" pos:column="9">/// &lt;param name="writer"&gt;The XML writer to write to&lt;/param&gt;</comment>
        <function><type><specifier pos:line="289" pos:column="9">protected</specifier> <specifier pos:line="289" pos:column="19">override</specifier> <name pos:line="289" pos:column="28">void</name></type> <name pos:line="289" pos:column="33">WriteXmlContents</name><parameter_list pos:line="289" pos:column="49">(<param><decl><type><name pos:line="289" pos:column="50">XmlWriter</name></type> <name pos:line="289" pos:column="60">writer</name></decl></param>)</parameter_list> <block pos:line="289" pos:column="68">{
            <if pos:line="290" pos:column="13">if<condition pos:line="290" pos:column="15">(<expr><name pos:line="290" pos:column="16">null</name> <op:operator pos:line="290" pos:column="21">!=</op:operator> <name pos:line="290" pos:column="24">ParentTypeNames</name></expr>)</condition><then pos:line="290" pos:column="40"> <block pos:line="290" pos:column="41">{
                <expr_stmt><expr><call><name><name pos:line="291" pos:column="17">XmlSerialization</name><op:operator pos:line="291" pos:column="33">.</op:operator><name><name pos:line="291" pos:column="34">WriteCollection</name><argument_list pos:line="291" pos:column="49">&lt;<argument><name pos:line="291" pos:column="50">TypeUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="291" pos:column="58">(<argument><expr><name pos:line="291" pos:column="59">writer</name></expr></argument>, <argument><expr><name pos:line="291" pos:column="67">XmlParentTypeNamesName</name></expr></argument>, <argument><expr><name pos:line="291" pos:column="91">ParentTypeNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name pos:line="293" pos:column="13">base</name><op:operator pos:line="293" pos:column="17">.</op:operator><name pos:line="293" pos:column="18">WriteXmlContents</name></name><argument_list pos:line="293" pos:column="34">(<argument><expr><name pos:line="293" pos:column="35">writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="296" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="297" pos:column="9">/// Returns a string representation of this statement.</comment>
        <comment type="line" pos:line="298" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="299" pos:column="9">public</specifier> <specifier pos:line="299" pos:column="16">override</specifier> <name pos:line="299" pos:column="25">string</name></type> <name pos:line="299" pos:column="32">ToString</name><parameter_list pos:line="299" pos:column="40">()</parameter_list> <block pos:line="299" pos:column="43">{
            <decl_stmt><decl><type><name pos:line="300" pos:column="13">var</name></type> <name pos:line="300" pos:column="17">signature</name> <init pos:line="300" pos:column="27">= <expr><op:operator pos:line="300" pos:column="29">new</op:operator> <call><name pos:line="300" pos:column="33">StringBuilder</name><argument_list pos:line="300" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="301" pos:column="13">if<condition pos:line="301" pos:column="15">(<expr><name pos:line="301" pos:column="16">Accessibility</name> <op:operator pos:line="301" pos:column="30">!=</op:operator> <name><name pos:line="301" pos:column="33">AccessModifier</name><op:operator pos:line="301" pos:column="47">.</op:operator><name pos:line="301" pos:column="48">None</name></name></expr>)</condition><then pos:line="301" pos:column="53"> <block pos:line="301" pos:column="54">{ <expr_stmt><expr><call><name><name pos:line="301" pos:column="56">signature</name><op:operator pos:line="301" pos:column="65">.</op:operator><name pos:line="301" pos:column="66">AppendFormat</name></name><argument_list pos:line="301" pos:column="78">(<argument><expr><lit:literal type="string" pos:line="301" pos:column="79">"{0} "</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="301" pos:column="87">Accessibility</name><op:operator pos:line="301" pos:column="100">.</op:operator><name pos:line="301" pos:column="101">ToKeywordString</name></name><argument_list pos:line="301" pos:column="116">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></then></if>
            <if pos:line="302" pos:column="13">if<condition pos:line="302" pos:column="15">(<expr><name pos:line="302" pos:column="16">IsPartial</name></expr>)</condition><then pos:line="302" pos:column="26"> <block pos:line="302" pos:column="27">{ <expr_stmt><expr><call><name><name pos:line="302" pos:column="29">signature</name><op:operator pos:line="302" pos:column="38">.</op:operator><name pos:line="302" pos:column="39">Append</name></name><argument_list pos:line="302" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="302" pos:column="46">"partial "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></then></if>
            <expr_stmt><expr><call><name><name pos:line="303" pos:column="13">signature</name><op:operator pos:line="303" pos:column="22">.</op:operator><name pos:line="303" pos:column="23">AppendFormat</name></name><argument_list pos:line="303" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="303" pos:column="36">"{0} "</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="303" pos:column="44">Kind</name><op:operator pos:line="303" pos:column="48">.</op:operator><name pos:line="303" pos:column="49">ToKeyword</name></name><argument_list pos:line="303" pos:column="58">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="304" pos:column="13">signature</name><op:operator pos:line="304" pos:column="22">.</op:operator><name pos:line="304" pos:column="23">Append</name></name><argument_list pos:line="304" pos:column="29">(<argument><expr><name pos:line="304" pos:column="30">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="305" pos:column="13">var</name></type> <name pos:line="305" pos:column="17">parentsString</name> <init pos:line="305" pos:column="31">= <expr><call><name><name pos:line="305" pos:column="33">string</name><op:operator pos:line="305" pos:column="39">.</op:operator><name pos:line="305" pos:column="40">Join</name></name><argument_list pos:line="305" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="305" pos:column="45">", "</lit:literal></expr></argument>, <argument><expr><name pos:line="305" pos:column="51">ParentTypeNames</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="306" pos:column="13">if<condition pos:line="306" pos:column="15">(<expr><op:operator pos:line="306" pos:column="16">!</op:operator><call><name><name pos:line="306" pos:column="17">string</name><op:operator pos:line="306" pos:column="23">.</op:operator><name pos:line="306" pos:column="24">IsNullOrEmpty</name></name><argument_list pos:line="306" pos:column="37">(<argument><expr><name pos:line="306" pos:column="38">parentsString</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="306" pos:column="53"> <block pos:line="306" pos:column="54">{
                <expr_stmt><expr><call><name><name pos:line="307" pos:column="17">signature</name><op:operator pos:line="307" pos:column="26">.</op:operator><name pos:line="307" pos:column="27">AppendFormat</name></name><argument_list pos:line="307" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="307" pos:column="40">" : {0}"</lit:literal></expr></argument>, <argument><expr><name pos:line="307" pos:column="50">parentsString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <return pos:line="309" pos:column="13">return <expr><call><name><name pos:line="309" pos:column="20">signature</name><op:operator pos:line="309" pos:column="29">.</op:operator><name pos:line="309" pos:column="30">ToString</name></name><argument_list pos:line="309" pos:column="38">()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
