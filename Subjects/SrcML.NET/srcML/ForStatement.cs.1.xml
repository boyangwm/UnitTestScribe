<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data\ForStatement.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2014 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Patrick Francis (ABB Group) - initial API, implementation, &amp; documentation
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="13" pos:column="1">using <name pos:line="13" pos:column="7">System</name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Collections</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">Generic</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Linq</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Text</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Xml</name></name>;</using>

<namespace pos:line="19" pos:column="1">namespace <name><name pos:line="19" pos:column="11">ABB</name><op:operator pos:line="19" pos:column="14">.</op:operator><name pos:line="19" pos:column="15">SrcML</name><op:operator pos:line="19" pos:column="20">.</op:operator><name pos:line="19" pos:column="21">Data</name></name>
<block pos:line="20" pos:column="1">{
    <comment type="line" pos:line="21" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="22" pos:column="5">/// Represents a for-loop in a program.</comment>
    <comment type="line" pos:line="23" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="24" pos:column="5">public</specifier> class <name pos:line="24" pos:column="18">ForStatement</name> <super pos:line="24" pos:column="31">: <name pos:line="24" pos:column="33">ConditionBlockStatement</name></super> <block pos:line="24" pos:column="57">{
        <decl_stmt><decl><type><specifier pos:line="25" pos:column="9">private</specifier> <name pos:line="25" pos:column="17">Expression</name></type> <name pos:line="25" pos:column="28">initExpression</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="26" pos:column="9">private</specifier> <name pos:line="26" pos:column="17">Expression</name></type> <name pos:line="26" pos:column="28">incrExpression</name></decl>;</decl_stmt>
        
        <comment type="line" pos:line="28" pos:column="9">/// &lt;summary&gt; XML Name for &lt;see cref="Initializer" /&gt; &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="29" pos:column="9">public</specifier> <specifier pos:line="29" pos:column="16">const</specifier> <name pos:line="29" pos:column="22">string</name></type> <name pos:line="29" pos:column="29">XmlInitializerName</name> <init pos:line="29" pos:column="48">= <expr><lit:literal type="string" pos:line="29" pos:column="50">"Initializer"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="31" pos:column="9">/// &lt;summary&gt; XML Name for &lt;see cref="Incrementer" /&gt; &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="32" pos:column="9">public</specifier> <specifier pos:line="32" pos:column="16">const</specifier> <name pos:line="32" pos:column="22">string</name></type> <name pos:line="32" pos:column="29">XmlIncrementerName</name> <init pos:line="32" pos:column="48">= <expr><lit:literal type="string" pos:line="32" pos:column="50">"Incrementer"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="34" pos:column="9">/// &lt;summary&gt; The XML name for ForStatement &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="35" pos:column="9">public</specifier> <specifier pos:line="35" pos:column="16">new</specifier> <specifier pos:line="35" pos:column="20">const</specifier> <name pos:line="35" pos:column="26">string</name></type> <name pos:line="35" pos:column="33">XmlName</name> <init pos:line="35" pos:column="41">= <expr><lit:literal type="string" pos:line="35" pos:column="43">"For"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="37" pos:column="9">/// &lt;summary&gt; The initialization expression for the for-loop. &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="38" pos:column="9">public</specifier> <name pos:line="38" pos:column="16">Expression</name></type> <name pos:line="38" pos:column="27">Initializer</name> <block pos:line="38" pos:column="39">{
            <function><name pos:line="39" pos:column="13">get</name> <block pos:line="39" pos:column="17">{ <return pos:line="39" pos:column="19">return <expr><name pos:line="39" pos:column="26">initExpression</name></expr>;</return> }</block></function>
            <function><name pos:line="40" pos:column="13">set</name> <block pos:line="40" pos:column="17">{
                <expr_stmt><expr><name pos:line="41" pos:column="17">initExpression</name> <op:operator pos:line="41" pos:column="32">=</op:operator> <name pos:line="41" pos:column="34">value</name></expr>;</expr_stmt>
                <if pos:line="42" pos:column="17">if<condition pos:line="42" pos:column="19">(<expr><name pos:line="42" pos:column="20">initExpression</name> <op:operator pos:line="42" pos:column="35">!=</op:operator> <name pos:line="42" pos:column="38">null</name></expr>)</condition><then pos:line="42" pos:column="43"> <block pos:line="42" pos:column="44">{
                    <expr_stmt><expr><name><name pos:line="43" pos:column="21">initExpression</name><op:operator pos:line="43" pos:column="35">.</op:operator><name pos:line="43" pos:column="36">ParentStatement</name></name> <op:operator pos:line="43" pos:column="52">=</op:operator> <name pos:line="43" pos:column="54">this</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="48" pos:column="9">/// &lt;summary&gt; The incrementer expression for the for-loop. &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="49" pos:column="9">public</specifier> <name pos:line="49" pos:column="16">Expression</name></type> <name pos:line="49" pos:column="27">Incrementer</name> <block pos:line="49" pos:column="39">{
            <function><name pos:line="50" pos:column="13">get</name> <block pos:line="50" pos:column="17">{ <return pos:line="50" pos:column="19">return <expr><name pos:line="50" pos:column="26">incrExpression</name></expr>;</return> }</block></function>
            <function><name pos:line="51" pos:column="13">set</name> <block pos:line="51" pos:column="17">{
                <expr_stmt><expr><name pos:line="52" pos:column="17">incrExpression</name> <op:operator pos:line="52" pos:column="32">=</op:operator> <name pos:line="52" pos:column="34">value</name></expr>;</expr_stmt>
                <if pos:line="53" pos:column="17">if<condition pos:line="53" pos:column="19">(<expr><name pos:line="53" pos:column="20">incrExpression</name> <op:operator pos:line="53" pos:column="35">!=</op:operator> <name pos:line="53" pos:column="38">null</name></expr>)</condition><then pos:line="53" pos:column="43"> <block pos:line="53" pos:column="44">{
                    <expr_stmt><expr><name><name pos:line="54" pos:column="21">incrExpression</name><op:operator pos:line="54" pos:column="35">.</op:operator><name pos:line="54" pos:column="36">ParentStatement</name></name> <op:operator pos:line="54" pos:column="52">=</op:operator> <name pos:line="54" pos:column="54">this</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="59" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="60" pos:column="9">/// Instance method for getting &lt;see cref="ForStatement.XmlName"/&gt;</comment>
        <comment type="line" pos:line="61" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="62" pos:column="9">/// &lt;returns&gt;Returns the XML name for ForStatement&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="63" pos:column="9">public</specifier> <specifier pos:line="63" pos:column="16">override</specifier> <name pos:line="63" pos:column="25">string</name></type> <name pos:line="63" pos:column="32">GetXmlName</name><parameter_list pos:line="63" pos:column="42">()</parameter_list> <block pos:line="63" pos:column="45">{ <return pos:line="63" pos:column="47">return <expr><name><name pos:line="63" pos:column="54">ForStatement</name><op:operator pos:line="63" pos:column="66">.</op:operator><name pos:line="63" pos:column="67">XmlName</name></name></expr>;</return> }</block></function>

        <comment type="line" pos:line="65" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="66" pos:column="9">/// Processes the child of the current reader position into a child of this object.</comment>
        <comment type="line" pos:line="67" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="68" pos:column="9">/// &lt;param name="reader"&gt;The XML reader&lt;/param&gt;</comment>
        <function><type><specifier pos:line="69" pos:column="9">protected</specifier> <specifier pos:line="69" pos:column="19">override</specifier> <name pos:line="69" pos:column="28">void</name></type> <name pos:line="69" pos:column="33">ReadXmlChild</name><parameter_list pos:line="69" pos:column="45">(<param><decl><type><name pos:line="69" pos:column="46">XmlReader</name></type> <name pos:line="69" pos:column="56">reader</name></decl></param>)</parameter_list> <block pos:line="69" pos:column="64">{
            <if pos:line="70" pos:column="13">if<condition pos:line="70" pos:column="15">(<expr><name pos:line="70" pos:column="16">XmlInitializerName</name> <op:operator pos:line="70" pos:column="35">==</op:operator> <name><name pos:line="70" pos:column="38">reader</name><op:operator pos:line="70" pos:column="44">.</op:operator><name pos:line="70" pos:column="45">Name</name></name></expr>)</condition><then pos:line="70" pos:column="50"> <block pos:line="70" pos:column="51">{
                <expr_stmt><expr><name pos:line="71" pos:column="17">Initializer</name> <op:operator pos:line="71" pos:column="29">=</op:operator> <call><name><name pos:line="71" pos:column="31">XmlSerialization</name><op:operator pos:line="71" pos:column="47">.</op:operator><name pos:line="71" pos:column="48">ReadChildExpression</name></name><argument_list pos:line="71" pos:column="67">(<argument><expr><name pos:line="71" pos:column="68">reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="72" pos:column="15">else <if pos:line="72" pos:column="20">if<condition pos:line="72" pos:column="22">(<expr><name pos:line="72" pos:column="23">XmlIncrementerName</name> <op:operator pos:line="72" pos:column="42">==</op:operator> <name><name pos:line="72" pos:column="45">reader</name><op:operator pos:line="72" pos:column="51">.</op:operator><name pos:line="72" pos:column="52">Name</name></name></expr>)</condition><then pos:line="72" pos:column="57"> <block pos:line="72" pos:column="58">{
                <expr_stmt><expr><name pos:line="73" pos:column="17">Incrementer</name> <op:operator pos:line="73" pos:column="29">=</op:operator> <call><name><name pos:line="73" pos:column="31">XmlSerialization</name><op:operator pos:line="73" pos:column="47">.</op:operator><name pos:line="73" pos:column="48">ReadChildExpression</name></name><argument_list pos:line="73" pos:column="67">(<argument><expr><name pos:line="73" pos:column="68">reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="74" pos:column="15">else <block pos:line="74" pos:column="20">{
                <expr_stmt><expr><call><name><name pos:line="75" pos:column="17">base</name><op:operator pos:line="75" pos:column="21">.</op:operator><name pos:line="75" pos:column="22">ReadXmlChild</name></name><argument_list pos:line="75" pos:column="34">(<argument><expr><name pos:line="75" pos:column="35">reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if></else></if>
        }</block></function>

        <comment type="line" pos:line="79" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="80" pos:column="9">/// Writes the contents of this object to &lt;paramref name="writer"/&gt;.</comment>
        <comment type="line" pos:line="81" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="82" pos:column="9">/// &lt;param name="writer"&gt;The XML writer to write to&lt;/param&gt;</comment>
        <function><type><specifier pos:line="83" pos:column="9">protected</specifier> <specifier pos:line="83" pos:column="19">override</specifier> <name pos:line="83" pos:column="28">void</name></type> <name pos:line="83" pos:column="33">WriteXmlContents</name><parameter_list pos:line="83" pos:column="49">(<param><decl><type><name pos:line="83" pos:column="50">XmlWriter</name></type> <name pos:line="83" pos:column="60">writer</name></decl></param>)</parameter_list> <block pos:line="83" pos:column="68">{
            <if pos:line="84" pos:column="13">if<condition pos:line="84" pos:column="15">(<expr><name pos:line="84" pos:column="16">null</name> <op:operator pos:line="84" pos:column="21">!=</op:operator> <name pos:line="84" pos:column="24">Initializer</name></expr>)</condition><then pos:line="84" pos:column="36"> <block pos:line="84" pos:column="37">{
                <expr_stmt><expr><call><name><name pos:line="85" pos:column="17">XmlSerialization</name><op:operator pos:line="85" pos:column="33">.</op:operator><name pos:line="85" pos:column="34">WriteElement</name></name><argument_list pos:line="85" pos:column="46">(<argument><expr><name pos:line="85" pos:column="47">writer</name></expr></argument>, <argument><expr><name pos:line="85" pos:column="55">Initializer</name></expr></argument>, <argument><expr><name pos:line="85" pos:column="68">XmlInitializerName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if pos:line="87" pos:column="13">if<condition pos:line="87" pos:column="15">(<expr><name pos:line="87" pos:column="16">null</name> <op:operator pos:line="87" pos:column="21">!=</op:operator> <name pos:line="87" pos:column="24">Incrementer</name></expr>)</condition><then pos:line="87" pos:column="36"> <block pos:line="87" pos:column="37">{
                <expr_stmt><expr><call><name><name pos:line="88" pos:column="17">XmlSerialization</name><op:operator pos:line="88" pos:column="33">.</op:operator><name pos:line="88" pos:column="34">WriteElement</name></name><argument_list pos:line="88" pos:column="46">(<argument><expr><name pos:line="88" pos:column="47">writer</name></expr></argument>, <argument><expr><name pos:line="88" pos:column="55">Incrementer</name></expr></argument>, <argument><expr><name pos:line="88" pos:column="68">XmlIncrementerName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            
            <expr_stmt><expr><call><name><name pos:line="91" pos:column="13">base</name><op:operator pos:line="91" pos:column="17">.</op:operator><name pos:line="91" pos:column="18">WriteXmlContents</name></name><argument_list pos:line="91" pos:column="34">(<argument><expr><name pos:line="91" pos:column="35">writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="94" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="95" pos:column="9">/// Returns all the expressions within this statement.</comment>
        <comment type="line" pos:line="96" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="97" pos:column="9">public</specifier> <specifier pos:line="97" pos:column="16">override</specifier> <name><name pos:line="97" pos:column="25">IEnumerable</name><argument_list pos:line="97" pos:column="36">&lt;<argument><name pos:line="97" pos:column="37">Expression</name></argument>&gt;</argument_list></name></type> <name pos:line="97" pos:column="49">GetExpressions</name><parameter_list pos:line="97" pos:column="63">()</parameter_list> <block pos:line="97" pos:column="66">{
            <if pos:line="98" pos:column="13">if<condition pos:line="98" pos:column="15">(<expr><name pos:line="98" pos:column="16">Initializer</name> <op:operator pos:line="98" pos:column="28">!=</op:operator> <name pos:line="98" pos:column="31">null</name></expr>)</condition><then pos:line="98" pos:column="36"> <block pos:line="98" pos:column="37">{
                <return><specifier pos:line="99" pos:column="17">yield</specifier> return <expr><name pos:line="99" pos:column="30">Initializer</name></expr>;</return>
            }</block></then></if>
            <if pos:line="101" pos:column="13">if<condition pos:line="101" pos:column="15">(<expr><name pos:line="101" pos:column="16">Condition</name> <op:operator pos:line="101" pos:column="26">!=</op:operator> <name pos:line="101" pos:column="29">null</name></expr>)</condition><then pos:line="101" pos:column="34"> <block pos:line="101" pos:column="35">{
                <return><specifier pos:line="102" pos:column="17">yield</specifier> return <expr><name pos:line="102" pos:column="30">Condition</name></expr>;</return>
            }</block></then></if>
            <if pos:line="104" pos:column="13">if<condition pos:line="104" pos:column="15">(<expr><name pos:line="104" pos:column="16">Incrementer</name> <op:operator pos:line="104" pos:column="28">!=</op:operator> <name pos:line="104" pos:column="31">null</name></expr>)</condition><then pos:line="104" pos:column="36"> <block pos:line="104" pos:column="37">{
                <return><specifier pos:line="105" pos:column="17">yield</specifier> return <expr><name pos:line="105" pos:column="30">Incrementer</name></expr>;</return>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="109" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="110" pos:column="9">/// Returns a string representation of this statement.</comment>
        <comment type="line" pos:line="111" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="112" pos:column="9">public</specifier> <specifier pos:line="112" pos:column="16">override</specifier> <name pos:line="112" pos:column="25">string</name></type> <name pos:line="112" pos:column="32">ToString</name><parameter_list pos:line="112" pos:column="40">()</parameter_list> <block pos:line="112" pos:column="43">{
            <return pos:line="113" pos:column="13">return <expr><call><name><name pos:line="113" pos:column="20">string</name><op:operator pos:line="113" pos:column="26">.</op:operator><name pos:line="113" pos:column="27">Format</name></name><argument_list pos:line="113" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="113" pos:column="34">"for({0}; {1}; {2})"</lit:literal></expr></argument>, <argument><expr><name pos:line="113" pos:column="56">Initializer</name></expr></argument>, <argument><expr><name pos:line="113" pos:column="69">Condition</name></expr></argument>, <argument><expr><name pos:line="113" pos:column="80">Incrementer</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
