<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data\AbstractCodeParser.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2013 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *    Patrick Francis (ABB Group) - API, implementation, and documentation
 *****************************************************************************/</comment>

<using pos:line="13" pos:column="1">using <name pos:line="13" pos:column="7">System</name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Collections</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">Concurrent</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Collections</name><op:operator pos:line="15" pos:column="25">.</op:operator><name pos:line="15" pos:column="26">Generic</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Collections</name><op:operator pos:line="16" pos:column="25">.</op:operator><name pos:line="16" pos:column="26">ObjectModel</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">IO</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Linq</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">System</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">Threading</name><op:operator pos:line="19" pos:column="23">.</op:operator><name pos:line="19" pos:column="24">Tasks</name></name>;</using>
<using pos:line="20" pos:column="1">using <name><name pos:line="20" pos:column="7">System</name><op:operator pos:line="20" pos:column="13">.</op:operator><name pos:line="20" pos:column="14">Xml</name></name>;</using>
<using pos:line="21" pos:column="1">using <name><name pos:line="21" pos:column="7">System</name><op:operator pos:line="21" pos:column="13">.</op:operator><name pos:line="21" pos:column="14">Xml</name><op:operator pos:line="21" pos:column="17">.</op:operator><name pos:line="21" pos:column="18">Linq</name></name>;</using>

<namespace pos:line="23" pos:column="1">namespace <name><name pos:line="23" pos:column="11">ABB</name><op:operator pos:line="23" pos:column="14">.</op:operator><name pos:line="23" pos:column="15">SrcML</name><op:operator pos:line="23" pos:column="20">.</op:operator><name pos:line="23" pos:column="21">Data</name></name> <block pos:line="23" pos:column="26">{

    <comment type="line" pos:line="25" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="26" pos:column="5">/// &lt;para&gt;AbstractCodeParser is used to parse SrcML files and extract useful info from the</comment>
    <comment type="line" pos:line="27" pos:column="5">/// elements. Implementations of this class provide language-specific functions to extract</comment>
    <comment type="line" pos:line="28" pos:column="5">/// useful data from the class.&lt;/para&gt; &lt;para&gt;The entry point for this class is the</comment>
    <comment type="line" pos:line="29" pos:column="5">/// &lt;see cref="ParseFileUnit(XElement)"/&gt; method.&lt;/para&gt;</comment>
    <comment type="line" pos:line="30" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="31" pos:column="5">public</specifier> <specifier pos:line="31" pos:column="12">abstract</specifier> class <name pos:line="31" pos:column="27">AbstractCodeParser</name> <block pos:line="31" pos:column="46">{
        <decl_stmt><decl><type><specifier pos:line="32" pos:column="9">private</specifier> <name pos:line="32" pos:column="17">TextWriter</name></type> <name pos:line="32" pos:column="28">_synchronizedErrorLog</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="34" pos:column="9">private</specifier> <specifier pos:line="34" pos:column="17">static</specifier> <specifier pos:line="34" pos:column="24">readonly</specifier> <name><name pos:line="34" pos:column="33">HashSet</name><argument_list pos:line="34" pos:column="40">&lt;<argument><name pos:line="34" pos:column="41">XName</name></argument>&gt;</argument_list></name></type> <name pos:line="34" pos:column="48">NotImplementedStatements</name> <init pos:line="34" pos:column="73">= <expr><op:operator pos:line="34" pos:column="75">new</op:operator> <call><name><name pos:line="34" pos:column="79">HashSet</name><argument_list pos:line="34" pos:column="86">&lt;<argument><name pos:line="34" pos:column="87">XName</name></argument>&gt;</argument_list></name><argument_list pos:line="34" pos:column="93">()</argument_list></call> <block pos:line="34" pos:column="96">{
            <expr><name><name pos:line="35" pos:column="13">SRC</name><op:operator pos:line="35" pos:column="16">.</op:operator><name pos:line="35" pos:column="17">Typedef</name></name></expr>, <expr><name><name pos:line="35" pos:column="26">SRC</name><op:operator pos:line="35" pos:column="29">.</op:operator><name pos:line="35" pos:column="30">Macro</name></name></expr>, <expr><name><name pos:line="35" pos:column="37">SRC</name><op:operator pos:line="35" pos:column="40">.</op:operator><name pos:line="35" pos:column="41">Escape</name></name></expr>, <expr><name><name pos:line="35" pos:column="49">SRC</name><op:operator pos:line="35" pos:column="52">.</op:operator><name pos:line="35" pos:column="53">Template</name></name></expr>,
            <expr><name><name pos:line="36" pos:column="13">SRC</name><op:operator pos:line="36" pos:column="16">.</op:operator><name pos:line="36" pos:column="17">Synchronized</name></name></expr>, <expr><name><name pos:line="36" pos:column="31">SRC</name><op:operator pos:line="36" pos:column="34">.</op:operator><name pos:line="36" pos:column="35">Attribute</name></name></expr>, <expr><name><name pos:line="36" pos:column="46">SRC</name><op:operator pos:line="36" pos:column="49">.</op:operator><name pos:line="36" pos:column="50">Unchecked</name></name></expr>, <expr><name><name pos:line="36" pos:column="61">SRC</name><op:operator pos:line="36" pos:column="64">.</op:operator><name pos:line="36" pos:column="65">Asm</name></name></expr>
        }</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="38" pos:column="9">private</specifier> <specifier pos:line="38" pos:column="17">static</specifier> <specifier pos:line="38" pos:column="24">readonly</specifier> <name><name pos:line="38" pos:column="33">HashSet</name><argument_list pos:line="38" pos:column="40">&lt;<argument><name pos:line="38" pos:column="41">XName</name></argument>&gt;</argument_list></name></type> <name pos:line="38" pos:column="48">NotImplementedExpressions</name> <init pos:line="38" pos:column="74">= <expr><op:operator pos:line="38" pos:column="76">new</op:operator> <call><name><name pos:line="38" pos:column="80">HashSet</name><argument_list pos:line="38" pos:column="87">&lt;<argument><name pos:line="38" pos:column="88">XName</name></argument>&gt;</argument_list></name><argument_list pos:line="38" pos:column="94">()</argument_list></call> <block pos:line="38" pos:column="97">{<expr><name><name pos:line="38" pos:column="98">SRC</name><op:operator pos:line="38" pos:column="101">.</op:operator><name pos:line="38" pos:column="102">SizeOf</name></name></expr>, <expr><name><name pos:line="38" pos:column="110">SRC</name><op:operator pos:line="38" pos:column="113">.</op:operator><name pos:line="38" pos:column="114">Macro</name></name></expr>, <expr><name><name pos:line="38" pos:column="121">SRC</name><op:operator pos:line="38" pos:column="124">.</op:operator><name pos:line="38" pos:column="125">Escape</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="40" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="41" pos:column="9">/// Creates a new abstract code parser object. Should only be called by child classes.</comment>
        <comment type="line" pos:line="42" pos:column="9">/// &lt;/summary&gt;</comment>
        <constructor><specifier pos:line="43" pos:column="9">protected</specifier> <name pos:line="43" pos:column="19">AbstractCodeParser</name><parameter_list pos:line="43" pos:column="37">()</parameter_list> <block pos:line="43" pos:column="40">{
            <expr_stmt><expr><name pos:line="44" pos:column="13">MethodElementNames</name> <op:operator pos:line="44" pos:column="32">=</op:operator> <op:operator pos:line="44" pos:column="34">new</op:operator> <call><name><name pos:line="44" pos:column="38">HashSet</name><argument_list pos:line="44" pos:column="45">&lt;<argument><name pos:line="44" pos:column="46">XName</name></argument>&gt;</argument_list></name><argument_list pos:line="44" pos:column="52">(<argument><expr><op:operator pos:line="44" pos:column="53">new</op:operator> <name><name pos:line="44" pos:column="57">XName</name><index pos:line="44" pos:column="62">[]</index></name> <block pos:line="44" pos:column="65">{ <expr><name><name pos:line="44" pos:column="67">SRC</name><op:operator pos:line="44" pos:column="70">.</op:operator><name pos:line="44" pos:column="71">Function</name></name></expr><op:operator pos:line="44" pos:column="79">,</op:operator> <expr><name><name pos:line="44" pos:column="81">SRC</name><op:operator pos:line="44" pos:column="84">.</op:operator><name pos:line="44" pos:column="85">Constructor</name></name></expr><op:operator pos:line="44" pos:column="96">,</op:operator> <expr><name><name pos:line="44" pos:column="98">SRC</name><op:operator pos:line="44" pos:column="101">.</op:operator><name pos:line="44" pos:column="102">Destructor</name></name></expr><op:operator pos:line="44" pos:column="112">,</op:operator>
                                                                  <expr><name><name pos:line="45" pos:column="67">SRC</name><op:operator pos:line="45" pos:column="70">.</op:operator><name pos:line="45" pos:column="71">FunctionDeclaration</name></name></expr><op:operator pos:line="45" pos:column="90">,</op:operator> <expr><name><name pos:line="45" pos:column="92">SRC</name><op:operator pos:line="45" pos:column="95">.</op:operator><name pos:line="45" pos:column="96">ConstructorDeclaration</name></name></expr><op:operator pos:line="45" pos:column="118">,</op:operator> <expr><name><name pos:line="45" pos:column="120">SRC</name><op:operator pos:line="45" pos:column="123">.</op:operator><name pos:line="45" pos:column="124">DestructorDeclaration</name></name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="46" pos:column="13">NamespaceElementNames</name> <op:operator pos:line="46" pos:column="35">=</op:operator> <op:operator pos:line="46" pos:column="37">new</op:operator> <call><name><name pos:line="46" pos:column="41">HashSet</name><argument_list pos:line="46" pos:column="48">&lt;<argument><name pos:line="46" pos:column="49">XName</name></argument>&gt;</argument_list></name><argument_list pos:line="46" pos:column="55">(<argument><expr><op:operator pos:line="46" pos:column="56">new</op:operator> <name><name pos:line="46" pos:column="60">XName</name><index pos:line="46" pos:column="65">[]</index></name> <block pos:line="46" pos:column="68">{ <expr><name><name pos:line="46" pos:column="70">SRC</name><op:operator pos:line="46" pos:column="73">.</op:operator><name pos:line="46" pos:column="74">Namespace</name></name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="47" pos:column="13">VariableDeclarationElementNames</name> <op:operator pos:line="47" pos:column="45">=</op:operator> <op:operator pos:line="47" pos:column="47">new</op:operator> <call><name><name pos:line="47" pos:column="51">HashSet</name><argument_list pos:line="47" pos:column="58">&lt;<argument><name pos:line="47" pos:column="59">XName</name></argument>&gt;</argument_list></name><argument_list pos:line="47" pos:column="65">(<argument><expr><op:operator pos:line="47" pos:column="66">new</op:operator> <name><name pos:line="47" pos:column="70">XName</name><index pos:line="47" pos:column="75">[]</index></name> <block pos:line="47" pos:column="78">{ <expr><name><name pos:line="47" pos:column="80">SRC</name><op:operator pos:line="47" pos:column="83">.</op:operator><name pos:line="47" pos:column="84">Declaration</name></name></expr><op:operator pos:line="47" pos:column="95">,</op:operator> <expr><name><name pos:line="47" pos:column="97">SRC</name><op:operator pos:line="47" pos:column="100">.</op:operator><name pos:line="47" pos:column="101">DeclarationStatement</name></name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="48" pos:column="13">ContainerReferenceElementNames</name> <op:operator pos:line="48" pos:column="44">=</op:operator> <op:operator pos:line="48" pos:column="46">new</op:operator> <call><name><name pos:line="48" pos:column="50">HashSet</name><argument_list pos:line="48" pos:column="57">&lt;<argument><name pos:line="48" pos:column="58">XName</name></argument>&gt;</argument_list></name><argument_list pos:line="48" pos:column="64">(<argument><expr><op:operator pos:line="48" pos:column="65">new</op:operator> <name><name pos:line="48" pos:column="69">XName</name><index pos:line="48" pos:column="74">[]</index></name> <block pos:line="48" pos:column="77">{ <expr><name><name pos:line="48" pos:column="79">SRC</name><op:operator pos:line="48" pos:column="82">.</op:operator><name pos:line="48" pos:column="83">ClassDeclaration</name></name></expr><op:operator pos:line="48" pos:column="99">,</op:operator> <expr><name><name pos:line="48" pos:column="101">SRC</name><op:operator pos:line="48" pos:column="104">.</op:operator><name pos:line="48" pos:column="105">StructDeclaration</name></name></expr><op:operator pos:line="48" pos:column="122">,</op:operator> <expr><name><name pos:line="48" pos:column="124">SRC</name><op:operator pos:line="48" pos:column="127">.</op:operator><name pos:line="48" pos:column="128">UnionDeclaration</name></name></expr><op:operator pos:line="48" pos:column="144">,</op:operator>
                                                                              <expr><name><name pos:line="49" pos:column="79">SRC</name><op:operator pos:line="49" pos:column="82">.</op:operator><name pos:line="49" pos:column="83">ConstructorDeclaration</name></name></expr><op:operator pos:line="49" pos:column="105">,</op:operator> <expr><name><name pos:line="49" pos:column="107">SRC</name><op:operator pos:line="49" pos:column="110">.</op:operator><name pos:line="49" pos:column="111">DestructorDeclaration</name></name></expr><op:operator pos:line="49" pos:column="132">,</op:operator> <expr><name><name pos:line="49" pos:column="134">SRC</name><op:operator pos:line="49" pos:column="137">.</op:operator><name pos:line="49" pos:column="138">FunctionDeclaration</name></name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="50" pos:column="13">UnknownLog</name> <op:operator pos:line="50" pos:column="24">=</op:operator> <name pos:line="50" pos:column="26">null</name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="53" pos:column="9">/// &lt;summary&gt; Returns the XName that represents an import or alias statement. &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="54" pos:column="9">public</specifier> <name pos:line="54" pos:column="16">XName</name></type> <name pos:line="54" pos:column="22">AliasElementName</name> <block pos:line="54" pos:column="39">{ <function_decl><name pos:line="54" pos:column="41">get</name>;</function_decl> <function_decl><specifier pos:line="54" pos:column="46">protected</specifier> <name pos:line="54" pos:column="56">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="56" pos:column="9">/// &lt;summary&gt; Returns the XNames that represent reference elements (such as function_decl and class_decl) &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="57" pos:column="9">public</specifier> <name><name pos:line="57" pos:column="16">HashSet</name><argument_list pos:line="57" pos:column="23">&lt;<argument><name pos:line="57" pos:column="24">XName</name></argument>&gt;</argument_list></name></type> <name pos:line="57" pos:column="31">ContainerReferenceElementNames</name> <block pos:line="57" pos:column="62">{ <function_decl><name pos:line="57" pos:column="64">get</name>;</function_decl> <function_decl><specifier pos:line="57" pos:column="69">protected</specifier> <name pos:line="57" pos:column="79">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="59" pos:column="9">/// &lt;summary&gt; Returns the XNames that represent types for this language. &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="60" pos:column="9">public</specifier> <name><name pos:line="60" pos:column="16">HashSet</name><argument_list pos:line="60" pos:column="23">&lt;<argument><name pos:line="60" pos:column="24">XName</name></argument>&gt;</argument_list></name></type> <name pos:line="60" pos:column="31">MethodElementNames</name> <block pos:line="60" pos:column="50">{ <function_decl><name pos:line="60" pos:column="52">get</name>;</function_decl> <function_decl><specifier pos:line="60" pos:column="57">protected</specifier> <name pos:line="60" pos:column="67">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="62" pos:column="9">/// &lt;summary&gt; Returns the XNames that represent namespaces for this language. &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="63" pos:column="9">public</specifier> <name><name pos:line="63" pos:column="16">HashSet</name><argument_list pos:line="63" pos:column="23">&lt;<argument><name pos:line="63" pos:column="24">XName</name></argument>&gt;</argument_list></name></type> <name pos:line="63" pos:column="31">NamespaceElementNames</name> <block pos:line="63" pos:column="53">{ <function_decl><name pos:line="63" pos:column="55">get</name>;</function_decl> <function_decl><specifier pos:line="63" pos:column="60">protected</specifier> <name pos:line="63" pos:column="70">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="65" pos:column="9">/// &lt;summary&gt; Returns the XNames that represent types for this language. &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="66" pos:column="9">public</specifier> <name><name pos:line="66" pos:column="16">HashSet</name><argument_list pos:line="66" pos:column="23">&lt;<argument><name pos:line="66" pos:column="24">XName</name></argument>&gt;</argument_list></name></type> <name pos:line="66" pos:column="31">TypeElementNames</name> <block pos:line="66" pos:column="48">{ <function_decl><name pos:line="66" pos:column="50">get</name>;</function_decl> <function_decl><specifier pos:line="66" pos:column="55">protected</specifier> <name pos:line="66" pos:column="65">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="68" pos:column="9">/// &lt;summary&gt; Returns the XNames that represent variable declarations for this language. &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="69" pos:column="9">public</specifier> <name><name pos:line="69" pos:column="16">HashSet</name><argument_list pos:line="69" pos:column="23">&lt;<argument><name pos:line="69" pos:column="24">XName</name></argument>&gt;</argument_list></name></type> <name pos:line="69" pos:column="31">VariableDeclarationElementNames</name> <block pos:line="69" pos:column="63">{ <function_decl><name pos:line="69" pos:column="65">get</name>;</function_decl> <function_decl><specifier pos:line="69" pos:column="70">protected</specifier> <name pos:line="69" pos:column="80">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="71" pos:column="9">/// &lt;summary&gt; Returns the Language that this parser supports. &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="72" pos:column="9">public</specifier> <specifier pos:line="72" pos:column="16">abstract</specifier> <name pos:line="72" pos:column="25">Language</name></type> <name pos:line="72" pos:column="34">ParserLanguage</name> <block pos:line="72" pos:column="49">{ <function_decl><name pos:line="72" pos:column="51">get</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="74" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="75" pos:column="9">/// Writer to log unknown elements to. If null no logging is done</comment>
        <comment type="line" pos:line="76" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="77" pos:column="9">public</specifier> <name pos:line="77" pos:column="16">TextWriter</name></type> <name pos:line="77" pos:column="27">UnknownLog</name> <block pos:line="77" pos:column="38">{
            <function><name pos:line="78" pos:column="13">get</name> <block pos:line="78" pos:column="17">{ <return pos:line="78" pos:column="19">return <expr><name pos:line="78" pos:column="26">_synchronizedErrorLog</name></expr>;</return> }</block></function>
            <function><name pos:line="79" pos:column="13">set</name> <block pos:line="79" pos:column="17">{ <expr_stmt><expr><name pos:line="79" pos:column="19">_synchronizedErrorLog</name> <op:operator pos:line="79" pos:column="41">=</op:operator> <op:operator pos:line="79" pos:column="43">(</op:operator><name pos:line="79" pos:column="44">null</name> <op:operator pos:line="79" pos:column="49">==</op:operator> <name pos:line="79" pos:column="52">value</name> <op:operator pos:line="79" pos:column="58">?</op:operator> <name pos:line="79" pos:column="60">null</name> <op:operator pos:line="79" pos:column="65">:</op:operator> <call><name><name pos:line="79" pos:column="67">TextWriter</name><op:operator pos:line="79" pos:column="77">.</op:operator><name pos:line="79" pos:column="78">Synchronized</name></name><argument_list pos:line="79" pos:column="90">(<argument><expr><name pos:line="79" pos:column="91">value</name></expr></argument>)</argument_list></call><op:operator pos:line="79" pos:column="97">)</op:operator></expr>;</expr_stmt> }</block></function>
        }</block></decl></decl_stmt>


        <comment type="line" pos:line="83" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="84" pos:column="9">/// Gets the alias elements for this file. This only returns the aliases at the root of the</comment>
        <comment type="line" pos:line="85" pos:column="9">/// file</comment>
        <comment type="line" pos:line="86" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="87" pos:column="9">/// &lt;param name="fileUnit"&gt;The file unit to get the aliases from&lt;/param&gt;</comment>
        <comment type="line" pos:line="88" pos:column="9">/// &lt;returns&gt;The alias elements&lt;/returns&gt;</comment>
        <comment type="line" pos:line="89" pos:column="9">// TODO handle alias elements in other parts of the file</comment>
        <function><type><specifier pos:line="90" pos:column="9">protected</specifier> <specifier pos:line="90" pos:column="19">virtual</specifier> <name><name pos:line="90" pos:column="27">IEnumerable</name><argument_list pos:line="90" pos:column="38">&lt;<argument><name pos:line="90" pos:column="39">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="90" pos:column="49">GetAliasElementsForFile</name><parameter_list pos:line="90" pos:column="72">(<param><decl><type><name pos:line="90" pos:column="73">XElement</name></type> <name pos:line="90" pos:column="82">fileUnit</name></decl></param>)</parameter_list> <block pos:line="90" pos:column="92">{
            <if pos:line="91" pos:column="13">if<condition pos:line="91" pos:column="15">(<expr><name pos:line="91" pos:column="16">null</name> <op:operator pos:line="91" pos:column="21">==</op:operator> <name pos:line="91" pos:column="24">fileUnit</name></expr>)</condition><then pos:line="91" pos:column="33">
                <throw pos:line="92" pos:column="17">throw <expr><op:operator pos:line="92" pos:column="23">new</op:operator> <call><name pos:line="92" pos:column="27">ArgumentNullException</name><argument_list pos:line="92" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="92" pos:column="49">"fileUnit"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="93" pos:column="13">if<condition pos:line="93" pos:column="15">(<expr><name><name pos:line="93" pos:column="16">SRC</name><op:operator pos:line="93" pos:column="19">.</op:operator><name pos:line="93" pos:column="20">Unit</name></name> <op:operator pos:line="93" pos:column="25">!=</op:operator> <name><name pos:line="93" pos:column="28">fileUnit</name><op:operator pos:line="93" pos:column="36">.</op:operator><name pos:line="93" pos:column="37">Name</name></name></expr>)</condition><then pos:line="93" pos:column="42">
                <throw pos:line="94" pos:column="17">throw <expr><op:operator pos:line="94" pos:column="23">new</op:operator> <call><name pos:line="94" pos:column="27">ArgumentException</name><argument_list pos:line="94" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="94" pos:column="45">"must be a unit element"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="94" pos:column="71">"fileUnit"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <return pos:line="96" pos:column="13">return <expr><call><name><name pos:line="96" pos:column="20">fileUnit</name><op:operator pos:line="96" pos:column="28">.</op:operator><name pos:line="96" pos:column="29">Elements</name></name><argument_list pos:line="96" pos:column="37">(<argument><expr><name pos:line="96" pos:column="38">AliasElementName</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="99" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="100" pos:column="9">/// Gets all of the parameters for this method. It finds the variable declarations in</comment>
        <comment type="line" pos:line="101" pos:column="9">/// parameter list.</comment>
        <comment type="line" pos:line="102" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="103" pos:column="9">/// &lt;param name="methodElement"&gt;The method container&lt;/param&gt;</comment>
        <comment type="line" pos:line="104" pos:column="9">/// &lt;returns&gt;An enumerable of all the param XElements.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="105" pos:column="9">protected</specifier> <specifier pos:line="105" pos:column="19">virtual</specifier> <name><name pos:line="105" pos:column="27">IEnumerable</name><argument_list pos:line="105" pos:column="38">&lt;<argument><name pos:line="105" pos:column="39">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="105" pos:column="49">GetParametersFromMethodElement</name><parameter_list pos:line="105" pos:column="79">(<param><decl><type><name pos:line="105" pos:column="80">XElement</name></type> <name pos:line="105" pos:column="89">methodElement</name></decl></param>)</parameter_list> <block pos:line="105" pos:column="104">{
            <decl_stmt><decl><type><name pos:line="106" pos:column="13">var</name></type> <name pos:line="106" pos:column="17">paramList</name> <init pos:line="106" pos:column="27">= <expr><call><name><name pos:line="106" pos:column="29">methodElement</name><op:operator pos:line="106" pos:column="42">.</op:operator><name pos:line="106" pos:column="43">Element</name></name><argument_list pos:line="106" pos:column="50">(<argument><expr><name><name pos:line="106" pos:column="51">SRC</name><op:operator pos:line="106" pos:column="54">.</op:operator><name pos:line="106" pos:column="55">ParameterList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="107" pos:column="13">if<condition pos:line="107" pos:column="15">(<expr><name pos:line="107" pos:column="16">paramList</name> <op:operator pos:line="107" pos:column="26">!=</op:operator> <name pos:line="107" pos:column="29">null</name></expr>)</condition><then pos:line="107" pos:column="34"> <block pos:line="107" pos:column="35">{
                <return pos:line="108" pos:column="17">return <expr><call><name><name pos:line="108" pos:column="24">paramList</name><op:operator pos:line="108" pos:column="33">.</op:operator><name pos:line="108" pos:column="34">Elements</name></name><argument_list pos:line="108" pos:column="42">(<argument><expr><name><name pos:line="108" pos:column="43">SRC</name><op:operator pos:line="108" pos:column="46">.</op:operator><name pos:line="108" pos:column="47">Parameter</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
            <comment type="line" pos:line="110" pos:column="13">//property getters/setters don't have a parameter list</comment>
            <return pos:line="111" pos:column="13">return <expr><call><name><name pos:line="111" pos:column="20">Enumerable</name><op:operator pos:line="111" pos:column="30">.</op:operator><name><name pos:line="111" pos:column="31">Empty</name><argument_list pos:line="111" pos:column="36">&lt;<argument><name pos:line="111" pos:column="37">XElement</name></argument>&gt;</argument_list></name></name><argument_list pos:line="111" pos:column="46">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="114" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="115" pos:column="9">/// Gets the type use elements from a &lt;see cref="TypeElementNames"&gt;type definition</comment>
        <comment type="line" pos:line="116" pos:column="9">/// element&lt;/see&gt;</comment>
        <comment type="line" pos:line="117" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="118" pos:column="9">/// &lt;param name="typeElement"&gt;The type element. Must belong to see</comment>
        <comment type="line" pos:line="119" pos:column="9">/// cref="TypeElementNames"/&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="120" pos:column="9">/// &lt;returns&gt;An enumerable of type uses that represent parent types&lt;/returns&gt;</comment>
        <function_decl><type><specifier pos:line="121" pos:column="9">protected</specifier> <specifier pos:line="121" pos:column="19">abstract</specifier> <name><name pos:line="121" pos:column="28">IEnumerable</name><argument_list pos:line="121" pos:column="39">&lt;<argument><name pos:line="121" pos:column="40">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="121" pos:column="50">GetParentTypeUseElements</name><parameter_list pos:line="121" pos:column="74">(<param><decl><type><name pos:line="121" pos:column="75">XElement</name></type> <name pos:line="121" pos:column="84">typeElement</name></decl></param>)</parameter_list>;</function_decl>

        <comment type="line" pos:line="123" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="124" pos:column="9">/// Logs the given element as unknown. This will do nothing if &lt;see cref="UnknownLog"/&gt; is null.</comment>
        <comment type="line" pos:line="125" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="126" pos:column="9">/// &lt;param name="element"&gt;The unknown element&lt;/param&gt;</comment>
        <comment type="line" pos:line="127" pos:column="9">/// &lt;param name="context"&gt;The parser context&lt;/param&gt;</comment>
        <function><type><specifier pos:line="128" pos:column="9">protected</specifier> <name pos:line="128" pos:column="19">void</name></type> <name pos:line="128" pos:column="24">LogUnknown</name><parameter_list pos:line="128" pos:column="34">(<param><decl><type><name pos:line="128" pos:column="35">XElement</name></type> <name pos:line="128" pos:column="44">element</name></decl></param>, <param><decl><type><name pos:line="128" pos:column="53">ParserContext</name></type> <name pos:line="128" pos:column="67">context</name></decl></param>)</parameter_list> <block pos:line="128" pos:column="76">{
            <expr_stmt><expr><call><name pos:line="129" pos:column="13">LogUnknown</name><argument_list pos:line="129" pos:column="23">(<argument><expr><name pos:line="129" pos:column="24">element</name></expr></argument>, <argument><expr><name pos:line="129" pos:column="33">context</name></expr></argument>, <argument><expr><name pos:line="129" pos:column="42">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="132" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="133" pos:column="9">/// Logs the given element as unknown along with an optional message. This will do nothing if &lt;see cref="UnknownLog"/&gt; is null.</comment>
        <comment type="line" pos:line="134" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="135" pos:column="9">/// &lt;param name="element"&gt;The unknown element&lt;/param&gt;</comment>
        <comment type="line" pos:line="136" pos:column="9">/// &lt;param name="context"&gt;The parser context&lt;/param&gt;</comment>
        <comment type="line" pos:line="137" pos:column="9">/// &lt;param name="message"&gt;An optional message&lt;/param&gt;</comment>
        <function><type><specifier pos:line="138" pos:column="9">protected</specifier> <name pos:line="138" pos:column="19">void</name></type> <name pos:line="138" pos:column="24">LogUnknown</name><parameter_list pos:line="138" pos:column="34">(<param><decl><type><name pos:line="138" pos:column="35">XElement</name></type> <name pos:line="138" pos:column="44">element</name></decl></param>, <param><decl><type><name pos:line="138" pos:column="53">ParserContext</name></type> <name pos:line="138" pos:column="67">context</name></decl></param>, <param><decl><type><name pos:line="138" pos:column="76">string</name></type> <name pos:line="138" pos:column="83">message</name></decl></param>)</parameter_list> <block pos:line="138" pos:column="92">{
            <if pos:line="139" pos:column="13">if<condition pos:line="139" pos:column="15">(<expr><name pos:line="139" pos:column="16">null</name> <op:operator pos:line="139" pos:column="21">!=</op:operator> <name pos:line="139" pos:column="24">UnknownLog</name></expr>)</condition><then pos:line="139" pos:column="35"> <block pos:line="139" pos:column="36">{
                <expr_stmt><expr><call><name><name pos:line="140" pos:column="17">UnknownLog</name><op:operator pos:line="140" pos:column="27">.</op:operator><name pos:line="140" pos:column="28">Write</name></name><argument_list pos:line="140" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="140" pos:column="34">"{0}({1},{2}) Unexpected {3}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="140" pos:column="65">context</name><op:operator pos:line="140" pos:column="72">.</op:operator><name pos:line="140" pos:column="73">FileName</name></name></expr></argument>, <argument><expr><call><name><name pos:line="140" pos:column="83">element</name><op:operator pos:line="140" pos:column="90">.</op:operator><name pos:line="140" pos:column="91">GetSrcLineNumber</name></name><argument_list pos:line="140" pos:column="107">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="140" pos:column="111">element</name><op:operator pos:line="140" pos:column="118">.</op:operator><name pos:line="140" pos:column="119">GetSrcLinePosition</name></name><argument_list pos:line="140" pos:column="137">()</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="140" pos:column="141">element</name><op:operator pos:line="140" pos:column="148">.</op:operator><name pos:line="140" pos:column="149">Name</name></name></expr></argument>, <argument><expr><name pos:line="140" pos:column="155">message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="141" pos:column="17">if<condition pos:line="141" pos:column="19">(<expr><op:operator pos:line="141" pos:column="20">!</op:operator><call><name><name pos:line="141" pos:column="21">String</name><op:operator pos:line="141" pos:column="27">.</op:operator><name pos:line="141" pos:column="28">IsNullOrWhiteSpace</name></name><argument_list pos:line="141" pos:column="46">(<argument><expr><name pos:line="141" pos:column="47">message</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="141" pos:column="56"> <block pos:line="141" pos:column="57">{
                    <expr_stmt><expr><call><name><name pos:line="142" pos:column="21">UnknownLog</name><op:operator pos:line="142" pos:column="31">.</op:operator><name pos:line="142" pos:column="32">WriteLine</name></name><argument_list pos:line="142" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="142" pos:column="42">" ({0})"</lit:literal></expr></argument>, <argument><expr><name pos:line="142" pos:column="52">message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></function>


        <cpp:region pos:line="148" pos:column="9">#<cpp:directive pos:line="148" pos:column="10">region</cpp:directive> Parse statement elements</cpp:region>
        <comment type="line" pos:line="149" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="150" pos:column="9">/// Creates a &lt;see cref="Statement"/&gt; object from the given &lt;paramref name="element"/&gt;.</comment>
        <comment type="line" pos:line="151" pos:column="9">/// This method simply dispatches to the appropriate element parsing method based on the name of the element.</comment>
        <comment type="line" pos:line="152" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="153" pos:column="9">/// &lt;param name="element"&gt;The element to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="154" pos:column="9">/// &lt;param name="context"&gt;The parser context to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="155" pos:column="9">/// &lt;returns&gt;A Statement corresponding to &lt;paramref name="element"/&gt;. </comment>
        <comment type="line" pos:line="156" pos:column="9">/// If an unknown element type is passed in, this method will return null if LogUnknownElements is true, or throw an exception if LogUnknownElements is false.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="157" pos:column="9">protected</specifier> <specifier pos:line="157" pos:column="19">virtual</specifier> <name pos:line="157" pos:column="27">Statement</name></type> <name pos:line="157" pos:column="37">ParseStatement</name><parameter_list pos:line="157" pos:column="51">(<param><decl><type><name pos:line="157" pos:column="52">XElement</name></type> <name pos:line="157" pos:column="61">element</name></decl></param>, <param><decl><type><name pos:line="157" pos:column="70">ParserContext</name></type> <name pos:line="157" pos:column="84">context</name></decl></param>)</parameter_list> <block pos:line="157" pos:column="93">{
            <try pos:line="158" pos:column="13">try <block pos:line="158" pos:column="17">{
                <decl_stmt><decl><type><name pos:line="159" pos:column="17">Statement</name></type> <name pos:line="159" pos:column="27">stmt</name> <init pos:line="159" pos:column="32">= <expr><name pos:line="159" pos:column="34">null</name></expr></init></decl>;</decl_stmt>
                <if pos:line="160" pos:column="17">if<condition pos:line="160" pos:column="19">(<expr><call><name><name pos:line="160" pos:column="20">TypeElementNames</name><op:operator pos:line="160" pos:column="36">.</op:operator><name pos:line="160" pos:column="37">Contains</name></name><argument_list pos:line="160" pos:column="45">(<argument><expr><name><name pos:line="160" pos:column="46">element</name><op:operator pos:line="160" pos:column="53">.</op:operator><name pos:line="160" pos:column="54">Name</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="160" pos:column="60"> <block pos:line="160" pos:column="61">{
                    <expr_stmt><expr><name pos:line="161" pos:column="21">stmt</name> <op:operator pos:line="161" pos:column="26">=</op:operator> <call><name pos:line="161" pos:column="28">ParseTypeElement</name><argument_list pos:line="161" pos:column="44">(<argument><expr><name pos:line="161" pos:column="45">element</name></expr></argument>, <argument><expr><name pos:line="161" pos:column="54">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="162" pos:column="19">else <if pos:line="162" pos:column="24">if<condition pos:line="162" pos:column="26">(<expr><call><name><name pos:line="162" pos:column="27">NamespaceElementNames</name><op:operator pos:line="162" pos:column="48">.</op:operator><name pos:line="162" pos:column="49">Contains</name></name><argument_list pos:line="162" pos:column="57">(<argument><expr><name><name pos:line="162" pos:column="58">element</name><op:operator pos:line="162" pos:column="65">.</op:operator><name pos:line="162" pos:column="66">Name</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="162" pos:column="72"> <block pos:line="162" pos:column="73">{
                    <expr_stmt><expr><name pos:line="163" pos:column="21">stmt</name> <op:operator pos:line="163" pos:column="26">=</op:operator> <call><name pos:line="163" pos:column="28">ParseNamespaceElement</name><argument_list pos:line="163" pos:column="49">(<argument><expr><name pos:line="163" pos:column="50">element</name></expr></argument>, <argument><expr><name pos:line="163" pos:column="59">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="164" pos:column="19">else <if pos:line="164" pos:column="24">if<condition pos:line="164" pos:column="26">(<expr><name><name pos:line="164" pos:column="27">element</name><op:operator pos:line="164" pos:column="34">.</op:operator><name pos:line="164" pos:column="35">Name</name></name> <op:operator pos:line="164" pos:column="40">==</op:operator> <name pos:line="164" pos:column="43">AliasElementName</name></expr>)</condition><then pos:line="164" pos:column="60"> <block pos:line="164" pos:column="61">{
                    <expr_stmt><expr><name pos:line="165" pos:column="21">stmt</name> <op:operator pos:line="165" pos:column="26">=</op:operator> <call><name pos:line="165" pos:column="28">ParseAliasElement</name><argument_list pos:line="165" pos:column="45">(<argument><expr><name pos:line="165" pos:column="46">element</name></expr></argument>, <argument><expr><name pos:line="165" pos:column="55">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="166" pos:column="19">else <if pos:line="166" pos:column="24">if<condition pos:line="166" pos:column="26">(<expr><call><name><name pos:line="166" pos:column="27">MethodElementNames</name><op:operator pos:line="166" pos:column="45">.</op:operator><name pos:line="166" pos:column="46">Contains</name></name><argument_list pos:line="166" pos:column="54">(<argument><expr><name><name pos:line="166" pos:column="55">element</name><op:operator pos:line="166" pos:column="62">.</op:operator><name pos:line="166" pos:column="63">Name</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="166" pos:column="69"> <block pos:line="166" pos:column="70">{
                    <expr_stmt><expr><name pos:line="167" pos:column="21">stmt</name> <op:operator pos:line="167" pos:column="26">=</op:operator> <call><name pos:line="167" pos:column="28">ParseMethodElement</name><argument_list pos:line="167" pos:column="46">(<argument><expr><name pos:line="167" pos:column="47">element</name></expr></argument>, <argument><expr><name pos:line="167" pos:column="56">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="168" pos:column="19">else <if pos:line="168" pos:column="24">if<condition pos:line="168" pos:column="26">(<expr><name><name pos:line="168" pos:column="27">element</name><op:operator pos:line="168" pos:column="34">.</op:operator><name pos:line="168" pos:column="35">Name</name></name> <op:operator pos:line="168" pos:column="40">==</op:operator> <name><name pos:line="168" pos:column="43">SRC</name><op:operator pos:line="168" pos:column="46">.</op:operator><name pos:line="168" pos:column="47">If</name></name></expr>)</condition><then pos:line="168" pos:column="50"> <block pos:line="168" pos:column="51">{
                    <expr_stmt><expr><name pos:line="169" pos:column="21">stmt</name> <op:operator pos:line="169" pos:column="26">=</op:operator> <call><name pos:line="169" pos:column="28">ParseIfElement</name><argument_list pos:line="169" pos:column="42">(<argument><expr><name pos:line="169" pos:column="43">element</name></expr></argument>, <argument><expr><name pos:line="169" pos:column="52">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="170" pos:column="19">else <if pos:line="170" pos:column="24">if<condition pos:line="170" pos:column="26">(<expr><name><name pos:line="170" pos:column="27">element</name><op:operator pos:line="170" pos:column="34">.</op:operator><name pos:line="170" pos:column="35">Name</name></name> <op:operator pos:line="170" pos:column="40">==</op:operator> <name><name pos:line="170" pos:column="43">SRC</name><op:operator pos:line="170" pos:column="46">.</op:operator><name pos:line="170" pos:column="47">While</name></name></expr>)</condition><then pos:line="170" pos:column="53"> <block pos:line="170" pos:column="54">{
                    <expr_stmt><expr><name pos:line="171" pos:column="21">stmt</name> <op:operator pos:line="171" pos:column="26">=</op:operator> <call><name pos:line="171" pos:column="28">ParseWhileElement</name><argument_list pos:line="171" pos:column="45">(<argument><expr><name pos:line="171" pos:column="46">element</name></expr></argument>, <argument><expr><name pos:line="171" pos:column="55">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="172" pos:column="19">else <if pos:line="172" pos:column="24">if<condition pos:line="172" pos:column="26">(<expr><name><name pos:line="172" pos:column="27">element</name><op:operator pos:line="172" pos:column="34">.</op:operator><name pos:line="172" pos:column="35">Name</name></name> <op:operator pos:line="172" pos:column="40">==</op:operator> <name><name pos:line="172" pos:column="43">SRC</name><op:operator pos:line="172" pos:column="46">.</op:operator><name pos:line="172" pos:column="47">Do</name></name></expr>)</condition><then pos:line="172" pos:column="50"> <block pos:line="172" pos:column="51">{
                    <expr_stmt><expr><name pos:line="173" pos:column="21">stmt</name> <op:operator pos:line="173" pos:column="26">=</op:operator> <call><name pos:line="173" pos:column="28">ParseDoElement</name><argument_list pos:line="173" pos:column="42">(<argument><expr><name pos:line="173" pos:column="43">element</name></expr></argument>, <argument><expr><name pos:line="173" pos:column="52">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="174" pos:column="19">else <if pos:line="174" pos:column="24">if<condition pos:line="174" pos:column="26">(<expr><name><name pos:line="174" pos:column="27">element</name><op:operator pos:line="174" pos:column="34">.</op:operator><name pos:line="174" pos:column="35">Name</name></name> <op:operator pos:line="174" pos:column="40">==</op:operator> <name><name pos:line="174" pos:column="43">SRC</name><op:operator pos:line="174" pos:column="46">.</op:operator><name pos:line="174" pos:column="47">For</name></name></expr>)</condition><then pos:line="174" pos:column="51"> <block pos:line="174" pos:column="52">{
                    <expr_stmt><expr><name pos:line="175" pos:column="21">stmt</name> <op:operator pos:line="175" pos:column="26">=</op:operator> <call><name pos:line="175" pos:column="28">ParseForElement</name><argument_list pos:line="175" pos:column="43">(<argument><expr><name pos:line="175" pos:column="44">element</name></expr></argument>, <argument><expr><name pos:line="175" pos:column="53">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="176" pos:column="19">else <if pos:line="176" pos:column="24">if<condition pos:line="176" pos:column="26">(<expr><name><name pos:line="176" pos:column="27">element</name><op:operator pos:line="176" pos:column="34">.</op:operator><name pos:line="176" pos:column="35">Name</name></name> <op:operator pos:line="176" pos:column="40">==</op:operator> <name><name pos:line="176" pos:column="43">SRC</name><op:operator pos:line="176" pos:column="46">.</op:operator><name pos:line="176" pos:column="47">Foreach</name></name></expr>)</condition><then pos:line="176" pos:column="55"> <block pos:line="176" pos:column="56">{
                    <expr_stmt><expr><name pos:line="177" pos:column="21">stmt</name> <op:operator pos:line="177" pos:column="26">=</op:operator> <call><name pos:line="177" pos:column="28">ParseForeachElement</name><argument_list pos:line="177" pos:column="47">(<argument><expr><name pos:line="177" pos:column="48">element</name></expr></argument>, <argument><expr><name pos:line="177" pos:column="57">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="178" pos:column="19">else <if pos:line="178" pos:column="24">if<condition pos:line="178" pos:column="26">(<expr><name><name pos:line="178" pos:column="27">element</name><op:operator pos:line="178" pos:column="34">.</op:operator><name pos:line="178" pos:column="35">Name</name></name> <op:operator pos:line="178" pos:column="40">==</op:operator> <name><name pos:line="178" pos:column="43">SRC</name><op:operator pos:line="178" pos:column="46">.</op:operator><name pos:line="178" pos:column="47">Switch</name></name></expr>)</condition><then pos:line="178" pos:column="54"> <block pos:line="178" pos:column="55">{
                    <expr_stmt><expr><name pos:line="179" pos:column="21">stmt</name> <op:operator pos:line="179" pos:column="26">=</op:operator> <call><name pos:line="179" pos:column="28">ParseSwitchElement</name><argument_list pos:line="179" pos:column="46">(<argument><expr><name pos:line="179" pos:column="47">element</name></expr></argument>, <argument><expr><name pos:line="179" pos:column="56">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="180" pos:column="19">else <if pos:line="180" pos:column="24">if<condition pos:line="180" pos:column="26">(<expr><name><name pos:line="180" pos:column="27">element</name><op:operator pos:line="180" pos:column="34">.</op:operator><name pos:line="180" pos:column="35">Name</name></name> <op:operator pos:line="180" pos:column="40">==</op:operator> <name><name pos:line="180" pos:column="43">SRC</name><op:operator pos:line="180" pos:column="46">.</op:operator><name pos:line="180" pos:column="47">Case</name></name> <op:operator pos:line="180" pos:column="52">||</op:operator> <name><name pos:line="180" pos:column="55">element</name><op:operator pos:line="180" pos:column="62">.</op:operator><name pos:line="180" pos:column="63">Name</name></name> <op:operator pos:line="180" pos:column="68">==</op:operator> <name><name pos:line="180" pos:column="71">SRC</name><op:operator pos:line="180" pos:column="74">.</op:operator><name pos:line="180" pos:column="75">Default</name></name></expr>)</condition><then pos:line="180" pos:column="83"> <block pos:line="180" pos:column="84">{
                    <expr_stmt><expr><name pos:line="181" pos:column="21">stmt</name> <op:operator pos:line="181" pos:column="26">=</op:operator> <call><name pos:line="181" pos:column="28">ParseCaseElement</name><argument_list pos:line="181" pos:column="44">(<argument><expr><name pos:line="181" pos:column="45">element</name></expr></argument>, <argument><expr><name pos:line="181" pos:column="54">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="182" pos:column="19">else <if pos:line="182" pos:column="24">if<condition pos:line="182" pos:column="26">(<expr><name><name pos:line="182" pos:column="27">element</name><op:operator pos:line="182" pos:column="34">.</op:operator><name pos:line="182" pos:column="35">Name</name></name> <op:operator pos:line="182" pos:column="40">==</op:operator> <name><name pos:line="182" pos:column="43">SRC</name><op:operator pos:line="182" pos:column="46">.</op:operator><name pos:line="182" pos:column="47">Continue</name></name></expr>)</condition><then pos:line="182" pos:column="56"> <block pos:line="182" pos:column="57">{
                    <expr_stmt><expr><name pos:line="183" pos:column="21">stmt</name> <op:operator pos:line="183" pos:column="26">=</op:operator> <call><name pos:line="183" pos:column="28">ParseContinueElement</name><argument_list pos:line="183" pos:column="48">(<argument><expr><name pos:line="183" pos:column="49">element</name></expr></argument>, <argument><expr><name pos:line="183" pos:column="58">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="184" pos:column="19">else <if pos:line="184" pos:column="24">if<condition pos:line="184" pos:column="26">(<expr><name><name pos:line="184" pos:column="27">element</name><op:operator pos:line="184" pos:column="34">.</op:operator><name pos:line="184" pos:column="35">Name</name></name> <op:operator pos:line="184" pos:column="40">==</op:operator> <name><name pos:line="184" pos:column="43">SRC</name><op:operator pos:line="184" pos:column="46">.</op:operator><name pos:line="184" pos:column="47">Break</name></name></expr>)</condition><then pos:line="184" pos:column="53"> <block pos:line="184" pos:column="54">{
                    <expr_stmt><expr><name pos:line="185" pos:column="21">stmt</name> <op:operator pos:line="185" pos:column="26">=</op:operator> <call><name pos:line="185" pos:column="28">ParseBreakElement</name><argument_list pos:line="185" pos:column="45">(<argument><expr><name pos:line="185" pos:column="46">element</name></expr></argument>, <argument><expr><name pos:line="185" pos:column="55">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="186" pos:column="19">else <if pos:line="186" pos:column="24">if<condition pos:line="186" pos:column="26">(<expr><name><name pos:line="186" pos:column="27">element</name><op:operator pos:line="186" pos:column="34">.</op:operator><name pos:line="186" pos:column="35">Name</name></name> <op:operator pos:line="186" pos:column="40">==</op:operator> <name><name pos:line="186" pos:column="43">SRC</name><op:operator pos:line="186" pos:column="46">.</op:operator><name pos:line="186" pos:column="47">Return</name></name></expr>)</condition><then pos:line="186" pos:column="54"> <block pos:line="186" pos:column="55">{
                    <expr_stmt><expr><name pos:line="187" pos:column="21">stmt</name> <op:operator pos:line="187" pos:column="26">=</op:operator> <call><name pos:line="187" pos:column="28">ParseReturnElement</name><argument_list pos:line="187" pos:column="46">(<argument><expr><name pos:line="187" pos:column="47">element</name></expr></argument>, <argument><expr><name pos:line="187" pos:column="56">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="188" pos:column="19">else <if pos:line="188" pos:column="24">if<condition pos:line="188" pos:column="26">(<expr><name><name pos:line="188" pos:column="27">element</name><op:operator pos:line="188" pos:column="34">.</op:operator><name pos:line="188" pos:column="35">Name</name></name> <op:operator pos:line="188" pos:column="40">==</op:operator> <name><name pos:line="188" pos:column="43">SRC</name><op:operator pos:line="188" pos:column="46">.</op:operator><name pos:line="188" pos:column="47">Goto</name></name></expr>)</condition><then pos:line="188" pos:column="52"> <block pos:line="188" pos:column="53">{
                    <expr_stmt><expr><name pos:line="189" pos:column="21">stmt</name> <op:operator pos:line="189" pos:column="26">=</op:operator> <call><name pos:line="189" pos:column="28">ParseGotoElement</name><argument_list pos:line="189" pos:column="44">(<argument><expr><name pos:line="189" pos:column="45">element</name></expr></argument>, <argument><expr><name pos:line="189" pos:column="54">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="190" pos:column="19">else <if pos:line="190" pos:column="24">if<condition pos:line="190" pos:column="26">(<expr><name><name pos:line="190" pos:column="27">element</name><op:operator pos:line="190" pos:column="34">.</op:operator><name pos:line="190" pos:column="35">Name</name></name> <op:operator pos:line="190" pos:column="40">==</op:operator> <name><name pos:line="190" pos:column="43">SRC</name><op:operator pos:line="190" pos:column="46">.</op:operator><name pos:line="190" pos:column="47">Label</name></name></expr>)</condition><then pos:line="190" pos:column="53"> <block pos:line="190" pos:column="54">{
                    <expr_stmt><expr><name pos:line="191" pos:column="21">stmt</name> <op:operator pos:line="191" pos:column="26">=</op:operator> <call><name pos:line="191" pos:column="28">ParseLabelElement</name><argument_list pos:line="191" pos:column="45">(<argument><expr><name pos:line="191" pos:column="46">element</name></expr></argument>, <argument><expr><name pos:line="191" pos:column="55">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="192" pos:column="19">else <if pos:line="192" pos:column="24">if<condition pos:line="192" pos:column="26">(<expr><name><name pos:line="192" pos:column="27">element</name><op:operator pos:line="192" pos:column="34">.</op:operator><name pos:line="192" pos:column="35">Name</name></name> <op:operator pos:line="192" pos:column="40">==</op:operator> <name><name pos:line="192" pos:column="43">SRC</name><op:operator pos:line="192" pos:column="46">.</op:operator><name pos:line="192" pos:column="47">Throw</name></name></expr>)</condition><then pos:line="192" pos:column="53"> <block pos:line="192" pos:column="54">{
                    <expr_stmt><expr><name pos:line="193" pos:column="21">stmt</name> <op:operator pos:line="193" pos:column="26">=</op:operator> <call><name pos:line="193" pos:column="28">ParseThrowElement</name><argument_list pos:line="193" pos:column="45">(<argument><expr><name pos:line="193" pos:column="46">element</name></expr></argument>, <argument><expr><name pos:line="193" pos:column="55">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="194" pos:column="19">else <if pos:line="194" pos:column="24">if<condition pos:line="194" pos:column="26">(<expr><name><name pos:line="194" pos:column="27">element</name><op:operator pos:line="194" pos:column="34">.</op:operator><name pos:line="194" pos:column="35">Name</name></name> <op:operator pos:line="194" pos:column="40">==</op:operator> <name><name pos:line="194" pos:column="43">SRC</name><op:operator pos:line="194" pos:column="46">.</op:operator><name pos:line="194" pos:column="47">Try</name></name></expr>)</condition><then pos:line="194" pos:column="51"> <block pos:line="194" pos:column="52">{
                    <expr_stmt><expr><name pos:line="195" pos:column="21">stmt</name> <op:operator pos:line="195" pos:column="26">=</op:operator> <call><name pos:line="195" pos:column="28">ParseTryElement</name><argument_list pos:line="195" pos:column="43">(<argument><expr><name pos:line="195" pos:column="44">element</name></expr></argument>, <argument><expr><name pos:line="195" pos:column="53">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="196" pos:column="19">else <if pos:line="196" pos:column="24">if<condition pos:line="196" pos:column="26">(<expr><name><name pos:line="196" pos:column="27">element</name><op:operator pos:line="196" pos:column="34">.</op:operator><name pos:line="196" pos:column="35">Name</name></name> <op:operator pos:line="196" pos:column="40">==</op:operator> <name><name pos:line="196" pos:column="43">SRC</name><op:operator pos:line="196" pos:column="46">.</op:operator><name pos:line="196" pos:column="47">ExpressionStatement</name></name></expr>)</condition><then pos:line="196" pos:column="67"> <block pos:line="196" pos:column="68">{
                    <expr_stmt><expr><name pos:line="197" pos:column="21">stmt</name> <op:operator pos:line="197" pos:column="26">=</op:operator> <call><name pos:line="197" pos:column="28">ParseExpressionStatementElement</name><argument_list pos:line="197" pos:column="59">(<argument><expr><name pos:line="197" pos:column="60">element</name></expr></argument>, <argument><expr><name pos:line="197" pos:column="69">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="198" pos:column="19">else <if pos:line="198" pos:column="24">if<condition pos:line="198" pos:column="26">(<expr><name><name pos:line="198" pos:column="27">element</name><op:operator pos:line="198" pos:column="34">.</op:operator><name pos:line="198" pos:column="35">Name</name></name> <op:operator pos:line="198" pos:column="40">==</op:operator> <name><name pos:line="198" pos:column="43">SRC</name><op:operator pos:line="198" pos:column="46">.</op:operator><name pos:line="198" pos:column="47">DeclarationStatement</name></name></expr>)</condition><then pos:line="198" pos:column="68"> <block pos:line="198" pos:column="69">{
                    <expr_stmt><expr><name pos:line="199" pos:column="21">stmt</name> <op:operator pos:line="199" pos:column="26">=</op:operator> <call><name pos:line="199" pos:column="28">ParseDeclarationStatementElement</name><argument_list pos:line="199" pos:column="60">(<argument><expr><name pos:line="199" pos:column="61">element</name></expr></argument>, <argument><expr><name pos:line="199" pos:column="70">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="200" pos:column="19">else <if pos:line="200" pos:column="24">if<condition pos:line="200" pos:column="26">(<expr><name><name pos:line="200" pos:column="27">element</name><op:operator pos:line="200" pos:column="34">.</op:operator><name pos:line="200" pos:column="35">Name</name></name> <op:operator pos:line="200" pos:column="40">==</op:operator> <name><name pos:line="200" pos:column="43">SRC</name><op:operator pos:line="200" pos:column="46">.</op:operator><name pos:line="200" pos:column="47">Block</name></name></expr>)</condition><then pos:line="200" pos:column="53"> <block pos:line="200" pos:column="54">{
                    <expr_stmt><expr><name pos:line="201" pos:column="21">stmt</name> <op:operator pos:line="201" pos:column="26">=</op:operator> <call><name pos:line="201" pos:column="28">ParseBlockElement</name><argument_list pos:line="201" pos:column="45">(<argument><expr><name pos:line="201" pos:column="46">element</name></expr></argument>, <argument><expr><name pos:line="201" pos:column="55">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="202" pos:column="19">else <if pos:line="202" pos:column="24">if<condition pos:line="202" pos:column="26">(<expr><name><name pos:line="202" pos:column="27">element</name><op:operator pos:line="202" pos:column="34">.</op:operator><name pos:line="202" pos:column="35">Name</name></name> <op:operator pos:line="202" pos:column="40">==</op:operator> <name><name pos:line="202" pos:column="43">SRC</name><op:operator pos:line="202" pos:column="46">.</op:operator><name pos:line="202" pos:column="47">Extern</name></name></expr>)</condition><then pos:line="202" pos:column="54"> <block pos:line="202" pos:column="55">{
                    <expr_stmt><expr><name pos:line="203" pos:column="21">stmt</name> <op:operator pos:line="203" pos:column="26">=</op:operator> <call><name pos:line="203" pos:column="28">ParseExternElement</name><argument_list pos:line="203" pos:column="46">(<argument><expr><name pos:line="203" pos:column="47">element</name></expr></argument>, <argument><expr><name pos:line="203" pos:column="56">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="204" pos:column="19">else <if pos:line="204" pos:column="24">if<condition pos:line="204" pos:column="26">(<expr><name><name pos:line="204" pos:column="27">element</name><op:operator pos:line="204" pos:column="34">.</op:operator><name pos:line="204" pos:column="35">Name</name></name> <op:operator pos:line="204" pos:column="40">==</op:operator> <name><name pos:line="204" pos:column="43">SRC</name><op:operator pos:line="204" pos:column="46">.</op:operator><name pos:line="204" pos:column="47">EmptyStatement</name></name></expr>)</condition><then pos:line="204" pos:column="62"> <block pos:line="204" pos:column="63">{
                    <expr_stmt><expr><name pos:line="205" pos:column="21">stmt</name> <op:operator pos:line="205" pos:column="26">=</op:operator> <call><name pos:line="205" pos:column="28">ParseEmptyStatementElement</name><argument_list pos:line="205" pos:column="54">(<argument><expr><name pos:line="205" pos:column="55">element</name></expr></argument>, <argument><expr><name pos:line="205" pos:column="64">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="206" pos:column="19">else <if pos:line="206" pos:column="24">if<condition pos:line="206" pos:column="26">(<expr><name><name pos:line="206" pos:column="27">element</name><op:operator pos:line="206" pos:column="34">.</op:operator><name pos:line="206" pos:column="35">Name</name></name> <op:operator pos:line="206" pos:column="40">==</op:operator> <name><name pos:line="206" pos:column="43">SRC</name><op:operator pos:line="206" pos:column="46">.</op:operator><name pos:line="206" pos:column="47">Lock</name></name></expr>)</condition><then pos:line="206" pos:column="52"> <block pos:line="206" pos:column="53">{
                    <expr_stmt><expr><name pos:line="207" pos:column="21">stmt</name> <op:operator pos:line="207" pos:column="26">=</op:operator> <call><name pos:line="207" pos:column="28">ParseLockElement</name><argument_list pos:line="207" pos:column="44">(<argument><expr><name pos:line="207" pos:column="45">element</name></expr></argument>, <argument><expr><name pos:line="207" pos:column="54">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="208" pos:column="19">else <if pos:line="208" pos:column="24">if<condition pos:line="208" pos:column="26">(<expr><name><name pos:line="208" pos:column="27">element</name><op:operator pos:line="208" pos:column="34">.</op:operator><name pos:line="208" pos:column="35">Name</name></name> <op:operator pos:line="208" pos:column="40">==</op:operator> <name><name pos:line="208" pos:column="43">SRC</name><op:operator pos:line="208" pos:column="46">.</op:operator><name pos:line="208" pos:column="47">Comment</name></name></expr>)</condition><then pos:line="208" pos:column="55"> <block pos:line="208" pos:column="56">{
                    <comment type="line" pos:line="209" pos:column="21">// do nothing. we are ignoring comments</comment>
                }</block></then> <else pos:line="210" pos:column="19">else <if pos:line="210" pos:column="24">if<condition pos:line="210" pos:column="26">(<expr><name><name pos:line="210" pos:column="27">element</name><op:operator pos:line="210" pos:column="34">.</op:operator><name pos:line="210" pos:column="35">Name</name></name> <op:operator pos:line="210" pos:column="40">==</op:operator> <name><name pos:line="210" pos:column="43">SRC</name><op:operator pos:line="210" pos:column="46">.</op:operator><name pos:line="210" pos:column="47">Package</name></name></expr>)</condition><then pos:line="210" pos:column="55"> <block pos:line="210" pos:column="56">{
                    <comment type="line" pos:line="211" pos:column="21">//do nothing. This is already handled in JavaCodeParser.ParseUnitElement()</comment>
                }</block></then> <else pos:line="212" pos:column="19">else <if pos:line="212" pos:column="24">if<condition pos:line="212" pos:column="26">(<expr><name><name pos:line="212" pos:column="27">element</name><op:operator pos:line="212" pos:column="34">.</op:operator><name pos:line="212" pos:column="35">Name</name><op:operator pos:line="212" pos:column="39">.</op:operator><name pos:line="212" pos:column="40">Namespace</name></name> <op:operator pos:line="212" pos:column="50">==</op:operator> <name><name pos:line="212" pos:column="53">CPP</name><op:operator pos:line="212" pos:column="56">.</op:operator><name pos:line="212" pos:column="57">NS</name></name></expr>)</condition><then pos:line="212" pos:column="60"> <block pos:line="212" pos:column="61">{
                    <comment type="line" pos:line="213" pos:column="21">//do nothing. skip any cpp preprocessor macros</comment>
                }</block></then> <else pos:line="214" pos:column="19">else <if pos:line="214" pos:column="24">if<condition pos:line="214" pos:column="26">(<expr><call><name><name pos:line="214" pos:column="27">NotImplementedStatements</name><op:operator pos:line="214" pos:column="51">.</op:operator><name pos:line="214" pos:column="52">Contains</name></name><argument_list pos:line="214" pos:column="60">(<argument><expr><name><name pos:line="214" pos:column="61">element</name><op:operator pos:line="214" pos:column="68">.</op:operator><name pos:line="214" pos:column="69">Name</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="214" pos:column="75"> <block pos:line="214" pos:column="76">{
                    <comment type="line" pos:line="215" pos:column="21">//do nothing. These are known and we're skipping them for now.</comment>
                }</block></then> <else pos:line="216" pos:column="19">else <block pos:line="216" pos:column="24">{
                    <expr_stmt><expr><call><name pos:line="217" pos:column="21">LogUnknown</name><argument_list pos:line="217" pos:column="31">(<argument><expr><name pos:line="217" pos:column="32">element</name></expr></argument>, <argument><expr><name pos:line="217" pos:column="41">context</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="217" pos:column="50">"ParseStatement"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>

                <return pos:line="220" pos:column="17">return <expr><name pos:line="220" pos:column="24">stmt</name></expr>;</return>
            }</block> <catch pos:line="221" pos:column="15">catch<parameter_list pos:line="221" pos:column="20">(<param><decl><type><name pos:line="221" pos:column="21">ParseException</name></type></decl></param>)</parameter_list> <block pos:line="221" pos:column="37">{
                <throw pos:line="222" pos:column="17">throw;</throw>
            }</block></catch> <catch pos:line="223" pos:column="15">catch<parameter_list pos:line="223" pos:column="20">(<param><decl><type><name pos:line="223" pos:column="21">Exception</name></type> <name pos:line="223" pos:column="31">e</name></decl></param>)</parameter_list> <block pos:line="223" pos:column="34">{
                <decl_stmt><decl><type><name pos:line="224" pos:column="17">int</name></type> <name pos:line="224" pos:column="21">lineNumber</name> <init pos:line="224" pos:column="32">= <expr><call><name><name pos:line="224" pos:column="34">element</name><op:operator pos:line="224" pos:column="41">.</op:operator><name pos:line="224" pos:column="42">GetSrcLineNumber</name></name><argument_list pos:line="224" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="225" pos:column="17">int</name></type> <name pos:line="225" pos:column="21">columnNumber</name> <init pos:line="225" pos:column="34">= <expr><call><name><name pos:line="225" pos:column="36">element</name><op:operator pos:line="225" pos:column="43">.</op:operator><name pos:line="225" pos:column="44">GetSrcLinePosition</name></name><argument_list pos:line="225" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <throw pos:line="226" pos:column="17">throw <expr><op:operator pos:line="226" pos:column="23">new</op:operator> <call><name pos:line="226" pos:column="27">ParseException</name><argument_list pos:line="226" pos:column="41">(<argument><expr><name><name pos:line="226" pos:column="42">context</name><op:operator pos:line="226" pos:column="49">.</op:operator><name pos:line="226" pos:column="50">FileName</name></name></expr></argument>, <argument><expr><name pos:line="226" pos:column="60">lineNumber</name></expr></argument>, <argument><expr><name pos:line="226" pos:column="72">columnNumber</name></expr></argument>, <argument><expr><name pos:line="226" pos:column="86">this</name></expr></argument>, <argument><expr><name><name pos:line="226" pos:column="92">e</name><op:operator pos:line="226" pos:column="93">.</op:operator><name pos:line="226" pos:column="94">Message</name></name></expr></argument>, <argument><expr><name pos:line="226" pos:column="103">e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></function>

        <comment type="line" pos:line="230" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="231" pos:column="9">/// Parses a file unit and returns a &lt;see cref="NamespaceDefinition.IsGlobal"&gt;global&lt;/see&gt;</comment>
        <comment type="line" pos:line="232" pos:column="9">/// &lt;see cref="NamespaceDefinition"&gt;namespace definition&lt;/see&gt; object.</comment>
        <comment type="line" pos:line="233" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="234" pos:column="9">/// &lt;param name="unitElement"&gt;The file unit to parse. Must be a SRC.Unit element.&lt;/param&gt;</comment>
        <comment type="line" pos:line="235" pos:column="9">/// &lt;returns&gt;A global namespace definition for &lt;paramref name="unitElement"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="236" pos:column="9">public</specifier> <specifier pos:line="236" pos:column="16">virtual</specifier> <name pos:line="236" pos:column="24">NamespaceDefinition</name></type> <name pos:line="236" pos:column="44">ParseFileUnit</name><parameter_list pos:line="236" pos:column="57">(<param><decl><type><name pos:line="236" pos:column="58">XElement</name></type> <name pos:line="236" pos:column="67">unitElement</name></decl></param>)</parameter_list> <block pos:line="236" pos:column="80">{
            <if pos:line="237" pos:column="13">if<condition pos:line="237" pos:column="15">(<expr><name pos:line="237" pos:column="16">null</name> <op:operator pos:line="237" pos:column="21">==</op:operator> <name pos:line="237" pos:column="24">unitElement</name></expr>)</condition><then pos:line="237" pos:column="36">
                <throw pos:line="238" pos:column="17">throw <expr><op:operator pos:line="238" pos:column="23">new</op:operator> <call><name pos:line="238" pos:column="27">ArgumentNullException</name><argument_list pos:line="238" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="238" pos:column="49">"unitElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="239" pos:column="13">if<condition pos:line="239" pos:column="15">(<expr><name><name pos:line="239" pos:column="16">SRC</name><op:operator pos:line="239" pos:column="19">.</op:operator><name pos:line="239" pos:column="20">Unit</name></name> <op:operator pos:line="239" pos:column="25">!=</op:operator> <name><name pos:line="239" pos:column="28">unitElement</name><op:operator pos:line="239" pos:column="39">.</op:operator><name pos:line="239" pos:column="40">Name</name></name></expr>)</condition><then pos:line="239" pos:column="45">
                <throw pos:line="240" pos:column="17">throw <expr><op:operator pos:line="240" pos:column="23">new</op:operator> <call><name pos:line="240" pos:column="27">ArgumentException</name><argument_list pos:line="240" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="240" pos:column="45">"should be a SRC.Unit"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="240" pos:column="69">"unitElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="242" pos:column="13">var</name></type> <name pos:line="242" pos:column="17">globalScope</name> <init pos:line="242" pos:column="29">= <expr><call><name pos:line="242" pos:column="31">ParseUnitElement</name><argument_list pos:line="242" pos:column="47">(<argument><expr><name pos:line="242" pos:column="48">unitElement</name></expr></argument>, <argument><expr><op:operator pos:line="242" pos:column="61">new</op:operator> <call><name pos:line="242" pos:column="65">ParserContext</name><argument_list pos:line="242" pos:column="78">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="243" pos:column="13">return <expr><name pos:line="243" pos:column="20">globalScope</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="246" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="247" pos:column="9">/// Creates a &lt;see cref="MethodDefinition"/&gt; object for &lt;paramref name="methodElement"/&gt;.</comment>
        <comment type="line" pos:line="248" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="249" pos:column="9">/// &lt;param name="methodElement"&gt;The element to parse&lt;/param&gt;</comment>
        <comment type="line" pos:line="250" pos:column="9">/// &lt;param name="context"&gt;The context to use&lt;/param&gt;</comment>
        <function><type><specifier pos:line="251" pos:column="9">protected</specifier> <specifier pos:line="251" pos:column="19">virtual</specifier> <name pos:line="251" pos:column="27">MethodDefinition</name></type> <name pos:line="251" pos:column="44">ParseMethodElement</name><parameter_list pos:line="251" pos:column="62">(<param><decl><type><name pos:line="251" pos:column="63">XElement</name></type> <name pos:line="251" pos:column="72">methodElement</name></decl></param>, <param><decl><type><name pos:line="251" pos:column="87">ParserContext</name></type> <name pos:line="251" pos:column="101">context</name></decl></param>)</parameter_list> <block pos:line="251" pos:column="110">{
            <if pos:line="252" pos:column="13">if<condition pos:line="252" pos:column="15">(<expr><name pos:line="252" pos:column="16">null</name> <op:operator pos:line="252" pos:column="21">==</op:operator> <name pos:line="252" pos:column="24">methodElement</name></expr>)</condition><then pos:line="252" pos:column="38">
                <throw pos:line="253" pos:column="17">throw <expr><op:operator pos:line="253" pos:column="23">new</op:operator> <call><name pos:line="253" pos:column="27">ArgumentNullException</name><argument_list pos:line="253" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="253" pos:column="49">"methodElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="254" pos:column="13">if<condition pos:line="254" pos:column="15">(<expr><op:operator pos:line="254" pos:column="16">!</op:operator><call><name><name pos:line="254" pos:column="17">MethodElementNames</name><op:operator pos:line="254" pos:column="35">.</op:operator><name pos:line="254" pos:column="36">Contains</name></name><argument_list pos:line="254" pos:column="44">(<argument><expr><name><name pos:line="254" pos:column="45">methodElement</name><op:operator pos:line="254" pos:column="58">.</op:operator><name pos:line="254" pos:column="59">Name</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="254" pos:column="65">
                <throw pos:line="255" pos:column="17">throw <expr><op:operator pos:line="255" pos:column="23">new</op:operator> <call><name pos:line="255" pos:column="27">ArgumentException</name><argument_list pos:line="255" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="255" pos:column="45">"must be a method element"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="255" pos:column="73">"methodElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="256" pos:column="13">if<condition pos:line="256" pos:column="15">(<expr><name pos:line="256" pos:column="16">context</name> <op:operator pos:line="256" pos:column="24">==</op:operator> <name pos:line="256" pos:column="27">null</name></expr>)</condition><then pos:line="256" pos:column="32">
                <throw pos:line="257" pos:column="17">throw <expr><op:operator pos:line="257" pos:column="23">new</op:operator> <call><name pos:line="257" pos:column="27">ArgumentNullException</name><argument_list pos:line="257" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="257" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="259" pos:column="13">var</name></type> <name pos:line="259" pos:column="17">methodIsDestructor</name> <init pos:line="259" pos:column="36">= <expr><op:operator pos:line="259" pos:column="38">(</op:operator><name><name pos:line="259" pos:column="39">methodElement</name><op:operator pos:line="259" pos:column="52">.</op:operator><name pos:line="259" pos:column="53">Name</name></name> <op:operator pos:line="259" pos:column="58">==</op:operator> <name><name pos:line="259" pos:column="61">SRC</name><op:operator pos:line="259" pos:column="64">.</op:operator><name pos:line="259" pos:column="65">Destructor</name></name> <op:operator pos:line="259" pos:column="76">||</op:operator> <name><name pos:line="259" pos:column="79">methodElement</name><op:operator pos:line="259" pos:column="92">.</op:operator><name pos:line="259" pos:column="93">Name</name></name> <op:operator pos:line="259" pos:column="98">==</op:operator> <name><name pos:line="259" pos:column="101">SRC</name><op:operator pos:line="259" pos:column="104">.</op:operator><name pos:line="259" pos:column="105">DestructorDeclaration</name></name><op:operator pos:line="259" pos:column="126">)</op:operator></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="260" pos:column="13">var</name></type> <name pos:line="260" pos:column="17">methodDefinition</name> <init pos:line="260" pos:column="34">= <expr><op:operator pos:line="260" pos:column="36">new</op:operator> <call><name pos:line="260" pos:column="40">MethodDefinition</name><argument_list pos:line="260" pos:column="56">()</argument_list></call> <block pos:line="260" pos:column="59">{
                <expr><name pos:line="261" pos:column="17">Name</name> <op:operator pos:line="261" pos:column="22">=</op:operator> <call><name><name pos:line="261" pos:column="24">String</name><op:operator pos:line="261" pos:column="30">.</op:operator><name pos:line="261" pos:column="31">Format</name></name><argument_list pos:line="261" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="261" pos:column="38">"{0}{1}"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="261" pos:column="48">(</op:operator><name pos:line="261" pos:column="49">methodIsDestructor</name> <op:operator pos:line="261" pos:column="68">?</op:operator> <lit:literal type="string" pos:line="261" pos:column="70">"~"</lit:literal> <op:operator pos:line="261" pos:column="74">:</op:operator> <name><name pos:line="261" pos:column="76">String</name><op:operator pos:line="261" pos:column="82">.</op:operator><name pos:line="261" pos:column="83">Empty</name></name><op:operator pos:line="261" pos:column="88">)</op:operator></expr></argument>, <argument><expr><call><name pos:line="261" pos:column="91">GetNameForMethod</name><argument_list pos:line="261" pos:column="107">(<argument><expr><name pos:line="261" pos:column="108">methodElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
                <expr><name pos:line="262" pos:column="17">IsConstructor</name> <op:operator pos:line="262" pos:column="31">=</op:operator> <op:operator pos:line="262" pos:column="33">(</op:operator><name><name pos:line="262" pos:column="34">methodElement</name><op:operator pos:line="262" pos:column="47">.</op:operator><name pos:line="262" pos:column="48">Name</name></name> <op:operator pos:line="262" pos:column="53">==</op:operator> <name><name pos:line="262" pos:column="56">SRC</name><op:operator pos:line="262" pos:column="59">.</op:operator><name pos:line="262" pos:column="60">Constructor</name></name> <op:operator pos:line="262" pos:column="72">||</op:operator> <name><name pos:line="262" pos:column="75">methodElement</name><op:operator pos:line="262" pos:column="88">.</op:operator><name pos:line="262" pos:column="89">Name</name></name> <op:operator pos:line="262" pos:column="94">==</op:operator> <name><name pos:line="262" pos:column="97">SRC</name><op:operator pos:line="262" pos:column="100">.</op:operator><name pos:line="262" pos:column="101">ConstructorDeclaration</name></name><op:operator pos:line="262" pos:column="123">)</op:operator></expr>,
                <expr><name pos:line="263" pos:column="17">IsDestructor</name> <op:operator pos:line="263" pos:column="30">=</op:operator> <name pos:line="263" pos:column="32">methodIsDestructor</name></expr>,
                <expr><name pos:line="264" pos:column="17">Accessibility</name> <op:operator pos:line="264" pos:column="31">=</op:operator> <call><name pos:line="264" pos:column="33">GetAccessModifierForMethod</name><argument_list pos:line="264" pos:column="59">(<argument><expr><name pos:line="264" pos:column="60">methodElement</name></expr></argument>)</argument_list></call></expr>,
                <expr><name pos:line="265" pos:column="17">ProgrammingLanguage</name> <op:operator pos:line="265" pos:column="37">=</op:operator> <name pos:line="265" pos:column="39">ParserLanguage</name></expr>
            }</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="267" pos:column="13">methodDefinition</name><op:operator pos:line="267" pos:column="29">.</op:operator><name pos:line="267" pos:column="30">AddLocation</name></name><argument_list pos:line="267" pos:column="41">(<argument><expr><call><name><name pos:line="267" pos:column="42">context</name><op:operator pos:line="267" pos:column="49">.</op:operator><name pos:line="267" pos:column="50">CreateLocation</name></name><argument_list pos:line="267" pos:column="64">(<argument><expr><name pos:line="267" pos:column="65">methodElement</name></expr></argument>, <argument><expr><call><name pos:line="267" pos:column="80">ContainerIsReference</name><argument_list pos:line="267" pos:column="100">(<argument><expr><name pos:line="267" pos:column="101">methodElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="269" pos:column="13">// get the return type for the method</comment>
            <decl_stmt><decl><type><name pos:line="270" pos:column="13">var</name></type> <name pos:line="270" pos:column="17">returnTypeElement</name> <init pos:line="270" pos:column="35">= <expr><call><name><name pos:line="270" pos:column="37">methodElement</name><op:operator pos:line="270" pos:column="50">.</op:operator><name pos:line="270" pos:column="51">Element</name></name><argument_list pos:line="270" pos:column="58">(<argument><expr><name><name pos:line="270" pos:column="59">SRC</name><op:operator pos:line="270" pos:column="62">.</op:operator><name pos:line="270" pos:column="63">Type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="271" pos:column="13">if<condition pos:line="271" pos:column="15">(<expr><name pos:line="271" pos:column="16">returnTypeElement</name> <op:operator pos:line="271" pos:column="34">!=</op:operator> <name pos:line="271" pos:column="37">null</name></expr>)</condition><then pos:line="271" pos:column="42"> <block pos:line="271" pos:column="43">{
                <comment type="line" pos:line="272" pos:column="17">// construct the return type. however, if the Name of the return type is "void",</comment>
                <comment type="line" pos:line="273" pos:column="17">// don't use it because it means the return type is void</comment>
                <decl_stmt><decl><type><name pos:line="274" pos:column="17">var</name></type> <name pos:line="274" pos:column="21">returnTypeUse</name> <init pos:line="274" pos:column="35">= <expr><call><name pos:line="274" pos:column="37">ParseTypeUseElement</name><argument_list pos:line="274" pos:column="56">(<argument><expr><name pos:line="274" pos:column="57">returnTypeElement</name></expr></argument>, <argument><expr><name pos:line="274" pos:column="76">context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="275" pos:column="17">if<condition pos:line="275" pos:column="19">(<expr><name pos:line="275" pos:column="20">returnTypeUse</name> <op:operator pos:line="275" pos:column="34">!=</op:operator> <name pos:line="275" pos:column="37">null</name> <op:operator pos:line="275" pos:column="42">&amp;&amp;</op:operator> <name><name pos:line="275" pos:column="45">returnTypeUse</name><op:operator pos:line="275" pos:column="58">.</op:operator><name pos:line="275" pos:column="59">Name</name></name> <op:operator pos:line="275" pos:column="64">!=</op:operator> <lit:literal type="string" pos:line="275" pos:column="67">"void"</lit:literal></expr>)</condition><then pos:line="275" pos:column="74"> <block pos:line="275" pos:column="75">{
                    <expr_stmt><expr><call><name><name pos:line="276" pos:column="21">methodDefinition</name><op:operator pos:line="276" pos:column="37">.</op:operator><name pos:line="276" pos:column="38">AddReturnType</name></name><argument_list pos:line="276" pos:column="51">(<argument><expr><call><name pos:line="276" pos:column="52">ParseTypeUseElement</name><argument_list pos:line="276" pos:column="71">(<argument><expr><name pos:line="276" pos:column="72">returnTypeElement</name></expr></argument>, <argument><expr><name pos:line="276" pos:column="91">context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>

            <comment type="line" pos:line="280" pos:column="13">//add the constructor initializer list, if any</comment>
            <decl_stmt><decl><type><name pos:line="281" pos:column="13">var</name></type> <name pos:line="281" pos:column="17">memberListElement</name> <init pos:line="281" pos:column="35">= <expr><call><name><name pos:line="281" pos:column="37">methodElement</name><op:operator pos:line="281" pos:column="50">.</op:operator><name pos:line="281" pos:column="51">Element</name></name><argument_list pos:line="281" pos:column="58">(<argument><expr><name><name pos:line="281" pos:column="59">SRC</name><op:operator pos:line="281" pos:column="62">.</op:operator><name pos:line="281" pos:column="63">MemberList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="282" pos:column="13">if<condition pos:line="282" pos:column="15">(<expr><name pos:line="282" pos:column="16">memberListElement</name> <op:operator pos:line="282" pos:column="34">!=</op:operator> <name pos:line="282" pos:column="37">null</name></expr>)</condition><then pos:line="282" pos:column="42"> <block pos:line="282" pos:column="43">{
                <foreach pos:line="283" pos:column="17">foreach(<init><decl><type><name pos:line="283" pos:column="25">var</name></type> <name pos:line="283" pos:column="29">callElement</name> <range pos:line="283" pos:column="41">in <expr><call><name><name pos:line="283" pos:column="44">memberListElement</name><op:operator pos:line="283" pos:column="61">.</op:operator><name pos:line="283" pos:column="62">Elements</name></name><argument_list pos:line="283" pos:column="70">(<argument><expr><name><name pos:line="283" pos:column="71">SRC</name><op:operator pos:line="283" pos:column="74">.</op:operator><name pos:line="283" pos:column="75">Call</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>) <block pos:line="283" pos:column="82">{
                    <decl_stmt><decl><type><name pos:line="284" pos:column="21">var</name></type> <name pos:line="284" pos:column="25">call</name> <init pos:line="284" pos:column="30">= <expr><call><name pos:line="284" pos:column="32">ParseCallElement</name><argument_list pos:line="284" pos:column="48">(<argument><expr><name pos:line="284" pos:column="49">callElement</name></expr></argument>, <argument><expr><name pos:line="284" pos:column="62">context</name></expr></argument>)</argument_list></call> <op:operator pos:line="284" pos:column="71">as</op:operator> <name pos:line="284" pos:column="74">MethodCall</name></expr></init></decl>;</decl_stmt>
                    <if pos:line="285" pos:column="21">if<condition pos:line="285" pos:column="23">(<expr><name pos:line="285" pos:column="24">call</name> <op:operator pos:line="285" pos:column="29">!=</op:operator> <name pos:line="285" pos:column="32">null</name></expr>)</condition><then pos:line="285" pos:column="37"> <block pos:line="285" pos:column="38">{
                        <expr_stmt><expr><call><name><name pos:line="286" pos:column="25">methodDefinition</name><op:operator pos:line="286" pos:column="41">.</op:operator><name pos:line="286" pos:column="42">AddInitializer</name></name><argument_list pos:line="286" pos:column="56">(<argument><expr><name pos:line="286" pos:column="57">call</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></foreach>
            }</block></then></if>

            <comment type="line" pos:line="291" pos:column="13">//Add the method's parameters</comment>
            <decl_stmt><decl><type><name pos:line="292" pos:column="13">var</name></type> <name pos:line="292" pos:column="17">parameters</name> <init pos:line="292" pos:column="28">= <expr><linq><from pos:line="292" pos:column="30">from <expr><name pos:line="292" pos:column="35">paramElement</name></expr> <in pos:line="292" pos:column="48">in <expr><call><name pos:line="292" pos:column="51">GetParametersFromMethodElement</name><argument_list pos:line="292" pos:column="81">(<argument><expr><name pos:line="292" pos:column="82">methodElement</name></expr></argument>)</argument_list></call></expr></in></from>
                             <select pos:line="293" pos:column="30">select <expr><call><name pos:line="293" pos:column="37">ParseParameterElement</name><argument_list pos:line="293" pos:column="58">(<argument><expr><name pos:line="293" pos:column="59">paramElement</name></expr></argument>, <argument><expr><name pos:line="293" pos:column="73">context</name></expr></argument>)</argument_list></call></expr></select></linq></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="294" pos:column="13">methodDefinition</name><op:operator pos:line="294" pos:column="29">.</op:operator><name pos:line="294" pos:column="30">AddMethodParameters</name></name><argument_list pos:line="294" pos:column="49">(<argument><expr><call><name><name pos:line="294" pos:column="50">parameters</name><op:operator pos:line="294" pos:column="60">.</op:operator><name pos:line="294" pos:column="61">ToList</name></name><argument_list pos:line="294" pos:column="67">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <comment type="line" pos:line="296" pos:column="13">//Add the method body statements as children</comment>
            <decl_stmt><decl><type><name pos:line="297" pos:column="13">var</name></type> <name pos:line="297" pos:column="17">methodBlock</name> <init pos:line="297" pos:column="29">= <expr><call><name><name pos:line="297" pos:column="31">methodElement</name><op:operator pos:line="297" pos:column="44">.</op:operator><name pos:line="297" pos:column="45">Element</name></name><argument_list pos:line="297" pos:column="52">(<argument><expr><name><name pos:line="297" pos:column="53">SRC</name><op:operator pos:line="297" pos:column="56">.</op:operator><name pos:line="297" pos:column="57">Block</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="298" pos:column="13">if<condition pos:line="298" pos:column="15">(<expr><name pos:line="298" pos:column="16">methodBlock</name> <op:operator pos:line="298" pos:column="28">!=</op:operator> <name pos:line="298" pos:column="31">null</name></expr>)</condition><then pos:line="298" pos:column="36"> <block pos:line="298" pos:column="37">{
                <foreach pos:line="299" pos:column="17">foreach(<init><decl><type><name pos:line="299" pos:column="25">var</name></type> <name pos:line="299" pos:column="29">child</name> <range pos:line="299" pos:column="35">in <expr><call><name><name pos:line="299" pos:column="38">methodBlock</name><op:operator pos:line="299" pos:column="49">.</op:operator><name pos:line="299" pos:column="50">Elements</name></name><argument_list pos:line="299" pos:column="58">()</argument_list></call></expr></range></decl></init>) <block pos:line="299" pos:column="62">{
                    <expr_stmt><expr><call><name><name pos:line="300" pos:column="21">methodDefinition</name><op:operator pos:line="300" pos:column="37">.</op:operator><name pos:line="300" pos:column="38">AddChildStatement</name></name><argument_list pos:line="300" pos:column="55">(<argument><expr><call><name pos:line="300" pos:column="56">ParseStatement</name><argument_list pos:line="300" pos:column="70">(<argument><expr><name pos:line="300" pos:column="71">child</name></expr></argument>, <argument><expr><name pos:line="300" pos:column="78">context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
            }</block></then></if>

            <return pos:line="304" pos:column="13">return <expr><name pos:line="304" pos:column="20">methodDefinition</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="307" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="308" pos:column="9">/// Generates a parameter declaration for the given parameter element</comment>
        <comment type="line" pos:line="309" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="310" pos:column="9">/// &lt;param name="paramElement"&gt;A &lt;see cref="ABB.SrcML.SRC.Parameter"/&gt; XElement&lt;/param&gt;</comment>
        <comment type="line" pos:line="311" pos:column="9">/// &lt;param name="context"&gt;the parser context&lt;/param&gt;</comment>
        <comment type="line" pos:line="312" pos:column="9">/// &lt;returns&gt;A parameter declaration object&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="313" pos:column="9">protected</specifier> <specifier pos:line="313" pos:column="19">virtual</specifier> <name pos:line="313" pos:column="27">VariableDeclaration</name></type> <name pos:line="313" pos:column="47">ParseParameterElement</name><parameter_list pos:line="313" pos:column="68">(<param><decl><type><name pos:line="313" pos:column="69">XElement</name></type> <name pos:line="313" pos:column="78">paramElement</name></decl></param>, <param><decl><type><name pos:line="313" pos:column="92">ParserContext</name></type> <name pos:line="313" pos:column="106">context</name></decl></param>)</parameter_list> <block pos:line="313" pos:column="115">{
            <if pos:line="314" pos:column="13">if<condition pos:line="314" pos:column="15">(<expr><name pos:line="314" pos:column="16">paramElement</name> <op:operator pos:line="314" pos:column="29">==</op:operator> <name pos:line="314" pos:column="32">null</name></expr>)</condition><then pos:line="314" pos:column="37">
                <throw pos:line="315" pos:column="17">throw <expr><op:operator pos:line="315" pos:column="23">new</op:operator> <call><name pos:line="315" pos:column="27">ArgumentNullException</name><argument_list pos:line="315" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="315" pos:column="49">"paramElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="316" pos:column="13">if<condition pos:line="316" pos:column="15">(<expr><name><name pos:line="316" pos:column="16">paramElement</name><op:operator pos:line="316" pos:column="28">.</op:operator><name pos:line="316" pos:column="29">Name</name></name> <op:operator pos:line="316" pos:column="34">!=</op:operator> <name><name pos:line="316" pos:column="37">SRC</name><op:operator pos:line="316" pos:column="40">.</op:operator><name pos:line="316" pos:column="41">Parameter</name></name></expr>)</condition><then pos:line="316" pos:column="51">
                <throw pos:line="317" pos:column="17">throw <expr><op:operator pos:line="317" pos:column="23">new</op:operator> <call><name pos:line="317" pos:column="27">ArgumentException</name><argument_list pos:line="317" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="317" pos:column="45">"must be a SRC.Parameter"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="317" pos:column="72">"paramElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="318" pos:column="13">if<condition pos:line="318" pos:column="15">(<expr><name pos:line="318" pos:column="16">context</name> <op:operator pos:line="318" pos:column="24">==</op:operator> <name pos:line="318" pos:column="27">null</name></expr>)</condition><then pos:line="318" pos:column="32">
                <throw pos:line="319" pos:column="17">throw <expr><op:operator pos:line="319" pos:column="23">new</op:operator> <call><name pos:line="319" pos:column="27">ArgumentNullException</name><argument_list pos:line="319" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="319" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="321" pos:column="13">var</name></type> <name pos:line="321" pos:column="17">declElement</name> <init pos:line="321" pos:column="29">= <expr><call><name><name pos:line="321" pos:column="31">paramElement</name><op:operator pos:line="321" pos:column="43">.</op:operator><name pos:line="321" pos:column="44">Elements</name></name><argument_list pos:line="321" pos:column="52">()</argument_list></call><op:operator pos:line="321" pos:column="54">.</op:operator><call><name pos:line="321" pos:column="55">FirstOrDefault</name><argument_list pos:line="321" pos:column="69">(<argument><expr><lambda><name pos:line="321" pos:column="70">e</name> <op:operator pos:line="321" pos:column="72">=&gt;</op:operator> <name><name pos:line="321" pos:column="75">e</name><op:operator pos:line="321" pos:column="76">.</op:operator><name pos:line="321" pos:column="77">Name</name></name> <op:operator pos:line="321" pos:column="82">==</op:operator> <name><name pos:line="321" pos:column="85">SRC</name><op:operator pos:line="321" pos:column="88">.</op:operator><name pos:line="321" pos:column="89">Declaration</name></name> <op:operator pos:line="321" pos:column="101">||</op:operator> <name><name pos:line="321" pos:column="104">e</name><op:operator pos:line="321" pos:column="105">.</op:operator><name pos:line="321" pos:column="106">Name</name></name> <op:operator pos:line="321" pos:column="111">==</op:operator> <name><name pos:line="321" pos:column="114">SRC</name><op:operator pos:line="321" pos:column="117">.</op:operator><name pos:line="321" pos:column="118">FunctionDeclaration</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="322" pos:column="13">if<condition pos:line="322" pos:column="15">(<expr><name pos:line="322" pos:column="16">declElement</name> <op:operator pos:line="322" pos:column="28">==</op:operator> <name pos:line="322" pos:column="31">null</name></expr>)</condition><then pos:line="322" pos:column="36"> <block pos:line="322" pos:column="37">{
                <return pos:line="323" pos:column="17">return <expr><op:operator pos:line="323" pos:column="24">new</op:operator> <call><name pos:line="323" pos:column="28">VariableDeclaration</name><argument_list pos:line="323" pos:column="47">()</argument_list></call> <block pos:line="323" pos:column="50">{
                    <expr><name pos:line="324" pos:column="21">Name</name> <op:operator pos:line="324" pos:column="26">=</op:operator> <name><name pos:line="324" pos:column="28">string</name><op:operator pos:line="324" pos:column="34">.</op:operator><name pos:line="324" pos:column="35">Empty</name></name></expr><op:operator pos:line="324" pos:column="40">,</op:operator> 
                    <expr><name pos:line="325" pos:column="21">Location</name> <op:operator pos:line="325" pos:column="30">=</op:operator> <call><name><name pos:line="325" pos:column="32">context</name><op:operator pos:line="325" pos:column="39">.</op:operator><name pos:line="325" pos:column="40">CreateLocation</name></name><argument_list pos:line="325" pos:column="54">(<argument><expr><name pos:line="325" pos:column="55">paramElement</name></expr></argument>)</argument_list></call></expr><op:operator pos:line="325" pos:column="68">,</op:operator>
                    <expr><name pos:line="326" pos:column="21">ProgrammingLanguage</name> <op:operator pos:line="326" pos:column="41">=</op:operator> <name pos:line="326" pos:column="43">ParserLanguage</name></expr>
                }</block></expr>;</return>
            }</block></then> <else pos:line="328" pos:column="15">else <block pos:line="328" pos:column="20">{
                <return pos:line="329" pos:column="17">return <expr><call><name pos:line="329" pos:column="24">ParseDeclarationElement</name><argument_list pos:line="329" pos:column="47">(<argument><expr><name pos:line="329" pos:column="48">declElement</name></expr></argument>, <argument><expr><name pos:line="329" pos:column="61">context</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></else></if>
        }</block></function>

        <comment type="line" pos:line="333" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="334" pos:column="9">/// Creates an &lt;see cref="IfStatement"/&gt; object for &lt;paramref name="ifElement"/&gt;.</comment>
        <comment type="line" pos:line="335" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="336" pos:column="9">/// &lt;param name="ifElement"&gt;The element to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="337" pos:column="9">/// &lt;param name="context"&gt;The context to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="338" pos:column="9">/// &lt;returns&gt;An IfStatement corresponding to ifElement.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="339" pos:column="9">protected</specifier> <specifier pos:line="339" pos:column="19">virtual</specifier> <name pos:line="339" pos:column="27">IfStatement</name></type> <name pos:line="339" pos:column="39">ParseIfElement</name><parameter_list pos:line="339" pos:column="53">(<param><decl><type><name pos:line="339" pos:column="54">XElement</name></type> <name pos:line="339" pos:column="63">ifElement</name></decl></param>, <param><decl><type><name pos:line="339" pos:column="74">ParserContext</name></type> <name pos:line="339" pos:column="88">context</name></decl></param>)</parameter_list> <block pos:line="339" pos:column="97">{
            <if pos:line="340" pos:column="13">if<condition pos:line="340" pos:column="15">(<expr><name pos:line="340" pos:column="16">ifElement</name> <op:operator pos:line="340" pos:column="26">==</op:operator> <name pos:line="340" pos:column="29">null</name></expr>)</condition><then pos:line="340" pos:column="34"> 
                <throw pos:line="341" pos:column="17">throw <expr><op:operator pos:line="341" pos:column="23">new</op:operator> <call><name pos:line="341" pos:column="27">ArgumentNullException</name><argument_list pos:line="341" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="341" pos:column="49">"ifElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="342" pos:column="13">if<condition pos:line="342" pos:column="15">(<expr><name><name pos:line="342" pos:column="16">ifElement</name><op:operator pos:line="342" pos:column="25">.</op:operator><name pos:line="342" pos:column="26">Name</name></name> <op:operator pos:line="342" pos:column="31">!=</op:operator> <name><name pos:line="342" pos:column="34">SRC</name><op:operator pos:line="342" pos:column="37">.</op:operator><name pos:line="342" pos:column="38">If</name></name></expr>)</condition><then pos:line="342" pos:column="41"> 
                <throw pos:line="343" pos:column="17">throw <expr><op:operator pos:line="343" pos:column="23">new</op:operator> <call><name pos:line="343" pos:column="27">ArgumentException</name><argument_list pos:line="343" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="343" pos:column="45">"must be a SRC.If element"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="343" pos:column="73">"ifElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="344" pos:column="13">if<condition pos:line="344" pos:column="15">(<expr><name pos:line="344" pos:column="16">context</name> <op:operator pos:line="344" pos:column="24">==</op:operator> <name pos:line="344" pos:column="27">null</name></expr>)</condition><then pos:line="344" pos:column="32">
                <throw pos:line="345" pos:column="17">throw <expr><op:operator pos:line="345" pos:column="23">new</op:operator> <call><name pos:line="345" pos:column="27">ArgumentNullException</name><argument_list pos:line="345" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="345" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="347" pos:column="13">var</name></type> <name pos:line="347" pos:column="17">ifStmt</name> <init pos:line="347" pos:column="24">= <expr><op:operator pos:line="347" pos:column="26">new</op:operator> <call><name pos:line="347" pos:column="30">IfStatement</name><argument_list pos:line="347" pos:column="41">()</argument_list></call> <block pos:line="347" pos:column="44">{<expr><name pos:line="347" pos:column="45">ProgrammingLanguage</name> <op:operator pos:line="347" pos:column="65">=</op:operator> <name pos:line="347" pos:column="67">ParserLanguage</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="348" pos:column="13">ifStmt</name><op:operator pos:line="348" pos:column="19">.</op:operator><name pos:line="348" pos:column="20">AddLocation</name></name><argument_list pos:line="348" pos:column="31">(<argument><expr><call><name><name pos:line="348" pos:column="32">context</name><op:operator pos:line="348" pos:column="39">.</op:operator><name pos:line="348" pos:column="40">CreateLocation</name></name><argument_list pos:line="348" pos:column="54">(<argument><expr><name pos:line="348" pos:column="55">ifElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <foreach pos:line="350" pos:column="13">foreach(<init><decl><type><name pos:line="350" pos:column="21">var</name></type> <name pos:line="350" pos:column="25">ifChild</name> <range pos:line="350" pos:column="33">in <expr><call><name><name pos:line="350" pos:column="36">ifElement</name><op:operator pos:line="350" pos:column="45">.</op:operator><name pos:line="350" pos:column="46">Elements</name></name><argument_list pos:line="350" pos:column="54">()</argument_list></call></expr></range></decl></init>) <block pos:line="350" pos:column="58">{
                <if pos:line="351" pos:column="17">if<condition pos:line="351" pos:column="19">(<expr><name><name pos:line="351" pos:column="20">ifChild</name><op:operator pos:line="351" pos:column="27">.</op:operator><name pos:line="351" pos:column="28">Name</name></name> <op:operator pos:line="351" pos:column="33">==</op:operator> <name><name pos:line="351" pos:column="36">SRC</name><op:operator pos:line="351" pos:column="39">.</op:operator><name pos:line="351" pos:column="40">Condition</name></name></expr>)</condition><then pos:line="351" pos:column="50"> <block pos:line="351" pos:column="51">{
                    <comment type="line" pos:line="352" pos:column="21">//fill in condition</comment>
                    <decl_stmt><decl><type><name pos:line="353" pos:column="21">var</name></type> <name pos:line="353" pos:column="25">expElement</name> <init pos:line="353" pos:column="36">= <expr><call><name pos:line="353" pos:column="38">GetFirstChildExpression</name><argument_list pos:line="353" pos:column="61">(<argument><expr><name pos:line="353" pos:column="62">ifChild</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="354" pos:column="21">if<condition pos:line="354" pos:column="23">(<expr><name pos:line="354" pos:column="24">expElement</name> <op:operator pos:line="354" pos:column="35">!=</op:operator> <name pos:line="354" pos:column="38">null</name></expr>)</condition><then pos:line="354" pos:column="43"> <block pos:line="354" pos:column="44">{
                        <expr_stmt><expr><name><name pos:line="355" pos:column="25">ifStmt</name><op:operator pos:line="355" pos:column="31">.</op:operator><name pos:line="355" pos:column="32">Condition</name></name> <op:operator pos:line="355" pos:column="42">=</op:operator> <call><name pos:line="355" pos:column="44">ParseExpression</name><argument_list pos:line="355" pos:column="59">(<argument><expr><name pos:line="355" pos:column="60">expElement</name></expr></argument>, <argument><expr><name pos:line="355" pos:column="72">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then> <else pos:line="357" pos:column="19">else <if pos:line="357" pos:column="24">if<condition pos:line="357" pos:column="26">(<expr><name><name pos:line="357" pos:column="27">ifChild</name><op:operator pos:line="357" pos:column="34">.</op:operator><name pos:line="357" pos:column="35">Name</name></name> <op:operator pos:line="357" pos:column="40">==</op:operator> <name><name pos:line="357" pos:column="43">SRC</name><op:operator pos:line="357" pos:column="46">.</op:operator><name pos:line="357" pos:column="47">Then</name></name></expr>)</condition><then pos:line="357" pos:column="52"> <block pos:line="357" pos:column="53">{
                    <comment type="line" pos:line="358" pos:column="21">//add the then statements</comment>
                    <foreach pos:line="359" pos:column="21">foreach(<init><decl><type><name pos:line="359" pos:column="29">var</name></type> <name pos:line="359" pos:column="33">thenChild</name> <range pos:line="359" pos:column="43">in <expr><call><name><name pos:line="359" pos:column="46">ifChild</name><op:operator pos:line="359" pos:column="53">.</op:operator><name pos:line="359" pos:column="54">Elements</name></name><argument_list pos:line="359" pos:column="62">()</argument_list></call></expr></range></decl></init>) <block pos:line="359" pos:column="66">{
                        <if pos:line="360" pos:column="25">if<condition pos:line="360" pos:column="27">(<expr><name><name pos:line="360" pos:column="28">thenChild</name><op:operator pos:line="360" pos:column="37">.</op:operator><name pos:line="360" pos:column="38">Name</name></name> <op:operator pos:line="360" pos:column="43">==</op:operator> <name><name pos:line="360" pos:column="46">SRC</name><op:operator pos:line="360" pos:column="49">.</op:operator><name pos:line="360" pos:column="50">Block</name></name></expr>)</condition><then pos:line="360" pos:column="56"> <block pos:line="360" pos:column="57">{
                            <decl_stmt><decl><type><name pos:line="361" pos:column="29">var</name></type> <name pos:line="361" pos:column="33">blockStatements</name> <init pos:line="361" pos:column="49">= <expr><call><name><name pos:line="361" pos:column="51">thenChild</name><op:operator pos:line="361" pos:column="60">.</op:operator><name pos:line="361" pos:column="61">Elements</name></name><argument_list pos:line="361" pos:column="69">()</argument_list></call><op:operator pos:line="361" pos:column="71">.</op:operator><call><name pos:line="361" pos:column="72">Select</name><argument_list pos:line="361" pos:column="78">(<argument><expr><lambda><name pos:line="361" pos:column="79">e</name> <op:operator pos:line="361" pos:column="81">=&gt;</op:operator> <call><name pos:line="361" pos:column="84">ParseStatement</name><argument_list pos:line="361" pos:column="98">(<argument><expr><name pos:line="361" pos:column="99">e</name></expr></argument>, <argument><expr><name pos:line="361" pos:column="102">context</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><call><name><name pos:line="362" pos:column="29">ifStmt</name><op:operator pos:line="362" pos:column="35">.</op:operator><name pos:line="362" pos:column="36">AddChildStatements</name></name><argument_list pos:line="362" pos:column="54">(<argument><expr><name pos:line="362" pos:column="55">blockStatements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then> <else pos:line="363" pos:column="27">else <block pos:line="363" pos:column="32">{
                            <expr_stmt><expr><call><name><name pos:line="364" pos:column="29">ifStmt</name><op:operator pos:line="364" pos:column="35">.</op:operator><name pos:line="364" pos:column="36">AddChildStatement</name></name><argument_list pos:line="364" pos:column="53">(<argument><expr><call><name pos:line="364" pos:column="54">ParseStatement</name><argument_list pos:line="364" pos:column="68">(<argument><expr><name pos:line="364" pos:column="69">thenChild</name></expr></argument>, <argument><expr><name pos:line="364" pos:column="80">context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></else></if>
                    }</block></foreach>
                }</block></then> <else pos:line="367" pos:column="19">else <if pos:line="367" pos:column="24">if<condition pos:line="367" pos:column="26">(<expr><name><name pos:line="367" pos:column="27">ifChild</name><op:operator pos:line="367" pos:column="34">.</op:operator><name pos:line="367" pos:column="35">Name</name></name> <op:operator pos:line="367" pos:column="40">==</op:operator> <name><name pos:line="367" pos:column="43">SRC</name><op:operator pos:line="367" pos:column="46">.</op:operator><name pos:line="367" pos:column="47">Else</name></name></expr>)</condition><then pos:line="367" pos:column="52"> <block pos:line="367" pos:column="53">{
                    <comment type="line" pos:line="368" pos:column="21">//add the else statements</comment>
                    <foreach pos:line="369" pos:column="21">foreach(<init><decl><type><name pos:line="369" pos:column="29">var</name></type> <name pos:line="369" pos:column="33">elseChild</name> <range pos:line="369" pos:column="43">in <expr><call><name><name pos:line="369" pos:column="46">ifChild</name><op:operator pos:line="369" pos:column="53">.</op:operator><name pos:line="369" pos:column="54">Elements</name></name><argument_list pos:line="369" pos:column="62">()</argument_list></call></expr></range></decl></init>) <block pos:line="369" pos:column="66">{
                        <if pos:line="370" pos:column="25">if<condition pos:line="370" pos:column="27">(<expr><name><name pos:line="370" pos:column="28">elseChild</name><op:operator pos:line="370" pos:column="37">.</op:operator><name pos:line="370" pos:column="38">Name</name></name> <op:operator pos:line="370" pos:column="43">==</op:operator> <name><name pos:line="370" pos:column="46">SRC</name><op:operator pos:line="370" pos:column="49">.</op:operator><name pos:line="370" pos:column="50">Block</name></name></expr>)</condition><then pos:line="370" pos:column="56"> <block pos:line="370" pos:column="57">{
                            <decl_stmt><decl><type><name pos:line="371" pos:column="29">var</name></type> <name pos:line="371" pos:column="33">blockStatements</name> <init pos:line="371" pos:column="49">= <expr><call><name><name pos:line="371" pos:column="51">elseChild</name><op:operator pos:line="371" pos:column="60">.</op:operator><name pos:line="371" pos:column="61">Elements</name></name><argument_list pos:line="371" pos:column="69">()</argument_list></call><op:operator pos:line="371" pos:column="71">.</op:operator><call><name pos:line="371" pos:column="72">Select</name><argument_list pos:line="371" pos:column="78">(<argument><expr><lambda><name pos:line="371" pos:column="79">e</name> <op:operator pos:line="371" pos:column="81">=&gt;</op:operator> <call><name pos:line="371" pos:column="84">ParseStatement</name><argument_list pos:line="371" pos:column="98">(<argument><expr><name pos:line="371" pos:column="99">e</name></expr></argument>, <argument><expr><name pos:line="371" pos:column="102">context</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><call><name><name pos:line="372" pos:column="29">ifStmt</name><op:operator pos:line="372" pos:column="35">.</op:operator><name pos:line="372" pos:column="36">AddElseStatements</name></name><argument_list pos:line="372" pos:column="53">(<argument><expr><name pos:line="372" pos:column="54">blockStatements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then> <else pos:line="373" pos:column="27">else <block pos:line="373" pos:column="32">{
                            <expr_stmt><expr><call><name><name pos:line="374" pos:column="29">ifStmt</name><op:operator pos:line="374" pos:column="35">.</op:operator><name pos:line="374" pos:column="36">AddElseStatement</name></name><argument_list pos:line="374" pos:column="52">(<argument><expr><call><name pos:line="374" pos:column="53">ParseStatement</name><argument_list pos:line="374" pos:column="67">(<argument><expr><name pos:line="374" pos:column="68">elseChild</name></expr></argument>, <argument><expr><name pos:line="374" pos:column="79">context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></else></if>
                    }</block></foreach>
                }</block></then> <else pos:line="377" pos:column="19">else <block pos:line="377" pos:column="24">{
                    <comment type="line" pos:line="378" pos:column="21">//Add as a child statement (i.e. a then statement)</comment>
                    <expr_stmt><expr><call><name><name pos:line="379" pos:column="21">ifStmt</name><op:operator pos:line="379" pos:column="27">.</op:operator><name pos:line="379" pos:column="28">AddChildStatement</name></name><argument_list pos:line="379" pos:column="45">(<argument><expr><call><name pos:line="379" pos:column="46">ParseStatement</name><argument_list pos:line="379" pos:column="60">(<argument><expr><name pos:line="379" pos:column="61">ifChild</name></expr></argument>, <argument><expr><name pos:line="379" pos:column="70">context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if></else></if></else></if>
            }</block></foreach>

            <return pos:line="383" pos:column="13">return <expr><name pos:line="383" pos:column="20">ifStmt</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="386" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="387" pos:column="9">/// Creates a &lt;see cref="WhileStatement"/&gt; object for &lt;paramref name="whileElement"/&gt;.</comment>
        <comment type="line" pos:line="388" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="389" pos:column="9">/// &lt;param name="whileElement"&gt;The SRC.While element to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="390" pos:column="9">/// &lt;param name="context"&gt;The context to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="391" pos:column="9">/// &lt;returns&gt;A &lt;see cref="WhileStatement"/&gt; corresponding to &lt;paramref name="whileElement"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="392" pos:column="9">protected</specifier> <specifier pos:line="392" pos:column="19">virtual</specifier> <name pos:line="392" pos:column="27">WhileStatement</name></type> <name pos:line="392" pos:column="42">ParseWhileElement</name><parameter_list pos:line="392" pos:column="59">(<param><decl><type><name pos:line="392" pos:column="60">XElement</name></type> <name pos:line="392" pos:column="69">whileElement</name></decl></param>, <param><decl><type><name pos:line="392" pos:column="83">ParserContext</name></type> <name pos:line="392" pos:column="97">context</name></decl></param>)</parameter_list> <block pos:line="392" pos:column="106">{
            <if pos:line="393" pos:column="13">if<condition pos:line="393" pos:column="15">(<expr><name pos:line="393" pos:column="16">whileElement</name> <op:operator pos:line="393" pos:column="29">==</op:operator> <name pos:line="393" pos:column="32">null</name></expr>)</condition><then pos:line="393" pos:column="37">
                <throw pos:line="394" pos:column="17">throw <expr><op:operator pos:line="394" pos:column="23">new</op:operator> <call><name pos:line="394" pos:column="27">ArgumentNullException</name><argument_list pos:line="394" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="394" pos:column="49">"whileElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="395" pos:column="13">if<condition pos:line="395" pos:column="15">(<expr><name><name pos:line="395" pos:column="16">whileElement</name><op:operator pos:line="395" pos:column="28">.</op:operator><name pos:line="395" pos:column="29">Name</name></name> <op:operator pos:line="395" pos:column="34">!=</op:operator> <name><name pos:line="395" pos:column="37">SRC</name><op:operator pos:line="395" pos:column="40">.</op:operator><name pos:line="395" pos:column="41">While</name></name></expr>)</condition><then pos:line="395" pos:column="47">
                <throw pos:line="396" pos:column="17">throw <expr><op:operator pos:line="396" pos:column="23">new</op:operator> <call><name pos:line="396" pos:column="27">ArgumentException</name><argument_list pos:line="396" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="396" pos:column="45">"Must be a SRC.While element"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="396" pos:column="76">"whileElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="397" pos:column="13">if<condition pos:line="397" pos:column="15">(<expr><name pos:line="397" pos:column="16">context</name> <op:operator pos:line="397" pos:column="24">==</op:operator> <name pos:line="397" pos:column="27">null</name></expr>)</condition><then pos:line="397" pos:column="32">
                <throw pos:line="398" pos:column="17">throw <expr><op:operator pos:line="398" pos:column="23">new</op:operator> <call><name pos:line="398" pos:column="27">ArgumentNullException</name><argument_list pos:line="398" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="398" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="400" pos:column="13">var</name></type> <name pos:line="400" pos:column="17">whileStmt</name> <init pos:line="400" pos:column="27">= <expr><op:operator pos:line="400" pos:column="29">new</op:operator> <call><name pos:line="400" pos:column="33">WhileStatement</name><argument_list pos:line="400" pos:column="47">()</argument_list></call> <block pos:line="400" pos:column="50">{<expr><name pos:line="400" pos:column="51">ProgrammingLanguage</name> <op:operator pos:line="400" pos:column="71">=</op:operator> <name pos:line="400" pos:column="73">ParserLanguage</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="401" pos:column="13">whileStmt</name><op:operator pos:line="401" pos:column="22">.</op:operator><name pos:line="401" pos:column="23">AddLocation</name></name><argument_list pos:line="401" pos:column="34">(<argument><expr><call><name><name pos:line="401" pos:column="35">context</name><op:operator pos:line="401" pos:column="42">.</op:operator><name pos:line="401" pos:column="43">CreateLocation</name></name><argument_list pos:line="401" pos:column="57">(<argument><expr><name pos:line="401" pos:column="58">whileElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <foreach pos:line="403" pos:column="13">foreach(<init><decl><type><name pos:line="403" pos:column="21">var</name></type> <name pos:line="403" pos:column="25">whileChild</name> <range pos:line="403" pos:column="36">in <expr><call><name><name pos:line="403" pos:column="39">whileElement</name><op:operator pos:line="403" pos:column="51">.</op:operator><name pos:line="403" pos:column="52">Elements</name></name><argument_list pos:line="403" pos:column="60">()</argument_list></call></expr></range></decl></init>) <block pos:line="403" pos:column="64">{
                <if pos:line="404" pos:column="17">if<condition pos:line="404" pos:column="19">(<expr><name><name pos:line="404" pos:column="20">whileChild</name><op:operator pos:line="404" pos:column="30">.</op:operator><name pos:line="404" pos:column="31">Name</name></name> <op:operator pos:line="404" pos:column="36">==</op:operator> <name><name pos:line="404" pos:column="39">SRC</name><op:operator pos:line="404" pos:column="42">.</op:operator><name pos:line="404" pos:column="43">Condition</name></name></expr>)</condition><then pos:line="404" pos:column="53"> <block pos:line="404" pos:column="54">{
                    <comment type="line" pos:line="405" pos:column="21">//fill in condition</comment>
                    <decl_stmt><decl><type><name pos:line="406" pos:column="21">var</name></type> <name pos:line="406" pos:column="25">expElement</name> <init pos:line="406" pos:column="36">= <expr><call><name pos:line="406" pos:column="38">GetFirstChildExpression</name><argument_list pos:line="406" pos:column="61">(<argument><expr><name pos:line="406" pos:column="62">whileChild</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="407" pos:column="21">if<condition pos:line="407" pos:column="23">(<expr><name pos:line="407" pos:column="24">expElement</name> <op:operator pos:line="407" pos:column="35">!=</op:operator> <name pos:line="407" pos:column="38">null</name></expr>)</condition><then pos:line="407" pos:column="43"> <block pos:line="407" pos:column="44">{
                        <expr_stmt><expr><name><name pos:line="408" pos:column="25">whileStmt</name><op:operator pos:line="408" pos:column="34">.</op:operator><name pos:line="408" pos:column="35">Condition</name></name> <op:operator pos:line="408" pos:column="45">=</op:operator> <call><name pos:line="408" pos:column="47">ParseExpression</name><argument_list pos:line="408" pos:column="62">(<argument><expr><name pos:line="408" pos:column="63">expElement</name></expr></argument>, <argument><expr><name pos:line="408" pos:column="75">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then> <else pos:line="410" pos:column="19">else <if pos:line="410" pos:column="24">if<condition pos:line="410" pos:column="26">(<expr><name><name pos:line="410" pos:column="27">whileChild</name><op:operator pos:line="410" pos:column="37">.</op:operator><name pos:line="410" pos:column="38">Name</name></name> <op:operator pos:line="410" pos:column="43">==</op:operator> <name><name pos:line="410" pos:column="46">SRC</name><op:operator pos:line="410" pos:column="49">.</op:operator><name pos:line="410" pos:column="50">Block</name></name></expr>)</condition><then pos:line="410" pos:column="56"> <block pos:line="410" pos:column="57">{
                    <comment type="line" pos:line="411" pos:column="21">//has a block, add children</comment>
                    <decl_stmt><decl><type><name pos:line="412" pos:column="21">var</name></type> <name pos:line="412" pos:column="25">blockStatements</name> <init pos:line="412" pos:column="41">= <expr><call><name><name pos:line="412" pos:column="43">whileChild</name><op:operator pos:line="412" pos:column="53">.</op:operator><name pos:line="412" pos:column="54">Elements</name></name><argument_list pos:line="412" pos:column="62">()</argument_list></call><op:operator pos:line="412" pos:column="64">.</op:operator><call><name pos:line="412" pos:column="65">Select</name><argument_list pos:line="412" pos:column="71">(<argument><expr><lambda><name pos:line="412" pos:column="72">e</name> <op:operator pos:line="412" pos:column="74">=&gt;</op:operator> <call><name pos:line="412" pos:column="77">ParseStatement</name><argument_list pos:line="412" pos:column="91">(<argument><expr><name pos:line="412" pos:column="92">e</name></expr></argument>, <argument><expr><name pos:line="412" pos:column="95">context</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="413" pos:column="21">whileStmt</name><op:operator pos:line="413" pos:column="30">.</op:operator><name pos:line="413" pos:column="31">AddChildStatements</name></name><argument_list pos:line="413" pos:column="49">(<argument><expr><name pos:line="413" pos:column="50">blockStatements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="414" pos:column="19">else <block pos:line="414" pos:column="24">{
                    <comment type="line" pos:line="415" pos:column="21">//child outside of block</comment>
                    <expr_stmt><expr><call><name><name pos:line="416" pos:column="21">whileStmt</name><op:operator pos:line="416" pos:column="30">.</op:operator><name pos:line="416" pos:column="31">AddChildStatement</name></name><argument_list pos:line="416" pos:column="48">(<argument><expr><call><name pos:line="416" pos:column="49">ParseStatement</name><argument_list pos:line="416" pos:column="63">(<argument><expr><name pos:line="416" pos:column="64">whileChild</name></expr></argument>, <argument><expr><name pos:line="416" pos:column="76">context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if></else></if>
            }</block></foreach>

            <return pos:line="420" pos:column="13">return <expr><name pos:line="420" pos:column="20">whileStmt</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="423" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="424" pos:column="9">/// Creates a ForStatement from the given element.</comment>
        <comment type="line" pos:line="425" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="426" pos:column="9">/// &lt;param name="forElement"&gt;The SRC.For element to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="427" pos:column="9">/// &lt;param name="context"&gt;The parser context to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="428" pos:column="9">/// &lt;returns&gt;A ForStatement corresponding to forElement. </comment>
        <comment type="line" pos:line="429" pos:column="9">/// The return type is ConditionBlockStatement so that the Java parser can also return a ForeachStatement when necessary.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="430" pos:column="9">protected</specifier> <specifier pos:line="430" pos:column="19">virtual</specifier> <name pos:line="430" pos:column="27">ConditionBlockStatement</name></type> <name pos:line="430" pos:column="51">ParseForElement</name><parameter_list pos:line="430" pos:column="66">(<param><decl><type><name pos:line="430" pos:column="67">XElement</name></type> <name pos:line="430" pos:column="76">forElement</name></decl></param>, <param><decl><type><name pos:line="430" pos:column="88">ParserContext</name></type> <name pos:line="430" pos:column="102">context</name></decl></param>)</parameter_list> <block pos:line="430" pos:column="111">{
            <if pos:line="431" pos:column="13">if<condition pos:line="431" pos:column="15">(<expr><name pos:line="431" pos:column="16">forElement</name> <op:operator pos:line="431" pos:column="27">==</op:operator> <name pos:line="431" pos:column="30">null</name></expr>)</condition><then pos:line="431" pos:column="35">
                <throw pos:line="432" pos:column="17">throw <expr><op:operator pos:line="432" pos:column="23">new</op:operator> <call><name pos:line="432" pos:column="27">ArgumentNullException</name><argument_list pos:line="432" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="432" pos:column="49">"forElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="433" pos:column="13">if<condition pos:line="433" pos:column="15">(<expr><name><name pos:line="433" pos:column="16">forElement</name><op:operator pos:line="433" pos:column="26">.</op:operator><name pos:line="433" pos:column="27">Name</name></name> <op:operator pos:line="433" pos:column="32">!=</op:operator> <name><name pos:line="433" pos:column="35">SRC</name><op:operator pos:line="433" pos:column="38">.</op:operator><name pos:line="433" pos:column="39">For</name></name></expr>)</condition><then pos:line="433" pos:column="43">
                <throw pos:line="434" pos:column="17">throw <expr><op:operator pos:line="434" pos:column="23">new</op:operator> <call><name pos:line="434" pos:column="27">ArgumentException</name><argument_list pos:line="434" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="434" pos:column="45">"Must be a SRC.For element"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="434" pos:column="74">"forElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="435" pos:column="13">if<condition pos:line="435" pos:column="15">(<expr><name pos:line="435" pos:column="16">context</name> <op:operator pos:line="435" pos:column="24">==</op:operator> <name pos:line="435" pos:column="27">null</name></expr>)</condition><then pos:line="435" pos:column="32">
                <throw pos:line="436" pos:column="17">throw <expr><op:operator pos:line="436" pos:column="23">new</op:operator> <call><name pos:line="436" pos:column="27">ArgumentNullException</name><argument_list pos:line="436" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="436" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="438" pos:column="13">var</name></type> <name pos:line="438" pos:column="17">forStmt</name> <init pos:line="438" pos:column="25">= <expr><op:operator pos:line="438" pos:column="27">new</op:operator> <call><name pos:line="438" pos:column="31">ForStatement</name><argument_list pos:line="438" pos:column="43">()</argument_list></call> <block pos:line="438" pos:column="46">{<expr><name pos:line="438" pos:column="47">ProgrammingLanguage</name> <op:operator pos:line="438" pos:column="67">=</op:operator> <name pos:line="438" pos:column="69">ParserLanguage</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="439" pos:column="13">forStmt</name><op:operator pos:line="439" pos:column="20">.</op:operator><name pos:line="439" pos:column="21">AddLocation</name></name><argument_list pos:line="439" pos:column="32">(<argument><expr><call><name><name pos:line="439" pos:column="33">context</name><op:operator pos:line="439" pos:column="40">.</op:operator><name pos:line="439" pos:column="41">CreateLocation</name></name><argument_list pos:line="439" pos:column="55">(<argument><expr><name pos:line="439" pos:column="56">forElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <foreach pos:line="441" pos:column="13">foreach(<init><decl><type><name pos:line="441" pos:column="21">var</name></type> <name pos:line="441" pos:column="25">forChild</name> <range pos:line="441" pos:column="34">in <expr><call><name><name pos:line="441" pos:column="37">forElement</name><op:operator pos:line="441" pos:column="47">.</op:operator><name pos:line="441" pos:column="48">Elements</name></name><argument_list pos:line="441" pos:column="56">()</argument_list></call></expr></range></decl></init>) <block pos:line="441" pos:column="60">{
                <if pos:line="442" pos:column="17">if<condition pos:line="442" pos:column="19">(<expr><name><name pos:line="442" pos:column="20">forChild</name><op:operator pos:line="442" pos:column="28">.</op:operator><name pos:line="442" pos:column="29">Name</name></name> <op:operator pos:line="442" pos:column="34">==</op:operator> <name><name pos:line="442" pos:column="37">SRC</name><op:operator pos:line="442" pos:column="40">.</op:operator><name pos:line="442" pos:column="41">Init</name></name></expr>)</condition><then pos:line="442" pos:column="46"> <block pos:line="442" pos:column="47">{
                    <comment type="line" pos:line="443" pos:column="21">//fill in initializer</comment>
                    <decl_stmt><decl><type><name pos:line="444" pos:column="21">var</name></type> <name pos:line="444" pos:column="25">expElement</name> <init pos:line="444" pos:column="36">= <expr><call><name pos:line="444" pos:column="38">GetFirstChildExpression</name><argument_list pos:line="444" pos:column="61">(<argument><expr><name pos:line="444" pos:column="62">forChild</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="445" pos:column="21">if<condition pos:line="445" pos:column="23">(<expr><name pos:line="445" pos:column="24">expElement</name> <op:operator pos:line="445" pos:column="35">!=</op:operator> <name pos:line="445" pos:column="38">null</name></expr>)</condition><then pos:line="445" pos:column="43"> <block pos:line="445" pos:column="44">{
                        <expr_stmt><expr><name><name pos:line="446" pos:column="25">forStmt</name><op:operator pos:line="446" pos:column="32">.</op:operator><name pos:line="446" pos:column="33">Initializer</name></name> <op:operator pos:line="446" pos:column="45">=</op:operator> <call><name pos:line="446" pos:column="47">ParseExpression</name><argument_list pos:line="446" pos:column="62">(<argument><expr><name pos:line="446" pos:column="63">expElement</name></expr></argument>, <argument><expr><name pos:line="446" pos:column="75">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then> <else pos:line="448" pos:column="19">else <if pos:line="448" pos:column="24">if<condition pos:line="448" pos:column="26">(<expr><name><name pos:line="448" pos:column="27">forChild</name><op:operator pos:line="448" pos:column="35">.</op:operator><name pos:line="448" pos:column="36">Name</name></name> <op:operator pos:line="448" pos:column="41">==</op:operator> <name><name pos:line="448" pos:column="44">SRC</name><op:operator pos:line="448" pos:column="47">.</op:operator><name pos:line="448" pos:column="48">Condition</name></name></expr>)</condition><then pos:line="448" pos:column="58"> <block pos:line="448" pos:column="59">{
                    <comment type="line" pos:line="449" pos:column="21">//fill in condition</comment>
                    <decl_stmt><decl><type><name pos:line="450" pos:column="21">var</name></type> <name pos:line="450" pos:column="25">expElement</name> <init pos:line="450" pos:column="36">= <expr><call><name pos:line="450" pos:column="38">GetFirstChildExpression</name><argument_list pos:line="450" pos:column="61">(<argument><expr><name pos:line="450" pos:column="62">forChild</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="451" pos:column="21">if<condition pos:line="451" pos:column="23">(<expr><name pos:line="451" pos:column="24">expElement</name> <op:operator pos:line="451" pos:column="35">!=</op:operator> <name pos:line="451" pos:column="38">null</name></expr>)</condition><then pos:line="451" pos:column="43"> <block pos:line="451" pos:column="44">{
                        <expr_stmt><expr><name><name pos:line="452" pos:column="25">forStmt</name><op:operator pos:line="452" pos:column="32">.</op:operator><name pos:line="452" pos:column="33">Condition</name></name> <op:operator pos:line="452" pos:column="43">=</op:operator> <call><name pos:line="452" pos:column="45">ParseExpression</name><argument_list pos:line="452" pos:column="60">(<argument><expr><name pos:line="452" pos:column="61">expElement</name></expr></argument>, <argument><expr><name pos:line="452" pos:column="73">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then> <else pos:line="454" pos:column="19">else <if pos:line="454" pos:column="24">if<condition pos:line="454" pos:column="26">(<expr><name><name pos:line="454" pos:column="27">forChild</name><op:operator pos:line="454" pos:column="35">.</op:operator><name pos:line="454" pos:column="36">Name</name></name> <op:operator pos:line="454" pos:column="41">==</op:operator> <name><name pos:line="454" pos:column="44">SRC</name><op:operator pos:line="454" pos:column="47">.</op:operator><name pos:line="454" pos:column="48">Increment</name></name></expr>)</condition><then pos:line="454" pos:column="58"> <block pos:line="454" pos:column="59">{
                    <comment type="line" pos:line="455" pos:column="21">//fill in incrementer</comment>
                    <decl_stmt><decl><type><name pos:line="456" pos:column="21">var</name></type> <name pos:line="456" pos:column="25">expElement</name> <init pos:line="456" pos:column="36">= <expr><call><name pos:line="456" pos:column="38">GetFirstChildExpression</name><argument_list pos:line="456" pos:column="61">(<argument><expr><name pos:line="456" pos:column="62">forChild</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="457" pos:column="21">if<condition pos:line="457" pos:column="23">(<expr><name pos:line="457" pos:column="24">expElement</name> <op:operator pos:line="457" pos:column="35">!=</op:operator> <name pos:line="457" pos:column="38">null</name></expr>)</condition><then pos:line="457" pos:column="43"> <block pos:line="457" pos:column="44">{
                        <expr_stmt><expr><name><name pos:line="458" pos:column="25">forStmt</name><op:operator pos:line="458" pos:column="32">.</op:operator><name pos:line="458" pos:column="33">Incrementer</name></name> <op:operator pos:line="458" pos:column="45">=</op:operator> <call><name pos:line="458" pos:column="47">ParseExpression</name><argument_list pos:line="458" pos:column="62">(<argument><expr><name pos:line="458" pos:column="63">expElement</name></expr></argument>, <argument><expr><name pos:line="458" pos:column="75">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then> <else pos:line="460" pos:column="19">else <if pos:line="460" pos:column="24">if<condition pos:line="460" pos:column="26">(<expr><name><name pos:line="460" pos:column="27">forChild</name><op:operator pos:line="460" pos:column="35">.</op:operator><name pos:line="460" pos:column="36">Name</name></name> <op:operator pos:line="460" pos:column="41">==</op:operator> <name><name pos:line="460" pos:column="44">SRC</name><op:operator pos:line="460" pos:column="47">.</op:operator><name pos:line="460" pos:column="48">Block</name></name></expr>)</condition><then pos:line="460" pos:column="54"> <block pos:line="460" pos:column="55">{
                    <comment type="line" pos:line="461" pos:column="21">//add children from block</comment>
                    <decl_stmt><decl><type><name pos:line="462" pos:column="21">var</name></type> <name pos:line="462" pos:column="25">blockStatements</name> <init pos:line="462" pos:column="41">= <expr><call><name><name pos:line="462" pos:column="43">forChild</name><op:operator pos:line="462" pos:column="51">.</op:operator><name pos:line="462" pos:column="52">Elements</name></name><argument_list pos:line="462" pos:column="60">()</argument_list></call><op:operator pos:line="462" pos:column="62">.</op:operator><call><name pos:line="462" pos:column="63">Select</name><argument_list pos:line="462" pos:column="69">(<argument><expr><lambda><name pos:line="462" pos:column="70">e</name> <op:operator pos:line="462" pos:column="72">=&gt;</op:operator> <call><name pos:line="462" pos:column="75">ParseStatement</name><argument_list pos:line="462" pos:column="89">(<argument><expr><name pos:line="462" pos:column="90">e</name></expr></argument>, <argument><expr><name pos:line="462" pos:column="93">context</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="463" pos:column="21">forStmt</name><op:operator pos:line="463" pos:column="28">.</op:operator><name pos:line="463" pos:column="29">AddChildStatements</name></name><argument_list pos:line="463" pos:column="47">(<argument><expr><name pos:line="463" pos:column="48">blockStatements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="464" pos:column="19">else <block pos:line="464" pos:column="24">{
                    <comment type="line" pos:line="465" pos:column="21">//add child</comment>
                    <expr_stmt><expr><call><name><name pos:line="466" pos:column="21">forStmt</name><op:operator pos:line="466" pos:column="28">.</op:operator><name pos:line="466" pos:column="29">AddChildStatement</name></name><argument_list pos:line="466" pos:column="46">(<argument><expr><call><name pos:line="466" pos:column="47">ParseStatement</name><argument_list pos:line="466" pos:column="61">(<argument><expr><name pos:line="466" pos:column="62">forChild</name></expr></argument>, <argument><expr><name pos:line="466" pos:column="72">context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if></else></if></else></if></else></if>
            }</block></foreach>

            <return pos:line="470" pos:column="13">return <expr><name pos:line="470" pos:column="20">forStmt</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="473" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="474" pos:column="9">/// Creates a ForeachStatement from the given element.</comment>
        <comment type="line" pos:line="475" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="476" pos:column="9">/// &lt;param name="foreachElement"&gt;The SRC.Foreach element to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="477" pos:column="9">/// &lt;param name="context"&gt;The parser context to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="478" pos:column="9">/// &lt;returns&gt;A ForeachStatement corresponding to foreachElement. &lt;/returns&gt;</comment>
        <function><type><specifier pos:line="479" pos:column="9">protected</specifier> <specifier pos:line="479" pos:column="19">virtual</specifier> <name pos:line="479" pos:column="27">ForeachStatement</name></type> <name pos:line="479" pos:column="44">ParseForeachElement</name><parameter_list pos:line="479" pos:column="63">(<param><decl><type><name pos:line="479" pos:column="64">XElement</name></type> <name pos:line="479" pos:column="73">foreachElement</name></decl></param>, <param><decl><type><name pos:line="479" pos:column="89">ParserContext</name></type> <name pos:line="479" pos:column="103">context</name></decl></param>)</parameter_list> <block pos:line="479" pos:column="112">{
            <if pos:line="480" pos:column="13">if<condition pos:line="480" pos:column="15">(<expr><name pos:line="480" pos:column="16">foreachElement</name> <op:operator pos:line="480" pos:column="31">==</op:operator> <name pos:line="480" pos:column="34">null</name></expr>)</condition><then pos:line="480" pos:column="39">
                <throw pos:line="481" pos:column="17">throw <expr><op:operator pos:line="481" pos:column="23">new</op:operator> <call><name pos:line="481" pos:column="27">ArgumentNullException</name><argument_list pos:line="481" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="481" pos:column="49">"foreachElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="482" pos:column="13">if<condition pos:line="482" pos:column="15">(<expr><name><name pos:line="482" pos:column="16">foreachElement</name><op:operator pos:line="482" pos:column="30">.</op:operator><name pos:line="482" pos:column="31">Name</name></name> <op:operator pos:line="482" pos:column="36">!=</op:operator> <name><name pos:line="482" pos:column="39">SRC</name><op:operator pos:line="482" pos:column="42">.</op:operator><name pos:line="482" pos:column="43">Foreach</name></name></expr>)</condition><then pos:line="482" pos:column="51">
                <throw pos:line="483" pos:column="17">throw <expr><op:operator pos:line="483" pos:column="23">new</op:operator> <call><name pos:line="483" pos:column="27">ArgumentException</name><argument_list pos:line="483" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="483" pos:column="45">"Must be a SRC.Foreach element"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="483" pos:column="78">"foreachElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="484" pos:column="13">if<condition pos:line="484" pos:column="15">(<expr><name pos:line="484" pos:column="16">context</name> <op:operator pos:line="484" pos:column="24">==</op:operator> <name pos:line="484" pos:column="27">null</name></expr>)</condition><then pos:line="484" pos:column="32">
                <throw pos:line="485" pos:column="17">throw <expr><op:operator pos:line="485" pos:column="23">new</op:operator> <call><name pos:line="485" pos:column="27">ArgumentNullException</name><argument_list pos:line="485" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="485" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="487" pos:column="13">var</name></type> <name pos:line="487" pos:column="17">foreachStmt</name> <init pos:line="487" pos:column="29">= <expr><op:operator pos:line="487" pos:column="31">new</op:operator> <call><name pos:line="487" pos:column="35">ForeachStatement</name><argument_list pos:line="487" pos:column="51">()</argument_list></call> <block pos:line="487" pos:column="54">{<expr><name pos:line="487" pos:column="55">ProgrammingLanguage</name> <op:operator pos:line="487" pos:column="75">=</op:operator> <name pos:line="487" pos:column="77">ParserLanguage</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="488" pos:column="13">foreachStmt</name><op:operator pos:line="488" pos:column="24">.</op:operator><name pos:line="488" pos:column="25">AddLocation</name></name><argument_list pos:line="488" pos:column="36">(<argument><expr><call><name><name pos:line="488" pos:column="37">context</name><op:operator pos:line="488" pos:column="44">.</op:operator><name pos:line="488" pos:column="45">CreateLocation</name></name><argument_list pos:line="488" pos:column="59">(<argument><expr><name pos:line="488" pos:column="60">foreachElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <foreach pos:line="490" pos:column="13">foreach(<init><decl><type><name pos:line="490" pos:column="21">var</name></type> <name pos:line="490" pos:column="25">child</name> <range pos:line="490" pos:column="31">in <expr><call><name><name pos:line="490" pos:column="34">foreachElement</name><op:operator pos:line="490" pos:column="48">.</op:operator><name pos:line="490" pos:column="49">Elements</name></name><argument_list pos:line="490" pos:column="57">()</argument_list></call></expr></range></decl></init>) <block pos:line="490" pos:column="61">{
                <if pos:line="491" pos:column="17">if<condition pos:line="491" pos:column="19">(<expr><name><name pos:line="491" pos:column="20">child</name><op:operator pos:line="491" pos:column="25">.</op:operator><name pos:line="491" pos:column="26">Name</name></name> <op:operator pos:line="491" pos:column="31">==</op:operator> <name><name pos:line="491" pos:column="34">SRC</name><op:operator pos:line="491" pos:column="37">.</op:operator><name pos:line="491" pos:column="38">Init</name></name></expr>)</condition><then pos:line="491" pos:column="43"> <block pos:line="491" pos:column="44">{
                    <comment type="line" pos:line="492" pos:column="21">//fill in condition/initializer</comment>
                    <decl_stmt><decl><type><name pos:line="493" pos:column="21">var</name></type> <name pos:line="493" pos:column="25">expElement</name> <init pos:line="493" pos:column="36">= <expr><call><name pos:line="493" pos:column="38">GetFirstChildExpression</name><argument_list pos:line="493" pos:column="61">(<argument><expr><name pos:line="493" pos:column="62">child</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="494" pos:column="21">if<condition pos:line="494" pos:column="23">(<expr><name pos:line="494" pos:column="24">expElement</name> <op:operator pos:line="494" pos:column="35">!=</op:operator> <name pos:line="494" pos:column="38">null</name></expr>)</condition><then pos:line="494" pos:column="43"> <block pos:line="494" pos:column="44">{
                        <expr_stmt><expr><name><name pos:line="495" pos:column="25">foreachStmt</name><op:operator pos:line="495" pos:column="36">.</op:operator><name pos:line="495" pos:column="37">Condition</name></name> <op:operator pos:line="495" pos:column="47">=</op:operator> <call><name pos:line="495" pos:column="49">ParseExpression</name><argument_list pos:line="495" pos:column="64">(<argument><expr><name pos:line="495" pos:column="65">expElement</name></expr></argument>, <argument><expr><name pos:line="495" pos:column="77">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then> <else pos:line="497" pos:column="19">else <if pos:line="497" pos:column="24">if<condition pos:line="497" pos:column="26">(<expr><name><name pos:line="497" pos:column="27">child</name><op:operator pos:line="497" pos:column="32">.</op:operator><name pos:line="497" pos:column="33">Name</name></name> <op:operator pos:line="497" pos:column="38">==</op:operator> <name><name pos:line="497" pos:column="41">SRC</name><op:operator pos:line="497" pos:column="44">.</op:operator><name pos:line="497" pos:column="45">Block</name></name></expr>)</condition><then pos:line="497" pos:column="51"> <block pos:line="497" pos:column="52">{
                    <comment type="line" pos:line="498" pos:column="21">//add children from block</comment>
                    <decl_stmt><decl><type><name pos:line="499" pos:column="21">var</name></type> <name pos:line="499" pos:column="25">blockStatements</name> <init pos:line="499" pos:column="41">= <expr><call><name><name pos:line="499" pos:column="43">child</name><op:operator pos:line="499" pos:column="48">.</op:operator><name pos:line="499" pos:column="49">Elements</name></name><argument_list pos:line="499" pos:column="57">()</argument_list></call><op:operator pos:line="499" pos:column="59">.</op:operator><call><name pos:line="499" pos:column="60">Select</name><argument_list pos:line="499" pos:column="66">(<argument><expr><lambda><name pos:line="499" pos:column="67">e</name> <op:operator pos:line="499" pos:column="69">=&gt;</op:operator> <call><name pos:line="499" pos:column="72">ParseStatement</name><argument_list pos:line="499" pos:column="86">(<argument><expr><name pos:line="499" pos:column="87">e</name></expr></argument>, <argument><expr><name pos:line="499" pos:column="90">context</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="500" pos:column="21">foreachStmt</name><op:operator pos:line="500" pos:column="32">.</op:operator><name pos:line="500" pos:column="33">AddChildStatements</name></name><argument_list pos:line="500" pos:column="51">(<argument><expr><name pos:line="500" pos:column="52">blockStatements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="501" pos:column="19">else <block pos:line="501" pos:column="24">{
                    <comment type="line" pos:line="502" pos:column="21">//add child</comment>
                    <expr_stmt><expr><call><name><name pos:line="503" pos:column="21">foreachStmt</name><op:operator pos:line="503" pos:column="32">.</op:operator><name pos:line="503" pos:column="33">AddChildStatement</name></name><argument_list pos:line="503" pos:column="50">(<argument><expr><call><name pos:line="503" pos:column="51">ParseStatement</name><argument_list pos:line="503" pos:column="65">(<argument><expr><name pos:line="503" pos:column="66">child</name></expr></argument>, <argument><expr><name pos:line="503" pos:column="73">context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if></else></if>
            }</block></foreach>

            <return pos:line="507" pos:column="13">return <expr><name pos:line="507" pos:column="20">foreachStmt</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="510" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="511" pos:column="9">/// Creates a &lt;see cref="DoWhileStatement"/&gt; object for &lt;paramref name="doElement"/&gt;.</comment>
        <comment type="line" pos:line="512" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="513" pos:column="9">/// &lt;param name="doElement"&gt;The SRC.Do element to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="514" pos:column="9">/// &lt;param name="context"&gt;The context to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="515" pos:column="9">/// &lt;returns&gt;A &lt;see cref="DoWhileStatement"/&gt; corresponding to &lt;paramref name="doElement"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="516" pos:column="9">protected</specifier> <specifier pos:line="516" pos:column="19">virtual</specifier> <name pos:line="516" pos:column="27">DoWhileStatement</name></type> <name pos:line="516" pos:column="44">ParseDoElement</name><parameter_list pos:line="516" pos:column="58">(<param><decl><type><name pos:line="516" pos:column="59">XElement</name></type> <name pos:line="516" pos:column="68">doElement</name></decl></param>, <param><decl><type><name pos:line="516" pos:column="79">ParserContext</name></type> <name pos:line="516" pos:column="93">context</name></decl></param>)</parameter_list> <block pos:line="516" pos:column="102">{
            <if pos:line="517" pos:column="13">if<condition pos:line="517" pos:column="15">(<expr><name pos:line="517" pos:column="16">doElement</name> <op:operator pos:line="517" pos:column="26">==</op:operator> <name pos:line="517" pos:column="29">null</name></expr>)</condition><then pos:line="517" pos:column="34">
                <throw pos:line="518" pos:column="17">throw <expr><op:operator pos:line="518" pos:column="23">new</op:operator> <call><name pos:line="518" pos:column="27">ArgumentNullException</name><argument_list pos:line="518" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="518" pos:column="49">"doElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="519" pos:column="13">if<condition pos:line="519" pos:column="15">(<expr><name><name pos:line="519" pos:column="16">doElement</name><op:operator pos:line="519" pos:column="25">.</op:operator><name pos:line="519" pos:column="26">Name</name></name> <op:operator pos:line="519" pos:column="31">!=</op:operator> <name><name pos:line="519" pos:column="34">SRC</name><op:operator pos:line="519" pos:column="37">.</op:operator><name pos:line="519" pos:column="38">Do</name></name></expr>)</condition><then pos:line="519" pos:column="41">
                <throw pos:line="520" pos:column="17">throw <expr><op:operator pos:line="520" pos:column="23">new</op:operator> <call><name pos:line="520" pos:column="27">ArgumentException</name><argument_list pos:line="520" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="520" pos:column="45">"Must be a SRC.Do element"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="520" pos:column="73">"doElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="521" pos:column="13">if<condition pos:line="521" pos:column="15">(<expr><name pos:line="521" pos:column="16">context</name> <op:operator pos:line="521" pos:column="24">==</op:operator> <name pos:line="521" pos:column="27">null</name></expr>)</condition><then pos:line="521" pos:column="32">
                <throw pos:line="522" pos:column="17">throw <expr><op:operator pos:line="522" pos:column="23">new</op:operator> <call><name pos:line="522" pos:column="27">ArgumentNullException</name><argument_list pos:line="522" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="522" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="524" pos:column="13">var</name></type> <name pos:line="524" pos:column="17">doStmt</name> <init pos:line="524" pos:column="24">= <expr><op:operator pos:line="524" pos:column="26">new</op:operator> <call><name pos:line="524" pos:column="30">DoWhileStatement</name><argument_list pos:line="524" pos:column="46">()</argument_list></call> <block pos:line="524" pos:column="49">{<expr><name pos:line="524" pos:column="50">ProgrammingLanguage</name> <op:operator pos:line="524" pos:column="70">=</op:operator> <name pos:line="524" pos:column="72">ParserLanguage</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="525" pos:column="13">doStmt</name><op:operator pos:line="525" pos:column="19">.</op:operator><name pos:line="525" pos:column="20">AddLocation</name></name><argument_list pos:line="525" pos:column="31">(<argument><expr><call><name><name pos:line="525" pos:column="32">context</name><op:operator pos:line="525" pos:column="39">.</op:operator><name pos:line="525" pos:column="40">CreateLocation</name></name><argument_list pos:line="525" pos:column="54">(<argument><expr><name pos:line="525" pos:column="55">doElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <foreach pos:line="527" pos:column="13">foreach(<init><decl><type><name pos:line="527" pos:column="21">var</name></type> <name pos:line="527" pos:column="25">doChild</name> <range pos:line="527" pos:column="33">in <expr><call><name><name pos:line="527" pos:column="36">doElement</name><op:operator pos:line="527" pos:column="45">.</op:operator><name pos:line="527" pos:column="46">Elements</name></name><argument_list pos:line="527" pos:column="54">()</argument_list></call></expr></range></decl></init>) <block pos:line="527" pos:column="58">{
                <if pos:line="528" pos:column="17">if<condition pos:line="528" pos:column="19">(<expr><name><name pos:line="528" pos:column="20">doChild</name><op:operator pos:line="528" pos:column="27">.</op:operator><name pos:line="528" pos:column="28">Name</name></name> <op:operator pos:line="528" pos:column="33">==</op:operator> <name><name pos:line="528" pos:column="36">SRC</name><op:operator pos:line="528" pos:column="39">.</op:operator><name pos:line="528" pos:column="40">Condition</name></name></expr>)</condition><then pos:line="528" pos:column="50"> <block pos:line="528" pos:column="51">{
                    <comment type="line" pos:line="529" pos:column="21">//fill in condition</comment>
                    <decl_stmt><decl><type><name pos:line="530" pos:column="21">var</name></type> <name pos:line="530" pos:column="25">expElement</name> <init pos:line="530" pos:column="36">= <expr><call><name pos:line="530" pos:column="38">GetFirstChildExpression</name><argument_list pos:line="530" pos:column="61">(<argument><expr><name pos:line="530" pos:column="62">doChild</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="531" pos:column="21">if<condition pos:line="531" pos:column="23">(<expr><name pos:line="531" pos:column="24">expElement</name> <op:operator pos:line="531" pos:column="35">!=</op:operator> <name pos:line="531" pos:column="38">null</name></expr>)</condition><then pos:line="531" pos:column="43"> <block pos:line="531" pos:column="44">{
                        <expr_stmt><expr><name><name pos:line="532" pos:column="25">doStmt</name><op:operator pos:line="532" pos:column="31">.</op:operator><name pos:line="532" pos:column="32">Condition</name></name> <op:operator pos:line="532" pos:column="42">=</op:operator> <call><name pos:line="532" pos:column="44">ParseExpression</name><argument_list pos:line="532" pos:column="59">(<argument><expr><name pos:line="532" pos:column="60">expElement</name></expr></argument>, <argument><expr><name pos:line="532" pos:column="72">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then> <else pos:line="534" pos:column="19">else <if pos:line="534" pos:column="24">if<condition pos:line="534" pos:column="26">(<expr><name><name pos:line="534" pos:column="27">doChild</name><op:operator pos:line="534" pos:column="34">.</op:operator><name pos:line="534" pos:column="35">Name</name></name> <op:operator pos:line="534" pos:column="40">==</op:operator> <name><name pos:line="534" pos:column="43">SRC</name><op:operator pos:line="534" pos:column="46">.</op:operator><name pos:line="534" pos:column="47">Block</name></name></expr>)</condition><then pos:line="534" pos:column="53"> <block pos:line="534" pos:column="54">{
                    <comment type="line" pos:line="535" pos:column="21">//has a block, add children</comment>
                    <decl_stmt><decl><type><name pos:line="536" pos:column="21">var</name></type> <name pos:line="536" pos:column="25">blockStatements</name> <init pos:line="536" pos:column="41">= <expr><call><name><name pos:line="536" pos:column="43">doChild</name><op:operator pos:line="536" pos:column="50">.</op:operator><name pos:line="536" pos:column="51">Elements</name></name><argument_list pos:line="536" pos:column="59">()</argument_list></call><op:operator pos:line="536" pos:column="61">.</op:operator><call><name pos:line="536" pos:column="62">Select</name><argument_list pos:line="536" pos:column="68">(<argument><expr><lambda><name pos:line="536" pos:column="69">e</name> <op:operator pos:line="536" pos:column="71">=&gt;</op:operator> <call><name pos:line="536" pos:column="74">ParseStatement</name><argument_list pos:line="536" pos:column="88">(<argument><expr><name pos:line="536" pos:column="89">e</name></expr></argument>, <argument><expr><name pos:line="536" pos:column="92">context</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="537" pos:column="21">doStmt</name><op:operator pos:line="537" pos:column="27">.</op:operator><name pos:line="537" pos:column="28">AddChildStatements</name></name><argument_list pos:line="537" pos:column="46">(<argument><expr><name pos:line="537" pos:column="47">blockStatements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="538" pos:column="19">else <block pos:line="538" pos:column="24">{
                    <comment type="line" pos:line="539" pos:column="21">//child outside of block</comment>
                    <expr_stmt><expr><call><name><name pos:line="540" pos:column="21">doStmt</name><op:operator pos:line="540" pos:column="27">.</op:operator><name pos:line="540" pos:column="28">AddChildStatement</name></name><argument_list pos:line="540" pos:column="45">(<argument><expr><call><name pos:line="540" pos:column="46">ParseStatement</name><argument_list pos:line="540" pos:column="60">(<argument><expr><name pos:line="540" pos:column="61">doChild</name></expr></argument>, <argument><expr><name pos:line="540" pos:column="70">context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if></else></if>
            }</block></foreach>

            <return pos:line="544" pos:column="13">return <expr><name pos:line="544" pos:column="20">doStmt</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="547" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="548" pos:column="9">/// Creates a &lt;see cref="SwitchStatement"/&gt; object for &lt;paramref name="switchElement"/&gt;.</comment>
        <comment type="line" pos:line="549" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="550" pos:column="9">/// &lt;param name="switchElement"&gt;The SRC.Switch element to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="551" pos:column="9">/// &lt;param name="context"&gt;The context to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="552" pos:column="9">/// &lt;returns&gt;A &lt;see cref="SwitchStatement"/&gt; corresponding to &lt;paramref name="switchElement"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="553" pos:column="9">protected</specifier> <specifier pos:line="553" pos:column="19">virtual</specifier> <name pos:line="553" pos:column="27">SwitchStatement</name></type> <name pos:line="553" pos:column="43">ParseSwitchElement</name><parameter_list pos:line="553" pos:column="61">(<param><decl><type><name pos:line="553" pos:column="62">XElement</name></type> <name pos:line="553" pos:column="71">switchElement</name></decl></param>, <param><decl><type><name pos:line="553" pos:column="86">ParserContext</name></type> <name pos:line="553" pos:column="100">context</name></decl></param>)</parameter_list> <block pos:line="553" pos:column="109">{
            <if pos:line="554" pos:column="13">if<condition pos:line="554" pos:column="15">(<expr><name pos:line="554" pos:column="16">switchElement</name> <op:operator pos:line="554" pos:column="30">==</op:operator> <name pos:line="554" pos:column="33">null</name></expr>)</condition><then pos:line="554" pos:column="38">
                <throw pos:line="555" pos:column="17">throw <expr><op:operator pos:line="555" pos:column="23">new</op:operator> <call><name pos:line="555" pos:column="27">ArgumentNullException</name><argument_list pos:line="555" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="555" pos:column="49">"switchElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="556" pos:column="13">if<condition pos:line="556" pos:column="15">(<expr><name><name pos:line="556" pos:column="16">switchElement</name><op:operator pos:line="556" pos:column="29">.</op:operator><name pos:line="556" pos:column="30">Name</name></name> <op:operator pos:line="556" pos:column="35">!=</op:operator> <name><name pos:line="556" pos:column="38">SRC</name><op:operator pos:line="556" pos:column="41">.</op:operator><name pos:line="556" pos:column="42">Switch</name></name></expr>)</condition><then pos:line="556" pos:column="49">
                <throw pos:line="557" pos:column="17">throw <expr><op:operator pos:line="557" pos:column="23">new</op:operator> <call><name pos:line="557" pos:column="27">ArgumentException</name><argument_list pos:line="557" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="557" pos:column="45">"Must be a SRC.Switch element"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="557" pos:column="77">"switchElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="558" pos:column="13">if<condition pos:line="558" pos:column="15">(<expr><name pos:line="558" pos:column="16">context</name> <op:operator pos:line="558" pos:column="24">==</op:operator> <name pos:line="558" pos:column="27">null</name></expr>)</condition><then pos:line="558" pos:column="32">
                <throw pos:line="559" pos:column="17">throw <expr><op:operator pos:line="559" pos:column="23">new</op:operator> <call><name pos:line="559" pos:column="27">ArgumentNullException</name><argument_list pos:line="559" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="559" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="561" pos:column="13">var</name></type> <name pos:line="561" pos:column="17">switchStmt</name> <init pos:line="561" pos:column="28">= <expr><op:operator pos:line="561" pos:column="30">new</op:operator> <call><name pos:line="561" pos:column="34">SwitchStatement</name><argument_list pos:line="561" pos:column="49">()</argument_list></call> <block pos:line="561" pos:column="52">{<expr><name pos:line="561" pos:column="53">ProgrammingLanguage</name> <op:operator pos:line="561" pos:column="73">=</op:operator> <name pos:line="561" pos:column="75">ParserLanguage</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="562" pos:column="13">switchStmt</name><op:operator pos:line="562" pos:column="23">.</op:operator><name pos:line="562" pos:column="24">AddLocation</name></name><argument_list pos:line="562" pos:column="35">(<argument><expr><call><name><name pos:line="562" pos:column="36">context</name><op:operator pos:line="562" pos:column="43">.</op:operator><name pos:line="562" pos:column="44">CreateLocation</name></name><argument_list pos:line="562" pos:column="58">(<argument><expr><name pos:line="562" pos:column="59">switchElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <foreach pos:line="564" pos:column="13">foreach(<init><decl><type><name pos:line="564" pos:column="21">var</name></type> <name pos:line="564" pos:column="25">switchChild</name> <range pos:line="564" pos:column="37">in <expr><call><name><name pos:line="564" pos:column="40">switchElement</name><op:operator pos:line="564" pos:column="53">.</op:operator><name pos:line="564" pos:column="54">Elements</name></name><argument_list pos:line="564" pos:column="62">()</argument_list></call></expr></range></decl></init>) <block pos:line="564" pos:column="66">{
                <if pos:line="565" pos:column="17">if<condition pos:line="565" pos:column="19">(<expr><name><name pos:line="565" pos:column="20">switchChild</name><op:operator pos:line="565" pos:column="31">.</op:operator><name pos:line="565" pos:column="32">Name</name></name> <op:operator pos:line="565" pos:column="37">==</op:operator> <name><name pos:line="565" pos:column="40">SRC</name><op:operator pos:line="565" pos:column="43">.</op:operator><name pos:line="565" pos:column="44">Condition</name></name></expr>)</condition><then pos:line="565" pos:column="54"> <block pos:line="565" pos:column="55">{
                    <comment type="line" pos:line="566" pos:column="21">//fill in condition</comment>
                    <decl_stmt><decl><type><name pos:line="567" pos:column="21">var</name></type> <name pos:line="567" pos:column="25">expElement</name> <init pos:line="567" pos:column="36">= <expr><call><name pos:line="567" pos:column="38">GetFirstChildExpression</name><argument_list pos:line="567" pos:column="61">(<argument><expr><name pos:line="567" pos:column="62">switchChild</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="568" pos:column="21">if<condition pos:line="568" pos:column="23">(<expr><name pos:line="568" pos:column="24">expElement</name> <op:operator pos:line="568" pos:column="35">!=</op:operator> <name pos:line="568" pos:column="38">null</name></expr>)</condition><then pos:line="568" pos:column="43"> <block pos:line="568" pos:column="44">{
                        <expr_stmt><expr><name><name pos:line="569" pos:column="25">switchStmt</name><op:operator pos:line="569" pos:column="35">.</op:operator><name pos:line="569" pos:column="36">Condition</name></name> <op:operator pos:line="569" pos:column="46">=</op:operator> <call><name pos:line="569" pos:column="48">ParseExpression</name><argument_list pos:line="569" pos:column="63">(<argument><expr><name pos:line="569" pos:column="64">expElement</name></expr></argument>, <argument><expr><name pos:line="569" pos:column="76">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then> <else pos:line="571" pos:column="19">else <if pos:line="571" pos:column="24">if<condition pos:line="571" pos:column="26">(<expr><name><name pos:line="571" pos:column="27">switchChild</name><op:operator pos:line="571" pos:column="38">.</op:operator><name pos:line="571" pos:column="39">Name</name></name> <op:operator pos:line="571" pos:column="44">==</op:operator> <name><name pos:line="571" pos:column="47">SRC</name><op:operator pos:line="571" pos:column="50">.</op:operator><name pos:line="571" pos:column="51">Block</name></name></expr>)</condition><then pos:line="571" pos:column="57"> <block pos:line="571" pos:column="58">{
                    <comment type="line" pos:line="572" pos:column="21">//add children from block</comment>
                    <decl_stmt><decl><type><name pos:line="573" pos:column="21">var</name></type> <name pos:line="573" pos:column="25">blockStatements</name> <init pos:line="573" pos:column="41">= <expr><call><name><name pos:line="573" pos:column="43">switchChild</name><op:operator pos:line="573" pos:column="54">.</op:operator><name pos:line="573" pos:column="55">Elements</name></name><argument_list pos:line="573" pos:column="63">()</argument_list></call><op:operator pos:line="573" pos:column="65">.</op:operator><call><name pos:line="573" pos:column="66">Select</name><argument_list pos:line="573" pos:column="72">(<argument><expr><lambda><name pos:line="573" pos:column="73">e</name> <op:operator pos:line="573" pos:column="75">=&gt;</op:operator> <call><name pos:line="573" pos:column="78">ParseStatement</name><argument_list pos:line="573" pos:column="92">(<argument><expr><name pos:line="573" pos:column="93">e</name></expr></argument>, <argument><expr><name pos:line="573" pos:column="96">context</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="574" pos:column="21">switchStmt</name><op:operator pos:line="574" pos:column="31">.</op:operator><name pos:line="574" pos:column="32">AddChildStatements</name></name><argument_list pos:line="574" pos:column="50">(<argument><expr><name pos:line="574" pos:column="51">blockStatements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="575" pos:column="19">else <block pos:line="575" pos:column="24">{
                    <comment type="line" pos:line="576" pos:column="21">//add child</comment>
                    <expr_stmt><expr><call><name><name pos:line="577" pos:column="21">switchStmt</name><op:operator pos:line="577" pos:column="31">.</op:operator><name pos:line="577" pos:column="32">AddChildStatement</name></name><argument_list pos:line="577" pos:column="49">(<argument><expr><call><name pos:line="577" pos:column="50">ParseStatement</name><argument_list pos:line="577" pos:column="64">(<argument><expr><name pos:line="577" pos:column="65">switchChild</name></expr></argument>, <argument><expr><name pos:line="577" pos:column="78">context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if></else></if>
            }</block></foreach>

            <return pos:line="581" pos:column="13">return <expr><name pos:line="581" pos:column="20">switchStmt</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="584" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="585" pos:column="9">/// Creates a &lt;see cref="CaseStatement"/&gt; object for &lt;paramref name="caseElement"/&gt;.</comment>
        <comment type="line" pos:line="586" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="587" pos:column="9">/// &lt;param name="caseElement"&gt;The SRC.Case or SRC.Default element to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="588" pos:column="9">/// &lt;param name="context"&gt;The context to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="589" pos:column="9">/// &lt;returns&gt;A &lt;see cref="CaseStatement"/&gt; corresponding to &lt;paramref name="caseElement"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="590" pos:column="9">protected</specifier> <specifier pos:line="590" pos:column="19">virtual</specifier> <name pos:line="590" pos:column="27">CaseStatement</name></type> <name pos:line="590" pos:column="41">ParseCaseElement</name><parameter_list pos:line="590" pos:column="57">(<param><decl><type><name pos:line="590" pos:column="58">XElement</name></type> <name pos:line="590" pos:column="67">caseElement</name></decl></param>, <param><decl><type><name pos:line="590" pos:column="80">ParserContext</name></type> <name pos:line="590" pos:column="94">context</name></decl></param>)</parameter_list> <block pos:line="590" pos:column="103">{
            <if pos:line="591" pos:column="13">if<condition pos:line="591" pos:column="15">(<expr><name pos:line="591" pos:column="16">caseElement</name> <op:operator pos:line="591" pos:column="28">==</op:operator> <name pos:line="591" pos:column="31">null</name></expr>)</condition><then pos:line="591" pos:column="36">
                <throw pos:line="592" pos:column="17">throw <expr><op:operator pos:line="592" pos:column="23">new</op:operator> <call><name pos:line="592" pos:column="27">ArgumentNullException</name><argument_list pos:line="592" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="592" pos:column="49">"caseElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="593" pos:column="13">if<condition pos:line="593" pos:column="15">(<expr><op:operator pos:line="593" pos:column="16">!</op:operator><op:operator pos:line="593" pos:column="17">(</op:operator><name><name pos:line="593" pos:column="18">caseElement</name><op:operator pos:line="593" pos:column="29">.</op:operator><name pos:line="593" pos:column="30">Name</name></name> <op:operator pos:line="593" pos:column="35">==</op:operator> <name><name pos:line="593" pos:column="38">SRC</name><op:operator pos:line="593" pos:column="41">.</op:operator><name pos:line="593" pos:column="42">Case</name></name> <op:operator pos:line="593" pos:column="47">||</op:operator> <name><name pos:line="593" pos:column="50">caseElement</name><op:operator pos:line="593" pos:column="61">.</op:operator><name pos:line="593" pos:column="62">Name</name></name> <op:operator pos:line="593" pos:column="67">==</op:operator> <name><name pos:line="593" pos:column="70">SRC</name><op:operator pos:line="593" pos:column="73">.</op:operator><name pos:line="593" pos:column="74">Default</name></name><op:operator pos:line="593" pos:column="81">)</op:operator></expr>)</condition><then pos:line="593" pos:column="83">
                <throw pos:line="594" pos:column="17">throw <expr><op:operator pos:line="594" pos:column="23">new</op:operator> <call><name pos:line="594" pos:column="27">ArgumentException</name><argument_list pos:line="594" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="594" pos:column="45">"Must be a SRC.Case or SRC.Default element"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="594" pos:column="90">"caseElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="595" pos:column="13">if<condition pos:line="595" pos:column="15">(<expr><name pos:line="595" pos:column="16">context</name> <op:operator pos:line="595" pos:column="24">==</op:operator> <name pos:line="595" pos:column="27">null</name></expr>)</condition><then pos:line="595" pos:column="32">
                <throw pos:line="596" pos:column="17">throw <expr><op:operator pos:line="596" pos:column="23">new</op:operator> <call><name pos:line="596" pos:column="27">ArgumentNullException</name><argument_list pos:line="596" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="596" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="598" pos:column="13">var</name></type> <name pos:line="598" pos:column="17">caseStmt</name> <init pos:line="598" pos:column="26">= <expr><op:operator pos:line="598" pos:column="28">new</op:operator> <call><name pos:line="598" pos:column="32">CaseStatement</name><argument_list pos:line="598" pos:column="45">()</argument_list></call> <block pos:line="598" pos:column="48">{
                <expr><name pos:line="599" pos:column="17">ProgrammingLanguage</name> <op:operator pos:line="599" pos:column="37">=</op:operator> <name pos:line="599" pos:column="39">ParserLanguage</name></expr>,
                <expr><name pos:line="600" pos:column="17">IsDefault</name> <op:operator pos:line="600" pos:column="27">=</op:operator> <name><name pos:line="600" pos:column="29">caseElement</name><op:operator pos:line="600" pos:column="40">.</op:operator><name pos:line="600" pos:column="41">Name</name></name> <op:operator pos:line="600" pos:column="46">==</op:operator> <name><name pos:line="600" pos:column="49">SRC</name><op:operator pos:line="600" pos:column="52">.</op:operator><name pos:line="600" pos:column="53">Default</name></name></expr>
            }</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="602" pos:column="13">caseStmt</name><op:operator pos:line="602" pos:column="21">.</op:operator><name pos:line="602" pos:column="22">AddLocation</name></name><argument_list pos:line="602" pos:column="33">(<argument><expr><call><name><name pos:line="602" pos:column="34">context</name><op:operator pos:line="602" pos:column="41">.</op:operator><name pos:line="602" pos:column="42">CreateLocation</name></name><argument_list pos:line="602" pos:column="56">(<argument><expr><name pos:line="602" pos:column="57">caseElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <foreach pos:line="604" pos:column="13">foreach(<init><decl><type><name pos:line="604" pos:column="21">var</name></type> <name pos:line="604" pos:column="25">caseChild</name> <range pos:line="604" pos:column="35">in <expr><call><name><name pos:line="604" pos:column="38">caseElement</name><op:operator pos:line="604" pos:column="49">.</op:operator><name pos:line="604" pos:column="50">Elements</name></name><argument_list pos:line="604" pos:column="58">()</argument_list></call></expr></range></decl></init>) <block pos:line="604" pos:column="62">{
                <if pos:line="605" pos:column="17">if<condition pos:line="605" pos:column="19">(<expr><name><name pos:line="605" pos:column="20">caseChild</name><op:operator pos:line="605" pos:column="29">.</op:operator><name pos:line="605" pos:column="30">Name</name></name> <op:operator pos:line="605" pos:column="35">==</op:operator> <name><name pos:line="605" pos:column="38">SRC</name><op:operator pos:line="605" pos:column="41">.</op:operator><name pos:line="605" pos:column="42">Expression</name> <type:modifier pos:line="605" pos:column="53">&amp;&amp;</type:modifier></name> <name><name pos:line="605" pos:column="56">caseStmt</name><op:operator pos:line="605" pos:column="64">.</op:operator><name pos:line="605" pos:column="65">Condition</name></name> <op:operator pos:line="605" pos:column="75">==</op:operator> <name pos:line="605" pos:column="78">null</name></expr>)</condition><then pos:line="605" pos:column="83"> <block pos:line="605" pos:column="84">{
                    <comment type="line" pos:line="606" pos:column="21">//this is the first expression we've seen, add as the case label</comment>
                    <expr_stmt><expr><name><name pos:line="607" pos:column="21">caseStmt</name><op:operator pos:line="607" pos:column="29">.</op:operator><name pos:line="607" pos:column="30">Condition</name></name> <op:operator pos:line="607" pos:column="40">=</op:operator> <call><name pos:line="607" pos:column="42">ParseExpressionElement</name><argument_list pos:line="607" pos:column="64">(<argument><expr><name pos:line="607" pos:column="65">caseChild</name></expr></argument>, <argument><expr><name pos:line="607" pos:column="76">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="609" pos:column="17">else <if pos:line="609" pos:column="22">if<condition pos:line="609" pos:column="24">(<expr><name><name pos:line="609" pos:column="25">caseChild</name><op:operator pos:line="609" pos:column="34">.</op:operator><name pos:line="609" pos:column="35">Name</name></name> <op:operator pos:line="609" pos:column="40">==</op:operator> <name><name pos:line="609" pos:column="43">SRC</name><op:operator pos:line="609" pos:column="46">.</op:operator><name pos:line="609" pos:column="47">Block</name></name></expr>)</condition><then pos:line="609" pos:column="53"> <block pos:line="609" pos:column="54">{
                    <comment type="line" pos:line="610" pos:column="21">//add children from block</comment>
                    <decl_stmt><decl><type><name pos:line="611" pos:column="21">var</name></type> <name pos:line="611" pos:column="25">blockStatements</name> <init pos:line="611" pos:column="41">= <expr><call><name><name pos:line="611" pos:column="43">caseChild</name><op:operator pos:line="611" pos:column="52">.</op:operator><name pos:line="611" pos:column="53">Elements</name></name><argument_list pos:line="611" pos:column="61">()</argument_list></call><op:operator pos:line="611" pos:column="63">.</op:operator><call><name pos:line="611" pos:column="64">Select</name><argument_list pos:line="611" pos:column="70">(<argument><expr><lambda><name pos:line="611" pos:column="71">e</name> <op:operator pos:line="611" pos:column="73">=&gt;</op:operator> <call><name pos:line="611" pos:column="76">ParseStatement</name><argument_list pos:line="611" pos:column="90">(<argument><expr><name pos:line="611" pos:column="91">e</name></expr></argument>, <argument><expr><name pos:line="611" pos:column="94">context</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="612" pos:column="21">caseStmt</name><op:operator pos:line="612" pos:column="29">.</op:operator><name pos:line="612" pos:column="30">AddChildStatements</name></name><argument_list pos:line="612" pos:column="48">(<argument><expr><name pos:line="612" pos:column="49">blockStatements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="613" pos:column="19">else <block pos:line="613" pos:column="24">{
                    <comment type="line" pos:line="614" pos:column="21">//add child</comment>
                    <expr_stmt><expr><call><name><name pos:line="615" pos:column="21">caseStmt</name><op:operator pos:line="615" pos:column="29">.</op:operator><name pos:line="615" pos:column="30">AddChildStatement</name></name><argument_list pos:line="615" pos:column="47">(<argument><expr><call><name pos:line="615" pos:column="48">ParseStatement</name><argument_list pos:line="615" pos:column="62">(<argument><expr><name pos:line="615" pos:column="63">caseChild</name></expr></argument>, <argument><expr><name pos:line="615" pos:column="74">context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if></else></if>
            }</block></foreach>

            <return pos:line="619" pos:column="13">return <expr><name pos:line="619" pos:column="20">caseStmt</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="622" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="623" pos:column="9">/// Creates a &lt;see cref="BreakStatement"/&gt; object for &lt;paramref name="breakElement"/&gt;.</comment>
        <comment type="line" pos:line="624" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="625" pos:column="9">/// &lt;param name="breakElement"&gt;The SRC.Break element to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="626" pos:column="9">/// &lt;param name="context"&gt;The context to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="627" pos:column="9">/// &lt;returns&gt;A &lt;see cref="BreakStatement"/&gt; corresponding to &lt;paramref name="breakElement"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="628" pos:column="9">protected</specifier> <specifier pos:line="628" pos:column="19">virtual</specifier> <name pos:line="628" pos:column="27">BreakStatement</name></type> <name pos:line="628" pos:column="42">ParseBreakElement</name><parameter_list pos:line="628" pos:column="59">(<param><decl><type><name pos:line="628" pos:column="60">XElement</name></type> <name pos:line="628" pos:column="69">breakElement</name></decl></param>, <param><decl><type><name pos:line="628" pos:column="83">ParserContext</name></type> <name pos:line="628" pos:column="97">context</name></decl></param>)</parameter_list> <block pos:line="628" pos:column="106">{
            <if pos:line="629" pos:column="13">if<condition pos:line="629" pos:column="15">(<expr><name pos:line="629" pos:column="16">breakElement</name> <op:operator pos:line="629" pos:column="29">==</op:operator> <name pos:line="629" pos:column="32">null</name></expr>)</condition><then pos:line="629" pos:column="37">
                <throw pos:line="630" pos:column="17">throw <expr><op:operator pos:line="630" pos:column="23">new</op:operator> <call><name pos:line="630" pos:column="27">ArgumentNullException</name><argument_list pos:line="630" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="630" pos:column="49">"breakElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="631" pos:column="13">if<condition pos:line="631" pos:column="15">(<expr><name><name pos:line="631" pos:column="16">breakElement</name><op:operator pos:line="631" pos:column="28">.</op:operator><name pos:line="631" pos:column="29">Name</name></name> <op:operator pos:line="631" pos:column="34">!=</op:operator> <name><name pos:line="631" pos:column="37">SRC</name><op:operator pos:line="631" pos:column="40">.</op:operator><name pos:line="631" pos:column="41">Break</name></name></expr>)</condition><then pos:line="631" pos:column="47">
                <throw pos:line="632" pos:column="17">throw <expr><op:operator pos:line="632" pos:column="23">new</op:operator> <call><name pos:line="632" pos:column="27">ArgumentException</name><argument_list pos:line="632" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="632" pos:column="45">"Must be a SRC.Break element"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="632" pos:column="76">"breakElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="633" pos:column="13">if<condition pos:line="633" pos:column="15">(<expr><name pos:line="633" pos:column="16">context</name> <op:operator pos:line="633" pos:column="24">==</op:operator> <name pos:line="633" pos:column="27">null</name></expr>)</condition><then pos:line="633" pos:column="32">
                <throw pos:line="634" pos:column="17">throw <expr><op:operator pos:line="634" pos:column="23">new</op:operator> <call><name pos:line="634" pos:column="27">ArgumentNullException</name><argument_list pos:line="634" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="634" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="636" pos:column="13">var</name></type> <name pos:line="636" pos:column="17">breakStmt</name> <init pos:line="636" pos:column="27">= <expr><op:operator pos:line="636" pos:column="29">new</op:operator> <call><name pos:line="636" pos:column="33">BreakStatement</name><argument_list pos:line="636" pos:column="47">()</argument_list></call> <block pos:line="636" pos:column="50">{<expr><name pos:line="636" pos:column="51">ProgrammingLanguage</name> <op:operator pos:line="636" pos:column="71">=</op:operator> <name pos:line="636" pos:column="73">ParserLanguage</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="637" pos:column="13">breakStmt</name><op:operator pos:line="637" pos:column="22">.</op:operator><name pos:line="637" pos:column="23">AddLocation</name></name><argument_list pos:line="637" pos:column="34">(<argument><expr><call><name><name pos:line="637" pos:column="35">context</name><op:operator pos:line="637" pos:column="42">.</op:operator><name pos:line="637" pos:column="43">CreateLocation</name></name><argument_list pos:line="637" pos:column="57">(<argument><expr><name pos:line="637" pos:column="58">breakElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:line="639" pos:column="13">return <expr><name pos:line="639" pos:column="20">breakStmt</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="642" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="643" pos:column="9">/// Creates a &lt;see cref="ContinueStatement"/&gt; object for &lt;paramref name="continueElement"/&gt;.</comment>
        <comment type="line" pos:line="644" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="645" pos:column="9">/// &lt;param name="continueElement"&gt;The SRC.Continue element to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="646" pos:column="9">/// &lt;param name="context"&gt;The context to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="647" pos:column="9">/// &lt;returns&gt;A &lt;see cref="ContinueStatement"/&gt; corresponding to &lt;paramref name="continueElement"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="648" pos:column="9">protected</specifier> <specifier pos:line="648" pos:column="19">virtual</specifier> <name pos:line="648" pos:column="27">ContinueStatement</name></type> <name pos:line="648" pos:column="45">ParseContinueElement</name><parameter_list pos:line="648" pos:column="65">(<param><decl><type><name pos:line="648" pos:column="66">XElement</name></type> <name pos:line="648" pos:column="75">continueElement</name></decl></param>, <param><decl><type><name pos:line="648" pos:column="92">ParserContext</name></type> <name pos:line="648" pos:column="106">context</name></decl></param>)</parameter_list> <block pos:line="648" pos:column="115">{
            <if pos:line="649" pos:column="13">if<condition pos:line="649" pos:column="15">(<expr><name pos:line="649" pos:column="16">continueElement</name> <op:operator pos:line="649" pos:column="32">==</op:operator> <name pos:line="649" pos:column="35">null</name></expr>)</condition><then pos:line="649" pos:column="40">
                <throw pos:line="650" pos:column="17">throw <expr><op:operator pos:line="650" pos:column="23">new</op:operator> <call><name pos:line="650" pos:column="27">ArgumentNullException</name><argument_list pos:line="650" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="650" pos:column="49">"continueElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="651" pos:column="13">if<condition pos:line="651" pos:column="15">(<expr><name><name pos:line="651" pos:column="16">continueElement</name><op:operator pos:line="651" pos:column="31">.</op:operator><name pos:line="651" pos:column="32">Name</name></name> <op:operator pos:line="651" pos:column="37">!=</op:operator> <name><name pos:line="651" pos:column="40">SRC</name><op:operator pos:line="651" pos:column="43">.</op:operator><name pos:line="651" pos:column="44">Continue</name></name></expr>)</condition><then pos:line="651" pos:column="53">
                <throw pos:line="652" pos:column="17">throw <expr><op:operator pos:line="652" pos:column="23">new</op:operator> <call><name pos:line="652" pos:column="27">ArgumentException</name><argument_list pos:line="652" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="652" pos:column="45">"Must be a SRC.Continue element"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="652" pos:column="79">"continueElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="653" pos:column="13">if<condition pos:line="653" pos:column="15">(<expr><name pos:line="653" pos:column="16">context</name> <op:operator pos:line="653" pos:column="24">==</op:operator> <name pos:line="653" pos:column="27">null</name></expr>)</condition><then pos:line="653" pos:column="32">
                <throw pos:line="654" pos:column="17">throw <expr><op:operator pos:line="654" pos:column="23">new</op:operator> <call><name pos:line="654" pos:column="27">ArgumentNullException</name><argument_list pos:line="654" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="654" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="656" pos:column="13">var</name></type> <name pos:line="656" pos:column="17">continueStmt</name> <init pos:line="656" pos:column="30">= <expr><op:operator pos:line="656" pos:column="32">new</op:operator> <call><name pos:line="656" pos:column="36">ContinueStatement</name><argument_list pos:line="656" pos:column="53">()</argument_list></call> <block pos:line="656" pos:column="56">{<expr><name pos:line="656" pos:column="57">ProgrammingLanguage</name> <op:operator pos:line="656" pos:column="77">=</op:operator> <name pos:line="656" pos:column="79">ParserLanguage</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="657" pos:column="13">continueStmt</name><op:operator pos:line="657" pos:column="25">.</op:operator><name pos:line="657" pos:column="26">AddLocation</name></name><argument_list pos:line="657" pos:column="37">(<argument><expr><call><name><name pos:line="657" pos:column="38">context</name><op:operator pos:line="657" pos:column="45">.</op:operator><name pos:line="657" pos:column="46">CreateLocation</name></name><argument_list pos:line="657" pos:column="60">(<argument><expr><name pos:line="657" pos:column="61">continueElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:line="659" pos:column="13">return <expr><name pos:line="659" pos:column="20">continueStmt</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="662" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="663" pos:column="9">/// Creates a &lt;see cref="GotoStatement"/&gt; object for &lt;paramref name="gotoElement"/&gt;.</comment>
        <comment type="line" pos:line="664" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="665" pos:column="9">/// &lt;param name="gotoElement"&gt;The SRC.Goto element to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="666" pos:column="9">/// &lt;param name="context"&gt;The context to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="667" pos:column="9">/// &lt;returns&gt;A &lt;see cref="GotoStatement"/&gt; corresponding to &lt;paramref name="gotoElement"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="668" pos:column="9">protected</specifier> <specifier pos:line="668" pos:column="19">virtual</specifier> <name pos:line="668" pos:column="27">GotoStatement</name></type> <name pos:line="668" pos:column="41">ParseGotoElement</name><parameter_list pos:line="668" pos:column="57">(<param><decl><type><name pos:line="668" pos:column="58">XElement</name></type> <name pos:line="668" pos:column="67">gotoElement</name></decl></param>, <param><decl><type><name pos:line="668" pos:column="80">ParserContext</name></type> <name pos:line="668" pos:column="94">context</name></decl></param>)</parameter_list> <block pos:line="668" pos:column="103">{
            <if pos:line="669" pos:column="13">if<condition pos:line="669" pos:column="15">(<expr><name pos:line="669" pos:column="16">gotoElement</name> <op:operator pos:line="669" pos:column="28">==</op:operator> <name pos:line="669" pos:column="31">null</name></expr>)</condition><then pos:line="669" pos:column="36">
                <throw pos:line="670" pos:column="17">throw <expr><op:operator pos:line="670" pos:column="23">new</op:operator> <call><name pos:line="670" pos:column="27">ArgumentNullException</name><argument_list pos:line="670" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="670" pos:column="49">"gotoElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="671" pos:column="13">if<condition pos:line="671" pos:column="15">(<expr><name><name pos:line="671" pos:column="16">gotoElement</name><op:operator pos:line="671" pos:column="27">.</op:operator><name pos:line="671" pos:column="28">Name</name></name> <op:operator pos:line="671" pos:column="33">!=</op:operator> <name><name pos:line="671" pos:column="36">SRC</name><op:operator pos:line="671" pos:column="39">.</op:operator><name pos:line="671" pos:column="40">Goto</name></name></expr>)</condition><then pos:line="671" pos:column="45">
                <throw pos:line="672" pos:column="17">throw <expr><op:operator pos:line="672" pos:column="23">new</op:operator> <call><name pos:line="672" pos:column="27">ArgumentException</name><argument_list pos:line="672" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="672" pos:column="45">"Must be a SRC.Goto element"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="672" pos:column="75">"gotoElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="673" pos:column="13">if<condition pos:line="673" pos:column="15">(<expr><name pos:line="673" pos:column="16">context</name> <op:operator pos:line="673" pos:column="24">==</op:operator> <name pos:line="673" pos:column="27">null</name></expr>)</condition><then pos:line="673" pos:column="32">
                <throw pos:line="674" pos:column="17">throw <expr><op:operator pos:line="674" pos:column="23">new</op:operator> <call><name pos:line="674" pos:column="27">ArgumentNullException</name><argument_list pos:line="674" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="674" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="676" pos:column="13">var</name></type> <name pos:line="676" pos:column="17">gotoStmt</name> <init pos:line="676" pos:column="26">= <expr><op:operator pos:line="676" pos:column="28">new</op:operator> <call><name pos:line="676" pos:column="32">GotoStatement</name><argument_list pos:line="676" pos:column="45">()</argument_list></call> <block pos:line="676" pos:column="48">{<expr><name pos:line="676" pos:column="49">ProgrammingLanguage</name> <op:operator pos:line="676" pos:column="69">=</op:operator> <name pos:line="676" pos:column="71">ParserLanguage</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="677" pos:column="13">gotoStmt</name><op:operator pos:line="677" pos:column="21">.</op:operator><name pos:line="677" pos:column="22">AddLocation</name></name><argument_list pos:line="677" pos:column="33">(<argument><expr><call><name><name pos:line="677" pos:column="34">context</name><op:operator pos:line="677" pos:column="41">.</op:operator><name pos:line="677" pos:column="42">CreateLocation</name></name><argument_list pos:line="677" pos:column="56">(<argument><expr><name pos:line="677" pos:column="57">gotoElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if pos:line="679" pos:column="13">if<condition pos:line="679" pos:column="15">(<expr><name><name pos:line="679" pos:column="16">gotoElement</name><op:operator pos:line="679" pos:column="27">.</op:operator><name pos:line="679" pos:column="28">HasElements</name></name></expr>)</condition><then pos:line="679" pos:column="40"> <block pos:line="679" pos:column="41">{
                <expr_stmt><expr><name><name pos:line="680" pos:column="17">gotoStmt</name><op:operator pos:line="680" pos:column="25">.</op:operator><name pos:line="680" pos:column="26">Content</name></name> <op:operator pos:line="680" pos:column="34">=</op:operator> <call><name pos:line="680" pos:column="36">ParseExpression</name><argument_list pos:line="680" pos:column="51">(<argument><expr><call><name><name pos:line="680" pos:column="52">gotoElement</name><op:operator pos:line="680" pos:column="63">.</op:operator><name pos:line="680" pos:column="64">Elements</name></name><argument_list pos:line="680" pos:column="72">()</argument_list></call><op:operator pos:line="680" pos:column="74">.</op:operator><call><name pos:line="680" pos:column="75">First</name><argument_list pos:line="680" pos:column="80">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="680" pos:column="84">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <return pos:line="683" pos:column="13">return <expr><name pos:line="683" pos:column="20">gotoStmt</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="686" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="687" pos:column="9">/// Creates a &lt;see cref="LabelStatement"/&gt; object for &lt;paramref name="labelElement"/&gt;.</comment>
        <comment type="line" pos:line="688" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="689" pos:column="9">/// &lt;param name="labelElement"&gt;The SRC.Label element to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="690" pos:column="9">/// &lt;param name="context"&gt;The context to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="691" pos:column="9">/// &lt;returns&gt;A &lt;see cref="LabelStatement"/&gt; corresponding to &lt;paramref name="labelElement"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="692" pos:column="9">protected</specifier> <specifier pos:line="692" pos:column="19">virtual</specifier> <name pos:line="692" pos:column="27">LabelStatement</name></type> <name pos:line="692" pos:column="42">ParseLabelElement</name><parameter_list pos:line="692" pos:column="59">(<param><decl><type><name pos:line="692" pos:column="60">XElement</name></type> <name pos:line="692" pos:column="69">labelElement</name></decl></param>, <param><decl><type><name pos:line="692" pos:column="83">ParserContext</name></type> <name pos:line="692" pos:column="97">context</name></decl></param>)</parameter_list> <block pos:line="692" pos:column="106">{
            <if pos:line="693" pos:column="13">if<condition pos:line="693" pos:column="15">(<expr><name pos:line="693" pos:column="16">labelElement</name> <op:operator pos:line="693" pos:column="29">==</op:operator> <name pos:line="693" pos:column="32">null</name></expr>)</condition><then pos:line="693" pos:column="37">
                <throw pos:line="694" pos:column="17">throw <expr><op:operator pos:line="694" pos:column="23">new</op:operator> <call><name pos:line="694" pos:column="27">ArgumentNullException</name><argument_list pos:line="694" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="694" pos:column="49">"labelElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="695" pos:column="13">if<condition pos:line="695" pos:column="15">(<expr><name><name pos:line="695" pos:column="16">labelElement</name><op:operator pos:line="695" pos:column="28">.</op:operator><name pos:line="695" pos:column="29">Name</name></name> <op:operator pos:line="695" pos:column="34">!=</op:operator> <name><name pos:line="695" pos:column="37">SRC</name><op:operator pos:line="695" pos:column="40">.</op:operator><name pos:line="695" pos:column="41">Label</name></name></expr>)</condition><then pos:line="695" pos:column="47">
                <throw pos:line="696" pos:column="17">throw <expr><op:operator pos:line="696" pos:column="23">new</op:operator> <call><name pos:line="696" pos:column="27">ArgumentException</name><argument_list pos:line="696" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="696" pos:column="45">"Must be a SRC.Label element"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="696" pos:column="76">"labelElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="697" pos:column="13">if<condition pos:line="697" pos:column="15">(<expr><name pos:line="697" pos:column="16">context</name> <op:operator pos:line="697" pos:column="24">==</op:operator> <name pos:line="697" pos:column="27">null</name></expr>)</condition><then pos:line="697" pos:column="32">
                <throw pos:line="698" pos:column="17">throw <expr><op:operator pos:line="698" pos:column="23">new</op:operator> <call><name pos:line="698" pos:column="27">ArgumentNullException</name><argument_list pos:line="698" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="698" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="700" pos:column="13">var</name></type> <name pos:line="700" pos:column="17">labelStmt</name> <init pos:line="700" pos:column="27">= <expr><op:operator pos:line="700" pos:column="29">new</op:operator> <call><name pos:line="700" pos:column="33">LabelStatement</name><argument_list pos:line="700" pos:column="47">()</argument_list></call> <block pos:line="700" pos:column="50">{<expr><name pos:line="700" pos:column="51">ProgrammingLanguage</name> <op:operator pos:line="700" pos:column="71">=</op:operator> <name pos:line="700" pos:column="73">ParserLanguage</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="701" pos:column="13">labelStmt</name><op:operator pos:line="701" pos:column="22">.</op:operator><name pos:line="701" pos:column="23">AddLocation</name></name><argument_list pos:line="701" pos:column="34">(<argument><expr><call><name><name pos:line="701" pos:column="35">context</name><op:operator pos:line="701" pos:column="42">.</op:operator><name pos:line="701" pos:column="43">CreateLocation</name></name><argument_list pos:line="701" pos:column="57">(<argument><expr><name pos:line="701" pos:column="58">labelElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="703" pos:column="13">var</name></type> <name pos:line="703" pos:column="17">name</name> <init pos:line="703" pos:column="22">= <expr><call><name><name pos:line="703" pos:column="24">labelElement</name><op:operator pos:line="703" pos:column="36">.</op:operator><name pos:line="703" pos:column="37">Element</name></name><argument_list pos:line="703" pos:column="44">(<argument><expr><name><name pos:line="703" pos:column="45">SRC</name><op:operator pos:line="703" pos:column="48">.</op:operator><name pos:line="703" pos:column="49">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="704" pos:column="13">if<condition pos:line="704" pos:column="15">(<expr><name pos:line="704" pos:column="16">name</name> <op:operator pos:line="704" pos:column="21">!=</op:operator> <name pos:line="704" pos:column="24">null</name></expr>)</condition><then pos:line="704" pos:column="29"> <block pos:line="704" pos:column="30">{
                <expr_stmt><expr><name><name pos:line="705" pos:column="17">labelStmt</name><op:operator pos:line="705" pos:column="26">.</op:operator><name pos:line="705" pos:column="27">Name</name></name> <op:operator pos:line="705" pos:column="32">=</op:operator> <name><name pos:line="705" pos:column="34">name</name><op:operator pos:line="705" pos:column="38">.</op:operator><name pos:line="705" pos:column="39">Value</name></name></expr>;</expr_stmt>
            }</block></then></if>

            <return pos:line="708" pos:column="13">return <expr><name pos:line="708" pos:column="20">labelStmt</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="711" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="712" pos:column="9">/// Creates a &lt;see cref="ReturnStatement"/&gt; object for &lt;paramref name="returnElement"/&gt;.</comment>
        <comment type="line" pos:line="713" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="714" pos:column="9">/// &lt;param name="returnElement"&gt;The SRC.Return element to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="715" pos:column="9">/// &lt;param name="context"&gt;The context to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="716" pos:column="9">/// &lt;returns&gt;A &lt;see cref="ReturnStatement"/&gt; corresponding to &lt;paramref name="returnElement"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="717" pos:column="9">protected</specifier> <specifier pos:line="717" pos:column="19">virtual</specifier> <name pos:line="717" pos:column="27">ReturnStatement</name></type> <name pos:line="717" pos:column="43">ParseReturnElement</name><parameter_list pos:line="717" pos:column="61">(<param><decl><type><name pos:line="717" pos:column="62">XElement</name></type> <name pos:line="717" pos:column="71">returnElement</name></decl></param>, <param><decl><type><name pos:line="717" pos:column="86">ParserContext</name></type> <name pos:line="717" pos:column="100">context</name></decl></param>)</parameter_list> <block pos:line="717" pos:column="109">{
            <if pos:line="718" pos:column="13">if<condition pos:line="718" pos:column="15">(<expr><name pos:line="718" pos:column="16">returnElement</name> <op:operator pos:line="718" pos:column="30">==</op:operator> <name pos:line="718" pos:column="33">null</name></expr>)</condition><then pos:line="718" pos:column="38">
                <throw pos:line="719" pos:column="17">throw <expr><op:operator pos:line="719" pos:column="23">new</op:operator> <call><name pos:line="719" pos:column="27">ArgumentNullException</name><argument_list pos:line="719" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="719" pos:column="49">"returnElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="720" pos:column="13">if<condition pos:line="720" pos:column="15">(<expr><name><name pos:line="720" pos:column="16">returnElement</name><op:operator pos:line="720" pos:column="29">.</op:operator><name pos:line="720" pos:column="30">Name</name></name> <op:operator pos:line="720" pos:column="35">!=</op:operator> <name><name pos:line="720" pos:column="38">SRC</name><op:operator pos:line="720" pos:column="41">.</op:operator><name pos:line="720" pos:column="42">Return</name></name></expr>)</condition><then pos:line="720" pos:column="49">
                <throw pos:line="721" pos:column="17">throw <expr><op:operator pos:line="721" pos:column="23">new</op:operator> <call><name pos:line="721" pos:column="27">ArgumentException</name><argument_list pos:line="721" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="721" pos:column="45">"Must be a SRC.Return element"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="721" pos:column="77">"returnElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="722" pos:column="13">if<condition pos:line="722" pos:column="15">(<expr><name pos:line="722" pos:column="16">context</name> <op:operator pos:line="722" pos:column="24">==</op:operator> <name pos:line="722" pos:column="27">null</name></expr>)</condition><then pos:line="722" pos:column="32">
                <throw pos:line="723" pos:column="17">throw <expr><op:operator pos:line="723" pos:column="23">new</op:operator> <call><name pos:line="723" pos:column="27">ArgumentNullException</name><argument_list pos:line="723" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="723" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="725" pos:column="13">var</name></type> <name pos:line="725" pos:column="17">returnStmt</name> <init pos:line="725" pos:column="28">= <expr><op:operator pos:line="725" pos:column="30">new</op:operator> <call><name pos:line="725" pos:column="34">ReturnStatement</name><argument_list pos:line="725" pos:column="49">()</argument_list></call> <block pos:line="725" pos:column="52">{<expr><name pos:line="725" pos:column="53">ProgrammingLanguage</name> <op:operator pos:line="725" pos:column="73">=</op:operator> <name pos:line="725" pos:column="75">ParserLanguage</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="726" pos:column="13">returnStmt</name><op:operator pos:line="726" pos:column="23">.</op:operator><name pos:line="726" pos:column="24">AddLocation</name></name><argument_list pos:line="726" pos:column="35">(<argument><expr><call><name><name pos:line="726" pos:column="36">context</name><op:operator pos:line="726" pos:column="43">.</op:operator><name pos:line="726" pos:column="44">CreateLocation</name></name><argument_list pos:line="726" pos:column="58">(<argument><expr><name pos:line="726" pos:column="59">returnElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="728" pos:column="13">var</name></type> <name pos:line="728" pos:column="17">expElement</name> <init pos:line="728" pos:column="28">= <expr><call><name pos:line="728" pos:column="30">GetFirstChildExpression</name><argument_list pos:line="728" pos:column="53">(<argument><expr><name pos:line="728" pos:column="54">returnElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="729" pos:column="13">if<condition pos:line="729" pos:column="15">(<expr><name pos:line="729" pos:column="16">expElement</name> <op:operator pos:line="729" pos:column="27">!=</op:operator> <name pos:line="729" pos:column="30">null</name></expr>)</condition><then pos:line="729" pos:column="35"> <block pos:line="729" pos:column="36">{
                <expr_stmt><expr><name><name pos:line="730" pos:column="17">returnStmt</name><op:operator pos:line="730" pos:column="27">.</op:operator><name pos:line="730" pos:column="28">Content</name></name> <op:operator pos:line="730" pos:column="36">=</op:operator> <call><name pos:line="730" pos:column="38">ParseExpression</name><argument_list pos:line="730" pos:column="53">(<argument><expr><name pos:line="730" pos:column="54">expElement</name></expr></argument>, <argument><expr><name pos:line="730" pos:column="66">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <return pos:line="733" pos:column="13">return <expr><name pos:line="733" pos:column="20">returnStmt</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="736" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="737" pos:column="9">/// Creates a &lt;see cref="ThrowStatement"/&gt; object for &lt;paramref name="throwElement"/&gt;.</comment>
        <comment type="line" pos:line="738" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="739" pos:column="9">/// &lt;param name="throwElement"&gt;The SRC.Throw element to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="740" pos:column="9">/// &lt;param name="context"&gt;The context to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="741" pos:column="9">/// &lt;returns&gt;A &lt;see cref="ThrowStatement"/&gt; corresponding to &lt;paramref name="throwElement"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="742" pos:column="9">protected</specifier> <specifier pos:line="742" pos:column="19">virtual</specifier> <name pos:line="742" pos:column="27">ThrowStatement</name></type> <name pos:line="742" pos:column="42">ParseThrowElement</name><parameter_list pos:line="742" pos:column="59">(<param><decl><type><name pos:line="742" pos:column="60">XElement</name></type> <name pos:line="742" pos:column="69">throwElement</name></decl></param>, <param><decl><type><name pos:line="742" pos:column="83">ParserContext</name></type> <name pos:line="742" pos:column="97">context</name></decl></param>)</parameter_list> <block pos:line="742" pos:column="106">{
            <if pos:line="743" pos:column="13">if<condition pos:line="743" pos:column="15">(<expr><name pos:line="743" pos:column="16">throwElement</name> <op:operator pos:line="743" pos:column="29">==</op:operator> <name pos:line="743" pos:column="32">null</name></expr>)</condition><then pos:line="743" pos:column="37">
                <throw pos:line="744" pos:column="17">throw <expr><op:operator pos:line="744" pos:column="23">new</op:operator> <call><name pos:line="744" pos:column="27">ArgumentNullException</name><argument_list pos:line="744" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="744" pos:column="49">"throwElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="745" pos:column="13">if<condition pos:line="745" pos:column="15">(<expr><name><name pos:line="745" pos:column="16">throwElement</name><op:operator pos:line="745" pos:column="28">.</op:operator><name pos:line="745" pos:column="29">Name</name></name> <op:operator pos:line="745" pos:column="34">!=</op:operator> <name><name pos:line="745" pos:column="37">SRC</name><op:operator pos:line="745" pos:column="40">.</op:operator><name pos:line="745" pos:column="41">Throw</name></name></expr>)</condition><then pos:line="745" pos:column="47">
                <throw pos:line="746" pos:column="17">throw <expr><op:operator pos:line="746" pos:column="23">new</op:operator> <call><name pos:line="746" pos:column="27">ArgumentException</name><argument_list pos:line="746" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="746" pos:column="45">"Must be a SRC.Throw element"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="746" pos:column="76">"throwElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="747" pos:column="13">if<condition pos:line="747" pos:column="15">(<expr><name pos:line="747" pos:column="16">context</name> <op:operator pos:line="747" pos:column="24">==</op:operator> <name pos:line="747" pos:column="27">null</name></expr>)</condition><then pos:line="747" pos:column="32">
                <throw pos:line="748" pos:column="17">throw <expr><op:operator pos:line="748" pos:column="23">new</op:operator> <call><name pos:line="748" pos:column="27">ArgumentNullException</name><argument_list pos:line="748" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="748" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="750" pos:column="13">var</name></type> <name pos:line="750" pos:column="17">throwStmt</name> <init pos:line="750" pos:column="27">= <expr><op:operator pos:line="750" pos:column="29">new</op:operator> <call><name pos:line="750" pos:column="33">ThrowStatement</name><argument_list pos:line="750" pos:column="47">()</argument_list></call> <block pos:line="750" pos:column="50">{<expr><name pos:line="750" pos:column="51">ProgrammingLanguage</name> <op:operator pos:line="750" pos:column="71">=</op:operator> <name pos:line="750" pos:column="73">ParserLanguage</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="751" pos:column="13">throwStmt</name><op:operator pos:line="751" pos:column="22">.</op:operator><name pos:line="751" pos:column="23">AddLocation</name></name><argument_list pos:line="751" pos:column="34">(<argument><expr><call><name><name pos:line="751" pos:column="35">context</name><op:operator pos:line="751" pos:column="42">.</op:operator><name pos:line="751" pos:column="43">CreateLocation</name></name><argument_list pos:line="751" pos:column="57">(<argument><expr><name pos:line="751" pos:column="58">throwElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="753" pos:column="13">var</name></type> <name pos:line="753" pos:column="17">expElement</name> <init pos:line="753" pos:column="28">= <expr><call><name pos:line="753" pos:column="30">GetFirstChildExpression</name><argument_list pos:line="753" pos:column="53">(<argument><expr><name pos:line="753" pos:column="54">throwElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="754" pos:column="13">if<condition pos:line="754" pos:column="15">(<expr><name pos:line="754" pos:column="16">expElement</name> <op:operator pos:line="754" pos:column="27">!=</op:operator> <name pos:line="754" pos:column="30">null</name></expr>)</condition><then pos:line="754" pos:column="35"> <block pos:line="754" pos:column="36">{
                <expr_stmt><expr><name><name pos:line="755" pos:column="17">throwStmt</name><op:operator pos:line="755" pos:column="26">.</op:operator><name pos:line="755" pos:column="27">Content</name></name> <op:operator pos:line="755" pos:column="35">=</op:operator> <call><name pos:line="755" pos:column="37">ParseExpression</name><argument_list pos:line="755" pos:column="52">(<argument><expr><name pos:line="755" pos:column="53">expElement</name></expr></argument>, <argument><expr><name pos:line="755" pos:column="65">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <return pos:line="758" pos:column="13">return <expr><name pos:line="758" pos:column="20">throwStmt</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="761" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="762" pos:column="9">/// Creates a &lt;see cref="TryStatement"/&gt; object for &lt;paramref name="tryElement"/&gt;.</comment>
        <comment type="line" pos:line="763" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="764" pos:column="9">/// &lt;param name="tryElement"&gt;The SRC.Try element to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="765" pos:column="9">/// &lt;param name="context"&gt;The context to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="766" pos:column="9">/// &lt;returns&gt;A &lt;see cref="TryStatement"/&gt; corresponding to &lt;paramref name="tryElement"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="767" pos:column="9">protected</specifier> <specifier pos:line="767" pos:column="19">virtual</specifier> <name pos:line="767" pos:column="27">TryStatement</name></type> <name pos:line="767" pos:column="40">ParseTryElement</name><parameter_list pos:line="767" pos:column="55">(<param><decl><type><name pos:line="767" pos:column="56">XElement</name></type> <name pos:line="767" pos:column="65">tryElement</name></decl></param>, <param><decl><type><name pos:line="767" pos:column="77">ParserContext</name></type> <name pos:line="767" pos:column="91">context</name></decl></param>)</parameter_list> <block pos:line="767" pos:column="100">{
            <if pos:line="768" pos:column="13">if<condition pos:line="768" pos:column="15">(<expr><name pos:line="768" pos:column="16">tryElement</name> <op:operator pos:line="768" pos:column="27">==</op:operator> <name pos:line="768" pos:column="30">null</name></expr>)</condition><then pos:line="768" pos:column="35">
                <throw pos:line="769" pos:column="17">throw <expr><op:operator pos:line="769" pos:column="23">new</op:operator> <call><name pos:line="769" pos:column="27">ArgumentNullException</name><argument_list pos:line="769" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="769" pos:column="49">"tryElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="770" pos:column="13">if<condition pos:line="770" pos:column="15">(<expr><name><name pos:line="770" pos:column="16">tryElement</name><op:operator pos:line="770" pos:column="26">.</op:operator><name pos:line="770" pos:column="27">Name</name></name> <op:operator pos:line="770" pos:column="32">!=</op:operator> <name><name pos:line="770" pos:column="35">SRC</name><op:operator pos:line="770" pos:column="38">.</op:operator><name pos:line="770" pos:column="39">Try</name></name></expr>)</condition><then pos:line="770" pos:column="43">
                <throw pos:line="771" pos:column="17">throw <expr><op:operator pos:line="771" pos:column="23">new</op:operator> <call><name pos:line="771" pos:column="27">ArgumentException</name><argument_list pos:line="771" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="771" pos:column="45">"Must be a SRC.Try element"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="771" pos:column="74">"tryElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="772" pos:column="13">if<condition pos:line="772" pos:column="15">(<expr><name pos:line="772" pos:column="16">context</name> <op:operator pos:line="772" pos:column="24">==</op:operator> <name pos:line="772" pos:column="27">null</name></expr>)</condition><then pos:line="772" pos:column="32">
                <throw pos:line="773" pos:column="17">throw <expr><op:operator pos:line="773" pos:column="23">new</op:operator> <call><name pos:line="773" pos:column="27">ArgumentNullException</name><argument_list pos:line="773" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="773" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="775" pos:column="13">var</name></type> <name pos:line="775" pos:column="17">tryStmt</name> <init pos:line="775" pos:column="25">= <expr><op:operator pos:line="775" pos:column="27">new</op:operator> <call><name pos:line="775" pos:column="31">TryStatement</name><argument_list pos:line="775" pos:column="43">()</argument_list></call> <block pos:line="775" pos:column="46">{<expr><name pos:line="775" pos:column="47">ProgrammingLanguage</name> <op:operator pos:line="775" pos:column="67">=</op:operator> <name pos:line="775" pos:column="69">ParserLanguage</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="776" pos:column="13">tryStmt</name><op:operator pos:line="776" pos:column="20">.</op:operator><name pos:line="776" pos:column="21">AddLocation</name></name><argument_list pos:line="776" pos:column="32">(<argument><expr><call><name><name pos:line="776" pos:column="33">context</name><op:operator pos:line="776" pos:column="40">.</op:operator><name pos:line="776" pos:column="41">CreateLocation</name></name><argument_list pos:line="776" pos:column="55">(<argument><expr><name pos:line="776" pos:column="56">tryElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <foreach pos:line="778" pos:column="13">foreach(<init><decl><type><name pos:line="778" pos:column="21">var</name></type> <name pos:line="778" pos:column="25">tryChild</name> <range pos:line="778" pos:column="34">in <expr><call><name><name pos:line="778" pos:column="37">tryElement</name><op:operator pos:line="778" pos:column="47">.</op:operator><name pos:line="778" pos:column="48">Elements</name></name><argument_list pos:line="778" pos:column="56">()</argument_list></call></expr></range></decl></init>) <block pos:line="778" pos:column="60">{
                <if pos:line="779" pos:column="17">if<condition pos:line="779" pos:column="19">(<expr><name><name pos:line="779" pos:column="20">tryChild</name><op:operator pos:line="779" pos:column="28">.</op:operator><name pos:line="779" pos:column="29">Name</name></name> <op:operator pos:line="779" pos:column="34">==</op:operator> <name><name pos:line="779" pos:column="37">SRC</name><op:operator pos:line="779" pos:column="40">.</op:operator><name pos:line="779" pos:column="41">Catch</name></name></expr>)</condition><then pos:line="779" pos:column="47"> <block pos:line="779" pos:column="48">{
                    <comment type="line" pos:line="780" pos:column="21">//add catch statement</comment>
                    <expr_stmt><expr><call><name><name pos:line="781" pos:column="21">tryStmt</name><op:operator pos:line="781" pos:column="28">.</op:operator><name pos:line="781" pos:column="29">AddCatchStatement</name></name><argument_list pos:line="781" pos:column="46">(<argument><expr><call><name pos:line="781" pos:column="47">ParseCatchElement</name><argument_list pos:line="781" pos:column="64">(<argument><expr><name pos:line="781" pos:column="65">tryChild</name></expr></argument>, <argument><expr><name pos:line="781" pos:column="75">context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="782" pos:column="19">else <if pos:line="782" pos:column="24">if<condition pos:line="782" pos:column="26">(<expr><name><name pos:line="782" pos:column="27">tryChild</name><op:operator pos:line="782" pos:column="35">.</op:operator><name pos:line="782" pos:column="36">Name</name></name> <op:operator pos:line="782" pos:column="41">==</op:operator> <name><name pos:line="782" pos:column="44">SRC</name><op:operator pos:line="782" pos:column="47">.</op:operator><name pos:line="782" pos:column="48">Finally</name></name></expr>)</condition><then pos:line="782" pos:column="56"> <block pos:line="782" pos:column="57">{
                    <comment type="line" pos:line="783" pos:column="21">//add finally children</comment>
                    <foreach pos:line="784" pos:column="21">foreach(<init><decl><type><name pos:line="784" pos:column="29">var</name></type> <name pos:line="784" pos:column="33">finallyChild</name> <range pos:line="784" pos:column="46">in <expr><call><name><name pos:line="784" pos:column="49">tryChild</name><op:operator pos:line="784" pos:column="57">.</op:operator><name pos:line="784" pos:column="58">Elements</name></name><argument_list pos:line="784" pos:column="66">()</argument_list></call></expr></range></decl></init>) <block pos:line="784" pos:column="70">{
                        <if pos:line="785" pos:column="25">if<condition pos:line="785" pos:column="27">(<expr><name><name pos:line="785" pos:column="28">finallyChild</name><op:operator pos:line="785" pos:column="40">.</op:operator><name pos:line="785" pos:column="41">Name</name></name> <op:operator pos:line="785" pos:column="46">==</op:operator> <name><name pos:line="785" pos:column="49">SRC</name><op:operator pos:line="785" pos:column="52">.</op:operator><name pos:line="785" pos:column="53">Block</name></name></expr>)</condition><then pos:line="785" pos:column="59"> <block pos:line="785" pos:column="60">{
                            <decl_stmt><decl><type><name pos:line="786" pos:column="29">var</name></type> <name pos:line="786" pos:column="33">blockStatements</name> <init pos:line="786" pos:column="49">= <expr><call><name><name pos:line="786" pos:column="51">finallyChild</name><op:operator pos:line="786" pos:column="63">.</op:operator><name pos:line="786" pos:column="64">Elements</name></name><argument_list pos:line="786" pos:column="72">()</argument_list></call><op:operator pos:line="786" pos:column="74">.</op:operator><call><name pos:line="786" pos:column="75">Select</name><argument_list pos:line="786" pos:column="81">(<argument><expr><lambda><name pos:line="786" pos:column="82">e</name> <op:operator pos:line="786" pos:column="84">=&gt;</op:operator> <call><name pos:line="786" pos:column="87">ParseStatement</name><argument_list pos:line="786" pos:column="101">(<argument><expr><name pos:line="786" pos:column="102">e</name></expr></argument>, <argument><expr><name pos:line="786" pos:column="105">context</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><call><name><name pos:line="787" pos:column="29">tryStmt</name><op:operator pos:line="787" pos:column="36">.</op:operator><name pos:line="787" pos:column="37">AddFinallyStatements</name></name><argument_list pos:line="787" pos:column="57">(<argument><expr><name pos:line="787" pos:column="58">blockStatements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then> <else pos:line="788" pos:column="27">else <block pos:line="788" pos:column="32">{
                            <expr_stmt><expr><call><name><name pos:line="789" pos:column="29">tryStmt</name><op:operator pos:line="789" pos:column="36">.</op:operator><name pos:line="789" pos:column="37">AddFinallyStatement</name></name><argument_list pos:line="789" pos:column="56">(<argument><expr><call><name pos:line="789" pos:column="57">ParseStatement</name><argument_list pos:line="789" pos:column="71">(<argument><expr><name pos:line="789" pos:column="72">finallyChild</name></expr></argument>, <argument><expr><name pos:line="789" pos:column="86">context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></else></if>
                    }</block></foreach>
                }</block></then> <else pos:line="792" pos:column="19">else <if pos:line="792" pos:column="24">if<condition pos:line="792" pos:column="26">(<expr><name><name pos:line="792" pos:column="27">tryChild</name><op:operator pos:line="792" pos:column="35">.</op:operator><name pos:line="792" pos:column="36">Name</name></name> <op:operator pos:line="792" pos:column="41">==</op:operator> <name><name pos:line="792" pos:column="44">SRC</name><op:operator pos:line="792" pos:column="47">.</op:operator><name pos:line="792" pos:column="48">Block</name></name></expr>)</condition><then pos:line="792" pos:column="54"> <block pos:line="792" pos:column="55">{
                    <comment type="line" pos:line="793" pos:column="21">//add children from block</comment>
                    <decl_stmt><decl><type><name pos:line="794" pos:column="21">var</name></type> <name pos:line="794" pos:column="25">blockStatements</name> <init pos:line="794" pos:column="41">= <expr><call><name><name pos:line="794" pos:column="43">tryChild</name><op:operator pos:line="794" pos:column="51">.</op:operator><name pos:line="794" pos:column="52">Elements</name></name><argument_list pos:line="794" pos:column="60">()</argument_list></call><op:operator pos:line="794" pos:column="62">.</op:operator><call><name pos:line="794" pos:column="63">Select</name><argument_list pos:line="794" pos:column="69">(<argument><expr><lambda><name pos:line="794" pos:column="70">e</name> <op:operator pos:line="794" pos:column="72">=&gt;</op:operator> <call><name pos:line="794" pos:column="75">ParseStatement</name><argument_list pos:line="794" pos:column="89">(<argument><expr><name pos:line="794" pos:column="90">e</name></expr></argument>, <argument><expr><name pos:line="794" pos:column="93">context</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="795" pos:column="21">tryStmt</name><op:operator pos:line="795" pos:column="28">.</op:operator><name pos:line="795" pos:column="29">AddChildStatements</name></name><argument_list pos:line="795" pos:column="47">(<argument><expr><name pos:line="795" pos:column="48">blockStatements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="796" pos:column="19">else <block pos:line="796" pos:column="24">{
                    <comment type="line" pos:line="797" pos:column="21">//add child</comment>
                    <expr_stmt><expr><call><name><name pos:line="798" pos:column="21">tryStmt</name><op:operator pos:line="798" pos:column="28">.</op:operator><name pos:line="798" pos:column="29">AddChildStatement</name></name><argument_list pos:line="798" pos:column="46">(<argument><expr><call><name pos:line="798" pos:column="47">ParseStatement</name><argument_list pos:line="798" pos:column="61">(<argument><expr><name pos:line="798" pos:column="62">tryChild</name></expr></argument>, <argument><expr><name pos:line="798" pos:column="72">context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if></else></if></else></if>
            }</block></foreach>

            <return pos:line="802" pos:column="13">return <expr><name pos:line="802" pos:column="20">tryStmt</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="805" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="806" pos:column="9">/// Creates a &lt;see cref="CatchStatement"/&gt; object for &lt;paramref name="catchElement"/&gt;.</comment>
        <comment type="line" pos:line="807" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="808" pos:column="9">/// &lt;param name="catchElement"&gt;The SRC.Catch element to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="809" pos:column="9">/// &lt;param name="context"&gt;The context to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="810" pos:column="9">/// &lt;returns&gt;A &lt;see cref="CatchStatement"/&gt; corresponding to &lt;paramref name="catchElement"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="811" pos:column="9">protected</specifier> <specifier pos:line="811" pos:column="19">virtual</specifier> <name pos:line="811" pos:column="27">CatchStatement</name></type> <name pos:line="811" pos:column="42">ParseCatchElement</name><parameter_list pos:line="811" pos:column="59">(<param><decl><type><name pos:line="811" pos:column="60">XElement</name></type> <name pos:line="811" pos:column="69">catchElement</name></decl></param>, <param><decl><type><name pos:line="811" pos:column="83">ParserContext</name></type> <name pos:line="811" pos:column="97">context</name></decl></param>)</parameter_list> <block pos:line="811" pos:column="106">{
            <if pos:line="812" pos:column="13">if<condition pos:line="812" pos:column="15">(<expr><name pos:line="812" pos:column="16">catchElement</name> <op:operator pos:line="812" pos:column="29">==</op:operator> <name pos:line="812" pos:column="32">null</name></expr>)</condition><then pos:line="812" pos:column="37">
                <throw pos:line="813" pos:column="17">throw <expr><op:operator pos:line="813" pos:column="23">new</op:operator> <call><name pos:line="813" pos:column="27">ArgumentNullException</name><argument_list pos:line="813" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="813" pos:column="49">"catchElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="814" pos:column="13">if<condition pos:line="814" pos:column="15">(<expr><name><name pos:line="814" pos:column="16">catchElement</name><op:operator pos:line="814" pos:column="28">.</op:operator><name pos:line="814" pos:column="29">Name</name></name> <op:operator pos:line="814" pos:column="34">!=</op:operator> <name><name pos:line="814" pos:column="37">SRC</name><op:operator pos:line="814" pos:column="40">.</op:operator><name pos:line="814" pos:column="41">Catch</name></name></expr>)</condition><then pos:line="814" pos:column="47">
                <throw pos:line="815" pos:column="17">throw <expr><op:operator pos:line="815" pos:column="23">new</op:operator> <call><name pos:line="815" pos:column="27">ArgumentException</name><argument_list pos:line="815" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="815" pos:column="45">"Must be a SRC.Catch element"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="815" pos:column="76">"catchElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="816" pos:column="13">if<condition pos:line="816" pos:column="15">(<expr><name pos:line="816" pos:column="16">context</name> <op:operator pos:line="816" pos:column="24">==</op:operator> <name pos:line="816" pos:column="27">null</name></expr>)</condition><then pos:line="816" pos:column="32">
                <throw pos:line="817" pos:column="17">throw <expr><op:operator pos:line="817" pos:column="23">new</op:operator> <call><name pos:line="817" pos:column="27">ArgumentNullException</name><argument_list pos:line="817" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="817" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="819" pos:column="13">var</name></type> <name pos:line="819" pos:column="17">catchStmt</name> <init pos:line="819" pos:column="27">= <expr><op:operator pos:line="819" pos:column="29">new</op:operator> <name pos:line="819" pos:column="33">CatchStatement</name> <block pos:line="819" pos:column="48">{<expr><name pos:line="819" pos:column="49">ProgrammingLanguage</name> <op:operator pos:line="819" pos:column="69">=</op:operator> <name pos:line="819" pos:column="71">ParserLanguage</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="820" pos:column="13">catchStmt</name><op:operator pos:line="820" pos:column="22">.</op:operator><name pos:line="820" pos:column="23">AddLocation</name></name><argument_list pos:line="820" pos:column="34">(<argument><expr><call><name><name pos:line="820" pos:column="35">context</name><op:operator pos:line="820" pos:column="42">.</op:operator><name pos:line="820" pos:column="43">CreateLocation</name></name><argument_list pos:line="820" pos:column="57">(<argument><expr><name pos:line="820" pos:column="58">catchElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <foreach pos:line="822" pos:column="13">foreach(<init><decl><type><name pos:line="822" pos:column="21">var</name></type> <name pos:line="822" pos:column="25">catchChild</name> <range pos:line="822" pos:column="36">in <expr><call><name><name pos:line="822" pos:column="39">catchElement</name><op:operator pos:line="822" pos:column="51">.</op:operator><name pos:line="822" pos:column="52">Elements</name></name><argument_list pos:line="822" pos:column="60">()</argument_list></call></expr></range></decl></init>) <block pos:line="822" pos:column="64">{
                <if pos:line="823" pos:column="17">if<condition pos:line="823" pos:column="19">(<expr><name><name pos:line="823" pos:column="20">catchChild</name><op:operator pos:line="823" pos:column="30">.</op:operator><name pos:line="823" pos:column="31">Name</name></name> <op:operator pos:line="823" pos:column="36">==</op:operator> <name><name pos:line="823" pos:column="39">SRC</name><op:operator pos:line="823" pos:column="42">.</op:operator><name pos:line="823" pos:column="43">ParameterList</name></name></expr>)</condition><then pos:line="823" pos:column="57"> <block pos:line="823" pos:column="58">{
                    <comment type="line" pos:line="824" pos:column="21">//add the catch parameter</comment>
                    <decl_stmt><decl><type><name pos:line="825" pos:column="21">var</name></type> <name pos:line="825" pos:column="25">paramElement</name> <init pos:line="825" pos:column="38">= <expr><call><name><name pos:line="825" pos:column="40">catchChild</name><op:operator pos:line="825" pos:column="50">.</op:operator><name pos:line="825" pos:column="51">Element</name></name><argument_list pos:line="825" pos:column="58">(<argument><expr><name><name pos:line="825" pos:column="59">SRC</name><op:operator pos:line="825" pos:column="62">.</op:operator><name pos:line="825" pos:column="63">Parameter</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="826" pos:column="21">if<condition pos:line="826" pos:column="23">(<expr><name pos:line="826" pos:column="24">paramElement</name> <op:operator pos:line="826" pos:column="37">!=</op:operator> <name pos:line="826" pos:column="40">null</name></expr>)</condition><then pos:line="826" pos:column="45"> <block pos:line="826" pos:column="46">{
                        <expr_stmt><expr><name><name pos:line="827" pos:column="25">catchStmt</name><op:operator pos:line="827" pos:column="34">.</op:operator><name pos:line="827" pos:column="35">Parameter</name></name> <op:operator pos:line="827" pos:column="45">=</op:operator> <call><name pos:line="827" pos:column="47">ParseParameterElement</name><argument_list pos:line="827" pos:column="68">(<argument><expr><name pos:line="827" pos:column="69">paramElement</name></expr></argument>, <argument><expr><name pos:line="827" pos:column="83">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then> <else pos:line="829" pos:column="19">else <if pos:line="829" pos:column="24">if<condition pos:line="829" pos:column="26">(<expr><name><name pos:line="829" pos:column="27">catchChild</name><op:operator pos:line="829" pos:column="37">.</op:operator><name pos:line="829" pos:column="38">Name</name></name> <op:operator pos:line="829" pos:column="43">==</op:operator> <name><name pos:line="829" pos:column="46">SRC</name><op:operator pos:line="829" pos:column="49">.</op:operator><name pos:line="829" pos:column="50">Block</name></name></expr>)</condition><then pos:line="829" pos:column="56"> <block pos:line="829" pos:column="57">{
                    <comment type="line" pos:line="830" pos:column="21">//add children of the block</comment>
                    <decl_stmt><decl><type><name pos:line="831" pos:column="21">var</name></type> <name pos:line="831" pos:column="25">blockStatements</name> <init pos:line="831" pos:column="41">= <expr><call><name><name pos:line="831" pos:column="43">catchChild</name><op:operator pos:line="831" pos:column="53">.</op:operator><name pos:line="831" pos:column="54">Elements</name></name><argument_list pos:line="831" pos:column="62">()</argument_list></call><op:operator pos:line="831" pos:column="64">.</op:operator><call><name pos:line="831" pos:column="65">Select</name><argument_list pos:line="831" pos:column="71">(<argument><expr><lambda><name pos:line="831" pos:column="72">e</name> <op:operator pos:line="831" pos:column="74">=&gt;</op:operator> <call><name pos:line="831" pos:column="77">ParseStatement</name><argument_list pos:line="831" pos:column="91">(<argument><expr><name pos:line="831" pos:column="92">e</name></expr></argument>, <argument><expr><name pos:line="831" pos:column="95">context</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="832" pos:column="21">catchStmt</name><op:operator pos:line="832" pos:column="30">.</op:operator><name pos:line="832" pos:column="31">AddChildStatements</name></name><argument_list pos:line="832" pos:column="49">(<argument><expr><name pos:line="832" pos:column="50">blockStatements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="833" pos:column="19">else <block pos:line="833" pos:column="24">{
                    <comment type="line" pos:line="834" pos:column="21">//add child</comment>
                    <expr_stmt><expr><call><name><name pos:line="835" pos:column="21">catchStmt</name><op:operator pos:line="835" pos:column="30">.</op:operator><name pos:line="835" pos:column="31">AddChildStatement</name></name><argument_list pos:line="835" pos:column="48">(<argument><expr><call><name pos:line="835" pos:column="49">ParseStatement</name><argument_list pos:line="835" pos:column="63">(<argument><expr><name pos:line="835" pos:column="64">catchChild</name></expr></argument>, <argument><expr><name pos:line="835" pos:column="76">context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if></else></if>
            }</block></foreach>

            <return pos:line="839" pos:column="13">return <expr><name pos:line="839" pos:column="20">catchStmt</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="842" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="843" pos:column="9">/// Creates a &lt;see cref="Statement"/&gt; object for &lt;paramref name="stmtElement"/&gt;.</comment>
        <comment type="line" pos:line="844" pos:column="9">/// The expression contained within &lt;paramref name="stmtElement"/&gt; will be parsed and placed in </comment>
        <comment type="line" pos:line="845" pos:column="9">/// Statement.Content.</comment>
        <comment type="line" pos:line="846" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="847" pos:column="9">/// &lt;param name="stmtElement"&gt;The SRC.ExpressionStatement element to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="848" pos:column="9">/// &lt;param name="context"&gt;The context to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="849" pos:column="9">/// &lt;returns&gt;A &lt;see cref="Statement"/&gt; corresponding to &lt;paramref name="stmtElement"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="850" pos:column="9">protected</specifier> <specifier pos:line="850" pos:column="19">virtual</specifier> <name pos:line="850" pos:column="27">Statement</name></type> <name pos:line="850" pos:column="37">ParseExpressionStatementElement</name><parameter_list pos:line="850" pos:column="68">(<param><decl><type><name pos:line="850" pos:column="69">XElement</name></type> <name pos:line="850" pos:column="78">stmtElement</name></decl></param>, <param><decl><type><name pos:line="850" pos:column="91">ParserContext</name></type> <name pos:line="850" pos:column="105">context</name></decl></param>)</parameter_list> <block pos:line="850" pos:column="114">{
            <if pos:line="851" pos:column="13">if<condition pos:line="851" pos:column="15">(<expr><name pos:line="851" pos:column="16">stmtElement</name> <op:operator pos:line="851" pos:column="28">==</op:operator> <name pos:line="851" pos:column="31">null</name></expr>)</condition><then pos:line="851" pos:column="36">
                <throw pos:line="852" pos:column="17">throw <expr><op:operator pos:line="852" pos:column="23">new</op:operator> <call><name pos:line="852" pos:column="27">ArgumentNullException</name><argument_list pos:line="852" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="852" pos:column="49">"stmtElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="853" pos:column="13">if<condition pos:line="853" pos:column="15">(<expr><name><name pos:line="853" pos:column="16">stmtElement</name><op:operator pos:line="853" pos:column="27">.</op:operator><name pos:line="853" pos:column="28">Name</name></name> <op:operator pos:line="853" pos:column="33">!=</op:operator> <name><name pos:line="853" pos:column="36">SRC</name><op:operator pos:line="853" pos:column="39">.</op:operator><name pos:line="853" pos:column="40">ExpressionStatement</name></name></expr>)</condition><then pos:line="853" pos:column="60">
                <throw pos:line="854" pos:column="17">throw <expr><op:operator pos:line="854" pos:column="23">new</op:operator> <call><name pos:line="854" pos:column="27">ArgumentException</name><argument_list pos:line="854" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="854" pos:column="45">"Must be a SRC.ExpressionStatement element"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="854" pos:column="90">"stmtElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="855" pos:column="13">if<condition pos:line="855" pos:column="15">(<expr><name pos:line="855" pos:column="16">context</name> <op:operator pos:line="855" pos:column="24">==</op:operator> <name pos:line="855" pos:column="27">null</name></expr>)</condition><then pos:line="855" pos:column="32">
                <throw pos:line="856" pos:column="17">throw <expr><op:operator pos:line="856" pos:column="23">new</op:operator> <call><name pos:line="856" pos:column="27">ArgumentNullException</name><argument_list pos:line="856" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="856" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="858" pos:column="13">var</name></type> <name pos:line="858" pos:column="17">stmt</name> <init pos:line="858" pos:column="22">= <expr><op:operator pos:line="858" pos:column="24">new</op:operator> <call><name pos:line="858" pos:column="28">Statement</name><argument_list pos:line="858" pos:column="37">()</argument_list></call> <block pos:line="858" pos:column="40">{<expr><name pos:line="858" pos:column="41">ProgrammingLanguage</name> <op:operator pos:line="858" pos:column="61">=</op:operator> <name pos:line="858" pos:column="63">ParserLanguage</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="859" pos:column="13">stmt</name><op:operator pos:line="859" pos:column="17">.</op:operator><name pos:line="859" pos:column="18">AddLocation</name></name><argument_list pos:line="859" pos:column="29">(<argument><expr><call><name><name pos:line="859" pos:column="30">context</name><op:operator pos:line="859" pos:column="37">.</op:operator><name pos:line="859" pos:column="38">CreateLocation</name></name><argument_list pos:line="859" pos:column="52">(<argument><expr><name pos:line="859" pos:column="53">stmtElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <foreach pos:line="861" pos:column="13">foreach(<init><decl><type><name pos:line="861" pos:column="21">var</name></type> <name pos:line="861" pos:column="25">child</name> <range pos:line="861" pos:column="31">in <expr><call><name><name pos:line="861" pos:column="34">stmtElement</name><op:operator pos:line="861" pos:column="45">.</op:operator><name pos:line="861" pos:column="46">Elements</name></name><argument_list pos:line="861" pos:column="54">()</argument_list></call></expr></range></decl></init>) <block pos:line="861" pos:column="58">{
                <if pos:line="862" pos:column="17">if<condition pos:line="862" pos:column="19">(<expr><name><name pos:line="862" pos:column="20">child</name><op:operator pos:line="862" pos:column="25">.</op:operator><name pos:line="862" pos:column="26">Name</name></name> <op:operator pos:line="862" pos:column="31">==</op:operator> <name><name pos:line="862" pos:column="34">SRC</name><op:operator pos:line="862" pos:column="37">.</op:operator><name pos:line="862" pos:column="38">Expression</name></name></expr>)</condition><then pos:line="862" pos:column="49"> <block pos:line="862" pos:column="50">{
                    <expr_stmt><expr><name><name pos:line="863" pos:column="21">stmt</name><op:operator pos:line="863" pos:column="25">.</op:operator><name pos:line="863" pos:column="26">Content</name></name> <op:operator pos:line="863" pos:column="34">=</op:operator> <call><name pos:line="863" pos:column="36">ParseExpressionElement</name><argument_list pos:line="863" pos:column="58">(<argument><expr><name pos:line="863" pos:column="59">child</name></expr></argument>, <argument><expr><name pos:line="863" pos:column="66">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="864" pos:column="19">else <block pos:line="864" pos:column="24">{
                    <comment type="line" pos:line="865" pos:column="21">//This should probably only be comments?</comment>
                    <expr_stmt><expr><call><name><name pos:line="866" pos:column="21">stmt</name><op:operator pos:line="866" pos:column="25">.</op:operator><name pos:line="866" pos:column="26">AddChildStatement</name></name><argument_list pos:line="866" pos:column="43">(<argument><expr><call><name pos:line="866" pos:column="44">ParseStatement</name><argument_list pos:line="866" pos:column="58">(<argument><expr><name pos:line="866" pos:column="59">child</name></expr></argument>, <argument><expr><name pos:line="866" pos:column="66">context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></foreach>

            <return pos:line="870" pos:column="13">return <expr><name pos:line="870" pos:column="20">stmt</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="873" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="874" pos:column="9">/// Creates a &lt;see cref="Statement"/&gt; object for &lt;paramref name="stmtElement"/&gt;.</comment>
        <comment type="line" pos:line="875" pos:column="9">/// The expression contained within &lt;paramref name="stmtElement"/&gt; will be parsed and placed in </comment>
        <comment type="line" pos:line="876" pos:column="9">/// Statement.Content.</comment>
        <comment type="line" pos:line="877" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="878" pos:column="9">/// &lt;param name="stmtElement"&gt;The SRC.DeclarationStatement element to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="879" pos:column="9">/// &lt;param name="context"&gt;The context to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="880" pos:column="9">/// &lt;returns&gt;A &lt;see cref="DeclarationStatement"/&gt; corresponding to &lt;paramref name="stmtElement"/&gt;.</comment>
        <comment type="line" pos:line="881" pos:column="9">/// The return type is &lt;see cref="Statement"/&gt; so that subclasses can return another type, as necessary. &lt;/returns&gt;</comment>
        <function><type><specifier pos:line="882" pos:column="9">protected</specifier> <specifier pos:line="882" pos:column="19">virtual</specifier> <name pos:line="882" pos:column="27">Statement</name></type> <name pos:line="882" pos:column="37">ParseDeclarationStatementElement</name><parameter_list pos:line="882" pos:column="69">(<param><decl><type><name pos:line="882" pos:column="70">XElement</name></type> <name pos:line="882" pos:column="79">stmtElement</name></decl></param>, <param><decl><type><name pos:line="882" pos:column="92">ParserContext</name></type> <name pos:line="882" pos:column="106">context</name></decl></param>)</parameter_list> <block pos:line="882" pos:column="115">{
            <if pos:line="883" pos:column="13">if<condition pos:line="883" pos:column="15">(<expr><name pos:line="883" pos:column="16">stmtElement</name> <op:operator pos:line="883" pos:column="28">==</op:operator> <name pos:line="883" pos:column="31">null</name></expr>)</condition><then pos:line="883" pos:column="36">
                <throw pos:line="884" pos:column="17">throw <expr><op:operator pos:line="884" pos:column="23">new</op:operator> <call><name pos:line="884" pos:column="27">ArgumentNullException</name><argument_list pos:line="884" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="884" pos:column="49">"stmtElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="885" pos:column="13">if<condition pos:line="885" pos:column="15">(<expr><name><name pos:line="885" pos:column="16">stmtElement</name><op:operator pos:line="885" pos:column="27">.</op:operator><name pos:line="885" pos:column="28">Name</name></name> <op:operator pos:line="885" pos:column="33">!=</op:operator> <name><name pos:line="885" pos:column="36">SRC</name><op:operator pos:line="885" pos:column="39">.</op:operator><name pos:line="885" pos:column="40">DeclarationStatement</name></name></expr>)</condition><then pos:line="885" pos:column="61">
                <throw pos:line="886" pos:column="17">throw <expr><op:operator pos:line="886" pos:column="23">new</op:operator> <call><name pos:line="886" pos:column="27">ArgumentException</name><argument_list pos:line="886" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="886" pos:column="45">"Must be a SRC.DeclarationStatement element"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="886" pos:column="91">"stmtElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="887" pos:column="13">if<condition pos:line="887" pos:column="15">(<expr><name pos:line="887" pos:column="16">context</name> <op:operator pos:line="887" pos:column="24">==</op:operator> <name pos:line="887" pos:column="27">null</name></expr>)</condition><then pos:line="887" pos:column="32">
                <throw pos:line="888" pos:column="17">throw <expr><op:operator pos:line="888" pos:column="23">new</op:operator> <call><name pos:line="888" pos:column="27">ArgumentNullException</name><argument_list pos:line="888" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="888" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="890" pos:column="13">var</name></type> <name pos:line="890" pos:column="17">stmt</name> <init pos:line="890" pos:column="22">= <expr><op:operator pos:line="890" pos:column="24">new</op:operator> <call><name pos:line="890" pos:column="28">DeclarationStatement</name><argument_list pos:line="890" pos:column="48">()</argument_list></call> <block pos:line="890" pos:column="51">{
                <expr><name pos:line="891" pos:column="17">ProgrammingLanguage</name> <op:operator pos:line="891" pos:column="37">=</op:operator> <name pos:line="891" pos:column="39">ParserLanguage</name></expr>,
                <expr><name pos:line="892" pos:column="17">Content</name> <op:operator pos:line="892" pos:column="25">=</op:operator> <call><name pos:line="892" pos:column="27">ParseExpression</name><argument_list pos:line="892" pos:column="42">(<argument><expr><call><name pos:line="892" pos:column="43">GetChildExpressions</name><argument_list pos:line="892" pos:column="62">(<argument><expr><name pos:line="892" pos:column="63">stmtElement</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="892" pos:column="77">context</name></expr></argument>)</argument_list></call></expr>
            }</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="894" pos:column="13">stmt</name><op:operator pos:line="894" pos:column="17">.</op:operator><name pos:line="894" pos:column="18">AddLocation</name></name><argument_list pos:line="894" pos:column="29">(<argument><expr><call><name><name pos:line="894" pos:column="30">context</name><op:operator pos:line="894" pos:column="37">.</op:operator><name pos:line="894" pos:column="38">CreateLocation</name></name><argument_list pos:line="894" pos:column="52">(<argument><expr><name pos:line="894" pos:column="53">stmtElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:line="896" pos:column="13">return <expr><name pos:line="896" pos:column="20">stmt</name></expr>;</return>
        }</block></function>


        <comment type="line" pos:line="900" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="901" pos:column="9">/// Creates a &lt;see cref="NamespaceDefinition"/&gt; object for &lt;paramref name="namespaceElement"/&gt;</comment>
        <comment type="line" pos:line="902" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="903" pos:column="9">/// &lt;param name="namespaceElement"&gt;The element to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="904" pos:column="9">/// &lt;param name="context"&gt;The context to use.&lt;/param&gt;</comment>
        <function_decl><type><specifier pos:line="905" pos:column="9">protected</specifier> <specifier pos:line="905" pos:column="19">abstract</specifier> <name pos:line="905" pos:column="28">NamespaceDefinition</name></type> <name pos:line="905" pos:column="48">ParseNamespaceElement</name><parameter_list pos:line="905" pos:column="69">(<param><decl><type><name pos:line="905" pos:column="70">XElement</name></type> <name pos:line="905" pos:column="79">namespaceElement</name></decl></param>, <param><decl><type><name pos:line="905" pos:column="97">ParserContext</name></type> <name pos:line="905" pos:column="111">context</name></decl></param>)</parameter_list>;</function_decl>

        <comment type="line" pos:line="907" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="908" pos:column="9">/// Parses the given &lt;paramref name="aliasElement"/&gt; and creates an ImportStatement or AliasStatement from it.</comment>
        <comment type="line" pos:line="909" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="910" pos:column="9">/// &lt;param name="aliasElement"&gt;The alias element to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="911" pos:column="9">/// &lt;param name="context"&gt;The parser context to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="912" pos:column="9">/// &lt;returns&gt;An ImportStatement if the element is an import, or an AliasStatement if it is an alias.&lt;/returns&gt;</comment>
        <function_decl><type><specifier pos:line="913" pos:column="9">protected</specifier> <specifier pos:line="913" pos:column="19">abstract</specifier> <name pos:line="913" pos:column="28">Statement</name></type> <name pos:line="913" pos:column="38">ParseAliasElement</name><parameter_list pos:line="913" pos:column="55">(<param><decl><type><name pos:line="913" pos:column="56">XElement</name></type> <name pos:line="913" pos:column="65">aliasElement</name></decl></param>, <param><decl><type><name pos:line="913" pos:column="79">ParserContext</name></type> <name pos:line="913" pos:column="93">context</name></decl></param>)</parameter_list>;</function_decl>


        <comment type="line" pos:line="916" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="917" pos:column="9">/// Parses an element corresponding to a type definition and creates a TypeDefinition object </comment>
        <comment type="line" pos:line="918" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="919" pos:column="9">/// &lt;param name="typeElement"&gt;The type element to parse. This must be one of the elements contained in TypeElementNames.&lt;/param&gt;</comment>
        <comment type="line" pos:line="920" pos:column="9">/// &lt;param name="context"&gt;The parser context&lt;/param&gt;</comment>
        <comment type="line" pos:line="921" pos:column="9">/// &lt;returns&gt;A TypeDefinition parsed from the element&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="922" pos:column="9">protected</specifier> <specifier pos:line="922" pos:column="19">virtual</specifier> <name pos:line="922" pos:column="27">TypeDefinition</name></type> <name pos:line="922" pos:column="42">ParseTypeElement</name><parameter_list pos:line="922" pos:column="58">(<param><decl><type><name pos:line="922" pos:column="59">XElement</name></type> <name pos:line="922" pos:column="68">typeElement</name></decl></param>, <param><decl><type><name pos:line="922" pos:column="81">ParserContext</name></type> <name pos:line="922" pos:column="95">context</name></decl></param>)</parameter_list> <block pos:line="922" pos:column="104">{
            <if pos:line="923" pos:column="13">if<condition pos:line="923" pos:column="15">(<expr><name pos:line="923" pos:column="16">null</name> <op:operator pos:line="923" pos:column="21">==</op:operator> <name pos:line="923" pos:column="24">typeElement</name></expr>)</condition><then pos:line="923" pos:column="36">
                <throw pos:line="924" pos:column="17">throw <expr><op:operator pos:line="924" pos:column="23">new</op:operator> <call><name pos:line="924" pos:column="27">ArgumentNullException</name><argument_list pos:line="924" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="924" pos:column="49">"typeElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="925" pos:column="13">if<condition pos:line="925" pos:column="15">(<expr><name pos:line="925" pos:column="16">context</name> <op:operator pos:line="925" pos:column="24">==</op:operator> <name pos:line="925" pos:column="27">null</name></expr>)</condition><then pos:line="925" pos:column="32">
                <throw pos:line="926" pos:column="17">throw <expr><op:operator pos:line="926" pos:column="23">new</op:operator> <call><name pos:line="926" pos:column="27">ArgumentNullException</name><argument_list pos:line="926" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="926" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="928" pos:column="13">var</name></type> <name pos:line="928" pos:column="17">typeDefinition</name> <init pos:line="928" pos:column="32">= <expr><op:operator pos:line="928" pos:column="34">new</op:operator> <call><name pos:line="928" pos:column="38">TypeDefinition</name><argument_list pos:line="928" pos:column="52">()</argument_list></call> <block pos:line="928" pos:column="55">{
                <expr><name pos:line="929" pos:column="17">Accessibility</name> <op:operator pos:line="929" pos:column="31">=</op:operator> <call><name pos:line="929" pos:column="33">GetAccessModifierForType</name><argument_list pos:line="929" pos:column="57">(<argument><expr><name pos:line="929" pos:column="58">typeElement</name></expr></argument>)</argument_list></call></expr>,
                <expr><name pos:line="930" pos:column="17">Kind</name> <op:operator pos:line="930" pos:column="22">=</op:operator> <call><name><name pos:line="930" pos:column="24">XNameMaps</name><op:operator pos:line="930" pos:column="33">.</op:operator><name pos:line="930" pos:column="34">GetKindForXElement</name></name><argument_list pos:line="930" pos:column="52">(<argument><expr><name pos:line="930" pos:column="53">typeElement</name></expr></argument>)</argument_list></call></expr>,
                <expr><name pos:line="931" pos:column="17">Name</name> <op:operator pos:line="931" pos:column="22">=</op:operator> <call><name pos:line="931" pos:column="24">GetNameForType</name><argument_list pos:line="931" pos:column="38">(<argument><expr><name pos:line="931" pos:column="39">typeElement</name></expr></argument>)</argument_list></call></expr>,
                <expr><name pos:line="932" pos:column="17">ProgrammingLanguage</name> <op:operator pos:line="932" pos:column="37">=</op:operator> <name pos:line="932" pos:column="39">ParserLanguage</name></expr>
            }</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="934" pos:column="13">typeDefinition</name><op:operator pos:line="934" pos:column="27">.</op:operator><name pos:line="934" pos:column="28">AddLocation</name></name><argument_list pos:line="934" pos:column="39">(<argument><expr><call><name><name pos:line="934" pos:column="40">context</name><op:operator pos:line="934" pos:column="47">.</op:operator><name pos:line="934" pos:column="48">CreateLocation</name></name><argument_list pos:line="934" pos:column="62">(<argument><expr><name pos:line="934" pos:column="63">typeElement</name></expr></argument>, <argument><expr><call><name pos:line="934" pos:column="76">ContainerIsReference</name><argument_list pos:line="934" pos:column="96">(<argument><expr><name pos:line="934" pos:column="97">typeElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <foreach pos:line="936" pos:column="13">foreach(<init><decl><type><name pos:line="936" pos:column="21">var</name></type> <name pos:line="936" pos:column="25">parentTypeElement</name> <range pos:line="936" pos:column="43">in <expr><call><name pos:line="936" pos:column="46">GetParentTypeUseElements</name><argument_list pos:line="936" pos:column="70">(<argument><expr><name pos:line="936" pos:column="71">typeElement</name></expr></argument>)</argument_list></call></expr></range></decl></init>) <block pos:line="936" pos:column="85">{
                <decl_stmt><decl><type><name pos:line="937" pos:column="17">var</name></type> <name pos:line="937" pos:column="21">parentTypeUse</name> <init pos:line="937" pos:column="35">= <expr><call><name pos:line="937" pos:column="37">ParseTypeUseElement</name><argument_list pos:line="937" pos:column="56">(<argument><expr><name pos:line="937" pos:column="57">parentTypeElement</name></expr></argument>, <argument><expr><name pos:line="937" pos:column="76">context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="938" pos:column="17">typeDefinition</name><op:operator pos:line="938" pos:column="31">.</op:operator><name pos:line="938" pos:column="32">AddParentType</name></name><argument_list pos:line="938" pos:column="45">(<argument><expr><name pos:line="938" pos:column="46">parentTypeUse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
            <comment type="line" pos:line="940" pos:column="13">//get the block containing the type members, and add them as children</comment>
            <decl_stmt><decl><type><name pos:line="941" pos:column="13">var</name></type> <name pos:line="941" pos:column="17">typeBlock</name> <init pos:line="941" pos:column="27">= <expr><call><name><name pos:line="941" pos:column="29">typeElement</name><op:operator pos:line="941" pos:column="40">.</op:operator><name pos:line="941" pos:column="41">Element</name></name><argument_list pos:line="941" pos:column="48">(<argument><expr><name><name pos:line="941" pos:column="49">SRC</name><op:operator pos:line="941" pos:column="52">.</op:operator><name pos:line="941" pos:column="53">Block</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="942" pos:column="13">if<condition pos:line="942" pos:column="15">(<expr><name pos:line="942" pos:column="16">typeBlock</name> <op:operator pos:line="942" pos:column="26">!=</op:operator> <name pos:line="942" pos:column="29">null</name></expr>)</condition><then pos:line="942" pos:column="34"> <block pos:line="942" pos:column="35">{
                <foreach pos:line="943" pos:column="17">foreach(<init><decl><type><name pos:line="943" pos:column="25">var</name></type> <name pos:line="943" pos:column="29">child</name> <range pos:line="943" pos:column="35">in <expr><call><name><name pos:line="943" pos:column="38">typeBlock</name><op:operator pos:line="943" pos:column="47">.</op:operator><name pos:line="943" pos:column="48">Elements</name></name><argument_list pos:line="943" pos:column="56">()</argument_list></call></expr></range></decl></init>) <block pos:line="943" pos:column="60">{
                    <expr_stmt><expr><call><name><name pos:line="944" pos:column="21">typeDefinition</name><op:operator pos:line="944" pos:column="35">.</op:operator><name pos:line="944" pos:column="36">AddChildStatement</name></name><argument_list pos:line="944" pos:column="53">(<argument><expr><call><name pos:line="944" pos:column="54">ParseStatement</name><argument_list pos:line="944" pos:column="68">(<argument><expr><name pos:line="944" pos:column="69">child</name></expr></argument>, <argument><expr><name pos:line="944" pos:column="76">context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
            }</block></then></if>

            <return pos:line="948" pos:column="13">return <expr><name pos:line="948" pos:column="20">typeDefinition</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="951" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="952" pos:column="9">/// Creates a global &lt;see cref="NamespaceDefinition"/&gt; object for &lt;paramref name="unitElement"/&gt;.</comment>
        <comment type="line" pos:line="953" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="954" pos:column="9">/// &lt;param name="unitElement"&gt;The SRC.Unit element to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="955" pos:column="9">/// &lt;param name="context"&gt;The parser context to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="956" pos:column="9">/// &lt;returns&gt;A NamespaceDefinition corresponding to &lt;paramref name="unitElement"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="957" pos:column="9">protected</specifier> <specifier pos:line="957" pos:column="19">virtual</specifier> <name pos:line="957" pos:column="27">NamespaceDefinition</name></type> <name pos:line="957" pos:column="47">ParseUnitElement</name><parameter_list pos:line="957" pos:column="63">(<param><decl><type><name pos:line="957" pos:column="64">XElement</name></type> <name pos:line="957" pos:column="73">unitElement</name></decl></param>, <param><decl><type><name pos:line="957" pos:column="86">ParserContext</name></type> <name pos:line="957" pos:column="100">context</name></decl></param>)</parameter_list> <block pos:line="957" pos:column="109">{
            <if pos:line="958" pos:column="13">if<condition pos:line="958" pos:column="15">(<expr><name pos:line="958" pos:column="16">null</name> <op:operator pos:line="958" pos:column="21">==</op:operator> <name pos:line="958" pos:column="24">unitElement</name></expr>)</condition><then pos:line="958" pos:column="36">
                <throw pos:line="959" pos:column="17">throw <expr><op:operator pos:line="959" pos:column="23">new</op:operator> <call><name pos:line="959" pos:column="27">ArgumentNullException</name><argument_list pos:line="959" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="959" pos:column="49">"unitElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="960" pos:column="13">if<condition pos:line="960" pos:column="15">(<expr><name><name pos:line="960" pos:column="16">SRC</name><op:operator pos:line="960" pos:column="19">.</op:operator><name pos:line="960" pos:column="20">Unit</name></name> <op:operator pos:line="960" pos:column="25">!=</op:operator> <name><name pos:line="960" pos:column="28">unitElement</name><op:operator pos:line="960" pos:column="39">.</op:operator><name pos:line="960" pos:column="40">Name</name></name></expr>)</condition><then pos:line="960" pos:column="45">
                <throw pos:line="961" pos:column="17">throw <expr><op:operator pos:line="961" pos:column="23">new</op:operator> <call><name pos:line="961" pos:column="27">ArgumentException</name><argument_list pos:line="961" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="961" pos:column="45">"should be a SRC.Unit"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="961" pos:column="69">"unitElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="962" pos:column="13">if<condition pos:line="962" pos:column="15">(<expr><name pos:line="962" pos:column="16">context</name> <op:operator pos:line="962" pos:column="24">==</op:operator> <name pos:line="962" pos:column="27">null</name></expr>)</condition><then pos:line="962" pos:column="32">
                <throw pos:line="963" pos:column="17">throw <expr><op:operator pos:line="963" pos:column="23">new</op:operator> <call><name pos:line="963" pos:column="27">ArgumentNullException</name><argument_list pos:line="963" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="963" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <expr_stmt><expr><name><name pos:line="964" pos:column="13">context</name><op:operator pos:line="964" pos:column="20">.</op:operator><name pos:line="964" pos:column="21">FileUnit</name></name> <op:operator pos:line="964" pos:column="30">=</op:operator> <name pos:line="964" pos:column="32">unitElement</name></expr>;</expr_stmt>
            <comment type="line" pos:line="965" pos:column="13">//var aliases = from aliasStatement in GetAliasElementsForFile(unitElement)</comment>
            <comment type="line" pos:line="966" pos:column="13">//              select ParseAliasElement(aliasStatement, context);</comment>

            <comment type="line" pos:line="968" pos:column="13">//context.Aliases = new Collection&lt;Alias&gt;(aliases.ToList());</comment>

            <comment type="line" pos:line="970" pos:column="13">//create a global namespace for the file unit</comment>
            <decl_stmt><decl><type><name pos:line="971" pos:column="13">var</name></type> <name pos:line="971" pos:column="17">namespaceForUnit</name> <init pos:line="971" pos:column="34">= <expr><op:operator pos:line="971" pos:column="36">new</op:operator> <call><name pos:line="971" pos:column="40">NamespaceDefinition</name><argument_list pos:line="971" pos:column="59">()</argument_list></call> <block pos:line="971" pos:column="62">{<expr><name pos:line="971" pos:column="63">ProgrammingLanguage</name> <op:operator pos:line="971" pos:column="83">=</op:operator> <name pos:line="971" pos:column="85">ParserLanguage</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="972" pos:column="13">namespaceForUnit</name><op:operator pos:line="972" pos:column="29">.</op:operator><name pos:line="972" pos:column="30">AddLocation</name></name><argument_list pos:line="972" pos:column="41">(<argument><expr><call><name><name pos:line="972" pos:column="42">context</name><op:operator pos:line="972" pos:column="49">.</op:operator><name pos:line="972" pos:column="50">CreateLocation</name></name><argument_list pos:line="972" pos:column="64">(<argument><expr><name pos:line="972" pos:column="65">unitElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <foreach pos:line="974" pos:column="13">foreach(<init><decl><type><name pos:line="974" pos:column="21">var</name></type> <name pos:line="974" pos:column="25">child</name> <range pos:line="974" pos:column="31">in <expr><call><name><name pos:line="974" pos:column="34">unitElement</name><op:operator pos:line="974" pos:column="45">.</op:operator><name pos:line="974" pos:column="46">Elements</name></name><argument_list pos:line="974" pos:column="54">()</argument_list></call></expr></range></decl></init>) <block pos:line="974" pos:column="58">{
                <expr_stmt><expr><call><name><name pos:line="975" pos:column="17">namespaceForUnit</name><op:operator pos:line="975" pos:column="33">.</op:operator><name pos:line="975" pos:column="34">AddChildStatement</name></name><argument_list pos:line="975" pos:column="51">(<argument><expr><call><name pos:line="975" pos:column="52">ParseStatement</name><argument_list pos:line="975" pos:column="66">(<argument><expr><name pos:line="975" pos:column="67">child</name></expr></argument>, <argument><expr><name pos:line="975" pos:column="74">context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
            <return pos:line="977" pos:column="13">return <expr><name pos:line="977" pos:column="20">namespaceForUnit</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="980" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="981" pos:column="9">/// Creates a BlockStatement from the given block element. </comment>
        <comment type="line" pos:line="982" pos:column="9">/// This method is only for parsing free-standing blocks, which are very rare. </comment>
        <comment type="line" pos:line="983" pos:column="9">/// Most blocks are parsed by the construct they are attached to, e.g. an if-statement or class definition.</comment>
        <comment type="line" pos:line="984" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="985" pos:column="9">/// &lt;param name="blockElement"&gt;The SRC.Block element to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="986" pos:column="9">/// &lt;param name="context"&gt;The parser context to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="987" pos:column="9">/// &lt;returns&gt;A BlockStatement corresponding to blockElement.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="988" pos:column="9">protected</specifier> <specifier pos:line="988" pos:column="19">virtual</specifier> <name pos:line="988" pos:column="27">BlockStatement</name></type> <name pos:line="988" pos:column="42">ParseBlockElement</name><parameter_list pos:line="988" pos:column="59">(<param><decl><type><name pos:line="988" pos:column="60">XElement</name></type> <name pos:line="988" pos:column="69">blockElement</name></decl></param>, <param><decl><type><name pos:line="988" pos:column="83">ParserContext</name></type> <name pos:line="988" pos:column="97">context</name></decl></param>)</parameter_list> <block pos:line="988" pos:column="106">{
            <if pos:line="989" pos:column="13">if<condition pos:line="989" pos:column="15">(<expr><name pos:line="989" pos:column="16">blockElement</name> <op:operator pos:line="989" pos:column="29">==</op:operator> <name pos:line="989" pos:column="32">null</name></expr>)</condition><then pos:line="989" pos:column="37">
                <throw pos:line="990" pos:column="17">throw <expr><op:operator pos:line="990" pos:column="23">new</op:operator> <call><name pos:line="990" pos:column="27">ArgumentNullException</name><argument_list pos:line="990" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="990" pos:column="49">"blockElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="991" pos:column="13">if<condition pos:line="991" pos:column="15">(<expr><name><name pos:line="991" pos:column="16">blockElement</name><op:operator pos:line="991" pos:column="28">.</op:operator><name pos:line="991" pos:column="29">Name</name></name> <op:operator pos:line="991" pos:column="34">!=</op:operator> <name><name pos:line="991" pos:column="37">SRC</name><op:operator pos:line="991" pos:column="40">.</op:operator><name pos:line="991" pos:column="41">Block</name></name></expr>)</condition><then pos:line="991" pos:column="47">
                <throw pos:line="992" pos:column="17">throw <expr><op:operator pos:line="992" pos:column="23">new</op:operator> <call><name pos:line="992" pos:column="27">ArgumentException</name><argument_list pos:line="992" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="992" pos:column="45">"must be a SRC.Block element"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="992" pos:column="76">"blockElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="993" pos:column="13">if<condition pos:line="993" pos:column="15">(<expr><name pos:line="993" pos:column="16">context</name> <op:operator pos:line="993" pos:column="24">==</op:operator> <name pos:line="993" pos:column="27">null</name></expr>)</condition><then pos:line="993" pos:column="32">
                <throw pos:line="994" pos:column="17">throw <expr><op:operator pos:line="994" pos:column="23">new</op:operator> <call><name pos:line="994" pos:column="27">ArgumentNullException</name><argument_list pos:line="994" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="994" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="996" pos:column="13">var</name></type> <name pos:line="996" pos:column="17">bs</name> <init pos:line="996" pos:column="20">= <expr><op:operator pos:line="996" pos:column="22">new</op:operator> <call><name pos:line="996" pos:column="26">BlockStatement</name><argument_list pos:line="996" pos:column="40">()</argument_list></call> <block pos:line="996" pos:column="43">{<expr><name pos:line="996" pos:column="44">ProgrammingLanguage</name> <op:operator pos:line="996" pos:column="64">=</op:operator> <name pos:line="996" pos:column="66">ParserLanguage</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="997" pos:column="13">bs</name><op:operator pos:line="997" pos:column="15">.</op:operator><name pos:line="997" pos:column="16">AddLocation</name></name><argument_list pos:line="997" pos:column="27">(<argument><expr><call><name><name pos:line="997" pos:column="28">context</name><op:operator pos:line="997" pos:column="35">.</op:operator><name pos:line="997" pos:column="36">CreateLocation</name></name><argument_list pos:line="997" pos:column="50">(<argument><expr><name pos:line="997" pos:column="51">blockElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <foreach pos:line="999" pos:column="13">foreach(<init><decl><type><name pos:line="999" pos:column="21">var</name></type> <name pos:line="999" pos:column="25">child</name> <range pos:line="999" pos:column="31">in <expr><call><name><name pos:line="999" pos:column="34">blockElement</name><op:operator pos:line="999" pos:column="46">.</op:operator><name pos:line="999" pos:column="47">Elements</name></name><argument_list pos:line="999" pos:column="55">()</argument_list></call></expr></range></decl></init>) <block pos:line="999" pos:column="59">{
                <expr_stmt><expr><call><name><name pos:line="1000" pos:column="17">bs</name><op:operator pos:line="1000" pos:column="19">.</op:operator><name pos:line="1000" pos:column="20">AddChildStatement</name></name><argument_list pos:line="1000" pos:column="37">(<argument><expr><call><name pos:line="1000" pos:column="38">ParseStatement</name><argument_list pos:line="1000" pos:column="52">(<argument><expr><name pos:line="1000" pos:column="53">child</name></expr></argument>, <argument><expr><name pos:line="1000" pos:column="60">context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>

            <return pos:line="1003" pos:column="13">return <expr><name pos:line="1003" pos:column="20">bs</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="1006" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="1007" pos:column="9">/// Creates an ExternStatement from the given extern element.</comment>
        <comment type="line" pos:line="1008" pos:column="9">/// Note that only extern statements with a linkage specifier, e.g. "extern "C" int foo();", are marked up with SRC.Extern.</comment>
        <comment type="line" pos:line="1009" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="1010" pos:column="9">/// &lt;param name="externElement"&gt;The SRC.Extern element to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="1011" pos:column="9">/// &lt;param name="context"&gt;The parser context to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="1012" pos:column="9">/// &lt;returns&gt;An ExternStatement corresponding to externElement.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="1013" pos:column="9">protected</specifier> <specifier pos:line="1013" pos:column="19">virtual</specifier> <name pos:line="1013" pos:column="27">ExternStatement</name></type> <name pos:line="1013" pos:column="43">ParseExternElement</name><parameter_list pos:line="1013" pos:column="61">(<param><decl><type><name pos:line="1013" pos:column="62">XElement</name></type> <name pos:line="1013" pos:column="71">externElement</name></decl></param>, <param><decl><type><name pos:line="1013" pos:column="86">ParserContext</name></type> <name pos:line="1013" pos:column="100">context</name></decl></param>)</parameter_list> <block pos:line="1013" pos:column="109">{
            <if pos:line="1014" pos:column="13">if<condition pos:line="1014" pos:column="15">(<expr><name pos:line="1014" pos:column="16">externElement</name> <op:operator pos:line="1014" pos:column="30">==</op:operator> <name pos:line="1014" pos:column="33">null</name></expr>)</condition><then pos:line="1014" pos:column="38">
                <throw pos:line="1015" pos:column="17">throw <expr><op:operator pos:line="1015" pos:column="23">new</op:operator> <call><name pos:line="1015" pos:column="27">ArgumentNullException</name><argument_list pos:line="1015" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="1015" pos:column="49">"externElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="1016" pos:column="13">if<condition pos:line="1016" pos:column="15">(<expr><name><name pos:line="1016" pos:column="16">externElement</name><op:operator pos:line="1016" pos:column="29">.</op:operator><name pos:line="1016" pos:column="30">Name</name></name> <op:operator pos:line="1016" pos:column="35">!=</op:operator> <name><name pos:line="1016" pos:column="38">SRC</name><op:operator pos:line="1016" pos:column="41">.</op:operator><name pos:line="1016" pos:column="42">Extern</name></name></expr>)</condition><then pos:line="1016" pos:column="49">
                <throw pos:line="1017" pos:column="17">throw <expr><op:operator pos:line="1017" pos:column="23">new</op:operator> <call><name pos:line="1017" pos:column="27">ArgumentException</name><argument_list pos:line="1017" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="1017" pos:column="45">"must be a SRC.Extern element"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1017" pos:column="77">"externElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="1018" pos:column="13">if<condition pos:line="1018" pos:column="15">(<expr><name pos:line="1018" pos:column="16">context</name> <op:operator pos:line="1018" pos:column="24">==</op:operator> <name pos:line="1018" pos:column="27">null</name></expr>)</condition><then pos:line="1018" pos:column="32">
                <throw pos:line="1019" pos:column="17">throw <expr><op:operator pos:line="1019" pos:column="23">new</op:operator> <call><name pos:line="1019" pos:column="27">ArgumentNullException</name><argument_list pos:line="1019" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="1019" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="1021" pos:column="13">var</name></type> <name pos:line="1021" pos:column="17">es</name> <init pos:line="1021" pos:column="20">= <expr><op:operator pos:line="1021" pos:column="22">new</op:operator> <call><name pos:line="1021" pos:column="26">ExternStatement</name><argument_list pos:line="1021" pos:column="41">()</argument_list></call> <block pos:line="1021" pos:column="44">{<expr><name pos:line="1021" pos:column="45">ProgrammingLanguage</name> <op:operator pos:line="1021" pos:column="65">=</op:operator> <name pos:line="1021" pos:column="67">ParserLanguage</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1022" pos:column="13">es</name><op:operator pos:line="1022" pos:column="15">.</op:operator><name pos:line="1022" pos:column="16">AddLocation</name></name><argument_list pos:line="1022" pos:column="27">(<argument><expr><call><name><name pos:line="1022" pos:column="28">context</name><op:operator pos:line="1022" pos:column="35">.</op:operator><name pos:line="1022" pos:column="36">CreateLocation</name></name><argument_list pos:line="1022" pos:column="50">(<argument><expr><name pos:line="1022" pos:column="51">externElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <foreach pos:line="1024" pos:column="13">foreach(<init><decl><type><name pos:line="1024" pos:column="21">var</name></type> <name pos:line="1024" pos:column="25">exChild</name> <range pos:line="1024" pos:column="33">in <expr><call><name><name pos:line="1024" pos:column="36">externElement</name><op:operator pos:line="1024" pos:column="49">.</op:operator><name pos:line="1024" pos:column="50">Elements</name></name><argument_list pos:line="1024" pos:column="58">()</argument_list></call></expr></range></decl></init>) <block pos:line="1024" pos:column="62">{
                <if pos:line="1025" pos:column="17">if<condition pos:line="1025" pos:column="19">(<expr><name><name pos:line="1025" pos:column="20">exChild</name><op:operator pos:line="1025" pos:column="27">.</op:operator><name pos:line="1025" pos:column="28">Name</name></name> <op:operator pos:line="1025" pos:column="33">==</op:operator> <name><name pos:line="1025" pos:column="36">LIT</name><op:operator pos:line="1025" pos:column="39">.</op:operator><name pos:line="1025" pos:column="40">Literal</name></name></expr>)</condition><then pos:line="1025" pos:column="48"> <block pos:line="1025" pos:column="49">{
                    <expr_stmt><expr><name><name pos:line="1026" pos:column="21">es</name><op:operator pos:line="1026" pos:column="23">.</op:operator><name pos:line="1026" pos:column="24">LinkageType</name></name> <op:operator pos:line="1026" pos:column="36">=</op:operator> <name><name pos:line="1026" pos:column="38">exChild</name><op:operator pos:line="1026" pos:column="45">.</op:operator><name pos:line="1026" pos:column="46">Value</name></name></expr>;</expr_stmt>
                }</block></then> <else pos:line="1027" pos:column="19">else <if pos:line="1027" pos:column="24">if<condition pos:line="1027" pos:column="26">(<expr><name><name pos:line="1027" pos:column="27">exChild</name><op:operator pos:line="1027" pos:column="34">.</op:operator><name pos:line="1027" pos:column="35">Name</name></name> <op:operator pos:line="1027" pos:column="40">==</op:operator> <name><name pos:line="1027" pos:column="43">SRC</name><op:operator pos:line="1027" pos:column="46">.</op:operator><name pos:line="1027" pos:column="47">Block</name></name></expr>)</condition><then pos:line="1027" pos:column="53"> <block pos:line="1027" pos:column="54">{
                    <comment type="line" pos:line="1028" pos:column="21">//add children from block</comment>
                    <decl_stmt><decl><type><name pos:line="1029" pos:column="21">var</name></type> <name pos:line="1029" pos:column="25">blockStatements</name> <init pos:line="1029" pos:column="41">= <expr><call><name><name pos:line="1029" pos:column="43">exChild</name><op:operator pos:line="1029" pos:column="50">.</op:operator><name pos:line="1029" pos:column="51">Elements</name></name><argument_list pos:line="1029" pos:column="59">()</argument_list></call><op:operator pos:line="1029" pos:column="61">.</op:operator><call><name pos:line="1029" pos:column="62">Select</name><argument_list pos:line="1029" pos:column="68">(<argument><expr><lambda><name pos:line="1029" pos:column="69">e</name> <op:operator pos:line="1029" pos:column="71">=&gt;</op:operator> <call><name pos:line="1029" pos:column="74">ParseStatement</name><argument_list pos:line="1029" pos:column="88">(<argument><expr><name pos:line="1029" pos:column="89">e</name></expr></argument>, <argument><expr><name pos:line="1029" pos:column="92">context</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="1030" pos:column="21">es</name><op:operator pos:line="1030" pos:column="23">.</op:operator><name pos:line="1030" pos:column="24">AddChildStatements</name></name><argument_list pos:line="1030" pos:column="42">(<argument><expr><name pos:line="1030" pos:column="43">blockStatements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="1031" pos:column="19">else <block pos:line="1031" pos:column="24">{
                    <expr_stmt><expr><call><name><name pos:line="1032" pos:column="21">es</name><op:operator pos:line="1032" pos:column="23">.</op:operator><name pos:line="1032" pos:column="24">AddChildStatement</name></name><argument_list pos:line="1032" pos:column="41">(<argument><expr><call><name pos:line="1032" pos:column="42">ParseStatement</name><argument_list pos:line="1032" pos:column="56">(<argument><expr><name pos:line="1032" pos:column="57">exChild</name></expr></argument>, <argument><expr><name pos:line="1032" pos:column="66">context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if></else></if>
            }</block></foreach>

            <return pos:line="1036" pos:column="13">return <expr><name pos:line="1036" pos:column="20">es</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="1039" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="1040" pos:column="9">/// Creates an empty Statement object from the given SRC.EmptyStatement element.</comment>
        <comment type="line" pos:line="1041" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="1042" pos:column="9">/// &lt;param name="emptyElement"&gt;A SRC.EmptyStatement element.&lt;/param&gt;</comment>
        <comment type="line" pos:line="1043" pos:column="9">/// &lt;param name="context"&gt;The parser context to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="1044" pos:column="9">/// &lt;returns&gt;A Statement corresponding to &lt;paramref name="emptyElement"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="1045" pos:column="9">protected</specifier> <specifier pos:line="1045" pos:column="19">virtual</specifier> <name pos:line="1045" pos:column="27">Statement</name></type> <name pos:line="1045" pos:column="37">ParseEmptyStatementElement</name><parameter_list pos:line="1045" pos:column="63">(<param><decl><type><name pos:line="1045" pos:column="64">XElement</name></type> <name pos:line="1045" pos:column="73">emptyElement</name></decl></param>, <param><decl><type><name pos:line="1045" pos:column="87">ParserContext</name></type> <name pos:line="1045" pos:column="101">context</name></decl></param>)</parameter_list> <block pos:line="1045" pos:column="110">{
            <if pos:line="1046" pos:column="13">if<condition pos:line="1046" pos:column="15">(<expr><name pos:line="1046" pos:column="16">emptyElement</name> <op:operator pos:line="1046" pos:column="29">==</op:operator> <name pos:line="1046" pos:column="32">null</name></expr>)</condition><then pos:line="1046" pos:column="37">
                <throw pos:line="1047" pos:column="17">throw <expr><op:operator pos:line="1047" pos:column="23">new</op:operator> <call><name pos:line="1047" pos:column="27">ArgumentNullException</name><argument_list pos:line="1047" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="1047" pos:column="49">"emptyElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="1048" pos:column="13">if<condition pos:line="1048" pos:column="15">(<expr><name><name pos:line="1048" pos:column="16">emptyElement</name><op:operator pos:line="1048" pos:column="28">.</op:operator><name pos:line="1048" pos:column="29">Name</name></name> <op:operator pos:line="1048" pos:column="34">!=</op:operator> <name><name pos:line="1048" pos:column="37">SRC</name><op:operator pos:line="1048" pos:column="40">.</op:operator><name pos:line="1048" pos:column="41">EmptyStatement</name></name></expr>)</condition><then pos:line="1048" pos:column="56">
                <throw pos:line="1049" pos:column="17">throw <expr><op:operator pos:line="1049" pos:column="23">new</op:operator> <call><name pos:line="1049" pos:column="27">ArgumentException</name><argument_list pos:line="1049" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="1049" pos:column="45">"must be a SRC.EmptyStatement element"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1049" pos:column="85">"emptyElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="1050" pos:column="13">if<condition pos:line="1050" pos:column="15">(<expr><name pos:line="1050" pos:column="16">context</name> <op:operator pos:line="1050" pos:column="24">==</op:operator> <name pos:line="1050" pos:column="27">null</name></expr>)</condition><then pos:line="1050" pos:column="32">
                <throw pos:line="1051" pos:column="17">throw <expr><op:operator pos:line="1051" pos:column="23">new</op:operator> <call><name pos:line="1051" pos:column="27">ArgumentNullException</name><argument_list pos:line="1051" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="1051" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="1053" pos:column="13">var</name></type> <name pos:line="1053" pos:column="17">stmt</name> <init pos:line="1053" pos:column="22">= <expr><op:operator pos:line="1053" pos:column="24">new</op:operator> <call><name pos:line="1053" pos:column="28">Statement</name><argument_list pos:line="1053" pos:column="37">()</argument_list></call> <block pos:line="1053" pos:column="40">{<expr><name pos:line="1053" pos:column="41">ProgrammingLanguage</name> <op:operator pos:line="1053" pos:column="61">=</op:operator> <name pos:line="1053" pos:column="63">ParserLanguage</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1054" pos:column="13">stmt</name><op:operator pos:line="1054" pos:column="17">.</op:operator><name pos:line="1054" pos:column="18">AddLocation</name></name><argument_list pos:line="1054" pos:column="29">(<argument><expr><call><name><name pos:line="1054" pos:column="30">context</name><op:operator pos:line="1054" pos:column="37">.</op:operator><name pos:line="1054" pos:column="38">CreateLocation</name></name><argument_list pos:line="1054" pos:column="52">(<argument><expr><name pos:line="1054" pos:column="53">emptyElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="1055" pos:column="13">return <expr><name pos:line="1055" pos:column="20">stmt</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="1058" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="1059" pos:column="9">/// Parses the given &lt;paramref name="lockElement"/&gt; and creates a &lt;see cref="LockStatement"/&gt; from it.</comment>
        <comment type="line" pos:line="1060" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="1061" pos:column="9">/// &lt;param name="lockElement"&gt;The SRC.Lock element to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="1062" pos:column="9">/// &lt;param name="context"&gt;The parser context to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="1063" pos:column="9">/// &lt;returns&gt;A LockStatement created from the given lockElement.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="1064" pos:column="9">protected</specifier> <specifier pos:line="1064" pos:column="19">virtual</specifier> <name pos:line="1064" pos:column="27">LockStatement</name></type> <name pos:line="1064" pos:column="41">ParseLockElement</name><parameter_list pos:line="1064" pos:column="57">(<param><decl><type><name pos:line="1064" pos:column="58">XElement</name></type> <name pos:line="1064" pos:column="67">lockElement</name></decl></param>, <param><decl><type><name pos:line="1064" pos:column="80">ParserContext</name></type> <name pos:line="1064" pos:column="94">context</name></decl></param>)</parameter_list> <block pos:line="1064" pos:column="103">{
            <if pos:line="1065" pos:column="13">if<condition pos:line="1065" pos:column="15">(<expr><name pos:line="1065" pos:column="16">lockElement</name> <op:operator pos:line="1065" pos:column="28">==</op:operator> <name pos:line="1065" pos:column="31">null</name></expr>)</condition><then pos:line="1065" pos:column="36">
                <throw pos:line="1066" pos:column="17">throw <expr><op:operator pos:line="1066" pos:column="23">new</op:operator> <call><name pos:line="1066" pos:column="27">ArgumentNullException</name><argument_list pos:line="1066" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="1066" pos:column="49">"lockElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="1067" pos:column="13">if<condition pos:line="1067" pos:column="15">(<expr><name><name pos:line="1067" pos:column="16">lockElement</name><op:operator pos:line="1067" pos:column="27">.</op:operator><name pos:line="1067" pos:column="28">Name</name></name> <op:operator pos:line="1067" pos:column="33">!=</op:operator> <name><name pos:line="1067" pos:column="36">SRC</name><op:operator pos:line="1067" pos:column="39">.</op:operator><name pos:line="1067" pos:column="40">Lock</name></name></expr>)</condition><then pos:line="1067" pos:column="45">
                <throw pos:line="1068" pos:column="17">throw <expr><op:operator pos:line="1068" pos:column="23">new</op:operator> <call><name pos:line="1068" pos:column="27">ArgumentException</name><argument_list pos:line="1068" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="1068" pos:column="45">"Must be a SRC.Lock element"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1068" pos:column="75">"lockElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="1069" pos:column="13">if<condition pos:line="1069" pos:column="15">(<expr><name pos:line="1069" pos:column="16">context</name> <op:operator pos:line="1069" pos:column="24">==</op:operator> <name pos:line="1069" pos:column="27">null</name></expr>)</condition><then pos:line="1069" pos:column="32">
                <throw pos:line="1070" pos:column="17">throw <expr><op:operator pos:line="1070" pos:column="23">new</op:operator> <call><name pos:line="1070" pos:column="27">ArgumentNullException</name><argument_list pos:line="1070" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="1070" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="1072" pos:column="13">var</name></type> <name pos:line="1072" pos:column="17">lockStmt</name> <init pos:line="1072" pos:column="26">= <expr><op:operator pos:line="1072" pos:column="28">new</op:operator> <call><name pos:line="1072" pos:column="32">LockStatement</name><argument_list pos:line="1072" pos:column="45">()</argument_list></call> <block pos:line="1072" pos:column="48">{<expr><name pos:line="1072" pos:column="49">ProgrammingLanguage</name> <op:operator pos:line="1072" pos:column="69">=</op:operator> <name pos:line="1072" pos:column="71">ParserLanguage</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1073" pos:column="13">lockStmt</name><op:operator pos:line="1073" pos:column="21">.</op:operator><name pos:line="1073" pos:column="22">AddLocation</name></name><argument_list pos:line="1073" pos:column="33">(<argument><expr><call><name><name pos:line="1073" pos:column="34">context</name><op:operator pos:line="1073" pos:column="41">.</op:operator><name pos:line="1073" pos:column="42">CreateLocation</name></name><argument_list pos:line="1073" pos:column="56">(<argument><expr><name pos:line="1073" pos:column="57">lockElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <foreach pos:line="1075" pos:column="13">foreach(<init><decl><type><name pos:line="1075" pos:column="21">var</name></type> <name pos:line="1075" pos:column="25">child</name> <range pos:line="1075" pos:column="31">in <expr><call><name><name pos:line="1075" pos:column="34">lockElement</name><op:operator pos:line="1075" pos:column="45">.</op:operator><name pos:line="1075" pos:column="46">Elements</name></name><argument_list pos:line="1075" pos:column="54">()</argument_list></call></expr></range></decl></init>) <block pos:line="1075" pos:column="58">{
                <if pos:line="1076" pos:column="17">if<condition pos:line="1076" pos:column="19">(<expr><name><name pos:line="1076" pos:column="20">child</name><op:operator pos:line="1076" pos:column="25">.</op:operator><name pos:line="1076" pos:column="26">Name</name></name> <op:operator pos:line="1076" pos:column="31">==</op:operator> <name><name pos:line="1076" pos:column="34">SRC</name><op:operator pos:line="1076" pos:column="37">.</op:operator><name pos:line="1076" pos:column="38">Expression</name></name></expr>)</condition><then pos:line="1076" pos:column="49"> <block pos:line="1076" pos:column="50">{
                    <expr_stmt><expr><name><name pos:line="1077" pos:column="21">lockStmt</name><op:operator pos:line="1077" pos:column="29">.</op:operator><name pos:line="1077" pos:column="30">LockExpression</name></name> <op:operator pos:line="1077" pos:column="45">=</op:operator> <call><name pos:line="1077" pos:column="47">ParseExpression</name><argument_list pos:line="1077" pos:column="62">(<argument><expr><name pos:line="1077" pos:column="63">child</name></expr></argument>, <argument><expr><name pos:line="1077" pos:column="70">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="1078" pos:column="19">else <if pos:line="1078" pos:column="24">if<condition pos:line="1078" pos:column="26">(<expr><name><name pos:line="1078" pos:column="27">child</name><op:operator pos:line="1078" pos:column="32">.</op:operator><name pos:line="1078" pos:column="33">Name</name></name> <op:operator pos:line="1078" pos:column="38">==</op:operator> <name><name pos:line="1078" pos:column="41">SRC</name><op:operator pos:line="1078" pos:column="44">.</op:operator><name pos:line="1078" pos:column="45">Block</name></name></expr>)</condition><then pos:line="1078" pos:column="51"> <block pos:line="1078" pos:column="52">{
                    <decl_stmt><decl><type><name pos:line="1079" pos:column="21">var</name></type> <name pos:line="1079" pos:column="25">blockStatements</name> <init pos:line="1079" pos:column="41">= <expr><call><name><name pos:line="1079" pos:column="43">child</name><op:operator pos:line="1079" pos:column="48">.</op:operator><name pos:line="1079" pos:column="49">Elements</name></name><argument_list pos:line="1079" pos:column="57">()</argument_list></call><op:operator pos:line="1079" pos:column="59">.</op:operator><call><name pos:line="1079" pos:column="60">Select</name><argument_list pos:line="1079" pos:column="66">(<argument><expr><lambda><name pos:line="1079" pos:column="67">e</name> <op:operator pos:line="1079" pos:column="69">=&gt;</op:operator> <call><name pos:line="1079" pos:column="72">ParseStatement</name><argument_list pos:line="1079" pos:column="86">(<argument><expr><name pos:line="1079" pos:column="87">e</name></expr></argument>, <argument><expr><name pos:line="1079" pos:column="90">context</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="1080" pos:column="21">lockStmt</name><op:operator pos:line="1080" pos:column="29">.</op:operator><name pos:line="1080" pos:column="30">AddChildStatements</name></name><argument_list pos:line="1080" pos:column="48">(<argument><expr><name pos:line="1080" pos:column="49">blockStatements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="1081" pos:column="19">else <block pos:line="1081" pos:column="24">{
                    <expr_stmt><expr><call><name><name pos:line="1082" pos:column="21">lockStmt</name><op:operator pos:line="1082" pos:column="29">.</op:operator><name pos:line="1082" pos:column="30">AddChildStatement</name></name><argument_list pos:line="1082" pos:column="47">(<argument><expr><call><name pos:line="1082" pos:column="48">ParseStatement</name><argument_list pos:line="1082" pos:column="62">(<argument><expr><name pos:line="1082" pos:column="63">child</name></expr></argument>, <argument><expr><name pos:line="1082" pos:column="70">context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if></else></if>
            }</block></foreach>

            <return pos:line="1086" pos:column="13">return <expr><name pos:line="1086" pos:column="20">lockStmt</name></expr>;</return>
        }</block></function>

        <cpp:endregion pos:line="1089" pos:column="9">#<cpp:directive pos:line="1089" pos:column="10">endregion</cpp:directive> Parse statement elements</cpp:endregion>

        <cpp:region pos:line="1091" pos:column="9">#<cpp:directive pos:line="1091" pos:column="10">region</cpp:directive> Parse expression elements</cpp:region>
        <comment type="line" pos:line="1092" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="1093" pos:column="9">/// Creates an Expression from the given element.</comment>
        <comment type="line" pos:line="1094" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="1095" pos:column="9">/// &lt;param name="element"&gt;The element to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="1096" pos:column="9">/// &lt;param name="context"&gt;The parser context to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="1097" pos:column="9">/// &lt;returns&gt;An Expression parsed from the element.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="1098" pos:column="9">protected</specifier> <specifier pos:line="1098" pos:column="19">virtual</specifier> <name pos:line="1098" pos:column="27">Expression</name></type> <name pos:line="1098" pos:column="38">ParseExpression</name><parameter_list pos:line="1098" pos:column="53">(<param><decl><type><name pos:line="1098" pos:column="54">XElement</name></type> <name pos:line="1098" pos:column="63">element</name></decl></param>, <param><decl><type><name pos:line="1098" pos:column="72">ParserContext</name></type> <name pos:line="1098" pos:column="86">context</name></decl></param>)</parameter_list> <block pos:line="1098" pos:column="95">{
            <return pos:line="1099" pos:column="13">return <expr><call><name><name pos:line="1099" pos:column="20">ParseExpression</name><argument_list pos:line="1099" pos:column="35">&lt;<argument><name pos:line="1099" pos:column="36">NameUse</name></argument>&gt;</argument_list></name><argument_list pos:line="1099" pos:column="44">(<argument><expr><name pos:line="1099" pos:column="45">element</name></expr></argument>, <argument><expr><name pos:line="1099" pos:column="54">context</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
        
        <comment type="line" pos:line="1102" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="1103" pos:column="9">/// Creates an Expression from the given element.</comment>
        <comment type="line" pos:line="1104" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="1105" pos:column="9">/// &lt;typeparam name="T"&gt;The type of use to use when parsing name elements.&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="1106" pos:column="9">/// &lt;param name="element"&gt;The element to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="1107" pos:column="9">/// &lt;param name="context"&gt;The parser context to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="1108" pos:column="9">/// &lt;returns&gt;An Expression parsed from the element.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="1109" pos:column="9">protected</specifier> <specifier pos:line="1109" pos:column="19">virtual</specifier> <name pos:line="1109" pos:column="27">Expression</name></type> <name><name pos:line="1109" pos:column="38">ParseExpression</name><argument_list pos:line="1109" pos:column="53">&lt;<argument><name pos:line="1109" pos:column="54">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="1109" pos:column="56">(<param><decl><type><name pos:line="1109" pos:column="57">XElement</name></type> <name pos:line="1109" pos:column="66">element</name></decl></param>, <param><decl><type><name pos:line="1109" pos:column="75">ParserContext</name></type> <name pos:line="1109" pos:column="89">context</name></decl></param>)</parameter_list> <where pos:line="1109" pos:column="98">where <name pos:line="1109" pos:column="104">T</name> : <name pos:line="1109" pos:column="108">NameUse</name>, new()</where> <block pos:line="1109" pos:column="123">{
            <if pos:line="1110" pos:column="13">if<condition pos:line="1110" pos:column="15">(<expr><name pos:line="1110" pos:column="16">element</name> <op:operator pos:line="1110" pos:column="24">==</op:operator> <name pos:line="1110" pos:column="27">null</name></expr>)</condition><then pos:line="1110" pos:column="32">
                <throw pos:line="1111" pos:column="17">throw <expr><op:operator pos:line="1111" pos:column="23">new</op:operator> <call><name pos:line="1111" pos:column="27">ArgumentNullException</name><argument_list pos:line="1111" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="1111" pos:column="49">"element"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="1112" pos:column="13">if<condition pos:line="1112" pos:column="15">(<expr><name pos:line="1112" pos:column="16">context</name> <op:operator pos:line="1112" pos:column="24">==</op:operator> <name pos:line="1112" pos:column="27">null</name></expr>)</condition><then pos:line="1112" pos:column="32">
                <throw pos:line="1113" pos:column="17">throw <expr><op:operator pos:line="1113" pos:column="23">new</op:operator> <call><name pos:line="1113" pos:column="27">ArgumentNullException</name><argument_list pos:line="1113" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="1113" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <try pos:line="1115" pos:column="13">try <block pos:line="1115" pos:column="17">{
                <decl_stmt><decl><type><name pos:line="1116" pos:column="17">Expression</name></type> <name pos:line="1116" pos:column="28">exp</name> <init pos:line="1116" pos:column="32">= <expr><name pos:line="1116" pos:column="34">null</name></expr></init></decl>;</decl_stmt>
                <if pos:line="1117" pos:column="17">if<condition pos:line="1117" pos:column="19">(<expr><name><name pos:line="1117" pos:column="20">element</name><op:operator pos:line="1117" pos:column="27">.</op:operator><name pos:line="1117" pos:column="28">Name</name></name> <op:operator pos:line="1117" pos:column="33">==</op:operator> <name><name pos:line="1117" pos:column="36">SRC</name><op:operator pos:line="1117" pos:column="39">.</op:operator><name pos:line="1117" pos:column="40">Expression</name></name></expr>)</condition><then pos:line="1117" pos:column="51"> <block pos:line="1117" pos:column="52">{
                    <expr_stmt><expr><name pos:line="1118" pos:column="21">exp</name> <op:operator pos:line="1118" pos:column="25">=</op:operator> <call><name pos:line="1118" pos:column="27">ParseExpressionElement</name><argument_list pos:line="1118" pos:column="49">(<argument><expr><name pos:line="1118" pos:column="50">element</name></expr></argument>, <argument><expr><name pos:line="1118" pos:column="59">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="1119" pos:column="19">else <if pos:line="1119" pos:column="24">if<condition pos:line="1119" pos:column="26">(<expr><name><name pos:line="1119" pos:column="27">element</name><op:operator pos:line="1119" pos:column="34">.</op:operator><name pos:line="1119" pos:column="35">Name</name></name> <op:operator pos:line="1119" pos:column="40">==</op:operator> <name><name pos:line="1119" pos:column="43">SRC</name><op:operator pos:line="1119" pos:column="46">.</op:operator><name pos:line="1119" pos:column="47">Declaration</name></name></expr>)</condition><then pos:line="1119" pos:column="59"> <block pos:line="1119" pos:column="60">{
                    <expr_stmt><expr><name pos:line="1120" pos:column="21">exp</name> <op:operator pos:line="1120" pos:column="25">=</op:operator> <call><name pos:line="1120" pos:column="27">ParseDeclarationElement</name><argument_list pos:line="1120" pos:column="50">(<argument><expr><name pos:line="1120" pos:column="51">element</name></expr></argument>, <argument><expr><name pos:line="1120" pos:column="60">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="1121" pos:column="19">else <if pos:line="1121" pos:column="24">if<condition pos:line="1121" pos:column="26">(<expr><name><name pos:line="1121" pos:column="27">element</name><op:operator pos:line="1121" pos:column="34">.</op:operator><name pos:line="1121" pos:column="35">Name</name></name> <op:operator pos:line="1121" pos:column="40">==</op:operator> <name><name pos:line="1121" pos:column="43">SRC</name><op:operator pos:line="1121" pos:column="46">.</op:operator><name pos:line="1121" pos:column="47">Name</name></name></expr>)</condition><then pos:line="1121" pos:column="52"> <block pos:line="1121" pos:column="53">{
                    <expr_stmt><expr><name pos:line="1122" pos:column="21">exp</name> <op:operator pos:line="1122" pos:column="25">=</op:operator> <call><name><name pos:line="1122" pos:column="27">ParseNameUseElement</name><argument_list pos:line="1122" pos:column="46">&lt;<argument><name pos:line="1122" pos:column="47">T</name></argument>&gt;</argument_list></name><argument_list pos:line="1122" pos:column="49">(<argument><expr><name pos:line="1122" pos:column="50">element</name></expr></argument>, <argument><expr><name pos:line="1122" pos:column="59">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="1123" pos:column="19">else <if pos:line="1123" pos:column="24">if<condition pos:line="1123" pos:column="26">(<expr><name><name pos:line="1123" pos:column="27">element</name><op:operator pos:line="1123" pos:column="34">.</op:operator><name pos:line="1123" pos:column="35">Name</name></name> <op:operator pos:line="1123" pos:column="40">==</op:operator> <name><name pos:line="1123" pos:column="43">SRC</name><op:operator pos:line="1123" pos:column="46">.</op:operator><name pos:line="1123" pos:column="47">Type</name></name></expr>)</condition><then pos:line="1123" pos:column="52"> <block pos:line="1123" pos:column="53">{
                    <expr_stmt><expr><name pos:line="1124" pos:column="21">exp</name> <op:operator pos:line="1124" pos:column="25">=</op:operator> <call><name pos:line="1124" pos:column="27">ParseTypeUseElement</name><argument_list pos:line="1124" pos:column="46">(<argument><expr><name pos:line="1124" pos:column="47">element</name></expr></argument>, <argument><expr><name pos:line="1124" pos:column="56">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="1125" pos:column="19">else <if pos:line="1125" pos:column="24">if<condition pos:line="1125" pos:column="26">(<expr><name><name pos:line="1125" pos:column="27">element</name><op:operator pos:line="1125" pos:column="34">.</op:operator><name pos:line="1125" pos:column="35">Name</name></name> <op:operator pos:line="1125" pos:column="40">==</op:operator> <name><name pos:line="1125" pos:column="43">OP</name><op:operator pos:line="1125" pos:column="45">.</op:operator><name pos:line="1125" pos:column="46">Operator</name></name></expr>)</condition><then pos:line="1125" pos:column="55"> <block pos:line="1125" pos:column="56">{
                    <expr_stmt><expr><name pos:line="1126" pos:column="21">exp</name> <op:operator pos:line="1126" pos:column="25">=</op:operator> <call><name pos:line="1126" pos:column="27">ParseOperatorElement</name><argument_list pos:line="1126" pos:column="47">(<argument><expr><name pos:line="1126" pos:column="48">element</name></expr></argument>, <argument><expr><name pos:line="1126" pos:column="57">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="1127" pos:column="19">else <if pos:line="1127" pos:column="24">if<condition pos:line="1127" pos:column="26">(<expr><name><name pos:line="1127" pos:column="27">element</name><op:operator pos:line="1127" pos:column="34">.</op:operator><name pos:line="1127" pos:column="35">Name</name></name> <op:operator pos:line="1127" pos:column="40">==</op:operator> <name><name pos:line="1127" pos:column="43">SRC</name><op:operator pos:line="1127" pos:column="46">.</op:operator><name pos:line="1127" pos:column="47">Call</name></name></expr>)</condition><then pos:line="1127" pos:column="52"> <block pos:line="1127" pos:column="53">{
                    <expr_stmt><expr><name pos:line="1128" pos:column="21">exp</name> <op:operator pos:line="1128" pos:column="25">=</op:operator> <call><name pos:line="1128" pos:column="27">ParseCallElement</name><argument_list pos:line="1128" pos:column="43">(<argument><expr><name pos:line="1128" pos:column="44">element</name></expr></argument>, <argument><expr><name pos:line="1128" pos:column="53">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="1129" pos:column="19">else <if pos:line="1129" pos:column="24">if<condition pos:line="1129" pos:column="26">(<expr><name><name pos:line="1129" pos:column="27">element</name><op:operator pos:line="1129" pos:column="34">.</op:operator><name pos:line="1129" pos:column="35">Name</name></name> <op:operator pos:line="1129" pos:column="40">==</op:operator> <name><name pos:line="1129" pos:column="43">LIT</name><op:operator pos:line="1129" pos:column="46">.</op:operator><name pos:line="1129" pos:column="47">Literal</name></name></expr>)</condition><then pos:line="1129" pos:column="55"> <block pos:line="1129" pos:column="56">{
                    <expr_stmt><expr><name pos:line="1130" pos:column="21">exp</name> <op:operator pos:line="1130" pos:column="25">=</op:operator> <call><name pos:line="1130" pos:column="27">ParseLiteralElement</name><argument_list pos:line="1130" pos:column="46">(<argument><expr><name pos:line="1130" pos:column="47">element</name></expr></argument>, <argument><expr><name pos:line="1130" pos:column="56">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="1131" pos:column="19">else <if pos:line="1131" pos:column="24">if<condition pos:line="1131" pos:column="26">(<expr><name><name pos:line="1131" pos:column="27">element</name><op:operator pos:line="1131" pos:column="34">.</op:operator><name pos:line="1131" pos:column="35">Name</name></name> <op:operator pos:line="1131" pos:column="40">==</op:operator> <name><name pos:line="1131" pos:column="43">SRC</name><op:operator pos:line="1131" pos:column="46">.</op:operator><name pos:line="1131" pos:column="47">Comment</name></name></expr>)</condition><then pos:line="1131" pos:column="55"> <block pos:line="1131" pos:column="56">{
                    <comment type="line" pos:line="1132" pos:column="21">//skip</comment>
                }</block></then> <else pos:line="1133" pos:column="19">else <if pos:line="1133" pos:column="24">if<condition pos:line="1133" pos:column="26">(<expr><name><name pos:line="1133" pos:column="27">element</name><op:operator pos:line="1133" pos:column="34">.</op:operator><name pos:line="1133" pos:column="35">Name</name></name> <op:operator pos:line="1133" pos:column="40">==</op:operator> <name><name pos:line="1133" pos:column="43">SRC</name><op:operator pos:line="1133" pos:column="46">.</op:operator><name pos:line="1133" pos:column="47">Class</name> <type:modifier pos:line="1133" pos:column="53">&amp;&amp;</type:modifier></name> <name pos:line="1133" pos:column="56">ParserLanguage</name> <op:operator pos:line="1133" pos:column="71">==</op:operator> <name><name pos:line="1133" pos:column="74">Language</name><op:operator pos:line="1133" pos:column="82">.</op:operator><name pos:line="1133" pos:column="83">Java</name></name></expr>)</condition><then pos:line="1133" pos:column="88"> <block pos:line="1133" pos:column="89">{
                    <comment type="line" pos:line="1134" pos:column="21">//anonymous class, skip</comment>
                    <comment type="line" pos:line="1135" pos:column="21">//TODO: add parsing for anonymous classes in Java</comment>
                }</block></then> <else pos:line="1136" pos:column="19">else <if pos:line="1136" pos:column="24">if<condition pos:line="1136" pos:column="26">(<expr><name><name pos:line="1136" pos:column="27">element</name><op:operator pos:line="1136" pos:column="34">.</op:operator><name pos:line="1136" pos:column="35">Name</name><op:operator pos:line="1136" pos:column="39">.</op:operator><name pos:line="1136" pos:column="40">Namespace</name></name> <op:operator pos:line="1136" pos:column="50">==</op:operator> <name><name pos:line="1136" pos:column="53">CPP</name><op:operator pos:line="1136" pos:column="56">.</op:operator><name pos:line="1136" pos:column="57">NS</name></name></expr>)</condition><then pos:line="1136" pos:column="60"> <block pos:line="1136" pos:column="61">{
                    <comment type="line" pos:line="1137" pos:column="21">//do nothing. skip any cpp preprocessor macros</comment>
                }</block></then> <else pos:line="1138" pos:column="19">else <if pos:line="1138" pos:column="24">if<condition pos:line="1138" pos:column="26">(<expr><call><name><name pos:line="1138" pos:column="27">NotImplementedExpressions</name><op:operator pos:line="1138" pos:column="52">.</op:operator><name pos:line="1138" pos:column="53">Contains</name></name><argument_list pos:line="1138" pos:column="61">(<argument><expr><name><name pos:line="1138" pos:column="62">element</name><op:operator pos:line="1138" pos:column="69">.</op:operator><name pos:line="1138" pos:column="70">Name</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1138" pos:column="76"> <block pos:line="1138" pos:column="77">{
                    <comment type="line" pos:line="1139" pos:column="21">//skip. These are known and we're skipping them for now.</comment>
                }</block></then> <else pos:line="1140" pos:column="19">else <block pos:line="1140" pos:column="24">{
                    <expr_stmt><expr><call><name pos:line="1141" pos:column="21">LogUnknown</name><argument_list pos:line="1141" pos:column="31">(<argument><expr><name pos:line="1141" pos:column="32">element</name></expr></argument>, <argument><expr><name pos:line="1141" pos:column="41">context</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1141" pos:column="50">"ParseExpression"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>

                <comment type="line" pos:line="1144" pos:column="17">//TODO: how do we handle a function_declaration that's put in an expression-type place?</comment>
                <comment type="line" pos:line="1145" pos:column="17">//For example, a function pointer declared in an if condition</comment>

                <return pos:line="1147" pos:column="17">return <expr><name pos:line="1147" pos:column="24">exp</name></expr>;</return>
            }</block> <catch pos:line="1148" pos:column="15">catch<parameter_list pos:line="1148" pos:column="20">(<param><decl><type><name pos:line="1148" pos:column="21">ParseException</name></type></decl></param>)</parameter_list> <block pos:line="1148" pos:column="37">{
                <throw pos:line="1149" pos:column="17">throw;</throw>
            }</block></catch> <catch pos:line="1150" pos:column="15">catch<parameter_list pos:line="1150" pos:column="20">(<param><decl><type><name pos:line="1150" pos:column="21">Exception</name></type> <name pos:line="1150" pos:column="31">e</name></decl></param>)</parameter_list> <block pos:line="1150" pos:column="34">{
                <decl_stmt><decl><type><name pos:line="1151" pos:column="17">int</name></type> <name pos:line="1151" pos:column="21">lineNumber</name> <init pos:line="1151" pos:column="32">= <expr><call><name><name pos:line="1151" pos:column="34">element</name><op:operator pos:line="1151" pos:column="41">.</op:operator><name pos:line="1151" pos:column="42">GetSrcLineNumber</name></name><argument_list pos:line="1151" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="1152" pos:column="17">int</name></type> <name pos:line="1152" pos:column="21">columnNumber</name> <init pos:line="1152" pos:column="34">= <expr><call><name><name pos:line="1152" pos:column="36">element</name><op:operator pos:line="1152" pos:column="43">.</op:operator><name pos:line="1152" pos:column="44">GetSrcLinePosition</name></name><argument_list pos:line="1152" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <throw pos:line="1153" pos:column="17">throw <expr><op:operator pos:line="1153" pos:column="23">new</op:operator> <call><name pos:line="1153" pos:column="27">ParseException</name><argument_list pos:line="1153" pos:column="41">(<argument><expr><name><name pos:line="1153" pos:column="42">context</name><op:operator pos:line="1153" pos:column="49">.</op:operator><name pos:line="1153" pos:column="50">FileName</name></name></expr></argument>, <argument><expr><name pos:line="1153" pos:column="60">lineNumber</name></expr></argument>, <argument><expr><name pos:line="1153" pos:column="72">columnNumber</name></expr></argument>, <argument><expr><name pos:line="1153" pos:column="86">this</name></expr></argument>, <argument><expr><name><name pos:line="1153" pos:column="92">e</name><op:operator pos:line="1153" pos:column="93">.</op:operator><name pos:line="1153" pos:column="94">Message</name></name></expr></argument>, <argument><expr><name pos:line="1153" pos:column="103">e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></function>

        <comment type="line" pos:line="1157" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="1158" pos:column="9">/// Parses (possibly) multiple expression component elements, and combines them into an Expression. </comment>
        <comment type="line" pos:line="1159" pos:column="9">/// All the elements must have the same parent.</comment>
        <comment type="line" pos:line="1160" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="1161" pos:column="9">/// &lt;param name="elements"&gt;The expression component elements to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="1162" pos:column="9">/// &lt;param name="context"&gt;The parser context to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="1163" pos:column="9">/// &lt;returns&gt;An Expression with each of the parsed elements as its components. </comment>
        <comment type="line" pos:line="1164" pos:column="9">/// If &lt;paramref name="elements"/&gt; contains only a single value, the result will be the same as if it were parsed directly..&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="1165" pos:column="9">protected</specifier> <specifier pos:line="1165" pos:column="19">virtual</specifier> <name pos:line="1165" pos:column="27">Expression</name></type> <name pos:line="1165" pos:column="38">ParseExpression</name><parameter_list pos:line="1165" pos:column="53">(<param><decl><type><name><name pos:line="1165" pos:column="54">IEnumerable</name><argument_list pos:line="1165" pos:column="65">&lt;<argument><name pos:line="1165" pos:column="66">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="1165" pos:column="76">elements</name></decl></param>, <param><decl><type><name pos:line="1165" pos:column="86">ParserContext</name></type> <name pos:line="1165" pos:column="100">context</name></decl></param>)</parameter_list> <block pos:line="1165" pos:column="109">{
            <return pos:line="1166" pos:column="13">return <expr><call><name><name pos:line="1166" pos:column="20">ParseExpression</name><argument_list pos:line="1166" pos:column="35">&lt;<argument><name pos:line="1166" pos:column="36">NameUse</name></argument>&gt;</argument_list></name><argument_list pos:line="1166" pos:column="44">(<argument><expr><name pos:line="1166" pos:column="45">elements</name></expr></argument>, <argument><expr><name pos:line="1166" pos:column="55">context</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="1169" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="1170" pos:column="9">/// Parses (possibly) multiple expression component elements, and combines them into an Expression. </comment>
        <comment type="line" pos:line="1171" pos:column="9">/// All the elements must have the same parent.</comment>
        <comment type="line" pos:line="1172" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="1173" pos:column="9">/// &lt;typeparam name="T"&gt;The use type to use when parsing name elements.&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="1174" pos:column="9">/// &lt;param name="elements"&gt;The expression component elements to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="1175" pos:column="9">/// &lt;param name="context"&gt;The parser context to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="1176" pos:column="9">/// &lt;returns&gt;An Expression with each of the parsed elements as its components. </comment>
        <comment type="line" pos:line="1177" pos:column="9">/// If &lt;paramref name="elements"/&gt; contains only a single value, the result will be the same as if it were parsed directly..&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="1178" pos:column="9">protected</specifier> <specifier pos:line="1178" pos:column="19">virtual</specifier> <name pos:line="1178" pos:column="27">Expression</name></type> <name><name pos:line="1178" pos:column="38">ParseExpression</name><argument_list pos:line="1178" pos:column="53">&lt;<argument><name pos:line="1178" pos:column="54">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="1178" pos:column="56">(<param><decl><type><name><name pos:line="1178" pos:column="57">IEnumerable</name><argument_list pos:line="1178" pos:column="68">&lt;<argument><name pos:line="1178" pos:column="69">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="1178" pos:column="79">elements</name></decl></param>, <param><decl><type><name pos:line="1178" pos:column="89">ParserContext</name></type> <name pos:line="1178" pos:column="103">context</name></decl></param>)</parameter_list> <where pos:line="1178" pos:column="112">where <name pos:line="1178" pos:column="118">T</name> : <name pos:line="1178" pos:column="122">NameUse</name>, new()</where> <block pos:line="1178" pos:column="137">{
            <if pos:line="1179" pos:column="13">if<condition pos:line="1179" pos:column="15">(<expr><name pos:line="1179" pos:column="16">elements</name> <op:operator pos:line="1179" pos:column="25">==</op:operator> <name pos:line="1179" pos:column="28">null</name></expr>)</condition><then pos:line="1179" pos:column="33">
                <throw pos:line="1180" pos:column="17">throw <expr><op:operator pos:line="1180" pos:column="23">new</op:operator> <call><name pos:line="1180" pos:column="27">ArgumentNullException</name><argument_list pos:line="1180" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="1180" pos:column="49">"elements"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="1181" pos:column="13">if<condition pos:line="1181" pos:column="15">(<expr><name pos:line="1181" pos:column="16">context</name> <op:operator pos:line="1181" pos:column="24">==</op:operator> <name pos:line="1181" pos:column="27">null</name></expr>)</condition><then pos:line="1181" pos:column="32">
                <throw pos:line="1182" pos:column="17">throw <expr><op:operator pos:line="1182" pos:column="23">new</op:operator> <call><name pos:line="1182" pos:column="27">ArgumentNullException</name><argument_list pos:line="1182" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="1182" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="1184" pos:column="13">var</name></type> <name pos:line="1184" pos:column="17">expElements</name> <init pos:line="1184" pos:column="29">= <expr><call><name><name pos:line="1184" pos:column="31">elements</name><op:operator pos:line="1184" pos:column="39">.</op:operator><name pos:line="1184" pos:column="40">ToList</name></name><argument_list pos:line="1184" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if pos:line="1186" pos:column="13">if<condition pos:line="1186" pos:column="15">(<expr><name><name pos:line="1186" pos:column="16">expElements</name><op:operator pos:line="1186" pos:column="27">.</op:operator><name pos:line="1186" pos:column="28">Count</name></name> <op:operator pos:line="1186" pos:column="34">==</op:operator> <lit:literal type="number" pos:line="1186" pos:column="37">0</lit:literal></expr>)</condition><then pos:line="1186" pos:column="39"> <block pos:line="1186" pos:column="40">{
                <return pos:line="1187" pos:column="17">return <expr><name pos:line="1187" pos:column="24">null</name></expr>;</return>
            }</block></then></if>
            <if pos:line="1189" pos:column="13">if<condition pos:line="1189" pos:column="15">(<expr><name><name pos:line="1189" pos:column="16">expElements</name><op:operator pos:line="1189" pos:column="27">.</op:operator><name pos:line="1189" pos:column="28">Count</name></name> <op:operator pos:line="1189" pos:column="34">==</op:operator> <lit:literal type="number" pos:line="1189" pos:column="37">1</lit:literal></expr>)</condition><then pos:line="1189" pos:column="39"> <block pos:line="1189" pos:column="40">{
                <return pos:line="1190" pos:column="17">return <expr><call><name pos:line="1190" pos:column="24">ParseExpression</name><argument_list pos:line="1190" pos:column="39">(<argument><expr><call><name><name pos:line="1190" pos:column="40">expElements</name><op:operator pos:line="1190" pos:column="51">.</op:operator><name pos:line="1190" pos:column="52">First</name></name><argument_list pos:line="1190" pos:column="57">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1190" pos:column="61">context</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="1193" pos:column="13">var</name></type> <name pos:line="1193" pos:column="17">expressionStack</name> <init pos:line="1193" pos:column="33">= <expr><op:operator pos:line="1193" pos:column="35">new</op:operator> <call><name><name pos:line="1193" pos:column="39">Stack</name><argument_list pos:line="1193" pos:column="44">&lt;<argument><name pos:line="1193" pos:column="45">Expression</name></argument>&gt;</argument_list></name><argument_list pos:line="1193" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1194" pos:column="13">expressionStack</name><op:operator pos:line="1194" pos:column="28">.</op:operator><name pos:line="1194" pos:column="29">Push</name></name><argument_list pos:line="1194" pos:column="33">(<argument><expr><op:operator pos:line="1194" pos:column="34">new</op:operator> <call><name pos:line="1194" pos:column="38">Expression</name><argument_list pos:line="1194" pos:column="48">()</argument_list></call> <block pos:line="1194" pos:column="51">{
                <expr><name pos:line="1195" pos:column="17">ProgrammingLanguage</name> <op:operator pos:line="1195" pos:column="37">=</op:operator> <name pos:line="1195" pos:column="39">ParserLanguage</name></expr><op:operator pos:line="1195" pos:column="53">,</op:operator>
                <expr><name pos:line="1196" pos:column="17">Location</name> <op:operator pos:line="1196" pos:column="26">=</op:operator> <call><name><name pos:line="1196" pos:column="28">context</name><op:operator pos:line="1196" pos:column="35">.</op:operator><name pos:line="1196" pos:column="36">CreateLocation</name></name><argument_list pos:line="1196" pos:column="50">(<argument><expr><call><name><name pos:line="1196" pos:column="51">expElements</name><op:operator pos:line="1196" pos:column="62">.</op:operator><name pos:line="1196" pos:column="63">First</name></name><argument_list pos:line="1196" pos:column="68">()</argument_list></call><op:operator pos:line="1196" pos:column="70">.</op:operator><name pos:line="1196" pos:column="71">Parent</name></expr></argument>)</argument_list></call></expr>
            }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="1199" pos:column="13">//parse each of the components in the expression</comment>
            <decl_stmt><decl><type><name pos:line="1200" pos:column="13">var</name></type> <name pos:line="1200" pos:column="17">declList</name> <init pos:line="1200" pos:column="26">= <expr><op:operator pos:line="1200" pos:column="28">new</op:operator> <call><name><name pos:line="1200" pos:column="32">List</name><argument_list pos:line="1200" pos:column="36">&lt;<argument><name pos:line="1200" pos:column="37">VariableDeclaration</name></argument>&gt;</argument_list></name><argument_list pos:line="1200" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="1201" pos:column="13">foreach(<init><decl><type><name pos:line="1201" pos:column="21">var</name></type> <name pos:line="1201" pos:column="25">element</name> <range pos:line="1201" pos:column="33">in <expr><name pos:line="1201" pos:column="36">expElements</name></expr></range></decl></init>) <block pos:line="1201" pos:column="49">{
                <decl_stmt><decl><type><name pos:line="1202" pos:column="17">var</name></type> <name pos:line="1202" pos:column="21">exp</name> <init pos:line="1202" pos:column="25">= <expr><call><name><name pos:line="1202" pos:column="27">ParseExpression</name><argument_list pos:line="1202" pos:column="42">&lt;<argument><name pos:line="1202" pos:column="43">T</name></argument>&gt;</argument_list></name><argument_list pos:line="1202" pos:column="45">(<argument><expr><name pos:line="1202" pos:column="46">element</name></expr></argument>, <argument><expr><name pos:line="1202" pos:column="55">context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="1203" pos:column="17">var</name></type> <name pos:line="1203" pos:column="21">varDecl</name> <init pos:line="1203" pos:column="29">= <expr><name pos:line="1203" pos:column="31">exp</name> <op:operator pos:line="1203" pos:column="35">as</op:operator> <name pos:line="1203" pos:column="38">VariableDeclaration</name></expr></init></decl>;</decl_stmt>
                <if pos:line="1204" pos:column="17">if<condition pos:line="1204" pos:column="19">(<expr><name pos:line="1204" pos:column="20">varDecl</name> <op:operator pos:line="1204" pos:column="28">!=</op:operator> <name pos:line="1204" pos:column="31">null</name></expr>)</condition><then pos:line="1204" pos:column="36"> <block pos:line="1204" pos:column="37">{
                    <if pos:line="1205" pos:column="21">if<condition pos:line="1205" pos:column="23">(<expr><name><name pos:line="1205" pos:column="24">varDecl</name><op:operator pos:line="1205" pos:column="31">.</op:operator><name pos:line="1205" pos:column="32">VariableType</name></name> <op:operator pos:line="1205" pos:column="45">==</op:operator> <name pos:line="1205" pos:column="48">null</name> <op:operator pos:line="1205" pos:column="53">&amp;&amp;</op:operator> <call><name><name pos:line="1205" pos:column="56">declList</name><op:operator pos:line="1205" pos:column="64">.</op:operator><name pos:line="1205" pos:column="65">Any</name></name><argument_list pos:line="1205" pos:column="68">()</argument_list></call></expr>)</condition><then pos:line="1205" pos:column="71"> <block pos:line="1205" pos:column="72">{
                        <comment type="line" pos:line="1206" pos:column="25">//type will be null in cases of multiple declarations, e.g. int a, b;</comment>
                        <expr_stmt><expr><name><name pos:line="1207" pos:column="25">varDecl</name><op:operator pos:line="1207" pos:column="32">.</op:operator><name pos:line="1207" pos:column="33">VariableType</name></name> <op:operator pos:line="1207" pos:column="46">=</op:operator> <call><name><name pos:line="1207" pos:column="48">declList</name><op:operator pos:line="1207" pos:column="56">.</op:operator><name pos:line="1207" pos:column="57">First</name></name><argument_list pos:line="1207" pos:column="62">()</argument_list></call><op:operator pos:line="1207" pos:column="64">.</op:operator><name pos:line="1207" pos:column="65">VariableType</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name pos:line="1208" pos:column="25">varDecl</name><op:operator pos:line="1208" pos:column="32">.</op:operator><name pos:line="1208" pos:column="33">Accessibility</name></name> <op:operator pos:line="1208" pos:column="47">=</op:operator> <call><name><name pos:line="1208" pos:column="49">declList</name><op:operator pos:line="1208" pos:column="57">.</op:operator><name pos:line="1208" pos:column="58">First</name></name><argument_list pos:line="1208" pos:column="63">()</argument_list></call><op:operator pos:line="1208" pos:column="65">.</op:operator><name pos:line="1208" pos:column="66">Accessibility</name></expr>;</expr_stmt>
                    }</block></then></if>
                    <expr_stmt><expr><call><name><name pos:line="1210" pos:column="21">declList</name><op:operator pos:line="1210" pos:column="29">.</op:operator><name pos:line="1210" pos:column="30">Add</name></name><argument_list pos:line="1210" pos:column="33">(<argument><expr><name pos:line="1210" pos:column="34">varDecl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <comment type="line" pos:line="1213" pos:column="17">//handle sub-expressions</comment>
                <decl_stmt><decl><type><name pos:line="1214" pos:column="17">var</name></type> <name pos:line="1214" pos:column="21">opUse</name> <init pos:line="1214" pos:column="27">= <expr><name pos:line="1214" pos:column="29">exp</name> <op:operator pos:line="1214" pos:column="33">as</op:operator> <name pos:line="1214" pos:column="36">OperatorUse</name></expr></init></decl>;</decl_stmt>
                <if pos:line="1215" pos:column="17">if<condition pos:line="1215" pos:column="19">(<expr><name pos:line="1215" pos:column="20">opUse</name> <op:operator pos:line="1215" pos:column="26">!=</op:operator> <name pos:line="1215" pos:column="29">null</name> <op:operator pos:line="1215" pos:column="34">&amp;&amp;</op:operator> <name><name pos:line="1215" pos:column="37">opUse</name><op:operator pos:line="1215" pos:column="42">.</op:operator><name pos:line="1215" pos:column="43">Text</name></name> <op:operator pos:line="1215" pos:column="48">==</op:operator> <lit:literal type="string" pos:line="1215" pos:column="51">"("</lit:literal></expr>)</condition><then pos:line="1215" pos:column="55"> <block pos:line="1215" pos:column="56">{
                    <comment type="line" pos:line="1216" pos:column="21">//this is the start of a sub-expression</comment>
                    <expr_stmt><expr><call><name><name pos:line="1217" pos:column="21">expressionStack</name><op:operator pos:line="1217" pos:column="36">.</op:operator><name pos:line="1217" pos:column="37">Push</name></name><argument_list pos:line="1217" pos:column="41">(<argument><expr><op:operator pos:line="1217" pos:column="42">new</op:operator> <call><name pos:line="1217" pos:column="46">Expression</name><argument_list pos:line="1217" pos:column="56">()</argument_list></call> <block pos:line="1217" pos:column="59">{
                        <expr><name pos:line="1218" pos:column="25">ProgrammingLanguage</name> <op:operator pos:line="1218" pos:column="45">=</op:operator> <name pos:line="1218" pos:column="47">ParserLanguage</name></expr><op:operator pos:line="1218" pos:column="61">,</op:operator>
                        <expr><name pos:line="1219" pos:column="25">Location</name> <op:operator pos:line="1219" pos:column="34">=</op:operator> <call><name><name pos:line="1219" pos:column="36">context</name><op:operator pos:line="1219" pos:column="43">.</op:operator><name pos:line="1219" pos:column="44">CreateLocation</name></name><argument_list pos:line="1219" pos:column="58">(<argument><expr><name><name pos:line="1219" pos:column="59">element</name><op:operator pos:line="1219" pos:column="66">.</op:operator><name pos:line="1219" pos:column="67">Parent</name></name></expr></argument>)</argument_list></call></expr>
                    }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="1221" pos:column="19">else <if pos:line="1221" pos:column="24">if<condition pos:line="1221" pos:column="26">(<expr><name pos:line="1221" pos:column="27">opUse</name> <op:operator pos:line="1221" pos:column="33">!=</op:operator> <name pos:line="1221" pos:column="36">null</name> <op:operator pos:line="1221" pos:column="41">&amp;&amp;</op:operator> <name><name pos:line="1221" pos:column="44">opUse</name><op:operator pos:line="1221" pos:column="49">.</op:operator><name pos:line="1221" pos:column="50">Text</name></name> <op:operator pos:line="1221" pos:column="55">==</op:operator> <lit:literal type="string" pos:line="1221" pos:column="58">")"</lit:literal></expr>)</condition><then pos:line="1221" pos:column="62"> <block pos:line="1221" pos:column="63">{
                    <comment type="line" pos:line="1222" pos:column="21">//this is the end of a sub-expression</comment>
                    <decl_stmt><decl><type><name pos:line="1223" pos:column="21">var</name></type> <name pos:line="1223" pos:column="25">subExp</name> <init pos:line="1223" pos:column="32">= <expr><call><name><name pos:line="1223" pos:column="34">expressionStack</name><op:operator pos:line="1223" pos:column="49">.</op:operator><name pos:line="1223" pos:column="50">Pop</name></name><argument_list pos:line="1223" pos:column="53">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="1224" pos:column="21">expressionStack</name><op:operator pos:line="1224" pos:column="36">.</op:operator><name pos:line="1224" pos:column="37">Peek</name></name><argument_list pos:line="1224" pos:column="41">()</argument_list></call><op:operator pos:line="1224" pos:column="43">.</op:operator><call><name pos:line="1224" pos:column="44">AddComponent</name><argument_list pos:line="1224" pos:column="56">(<argument><expr><name pos:line="1224" pos:column="57">subExp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="1225" pos:column="19">else <block pos:line="1225" pos:column="24">{
                    <expr_stmt><expr><call><name><name pos:line="1226" pos:column="21">expressionStack</name><op:operator pos:line="1226" pos:column="36">.</op:operator><name pos:line="1226" pos:column="37">Peek</name></name><argument_list pos:line="1226" pos:column="41">()</argument_list></call><op:operator pos:line="1226" pos:column="43">.</op:operator><call><name pos:line="1226" pos:column="44">AddComponent</name><argument_list pos:line="1226" pos:column="56">(<argument><expr><name pos:line="1226" pos:column="57">exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if></else></if>
            }</block></foreach>

            <while pos:line="1230" pos:column="13">while<condition pos:line="1230" pos:column="18">(<expr><name><name pos:line="1230" pos:column="19">expressionStack</name><op:operator pos:line="1230" pos:column="34">.</op:operator><name pos:line="1230" pos:column="35">Count</name></name> <op:operator pos:line="1230" pos:column="41">&gt;</op:operator> <lit:literal type="number" pos:line="1230" pos:column="43">1</lit:literal></expr>)</condition> <block pos:line="1230" pos:column="46">{
                <comment type="line" pos:line="1231" pos:column="17">//we saw more lparens than rparens, just combine the expression fragments</comment>
                <decl_stmt><decl><type><name pos:line="1232" pos:column="17">var</name></type> <name pos:line="1232" pos:column="21">exp</name> <init pos:line="1232" pos:column="25">= <expr><call><name><name pos:line="1232" pos:column="27">expressionStack</name><op:operator pos:line="1232" pos:column="42">.</op:operator><name pos:line="1232" pos:column="43">Pop</name></name><argument_list pos:line="1232" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="1233" pos:column="17">expressionStack</name><op:operator pos:line="1233" pos:column="32">.</op:operator><name pos:line="1233" pos:column="33">Peek</name></name><argument_list pos:line="1233" pos:column="37">()</argument_list></call><op:operator pos:line="1233" pos:column="39">.</op:operator><call><name pos:line="1233" pos:column="40">AddComponent</name><argument_list pos:line="1233" pos:column="52">(<argument><expr><name pos:line="1233" pos:column="53">exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>

            <return pos:line="1236" pos:column="13">return <expr><call><name><name pos:line="1236" pos:column="20">expressionStack</name><op:operator pos:line="1236" pos:column="35">.</op:operator><name pos:line="1236" pos:column="36">Pop</name></name><argument_list pos:line="1236" pos:column="39">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="1239" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="1240" pos:column="9">/// Creates an &lt;see cref="Expression"/&gt; object for &lt;paramref name="expElement"/&gt;.</comment>
        <comment type="line" pos:line="1241" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="1242" pos:column="9">/// &lt;param name="expElement"&gt;The SRC.Expression element to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="1243" pos:column="9">/// &lt;param name="context"&gt;The context to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="1244" pos:column="9">/// &lt;returns&gt;A &lt;see cref="Expression"/&gt; corresponding to &lt;paramref name="expElement"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="1245" pos:column="9">protected</specifier> <specifier pos:line="1245" pos:column="19">virtual</specifier> <name pos:line="1245" pos:column="27">Expression</name></type> <name pos:line="1245" pos:column="38">ParseExpressionElement</name><parameter_list pos:line="1245" pos:column="60">(<param><decl><type><name pos:line="1245" pos:column="61">XElement</name></type> <name pos:line="1245" pos:column="70">expElement</name></decl></param>, <param><decl><type><name pos:line="1245" pos:column="82">ParserContext</name></type> <name pos:line="1245" pos:column="96">context</name></decl></param>)</parameter_list> <block pos:line="1245" pos:column="105">{
            <if pos:line="1246" pos:column="13">if<condition pos:line="1246" pos:column="15">(<expr><name pos:line="1246" pos:column="16">expElement</name> <op:operator pos:line="1246" pos:column="27">==</op:operator> <name pos:line="1246" pos:column="30">null</name></expr>)</condition><then pos:line="1246" pos:column="35">
                <throw pos:line="1247" pos:column="17">throw <expr><op:operator pos:line="1247" pos:column="23">new</op:operator> <call><name pos:line="1247" pos:column="27">ArgumentNullException</name><argument_list pos:line="1247" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="1247" pos:column="49">"expElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="1248" pos:column="13">if<condition pos:line="1248" pos:column="15">(<expr><name><name pos:line="1248" pos:column="16">expElement</name><op:operator pos:line="1248" pos:column="26">.</op:operator><name pos:line="1248" pos:column="27">Name</name></name> <op:operator pos:line="1248" pos:column="32">!=</op:operator> <name><name pos:line="1248" pos:column="35">SRC</name><op:operator pos:line="1248" pos:column="38">.</op:operator><name pos:line="1248" pos:column="39">Expression</name></name></expr>)</condition><then pos:line="1248" pos:column="50">
                <throw pos:line="1249" pos:column="17">throw <expr><op:operator pos:line="1249" pos:column="23">new</op:operator> <call><name pos:line="1249" pos:column="27">ArgumentException</name><argument_list pos:line="1249" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="1249" pos:column="45">"Must be a SRC.Expression element"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1249" pos:column="81">"expElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="1250" pos:column="13">if<condition pos:line="1250" pos:column="15">(<expr><name pos:line="1250" pos:column="16">context</name> <op:operator pos:line="1250" pos:column="24">==</op:operator> <name pos:line="1250" pos:column="27">null</name></expr>)</condition><then pos:line="1250" pos:column="32">
                <throw pos:line="1251" pos:column="17">throw <expr><op:operator pos:line="1251" pos:column="23">new</op:operator> <call><name pos:line="1251" pos:column="27">ArgumentNullException</name><argument_list pos:line="1251" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="1251" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <return pos:line="1253" pos:column="13">return <expr><call><name pos:line="1253" pos:column="20">ParseExpression</name><argument_list pos:line="1253" pos:column="35">(<argument><expr><call><name><name pos:line="1253" pos:column="36">expElement</name><op:operator pos:line="1253" pos:column="46">.</op:operator><name pos:line="1253" pos:column="47">Elements</name></name><argument_list pos:line="1253" pos:column="55">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1253" pos:column="59">context</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
        
        <comment type="line" pos:line="1256" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="1257" pos:column="9">/// Creates a variable declaration object from the given declaration element</comment>
        <comment type="line" pos:line="1258" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="1259" pos:column="9">/// &lt;param name="declElement"&gt;The SRC.Declaration element to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="1260" pos:column="9">/// &lt;param name="context"&gt;The parser context.&lt;/param&gt;</comment>
        <comment type="line" pos:line="1261" pos:column="9">/// &lt;returns&gt;A VariableDeclaration object corresponding to the given element.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="1262" pos:column="9">protected</specifier> <specifier pos:line="1262" pos:column="19">virtual</specifier> <name pos:line="1262" pos:column="27">VariableDeclaration</name></type> <name pos:line="1262" pos:column="47">ParseDeclarationElement</name><parameter_list pos:line="1262" pos:column="70">(<param><decl><type><name pos:line="1262" pos:column="71">XElement</name></type> <name pos:line="1262" pos:column="80">declElement</name></decl></param>, <param><decl><type><name pos:line="1262" pos:column="93">ParserContext</name></type> <name pos:line="1262" pos:column="107">context</name></decl></param>)</parameter_list> <block pos:line="1262" pos:column="116">{
            <comment type="line" pos:line="1263" pos:column="13">//TODO: can/should this handle function_decls as well as decls? ParseParameterElement may pass in a function_decl</comment>

            <if pos:line="1265" pos:column="13">if<condition pos:line="1265" pos:column="15">(<expr><name pos:line="1265" pos:column="16">declElement</name> <op:operator pos:line="1265" pos:column="28">==</op:operator> <name pos:line="1265" pos:column="31">null</name></expr>)</condition><then pos:line="1265" pos:column="36">
                <throw pos:line="1266" pos:column="17">throw <expr><op:operator pos:line="1266" pos:column="23">new</op:operator> <call><name pos:line="1266" pos:column="27">ArgumentNullException</name><argument_list pos:line="1266" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="1266" pos:column="49">"declElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="1267" pos:column="13">if<condition pos:line="1267" pos:column="15">(<expr><op:operator pos:line="1267" pos:column="16">!</op:operator><op:operator pos:line="1267" pos:column="17">(</op:operator><name><name pos:line="1267" pos:column="18">declElement</name><op:operator pos:line="1267" pos:column="29">.</op:operator><name pos:line="1267" pos:column="30">Name</name></name> <op:operator pos:line="1267" pos:column="35">==</op:operator> <name><name pos:line="1267" pos:column="38">SRC</name><op:operator pos:line="1267" pos:column="41">.</op:operator><name pos:line="1267" pos:column="42">Declaration</name></name> <op:operator pos:line="1267" pos:column="54">||</op:operator> <name><name pos:line="1267" pos:column="57">declElement</name><op:operator pos:line="1267" pos:column="68">.</op:operator><name pos:line="1267" pos:column="69">Name</name></name> <op:operator pos:line="1267" pos:column="74">==</op:operator> <name><name pos:line="1267" pos:column="77">SRC</name><op:operator pos:line="1267" pos:column="80">.</op:operator><name pos:line="1267" pos:column="81">FunctionDeclaration</name></name><op:operator pos:line="1267" pos:column="100">)</op:operator></expr>)</condition><then pos:line="1267" pos:column="102">
                <throw pos:line="1268" pos:column="17">throw <expr><op:operator pos:line="1268" pos:column="23">new</op:operator> <call><name pos:line="1268" pos:column="27">ArgumentException</name><argument_list pos:line="1268" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="1268" pos:column="45">"Must be a SRC.Declaration or SRC.FunctionDeclaration element"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1268" pos:column="109">"declElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="1269" pos:column="13">if<condition pos:line="1269" pos:column="15">(<expr><name pos:line="1269" pos:column="16">context</name> <op:operator pos:line="1269" pos:column="24">==</op:operator> <name pos:line="1269" pos:column="27">null</name></expr>)</condition><then pos:line="1269" pos:column="32">
                <throw pos:line="1270" pos:column="17">throw <expr><op:operator pos:line="1270" pos:column="23">new</op:operator> <call><name pos:line="1270" pos:column="27">ArgumentNullException</name><argument_list pos:line="1270" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="1270" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="1272" pos:column="13">var</name></type> <name pos:line="1272" pos:column="17">varDecl</name> <init pos:line="1272" pos:column="25">= <expr><op:operator pos:line="1272" pos:column="27">new</op:operator> <name pos:line="1272" pos:column="31">VariableDeclaration</name> <block pos:line="1272" pos:column="51">{
                <expr><name pos:line="1273" pos:column="17">Location</name> <op:operator pos:line="1273" pos:column="26">=</op:operator> <call><name><name pos:line="1273" pos:column="28">context</name><op:operator pos:line="1273" pos:column="35">.</op:operator><name pos:line="1273" pos:column="36">CreateLocation</name></name><argument_list pos:line="1273" pos:column="50">(<argument><expr><name pos:line="1273" pos:column="51">declElement</name></expr></argument>)</argument_list></call></expr>, 
                <expr><name pos:line="1274" pos:column="17">ProgrammingLanguage</name> <op:operator pos:line="1274" pos:column="37">=</op:operator> <name pos:line="1274" pos:column="39">ParserLanguage</name></expr>
            }</block></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1277" pos:column="13">var</name></type> <name pos:line="1277" pos:column="17">nameElement</name> <init pos:line="1277" pos:column="29">= <expr><call><name><name pos:line="1277" pos:column="31">declElement</name><op:operator pos:line="1277" pos:column="42">.</op:operator><name pos:line="1277" pos:column="43">Elements</name></name><argument_list pos:line="1277" pos:column="51">(<argument><expr><name><name pos:line="1277" pos:column="52">SRC</name><op:operator pos:line="1277" pos:column="55">.</op:operator><name pos:line="1277" pos:column="56">Name</name></name></expr></argument>)</argument_list></call><op:operator pos:line="1277" pos:column="61">.</op:operator><call><name pos:line="1277" pos:column="62">LastOrDefault</name><argument_list pos:line="1277" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="1278" pos:column="13">if<condition pos:line="1278" pos:column="15">(<expr><name pos:line="1278" pos:column="16">nameElement</name> <op:operator pos:line="1278" pos:column="28">!=</op:operator> <name pos:line="1278" pos:column="31">null</name></expr>)</condition><then pos:line="1278" pos:column="36"> <block pos:line="1278" pos:column="37">{
                <expr_stmt><expr><name><name pos:line="1279" pos:column="17">varDecl</name><op:operator pos:line="1279" pos:column="24">.</op:operator><name pos:line="1279" pos:column="25">Name</name></name> <op:operator pos:line="1279" pos:column="30">=</op:operator> <call><name><name pos:line="1279" pos:column="32">NameHelper</name><op:operator pos:line="1279" pos:column="42">.</op:operator><name pos:line="1279" pos:column="43">GetLastName</name></name><argument_list pos:line="1279" pos:column="54">(<argument><expr><name pos:line="1279" pos:column="55">nameElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="1282" pos:column="13">var</name></type> <name pos:line="1282" pos:column="17">typeElement</name> <init pos:line="1282" pos:column="29">= <expr><call><name><name pos:line="1282" pos:column="31">declElement</name><op:operator pos:line="1282" pos:column="42">.</op:operator><name pos:line="1282" pos:column="43">Element</name></name><argument_list pos:line="1282" pos:column="50">(<argument><expr><name><name pos:line="1282" pos:column="51">SRC</name><op:operator pos:line="1282" pos:column="54">.</op:operator><name pos:line="1282" pos:column="55">Type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="1283" pos:column="13">if<condition pos:line="1283" pos:column="15">(<expr><name pos:line="1283" pos:column="16">typeElement</name> <op:operator pos:line="1283" pos:column="28">!=</op:operator> <name pos:line="1283" pos:column="31">null</name> <op:operator pos:line="1283" pos:column="36">&amp;&amp;</op:operator> <call><name><name pos:line="1283" pos:column="39">typeElement</name><op:operator pos:line="1283" pos:column="50">.</op:operator><name pos:line="1283" pos:column="51">Attribute</name></name><argument_list pos:line="1283" pos:column="60">(<argument><expr><lit:literal type="string" pos:line="1283" pos:column="61">"ref"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1283" pos:column="68">==</op:operator> <name pos:line="1283" pos:column="71">null</name></expr>)</condition><then pos:line="1283" pos:column="76"> <block pos:line="1283" pos:column="77">{
                <expr_stmt><expr><name><name pos:line="1284" pos:column="17">varDecl</name><op:operator pos:line="1284" pos:column="24">.</op:operator><name pos:line="1284" pos:column="25">VariableType</name></name> <op:operator pos:line="1284" pos:column="38">=</op:operator> <call><name pos:line="1284" pos:column="40">ParseTypeUseElement</name><argument_list pos:line="1284" pos:column="59">(<argument><expr><name pos:line="1284" pos:column="60">typeElement</name></expr></argument>, <argument><expr><name pos:line="1284" pos:column="73">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="1285" pos:column="17">varDecl</name><op:operator pos:line="1285" pos:column="24">.</op:operator><name pos:line="1285" pos:column="25">Accessibility</name></name> <op:operator pos:line="1285" pos:column="39">=</op:operator> <call><name pos:line="1285" pos:column="41">GetAccessModifierFromTypeUseElement</name><argument_list pos:line="1285" pos:column="76">(<argument><expr><name pos:line="1285" pos:column="77">typeElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="1288" pos:column="13">var</name></type> <name pos:line="1288" pos:column="17">initElement</name> <init pos:line="1288" pos:column="29">= <expr><call><name><name pos:line="1288" pos:column="31">declElement</name><op:operator pos:line="1288" pos:column="42">.</op:operator><name pos:line="1288" pos:column="43">Element</name></name><argument_list pos:line="1288" pos:column="50">(<argument><expr><name><name pos:line="1288" pos:column="51">SRC</name><op:operator pos:line="1288" pos:column="54">.</op:operator><name pos:line="1288" pos:column="55">Init</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="1289" pos:column="13">if<condition pos:line="1289" pos:column="15">(<expr><name pos:line="1289" pos:column="16">initElement</name> <op:operator pos:line="1289" pos:column="28">!=</op:operator> <name pos:line="1289" pos:column="31">null</name></expr>)</condition><then pos:line="1289" pos:column="36"> <block pos:line="1289" pos:column="37">{
                <decl_stmt><decl><type><name pos:line="1290" pos:column="17">var</name></type> <name pos:line="1290" pos:column="21">expElement</name> <init pos:line="1290" pos:column="32">= <expr><call><name pos:line="1290" pos:column="34">GetFirstChildExpression</name><argument_list pos:line="1290" pos:column="57">(<argument><expr><name pos:line="1290" pos:column="58">initElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="1291" pos:column="17">if<condition pos:line="1291" pos:column="19">(<expr><name pos:line="1291" pos:column="20">expElement</name> <op:operator pos:line="1291" pos:column="31">!=</op:operator> <name pos:line="1291" pos:column="34">null</name></expr>)</condition><then pos:line="1291" pos:column="39"> <block pos:line="1291" pos:column="40">{
                    <expr_stmt><expr><name><name pos:line="1292" pos:column="21">varDecl</name><op:operator pos:line="1292" pos:column="28">.</op:operator><name pos:line="1292" pos:column="29">Initializer</name></name> <op:operator pos:line="1292" pos:column="41">=</op:operator> <call><name pos:line="1292" pos:column="43">ParseExpression</name><argument_list pos:line="1292" pos:column="58">(<argument><expr><name pos:line="1292" pos:column="59">expElement</name></expr></argument>, <argument><expr><name pos:line="1292" pos:column="71">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="1296" pos:column="13">var</name></type> <name pos:line="1296" pos:column="17">rangeElement</name> <init pos:line="1296" pos:column="30">= <expr><call><name><name pos:line="1296" pos:column="32">declElement</name><op:operator pos:line="1296" pos:column="43">.</op:operator><name pos:line="1296" pos:column="44">Element</name></name><argument_list pos:line="1296" pos:column="51">(<argument><expr><name><name pos:line="1296" pos:column="52">SRC</name><op:operator pos:line="1296" pos:column="55">.</op:operator><name pos:line="1296" pos:column="56">Range</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="1297" pos:column="13">if<condition pos:line="1297" pos:column="15">(<expr><name pos:line="1297" pos:column="16">rangeElement</name> <op:operator pos:line="1297" pos:column="29">!=</op:operator> <name pos:line="1297" pos:column="32">null</name></expr>)</condition><then pos:line="1297" pos:column="37"> <block pos:line="1297" pos:column="38">{
                <decl_stmt><decl><type><name pos:line="1298" pos:column="17">var</name></type> <name pos:line="1298" pos:column="21">expElement</name> <init pos:line="1298" pos:column="32">= <expr><call><name pos:line="1298" pos:column="34">GetFirstChildExpression</name><argument_list pos:line="1298" pos:column="57">(<argument><expr><name pos:line="1298" pos:column="58">rangeElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="1299" pos:column="17">if<condition pos:line="1299" pos:column="19">(<expr><name pos:line="1299" pos:column="20">expElement</name> <op:operator pos:line="1299" pos:column="31">!=</op:operator> <name pos:line="1299" pos:column="34">null</name></expr>)</condition><then pos:line="1299" pos:column="39"> <block pos:line="1299" pos:column="40">{
                    <expr_stmt><expr><name><name pos:line="1300" pos:column="21">varDecl</name><op:operator pos:line="1300" pos:column="28">.</op:operator><name pos:line="1300" pos:column="29">Range</name></name> <op:operator pos:line="1300" pos:column="35">=</op:operator> <call><name pos:line="1300" pos:column="37">ParseExpression</name><argument_list pos:line="1300" pos:column="52">(<argument><expr><name pos:line="1300" pos:column="53">rangeElement</name></expr></argument>, <argument><expr><name pos:line="1300" pos:column="67">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>

            <comment type="line" pos:line="1304" pos:column="13">//TODO: need to also handle C++ case of calling constructor in the declaration, e.g. "Foo bar(27);"</comment>

            <return pos:line="1306" pos:column="13">return <expr><name pos:line="1306" pos:column="20">varDecl</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="1309" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="1310" pos:column="9">/// Creates a NameUse object from the given name element.</comment>
        <comment type="line" pos:line="1311" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="1312" pos:column="9">/// &lt;param name="nameElement"&gt;The SRC.Name element to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="1313" pos:column="9">/// &lt;param name="context"&gt;The parser context to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="1314" pos:column="9">/// &lt;returns&gt;A NameUse corresponding to &lt;paramref name="nameElement"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="1315" pos:column="9">protected</specifier> <specifier pos:line="1315" pos:column="19">virtual</specifier> <name pos:line="1315" pos:column="27">Expression</name></type> <name pos:line="1315" pos:column="38">ParseNameUseElement</name><parameter_list pos:line="1315" pos:column="57">(<param><decl><type><name pos:line="1315" pos:column="58">XElement</name></type> <name pos:line="1315" pos:column="67">nameElement</name></decl></param>, <param><decl><type><name pos:line="1315" pos:column="80">ParserContext</name></type> <name pos:line="1315" pos:column="94">context</name></decl></param>)</parameter_list> <block pos:line="1315" pos:column="103">{
            <return pos:line="1316" pos:column="13">return <expr><call><name><name pos:line="1316" pos:column="20">ParseNameUseElement</name><argument_list pos:line="1316" pos:column="39">&lt;<argument><name pos:line="1316" pos:column="40">NameUse</name></argument>&gt;</argument_list></name><argument_list pos:line="1316" pos:column="48">(<argument><expr><name pos:line="1316" pos:column="49">nameElement</name></expr></argument>, <argument><expr><name pos:line="1316" pos:column="62">context</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="1319" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="1320" pos:column="9">/// Creates a use object from the given name element.</comment>
        <comment type="line" pos:line="1321" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="1322" pos:column="9">/// &lt;typeparam name="T"&gt;The type of use to use for the name element. This must inherit from NameUse.&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="1323" pos:column="9">/// &lt;param name="nameElement"&gt;The SRC.Name element to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="1324" pos:column="9">/// &lt;param name="context"&gt;The parser context to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="1325" pos:column="9">/// &lt;returns&gt;A use corresponding to &lt;paramref name="nameElement"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="1326" pos:column="9">protected</specifier> <specifier pos:line="1326" pos:column="19">virtual</specifier> <name pos:line="1326" pos:column="27">Expression</name></type> <name><name pos:line="1326" pos:column="38">ParseNameUseElement</name><argument_list pos:line="1326" pos:column="57">&lt;<argument><name pos:line="1326" pos:column="58">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="1326" pos:column="60">(<param><decl><type><name pos:line="1326" pos:column="61">XElement</name></type> <name pos:line="1326" pos:column="70">nameElement</name></decl></param>, <param><decl><type><name pos:line="1326" pos:column="83">ParserContext</name></type> <name pos:line="1326" pos:column="97">context</name></decl></param>)</parameter_list> <where pos:line="1326" pos:column="106">where <name pos:line="1326" pos:column="112">T</name> : <name pos:line="1326" pos:column="116">NameUse</name>, new()</where> <block pos:line="1326" pos:column="131">{
            <if pos:line="1327" pos:column="13">if<condition pos:line="1327" pos:column="15">(<expr><name pos:line="1327" pos:column="16">nameElement</name> <op:operator pos:line="1327" pos:column="28">==</op:operator> <name pos:line="1327" pos:column="31">null</name></expr>)</condition><then pos:line="1327" pos:column="36">
                <throw pos:line="1328" pos:column="17">throw <expr><op:operator pos:line="1328" pos:column="23">new</op:operator> <call><name pos:line="1328" pos:column="27">ArgumentNullException</name><argument_list pos:line="1328" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="1328" pos:column="49">"nameElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="1329" pos:column="13">if<condition pos:line="1329" pos:column="15">(<expr><name><name pos:line="1329" pos:column="16">nameElement</name><op:operator pos:line="1329" pos:column="27">.</op:operator><name pos:line="1329" pos:column="28">Name</name></name> <op:operator pos:line="1329" pos:column="33">!=</op:operator> <name><name pos:line="1329" pos:column="36">SRC</name><op:operator pos:line="1329" pos:column="39">.</op:operator><name pos:line="1329" pos:column="40">Name</name></name></expr>)</condition><then pos:line="1329" pos:column="45">
                <throw pos:line="1330" pos:column="17">throw <expr><op:operator pos:line="1330" pos:column="23">new</op:operator> <call><name pos:line="1330" pos:column="27">ArgumentException</name><argument_list pos:line="1330" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="1330" pos:column="45">"should be a SRC.Name"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1330" pos:column="69">"nameElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="1331" pos:column="13">if<condition pos:line="1331" pos:column="15">(<expr><name pos:line="1331" pos:column="16">context</name> <op:operator pos:line="1331" pos:column="24">==</op:operator> <name pos:line="1331" pos:column="27">null</name></expr>)</condition><then pos:line="1331" pos:column="32">
                <throw pos:line="1332" pos:column="17">throw <expr><op:operator pos:line="1332" pos:column="23">new</op:operator> <call><name pos:line="1332" pos:column="27">ArgumentNullException</name><argument_list pos:line="1332" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="1332" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <comment type="line" pos:line="1334" pos:column="13">//check if we can be sure this is a variable use</comment>
            <if pos:line="1335" pos:column="13">if<condition pos:line="1335" pos:column="15">(<expr><call><name><name pos:line="1335" pos:column="16">nameElement</name><op:operator pos:line="1335" pos:column="27">.</op:operator><name pos:line="1335" pos:column="28">Elements</name></name><argument_list pos:line="1335" pos:column="36">(<argument><expr><name><name pos:line="1335" pos:column="37">SRC</name><op:operator pos:line="1335" pos:column="40">.</op:operator><name pos:line="1335" pos:column="41">Index</name></name></expr></argument>)</argument_list></call><op:operator pos:line="1335" pos:column="47">.</op:operator><call><name pos:line="1335" pos:column="48">Any</name><argument_list pos:line="1335" pos:column="51">()</argument_list></call></expr>)</condition><then pos:line="1335" pos:column="54"> <block pos:line="1335" pos:column="55">{
                <return pos:line="1336" pos:column="17">return <expr><call><name pos:line="1336" pos:column="24">ParseVariableUse</name><argument_list pos:line="1336" pos:column="40">(<argument><expr><name pos:line="1336" pos:column="41">nameElement</name></expr></argument>, <argument><expr><name pos:line="1336" pos:column="54">context</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>

            <if pos:line="1339" pos:column="13">if<condition pos:line="1339" pos:column="15">(<expr><name><name pos:line="1339" pos:column="16">nameElement</name><op:operator pos:line="1339" pos:column="27">.</op:operator><name pos:line="1339" pos:column="28">HasElements</name></name></expr>)</condition><then pos:line="1339" pos:column="40"> <block pos:line="1339" pos:column="41">{
                <return pos:line="1340" pos:column="17">return <expr><call><name><name pos:line="1340" pos:column="24">ParseExpression</name><argument_list pos:line="1340" pos:column="39">&lt;<argument><name pos:line="1340" pos:column="40">T</name></argument>&gt;</argument_list></name><argument_list pos:line="1340" pos:column="42">(<argument><expr><call><name><name pos:line="1340" pos:column="43">nameElement</name><op:operator pos:line="1340" pos:column="54">.</op:operator><name pos:line="1340" pos:column="55">Elements</name></name><argument_list pos:line="1340" pos:column="63">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1340" pos:column="67">context</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>

            <comment type="line" pos:line="1343" pos:column="13">//no children</comment>
            <decl_stmt><decl><type><name pos:line="1344" pos:column="13">var</name></type> <name pos:line="1344" pos:column="17">nu</name> <init pos:line="1344" pos:column="20">= <expr><op:operator pos:line="1344" pos:column="22">new</op:operator> <call><name pos:line="1344" pos:column="26">T</name><argument_list pos:line="1344" pos:column="27">()</argument_list></call> <block pos:line="1344" pos:column="30">{
                <expr><name pos:line="1345" pos:column="17">Location</name> <op:operator pos:line="1345" pos:column="26">=</op:operator> <call><name><name pos:line="1345" pos:column="28">context</name><op:operator pos:line="1345" pos:column="35">.</op:operator><name pos:line="1345" pos:column="36">CreateLocation</name></name><argument_list pos:line="1345" pos:column="50">(<argument><expr><name pos:line="1345" pos:column="51">nameElement</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1345" pos:column="64">true</lit:literal></expr></argument>)</argument_list></call></expr>,
                <expr><name pos:line="1346" pos:column="17">ProgrammingLanguage</name> <op:operator pos:line="1346" pos:column="37">=</op:operator> <name pos:line="1346" pos:column="39">ParserLanguage</name></expr>,
                <expr><name pos:line="1347" pos:column="17">Name</name> <op:operator pos:line="1347" pos:column="22">=</op:operator> <call><name><name pos:line="1347" pos:column="24">NameHelper</name><op:operator pos:line="1347" pos:column="34">.</op:operator><name pos:line="1347" pos:column="35">GetLastName</name></name><argument_list pos:line="1347" pos:column="46">(<argument><expr><name pos:line="1347" pos:column="47">nameElement</name></expr></argument>)</argument_list></call></expr>,
            }</block></expr></init></decl>;</decl_stmt>

            <return pos:line="1350" pos:column="13">return <expr><name pos:line="1350" pos:column="20">nu</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="1353" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="1354" pos:column="9">/// Creates an OperatorUse object from the given operator element.</comment>
        <comment type="line" pos:line="1355" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="1356" pos:column="9">/// &lt;param name="operatorElement"&gt;The OP.Operator element to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="1357" pos:column="9">/// &lt;param name="context"&gt;The parser context to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="1358" pos:column="9">/// &lt;returns&gt;An OperatorUse corresponding to &lt;paramref name="operatorElement"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="1359" pos:column="9">protected</specifier> <specifier pos:line="1359" pos:column="19">virtual</specifier> <name pos:line="1359" pos:column="27">OperatorUse</name></type> <name pos:line="1359" pos:column="39">ParseOperatorElement</name><parameter_list pos:line="1359" pos:column="59">(<param><decl><type><name pos:line="1359" pos:column="60">XElement</name></type> <name pos:line="1359" pos:column="69">operatorElement</name></decl></param>, <param><decl><type><name pos:line="1359" pos:column="86">ParserContext</name></type> <name pos:line="1359" pos:column="100">context</name></decl></param>)</parameter_list> <block pos:line="1359" pos:column="109">{
            <if pos:line="1360" pos:column="13">if<condition pos:line="1360" pos:column="15">(<expr><name pos:line="1360" pos:column="16">operatorElement</name> <op:operator pos:line="1360" pos:column="32">==</op:operator> <name pos:line="1360" pos:column="35">null</name></expr>)</condition><then pos:line="1360" pos:column="40">
                <throw pos:line="1361" pos:column="17">throw <expr><op:operator pos:line="1361" pos:column="23">new</op:operator> <call><name pos:line="1361" pos:column="27">ArgumentNullException</name><argument_list pos:line="1361" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="1361" pos:column="49">"operatorElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="1362" pos:column="13">if<condition pos:line="1362" pos:column="15">(<expr><name><name pos:line="1362" pos:column="16">operatorElement</name><op:operator pos:line="1362" pos:column="31">.</op:operator><name pos:line="1362" pos:column="32">Name</name></name> <op:operator pos:line="1362" pos:column="37">!=</op:operator> <name><name pos:line="1362" pos:column="40">OP</name><op:operator pos:line="1362" pos:column="42">.</op:operator><name pos:line="1362" pos:column="43">Operator</name></name></expr>)</condition><then pos:line="1362" pos:column="52">
                <throw pos:line="1363" pos:column="17">throw <expr><op:operator pos:line="1363" pos:column="23">new</op:operator> <call><name pos:line="1363" pos:column="27">ArgumentException</name><argument_list pos:line="1363" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="1363" pos:column="45">"should be an OP.Operator"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1363" pos:column="73">"operatorElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="1364" pos:column="13">if<condition pos:line="1364" pos:column="15">(<expr><name pos:line="1364" pos:column="16">context</name> <op:operator pos:line="1364" pos:column="24">==</op:operator> <name pos:line="1364" pos:column="27">null</name></expr>)</condition><then pos:line="1364" pos:column="32">
                <throw pos:line="1365" pos:column="17">throw <expr><op:operator pos:line="1365" pos:column="23">new</op:operator> <call><name pos:line="1365" pos:column="27">ArgumentNullException</name><argument_list pos:line="1365" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="1365" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="1367" pos:column="13">var</name></type> <name pos:line="1367" pos:column="17">op</name> <init pos:line="1367" pos:column="20">= <expr><op:operator pos:line="1367" pos:column="22">new</op:operator> <call><name pos:line="1367" pos:column="26">OperatorUse</name><argument_list pos:line="1367" pos:column="37">()</argument_list></call> <block pos:line="1367" pos:column="40">{
                <expr><name pos:line="1368" pos:column="17">Location</name> <op:operator pos:line="1368" pos:column="26">=</op:operator> <call><name><name pos:line="1368" pos:column="28">context</name><op:operator pos:line="1368" pos:column="35">.</op:operator><name pos:line="1368" pos:column="36">CreateLocation</name></name><argument_list pos:line="1368" pos:column="50">(<argument><expr><name pos:line="1368" pos:column="51">operatorElement</name></expr></argument>)</argument_list></call></expr>,
                <expr><name pos:line="1369" pos:column="17">ProgrammingLanguage</name> <op:operator pos:line="1369" pos:column="37">=</op:operator> <name pos:line="1369" pos:column="39">ParserLanguage</name></expr>,
                <expr><name pos:line="1370" pos:column="17">Text</name> <op:operator pos:line="1370" pos:column="22">=</op:operator> <name><name pos:line="1370" pos:column="24">operatorElement</name><op:operator pos:line="1370" pos:column="39">.</op:operator><name pos:line="1370" pos:column="40">Value</name></name></expr>
            }</block></expr></init></decl>;</decl_stmt>

            <return pos:line="1373" pos:column="13">return <expr><name pos:line="1373" pos:column="20">op</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="1376" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="1377" pos:column="9">/// Creates a &lt;see cref="TypeUse"/&gt; object for &lt;paramref name="typeUseElement"/&gt;.</comment>
        <comment type="line" pos:line="1378" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="1379" pos:column="9">/// &lt;param name="typeUseElement"&gt;The type use element to parse. This must be a SRC.Type or SRC.Name element.&lt;/param&gt;</comment>
        <comment type="line" pos:line="1380" pos:column="9">/// &lt;param name="context"&gt;The context to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="1381" pos:column="9">/// &lt;returns&gt;A &lt;see cref="TypeUse"/&gt; corresponding to &lt;paramref name="typeUseElement"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="1382" pos:column="9">protected</specifier> <specifier pos:line="1382" pos:column="19">virtual</specifier> <name pos:line="1382" pos:column="27">TypeUse</name></type> <name pos:line="1382" pos:column="35">ParseTypeUseElement</name><parameter_list pos:line="1382" pos:column="54">(<param><decl><type><name pos:line="1382" pos:column="55">XElement</name></type> <name pos:line="1382" pos:column="64">typeUseElement</name></decl></param>, <param><decl><type><name pos:line="1382" pos:column="80">ParserContext</name></type> <name pos:line="1382" pos:column="94">context</name></decl></param>)</parameter_list> <block pos:line="1382" pos:column="103">{
            <if pos:line="1383" pos:column="13">if<condition pos:line="1383" pos:column="15">(<expr><name pos:line="1383" pos:column="16">typeUseElement</name> <op:operator pos:line="1383" pos:column="31">==</op:operator> <name pos:line="1383" pos:column="34">null</name></expr>)</condition><then pos:line="1383" pos:column="39">
                <throw pos:line="1384" pos:column="17">throw <expr><op:operator pos:line="1384" pos:column="23">new</op:operator> <call><name pos:line="1384" pos:column="27">ArgumentNullException</name><argument_list pos:line="1384" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="1384" pos:column="49">"typeUseElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="1385" pos:column="13">if<condition pos:line="1385" pos:column="15">(<expr><op:operator pos:line="1385" pos:column="16">!</op:operator><op:operator pos:line="1385" pos:column="17">(</op:operator><name><name pos:line="1385" pos:column="18">typeUseElement</name><op:operator pos:line="1385" pos:column="32">.</op:operator><name pos:line="1385" pos:column="33">Name</name></name> <op:operator pos:line="1385" pos:column="38">==</op:operator> <name><name pos:line="1385" pos:column="41">SRC</name><op:operator pos:line="1385" pos:column="44">.</op:operator><name pos:line="1385" pos:column="45">Type</name></name> <op:operator pos:line="1385" pos:column="50">||</op:operator> <name><name pos:line="1385" pos:column="53">typeUseElement</name><op:operator pos:line="1385" pos:column="67">.</op:operator><name pos:line="1385" pos:column="68">Name</name></name> <op:operator pos:line="1385" pos:column="73">==</op:operator> <name><name pos:line="1385" pos:column="76">SRC</name><op:operator pos:line="1385" pos:column="79">.</op:operator><name pos:line="1385" pos:column="80">Name</name></name><op:operator pos:line="1385" pos:column="84">)</op:operator></expr>)</condition><then pos:line="1385" pos:column="86">
                <throw pos:line="1386" pos:column="17">throw <expr><op:operator pos:line="1386" pos:column="23">new</op:operator> <call><name pos:line="1386" pos:column="27">ArgumentException</name><argument_list pos:line="1386" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="1386" pos:column="45">"Must be a SRC.Type or SRC.Name element"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1386" pos:column="87">"typeUseElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="1387" pos:column="13">if<condition pos:line="1387" pos:column="15">(<expr><name pos:line="1387" pos:column="16">context</name> <op:operator pos:line="1387" pos:column="24">==</op:operator> <name pos:line="1387" pos:column="27">null</name></expr>)</condition><then pos:line="1387" pos:column="32">
                <throw pos:line="1388" pos:column="17">throw <expr><op:operator pos:line="1388" pos:column="23">new</op:operator> <call><name pos:line="1388" pos:column="27">ArgumentNullException</name><argument_list pos:line="1388" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="1388" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="1390" pos:column="13">XElement</name></type> <name pos:line="1390" pos:column="22">typeNameElement</name></decl>;</decl_stmt>
            <comment type="line" pos:line="1391" pos:column="13">// locate the name element for the type</comment>
            <if pos:line="1392" pos:column="13">if<condition pos:line="1392" pos:column="15">(<expr><name><name pos:line="1392" pos:column="16">typeUseElement</name><op:operator pos:line="1392" pos:column="30">.</op:operator><name pos:line="1392" pos:column="31">Name</name></name> <op:operator pos:line="1392" pos:column="36">==</op:operator> <name><name pos:line="1392" pos:column="39">SRC</name><op:operator pos:line="1392" pos:column="42">.</op:operator><name pos:line="1392" pos:column="43">Type</name></name></expr>)</condition><then pos:line="1392" pos:column="48"> <block pos:line="1392" pos:column="49">{
                <expr_stmt><expr><name pos:line="1393" pos:column="17">typeNameElement</name> <op:operator pos:line="1393" pos:column="33">=</op:operator> <call><name><name pos:line="1393" pos:column="35">typeUseElement</name><op:operator pos:line="1393" pos:column="49">.</op:operator><name pos:line="1393" pos:column="50">Elements</name></name><argument_list pos:line="1393" pos:column="58">(<argument><expr><name><name pos:line="1393" pos:column="59">SRC</name><op:operator pos:line="1393" pos:column="62">.</op:operator><name pos:line="1393" pos:column="63">Name</name></name></expr></argument>)</argument_list></call><op:operator pos:line="1393" pos:column="68">.</op:operator><call><name pos:line="1393" pos:column="69">LastOrDefault</name><argument_list pos:line="1393" pos:column="82">()</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="1394" pos:column="15">else <block pos:line="1394" pos:column="20">{
                <comment type="line" pos:line="1395" pos:column="17">//typeUseElement is a SRC.Name</comment>
                <expr_stmt><expr><name pos:line="1396" pos:column="17">typeNameElement</name> <op:operator pos:line="1396" pos:column="33">=</op:operator> <name pos:line="1396" pos:column="35">typeUseElement</name></expr>;</expr_stmt>
            }</block></else></if> 

            <decl_stmt><decl><type><name pos:line="1399" pos:column="13">XElement</name></type> <name pos:line="1399" pos:column="22">lastNameElement</name> <init pos:line="1399" pos:column="38">= <expr><name pos:line="1399" pos:column="40">null</name></expr></init></decl>;</decl_stmt>                   <comment type="line" pos:line="1399" pos:column="64">// this is the name element that identifies the type being used</comment>
            <decl_stmt><decl><type><name pos:line="1400" pos:column="13">NamePrefix</name></type> <name pos:line="1400" pos:column="24">prefix</name> <init pos:line="1400" pos:column="31">= <expr><name pos:line="1400" pos:column="33">null</name></expr></init></decl>;</decl_stmt>                          <comment type="line" pos:line="1400" pos:column="64">// This is the prefix (in A::B::C, this would be the chain A::B)</comment>
            <decl_stmt><decl><type><name pos:line="1401" pos:column="13">XElement</name></type> <name pos:line="1401" pos:column="22">argumentListElement</name> <init pos:line="1401" pos:column="42">= <expr><name pos:line="1401" pos:column="44">null</name></expr></init></decl>;</decl_stmt>               <comment type="line" pos:line="1401" pos:column="64">// the argument list element holds the parameters for generic type uses</comment>
            <decl_stmt><decl><type><name pos:line="1402" pos:column="13">var</name></type> <name pos:line="1402" pos:column="17">typeArguments</name> <init pos:line="1402" pos:column="31">= <expr><call><name><name pos:line="1402" pos:column="33">Enumerable</name><op:operator pos:line="1402" pos:column="43">.</op:operator><name><name pos:line="1402" pos:column="44">Empty</name><argument_list pos:line="1402" pos:column="49">&lt;<argument><name pos:line="1402" pos:column="50">TypeUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1402" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>   <comment type="line" pos:line="1402" pos:column="64">// enumerable for the actual generic arguments</comment>

            <comment type="line" pos:line="1404" pos:column="13">// get the last name element and the prefix</comment>
            <if pos:line="1405" pos:column="13">if<condition pos:line="1405" pos:column="15">(<expr><name pos:line="1405" pos:column="16">typeNameElement</name> <op:operator pos:line="1405" pos:column="32">!=</op:operator> <name pos:line="1405" pos:column="35">null</name></expr>)</condition><then pos:line="1405" pos:column="40"> <block pos:line="1405" pos:column="41">{
                <expr_stmt><expr><name pos:line="1406" pos:column="17">lastNameElement</name> <op:operator pos:line="1406" pos:column="33">=</op:operator> <call><name><name pos:line="1406" pos:column="35">NameHelper</name><op:operator pos:line="1406" pos:column="45">.</op:operator><name pos:line="1406" pos:column="46">GetLastNameElement</name></name><argument_list pos:line="1406" pos:column="64">(<argument><expr><name pos:line="1406" pos:column="65">typeNameElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="1407" pos:column="17">prefix</name> <op:operator pos:line="1407" pos:column="24">=</op:operator> <call><name pos:line="1407" pos:column="26">ParseNamePrefix</name><argument_list pos:line="1407" pos:column="41">(<argument><expr><name pos:line="1407" pos:column="42">typeNameElement</name></expr></argument>, <argument><expr><name pos:line="1407" pos:column="59">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <comment type="line" pos:line="1410" pos:column="13">// if the last name element exists, then this *may* be a generic type use </comment>
            <comment type="line" pos:line="1411" pos:column="13">// go look for the argument list element</comment>
            <if pos:line="1412" pos:column="13">if<condition pos:line="1412" pos:column="15">(<expr><name pos:line="1412" pos:column="16">lastNameElement</name> <op:operator pos:line="1412" pos:column="32">!=</op:operator> <name pos:line="1412" pos:column="35">null</name></expr>)</condition><then pos:line="1412" pos:column="40"> <block pos:line="1412" pos:column="41">{
                <if pos:line="1413" pos:column="17">if<condition pos:line="1413" pos:column="19">(<expr><name pos:line="1413" pos:column="20">prefix</name> <op:operator pos:line="1413" pos:column="27">==</op:operator> <name pos:line="1413" pos:column="30">null</name></expr>)</condition><then pos:line="1413" pos:column="35"> <block pos:line="1413" pos:column="36">{ 
                    <comment type="line" pos:line="1414" pos:column="21">//if there is no prefix, then the argument list element will be the first sibling of lastNameElement</comment>
                    <expr_stmt><expr><name pos:line="1415" pos:column="21">argumentListElement</name> <op:operator pos:line="1415" pos:column="41">=</op:operator> <call><name><name pos:line="1415" pos:column="43">lastNameElement</name><op:operator pos:line="1415" pos:column="58">.</op:operator><name pos:line="1415" pos:column="59">ElementsAfterSelf</name></name><argument_list pos:line="1415" pos:column="76">(<argument><expr><name><name pos:line="1415" pos:column="77">SRC</name><op:operator pos:line="1415" pos:column="80">.</op:operator><name pos:line="1415" pos:column="81">ArgumentList</name></name></expr></argument>)</argument_list></call><op:operator pos:line="1415" pos:column="94">.</op:operator><call><name pos:line="1415" pos:column="95">FirstOrDefault</name><argument_list pos:line="1415" pos:column="109">()</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="1416" pos:column="19">else <block pos:line="1416" pos:column="24">{             
                    <comment type="line" pos:line="1417" pos:column="21">//otherwise, it will be the first *child* of lastNameElement</comment>
                    <expr_stmt><expr><name pos:line="1418" pos:column="21">argumentListElement</name> <op:operator pos:line="1418" pos:column="41">=</op:operator> <call><name><name pos:line="1418" pos:column="43">lastNameElement</name><op:operator pos:line="1418" pos:column="58">.</op:operator><name pos:line="1418" pos:column="59">Elements</name></name><argument_list pos:line="1418" pos:column="67">(<argument><expr><name><name pos:line="1418" pos:column="68">SRC</name><op:operator pos:line="1418" pos:column="71">.</op:operator><name pos:line="1418" pos:column="72">ArgumentList</name></name></expr></argument>)</argument_list></call><op:operator pos:line="1418" pos:column="85">.</op:operator><call><name pos:line="1418" pos:column="86">FirstOrDefault</name><argument_list pos:line="1418" pos:column="100">()</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>

            <if pos:line="1422" pos:column="13">if<condition pos:line="1422" pos:column="15">(<expr><name pos:line="1422" pos:column="16">argumentListElement</name> <op:operator pos:line="1422" pos:column="36">!=</op:operator> <name pos:line="1422" pos:column="39">null</name></expr>)</condition><then pos:line="1422" pos:column="44"> <block pos:line="1422" pos:column="45">{
                <expr_stmt><expr><name pos:line="1423" pos:column="17">typeArguments</name> <op:operator pos:line="1423" pos:column="31">=</op:operator> <linq><from pos:line="1423" pos:column="33">from <expr><name pos:line="1423" pos:column="38">argument</name></expr> <in pos:line="1423" pos:column="47">in <expr><call><name><name pos:line="1423" pos:column="50">argumentListElement</name><op:operator pos:line="1423" pos:column="69">.</op:operator><name pos:line="1423" pos:column="70">Elements</name></name><argument_list pos:line="1423" pos:column="78">(<argument><expr><name><name pos:line="1423" pos:column="79">SRC</name><op:operator pos:line="1423" pos:column="82">.</op:operator><name pos:line="1423" pos:column="83">Argument</name></name></expr></argument>)</argument_list></call></expr></in></from>
                                <where pos:line="1424" pos:column="33">where <expr><call><name><name pos:line="1424" pos:column="39">argument</name><op:operator pos:line="1424" pos:column="47">.</op:operator><name pos:line="1424" pos:column="48">Elements</name></name><argument_list pos:line="1424" pos:column="56">(<argument><expr><name><name pos:line="1424" pos:column="57">SRC</name><op:operator pos:line="1424" pos:column="60">.</op:operator><name pos:line="1424" pos:column="61">Name</name></name></expr></argument>)</argument_list></call><op:operator pos:line="1424" pos:column="66">.</op:operator><call><name pos:line="1424" pos:column="67">Any</name><argument_list pos:line="1424" pos:column="70">()</argument_list></call></expr></where>
                                <select pos:line="1425" pos:column="33">select <expr><call><name pos:line="1425" pos:column="40">ParseTypeUseElement</name><argument_list pos:line="1425" pos:column="59">(<argument><expr><call><name><name pos:line="1425" pos:column="60">argument</name><op:operator pos:line="1425" pos:column="68">.</op:operator><name pos:line="1425" pos:column="69">Element</name></name><argument_list pos:line="1425" pos:column="76">(<argument><expr><name><name pos:line="1425" pos:column="77">SRC</name><op:operator pos:line="1425" pos:column="80">.</op:operator><name pos:line="1425" pos:column="81">Name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="1425" pos:column="88">context</name></expr></argument>)</argument_list></call></expr></select></linq></expr>;</expr_stmt>
                <comment type="line" pos:line="1426" pos:column="17">// if this is a generic type use and there is a prefix (A::B::C) then the last name</comment>
                <comment type="line" pos:line="1427" pos:column="17">// element will actually be the first child of lastNameElement</comment>
                <if pos:line="1428" pos:column="17">if<condition pos:line="1428" pos:column="19">(<expr><name pos:line="1428" pos:column="20">prefix</name> <op:operator pos:line="1428" pos:column="27">!=</op:operator> <name pos:line="1428" pos:column="30">null</name></expr>)</condition><then pos:line="1428" pos:column="35"> <block pos:line="1428" pos:column="36">{
                    <expr_stmt><expr><name pos:line="1429" pos:column="21">lastNameElement</name> <op:operator pos:line="1429" pos:column="37">=</op:operator> <call><name><name pos:line="1429" pos:column="39">lastNameElement</name><op:operator pos:line="1429" pos:column="54">.</op:operator><name pos:line="1429" pos:column="55">Element</name></name><argument_list pos:line="1429" pos:column="62">(<argument><expr><name><name pos:line="1429" pos:column="63">SRC</name><op:operator pos:line="1429" pos:column="66">.</op:operator><name pos:line="1429" pos:column="67">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>

            <comment type="line" pos:line="1433" pos:column="13">// construct the type use</comment>
            <decl_stmt><decl><type><name pos:line="1434" pos:column="13">var</name></type> <name pos:line="1434" pos:column="17">typeUse</name> <init pos:line="1434" pos:column="25">= <expr><op:operator pos:line="1434" pos:column="27">new</op:operator> <call><name pos:line="1434" pos:column="31">TypeUse</name><argument_list pos:line="1434" pos:column="38">()</argument_list></call> <block pos:line="1434" pos:column="41">{
                <expr><name pos:line="1435" pos:column="17">Name</name> <op:operator pos:line="1435" pos:column="22">=</op:operator> <op:operator pos:line="1435" pos:column="24">(</op:operator><name pos:line="1435" pos:column="25">lastNameElement</name> <op:operator pos:line="1435" pos:column="41">!=</op:operator> <name pos:line="1435" pos:column="44">null</name> <op:operator pos:line="1435" pos:column="49">?</op:operator> <name><name pos:line="1435" pos:column="51">lastNameElement</name><op:operator pos:line="1435" pos:column="66">.</op:operator><name pos:line="1435" pos:column="67">Value</name></name> <op:operator pos:line="1435" pos:column="73">:</op:operator> <name><name pos:line="1435" pos:column="75">string</name><op:operator pos:line="1435" pos:column="81">.</op:operator><name pos:line="1435" pos:column="82">Empty</name></name><op:operator pos:line="1435" pos:column="87">)</op:operator></expr>,
                <expr><name pos:line="1436" pos:column="17">Location</name> <op:operator pos:line="1436" pos:column="26">=</op:operator> <call><name><name pos:line="1436" pos:column="28">context</name><op:operator pos:line="1436" pos:column="35">.</op:operator><name pos:line="1436" pos:column="36">CreateLocation</name></name><argument_list pos:line="1436" pos:column="50">(<argument><expr><name pos:line="1436" pos:column="51">lastNameElement</name> <op:operator pos:line="1436" pos:column="67">!=</op:operator> <name pos:line="1436" pos:column="70">null</name> <op:operator pos:line="1436" pos:column="75">?</op:operator> <name pos:line="1436" pos:column="77">lastNameElement</name> <op:operator pos:line="1436" pos:column="93">:</op:operator> <name pos:line="1436" pos:column="95">typeUseElement</name></expr></argument>)</argument_list></call></expr>,
                <expr><name pos:line="1437" pos:column="17">Prefix</name> <op:operator pos:line="1437" pos:column="24">=</op:operator> <name pos:line="1437" pos:column="26">prefix</name></expr>,
                <expr><name pos:line="1438" pos:column="17">ProgrammingLanguage</name> <op:operator pos:line="1438" pos:column="37">=</op:operator> <name pos:line="1438" pos:column="39">ParserLanguage</name></expr>
            }</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1440" pos:column="13">typeUse</name><op:operator pos:line="1440" pos:column="20">.</op:operator><name pos:line="1440" pos:column="21">AddTypeParameters</name></name><argument_list pos:line="1440" pos:column="38">(<argument><expr><name pos:line="1440" pos:column="39">typeArguments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <return pos:line="1442" pos:column="13">return <expr><name pos:line="1442" pos:column="20">typeUse</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="1445" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="1446" pos:column="9">/// Parses the prefix out of the given name element, if it contains one.</comment>
        <comment type="line" pos:line="1447" pos:column="9">/// In a name usage like System.IO.File, File is the name and System.IO is the prefix.</comment>
        <comment type="line" pos:line="1448" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="1449" pos:column="9">/// &lt;param name="nameElement"&gt;The SRC.Name element to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="1450" pos:column="9">/// &lt;param name="context"&gt;The parser context to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="1451" pos:column="9">/// &lt;returns&gt;A NamePrefix object, or null if &lt;paramref name="nameElement"/&gt; contains no prefix.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="1452" pos:column="9">protected</specifier> <specifier pos:line="1452" pos:column="19">virtual</specifier> <name pos:line="1452" pos:column="27">NamePrefix</name></type> <name pos:line="1452" pos:column="38">ParseNamePrefix</name><parameter_list pos:line="1452" pos:column="53">(<param><decl><type><name pos:line="1452" pos:column="54">XElement</name></type> <name pos:line="1452" pos:column="63">nameElement</name></decl></param>, <param><decl><type><name pos:line="1452" pos:column="76">ParserContext</name></type> <name pos:line="1452" pos:column="90">context</name></decl></param>)</parameter_list> <block pos:line="1452" pos:column="99">{
            <if pos:line="1453" pos:column="13">if<condition pos:line="1453" pos:column="15">(<expr><name pos:line="1453" pos:column="16">nameElement</name> <op:operator pos:line="1453" pos:column="28">==</op:operator> <name pos:line="1453" pos:column="31">null</name></expr>)</condition><then pos:line="1453" pos:column="36">
                <throw pos:line="1454" pos:column="17">throw <expr><op:operator pos:line="1454" pos:column="23">new</op:operator> <call><name pos:line="1454" pos:column="27">ArgumentNullException</name><argument_list pos:line="1454" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="1454" pos:column="49">"nameElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="1455" pos:column="13">if<condition pos:line="1455" pos:column="15">(<expr><name><name pos:line="1455" pos:column="16">nameElement</name><op:operator pos:line="1455" pos:column="27">.</op:operator><name pos:line="1455" pos:column="28">Name</name></name> <op:operator pos:line="1455" pos:column="33">!=</op:operator> <name><name pos:line="1455" pos:column="36">SRC</name><op:operator pos:line="1455" pos:column="39">.</op:operator><name pos:line="1455" pos:column="40">Name</name></name></expr>)</condition><then pos:line="1455" pos:column="45">
                <throw pos:line="1456" pos:column="17">throw <expr><op:operator pos:line="1456" pos:column="23">new</op:operator> <call><name pos:line="1456" pos:column="27">ArgumentException</name><argument_list pos:line="1456" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="1456" pos:column="45">"must be a SRC.Name element"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1456" pos:column="75">"nameElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="1457" pos:column="13">if<condition pos:line="1457" pos:column="15">(<expr><name pos:line="1457" pos:column="16">context</name> <op:operator pos:line="1457" pos:column="24">==</op:operator> <name pos:line="1457" pos:column="27">null</name></expr>)</condition><then pos:line="1457" pos:column="32">
                <throw pos:line="1458" pos:column="17">throw <expr><op:operator pos:line="1458" pos:column="23">new</op:operator> <call><name pos:line="1458" pos:column="27">ArgumentNullException</name><argument_list pos:line="1458" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="1458" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            
            <if pos:line="1460" pos:column="13">if<condition pos:line="1460" pos:column="15">(<expr><op:operator pos:line="1460" pos:column="16">!</op:operator><name><name pos:line="1460" pos:column="17">nameElement</name><op:operator pos:line="1460" pos:column="28">.</op:operator><name pos:line="1460" pos:column="29">HasElements</name></name> <op:operator pos:line="1460" pos:column="41">||</op:operator> <call><name><name pos:line="1460" pos:column="44">nameElement</name><op:operator pos:line="1460" pos:column="55">.</op:operator><name pos:line="1460" pos:column="56">Elements</name></name><argument_list pos:line="1460" pos:column="64">(<argument><expr><name><name pos:line="1460" pos:column="65">SRC</name><op:operator pos:line="1460" pos:column="68">.</op:operator><name pos:line="1460" pos:column="69">Name</name></name></expr></argument>)</argument_list></call><op:operator pos:line="1460" pos:column="74">.</op:operator><call><name pos:line="1460" pos:column="75">Count</name><argument_list pos:line="1460" pos:column="80">()</argument_list></call> <op:operator pos:line="1460" pos:column="83">&lt;=</op:operator> <lit:literal type="number" pos:line="1460" pos:column="86">1</lit:literal></expr>)</condition><then pos:line="1460" pos:column="88"> <block pos:line="1460" pos:column="89">{
                <comment type="line" pos:line="1461" pos:column="17">//this name doesn't have a prefix</comment>
                <return pos:line="1462" pos:column="17">return <expr><name pos:line="1462" pos:column="24">null</name></expr>;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="1465" pos:column="13">var</name></type> <name pos:line="1465" pos:column="17">methodName</name> <init pos:line="1465" pos:column="28">= <expr><call><name><name pos:line="1465" pos:column="30">nameElement</name><op:operator pos:line="1465" pos:column="41">.</op:operator><name pos:line="1465" pos:column="42">Elements</name></name><argument_list pos:line="1465" pos:column="50">(<argument><expr><name><name pos:line="1465" pos:column="51">SRC</name><op:operator pos:line="1465" pos:column="54">.</op:operator><name pos:line="1465" pos:column="55">Name</name></name></expr></argument>)</argument_list></call><op:operator pos:line="1465" pos:column="60">.</op:operator><call><name pos:line="1465" pos:column="61">Last</name><argument_list pos:line="1465" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1466" pos:column="13">var</name></type> <name pos:line="1466" pos:column="17">prefixParts</name> <init pos:line="1466" pos:column="29">= <expr><call><name><name pos:line="1466" pos:column="31">methodName</name><op:operator pos:line="1466" pos:column="41">.</op:operator><name pos:line="1466" pos:column="42">ElementsBeforeSelf</name></name><argument_list pos:line="1466" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1468" pos:column="13">var</name></type> <name pos:line="1468" pos:column="17">prefix</name> <init pos:line="1468" pos:column="24">= <expr><op:operator pos:line="1468" pos:column="26">new</op:operator> <call><name pos:line="1468" pos:column="30">NamePrefix</name><argument_list pos:line="1468" pos:column="40">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="1469" pos:column="13">foreach(<init><decl><type><name pos:line="1469" pos:column="21">var</name></type> <name pos:line="1469" pos:column="25">part</name> <range pos:line="1469" pos:column="30">in <expr><name pos:line="1469" pos:column="33">prefixParts</name></expr></range></decl></init>) <block pos:line="1469" pos:column="46">{
                <expr_stmt><expr><call><name><name pos:line="1470" pos:column="17">prefix</name><op:operator pos:line="1470" pos:column="23">.</op:operator><name pos:line="1470" pos:column="24">AddComponent</name></name><argument_list pos:line="1470" pos:column="36">(<argument><expr><call><name><name pos:line="1470" pos:column="37">ParseExpression</name><argument_list pos:line="1470" pos:column="52">&lt;<argument><name pos:line="1470" pos:column="53">TypeContainerUse</name></argument>&gt;</argument_list></name><argument_list pos:line="1470" pos:column="70">(<argument><expr><name pos:line="1470" pos:column="71">part</name></expr></argument>, <argument><expr><name pos:line="1470" pos:column="77">context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
            <return pos:line="1472" pos:column="13">return <expr><name pos:line="1472" pos:column="20">prefix</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="1475" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="1476" pos:column="9">/// Creates an &lt;see cref="Expression"/&gt; object for &lt;paramref name="callElement"/&gt;.</comment>
        <comment type="line" pos:line="1477" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="1478" pos:column="9">/// &lt;param name="callElement"&gt;The SRC.Call element to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="1479" pos:column="9">/// &lt;param name="context"&gt;The context to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="1480" pos:column="9">/// &lt;returns&gt;An &lt;see cref="Expression"/&gt; corresponding to &lt;paramref name="callElement"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="1481" pos:column="9">protected</specifier> <specifier pos:line="1481" pos:column="19">virtual</specifier> <name pos:line="1481" pos:column="27">Expression</name></type> <name pos:line="1481" pos:column="38">ParseCallElement</name><parameter_list pos:line="1481" pos:column="54">(<param><decl><type><name pos:line="1481" pos:column="55">XElement</name></type> <name pos:line="1481" pos:column="64">callElement</name></decl></param>, <param><decl><type><name pos:line="1481" pos:column="77">ParserContext</name></type> <name pos:line="1481" pos:column="91">context</name></decl></param>)</parameter_list> <block pos:line="1481" pos:column="100">{
            <if pos:line="1482" pos:column="13">if<condition pos:line="1482" pos:column="15">(<expr><name pos:line="1482" pos:column="16">callElement</name> <op:operator pos:line="1482" pos:column="28">==</op:operator> <name pos:line="1482" pos:column="31">null</name></expr>)</condition><then pos:line="1482" pos:column="36">
                <throw pos:line="1483" pos:column="17">throw <expr><op:operator pos:line="1483" pos:column="23">new</op:operator> <call><name pos:line="1483" pos:column="27">ArgumentNullException</name><argument_list pos:line="1483" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="1483" pos:column="49">"callElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="1484" pos:column="13">if<condition pos:line="1484" pos:column="15">(<expr><name><name pos:line="1484" pos:column="16">callElement</name><op:operator pos:line="1484" pos:column="27">.</op:operator><name pos:line="1484" pos:column="28">Name</name></name> <op:operator pos:line="1484" pos:column="33">!=</op:operator> <name><name pos:line="1484" pos:column="36">SRC</name><op:operator pos:line="1484" pos:column="39">.</op:operator><name pos:line="1484" pos:column="40">Call</name></name></expr>)</condition><then pos:line="1484" pos:column="45">
                <throw pos:line="1485" pos:column="17">throw <expr><op:operator pos:line="1485" pos:column="23">new</op:operator> <call><name pos:line="1485" pos:column="27">ArgumentException</name><argument_list pos:line="1485" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="1485" pos:column="45">"must be a SRC.Call element"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1485" pos:column="75">"callElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="1486" pos:column="13">if<condition pos:line="1486" pos:column="15">(<expr><name pos:line="1486" pos:column="16">context</name> <op:operator pos:line="1486" pos:column="24">==</op:operator> <name pos:line="1486" pos:column="27">null</name></expr>)</condition><then pos:line="1486" pos:column="32">
                <throw pos:line="1487" pos:column="17">throw <expr><op:operator pos:line="1487" pos:column="23">new</op:operator> <call><name pos:line="1487" pos:column="27">ArgumentNullException</name><argument_list pos:line="1487" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="1487" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            
            <decl_stmt><decl><type><name pos:line="1489" pos:column="13">var</name></type> <name pos:line="1489" pos:column="17">mc</name> <init pos:line="1489" pos:column="20">= <expr><op:operator pos:line="1489" pos:column="22">new</op:operator> <call><name pos:line="1489" pos:column="26">MethodCall</name><argument_list pos:line="1489" pos:column="36">()</argument_list></call> <block pos:line="1489" pos:column="39">{
                <expr><name pos:line="1490" pos:column="17">Location</name> <op:operator pos:line="1490" pos:column="26">=</op:operator> <call><name><name pos:line="1490" pos:column="28">context</name><op:operator pos:line="1490" pos:column="35">.</op:operator><name pos:line="1490" pos:column="36">CreateLocation</name></name><argument_list pos:line="1490" pos:column="50">(<argument><expr><name pos:line="1490" pos:column="51">callElement</name></expr></argument>)</argument_list></call></expr>,
                <expr><name pos:line="1491" pos:column="17">ProgrammingLanguage</name> <op:operator pos:line="1491" pos:column="37">=</op:operator> <name pos:line="1491" pos:column="39">ParserLanguage</name></expr>
            }</block></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1494" pos:column="13">XElement</name></type> <name pos:line="1494" pos:column="22">methodNameElement</name> <init pos:line="1494" pos:column="40">= <expr><name pos:line="1494" pos:column="42">null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1495" pos:column="13">Expression</name></type> <name pos:line="1495" pos:column="24">callingExpression</name> <init pos:line="1495" pos:column="42">= <expr><name pos:line="1495" pos:column="44">null</name></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="1497" pos:column="13">//parse the name element for the call</comment>
            <decl_stmt><decl><type><name pos:line="1498" pos:column="13">var</name></type> <name pos:line="1498" pos:column="17">nameElement</name> <init pos:line="1498" pos:column="29">= <expr><call><name><name pos:line="1498" pos:column="31">callElement</name><op:operator pos:line="1498" pos:column="42">.</op:operator><name pos:line="1498" pos:column="43">Element</name></name><argument_list pos:line="1498" pos:column="50">(<argument><expr><name><name pos:line="1498" pos:column="51">SRC</name><op:operator pos:line="1498" pos:column="54">.</op:operator><name pos:line="1498" pos:column="55">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="1499" pos:column="13">if<condition pos:line="1499" pos:column="15">(<expr><name pos:line="1499" pos:column="16">nameElement</name> <op:operator pos:line="1499" pos:column="28">!=</op:operator> <name pos:line="1499" pos:column="31">null</name></expr>)</condition><then pos:line="1499" pos:column="36"> <block pos:line="1499" pos:column="37">{
                <if pos:line="1500" pos:column="17">if<condition pos:line="1500" pos:column="19">(<expr><op:operator pos:line="1500" pos:column="20">!</op:operator><name><name pos:line="1500" pos:column="21">nameElement</name><op:operator pos:line="1500" pos:column="32">.</op:operator><name pos:line="1500" pos:column="33">HasElements</name></name></expr>)</condition><then pos:line="1500" pos:column="45"> <block pos:line="1500" pos:column="46">{
                    <expr_stmt><expr><name pos:line="1501" pos:column="21">methodNameElement</name> <op:operator pos:line="1501" pos:column="39">=</op:operator> <name pos:line="1501" pos:column="41">nameElement</name></expr>;</expr_stmt>
                }</block></then> <else pos:line="1502" pos:column="19">else <block pos:line="1502" pos:column="24">{
                    <expr_stmt><expr><name pos:line="1503" pos:column="21">methodNameElement</name> <op:operator pos:line="1503" pos:column="39">=</op:operator> <call><name><name pos:line="1503" pos:column="41">nameElement</name><op:operator pos:line="1503" pos:column="52">.</op:operator><name pos:line="1503" pos:column="53">Elements</name></name><argument_list pos:line="1503" pos:column="61">(<argument><expr><name><name pos:line="1503" pos:column="62">SRC</name><op:operator pos:line="1503" pos:column="65">.</op:operator><name pos:line="1503" pos:column="66">Name</name></name></expr></argument>)</argument_list></call><op:operator pos:line="1503" pos:column="71">.</op:operator><call><name pos:line="1503" pos:column="72">Last</name><argument_list pos:line="1503" pos:column="76">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="1504" pos:column="21">callingExpression</name> <op:operator pos:line="1504" pos:column="39">=</op:operator> <call><name pos:line="1504" pos:column="41">ParseExpression</name><argument_list pos:line="1504" pos:column="56">(<argument><expr><call><name><name pos:line="1504" pos:column="57">methodNameElement</name><op:operator pos:line="1504" pos:column="74">.</op:operator><name pos:line="1504" pos:column="75">ElementsBeforeSelf</name></name><argument_list pos:line="1504" pos:column="93">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1504" pos:column="97">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>
            <if pos:line="1507" pos:column="13">if<condition pos:line="1507" pos:column="15">(<expr><name pos:line="1507" pos:column="16">methodNameElement</name> <op:operator pos:line="1507" pos:column="34">!=</op:operator> <name pos:line="1507" pos:column="37">null</name></expr>)</condition><then pos:line="1507" pos:column="42"> <block pos:line="1507" pos:column="43">{
                <decl_stmt><decl><type><name pos:line="1508" pos:column="17">var</name></type> <name pos:line="1508" pos:column="21">argListElement</name> <init pos:line="1508" pos:column="36">= <expr><call><name><name pos:line="1508" pos:column="38">methodNameElement</name><op:operator pos:line="1508" pos:column="55">.</op:operator><name pos:line="1508" pos:column="56">Element</name></name><argument_list pos:line="1508" pos:column="63">(<argument><expr><name><name pos:line="1508" pos:column="64">SRC</name><op:operator pos:line="1508" pos:column="67">.</op:operator><name pos:line="1508" pos:column="68">ArgumentList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="1509" pos:column="17">if<condition pos:line="1509" pos:column="19">(<expr><name pos:line="1509" pos:column="20">argListElement</name> <op:operator pos:line="1509" pos:column="35">!=</op:operator> <name pos:line="1509" pos:column="38">null</name></expr>)</condition><then pos:line="1509" pos:column="43"> <block pos:line="1509" pos:column="44">{
                    <comment type="line" pos:line="1510" pos:column="21">//this is a method call with type arguments</comment>
                    <expr_stmt><expr><name><name pos:line="1511" pos:column="21">mc</name><op:operator pos:line="1511" pos:column="23">.</op:operator><name pos:line="1511" pos:column="24">Name</name></name> <op:operator pos:line="1511" pos:column="29">=</op:operator> <call><name><name pos:line="1511" pos:column="31">methodNameElement</name><op:operator pos:line="1511" pos:column="48">.</op:operator><name pos:line="1511" pos:column="49">Element</name></name><argument_list pos:line="1511" pos:column="56">(<argument><expr><name><name pos:line="1511" pos:column="57">SRC</name><op:operator pos:line="1511" pos:column="60">.</op:operator><name pos:line="1511" pos:column="61">Name</name></name></expr></argument>)</argument_list></call><op:operator pos:line="1511" pos:column="66">.</op:operator><name pos:line="1511" pos:column="67">Value</name></expr>;</expr_stmt>
                    <foreach pos:line="1512" pos:column="21">foreach(<init><decl><type><name pos:line="1512" pos:column="29">var</name></type> <name pos:line="1512" pos:column="33">argElement</name> <range pos:line="1512" pos:column="44">in <expr><call><name><name pos:line="1512" pos:column="47">argListElement</name><op:operator pos:line="1512" pos:column="61">.</op:operator><name pos:line="1512" pos:column="62">Elements</name></name><argument_list pos:line="1512" pos:column="70">(<argument><expr><name><name pos:line="1512" pos:column="71">SRC</name><op:operator pos:line="1512" pos:column="74">.</op:operator><name pos:line="1512" pos:column="75">Argument</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>) <block pos:line="1512" pos:column="86">{
                        <decl_stmt><decl><type><name pos:line="1513" pos:column="25">var</name></type> <name pos:line="1513" pos:column="29">typeName</name> <init pos:line="1513" pos:column="38">= <expr><call><name><name pos:line="1513" pos:column="40">argElement</name><op:operator pos:line="1513" pos:column="50">.</op:operator><name pos:line="1513" pos:column="51">Descendants</name></name><argument_list pos:line="1513" pos:column="62">(<argument><expr><name><name pos:line="1513" pos:column="63">SRC</name><op:operator pos:line="1513" pos:column="66">.</op:operator><name pos:line="1513" pos:column="67">Name</name></name></expr></argument>)</argument_list></call><op:operator pos:line="1513" pos:column="72">.</op:operator><call><name pos:line="1513" pos:column="73">First</name><argument_list pos:line="1513" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if pos:line="1514" pos:column="25">if<condition pos:line="1514" pos:column="27">(<expr><name pos:line="1514" pos:column="28">typeName</name> <op:operator pos:line="1514" pos:column="37">!=</op:operator> <name pos:line="1514" pos:column="40">null</name></expr>)</condition><then pos:line="1514" pos:column="45"> <block pos:line="1514" pos:column="46">{
                            <expr_stmt><expr><call><name><name pos:line="1515" pos:column="29">mc</name><op:operator pos:line="1515" pos:column="31">.</op:operator><name pos:line="1515" pos:column="32">AddTypeArgument</name></name><argument_list pos:line="1515" pos:column="47">(<argument><expr><call><name pos:line="1515" pos:column="48">ParseTypeUseElement</name><argument_list pos:line="1515" pos:column="67">(<argument><expr><name pos:line="1515" pos:column="68">typeName</name></expr></argument>, <argument><expr><name pos:line="1515" pos:column="78">context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></foreach>
                }</block></then> <else pos:line="1518" pos:column="19">else <block pos:line="1518" pos:column="24">{
                    <expr_stmt><expr><name><name pos:line="1519" pos:column="21">mc</name><op:operator pos:line="1519" pos:column="23">.</op:operator><name pos:line="1519" pos:column="24">Name</name></name> <op:operator pos:line="1519" pos:column="29">=</op:operator> <name><name pos:line="1519" pos:column="31">methodNameElement</name><op:operator pos:line="1519" pos:column="48">.</op:operator><name pos:line="1519" pos:column="49">Value</name></name></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>

            <comment type="line" pos:line="1523" pos:column="13">//check if this is a call to a constructor</comment>
            <if pos:line="1524" pos:column="13">if<condition pos:line="1524" pos:column="15">(<expr><call><name><name pos:line="1524" pos:column="16">callElement</name><op:operator pos:line="1524" pos:column="27">.</op:operator><name pos:line="1524" pos:column="28">ElementsBeforeSelf</name></name><argument_list pos:line="1524" pos:column="46">()</argument_list></call><op:operator pos:line="1524" pos:column="48">.</op:operator><call><name pos:line="1524" pos:column="49">Any</name><argument_list pos:line="1524" pos:column="52">(<argument><expr><lambda><name pos:line="1524" pos:column="53">e</name> <op:operator pos:line="1524" pos:column="55">=&gt;</op:operator> <name><name pos:line="1524" pos:column="58">e</name><op:operator pos:line="1524" pos:column="59">.</op:operator><name pos:line="1524" pos:column="60">Name</name></name> <op:operator pos:line="1524" pos:column="65">==</op:operator> <name><name pos:line="1524" pos:column="68">OP</name><op:operator pos:line="1524" pos:column="70">.</op:operator><name pos:line="1524" pos:column="71">Operator</name> <type:modifier pos:line="1524" pos:column="80">&amp;&amp;</type:modifier></name> <name><name pos:line="1524" pos:column="83">e</name><op:operator pos:line="1524" pos:column="84">.</op:operator><name pos:line="1524" pos:column="85">Value</name></name> <op:operator pos:line="1524" pos:column="91">==</op:operator> <lit:literal type="string" pos:line="1524" pos:column="94">"new"</lit:literal></lambda></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1524" pos:column="101"> <block pos:line="1524" pos:column="102">{
                <expr_stmt><expr><name><name pos:line="1525" pos:column="17">mc</name><op:operator pos:line="1525" pos:column="19">.</op:operator><name pos:line="1525" pos:column="20">IsConstructor</name></name> <op:operator pos:line="1525" pos:column="34">=</op:operator> <lit:literal type="boolean" pos:line="1525" pos:column="36">true</lit:literal></expr>;</expr_stmt>
            }</block></then></if>
            <decl_stmt><decl><type><name pos:line="1527" pos:column="13">var</name></type> <name pos:line="1527" pos:column="17">parentElement</name> <init pos:line="1527" pos:column="31">= <expr><name><name pos:line="1527" pos:column="33">callElement</name><op:operator pos:line="1527" pos:column="44">.</op:operator><name pos:line="1527" pos:column="45">Parent</name></name></expr></init></decl>;</decl_stmt>
            <if pos:line="1528" pos:column="13">if<condition pos:line="1528" pos:column="15">(<expr><name pos:line="1528" pos:column="16">parentElement</name> <op:operator pos:line="1528" pos:column="30">!=</op:operator> <name pos:line="1528" pos:column="33">null</name> <op:operator pos:line="1528" pos:column="38">&amp;&amp;</op:operator> <name><name pos:line="1528" pos:column="41">parentElement</name><op:operator pos:line="1528" pos:column="54">.</op:operator><name pos:line="1528" pos:column="55">Name</name></name> <op:operator pos:line="1528" pos:column="60">==</op:operator> <name><name pos:line="1528" pos:column="63">SRC</name><op:operator pos:line="1528" pos:column="66">.</op:operator><name pos:line="1528" pos:column="67">MemberList</name></name></expr>)</condition><then pos:line="1528" pos:column="78"> <block pos:line="1528" pos:column="79">{
                <decl_stmt><decl><type><name pos:line="1529" pos:column="17">var</name></type> <name pos:line="1529" pos:column="21">container</name> <init pos:line="1529" pos:column="31">= <expr><name><name pos:line="1529" pos:column="33">parentElement</name><op:operator pos:line="1529" pos:column="46">.</op:operator><name pos:line="1529" pos:column="47">Parent</name></name></expr></init></decl>;</decl_stmt>
                <if pos:line="1530" pos:column="17">if<condition pos:line="1530" pos:column="19">(<expr><name pos:line="1530" pos:column="20">container</name> <op:operator pos:line="1530" pos:column="30">!=</op:operator> <name pos:line="1530" pos:column="33">null</name> <op:operator pos:line="1530" pos:column="38">&amp;&amp;</op:operator> <name><name pos:line="1530" pos:column="41">container</name><op:operator pos:line="1530" pos:column="50">.</op:operator><name pos:line="1530" pos:column="51">Name</name></name> <op:operator pos:line="1530" pos:column="56">==</op:operator> <name><name pos:line="1530" pos:column="59">SRC</name><op:operator pos:line="1530" pos:column="62">.</op:operator><name pos:line="1530" pos:column="63">Constructor</name></name></expr>)</condition><then pos:line="1530" pos:column="75"> <block pos:line="1530" pos:column="76">{
                    <expr_stmt><expr><name><name pos:line="1531" pos:column="21">mc</name><op:operator pos:line="1531" pos:column="23">.</op:operator><name pos:line="1531" pos:column="24">IsConstructor</name></name> <op:operator pos:line="1531" pos:column="38">=</op:operator> <lit:literal type="boolean" pos:line="1531" pos:column="40">true</lit:literal></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
            <if pos:line="1534" pos:column="13">if<condition pos:line="1534" pos:column="15">(<expr><name><name pos:line="1534" pos:column="16">mc</name><op:operator pos:line="1534" pos:column="18">.</op:operator><name pos:line="1534" pos:column="19">Name</name></name> <op:operator pos:line="1534" pos:column="24">==</op:operator> <lit:literal type="string" pos:line="1534" pos:column="27">"super"</lit:literal> <op:operator pos:line="1534" pos:column="35">&amp;&amp;</op:operator> <name><name pos:line="1534" pos:column="38">mc</name><op:operator pos:line="1534" pos:column="40">.</op:operator><name pos:line="1534" pos:column="41">ProgrammingLanguage</name></name> <op:operator pos:line="1534" pos:column="61">==</op:operator> <name><name pos:line="1534" pos:column="64">Language</name><op:operator pos:line="1534" pos:column="72">.</op:operator><name pos:line="1534" pos:column="73">Java</name></name></expr>)</condition><then pos:line="1534" pos:column="78"> <block pos:line="1534" pos:column="79">{
                <expr_stmt><expr><name><name pos:line="1535" pos:column="17">mc</name><op:operator pos:line="1535" pos:column="19">.</op:operator><name pos:line="1535" pos:column="20">IsConstructor</name></name> <op:operator pos:line="1535" pos:column="34">=</op:operator> <lit:literal type="boolean" pos:line="1535" pos:column="36">true</lit:literal></expr>;</expr_stmt>
            }</block></then></if>

            <comment type="line" pos:line="1538" pos:column="13">//parse the arguments to the method call</comment>
            <decl_stmt><decl><type><name pos:line="1539" pos:column="13">var</name></type> <name pos:line="1539" pos:column="17">argList</name> <init pos:line="1539" pos:column="25">= <expr><call><name><name pos:line="1539" pos:column="27">callElement</name><op:operator pos:line="1539" pos:column="38">.</op:operator><name pos:line="1539" pos:column="39">Element</name></name><argument_list pos:line="1539" pos:column="46">(<argument><expr><name><name pos:line="1539" pos:column="47">SRC</name><op:operator pos:line="1539" pos:column="50">.</op:operator><name pos:line="1539" pos:column="51">ArgumentList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="1540" pos:column="13">if<condition pos:line="1540" pos:column="15">(<expr><name pos:line="1540" pos:column="16">argList</name> <op:operator pos:line="1540" pos:column="24">!=</op:operator> <name pos:line="1540" pos:column="27">null</name></expr>)</condition><then pos:line="1540" pos:column="32"> <block pos:line="1540" pos:column="33">{
                <foreach pos:line="1541" pos:column="17">foreach(<init><decl><type><name pos:line="1541" pos:column="25">var</name></type> <name pos:line="1541" pos:column="29">argElement</name> <range pos:line="1541" pos:column="40">in <expr><call><name><name pos:line="1541" pos:column="43">argList</name><op:operator pos:line="1541" pos:column="50">.</op:operator><name pos:line="1541" pos:column="51">Elements</name></name><argument_list pos:line="1541" pos:column="59">(<argument><expr><name><name pos:line="1541" pos:column="60">SRC</name><op:operator pos:line="1541" pos:column="63">.</op:operator><name pos:line="1541" pos:column="64">Argument</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>) <block pos:line="1541" pos:column="75">{
                    <decl_stmt><decl><type><name pos:line="1542" pos:column="21">var</name></type> <name pos:line="1542" pos:column="25">expElement</name> <init pos:line="1542" pos:column="36">= <expr><call><name pos:line="1542" pos:column="38">GetFirstChildExpression</name><argument_list pos:line="1542" pos:column="61">(<argument><expr><name pos:line="1542" pos:column="62">argElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="1543" pos:column="21">if<condition pos:line="1543" pos:column="23">(<expr><name pos:line="1543" pos:column="24">expElement</name> <op:operator pos:line="1543" pos:column="35">!=</op:operator> <name pos:line="1543" pos:column="38">null</name></expr>)</condition><then pos:line="1543" pos:column="43"> <block pos:line="1543" pos:column="44">{
                        <decl_stmt><decl><type><name pos:line="1544" pos:column="25">var</name></type> <name pos:line="1544" pos:column="29">exp</name> <init pos:line="1544" pos:column="33">= <expr><call><name pos:line="1544" pos:column="35">ParseExpression</name><argument_list pos:line="1544" pos:column="50">(<argument><expr><name pos:line="1544" pos:column="51">expElement</name></expr></argument>, <argument><expr><name pos:line="1544" pos:column="63">context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if pos:line="1545" pos:column="25">if<condition pos:line="1545" pos:column="27">(<expr><name pos:line="1545" pos:column="28">exp</name> <op:operator pos:line="1545" pos:column="32">==</op:operator> <name pos:line="1545" pos:column="35">null</name></expr>)</condition><then pos:line="1545" pos:column="40"> <block pos:line="1545" pos:column="41">{
                            <comment type="line" pos:line="1546" pos:column="29">//we still want to record the argument, even if we can't parse it properly</comment>
                            <expr_stmt><expr><name pos:line="1547" pos:column="29">exp</name> <op:operator pos:line="1547" pos:column="33">=</op:operator> <op:operator pos:line="1547" pos:column="35">new</op:operator> <call><name pos:line="1547" pos:column="39">Expression</name><argument_list pos:line="1547" pos:column="49">()</argument_list></call> <block pos:line="1547" pos:column="52">{
                                <expr><name pos:line="1548" pos:column="33">ProgrammingLanguage</name> <op:operator pos:line="1548" pos:column="53">=</op:operator> <name pos:line="1548" pos:column="55">ParserLanguage</name></expr><op:operator pos:line="1548" pos:column="69">,</op:operator>
                                <expr><name pos:line="1549" pos:column="33">Location</name> <op:operator pos:line="1549" pos:column="42">=</op:operator> <call><name><name pos:line="1549" pos:column="44">context</name><op:operator pos:line="1549" pos:column="51">.</op:operator><name pos:line="1549" pos:column="52">CreateLocation</name></name><argument_list pos:line="1549" pos:column="66">(<argument><expr><name pos:line="1549" pos:column="67">expElement</name></expr></argument>)</argument_list></call></expr>
                            }</block></expr>;</expr_stmt>
                        }</block></then></if>
                        <expr_stmt><expr><call><name><name pos:line="1552" pos:column="25">mc</name><op:operator pos:line="1552" pos:column="27">.</op:operator><name pos:line="1552" pos:column="28">AddArgument</name></name><argument_list pos:line="1552" pos:column="39">(<argument><expr><name pos:line="1552" pos:column="40">exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></foreach>
            }</block></then></if>

            <return pos:line="1557" pos:column="13">return <expr><name pos:line="1557" pos:column="20">callingExpression</name> <op:operator pos:line="1557" pos:column="38">!=</op:operator> <name pos:line="1557" pos:column="41">null</name> <op:operator pos:line="1557" pos:column="46">?</op:operator> <call><name pos:line="1557" pos:column="48">MergeExpressions</name><argument_list pos:line="1557" pos:column="64">(<argument><expr><name pos:line="1557" pos:column="65">callingExpression</name></expr></argument>, <argument><expr><name pos:line="1557" pos:column="84">mc</name></expr></argument>)</argument_list></call> <op:operator pos:line="1557" pos:column="88">:</op:operator> <name pos:line="1557" pos:column="90">mc</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="1560" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="1561" pos:column="9">/// Creates a LiteralUse object from the given element</comment>
        <comment type="line" pos:line="1562" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="1563" pos:column="9">/// &lt;param name="literalElement"&gt;The element to parse. Must be a &lt;see cref="ABB.SrcML.LIT.Literal"/&gt; element.&lt;/param&gt;</comment>
        <comment type="line" pos:line="1564" pos:column="9">/// &lt;param name="context"&gt;the parser context&lt;/param&gt;</comment>
        <comment type="line" pos:line="1565" pos:column="9">/// &lt;returns&gt;A LiteralUse corresponding to &lt;paramref name="literalElement"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="1566" pos:column="9">protected</specifier> <specifier pos:line="1566" pos:column="19">virtual</specifier> <name pos:line="1566" pos:column="27">LiteralUse</name></type> <name pos:line="1566" pos:column="38">ParseLiteralElement</name><parameter_list pos:line="1566" pos:column="57">(<param><decl><type><name pos:line="1566" pos:column="58">XElement</name></type> <name pos:line="1566" pos:column="67">literalElement</name></decl></param>, <param><decl><type><name pos:line="1566" pos:column="83">ParserContext</name></type> <name pos:line="1566" pos:column="97">context</name></decl></param>)</parameter_list> <block pos:line="1566" pos:column="106">{
            <if pos:line="1567" pos:column="13">if<condition pos:line="1567" pos:column="15">(<expr><name pos:line="1567" pos:column="16">literalElement</name> <op:operator pos:line="1567" pos:column="31">==</op:operator> <name pos:line="1567" pos:column="34">null</name></expr>)</condition><then pos:line="1567" pos:column="39">
                <throw pos:line="1568" pos:column="17">throw <expr><op:operator pos:line="1568" pos:column="23">new</op:operator> <call><name pos:line="1568" pos:column="27">ArgumentNullException</name><argument_list pos:line="1568" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="1568" pos:column="49">"literalElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="1569" pos:column="13">if<condition pos:line="1569" pos:column="15">(<expr><name><name pos:line="1569" pos:column="16">literalElement</name><op:operator pos:line="1569" pos:column="30">.</op:operator><name pos:line="1569" pos:column="31">Name</name></name> <op:operator pos:line="1569" pos:column="36">!=</op:operator> <name><name pos:line="1569" pos:column="39">LIT</name><op:operator pos:line="1569" pos:column="42">.</op:operator><name pos:line="1569" pos:column="43">Literal</name></name></expr>)</condition><then pos:line="1569" pos:column="51">
                <throw pos:line="1570" pos:column="17">throw <expr><op:operator pos:line="1570" pos:column="23">new</op:operator> <call><name pos:line="1570" pos:column="27">ArgumentException</name><argument_list pos:line="1570" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="1570" pos:column="45">"Must be a LIT.Literal element"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1570" pos:column="78">"literalElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="1571" pos:column="13">if<condition pos:line="1571" pos:column="15">(<expr><name pos:line="1571" pos:column="16">context</name> <op:operator pos:line="1571" pos:column="24">==</op:operator> <name pos:line="1571" pos:column="27">null</name></expr>)</condition><then pos:line="1571" pos:column="32">
                <throw pos:line="1572" pos:column="17">throw <expr><op:operator pos:line="1572" pos:column="23">new</op:operator> <call><name pos:line="1572" pos:column="27">ArgumentNullException</name><argument_list pos:line="1572" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="1572" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="1574" pos:column="13">var</name></type> <name pos:line="1574" pos:column="17">litUse</name> <init pos:line="1574" pos:column="24">= <expr><op:operator pos:line="1574" pos:column="26">new</op:operator> <call><name pos:line="1574" pos:column="30">LiteralUse</name><argument_list pos:line="1574" pos:column="40">()</argument_list></call> <block pos:line="1574" pos:column="43">{
                <expr><name pos:line="1575" pos:column="17">Location</name> <op:operator pos:line="1575" pos:column="26">=</op:operator> <call><name><name pos:line="1575" pos:column="28">context</name><op:operator pos:line="1575" pos:column="35">.</op:operator><name pos:line="1575" pos:column="36">CreateLocation</name></name><argument_list pos:line="1575" pos:column="50">(<argument><expr><name pos:line="1575" pos:column="51">literalElement</name></expr></argument>)</argument_list></call></expr>,
                <expr><name pos:line="1576" pos:column="17">ProgrammingLanguage</name> <op:operator pos:line="1576" pos:column="37">=</op:operator> <name pos:line="1576" pos:column="39">ParserLanguage</name></expr>,
                <expr><name pos:line="1577" pos:column="17">Text</name> <op:operator pos:line="1577" pos:column="22">=</op:operator> <name><name pos:line="1577" pos:column="24">literalElement</name><op:operator pos:line="1577" pos:column="38">.</op:operator><name pos:line="1577" pos:column="39">Value</name></name></expr>,
                <expr><name pos:line="1578" pos:column="17">Kind</name> <op:operator pos:line="1578" pos:column="22">=</op:operator> <call><name><name pos:line="1578" pos:column="24">LiteralUse</name><op:operator pos:line="1578" pos:column="34">.</op:operator><name pos:line="1578" pos:column="35">GetLiteralKind</name></name><argument_list pos:line="1578" pos:column="49">(<argument><expr><name pos:line="1578" pos:column="50">literalElement</name></expr></argument>)</argument_list></call></expr>
            }</block></expr></init></decl>;</decl_stmt>

            <return pos:line="1581" pos:column="13">return <expr><name pos:line="1581" pos:column="20">litUse</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="1584" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="1585" pos:column="9">/// Creates an &lt;see cref="Expression"/&gt; object for &lt;paramref name="nameElement"/&gt;.</comment>
        <comment type="line" pos:line="1586" pos:column="9">/// This returns an Expression rather than a VariableUse because any calling expression nested within the</comment>
        <comment type="line" pos:line="1587" pos:column="9">/// nameElement will be parsed and added to an Expression along with a VariableUse.</comment>
        <comment type="line" pos:line="1588" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="1589" pos:column="9">/// &lt;param name="nameElement"&gt;The SRC.Name element to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="1590" pos:column="9">/// &lt;param name="context"&gt;The context to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="1591" pos:column="9">/// &lt;returns&gt;An &lt;see cref="Expression"/&gt; corresponding to &lt;paramref name="nameElement"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="1592" pos:column="9">protected</specifier> <specifier pos:line="1592" pos:column="19">virtual</specifier> <name pos:line="1592" pos:column="27">Expression</name></type> <name pos:line="1592" pos:column="38">ParseVariableUse</name><parameter_list pos:line="1592" pos:column="54">(<param><decl><type><name pos:line="1592" pos:column="55">XElement</name></type> <name pos:line="1592" pos:column="64">nameElement</name></decl></param>, <param><decl><type><name pos:line="1592" pos:column="77">ParserContext</name></type> <name pos:line="1592" pos:column="91">context</name></decl></param>)</parameter_list> <block pos:line="1592" pos:column="100">{
            <if pos:line="1593" pos:column="13">if<condition pos:line="1593" pos:column="15">(<expr><name pos:line="1593" pos:column="16">nameElement</name> <op:operator pos:line="1593" pos:column="28">==</op:operator> <name pos:line="1593" pos:column="31">null</name></expr>)</condition><then pos:line="1593" pos:column="36">
                <throw pos:line="1594" pos:column="17">throw <expr><op:operator pos:line="1594" pos:column="23">new</op:operator> <call><name pos:line="1594" pos:column="27">ArgumentNullException</name><argument_list pos:line="1594" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="1594" pos:column="49">"nameElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="1595" pos:column="13">if<condition pos:line="1595" pos:column="15">(<expr><name><name pos:line="1595" pos:column="16">nameElement</name><op:operator pos:line="1595" pos:column="27">.</op:operator><name pos:line="1595" pos:column="28">Name</name></name> <op:operator pos:line="1595" pos:column="33">!=</op:operator> <name><name pos:line="1595" pos:column="36">SRC</name><op:operator pos:line="1595" pos:column="39">.</op:operator><name pos:line="1595" pos:column="40">Name</name></name></expr>)</condition><then pos:line="1595" pos:column="45">
                <throw pos:line="1596" pos:column="17">throw <expr><op:operator pos:line="1596" pos:column="23">new</op:operator> <call><name pos:line="1596" pos:column="27">ArgumentException</name><argument_list pos:line="1596" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="1596" pos:column="45">"Must be a SRC.Name element"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1596" pos:column="75">"nameElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="1597" pos:column="13">if<condition pos:line="1597" pos:column="15">(<expr><name pos:line="1597" pos:column="16">context</name> <op:operator pos:line="1597" pos:column="24">==</op:operator> <name pos:line="1597" pos:column="27">null</name></expr>)</condition><then pos:line="1597" pos:column="32">
                <throw pos:line="1598" pos:column="17">throw <expr><op:operator pos:line="1598" pos:column="23">new</op:operator> <call><name pos:line="1598" pos:column="27">ArgumentNullException</name><argument_list pos:line="1598" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="1598" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="1600" pos:column="13">var</name></type> <name pos:line="1600" pos:column="17">vu</name> <init pos:line="1600" pos:column="20">= <expr><op:operator pos:line="1600" pos:column="22">new</op:operator> <call><name pos:line="1600" pos:column="26">VariableUse</name><argument_list pos:line="1600" pos:column="37">()</argument_list></call> <block pos:line="1600" pos:column="40">{<expr><name pos:line="1600" pos:column="41">ProgrammingLanguage</name> <op:operator pos:line="1600" pos:column="61">=</op:operator> <name pos:line="1600" pos:column="63">ParserLanguage</name></expr>}</block></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1602" pos:column="13">var</name></type> <name pos:line="1602" pos:column="17">childElements</name> <init pos:line="1602" pos:column="31">= <expr><call><name><name pos:line="1602" pos:column="33">nameElement</name><op:operator pos:line="1602" pos:column="44">.</op:operator><name pos:line="1602" pos:column="45">Elements</name></name><argument_list pos:line="1602" pos:column="53">()</argument_list></call><op:operator pos:line="1602" pos:column="55">.</op:operator><call><name pos:line="1602" pos:column="56">ToList</name><argument_list pos:line="1602" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="1603" pos:column="13">if<condition pos:line="1603" pos:column="15">(<expr><name><name pos:line="1603" pos:column="16">childElements</name><op:operator pos:line="1603" pos:column="29">.</op:operator><name pos:line="1603" pos:column="30">Count</name></name> <op:operator pos:line="1603" pos:column="36">==</op:operator> <lit:literal type="number" pos:line="1603" pos:column="39">0</lit:literal></expr>)</condition><then pos:line="1603" pos:column="41"> <block pos:line="1603" pos:column="42">{
                <expr_stmt><expr><name><name pos:line="1604" pos:column="17">vu</name><op:operator pos:line="1604" pos:column="19">.</op:operator><name pos:line="1604" pos:column="20">Name</name></name> <op:operator pos:line="1604" pos:column="25">=</op:operator> <name><name pos:line="1604" pos:column="27">nameElement</name><op:operator pos:line="1604" pos:column="38">.</op:operator><name pos:line="1604" pos:column="39">Value</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="1605" pos:column="17">vu</name><op:operator pos:line="1605" pos:column="19">.</op:operator><name pos:line="1605" pos:column="20">Location</name></name> <op:operator pos:line="1605" pos:column="29">=</op:operator> <call><name><name pos:line="1605" pos:column="31">context</name><op:operator pos:line="1605" pos:column="38">.</op:operator><name pos:line="1605" pos:column="39">CreateLocation</name></name><argument_list pos:line="1605" pos:column="53">(<argument><expr><name pos:line="1605" pos:column="54">nameElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="1606" pos:column="15">else <block pos:line="1606" pos:column="20">{
                <comment type="line" pos:line="1607" pos:column="17">//parse the index, if there is one</comment>
                <decl_stmt><decl><type><name pos:line="1608" pos:column="17">var</name></type> <name pos:line="1608" pos:column="21">indexElement</name> <init pos:line="1608" pos:column="34">= <expr><call><name><name pos:line="1608" pos:column="36">nameElement</name><op:operator pos:line="1608" pos:column="47">.</op:operator><name pos:line="1608" pos:column="48">Element</name></name><argument_list pos:line="1608" pos:column="55">(<argument><expr><name><name pos:line="1608" pos:column="56">SRC</name><op:operator pos:line="1608" pos:column="59">.</op:operator><name pos:line="1608" pos:column="60">Index</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="1609" pos:column="17">if<condition pos:line="1609" pos:column="19">(<expr><name pos:line="1609" pos:column="20">indexElement</name> <op:operator pos:line="1609" pos:column="33">!=</op:operator> <name pos:line="1609" pos:column="36">null</name></expr>)</condition><then pos:line="1609" pos:column="41"> <block pos:line="1609" pos:column="42">{
                    <decl_stmt><decl><type><name pos:line="1610" pos:column="21">var</name></type> <name pos:line="1610" pos:column="25">expElement</name> <init pos:line="1610" pos:column="36">= <expr><call><name pos:line="1610" pos:column="38">GetFirstChildExpression</name><argument_list pos:line="1610" pos:column="61">(<argument><expr><name pos:line="1610" pos:column="62">indexElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="1611" pos:column="21">if<condition pos:line="1611" pos:column="23">(<expr><name pos:line="1611" pos:column="24">expElement</name> <op:operator pos:line="1611" pos:column="35">!=</op:operator> <name pos:line="1611" pos:column="38">null</name></expr>)</condition><then pos:line="1611" pos:column="43"> <block pos:line="1611" pos:column="44">{
                        <expr_stmt><expr><name><name pos:line="1612" pos:column="25">vu</name><op:operator pos:line="1612" pos:column="27">.</op:operator><name pos:line="1612" pos:column="28">Index</name></name> <op:operator pos:line="1612" pos:column="34">=</op:operator> <call><name pos:line="1612" pos:column="36">ParseExpression</name><argument_list pos:line="1612" pos:column="51">(<argument><expr><name pos:line="1612" pos:column="52">expElement</name></expr></argument>, <argument><expr><name pos:line="1612" pos:column="64">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>
                <comment type="line" pos:line="1615" pos:column="17">//get the name for variable being used</comment>
                <decl_stmt><decl><type><name pos:line="1616" pos:column="17">var</name></type> <name pos:line="1616" pos:column="21">lastName</name> <init pos:line="1616" pos:column="30">= <expr><call><name><name pos:line="1616" pos:column="32">nameElement</name><op:operator pos:line="1616" pos:column="43">.</op:operator><name pos:line="1616" pos:column="44">Elements</name></name><argument_list pos:line="1616" pos:column="52">(<argument><expr><name><name pos:line="1616" pos:column="53">SRC</name><op:operator pos:line="1616" pos:column="56">.</op:operator><name pos:line="1616" pos:column="57">Name</name></name></expr></argument>)</argument_list></call><op:operator pos:line="1616" pos:column="62">.</op:operator><call><name pos:line="1616" pos:column="63">LastOrDefault</name><argument_list pos:line="1616" pos:column="76">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="1617" pos:column="17">if<condition pos:line="1617" pos:column="19">(<expr><name pos:line="1617" pos:column="20">lastName</name> <op:operator pos:line="1617" pos:column="29">!=</op:operator> <name pos:line="1617" pos:column="32">null</name></expr>)</condition><then pos:line="1617" pos:column="37"> <block pos:line="1617" pos:column="38">{
                    <expr_stmt><expr><name><name pos:line="1618" pos:column="21">vu</name><op:operator pos:line="1618" pos:column="23">.</op:operator><name pos:line="1618" pos:column="24">Name</name></name> <op:operator pos:line="1618" pos:column="29">=</op:operator> <name><name pos:line="1618" pos:column="31">lastName</name><op:operator pos:line="1618" pos:column="39">.</op:operator><name pos:line="1618" pos:column="40">Value</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="1619" pos:column="21">vu</name><op:operator pos:line="1619" pos:column="23">.</op:operator><name pos:line="1619" pos:column="24">Location</name></name> <op:operator pos:line="1619" pos:column="33">=</op:operator> <call><name><name pos:line="1619" pos:column="35">context</name><op:operator pos:line="1619" pos:column="42">.</op:operator><name pos:line="1619" pos:column="43">CreateLocation</name></name><argument_list pos:line="1619" pos:column="57">(<argument><expr><name pos:line="1619" pos:column="58">lastName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <comment type="line" pos:line="1621" pos:column="17">//parse the calling object expression</comment>
                <decl_stmt><decl><type><name pos:line="1622" pos:column="17">var</name></type> <name pos:line="1622" pos:column="21">callingObjects</name> <init pos:line="1622" pos:column="36">= <expr><name pos:line="1622" pos:column="38">lastName</name> <op:operator pos:line="1622" pos:column="47">!=</op:operator> <name pos:line="1622" pos:column="50">null</name> <op:operator pos:line="1622" pos:column="55">?</op:operator> <call><name><name pos:line="1622" pos:column="57">lastName</name><op:operator pos:line="1622" pos:column="65">.</op:operator><name pos:line="1622" pos:column="66">ElementsBeforeSelf</name></name><argument_list pos:line="1622" pos:column="84">()</argument_list></call> <op:operator pos:line="1622" pos:column="87">:</op:operator> <call><name><name pos:line="1622" pos:column="89">nameElement</name><op:operator pos:line="1622" pos:column="100">.</op:operator><name pos:line="1622" pos:column="101">Elements</name></name><argument_list pos:line="1622" pos:column="109">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="1623" pos:column="17">var</name></type> <name pos:line="1623" pos:column="21">callingExp</name> <init pos:line="1623" pos:column="32">= <expr><call><name pos:line="1623" pos:column="34">ParseExpression</name><argument_list pos:line="1623" pos:column="49">(<argument><expr><name pos:line="1623" pos:column="50">callingObjects</name></expr></argument>, <argument><expr><name pos:line="1623" pos:column="66">context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="1624" pos:column="17">if<condition pos:line="1624" pos:column="19">(<expr><name pos:line="1624" pos:column="20">callingExp</name> <op:operator pos:line="1624" pos:column="31">!=</op:operator> <name pos:line="1624" pos:column="34">null</name></expr>)</condition><then pos:line="1624" pos:column="39"> <block pos:line="1624" pos:column="40">{
                    <return pos:line="1625" pos:column="21">return <expr><call><name pos:line="1625" pos:column="28">MergeExpressions</name><argument_list pos:line="1625" pos:column="44">(<argument><expr><name pos:line="1625" pos:column="45">callingExp</name></expr></argument>, <argument><expr><name pos:line="1625" pos:column="57">vu</name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></then></if>
            }</block></else></if>
            
            <return pos:line="1629" pos:column="13">return <expr><name pos:line="1629" pos:column="20">vu</name></expr>;</return>
        }</block></function>

        <cpp:endregion pos:line="1632" pos:column="9">#<cpp:directive pos:line="1632" pos:column="10">endregion</cpp:directive> Parse expression elements</cpp:endregion>

        <cpp:region pos:line="1634" pos:column="9">#<cpp:directive pos:line="1634" pos:column="10">region</cpp:directive> access modifiers</cpp:region>

        <comment type="line" pos:line="1636" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="1637" pos:column="9">/// Gets the access modifier for this method. For Java and C#, a "specifier" tag is placed</comment>
        <comment type="line" pos:line="1638" pos:column="9">/// in either the methodElement, or the typeElement in the method.</comment>
        <comment type="line" pos:line="1639" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="1640" pos:column="9">/// &lt;param name="methodElement"&gt;The methodElement&lt;/param&gt;</comment>
        <comment type="line" pos:line="1641" pos:column="9">/// &lt;returns&gt;The first specifier encountered. If none, it returns see</comment>
        <comment type="line" pos:line="1642" pos:column="9">/// cref="AccessModifier.None"/&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="1643" pos:column="9">protected</specifier> <specifier pos:line="1643" pos:column="19">virtual</specifier> <name pos:line="1643" pos:column="27">AccessModifier</name></type> <name pos:line="1643" pos:column="42">GetAccessModifierForMethod</name><parameter_list pos:line="1643" pos:column="68">(<param><decl><type><name pos:line="1643" pos:column="69">XElement</name></type> <name pos:line="1643" pos:column="78">methodElement</name></decl></param>)</parameter_list> <block pos:line="1643" pos:column="93">{
            <if pos:line="1644" pos:column="13">if<condition pos:line="1644" pos:column="15">(<expr><name pos:line="1644" pos:column="16">methodElement</name> <op:operator pos:line="1644" pos:column="30">==</op:operator> <name pos:line="1644" pos:column="33">null</name></expr>)</condition><then pos:line="1644" pos:column="38">
                <throw pos:line="1645" pos:column="17">throw <expr><op:operator pos:line="1645" pos:column="23">new</op:operator> <call><name pos:line="1645" pos:column="27">ArgumentNullException</name><argument_list pos:line="1645" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="1645" pos:column="49">"methodElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="1646" pos:column="13">if<condition pos:line="1646" pos:column="15">(<expr><op:operator pos:line="1646" pos:column="16">!</op:operator><call><name><name pos:line="1646" pos:column="17">MethodElementNames</name><op:operator pos:line="1646" pos:column="35">.</op:operator><name pos:line="1646" pos:column="36">Contains</name></name><argument_list pos:line="1646" pos:column="44">(<argument><expr><name><name pos:line="1646" pos:column="45">methodElement</name><op:operator pos:line="1646" pos:column="58">.</op:operator><name pos:line="1646" pos:column="59">Name</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1646" pos:column="65">
                <throw pos:line="1647" pos:column="17">throw <expr><op:operator pos:line="1647" pos:column="23">new</op:operator> <call><name pos:line="1647" pos:column="27">ArgumentException</name><argument_list pos:line="1647" pos:column="44">(<argument><expr><call><name><name pos:line="1647" pos:column="45">string</name><op:operator pos:line="1647" pos:column="51">.</op:operator><name pos:line="1647" pos:column="52">Format</name></name><argument_list pos:line="1647" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="1647" pos:column="59">"Not a valid methodElement: {0}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1647" pos:column="93">methodElement</name><op:operator pos:line="1647" pos:column="106">.</op:operator><name pos:line="1647" pos:column="107">Name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1647" pos:column="114">"methodElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="1649" pos:column="13">var</name></type> <name pos:line="1649" pos:column="17">specifierContainer</name> <init pos:line="1649" pos:column="36">= <expr><call><name><name pos:line="1649" pos:column="38">methodElement</name><op:operator pos:line="1649" pos:column="51">.</op:operator><name pos:line="1649" pos:column="52">Element</name></name><argument_list pos:line="1649" pos:column="59">(<argument><expr><name><name pos:line="1649" pos:column="60">SRC</name><op:operator pos:line="1649" pos:column="63">.</op:operator><name pos:line="1649" pos:column="64">Type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="1650" pos:column="13">if<condition pos:line="1650" pos:column="15">(<expr><name pos:line="1650" pos:column="16">null</name> <op:operator pos:line="1650" pos:column="21">==</op:operator> <name pos:line="1650" pos:column="24">specifierContainer</name></expr>)</condition><then pos:line="1650" pos:column="43"> <block pos:line="1650" pos:column="44">{
                <expr_stmt><expr><name pos:line="1651" pos:column="17">specifierContainer</name> <op:operator pos:line="1651" pos:column="36">=</op:operator> <name pos:line="1651" pos:column="38">methodElement</name></expr>;</expr_stmt>
            }</block></then></if>
            <return pos:line="1653" pos:column="13">return <expr><call><name pos:line="1653" pos:column="20">GetAccessModifier</name><argument_list pos:line="1653" pos:column="37">(<argument><expr><name pos:line="1653" pos:column="38">specifierContainer</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="1656" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="1657" pos:column="9">/// Gets the access modifier for the given type</comment>
        <comment type="line" pos:line="1658" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="1659" pos:column="9">/// &lt;param name="typeElement"&gt;The type XElement&lt;/param&gt;</comment>
        <comment type="line" pos:line="1660" pos:column="9">/// &lt;returns&gt;The access modifier for the type.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="1661" pos:column="9">protected</specifier> <specifier pos:line="1661" pos:column="19">virtual</specifier> <name pos:line="1661" pos:column="27">AccessModifier</name></type> <name pos:line="1661" pos:column="42">GetAccessModifierForType</name><parameter_list pos:line="1661" pos:column="66">(<param><decl><type><name pos:line="1661" pos:column="67">XElement</name></type> <name pos:line="1661" pos:column="76">typeElement</name></decl></param>)</parameter_list> <block pos:line="1661" pos:column="89">{
            <if pos:line="1662" pos:column="13">if<condition pos:line="1662" pos:column="15">(<expr><name pos:line="1662" pos:column="16">typeElement</name> <op:operator pos:line="1662" pos:column="28">==</op:operator> <name pos:line="1662" pos:column="31">null</name></expr>)</condition><then pos:line="1662" pos:column="36">
                <throw pos:line="1663" pos:column="17">throw <expr><op:operator pos:line="1663" pos:column="23">new</op:operator> <call><name pos:line="1663" pos:column="27">ArgumentNullException</name><argument_list pos:line="1663" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="1663" pos:column="49">"typeElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="1664" pos:column="13">if<condition pos:line="1664" pos:column="15">(<expr><op:operator pos:line="1664" pos:column="16">!</op:operator><call><name><name pos:line="1664" pos:column="17">TypeElementNames</name><op:operator pos:line="1664" pos:column="33">.</op:operator><name pos:line="1664" pos:column="34">Contains</name></name><argument_list pos:line="1664" pos:column="42">(<argument><expr><name><name pos:line="1664" pos:column="43">typeElement</name><op:operator pos:line="1664" pos:column="54">.</op:operator><name pos:line="1664" pos:column="55">Name</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1664" pos:column="61">
                <throw pos:line="1665" pos:column="17">throw <expr><op:operator pos:line="1665" pos:column="23">new</op:operator> <call><name pos:line="1665" pos:column="27">ArgumentException</name><argument_list pos:line="1665" pos:column="44">(<argument><expr><call><name><name pos:line="1665" pos:column="45">string</name><op:operator pos:line="1665" pos:column="51">.</op:operator><name pos:line="1665" pos:column="52">Format</name></name><argument_list pos:line="1665" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="1665" pos:column="59">"Not a valid typeElement: {0}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1665" pos:column="91">typeElement</name><op:operator pos:line="1665" pos:column="102">.</op:operator><name pos:line="1665" pos:column="103">Name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1665" pos:column="110">"typeElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <return pos:line="1667" pos:column="13">return <expr><call><name pos:line="1667" pos:column="20">GetAccessModifier</name><argument_list pos:line="1667" pos:column="37">(<argument><expr><name pos:line="1667" pos:column="38">typeElement</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="1670" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="1671" pos:column="9">/// Determines the access modifier used within a type use element, i.e. SRC.Type</comment>
        <comment type="line" pos:line="1672" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="1673" pos:column="9">/// &lt;param name="typeElement"&gt;A SRC.Type element&lt;/param&gt;</comment>
        <comment type="line" pos:line="1674" pos:column="9">/// &lt;returns&gt;An AccessModifier based on the specifier elements in the type use.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="1675" pos:column="9">protected</specifier> <specifier pos:line="1675" pos:column="19">virtual</specifier> <name pos:line="1675" pos:column="27">AccessModifier</name></type> <name pos:line="1675" pos:column="42">GetAccessModifierFromTypeUseElement</name><parameter_list pos:line="1675" pos:column="77">(<param><decl><type><name pos:line="1675" pos:column="78">XElement</name></type> <name pos:line="1675" pos:column="87">typeElement</name></decl></param>)</parameter_list> <block pos:line="1675" pos:column="100">{
            <if pos:line="1676" pos:column="13">if<condition pos:line="1676" pos:column="15">(<expr><name pos:line="1676" pos:column="16">typeElement</name> <op:operator pos:line="1676" pos:column="28">==</op:operator> <name pos:line="1676" pos:column="31">null</name></expr>)</condition><then pos:line="1676" pos:column="36">
                <throw pos:line="1677" pos:column="17">throw <expr><op:operator pos:line="1677" pos:column="23">new</op:operator> <call><name pos:line="1677" pos:column="27">ArgumentNullException</name><argument_list pos:line="1677" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="1677" pos:column="49">"typeElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="1678" pos:column="13">if<condition pos:line="1678" pos:column="15">(<expr><name><name pos:line="1678" pos:column="16">typeElement</name><op:operator pos:line="1678" pos:column="27">.</op:operator><name pos:line="1678" pos:column="28">Name</name></name> <op:operator pos:line="1678" pos:column="33">!=</op:operator> <name><name pos:line="1678" pos:column="36">SRC</name><op:operator pos:line="1678" pos:column="39">.</op:operator><name pos:line="1678" pos:column="40">Type</name></name></expr>)</condition><then pos:line="1678" pos:column="45">
                <throw pos:line="1679" pos:column="17">throw <expr><op:operator pos:line="1679" pos:column="23">new</op:operator> <call><name pos:line="1679" pos:column="27">ArgumentException</name><argument_list pos:line="1679" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="1679" pos:column="45">"Must be a SRC.Type element"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1679" pos:column="75">"typeElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <return pos:line="1681" pos:column="13">return <expr><call><name pos:line="1681" pos:column="20">GetAccessModifier</name><argument_list pos:line="1681" pos:column="37">(<argument><expr><name pos:line="1681" pos:column="38">typeElement</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="1684" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="1685" pos:column="9">/// Determines the access modifier used within the given element. This element must have SRC.Specifier element(s) as its children.</comment>
        <comment type="line" pos:line="1686" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="1687" pos:column="9">/// &lt;param name="element"&gt;An element that may contain children of type SRC.Specifer.&lt;/param&gt;</comment>
        <comment type="line" pos:line="1688" pos:column="9">/// &lt;returns&gt;The access modifier used.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="1689" pos:column="9">protected</specifier> <specifier pos:line="1689" pos:column="19">virtual</specifier> <name pos:line="1689" pos:column="27">AccessModifier</name></type> <name pos:line="1689" pos:column="42">GetAccessModifier</name><parameter_list pos:line="1689" pos:column="59">(<param><decl><type><name pos:line="1689" pos:column="60">XElement</name></type> <name pos:line="1689" pos:column="69">element</name></decl></param>)</parameter_list> <block pos:line="1689" pos:column="78">{
            <if pos:line="1690" pos:column="13">if<condition pos:line="1690" pos:column="15">(<expr><name pos:line="1690" pos:column="16">element</name> <op:operator pos:line="1690" pos:column="24">==</op:operator> <name pos:line="1690" pos:column="27">null</name></expr>)</condition><then pos:line="1690" pos:column="32">
                <throw pos:line="1691" pos:column="17">throw <expr><op:operator pos:line="1691" pos:column="23">new</op:operator> <call><name pos:line="1691" pos:column="27">ArgumentNullException</name><argument_list pos:line="1691" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="1691" pos:column="49">"element"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="1693" pos:column="13">var</name></type> <name pos:line="1693" pos:column="17">accessModifierMap</name> <init pos:line="1693" pos:column="35">= <expr><op:operator pos:line="1693" pos:column="37">new</op:operator> <call><name><name pos:line="1693" pos:column="41">Dictionary</name><argument_list pos:line="1693" pos:column="51">&lt;<argument><name pos:line="1693" pos:column="52">string</name></argument>, <argument><name pos:line="1693" pos:column="60">AccessModifier</name></argument>&gt;</argument_list></name><argument_list pos:line="1693" pos:column="75">()</argument_list></call>
                                    <block pos:line="1694" pos:column="37">{
                                        <expr><block pos:line="1695" pos:column="41">{<expr><lit:literal type="string" pos:line="1695" pos:column="42">"public"</lit:literal></expr>, <expr><name><name pos:line="1695" pos:column="52">AccessModifier</name><op:operator pos:line="1695" pos:column="66">.</op:operator><name pos:line="1695" pos:column="67">Public</name></name></expr>}</block></expr>,
                                        <expr><block pos:line="1696" pos:column="41">{<expr><lit:literal type="string" pos:line="1696" pos:column="42">"private"</lit:literal></expr>, <expr><name><name pos:line="1696" pos:column="53">AccessModifier</name><op:operator pos:line="1696" pos:column="67">.</op:operator><name pos:line="1696" pos:column="68">Private</name></name></expr>}</block></expr>,
                                        <expr><block pos:line="1697" pos:column="41">{<expr><lit:literal type="string" pos:line="1697" pos:column="42">"protected"</lit:literal></expr>, <expr><name><name pos:line="1697" pos:column="55">AccessModifier</name><op:operator pos:line="1697" pos:column="69">.</op:operator><name pos:line="1697" pos:column="70">Protected</name></name></expr>}</block></expr>,
                                        <expr><block pos:line="1698" pos:column="41">{<expr><lit:literal type="string" pos:line="1698" pos:column="42">"internal"</lit:literal></expr>, <expr><name><name pos:line="1698" pos:column="54">AccessModifier</name><op:operator pos:line="1698" pos:column="68">.</op:operator><name pos:line="1698" pos:column="69">Internal</name></name></expr>}</block></expr>
                                    }</block></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="1701" pos:column="13">//specifiers might include non-access keywords like "partial" or "static"</comment>
            <comment type="line" pos:line="1702" pos:column="13">//get only specifiers that are in the accessModiferMap</comment>
            <decl_stmt><decl><type><name pos:line="1703" pos:column="13">var</name></type> <name pos:line="1703" pos:column="17">accessSpecifiers</name> <init pos:line="1703" pos:column="34">= <expr><call><name><name pos:line="1703" pos:column="36">element</name><op:operator pos:line="1703" pos:column="43">.</op:operator><name pos:line="1703" pos:column="44">Elements</name></name><argument_list pos:line="1703" pos:column="52">(<argument><expr><name><name pos:line="1703" pos:column="53">SRC</name><op:operator pos:line="1703" pos:column="56">.</op:operator><name pos:line="1703" pos:column="57">Specifier</name></name></expr></argument>)</argument_list></call><op:operator pos:line="1703" pos:column="67">.</op:operator><call><name pos:line="1703" pos:column="68">Select</name><argument_list pos:line="1703" pos:column="74">(<argument><expr><lambda><name pos:line="1703" pos:column="75">e</name> <op:operator pos:line="1703" pos:column="77">=&gt;</op:operator> <name><name pos:line="1703" pos:column="80">e</name><op:operator pos:line="1703" pos:column="81">.</op:operator><name pos:line="1703" pos:column="82">Value</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="1703" pos:column="88">.</op:operator><call><name pos:line="1703" pos:column="89">Where</name><argument_list pos:line="1703" pos:column="94">(<argument><expr><lambda><name pos:line="1703" pos:column="95">s</name> <op:operator pos:line="1703" pos:column="97">=&gt;</op:operator> <call><name><name pos:line="1703" pos:column="100">accessModifierMap</name><op:operator pos:line="1703" pos:column="117">.</op:operator><name pos:line="1703" pos:column="118">ContainsKey</name></name><argument_list pos:line="1703" pos:column="129">(<argument><expr><name pos:line="1703" pos:column="130">s</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="1703" pos:column="133">.</op:operator><call><name pos:line="1703" pos:column="134">ToList</name><argument_list pos:line="1703" pos:column="140">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1704" pos:column="13">AccessModifier</name></type> <name pos:line="1704" pos:column="28">result</name></decl>;</decl_stmt>
            <if pos:line="1705" pos:column="13">if<condition pos:line="1705" pos:column="15">(<expr><op:operator pos:line="1705" pos:column="16">!</op:operator><call><name><name pos:line="1705" pos:column="17">accessSpecifiers</name><op:operator pos:line="1705" pos:column="33">.</op:operator><name pos:line="1705" pos:column="34">Any</name></name><argument_list pos:line="1705" pos:column="37">()</argument_list></call></expr>)</condition><then pos:line="1705" pos:column="40"> <block pos:line="1705" pos:column="41">{
                <expr_stmt><expr><name pos:line="1706" pos:column="17">result</name> <op:operator pos:line="1706" pos:column="24">=</op:operator> <name><name pos:line="1706" pos:column="26">AccessModifier</name><op:operator pos:line="1706" pos:column="40">.</op:operator><name pos:line="1706" pos:column="41">None</name></name></expr>;</expr_stmt>
            }</block></then> <else pos:line="1707" pos:column="15">else <if pos:line="1707" pos:column="20">if<condition pos:line="1707" pos:column="22">(<expr><name><name pos:line="1707" pos:column="23">accessSpecifiers</name><op:operator pos:line="1707" pos:column="39">.</op:operator><name pos:line="1707" pos:column="40">Count</name></name> <op:operator pos:line="1707" pos:column="46">==</op:operator> <lit:literal type="number" pos:line="1707" pos:column="49">2</lit:literal> <op:operator pos:line="1707" pos:column="51">&amp;&amp;</op:operator> <call><name><name pos:line="1707" pos:column="54">accessSpecifiers</name><op:operator pos:line="1707" pos:column="70">.</op:operator><name pos:line="1707" pos:column="71">Contains</name></name><argument_list pos:line="1707" pos:column="79">(<argument><expr><lit:literal type="string" pos:line="1707" pos:column="80">"protected"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1707" pos:column="93">&amp;&amp;</op:operator> <call><name><name pos:line="1707" pos:column="96">accessSpecifiers</name><op:operator pos:line="1707" pos:column="112">.</op:operator><name pos:line="1707" pos:column="113">Contains</name></name><argument_list pos:line="1707" pos:column="121">(<argument><expr><lit:literal type="string" pos:line="1707" pos:column="122">"internal"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1707" pos:column="134"> <block pos:line="1707" pos:column="135">{
                <expr_stmt><expr><name pos:line="1708" pos:column="17">result</name> <op:operator pos:line="1708" pos:column="24">=</op:operator> <name><name pos:line="1708" pos:column="26">AccessModifier</name><op:operator pos:line="1708" pos:column="40">.</op:operator><name pos:line="1708" pos:column="41">ProtectedInternal</name></name></expr>;</expr_stmt>
            }</block></then> <else pos:line="1709" pos:column="15">else <block pos:line="1709" pos:column="20">{
                <expr_stmt><expr><name pos:line="1710" pos:column="17">result</name> <op:operator pos:line="1710" pos:column="24">=</op:operator> <name><name pos:line="1710" pos:column="26">accessModifierMap</name><index pos:line="1710" pos:column="43">[<expr><call><name><name pos:line="1710" pos:column="44">accessSpecifiers</name><op:operator pos:line="1710" pos:column="60">.</op:operator><name pos:line="1710" pos:column="61">First</name></name><argument_list pos:line="1710" pos:column="66">()</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
            }</block></else></if></else></if>
            <return pos:line="1712" pos:column="13">return <expr><name pos:line="1712" pos:column="20">result</name></expr>;</return>
        }</block></function>

        <cpp:endregion pos:line="1715" pos:column="9">#<cpp:directive pos:line="1715" pos:column="10">endregion</cpp:directive> access modifiers</cpp:endregion>

        <cpp:region pos:line="1717" pos:column="9">#<cpp:directive pos:line="1717" pos:column="10">region</cpp:directive> parse literal types</cpp:region>

        <comment type="line" pos:line="1719" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="1720" pos:column="9">/// Gets the type for a boolean literal</comment>
        <comment type="line" pos:line="1721" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="1722" pos:column="9">/// &lt;param name="literalValue"&gt;The literal value to parse&lt;/param&gt;</comment>
        <comment type="line" pos:line="1723" pos:column="9">/// &lt;returns&gt;The type name&lt;/returns&gt;</comment>
        <function_decl><type><specifier pos:line="1724" pos:column="9">protected</specifier> <specifier pos:line="1724" pos:column="19">abstract</specifier> <name pos:line="1724" pos:column="28">string</name></type> <name pos:line="1724" pos:column="35">GetTypeForBooleanLiteral</name><parameter_list pos:line="1724" pos:column="59">(<param><decl><type><name pos:line="1724" pos:column="60">string</name></type> <name pos:line="1724" pos:column="67">literalValue</name></decl></param>)</parameter_list>;</function_decl>

        <comment type="line" pos:line="1726" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="1727" pos:column="9">/// Gets the type for a character literal</comment>
        <comment type="line" pos:line="1728" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="1729" pos:column="9">/// &lt;param name="literalValue"&gt;the literal value to parse&lt;/param&gt;</comment>
        <comment type="line" pos:line="1730" pos:column="9">/// &lt;returns&gt;The type name&lt;/returns&gt;</comment>
        <function_decl><type><specifier pos:line="1731" pos:column="9">protected</specifier> <specifier pos:line="1731" pos:column="19">abstract</specifier> <name pos:line="1731" pos:column="28">string</name></type> <name pos:line="1731" pos:column="35">GetTypeForCharacterLiteral</name><parameter_list pos:line="1731" pos:column="61">(<param><decl><type><name pos:line="1731" pos:column="62">string</name></type> <name pos:line="1731" pos:column="69">literalValue</name></decl></param>)</parameter_list>;</function_decl>

        <comment type="line" pos:line="1733" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="1734" pos:column="9">/// Gets the type of the literal element</comment>
        <comment type="line" pos:line="1735" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="1736" pos:column="9">/// &lt;param name="kind"&gt;The literal kind&lt;/param&gt;</comment>
        <comment type="line" pos:line="1737" pos:column="9">/// &lt;param name="literalValue"&gt;The value&lt;/param&gt;</comment>
        <comment type="line" pos:line="1738" pos:column="9">/// &lt;returns&gt;The name of this type&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="1739" pos:column="9">protected</specifier> <specifier pos:line="1739" pos:column="19">virtual</specifier> <name pos:line="1739" pos:column="27">string</name></type> <name pos:line="1739" pos:column="34">GetTypeForLiteralValue</name><parameter_list pos:line="1739" pos:column="56">(<param><decl><type><name pos:line="1739" pos:column="57">LiteralKind</name></type> <name pos:line="1739" pos:column="69">kind</name></decl></param>, <param><decl><type><name pos:line="1739" pos:column="75">string</name></type> <name pos:line="1739" pos:column="82">literalValue</name></decl></param>)</parameter_list> <block pos:line="1739" pos:column="96">{
            <switch pos:line="1740" pos:column="13">switch<condition pos:line="1740" pos:column="19">(<expr><name pos:line="1740" pos:column="20">kind</name></expr>)</condition> <block pos:line="1740" pos:column="26">{
                <case pos:line="1741" pos:column="17">case <expr><name><name pos:line="1741" pos:column="22">LiteralKind</name><op:operator pos:line="1741" pos:column="33">.</op:operator><name pos:line="1741" pos:column="34">Boolean</name></name></expr>:
                    <return pos:line="1742" pos:column="21">return <expr><call><name pos:line="1742" pos:column="28">GetTypeForBooleanLiteral</name><argument_list pos:line="1742" pos:column="52">(<argument><expr><name pos:line="1742" pos:column="53">literalValue</name></expr></argument>)</argument_list></call></expr>;</return>

                </case><case pos:line="1744" pos:column="17">case <expr><name><name pos:line="1744" pos:column="22">LiteralKind</name><op:operator pos:line="1744" pos:column="33">.</op:operator><name pos:line="1744" pos:column="34">Character</name></name></expr>:
                    <return pos:line="1745" pos:column="21">return <expr><call><name pos:line="1745" pos:column="28">GetTypeForCharacterLiteral</name><argument_list pos:line="1745" pos:column="54">(<argument><expr><name pos:line="1745" pos:column="55">literalValue</name></expr></argument>)</argument_list></call></expr>;</return>

                </case><case pos:line="1747" pos:column="17">case <expr><name><name pos:line="1747" pos:column="22">LiteralKind</name><op:operator pos:line="1747" pos:column="33">.</op:operator><name pos:line="1747" pos:column="34">Number</name></name></expr>:
                    <return pos:line="1748" pos:column="21">return <expr><call><name pos:line="1748" pos:column="28">GetTypeForNumberLiteral</name><argument_list pos:line="1748" pos:column="51">(<argument><expr><name pos:line="1748" pos:column="52">literalValue</name></expr></argument>)</argument_list></call></expr>;</return>

                </case><case pos:line="1750" pos:column="17">case <expr><name><name pos:line="1750" pos:column="22">LiteralKind</name><op:operator pos:line="1750" pos:column="33">.</op:operator><name pos:line="1750" pos:column="34">String</name></name></expr>:
                    <return pos:line="1751" pos:column="21">return <expr><call><name pos:line="1751" pos:column="28">GetTypeForStringLiteral</name><argument_list pos:line="1751" pos:column="51">(<argument><expr><name pos:line="1751" pos:column="52">literalValue</name></expr></argument>)</argument_list></call></expr>;</return>
            </case>}</block></switch>
            <return pos:line="1753" pos:column="13">return <expr><name><name pos:line="1753" pos:column="20">String</name><op:operator pos:line="1753" pos:column="26">.</op:operator><name pos:line="1753" pos:column="27">Empty</name></name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="1756" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="1757" pos:column="9">/// Gets the type for a number literal</comment>
        <comment type="line" pos:line="1758" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="1759" pos:column="9">/// &lt;param name="literalValue"&gt;The literal value to parse&lt;/param&gt;</comment>
        <comment type="line" pos:line="1760" pos:column="9">/// &lt;returns&gt;The type name&lt;/returns&gt;</comment>
        <function_decl><type><specifier pos:line="1761" pos:column="9">protected</specifier> <specifier pos:line="1761" pos:column="19">abstract</specifier> <name pos:line="1761" pos:column="28">string</name></type> <name pos:line="1761" pos:column="35">GetTypeForNumberLiteral</name><parameter_list pos:line="1761" pos:column="58">(<param><decl><type><name pos:line="1761" pos:column="59">string</name></type> <name pos:line="1761" pos:column="66">literalValue</name></decl></param>)</parameter_list>;</function_decl>

        <comment type="line" pos:line="1763" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="1764" pos:column="9">/// Gets the type for a string literal</comment>
        <comment type="line" pos:line="1765" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="1766" pos:column="9">/// &lt;param name="literalValue"&gt;The literal value to parse&lt;/param&gt;</comment>
        <comment type="line" pos:line="1767" pos:column="9">/// &lt;returns&gt;The type name&lt;/returns&gt;</comment>
        <function_decl><type><specifier pos:line="1768" pos:column="9">protected</specifier> <specifier pos:line="1768" pos:column="19">abstract</specifier> <name pos:line="1768" pos:column="28">string</name></type> <name pos:line="1768" pos:column="35">GetTypeForStringLiteral</name><parameter_list pos:line="1768" pos:column="58">(<param><decl><type><name pos:line="1768" pos:column="59">string</name></type> <name pos:line="1768" pos:column="66">literalValue</name></decl></param>)</parameter_list>;</function_decl>

        <cpp:endregion pos:line="1770" pos:column="9">#<cpp:directive pos:line="1770" pos:column="10">endregion</cpp:directive> parse literal types</cpp:endregion>

        <cpp:region pos:line="1772" pos:column="9">#<cpp:directive pos:line="1772" pos:column="10">region</cpp:directive> utilities</cpp:region>

        <comment type="line" pos:line="1774" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="1775" pos:column="9">/// Checks to see if this callElement is a reference container</comment>
        <comment type="line" pos:line="1776" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="1777" pos:column="9">/// &lt;param name="element"&gt;The callElement to check&lt;/param&gt;</comment>
        <comment type="line" pos:line="1778" pos:column="9">/// &lt;returns&gt;True if this is a reference container; false otherwise&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="1779" pos:column="9">protected</specifier> <specifier pos:line="1779" pos:column="19">virtual</specifier> <name pos:line="1779" pos:column="27">bool</name></type> <name pos:line="1779" pos:column="32">ContainerIsReference</name><parameter_list pos:line="1779" pos:column="52">(<param><decl><type><name pos:line="1779" pos:column="53">XElement</name></type> <name pos:line="1779" pos:column="62">element</name></decl></param>)</parameter_list> <block pos:line="1779" pos:column="71">{
            <return pos:line="1780" pos:column="13">return <expr><op:operator pos:line="1780" pos:column="20">(</op:operator><name pos:line="1780" pos:column="21">element</name> <op:operator pos:line="1780" pos:column="29">!=</op:operator> <name pos:line="1780" pos:column="32">null</name> <op:operator pos:line="1780" pos:column="37">&amp;&amp;</op:operator> <call><name><name pos:line="1780" pos:column="40">ContainerReferenceElementNames</name><op:operator pos:line="1780" pos:column="70">.</op:operator><name pos:line="1780" pos:column="71">Contains</name></name><argument_list pos:line="1780" pos:column="79">(<argument><expr><name><name pos:line="1780" pos:column="80">element</name><op:operator pos:line="1780" pos:column="87">.</op:operator><name pos:line="1780" pos:column="88">Name</name></name></expr></argument>)</argument_list></call><op:operator pos:line="1780" pos:column="93">)</op:operator></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="1783" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="1784" pos:column="9">/// Gets the filename for the given file unit.</comment>
        <comment type="line" pos:line="1785" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="1786" pos:column="9">/// &lt;param name="fileUnit"&gt;The file unit. &lt;c&gt;fileUnit.Name&lt;/c&gt; must be /c&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="1787" pos:column="9">/// &lt;returns&gt;The file path represented by this</comment>
        <comment type="line" pos:line="1788" pos:column="9">/// &lt;paramref name="fileUnit"/&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="1789" pos:column="9">protected</specifier> <specifier pos:line="1789" pos:column="19">virtual</specifier> <name pos:line="1789" pos:column="27">string</name></type> <name pos:line="1789" pos:column="34">GetFileNameForUnit</name><parameter_list pos:line="1789" pos:column="52">(<param><decl><type><name pos:line="1789" pos:column="53">XElement</name></type> <name pos:line="1789" pos:column="62">fileUnit</name></decl></param>)</parameter_list> <block pos:line="1789" pos:column="72">{
            <if pos:line="1790" pos:column="13">if<condition pos:line="1790" pos:column="15">(<expr><name pos:line="1790" pos:column="16">fileUnit</name> <op:operator pos:line="1790" pos:column="25">==</op:operator> <name pos:line="1790" pos:column="28">null</name></expr>)</condition><then pos:line="1790" pos:column="33">
                <throw pos:line="1791" pos:column="17">throw <expr><op:operator pos:line="1791" pos:column="23">new</op:operator> <call><name pos:line="1791" pos:column="27">ArgumentNullException</name><argument_list pos:line="1791" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="1791" pos:column="49">"fileUnit"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="1792" pos:column="13">if<condition pos:line="1792" pos:column="15">(<expr><name><name pos:line="1792" pos:column="16">fileUnit</name><op:operator pos:line="1792" pos:column="24">.</op:operator><name pos:line="1792" pos:column="25">Name</name></name> <op:operator pos:line="1792" pos:column="30">!=</op:operator> <name><name pos:line="1792" pos:column="33">SRC</name><op:operator pos:line="1792" pos:column="36">.</op:operator><name pos:line="1792" pos:column="37">Unit</name></name></expr>)</condition><then pos:line="1792" pos:column="42">
                <throw pos:line="1793" pos:column="17">throw <expr><op:operator pos:line="1793" pos:column="23">new</op:operator> <call><name pos:line="1793" pos:column="27">ArgumentException</name><argument_list pos:line="1793" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="1793" pos:column="45">"element must be a unit"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1793" pos:column="71">"fileUnit"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="1795" pos:column="13">var</name></type> <name pos:line="1795" pos:column="17">fileNameAttribute</name> <init pos:line="1795" pos:column="35">= <expr><call><name><name pos:line="1795" pos:column="37">fileUnit</name><op:operator pos:line="1795" pos:column="45">.</op:operator><name pos:line="1795" pos:column="46">Attribute</name></name><argument_list pos:line="1795" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="1795" pos:column="56">"filename"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if pos:line="1797" pos:column="13">if<condition pos:line="1797" pos:column="15">(<expr><name pos:line="1797" pos:column="16">null</name> <op:operator pos:line="1797" pos:column="21">!=</op:operator> <name pos:line="1797" pos:column="24">fileNameAttribute</name></expr>)</condition><then pos:line="1797" pos:column="42">
                <return pos:line="1798" pos:column="17">return <expr><name><name pos:line="1798" pos:column="24">fileNameAttribute</name><op:operator pos:line="1798" pos:column="41">.</op:operator><name pos:line="1798" pos:column="42">Value</name></name></expr>;</return></then></if>
            <return pos:line="1799" pos:column="13">return <expr><name><name pos:line="1799" pos:column="20">String</name><op:operator pos:line="1799" pos:column="26">.</op:operator><name pos:line="1799" pos:column="27">Empty</name></name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="1802" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="1803" pos:column="9">/// Gets the name for the method callElement</comment>
        <comment type="line" pos:line="1804" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="1805" pos:column="9">/// &lt;param name="methodElement"&gt;the method callElement to get the name for&lt;/param&gt;</comment>
        <comment type="line" pos:line="1806" pos:column="9">/// &lt;returns&gt;The name of the method&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="1807" pos:column="9">protected</specifier> <specifier pos:line="1807" pos:column="19">virtual</specifier> <name pos:line="1807" pos:column="27">string</name></type> <name pos:line="1807" pos:column="34">GetNameForMethod</name><parameter_list pos:line="1807" pos:column="50">(<param><decl><type><name pos:line="1807" pos:column="51">XElement</name></type> <name pos:line="1807" pos:column="60">methodElement</name></decl></param>)</parameter_list> <block pos:line="1807" pos:column="75">{
            <decl_stmt><decl><type><name pos:line="1808" pos:column="13">var</name></type> <name pos:line="1808" pos:column="17">nameElement</name> <init pos:line="1808" pos:column="29">= <expr><call><name><name pos:line="1808" pos:column="31">methodElement</name><op:operator pos:line="1808" pos:column="44">.</op:operator><name pos:line="1808" pos:column="45">Element</name></name><argument_list pos:line="1808" pos:column="52">(<argument><expr><name><name pos:line="1808" pos:column="53">SRC</name><op:operator pos:line="1808" pos:column="56">.</op:operator><name pos:line="1808" pos:column="57">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if pos:line="1810" pos:column="13">if<condition pos:line="1810" pos:column="15">(<expr><name pos:line="1810" pos:column="16">null</name> <op:operator pos:line="1810" pos:column="21">==</op:operator> <name pos:line="1810" pos:column="24">nameElement</name></expr>)</condition><then pos:line="1810" pos:column="36">
                <return pos:line="1811" pos:column="17">return <expr><name><name pos:line="1811" pos:column="24">string</name><op:operator pos:line="1811" pos:column="30">.</op:operator><name pos:line="1811" pos:column="31">Empty</name></name></expr>;</return></then></if>
            <return pos:line="1812" pos:column="13">return <expr><call><name><name pos:line="1812" pos:column="20">NameHelper</name><op:operator pos:line="1812" pos:column="30">.</op:operator><name pos:line="1812" pos:column="31">GetLastName</name></name><argument_list pos:line="1812" pos:column="42">(<argument><expr><name pos:line="1812" pos:column="43">nameElement</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="1815" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="1816" pos:column="9">/// Gets the name for the type element</comment>
        <comment type="line" pos:line="1817" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="1818" pos:column="9">/// &lt;param name="typeElement"&gt;The type element to get the name for&lt;/param&gt;</comment>
        <comment type="line" pos:line="1819" pos:column="9">/// &lt;returns&gt;The name of the type&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="1820" pos:column="9">protected</specifier> <specifier pos:line="1820" pos:column="19">virtual</specifier> <name pos:line="1820" pos:column="27">string</name></type> <name pos:line="1820" pos:column="34">GetNameForType</name><parameter_list pos:line="1820" pos:column="48">(<param><decl><type><name pos:line="1820" pos:column="49">XElement</name></type> <name pos:line="1820" pos:column="58">typeElement</name></decl></param>)</parameter_list> <block pos:line="1820" pos:column="71">{
            <decl_stmt><decl><type><name pos:line="1821" pos:column="13">var</name></type> <name pos:line="1821" pos:column="17">name</name> <init pos:line="1821" pos:column="22">= <expr><call><name><name pos:line="1821" pos:column="24">typeElement</name><op:operator pos:line="1821" pos:column="35">.</op:operator><name pos:line="1821" pos:column="36">Element</name></name><argument_list pos:line="1821" pos:column="43">(<argument><expr><name><name pos:line="1821" pos:column="44">SRC</name><op:operator pos:line="1821" pos:column="47">.</op:operator><name pos:line="1821" pos:column="48">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="1822" pos:column="13">if<condition pos:line="1822" pos:column="15">(<expr><name pos:line="1822" pos:column="16">null</name> <op:operator pos:line="1822" pos:column="21">==</op:operator> <name pos:line="1822" pos:column="24">name</name></expr>)</condition><then pos:line="1822" pos:column="29">
                <return pos:line="1823" pos:column="17">return <expr><name><name pos:line="1823" pos:column="24">string</name><op:operator pos:line="1823" pos:column="30">.</op:operator><name pos:line="1823" pos:column="31">Empty</name></name></expr>;</return></then></if>
            <return pos:line="1824" pos:column="13">return <expr><call><name><name pos:line="1824" pos:column="20">NameHelper</name><op:operator pos:line="1824" pos:column="30">.</op:operator><name pos:line="1824" pos:column="31">GetLastName</name></name><argument_list pos:line="1824" pos:column="42">(<argument><expr><name pos:line="1824" pos:column="43">name</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="1827" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="1828" pos:column="9">/// Gets all of the text nodes that are children of the given element.</comment>
        <comment type="line" pos:line="1829" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="1830" pos:column="9">/// &lt;param name="element"&gt;The element&lt;/param&gt;</comment>
        <comment type="line" pos:line="1831" pos:column="9">/// &lt;returns&gt;An enumerable of the XText elements for</comment>
        <comment type="line" pos:line="1832" pos:column="9">/// &lt;paramref name="element"/&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="1833" pos:column="9">protected</specifier> <name><name pos:line="1833" pos:column="19">IEnumerable</name><argument_list pos:line="1833" pos:column="30">&lt;<argument><name pos:line="1833" pos:column="31">XText</name></argument>&gt;</argument_list></name></type> <name pos:line="1833" pos:column="38">GetTextNodes</name><parameter_list pos:line="1833" pos:column="50">(<param><decl><type><name pos:line="1833" pos:column="51">XElement</name></type> <name pos:line="1833" pos:column="60">element</name></decl></param>)</parameter_list> <block pos:line="1833" pos:column="69">{
            <decl_stmt><decl><type><name pos:line="1834" pos:column="13">var</name></type> <name pos:line="1834" pos:column="17">textNodes</name> <init pos:line="1834" pos:column="27">= <expr><linq><from pos:line="1834" pos:column="29">from <expr><name pos:line="1834" pos:column="34">node</name></expr> <in pos:line="1834" pos:column="39">in <expr><call><name><name pos:line="1834" pos:column="42">element</name><op:operator pos:line="1834" pos:column="49">.</op:operator><name pos:line="1834" pos:column="50">Nodes</name></name><argument_list pos:line="1834" pos:column="55">()</argument_list></call></expr></in></from>
                            <where pos:line="1835" pos:column="29">where <expr><name><name pos:line="1835" pos:column="35">node</name><op:operator pos:line="1835" pos:column="39">.</op:operator><name pos:line="1835" pos:column="40">NodeType</name></name> <op:operator pos:line="1835" pos:column="49">==</op:operator> <name><name pos:line="1835" pos:column="52">XmlNodeType</name><op:operator pos:line="1835" pos:column="63">.</op:operator><name pos:line="1835" pos:column="64">Text</name></name></expr></where>
                            <let pos:line="1836" pos:column="29">let <expr><name pos:line="1836" pos:column="33">text</name> <op:operator pos:line="1836" pos:column="38">=</op:operator> <name pos:line="1836" pos:column="40">node</name> <op:operator pos:line="1836" pos:column="45">as</op:operator> <name pos:line="1836" pos:column="48">XText</name></expr></let>
                            <select pos:line="1837" pos:column="29">select <expr><name pos:line="1837" pos:column="36">text</name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <return pos:line="1838" pos:column="13">return <expr><name pos:line="1838" pos:column="20">textNodes</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="1841" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="1842" pos:column="9">/// Get the children of &lt;paramref name="element"/&gt; that are expressions.</comment>
        <comment type="line" pos:line="1843" pos:column="9">/// These may be elements of type SRC.Expression, SRC.Declaration or SRC.FunctionDeclaration.</comment>
        <comment type="line" pos:line="1844" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="1845" pos:column="9">/// &lt;param name="element"&gt;The parent element from which to find the child expressions.&lt;/param&gt;</comment>
        <comment type="line" pos:line="1846" pos:column="9">/// &lt;returns&gt;An enumerable of the expression elements, or an empty enumerable if none is found.&lt;/returns&gt;</comment>
        <comment type="line" pos:line="1847" pos:column="9">/// &lt;exception cref="System.ArgumentNullException"&gt;&lt;paramref name="element"/&gt; is null.&lt;/exception&gt;</comment>
        <function><type><specifier pos:line="1848" pos:column="9">protected</specifier> <specifier pos:line="1848" pos:column="19">virtual</specifier> <name><name pos:line="1848" pos:column="27">IEnumerable</name><argument_list pos:line="1848" pos:column="38">&lt;<argument><name pos:line="1848" pos:column="39">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="1848" pos:column="49">GetChildExpressions</name><parameter_list pos:line="1848" pos:column="68">(<param><decl><type><name pos:line="1848" pos:column="69">XElement</name></type> <name pos:line="1848" pos:column="78">element</name></decl></param>)</parameter_list> <block pos:line="1848" pos:column="87">{
            <if pos:line="1849" pos:column="13">if<condition pos:line="1849" pos:column="15">(<expr><name pos:line="1849" pos:column="16">element</name> <op:operator pos:line="1849" pos:column="24">==</op:operator> <name pos:line="1849" pos:column="27">null</name></expr>)</condition><then pos:line="1849" pos:column="32">
                <throw pos:line="1850" pos:column="17">throw <expr><op:operator pos:line="1850" pos:column="23">new</op:operator> <call><name pos:line="1850" pos:column="27">ArgumentNullException</name><argument_list pos:line="1850" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="1850" pos:column="49">"element"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <return pos:line="1852" pos:column="13">return <expr><call><name><name pos:line="1852" pos:column="20">element</name><op:operator pos:line="1852" pos:column="27">.</op:operator><name pos:line="1852" pos:column="28">Elements</name></name><argument_list pos:line="1852" pos:column="36">()</argument_list></call><op:operator pos:line="1852" pos:column="38">.</op:operator><call><name pos:line="1852" pos:column="39">Where</name><argument_list pos:line="1852" pos:column="44">(<argument><expr><lambda><name pos:line="1852" pos:column="45">e</name> <op:operator pos:line="1852" pos:column="47">=&gt;</op:operator> <name><name pos:line="1852" pos:column="50">e</name><op:operator pos:line="1852" pos:column="51">.</op:operator><name pos:line="1852" pos:column="52">Name</name></name> <op:operator pos:line="1852" pos:column="57">==</op:operator> <name><name pos:line="1852" pos:column="60">SRC</name><op:operator pos:line="1852" pos:column="63">.</op:operator><name pos:line="1852" pos:column="64">Expression</name></name> <op:operator pos:line="1852" pos:column="75">||</op:operator> <name><name pos:line="1852" pos:column="78">e</name><op:operator pos:line="1852" pos:column="79">.</op:operator><name pos:line="1852" pos:column="80">Name</name></name> <op:operator pos:line="1852" pos:column="85">==</op:operator> <name><name pos:line="1852" pos:column="88">SRC</name><op:operator pos:line="1852" pos:column="91">.</op:operator><name pos:line="1852" pos:column="92">Declaration</name></name> <op:operator pos:line="1852" pos:column="104">||</op:operator> <name><name pos:line="1852" pos:column="107">e</name><op:operator pos:line="1852" pos:column="108">.</op:operator><name pos:line="1852" pos:column="109">Name</name></name> <op:operator pos:line="1852" pos:column="114">==</op:operator> <name><name pos:line="1852" pos:column="117">SRC</name><op:operator pos:line="1852" pos:column="120">.</op:operator><name pos:line="1852" pos:column="121">FunctionDeclaration</name></name></lambda></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="1855" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="1856" pos:column="9">/// Get the first child of &lt;paramref name="element"/&gt; that is an expression.</comment>
        <comment type="line" pos:line="1857" pos:column="9">/// This might be an element of type SRC.Expression, SRC.Declaration or SRC.FunctionDeclaration.</comment>
        <comment type="line" pos:line="1858" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="1859" pos:column="9">/// &lt;param name="element"&gt;The parent element from which to find the child expression.&lt;/param&gt;</comment>
        <comment type="line" pos:line="1860" pos:column="9">/// &lt;returns&gt;The first expression element, or null if none is found.&lt;/returns&gt;</comment>
        <comment type="line" pos:line="1861" pos:column="9">/// &lt;exception cref="System.ArgumentNullException"&gt;&lt;paramref name="element"/&gt; is null.&lt;/exception&gt;</comment>
        <function><type><specifier pos:line="1862" pos:column="9">protected</specifier> <specifier pos:line="1862" pos:column="19">virtual</specifier> <name pos:line="1862" pos:column="27">XElement</name></type> <name pos:line="1862" pos:column="36">GetFirstChildExpression</name><parameter_list pos:line="1862" pos:column="59">(<param><decl><type><name pos:line="1862" pos:column="60">XElement</name></type> <name pos:line="1862" pos:column="69">element</name></decl></param>)</parameter_list> <block pos:line="1862" pos:column="78">{
            <if pos:line="1863" pos:column="13">if<condition pos:line="1863" pos:column="15">(<expr><name pos:line="1863" pos:column="16">element</name> <op:operator pos:line="1863" pos:column="24">==</op:operator> <name pos:line="1863" pos:column="27">null</name></expr>)</condition><then pos:line="1863" pos:column="32">
                <throw pos:line="1864" pos:column="17">throw <expr><op:operator pos:line="1864" pos:column="23">new</op:operator> <call><name pos:line="1864" pos:column="27">ArgumentNullException</name><argument_list pos:line="1864" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="1864" pos:column="49">"element"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <return pos:line="1866" pos:column="13">return <expr><call><name pos:line="1866" pos:column="20">GetChildExpressions</name><argument_list pos:line="1866" pos:column="39">(<argument><expr><name pos:line="1866" pos:column="40">element</name></expr></argument>)</argument_list></call><op:operator pos:line="1866" pos:column="48">.</op:operator><call><name pos:line="1866" pos:column="49">FirstOrDefault</name><argument_list pos:line="1866" pos:column="63">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="1869" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="1870" pos:column="9">/// Creates a new expression containing the components of expression &lt;paramref name="a"/&gt; and the components of expression &lt;paramref name="b"/&gt;.</comment>
        <comment type="line" pos:line="1871" pos:column="9">/// If either expression does not have components, the root expression itself will be included instead.</comment>
        <comment type="line" pos:line="1872" pos:column="9">/// The expressions must be adjacent to each other in the original srcml.</comment>
        <comment type="line" pos:line="1873" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="1874" pos:column="9">protected</specifier> <specifier pos:line="1874" pos:column="19">virtual</specifier> <name pos:line="1874" pos:column="27">Expression</name></type> <name pos:line="1874" pos:column="38">MergeExpressions</name><parameter_list pos:line="1874" pos:column="54">(<param><decl><type><name pos:line="1874" pos:column="55">Expression</name></type> <name pos:line="1874" pos:column="66">a</name></decl></param>, <param><decl><type><name pos:line="1874" pos:column="69">Expression</name></type> <name pos:line="1874" pos:column="80">b</name></decl></param>)</parameter_list> <block pos:line="1874" pos:column="83">{
            <if pos:line="1875" pos:column="13">if<condition pos:line="1875" pos:column="15">(<expr><name pos:line="1875" pos:column="16">a</name> <op:operator pos:line="1875" pos:column="18">==</op:operator> <name pos:line="1875" pos:column="21">null</name></expr>)</condition><then pos:line="1875" pos:column="26"> <block pos:line="1875" pos:column="27">{ <throw pos:line="1875" pos:column="29">throw <expr><op:operator pos:line="1875" pos:column="35">new</op:operator> <call><name pos:line="1875" pos:column="39">ArgumentNullException</name><argument_list pos:line="1875" pos:column="60">(<argument><expr><lit:literal type="string" pos:line="1875" pos:column="61">"a"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>
            <if pos:line="1876" pos:column="13">if<condition pos:line="1876" pos:column="15">(<expr><name pos:line="1876" pos:column="16">b</name> <op:operator pos:line="1876" pos:column="18">==</op:operator> <name pos:line="1876" pos:column="21">null</name></expr>)</condition><then pos:line="1876" pos:column="26"> <block pos:line="1876" pos:column="27">{ <throw pos:line="1876" pos:column="29">throw <expr><op:operator pos:line="1876" pos:column="35">new</op:operator> <call><name pos:line="1876" pos:column="39">ArgumentNullException</name><argument_list pos:line="1876" pos:column="60">(<argument><expr><lit:literal type="string" pos:line="1876" pos:column="61">"b"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>

            <decl_stmt><decl><type><name pos:line="1878" pos:column="13">var</name></type> <name pos:line="1878" pos:column="17">aIsContainer</name> <init pos:line="1878" pos:column="30">= <expr><call><name><name pos:line="1878" pos:column="32">a</name><op:operator pos:line="1878" pos:column="33">.</op:operator><name pos:line="1878" pos:column="34">GetType</name></name><argument_list pos:line="1878" pos:column="41">()</argument_list></call> <op:operator pos:line="1878" pos:column="44">==</op:operator> <call><name pos:line="1878" pos:column="47">typeof</name><argument_list pos:line="1878" pos:column="53">(<argument><expr><name pos:line="1878" pos:column="54">Expression</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1879" pos:column="13">var</name></type> <name pos:line="1879" pos:column="17">bIsContainer</name> <init pos:line="1879" pos:column="30">= <expr><call><name><name pos:line="1879" pos:column="32">b</name><op:operator pos:line="1879" pos:column="33">.</op:operator><name pos:line="1879" pos:column="34">GetType</name></name><argument_list pos:line="1879" pos:column="41">()</argument_list></call> <op:operator pos:line="1879" pos:column="44">==</op:operator> <call><name pos:line="1879" pos:column="47">typeof</name><argument_list pos:line="1879" pos:column="53">(<argument><expr><name pos:line="1879" pos:column="54">Expression</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1881" pos:column="13">var</name></type> <name pos:line="1881" pos:column="17">newExpression</name> <init pos:line="1881" pos:column="31">= <expr><op:operator pos:line="1881" pos:column="33">new</op:operator> <call><name pos:line="1881" pos:column="37">Expression</name><argument_list pos:line="1881" pos:column="47">()</argument_list></call> <block pos:line="1881" pos:column="50">{<expr><name pos:line="1881" pos:column="51">ProgrammingLanguage</name> <op:operator pos:line="1881" pos:column="71">=</op:operator> <name pos:line="1881" pos:column="73">ParserLanguage</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <if pos:line="1882" pos:column="13">if<condition pos:line="1882" pos:column="15">(<expr><name pos:line="1882" pos:column="16">aIsContainer</name></expr>)</condition><then pos:line="1882" pos:column="29"> <block pos:line="1882" pos:column="30">{
                <expr_stmt><expr><name><name pos:line="1883" pos:column="17">newExpression</name><op:operator pos:line="1883" pos:column="30">.</op:operator><name pos:line="1883" pos:column="31">Location</name></name> <op:operator pos:line="1883" pos:column="40">=</op:operator> <name><name pos:line="1883" pos:column="42">a</name><op:operator pos:line="1883" pos:column="43">.</op:operator><name pos:line="1883" pos:column="44">Location</name></name></expr>;</expr_stmt>
            }</block></then> <else pos:line="1884" pos:column="15">else <if pos:line="1884" pos:column="20">if<condition pos:line="1884" pos:column="22">(<expr><name pos:line="1884" pos:column="23">bIsContainer</name></expr>)</condition><then pos:line="1884" pos:column="36"> <block pos:line="1884" pos:column="37">{
                <expr_stmt><expr><name><name pos:line="1885" pos:column="17">newExpression</name><op:operator pos:line="1885" pos:column="30">.</op:operator><name pos:line="1885" pos:column="31">Location</name></name> <op:operator pos:line="1885" pos:column="40">=</op:operator> <name><name pos:line="1885" pos:column="42">b</name><op:operator pos:line="1885" pos:column="43">.</op:operator><name pos:line="1885" pos:column="44">Location</name></name></expr>;</expr_stmt>
            }</block></then> <else pos:line="1886" pos:column="15">else <block pos:line="1886" pos:column="20">{
                <comment type="line" pos:line="1887" pos:column="17">//both are not containers</comment>
                <comment type="line" pos:line="1888" pos:column="17">//set location to the first, although this won't be entirely accurate</comment>
                <expr_stmt><expr><name><name pos:line="1889" pos:column="17">newExpression</name><op:operator pos:line="1889" pos:column="30">.</op:operator><name pos:line="1889" pos:column="31">Location</name></name> <op:operator pos:line="1889" pos:column="40">=</op:operator> <name><name pos:line="1889" pos:column="42">a</name><op:operator pos:line="1889" pos:column="43">.</op:operator><name pos:line="1889" pos:column="44">Location</name></name></expr>;</expr_stmt>
            }</block></else></if></else></if>

            <if pos:line="1892" pos:column="13">if<condition pos:line="1892" pos:column="15">(<expr><name pos:line="1892" pos:column="16">aIsContainer</name></expr>)</condition><then pos:line="1892" pos:column="29"> <block pos:line="1892" pos:column="30">{
                <expr_stmt><expr><call><name><name pos:line="1893" pos:column="17">newExpression</name><op:operator pos:line="1893" pos:column="30">.</op:operator><name pos:line="1893" pos:column="31">AddComponents</name></name><argument_list pos:line="1893" pos:column="44">(<argument><expr><name><name pos:line="1893" pos:column="45">a</name><op:operator pos:line="1893" pos:column="46">.</op:operator><name pos:line="1893" pos:column="47">Components</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="1894" pos:column="15">else <block pos:line="1894" pos:column="20">{
                <expr_stmt><expr><call><name><name pos:line="1895" pos:column="17">newExpression</name><op:operator pos:line="1895" pos:column="30">.</op:operator><name pos:line="1895" pos:column="31">AddComponent</name></name><argument_list pos:line="1895" pos:column="43">(<argument><expr><name pos:line="1895" pos:column="44">a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <if pos:line="1897" pos:column="13">if<condition pos:line="1897" pos:column="15">(<expr><name pos:line="1897" pos:column="16">bIsContainer</name></expr>)</condition><then pos:line="1897" pos:column="29"> <block pos:line="1897" pos:column="30">{
                <expr_stmt><expr><call><name><name pos:line="1898" pos:column="17">newExpression</name><op:operator pos:line="1898" pos:column="30">.</op:operator><name pos:line="1898" pos:column="31">AddComponents</name></name><argument_list pos:line="1898" pos:column="44">(<argument><expr><name><name pos:line="1898" pos:column="45">b</name><op:operator pos:line="1898" pos:column="46">.</op:operator><name pos:line="1898" pos:column="47">Components</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="1899" pos:column="15">else <block pos:line="1899" pos:column="20">{
                <expr_stmt><expr><call><name><name pos:line="1900" pos:column="17">newExpression</name><op:operator pos:line="1900" pos:column="30">.</op:operator><name pos:line="1900" pos:column="31">AddComponent</name></name><argument_list pos:line="1900" pos:column="43">(<argument><expr><name pos:line="1900" pos:column="44">b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <return pos:line="1903" pos:column="13">return <expr><name pos:line="1903" pos:column="20">newExpression</name></expr>;</return>
        }</block></function>
        <cpp:endregion pos:line="1905" pos:column="9">#<cpp:directive pos:line="1905" pos:column="10">endregion</cpp:directive> utilities</cpp:endregion>
    }</block></class>
}</block></namespace></unit>
