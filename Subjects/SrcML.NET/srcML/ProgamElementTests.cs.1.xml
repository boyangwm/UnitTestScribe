<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data.Test\ProgamElementTests.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2014 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Patrick Francis (ABB Group) - initial API, implementation, &amp; documentation
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="13" pos:column="1">using <name pos:line="13" pos:column="7">System</name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Collections</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">Generic</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Linq</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Text</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Threading</name><op:operator pos:line="17" pos:column="23">.</op:operator><name pos:line="17" pos:column="24">Tasks</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">ABB</name><op:operator pos:line="18" pos:column="10">.</op:operator><name pos:line="18" pos:column="11">SrcML</name><op:operator pos:line="18" pos:column="16">.</op:operator><name pos:line="18" pos:column="17">Test</name><op:operator pos:line="18" pos:column="21">.</op:operator><name pos:line="18" pos:column="22">Utilities</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">NUnit</name><op:operator pos:line="19" pos:column="12">.</op:operator><name pos:line="19" pos:column="13">Framework</name></name>;</using>

<namespace pos:line="21" pos:column="1">namespace <name><name pos:line="21" pos:column="11">ABB</name><op:operator pos:line="21" pos:column="14">.</op:operator><name pos:line="21" pos:column="15">SrcML</name><op:operator pos:line="21" pos:column="20">.</op:operator><name pos:line="21" pos:column="21">Data</name><op:operator pos:line="21" pos:column="25">.</op:operator><name pos:line="21" pos:column="26">Test</name></name> <block pos:line="21" pos:column="31">{
    <class><attribute pos:line="22" pos:column="5">[<expr><name pos:line="22" pos:column="6">TestFixture</name></expr>]</attribute>
    <attribute pos:line="23" pos:column="5">[<expr><call><name pos:line="23" pos:column="6">Category</name><argument_list pos:line="23" pos:column="14">(<argument><expr><lit:literal type="string" pos:line="23" pos:column="15">"Build"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="24" pos:column="5">public</specifier> class <name pos:line="24" pos:column="18">ProgamElementTests</name> <block pos:line="24" pos:column="37">{
        <decl_stmt><decl><type><specifier pos:line="25" pos:column="9">private</specifier> <name><name pos:line="25" pos:column="17">Dictionary</name><argument_list pos:line="25" pos:column="27">&lt;<argument><name pos:line="25" pos:column="28">Language</name></argument>, <argument><name pos:line="25" pos:column="38">AbstractCodeParser</name></argument>&gt;</argument_list></name></type> <name pos:line="25" pos:column="58">codeParsers</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="26" pos:column="9">private</specifier> <name><name pos:line="26" pos:column="17">Dictionary</name><argument_list pos:line="26" pos:column="27">&lt;<argument><name pos:line="26" pos:column="28">Language</name></argument>, <argument><name pos:line="26" pos:column="38">SrcMLFileUnitSetup</name></argument>&gt;</argument_list></name></type> <name pos:line="26" pos:column="58">fileSetup</name></decl>;</decl_stmt>

        <function><type><attribute pos:line="28" pos:column="9">[<expr><name pos:line="28" pos:column="10">TestFixtureSetUp</name></expr>]</attribute>
        <specifier pos:line="29" pos:column="9">public</specifier> <name pos:line="29" pos:column="16">void</name></type> <name pos:line="29" pos:column="21">ClassSetup</name><parameter_list pos:line="29" pos:column="31">()</parameter_list> <block pos:line="29" pos:column="34">{
            <expr_stmt><expr><name pos:line="30" pos:column="13">codeParsers</name> <op:operator pos:line="30" pos:column="25">=</op:operator> <op:operator pos:line="30" pos:column="27">new</op:operator> <call><name><name pos:line="30" pos:column="31">Dictionary</name><argument_list pos:line="30" pos:column="41">&lt;<argument><name pos:line="30" pos:column="42">Language</name></argument>, <argument><name pos:line="30" pos:column="52">AbstractCodeParser</name></argument>&gt;</argument_list></name><argument_list pos:line="30" pos:column="71">()</argument_list></call> <block pos:line="30" pos:column="74">{
                <expr><block pos:line="31" pos:column="17">{<expr><name><name pos:line="31" pos:column="18">Language</name><op:operator pos:line="31" pos:column="26">.</op:operator><name pos:line="31" pos:column="27">CPlusPlus</name></name></expr><op:operator pos:line="31" pos:column="36">,</op:operator> <expr><op:operator pos:line="31" pos:column="38">new</op:operator> <call><name pos:line="31" pos:column="42">CPlusPlusCodeParser</name><argument_list pos:line="31" pos:column="61">()</argument_list></call></expr>}</block></expr><op:operator pos:line="31" pos:column="64">,</op:operator>
                <expr><block pos:line="32" pos:column="17">{<expr><name><name pos:line="32" pos:column="18">Language</name><op:operator pos:line="32" pos:column="26">.</op:operator><name pos:line="32" pos:column="27">CSharp</name></name></expr><op:operator pos:line="32" pos:column="33">,</op:operator> <expr><op:operator pos:line="32" pos:column="35">new</op:operator> <call><name pos:line="32" pos:column="39">CSharpCodeParser</name><argument_list pos:line="32" pos:column="55">()</argument_list></call></expr>}</block></expr><op:operator pos:line="32" pos:column="58">,</op:operator>
                <expr><block pos:line="33" pos:column="17">{<expr><name><name pos:line="33" pos:column="18">Language</name><op:operator pos:line="33" pos:column="26">.</op:operator><name pos:line="33" pos:column="27">Java</name></name></expr><op:operator pos:line="33" pos:column="31">,</op:operator> <expr><op:operator pos:line="33" pos:column="33">new</op:operator> <call><name pos:line="33" pos:column="37">JavaCodeParser</name><argument_list pos:line="33" pos:column="51">()</argument_list></call></expr>}</block></expr>
            }</block></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="35" pos:column="13">fileSetup</name> <op:operator pos:line="35" pos:column="23">=</op:operator> <op:operator pos:line="35" pos:column="25">new</op:operator> <call><name><name pos:line="35" pos:column="29">Dictionary</name><argument_list pos:line="35" pos:column="39">&lt;<argument><name pos:line="35" pos:column="40">Language</name></argument>, <argument><name pos:line="35" pos:column="50">SrcMLFileUnitSetup</name></argument>&gt;</argument_list></name><argument_list pos:line="35" pos:column="69">()</argument_list></call> <block pos:line="35" pos:column="72">{
                <expr><block pos:line="36" pos:column="17">{<expr><name><name pos:line="36" pos:column="18">Language</name><op:operator pos:line="36" pos:column="26">.</op:operator><name pos:line="36" pos:column="27">CPlusPlus</name></name></expr><op:operator pos:line="36" pos:column="36">,</op:operator> <expr><op:operator pos:line="36" pos:column="38">new</op:operator> <call><name pos:line="36" pos:column="42">SrcMLFileUnitSetup</name><argument_list pos:line="36" pos:column="60">(<argument><expr><name><name pos:line="36" pos:column="61">Language</name><op:operator pos:line="36" pos:column="69">.</op:operator><name pos:line="36" pos:column="70">CPlusPlus</name></name></expr></argument>)</argument_list></call></expr>}</block></expr><op:operator pos:line="36" pos:column="81">,</op:operator>
                <expr><block pos:line="37" pos:column="17">{<expr><name><name pos:line="37" pos:column="18">Language</name><op:operator pos:line="37" pos:column="26">.</op:operator><name pos:line="37" pos:column="27">CSharp</name></name></expr><op:operator pos:line="37" pos:column="33">,</op:operator> <expr><op:operator pos:line="37" pos:column="35">new</op:operator> <call><name pos:line="37" pos:column="39">SrcMLFileUnitSetup</name><argument_list pos:line="37" pos:column="57">(<argument><expr><name><name pos:line="37" pos:column="58">Language</name><op:operator pos:line="37" pos:column="66">.</op:operator><name pos:line="37" pos:column="67">CSharp</name></name></expr></argument>)</argument_list></call></expr>}</block></expr><op:operator pos:line="37" pos:column="75">,</op:operator>
                <expr><block pos:line="38" pos:column="17">{<expr><name><name pos:line="38" pos:column="18">Language</name><op:operator pos:line="38" pos:column="26">.</op:operator><name pos:line="38" pos:column="27">Java</name></name></expr><op:operator pos:line="38" pos:column="31">,</op:operator> <expr><op:operator pos:line="38" pos:column="33">new</op:operator> <call><name pos:line="38" pos:column="37">SrcMLFileUnitSetup</name><argument_list pos:line="38" pos:column="55">(<argument><expr><name><name pos:line="38" pos:column="56">Language</name><op:operator pos:line="38" pos:column="64">.</op:operator><name pos:line="38" pos:column="65">Java</name></name></expr></argument>)</argument_list></call></expr>}</block></expr>
            }</block></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="42" pos:column="9">[<expr><name pos:line="42" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="43" pos:column="9">public</specifier> <name pos:line="43" pos:column="16">void</name></type> <name pos:line="43" pos:column="21">TestSiblingsBeforeSelf</name><parameter_list pos:line="43" pos:column="43">()</parameter_list> <block pos:line="43" pos:column="46">{
            <decl_stmt><decl><type><name pos:line="44" pos:column="13">var</name></type> <name pos:line="44" pos:column="17">a</name> <init pos:line="44" pos:column="19">= <expr><op:operator pos:line="44" pos:column="21">new</op:operator> <call><name pos:line="44" pos:column="25">VariableUse</name><argument_list pos:line="44" pos:column="36">()</argument_list></call> <block pos:line="44" pos:column="39">{<expr><name pos:line="44" pos:column="40">Name</name> <op:operator pos:line="44" pos:column="45">=</op:operator> <lit:literal type="string" pos:line="44" pos:column="47">"a"</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="45" pos:column="13">var</name></type> <name pos:line="45" pos:column="17">plus</name> <init pos:line="45" pos:column="22">= <expr><op:operator pos:line="45" pos:column="24">new</op:operator> <call><name pos:line="45" pos:column="28">OperatorUse</name><argument_list pos:line="45" pos:column="39">()</argument_list></call> <block pos:line="45" pos:column="42">{<expr><name pos:line="45" pos:column="43">Text</name> <op:operator pos:line="45" pos:column="48">=</op:operator> <lit:literal type="string" pos:line="45" pos:column="50">"+"</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="46" pos:column="13">var</name></type> <name pos:line="46" pos:column="17">foo</name> <init pos:line="46" pos:column="21">= <expr><op:operator pos:line="46" pos:column="23">new</op:operator> <call><name pos:line="46" pos:column="27">VariableUse</name><argument_list pos:line="46" pos:column="38">()</argument_list></call> <block pos:line="46" pos:column="41">{<expr><name pos:line="46" pos:column="42">Name</name> <op:operator pos:line="46" pos:column="47">=</op:operator> <lit:literal type="string" pos:line="46" pos:column="49">"foo"</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="47" pos:column="13">var</name></type> <name pos:line="47" pos:column="17">times</name> <init pos:line="47" pos:column="23">= <expr><op:operator pos:line="47" pos:column="25">new</op:operator> <call><name pos:line="47" pos:column="29">OperatorUse</name><argument_list pos:line="47" pos:column="40">()</argument_list></call> <block pos:line="47" pos:column="43">{<expr><name pos:line="47" pos:column="44">Text</name> <op:operator pos:line="47" pos:column="49">=</op:operator> <lit:literal type="string" pos:line="47" pos:column="51">"*"</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="48" pos:column="13">var</name></type> <name pos:line="48" pos:column="17">b</name> <init pos:line="48" pos:column="19">= <expr><op:operator pos:line="48" pos:column="21">new</op:operator> <call><name pos:line="48" pos:column="25">VariableUse</name><argument_list pos:line="48" pos:column="36">()</argument_list></call> <block pos:line="48" pos:column="39">{<expr><name pos:line="48" pos:column="40">Name</name> <op:operator pos:line="48" pos:column="45">=</op:operator> <lit:literal type="string" pos:line="48" pos:column="47">"b"</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="49" pos:column="13">var</name></type> <name pos:line="49" pos:column="17">exp</name> <init pos:line="49" pos:column="21">= <expr><op:operator pos:line="49" pos:column="23">new</op:operator> <call><name pos:line="49" pos:column="27">Expression</name><argument_list pos:line="49" pos:column="37">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="50" pos:column="13">exp</name><op:operator pos:line="50" pos:column="16">.</op:operator><name pos:line="50" pos:column="17">AddComponents</name></name><argument_list pos:line="50" pos:column="30">(<argument><expr><op:operator pos:line="50" pos:column="31">new</op:operator> <name><name pos:line="50" pos:column="35">Expression</name><index pos:line="50" pos:column="45">[]</index></name> <block pos:line="50" pos:column="48">{<expr><name pos:line="50" pos:column="49">a</name></expr><op:operator pos:line="50" pos:column="50">,</op:operator> <expr><name pos:line="50" pos:column="52">plus</name></expr><op:operator pos:line="50" pos:column="56">,</op:operator> <expr><name pos:line="50" pos:column="58">foo</name></expr><op:operator pos:line="50" pos:column="61">,</op:operator> <expr><name pos:line="50" pos:column="63">times</name></expr><op:operator pos:line="50" pos:column="68">,</op:operator> <expr><name pos:line="50" pos:column="70">b</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="52" pos:column="13">var</name></type> <name pos:line="52" pos:column="17">fooSiblings</name> <init pos:line="52" pos:column="29">= <expr><call><name><name pos:line="52" pos:column="31">foo</name><op:operator pos:line="52" pos:column="34">.</op:operator><name pos:line="52" pos:column="35">GetSiblingsBeforeSelf</name></name><argument_list pos:line="52" pos:column="56">()</argument_list></call><op:operator pos:line="52" pos:column="58">.</op:operator><call><name pos:line="52" pos:column="59">ToList</name><argument_list pos:line="52" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="53" pos:column="13">Assert</name><op:operator pos:line="53" pos:column="19">.</op:operator><name pos:line="53" pos:column="20">AreEqual</name></name><argument_list pos:line="53" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="53" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="53" pos:column="32">fooSiblings</name><op:operator pos:line="53" pos:column="43">.</op:operator><name pos:line="53" pos:column="44">Count</name></name><argument_list pos:line="53" pos:column="49">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="54" pos:column="13">Assert</name><op:operator pos:line="54" pos:column="19">.</op:operator><name pos:line="54" pos:column="20">AreSame</name></name><argument_list pos:line="54" pos:column="27">(<argument><expr><name pos:line="54" pos:column="28">a</name></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="31">fooSiblings</name><index pos:line="54" pos:column="42">[<expr><lit:literal type="number" pos:line="54" pos:column="43">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="55" pos:column="13">Assert</name><op:operator pos:line="55" pos:column="19">.</op:operator><name pos:line="55" pos:column="20">AreSame</name></name><argument_list pos:line="55" pos:column="27">(<argument><expr><name pos:line="55" pos:column="28">plus</name></expr></argument>, <argument><expr><name><name pos:line="55" pos:column="34">fooSiblings</name><index pos:line="55" pos:column="45">[<expr><lit:literal type="number" pos:line="55" pos:column="46">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="57" pos:column="13">var</name></type> <name pos:line="57" pos:column="17">aSiblings</name> <init pos:line="57" pos:column="27">= <expr><call><name><name pos:line="57" pos:column="29">a</name><op:operator pos:line="57" pos:column="30">.</op:operator><name pos:line="57" pos:column="31">GetSiblingsBeforeSelf</name></name><argument_list pos:line="57" pos:column="52">()</argument_list></call><op:operator pos:line="57" pos:column="54">.</op:operator><call><name pos:line="57" pos:column="55">ToList</name><argument_list pos:line="57" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="58" pos:column="13">Assert</name><op:operator pos:line="58" pos:column="19">.</op:operator><name pos:line="58" pos:column="20">AreEqual</name></name><argument_list pos:line="58" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="58" pos:column="29">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="58" pos:column="32">aSiblings</name><op:operator pos:line="58" pos:column="41">.</op:operator><name pos:line="58" pos:column="42">Count</name></name><argument_list pos:line="58" pos:column="47">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="61" pos:column="9">[<expr><name pos:line="61" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="62" pos:column="9">public</specifier> <name pos:line="62" pos:column="16">void</name></type> <name pos:line="62" pos:column="21">TestSiblingsBeforeSelf_MissingChild</name><parameter_list pos:line="62" pos:column="56">()</parameter_list> <block pos:line="62" pos:column="59">{
            <decl_stmt><decl><type><name pos:line="63" pos:column="13">var</name></type> <name pos:line="63" pos:column="17">a</name> <init pos:line="63" pos:column="19">= <expr><op:operator pos:line="63" pos:column="21">new</op:operator> <call><name pos:line="63" pos:column="25">VariableUse</name><argument_list pos:line="63" pos:column="36">()</argument_list></call> <block pos:line="63" pos:column="39">{<expr><name pos:line="63" pos:column="40">Name</name> <op:operator pos:line="63" pos:column="45">=</op:operator> <lit:literal type="string" pos:line="63" pos:column="47">"a"</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="64" pos:column="13">var</name></type> <name pos:line="64" pos:column="17">plus</name> <init pos:line="64" pos:column="22">= <expr><op:operator pos:line="64" pos:column="24">new</op:operator> <call><name pos:line="64" pos:column="28">OperatorUse</name><argument_list pos:line="64" pos:column="39">()</argument_list></call> <block pos:line="64" pos:column="42">{<expr><name pos:line="64" pos:column="43">Text</name> <op:operator pos:line="64" pos:column="48">=</op:operator> <lit:literal type="string" pos:line="64" pos:column="50">"+"</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="65" pos:column="13">var</name></type> <name pos:line="65" pos:column="17">foo</name> <init pos:line="65" pos:column="21">= <expr><op:operator pos:line="65" pos:column="23">new</op:operator> <call><name pos:line="65" pos:column="27">VariableUse</name><argument_list pos:line="65" pos:column="38">()</argument_list></call> <block pos:line="65" pos:column="41">{<expr><name pos:line="65" pos:column="42">Name</name> <op:operator pos:line="65" pos:column="47">=</op:operator> <lit:literal type="string" pos:line="65" pos:column="49">"foo"</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="66" pos:column="13">var</name></type> <name pos:line="66" pos:column="17">times</name> <init pos:line="66" pos:column="23">= <expr><op:operator pos:line="66" pos:column="25">new</op:operator> <call><name pos:line="66" pos:column="29">OperatorUse</name><argument_list pos:line="66" pos:column="40">()</argument_list></call> <block pos:line="66" pos:column="43">{<expr><name pos:line="66" pos:column="44">Text</name> <op:operator pos:line="66" pos:column="49">=</op:operator> <lit:literal type="string" pos:line="66" pos:column="51">"*"</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="67" pos:column="13">var</name></type> <name pos:line="67" pos:column="17">b</name> <init pos:line="67" pos:column="19">= <expr><op:operator pos:line="67" pos:column="21">new</op:operator> <call><name pos:line="67" pos:column="25">VariableUse</name><argument_list pos:line="67" pos:column="36">()</argument_list></call> <block pos:line="67" pos:column="39">{<expr><name pos:line="67" pos:column="40">Name</name> <op:operator pos:line="67" pos:column="45">=</op:operator> <lit:literal type="string" pos:line="67" pos:column="47">"b"</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="68" pos:column="13">var</name></type> <name pos:line="68" pos:column="17">exp</name> <init pos:line="68" pos:column="21">= <expr><op:operator pos:line="68" pos:column="23">new</op:operator> <call><name pos:line="68" pos:column="27">Expression</name><argument_list pos:line="68" pos:column="37">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="69" pos:column="13">exp</name><op:operator pos:line="69" pos:column="16">.</op:operator><name pos:line="69" pos:column="17">AddComponents</name></name><argument_list pos:line="69" pos:column="30">(<argument><expr><op:operator pos:line="69" pos:column="31">new</op:operator> <name><name pos:line="69" pos:column="35">Expression</name><index pos:line="69" pos:column="45">[]</index></name> <block pos:line="69" pos:column="48">{<expr><name pos:line="69" pos:column="49">a</name></expr><op:operator pos:line="69" pos:column="50">,</op:operator> <expr><name pos:line="69" pos:column="52">plus</name></expr><op:operator pos:line="69" pos:column="56">,</op:operator> <expr><name pos:line="69" pos:column="58">foo</name></expr><op:operator pos:line="69" pos:column="61">,</op:operator> <expr><name pos:line="69" pos:column="63">times</name></expr><op:operator pos:line="69" pos:column="68">,</op:operator> <expr><name pos:line="69" pos:column="70">b</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="71" pos:column="13">var</name></type> <name pos:line="71" pos:column="17">dot</name> <init pos:line="71" pos:column="21">= <expr><op:operator pos:line="71" pos:column="23">new</op:operator> <name pos:line="71" pos:column="27">OperatorUse</name> <block pos:line="71" pos:column="39">{
                <expr><name pos:line="72" pos:column="17">Text</name> <op:operator pos:line="72" pos:column="22">=</op:operator> <lit:literal type="string" pos:line="72" pos:column="24">"."</lit:literal></expr>,
                <expr><name pos:line="73" pos:column="17">ParentExpression</name> <op:operator pos:line="73" pos:column="34">=</op:operator> <name pos:line="73" pos:column="36">exp</name></expr>
            }</block></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="76" pos:column="13">Assert</name><op:operator pos:line="76" pos:column="19">.</op:operator><name><name pos:line="76" pos:column="20">Throws</name><argument_list pos:line="76" pos:column="26">&lt;<argument><name pos:line="76" pos:column="27">InvalidOperationException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="76" pos:column="53">(<argument><expr><lambda><parameter_list pos:line="76" pos:column="54">()</parameter_list> <op:operator pos:line="76" pos:column="57">=&gt;</op:operator> <call><name><name pos:line="76" pos:column="60">dot</name><op:operator pos:line="76" pos:column="63">.</op:operator><name pos:line="76" pos:column="64">GetSiblingsBeforeSelf</name></name><argument_list pos:line="76" pos:column="85">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="79" pos:column="9">[<expr><name pos:line="79" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="80" pos:column="9">public</specifier> <name pos:line="80" pos:column="16">void</name></type> <name pos:line="80" pos:column="21">TestSiblingsAfterSelf</name><parameter_list pos:line="80" pos:column="42">()</parameter_list> <block pos:line="80" pos:column="45">{
            <decl_stmt><decl><type><name pos:line="81" pos:column="13">var</name></type> <name pos:line="81" pos:column="17">a</name> <init pos:line="81" pos:column="19">= <expr><op:operator pos:line="81" pos:column="21">new</op:operator> <call><name pos:line="81" pos:column="25">VariableUse</name><argument_list pos:line="81" pos:column="36">()</argument_list></call> <block pos:line="81" pos:column="39">{<expr><name pos:line="81" pos:column="40">Name</name> <op:operator pos:line="81" pos:column="45">=</op:operator> <lit:literal type="string" pos:line="81" pos:column="47">"a"</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="82" pos:column="13">var</name></type> <name pos:line="82" pos:column="17">plus</name> <init pos:line="82" pos:column="22">= <expr><op:operator pos:line="82" pos:column="24">new</op:operator> <call><name pos:line="82" pos:column="28">OperatorUse</name><argument_list pos:line="82" pos:column="39">()</argument_list></call> <block pos:line="82" pos:column="42">{<expr><name pos:line="82" pos:column="43">Text</name> <op:operator pos:line="82" pos:column="48">=</op:operator> <lit:literal type="string" pos:line="82" pos:column="50">"+"</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="83" pos:column="13">var</name></type> <name pos:line="83" pos:column="17">foo</name> <init pos:line="83" pos:column="21">= <expr><op:operator pos:line="83" pos:column="23">new</op:operator> <call><name pos:line="83" pos:column="27">VariableUse</name><argument_list pos:line="83" pos:column="38">()</argument_list></call> <block pos:line="83" pos:column="41">{<expr><name pos:line="83" pos:column="42">Name</name> <op:operator pos:line="83" pos:column="47">=</op:operator> <lit:literal type="string" pos:line="83" pos:column="49">"foo"</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="84" pos:column="13">var</name></type> <name pos:line="84" pos:column="17">times</name> <init pos:line="84" pos:column="23">= <expr><op:operator pos:line="84" pos:column="25">new</op:operator> <call><name pos:line="84" pos:column="29">OperatorUse</name><argument_list pos:line="84" pos:column="40">()</argument_list></call> <block pos:line="84" pos:column="43">{<expr><name pos:line="84" pos:column="44">Text</name> <op:operator pos:line="84" pos:column="49">=</op:operator> <lit:literal type="string" pos:line="84" pos:column="51">"*"</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="85" pos:column="13">var</name></type> <name pos:line="85" pos:column="17">b</name> <init pos:line="85" pos:column="19">= <expr><op:operator pos:line="85" pos:column="21">new</op:operator> <call><name pos:line="85" pos:column="25">VariableUse</name><argument_list pos:line="85" pos:column="36">()</argument_list></call> <block pos:line="85" pos:column="39">{<expr><name pos:line="85" pos:column="40">Name</name> <op:operator pos:line="85" pos:column="45">=</op:operator> <lit:literal type="string" pos:line="85" pos:column="47">"b"</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="86" pos:column="13">var</name></type> <name pos:line="86" pos:column="17">exp</name> <init pos:line="86" pos:column="21">= <expr><op:operator pos:line="86" pos:column="23">new</op:operator> <call><name pos:line="86" pos:column="27">Expression</name><argument_list pos:line="86" pos:column="37">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="87" pos:column="13">exp</name><op:operator pos:line="87" pos:column="16">.</op:operator><name pos:line="87" pos:column="17">AddComponents</name></name><argument_list pos:line="87" pos:column="30">(<argument><expr><op:operator pos:line="87" pos:column="31">new</op:operator> <name><name pos:line="87" pos:column="35">Expression</name><index pos:line="87" pos:column="45">[]</index></name> <block pos:line="87" pos:column="48">{<expr><name pos:line="87" pos:column="49">a</name></expr><op:operator pos:line="87" pos:column="50">,</op:operator> <expr><name pos:line="87" pos:column="52">plus</name></expr><op:operator pos:line="87" pos:column="56">,</op:operator> <expr><name pos:line="87" pos:column="58">foo</name></expr><op:operator pos:line="87" pos:column="61">,</op:operator> <expr><name pos:line="87" pos:column="63">times</name></expr><op:operator pos:line="87" pos:column="68">,</op:operator> <expr><name pos:line="87" pos:column="70">b</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="89" pos:column="13">var</name></type> <name pos:line="89" pos:column="17">plusSiblings</name> <init pos:line="89" pos:column="30">= <expr><call><name><name pos:line="89" pos:column="32">plus</name><op:operator pos:line="89" pos:column="36">.</op:operator><name pos:line="89" pos:column="37">GetSiblingsAfterSelf</name></name><argument_list pos:line="89" pos:column="57">()</argument_list></call><op:operator pos:line="89" pos:column="59">.</op:operator><call><name pos:line="89" pos:column="60">ToList</name><argument_list pos:line="89" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="90" pos:column="13">Assert</name><op:operator pos:line="90" pos:column="19">.</op:operator><name pos:line="90" pos:column="20">AreEqual</name></name><argument_list pos:line="90" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="90" pos:column="29">3</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="90" pos:column="32">plusSiblings</name><op:operator pos:line="90" pos:column="44">.</op:operator><name pos:line="90" pos:column="45">Count</name></name><argument_list pos:line="90" pos:column="50">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="91" pos:column="13">Assert</name><op:operator pos:line="91" pos:column="19">.</op:operator><name pos:line="91" pos:column="20">AreSame</name></name><argument_list pos:line="91" pos:column="27">(<argument><expr><name pos:line="91" pos:column="28">foo</name></expr></argument>, <argument><expr><name><name pos:line="91" pos:column="33">plusSiblings</name><index pos:line="91" pos:column="45">[<expr><lit:literal type="number" pos:line="91" pos:column="46">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="92" pos:column="13">Assert</name><op:operator pos:line="92" pos:column="19">.</op:operator><name pos:line="92" pos:column="20">AreSame</name></name><argument_list pos:line="92" pos:column="27">(<argument><expr><name pos:line="92" pos:column="28">times</name></expr></argument>, <argument><expr><name><name pos:line="92" pos:column="35">plusSiblings</name><index pos:line="92" pos:column="47">[<expr><lit:literal type="number" pos:line="92" pos:column="48">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="93" pos:column="13">Assert</name><op:operator pos:line="93" pos:column="19">.</op:operator><name pos:line="93" pos:column="20">AreSame</name></name><argument_list pos:line="93" pos:column="27">(<argument><expr><name pos:line="93" pos:column="28">b</name></expr></argument>, <argument><expr><name><name pos:line="93" pos:column="31">plusSiblings</name><index pos:line="93" pos:column="43">[<expr><lit:literal type="number" pos:line="93" pos:column="44">2</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="95" pos:column="13">var</name></type> <name pos:line="95" pos:column="17">bSiblings</name> <init pos:line="95" pos:column="27">= <expr><call><name><name pos:line="95" pos:column="29">b</name><op:operator pos:line="95" pos:column="30">.</op:operator><name pos:line="95" pos:column="31">GetSiblingsAfterSelf</name></name><argument_list pos:line="95" pos:column="51">()</argument_list></call><op:operator pos:line="95" pos:column="53">.</op:operator><call><name pos:line="95" pos:column="54">ToList</name><argument_list pos:line="95" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="96" pos:column="13">Assert</name><op:operator pos:line="96" pos:column="19">.</op:operator><name pos:line="96" pos:column="20">AreEqual</name></name><argument_list pos:line="96" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="96" pos:column="29">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="96" pos:column="32">bSiblings</name><op:operator pos:line="96" pos:column="41">.</op:operator><name pos:line="96" pos:column="42">Count</name></name><argument_list pos:line="96" pos:column="47">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="99" pos:column="9">[<expr><name pos:line="99" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="100" pos:column="9">public</specifier> <name pos:line="100" pos:column="16">void</name></type> <name pos:line="100" pos:column="21">TestSiblingsAfterSelf_MissingChild</name><parameter_list pos:line="100" pos:column="55">()</parameter_list> <block pos:line="100" pos:column="58">{
            <decl_stmt><decl><type><name pos:line="101" pos:column="13">var</name></type> <name pos:line="101" pos:column="17">a</name> <init pos:line="101" pos:column="19">= <expr><op:operator pos:line="101" pos:column="21">new</op:operator> <call><name pos:line="101" pos:column="25">VariableUse</name><argument_list pos:line="101" pos:column="36">()</argument_list></call> <block pos:line="101" pos:column="39">{<expr><name pos:line="101" pos:column="40">Name</name> <op:operator pos:line="101" pos:column="45">=</op:operator> <lit:literal type="string" pos:line="101" pos:column="47">"a"</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="102" pos:column="13">var</name></type> <name pos:line="102" pos:column="17">plus</name> <init pos:line="102" pos:column="22">= <expr><op:operator pos:line="102" pos:column="24">new</op:operator> <call><name pos:line="102" pos:column="28">OperatorUse</name><argument_list pos:line="102" pos:column="39">()</argument_list></call> <block pos:line="102" pos:column="42">{<expr><name pos:line="102" pos:column="43">Text</name> <op:operator pos:line="102" pos:column="48">=</op:operator> <lit:literal type="string" pos:line="102" pos:column="50">"+"</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="103" pos:column="13">var</name></type> <name pos:line="103" pos:column="17">foo</name> <init pos:line="103" pos:column="21">= <expr><op:operator pos:line="103" pos:column="23">new</op:operator> <call><name pos:line="103" pos:column="27">VariableUse</name><argument_list pos:line="103" pos:column="38">()</argument_list></call> <block pos:line="103" pos:column="41">{<expr><name pos:line="103" pos:column="42">Name</name> <op:operator pos:line="103" pos:column="47">=</op:operator> <lit:literal type="string" pos:line="103" pos:column="49">"foo"</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="104" pos:column="13">var</name></type> <name pos:line="104" pos:column="17">times</name> <init pos:line="104" pos:column="23">= <expr><op:operator pos:line="104" pos:column="25">new</op:operator> <call><name pos:line="104" pos:column="29">OperatorUse</name><argument_list pos:line="104" pos:column="40">()</argument_list></call> <block pos:line="104" pos:column="43">{<expr><name pos:line="104" pos:column="44">Text</name> <op:operator pos:line="104" pos:column="49">=</op:operator> <lit:literal type="string" pos:line="104" pos:column="51">"*"</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="105" pos:column="13">var</name></type> <name pos:line="105" pos:column="17">b</name> <init pos:line="105" pos:column="19">= <expr><op:operator pos:line="105" pos:column="21">new</op:operator> <call><name pos:line="105" pos:column="25">VariableUse</name><argument_list pos:line="105" pos:column="36">()</argument_list></call> <block pos:line="105" pos:column="39">{<expr><name pos:line="105" pos:column="40">Name</name> <op:operator pos:line="105" pos:column="45">=</op:operator> <lit:literal type="string" pos:line="105" pos:column="47">"b"</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="106" pos:column="13">var</name></type> <name pos:line="106" pos:column="17">exp</name> <init pos:line="106" pos:column="21">= <expr><op:operator pos:line="106" pos:column="23">new</op:operator> <call><name pos:line="106" pos:column="27">Expression</name><argument_list pos:line="106" pos:column="37">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="107" pos:column="13">exp</name><op:operator pos:line="107" pos:column="16">.</op:operator><name pos:line="107" pos:column="17">AddComponents</name></name><argument_list pos:line="107" pos:column="30">(<argument><expr><op:operator pos:line="107" pos:column="31">new</op:operator> <name><name pos:line="107" pos:column="35">Expression</name><index pos:line="107" pos:column="45">[]</index></name> <block pos:line="107" pos:column="48">{<expr><name pos:line="107" pos:column="49">a</name></expr><op:operator pos:line="107" pos:column="50">,</op:operator> <expr><name pos:line="107" pos:column="52">plus</name></expr><op:operator pos:line="107" pos:column="56">,</op:operator> <expr><name pos:line="107" pos:column="58">foo</name></expr><op:operator pos:line="107" pos:column="61">,</op:operator> <expr><name pos:line="107" pos:column="63">times</name></expr><op:operator pos:line="107" pos:column="68">,</op:operator> <expr><name pos:line="107" pos:column="70">b</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="109" pos:column="13">var</name></type> <name pos:line="109" pos:column="17">dot</name> <init pos:line="109" pos:column="21">= <expr><op:operator pos:line="109" pos:column="23">new</op:operator> <name pos:line="109" pos:column="27">OperatorUse</name> <block pos:line="109" pos:column="39">{
                <expr><name pos:line="110" pos:column="17">Text</name> <op:operator pos:line="110" pos:column="22">=</op:operator> <lit:literal type="string" pos:line="110" pos:column="24">"."</lit:literal></expr>,
                <expr><name pos:line="111" pos:column="17">ParentExpression</name> <op:operator pos:line="111" pos:column="34">=</op:operator> <name pos:line="111" pos:column="36">exp</name></expr>
            }</block></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="114" pos:column="13">Assert</name><op:operator pos:line="114" pos:column="19">.</op:operator><name><name pos:line="114" pos:column="20">Throws</name><argument_list pos:line="114" pos:column="26">&lt;<argument><name pos:line="114" pos:column="27">InvalidOperationException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="114" pos:column="53">(<argument><expr><lambda><parameter_list pos:line="114" pos:column="54">()</parameter_list> <op:operator pos:line="114" pos:column="57">=&gt;</op:operator> <call><name><name pos:line="114" pos:column="60">dot</name><op:operator pos:line="114" pos:column="63">.</op:operator><name pos:line="114" pos:column="64">GetSiblingsAfterSelf</name></name><argument_list pos:line="114" pos:column="84">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="117" pos:column="9">[<expr><call><name pos:line="117" pos:column="10">TestCase</name><argument_list pos:line="117" pos:column="18">(<argument><expr><name><name pos:line="117" pos:column="19">Language</name><op:operator pos:line="117" pos:column="27">.</op:operator><name pos:line="117" pos:column="28">CPlusPlus</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <attribute pos:line="118" pos:column="9">[<expr><call><name pos:line="118" pos:column="10">TestCase</name><argument_list pos:line="118" pos:column="18">(<argument><expr><name><name pos:line="118" pos:column="19">Language</name><op:operator pos:line="118" pos:column="27">.</op:operator><name pos:line="118" pos:column="28">CSharp</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <attribute pos:line="119" pos:column="9">[<expr><call><name pos:line="119" pos:column="10">TestCase</name><argument_list pos:line="119" pos:column="18">(<argument><expr><name><name pos:line="119" pos:column="19">Language</name><op:operator pos:line="119" pos:column="27">.</op:operator><name pos:line="119" pos:column="28">Java</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="120" pos:column="9">public</specifier> <name pos:line="120" pos:column="16">void</name></type> <name pos:line="120" pos:column="21">TestGetNamedChildren_Statement</name><parameter_list pos:line="120" pos:column="51">(<param><decl><type><name pos:line="120" pos:column="52">Language</name></type> <name pos:line="120" pos:column="61">lang</name></decl></param>)</parameter_list> <block pos:line="120" pos:column="67">{
            <comment type="line" pos:line="121" pos:column="13">//int foo = 17;</comment>
            <comment type="line" pos:line="122" pos:column="13">//while(bar) {</comment>
            <comment type="line" pos:line="123" pos:column="13">//  MethodCall(foo);</comment>
            <comment type="line" pos:line="124" pos:column="13">//  int foo = 42;</comment>
            <comment type="line" pos:line="125" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="126" pos:column="13">string</name></type> <name pos:line="126" pos:column="20">xml</name> <init pos:line="126" pos:column="24">= <expr><lit:literal type="string" pos:line="126" pos:column="26">@"&lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""1"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""1"" pos:column="&gt;foo&lt;/name&gt; &lt;init pos:line=""1"" pos:column="&gt;= &lt;expr&gt;&lt;lit:literal type=""number"" pos:line=""1"" pos:column=&gt;17&lt;/lit:literal&gt;&lt;/expr&gt;&lt;/init&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
&lt;while pos:line=""2"" pos:column="&gt;while&lt;condition pos:line=""2"" pos:column="&gt;(&lt;expr&gt;&lt;name pos:line=""2"" pos:column="&gt;bar&lt;/name&gt;&lt;/expr&gt;)&lt;/condition&gt; &lt;block pos:line=""2"" pos:column=""&gt;{
  &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name pos:line=""3"" pos:column="&gt;MethodCall&lt;/name&gt;&lt;argument_list pos:line=""3"" pos:column=""&gt;(&lt;argument&gt;&lt;expr&gt;&lt;name pos:line=""3"" pos:column=""&gt;foo&lt;/name&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
  &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""4"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""4"" pos:column="&gt;foo&lt;/name&gt; &lt;init pos:line=""4"" pos:column=""&gt;= &lt;expr&gt;&lt;lit:literal type=""number"" pos:line=""4"" pos:column=&gt;42&lt;/lit:literal&gt;&lt;/expr&gt;&lt;/init&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
}&lt;/block&gt;&lt;/while&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="131" pos:column="13">var</name></type> <name pos:line="131" pos:column="17">xmlElement</name> <init pos:line="131" pos:column="28">= <expr><name><name pos:line="131" pos:column="30">fileSetup</name><index pos:line="131" pos:column="39">[<expr><name pos:line="131" pos:column="40">lang</name></expr>]</index></name><op:operator pos:line="131" pos:column="45">.</op:operator><call><name pos:line="131" pos:column="46">GetFileUnitForXmlSnippet</name><argument_list pos:line="131" pos:column="70">(<argument><expr><name pos:line="131" pos:column="71">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="131" pos:column="76">"test.code"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="133" pos:column="13">var</name></type> <name pos:line="133" pos:column="17">globalScope</name> <init pos:line="133" pos:column="29">= <expr><name><name pos:line="133" pos:column="31">codeParsers</name><index pos:line="133" pos:column="42">[<expr><name pos:line="133" pos:column="43">lang</name></expr>]</index></name><op:operator pos:line="133" pos:column="48">.</op:operator><call><name pos:line="133" pos:column="49">ParseFileUnit</name><argument_list pos:line="133" pos:column="62">(<argument><expr><name pos:line="133" pos:column="63">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="134" pos:column="13">Assert</name><op:operator pos:line="134" pos:column="19">.</op:operator><name pos:line="134" pos:column="20">AreEqual</name></name><argument_list pos:line="134" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="134" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="134" pos:column="32">globalScope</name><op:operator pos:line="134" pos:column="43">.</op:operator><name pos:line="134" pos:column="44">ChildStatements</name><op:operator pos:line="134" pos:column="59">.</op:operator><name pos:line="134" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="136" pos:column="13">var</name></type> <name pos:line="136" pos:column="17">whileStmt</name> <init pos:line="136" pos:column="27">= <expr><call><name><name pos:line="136" pos:column="29">globalScope</name><op:operator pos:line="136" pos:column="40">.</op:operator><name><name pos:line="136" pos:column="41">GetDescendants</name><argument_list pos:line="136" pos:column="55">&lt;<argument><name pos:line="136" pos:column="56">WhileStatement</name></argument>&gt;</argument_list></name></name><argument_list pos:line="136" pos:column="71">()</argument_list></call><op:operator pos:line="136" pos:column="73">.</op:operator><call><name pos:line="136" pos:column="74">First</name><argument_list pos:line="136" pos:column="79">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="137" pos:column="13">Assert</name><op:operator pos:line="137" pos:column="19">.</op:operator><name pos:line="137" pos:column="20">AreEqual</name></name><argument_list pos:line="137" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="137" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="137" pos:column="32">whileStmt</name><op:operator pos:line="137" pos:column="41">.</op:operator><name pos:line="137" pos:column="42">ChildStatements</name><op:operator pos:line="137" pos:column="57">.</op:operator><name pos:line="137" pos:column="58">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="138" pos:column="13">var</name></type> <name pos:line="138" pos:column="17">fooUse</name> <init pos:line="138" pos:column="24">= <expr><name><name pos:line="138" pos:column="26">whileStmt</name><op:operator pos:line="138" pos:column="35">.</op:operator><name pos:line="138" pos:column="36">ChildStatements</name><index pos:line="138" pos:column="51">[<expr><lit:literal type="number" pos:line="138" pos:column="52">0</lit:literal></expr>]</index></name><op:operator pos:line="138" pos:column="54">.</op:operator><call><name><name pos:line="138" pos:column="55">Content</name><op:operator pos:line="138" pos:column="62">.</op:operator><name><name pos:line="138" pos:column="63">GetDescendantsAndSelf</name><argument_list pos:line="138" pos:column="84">&lt;<argument><name pos:line="138" pos:column="85">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="138" pos:column="93">()</argument_list></call><op:operator pos:line="138" pos:column="95">.</op:operator><call><name pos:line="138" pos:column="96">First</name><argument_list pos:line="138" pos:column="101">(<argument><expr><lambda><name pos:line="138" pos:column="102">n</name> <op:operator pos:line="138" pos:column="104">=&gt;</op:operator> <name><name pos:line="138" pos:column="107">n</name><op:operator pos:line="138" pos:column="108">.</op:operator><name pos:line="138" pos:column="109">Name</name></name> <op:operator pos:line="138" pos:column="114">==</op:operator> <lit:literal type="string" pos:line="138" pos:column="117">"foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="139" pos:column="13">var</name></type> <name pos:line="139" pos:column="17">localFoo</name> <init pos:line="139" pos:column="26">= <expr><name><name pos:line="139" pos:column="28">whileStmt</name><op:operator pos:line="139" pos:column="37">.</op:operator><name pos:line="139" pos:column="38">ChildStatements</name><index pos:line="139" pos:column="53">[<expr><lit:literal type="number" pos:line="139" pos:column="54">1</lit:literal></expr>]</index></name><op:operator pos:line="139" pos:column="56">.</op:operator><call><name><name pos:line="139" pos:column="57">Content</name><op:operator pos:line="139" pos:column="64">.</op:operator><name><name pos:line="139" pos:column="65">GetDescendantsAndSelf</name><argument_list pos:line="139" pos:column="86">&lt;<argument><name pos:line="139" pos:column="87">VariableDeclaration</name></argument>&gt;</argument_list></name></name><argument_list pos:line="139" pos:column="107">()</argument_list></call><op:operator pos:line="139" pos:column="109">.</op:operator><call><name pos:line="139" pos:column="110">First</name><argument_list pos:line="139" pos:column="115">(<argument><expr><lambda><name pos:line="139" pos:column="116">v</name> <op:operator pos:line="139" pos:column="118">=&gt;</op:operator> <name><name pos:line="139" pos:column="121">v</name><op:operator pos:line="139" pos:column="122">.</op:operator><name pos:line="139" pos:column="123">Name</name></name> <op:operator pos:line="139" pos:column="128">==</op:operator> <lit:literal type="string" pos:line="139" pos:column="131">"foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="141" pos:column="13">var</name></type> <name pos:line="141" pos:column="17">allChildren</name> <init pos:line="141" pos:column="29">= <expr><call><name><name pos:line="141" pos:column="31">whileStmt</name><op:operator pos:line="141" pos:column="40">.</op:operator><name pos:line="141" pos:column="41">GetNamedChildren</name></name><argument_list pos:line="141" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="141" pos:column="58">"foo"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="141" pos:column="64">.</op:operator><call><name pos:line="141" pos:column="65">ToList</name><argument_list pos:line="141" pos:column="71">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="142" pos:column="13">Assert</name><op:operator pos:line="142" pos:column="19">.</op:operator><name pos:line="142" pos:column="20">AreEqual</name></name><argument_list pos:line="142" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="142" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="142" pos:column="32">allChildren</name><op:operator pos:line="142" pos:column="43">.</op:operator><name pos:line="142" pos:column="44">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="143" pos:column="13">Assert</name><op:operator pos:line="143" pos:column="19">.</op:operator><name pos:line="143" pos:column="20">AreSame</name></name><argument_list pos:line="143" pos:column="27">(<argument><expr><name pos:line="143" pos:column="28">localFoo</name></expr></argument>, <argument><expr><name><name pos:line="143" pos:column="38">allChildren</name><index pos:line="143" pos:column="49">[<expr><lit:literal type="number" pos:line="143" pos:column="50">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="145" pos:column="13">Assert</name><op:operator pos:line="145" pos:column="19">.</op:operator><name pos:line="145" pos:column="20">IsEmpty</name></name><argument_list pos:line="145" pos:column="27">(<argument><expr><call><name><name pos:line="145" pos:column="28">whileStmt</name><op:operator pos:line="145" pos:column="37">.</op:operator><name pos:line="145" pos:column="38">GetNamedChildren</name></name><argument_list pos:line="145" pos:column="54">(<argument><expr><name pos:line="145" pos:column="55">fooUse</name></expr></argument>)</argument_list></call><op:operator pos:line="145" pos:column="62">.</op:operator><call><name pos:line="145" pos:column="63">ToList</name><argument_list pos:line="145" pos:column="69">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="148" pos:column="9">[<expr><call><name pos:line="148" pos:column="10">TestCase</name><argument_list pos:line="148" pos:column="18">(<argument><expr><name><name pos:line="148" pos:column="19">Language</name><op:operator pos:line="148" pos:column="27">.</op:operator><name pos:line="148" pos:column="28">CPlusPlus</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <attribute pos:line="149" pos:column="9">[<expr><call><name pos:line="149" pos:column="10">TestCase</name><argument_list pos:line="149" pos:column="18">(<argument><expr><name><name pos:line="149" pos:column="19">Language</name><op:operator pos:line="149" pos:column="27">.</op:operator><name pos:line="149" pos:column="28">CSharp</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <attribute pos:line="150" pos:column="9">[<expr><call><name pos:line="150" pos:column="10">TestCase</name><argument_list pos:line="150" pos:column="18">(<argument><expr><name><name pos:line="150" pos:column="19">Language</name><op:operator pos:line="150" pos:column="27">.</op:operator><name pos:line="150" pos:column="28">Java</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="151" pos:column="9">public</specifier> <name pos:line="151" pos:column="16">void</name></type> <name pos:line="151" pos:column="21">TestGetNamedChildren_IfStatement</name><parameter_list pos:line="151" pos:column="53">(<param><decl><type><name pos:line="151" pos:column="54">Language</name></type> <name pos:line="151" pos:column="63">lang</name></decl></param>)</parameter_list> <block pos:line="151" pos:column="69">{
            <comment type="line" pos:line="152" pos:column="13">//int foo = 17;</comment>
            <comment type="line" pos:line="153" pos:column="13">//if(bar) {</comment>
            <comment type="line" pos:line="154" pos:column="13">//  int foo = 42;</comment>
            <comment type="line" pos:line="155" pos:column="13">//  MethodCall(foo);</comment>
            <comment type="line" pos:line="156" pos:column="13">//} else {</comment>
            <comment type="line" pos:line="157" pos:column="13">//  MethodCall2(foo);</comment>
            <comment type="line" pos:line="158" pos:column="13">//  int foo = 101;</comment>
            <comment type="line" pos:line="159" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="160" pos:column="13">string</name></type> <name pos:line="160" pos:column="20">xml</name> <init pos:line="160" pos:column="24">= <expr><lit:literal type="string" pos:line="160" pos:column="26">@"&lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""1"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""1"" pos:column="&gt;foo&lt;/name&gt; &lt;init pos:line=""1"" pos:column="&gt;= &lt;expr&gt;&lt;lit:literal type=""number"" pos:line=""1"" pos:column=&gt;17&lt;/lit:literal&gt;&lt;/expr&gt;&lt;/init&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
&lt;if pos:line=""2"" pos:column="&gt;if&lt;condition pos:line=""2"" pos:column="&gt;(&lt;expr&gt;&lt;name pos:line=""2"" pos:column="&gt;bar&lt;/name&gt;&lt;/expr&gt;)&lt;/condition&gt;&lt;then pos:line=""2"" pos:column="&gt; &lt;block pos:line=""2"" pos:column="&gt;{
  &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""3"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""3"" pos:column="&gt;foo&lt;/name&gt; &lt;init pos:line=""3"" pos:column=""&gt;= &lt;expr&gt;&lt;lit:literal type=""number"" pos:line=""3"" pos:column=&gt;42&lt;/lit:literal&gt;&lt;/expr&gt;&lt;/init&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
  &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name pos:line=""4"" pos:column="&gt;MethodCall&lt;/name&gt;&lt;argument_list pos:line=""4"" pos:column=""&gt;(&lt;argument&gt;&lt;expr&gt;&lt;name pos:line=""4"" pos:column=""&gt;foo&lt;/name&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
}&lt;/block&gt;&lt;/then&gt; &lt;else pos:line=""5"" pos:column="&gt;else &lt;block pos:line=""5"" pos:column="&gt;{
  &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name pos:line=""6"" pos:column="&gt;MethodCall2&lt;/name&gt;&lt;argument_list pos:line=""6"" pos:column=""&gt;(&lt;argument&gt;&lt;expr&gt;&lt;name pos:line=""6"" pos:column=""&gt;foo&lt;/name&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
  &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""7"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""7"" pos:column="&gt;foo&lt;/name&gt; &lt;init pos:line=""7"" pos:column=""&gt;= &lt;expr&gt;&lt;lit:literal type=""number"" pos:line=""7"" pos:column=&gt;101&lt;/lit:literal&gt;&lt;/expr&gt;&lt;/init&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
}&lt;/block&gt;&lt;/else&gt;&lt;/if&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="168" pos:column="13">var</name></type> <name pos:line="168" pos:column="17">xmlElement</name> <init pos:line="168" pos:column="28">= <expr><name><name pos:line="168" pos:column="30">fileSetup</name><index pos:line="168" pos:column="39">[<expr><name pos:line="168" pos:column="40">lang</name></expr>]</index></name><op:operator pos:line="168" pos:column="45">.</op:operator><call><name pos:line="168" pos:column="46">GetFileUnitForXmlSnippet</name><argument_list pos:line="168" pos:column="70">(<argument><expr><name pos:line="168" pos:column="71">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="168" pos:column="76">"test.code"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="170" pos:column="13">var</name></type> <name pos:line="170" pos:column="17">globalScope</name> <init pos:line="170" pos:column="29">= <expr><name><name pos:line="170" pos:column="31">codeParsers</name><index pos:line="170" pos:column="42">[<expr><name pos:line="170" pos:column="43">lang</name></expr>]</index></name><op:operator pos:line="170" pos:column="48">.</op:operator><call><name pos:line="170" pos:column="49">ParseFileUnit</name><argument_list pos:line="170" pos:column="62">(<argument><expr><name pos:line="170" pos:column="63">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="171" pos:column="13">Assert</name><op:operator pos:line="171" pos:column="19">.</op:operator><name pos:line="171" pos:column="20">AreEqual</name></name><argument_list pos:line="171" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="171" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="171" pos:column="32">globalScope</name><op:operator pos:line="171" pos:column="43">.</op:operator><name pos:line="171" pos:column="44">ChildStatements</name><op:operator pos:line="171" pos:column="59">.</op:operator><name pos:line="171" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="173" pos:column="13">var</name></type> <name pos:line="173" pos:column="17">ifStatement</name> <init pos:line="173" pos:column="29">= <expr><call><name><name pos:line="173" pos:column="31">globalScope</name><op:operator pos:line="173" pos:column="42">.</op:operator><name><name pos:line="173" pos:column="43">GetDescendants</name><argument_list pos:line="173" pos:column="57">&lt;<argument><name pos:line="173" pos:column="58">IfStatement</name></argument>&gt;</argument_list></name></name><argument_list pos:line="173" pos:column="70">()</argument_list></call><op:operator pos:line="173" pos:column="72">.</op:operator><call><name pos:line="173" pos:column="73">First</name><argument_list pos:line="173" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="174" pos:column="13">Assert</name><op:operator pos:line="174" pos:column="19">.</op:operator><name pos:line="174" pos:column="20">AreEqual</name></name><argument_list pos:line="174" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="174" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="174" pos:column="32">ifStatement</name><op:operator pos:line="174" pos:column="43">.</op:operator><name pos:line="174" pos:column="44">ChildStatements</name><op:operator pos:line="174" pos:column="59">.</op:operator><name pos:line="174" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="175" pos:column="13">var</name></type> <name pos:line="175" pos:column="17">thenFoo</name> <init pos:line="175" pos:column="25">= <expr><name><name pos:line="175" pos:column="27">ifStatement</name><op:operator pos:line="175" pos:column="38">.</op:operator><name pos:line="175" pos:column="39">ChildStatements</name><index pos:line="175" pos:column="54">[<expr><lit:literal type="number" pos:line="175" pos:column="55">0</lit:literal></expr>]</index></name><op:operator pos:line="175" pos:column="57">.</op:operator><call><name><name pos:line="175" pos:column="58">Content</name><op:operator pos:line="175" pos:column="65">.</op:operator><name><name pos:line="175" pos:column="66">GetDescendantsAndSelf</name><argument_list pos:line="175" pos:column="87">&lt;<argument><name pos:line="175" pos:column="88">VariableDeclaration</name></argument>&gt;</argument_list></name></name><argument_list pos:line="175" pos:column="108">()</argument_list></call><op:operator pos:line="175" pos:column="110">.</op:operator><call><name pos:line="175" pos:column="111">First</name><argument_list pos:line="175" pos:column="116">(<argument><expr><lambda><name pos:line="175" pos:column="117">v</name> <op:operator pos:line="175" pos:column="119">=&gt;</op:operator> <name><name pos:line="175" pos:column="122">v</name><op:operator pos:line="175" pos:column="123">.</op:operator><name pos:line="175" pos:column="124">Name</name></name> <op:operator pos:line="175" pos:column="129">==</op:operator> <lit:literal type="string" pos:line="175" pos:column="132">"foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="176" pos:column="13">var</name></type> <name pos:line="176" pos:column="17">thenFooUse</name> <init pos:line="176" pos:column="28">= <expr><name><name pos:line="176" pos:column="30">ifStatement</name><op:operator pos:line="176" pos:column="41">.</op:operator><name pos:line="176" pos:column="42">ChildStatements</name><index pos:line="176" pos:column="57">[<expr><lit:literal type="number" pos:line="176" pos:column="58">1</lit:literal></expr>]</index></name><op:operator pos:line="176" pos:column="60">.</op:operator><call><name><name pos:line="176" pos:column="61">Content</name><op:operator pos:line="176" pos:column="68">.</op:operator><name><name pos:line="176" pos:column="69">GetDescendantsAndSelf</name><argument_list pos:line="176" pos:column="90">&lt;<argument><name pos:line="176" pos:column="91">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="176" pos:column="99">()</argument_list></call><op:operator pos:line="176" pos:column="101">.</op:operator><call><name pos:line="176" pos:column="102">First</name><argument_list pos:line="176" pos:column="107">(<argument><expr><lambda><name pos:line="176" pos:column="108">n</name> <op:operator pos:line="176" pos:column="110">=&gt;</op:operator> <name><name pos:line="176" pos:column="113">n</name><op:operator pos:line="176" pos:column="114">.</op:operator><name pos:line="176" pos:column="115">Name</name></name> <op:operator pos:line="176" pos:column="120">==</op:operator> <lit:literal type="string" pos:line="176" pos:column="123">"foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="178" pos:column="13">Assert</name><op:operator pos:line="178" pos:column="19">.</op:operator><name pos:line="178" pos:column="20">AreEqual</name></name><argument_list pos:line="178" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="178" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="178" pos:column="32">ifStatement</name><op:operator pos:line="178" pos:column="43">.</op:operator><name pos:line="178" pos:column="44">ElseStatements</name><op:operator pos:line="178" pos:column="58">.</op:operator><name pos:line="178" pos:column="59">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="179" pos:column="13">var</name></type> <name pos:line="179" pos:column="17">elseFooUse</name> <init pos:line="179" pos:column="28">= <expr><name><name pos:line="179" pos:column="30">ifStatement</name><op:operator pos:line="179" pos:column="41">.</op:operator><name pos:line="179" pos:column="42">ElseStatements</name><index pos:line="179" pos:column="56">[<expr><lit:literal type="number" pos:line="179" pos:column="57">0</lit:literal></expr>]</index></name><op:operator pos:line="179" pos:column="59">.</op:operator><call><name><name pos:line="179" pos:column="60">Content</name><op:operator pos:line="179" pos:column="67">.</op:operator><name><name pos:line="179" pos:column="68">GetDescendantsAndSelf</name><argument_list pos:line="179" pos:column="89">&lt;<argument><name pos:line="179" pos:column="90">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="179" pos:column="98">()</argument_list></call><op:operator pos:line="179" pos:column="100">.</op:operator><call><name pos:line="179" pos:column="101">First</name><argument_list pos:line="179" pos:column="106">(<argument><expr><lambda><name pos:line="179" pos:column="107">n</name> <op:operator pos:line="179" pos:column="109">=&gt;</op:operator> <name><name pos:line="179" pos:column="112">n</name><op:operator pos:line="179" pos:column="113">.</op:operator><name pos:line="179" pos:column="114">Name</name></name> <op:operator pos:line="179" pos:column="119">==</op:operator> <lit:literal type="string" pos:line="179" pos:column="122">"foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="180" pos:column="13">var</name></type> <name pos:line="180" pos:column="17">elseFoo</name> <init pos:line="180" pos:column="25">= <expr><name><name pos:line="180" pos:column="27">ifStatement</name><op:operator pos:line="180" pos:column="38">.</op:operator><name pos:line="180" pos:column="39">ElseStatements</name><index pos:line="180" pos:column="53">[<expr><lit:literal type="number" pos:line="180" pos:column="54">1</lit:literal></expr>]</index></name><op:operator pos:line="180" pos:column="56">.</op:operator><call><name><name pos:line="180" pos:column="57">Content</name><op:operator pos:line="180" pos:column="64">.</op:operator><name><name pos:line="180" pos:column="65">GetDescendantsAndSelf</name><argument_list pos:line="180" pos:column="86">&lt;<argument><name pos:line="180" pos:column="87">VariableDeclaration</name></argument>&gt;</argument_list></name></name><argument_list pos:line="180" pos:column="107">()</argument_list></call><op:operator pos:line="180" pos:column="109">.</op:operator><call><name pos:line="180" pos:column="110">First</name><argument_list pos:line="180" pos:column="115">(<argument><expr><lambda><name pos:line="180" pos:column="116">v</name> <op:operator pos:line="180" pos:column="118">=&gt;</op:operator> <name><name pos:line="180" pos:column="121">v</name><op:operator pos:line="180" pos:column="122">.</op:operator><name pos:line="180" pos:column="123">Name</name></name> <op:operator pos:line="180" pos:column="128">==</op:operator> <lit:literal type="string" pos:line="180" pos:column="131">"foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="182" pos:column="13">var</name></type> <name pos:line="182" pos:column="17">allChildren</name> <init pos:line="182" pos:column="29">= <expr><call><name><name pos:line="182" pos:column="31">ifStatement</name><op:operator pos:line="182" pos:column="42">.</op:operator><name pos:line="182" pos:column="43">GetNamedChildren</name></name><argument_list pos:line="182" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="182" pos:column="60">"foo"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="182" pos:column="66">.</op:operator><call><name pos:line="182" pos:column="67">ToList</name><argument_list pos:line="182" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="183" pos:column="13">Assert</name><op:operator pos:line="183" pos:column="19">.</op:operator><name pos:line="183" pos:column="20">AreEqual</name></name><argument_list pos:line="183" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="183" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="183" pos:column="32">allChildren</name><op:operator pos:line="183" pos:column="43">.</op:operator><name pos:line="183" pos:column="44">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="184" pos:column="13">Assert</name><op:operator pos:line="184" pos:column="19">.</op:operator><name pos:line="184" pos:column="20">AreSame</name></name><argument_list pos:line="184" pos:column="27">(<argument><expr><name pos:line="184" pos:column="28">thenFoo</name></expr></argument>, <argument><expr><name><name pos:line="184" pos:column="37">allChildren</name><index pos:line="184" pos:column="48">[<expr><lit:literal type="number" pos:line="184" pos:column="49">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="185" pos:column="13">Assert</name><op:operator pos:line="185" pos:column="19">.</op:operator><name pos:line="185" pos:column="20">AreSame</name></name><argument_list pos:line="185" pos:column="27">(<argument><expr><name pos:line="185" pos:column="28">elseFoo</name></expr></argument>, <argument><expr><name><name pos:line="185" pos:column="37">allChildren</name><index pos:line="185" pos:column="48">[<expr><lit:literal type="number" pos:line="185" pos:column="49">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="187" pos:column="13">var</name></type> <name pos:line="187" pos:column="17">thenMatches</name> <init pos:line="187" pos:column="29">= <expr><call><name><name pos:line="187" pos:column="31">ifStatement</name><op:operator pos:line="187" pos:column="42">.</op:operator><name pos:line="187" pos:column="43">GetNamedChildren</name></name><argument_list pos:line="187" pos:column="59">(<argument><expr><name pos:line="187" pos:column="60">thenFooUse</name></expr></argument>)</argument_list></call><op:operator pos:line="187" pos:column="71">.</op:operator><call><name pos:line="187" pos:column="72">ToList</name><argument_list pos:line="187" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="188" pos:column="13">Assert</name><op:operator pos:line="188" pos:column="19">.</op:operator><name pos:line="188" pos:column="20">AreEqual</name></name><argument_list pos:line="188" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="188" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="188" pos:column="32">thenMatches</name><op:operator pos:line="188" pos:column="43">.</op:operator><name pos:line="188" pos:column="44">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="189" pos:column="13">Assert</name><op:operator pos:line="189" pos:column="19">.</op:operator><name pos:line="189" pos:column="20">AreSame</name></name><argument_list pos:line="189" pos:column="27">(<argument><expr><name pos:line="189" pos:column="28">thenFoo</name></expr></argument>, <argument><expr><name><name pos:line="189" pos:column="37">thenMatches</name><index pos:line="189" pos:column="48">[<expr><lit:literal type="number" pos:line="189" pos:column="49">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="191" pos:column="13">Assert</name><op:operator pos:line="191" pos:column="19">.</op:operator><name pos:line="191" pos:column="20">IsEmpty</name></name><argument_list pos:line="191" pos:column="27">(<argument><expr><call><name><name pos:line="191" pos:column="28">ifStatement</name><op:operator pos:line="191" pos:column="39">.</op:operator><name pos:line="191" pos:column="40">GetNamedChildren</name></name><argument_list pos:line="191" pos:column="56">(<argument><expr><name pos:line="191" pos:column="57">elseFooUse</name></expr></argument>)</argument_list></call><op:operator pos:line="191" pos:column="68">.</op:operator><call><name pos:line="191" pos:column="69">ToList</name><argument_list pos:line="191" pos:column="75">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="194" pos:column="9">[<expr><call><name pos:line="194" pos:column="10">TestCase</name><argument_list pos:line="194" pos:column="18">(<argument><expr><name><name pos:line="194" pos:column="19">Language</name><op:operator pos:line="194" pos:column="27">.</op:operator><name pos:line="194" pos:column="28">CPlusPlus</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <attribute pos:line="195" pos:column="9">[<expr><call><name pos:line="195" pos:column="10">TestCase</name><argument_list pos:line="195" pos:column="18">(<argument><expr><name><name pos:line="195" pos:column="19">Language</name><op:operator pos:line="195" pos:column="27">.</op:operator><name pos:line="195" pos:column="28">CSharp</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <attribute pos:line="196" pos:column="9">[<expr><call><name pos:line="196" pos:column="10">TestCase</name><argument_list pos:line="196" pos:column="18">(<argument><expr><name><name pos:line="196" pos:column="19">Language</name><op:operator pos:line="196" pos:column="27">.</op:operator><name pos:line="196" pos:column="28">Java</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="197" pos:column="9">public</specifier> <name pos:line="197" pos:column="16">void</name></type> <name pos:line="197" pos:column="21">TestGetNamedChildren_TryStatement</name><parameter_list pos:line="197" pos:column="54">(<param><decl><type><name pos:line="197" pos:column="55">Language</name></type> <name pos:line="197" pos:column="64">lang</name></decl></param>)</parameter_list> <block pos:line="197" pos:column="70">{
            <comment type="line" pos:line="198" pos:column="13">//int foo = 17;</comment>
            <comment type="line" pos:line="199" pos:column="13">//try {</comment>
            <comment type="line" pos:line="200" pos:column="13">//  int foo = 42;</comment>
            <comment type="line" pos:line="201" pos:column="13">//  MethodCall(foo);</comment>
            <comment type="line" pos:line="202" pos:column="13">//} finally {</comment>
            <comment type="line" pos:line="203" pos:column="13">//  MethodCall2(foo);</comment>
            <comment type="line" pos:line="204" pos:column="13">//  int foo = 101;</comment>
            <comment type="line" pos:line="205" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="206" pos:column="13">string</name></type> <name pos:line="206" pos:column="20">xml</name> <init pos:line="206" pos:column="24">= <expr><lit:literal type="string" pos:line="206" pos:column="26">@"&lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""1"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""1"" pos:column="&gt;foo&lt;/name&gt; &lt;init pos:line=""1"" pos:column="&gt;= &lt;expr&gt;&lt;lit:literal type=""number"" pos:line=""1"" pos:column=&gt;17&lt;/lit:literal&gt;&lt;/expr&gt;&lt;/init&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
&lt;try pos:line=""2"" pos:column="&gt;try &lt;block pos:line=""2"" pos:column="&gt;{
  &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""3"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""3"" pos:column="&gt;foo&lt;/name&gt; &lt;init pos:line=""3"" pos:column=""&gt;= &lt;expr&gt;&lt;lit:literal type=""number"" pos:line=""3"" pos:column=&gt;42&lt;/lit:literal&gt;&lt;/expr&gt;&lt;/init&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
  &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name pos:line=""4"" pos:column="&gt;MethodCall&lt;/name&gt;&lt;argument_list pos:line=""4"" pos:column=""&gt;(&lt;argument&gt;&lt;expr&gt;&lt;name pos:line=""4"" pos:column=""&gt;foo&lt;/name&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
}&lt;/block&gt; &lt;finally pos:line=""5"" pos:column="&gt;finally &lt;block pos:line=""5"" pos:column=""&gt;{
  &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name pos:line=""6"" pos:column="&gt;MethodCall2&lt;/name&gt;&lt;argument_list pos:line=""6"" pos:column=""&gt;(&lt;argument&gt;&lt;expr&gt;&lt;name pos:line=""6"" pos:column=""&gt;foo&lt;/name&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
  &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""7"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""7"" pos:column="&gt;foo&lt;/name&gt; &lt;init pos:line=""7"" pos:column=""&gt;= &lt;expr&gt;&lt;lit:literal type=""number"" pos:line=""7"" pos:column=&gt;101&lt;/lit:literal&gt;&lt;/expr&gt;&lt;/init&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
}&lt;/block&gt;&lt;/finally&gt;&lt;/try&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="214" pos:column="13">var</name></type> <name pos:line="214" pos:column="17">xmlElement</name> <init pos:line="214" pos:column="28">= <expr><name><name pos:line="214" pos:column="30">fileSetup</name><index pos:line="214" pos:column="39">[<expr><name pos:line="214" pos:column="40">lang</name></expr>]</index></name><op:operator pos:line="214" pos:column="45">.</op:operator><call><name pos:line="214" pos:column="46">GetFileUnitForXmlSnippet</name><argument_list pos:line="214" pos:column="70">(<argument><expr><name pos:line="214" pos:column="71">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="214" pos:column="76">"test.code"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="216" pos:column="13">var</name></type> <name pos:line="216" pos:column="17">globalScope</name> <init pos:line="216" pos:column="29">= <expr><name><name pos:line="216" pos:column="31">codeParsers</name><index pos:line="216" pos:column="42">[<expr><name pos:line="216" pos:column="43">lang</name></expr>]</index></name><op:operator pos:line="216" pos:column="48">.</op:operator><call><name pos:line="216" pos:column="49">ParseFileUnit</name><argument_list pos:line="216" pos:column="62">(<argument><expr><name pos:line="216" pos:column="63">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="217" pos:column="13">Assert</name><op:operator pos:line="217" pos:column="19">.</op:operator><name pos:line="217" pos:column="20">AreEqual</name></name><argument_list pos:line="217" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="217" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="217" pos:column="32">globalScope</name><op:operator pos:line="217" pos:column="43">.</op:operator><name pos:line="217" pos:column="44">ChildStatements</name><op:operator pos:line="217" pos:column="59">.</op:operator><name pos:line="217" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="219" pos:column="13">var</name></type> <name pos:line="219" pos:column="17">tryStatement</name> <init pos:line="219" pos:column="30">= <expr><call><name><name pos:line="219" pos:column="32">globalScope</name><op:operator pos:line="219" pos:column="43">.</op:operator><name><name pos:line="219" pos:column="44">GetDescendants</name><argument_list pos:line="219" pos:column="58">&lt;<argument><name pos:line="219" pos:column="59">TryStatement</name></argument>&gt;</argument_list></name></name><argument_list pos:line="219" pos:column="72">()</argument_list></call><op:operator pos:line="219" pos:column="74">.</op:operator><call><name pos:line="219" pos:column="75">First</name><argument_list pos:line="219" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="220" pos:column="13">Assert</name><op:operator pos:line="220" pos:column="19">.</op:operator><name pos:line="220" pos:column="20">AreEqual</name></name><argument_list pos:line="220" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="220" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="220" pos:column="32">tryStatement</name><op:operator pos:line="220" pos:column="44">.</op:operator><name pos:line="220" pos:column="45">ChildStatements</name><op:operator pos:line="220" pos:column="60">.</op:operator><name pos:line="220" pos:column="61">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="221" pos:column="13">var</name></type> <name pos:line="221" pos:column="17">tryFoo</name> <init pos:line="221" pos:column="24">= <expr><name><name pos:line="221" pos:column="26">tryStatement</name><op:operator pos:line="221" pos:column="38">.</op:operator><name pos:line="221" pos:column="39">ChildStatements</name><index pos:line="221" pos:column="54">[<expr><lit:literal type="number" pos:line="221" pos:column="55">0</lit:literal></expr>]</index></name><op:operator pos:line="221" pos:column="57">.</op:operator><call><name><name pos:line="221" pos:column="58">Content</name><op:operator pos:line="221" pos:column="65">.</op:operator><name><name pos:line="221" pos:column="66">GetDescendantsAndSelf</name><argument_list pos:line="221" pos:column="87">&lt;<argument><name pos:line="221" pos:column="88">VariableDeclaration</name></argument>&gt;</argument_list></name></name><argument_list pos:line="221" pos:column="108">()</argument_list></call><op:operator pos:line="221" pos:column="110">.</op:operator><call><name pos:line="221" pos:column="111">First</name><argument_list pos:line="221" pos:column="116">(<argument><expr><lambda><name pos:line="221" pos:column="117">v</name> <op:operator pos:line="221" pos:column="119">=&gt;</op:operator> <name><name pos:line="221" pos:column="122">v</name><op:operator pos:line="221" pos:column="123">.</op:operator><name pos:line="221" pos:column="124">Name</name></name> <op:operator pos:line="221" pos:column="129">==</op:operator> <lit:literal type="string" pos:line="221" pos:column="132">"foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="222" pos:column="13">var</name></type> <name pos:line="222" pos:column="17">tryFooUse</name> <init pos:line="222" pos:column="27">= <expr><name><name pos:line="222" pos:column="29">tryStatement</name><op:operator pos:line="222" pos:column="41">.</op:operator><name pos:line="222" pos:column="42">ChildStatements</name><index pos:line="222" pos:column="57">[<expr><lit:literal type="number" pos:line="222" pos:column="58">1</lit:literal></expr>]</index></name><op:operator pos:line="222" pos:column="60">.</op:operator><call><name><name pos:line="222" pos:column="61">Content</name><op:operator pos:line="222" pos:column="68">.</op:operator><name><name pos:line="222" pos:column="69">GetDescendantsAndSelf</name><argument_list pos:line="222" pos:column="90">&lt;<argument><name pos:line="222" pos:column="91">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="222" pos:column="99">()</argument_list></call><op:operator pos:line="222" pos:column="101">.</op:operator><call><name pos:line="222" pos:column="102">First</name><argument_list pos:line="222" pos:column="107">(<argument><expr><lambda><name pos:line="222" pos:column="108">n</name> <op:operator pos:line="222" pos:column="110">=&gt;</op:operator> <name><name pos:line="222" pos:column="113">n</name><op:operator pos:line="222" pos:column="114">.</op:operator><name pos:line="222" pos:column="115">Name</name></name> <op:operator pos:line="222" pos:column="120">==</op:operator> <lit:literal type="string" pos:line="222" pos:column="123">"foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="224" pos:column="13">Assert</name><op:operator pos:line="224" pos:column="19">.</op:operator><name pos:line="224" pos:column="20">AreEqual</name></name><argument_list pos:line="224" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="224" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="224" pos:column="32">tryStatement</name><op:operator pos:line="224" pos:column="44">.</op:operator><name pos:line="224" pos:column="45">FinallyStatements</name><op:operator pos:line="224" pos:column="62">.</op:operator><name pos:line="224" pos:column="63">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="225" pos:column="13">var</name></type> <name pos:line="225" pos:column="17">finallyFooUse</name> <init pos:line="225" pos:column="31">= <expr><name><name pos:line="225" pos:column="33">tryStatement</name><op:operator pos:line="225" pos:column="45">.</op:operator><name pos:line="225" pos:column="46">FinallyStatements</name><index pos:line="225" pos:column="63">[<expr><lit:literal type="number" pos:line="225" pos:column="64">0</lit:literal></expr>]</index></name><op:operator pos:line="225" pos:column="66">.</op:operator><call><name><name pos:line="225" pos:column="67">Content</name><op:operator pos:line="225" pos:column="74">.</op:operator><name><name pos:line="225" pos:column="75">GetDescendantsAndSelf</name><argument_list pos:line="225" pos:column="96">&lt;<argument><name pos:line="225" pos:column="97">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="225" pos:column="105">()</argument_list></call><op:operator pos:line="225" pos:column="107">.</op:operator><call><name pos:line="225" pos:column="108">First</name><argument_list pos:line="225" pos:column="113">(<argument><expr><lambda><name pos:line="225" pos:column="114">n</name> <op:operator pos:line="225" pos:column="116">=&gt;</op:operator> <name><name pos:line="225" pos:column="119">n</name><op:operator pos:line="225" pos:column="120">.</op:operator><name pos:line="225" pos:column="121">Name</name></name> <op:operator pos:line="225" pos:column="126">==</op:operator> <lit:literal type="string" pos:line="225" pos:column="129">"foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="226" pos:column="13">var</name></type> <name pos:line="226" pos:column="17">finallyFoo</name> <init pos:line="226" pos:column="28">= <expr><name><name pos:line="226" pos:column="30">tryStatement</name><op:operator pos:line="226" pos:column="42">.</op:operator><name pos:line="226" pos:column="43">FinallyStatements</name><index pos:line="226" pos:column="60">[<expr><lit:literal type="number" pos:line="226" pos:column="61">1</lit:literal></expr>]</index></name><op:operator pos:line="226" pos:column="63">.</op:operator><call><name><name pos:line="226" pos:column="64">Content</name><op:operator pos:line="226" pos:column="71">.</op:operator><name><name pos:line="226" pos:column="72">GetDescendantsAndSelf</name><argument_list pos:line="226" pos:column="93">&lt;<argument><name pos:line="226" pos:column="94">VariableDeclaration</name></argument>&gt;</argument_list></name></name><argument_list pos:line="226" pos:column="114">()</argument_list></call><op:operator pos:line="226" pos:column="116">.</op:operator><call><name pos:line="226" pos:column="117">First</name><argument_list pos:line="226" pos:column="122">(<argument><expr><lambda><name pos:line="226" pos:column="123">v</name> <op:operator pos:line="226" pos:column="125">=&gt;</op:operator> <name><name pos:line="226" pos:column="128">v</name><op:operator pos:line="226" pos:column="129">.</op:operator><name pos:line="226" pos:column="130">Name</name></name> <op:operator pos:line="226" pos:column="135">==</op:operator> <lit:literal type="string" pos:line="226" pos:column="138">"foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="228" pos:column="13">var</name></type> <name pos:line="228" pos:column="17">allChildren</name> <init pos:line="228" pos:column="29">= <expr><call><name><name pos:line="228" pos:column="31">tryStatement</name><op:operator pos:line="228" pos:column="43">.</op:operator><name pos:line="228" pos:column="44">GetNamedChildren</name></name><argument_list pos:line="228" pos:column="60">(<argument><expr><lit:literal type="string" pos:line="228" pos:column="61">"foo"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="228" pos:column="67">.</op:operator><call><name pos:line="228" pos:column="68">ToList</name><argument_list pos:line="228" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="229" pos:column="13">Assert</name><op:operator pos:line="229" pos:column="19">.</op:operator><name pos:line="229" pos:column="20">AreEqual</name></name><argument_list pos:line="229" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="229" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="229" pos:column="32">allChildren</name><op:operator pos:line="229" pos:column="43">.</op:operator><name pos:line="229" pos:column="44">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="230" pos:column="13">Assert</name><op:operator pos:line="230" pos:column="19">.</op:operator><name pos:line="230" pos:column="20">AreSame</name></name><argument_list pos:line="230" pos:column="27">(<argument><expr><name pos:line="230" pos:column="28">tryFoo</name></expr></argument>, <argument><expr><name><name pos:line="230" pos:column="36">allChildren</name><index pos:line="230" pos:column="47">[<expr><lit:literal type="number" pos:line="230" pos:column="48">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="231" pos:column="13">Assert</name><op:operator pos:line="231" pos:column="19">.</op:operator><name pos:line="231" pos:column="20">AreSame</name></name><argument_list pos:line="231" pos:column="27">(<argument><expr><name pos:line="231" pos:column="28">finallyFoo</name></expr></argument>, <argument><expr><name><name pos:line="231" pos:column="40">allChildren</name><index pos:line="231" pos:column="51">[<expr><lit:literal type="number" pos:line="231" pos:column="52">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="233" pos:column="13">var</name></type> <name pos:line="233" pos:column="17">tryMatches</name> <init pos:line="233" pos:column="28">= <expr><call><name><name pos:line="233" pos:column="30">tryStatement</name><op:operator pos:line="233" pos:column="42">.</op:operator><name pos:line="233" pos:column="43">GetNamedChildren</name></name><argument_list pos:line="233" pos:column="59">(<argument><expr><name pos:line="233" pos:column="60">tryFooUse</name></expr></argument>)</argument_list></call><op:operator pos:line="233" pos:column="70">.</op:operator><call><name pos:line="233" pos:column="71">ToList</name><argument_list pos:line="233" pos:column="77">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="234" pos:column="13">Assert</name><op:operator pos:line="234" pos:column="19">.</op:operator><name pos:line="234" pos:column="20">AreEqual</name></name><argument_list pos:line="234" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="234" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="234" pos:column="32">tryMatches</name><op:operator pos:line="234" pos:column="42">.</op:operator><name pos:line="234" pos:column="43">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="235" pos:column="13">Assert</name><op:operator pos:line="235" pos:column="19">.</op:operator><name pos:line="235" pos:column="20">AreSame</name></name><argument_list pos:line="235" pos:column="27">(<argument><expr><name pos:line="235" pos:column="28">tryFoo</name></expr></argument>, <argument><expr><name><name pos:line="235" pos:column="36">tryMatches</name><index pos:line="235" pos:column="46">[<expr><lit:literal type="number" pos:line="235" pos:column="47">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="237" pos:column="13">Assert</name><op:operator pos:line="237" pos:column="19">.</op:operator><name pos:line="237" pos:column="20">IsEmpty</name></name><argument_list pos:line="237" pos:column="27">(<argument><expr><call><name><name pos:line="237" pos:column="28">tryStatement</name><op:operator pos:line="237" pos:column="40">.</op:operator><name pos:line="237" pos:column="41">GetNamedChildren</name></name><argument_list pos:line="237" pos:column="57">(<argument><expr><name pos:line="237" pos:column="58">finallyFooUse</name></expr></argument>)</argument_list></call><op:operator pos:line="237" pos:column="72">.</op:operator><call><name pos:line="237" pos:column="73">ToList</name><argument_list pos:line="237" pos:column="79">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
