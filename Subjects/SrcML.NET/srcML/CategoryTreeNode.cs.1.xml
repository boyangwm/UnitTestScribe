<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\VisualStudio\ABB.SrcML.VisualStudio.PreviewAddIn\CategoryTreeNode.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2011 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">System</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Collections</name><op:operator pos:line="13" pos:column="25">.</op:operator><name pos:line="13" pos:column="26">Generic</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Linq</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Text</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Windows</name><op:operator pos:line="16" pos:column="21">.</op:operator><name pos:line="16" pos:column="22">Forms</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Runtime</name><op:operator pos:line="17" pos:column="21">.</op:operator><name pos:line="17" pos:column="22">Serialization</name></name>;</using>

<namespace pos:line="19" pos:column="1">namespace <name><name pos:line="19" pos:column="11">ABB</name><op:operator pos:line="19" pos:column="14">.</op:operator><name pos:line="19" pos:column="15">SrcML</name><op:operator pos:line="19" pos:column="20">.</op:operator><name pos:line="19" pos:column="21">VisualStudio</name><op:operator pos:line="19" pos:column="33">.</op:operator><name pos:line="19" pos:column="34">PreviewAddIn</name></name>
<block pos:line="20" pos:column="1">{
    <class pos:line="21" pos:column="5">class <name pos:line="21" pos:column="11">CategoryTreeNode</name> <super pos:line="21" pos:column="28">: <name pos:line="21" pos:column="30">TreeNode</name></super>
    <block pos:line="22" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="23" pos:column="9">int</name></type> <name pos:line="23" pos:column="13">_count</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="24" pos:column="9">string</name></type> <name pos:line="24" pos:column="16">_xpath</name></decl>;</decl_stmt>

        <constructor><specifier pos:line="26" pos:column="9">public</specifier> <name pos:line="26" pos:column="16">CategoryTreeNode</name><parameter_list pos:line="26" pos:column="32">()</parameter_list>
        <block pos:line="27" pos:column="9">{
            
        }</block></constructor>
        <constructor><specifier pos:line="30" pos:column="9">public</specifier> <name pos:line="30" pos:column="16">CategoryTreeNode</name><parameter_list pos:line="30" pos:column="32">(<param><decl><type><name pos:line="30" pos:column="33">string</name></type> <name pos:line="30" pos:column="40">text</name></decl></param>)</parameter_list>
        <block pos:line="31" pos:column="9">{
            <expr_stmt><expr><name><name pos:line="32" pos:column="13">this</name><op:operator pos:line="32" pos:column="17">.</op:operator><name pos:line="32" pos:column="18">Name</name></name> <op:operator pos:line="32" pos:column="23">=</op:operator> <name pos:line="32" pos:column="25">text</name></expr>;</expr_stmt>
            <if pos:line="33" pos:column="13">if <condition pos:line="33" pos:column="16">(<expr><lit:literal type="string" pos:line="33" pos:column="17">"All"</lit:literal> <op:operator pos:line="33" pos:column="23">==</op:operator> <name pos:line="33" pos:column="26">text</name></expr>)</condition><then pos:line="33" pos:column="31">
                <expr_stmt><expr><name><name pos:line="34" pos:column="17">this</name><op:operator pos:line="34" pos:column="21">.</op:operator><name pos:line="34" pos:column="22">Tag</name></name> <op:operator pos:line="34" pos:column="26">=</op:operator> <name><name pos:line="34" pos:column="28">String</name><op:operator pos:line="34" pos:column="34">.</op:operator><name pos:line="34" pos:column="35">Empty</name></name></expr>;</expr_stmt></then>
            <else pos:line="35" pos:column="13">else
                <expr_stmt><expr><name><name pos:line="36" pos:column="17">this</name><op:operator pos:line="36" pos:column="21">.</op:operator><name pos:line="36" pos:column="22">Tag</name></name> <op:operator pos:line="36" pos:column="26">=</op:operator> <name pos:line="36" pos:column="28">text</name></expr>;</expr_stmt></else></if>
            <expr_stmt><expr><name><name pos:line="37" pos:column="13">this</name><op:operator pos:line="37" pos:column="17">.</op:operator><name pos:line="37" pos:column="18">_xpath</name></name> <op:operator pos:line="37" pos:column="25">=</op:operator> <name><name pos:line="37" pos:column="27">String</name><op:operator pos:line="37" pos:column="33">.</op:operator><name pos:line="37" pos:column="34">Empty</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="38" pos:column="13">this</name><op:operator pos:line="38" pos:column="17">.</op:operator><name pos:line="38" pos:column="18">Count</name></name> <op:operator pos:line="38" pos:column="24">=</op:operator> <lit:literal type="number" pos:line="38" pos:column="26">0</lit:literal></expr>;</expr_stmt>
        }</block></constructor>

        <decl_stmt><decl><type><specifier pos:line="41" pos:column="9">public</specifier> <name pos:line="41" pos:column="16">int</name></type> <name pos:line="41" pos:column="20">Count</name>
        <block pos:line="42" pos:column="9">{
            <function><name pos:line="43" pos:column="13">get</name>
            <block pos:line="44" pos:column="13">{
                <return pos:line="45" pos:column="17">return <expr><name><name pos:line="45" pos:column="24">this</name><op:operator pos:line="45" pos:column="28">.</op:operator><name pos:line="45" pos:column="29">_count</name></name></expr>;</return>
            }</block></function>
            <function><name pos:line="47" pos:column="13">set</name>
            <block pos:line="48" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="49" pos:column="17">this</name><op:operator pos:line="49" pos:column="21">.</op:operator><name pos:line="49" pos:column="22">_count</name></name> <op:operator pos:line="49" pos:column="29">=</op:operator> <name pos:line="49" pos:column="31">value</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="50" pos:column="17">this</name><op:operator pos:line="50" pos:column="21">.</op:operator><name pos:line="50" pos:column="22">Update</name></name><argument_list pos:line="50" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="54" pos:column="9">public</specifier> <name pos:line="54" pos:column="16">CategoryTreeNode</name></type> <name pos:line="54" pos:column="33">Root</name>
        <block pos:line="55" pos:column="9">{
            <function_decl><name pos:line="56" pos:column="13">get</name>;</function_decl>
            <function_decl><name pos:line="57" pos:column="13">set</name>;</function_decl>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="60" pos:column="9">public</specifier> <name pos:line="60" pos:column="16">string</name></type> <name pos:line="60" pos:column="23">XPath</name>
        <block pos:line="61" pos:column="9">{
            <function><name pos:line="62" pos:column="13">get</name>
            <block pos:line="63" pos:column="13">{
                <return pos:line="64" pos:column="17">return <expr><name><name pos:line="64" pos:column="24">this</name><op:operator pos:line="64" pos:column="28">.</op:operator><name pos:line="64" pos:column="29">_xpath</name></name></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <function><type><specifier pos:line="68" pos:column="9">private</specifier> <name pos:line="68" pos:column="17">void</name></type> <name pos:line="68" pos:column="22">setXPath</name><parameter_list pos:line="68" pos:column="30">()</parameter_list>
        <block pos:line="69" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="70" pos:column="13">var</name></type> <name pos:line="70" pos:column="17">node</name> <init pos:line="70" pos:column="22">= <expr><name pos:line="70" pos:column="24">this</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="71" pos:column="13">StringBuilder</name></type> <name pos:line="71" pos:column="27">xpath</name> <init pos:line="71" pos:column="33">= <expr><op:operator pos:line="71" pos:column="35">new</op:operator> <call><name pos:line="71" pos:column="39">StringBuilder</name><argument_list pos:line="71" pos:column="52">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while pos:line="72" pos:column="13">while <condition pos:line="72" pos:column="19">(<expr><name pos:line="72" pos:column="20">null</name> <op:operator pos:line="72" pos:column="25">!=</op:operator> <name pos:line="72" pos:column="28">node</name> <op:operator pos:line="72" pos:column="33">&amp;&amp;</op:operator> <name><name pos:line="72" pos:column="36">String</name><op:operator pos:line="72" pos:column="42">.</op:operator><name pos:line="72" pos:column="43">Empty</name></name> <op:operator pos:line="72" pos:column="49">!=</op:operator> <op:operator pos:line="72" pos:column="52">(</op:operator><name><name pos:line="72" pos:column="53">node</name><op:operator pos:line="72" pos:column="57">.</op:operator><name pos:line="72" pos:column="58">Tag</name></name> <op:operator pos:line="72" pos:column="62">as</op:operator> <name pos:line="72" pos:column="65">String</name><op:operator pos:line="72" pos:column="71">)</op:operator></expr>)</condition>
            <block pos:line="73" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="74" pos:column="17">xpath</name><op:operator pos:line="74" pos:column="22">.</op:operator><name pos:line="74" pos:column="23">Insert</name></name><argument_list pos:line="74" pos:column="29">(<argument><expr><lit:literal type="number" pos:line="74" pos:column="30">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="74" pos:column="33">"/"</lit:literal> <op:operator pos:line="74" pos:column="37">+</op:operator> <name><name pos:line="74" pos:column="39">node</name><op:operator pos:line="74" pos:column="43">.</op:operator><name pos:line="74" pos:column="44">Tag</name></name> <op:operator pos:line="74" pos:column="48">as</op:operator> <name pos:line="74" pos:column="51">string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="75" pos:column="17">node</name> <op:operator pos:line="75" pos:column="22">=</op:operator> <name><name pos:line="75" pos:column="24">node</name><op:operator pos:line="75" pos:column="28">.</op:operator><name pos:line="75" pos:column="29">Parent</name></name> <op:operator pos:line="75" pos:column="36">as</op:operator> <name pos:line="75" pos:column="39">CategoryTreeNode</name></expr>;</expr_stmt>
            }</block></while>
            <expr_stmt><expr><name><name pos:line="77" pos:column="13">this</name><op:operator pos:line="77" pos:column="17">.</op:operator><name pos:line="77" pos:column="18">_xpath</name></name> <op:operator pos:line="77" pos:column="25">=</op:operator> <call><name><name pos:line="77" pos:column="27">xpath</name><op:operator pos:line="77" pos:column="32">.</op:operator><name pos:line="77" pos:column="33">ToString</name></name><argument_list pos:line="77" pos:column="41">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="80" pos:column="9">public</specifier> <name pos:line="80" pos:column="16">void</name></type> <name pos:line="80" pos:column="21">AddCategory</name><parameter_list pos:line="80" pos:column="32">(<param><decl><type><name pos:line="80" pos:column="33">string</name></type> <name pos:line="80" pos:column="40">category</name></decl></param>, <param><decl><type><name pos:line="80" pos:column="50">int</name></type> <name pos:line="80" pos:column="54">count</name></decl></param>)</parameter_list>
        <block pos:line="81" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="82" pos:column="13">var</name></type> <name pos:line="82" pos:column="17">node</name> <init pos:line="82" pos:column="22">= <expr><name pos:line="82" pos:column="24">this</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name pos:line="84" pos:column="13">node</name><op:operator pos:line="84" pos:column="17">.</op:operator><name pos:line="84" pos:column="18">Count</name></name> <op:operator pos:line="84" pos:column="24">+=</op:operator> <name pos:line="84" pos:column="27">count</name></expr>;</expr_stmt>
            <foreach pos:line="85" pos:column="13">foreach (<init><decl><type><name pos:line="85" pos:column="22">var</name></type> <name pos:line="85" pos:column="26">part</name> <range pos:line="85" pos:column="31">in <expr><call><name><name pos:line="85" pos:column="34">category</name><op:operator pos:line="85" pos:column="42">.</op:operator><name pos:line="85" pos:column="43">Split</name></name><argument_list pos:line="85" pos:column="48">(<argument><expr><op:operator pos:line="85" pos:column="49">new</op:operator> <name><name pos:line="85" pos:column="53">char</name><index pos:line="85" pos:column="57">[]</index></name> <block pos:line="85" pos:column="60">{ <expr><lit:literal type="char" pos:line="85" pos:column="62">'/'</lit:literal></expr> }</block></expr></argument>, <argument><expr><name><name pos:line="85" pos:column="69">StringSplitOptions</name><op:operator pos:line="85" pos:column="87">.</op:operator><name pos:line="85" pos:column="88">RemoveEmptyEntries</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)
            <block pos:line="86" pos:column="13">{
                <if pos:line="87" pos:column="17">if <condition pos:line="87" pos:column="20">(<expr><call><name><name pos:line="87" pos:column="21">node</name><op:operator pos:line="87" pos:column="25">.</op:operator><name pos:line="87" pos:column="26">Nodes</name><op:operator pos:line="87" pos:column="31">.</op:operator><name pos:line="87" pos:column="32">ContainsKey</name></name><argument_list pos:line="87" pos:column="43">(<argument><expr><name pos:line="87" pos:column="44">part</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="87" pos:column="50">
                <block pos:line="88" pos:column="17">{
                    <expr_stmt><expr><name pos:line="89" pos:column="21">node</name> <op:operator pos:line="89" pos:column="26">=</op:operator> <name><name pos:line="89" pos:column="28">node</name><op:operator pos:line="89" pos:column="32">.</op:operator><name pos:line="89" pos:column="33">Nodes</name><index pos:line="89" pos:column="38">[<expr><name pos:line="89" pos:column="39">part</name></expr>]</index></name> <op:operator pos:line="89" pos:column="45">as</op:operator> <name pos:line="89" pos:column="48">CategoryTreeNode</name></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="91" pos:column="17">else
                <block pos:line="92" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="93" pos:column="21">var</name></type> <name pos:line="93" pos:column="25">newNode</name> <init pos:line="93" pos:column="33">= <expr><op:operator pos:line="93" pos:column="35">new</op:operator> <call><name pos:line="93" pos:column="39">CategoryTreeNode</name><argument_list pos:line="93" pos:column="55">(<argument><expr><name pos:line="93" pos:column="56">part</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="94" pos:column="21">node</name><op:operator pos:line="94" pos:column="25">.</op:operator><name pos:line="94" pos:column="26">Nodes</name><op:operator pos:line="94" pos:column="31">.</op:operator><name pos:line="94" pos:column="32">Add</name></name><argument_list pos:line="94" pos:column="35">(<argument><expr><name pos:line="94" pos:column="36">newNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="95" pos:column="21">node</name> <op:operator pos:line="95" pos:column="26">=</op:operator> <name pos:line="95" pos:column="28">newNode</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="96" pos:column="21">node</name><op:operator pos:line="96" pos:column="25">.</op:operator><name pos:line="96" pos:column="26">setXPath</name></name><argument_list pos:line="96" pos:column="34">()</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><name><name pos:line="98" pos:column="17">node</name><op:operator pos:line="98" pos:column="21">.</op:operator><name pos:line="98" pos:column="22">Root</name></name> <op:operator pos:line="98" pos:column="27">=</op:operator> <name pos:line="98" pos:column="29">this</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="99" pos:column="17">node</name><op:operator pos:line="99" pos:column="21">.</op:operator><name pos:line="99" pos:column="22">Count</name></name> <op:operator pos:line="99" pos:column="28">+=</op:operator> <name pos:line="99" pos:column="31">count</name></expr>;</expr_stmt>
            }</block></foreach>

        }</block></function>
        
        <function><type><specifier pos:line="104" pos:column="9">private</specifier> <name pos:line="104" pos:column="17">void</name></type> <name pos:line="104" pos:column="22">UpdateAll</name><parameter_list pos:line="104" pos:column="31">()</parameter_list>
        <block pos:line="105" pos:column="9">{
            <foreach pos:line="106" pos:column="13">foreach (<init><decl><type><name pos:line="106" pos:column="22">var</name></type> <name pos:line="106" pos:column="26">child</name> <range pos:line="106" pos:column="32">in <expr><name><name pos:line="106" pos:column="35">this</name><op:operator pos:line="106" pos:column="39">.</op:operator><name pos:line="106" pos:column="40">Nodes</name></name></expr></range></decl></init>)
            <block pos:line="107" pos:column="13">{
                <expr_stmt><expr><op:operator pos:line="108" pos:column="17">(</op:operator><name pos:line="108" pos:column="18">child</name> <op:operator pos:line="108" pos:column="24">as</op:operator> <name pos:line="108" pos:column="27">CategoryTreeNode</name><op:operator pos:line="108" pos:column="43">)</op:operator><op:operator pos:line="108" pos:column="44">.</op:operator><call><name pos:line="108" pos:column="45">Update</name><argument_list pos:line="108" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>
        <function><type><specifier pos:line="111" pos:column="9">private</specifier> <name pos:line="111" pos:column="17">void</name></type> <name pos:line="111" pos:column="22">Update</name><parameter_list pos:line="111" pos:column="28">()</parameter_list>
        <block pos:line="112" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="113" pos:column="13">var</name></type> <name pos:line="113" pos:column="17">pluralString</name> <init pos:line="113" pos:column="30">= <expr><op:operator pos:line="113" pos:column="32">(</op:operator><name><name pos:line="113" pos:column="33">this</name><op:operator pos:line="113" pos:column="37">.</op:operator><name pos:line="113" pos:column="38">Count</name></name> <op:operator pos:line="113" pos:column="44">==</op:operator> <lit:literal type="number" pos:line="113" pos:column="47">1</lit:literal> <op:operator pos:line="113" pos:column="49">?</op:operator> <name><name pos:line="113" pos:column="51">String</name><op:operator pos:line="113" pos:column="57">.</op:operator><name pos:line="113" pos:column="58">Empty</name></name> <op:operator pos:line="113" pos:column="64">:</op:operator> <lit:literal type="string" pos:line="113" pos:column="66">"s"</lit:literal><op:operator pos:line="113" pos:column="69">)</op:operator></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="114" pos:column="13">string</name></type> <name pos:line="114" pos:column="20">text</name> <init pos:line="114" pos:column="25">= <expr><call><name><name pos:line="114" pos:column="27">String</name><op:operator pos:line="114" pos:column="33">.</op:operator><name pos:line="114" pos:column="34">Format</name></name><argument_list pos:line="114" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="114" pos:column="41">"{0} ({1} item{2})"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="114" pos:column="62">this</name><op:operator pos:line="114" pos:column="66">.</op:operator><name pos:line="114" pos:column="67">Name</name></name></expr></argument>, <argument><expr><name><name pos:line="114" pos:column="73">this</name><op:operator pos:line="114" pos:column="77">.</op:operator><name pos:line="114" pos:column="78">Count</name></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="85">pluralString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if pos:line="116" pos:column="13">if<condition pos:line="116" pos:column="15">(<expr><name pos:line="116" pos:column="16">null</name> <op:operator pos:line="116" pos:column="21">!=</op:operator> <name pos:line="116" pos:column="24">Parent</name> <op:operator pos:line="116" pos:column="31">&amp;&amp;</op:operator> <name pos:line="116" pos:column="34">null</name> <op:operator pos:line="116" pos:column="39">!=</op:operator> <name pos:line="116" pos:column="42">Root</name></expr>)</condition><then pos:line="116" pos:column="47">
            <block pos:line="117" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="118" pos:column="17">double</name></type> <name pos:line="118" pos:column="24">percentage</name> <init pos:line="118" pos:column="35">= <expr><op:operator pos:line="118" pos:column="37">(</op:operator><name pos:line="118" pos:column="38">double</name><op:operator pos:line="118" pos:column="44">)</op:operator><name><name pos:line="118" pos:column="45">this</name><op:operator pos:line="118" pos:column="49">.</op:operator><name pos:line="118" pos:column="50">Count</name></name> <op:operator pos:line="118" pos:column="56">/</op:operator> <name><name pos:line="118" pos:column="58">this</name><op:operator pos:line="118" pos:column="62">.</op:operator><name pos:line="118" pos:column="63">Root</name><op:operator pos:line="118" pos:column="67">.</op:operator><name pos:line="118" pos:column="68">Count</name></name></expr></init></decl>;</decl_stmt>
                <if pos:line="119" pos:column="17">if <condition pos:line="119" pos:column="20">(<expr><name pos:line="119" pos:column="21">percentage</name> <op:operator pos:line="119" pos:column="32">&lt;=</op:operator> <lit:literal type="number" pos:line="119" pos:column="35">.01</lit:literal> <op:operator pos:line="119" pos:column="39">&amp;&amp;</op:operator> <op:operator pos:line="119" pos:column="42">(</op:operator><name><name pos:line="119" pos:column="43">this</name><op:operator pos:line="119" pos:column="47">.</op:operator><name pos:line="119" pos:column="48">Parent</name></name> <op:operator pos:line="119" pos:column="55">as</op:operator> <name pos:line="119" pos:column="58">CategoryTreeNode</name><op:operator pos:line="119" pos:column="74">)</op:operator><op:operator pos:line="119" pos:column="75">.</op:operator><name pos:line="119" pos:column="76">Count</name> <op:operator pos:line="119" pos:column="82">&gt;</op:operator> <name><name pos:line="119" pos:column="84">this</name><op:operator pos:line="119" pos:column="88">.</op:operator><name pos:line="119" pos:column="89">Count</name></name></expr>)</condition><then pos:line="119" pos:column="95">
                <block pos:line="120" pos:column="17">{
                    <expr_stmt><expr><name pos:line="121" pos:column="21">text</name> <op:operator pos:line="121" pos:column="26">=</op:operator> <call><name><name pos:line="121" pos:column="28">String</name><op:operator pos:line="121" pos:column="34">.</op:operator><name pos:line="121" pos:column="35">Format</name></name><argument_list pos:line="121" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="121" pos:column="42">"{0} (\u2264 1% - {1} item{2})"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="121" pos:column="75">this</name><op:operator pos:line="121" pos:column="79">.</op:operator><name pos:line="121" pos:column="80">Name</name></name></expr></argument>, <argument><expr><name><name pos:line="121" pos:column="86">this</name><op:operator pos:line="121" pos:column="90">.</op:operator><name pos:line="121" pos:column="91">Count</name></name></expr></argument>, <argument><expr><name pos:line="121" pos:column="98">pluralString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="123" pos:column="17">else <if pos:line="123" pos:column="22">if <condition pos:line="123" pos:column="25">(<expr><name pos:line="123" pos:column="26">percentage</name> <op:operator pos:line="123" pos:column="37">&gt;</op:operator> <lit:literal type="number" pos:line="123" pos:column="39">.01</lit:literal></expr>)</condition><then pos:line="123" pos:column="43">
                <block pos:line="124" pos:column="17">{
                    <expr_stmt><expr><name pos:line="125" pos:column="21">text</name> <op:operator pos:line="125" pos:column="26">=</op:operator> <call><name><name pos:line="125" pos:column="28">String</name><op:operator pos:line="125" pos:column="34">.</op:operator><name pos:line="125" pos:column="35">Format</name></name><argument_list pos:line="125" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="125" pos:column="42">"{0} ({1:P0})"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="125" pos:column="58">this</name><op:operator pos:line="125" pos:column="62">.</op:operator><name pos:line="125" pos:column="63">Name</name></name></expr></argument>, <argument><expr><name pos:line="125" pos:column="69">percentage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></else></if>
            }</block></then></if>
            <expr_stmt><expr><name><name pos:line="128" pos:column="13">this</name><op:operator pos:line="128" pos:column="17">.</op:operator><name pos:line="128" pos:column="18">Text</name></name> <op:operator pos:line="128" pos:column="23">=</op:operator> <name pos:line="128" pos:column="25">text</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="129" pos:column="13">this</name><op:operator pos:line="129" pos:column="17">.</op:operator><name pos:line="129" pos:column="18">ToolTipText</name></name> <op:operator pos:line="129" pos:column="30">=</op:operator> <call><name><name pos:line="129" pos:column="32">String</name><op:operator pos:line="129" pos:column="38">.</op:operator><name pos:line="129" pos:column="39">Format</name></name><argument_list pos:line="129" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="129" pos:column="46">"{0} item{1} - {2}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="129" pos:column="67">this</name><op:operator pos:line="129" pos:column="71">.</op:operator><name pos:line="129" pos:column="72">Count</name></name></expr></argument>, <argument><expr><name pos:line="129" pos:column="79">pluralString</name></expr></argument>, <argument><expr><name><name pos:line="129" pos:column="93">this</name><op:operator pos:line="129" pos:column="97">.</op:operator><name pos:line="129" pos:column="98">XPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="130" pos:column="13">this</name><op:operator pos:line="130" pos:column="17">.</op:operator><name pos:line="130" pos:column="18">UpdateAll</name></name><argument_list pos:line="130" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
