<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data.Test\CodeParserTests.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2013 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *    Patrick Francis (ABB Group) - implementation and documentation
 *****************************************************************************/</comment>

<using pos:line="13" pos:column="1">using <name pos:line="13" pos:column="7">System</name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Collections</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">Generic</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Linq</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Text</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Threading</name><op:operator pos:line="17" pos:column="23">.</op:operator><name pos:line="17" pos:column="24">Tasks</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Xml</name><op:operator pos:line="18" pos:column="17">.</op:operator><name pos:line="18" pos:column="18">Linq</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">ABB</name><op:operator pos:line="19" pos:column="10">.</op:operator><name pos:line="19" pos:column="11">SrcML</name><op:operator pos:line="19" pos:column="16">.</op:operator><name pos:line="19" pos:column="17">Test</name><op:operator pos:line="19" pos:column="21">.</op:operator><name pos:line="19" pos:column="22">Utilities</name></name>;</using>
<using pos:line="20" pos:column="1">using <name><name pos:line="20" pos:column="7">NUnit</name><op:operator pos:line="20" pos:column="12">.</op:operator><name pos:line="20" pos:column="13">Framework</name></name>;</using>

<namespace pos:line="22" pos:column="1">namespace <name><name pos:line="22" pos:column="11">ABB</name><op:operator pos:line="22" pos:column="14">.</op:operator><name pos:line="22" pos:column="15">SrcML</name><op:operator pos:line="22" pos:column="20">.</op:operator><name pos:line="22" pos:column="21">Data</name><op:operator pos:line="22" pos:column="25">.</op:operator><name pos:line="22" pos:column="26">Test</name></name>
<block pos:line="23" pos:column="1">{
    <class><attribute pos:line="24" pos:column="5">[<expr><name pos:line="24" pos:column="6">TestFixture</name></expr>]</attribute>
    <attribute pos:line="25" pos:column="5">[<expr><call><name pos:line="25" pos:column="6">Category</name><argument_list pos:line="25" pos:column="14">(<argument><expr><lit:literal type="string" pos:line="25" pos:column="15">"Build"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="26" pos:column="5">public</specifier> class <name pos:line="26" pos:column="18">CodeParserTests</name> <block pos:line="26" pos:column="34">{
        <decl_stmt><decl><type><specifier pos:line="27" pos:column="9">private</specifier> <name><name pos:line="27" pos:column="17">Dictionary</name><argument_list pos:line="27" pos:column="27">&lt;<argument><name pos:line="27" pos:column="28">Language</name></argument>, <argument><name pos:line="27" pos:column="38">AbstractCodeParser</name></argument>&gt;</argument_list></name></type> <name pos:line="27" pos:column="58">codeParsers</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="28" pos:column="9">private</specifier> <name><name pos:line="28" pos:column="17">Dictionary</name><argument_list pos:line="28" pos:column="27">&lt;<argument><name pos:line="28" pos:column="28">Language</name></argument>, <argument><name pos:line="28" pos:column="38">SrcMLFileUnitSetup</name></argument>&gt;</argument_list></name></type> <name pos:line="28" pos:column="58">fileSetup</name></decl>;</decl_stmt>

        <function><type><attribute pos:line="30" pos:column="9">[<expr><name pos:line="30" pos:column="10">TestFixtureSetUp</name></expr>]</attribute>
        <specifier pos:line="31" pos:column="9">public</specifier> <name pos:line="31" pos:column="16">void</name></type> <name pos:line="31" pos:column="21">ClassSetup</name><parameter_list pos:line="31" pos:column="31">()</parameter_list> <block pos:line="31" pos:column="34">{
            <expr_stmt><expr><name pos:line="32" pos:column="13">codeParsers</name> <op:operator pos:line="32" pos:column="25">=</op:operator> <op:operator pos:line="32" pos:column="27">new</op:operator> <call><name><name pos:line="32" pos:column="31">Dictionary</name><argument_list pos:line="32" pos:column="41">&lt;<argument><name pos:line="32" pos:column="42">Language</name></argument>, <argument><name pos:line="32" pos:column="52">AbstractCodeParser</name></argument>&gt;</argument_list></name><argument_list pos:line="32" pos:column="71">()</argument_list></call> <block pos:line="32" pos:column="74">{
                <expr><block pos:line="33" pos:column="17">{<expr><name><name pos:line="33" pos:column="18">Language</name><op:operator pos:line="33" pos:column="26">.</op:operator><name pos:line="33" pos:column="27">CPlusPlus</name></name></expr><op:operator pos:line="33" pos:column="36">,</op:operator> <expr><op:operator pos:line="33" pos:column="38">new</op:operator> <call><name pos:line="33" pos:column="42">CPlusPlusCodeParser</name><argument_list pos:line="33" pos:column="61">()</argument_list></call></expr>}</block></expr><op:operator pos:line="33" pos:column="64">,</op:operator>
                <expr><block pos:line="34" pos:column="17">{<expr><name><name pos:line="34" pos:column="18">Language</name><op:operator pos:line="34" pos:column="26">.</op:operator><name pos:line="34" pos:column="27">CSharp</name></name></expr><op:operator pos:line="34" pos:column="33">,</op:operator> <expr><op:operator pos:line="34" pos:column="35">new</op:operator> <call><name pos:line="34" pos:column="39">CSharpCodeParser</name><argument_list pos:line="34" pos:column="55">()</argument_list></call></expr>}</block></expr><op:operator pos:line="34" pos:column="58">,</op:operator>
                <expr><block pos:line="35" pos:column="17">{<expr><name><name pos:line="35" pos:column="18">Language</name><op:operator pos:line="35" pos:column="26">.</op:operator><name pos:line="35" pos:column="27">Java</name></name></expr><op:operator pos:line="35" pos:column="31">,</op:operator> <expr><op:operator pos:line="35" pos:column="33">new</op:operator> <call><name pos:line="35" pos:column="37">JavaCodeParser</name><argument_list pos:line="35" pos:column="51">()</argument_list></call></expr>}</block></expr>
            }</block></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="37" pos:column="13">fileSetup</name> <op:operator pos:line="37" pos:column="23">=</op:operator> <op:operator pos:line="37" pos:column="25">new</op:operator> <call><name><name pos:line="37" pos:column="29">Dictionary</name><argument_list pos:line="37" pos:column="39">&lt;<argument><name pos:line="37" pos:column="40">Language</name></argument>, <argument><name pos:line="37" pos:column="50">SrcMLFileUnitSetup</name></argument>&gt;</argument_list></name><argument_list pos:line="37" pos:column="69">()</argument_list></call> <block pos:line="37" pos:column="72">{
                <expr><block pos:line="38" pos:column="17">{<expr><name><name pos:line="38" pos:column="18">Language</name><op:operator pos:line="38" pos:column="26">.</op:operator><name pos:line="38" pos:column="27">CPlusPlus</name></name></expr><op:operator pos:line="38" pos:column="36">,</op:operator> <expr><op:operator pos:line="38" pos:column="38">new</op:operator> <call><name pos:line="38" pos:column="42">SrcMLFileUnitSetup</name><argument_list pos:line="38" pos:column="60">(<argument><expr><name><name pos:line="38" pos:column="61">Language</name><op:operator pos:line="38" pos:column="69">.</op:operator><name pos:line="38" pos:column="70">CPlusPlus</name></name></expr></argument>)</argument_list></call></expr>}</block></expr><op:operator pos:line="38" pos:column="81">,</op:operator>
                <expr><block pos:line="39" pos:column="17">{<expr><name><name pos:line="39" pos:column="18">Language</name><op:operator pos:line="39" pos:column="26">.</op:operator><name pos:line="39" pos:column="27">CSharp</name></name></expr><op:operator pos:line="39" pos:column="33">,</op:operator> <expr><op:operator pos:line="39" pos:column="35">new</op:operator> <call><name pos:line="39" pos:column="39">SrcMLFileUnitSetup</name><argument_list pos:line="39" pos:column="57">(<argument><expr><name><name pos:line="39" pos:column="58">Language</name><op:operator pos:line="39" pos:column="66">.</op:operator><name pos:line="39" pos:column="67">CSharp</name></name></expr></argument>)</argument_list></call></expr>}</block></expr><op:operator pos:line="39" pos:column="75">,</op:operator>
                <expr><block pos:line="40" pos:column="17">{<expr><name><name pos:line="40" pos:column="18">Language</name><op:operator pos:line="40" pos:column="26">.</op:operator><name pos:line="40" pos:column="27">Java</name></name></expr><op:operator pos:line="40" pos:column="31">,</op:operator> <expr><op:operator pos:line="40" pos:column="33">new</op:operator> <call><name pos:line="40" pos:column="37">SrcMLFileUnitSetup</name><argument_list pos:line="40" pos:column="55">(<argument><expr><name><name pos:line="40" pos:column="56">Language</name><op:operator pos:line="40" pos:column="64">.</op:operator><name pos:line="40" pos:column="65">Java</name></name></expr></argument>)</argument_list></call></expr>}</block></expr>
            }</block></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="44" pos:column="9">[<expr><call><name pos:line="44" pos:column="10">TestCase</name><argument_list pos:line="44" pos:column="18">(<argument><expr><name><name pos:line="44" pos:column="19">Language</name><op:operator pos:line="44" pos:column="27">.</op:operator><name pos:line="44" pos:column="28">CPlusPlus</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <attribute pos:line="45" pos:column="9">[<expr><call><name pos:line="45" pos:column="10">TestCase</name><argument_list pos:line="45" pos:column="18">(<argument><expr><name><name pos:line="45" pos:column="19">Language</name><op:operator pos:line="45" pos:column="27">.</op:operator><name pos:line="45" pos:column="28">CSharp</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <attribute pos:line="46" pos:column="9">[<expr><call><name pos:line="46" pos:column="10">TestCase</name><argument_list pos:line="46" pos:column="18">(<argument><expr><name><name pos:line="46" pos:column="19">Language</name><op:operator pos:line="46" pos:column="27">.</op:operator><name pos:line="46" pos:column="28">Java</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="47" pos:column="9">public</specifier> <name pos:line="47" pos:column="16">void</name></type> <name pos:line="47" pos:column="21">TestTwoVariableDeclarations</name><parameter_list pos:line="47" pos:column="48">(<param><decl><type><name pos:line="47" pos:column="49">Language</name></type> <name pos:line="47" pos:column="58">lang</name></decl></param>)</parameter_list> <block pos:line="47" pos:column="64">{
            <comment type="line" pos:line="48" pos:column="13">//int a,b;</comment>
            <decl_stmt><decl><type><name pos:line="49" pos:column="13">string</name></type> <name pos:line="49" pos:column="20">testXml</name> <init pos:line="49" pos:column="28">= <expr><lit:literal type="string" pos:line="49" pos:column="30">@"&lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;a&lt;/name&gt;&lt;/decl&gt;&lt;op:operator&gt;,&lt;/op:operator&gt;&lt;decl&gt;&lt;type ref=""prev"&gt;&lt;name&gt;b&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="50" pos:column="13">var</name></type> <name pos:line="50" pos:column="17">testUnit</name> <init pos:line="50" pos:column="26">= <expr><name><name pos:line="50" pos:column="28">fileSetup</name><index pos:line="50" pos:column="37">[<expr><name pos:line="50" pos:column="38">lang</name></expr>]</index></name><op:operator pos:line="50" pos:column="43">.</op:operator><call><name pos:line="50" pos:column="44">GetFileUnitForXmlSnippet</name><argument_list pos:line="50" pos:column="68">(<argument><expr><name pos:line="50" pos:column="69">testXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="50" pos:column="78">"test.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="52" pos:column="13">var</name></type> <name pos:line="52" pos:column="17">globalScope</name> <init pos:line="52" pos:column="29">= <expr><name><name pos:line="52" pos:column="31">codeParsers</name><index pos:line="52" pos:column="42">[<expr><name pos:line="52" pos:column="43">lang</name></expr>]</index></name><op:operator pos:line="52" pos:column="48">.</op:operator><call><name pos:line="52" pos:column="49">ParseFileUnit</name><argument_list pos:line="52" pos:column="62">(<argument><expr><name pos:line="52" pos:column="63">testUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="54" pos:column="13">var</name></type> <name pos:line="54" pos:column="17">declStmt</name> <init pos:line="54" pos:column="26">= <expr><call><name><name pos:line="54" pos:column="28">globalScope</name><op:operator pos:line="54" pos:column="39">.</op:operator><name pos:line="54" pos:column="40">ChildStatements</name><op:operator pos:line="54" pos:column="55">.</op:operator><name pos:line="54" pos:column="56">First</name></name><argument_list pos:line="54" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="55" pos:column="13">var</name></type> <name pos:line="55" pos:column="17">varDecls</name> <init pos:line="55" pos:column="26">= <expr><call><name><name pos:line="55" pos:column="28">declStmt</name><op:operator pos:line="55" pos:column="36">.</op:operator><name pos:line="55" pos:column="37">Content</name><op:operator pos:line="55" pos:column="44">.</op:operator><name pos:line="55" pos:column="45">Components</name><op:operator pos:line="55" pos:column="55">.</op:operator><name><name pos:line="55" pos:column="56">OfType</name><argument_list pos:line="55" pos:column="62">&lt;<argument><name pos:line="55" pos:column="63">VariableDeclaration</name></argument>&gt;</argument_list></name></name><argument_list pos:line="55" pos:column="83">()</argument_list></call><op:operator pos:line="55" pos:column="85">.</op:operator><call><name pos:line="55" pos:column="86">ToList</name><argument_list pos:line="55" pos:column="92">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="57" pos:column="13">Assert</name><op:operator pos:line="57" pos:column="19">.</op:operator><name pos:line="57" pos:column="20">AreEqual</name></name><argument_list pos:line="57" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="57" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="57" pos:column="32">varDecls</name><op:operator pos:line="57" pos:column="40">.</op:operator><name pos:line="57" pos:column="41">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="58" pos:column="13">Assert</name><op:operator pos:line="58" pos:column="19">.</op:operator><name pos:line="58" pos:column="20">AreEqual</name></name><argument_list pos:line="58" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="58" pos:column="29">"a"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="58" pos:column="34">varDecls</name><index pos:line="58" pos:column="42">[<expr><lit:literal type="number" pos:line="58" pos:column="43">0</lit:literal></expr>]</index></name><op:operator pos:line="58" pos:column="45">.</op:operator><name pos:line="58" pos:column="46">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="59" pos:column="13">Assert</name><op:operator pos:line="59" pos:column="19">.</op:operator><name pos:line="59" pos:column="20">AreEqual</name></name><argument_list pos:line="59" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="59" pos:column="29">"int"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="59" pos:column="36">varDecls</name><index pos:line="59" pos:column="44">[<expr><lit:literal type="number" pos:line="59" pos:column="45">0</lit:literal></expr>]</index></name><op:operator pos:line="59" pos:column="47">.</op:operator><name><name pos:line="59" pos:column="48">VariableType</name><op:operator pos:line="59" pos:column="60">.</op:operator><name pos:line="59" pos:column="61">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="60" pos:column="13">Assert</name><op:operator pos:line="60" pos:column="19">.</op:operator><name pos:line="60" pos:column="20">AreEqual</name></name><argument_list pos:line="60" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="60" pos:column="29">"b"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="60" pos:column="34">varDecls</name><index pos:line="60" pos:column="42">[<expr><lit:literal type="number" pos:line="60" pos:column="43">1</lit:literal></expr>]</index></name><op:operator pos:line="60" pos:column="45">.</op:operator><name pos:line="60" pos:column="46">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="61" pos:column="13">Assert</name><op:operator pos:line="61" pos:column="19">.</op:operator><name pos:line="61" pos:column="20">AreSame</name></name><argument_list pos:line="61" pos:column="27">(<argument><expr><name><name pos:line="61" pos:column="28">varDecls</name><index pos:line="61" pos:column="36">[<expr><lit:literal type="number" pos:line="61" pos:column="37">0</lit:literal></expr>]</index></name><op:operator pos:line="61" pos:column="39">.</op:operator><name pos:line="61" pos:column="40">VariableType</name></expr></argument>, <argument><expr><name><name pos:line="61" pos:column="54">varDecls</name><index pos:line="61" pos:column="62">[<expr><lit:literal type="number" pos:line="61" pos:column="63">1</lit:literal></expr>]</index></name><op:operator pos:line="61" pos:column="65">.</op:operator><name pos:line="61" pos:column="66">VariableType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        
        <function><type><attribute pos:line="65" pos:column="9">[<expr><call><name pos:line="65" pos:column="10">TestCase</name><argument_list pos:line="65" pos:column="18">(<argument><expr><name><name pos:line="65" pos:column="19">Language</name><op:operator pos:line="65" pos:column="27">.</op:operator><name pos:line="65" pos:column="28">CSharp</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <attribute pos:line="66" pos:column="9">[<expr><call><name pos:line="66" pos:column="10">TestCase</name><argument_list pos:line="66" pos:column="18">(<argument><expr><name><name pos:line="66" pos:column="19">Language</name><op:operator pos:line="66" pos:column="27">.</op:operator><name pos:line="66" pos:column="28">Java</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="67" pos:column="9">public</specifier> <name pos:line="67" pos:column="16">void</name></type> <name pos:line="67" pos:column="21">TestField</name><parameter_list pos:line="67" pos:column="30">(<param><decl><type><name pos:line="67" pos:column="31">Language</name></type> <name pos:line="67" pos:column="40">lang</name></decl></param>)</parameter_list> <block pos:line="67" pos:column="46">{
            <comment type="line" pos:line="68" pos:column="13">//class A {</comment>
            <comment type="line" pos:line="69" pos:column="13">//  int Foo;</comment>
            <comment type="line" pos:line="70" pos:column="13">//  Bar baz;</comment>
            <comment type="line" pos:line="71" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="72" pos:column="13">string</name></type> <name pos:line="72" pos:column="20">xml</name> <init pos:line="72" pos:column="24">= <expr><lit:literal type="string" pos:line="72" pos:column="26">@"&lt;class&gt;class &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{
  &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
  &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;Bar&lt;/name&gt;&lt;/type&gt; &lt;name&gt;baz&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="76" pos:column="13">var</name></type> <name pos:line="76" pos:column="17">xmlElement</name> <init pos:line="76" pos:column="28">= <expr><name><name pos:line="76" pos:column="30">fileSetup</name><index pos:line="76" pos:column="39">[<expr><name pos:line="76" pos:column="40">lang</name></expr>]</index></name><op:operator pos:line="76" pos:column="45">.</op:operator><call><name pos:line="76" pos:column="46">GetFileUnitForXmlSnippet</name><argument_list pos:line="76" pos:column="70">(<argument><expr><name pos:line="76" pos:column="71">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="76" pos:column="76">"test.code"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="78" pos:column="13">var</name></type> <name pos:line="78" pos:column="17">globalScope</name> <init pos:line="78" pos:column="29">= <expr><name><name pos:line="78" pos:column="31">codeParsers</name><index pos:line="78" pos:column="42">[<expr><name pos:line="78" pos:column="43">lang</name></expr>]</index></name><op:operator pos:line="78" pos:column="48">.</op:operator><call><name pos:line="78" pos:column="49">ParseFileUnit</name><argument_list pos:line="78" pos:column="62">(<argument><expr><name pos:line="78" pos:column="63">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="79" pos:column="13">var</name></type> <name pos:line="79" pos:column="17">declStmts</name> <init pos:line="79" pos:column="27">= <expr><call><name><name pos:line="79" pos:column="29">globalScope</name><op:operator pos:line="79" pos:column="40">.</op:operator><name><name pos:line="79" pos:column="41">GetDescendantsAndSelf</name><argument_list pos:line="79" pos:column="62">&lt;<argument><name pos:line="79" pos:column="63">DeclarationStatement</name></argument>&gt;</argument_list></name></name><argument_list pos:line="79" pos:column="84">()</argument_list></call><op:operator pos:line="79" pos:column="86">.</op:operator><call><name pos:line="79" pos:column="87">ToList</name><argument_list pos:line="79" pos:column="93">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="80" pos:column="13">Assert</name><op:operator pos:line="80" pos:column="19">.</op:operator><name pos:line="80" pos:column="20">AreEqual</name></name><argument_list pos:line="80" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="80" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="80" pos:column="32">declStmts</name><op:operator pos:line="80" pos:column="41">.</op:operator><name pos:line="80" pos:column="42">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <decl_stmt><decl><type><name pos:line="82" pos:column="13">var</name></type> <name pos:line="82" pos:column="17">foo</name> <init pos:line="82" pos:column="21">= <expr><name><name pos:line="82" pos:column="23">declStmts</name><index pos:line="82" pos:column="32">[<expr><lit:literal type="number" pos:line="82" pos:column="33">0</lit:literal></expr>]</index></name><op:operator pos:line="82" pos:column="35">.</op:operator><call><name><name pos:line="82" pos:column="36">Content</name><op:operator pos:line="82" pos:column="43">.</op:operator><name><name pos:line="82" pos:column="44">GetDescendantsAndSelf</name><argument_list pos:line="82" pos:column="65">&lt;<argument><name pos:line="82" pos:column="66">VariableDeclaration</name></argument>&gt;</argument_list></name></name><argument_list pos:line="82" pos:column="86">()</argument_list></call><op:operator pos:line="82" pos:column="88">.</op:operator><call><name pos:line="82" pos:column="89">FirstOrDefault</name><argument_list pos:line="82" pos:column="103">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="83" pos:column="13">Assert</name><op:operator pos:line="83" pos:column="19">.</op:operator><name pos:line="83" pos:column="20">IsNotNull</name></name><argument_list pos:line="83" pos:column="29">(<argument><expr><name pos:line="83" pos:column="30">foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="84" pos:column="13">Assert</name><op:operator pos:line="84" pos:column="19">.</op:operator><name pos:line="84" pos:column="20">AreEqual</name></name><argument_list pos:line="84" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="84" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="84" pos:column="36">foo</name><op:operator pos:line="84" pos:column="39">.</op:operator><name pos:line="84" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="85" pos:column="13">Assert</name><op:operator pos:line="85" pos:column="19">.</op:operator><name pos:line="85" pos:column="20">AreEqual</name></name><argument_list pos:line="85" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="85" pos:column="29">"int"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="85" pos:column="36">foo</name><op:operator pos:line="85" pos:column="39">.</op:operator><name pos:line="85" pos:column="40">VariableType</name><op:operator pos:line="85" pos:column="52">.</op:operator><name pos:line="85" pos:column="53">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="86" pos:column="13">Assert</name><op:operator pos:line="86" pos:column="19">.</op:operator><name pos:line="86" pos:column="20">AreEqual</name></name><argument_list pos:line="86" pos:column="28">(<argument><expr><name><name pos:line="86" pos:column="29">AccessModifier</name><op:operator pos:line="86" pos:column="43">.</op:operator><name pos:line="86" pos:column="44">None</name></name></expr></argument>, <argument><expr><name><name pos:line="86" pos:column="50">foo</name><op:operator pos:line="86" pos:column="53">.</op:operator><name pos:line="86" pos:column="54">Accessibility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="88" pos:column="13">var</name></type> <name pos:line="88" pos:column="17">baz</name> <init pos:line="88" pos:column="21">= <expr><name><name pos:line="88" pos:column="23">declStmts</name><index pos:line="88" pos:column="32">[<expr><lit:literal type="number" pos:line="88" pos:column="33">1</lit:literal></expr>]</index></name><op:operator pos:line="88" pos:column="35">.</op:operator><call><name><name pos:line="88" pos:column="36">Content</name><op:operator pos:line="88" pos:column="43">.</op:operator><name><name pos:line="88" pos:column="44">GetDescendantsAndSelf</name><argument_list pos:line="88" pos:column="65">&lt;<argument><name pos:line="88" pos:column="66">VariableDeclaration</name></argument>&gt;</argument_list></name></name><argument_list pos:line="88" pos:column="86">()</argument_list></call><op:operator pos:line="88" pos:column="88">.</op:operator><call><name pos:line="88" pos:column="89">FirstOrDefault</name><argument_list pos:line="88" pos:column="103">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="89" pos:column="13">Assert</name><op:operator pos:line="89" pos:column="19">.</op:operator><name pos:line="89" pos:column="20">IsNotNull</name></name><argument_list pos:line="89" pos:column="29">(<argument><expr><name pos:line="89" pos:column="30">baz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="90" pos:column="13">Assert</name><op:operator pos:line="90" pos:column="19">.</op:operator><name pos:line="90" pos:column="20">AreEqual</name></name><argument_list pos:line="90" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="90" pos:column="29">"baz"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="90" pos:column="36">baz</name><op:operator pos:line="90" pos:column="39">.</op:operator><name pos:line="90" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="91" pos:column="13">Assert</name><op:operator pos:line="91" pos:column="19">.</op:operator><name pos:line="91" pos:column="20">AreEqual</name></name><argument_list pos:line="91" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="91" pos:column="29">"Bar"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="91" pos:column="36">baz</name><op:operator pos:line="91" pos:column="39">.</op:operator><name pos:line="91" pos:column="40">VariableType</name><op:operator pos:line="91" pos:column="52">.</op:operator><name pos:line="91" pos:column="53">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="92" pos:column="13">Assert</name><op:operator pos:line="92" pos:column="19">.</op:operator><name pos:line="92" pos:column="20">AreEqual</name></name><argument_list pos:line="92" pos:column="28">(<argument><expr><name><name pos:line="92" pos:column="29">AccessModifier</name><op:operator pos:line="92" pos:column="43">.</op:operator><name pos:line="92" pos:column="44">None</name></name></expr></argument>, <argument><expr><name><name pos:line="92" pos:column="50">baz</name><op:operator pos:line="92" pos:column="53">.</op:operator><name pos:line="92" pos:column="54">Accessibility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="95" pos:column="9">[<expr><call><name pos:line="95" pos:column="10">TestCase</name><argument_list pos:line="95" pos:column="18">(<argument><expr><name><name pos:line="95" pos:column="19">Language</name><op:operator pos:line="95" pos:column="27">.</op:operator><name pos:line="95" pos:column="28">CPlusPlus</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="96" pos:column="9">public</specifier> <name pos:line="96" pos:column="16">void</name></type> <name pos:line="96" pos:column="21">TestField_Cpp</name><parameter_list pos:line="96" pos:column="34">(<param><decl><type><name pos:line="96" pos:column="35">Language</name></type> <name pos:line="96" pos:column="44">lang</name></decl></param>)</parameter_list> <block pos:line="96" pos:column="50">{
            <comment type="line" pos:line="97" pos:column="13">//class A {</comment>
            <comment type="line" pos:line="98" pos:column="13">//  int Foo;</comment>
            <comment type="line" pos:line="99" pos:column="13">//  Bar baz;</comment>
            <comment type="line" pos:line="100" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="101" pos:column="13">string</name></type> <name pos:line="101" pos:column="20">xml</name> <init pos:line="101" pos:column="24">= <expr><lit:literal type="string" pos:line="101" pos:column="26">@"&lt;class&gt;class &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{&lt;private type=""default&gt;
  &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
  &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;Bar&lt;/name&gt;&lt;/type&gt; &lt;name&gt;baz&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
&lt;/private&gt;}&lt;/block&gt;&lt;decl/&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="105" pos:column="13">var</name></type> <name pos:line="105" pos:column="17">xmlElement</name> <init pos:line="105" pos:column="28">= <expr><name><name pos:line="105" pos:column="30">fileSetup</name><index pos:line="105" pos:column="39">[<expr><name pos:line="105" pos:column="40">lang</name></expr>]</index></name><op:operator pos:line="105" pos:column="45">.</op:operator><call><name pos:line="105" pos:column="46">GetFileUnitForXmlSnippet</name><argument_list pos:line="105" pos:column="70">(<argument><expr><name pos:line="105" pos:column="71">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="105" pos:column="76">"test.code"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="107" pos:column="13">var</name></type> <name pos:line="107" pos:column="17">globalScope</name> <init pos:line="107" pos:column="29">= <expr><name><name pos:line="107" pos:column="31">codeParsers</name><index pos:line="107" pos:column="42">[<expr><name pos:line="107" pos:column="43">lang</name></expr>]</index></name><op:operator pos:line="107" pos:column="48">.</op:operator><call><name pos:line="107" pos:column="49">ParseFileUnit</name><argument_list pos:line="107" pos:column="62">(<argument><expr><name pos:line="107" pos:column="63">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="108" pos:column="13">var</name></type> <name pos:line="108" pos:column="17">declStmts</name> <init pos:line="108" pos:column="27">= <expr><call><name><name pos:line="108" pos:column="29">globalScope</name><op:operator pos:line="108" pos:column="40">.</op:operator><name><name pos:line="108" pos:column="41">GetDescendantsAndSelf</name><argument_list pos:line="108" pos:column="62">&lt;<argument><name pos:line="108" pos:column="63">DeclarationStatement</name></argument>&gt;</argument_list></name></name><argument_list pos:line="108" pos:column="84">()</argument_list></call><op:operator pos:line="108" pos:column="86">.</op:operator><call><name pos:line="108" pos:column="87">ToList</name><argument_list pos:line="108" pos:column="93">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="109" pos:column="13">Assert</name><op:operator pos:line="109" pos:column="19">.</op:operator><name pos:line="109" pos:column="20">AreEqual</name></name><argument_list pos:line="109" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="109" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="109" pos:column="32">declStmts</name><op:operator pos:line="109" pos:column="41">.</op:operator><name pos:line="109" pos:column="42">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <decl_stmt><decl><type><name pos:line="111" pos:column="13">var</name></type> <name pos:line="111" pos:column="17">foo</name> <init pos:line="111" pos:column="21">= <expr><name><name pos:line="111" pos:column="23">declStmts</name><index pos:line="111" pos:column="32">[<expr><lit:literal type="number" pos:line="111" pos:column="33">0</lit:literal></expr>]</index></name><op:operator pos:line="111" pos:column="35">.</op:operator><call><name><name pos:line="111" pos:column="36">Content</name><op:operator pos:line="111" pos:column="43">.</op:operator><name><name pos:line="111" pos:column="44">GetDescendantsAndSelf</name><argument_list pos:line="111" pos:column="65">&lt;<argument><name pos:line="111" pos:column="66">VariableDeclaration</name></argument>&gt;</argument_list></name></name><argument_list pos:line="111" pos:column="86">()</argument_list></call><op:operator pos:line="111" pos:column="88">.</op:operator><call><name pos:line="111" pos:column="89">FirstOrDefault</name><argument_list pos:line="111" pos:column="103">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="112" pos:column="13">Assert</name><op:operator pos:line="112" pos:column="19">.</op:operator><name pos:line="112" pos:column="20">IsNotNull</name></name><argument_list pos:line="112" pos:column="29">(<argument><expr><name pos:line="112" pos:column="30">foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="113" pos:column="13">Assert</name><op:operator pos:line="113" pos:column="19">.</op:operator><name pos:line="113" pos:column="20">AreEqual</name></name><argument_list pos:line="113" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="113" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="113" pos:column="36">foo</name><op:operator pos:line="113" pos:column="39">.</op:operator><name pos:line="113" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="114" pos:column="13">Assert</name><op:operator pos:line="114" pos:column="19">.</op:operator><name pos:line="114" pos:column="20">AreEqual</name></name><argument_list pos:line="114" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="114" pos:column="29">"int"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="114" pos:column="36">foo</name><op:operator pos:line="114" pos:column="39">.</op:operator><name pos:line="114" pos:column="40">VariableType</name><op:operator pos:line="114" pos:column="52">.</op:operator><name pos:line="114" pos:column="53">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="115" pos:column="13">Assert</name><op:operator pos:line="115" pos:column="19">.</op:operator><name pos:line="115" pos:column="20">AreEqual</name></name><argument_list pos:line="115" pos:column="28">(<argument><expr><name><name pos:line="115" pos:column="29">AccessModifier</name><op:operator pos:line="115" pos:column="43">.</op:operator><name pos:line="115" pos:column="44">None</name></name></expr></argument>, <argument><expr><name><name pos:line="115" pos:column="50">foo</name><op:operator pos:line="115" pos:column="53">.</op:operator><name pos:line="115" pos:column="54">Accessibility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="117" pos:column="13">var</name></type> <name pos:line="117" pos:column="17">baz</name> <init pos:line="117" pos:column="21">= <expr><name><name pos:line="117" pos:column="23">declStmts</name><index pos:line="117" pos:column="32">[<expr><lit:literal type="number" pos:line="117" pos:column="33">1</lit:literal></expr>]</index></name><op:operator pos:line="117" pos:column="35">.</op:operator><call><name><name pos:line="117" pos:column="36">Content</name><op:operator pos:line="117" pos:column="43">.</op:operator><name><name pos:line="117" pos:column="44">GetDescendantsAndSelf</name><argument_list pos:line="117" pos:column="65">&lt;<argument><name pos:line="117" pos:column="66">VariableDeclaration</name></argument>&gt;</argument_list></name></name><argument_list pos:line="117" pos:column="86">()</argument_list></call><op:operator pos:line="117" pos:column="88">.</op:operator><call><name pos:line="117" pos:column="89">FirstOrDefault</name><argument_list pos:line="117" pos:column="103">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="118" pos:column="13">Assert</name><op:operator pos:line="118" pos:column="19">.</op:operator><name pos:line="118" pos:column="20">IsNotNull</name></name><argument_list pos:line="118" pos:column="29">(<argument><expr><name pos:line="118" pos:column="30">baz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="119" pos:column="13">Assert</name><op:operator pos:line="119" pos:column="19">.</op:operator><name pos:line="119" pos:column="20">AreEqual</name></name><argument_list pos:line="119" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="119" pos:column="29">"baz"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="119" pos:column="36">baz</name><op:operator pos:line="119" pos:column="39">.</op:operator><name pos:line="119" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="120" pos:column="13">Assert</name><op:operator pos:line="120" pos:column="19">.</op:operator><name pos:line="120" pos:column="20">AreEqual</name></name><argument_list pos:line="120" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="120" pos:column="29">"Bar"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="120" pos:column="36">baz</name><op:operator pos:line="120" pos:column="39">.</op:operator><name pos:line="120" pos:column="40">VariableType</name><op:operator pos:line="120" pos:column="52">.</op:operator><name pos:line="120" pos:column="53">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="121" pos:column="13">Assert</name><op:operator pos:line="121" pos:column="19">.</op:operator><name pos:line="121" pos:column="20">AreEqual</name></name><argument_list pos:line="121" pos:column="28">(<argument><expr><name><name pos:line="121" pos:column="29">AccessModifier</name><op:operator pos:line="121" pos:column="43">.</op:operator><name pos:line="121" pos:column="44">None</name></name></expr></argument>, <argument><expr><name><name pos:line="121" pos:column="50">baz</name><op:operator pos:line="121" pos:column="53">.</op:operator><name pos:line="121" pos:column="54">Accessibility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="124" pos:column="9">[<expr><call><name pos:line="124" pos:column="10">TestCase</name><argument_list pos:line="124" pos:column="18">(<argument><expr><name><name pos:line="124" pos:column="19">Language</name><op:operator pos:line="124" pos:column="27">.</op:operator><name pos:line="124" pos:column="28">CSharp</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <attribute pos:line="125" pos:column="9">[<expr><call><name pos:line="125" pos:column="10">TestCase</name><argument_list pos:line="125" pos:column="18">(<argument><expr><name><name pos:line="125" pos:column="19">Language</name><op:operator pos:line="125" pos:column="27">.</op:operator><name pos:line="125" pos:column="28">Java</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="126" pos:column="9">public</specifier> <name pos:line="126" pos:column="16">void</name></type> <name pos:line="126" pos:column="21">TestMethodCallCreation</name><parameter_list pos:line="126" pos:column="43">(<param><decl><type><name pos:line="126" pos:column="44">Language</name></type> <name pos:line="126" pos:column="53">lang</name></decl></param>)</parameter_list> <block pos:line="126" pos:column="59">{
            <comment type="line" pos:line="127" pos:column="13">//// A.cs</comment>
            <comment type="line" pos:line="128" pos:column="13">//class A {</comment>
            <comment type="line" pos:line="129" pos:column="13">//    public int Execute() {</comment>
            <comment type="line" pos:line="130" pos:column="13">//        B b = new B();</comment>
            <comment type="line" pos:line="131" pos:column="13">//        for(int i = 0; i &lt; b.max(); i++) {</comment>
            <comment type="line" pos:line="132" pos:column="13">//            try {</comment>
            <comment type="line" pos:line="133" pos:column="13">//                PrintOutput(b.analyze(i));</comment>
            <comment type="line" pos:line="134" pos:column="13">//            } catch(Exception e) {</comment>
            <comment type="line" pos:line="135" pos:column="13">//                PrintError(e.ToString());</comment>
            <comment type="line" pos:line="136" pos:column="13">//            }</comment>
            <comment type="line" pos:line="137" pos:column="13">//        }</comment>
            <comment type="line" pos:line="138" pos:column="13">//    }</comment>
            <comment type="line" pos:line="139" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="140" pos:column="13">string</name></type> <name pos:line="140" pos:column="20">xml</name> <init pos:line="140" pos:column="24">= <expr><lit:literal type="string" pos:line="140" pos:column="26">@"&lt;class&gt;class &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{
    &lt;function&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Execute&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{
        &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;B&lt;/name&gt;&lt;/type&gt; &lt;name&gt;b&lt;/name&gt; =&lt;init&gt; &lt;expr&gt;&lt;op:operator&gt;new&lt;/op:operator&gt; &lt;call&gt;&lt;name&gt;B&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;&lt;/init&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
        &lt;for&gt;for(&lt;init&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;i&lt;/name&gt; =&lt;init&gt; &lt;expr&gt;&lt;lit:literal type=""number&gt;0&lt;/lit:literal&gt;&lt;/expr&gt;&lt;/init&gt;&lt;/decl&gt;;&lt;/init&gt; &lt;condition&gt;&lt;expr&gt;&lt;name&gt;i&lt;/name&gt; &lt;op:operator&gt;&amp;lt;&lt;/op:operator&gt; &lt;call&gt;&lt;name&gt;&lt;name&gt;b&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;max&lt;/name&gt;&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/condition&gt; &lt;incr&gt;&lt;expr&gt;&lt;name&gt;i&lt;/name&gt;&lt;op:operator&gt;++&lt;/op:operator&gt;&lt;/expr&gt;&lt;/incr&gt;) &lt;block&gt;{
            &lt;try&gt;try &lt;block&gt;{
                &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;PrintOutput&lt;/name&gt;&lt;argument_list&gt;(&lt;argument&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;&lt;name&gt;b&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;analyze&lt;/name&gt;&lt;/name&gt;&lt;argument_list&gt;(&lt;argument&gt;&lt;expr&gt;&lt;name&gt;i&lt;/name&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
            }&lt;/block&gt; &lt;catch&gt;catch(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;Exception&lt;/name&gt;&lt;/type&gt; &lt;name&gt;e&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;) &lt;block&gt;{
                &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;PrintError&lt;/name&gt;&lt;argument_list&gt;(&lt;argument&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;&lt;name&gt;e&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;ToString&lt;/name&gt;&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
            }&lt;/block&gt;&lt;/catch&gt;&lt;/try&gt;
        }&lt;/block&gt;&lt;/for&gt;
    }&lt;/block&gt;&lt;/function&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="152" pos:column="13">var</name></type> <name pos:line="152" pos:column="17">fileUnit</name> <init pos:line="152" pos:column="26">= <expr><name><name pos:line="152" pos:column="28">fileSetup</name><index pos:line="152" pos:column="37">[<expr><name pos:line="152" pos:column="38">lang</name></expr>]</index></name><op:operator pos:line="152" pos:column="43">.</op:operator><call><name pos:line="152" pos:column="44">GetFileUnitForXmlSnippet</name><argument_list pos:line="152" pos:column="68">(<argument><expr><name pos:line="152" pos:column="69">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="152" pos:column="74">"test.code"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="153" pos:column="13">var</name></type> <name pos:line="153" pos:column="17">globalScope</name> <init pos:line="153" pos:column="29">= <expr><name><name pos:line="153" pos:column="31">codeParsers</name><index pos:line="153" pos:column="42">[<expr><name pos:line="153" pos:column="43">lang</name></expr>]</index></name><op:operator pos:line="153" pos:column="48">.</op:operator><call><name pos:line="153" pos:column="49">ParseFileUnit</name><argument_list pos:line="153" pos:column="62">(<argument><expr><name pos:line="153" pos:column="63">fileUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="155" pos:column="13">var</name></type> <name pos:line="155" pos:column="17">executeMethod</name> <init pos:line="155" pos:column="31">= <expr><call><name><name pos:line="155" pos:column="33">globalScope</name><op:operator pos:line="155" pos:column="44">.</op:operator><name><name pos:line="155" pos:column="45">GetDescendants</name><argument_list pos:line="155" pos:column="59">&lt;<argument><name pos:line="155" pos:column="60">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="155" pos:column="77">()</argument_list></call><op:operator pos:line="155" pos:column="79">.</op:operator><call><name pos:line="155" pos:column="80">FirstOrDefault</name><argument_list pos:line="155" pos:column="94">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="156" pos:column="13">Assert</name><op:operator pos:line="156" pos:column="19">.</op:operator><name pos:line="156" pos:column="20">IsNotNull</name></name><argument_list pos:line="156" pos:column="29">(<argument><expr><name pos:line="156" pos:column="30">executeMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="158" pos:column="13">var</name></type> <name pos:line="158" pos:column="17">callToNewB</name> <init pos:line="158" pos:column="28">= <expr><call><name><name pos:line="158" pos:column="30">executeMethod</name><op:operator pos:line="158" pos:column="43">.</op:operator><name pos:line="158" pos:column="44">ChildStatements</name><op:operator pos:line="158" pos:column="59">.</op:operator><name pos:line="158" pos:column="60">First</name></name><argument_list pos:line="158" pos:column="65">()</argument_list></call><op:operator pos:line="158" pos:column="67">.</op:operator><call><name><name pos:line="158" pos:column="68">Content</name><op:operator pos:line="158" pos:column="75">.</op:operator><name><name pos:line="158" pos:column="76">GetDescendantsAndSelf</name><argument_list pos:line="158" pos:column="97">&lt;<argument><name pos:line="158" pos:column="98">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="158" pos:column="109">()</argument_list></call><op:operator pos:line="158" pos:column="111">.</op:operator><call><name pos:line="158" pos:column="112">FirstOrDefault</name><argument_list pos:line="158" pos:column="126">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="159" pos:column="13">Assert</name><op:operator pos:line="159" pos:column="19">.</op:operator><name pos:line="159" pos:column="20">IsNotNull</name></name><argument_list pos:line="159" pos:column="29">(<argument><expr><name pos:line="159" pos:column="30">callToNewB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="160" pos:column="13">Assert</name><op:operator pos:line="160" pos:column="19">.</op:operator><name pos:line="160" pos:column="20">AreEqual</name></name><argument_list pos:line="160" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="160" pos:column="29">"B"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="160" pos:column="34">callToNewB</name><op:operator pos:line="160" pos:column="44">.</op:operator><name pos:line="160" pos:column="45">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="161" pos:column="13">Assert</name><op:operator pos:line="161" pos:column="19">.</op:operator><name pos:line="161" pos:column="20">IsTrue</name></name><argument_list pos:line="161" pos:column="26">(<argument><expr><name><name pos:line="161" pos:column="27">callToNewB</name><op:operator pos:line="161" pos:column="37">.</op:operator><name pos:line="161" pos:column="38">IsConstructor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="162" pos:column="13">Assert</name><op:operator pos:line="162" pos:column="19">.</op:operator><name pos:line="162" pos:column="20">IsFalse</name></name><argument_list pos:line="162" pos:column="27">(<argument><expr><name><name pos:line="162" pos:column="28">callToNewB</name><op:operator pos:line="162" pos:column="38">.</op:operator><name pos:line="162" pos:column="39">IsDestructor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="164" pos:column="13">var</name></type> <name pos:line="164" pos:column="17">forStatement</name> <init pos:line="164" pos:column="30">= <expr><call><name><name pos:line="164" pos:column="32">executeMethod</name><op:operator pos:line="164" pos:column="45">.</op:operator><name><name pos:line="164" pos:column="46">GetDescendants</name><argument_list pos:line="164" pos:column="60">&lt;<argument><name pos:line="164" pos:column="61">ForStatement</name></argument>&gt;</argument_list></name></name><argument_list pos:line="164" pos:column="74">()</argument_list></call><op:operator pos:line="164" pos:column="76">.</op:operator><call><name pos:line="164" pos:column="77">FirstOrDefault</name><argument_list pos:line="164" pos:column="91">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="165" pos:column="13">Assert</name><op:operator pos:line="165" pos:column="19">.</op:operator><name pos:line="165" pos:column="20">IsNotNull</name></name><argument_list pos:line="165" pos:column="29">(<argument><expr><name pos:line="165" pos:column="30">forStatement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="166" pos:column="13">var</name></type> <name pos:line="166" pos:column="17">callToMax</name> <init pos:line="166" pos:column="27">= <expr><call><name><name pos:line="166" pos:column="29">forStatement</name><op:operator pos:line="166" pos:column="41">.</op:operator><name pos:line="166" pos:column="42">Condition</name><op:operator pos:line="166" pos:column="51">.</op:operator><name><name pos:line="166" pos:column="52">GetDescendantsAndSelf</name><argument_list pos:line="166" pos:column="73">&lt;<argument><name pos:line="166" pos:column="74">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="166" pos:column="85">()</argument_list></call><op:operator pos:line="166" pos:column="87">.</op:operator><call><name pos:line="166" pos:column="88">FirstOrDefault</name><argument_list pos:line="166" pos:column="102">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="167" pos:column="13">Assert</name><op:operator pos:line="167" pos:column="19">.</op:operator><name pos:line="167" pos:column="20">IsNotNull</name></name><argument_list pos:line="167" pos:column="29">(<argument><expr><name pos:line="167" pos:column="30">callToMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="168" pos:column="13">Assert</name><op:operator pos:line="168" pos:column="19">.</op:operator><name pos:line="168" pos:column="20">AreEqual</name></name><argument_list pos:line="168" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="168" pos:column="29">"max"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="168" pos:column="36">callToMax</name><op:operator pos:line="168" pos:column="45">.</op:operator><name pos:line="168" pos:column="46">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="169" pos:column="13">Assert</name><op:operator pos:line="169" pos:column="19">.</op:operator><name pos:line="169" pos:column="20">IsFalse</name></name><argument_list pos:line="169" pos:column="27">(<argument><expr><name><name pos:line="169" pos:column="28">callToMax</name><op:operator pos:line="169" pos:column="37">.</op:operator><name pos:line="169" pos:column="38">IsDestructor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="170" pos:column="13">Assert</name><op:operator pos:line="170" pos:column="19">.</op:operator><name pos:line="170" pos:column="20">IsFalse</name></name><argument_list pos:line="170" pos:column="27">(<argument><expr><name><name pos:line="170" pos:column="28">callToMax</name><op:operator pos:line="170" pos:column="37">.</op:operator><name pos:line="170" pos:column="38">IsConstructor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="172" pos:column="13">var</name></type> <name pos:line="172" pos:column="17">tryStatement</name> <init pos:line="172" pos:column="30">= <expr><call><name><name pos:line="172" pos:column="32">forStatement</name><op:operator pos:line="172" pos:column="44">.</op:operator><name><name pos:line="172" pos:column="45">GetDescendants</name><argument_list pos:line="172" pos:column="59">&lt;<argument><name pos:line="172" pos:column="60">TryStatement</name></argument>&gt;</argument_list></name></name><argument_list pos:line="172" pos:column="73">()</argument_list></call><op:operator pos:line="172" pos:column="75">.</op:operator><call><name pos:line="172" pos:column="76">FirstOrDefault</name><argument_list pos:line="172" pos:column="90">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="173" pos:column="13">Assert</name><op:operator pos:line="173" pos:column="19">.</op:operator><name pos:line="173" pos:column="20">IsNotNull</name></name><argument_list pos:line="173" pos:column="29">(<argument><expr><name pos:line="173" pos:column="30">tryStatement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="175" pos:column="13">var</name></type> <name pos:line="175" pos:column="17">callToPrintOutput</name> <init pos:line="175" pos:column="35">= <expr><call><name><name pos:line="175" pos:column="37">tryStatement</name><op:operator pos:line="175" pos:column="49">.</op:operator><name pos:line="175" pos:column="50">ChildStatements</name><op:operator pos:line="175" pos:column="65">.</op:operator><name pos:line="175" pos:column="66">First</name></name><argument_list pos:line="175" pos:column="71">()</argument_list></call><op:operator pos:line="175" pos:column="73">.</op:operator><name pos:line="175" pos:column="74">Content</name> <op:operator pos:line="175" pos:column="82">as</op:operator> <name pos:line="175" pos:column="85">MethodCall</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="176" pos:column="13">Assert</name><op:operator pos:line="176" pos:column="19">.</op:operator><name pos:line="176" pos:column="20">IsNotNull</name></name><argument_list pos:line="176" pos:column="29">(<argument><expr><name pos:line="176" pos:column="30">callToPrintOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="177" pos:column="13">Assert</name><op:operator pos:line="177" pos:column="19">.</op:operator><name pos:line="177" pos:column="20">AreEqual</name></name><argument_list pos:line="177" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="177" pos:column="29">"PrintOutput"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="177" pos:column="44">callToPrintOutput</name><op:operator pos:line="177" pos:column="61">.</op:operator><name pos:line="177" pos:column="62">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="178" pos:column="13">Assert</name><op:operator pos:line="178" pos:column="19">.</op:operator><name pos:line="178" pos:column="20">IsFalse</name></name><argument_list pos:line="178" pos:column="27">(<argument><expr><name><name pos:line="178" pos:column="28">callToPrintOutput</name><op:operator pos:line="178" pos:column="45">.</op:operator><name pos:line="178" pos:column="46">IsDestructor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="179" pos:column="13">Assert</name><op:operator pos:line="179" pos:column="19">.</op:operator><name pos:line="179" pos:column="20">IsFalse</name></name><argument_list pos:line="179" pos:column="27">(<argument><expr><name><name pos:line="179" pos:column="28">callToPrintOutput</name><op:operator pos:line="179" pos:column="45">.</op:operator><name pos:line="179" pos:column="46">IsConstructor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="181" pos:column="13">var</name></type> <name pos:line="181" pos:column="17">callToAnalyze</name> <init pos:line="181" pos:column="31">= <expr><call><name><name pos:line="181" pos:column="33">callToPrintOutput</name><op:operator pos:line="181" pos:column="50">.</op:operator><name pos:line="181" pos:column="51">Arguments</name><op:operator pos:line="181" pos:column="60">.</op:operator><name pos:line="181" pos:column="61">First</name></name><argument_list pos:line="181" pos:column="66">()</argument_list></call><op:operator pos:line="181" pos:column="68">.</op:operator><call><name><name pos:line="181" pos:column="69">GetDescendantsAndSelf</name><argument_list pos:line="181" pos:column="90">&lt;<argument><name pos:line="181" pos:column="91">MethodCall</name></argument>&gt;</argument_list></name><argument_list pos:line="181" pos:column="102">()</argument_list></call><op:operator pos:line="181" pos:column="104">.</op:operator><call><name pos:line="181" pos:column="105">First</name><argument_list pos:line="181" pos:column="110">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="182" pos:column="13">Assert</name><op:operator pos:line="182" pos:column="19">.</op:operator><name pos:line="182" pos:column="20">IsNotNull</name></name><argument_list pos:line="182" pos:column="29">(<argument><expr><name pos:line="182" pos:column="30">callToAnalyze</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="183" pos:column="13">Assert</name><op:operator pos:line="183" pos:column="19">.</op:operator><name pos:line="183" pos:column="20">AreEqual</name></name><argument_list pos:line="183" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="183" pos:column="29">"analyze"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="183" pos:column="40">callToAnalyze</name><op:operator pos:line="183" pos:column="53">.</op:operator><name pos:line="183" pos:column="54">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="184" pos:column="13">Assert</name><op:operator pos:line="184" pos:column="19">.</op:operator><name pos:line="184" pos:column="20">IsFalse</name></name><argument_list pos:line="184" pos:column="27">(<argument><expr><name><name pos:line="184" pos:column="28">callToAnalyze</name><op:operator pos:line="184" pos:column="41">.</op:operator><name pos:line="184" pos:column="42">IsDestructor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="185" pos:column="13">Assert</name><op:operator pos:line="185" pos:column="19">.</op:operator><name pos:line="185" pos:column="20">IsFalse</name></name><argument_list pos:line="185" pos:column="27">(<argument><expr><name><name pos:line="185" pos:column="28">callToAnalyze</name><op:operator pos:line="185" pos:column="41">.</op:operator><name pos:line="185" pos:column="42">IsConstructor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="187" pos:column="13">var</name></type> <name pos:line="187" pos:column="17">catchStatement</name> <init pos:line="187" pos:column="32">= <expr><call><name><name pos:line="187" pos:column="34">tryStatement</name><op:operator pos:line="187" pos:column="46">.</op:operator><name pos:line="187" pos:column="47">CatchStatements</name><op:operator pos:line="187" pos:column="62">.</op:operator><name pos:line="187" pos:column="63">FirstOrDefault</name></name><argument_list pos:line="187" pos:column="77">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="188" pos:column="13">Assert</name><op:operator pos:line="188" pos:column="19">.</op:operator><name pos:line="188" pos:column="20">IsNotNull</name></name><argument_list pos:line="188" pos:column="29">(<argument><expr><name pos:line="188" pos:column="30">catchStatement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="190" pos:column="13">var</name></type> <name pos:line="190" pos:column="17">callToPrintError</name> <init pos:line="190" pos:column="34">= <expr><call><name><name pos:line="190" pos:column="36">catchStatement</name><op:operator pos:line="190" pos:column="50">.</op:operator><name pos:line="190" pos:column="51">ChildStatements</name><op:operator pos:line="190" pos:column="66">.</op:operator><name pos:line="190" pos:column="67">First</name></name><argument_list pos:line="190" pos:column="72">()</argument_list></call><op:operator pos:line="190" pos:column="74">.</op:operator><name pos:line="190" pos:column="75">Content</name> <op:operator pos:line="190" pos:column="83">as</op:operator> <name pos:line="190" pos:column="86">MethodCall</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="191" pos:column="13">Assert</name><op:operator pos:line="191" pos:column="19">.</op:operator><name pos:line="191" pos:column="20">IsNotNull</name></name><argument_list pos:line="191" pos:column="29">(<argument><expr><name pos:line="191" pos:column="30">callToPrintError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="192" pos:column="13">Assert</name><op:operator pos:line="192" pos:column="19">.</op:operator><name pos:line="192" pos:column="20">AreEqual</name></name><argument_list pos:line="192" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="192" pos:column="29">"PrintError"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="192" pos:column="43">callToPrintError</name><op:operator pos:line="192" pos:column="59">.</op:operator><name pos:line="192" pos:column="60">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="193" pos:column="13">Assert</name><op:operator pos:line="193" pos:column="19">.</op:operator><name pos:line="193" pos:column="20">IsFalse</name></name><argument_list pos:line="193" pos:column="27">(<argument><expr><name><name pos:line="193" pos:column="28">callToPrintError</name><op:operator pos:line="193" pos:column="44">.</op:operator><name pos:line="193" pos:column="45">IsDestructor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="194" pos:column="13">Assert</name><op:operator pos:line="194" pos:column="19">.</op:operator><name pos:line="194" pos:column="20">IsFalse</name></name><argument_list pos:line="194" pos:column="27">(<argument><expr><name><name pos:line="194" pos:column="28">callToPrintError</name><op:operator pos:line="194" pos:column="44">.</op:operator><name pos:line="194" pos:column="45">IsConstructor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="196" pos:column="13">var</name></type> <name pos:line="196" pos:column="17">callToToString</name> <init pos:line="196" pos:column="32">= <expr><call><name><name pos:line="196" pos:column="34">callToPrintError</name><op:operator pos:line="196" pos:column="50">.</op:operator><name pos:line="196" pos:column="51">Arguments</name><op:operator pos:line="196" pos:column="60">.</op:operator><name pos:line="196" pos:column="61">First</name></name><argument_list pos:line="196" pos:column="66">()</argument_list></call><op:operator pos:line="196" pos:column="68">.</op:operator><call><name><name pos:line="196" pos:column="69">GetDescendantsAndSelf</name><argument_list pos:line="196" pos:column="90">&lt;<argument><name pos:line="196" pos:column="91">MethodCall</name></argument>&gt;</argument_list></name><argument_list pos:line="196" pos:column="102">()</argument_list></call><op:operator pos:line="196" pos:column="104">.</op:operator><call><name pos:line="196" pos:column="105">First</name><argument_list pos:line="196" pos:column="110">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="197" pos:column="13">Assert</name><op:operator pos:line="197" pos:column="19">.</op:operator><name pos:line="197" pos:column="20">IsNotNull</name></name><argument_list pos:line="197" pos:column="29">(<argument><expr><name pos:line="197" pos:column="30">callToToString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="198" pos:column="13">Assert</name><op:operator pos:line="198" pos:column="19">.</op:operator><name pos:line="198" pos:column="20">AreEqual</name></name><argument_list pos:line="198" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="198" pos:column="29">"ToString"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="198" pos:column="41">callToToString</name><op:operator pos:line="198" pos:column="55">.</op:operator><name pos:line="198" pos:column="56">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="199" pos:column="13">Assert</name><op:operator pos:line="199" pos:column="19">.</op:operator><name pos:line="199" pos:column="20">IsFalse</name></name><argument_list pos:line="199" pos:column="27">(<argument><expr><name><name pos:line="199" pos:column="28">callToToString</name><op:operator pos:line="199" pos:column="42">.</op:operator><name pos:line="199" pos:column="43">IsDestructor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="200" pos:column="13">Assert</name><op:operator pos:line="200" pos:column="19">.</op:operator><name pos:line="200" pos:column="20">IsFalse</name></name><argument_list pos:line="200" pos:column="27">(<argument><expr><name><name pos:line="200" pos:column="28">callToToString</name><op:operator pos:line="200" pos:column="42">.</op:operator><name pos:line="200" pos:column="43">IsConstructor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="203" pos:column="9">[<expr><call><name pos:line="203" pos:column="10">TestCase</name><argument_list pos:line="203" pos:column="18">(<argument><expr><name><name pos:line="203" pos:column="19">Language</name><op:operator pos:line="203" pos:column="27">.</op:operator><name pos:line="203" pos:column="28">CPlusPlus</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <attribute pos:line="204" pos:column="9">[<expr><call><name pos:line="204" pos:column="10">TestCase</name><argument_list pos:line="204" pos:column="18">(<argument><expr><name><name pos:line="204" pos:column="19">Language</name><op:operator pos:line="204" pos:column="27">.</op:operator><name pos:line="204" pos:column="28">CSharp</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <attribute pos:line="205" pos:column="9">[<expr><call><name pos:line="205" pos:column="10">TestCase</name><argument_list pos:line="205" pos:column="18">(<argument><expr><name><name pos:line="205" pos:column="19">Language</name><op:operator pos:line="205" pos:column="27">.</op:operator><name pos:line="205" pos:column="28">Java</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="206" pos:column="9">public</specifier> <name pos:line="206" pos:column="16">void</name></type> <name pos:line="206" pos:column="21">TestSimpleExpression</name><parameter_list pos:line="206" pos:column="41">(<param><decl><type><name pos:line="206" pos:column="42">Language</name></type> <name pos:line="206" pos:column="51">lang</name></decl></param>)</parameter_list> <block pos:line="206" pos:column="57">{
            <comment type="line" pos:line="207" pos:column="13">//foo = 2+3;</comment>
            <decl_stmt><decl><type><name pos:line="208" pos:column="13">string</name></type> <name pos:line="208" pos:column="20">xml</name> <init pos:line="208" pos:column="24">= <expr><lit:literal type="string" pos:line="208" pos:column="26">@"&lt;expr_stmt&gt;&lt;expr&gt;&lt;name&gt;foo&lt;/name&gt; &lt;op:operator&gt;=&lt;/op:operator&gt; &lt;lit:literal type=""number&gt;2&lt;/lit:literal&gt;&lt;op:operator&gt;+&lt;/op:operator&gt;&lt;lit:literal type=""number&gt;3&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="209" pos:column="13">var</name></type> <name pos:line="209" pos:column="17">xmlElement</name> <init pos:line="209" pos:column="28">= <expr><name><name pos:line="209" pos:column="30">fileSetup</name><index pos:line="209" pos:column="39">[<expr><name pos:line="209" pos:column="40">lang</name></expr>]</index></name><op:operator pos:line="209" pos:column="45">.</op:operator><call><name pos:line="209" pos:column="46">GetFileUnitForXmlSnippet</name><argument_list pos:line="209" pos:column="70">(<argument><expr><name pos:line="209" pos:column="71">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="209" pos:column="76">"test.code"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="211" pos:column="13">var</name></type> <name pos:line="211" pos:column="17">globalScope</name> <init pos:line="211" pos:column="29">= <expr><name><name pos:line="211" pos:column="31">codeParsers</name><index pos:line="211" pos:column="42">[<expr><name pos:line="211" pos:column="43">lang</name></expr>]</index></name><op:operator pos:line="211" pos:column="48">.</op:operator><call><name pos:line="211" pos:column="49">ParseFileUnit</name><argument_list pos:line="211" pos:column="62">(<argument><expr><name pos:line="211" pos:column="63">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="212" pos:column="13">Assert</name><op:operator pos:line="212" pos:column="19">.</op:operator><name pos:line="212" pos:column="20">AreEqual</name></name><argument_list pos:line="212" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="212" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="212" pos:column="32">globalScope</name><op:operator pos:line="212" pos:column="43">.</op:operator><name pos:line="212" pos:column="44">ChildStatements</name><op:operator pos:line="212" pos:column="59">.</op:operator><name pos:line="212" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="213" pos:column="13">var</name></type> <name pos:line="213" pos:column="17">exp</name> <init pos:line="213" pos:column="21">= <expr><name><name pos:line="213" pos:column="23">globalScope</name><op:operator pos:line="213" pos:column="34">.</op:operator><name pos:line="213" pos:column="35">ChildStatements</name><index pos:line="213" pos:column="50">[<expr><lit:literal type="number" pos:line="213" pos:column="51">0</lit:literal></expr>]</index></name><op:operator pos:line="213" pos:column="53">.</op:operator><name pos:line="213" pos:column="54">Content</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="214" pos:column="13">Assert</name><op:operator pos:line="214" pos:column="19">.</op:operator><name pos:line="214" pos:column="20">IsNotNull</name></name><argument_list pos:line="214" pos:column="29">(<argument><expr><name pos:line="214" pos:column="30">exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="215" pos:column="13">Assert</name><op:operator pos:line="215" pos:column="19">.</op:operator><name pos:line="215" pos:column="20">AreEqual</name></name><argument_list pos:line="215" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="215" pos:column="29">5</lit:literal></expr></argument>, <argument><expr><name><name pos:line="215" pos:column="32">exp</name><op:operator pos:line="215" pos:column="35">.</op:operator><name pos:line="215" pos:column="36">Components</name><op:operator pos:line="215" pos:column="46">.</op:operator><name pos:line="215" pos:column="47">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="216" pos:column="13">var</name></type> <name pos:line="216" pos:column="17">foo</name> <init pos:line="216" pos:column="21">= <expr><name><name pos:line="216" pos:column="23">exp</name><op:operator pos:line="216" pos:column="26">.</op:operator><name pos:line="216" pos:column="27">Components</name><index pos:line="216" pos:column="37">[<expr><lit:literal type="number" pos:line="216" pos:column="38">0</lit:literal></expr>]</index></name> <op:operator pos:line="216" pos:column="41">as</op:operator> <name pos:line="216" pos:column="44">NameUse</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="217" pos:column="13">Assert</name><op:operator pos:line="217" pos:column="19">.</op:operator><name pos:line="217" pos:column="20">IsNotNull</name></name><argument_list pos:line="217" pos:column="29">(<argument><expr><name pos:line="217" pos:column="30">foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="218" pos:column="13">Assert</name><op:operator pos:line="218" pos:column="19">.</op:operator><name pos:line="218" pos:column="20">AreEqual</name></name><argument_list pos:line="218" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="218" pos:column="29">"foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="218" pos:column="36">foo</name><op:operator pos:line="218" pos:column="39">.</op:operator><name pos:line="218" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="219" pos:column="13">var</name></type> <name pos:line="219" pos:column="17">equals</name> <init pos:line="219" pos:column="24">= <expr><name><name pos:line="219" pos:column="26">exp</name><op:operator pos:line="219" pos:column="29">.</op:operator><name pos:line="219" pos:column="30">Components</name><index pos:line="219" pos:column="40">[<expr><lit:literal type="number" pos:line="219" pos:column="41">1</lit:literal></expr>]</index></name> <op:operator pos:line="219" pos:column="44">as</op:operator> <name pos:line="219" pos:column="47">OperatorUse</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="220" pos:column="13">Assert</name><op:operator pos:line="220" pos:column="19">.</op:operator><name pos:line="220" pos:column="20">IsNotNull</name></name><argument_list pos:line="220" pos:column="29">(<argument><expr><name pos:line="220" pos:column="30">equals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="221" pos:column="13">Assert</name><op:operator pos:line="221" pos:column="19">.</op:operator><name pos:line="221" pos:column="20">AreEqual</name></name><argument_list pos:line="221" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="221" pos:column="29">"="</lit:literal></expr></argument>, <argument><expr><name><name pos:line="221" pos:column="34">equals</name><op:operator pos:line="221" pos:column="40">.</op:operator><name pos:line="221" pos:column="41">Text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="222" pos:column="13">var</name></type> <name pos:line="222" pos:column="17">two</name> <init pos:line="222" pos:column="21">= <expr><name><name pos:line="222" pos:column="23">exp</name><op:operator pos:line="222" pos:column="26">.</op:operator><name pos:line="222" pos:column="27">Components</name><index pos:line="222" pos:column="37">[<expr><lit:literal type="number" pos:line="222" pos:column="38">2</lit:literal></expr>]</index></name> <op:operator pos:line="222" pos:column="41">as</op:operator> <name pos:line="222" pos:column="44">LiteralUse</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="223" pos:column="13">Assert</name><op:operator pos:line="223" pos:column="19">.</op:operator><name pos:line="223" pos:column="20">IsNotNull</name></name><argument_list pos:line="223" pos:column="29">(<argument><expr><name pos:line="223" pos:column="30">two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="224" pos:column="13">Assert</name><op:operator pos:line="224" pos:column="19">.</op:operator><name pos:line="224" pos:column="20">AreEqual</name></name><argument_list pos:line="224" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="224" pos:column="29">"2"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="224" pos:column="34">two</name><op:operator pos:line="224" pos:column="37">.</op:operator><name pos:line="224" pos:column="38">Text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="225" pos:column="13">var</name></type> <name pos:line="225" pos:column="17">plus</name> <init pos:line="225" pos:column="22">= <expr><name><name pos:line="225" pos:column="24">exp</name><op:operator pos:line="225" pos:column="27">.</op:operator><name pos:line="225" pos:column="28">Components</name><index pos:line="225" pos:column="38">[<expr><lit:literal type="number" pos:line="225" pos:column="39">3</lit:literal></expr>]</index></name> <op:operator pos:line="225" pos:column="42">as</op:operator> <name pos:line="225" pos:column="45">OperatorUse</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="226" pos:column="13">Assert</name><op:operator pos:line="226" pos:column="19">.</op:operator><name pos:line="226" pos:column="20">IsNotNull</name></name><argument_list pos:line="226" pos:column="29">(<argument><expr><name pos:line="226" pos:column="30">plus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="227" pos:column="13">Assert</name><op:operator pos:line="227" pos:column="19">.</op:operator><name pos:line="227" pos:column="20">AreEqual</name></name><argument_list pos:line="227" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="227" pos:column="29">"+"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="227" pos:column="34">plus</name><op:operator pos:line="227" pos:column="38">.</op:operator><name pos:line="227" pos:column="39">Text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="228" pos:column="13">var</name></type> <name pos:line="228" pos:column="17">three</name> <init pos:line="228" pos:column="23">= <expr><name><name pos:line="228" pos:column="25">exp</name><op:operator pos:line="228" pos:column="28">.</op:operator><name pos:line="228" pos:column="29">Components</name><index pos:line="228" pos:column="39">[<expr><lit:literal type="number" pos:line="228" pos:column="40">4</lit:literal></expr>]</index></name> <op:operator pos:line="228" pos:column="43">as</op:operator> <name pos:line="228" pos:column="46">LiteralUse</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="229" pos:column="13">Assert</name><op:operator pos:line="229" pos:column="19">.</op:operator><name pos:line="229" pos:column="20">IsNotNull</name></name><argument_list pos:line="229" pos:column="29">(<argument><expr><name pos:line="229" pos:column="30">three</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="230" pos:column="13">Assert</name><op:operator pos:line="230" pos:column="19">.</op:operator><name pos:line="230" pos:column="20">AreEqual</name></name><argument_list pos:line="230" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="230" pos:column="29">"3"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="230" pos:column="34">three</name><op:operator pos:line="230" pos:column="39">.</op:operator><name pos:line="230" pos:column="40">Text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="233" pos:column="9">[<expr><call><name pos:line="233" pos:column="10">TestCase</name><argument_list pos:line="233" pos:column="18">(<argument><expr><name><name pos:line="233" pos:column="19">Language</name><op:operator pos:line="233" pos:column="27">.</op:operator><name pos:line="233" pos:column="28">CPlusPlus</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <attribute pos:line="234" pos:column="9">[<expr><call><name pos:line="234" pos:column="10">TestCase</name><argument_list pos:line="234" pos:column="18">(<argument><expr><name><name pos:line="234" pos:column="19">Language</name><op:operator pos:line="234" pos:column="27">.</op:operator><name pos:line="234" pos:column="28">CSharp</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <attribute pos:line="235" pos:column="9">[<expr><call><name pos:line="235" pos:column="10">TestCase</name><argument_list pos:line="235" pos:column="18">(<argument><expr><name><name pos:line="235" pos:column="19">Language</name><op:operator pos:line="235" pos:column="27">.</op:operator><name pos:line="235" pos:column="28">Java</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="236" pos:column="9">public</specifier> <name pos:line="236" pos:column="16">void</name></type> <name pos:line="236" pos:column="21">TestSubExpression</name><parameter_list pos:line="236" pos:column="38">(<param><decl><type><name pos:line="236" pos:column="39">Language</name></type> <name pos:line="236" pos:column="48">lang</name></decl></param>)</parameter_list> <block pos:line="236" pos:column="54">{
            <comment type="line" pos:line="237" pos:column="13">//foo = (2+3)*5;</comment>
            <decl_stmt><decl><type><name pos:line="238" pos:column="13">string</name></type> <name pos:line="238" pos:column="20">xml</name> <init pos:line="238" pos:column="24">= <expr><lit:literal type="string" pos:line="238" pos:column="26">@"&lt;expr_stmt&gt;&lt;expr&gt;&lt;name&gt;foo&lt;/name&gt; &lt;op:operator&gt;=&lt;/op:operator&gt; &lt;op:operator&gt;(&lt;/op:operator&gt;&lt;lit:literal type=""number&gt;2&lt;/lit:literal&gt;&lt;op:operator&gt;+&lt;/op:operator&gt;&lt;lit:literal type=""number&gt;3&lt;/lit:literal&gt;&lt;op:operator&gt;)&lt;/op:operator&gt;&lt;op:operator&gt;*&lt;/op:operator&gt;&lt;lit:literal type=""number&gt;5&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="239" pos:column="13">var</name></type> <name pos:line="239" pos:column="17">xmlElement</name> <init pos:line="239" pos:column="28">= <expr><name><name pos:line="239" pos:column="30">fileSetup</name><index pos:line="239" pos:column="39">[<expr><name pos:line="239" pos:column="40">lang</name></expr>]</index></name><op:operator pos:line="239" pos:column="45">.</op:operator><call><name pos:line="239" pos:column="46">GetFileUnitForXmlSnippet</name><argument_list pos:line="239" pos:column="70">(<argument><expr><name pos:line="239" pos:column="71">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="239" pos:column="76">"test.code"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="241" pos:column="13">var</name></type> <name pos:line="241" pos:column="17">globalScope</name> <init pos:line="241" pos:column="29">= <expr><name><name pos:line="241" pos:column="31">codeParsers</name><index pos:line="241" pos:column="42">[<expr><name pos:line="241" pos:column="43">lang</name></expr>]</index></name><op:operator pos:line="241" pos:column="48">.</op:operator><call><name pos:line="241" pos:column="49">ParseFileUnit</name><argument_list pos:line="241" pos:column="62">(<argument><expr><name pos:line="241" pos:column="63">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="242" pos:column="13">Assert</name><op:operator pos:line="242" pos:column="19">.</op:operator><name pos:line="242" pos:column="20">AreEqual</name></name><argument_list pos:line="242" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="242" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="242" pos:column="32">globalScope</name><op:operator pos:line="242" pos:column="43">.</op:operator><name pos:line="242" pos:column="44">ChildStatements</name><op:operator pos:line="242" pos:column="59">.</op:operator><name pos:line="242" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="243" pos:column="13">var</name></type> <name pos:line="243" pos:column="17">exp</name> <init pos:line="243" pos:column="21">= <expr><name><name pos:line="243" pos:column="23">globalScope</name><op:operator pos:line="243" pos:column="34">.</op:operator><name pos:line="243" pos:column="35">ChildStatements</name><index pos:line="243" pos:column="50">[<expr><lit:literal type="number" pos:line="243" pos:column="51">0</lit:literal></expr>]</index></name><op:operator pos:line="243" pos:column="53">.</op:operator><name pos:line="243" pos:column="54">Content</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="244" pos:column="13">Assert</name><op:operator pos:line="244" pos:column="19">.</op:operator><name pos:line="244" pos:column="20">IsNotNull</name></name><argument_list pos:line="244" pos:column="29">(<argument><expr><name pos:line="244" pos:column="30">exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="245" pos:column="13">Assert</name><op:operator pos:line="245" pos:column="19">.</op:operator><name pos:line="245" pos:column="20">AreEqual</name></name><argument_list pos:line="245" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="245" pos:column="29">5</lit:literal></expr></argument>, <argument><expr><name><name pos:line="245" pos:column="32">exp</name><op:operator pos:line="245" pos:column="35">.</op:operator><name pos:line="245" pos:column="36">Components</name><op:operator pos:line="245" pos:column="46">.</op:operator><name pos:line="245" pos:column="47">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="246" pos:column="13">var</name></type> <name pos:line="246" pos:column="17">foo</name> <init pos:line="246" pos:column="21">= <expr><name><name pos:line="246" pos:column="23">exp</name><op:operator pos:line="246" pos:column="26">.</op:operator><name pos:line="246" pos:column="27">Components</name><index pos:line="246" pos:column="37">[<expr><lit:literal type="number" pos:line="246" pos:column="38">0</lit:literal></expr>]</index></name> <op:operator pos:line="246" pos:column="41">as</op:operator> <name pos:line="246" pos:column="44">NameUse</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="247" pos:column="13">Assert</name><op:operator pos:line="247" pos:column="19">.</op:operator><name pos:line="247" pos:column="20">IsNotNull</name></name><argument_list pos:line="247" pos:column="29">(<argument><expr><name pos:line="247" pos:column="30">foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="248" pos:column="13">Assert</name><op:operator pos:line="248" pos:column="19">.</op:operator><name pos:line="248" pos:column="20">AreEqual</name></name><argument_list pos:line="248" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="248" pos:column="29">"foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="248" pos:column="36">foo</name><op:operator pos:line="248" pos:column="39">.</op:operator><name pos:line="248" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="249" pos:column="13">var</name></type> <name pos:line="249" pos:column="17">equals</name> <init pos:line="249" pos:column="24">= <expr><name><name pos:line="249" pos:column="26">exp</name><op:operator pos:line="249" pos:column="29">.</op:operator><name pos:line="249" pos:column="30">Components</name><index pos:line="249" pos:column="40">[<expr><lit:literal type="number" pos:line="249" pos:column="41">1</lit:literal></expr>]</index></name> <op:operator pos:line="249" pos:column="44">as</op:operator> <name pos:line="249" pos:column="47">OperatorUse</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="250" pos:column="13">Assert</name><op:operator pos:line="250" pos:column="19">.</op:operator><name pos:line="250" pos:column="20">IsNotNull</name></name><argument_list pos:line="250" pos:column="29">(<argument><expr><name pos:line="250" pos:column="30">equals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="251" pos:column="13">Assert</name><op:operator pos:line="251" pos:column="19">.</op:operator><name pos:line="251" pos:column="20">AreEqual</name></name><argument_list pos:line="251" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="251" pos:column="29">"="</lit:literal></expr></argument>, <argument><expr><name><name pos:line="251" pos:column="34">equals</name><op:operator pos:line="251" pos:column="40">.</op:operator><name pos:line="251" pos:column="41">Text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="253" pos:column="13">var</name></type> <name pos:line="253" pos:column="17">subExp</name> <init pos:line="253" pos:column="24">= <expr><name><name pos:line="253" pos:column="26">exp</name><op:operator pos:line="253" pos:column="29">.</op:operator><name pos:line="253" pos:column="30">Components</name><index pos:line="253" pos:column="40">[<expr><lit:literal type="number" pos:line="253" pos:column="41">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="254" pos:column="13">Assert</name><op:operator pos:line="254" pos:column="19">.</op:operator><name pos:line="254" pos:column="20">AreEqual</name></name><argument_list pos:line="254" pos:column="28">(<argument><expr><call><name pos:line="254" pos:column="29">typeof</name><argument_list pos:line="254" pos:column="35">(<argument><expr><name pos:line="254" pos:column="36">Expression</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="254" pos:column="49">subExp</name><op:operator pos:line="254" pos:column="55">.</op:operator><name pos:line="254" pos:column="56">GetType</name></name><argument_list pos:line="254" pos:column="63">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="255" pos:column="13">Assert</name><op:operator pos:line="255" pos:column="19">.</op:operator><name pos:line="255" pos:column="20">AreEqual</name></name><argument_list pos:line="255" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="255" pos:column="29">3</lit:literal></expr></argument>, <argument><expr><name><name pos:line="255" pos:column="32">subExp</name><op:operator pos:line="255" pos:column="38">.</op:operator><name pos:line="255" pos:column="39">Components</name><op:operator pos:line="255" pos:column="49">.</op:operator><name pos:line="255" pos:column="50">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="256" pos:column="13">var</name></type> <name pos:line="256" pos:column="17">two</name> <init pos:line="256" pos:column="21">= <expr><name><name pos:line="256" pos:column="23">subExp</name><op:operator pos:line="256" pos:column="29">.</op:operator><name pos:line="256" pos:column="30">Components</name><index pos:line="256" pos:column="40">[<expr><lit:literal type="number" pos:line="256" pos:column="41">0</lit:literal></expr>]</index></name> <op:operator pos:line="256" pos:column="44">as</op:operator> <name pos:line="256" pos:column="47">LiteralUse</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="257" pos:column="13">Assert</name><op:operator pos:line="257" pos:column="19">.</op:operator><name pos:line="257" pos:column="20">IsNotNull</name></name><argument_list pos:line="257" pos:column="29">(<argument><expr><name pos:line="257" pos:column="30">two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="258" pos:column="13">Assert</name><op:operator pos:line="258" pos:column="19">.</op:operator><name pos:line="258" pos:column="20">AreEqual</name></name><argument_list pos:line="258" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="258" pos:column="29">"2"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="258" pos:column="34">two</name><op:operator pos:line="258" pos:column="37">.</op:operator><name pos:line="258" pos:column="38">Text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="259" pos:column="13">var</name></type> <name pos:line="259" pos:column="17">plus</name> <init pos:line="259" pos:column="22">= <expr><name><name pos:line="259" pos:column="24">subExp</name><op:operator pos:line="259" pos:column="30">.</op:operator><name pos:line="259" pos:column="31">Components</name><index pos:line="259" pos:column="41">[<expr><lit:literal type="number" pos:line="259" pos:column="42">1</lit:literal></expr>]</index></name> <op:operator pos:line="259" pos:column="45">as</op:operator> <name pos:line="259" pos:column="48">OperatorUse</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="260" pos:column="13">Assert</name><op:operator pos:line="260" pos:column="19">.</op:operator><name pos:line="260" pos:column="20">IsNotNull</name></name><argument_list pos:line="260" pos:column="29">(<argument><expr><name pos:line="260" pos:column="30">plus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="261" pos:column="13">Assert</name><op:operator pos:line="261" pos:column="19">.</op:operator><name pos:line="261" pos:column="20">AreEqual</name></name><argument_list pos:line="261" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="261" pos:column="29">"+"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="261" pos:column="34">plus</name><op:operator pos:line="261" pos:column="38">.</op:operator><name pos:line="261" pos:column="39">Text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="262" pos:column="13">var</name></type> <name pos:line="262" pos:column="17">three</name> <init pos:line="262" pos:column="23">= <expr><name><name pos:line="262" pos:column="25">subExp</name><op:operator pos:line="262" pos:column="31">.</op:operator><name pos:line="262" pos:column="32">Components</name><index pos:line="262" pos:column="42">[<expr><lit:literal type="number" pos:line="262" pos:column="43">2</lit:literal></expr>]</index></name> <op:operator pos:line="262" pos:column="46">as</op:operator> <name pos:line="262" pos:column="49">LiteralUse</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="263" pos:column="13">Assert</name><op:operator pos:line="263" pos:column="19">.</op:operator><name pos:line="263" pos:column="20">IsNotNull</name></name><argument_list pos:line="263" pos:column="29">(<argument><expr><name pos:line="263" pos:column="30">three</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="264" pos:column="13">Assert</name><op:operator pos:line="264" pos:column="19">.</op:operator><name pos:line="264" pos:column="20">AreEqual</name></name><argument_list pos:line="264" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="264" pos:column="29">"3"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="264" pos:column="34">three</name><op:operator pos:line="264" pos:column="39">.</op:operator><name pos:line="264" pos:column="40">Text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="266" pos:column="13">var</name></type> <name pos:line="266" pos:column="17">times</name> <init pos:line="266" pos:column="23">= <expr><name><name pos:line="266" pos:column="25">exp</name><op:operator pos:line="266" pos:column="28">.</op:operator><name pos:line="266" pos:column="29">Components</name><index pos:line="266" pos:column="39">[<expr><lit:literal type="number" pos:line="266" pos:column="40">3</lit:literal></expr>]</index></name> <op:operator pos:line="266" pos:column="43">as</op:operator> <name pos:line="266" pos:column="46">OperatorUse</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="267" pos:column="13">Assert</name><op:operator pos:line="267" pos:column="19">.</op:operator><name pos:line="267" pos:column="20">IsNotNull</name></name><argument_list pos:line="267" pos:column="29">(<argument><expr><name pos:line="267" pos:column="30">times</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="268" pos:column="13">Assert</name><op:operator pos:line="268" pos:column="19">.</op:operator><name pos:line="268" pos:column="20">AreEqual</name></name><argument_list pos:line="268" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="268" pos:column="29">"*"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="268" pos:column="34">times</name><op:operator pos:line="268" pos:column="39">.</op:operator><name pos:line="268" pos:column="40">Text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="269" pos:column="13">var</name></type> <name pos:line="269" pos:column="17">five</name> <init pos:line="269" pos:column="22">= <expr><name><name pos:line="269" pos:column="24">exp</name><op:operator pos:line="269" pos:column="27">.</op:operator><name pos:line="269" pos:column="28">Components</name><index pos:line="269" pos:column="38">[<expr><lit:literal type="number" pos:line="269" pos:column="39">4</lit:literal></expr>]</index></name> <op:operator pos:line="269" pos:column="42">as</op:operator> <name pos:line="269" pos:column="45">LiteralUse</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="270" pos:column="13">Assert</name><op:operator pos:line="270" pos:column="19">.</op:operator><name pos:line="270" pos:column="20">IsNotNull</name></name><argument_list pos:line="270" pos:column="29">(<argument><expr><name pos:line="270" pos:column="30">five</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="271" pos:column="13">Assert</name><op:operator pos:line="271" pos:column="19">.</op:operator><name pos:line="271" pos:column="20">AreEqual</name></name><argument_list pos:line="271" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="271" pos:column="29">"5"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="271" pos:column="34">five</name><op:operator pos:line="271" pos:column="38">.</op:operator><name pos:line="271" pos:column="39">Text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="274" pos:column="9">[<expr><call><name pos:line="274" pos:column="10">TestCase</name><argument_list pos:line="274" pos:column="18">(<argument><expr><name><name pos:line="274" pos:column="19">Language</name><op:operator pos:line="274" pos:column="27">.</op:operator><name pos:line="274" pos:column="28">CPlusPlus</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <attribute pos:line="275" pos:column="9">[<expr><call><name pos:line="275" pos:column="10">TestCase</name><argument_list pos:line="275" pos:column="18">(<argument><expr><name><name pos:line="275" pos:column="19">Language</name><op:operator pos:line="275" pos:column="27">.</op:operator><name pos:line="275" pos:column="28">Java</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <attribute pos:line="276" pos:column="9">[<expr><call><name pos:line="276" pos:column="10">TestCase</name><argument_list pos:line="276" pos:column="18">(<argument><expr><name><name pos:line="276" pos:column="19">Language</name><op:operator pos:line="276" pos:column="27">.</op:operator><name pos:line="276" pos:column="28">CSharp</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="277" pos:column="9">public</specifier> <name pos:line="277" pos:column="16">void</name></type> <name pos:line="277" pos:column="21">TestGetChildren_Statements</name><parameter_list pos:line="277" pos:column="47">(<param><decl><type><name pos:line="277" pos:column="48">Language</name></type> <name pos:line="277" pos:column="57">lang</name></decl></param>)</parameter_list> <block pos:line="277" pos:column="63">{
            <comment type="line" pos:line="278" pos:column="13">//if(foo == 0) {</comment>
            <comment type="line" pos:line="279" pos:column="13">//  return;</comment>
            <comment type="line" pos:line="280" pos:column="13">//  try {</comment>
            <comment type="line" pos:line="281" pos:column="13">//    return;</comment>
            <comment type="line" pos:line="282" pos:column="13">//  } catch(Exception e) {</comment>
            <comment type="line" pos:line="283" pos:column="13">//    return;</comment>
            <comment type="line" pos:line="284" pos:column="13">//  } </comment>
            <comment type="line" pos:line="285" pos:column="13">//} else {</comment>
            <comment type="line" pos:line="286" pos:column="13">//  return;</comment>
            <comment type="line" pos:line="287" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="288" pos:column="13">string</name></type> <name pos:line="288" pos:column="20">xml</name> <init pos:line="288" pos:column="24">= <expr><lit:literal type="string" pos:line="288" pos:column="26">@"&lt;if&gt;if&lt;condition&gt;(&lt;expr&gt;&lt;name&gt;foo&lt;/name&gt; &lt;op:operator&gt;==&lt;/op:operator&gt; &lt;lit:literal type=""number&gt;0&lt;/lit:literal&gt;&lt;/expr&gt;)&lt;/condition&gt;&lt;then&gt; &lt;block&gt;{
  &lt;return&gt;return;&lt;/return&gt;
  &lt;try&gt;try &lt;block&gt;{
    &lt;return&gt;return;&lt;/return&gt;
  }&lt;/block&gt; &lt;catch&gt;catch&lt;parameter_list&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;Exception&lt;/name&gt;&lt;/type&gt; &lt;name&gt;e&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt; &lt;block&gt;{
    &lt;return&gt;return;&lt;/return&gt;
  }&lt;/block&gt;&lt;/catch&gt;&lt;/try&gt; 
}&lt;/block&gt;&lt;/then&gt; &lt;else&gt;else &lt;block&gt;{
  &lt;return&gt;return;&lt;/return&gt;
}&lt;/block&gt;&lt;/else&gt;&lt;/if&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="298" pos:column="13">var</name></type> <name pos:line="298" pos:column="17">xmlElement</name> <init pos:line="298" pos:column="28">= <expr><name><name pos:line="298" pos:column="30">fileSetup</name><index pos:line="298" pos:column="39">[<expr><name pos:line="298" pos:column="40">lang</name></expr>]</index></name><op:operator pos:line="298" pos:column="45">.</op:operator><call><name pos:line="298" pos:column="46">GetFileUnitForXmlSnippet</name><argument_list pos:line="298" pos:column="70">(<argument><expr><name pos:line="298" pos:column="71">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="298" pos:column="76">"test.code"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="300" pos:column="13">var</name></type> <name pos:line="300" pos:column="17">globalScope</name> <init pos:line="300" pos:column="29">= <expr><name><name pos:line="300" pos:column="31">codeParsers</name><index pos:line="300" pos:column="42">[<expr><name pos:line="300" pos:column="43">lang</name></expr>]</index></name><op:operator pos:line="300" pos:column="48">.</op:operator><call><name pos:line="300" pos:column="49">ParseFileUnit</name><argument_list pos:line="300" pos:column="62">(<argument><expr><name pos:line="300" pos:column="63">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="301" pos:column="13">Assert</name><op:operator pos:line="301" pos:column="19">.</op:operator><name pos:line="301" pos:column="20">AreEqual</name></name><argument_list pos:line="301" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="301" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="301" pos:column="32">globalScope</name><op:operator pos:line="301" pos:column="43">.</op:operator><name pos:line="301" pos:column="44">ChildStatements</name><op:operator pos:line="301" pos:column="59">.</op:operator><name pos:line="301" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="302" pos:column="13">Assert</name><op:operator pos:line="302" pos:column="19">.</op:operator><name pos:line="302" pos:column="20">AreEqual</name></name><argument_list pos:line="302" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="302" pos:column="29">4</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="302" pos:column="32">globalScope</name><op:operator pos:line="302" pos:column="43">.</op:operator><name><name pos:line="302" pos:column="44">GetDescendantsAndSelf</name><argument_list pos:line="302" pos:column="65">&lt;<argument><name pos:line="302" pos:column="66">ReturnStatement</name></argument>&gt;</argument_list></name></name><argument_list pos:line="302" pos:column="82">()</argument_list></call><op:operator pos:line="302" pos:column="84">.</op:operator><call><name pos:line="302" pos:column="85">Count</name><argument_list pos:line="302" pos:column="90">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="305" pos:column="9">[<expr><call><name pos:line="305" pos:column="10">TestCase</name><argument_list pos:line="305" pos:column="18">(<argument><expr><name><name pos:line="305" pos:column="19">Language</name><op:operator pos:line="305" pos:column="27">.</op:operator><name pos:line="305" pos:column="28">CPlusPlus</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <attribute pos:line="306" pos:column="9">[<expr><call><name pos:line="306" pos:column="10">TestCase</name><argument_list pos:line="306" pos:column="18">(<argument><expr><name><name pos:line="306" pos:column="19">Language</name><op:operator pos:line="306" pos:column="27">.</op:operator><name pos:line="306" pos:column="28">Java</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <attribute pos:line="307" pos:column="9">[<expr><call><name pos:line="307" pos:column="10">TestCase</name><argument_list pos:line="307" pos:column="18">(<argument><expr><name><name pos:line="307" pos:column="19">Language</name><op:operator pos:line="307" pos:column="27">.</op:operator><name pos:line="307" pos:column="28">CSharp</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="308" pos:column="9">public</specifier> <name pos:line="308" pos:column="16">void</name></type> <name pos:line="308" pos:column="21">TestGetChildren_Expressions</name><parameter_list pos:line="308" pos:column="48">(<param><decl><type><name pos:line="308" pos:column="49">Language</name></type> <name pos:line="308" pos:column="58">lang</name></decl></param>)</parameter_list> <block pos:line="308" pos:column="64">{
            <comment type="line" pos:line="309" pos:column="13">//Foo f = (bar + baz(qux(17))).Xyzzy();</comment>
            <decl_stmt><decl><type><name pos:line="310" pos:column="13">string</name></type> <name pos:line="310" pos:column="20">xml</name> <init pos:line="310" pos:column="24">= <expr><lit:literal type="string" pos:line="310" pos:column="26">@"&lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;/type&gt; &lt;name&gt;f&lt;/name&gt; &lt;init&gt;= &lt;expr&gt;&lt;op:operator&gt;(&lt;/op:operator&gt;&lt;name&gt;bar&lt;/name&gt; &lt;op:operator&gt;+&lt;/op:operator&gt; &lt;call&gt;&lt;name&gt;baz&lt;/name&gt;&lt;argument_list&gt;(&lt;argument&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;qux&lt;/name&gt;&lt;argument_list&gt;(&lt;argument&gt;&lt;expr&gt;&lt;lit:literal type=""number&gt;17&lt;/lit:literal&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt;&lt;op:operator&gt;)&lt;/op:operator&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;call&gt;&lt;name&gt;Xyzzy&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;&lt;/init&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="311" pos:column="13">var</name></type> <name pos:line="311" pos:column="17">xmlElement</name> <init pos:line="311" pos:column="28">= <expr><name><name pos:line="311" pos:column="30">fileSetup</name><index pos:line="311" pos:column="39">[<expr><name pos:line="311" pos:column="40">lang</name></expr>]</index></name><op:operator pos:line="311" pos:column="45">.</op:operator><call><name pos:line="311" pos:column="46">GetFileUnitForXmlSnippet</name><argument_list pos:line="311" pos:column="70">(<argument><expr><name pos:line="311" pos:column="71">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="311" pos:column="76">"test.code"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="313" pos:column="13">var</name></type> <name pos:line="313" pos:column="17">globalScope</name> <init pos:line="313" pos:column="29">= <expr><name><name pos:line="313" pos:column="31">codeParsers</name><index pos:line="313" pos:column="42">[<expr><name pos:line="313" pos:column="43">lang</name></expr>]</index></name><op:operator pos:line="313" pos:column="48">.</op:operator><call><name pos:line="313" pos:column="49">ParseFileUnit</name><argument_list pos:line="313" pos:column="62">(<argument><expr><name pos:line="313" pos:column="63">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="314" pos:column="13">Assert</name><op:operator pos:line="314" pos:column="19">.</op:operator><name pos:line="314" pos:column="20">AreEqual</name></name><argument_list pos:line="314" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="314" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="314" pos:column="32">globalScope</name><op:operator pos:line="314" pos:column="43">.</op:operator><name pos:line="314" pos:column="44">ChildStatements</name><op:operator pos:line="314" pos:column="59">.</op:operator><name pos:line="314" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="315" pos:column="13">Assert</name><op:operator pos:line="315" pos:column="19">.</op:operator><name pos:line="315" pos:column="20">AreEqual</name></name><argument_list pos:line="315" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="315" pos:column="29">3</lit:literal></expr></argument>, <argument><expr><name><name pos:line="315" pos:column="32">globalScope</name><op:operator pos:line="315" pos:column="43">.</op:operator><name pos:line="315" pos:column="44">ChildStatements</name><index pos:line="315" pos:column="59">[<expr><lit:literal type="number" pos:line="315" pos:column="60">0</lit:literal></expr>]</index></name><op:operator pos:line="315" pos:column="62">.</op:operator><call><name><name pos:line="315" pos:column="63">Content</name><op:operator pos:line="315" pos:column="70">.</op:operator><name><name pos:line="315" pos:column="71">GetDescendantsAndSelf</name><argument_list pos:line="315" pos:column="92">&lt;<argument><name pos:line="315" pos:column="93">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="315" pos:column="104">()</argument_list></call><op:operator pos:line="315" pos:column="106">.</op:operator><call><name pos:line="315" pos:column="107">Count</name><argument_list pos:line="315" pos:column="112">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="318" pos:column="9">[<expr><call><name pos:line="318" pos:column="10">TestCase</name><argument_list pos:line="318" pos:column="18">(<argument><expr><name><name pos:line="318" pos:column="19">Language</name><op:operator pos:line="318" pos:column="27">.</op:operator><name pos:line="318" pos:column="28">CPlusPlus</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <attribute pos:line="319" pos:column="9">[<expr><call><name pos:line="319" pos:column="10">TestCase</name><argument_list pos:line="319" pos:column="18">(<argument><expr><name><name pos:line="319" pos:column="19">Language</name><op:operator pos:line="319" pos:column="27">.</op:operator><name pos:line="319" pos:column="28">Java</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <attribute pos:line="320" pos:column="9">[<expr><call><name pos:line="320" pos:column="10">TestCase</name><argument_list pos:line="320" pos:column="18">(<argument><expr><name><name pos:line="320" pos:column="19">Language</name><op:operator pos:line="320" pos:column="27">.</op:operator><name pos:line="320" pos:column="28">CSharp</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="321" pos:column="9">public</specifier> <name pos:line="321" pos:column="16">void</name></type> <name pos:line="321" pos:column="21">TestResolveLocalVariable</name><parameter_list pos:line="321" pos:column="45">(<param><decl><type><name pos:line="321" pos:column="46">Language</name></type> <name pos:line="321" pos:column="55">lang</name></decl></param>)</parameter_list> <block pos:line="321" pos:column="61">{
            <comment type="line" pos:line="322" pos:column="13">//int Foo() {</comment>
            <comment type="line" pos:line="323" pos:column="13">//  if(MethodCall()) {</comment>
            <comment type="line" pos:line="324" pos:column="13">//    int bar = 17;</comment>
            <comment type="line" pos:line="325" pos:column="13">//    bar = 42;</comment>
            <comment type="line" pos:line="326" pos:column="13">//  }</comment>
            <comment type="line" pos:line="327" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="328" pos:column="13">string</name></type> <name pos:line="328" pos:column="20">xml</name> <init pos:line="328" pos:column="24">= <expr><lit:literal type="string" pos:line="328" pos:column="26">@"&lt;function&gt;&lt;type&gt;&lt;name pos:line=""1"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""1"" pos:column="&gt;Foo&lt;/name&gt;&lt;parameter_list pos:line=""1"" pos:column="&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""1"" pos:column=""&gt;{
  &lt;if pos:line=""2"" pos:column="&gt;if&lt;condition pos:line=""2"" pos:column="&gt;(&lt;expr&gt;&lt;call&gt;&lt;name pos:line=""2"" pos:column="&gt;MethodCall&lt;/name&gt;&lt;argument_list pos:line=""2"" pos:column=""&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;)&lt;/condition&gt;&lt;then pos:line=""2"" pos:column=""&gt; &lt;block pos:line=""2"" pos:column=""&gt;{
    &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""3"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""3"" pos:column="&gt;bar&lt;/name&gt; &lt;init pos:line=""3"" pos:column=""&gt;= &lt;expr&gt;&lt;lit:literal type=""number"" pos:line=""3"" pos:column=&gt;17&lt;/lit:literal&gt;&lt;/expr&gt;&lt;/init&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
    &lt;expr_stmt&gt;&lt;expr&gt;&lt;name pos:line=""4"" pos:column="&gt;bar&lt;/name&gt; &lt;op:operator pos:line=""4"" pos:column="&gt;=&lt;/op:operator&gt; &lt;lit:literal type=""number"" pos:line=""4"" pos:column=&gt;42&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
  }&lt;/block&gt;&lt;/then&gt;&lt;/if&gt;
}&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="334" pos:column="13">var</name></type> <name pos:line="334" pos:column="17">xmlElement</name> <init pos:line="334" pos:column="28">= <expr><name><name pos:line="334" pos:column="30">fileSetup</name><index pos:line="334" pos:column="39">[<expr><name pos:line="334" pos:column="40">lang</name></expr>]</index></name><op:operator pos:line="334" pos:column="45">.</op:operator><call><name pos:line="334" pos:column="46">GetFileUnitForXmlSnippet</name><argument_list pos:line="334" pos:column="70">(<argument><expr><name pos:line="334" pos:column="71">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="334" pos:column="76">"test.code"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="336" pos:column="13">var</name></type> <name pos:line="336" pos:column="17">globalScope</name> <init pos:line="336" pos:column="29">= <expr><name><name pos:line="336" pos:column="31">codeParsers</name><index pos:line="336" pos:column="42">[<expr><name pos:line="336" pos:column="43">lang</name></expr>]</index></name><op:operator pos:line="336" pos:column="48">.</op:operator><call><name pos:line="336" pos:column="49">ParseFileUnit</name><argument_list pos:line="336" pos:column="62">(<argument><expr><name pos:line="336" pos:column="63">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="337" pos:column="13">var</name></type> <name pos:line="337" pos:column="17">ifStmt</name> <init pos:line="337" pos:column="24">= <expr><call><name><name pos:line="337" pos:column="26">globalScope</name><op:operator pos:line="337" pos:column="37">.</op:operator><name><name pos:line="337" pos:column="38">GetDescendants</name><argument_list pos:line="337" pos:column="52">&lt;<argument><name pos:line="337" pos:column="53">IfStatement</name></argument>&gt;</argument_list></name></name><argument_list pos:line="337" pos:column="65">()</argument_list></call><op:operator pos:line="337" pos:column="67">.</op:operator><call><name pos:line="337" pos:column="68">First</name><argument_list pos:line="337" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="338" pos:column="13">Assert</name><op:operator pos:line="338" pos:column="19">.</op:operator><name pos:line="338" pos:column="20">AreEqual</name></name><argument_list pos:line="338" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="338" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="338" pos:column="32">ifStmt</name><op:operator pos:line="338" pos:column="38">.</op:operator><name pos:line="338" pos:column="39">ChildStatements</name><op:operator pos:line="338" pos:column="54">.</op:operator><name pos:line="338" pos:column="55">Count</name></name><argument_list pos:line="338" pos:column="60">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="340" pos:column="13">var</name></type> <name pos:line="340" pos:column="17">barDecl</name> <init pos:line="340" pos:column="25">= <expr><name><name pos:line="340" pos:column="27">ifStmt</name><op:operator pos:line="340" pos:column="33">.</op:operator><name pos:line="340" pos:column="34">ChildStatements</name><index pos:line="340" pos:column="49">[<expr><lit:literal type="number" pos:line="340" pos:column="50">0</lit:literal></expr>]</index></name><op:operator pos:line="340" pos:column="52">.</op:operator><call><name><name pos:line="340" pos:column="53">Content</name><op:operator pos:line="340" pos:column="60">.</op:operator><name><name pos:line="340" pos:column="61">GetDescendantsAndSelf</name><argument_list pos:line="340" pos:column="82">&lt;<argument><name pos:line="340" pos:column="83">VariableDeclaration</name></argument>&gt;</argument_list></name></name><argument_list pos:line="340" pos:column="103">()</argument_list></call><op:operator pos:line="340" pos:column="105">.</op:operator><call><name pos:line="340" pos:column="106">FirstOrDefault</name><argument_list pos:line="340" pos:column="120">(<argument><expr><lambda><name pos:line="340" pos:column="121">v</name> <op:operator pos:line="340" pos:column="123">=&gt;</op:operator> <name><name pos:line="340" pos:column="126">v</name><op:operator pos:line="340" pos:column="127">.</op:operator><name pos:line="340" pos:column="128">Name</name></name> <op:operator pos:line="340" pos:column="133">==</op:operator> <lit:literal type="string" pos:line="340" pos:column="136">"bar"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="341" pos:column="13">Assert</name><op:operator pos:line="341" pos:column="19">.</op:operator><name pos:line="341" pos:column="20">IsNotNull</name></name><argument_list pos:line="341" pos:column="29">(<argument><expr><name pos:line="341" pos:column="30">barDecl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="342" pos:column="13">var</name></type> <name pos:line="342" pos:column="17">barUse</name> <init pos:line="342" pos:column="24">= <expr><name><name pos:line="342" pos:column="26">ifStmt</name><op:operator pos:line="342" pos:column="32">.</op:operator><name pos:line="342" pos:column="33">ChildStatements</name><index pos:line="342" pos:column="48">[<expr><lit:literal type="number" pos:line="342" pos:column="49">1</lit:literal></expr>]</index></name><op:operator pos:line="342" pos:column="51">.</op:operator><call><name><name pos:line="342" pos:column="52">Content</name><op:operator pos:line="342" pos:column="59">.</op:operator><name><name pos:line="342" pos:column="60">GetDescendantsAndSelf</name><argument_list pos:line="342" pos:column="81">&lt;<argument><name pos:line="342" pos:column="82">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="342" pos:column="90">()</argument_list></call><op:operator pos:line="342" pos:column="92">.</op:operator><call><name pos:line="342" pos:column="93">FirstOrDefault</name><argument_list pos:line="342" pos:column="107">(<argument><expr><lambda><name pos:line="342" pos:column="108">n</name> <op:operator pos:line="342" pos:column="110">=&gt;</op:operator> <name><name pos:line="342" pos:column="113">n</name><op:operator pos:line="342" pos:column="114">.</op:operator><name pos:line="342" pos:column="115">Name</name></name> <op:operator pos:line="342" pos:column="120">==</op:operator> <lit:literal type="string" pos:line="342" pos:column="123">"bar"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="343" pos:column="13">Assert</name><op:operator pos:line="343" pos:column="19">.</op:operator><name pos:line="343" pos:column="20">IsNotNull</name></name><argument_list pos:line="343" pos:column="29">(<argument><expr><name pos:line="343" pos:column="30">barUse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="344" pos:column="13">Assert</name><op:operator pos:line="344" pos:column="19">.</op:operator><name pos:line="344" pos:column="20">AreSame</name></name><argument_list pos:line="344" pos:column="27">(<argument><expr><name pos:line="344" pos:column="28">barDecl</name></expr></argument>, <argument><expr><call><name><name pos:line="344" pos:column="37">barUse</name><op:operator pos:line="344" pos:column="43">.</op:operator><name pos:line="344" pos:column="44">FindMatches</name></name><argument_list pos:line="344" pos:column="55">()</argument_list></call><op:operator pos:line="344" pos:column="57">.</op:operator><call><name pos:line="344" pos:column="58">FirstOrDefault</name><argument_list pos:line="344" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="347" pos:column="9">[<expr><call><name pos:line="347" pos:column="10">TestCase</name><argument_list pos:line="347" pos:column="18">(<argument><expr><name><name pos:line="347" pos:column="19">Language</name><op:operator pos:line="347" pos:column="27">.</op:operator><name pos:line="347" pos:column="28">CPlusPlus</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <attribute pos:line="348" pos:column="9">[<expr><call><name pos:line="348" pos:column="10">TestCase</name><argument_list pos:line="348" pos:column="18">(<argument><expr><name><name pos:line="348" pos:column="19">Language</name><op:operator pos:line="348" pos:column="27">.</op:operator><name pos:line="348" pos:column="28">Java</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <attribute pos:line="349" pos:column="9">[<expr><call><name pos:line="349" pos:column="10">TestCase</name><argument_list pos:line="349" pos:column="18">(<argument><expr><name><name pos:line="349" pos:column="19">Language</name><op:operator pos:line="349" pos:column="27">.</op:operator><name pos:line="349" pos:column="28">CSharp</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="350" pos:column="9">public</specifier> <name pos:line="350" pos:column="16">void</name></type> <name pos:line="350" pos:column="21">TestResolveLocalVariable_ParentExpression</name><parameter_list pos:line="350" pos:column="62">(<param><decl><type><name pos:line="350" pos:column="63">Language</name></type> <name pos:line="350" pos:column="72">lang</name></decl></param>)</parameter_list> <block pos:line="350" pos:column="78">{
            <comment type="line" pos:line="351" pos:column="13">//int Foo() {</comment>
            <comment type="line" pos:line="352" pos:column="13">//  for(int i = 0; i &lt; bar; i++) {</comment>
            <comment type="line" pos:line="353" pos:column="13">//    printf(i);</comment>
            <comment type="line" pos:line="354" pos:column="13">//  }</comment>
            <comment type="line" pos:line="355" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="356" pos:column="13">string</name></type> <name pos:line="356" pos:column="20">xml</name> <init pos:line="356" pos:column="24">= <expr><lit:literal type="string" pos:line="356" pos:column="26">@"&lt;function&gt;&lt;type&gt;&lt;name pos:line=""1"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""1"" pos:column="&gt;Foo&lt;/name&gt;&lt;parameter_list pos:line=""1"" pos:column="&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""1"" pos:column=""&gt;{
  &lt;for pos:line=""2"" pos:column="&gt;for(&lt;init&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""2"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""2"" pos:column=""&gt;i&lt;/name&gt; &lt;init pos:line=""2"" pos:column=""&gt;= &lt;expr&gt;&lt;lit:literal type=""number"" pos:line=""2"" pos:column=&gt;0&lt;/lit:literal&gt;&lt;/expr&gt;&lt;/init&gt;&lt;/decl&gt;;&lt;/init&gt; &lt;condition&gt;&lt;expr&gt;&lt;name pos:line=""2"" pos:column=""&gt;i&lt;/name&gt; &lt;op:operator pos:line=""2"" pos:column=""&gt;&amp;lt;&lt;/op:operator&gt; &lt;name pos:line=""2"" pos:column=""&gt;bar&lt;/name&gt;&lt;/expr&gt;;&lt;/condition&gt; &lt;incr&gt;&lt;expr&gt;&lt;name pos:line=""2"" pos:column=""&gt;i&lt;/name&gt;&lt;op:operator pos:line=""2"" pos:column=""&gt;++&lt;/op:operator&gt;&lt;/expr&gt;&lt;/incr&gt;) &lt;block pos:line=""2"" pos:column=""&gt;{
    &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name pos:line=""3"" pos:column="&gt;printf&lt;/name&gt;&lt;argument_list pos:line=""3"" pos:column=""&gt;(&lt;argument&gt;&lt;expr&gt;&lt;name pos:line=""3"" pos:column=""&gt;i&lt;/name&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
  }&lt;/block&gt;&lt;/for&gt;
}&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="361" pos:column="13">var</name></type> <name pos:line="361" pos:column="17">xmlElement</name> <init pos:line="361" pos:column="28">= <expr><name><name pos:line="361" pos:column="30">fileSetup</name><index pos:line="361" pos:column="39">[<expr><name pos:line="361" pos:column="40">lang</name></expr>]</index></name><op:operator pos:line="361" pos:column="45">.</op:operator><call><name pos:line="361" pos:column="46">GetFileUnitForXmlSnippet</name><argument_list pos:line="361" pos:column="70">(<argument><expr><name pos:line="361" pos:column="71">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="361" pos:column="76">"test.code"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="363" pos:column="13">var</name></type> <name pos:line="363" pos:column="17">globalScope</name> <init pos:line="363" pos:column="29">= <expr><name><name pos:line="363" pos:column="31">codeParsers</name><index pos:line="363" pos:column="42">[<expr><name pos:line="363" pos:column="43">lang</name></expr>]</index></name><op:operator pos:line="363" pos:column="48">.</op:operator><call><name pos:line="363" pos:column="49">ParseFileUnit</name><argument_list pos:line="363" pos:column="62">(<argument><expr><name pos:line="363" pos:column="63">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="364" pos:column="13">var</name></type> <name pos:line="364" pos:column="17">forStmt</name> <init pos:line="364" pos:column="25">= <expr><call><name><name pos:line="364" pos:column="27">globalScope</name><op:operator pos:line="364" pos:column="38">.</op:operator><name><name pos:line="364" pos:column="39">GetDescendants</name><argument_list pos:line="364" pos:column="53">&lt;<argument><name pos:line="364" pos:column="54">ForStatement</name></argument>&gt;</argument_list></name></name><argument_list pos:line="364" pos:column="67">()</argument_list></call><op:operator pos:line="364" pos:column="69">.</op:operator><call><name pos:line="364" pos:column="70">First</name><argument_list pos:line="364" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="365" pos:column="13">Assert</name><op:operator pos:line="365" pos:column="19">.</op:operator><name pos:line="365" pos:column="20">AreEqual</name></name><argument_list pos:line="365" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="365" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="365" pos:column="32">forStmt</name><op:operator pos:line="365" pos:column="39">.</op:operator><name pos:line="365" pos:column="40">ChildStatements</name><op:operator pos:line="365" pos:column="55">.</op:operator><name pos:line="365" pos:column="56">Count</name></name><argument_list pos:line="365" pos:column="61">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="367" pos:column="13">var</name></type> <name pos:line="367" pos:column="17">iDecl</name> <init pos:line="367" pos:column="23">= <expr><call><name><name pos:line="367" pos:column="25">forStmt</name><op:operator pos:line="367" pos:column="32">.</op:operator><name pos:line="367" pos:column="33">Initializer</name><op:operator pos:line="367" pos:column="44">.</op:operator><name><name pos:line="367" pos:column="45">GetDescendantsAndSelf</name><argument_list pos:line="367" pos:column="66">&lt;<argument><name pos:line="367" pos:column="67">VariableDeclaration</name></argument>&gt;</argument_list></name></name><argument_list pos:line="367" pos:column="87">()</argument_list></call><op:operator pos:line="367" pos:column="89">.</op:operator><call><name pos:line="367" pos:column="90">FirstOrDefault</name><argument_list pos:line="367" pos:column="104">(<argument><expr><lambda><name pos:line="367" pos:column="105">v</name> <op:operator pos:line="367" pos:column="107">=&gt;</op:operator> <name><name pos:line="367" pos:column="110">v</name><op:operator pos:line="367" pos:column="111">.</op:operator><name pos:line="367" pos:column="112">Name</name></name> <op:operator pos:line="367" pos:column="117">==</op:operator> <lit:literal type="string" pos:line="367" pos:column="120">"i"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="368" pos:column="13">Assert</name><op:operator pos:line="368" pos:column="19">.</op:operator><name pos:line="368" pos:column="20">IsNotNull</name></name><argument_list pos:line="368" pos:column="29">(<argument><expr><name pos:line="368" pos:column="30">iDecl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="369" pos:column="13">var</name></type> <name pos:line="369" pos:column="17">iUse</name> <init pos:line="369" pos:column="22">= <expr><name><name pos:line="369" pos:column="24">forStmt</name><op:operator pos:line="369" pos:column="31">.</op:operator><name pos:line="369" pos:column="32">ChildStatements</name><index pos:line="369" pos:column="47">[<expr><lit:literal type="number" pos:line="369" pos:column="48">0</lit:literal></expr>]</index></name><op:operator pos:line="369" pos:column="50">.</op:operator><call><name><name pos:line="369" pos:column="51">Content</name><op:operator pos:line="369" pos:column="58">.</op:operator><name><name pos:line="369" pos:column="59">GetDescendantsAndSelf</name><argument_list pos:line="369" pos:column="80">&lt;<argument><name pos:line="369" pos:column="81">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="369" pos:column="89">()</argument_list></call><op:operator pos:line="369" pos:column="91">.</op:operator><call><name pos:line="369" pos:column="92">FirstOrDefault</name><argument_list pos:line="369" pos:column="106">(<argument><expr><lambda><name pos:line="369" pos:column="107">n</name> <op:operator pos:line="369" pos:column="109">=&gt;</op:operator> <name><name pos:line="369" pos:column="112">n</name><op:operator pos:line="369" pos:column="113">.</op:operator><name pos:line="369" pos:column="114">Name</name></name> <op:operator pos:line="369" pos:column="119">==</op:operator> <lit:literal type="string" pos:line="369" pos:column="122">"i"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="370" pos:column="13">Assert</name><op:operator pos:line="370" pos:column="19">.</op:operator><name pos:line="370" pos:column="20">IsNotNull</name></name><argument_list pos:line="370" pos:column="29">(<argument><expr><name pos:line="370" pos:column="30">iUse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="371" pos:column="13">Assert</name><op:operator pos:line="371" pos:column="19">.</op:operator><name pos:line="371" pos:column="20">AreSame</name></name><argument_list pos:line="371" pos:column="27">(<argument><expr><name pos:line="371" pos:column="28">iDecl</name></expr></argument>, <argument><expr><call><name><name pos:line="371" pos:column="35">iUse</name><op:operator pos:line="371" pos:column="39">.</op:operator><name pos:line="371" pos:column="40">FindMatches</name></name><argument_list pos:line="371" pos:column="51">()</argument_list></call><op:operator pos:line="371" pos:column="53">.</op:operator><call><name pos:line="371" pos:column="54">FirstOrDefault</name><argument_list pos:line="371" pos:column="68">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="374" pos:column="9">[<expr><call><name pos:line="374" pos:column="10">TestCase</name><argument_list pos:line="374" pos:column="18">(<argument><expr><name><name pos:line="374" pos:column="19">Language</name><op:operator pos:line="374" pos:column="27">.</op:operator><name pos:line="374" pos:column="28">CPlusPlus</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <attribute pos:line="375" pos:column="9">[<expr><call><name pos:line="375" pos:column="10">TestCase</name><argument_list pos:line="375" pos:column="18">(<argument><expr><name><name pos:line="375" pos:column="19">Language</name><op:operator pos:line="375" pos:column="27">.</op:operator><name pos:line="375" pos:column="28">Java</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <attribute pos:line="376" pos:column="9">[<expr><call><name pos:line="376" pos:column="10">TestCase</name><argument_list pos:line="376" pos:column="18">(<argument><expr><name><name pos:line="376" pos:column="19">Language</name><op:operator pos:line="376" pos:column="27">.</op:operator><name pos:line="376" pos:column="28">CSharp</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="377" pos:column="9">public</specifier> <name pos:line="377" pos:column="16">void</name></type> <name pos:line="377" pos:column="21">TestResolveLocalVariable_Parameter</name><parameter_list pos:line="377" pos:column="55">(<param><decl><type><name pos:line="377" pos:column="56">Language</name></type> <name pos:line="377" pos:column="65">lang</name></decl></param>)</parameter_list> <block pos:line="377" pos:column="71">{
            <comment type="line" pos:line="378" pos:column="13">//int Foo(int num, bool option) {</comment>
            <comment type="line" pos:line="379" pos:column="13">//  if(option) {</comment>
            <comment type="line" pos:line="380" pos:column="13">//    printf(num);</comment>
            <comment type="line" pos:line="381" pos:column="13">//  }</comment>
            <comment type="line" pos:line="382" pos:column="13">//  return 0;</comment>
            <comment type="line" pos:line="383" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="384" pos:column="13">string</name></type> <name pos:line="384" pos:column="20">xml</name> <init pos:line="384" pos:column="24">= <expr><lit:literal type="string" pos:line="384" pos:column="26">@"&lt;function&gt;&lt;type&gt;&lt;name pos:line=""1"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""1"" pos:column="&gt;Foo&lt;/name&gt;&lt;parameter_list pos:line=""1"" pos:column="&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""1"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""1"" pos:column=""&gt;num&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;, &lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""1"" pos:column=""&gt;bool&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""1"" pos:column=""&gt;option&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt; &lt;block pos:line=""1"" pos:column=""&gt;{
  &lt;if pos:line=""2"" pos:column="&gt;if&lt;condition pos:line=""2"" pos:column="&gt;(&lt;expr&gt;&lt;name pos:line=""2"" pos:column="&gt;option&lt;/name&gt;&lt;/expr&gt;)&lt;/condition&gt;&lt;then pos:line=""2"" pos:column=""&gt; &lt;block pos:line=""2"" pos:column=""&gt;{
    &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name pos:line=""3"" pos:column="&gt;printf&lt;/name&gt;&lt;argument_list pos:line=""3"" pos:column=""&gt;(&lt;argument&gt;&lt;expr&gt;&lt;name pos:line=""3"" pos:column=""&gt;num&lt;/name&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
  }&lt;/block&gt;&lt;/then&gt;&lt;/if&gt;
  &lt;return pos:line=""5"" pos:column="&gt;return &lt;expr&gt;&lt;lit:literal type=""number"" pos:line=""5"" pos:column=&gt;0&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt;
}&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="390" pos:column="13">XElement</name></type> <name pos:line="390" pos:column="22">xmlElement</name> <init pos:line="390" pos:column="33">= <expr><name><name pos:line="390" pos:column="35">fileSetup</name><index pos:line="390" pos:column="44">[<expr><name pos:line="390" pos:column="45">lang</name></expr>]</index></name><op:operator pos:line="390" pos:column="50">.</op:operator><call><name pos:line="390" pos:column="51">GetFileUnitForXmlSnippet</name><argument_list pos:line="390" pos:column="75">(<argument><expr><name pos:line="390" pos:column="76">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="390" pos:column="81">"A.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="392" pos:column="13">var</name></type> <name pos:line="392" pos:column="17">globalScope</name> <init pos:line="392" pos:column="29">= <expr><name><name pos:line="392" pos:column="31">codeParsers</name><index pos:line="392" pos:column="42">[<expr><name pos:line="392" pos:column="43">lang</name></expr>]</index></name><op:operator pos:line="392" pos:column="48">.</op:operator><call><name pos:line="392" pos:column="49">ParseFileUnit</name><argument_list pos:line="392" pos:column="62">(<argument><expr><name pos:line="392" pos:column="63">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="393" pos:column="13">var</name></type> <name pos:line="393" pos:column="17">foo</name> <init pos:line="393" pos:column="21">= <expr><call><name><name pos:line="393" pos:column="23">globalScope</name><op:operator pos:line="393" pos:column="34">.</op:operator><name><name pos:line="393" pos:column="35">GetDescendants</name><argument_list pos:line="393" pos:column="49">&lt;<argument><name pos:line="393" pos:column="50">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="393" pos:column="67">()</argument_list></call><op:operator pos:line="393" pos:column="69">.</op:operator><call><name pos:line="393" pos:column="70">First</name><argument_list pos:line="393" pos:column="75">(<argument><expr><lambda><name pos:line="393" pos:column="76">m</name> <op:operator pos:line="393" pos:column="78">=&gt;</op:operator> <name><name pos:line="393" pos:column="81">m</name><op:operator pos:line="393" pos:column="82">.</op:operator><name pos:line="393" pos:column="83">Name</name></name> <op:operator pos:line="393" pos:column="88">==</op:operator> <lit:literal type="string" pos:line="393" pos:column="91">"Foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="394" pos:column="13">Assert</name><op:operator pos:line="394" pos:column="19">.</op:operator><name pos:line="394" pos:column="20">AreEqual</name></name><argument_list pos:line="394" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="394" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="394" pos:column="32">foo</name><op:operator pos:line="394" pos:column="35">.</op:operator><name pos:line="394" pos:column="36">Parameters</name><op:operator pos:line="394" pos:column="46">.</op:operator><name pos:line="394" pos:column="47">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="395" pos:column="13">var</name></type> <name pos:line="395" pos:column="17">numDecl</name> <init pos:line="395" pos:column="25">= <expr><name><name pos:line="395" pos:column="27">foo</name><op:operator pos:line="395" pos:column="30">.</op:operator><name pos:line="395" pos:column="31">Parameters</name><index pos:line="395" pos:column="41">[<expr><lit:literal type="number" pos:line="395" pos:column="42">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="396" pos:column="13">Assert</name><op:operator pos:line="396" pos:column="19">.</op:operator><name pos:line="396" pos:column="20">IsNotNull</name></name><argument_list pos:line="396" pos:column="29">(<argument><expr><name pos:line="396" pos:column="30">numDecl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="397" pos:column="13">var</name></type> <name pos:line="397" pos:column="17">optionDecl</name> <init pos:line="397" pos:column="28">= <expr><name><name pos:line="397" pos:column="30">foo</name><op:operator pos:line="397" pos:column="33">.</op:operator><name pos:line="397" pos:column="34">Parameters</name><index pos:line="397" pos:column="44">[<expr><lit:literal type="number" pos:line="397" pos:column="45">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="398" pos:column="13">Assert</name><op:operator pos:line="398" pos:column="19">.</op:operator><name pos:line="398" pos:column="20">IsNotNull</name></name><argument_list pos:line="398" pos:column="29">(<argument><expr><name pos:line="398" pos:column="30">optionDecl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="400" pos:column="13">var</name></type> <name pos:line="400" pos:column="17">optionUse</name> <init pos:line="400" pos:column="27">= <expr><call><name><name pos:line="400" pos:column="29">foo</name><op:operator pos:line="400" pos:column="32">.</op:operator><name pos:line="400" pos:column="33">GetDescendants</name></name><argument_list pos:line="400" pos:column="47">()</argument_list></call><op:operator pos:line="400" pos:column="49">.</op:operator><call><name pos:line="400" pos:column="50">SelectMany</name><argument_list pos:line="400" pos:column="60">(<argument><expr><lambda><name pos:line="400" pos:column="61">s</name> <op:operator pos:line="400" pos:column="63">=&gt;</op:operator> <call><name><name pos:line="400" pos:column="66">s</name><op:operator pos:line="400" pos:column="67">.</op:operator><name pos:line="400" pos:column="68">GetExpressions</name></name><argument_list pos:line="400" pos:column="82">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="400" pos:column="85">.</op:operator><call><name pos:line="400" pos:column="86">SelectMany</name><argument_list pos:line="400" pos:column="96">(<argument><expr><lambda><name pos:line="400" pos:column="97">e</name> <op:operator pos:line="400" pos:column="99">=&gt;</op:operator> <call><name><name pos:line="400" pos:column="102">e</name><op:operator pos:line="400" pos:column="103">.</op:operator><name><name pos:line="400" pos:column="104">GetDescendantsAndSelf</name><argument_list pos:line="400" pos:column="125">&lt;<argument><name pos:line="400" pos:column="126">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="400" pos:column="134">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="400" pos:column="137">.</op:operator><call><name pos:line="400" pos:column="138">FirstOrDefault</name><argument_list pos:line="400" pos:column="152">(<argument><expr><lambda><name pos:line="400" pos:column="153">n</name> <op:operator pos:line="400" pos:column="155">=&gt;</op:operator> <name><name pos:line="400" pos:column="158">n</name><op:operator pos:line="400" pos:column="159">.</op:operator><name pos:line="400" pos:column="160">Name</name></name> <op:operator pos:line="400" pos:column="165">==</op:operator> <lit:literal type="string" pos:line="400" pos:column="168">"option"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="401" pos:column="13">Assert</name><op:operator pos:line="401" pos:column="19">.</op:operator><name pos:line="401" pos:column="20">IsNotNull</name></name><argument_list pos:line="401" pos:column="29">(<argument><expr><name pos:line="401" pos:column="30">optionUse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="402" pos:column="13">Assert</name><op:operator pos:line="402" pos:column="19">.</op:operator><name pos:line="402" pos:column="20">AreSame</name></name><argument_list pos:line="402" pos:column="27">(<argument><expr><name pos:line="402" pos:column="28">optionDecl</name></expr></argument>, <argument><expr><call><name><name pos:line="402" pos:column="40">optionUse</name><op:operator pos:line="402" pos:column="49">.</op:operator><name pos:line="402" pos:column="50">FindMatches</name></name><argument_list pos:line="402" pos:column="61">()</argument_list></call><op:operator pos:line="402" pos:column="63">.</op:operator><call><name pos:line="402" pos:column="64">FirstOrDefault</name><argument_list pos:line="402" pos:column="78">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="404" pos:column="13">var</name></type> <name pos:line="404" pos:column="17">numUse</name> <init pos:line="404" pos:column="24">= <expr><call><name><name pos:line="404" pos:column="26">foo</name><op:operator pos:line="404" pos:column="29">.</op:operator><name pos:line="404" pos:column="30">GetDescendants</name></name><argument_list pos:line="404" pos:column="44">()</argument_list></call><op:operator pos:line="404" pos:column="46">.</op:operator><call><name pos:line="404" pos:column="47">SelectMany</name><argument_list pos:line="404" pos:column="57">(<argument><expr><lambda><name pos:line="404" pos:column="58">s</name> <op:operator pos:line="404" pos:column="60">=&gt;</op:operator> <call><name><name pos:line="404" pos:column="63">s</name><op:operator pos:line="404" pos:column="64">.</op:operator><name pos:line="404" pos:column="65">GetExpressions</name></name><argument_list pos:line="404" pos:column="79">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="404" pos:column="82">.</op:operator><call><name pos:line="404" pos:column="83">SelectMany</name><argument_list pos:line="404" pos:column="93">(<argument><expr><lambda><name pos:line="404" pos:column="94">e</name> <op:operator pos:line="404" pos:column="96">=&gt;</op:operator> <call><name><name pos:line="404" pos:column="99">e</name><op:operator pos:line="404" pos:column="100">.</op:operator><name><name pos:line="404" pos:column="101">GetDescendantsAndSelf</name><argument_list pos:line="404" pos:column="122">&lt;<argument><name pos:line="404" pos:column="123">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="404" pos:column="131">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="404" pos:column="134">.</op:operator><call><name pos:line="404" pos:column="135">FirstOrDefault</name><argument_list pos:line="404" pos:column="149">(<argument><expr><lambda><name pos:line="404" pos:column="150">n</name> <op:operator pos:line="404" pos:column="152">=&gt;</op:operator> <name><name pos:line="404" pos:column="155">n</name><op:operator pos:line="404" pos:column="156">.</op:operator><name pos:line="404" pos:column="157">Name</name></name> <op:operator pos:line="404" pos:column="162">==</op:operator> <lit:literal type="string" pos:line="404" pos:column="165">"num"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="405" pos:column="13">Assert</name><op:operator pos:line="405" pos:column="19">.</op:operator><name pos:line="405" pos:column="20">IsNotNull</name></name><argument_list pos:line="405" pos:column="29">(<argument><expr><name pos:line="405" pos:column="30">numUse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="406" pos:column="13">Assert</name><op:operator pos:line="406" pos:column="19">.</op:operator><name pos:line="406" pos:column="20">AreSame</name></name><argument_list pos:line="406" pos:column="27">(<argument><expr><name pos:line="406" pos:column="28">numDecl</name></expr></argument>, <argument><expr><call><name><name pos:line="406" pos:column="37">numUse</name><op:operator pos:line="406" pos:column="43">.</op:operator><name pos:line="406" pos:column="44">FindMatches</name></name><argument_list pos:line="406" pos:column="55">()</argument_list></call><op:operator pos:line="406" pos:column="57">.</op:operator><call><name pos:line="406" pos:column="58">FirstOrDefault</name><argument_list pos:line="406" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
