<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML\ShortFileNameMapping.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2013 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Patrick Francis (ABB Group) - Initial implementation
 *    Vinay Augustine (ABB Group) - Initial implementation
 *****************************************************************************/</comment>

<using pos:line="13" pos:column="1">using <name pos:line="13" pos:column="7">System</name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Collections</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">Generic</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Diagnostics</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">IO</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Linq</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Text</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">System</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">Text</name><op:operator pos:line="19" pos:column="18">.</op:operator><name pos:line="19" pos:column="19">RegularExpressions</name></name>;</using>

<namespace pos:line="21" pos:column="1">namespace <name><name pos:line="21" pos:column="11">ABB</name><op:operator pos:line="21" pos:column="14">.</op:operator><name pos:line="21" pos:column="15">SrcML</name></name> <block pos:line="21" pos:column="21">{
    <comment type="line" pos:line="22" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="23" pos:column="5">/// Maintains a mapping between source file paths and the paths where XML versions are stored.</comment>
    <comment type="line" pos:line="24" pos:column="5">/// The names of the XML files are relatively short to avoid exceeding the Windows file path</comment>
    <comment type="line" pos:line="25" pos:column="5">/// character limit.</comment>
    <comment type="line" pos:line="26" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="27" pos:column="5">public</specifier> class <name pos:line="27" pos:column="18">ShortFileNameMapping</name> <super pos:line="27" pos:column="39">: <name pos:line="27" pos:column="41">AbstractFileNameMapping</name></super> <block pos:line="27" pos:column="65">{
        <decl_stmt><decl><type><specifier pos:line="28" pos:column="9">private</specifier> <specifier pos:line="28" pos:column="17">readonly</specifier> <name pos:line="28" pos:column="26">object</name></type> <name pos:line="28" pos:column="33">mappingLock</name> <init pos:line="28" pos:column="45">= <expr><op:operator pos:line="28" pos:column="47">new</op:operator> <call><name pos:line="28" pos:column="51">object</name><argument_list pos:line="28" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="29" pos:column="9">private</specifier> <name><name pos:line="29" pos:column="17">Dictionary</name><argument_list pos:line="29" pos:column="27">&lt;<argument><name pos:line="29" pos:column="28">string</name></argument>, <argument><name pos:line="29" pos:column="36">string</name></argument>&gt;</argument_list></name></type> <name pos:line="29" pos:column="44">mapping</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="30" pos:column="9">private</specifier> <name><name pos:line="30" pos:column="17">Dictionary</name><argument_list pos:line="30" pos:column="27">&lt;<argument><name pos:line="30" pos:column="28">string</name></argument>, <argument><name pos:line="30" pos:column="36">string</name></argument>&gt;</argument_list></name></type> <name pos:line="30" pos:column="44">reverseMapping</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="31" pos:column="9">private</specifier> <name><name pos:line="31" pos:column="17">Dictionary</name><argument_list pos:line="31" pos:column="27">&lt;<argument><name pos:line="31" pos:column="28">string</name></argument>, <argument><name pos:line="31" pos:column="36">int</name></argument>&gt;</argument_list></name></type> <name pos:line="31" pos:column="41">nameCount</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="32" pos:column="9">private</specifier> <specifier pos:line="32" pos:column="17">volatile</specifier> <name pos:line="32" pos:column="26">bool</name></type> <name pos:line="32" pos:column="31">_changed</name></decl>;</decl_stmt>
        <comment type="line" pos:line="33" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="34" pos:column="9">/// The name to use to save this mapping to disk</comment>
        <comment type="line" pos:line="35" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="36" pos:column="9">protected</specifier> <specifier pos:line="36" pos:column="19">const</specifier> <name pos:line="36" pos:column="25">string</name></type> <name pos:line="36" pos:column="32">mappingFile</name> <init pos:line="36" pos:column="44">= <expr><lit:literal type="string" pos:line="36" pos:column="46">"mapping.txt"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="38" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="39" pos:column="9">/// Creates a new abstract short file name mapping</comment>
        <comment type="line" pos:line="40" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="41" pos:column="9">/// &lt;param name="targetDirectory"&gt;The target directory to store the mapped files in&lt;/param&gt;</comment>
        <comment type="line" pos:line="42" pos:column="9">/// &lt;param name="targetExtension"&gt;The target extension&lt;/param&gt;</comment>
        <constructor><specifier pos:line="43" pos:column="9">protected</specifier> <name pos:line="43" pos:column="19">ShortFileNameMapping</name><parameter_list pos:line="43" pos:column="39">(<param><decl><type><name pos:line="43" pos:column="40">string</name></type> <name pos:line="43" pos:column="47">targetDirectory</name></decl></param>, <param><decl><type><name pos:line="43" pos:column="64">string</name></type> <name pos:line="43" pos:column="71">targetExtension</name></decl></param>)</parameter_list> 
        <member_list pos:line="44" pos:column="9">: <call><name pos:line="44" pos:column="11">base</name><argument_list pos:line="44" pos:column="15">(<argument><expr><name pos:line="44" pos:column="16">targetDirectory</name></expr></argument>, <argument><expr><name pos:line="44" pos:column="33">targetExtension</name></expr></argument>)</argument_list></call> </member_list><block pos:line="44" pos:column="50">{
            <decl_stmt><decl><type><name pos:line="45" pos:column="13">bool</name></type> <name pos:line="45" pos:column="18">directoryIsCaseInsensitive</name> <init pos:line="45" pos:column="45">= <expr><call><name pos:line="45" pos:column="47">CheckIfDirectoryIsCaseInsensitive</name><argument_list pos:line="45" pos:column="80">(<argument><expr><name pos:line="45" pos:column="81">targetDirectory</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="46" pos:column="13">mapping</name> <op:operator pos:line="46" pos:column="21">=</op:operator> <op:operator pos:line="46" pos:column="23">new</op:operator> <call><name><name pos:line="46" pos:column="27">Dictionary</name><argument_list pos:line="46" pos:column="37">&lt;<argument><name pos:line="46" pos:column="38">string</name></argument>, <argument><name pos:line="46" pos:column="46">string</name></argument>&gt;</argument_list></name><argument_list pos:line="46" pos:column="53">(<argument><expr><name pos:line="46" pos:column="54">directoryIsCaseInsensitive</name> <op:operator pos:line="46" pos:column="81">?</op:operator> <name><name pos:line="46" pos:column="83">StringComparer</name><op:operator pos:line="46" pos:column="97">.</op:operator><name pos:line="46" pos:column="98">OrdinalIgnoreCase</name></name> <op:operator pos:line="46" pos:column="116">:</op:operator> <name><name pos:line="46" pos:column="118">StringComparer</name><op:operator pos:line="46" pos:column="132">.</op:operator><name pos:line="46" pos:column="133">Ordinal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="47" pos:column="13">reverseMapping</name> <op:operator pos:line="47" pos:column="28">=</op:operator> <op:operator pos:line="47" pos:column="30">new</op:operator> <call><name><name pos:line="47" pos:column="34">Dictionary</name><argument_list pos:line="47" pos:column="44">&lt;<argument><name pos:line="47" pos:column="45">string</name></argument>, <argument><name pos:line="47" pos:column="53">string</name></argument>&gt;</argument_list></name><argument_list pos:line="47" pos:column="60">(<argument><expr><name pos:line="47" pos:column="61">directoryIsCaseInsensitive</name> <op:operator pos:line="47" pos:column="88">?</op:operator> <name><name pos:line="47" pos:column="90">StringComparer</name><op:operator pos:line="47" pos:column="104">.</op:operator><name pos:line="47" pos:column="105">OrdinalIgnoreCase</name></name> <op:operator pos:line="47" pos:column="123">:</op:operator> <name><name pos:line="47" pos:column="125">StringComparer</name><op:operator pos:line="47" pos:column="139">.</op:operator><name pos:line="47" pos:column="140">Ordinal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="48" pos:column="13">nameCount</name> <op:operator pos:line="48" pos:column="23">=</op:operator> <op:operator pos:line="48" pos:column="25">new</op:operator> <call><name><name pos:line="48" pos:column="29">Dictionary</name><argument_list pos:line="48" pos:column="39">&lt;<argument><name pos:line="48" pos:column="40">string</name></argument>, <argument><name pos:line="48" pos:column="48">int</name></argument>&gt;</argument_list></name><argument_list pos:line="48" pos:column="52">(<argument><expr><name pos:line="48" pos:column="53">directoryIsCaseInsensitive</name> <op:operator pos:line="48" pos:column="80">?</op:operator> <name><name pos:line="48" pos:column="82">StringComparer</name><op:operator pos:line="48" pos:column="96">.</op:operator><name pos:line="48" pos:column="97">OrdinalIgnoreCase</name></name> <op:operator pos:line="48" pos:column="115">:</op:operator> <name><name pos:line="48" pos:column="117">StringComparer</name><op:operator pos:line="48" pos:column="131">.</op:operator><name pos:line="48" pos:column="132">Ordinal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name pos:line="50" pos:column="13">ReadMapping</name><argument_list pos:line="50" pos:column="24">()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>
        
        <comment type="line" pos:line="53" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="54" pos:column="9">/// Gets the target path for &lt;paramref name="sourcePath" /&gt;.</comment>
        <comment type="line" pos:line="55" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="56" pos:column="9">/// &lt;param name="sourcePath"&gt;The source path&lt;/param&gt;</comment>
        <comment type="line" pos:line="57" pos:column="9">/// &lt;returns&gt;The target path&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="58" pos:column="9">public</specifier> <specifier pos:line="58" pos:column="16">override</specifier> <name pos:line="58" pos:column="25">string</name></type> <name pos:line="58" pos:column="32">GetTargetPath</name><parameter_list pos:line="58" pos:column="45">(<param><decl><type><name pos:line="58" pos:column="46">string</name></type> <name pos:line="58" pos:column="53">sourcePath</name></decl></param>)</parameter_list> <block pos:line="58" pos:column="65">{
            <if pos:line="59" pos:column="13">if<condition pos:line="59" pos:column="15">(<expr><call><name><name pos:line="59" pos:column="16">string</name><op:operator pos:line="59" pos:column="22">.</op:operator><name pos:line="59" pos:column="23">IsNullOrWhiteSpace</name></name><argument_list pos:line="59" pos:column="41">(<argument><expr><name pos:line="59" pos:column="42">sourcePath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="59" pos:column="54"> <block pos:line="59" pos:column="55">{
                <throw pos:line="60" pos:column="17">throw <expr><op:operator pos:line="60" pos:column="23">new</op:operator> <call><name pos:line="60" pos:column="27">ArgumentException</name><argument_list pos:line="60" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="60" pos:column="45">"Argument cannot be null, string.Empty, or whitespace."</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="60" pos:column="102">"sourcePath"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <expr_stmt><expr><name pos:line="63" pos:column="13">sourcePath</name> <op:operator pos:line="63" pos:column="24">=</op:operator> <call><name><name pos:line="63" pos:column="26">Path</name><op:operator pos:line="63" pos:column="30">.</op:operator><name pos:line="63" pos:column="31">GetFullPath</name></name><argument_list pos:line="63" pos:column="42">(<argument><expr><name pos:line="63" pos:column="43">sourcePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="64" pos:column="13">string</name></type> <name pos:line="64" pos:column="20">targetPath</name></decl>;</decl_stmt>
            <lock pos:line="65" pos:column="13">lock(<expr><name pos:line="65" pos:column="18">mappingLock</name></expr>) <block pos:line="65" pos:column="31">{
                <if pos:line="66" pos:column="17">if<condition pos:line="66" pos:column="19">(<expr><call><name><name pos:line="66" pos:column="20">mapping</name><op:operator pos:line="66" pos:column="27">.</op:operator><name pos:line="66" pos:column="28">ContainsKey</name></name><argument_list pos:line="66" pos:column="39">(<argument><expr><name pos:line="66" pos:column="40">sourcePath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="66" pos:column="52"> <block pos:line="66" pos:column="53">{
                    <expr_stmt><expr><name pos:line="67" pos:column="21">targetPath</name> <op:operator pos:line="67" pos:column="32">=</op:operator> <name><name pos:line="67" pos:column="34">mapping</name><index pos:line="67" pos:column="41">[<expr><name pos:line="67" pos:column="42">sourcePath</name></expr>]</index></name></expr>;</expr_stmt>
                }</block></then> <else pos:line="68" pos:column="19">else <block pos:line="68" pos:column="24">{
                    <decl_stmt><decl><type><name pos:line="69" pos:column="21">var</name></type> <name pos:line="69" pos:column="25">sourceName</name> <init pos:line="69" pos:column="36">= <expr><call><name><name pos:line="69" pos:column="38">Path</name><op:operator pos:line="69" pos:column="42">.</op:operator><name pos:line="69" pos:column="43">GetFileName</name></name><argument_list pos:line="69" pos:column="54">(<argument><expr><name pos:line="69" pos:column="55">sourcePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="70" pos:column="21">int</name></type> <name pos:line="70" pos:column="25">newNameNum</name> <init pos:line="70" pos:column="36">= <expr><call><name><name pos:line="70" pos:column="38">nameCount</name><op:operator pos:line="70" pos:column="47">.</op:operator><name pos:line="70" pos:column="48">ContainsKey</name></name><argument_list pos:line="70" pos:column="59">(<argument><expr><name pos:line="70" pos:column="60">sourceName</name></expr></argument>)</argument_list></call> <op:operator pos:line="70" pos:column="72">?</op:operator> <name><name pos:line="70" pos:column="74">nameCount</name><index pos:line="70" pos:column="83">[<expr><name pos:line="70" pos:column="84">sourceName</name></expr>]</index></name> <op:operator pos:line="70" pos:column="96">+</op:operator> <lit:literal type="number" pos:line="70" pos:column="98">1</lit:literal> <op:operator pos:line="70" pos:column="100">:</op:operator> <lit:literal type="number" pos:line="70" pos:column="102">1</lit:literal></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name><name pos:line="71" pos:column="21">nameCount</name><index pos:line="71" pos:column="30">[<expr><name pos:line="71" pos:column="31">sourceName</name></expr>]</index></name> <op:operator pos:line="71" pos:column="43">=</op:operator> <name pos:line="71" pos:column="45">newNameNum</name></expr>;</expr_stmt>

                    <expr_stmt><expr><name pos:line="73" pos:column="21">targetPath</name> <op:operator pos:line="73" pos:column="32">=</op:operator> <call><name><name pos:line="73" pos:column="34">Path</name><op:operator pos:line="73" pos:column="38">.</op:operator><name pos:line="73" pos:column="39">Combine</name></name><argument_list pos:line="73" pos:column="46">(<argument><expr><name pos:line="73" pos:column="47">TargetDirectory</name></expr></argument>, <argument><expr><call><name><name pos:line="73" pos:column="64">string</name><op:operator pos:line="73" pos:column="70">.</op:operator><name pos:line="73" pos:column="71">Format</name></name><argument_list pos:line="73" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="73" pos:column="78">"{0}.{1}{2}"</lit:literal></expr></argument>, <argument><expr><name pos:line="73" pos:column="92">sourceName</name></expr></argument>, <argument><expr><name pos:line="73" pos:column="104">newNameNum</name></expr></argument>, <argument><expr><name pos:line="73" pos:column="116">TargetExtension</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="74" pos:column="21">mapping</name><index pos:line="74" pos:column="28">[<expr><name pos:line="74" pos:column="29">sourcePath</name></expr>]</index></name> <op:operator pos:line="74" pos:column="41">=</op:operator> <name pos:line="74" pos:column="43">targetPath</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="75" pos:column="21">reverseMapping</name><index pos:line="75" pos:column="35">[<expr><name pos:line="75" pos:column="36">targetPath</name></expr>]</index></name> <op:operator pos:line="75" pos:column="48">=</op:operator> <name pos:line="75" pos:column="50">sourcePath</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="76" pos:column="21">_changed</name> <op:operator pos:line="76" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="76" pos:column="32">true</lit:literal></expr>;</expr_stmt>
                }</block></else></if>
            }</block></lock>
            <return pos:line="79" pos:column="13">return <expr><name pos:line="79" pos:column="20">targetPath</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="82" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="83" pos:column="9">/// Returns the source path for a give target path.</comment>
        <comment type="line" pos:line="84" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="85" pos:column="9">/// &lt;param name="targetPath"&gt;The target path&lt;/param&gt;</comment>
        <comment type="line" pos:line="86" pos:column="9">/// &lt;returns&gt;The corresponding source path for &lt;paramref name="targetPath"/&gt;. If &lt;paramref name="targetPath"/&gt; is not in the mapping, null is returned.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="87" pos:column="9">public</specifier> <specifier pos:line="87" pos:column="16">override</specifier> <name pos:line="87" pos:column="25">string</name></type> <name pos:line="87" pos:column="32">GetSourcePath</name><parameter_list pos:line="87" pos:column="45">(<param><decl><type><name pos:line="87" pos:column="46">string</name></type> <name pos:line="87" pos:column="53">targetPath</name></decl></param>)</parameter_list> <block pos:line="87" pos:column="65">{
            <if pos:line="88" pos:column="13">if<condition pos:line="88" pos:column="15">(<expr><op:operator pos:line="88" pos:column="16">!</op:operator><call><name><name pos:line="88" pos:column="17">Path</name><op:operator pos:line="88" pos:column="21">.</op:operator><name pos:line="88" pos:column="22">IsPathRooted</name></name><argument_list pos:line="88" pos:column="34">(<argument><expr><name pos:line="88" pos:column="35">targetPath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="88" pos:column="47"> <block pos:line="88" pos:column="48">{
                <expr_stmt><expr><name pos:line="89" pos:column="17">targetPath</name> <op:operator pos:line="89" pos:column="28">=</op:operator> <call><name><name pos:line="89" pos:column="30">Path</name><op:operator pos:line="89" pos:column="34">.</op:operator><name pos:line="89" pos:column="35">Combine</name></name><argument_list pos:line="89" pos:column="42">(<argument><expr><name pos:line="89" pos:column="43">TargetDirectory</name></expr></argument>, <argument><expr><name pos:line="89" pos:column="60">targetPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <lock pos:line="92" pos:column="13">lock(<expr><name pos:line="92" pos:column="18">mappingLock</name></expr>) <block pos:line="92" pos:column="31">{
                <decl_stmt><decl><type><name pos:line="93" pos:column="17">string</name></type> <name pos:line="93" pos:column="24">result</name></decl>;</decl_stmt>
                <return pos:line="94" pos:column="17">return <expr><op:operator pos:line="94" pos:column="24">(</op:operator><call><name><name pos:line="94" pos:column="25">reverseMapping</name><op:operator pos:line="94" pos:column="39">.</op:operator><name pos:line="94" pos:column="40">TryGetValue</name></name><argument_list pos:line="94" pos:column="51">(<argument><expr><name pos:line="94" pos:column="52">targetPath</name></expr></argument>, <argument><expr pos:line="94" pos:column="64">out <name pos:line="94" pos:column="68">result</name></expr></argument>)</argument_list></call> <op:operator pos:line="94" pos:column="76">?</op:operator> <name pos:line="94" pos:column="78">result</name> <op:operator pos:line="94" pos:column="85">:</op:operator> <name pos:line="94" pos:column="87">null</name><op:operator pos:line="94" pos:column="91">)</op:operator></expr>;</return>
            }</block></lock>
        }</block></function>

        <comment type="line" pos:line="98" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="99" pos:column="9">/// Updates the mapping data structures with the info from a single map file entry.</comment>
        <comment type="line" pos:line="100" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="101" pos:column="9">/// &lt;param name="sourcePath"&gt;The source path&lt;/param&gt;</comment>
        <comment type="line" pos:line="102" pos:column="9">/// &lt;param name="targetPath"&gt;The target path&lt;/param&gt;</comment>
        <function><type><specifier pos:line="103" pos:column="9">protected</specifier> <name pos:line="103" pos:column="19">void</name></type> <name pos:line="103" pos:column="24">ProcessMapFileEntry</name><parameter_list pos:line="103" pos:column="43">(<param><decl><type><name pos:line="103" pos:column="44">string</name></type> <name pos:line="103" pos:column="51">sourcePath</name></decl></param>, <param><decl><type><name pos:line="103" pos:column="63">string</name></type> <name pos:line="103" pos:column="70">targetPath</name></decl></param>)</parameter_list> <block pos:line="103" pos:column="82">{
            <lock pos:line="104" pos:column="13">lock(<expr><name pos:line="104" pos:column="18">mappingLock</name></expr>) <block pos:line="104" pos:column="31">{
                <expr_stmt><expr><name><name pos:line="105" pos:column="17">mapping</name><index pos:line="105" pos:column="24">[<expr><name pos:line="105" pos:column="25">sourcePath</name></expr>]</index></name> <op:operator pos:line="105" pos:column="37">=</op:operator> <name pos:line="105" pos:column="39">targetPath</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="106" pos:column="17">reverseMapping</name><index pos:line="106" pos:column="31">[<expr><name pos:line="106" pos:column="32">targetPath</name></expr>]</index></name> <op:operator pos:line="106" pos:column="44">=</op:operator> <name pos:line="106" pos:column="46">sourcePath</name></expr>;</expr_stmt>
                <comment type="line" pos:line="107" pos:column="17">//determine duplicate number</comment>
                <decl_stmt><decl><type><name pos:line="108" pos:column="17">var</name></type> <name pos:line="108" pos:column="21">m</name> <init pos:line="108" pos:column="23">= <expr><call><name><name pos:line="108" pos:column="25">Regex</name><op:operator pos:line="108" pos:column="30">.</op:operator><name pos:line="108" pos:column="31">Match</name></name><argument_list pos:line="108" pos:column="36">(<argument><expr><name pos:line="108" pos:column="37">targetPath</name></expr></argument>, <argument><expr><call><name><name pos:line="108" pos:column="49">String</name><op:operator pos:line="108" pos:column="55">.</op:operator><name pos:line="108" pos:column="56">Format</name></name><argument_list pos:line="108" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="108" pos:column="63">@"\.(\d+)\{0}$"</lit:literal></expr></argument>, <argument><expr><name pos:line="108" pos:column="80">TargetExtension</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="109" pos:column="17">if<condition pos:line="109" pos:column="19">(<expr><name><name pos:line="109" pos:column="20">m</name><op:operator pos:line="109" pos:column="21">.</op:operator><name pos:line="109" pos:column="22">Success</name></name></expr>)</condition><then pos:line="109" pos:column="30"> <block pos:line="109" pos:column="31">{
                    <decl_stmt><decl><type><name pos:line="110" pos:column="21">var</name></type> <name pos:line="110" pos:column="25">sourceName</name> <init pos:line="110" pos:column="36">= <expr><call><name><name pos:line="110" pos:column="38">Path</name><op:operator pos:line="110" pos:column="42">.</op:operator><name pos:line="110" pos:column="43">GetFileName</name></name><argument_list pos:line="110" pos:column="54">(<argument><expr><name pos:line="110" pos:column="55">sourcePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="111" pos:column="21">var</name></type> <name pos:line="111" pos:column="25">nameNum</name> <init pos:line="111" pos:column="33">= <expr><call><name><name pos:line="111" pos:column="35">int</name><op:operator pos:line="111" pos:column="38">.</op:operator><name pos:line="111" pos:column="39">Parse</name></name><argument_list pos:line="111" pos:column="44">(<argument><expr><name><name pos:line="111" pos:column="45">m</name><op:operator pos:line="111" pos:column="46">.</op:operator><name pos:line="111" pos:column="47">Groups</name><index pos:line="111" pos:column="53">[<expr><lit:literal type="number" pos:line="111" pos:column="54">1</lit:literal></expr>]</index></name><op:operator pos:line="111" pos:column="56">.</op:operator><name pos:line="111" pos:column="57">Value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="112" pos:column="21">var</name></type> <name pos:line="112" pos:column="25">currMax</name> <init pos:line="112" pos:column="33">= <expr><op:operator pos:line="112" pos:column="35">-</op:operator><lit:literal type="number" pos:line="112" pos:column="36">1</lit:literal></expr></init></decl>;</decl_stmt>
                    <if pos:line="113" pos:column="21">if<condition pos:line="113" pos:column="23">(<expr><call><name><name pos:line="113" pos:column="24">nameCount</name><op:operator pos:line="113" pos:column="33">.</op:operator><name pos:line="113" pos:column="34">ContainsKey</name></name><argument_list pos:line="113" pos:column="45">(<argument><expr><name pos:line="113" pos:column="46">sourceName</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="113" pos:column="58"> <block pos:line="113" pos:column="59">{
                        <expr_stmt><expr><name pos:line="114" pos:column="25">currMax</name> <op:operator pos:line="114" pos:column="33">=</op:operator> <name><name pos:line="114" pos:column="35">nameCount</name><index pos:line="114" pos:column="44">[<expr><name pos:line="114" pos:column="45">sourceName</name></expr>]</index></name></expr>;</expr_stmt>
                    }</block></then></if>
                    <expr_stmt><expr><name><name pos:line="116" pos:column="21">nameCount</name><index pos:line="116" pos:column="30">[<expr><name pos:line="116" pos:column="31">sourceName</name></expr>]</index></name> <op:operator pos:line="116" pos:column="43">=</op:operator> <name pos:line="116" pos:column="45">nameNum</name> <op:operator pos:line="116" pos:column="53">&gt;</op:operator> <name pos:line="116" pos:column="55">currMax</name> <op:operator pos:line="116" pos:column="63">?</op:operator> <name pos:line="116" pos:column="65">nameNum</name> <op:operator pos:line="116" pos:column="73">:</op:operator> <name pos:line="116" pos:column="75">currMax</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></lock>
        }</block></function>

        <comment type="line" pos:line="121" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="122" pos:column="9">/// Gets the source path from a target file. This may require reading the file to find out what the source path is.</comment>
        <comment type="line" pos:line="123" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="124" pos:column="9">/// &lt;param name="targetPath"&gt;The target path&lt;/param&gt;</comment>
        <comment type="line" pos:line="125" pos:column="9">/// &lt;returns&gt;The source path found in &lt;paramref name="targetPath"/&gt;. If the source path can't be found in the target file, then null is returned.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="126" pos:column="9">protected</specifier> <specifier pos:line="126" pos:column="19">virtual</specifier> <name pos:line="126" pos:column="27">string</name></type> <name pos:line="126" pos:column="34">GetSourcePathFromTargetFile</name><parameter_list pos:line="126" pos:column="61">(<param><decl><type><name pos:line="126" pos:column="62">string</name></type> <name pos:line="126" pos:column="69">targetPath</name></decl></param>)</parameter_list> <block pos:line="126" pos:column="81">{
            <return pos:line="127" pos:column="13">return <expr><name pos:line="127" pos:column="20">null</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="130" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="131" pos:column="9">/// Reads the mapping file in XmlDirectory. If this doesn't exist, it constructs a mapping</comment>
        <comment type="line" pos:line="132" pos:column="9">/// from any existing SrcML files in the directory.</comment>
        <comment type="line" pos:line="133" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="134" pos:column="9">protected</specifier> <name pos:line="134" pos:column="19">void</name></type> <name pos:line="134" pos:column="24">ReadMapping</name><parameter_list pos:line="134" pos:column="35">()</parameter_list> <block pos:line="134" pos:column="38">{
            <lock pos:line="135" pos:column="13">lock(<expr><name pos:line="135" pos:column="18">mappingLock</name></expr>) <block pos:line="135" pos:column="31">{
                <expr_stmt><expr><call><name><name pos:line="136" pos:column="17">mapping</name><op:operator pos:line="136" pos:column="24">.</op:operator><name pos:line="136" pos:column="25">Clear</name></name><argument_list pos:line="136" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="137" pos:column="17">var</name></type> <name pos:line="137" pos:column="21">mappingPath</name> <init pos:line="137" pos:column="33">= <expr><call><name><name pos:line="137" pos:column="35">Path</name><op:operator pos:line="137" pos:column="39">.</op:operator><name pos:line="137" pos:column="40">Combine</name></name><argument_list pos:line="137" pos:column="47">(<argument><expr><name pos:line="137" pos:column="48">TargetDirectory</name></expr></argument>, <argument><expr><name pos:line="137" pos:column="65">mappingFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="138" pos:column="17">if<condition pos:line="138" pos:column="19">(<expr><call><name><name pos:line="138" pos:column="20">File</name><op:operator pos:line="138" pos:column="24">.</op:operator><name pos:line="138" pos:column="25">Exists</name></name><argument_list pos:line="138" pos:column="31">(<argument><expr><name pos:line="138" pos:column="32">mappingPath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="138" pos:column="45"> <block pos:line="138" pos:column="46">{
                    <comment type="line" pos:line="139" pos:column="21">//read mapping file</comment>
                    <foreach pos:line="140" pos:column="21">foreach(<init><decl><type><name pos:line="140" pos:column="29">var</name></type> <name pos:line="140" pos:column="33">line</name> <range pos:line="140" pos:column="38">in <expr><call><name><name pos:line="140" pos:column="41">File</name><op:operator pos:line="140" pos:column="45">.</op:operator><name pos:line="140" pos:column="46">ReadLines</name></name><argument_list pos:line="140" pos:column="55">(<argument><expr><name pos:line="140" pos:column="56">mappingPath</name></expr></argument>)</argument_list></call></expr></range></decl></init>) <block pos:line="140" pos:column="70">{
                        <decl_stmt><decl><type><name pos:line="141" pos:column="25">var</name></type> <name pos:line="141" pos:column="29">paths</name> <init pos:line="141" pos:column="35">= <expr><call><name><name pos:line="141" pos:column="37">line</name><op:operator pos:line="141" pos:column="41">.</op:operator><name pos:line="141" pos:column="42">Split</name></name><argument_list pos:line="141" pos:column="47">(<argument><expr><lit:literal type="char" pos:line="141" pos:column="48">'|'</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if pos:line="142" pos:column="25">if<condition pos:line="142" pos:column="27">(<expr><name><name pos:line="142" pos:column="28">paths</name><op:operator pos:line="142" pos:column="33">.</op:operator><name pos:line="142" pos:column="34">Length</name></name> <op:operator pos:line="142" pos:column="41">!=</op:operator> <lit:literal type="number" pos:line="142" pos:column="44">2</lit:literal></expr>)</condition><then pos:line="142" pos:column="46"> <block pos:line="142" pos:column="47">{
                            <expr_stmt><expr><call><name><name pos:line="143" pos:column="29">Debug</name><op:operator pos:line="143" pos:column="34">.</op:operator><name pos:line="143" pos:column="35">WriteLine</name></name><argument_list pos:line="143" pos:column="44">(<argument><expr><call><name><name pos:line="143" pos:column="45">string</name><op:operator pos:line="143" pos:column="51">.</op:operator><name pos:line="143" pos:column="52">Format</name></name><argument_list pos:line="143" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="143" pos:column="59">"Bad line found in mapping file. Expected 2 fields, has {0}: {1}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="143" pos:column="126">paths</name><op:operator pos:line="143" pos:column="131">.</op:operator><name pos:line="143" pos:column="132">Length</name></name></expr></argument>, <argument><expr><name pos:line="143" pos:column="140">line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <continue pos:line="144" pos:column="29">continue;</continue>
                        }</block></then></if>
                        <expr_stmt><expr><call><name pos:line="146" pos:column="25">ProcessMapFileEntry</name><argument_list pos:line="146" pos:column="44">(<argument><expr><name><name pos:line="146" pos:column="45">paths</name><index pos:line="146" pos:column="50">[<expr><lit:literal type="number" pos:line="146" pos:column="51">0</lit:literal></expr>]</index></name><op:operator pos:line="146" pos:column="53">.</op:operator><call><name pos:line="146" pos:column="54">Trim</name><argument_list pos:line="146" pos:column="58">()</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="146" pos:column="62">paths</name><index pos:line="146" pos:column="67">[<expr><lit:literal type="number" pos:line="146" pos:column="68">1</lit:literal></expr>]</index></name><op:operator pos:line="146" pos:column="70">.</op:operator><call><name pos:line="146" pos:column="71">Trim</name><argument_list pos:line="146" pos:column="75">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></foreach>
                    <comment type="line" pos:line="148" pos:column="21">//TODO: remove file from disk</comment>
                }</block></then> <else pos:line="149" pos:column="19">else <block pos:line="149" pos:column="24">{
                    <comment type="line" pos:line="150" pos:column="21">//mapping file doesn't exist, so construct mapping from the xml files in the directory</comment>
                    <if pos:line="151" pos:column="21">if<condition pos:line="151" pos:column="23">(<expr><call><name><name pos:line="151" pos:column="24">Directory</name><op:operator pos:line="151" pos:column="33">.</op:operator><name pos:line="151" pos:column="34">Exists</name></name><argument_list pos:line="151" pos:column="40">(<argument><expr><name pos:line="151" pos:column="41">TargetDirectory</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="151" pos:column="58"> <block pos:line="151" pos:column="59">{
                        <foreach pos:line="152" pos:column="25">foreach(<init><decl><type><name pos:line="152" pos:column="33">var</name></type> <name pos:line="152" pos:column="37">targetFile</name> <range pos:line="152" pos:column="48">in <expr><call><name><name pos:line="152" pos:column="51">Directory</name><op:operator pos:line="152" pos:column="60">.</op:operator><name pos:line="152" pos:column="61">GetFiles</name></name><argument_list pos:line="152" pos:column="69">(<argument><expr><name pos:line="152" pos:column="70">TargetDirectory</name></expr></argument>, <argument><expr><call><name><name pos:line="152" pos:column="87">String</name><op:operator pos:line="152" pos:column="93">.</op:operator><name pos:line="152" pos:column="94">Format</name></name><argument_list pos:line="152" pos:column="100">(<argument><expr><lit:literal type="string" pos:line="152" pos:column="101">"*{0}"</lit:literal></expr></argument>, <argument><expr><name pos:line="152" pos:column="109">TargetExtension</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></range></decl></init>) <block pos:line="152" pos:column="128">{
                            <decl_stmt><decl><type><name pos:line="153" pos:column="29">var</name></type> <name pos:line="153" pos:column="33">sourcePath</name> <init pos:line="153" pos:column="44">= <expr><call><name pos:line="153" pos:column="46">GetSourcePathFromTargetFile</name><argument_list pos:line="153" pos:column="73">(<argument><expr><name pos:line="153" pos:column="74">targetFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <if pos:line="154" pos:column="29">if<condition pos:line="154" pos:column="31">(<expr><op:operator pos:line="154" pos:column="32">!</op:operator><call><name><name pos:line="154" pos:column="33">string</name><op:operator pos:line="154" pos:column="39">.</op:operator><name pos:line="154" pos:column="40">IsNullOrWhiteSpace</name></name><argument_list pos:line="154" pos:column="58">(<argument><expr><name pos:line="154" pos:column="59">sourcePath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="154" pos:column="71"> <block pos:line="154" pos:column="72">{
                                <expr_stmt><expr><call><name pos:line="155" pos:column="33">ProcessMapFileEntry</name><argument_list pos:line="155" pos:column="52">(<argument><expr><name pos:line="155" pos:column="53">sourcePath</name></expr></argument>, <argument><expr><call><name><name pos:line="155" pos:column="65">Path</name><op:operator pos:line="155" pos:column="69">.</op:operator><name pos:line="155" pos:column="70">GetFullPath</name></name><argument_list pos:line="155" pos:column="81">(<argument><expr><name pos:line="155" pos:column="82">targetFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></then> <else pos:line="156" pos:column="31">else <block pos:line="156" pos:column="36">{
                                <expr_stmt><expr><call><name><name pos:line="157" pos:column="33">File</name><op:operator pos:line="157" pos:column="37">.</op:operator><name pos:line="157" pos:column="38">Delete</name></name><argument_list pos:line="157" pos:column="44">(<argument><expr><name pos:line="157" pos:column="45">targetFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></else></if>
                        }</block></foreach>
                    }</block></then></if>
                }</block></else></if>
            }</block></lock>
        }</block></function>

        <comment type="line" pos:line="165" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="166" pos:column="9">/// Saves the mapping to disk</comment>
        <comment type="line" pos:line="167" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="168" pos:column="9">public</specifier> <specifier pos:line="168" pos:column="16">override</specifier> <name pos:line="168" pos:column="25">void</name></type> <name pos:line="168" pos:column="30">SaveMapping</name><parameter_list pos:line="168" pos:column="41">()</parameter_list> <block pos:line="168" pos:column="44">{
            <if pos:line="169" pos:column="13">if<condition pos:line="169" pos:column="15">(<expr><name pos:line="169" pos:column="16">_changed</name></expr>)</condition><then pos:line="169" pos:column="25"> <block pos:line="169" pos:column="26">{
                <lock pos:line="170" pos:column="17">lock(<expr><name pos:line="170" pos:column="22">mappingLock</name></expr>) <block pos:line="170" pos:column="35">{
                    <using pos:line="171" pos:column="21">using(<decl><type><name pos:line="171" pos:column="27">var</name></type> <name pos:line="171" pos:column="31">outFile</name> <init pos:line="171" pos:column="39">= <expr><op:operator pos:line="171" pos:column="41">new</op:operator> <call><name pos:line="171" pos:column="45">StreamWriter</name><argument_list pos:line="171" pos:column="57">(<argument><expr><call><name><name pos:line="171" pos:column="58">Path</name><op:operator pos:line="171" pos:column="62">.</op:operator><name pos:line="171" pos:column="63">Combine</name></name><argument_list pos:line="171" pos:column="70">(<argument><expr><name pos:line="171" pos:column="71">TargetDirectory</name></expr></argument>, <argument><expr><name pos:line="171" pos:column="88">mappingFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>) <block pos:line="171" pos:column="103">{
                        <foreach pos:line="172" pos:column="25">foreach(<init><decl><type><name pos:line="172" pos:column="33">var</name></type> <name pos:line="172" pos:column="37">kvp</name> <range pos:line="172" pos:column="41">in <expr><name pos:line="172" pos:column="44">mapping</name></expr></range></decl></init>) <block pos:line="172" pos:column="53">{
                            <expr_stmt><expr><call><name><name pos:line="173" pos:column="29">outFile</name><op:operator pos:line="173" pos:column="36">.</op:operator><name pos:line="173" pos:column="37">WriteLine</name></name><argument_list pos:line="173" pos:column="46">(<argument><expr><call><name><name pos:line="173" pos:column="47">string</name><op:operator pos:line="173" pos:column="53">.</op:operator><name pos:line="173" pos:column="54">Format</name></name><argument_list pos:line="173" pos:column="60">(<argument><expr><lit:literal type="string" pos:line="173" pos:column="61">"{0}|{1}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="173" pos:column="72">kvp</name><op:operator pos:line="173" pos:column="75">.</op:operator><name pos:line="173" pos:column="76">Key</name></name></expr></argument>, <argument><expr><name><name pos:line="173" pos:column="81">kvp</name><op:operator pos:line="173" pos:column="84">.</op:operator><name pos:line="173" pos:column="85">Value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></foreach>
                    }</block></using>
                }</block></lock>
                <expr_stmt><expr><name pos:line="177" pos:column="17">_changed</name> <op:operator pos:line="177" pos:column="26">=</op:operator> <lit:literal type="boolean" pos:line="177" pos:column="28">false</lit:literal></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="181" pos:column="9">private</specifier> <specifier pos:line="181" pos:column="17">static</specifier> <name pos:line="181" pos:column="24">bool</name></type> <name pos:line="181" pos:column="29">CheckIfDirectoryIsCaseInsensitive</name><parameter_list pos:line="181" pos:column="62">(<param><decl><type><name pos:line="181" pos:column="63">string</name></type> <name pos:line="181" pos:column="70">directory</name></decl></param>)</parameter_list> <block pos:line="181" pos:column="81">{
            <decl_stmt><decl><type><name pos:line="182" pos:column="13">bool</name></type> <name pos:line="182" pos:column="18">isCaseInsensitive</name> <init pos:line="182" pos:column="36">= <expr><lit:literal type="boolean" pos:line="182" pos:column="38">false</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="183" pos:column="13">string</name></type> <name pos:line="183" pos:column="20">tempFile</name> <init pos:line="183" pos:column="29">= <expr><name><name pos:line="183" pos:column="31">string</name><op:operator pos:line="183" pos:column="37">.</op:operator><name pos:line="183" pos:column="38">Empty</name></name></expr></init></decl>;</decl_stmt>
            <try pos:line="184" pos:column="13">try <block pos:line="184" pos:column="17">{
                <if pos:line="185" pos:column="17">if<condition pos:line="185" pos:column="19">(<expr><call><name><name pos:line="185" pos:column="20">Directory</name><op:operator pos:line="185" pos:column="29">.</op:operator><name pos:line="185" pos:column="30">Exists</name></name><argument_list pos:line="185" pos:column="36">(<argument><expr><name pos:line="185" pos:column="37">directory</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="185" pos:column="48"> <block pos:line="185" pos:column="49">{
                    <expr_stmt><expr><name pos:line="186" pos:column="21">tempFile</name> <op:operator pos:line="186" pos:column="30">=</op:operator> <call><name><name pos:line="186" pos:column="32">Path</name><op:operator pos:line="186" pos:column="36">.</op:operator><name pos:line="186" pos:column="37">Combine</name></name><argument_list pos:line="186" pos:column="44">(<argument><expr><name pos:line="186" pos:column="45">directory</name></expr></argument>, <argument><expr><call><name><name pos:line="186" pos:column="56">Guid</name><op:operator pos:line="186" pos:column="60">.</op:operator><name pos:line="186" pos:column="61">NewGuid</name></name><argument_list pos:line="186" pos:column="68">()</argument_list></call><op:operator pos:line="186" pos:column="70">.</op:operator><call><name pos:line="186" pos:column="71">ToString</name><argument_list pos:line="186" pos:column="79">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="186" pos:column="82">.</op:operator><call><name pos:line="186" pos:column="83">ToLower</name><argument_list pos:line="186" pos:column="90">()</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="187" pos:column="19">else <block pos:line="187" pos:column="24">{
                    <expr_stmt><expr><name pos:line="188" pos:column="21">tempFile</name> <op:operator pos:line="188" pos:column="30">=</op:operator> <call><name><name pos:line="188" pos:column="32">Path</name><op:operator pos:line="188" pos:column="36">.</op:operator><name pos:line="188" pos:column="37">GetTempFileName</name></name><argument_list pos:line="188" pos:column="52">()</argument_list></call><op:operator pos:line="188" pos:column="54">.</op:operator><call><name pos:line="188" pos:column="55">ToLower</name><argument_list pos:line="188" pos:column="62">()</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><call><name><name pos:line="190" pos:column="17">File</name><op:operator pos:line="190" pos:column="21">.</op:operator><name pos:line="190" pos:column="22">Create</name></name><argument_list pos:line="190" pos:column="28">(<argument><expr><name pos:line="190" pos:column="29">tempFile</name></expr></argument>)</argument_list></call><op:operator pos:line="190" pos:column="38">.</op:operator><call><name pos:line="190" pos:column="39">Close</name><argument_list pos:line="190" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="191" pos:column="17">isCaseInsensitive</name> <op:operator pos:line="191" pos:column="35">=</op:operator> <call><name><name pos:line="191" pos:column="37">File</name><op:operator pos:line="191" pos:column="41">.</op:operator><name pos:line="191" pos:column="42">Exists</name></name><argument_list pos:line="191" pos:column="48">(<argument><expr><call><name><name pos:line="191" pos:column="49">tempFile</name><op:operator pos:line="191" pos:column="57">.</op:operator><name pos:line="191" pos:column="58">ToUpper</name></name><argument_list pos:line="191" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <finally pos:line="192" pos:column="15">finally <block pos:line="192" pos:column="23">{
                <if pos:line="193" pos:column="17">if<condition pos:line="193" pos:column="19">(<expr><call><name><name pos:line="193" pos:column="20">File</name><op:operator pos:line="193" pos:column="24">.</op:operator><name pos:line="193" pos:column="25">Exists</name></name><argument_list pos:line="193" pos:column="31">(<argument><expr><name pos:line="193" pos:column="32">tempFile</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="193" pos:column="42"> <block pos:line="193" pos:column="43">{
                    <expr_stmt><expr><call><name><name pos:line="194" pos:column="21">File</name><op:operator pos:line="194" pos:column="25">.</op:operator><name pos:line="194" pos:column="26">Delete</name></name><argument_list pos:line="194" pos:column="32">(<argument><expr><name pos:line="194" pos:column="33">tempFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></finally></try>
            <return pos:line="197" pos:column="13">return <expr><name pos:line="197" pos:column="20">isCaseInsensitive</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="200" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="201" pos:column="9">/// Disposes of this mapping object. It first calls &lt;see cref="SaveMapping"/&gt;</comment>
        <comment type="line" pos:line="202" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="203" pos:column="9">public</specifier> <specifier pos:line="203" pos:column="16">override</specifier> <name pos:line="203" pos:column="25">void</name></type> <name pos:line="203" pos:column="30">Dispose</name><parameter_list pos:line="203" pos:column="37">()</parameter_list> <block pos:line="203" pos:column="40">{
            <expr_stmt><expr><call><name pos:line="204" pos:column="13">SaveMapping</name><argument_list pos:line="204" pos:column="24">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
