<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Test\TransformHarnessTest.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2010 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">System</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Text</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Collections</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">Generic</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Linq</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">NUnit</name><op:operator pos:line="16" pos:column="12">.</op:operator><name pos:line="16" pos:column="13">Framework</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Reflection</name></name>;</using>

<namespace pos:line="19" pos:column="1">namespace <name><name pos:line="19" pos:column="11">ABB</name><op:operator pos:line="19" pos:column="14">.</op:operator><name pos:line="19" pos:column="15">SrcML</name><op:operator pos:line="19" pos:column="20">.</op:operator><name pos:line="19" pos:column="21">Test</name></name>
<block pos:line="20" pos:column="1">{
    <class><attribute pos:line="21" pos:column="5">[<expr><name pos:line="21" pos:column="6">TestFixture</name></expr>]</attribute>
    <attribute pos:line="22" pos:column="5">[<expr><call><name pos:line="22" pos:column="6">Category</name><argument_list pos:line="22" pos:column="14">(<argument><expr><lit:literal type="string" pos:line="22" pos:column="15">"Build"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="23" pos:column="5">public</specifier> class <name pos:line="23" pos:column="18">TransformHarnessTest</name>
    <block pos:line="24" pos:column="5">{
        <function><type><attribute pos:line="25" pos:column="9">[<expr><name pos:line="25" pos:column="10">Test</name></expr>]</attribute>
        <attribute pos:line="26" pos:column="9">[<expr><call><name pos:line="26" pos:column="10">ExpectedException</name><argument_list pos:line="26" pos:column="27">(<argument><expr><call><name pos:line="26" pos:column="28">typeof</name><argument_list pos:line="26" pos:column="34">(<argument><expr><name pos:line="26" pos:column="35">ArgumentNullException</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="27" pos:column="9">public</specifier> <name pos:line="27" pos:column="16">void</name></type> <name pos:line="27" pos:column="21">NullTransformTypeTest</name><parameter_list pos:line="27" pos:column="42">()</parameter_list>
        <block pos:line="28" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="29" pos:column="13">TransformObjectHarness</name></type> <name pos:line="29" pos:column="36">harness</name> <init pos:line="29" pos:column="44">= <expr><op:operator pos:line="29" pos:column="46">new</op:operator> <call><name pos:line="29" pos:column="50">TransformObjectHarness</name><argument_list pos:line="29" pos:column="72">(<argument><expr><name pos:line="29" pos:column="73">null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        }</block></function>

        <function><type><attribute pos:line="32" pos:column="9">[<expr><name pos:line="32" pos:column="10">Test</name></expr>]</attribute>
        <attribute pos:line="33" pos:column="9">[<expr><call><name pos:line="33" pos:column="10">ExpectedException</name><argument_list pos:line="33" pos:column="27">(<argument><expr><call><name pos:line="33" pos:column="28">typeof</name><argument_list pos:line="33" pos:column="34">(<argument><expr><name pos:line="33" pos:column="35">ArgumentException</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="34" pos:column="9">public</specifier> <name pos:line="34" pos:column="16">void</name></type> <name pos:line="34" pos:column="21">NonTransformTypeTest</name><parameter_list pos:line="34" pos:column="41">()</parameter_list>
        <block pos:line="35" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="36" pos:column="13">TransformObjectHarness</name></type> <name pos:line="36" pos:column="36">harness</name> <init pos:line="36" pos:column="44">= <expr><op:operator pos:line="36" pos:column="46">new</op:operator> <call><name pos:line="36" pos:column="50">TransformObjectHarness</name><argument_list pos:line="36" pos:column="72">(<argument><expr><call><name pos:line="36" pos:column="73">typeof</name><argument_list pos:line="36" pos:column="79">(<argument><expr><name pos:line="36" pos:column="80">String</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        }</block></function>

        <function><type><attribute pos:line="39" pos:column="9">[<expr><name pos:line="39" pos:column="10">Test</name></expr>]</attribute>
        <attribute pos:line="40" pos:column="9">[<expr><call><name pos:line="40" pos:column="10">ExpectedException</name><argument_list pos:line="40" pos:column="27">(<argument><expr><call><name pos:line="40" pos:column="28">typeof</name><argument_list pos:line="40" pos:column="34">(<argument><expr><name pos:line="40" pos:column="35">ArgumentException</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="41" pos:column="9">public</specifier> <name pos:line="41" pos:column="16">void</name></type> <name pos:line="41" pos:column="21">TransformWithoutDefaultConstructor</name><parameter_list pos:line="41" pos:column="55">()</parameter_list>
        <block pos:line="42" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="43" pos:column="13">ITransform</name></type> <name pos:line="43" pos:column="24">harness</name> <init pos:line="43" pos:column="32">= <expr><op:operator pos:line="43" pos:column="34">new</op:operator> <call><name pos:line="43" pos:column="38">TransformObjectHarness</name><argument_list pos:line="43" pos:column="60">(<argument><expr><call><name pos:line="43" pos:column="61">typeof</name><argument_list pos:line="43" pos:column="67">(<argument><expr><name pos:line="43" pos:column="68">TransformWithPrivateConstructor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        }</block></function>

        <function><type><attribute pos:line="46" pos:column="9">[<expr><name pos:line="46" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="47" pos:column="9">public</specifier> <name pos:line="47" pos:column="16">void</name></type> <name pos:line="47" pos:column="21">InvalidQueryFunctionTest</name><parameter_list pos:line="47" pos:column="45">()</parameter_list>
        <block pos:line="48" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="49" pos:column="13">var</name></type> <name pos:line="49" pos:column="17">tests</name> <init pos:line="49" pos:column="23">= <expr><call><name><name pos:line="49" pos:column="25">QueryHarness</name><op:operator pos:line="49" pos:column="37">.</op:operator><name pos:line="49" pos:column="38">CreateFromType</name></name><argument_list pos:line="49" pos:column="52">(<argument><expr><call><name pos:line="49" pos:column="53">typeof</name><argument_list pos:line="49" pos:column="59">(<argument><expr><name pos:line="49" pos:column="60">InvalidQueryFunctions</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="50" pos:column="13">Assert</name><op:operator pos:line="50" pos:column="19">.</op:operator><name pos:line="50" pos:column="20">AreEqual</name></name><argument_list pos:line="50" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="50" pos:column="29">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="50" pos:column="32">tests</name><op:operator pos:line="50" pos:column="37">.</op:operator><name pos:line="50" pos:column="38">Count</name></name><argument_list pos:line="50" pos:column="43">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="53" pos:column="9">[<expr><name pos:line="53" pos:column="10">Test</name></expr>]</attribute>
        <attribute pos:line="54" pos:column="9">[<expr><call><name pos:line="54" pos:column="10">ExpectedException</name><argument_list pos:line="54" pos:column="27">(<argument><expr><call><name pos:line="54" pos:column="28">typeof</name><argument_list pos:line="54" pos:column="34">(<argument><expr><name pos:line="54" pos:column="35">ArgumentNullException</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="55" pos:column="9">public</specifier> <name pos:line="55" pos:column="16">void</name></type> <name pos:line="55" pos:column="21">QueryFunctionWithNullType</name><parameter_list pos:line="55" pos:column="46">()</parameter_list>
        <block pos:line="56" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="57" pos:column="13">QueryHarness</name></type> <name pos:line="57" pos:column="26">harness</name> <init pos:line="57" pos:column="34">= <expr><op:operator pos:line="57" pos:column="36">new</op:operator> <call><name pos:line="57" pos:column="40">QueryHarness</name><argument_list pos:line="57" pos:column="52">(<argument><expr><name pos:line="57" pos:column="53">null</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="57" pos:column="59">"test2"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        }</block></function>

        <function><type><attribute pos:line="60" pos:column="9">[<expr><name pos:line="60" pos:column="10">Test</name></expr>]</attribute>
        <attribute pos:line="61" pos:column="9">[<expr><call><name pos:line="61" pos:column="10">ExpectedException</name><argument_list pos:line="61" pos:column="27">(<argument><expr><call><name pos:line="61" pos:column="28">typeof</name><argument_list pos:line="61" pos:column="34">(<argument><expr><name pos:line="61" pos:column="35">ArgumentNullException</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="62" pos:column="9">public</specifier> <name pos:line="62" pos:column="16">void</name></type> <name pos:line="62" pos:column="21">QueryFunctionWithNullMethod</name><parameter_list pos:line="62" pos:column="48">()</parameter_list>
        <block pos:line="63" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="64" pos:column="13">QueryHarness</name></type> <name pos:line="64" pos:column="26">harness</name> <init pos:line="64" pos:column="34">= <expr><op:operator pos:line="64" pos:column="36">new</op:operator> <call><name pos:line="64" pos:column="40">QueryHarness</name><argument_list pos:line="64" pos:column="52">(<argument><expr><call><name pos:line="64" pos:column="53">typeof</name><argument_list pos:line="64" pos:column="59">(<argument><expr><name pos:line="64" pos:column="60">EmptyClass</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="64" pos:column="73">(</op:operator><name pos:line="64" pos:column="74">MethodInfo</name><op:operator pos:line="64" pos:column="84">)</op:operator><name pos:line="64" pos:column="85">null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        }</block></function>

        <function><type><attribute pos:line="67" pos:column="9">[<expr><name pos:line="67" pos:column="10">Test</name></expr>]</attribute>
        <attribute pos:line="68" pos:column="9">[<expr><call><name pos:line="68" pos:column="10">ExpectedException</name><argument_list pos:line="68" pos:column="27">(<argument><expr><call><name pos:line="68" pos:column="28">typeof</name><argument_list pos:line="68" pos:column="34">(<argument><expr><name pos:line="68" pos:column="35">ArgumentException</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="69" pos:column="9">public</specifier> <name pos:line="69" pos:column="16">void</name></type> <name pos:line="69" pos:column="21">QueryFunctionWithMissingMethod</name><parameter_list pos:line="69" pos:column="51">()</parameter_list>
        <block pos:line="70" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="71" pos:column="13">QueryHarness</name></type> <name pos:line="71" pos:column="26">harness</name> <init pos:line="71" pos:column="34">= <expr><op:operator pos:line="71" pos:column="36">new</op:operator> <call><name pos:line="71" pos:column="40">QueryHarness</name><argument_list pos:line="71" pos:column="52">(<argument><expr><call><name pos:line="71" pos:column="53">typeof</name><argument_list pos:line="71" pos:column="59">(<argument><expr><name pos:line="71" pos:column="60">InvalidQueryFunctions</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="71" pos:column="84">"test3"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        }</block></function>

        <function><type><attribute pos:line="74" pos:column="9">[<expr><name pos:line="74" pos:column="10">Test</name></expr>]</attribute>
        <attribute pos:line="75" pos:column="9">[<expr><call><name pos:line="75" pos:column="10">ExpectedException</name><argument_list pos:line="75" pos:column="27">(<argument><expr><call><name pos:line="75" pos:column="28">typeof</name><argument_list pos:line="75" pos:column="34">(<argument><expr><name pos:line="75" pos:column="35">ArgumentException</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="76" pos:column="9">public</specifier> <name pos:line="76" pos:column="16">void</name></type> <name pos:line="76" pos:column="21">QueryFunctionWithBadSignature</name><parameter_list pos:line="76" pos:column="50">()</parameter_list>
        <block pos:line="77" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="78" pos:column="13">QueryHarness</name></type> <name pos:line="78" pos:column="26">harness</name> <init pos:line="78" pos:column="34">= <expr><op:operator pos:line="78" pos:column="36">new</op:operator> <call><name pos:line="78" pos:column="40">QueryHarness</name><argument_list pos:line="78" pos:column="52">(<argument><expr><call><name pos:line="78" pos:column="53">typeof</name><argument_list pos:line="78" pos:column="59">(<argument><expr><name pos:line="78" pos:column="60">InvalidQueryFunctions</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="78" pos:column="84">"test2"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        }</block></function>

        <function><type><attribute pos:line="81" pos:column="9">[<expr><name pos:line="81" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="82" pos:column="9">public</specifier> <name pos:line="82" pos:column="16">void</name></type> <name pos:line="82" pos:column="21">NoQueriesTest</name><parameter_list pos:line="82" pos:column="34">()</parameter_list>
        <block pos:line="83" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="84" pos:column="13">var</name></type> <name pos:line="84" pos:column="17">tests</name> <init pos:line="84" pos:column="23">= <expr><call><name><name pos:line="84" pos:column="25">QueryHarness</name><op:operator pos:line="84" pos:column="37">.</op:operator><name pos:line="84" pos:column="38">CreateFromType</name></name><argument_list pos:line="84" pos:column="52">(<argument><expr><call><name pos:line="84" pos:column="53">typeof</name><argument_list pos:line="84" pos:column="59">(<argument><expr><name pos:line="84" pos:column="60">EmptyClass</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="85" pos:column="13">Assert</name><op:operator pos:line="85" pos:column="19">.</op:operator><name pos:line="85" pos:column="20">AreEqual</name></name><argument_list pos:line="85" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="85" pos:column="29">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="85" pos:column="32">tests</name><op:operator pos:line="85" pos:column="37">.</op:operator><name pos:line="85" pos:column="38">Count</name></name><argument_list pos:line="85" pos:column="43">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="88" pos:column="9">[<expr><name pos:line="88" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="89" pos:column="9">public</specifier> <name pos:line="89" pos:column="16">void</name></type> <name pos:line="89" pos:column="21">StaticQueryCreationWithoutDefaultConstructorTest</name><parameter_list pos:line="89" pos:column="69">()</parameter_list>
        <block pos:line="90" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="91" pos:column="13">QueryHarness</name></type> <name pos:line="91" pos:column="26">q</name> <init pos:line="91" pos:column="28">= <expr><op:operator pos:line="91" pos:column="30">new</op:operator> <call><name pos:line="91" pos:column="34">QueryHarness</name><argument_list pos:line="91" pos:column="46">(<argument><expr><call><name pos:line="91" pos:column="47">typeof</name><argument_list pos:line="91" pos:column="53">(<argument><expr><name pos:line="91" pos:column="54">StaticVsNonStaticQueryFunctions</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="91" pos:column="88">"StaticMyQuery"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="92" pos:column="13">Assert</name><op:operator pos:line="92" pos:column="19">.</op:operator><name pos:line="92" pos:column="20">IsNotNull</name></name><argument_list pos:line="92" pos:column="29">(<argument><expr><name pos:line="92" pos:column="30">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <function><type><attribute pos:line="94" pos:column="9">[<expr><name pos:line="94" pos:column="10">Test</name></expr>]</attribute>
        <attribute pos:line="95" pos:column="9">[<expr><call><name pos:line="95" pos:column="10">ExpectedException</name><argument_list pos:line="95" pos:column="27">(<argument><expr><call><name pos:line="95" pos:column="28">typeof</name><argument_list pos:line="95" pos:column="34">(<argument><expr><name pos:line="95" pos:column="35">ArgumentException</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="96" pos:column="9">public</specifier> <name pos:line="96" pos:column="16">void</name></type> <name pos:line="96" pos:column="21">QueryCreationWithoutDefaultConstructorTest</name><parameter_list pos:line="96" pos:column="63">()</parameter_list>
        <block pos:line="97" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="98" pos:column="13">QueryHarness</name></type> <name pos:line="98" pos:column="26">q</name> <init pos:line="98" pos:column="28">= <expr><op:operator pos:line="98" pos:column="30">new</op:operator> <call><name pos:line="98" pos:column="34">QueryHarness</name><argument_list pos:line="98" pos:column="46">(<argument><expr><call><name pos:line="98" pos:column="47">typeof</name><argument_list pos:line="98" pos:column="53">(<argument><expr><name pos:line="98" pos:column="54">StaticVsNonStaticQueryFunctions</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="98" pos:column="88">"MyQuery"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
