<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data.Test\GetStatementTests.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">ABB</name><op:operator pos:line="1" pos:column="10">.</op:operator><name pos:line="1" pos:column="11">SrcML</name><op:operator pos:line="1" pos:column="16">.</op:operator><name pos:line="1" pos:column="17">Test</name><op:operator pos:line="1" pos:column="21">.</op:operator><name pos:line="1" pos:column="22">Utilities</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">NUnit</name><op:operator pos:line="2" pos:column="12">.</op:operator><name pos:line="2" pos:column="13">Framework</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Collections</name><op:operator pos:line="3" pos:column="25">.</op:operator><name pos:line="3" pos:column="26">Generic</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Linq</name></name>;</using>

<namespace pos:line="6" pos:column="1">namespace <name><name pos:line="6" pos:column="11">ABB</name><op:operator pos:line="6" pos:column="14">.</op:operator><name pos:line="6" pos:column="15">SrcML</name><op:operator pos:line="6" pos:column="20">.</op:operator><name pos:line="6" pos:column="21">Data</name><op:operator pos:line="6" pos:column="25">.</op:operator><name pos:line="6" pos:column="26">Test</name></name> <block pos:line="6" pos:column="31">{

    <class><attribute pos:line="8" pos:column="5">[<expr><name pos:line="8" pos:column="6">TestFixture</name></expr>]</attribute>
    <attribute pos:line="9" pos:column="5">[<expr><call><name pos:line="9" pos:column="6">Category</name><argument_list pos:line="9" pos:column="14">(<argument><expr><lit:literal type="string" pos:line="9" pos:column="15">"Build"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="10" pos:column="5">public</specifier> class <name pos:line="10" pos:column="18">GetStatementTests</name> <block pos:line="10" pos:column="36">{
        <decl_stmt><decl><type><specifier pos:line="11" pos:column="9">private</specifier> <name><name pos:line="11" pos:column="17">Dictionary</name><argument_list pos:line="11" pos:column="27">&lt;<argument><name pos:line="11" pos:column="28">Language</name></argument>, <argument><name pos:line="11" pos:column="38">SrcMLFileUnitSetup</name></argument>&gt;</argument_list></name></type> <name pos:line="11" pos:column="58">fileSetup</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="12" pos:column="9">private</specifier> <name><name pos:line="12" pos:column="17">Dictionary</name><argument_list pos:line="12" pos:column="27">&lt;<argument><name pos:line="12" pos:column="28">Language</name></argument>, <argument><name pos:line="12" pos:column="38">AbstractCodeParser</name></argument>&gt;</argument_list></name></type> <name pos:line="12" pos:column="58">parser</name></decl>;</decl_stmt>

        <function><type><attribute pos:line="14" pos:column="9">[<expr><name pos:line="14" pos:column="10">TestFixtureSetUp</name></expr>]</attribute>
        <specifier pos:line="15" pos:column="9">public</specifier> <name pos:line="15" pos:column="16">void</name></type> <name pos:line="15" pos:column="21">ClassSetup</name><parameter_list pos:line="15" pos:column="31">()</parameter_list> <block pos:line="15" pos:column="34">{
            <expr_stmt><expr><name pos:line="16" pos:column="13">parser</name> <op:operator pos:line="16" pos:column="20">=</op:operator> <op:operator pos:line="16" pos:column="22">new</op:operator> <name><name pos:line="16" pos:column="26">Dictionary</name><argument_list pos:line="16" pos:column="36">&lt;<argument><name pos:line="16" pos:column="37">Language</name></argument>, <argument><name pos:line="16" pos:column="47">AbstractCodeParser</name></argument>&gt;</argument_list></name>
                      <block pos:line="17" pos:column="23">{
                          <expr><block pos:line="18" pos:column="27">{<expr><name><name pos:line="18" pos:column="28">Language</name><op:operator pos:line="18" pos:column="36">.</op:operator><name pos:line="18" pos:column="37">CSharp</name></name></expr><op:operator pos:line="18" pos:column="43">,</op:operator> <expr><op:operator pos:line="18" pos:column="45">new</op:operator> <call><name pos:line="18" pos:column="49">CSharpCodeParser</name><argument_list pos:line="18" pos:column="65">()</argument_list></call></expr>}</block></expr><op:operator pos:line="18" pos:column="68">,</op:operator>
                          <expr><block pos:line="19" pos:column="27">{<expr><name><name pos:line="19" pos:column="28">Language</name><op:operator pos:line="19" pos:column="36">.</op:operator><name pos:line="19" pos:column="37">CPlusPlus</name></name></expr><op:operator pos:line="19" pos:column="46">,</op:operator> <expr><op:operator pos:line="19" pos:column="48">new</op:operator> <call><name pos:line="19" pos:column="52">CPlusPlusCodeParser</name><argument_list pos:line="19" pos:column="71">()</argument_list></call></expr>}</block></expr>
                      }</block></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="21" pos:column="13">fileSetup</name> <op:operator pos:line="21" pos:column="23">=</op:operator> <op:operator pos:line="21" pos:column="25">new</op:operator> <name><name pos:line="21" pos:column="29">Dictionary</name><argument_list pos:line="21" pos:column="39">&lt;<argument><name pos:line="21" pos:column="40">Language</name></argument>, <argument><name pos:line="21" pos:column="50">SrcMLFileUnitSetup</name></argument>&gt;</argument_list></name>
                        <block pos:line="22" pos:column="25">{
                            <expr><block pos:line="23" pos:column="29">{<expr><name><name pos:line="23" pos:column="30">Language</name><op:operator pos:line="23" pos:column="38">.</op:operator><name pos:line="23" pos:column="39">CSharp</name></name></expr><op:operator pos:line="23" pos:column="45">,</op:operator> <expr><op:operator pos:line="23" pos:column="47">new</op:operator> <call><name pos:line="23" pos:column="51">SrcMLFileUnitSetup</name><argument_list pos:line="23" pos:column="69">(<argument><expr><name><name pos:line="23" pos:column="70">Language</name><op:operator pos:line="23" pos:column="78">.</op:operator><name pos:line="23" pos:column="79">CSharp</name></name></expr></argument>)</argument_list></call></expr>}</block></expr><op:operator pos:line="23" pos:column="87">,</op:operator>
                            <expr><block pos:line="24" pos:column="29">{<expr><name><name pos:line="24" pos:column="30">Language</name><op:operator pos:line="24" pos:column="38">.</op:operator><name pos:line="24" pos:column="39">CPlusPlus</name></name></expr><op:operator pos:line="24" pos:column="48">,</op:operator> <expr><op:operator pos:line="24" pos:column="50">new</op:operator> <call><name pos:line="24" pos:column="54">SrcMLFileUnitSetup</name><argument_list pos:line="24" pos:column="72">(<argument><expr><name><name pos:line="24" pos:column="73">Language</name><op:operator pos:line="24" pos:column="81">.</op:operator><name pos:line="24" pos:column="82">CPlusPlus</name></name></expr></argument>)</argument_list></call></expr>}</block></expr>
                        }</block></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="28" pos:column="9">[<expr><name pos:line="28" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="29" pos:column="9">public</specifier> <name pos:line="29" pos:column="16">void</name></type> <name pos:line="29" pos:column="21">TestGlobalStatement</name><parameter_list pos:line="29" pos:column="40">()</parameter_list> <block pos:line="29" pos:column="43">{
            <comment type="line" pos:line="30" pos:column="13">////Example.cpp</comment>
            <comment type="line" pos:line="31" pos:column="13">//char* bar = "Hello, world!";</comment>
            <comment type="line" pos:line="32" pos:column="13">//int foo = 42;</comment>
            <decl_stmt><decl><type><name pos:line="33" pos:column="13">var</name></type> <name pos:line="33" pos:column="17">xml</name> <init pos:line="33" pos:column="21">= <expr><lit:literal type="string" pos:line="33" pos:column="23">@"&lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""1"" pos:column="&gt;char&lt;/name&gt;&lt;type:modifier pos:line=""1"" pos:column="&gt;*&lt;/type:modifier&gt;&lt;/type&gt; &lt;name pos:line=""1"" pos:column="&gt;bar&lt;/name&gt; =&lt;init pos:line=""1"" pos:column=""&gt; &lt;expr&gt;&lt;lit:literal type=""string"" pos:line=""1"" pos:column=&gt;""Hello, world!&lt;/lit:literal&gt;&lt;/expr&gt;&lt;/init&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
&lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""2"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""2"" pos:column="&gt;foo&lt;/name&gt; =&lt;init pos:line=""2"" pos:column=""&gt; &lt;expr&gt;&lt;lit:literal type=""number"" pos:line=""2"" pos:column=&gt;42&lt;/lit:literal&gt;&lt;/expr&gt;&lt;/init&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="35" pos:column="13">var</name></type> <name pos:line="35" pos:column="17">unit</name> <init pos:line="35" pos:column="22">= <expr><name><name pos:line="35" pos:column="24">fileSetup</name><index pos:line="35" pos:column="33">[<expr><name><name pos:line="35" pos:column="34">Language</name><op:operator pos:line="35" pos:column="42">.</op:operator><name pos:line="35" pos:column="43">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="35" pos:column="53">.</op:operator><call><name pos:line="35" pos:column="54">GetFileUnitForXmlSnippet</name><argument_list pos:line="35" pos:column="78">(<argument><expr><name pos:line="35" pos:column="79">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="35" pos:column="84">"Example.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="36" pos:column="13">var</name></type> <name pos:line="36" pos:column="17">globalScope</name> <init pos:line="36" pos:column="29">= <expr><name><name pos:line="36" pos:column="31">parser</name><index pos:line="36" pos:column="37">[<expr><name><name pos:line="36" pos:column="38">Language</name><op:operator pos:line="36" pos:column="46">.</op:operator><name pos:line="36" pos:column="47">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="36" pos:column="57">.</op:operator><call><name pos:line="36" pos:column="58">ParseFileUnit</name><argument_list pos:line="36" pos:column="71">(<argument><expr><name pos:line="36" pos:column="72">unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="37" pos:column="13">var</name></type> <name pos:line="37" pos:column="17">actual</name> <init pos:line="37" pos:column="24">= <expr><call><name><name pos:line="37" pos:column="26">globalScope</name><op:operator pos:line="37" pos:column="37">.</op:operator><name pos:line="37" pos:column="38">GetStatementForLocation</name></name><argument_list pos:line="37" pos:column="61">(<argument><expr><op:operator pos:line="37" pos:column="62">new</op:operator> <call><name pos:line="37" pos:column="66">SourceLocation</name><argument_list pos:line="37" pos:column="80">(<argument><expr><lit:literal type="string" pos:line="37" pos:column="81">"Example.cpp"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="37" pos:column="96">2</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="37" pos:column="99">5</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="38" pos:column="13">Assert</name><op:operator pos:line="38" pos:column="19">.</op:operator><name pos:line="38" pos:column="20">AreSame</name></name><argument_list pos:line="38" pos:column="27">(<argument><expr><name><name pos:line="38" pos:column="28">globalScope</name><op:operator pos:line="38" pos:column="39">.</op:operator><name pos:line="38" pos:column="40">ChildStatements</name><index pos:line="38" pos:column="55">[<expr><lit:literal type="number" pos:line="38" pos:column="56">1</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="60">actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="41" pos:column="9">[<expr><name pos:line="41" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="42" pos:column="9">public</specifier> <name pos:line="42" pos:column="16">void</name></type> <name pos:line="42" pos:column="21">TestLocationInClass_CSharp</name><parameter_list pos:line="42" pos:column="47">()</parameter_list> <block pos:line="42" pos:column="50">{
            <comment type="line" pos:line="43" pos:column="13">////Foo.cs</comment>
            <comment type="line" pos:line="44" pos:column="13">//namespace Example {</comment>
            <comment type="line" pos:line="45" pos:column="13">//    class Foo {</comment>
            <comment type="line" pos:line="46" pos:column="13">//        int bar = 42;</comment>
            <comment type="line" pos:line="47" pos:column="13">//    }</comment>
            <comment type="line" pos:line="48" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="49" pos:column="13">var</name></type> <name pos:line="49" pos:column="17">xml</name> <init pos:line="49" pos:column="21">= <expr><lit:literal type="string" pos:line="49" pos:column="23">@"&lt;namespace pos:line=""1"" pos:column="&gt;namespace &lt;name pos:line=""1"" pos:column=""&gt;Example&lt;/name&gt; &lt;block pos:line=""1"" pos:column=""&gt;{
    &lt;class pos:line=""2"" pos:column="&gt;class &lt;name pos:line=""2"" pos:column=""&gt;Foo&lt;/name&gt; &lt;block pos:line=""2"" pos:column=""&gt;{
        &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""3"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""3"" pos:column=""&gt;bar&lt;/name&gt; =&lt;init pos:line=""3"" pos:column=""&gt; &lt;expr&gt;&lt;lit:literal type=""number"" pos:line=""3"" pos:column=&gt;42&lt;/lit:literal&gt;&lt;/expr&gt;&lt;/init&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
    }&lt;/block&gt;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="54" pos:column="13">var</name></type> <name pos:line="54" pos:column="17">unit</name> <init pos:line="54" pos:column="22">= <expr><name><name pos:line="54" pos:column="24">fileSetup</name><index pos:line="54" pos:column="33">[<expr><name><name pos:line="54" pos:column="34">Language</name><op:operator pos:line="54" pos:column="42">.</op:operator><name pos:line="54" pos:column="43">CSharp</name></name></expr>]</index></name><op:operator pos:line="54" pos:column="50">.</op:operator><call><name pos:line="54" pos:column="51">GetFileUnitForXmlSnippet</name><argument_list pos:line="54" pos:column="75">(<argument><expr><name pos:line="54" pos:column="76">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="54" pos:column="81">"Foo.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="55" pos:column="13">var</name></type> <name pos:line="55" pos:column="17">globalScope</name> <init pos:line="55" pos:column="29">= <expr><name><name pos:line="55" pos:column="31">parser</name><index pos:line="55" pos:column="37">[<expr><name><name pos:line="55" pos:column="38">Language</name><op:operator pos:line="55" pos:column="46">.</op:operator><name pos:line="55" pos:column="47">CSharp</name></name></expr>]</index></name><op:operator pos:line="55" pos:column="54">.</op:operator><call><name pos:line="55" pos:column="55">ParseFileUnit</name><argument_list pos:line="55" pos:column="68">(<argument><expr><name pos:line="55" pos:column="69">unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="57" pos:column="13">var</name></type> <name pos:line="57" pos:column="17">foo</name> <init pos:line="57" pos:column="21">= <expr><call><name><name pos:line="57" pos:column="23">globalScope</name><op:operator pos:line="57" pos:column="34">.</op:operator><name><name pos:line="57" pos:column="35">GetDescendants</name><argument_list pos:line="57" pos:column="49">&lt;<argument><name pos:line="57" pos:column="50">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="57" pos:column="65">()</argument_list></call><op:operator pos:line="57" pos:column="67">.</op:operator><call><name pos:line="57" pos:column="68">First</name><argument_list pos:line="57" pos:column="73">(<argument><expr><lambda><name pos:line="57" pos:column="74">t</name> <op:operator pos:line="57" pos:column="76">=&gt;</op:operator> <name><name pos:line="57" pos:column="79">t</name><op:operator pos:line="57" pos:column="80">.</op:operator><name pos:line="57" pos:column="81">Name</name></name> <op:operator pos:line="57" pos:column="86">==</op:operator> <lit:literal type="string" pos:line="57" pos:column="89">"Foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="58" pos:column="13">var</name></type> <name pos:line="58" pos:column="17">stmt</name> <init pos:line="58" pos:column="22">= <expr><name><name pos:line="58" pos:column="24">foo</name><op:operator pos:line="58" pos:column="27">.</op:operator><name pos:line="58" pos:column="28">ChildStatements</name><index pos:line="58" pos:column="43">[<expr><lit:literal type="number" pos:line="58" pos:column="44">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="59" pos:column="13">var</name></type> <name pos:line="59" pos:column="17">stmtActual</name> <init pos:line="59" pos:column="28">= <expr><call><name><name pos:line="59" pos:column="30">globalScope</name><op:operator pos:line="59" pos:column="41">.</op:operator><name pos:line="59" pos:column="42">GetStatementForLocation</name></name><argument_list pos:line="59" pos:column="65">(<argument><expr><op:operator pos:line="59" pos:column="66">new</op:operator> <call><name pos:line="59" pos:column="70">SourceLocation</name><argument_list pos:line="59" pos:column="84">(<argument><expr><lit:literal type="string" pos:line="59" pos:column="85">"Foo.cs"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="59" pos:column="95">3</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="59" pos:column="98">14</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="60" pos:column="13">Assert</name><op:operator pos:line="60" pos:column="19">.</op:operator><name pos:line="60" pos:column="20">AreSame</name></name><argument_list pos:line="60" pos:column="27">(<argument><expr><name pos:line="60" pos:column="28">stmt</name></expr></argument>, <argument><expr><name pos:line="60" pos:column="34">stmtActual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="62" pos:column="13">var</name></type> <name pos:line="62" pos:column="17">fooActual</name> <init pos:line="62" pos:column="27">= <expr><call><name><name pos:line="62" pos:column="29">globalScope</name><op:operator pos:line="62" pos:column="40">.</op:operator><name pos:line="62" pos:column="41">GetStatementForLocation</name></name><argument_list pos:line="62" pos:column="64">(<argument><expr><op:operator pos:line="62" pos:column="65">new</op:operator> <call><name pos:line="62" pos:column="69">SourceLocation</name><argument_list pos:line="62" pos:column="83">(<argument><expr><lit:literal type="string" pos:line="62" pos:column="84">"Foo.cs"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="62" pos:column="94">2</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="62" pos:column="97">6</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="63" pos:column="13">Assert</name><op:operator pos:line="63" pos:column="19">.</op:operator><name pos:line="63" pos:column="20">AreSame</name></name><argument_list pos:line="63" pos:column="27">(<argument><expr><name pos:line="63" pos:column="28">foo</name></expr></argument>, <argument><expr><name pos:line="63" pos:column="33">fooActual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="66" pos:column="9">[<expr><name pos:line="66" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="67" pos:column="9">public</specifier> <name pos:line="67" pos:column="16">void</name></type> <name pos:line="67" pos:column="21">TestLocationInMain_Cpp</name><parameter_list pos:line="67" pos:column="43">()</parameter_list> <block pos:line="67" pos:column="46">{
            <comment type="line" pos:line="68" pos:column="13">//#include &lt;iostream&gt;</comment>
            <comment type="line" pos:line="69" pos:column="13">//</comment>
            <comment type="line" pos:line="70" pos:column="13">//char* MyFunction(int foo) {</comment>
            <comment type="line" pos:line="71" pos:column="13">//    if(foo &gt; 0) {</comment>
            <comment type="line" pos:line="72" pos:column="13">//        return "Hello world!";</comment>
            <comment type="line" pos:line="73" pos:column="13">//    } else {</comment>
            <comment type="line" pos:line="74" pos:column="13">//        return "Goodbye cruel world!";</comment>
            <comment type="line" pos:line="75" pos:column="13">//    }</comment>
            <comment type="line" pos:line="76" pos:column="13">//}</comment>
            <comment type="line" pos:line="77" pos:column="13">//</comment>
            <comment type="line" pos:line="78" pos:column="13">//int main(int argc, char* argv[]) {</comment>
            <comment type="line" pos:line="79" pos:column="13">//    std::cout&lt;&lt;MyFunction(42);</comment>
            <comment type="line" pos:line="80" pos:column="13">//    return 0;</comment>
            <comment type="line" pos:line="81" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="82" pos:column="13">var</name></type> <name pos:line="82" pos:column="17">xml</name> <init pos:line="82" pos:column="21">= <expr><lit:literal type="string" pos:line="82" pos:column="23">@"&lt;cpp:include pos:line=""1"" pos:column="&gt;#&lt;cpp:directive pos:line=""1"" pos:column="&gt;include&lt;/cpp:directive&gt; &lt;cpp:file pos:line=""1"" pos:column=""&gt;&amp;lt;iostream&amp;gt;&lt;/cpp:file&gt;&lt;/cpp:include&gt;

&lt;function&gt;&lt;type&gt;&lt;name pos:line=""3"" pos:column="&gt;char&lt;/name&gt;&lt;type:modifier pos:line=""3"" pos:column="&gt;*&lt;/type:modifier&gt;&lt;/type&gt; &lt;name pos:line=""3"" pos:column="&gt;MyFunction&lt;/name&gt;&lt;parameter_list pos:line=""3"" pos:column=""&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""3"" pos:column=""&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""3"" pos:column=""&gt;foo&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt; &lt;block pos:line=""3"" pos:column=""&gt;{
    &lt;if pos:line=""4"" pos:column="&gt;if&lt;condition pos:line=""4"" pos:column="&gt;(&lt;expr&gt;&lt;name pos:line=""4"" pos:column="&gt;foo&lt;/name&gt; &lt;op:operator pos:line=""4"" pos:column=""&gt;&amp;gt;&lt;/op:operator&gt; &lt;lit:literal type=""number"" pos:line=""4"" pos:column=&gt;0&lt;/lit:literal&gt;&lt;/expr&gt;)&lt;/condition&gt;&lt;then pos:line=""4"" pos:column=""&gt; &lt;block pos:line=""4"" pos:column=""&gt;{
        &lt;return pos:line=""5"" pos:column="&gt;return &lt;expr&gt;&lt;lit:literal type=""string"" pos:line=""5"" pos:column=&gt;""Hello world!&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt;
    }&lt;/block&gt;&lt;/then&gt; &lt;else pos:line=""6"" pos:column="&gt;else &lt;block pos:line=""6"" pos:column=""&gt;{
        &lt;return pos:line=""7"" pos:column="&gt;return &lt;expr&gt;&lt;lit:literal type=""string"" pos:line=""7"" pos:column=&gt;""Goodbye cruel world!&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt;
    }&lt;/block&gt;&lt;/else&gt;&lt;/if&gt;
}&lt;/block&gt;&lt;/function&gt;

&lt;function&gt;&lt;type&gt;&lt;name pos:line=""11"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""11"" pos:column="&gt;main&lt;/name&gt;&lt;parameter_list pos:line=""11"" pos:column="&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""11"" pos:column=""&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""11"" pos:column=""&gt;argc&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;, &lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""11"" pos:column=""&gt;char&lt;/name&gt;&lt;type:modifier pos:line=""11"" pos:column=""&gt;*&lt;/type:modifier&gt;&lt;/type&gt; &lt;name&gt;&lt;name pos:line=""11"" pos:column=""&gt;argv&lt;/name&gt;&lt;index pos:line=""11"" pos:column=""&gt;[]&lt;/index&gt;&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt; &lt;block pos:line=""11"" pos:column=""&gt;{
    &lt;expr_stmt&gt;&lt;expr&gt;&lt;name&gt;&lt;name pos:line=""12"" pos:column="&gt;std&lt;/name&gt;&lt;op:operator pos:line=""12"" pos:column="&gt;::&lt;/op:operator&gt;&lt;name pos:line=""12"" pos:column=""&gt;cout&lt;/name&gt;&lt;/name&gt;&lt;op:operator pos:line=""12"" pos:column=""&gt;&amp;lt;&amp;lt;&lt;/op:operator&gt;&lt;call&gt;&lt;name pos:line=""12"" pos:column=""&gt;MyFunction&lt;/name&gt;&lt;argument_list pos:line=""12"" pos:column=""&gt;(&lt;argument&gt;&lt;expr&gt;&lt;lit:literal type=""number"" pos:line=""12"" pos:column=&gt;42&lt;/lit:literal&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
    &lt;return pos:line=""13"" pos:column="&gt;return &lt;expr&gt;&lt;lit:literal type=""number"" pos:line=""13"" pos:column=&gt;0&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt;
}&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="96" pos:column="13">var</name></type> <name pos:line="96" pos:column="17">fileUnit</name> <init pos:line="96" pos:column="26">= <expr><name><name pos:line="96" pos:column="28">fileSetup</name><index pos:line="96" pos:column="37">[<expr><name><name pos:line="96" pos:column="38">Language</name><op:operator pos:line="96" pos:column="46">.</op:operator><name pos:line="96" pos:column="47">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="96" pos:column="57">.</op:operator><call><name pos:line="96" pos:column="58">GetFileUnitForXmlSnippet</name><argument_list pos:line="96" pos:column="82">(<argument><expr><name pos:line="96" pos:column="83">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="96" pos:column="88">"function_def.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="97" pos:column="13">var</name></type> <name pos:line="97" pos:column="17">globalScope</name> <init pos:line="97" pos:column="29">= <expr><name><name pos:line="97" pos:column="31">parser</name><index pos:line="97" pos:column="37">[<expr><name><name pos:line="97" pos:column="38">Language</name><op:operator pos:line="97" pos:column="46">.</op:operator><name pos:line="97" pos:column="47">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="97" pos:column="57">.</op:operator><call><name pos:line="97" pos:column="58">ParseFileUnit</name><argument_list pos:line="97" pos:column="71">(<argument><expr><name pos:line="97" pos:column="72">fileUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="99" pos:column="13">var</name></type> main <init pos:line="99" pos:column="22">= <expr><call><name><name pos:line="99" pos:column="24">globalScope</name><op:operator pos:line="99" pos:column="35">.</op:operator><name><name pos:line="99" pos:column="36">GetDescendants</name><argument_list pos:line="99" pos:column="50">&lt;<argument><name pos:line="99" pos:column="51">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="99" pos:column="68">()</argument_list></call><op:operator pos:line="99" pos:column="70">.</op:operator><call><name pos:line="99" pos:column="71">First</name><argument_list pos:line="99" pos:column="76">(<argument><expr><lambda><name pos:line="99" pos:column="77">md</name> <op:operator pos:line="99" pos:column="80">=&gt;</op:operator> <name><name pos:line="99" pos:column="83">md</name><op:operator pos:line="99" pos:column="85">.</op:operator><name pos:line="99" pos:column="86">Name</name></name> <op:operator pos:line="99" pos:column="91">==</op:operator> <lit:literal type="string" pos:line="99" pos:column="94">"main"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="100" pos:column="13">Assert</name><op:operator pos:line="100" pos:column="19">.</op:operator><name pos:line="100" pos:column="20">AreSame</name></name><argument_list pos:line="100" pos:column="27">(<argument><expr pos:line="100" pos:column="28">main<op:operator pos:line="100" pos:column="32">.</op:operator><name><name pos:line="100" pos:column="33">ChildStatements</name><index pos:line="100" pos:column="48">[<expr><lit:literal type="number" pos:line="100" pos:column="49">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name pos:line="100" pos:column="53">globalScope</name><op:operator pos:line="100" pos:column="64">.</op:operator><name pos:line="100" pos:column="65">GetStatementForLocation</name></name><argument_list pos:line="100" pos:column="88">(<argument><expr><op:operator pos:line="100" pos:column="89">new</op:operator> <call><name pos:line="100" pos:column="93">SourceLocation</name><argument_list pos:line="100" pos:column="107">(<argument><expr><lit:literal type="string" pos:line="100" pos:column="108">"function_def.cpp"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="100" pos:column="128">12</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="100" pos:column="132">20</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="103" pos:column="9">[<expr><name pos:line="103" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="104" pos:column="9">public</specifier> <name pos:line="104" pos:column="16">void</name></type> <name pos:line="104" pos:column="21">TestLocationInMethodDefinition_Cpp</name><parameter_list pos:line="104" pos:column="55">()</parameter_list> <block pos:line="104" pos:column="58">{
            <comment type="line" pos:line="105" pos:column="13">////Foo.h</comment>
            <comment type="line" pos:line="106" pos:column="13">//class Foo {</comment>
            <comment type="line" pos:line="107" pos:column="13">//public:</comment>
            <comment type="line" pos:line="108" pos:column="13">//    int bar(int);</comment>
            <comment type="line" pos:line="109" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="110" pos:column="13">var</name></type> <name pos:line="110" pos:column="17">hXml</name> <init pos:line="110" pos:column="22">= <expr><lit:literal type="string" pos:line="110" pos:column="24">@"&lt;class pos:line=""1"" pos:column="&gt;class &lt;name pos:line=""1"" pos:column="&gt;Foo&lt;/name&gt; &lt;block pos:line=""1"" pos:column=""&gt;{&lt;private type=""default"" pos:line=""1"" pos:column=&gt;
&lt;/private&gt;&lt;public pos:line=""2"" pos:column="&gt;public:
    &lt;function_decl&gt;&lt;type&gt;&lt;name pos:line=""3"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""3"" pos:column="&gt;bar&lt;/name&gt;&lt;parameter_list pos:line=""3"" pos:column=""&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""3"" pos:column=""&gt;int&lt;/name&gt;&lt;/type&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt;;&lt;/function_decl&gt;
&lt;/public&gt;}&lt;/block&gt;&lt;decl/&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="114" pos:column="13">var</name></type> <name pos:line="114" pos:column="17">hUnit</name> <init pos:line="114" pos:column="23">= <expr><name><name pos:line="114" pos:column="25">fileSetup</name><index pos:line="114" pos:column="34">[<expr><name><name pos:line="114" pos:column="35">Language</name><op:operator pos:line="114" pos:column="43">.</op:operator><name pos:line="114" pos:column="44">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="114" pos:column="54">.</op:operator><call><name pos:line="114" pos:column="55">GetFileUnitForXmlSnippet</name><argument_list pos:line="114" pos:column="79">(<argument><expr><name pos:line="114" pos:column="80">hXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="114" pos:column="86">"Foo.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="115" pos:column="13">var</name></type> <name pos:line="115" pos:column="17">globalScope</name> <init pos:line="115" pos:column="29">= <expr><name><name pos:line="115" pos:column="31">parser</name><index pos:line="115" pos:column="37">[<expr><name><name pos:line="115" pos:column="38">Language</name><op:operator pos:line="115" pos:column="46">.</op:operator><name pos:line="115" pos:column="47">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="115" pos:column="57">.</op:operator><call><name pos:line="115" pos:column="58">ParseFileUnit</name><argument_list pos:line="115" pos:column="71">(<argument><expr><name pos:line="115" pos:column="72">hUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="116" pos:column="13">////Foo.cpp</comment>
            <comment type="line" pos:line="117" pos:column="13">//#include "Foo.h"</comment>
            <comment type="line" pos:line="118" pos:column="13">//int Foo::bar(int baz) {</comment>
            <comment type="line" pos:line="119" pos:column="13">//    return baz + 1;</comment>
            <comment type="line" pos:line="120" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="121" pos:column="13">var</name></type> <name pos:line="121" pos:column="17">cppXml</name> <init pos:line="121" pos:column="24">= <expr><lit:literal type="string" pos:line="121" pos:column="26">@"&lt;cpp:include pos:line=""1"" pos:column="&gt;#&lt;cpp:directive pos:line=""1"" pos:column="&gt;include&lt;/cpp:directive&gt; &lt;cpp:file&gt;&lt;lit:literal type=""string"" pos:line=""1"" pos:column=&gt;""Foo.h&lt;/lit:literal&gt;&lt;/cpp:file&gt;&lt;/cpp:include&gt;
&lt;function&gt;&lt;type&gt;&lt;name pos:line=""2"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;&lt;name pos:line=""2"" pos:column="&gt;Foo&lt;/name&gt;&lt;op:operator pos:line=""2"" pos:column="&gt;::&lt;/op:operator&gt;&lt;name pos:line=""2"" pos:column=""&gt;bar&lt;/name&gt;&lt;/name&gt;&lt;parameter_list pos:line=""2"" pos:column=""&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""2"" pos:column=""&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""2"" pos:column=""&gt;baz&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt; &lt;block pos:line=""2"" pos:column=""&gt;{
    &lt;return pos:line=""3"" pos:column="&gt;return &lt;expr&gt;&lt;name pos:line=""3"" pos:column=""&gt;baz&lt;/name&gt; &lt;op:operator pos:line=""3"" pos:column=""&gt;+&lt;/op:operator&gt; &lt;lit:literal type=""number"" pos:line=""3"" pos:column=&gt;1&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt;
}&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="125" pos:column="13">var</name></type> <name pos:line="125" pos:column="17">cppUnit</name> <init pos:line="125" pos:column="25">= <expr><name><name pos:line="125" pos:column="27">fileSetup</name><index pos:line="125" pos:column="36">[<expr><name><name pos:line="125" pos:column="37">Language</name><op:operator pos:line="125" pos:column="45">.</op:operator><name pos:line="125" pos:column="46">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="125" pos:column="56">.</op:operator><call><name pos:line="125" pos:column="57">GetFileUnitForXmlSnippet</name><argument_list pos:line="125" pos:column="81">(<argument><expr><name pos:line="125" pos:column="82">cppXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="125" pos:column="90">"Foo.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="126" pos:column="13">globalScope</name> <op:operator pos:line="126" pos:column="25">=</op:operator> <call><name><name pos:line="126" pos:column="27">globalScope</name><op:operator pos:line="126" pos:column="38">.</op:operator><name pos:line="126" pos:column="39">Merge</name></name><argument_list pos:line="126" pos:column="44">(<argument><expr><name><name pos:line="126" pos:column="45">parser</name><index pos:line="126" pos:column="51">[<expr><name><name pos:line="126" pos:column="52">Language</name><op:operator pos:line="126" pos:column="60">.</op:operator><name pos:line="126" pos:column="61">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="126" pos:column="71">.</op:operator><call><name pos:line="126" pos:column="72">ParseFileUnit</name><argument_list pos:line="126" pos:column="85">(<argument><expr><name pos:line="126" pos:column="86">cppUnit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="128" pos:column="13">var</name></type> <name pos:line="128" pos:column="17">bar</name> <init pos:line="128" pos:column="21">= <expr><call><name><name pos:line="128" pos:column="23">globalScope</name><op:operator pos:line="128" pos:column="34">.</op:operator><name><name pos:line="128" pos:column="35">GetDescendants</name><argument_list pos:line="128" pos:column="49">&lt;<argument><name pos:line="128" pos:column="50">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="128" pos:column="67">()</argument_list></call><op:operator pos:line="128" pos:column="69">.</op:operator><call><name pos:line="128" pos:column="70">First</name><argument_list pos:line="128" pos:column="75">(<argument><expr><lambda><name pos:line="128" pos:column="76">md</name> <op:operator pos:line="128" pos:column="79">=&gt;</op:operator> <name><name pos:line="128" pos:column="82">md</name><op:operator pos:line="128" pos:column="84">.</op:operator><name pos:line="128" pos:column="85">Name</name></name> <op:operator pos:line="128" pos:column="90">==</op:operator> <lit:literal type="string" pos:line="128" pos:column="93">"bar"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="129" pos:column="13">Assert</name><op:operator pos:line="129" pos:column="19">.</op:operator><name pos:line="129" pos:column="20">AreEqual</name></name><argument_list pos:line="129" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="129" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="129" pos:column="32">bar</name><op:operator pos:line="129" pos:column="35">.</op:operator><name pos:line="129" pos:column="36">ChildStatements</name><op:operator pos:line="129" pos:column="51">.</op:operator><name pos:line="129" pos:column="52">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="130" pos:column="13">Assert</name><op:operator pos:line="130" pos:column="19">.</op:operator><name pos:line="130" pos:column="20">AreEqual</name></name><argument_list pos:line="130" pos:column="28">(<argument><expr><name><name pos:line="130" pos:column="29">bar</name><op:operator pos:line="130" pos:column="32">.</op:operator><name pos:line="130" pos:column="33">ChildStatements</name><index pos:line="130" pos:column="48">[<expr><lit:literal type="number" pos:line="130" pos:column="49">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name pos:line="130" pos:column="53">globalScope</name><op:operator pos:line="130" pos:column="64">.</op:operator><name pos:line="130" pos:column="65">GetStatementForLocation</name></name><argument_list pos:line="130" pos:column="88">(<argument><expr><op:operator pos:line="130" pos:column="89">new</op:operator> <call><name pos:line="130" pos:column="93">SourceLocation</name><argument_list pos:line="130" pos:column="107">(<argument><expr><lit:literal type="string" pos:line="130" pos:column="108">"Foo.cpp"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="130" pos:column="119">3</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="130" pos:column="122">8</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="133" pos:column="9">[<expr><name pos:line="133" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="134" pos:column="9">public</specifier> <name pos:line="134" pos:column="16">void</name></type> <name pos:line="134" pos:column="21">TestLocationInForLoop</name><parameter_list pos:line="134" pos:column="42">()</parameter_list> <block pos:line="134" pos:column="45">{
            <comment type="line" pos:line="135" pos:column="13">//for(int i = 0; i &lt; foo.Count; i++) {</comment>
            <comment type="line" pos:line="136" pos:column="13">//    Bar(i);</comment>
            <comment type="line" pos:line="137" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="138" pos:column="13">var</name></type> <name pos:line="138" pos:column="17">xml</name> <init pos:line="138" pos:column="21">= <expr><lit:literal type="string" pos:line="138" pos:column="23">@"&lt;for pos:line=""1"" pos:column="&gt;for(&lt;init&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""1"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""1"" pos:column="&gt;i&lt;/name&gt; &lt;init pos:line=""1"" pos:column=""&gt;= &lt;expr&gt;&lt;lit:literal type=""number"" pos:line=""1"" pos:column=&gt;0&lt;/lit:literal&gt;&lt;/expr&gt;&lt;/init&gt;&lt;/decl&gt;;&lt;/init&gt; &lt;condition&gt;&lt;expr&gt;&lt;name pos:line=""1"" pos:column=""&gt;i&lt;/name&gt; &lt;op:operator pos:line=""1"" pos:column=""&gt;&amp;lt;&lt;/op:operator&gt; &lt;name&gt;&lt;name pos:line=""1"" pos:column=""&gt;foo&lt;/name&gt;&lt;op:operator pos:line=""1"" pos:column=""&gt;.&lt;/op:operator&gt;&lt;name pos:line=""1"" pos:column=""&gt;Count&lt;/name&gt;&lt;/name&gt;&lt;/expr&gt;;&lt;/condition&gt; &lt;incr&gt;&lt;expr&gt;&lt;name pos:line=""1"" pos:column=""&gt;i&lt;/name&gt;&lt;op:operator pos:line=""1"" pos:column=""&gt;++&lt;/op:operator&gt;&lt;/expr&gt;&lt;/incr&gt;) &lt;block pos:line=""1"" pos:column=""&gt;{
    &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name pos:line=""2"" pos:column="&gt;Bar&lt;/name&gt;&lt;argument_list pos:line=""2"" pos:column="&gt;(&lt;argument&gt;&lt;expr&gt;&lt;name pos:line=""2"" pos:column="&gt;i&lt;/name&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
}&lt;/block&gt;&lt;/for&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="141" pos:column="13">var</name></type> <name pos:line="141" pos:column="17">xmlElement</name> <init pos:line="141" pos:column="28">= <expr><name><name pos:line="141" pos:column="30">fileSetup</name><index pos:line="141" pos:column="39">[<expr><name><name pos:line="141" pos:column="40">Language</name><op:operator pos:line="141" pos:column="48">.</op:operator><name pos:line="141" pos:column="49">CSharp</name></name></expr>]</index></name><op:operator pos:line="141" pos:column="56">.</op:operator><call><name pos:line="141" pos:column="57">GetFileUnitForXmlSnippet</name><argument_list pos:line="141" pos:column="81">(<argument><expr><name pos:line="141" pos:column="82">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="141" pos:column="87">"Foo.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="142" pos:column="13">var</name></type> <name pos:line="142" pos:column="17">globalScope</name> <init pos:line="142" pos:column="29">= <expr><name><name pos:line="142" pos:column="31">parser</name><index pos:line="142" pos:column="37">[<expr><name><name pos:line="142" pos:column="38">Language</name><op:operator pos:line="142" pos:column="46">.</op:operator><name pos:line="142" pos:column="47">CSharp</name></name></expr>]</index></name><op:operator pos:line="142" pos:column="54">.</op:operator><call><name pos:line="142" pos:column="55">ParseFileUnit</name><argument_list pos:line="142" pos:column="68">(<argument><expr><name pos:line="142" pos:column="69">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="144" pos:column="13">var</name></type> <name pos:line="144" pos:column="17">forLoop</name> <init pos:line="144" pos:column="25">= <expr><call><name><name pos:line="144" pos:column="27">globalScope</name><op:operator pos:line="144" pos:column="38">.</op:operator><name><name pos:line="144" pos:column="39">GetDescendants</name><argument_list pos:line="144" pos:column="53">&lt;<argument><name pos:line="144" pos:column="54">ForStatement</name></argument>&gt;</argument_list></name></name><argument_list pos:line="144" pos:column="67">()</argument_list></call><op:operator pos:line="144" pos:column="69">.</op:operator><call><name pos:line="144" pos:column="70">First</name><argument_list pos:line="144" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="145" pos:column="13">Assert</name><op:operator pos:line="145" pos:column="19">.</op:operator><name pos:line="145" pos:column="20">AreSame</name></name><argument_list pos:line="145" pos:column="27">(<argument><expr><name pos:line="145" pos:column="28">forLoop</name></expr></argument>, <argument><expr><call><name><name pos:line="145" pos:column="37">globalScope</name><op:operator pos:line="145" pos:column="48">.</op:operator><name pos:line="145" pos:column="49">GetStatementForLocation</name></name><argument_list pos:line="145" pos:column="72">(<argument><expr><op:operator pos:line="145" pos:column="73">new</op:operator> <call><name pos:line="145" pos:column="77">SourceLocation</name><argument_list pos:line="145" pos:column="91">(<argument><expr><lit:literal type="string" pos:line="145" pos:column="92">"Foo.cs"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="145" pos:column="102">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="145" pos:column="105">12</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
