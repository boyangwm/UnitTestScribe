<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML\SrcMLElement.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2010 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Patrick Francis (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">System</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Collections</name><op:operator pos:line="13" pos:column="25">.</op:operator><name pos:line="13" pos:column="26">Generic</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Globalization</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">IO</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Linq</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Text</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Text</name><op:operator pos:line="18" pos:column="18">.</op:operator><name pos:line="18" pos:column="19">RegularExpressions</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">System</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">Xml</name></name>;</using>
<using pos:line="20" pos:column="1">using <name><name pos:line="20" pos:column="7">System</name><op:operator pos:line="20" pos:column="13">.</op:operator><name pos:line="20" pos:column="14">Xml</name><op:operator pos:line="20" pos:column="17">.</op:operator><name pos:line="20" pos:column="18">Linq</name></name>;</using>

<namespace pos:line="22" pos:column="1">namespace <name><name pos:line="22" pos:column="11">ABB</name><op:operator pos:line="22" pos:column="14">.</op:operator><name pos:line="22" pos:column="15">SrcML</name></name> <block pos:line="22" pos:column="21">{
    <comment type="line" pos:line="23" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="24" pos:column="5">/// Contains static utility methods that act upon srcML XElements.</comment>
    <comment type="line" pos:line="25" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="26" pos:column="5">public</specifier> <specifier pos:line="26" pos:column="12">static</specifier> class <name pos:line="26" pos:column="25">SrcMLElement</name> <block pos:line="26" pos:column="38">{
        <comment type="line" pos:line="27" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="28" pos:column="9">/// Gets the method signature from the method definition srcML element.</comment>
        <comment type="line" pos:line="29" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="30" pos:column="9">/// &lt;param name="methodElement"&gt;The srcML method element to extract the signature from.&lt;/param&gt;</comment>
        <comment type="line" pos:line="31" pos:column="9">/// &lt;returns&gt;The method signature&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="32" pos:column="9">public</specifier> <specifier pos:line="32" pos:column="16">static</specifier> <name pos:line="32" pos:column="23">string</name></type> <name pos:line="32" pos:column="30">GetMethodSignature</name><parameter_list pos:line="32" pos:column="48">(<param><decl><type><name pos:line="32" pos:column="49">XElement</name></type> <name pos:line="32" pos:column="58">methodElement</name></decl></param>)</parameter_list> <block pos:line="32" pos:column="73">{
            <if pos:line="33" pos:column="13">if<condition pos:line="33" pos:column="15">(<expr><name pos:line="33" pos:column="16">methodElement</name> <op:operator pos:line="33" pos:column="30">==</op:operator> <name pos:line="33" pos:column="33">null</name></expr>)</condition><then pos:line="33" pos:column="38"> <block pos:line="33" pos:column="39">{
                <throw pos:line="34" pos:column="17">throw <expr><op:operator pos:line="34" pos:column="23">new</op:operator> <call><name pos:line="34" pos:column="27">ArgumentNullException</name><argument_list pos:line="34" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="34" pos:column="49">"methodElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <if pos:line="36" pos:column="13">if<condition pos:line="36" pos:column="15">(<expr><op:operator pos:line="36" pos:column="16">!</op:operator><op:operator pos:line="36" pos:column="17">(</op:operator><op:operator pos:line="36" pos:column="18">new</op:operator><index pos:line="36" pos:column="21">[]</index></expr></condition><then pos:line="36" pos:column="23"> <block pos:line="36" pos:column="24">{ <expr_stmt><expr><name><name pos:line="36" pos:column="26">SRC</name><op:operator pos:line="36" pos:column="29">.</op:operator><name pos:line="36" pos:column="30">Function</name></name></expr><op:operator pos:line="36" pos:column="38">,</op:operator> <expr><name><name pos:line="36" pos:column="40">SRC</name><op:operator pos:line="36" pos:column="43">.</op:operator><name pos:line="36" pos:column="44">Constructor</name></name></expr><op:operator pos:line="36" pos:column="55">,</op:operator> <expr><name><name pos:line="36" pos:column="57">SRC</name><op:operator pos:line="36" pos:column="60">.</op:operator><name pos:line="36" pos:column="61">Destructor</name></name></expr></expr_stmt> }</block></then></if>)</block>.<name pos:line="36" pos:column="75">Contains</name><parameter_list pos:line="36" pos:column="83">(<param><decl><type><name><name pos:line="36" pos:column="84">methodElement</name><op:operator pos:line="36" pos:column="97">.</op:operator><name pos:line="36" pos:column="98">Name</name></name></type></decl></param>)</parameter_list></function>)</block> <block pos:line="36" pos:column="105">{
                <throw pos:line="37" pos:column="17">throw <expr><op:operator pos:line="37" pos:column="23">new</op:operator> <call><name pos:line="37" pos:column="27">ArgumentException</name><argument_list pos:line="37" pos:column="44">(<argument><expr><call><name><name pos:line="37" pos:column="45">string</name><op:operator pos:line="37" pos:column="51">.</op:operator><name pos:line="37" pos:column="52">Format</name></name><argument_list pos:line="37" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="37" pos:column="59">"Not a valid method element: {0}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="94">methodElement</name><op:operator pos:line="37" pos:column="107">.</op:operator><name pos:line="37" pos:column="108">Name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="37" pos:column="115">"methodElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></class>

            <decl_stmt><decl><type><name pos:line="40" pos:column="13">var</name></type> <name pos:line="40" pos:column="17">sig</name> <init pos:line="40" pos:column="21">= <expr><op:operator pos:line="40" pos:column="23">new</op:operator> <call><name pos:line="40" pos:column="27">StringBuilder</name><argument_list pos:line="40" pos:column="40">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="41" pos:column="13">var</name></type> <name pos:line="41" pos:column="17">lastSigElement</name> <init pos:line="41" pos:column="32">= <expr><call><name><name pos:line="41" pos:column="34">methodElement</name><op:operator pos:line="41" pos:column="47">.</op:operator><name pos:line="41" pos:column="48">Element</name></name><argument_list pos:line="41" pos:column="55">(<argument><expr><name><name pos:line="41" pos:column="56">SRC</name><op:operator pos:line="41" pos:column="59">.</op:operator><name pos:line="41" pos:column="60">ParameterList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="42" pos:column="13">if<condition pos:line="42" pos:column="15">(<expr><name pos:line="42" pos:column="16">lastSigElement</name> <op:operator pos:line="42" pos:column="31">==</op:operator> <name pos:line="42" pos:column="34">null</name></expr>)</condition><then pos:line="42" pos:column="39"> <block pos:line="42" pos:column="40">{
                <expr_stmt><expr><name pos:line="43" pos:column="17">lastSigElement</name> <op:operator pos:line="43" pos:column="32">=</op:operator> <call><name><name pos:line="43" pos:column="34">methodElement</name><op:operator pos:line="43" pos:column="47">.</op:operator><name pos:line="43" pos:column="48">Element</name></name><argument_list pos:line="43" pos:column="55">(<argument><expr><name><name pos:line="43" pos:column="56">SRC</name><op:operator pos:line="43" pos:column="59">.</op:operator><name pos:line="43" pos:column="60">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if pos:line="45" pos:column="13">if<condition pos:line="45" pos:column="15">(<expr><name pos:line="45" pos:column="16">lastSigElement</name> <op:operator pos:line="45" pos:column="31">!=</op:operator> <name pos:line="45" pos:column="34">null</name></expr>)</condition><then pos:line="45" pos:column="39"> <block pos:line="45" pos:column="40">{
                <comment type="line" pos:line="46" pos:column="17">//add all the text and whitespace prior to the last element</comment>
                <foreach pos:line="47" pos:column="17">foreach(<init><decl><type><name pos:line="47" pos:column="25">var</name></type> <name pos:line="47" pos:column="29">n</name> <range pos:line="47" pos:column="31">in <expr><call><name><name pos:line="47" pos:column="34">lastSigElement</name><op:operator pos:line="47" pos:column="48">.</op:operator><name pos:line="47" pos:column="49">NodesBeforeSelf</name></name><argument_list pos:line="47" pos:column="64">()</argument_list></call></expr></range></decl></init>) <block pos:line="47" pos:column="68">{
                    <if pos:line="48" pos:column="21">if<condition pos:line="48" pos:column="23">(<expr><name><name pos:line="48" pos:column="24">n</name><op:operator pos:line="48" pos:column="25">.</op:operator><name pos:line="48" pos:column="26">NodeType</name></name> <op:operator pos:line="48" pos:column="35">==</op:operator> <name><name pos:line="48" pos:column="38">XmlNodeType</name><op:operator pos:line="48" pos:column="49">.</op:operator><name pos:line="48" pos:column="50">Element</name></name></expr>)</condition><then pos:line="48" pos:column="58"> <block pos:line="48" pos:column="59">{
                        <expr_stmt><expr><call><name><name pos:line="49" pos:column="25">sig</name><op:operator pos:line="49" pos:column="28">.</op:operator><name pos:line="49" pos:column="29">Append</name></name><argument_list pos:line="49" pos:column="35">(<argument><expr><op:operator pos:line="49" pos:column="36">(</op:operator><op:operator pos:line="49" pos:column="37">(</op:operator><name pos:line="49" pos:column="38">XElement</name><op:operator pos:line="49" pos:column="46">)</op:operator><name pos:line="49" pos:column="47">n</name><op:operator pos:line="49" pos:column="48">)</op:operator><op:operator pos:line="49" pos:column="49">.</op:operator><name pos:line="49" pos:column="50">Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else pos:line="50" pos:column="23">else <if pos:line="50" pos:column="28">if<condition pos:line="50" pos:column="30">(<expr><name><name pos:line="50" pos:column="31">n</name><op:operator pos:line="50" pos:column="32">.</op:operator><name pos:line="50" pos:column="33">NodeType</name></name> <op:operator pos:line="50" pos:column="42">==</op:operator> <name><name pos:line="50" pos:column="45">XmlNodeType</name><op:operator pos:line="50" pos:column="56">.</op:operator><name pos:line="50" pos:column="57">Text</name></name> <op:operator pos:line="50" pos:column="62">||</op:operator> <name><name pos:line="50" pos:column="65">n</name><op:operator pos:line="50" pos:column="66">.</op:operator><name pos:line="50" pos:column="67">NodeType</name></name> <op:operator pos:line="50" pos:column="76">==</op:operator> <name><name pos:line="50" pos:column="79">XmlNodeType</name><op:operator pos:line="50" pos:column="90">.</op:operator><name pos:line="50" pos:column="91">Whitespace</name></name> <op:operator pos:line="50" pos:column="102">||</op:operator> <name><name pos:line="50" pos:column="105">n</name><op:operator pos:line="50" pos:column="106">.</op:operator><name pos:line="50" pos:column="107">NodeType</name></name> <op:operator pos:line="50" pos:column="116">==</op:operator> <name><name pos:line="50" pos:column="119">XmlNodeType</name><op:operator pos:line="50" pos:column="130">.</op:operator><name pos:line="50" pos:column="131">SignificantWhitespace</name></name></expr>)</condition><then pos:line="50" pos:column="153"> <block pos:line="50" pos:column="154">{
                        <expr_stmt><expr><call><name><name pos:line="51" pos:column="25">sig</name><op:operator pos:line="51" pos:column="28">.</op:operator><name pos:line="51" pos:column="29">Append</name></name><argument_list pos:line="51" pos:column="35">(<argument><expr><op:operator pos:line="51" pos:column="36">(</op:operator><op:operator pos:line="51" pos:column="37">(</op:operator><name pos:line="51" pos:column="38">XText</name><op:operator pos:line="51" pos:column="43">)</op:operator><name pos:line="51" pos:column="44">n</name><op:operator pos:line="51" pos:column="45">)</op:operator><op:operator pos:line="51" pos:column="46">.</op:operator><name pos:line="51" pos:column="47">Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if></else></if>
                }</block></foreach>
                <comment type="line" pos:line="54" pos:column="17">//add the last element</comment>
                <expr_stmt><expr><call><name><name pos:line="55" pos:column="17">sig</name><op:operator pos:line="55" pos:column="20">.</op:operator><name pos:line="55" pos:column="21">Append</name></name><argument_list pos:line="55" pos:column="27">(<argument><expr><name><name pos:line="55" pos:column="28">lastSigElement</name><op:operator pos:line="55" pos:column="42">.</op:operator><name pos:line="55" pos:column="43">Value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="56" pos:column="15">else <block pos:line="56" pos:column="20">{
                <comment type="line" pos:line="57" pos:column="17">//no name or parameter list, anonymous method?</comment>
            }</block></else></if>

            <comment type="line" pos:line="60" pos:column="13">//convert whitespace chars to spaces and condense any consecutive whitespaces.</comment>
            <return pos:line="61" pos:column="13">return <expr><call><name><name pos:line="61" pos:column="20">Regex</name><op:operator pos:line="61" pos:column="25">.</op:operator><name pos:line="61" pos:column="26">Replace</name></name><argument_list pos:line="61" pos:column="33">(<argument><expr><call><name><name pos:line="61" pos:column="34">sig</name><op:operator pos:line="61" pos:column="37">.</op:operator><name pos:line="61" pos:column="38">ToString</name></name><argument_list pos:line="61" pos:column="46">()</argument_list></call><op:operator pos:line="61" pos:column="48">.</op:operator><call><name pos:line="61" pos:column="49">Trim</name><argument_list pos:line="61" pos:column="53">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="61" pos:column="57">@"\s+"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="61" pos:column="65">" "</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></namespace>

        <comment type="line" pos:line="64" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="65" pos:column="9">/// Gets the language for a unit element.</comment>
        <comment type="line" pos:line="66" pos:column="9">/// </comment>
        <comment type="line" pos:line="67" pos:column="9">/// It throws an exception if the element is not a unit, has no language, or the language is invalid. &lt;see cref="ABB.SrcML.Language"/&gt;</comment>
        <comment type="line" pos:line="68" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="69" pos:column="9">/// &lt;param name="fileUnit"&gt;The file unit to get the language for&lt;/param&gt;</comment>
        <comment type="line" pos:line="70" pos:column="9">/// &lt;returns&gt;The language&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="71" pos:column="9">public</specifier> <specifier pos:line="71" pos:column="16">static</specifier> <name pos:line="71" pos:column="23">Language</name></type> <name pos:line="71" pos:column="32">GetLanguageForUnit</name><parameter_list pos:line="71" pos:column="50">(<param><decl><type><name pos:line="71" pos:column="51">XElement</name></type> <name pos:line="71" pos:column="60">fileUnit</name></decl></param>)</parameter_list> <block pos:line="71" pos:column="70">{
            <if pos:line="72" pos:column="13">if<condition pos:line="72" pos:column="15">(<expr><name pos:line="72" pos:column="16">fileUnit</name> <op:operator pos:line="72" pos:column="25">==</op:operator> <name pos:line="72" pos:column="28">null</name></expr>)</condition><then pos:line="72" pos:column="33"> <block pos:line="72" pos:column="34">{
                <throw pos:line="73" pos:column="17">throw <expr><op:operator pos:line="73" pos:column="23">new</op:operator> <call><name pos:line="73" pos:column="27">ArgumentNullException</name><argument_list pos:line="73" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="73" pos:column="49">"fileUnit"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <if pos:line="75" pos:column="13">if<condition pos:line="75" pos:column="15">(<expr><name><name pos:line="75" pos:column="16">fileUnit</name><op:operator pos:line="75" pos:column="24">.</op:operator><name pos:line="75" pos:column="25">Name</name></name> <op:operator pos:line="75" pos:column="30">!=</op:operator> <name><name pos:line="75" pos:column="33">SRC</name><op:operator pos:line="75" pos:column="36">.</op:operator><name pos:line="75" pos:column="37">Unit</name></name></expr>)</condition><then pos:line="75" pos:column="42"> <block pos:line="75" pos:column="43">{
                <throw pos:line="76" pos:column="17">throw <expr><op:operator pos:line="76" pos:column="23">new</op:operator> <call><name pos:line="76" pos:column="27">ArgumentException</name><argument_list pos:line="76" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="76" pos:column="45">"Not a unit element"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="76" pos:column="67">"fileUnit"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="79" pos:column="13">var</name></type> <name pos:line="79" pos:column="17">languageAttribute</name> <init pos:line="79" pos:column="35">= <expr><call><name><name pos:line="79" pos:column="37">fileUnit</name><op:operator pos:line="79" pos:column="45">.</op:operator><name pos:line="79" pos:column="46">Attribute</name></name><argument_list pos:line="79" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="79" pos:column="56">"language"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if pos:line="81" pos:column="13">if<condition pos:line="81" pos:column="15">(<expr><name pos:line="81" pos:column="16">null</name> <op:operator pos:line="81" pos:column="21">==</op:operator> <name pos:line="81" pos:column="24">languageAttribute</name></expr>)</condition><then pos:line="81" pos:column="42"> <block pos:line="81" pos:column="43">{
                <throw pos:line="82" pos:column="17">throw <expr><op:operator pos:line="82" pos:column="23">new</op:operator> <call><name pos:line="82" pos:column="27">SrcMLException</name><argument_list pos:line="82" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="82" pos:column="42">"unit contains no language attribute"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <return pos:line="85" pos:column="13">return <expr><call><name pos:line="85" pos:column="20">GetLanguageFromString</name><argument_list pos:line="85" pos:column="41">(<argument><expr><name><name pos:line="85" pos:column="42">languageAttribute</name><op:operator pos:line="85" pos:column="59">.</op:operator><name pos:line="85" pos:column="60">Value</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="88" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="89" pos:column="9">/// Helper method to get a Language value from a string. This is primarily used by obsolete SrcML.cs APIs to interface with newer code that does use the Language enumeration.</comment>
        <comment type="line" pos:line="90" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="91" pos:column="9">/// &lt;param name="language"&gt;a string to convert&lt;/param&gt;</comment>
        <comment type="line" pos:line="92" pos:column="9">/// &lt;returns&gt;the Language value that corresponds to language.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="93" pos:column="9">public</specifier> <specifier pos:line="93" pos:column="16">static</specifier> <name pos:line="93" pos:column="23">Language</name></type> <name pos:line="93" pos:column="32">GetLanguageFromString</name><parameter_list pos:line="93" pos:column="53">(<param><decl><type><name pos:line="93" pos:column="54">string</name></type> <name pos:line="93" pos:column="61">language</name></decl></param>)</parameter_list> <block pos:line="93" pos:column="71">{
            <if pos:line="94" pos:column="13">if<condition pos:line="94" pos:column="15">(<expr><lit:literal type="string" pos:line="94" pos:column="16">"Any"</lit:literal> <op:operator pos:line="94" pos:column="22">==</op:operator> <name pos:line="94" pos:column="25">language</name></expr>)</condition><then pos:line="94" pos:column="34">
                <return pos:line="95" pos:column="17">return <expr><name><name pos:line="95" pos:column="24">Language</name><op:operator pos:line="95" pos:column="32">.</op:operator><name pos:line="95" pos:column="33">Any</name></name></expr>;</return></then>
            <else pos:line="96" pos:column="13">else <if pos:line="96" pos:column="18">if<condition pos:line="96" pos:column="20">(<expr><lit:literal type="string" pos:line="96" pos:column="21">"C++"</lit:literal> <op:operator pos:line="96" pos:column="27">==</op:operator> <name pos:line="96" pos:column="30">language</name></expr>)</condition><then pos:line="96" pos:column="39">
                <return pos:line="97" pos:column="17">return <expr><name><name pos:line="97" pos:column="24">Language</name><op:operator pos:line="97" pos:column="32">.</op:operator><name pos:line="97" pos:column="33">CPlusPlus</name></name></expr>;</return></then>
            <else pos:line="98" pos:column="13">else <if pos:line="98" pos:column="18">if<condition pos:line="98" pos:column="20">(<expr><lit:literal type="string" pos:line="98" pos:column="21">"C"</lit:literal> <op:operator pos:line="98" pos:column="25">==</op:operator> <name pos:line="98" pos:column="28">language</name></expr>)</condition><then pos:line="98" pos:column="37">
                <return pos:line="99" pos:column="17">return <expr><name><name pos:line="99" pos:column="24">Language</name><op:operator pos:line="99" pos:column="32">.</op:operator><name pos:line="99" pos:column="33">C</name></name></expr>;</return></then>
            <else pos:line="100" pos:column="13">else <if pos:line="100" pos:column="18">if<condition pos:line="100" pos:column="20">(<expr><lit:literal type="string" pos:line="100" pos:column="21">"Java"</lit:literal> <op:operator pos:line="100" pos:column="28">==</op:operator> <name pos:line="100" pos:column="31">language</name></expr>)</condition><then pos:line="100" pos:column="40">
                <return pos:line="101" pos:column="17">return <expr><name><name pos:line="101" pos:column="24">Language</name><op:operator pos:line="101" pos:column="32">.</op:operator><name pos:line="101" pos:column="33">Java</name></name></expr>;</return></then>
            <else pos:line="102" pos:column="13">else <if pos:line="102" pos:column="18">if<condition pos:line="102" pos:column="20">(<expr><lit:literal type="string" pos:line="102" pos:column="21">"AspectJ"</lit:literal> <op:operator pos:line="102" pos:column="31">==</op:operator> <name pos:line="102" pos:column="34">language</name></expr>)</condition><then pos:line="102" pos:column="43">
                <return pos:line="103" pos:column="17">return <expr><name><name pos:line="103" pos:column="24">Language</name><op:operator pos:line="103" pos:column="32">.</op:operator><name pos:line="103" pos:column="33">AspectJ</name></name></expr>;</return></then>
            <else pos:line="104" pos:column="13">else <if pos:line="104" pos:column="18">if<condition pos:line="104" pos:column="20">(<expr><lit:literal type="string" pos:line="104" pos:column="21">"C#"</lit:literal> <op:operator pos:line="104" pos:column="26">==</op:operator> <name pos:line="104" pos:column="29">language</name></expr>)</condition><then pos:line="104" pos:column="38"> <block pos:line="104" pos:column="39">{
                <return pos:line="105" pos:column="17">return <expr><name><name pos:line="105" pos:column="24">Language</name><op:operator pos:line="105" pos:column="32">.</op:operator><name pos:line="105" pos:column="33">CSharp</name></name></expr>;</return>
            }</block></then></if></else></if></else></if></else></if></else></if></else></if>
            <throw pos:line="107" pos:column="13">throw <expr><op:operator pos:line="107" pos:column="19">new</op:operator> <call><name pos:line="107" pos:column="23">SrcMLException</name><argument_list pos:line="107" pos:column="37">(<argument><expr><call><name><name pos:line="107" pos:column="38">String</name><op:operator pos:line="107" pos:column="44">.</op:operator><name pos:line="107" pos:column="45">Format</name></name><argument_list pos:line="107" pos:column="51">(<argument><expr><name><name pos:line="107" pos:column="52">CultureInfo</name><op:operator pos:line="107" pos:column="63">.</op:operator><name pos:line="107" pos:column="64">CurrentCulture</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="107" pos:column="80">"{0} is not a valid language."</lit:literal></expr></argument>, <argument><expr><name pos:line="107" pos:column="112">language</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></function>

        <comment type="line" pos:line="110" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="111" pos:column="9">/// Returns the filename attribute in the given unit element.</comment>
        <comment type="line" pos:line="112" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="113" pos:column="9">/// &lt;param name="fileUnit"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="114" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="115" pos:column="9">public</specifier> <specifier pos:line="115" pos:column="16">static</specifier> <name pos:line="115" pos:column="23">string</name></type> <name pos:line="115" pos:column="30">GetFileNameForUnit</name><parameter_list pos:line="115" pos:column="48">(<param><decl><type><name pos:line="115" pos:column="49">XElement</name></type> <name pos:line="115" pos:column="58">fileUnit</name></decl></param>)</parameter_list> <block pos:line="115" pos:column="68">{
            <if pos:line="116" pos:column="13">if<condition pos:line="116" pos:column="15">(<expr><name pos:line="116" pos:column="16">fileUnit</name> <op:operator pos:line="116" pos:column="25">==</op:operator> <name pos:line="116" pos:column="28">null</name></expr>)</condition><then pos:line="116" pos:column="33"> <throw pos:line="116" pos:column="34">throw <expr><op:operator pos:line="116" pos:column="40">new</op:operator> <call><name pos:line="116" pos:column="44">ArgumentNullException</name><argument_list pos:line="116" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="116" pos:column="66">"fileUnit"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="117" pos:column="13">if<condition pos:line="117" pos:column="15">(<expr><name><name pos:line="117" pos:column="16">fileUnit</name><op:operator pos:line="117" pos:column="24">.</op:operator><name pos:line="117" pos:column="25">Name</name></name> <op:operator pos:line="117" pos:column="30">!=</op:operator> <name><name pos:line="117" pos:column="33">SRC</name><op:operator pos:line="117" pos:column="36">.</op:operator><name pos:line="117" pos:column="37">Unit</name></name></expr>)</condition><then pos:line="117" pos:column="42"> <throw pos:line="117" pos:column="43">throw <expr><op:operator pos:line="117" pos:column="49">new</op:operator> <call><name pos:line="117" pos:column="53">ArgumentException</name><argument_list pos:line="117" pos:column="70">(<argument><expr><lit:literal type="string" pos:line="117" pos:column="71">"should be a SRC.Unit"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="117" pos:column="95">"fileUnit"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <decl_stmt><decl><type><name pos:line="118" pos:column="13">var</name></type> <name pos:line="118" pos:column="17">fileNameAttribute</name> <init pos:line="118" pos:column="35">= <expr><call><name><name pos:line="118" pos:column="37">fileUnit</name><op:operator pos:line="118" pos:column="45">.</op:operator><name pos:line="118" pos:column="46">Attribute</name></name><argument_list pos:line="118" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="118" pos:column="56">"filename"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="119" pos:column="13">if<condition pos:line="119" pos:column="15">(<expr><name pos:line="119" pos:column="16">null</name> <op:operator pos:line="119" pos:column="21">!=</op:operator> <name pos:line="119" pos:column="24">fileNameAttribute</name></expr>)</condition><then pos:line="119" pos:column="42"> <block pos:line="119" pos:column="43">{
                <return pos:line="120" pos:column="17">return <expr><name><name pos:line="120" pos:column="24">fileNameAttribute</name><op:operator pos:line="120" pos:column="41">.</op:operator><name pos:line="120" pos:column="42">Value</name></name></expr>;</return>
            }</block></then></if>
            <return pos:line="122" pos:column="13">return <expr><name pos:line="122" pos:column="20">null</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="125" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="126" pos:column="9">/// Loads an &lt;see cref="System.Xml.Linq.XElement"/&gt; from the file name with whitespae preserved and line info included</comment>
        <comment type="line" pos:line="127" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="128" pos:column="9">/// &lt;param name="xmlFileName"&gt;The srcml file name&lt;/param&gt;</comment>
        <comment type="line" pos:line="129" pos:column="9">/// &lt;returns&gt;An XElement&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="130" pos:column="9">public</specifier> <specifier pos:line="130" pos:column="16">static</specifier> <name pos:line="130" pos:column="23">XElement</name></type> <name pos:line="130" pos:column="32">Load</name><parameter_list pos:line="130" pos:column="36">(<param><decl><type><name pos:line="130" pos:column="37">string</name></type> <name pos:line="130" pos:column="44">xmlFileName</name></decl></param>)</parameter_list> <block pos:line="130" pos:column="57">{
            <if pos:line="131" pos:column="13">if<condition pos:line="131" pos:column="15">(<expr><call><name><name pos:line="131" pos:column="16">File</name><op:operator pos:line="131" pos:column="20">.</op:operator><name pos:line="131" pos:column="21">Exists</name></name><argument_list pos:line="131" pos:column="27">(<argument><expr><name pos:line="131" pos:column="28">xmlFileName</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="131" pos:column="41"> <block pos:line="131" pos:column="42">{
                <using pos:line="132" pos:column="17">using(<decl><type><name pos:line="132" pos:column="23">var</name></type> <name pos:line="132" pos:column="27">f</name> <init pos:line="132" pos:column="29">= <expr><call><name><name pos:line="132" pos:column="31">File</name><op:operator pos:line="132" pos:column="35">.</op:operator><name pos:line="132" pos:column="36">Open</name></name><argument_list pos:line="132" pos:column="40">(<argument><expr><name pos:line="132" pos:column="41">xmlFileName</name></expr></argument>, <argument><expr><name><name pos:line="132" pos:column="54">FileMode</name><op:operator pos:line="132" pos:column="62">.</op:operator><name pos:line="132" pos:column="63">Open</name></name></expr></argument>, <argument><expr><name><name pos:line="132" pos:column="69">FileAccess</name><op:operator pos:line="132" pos:column="79">.</op:operator><name pos:line="132" pos:column="80">Read</name></name></expr></argument>, <argument><expr><name><name pos:line="132" pos:column="86">FileShare</name><op:operator pos:line="132" pos:column="95">.</op:operator><name pos:line="132" pos:column="96">Read</name></name></expr></argument>)</argument_list></call></expr></init></decl>) <block pos:line="132" pos:column="103">{
                    <return pos:line="133" pos:column="21">return <expr><call><name><name pos:line="133" pos:column="28">XElement</name><op:operator pos:line="133" pos:column="36">.</op:operator><name pos:line="133" pos:column="37">Load</name></name><argument_list pos:line="133" pos:column="41">(<argument><expr><name pos:line="133" pos:column="42">f</name></expr></argument>, <argument><expr><name><name pos:line="133" pos:column="45">LoadOptions</name><op:operator pos:line="133" pos:column="56">.</op:operator><name pos:line="133" pos:column="57">PreserveWhitespace</name></name> <op:operator pos:line="133" pos:column="76">|</op:operator> <name><name pos:line="133" pos:column="78">LoadOptions</name><op:operator pos:line="133" pos:column="89">.</op:operator><name pos:line="133" pos:column="90">SetLineInfo</name></name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></using>
            }</block></then></if>
            <return pos:line="136" pos:column="13">return <expr><name pos:line="136" pos:column="20">null</name></expr>;</return>
        }</block></function>

        <function><type><attribute pos:line="139" pos:column="9">[<expr><call><name><name pos:line="139" pos:column="10">System</name><op:operator pos:line="139" pos:column="16">.</op:operator><name pos:line="139" pos:column="17">Diagnostics</name><op:operator pos:line="139" pos:column="28">.</op:operator><name pos:line="139" pos:column="29">CodeAnalysis</name><op:operator pos:line="139" pos:column="41">.</op:operator><name pos:line="139" pos:column="42">SuppressMessage</name></name><argument_list pos:line="139" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="139" pos:column="58">"Microsoft.Performance"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="139" pos:column="83">"CA1811:AvoidUncalledPrivateCode"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="140" pos:column="9">private</specifier> <specifier pos:line="140" pos:column="17">static</specifier> <name pos:line="140" pos:column="24">XAttribute</name></type> <name pos:line="140" pos:column="35">GetAttributeFromSelfOrDescendant</name><parameter_list pos:line="140" pos:column="67">(<param><decl><type><name pos:line="140" pos:column="68">XElement</name></type> <name pos:line="140" pos:column="77">element</name></decl></param>, <param><decl><type><name pos:line="140" pos:column="86">XName</name></type> <name pos:line="140" pos:column="92">name</name></decl></param>)</parameter_list> <block pos:line="140" pos:column="98">{
            <decl_stmt><decl><type><name pos:line="141" pos:column="13">XAttribute</name></type> <name pos:line="141" pos:column="24">attribute</name> <init pos:line="141" pos:column="34">= <expr><call><name><name pos:line="141" pos:column="36">element</name><op:operator pos:line="141" pos:column="43">.</op:operator><name pos:line="141" pos:column="44">Attribute</name></name><argument_list pos:line="141" pos:column="53">(<argument><expr><name pos:line="141" pos:column="54">name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if pos:line="143" pos:column="13">if<condition pos:line="143" pos:column="15">(<expr><name pos:line="143" pos:column="16">null</name> <op:operator pos:line="143" pos:column="21">==</op:operator> <name pos:line="143" pos:column="24">attribute</name></expr>)</condition><then pos:line="143" pos:column="34"> <block pos:line="143" pos:column="35">{
                <expr_stmt><expr><name pos:line="144" pos:column="17">attribute</name> <op:operator pos:line="144" pos:column="27">=</op:operator> <op:operator pos:line="144" pos:column="29">(</op:operator><linq><from pos:line="144" pos:column="30">from <expr><name pos:line="144" pos:column="35">child</name></expr> <in pos:line="144" pos:column="41">in <expr><call><name><name pos:line="144" pos:column="44">element</name><op:operator pos:line="144" pos:column="51">.</op:operator><name pos:line="144" pos:column="52">Descendants</name></name><argument_list pos:line="144" pos:column="63">()</argument_list></call></expr></in></from>
                             <let pos:line="145" pos:column="30">let <expr><name pos:line="145" pos:column="34">childAttribute</name> <op:operator pos:line="145" pos:column="49">=</op:operator> <call><name><name pos:line="145" pos:column="51">child</name><op:operator pos:line="145" pos:column="56">.</op:operator><name pos:line="145" pos:column="57">Attribute</name></name><argument_list pos:line="145" pos:column="66">(<argument><expr><name pos:line="145" pos:column="67">name</name></expr></argument>)</argument_list></call></expr></let>
                             <where pos:line="146" pos:column="30">where <expr><name pos:line="146" pos:column="36">childAttribute</name> <op:operator pos:line="146" pos:column="51">!=</op:operator> <name pos:line="146" pos:column="54">null</name></expr></where>
                             <select pos:line="147" pos:column="30">select <expr><name pos:line="147" pos:column="37">childAttribute</name></expr></select></linq><op:operator pos:line="147" pos:column="51">)</op:operator><op:operator pos:line="147" pos:column="52">.</op:operator><call><name pos:line="147" pos:column="53">FirstOrDefault</name><argument_list pos:line="147" pos:column="67">()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <return pos:line="150" pos:column="13">return <expr><name pos:line="150" pos:column="20">attribute</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="153" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="154" pos:column="9">/// Gets the X path that uniquely identifies the given XElement relative to to the containing file unit.</comment>
        <comment type="line" pos:line="155" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="156" pos:column="9">/// &lt;param name="element"&gt;The element.&lt;/param&gt;</comment>
        <comment type="line" pos:line="157" pos:column="9">/// &lt;returns&gt;An XPath query that uniquely identifies &lt;paramref name="element"/&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="158" pos:column="9">public</specifier> <specifier pos:line="158" pos:column="16">static</specifier> <name pos:line="158" pos:column="23">string</name></type> <name pos:line="158" pos:column="30">GetXPath</name><parameter_list pos:line="158" pos:column="38">(<param><decl><type><name pos:line="158" pos:column="39">this</name> <name pos:line="158" pos:column="44">XElement</name></type> <name pos:line="158" pos:column="53">element</name></decl></param>)</parameter_list> <block pos:line="158" pos:column="62">{
            <return pos:line="159" pos:column="13">return <expr><call><name pos:line="159" pos:column="20">GetXPath</name><argument_list pos:line="159" pos:column="28">(<argument><expr><name pos:line="159" pos:column="29">element</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="159" pos:column="38">true</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="162" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="163" pos:column="9">/// Gets an XPath query that uniquely identifies the given XElement</comment>
        <comment type="line" pos:line="164" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="165" pos:column="9">/// &lt;param name="element"&gt;The element to create an XPath query for&lt;/param&gt;</comment>
        <comment type="line" pos:line="166" pos:column="9">/// &lt;param name="relativeToFileUnit"&gt;whether or not the XPath query is relative to the parent file unit or not&lt;/param&gt;</comment>
        <comment type="line" pos:line="167" pos:column="9">/// &lt;returns&gt;An XPath query that uniquely identifies &lt;paramref name="element"/&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="168" pos:column="9">public</specifier> <specifier pos:line="168" pos:column="16">static</specifier> <name pos:line="168" pos:column="23">string</name></type> <name pos:line="168" pos:column="30">GetXPath</name><parameter_list pos:line="168" pos:column="38">(<param><decl><type><name pos:line="168" pos:column="39">this</name> <name pos:line="168" pos:column="44">XElement</name></type> <name pos:line="168" pos:column="53">element</name></decl></param>, <param><decl><type><name pos:line="168" pos:column="62">bool</name></type> <name pos:line="168" pos:column="67">relativeToFileUnit</name></decl></param>)</parameter_list> <block pos:line="168" pos:column="87">{
            <if pos:line="169" pos:column="13">if<condition pos:line="169" pos:column="15">(<expr><name pos:line="169" pos:column="16">null</name> <op:operator pos:line="169" pos:column="21">==</op:operator> <name pos:line="169" pos:column="24">element</name></expr>)</condition><then pos:line="169" pos:column="32">
                <throw pos:line="170" pos:column="17">throw <expr><op:operator pos:line="170" pos:column="23">new</op:operator> <call><name pos:line="170" pos:column="27">ArgumentNullException</name><argument_list pos:line="170" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="170" pos:column="49">"element"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="172" pos:column="13">StringBuilder</name></type> <name pos:line="172" pos:column="27">xpathBuilder</name> <init pos:line="172" pos:column="40">= <expr><op:operator pos:line="172" pos:column="42">new</op:operator> <call><name pos:line="172" pos:column="46">StringBuilder</name><argument_list pos:line="172" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="174" pos:column="13">XElement</name></type> <name pos:line="174" pos:column="22">current</name> <init pos:line="174" pos:column="30">= <expr><name pos:line="174" pos:column="32">element</name></expr></init></decl>;</decl_stmt>

            <do pos:line="176" pos:column="13">do <block pos:line="176" pos:column="16">{
                <if pos:line="177" pos:column="17">if<condition pos:line="177" pos:column="19">(<expr><name><name pos:line="177" pos:column="20">SRC</name><op:operator pos:line="177" pos:column="23">.</op:operator><name pos:line="177" pos:column="24">Unit</name></name> <op:operator pos:line="177" pos:column="29">==</op:operator> <name><name pos:line="177" pos:column="32">current</name><op:operator pos:line="177" pos:column="39">.</op:operator><name pos:line="177" pos:column="40">Name</name></name></expr>)</condition><then pos:line="177" pos:column="45"> <block pos:line="177" pos:column="46">{
                    <if pos:line="178" pos:column="21">if<condition pos:line="178" pos:column="23">(<expr><name pos:line="178" pos:column="24">relativeToFileUnit</name></expr>)</condition><then pos:line="178" pos:column="43"> <block pos:line="178" pos:column="44">{
                        <expr_stmt><expr><name pos:line="179" pos:column="25">current</name> <op:operator pos:line="179" pos:column="33">=</op:operator> <name pos:line="179" pos:column="35">null</name></expr>;</expr_stmt>
                        <continue pos:line="180" pos:column="25">continue;</continue>
                    }</block></then></if>
                    <decl_stmt><decl><type><name pos:line="182" pos:column="21">var</name></type> <name pos:line="182" pos:column="25">fileName</name> <init pos:line="182" pos:column="34">= <expr><call><name><name pos:line="182" pos:column="36">current</name><op:operator pos:line="182" pos:column="43">.</op:operator><name pos:line="182" pos:column="44">Attribute</name></name><argument_list pos:line="182" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="182" pos:column="54">"filename"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="183" pos:column="21">if<condition pos:line="183" pos:column="23">(<expr><name pos:line="183" pos:column="24">fileName</name> <op:operator pos:line="183" pos:column="33">!=</op:operator> <name pos:line="183" pos:column="36">null</name></expr>)</condition><then pos:line="183" pos:column="41"> <block pos:line="183" pos:column="42">{
                        <expr_stmt><expr><call><name><name pos:line="184" pos:column="25">xpathBuilder</name><op:operator pos:line="184" pos:column="37">.</op:operator><name pos:line="184" pos:column="38">Insert</name></name><argument_list pos:line="184" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="184" pos:column="45">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="184" pos:column="48">String</name><op:operator pos:line="184" pos:column="54">.</op:operator><name pos:line="184" pos:column="55">Format</name></name><argument_list pos:line="184" pos:column="61">(<argument><expr><name><name pos:line="184" pos:column="62">CultureInfo</name><op:operator pos:line="184" pos:column="73">.</op:operator><name pos:line="184" pos:column="74">InvariantCulture</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="184" pos:column="92">"[@filename=\"{0}\"]"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="184" pos:column="115">fileName</name><op:operator pos:line="184" pos:column="123">.</op:operator><name pos:line="184" pos:column="124">Value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then> <else pos:line="186" pos:column="19">else <block pos:line="186" pos:column="24">{
                    <decl_stmt><decl><type><name pos:line="187" pos:column="21">var</name></type> <name pos:line="187" pos:column="25">count</name> <init pos:line="187" pos:column="31">= <expr><call><name><name pos:line="187" pos:column="33">current</name><op:operator pos:line="187" pos:column="40">.</op:operator><name pos:line="187" pos:column="41">ElementsBeforeSelf</name></name><argument_list pos:line="187" pos:column="59">(<argument><expr><name><name pos:line="187" pos:column="60">current</name><op:operator pos:line="187" pos:column="67">.</op:operator><name pos:line="187" pos:column="68">Name</name></name></expr></argument>)</argument_list></call><op:operator pos:line="187" pos:column="73">.</op:operator><call><name pos:line="187" pos:column="74">Count</name><argument_list pos:line="187" pos:column="79">()</argument_list></call> <op:operator pos:line="187" pos:column="82">+</op:operator> <lit:literal type="number" pos:line="187" pos:column="84">1</lit:literal></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="188" pos:column="21">xpathBuilder</name><op:operator pos:line="188" pos:column="33">.</op:operator><name pos:line="188" pos:column="34">Insert</name></name><argument_list pos:line="188" pos:column="40">(<argument><expr><lit:literal type="number" pos:line="188" pos:column="41">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="188" pos:column="44">String</name><op:operator pos:line="188" pos:column="50">.</op:operator><name pos:line="188" pos:column="51">Format</name></name><argument_list pos:line="188" pos:column="57">(<argument><expr><name><name pos:line="188" pos:column="58">CultureInfo</name><op:operator pos:line="188" pos:column="69">.</op:operator><name pos:line="188" pos:column="70">InvariantCulture</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="188" pos:column="88">"[{0}]"</lit:literal></expr></argument>, <argument><expr><name pos:line="188" pos:column="97">count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>

                <decl_stmt><decl><type><name pos:line="191" pos:column="17">var</name></type> <name pos:line="191" pos:column="21">prefix</name> <init pos:line="191" pos:column="28">= <expr><call><name><name pos:line="191" pos:column="30">SrcMLNamespaces</name><op:operator pos:line="191" pos:column="45">.</op:operator><name pos:line="191" pos:column="46">LookupPrefix</name></name><argument_list pos:line="191" pos:column="58">(<argument><expr><name><name pos:line="191" pos:column="59">current</name><op:operator pos:line="191" pos:column="66">.</op:operator><name pos:line="191" pos:column="67">Name</name><op:operator pos:line="191" pos:column="71">.</op:operator><name pos:line="191" pos:column="72">NamespaceName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                

                <expr_stmt><expr><call><name><name pos:line="194" pos:column="17">xpathBuilder</name><op:operator pos:line="194" pos:column="29">.</op:operator><name pos:line="194" pos:column="30">Insert</name></name><argument_list pos:line="194" pos:column="36">(<argument><expr><lit:literal type="number" pos:line="194" pos:column="37">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="194" pos:column="40">String</name><op:operator pos:line="194" pos:column="46">.</op:operator><name pos:line="194" pos:column="47">Format</name></name><argument_list pos:line="194" pos:column="53">(<argument><expr><name><name pos:line="194" pos:column="54">CultureInfo</name><op:operator pos:line="194" pos:column="65">.</op:operator><name pos:line="194" pos:column="66">InvariantCulture</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="194" pos:column="84">"{0}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="194" pos:column="91">current</name><op:operator pos:line="194" pos:column="98">.</op:operator><name pos:line="194" pos:column="99">Name</name><op:operator pos:line="194" pos:column="103">.</op:operator><name pos:line="194" pos:column="104">LocalName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="195" pos:column="17">if<condition pos:line="195" pos:column="19">(<expr><op:operator pos:line="195" pos:column="20">!</op:operator><call><name><name pos:line="195" pos:column="21">String</name><op:operator pos:line="195" pos:column="27">.</op:operator><name pos:line="195" pos:column="28">IsNullOrEmpty</name></name><argument_list pos:line="195" pos:column="41">(<argument><expr><name pos:line="195" pos:column="42">prefix</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="195" pos:column="50"> <block pos:line="195" pos:column="51">{
                    <expr_stmt><expr><call><name><name pos:line="196" pos:column="21">xpathBuilder</name><op:operator pos:line="196" pos:column="33">.</op:operator><name pos:line="196" pos:column="34">Insert</name></name><argument_list pos:line="196" pos:column="40">(<argument><expr><lit:literal type="number" pos:line="196" pos:column="41">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="196" pos:column="44">String</name><op:operator pos:line="196" pos:column="50">.</op:operator><name pos:line="196" pos:column="51">Format</name></name><argument_list pos:line="196" pos:column="57">(<argument><expr><name><name pos:line="196" pos:column="58">CultureInfo</name><op:operator pos:line="196" pos:column="69">.</op:operator><name pos:line="196" pos:column="70">InvariantCulture</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="196" pos:column="88">"{0}:"</lit:literal></expr></argument>, <argument><expr><name pos:line="196" pos:column="96">prefix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name><name pos:line="198" pos:column="17">xpathBuilder</name><op:operator pos:line="198" pos:column="29">.</op:operator><name pos:line="198" pos:column="30">Insert</name></name><argument_list pos:line="198" pos:column="36">(<argument><expr><lit:literal type="number" pos:line="198" pos:column="37">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="198" pos:column="40">"/"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="199" pos:column="17">current</name> <op:operator pos:line="199" pos:column="25">=</op:operator> <op:operator pos:line="199" pos:column="27">(</op:operator><name pos:line="199" pos:column="28">null</name> <op:operator pos:line="199" pos:column="33">==</op:operator> <name><name pos:line="199" pos:column="36">current</name><op:operator pos:line="199" pos:column="43">.</op:operator><name pos:line="199" pos:column="44">Parent</name> <type:modifier pos:line="199" pos:column="51">?</type:modifier></name> <name pos:line="199" pos:column="53">null</name> <op:operator pos:line="199" pos:column="58">:</op:operator> <name><name pos:line="199" pos:column="60">current</name><op:operator pos:line="199" pos:column="67">.</op:operator><name pos:line="199" pos:column="68">Parent</name></name><op:operator pos:line="199" pos:column="74">)</op:operator></expr>;</expr_stmt>
            }</block> while<condition pos:line="200" pos:column="20">(<expr><name pos:line="200" pos:column="21">null</name> <op:operator pos:line="200" pos:column="26">!=</op:operator> <name pos:line="200" pos:column="29">current</name></expr>)</condition>;</do>
            <return pos:line="201" pos:column="13">return <expr><call><name><name pos:line="201" pos:column="20">xpathBuilder</name><op:operator pos:line="201" pos:column="32">.</op:operator><name pos:line="201" pos:column="33">ToString</name></name><argument_list pos:line="201" pos:column="41">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="204" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="205" pos:column="9">/// Gets the line number for the given element.</comment>
        <comment type="line" pos:line="206" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="207" pos:column="9">/// &lt;param name="element"&gt;The element&lt;/param&gt;</comment>
        <comment type="line" pos:line="208" pos:column="9">/// &lt;returns&gt;The line number that the given element is found on; -1 if the data is not present&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="209" pos:column="9">public</specifier> <specifier pos:line="209" pos:column="16">static</specifier> <name pos:line="209" pos:column="23">int</name></type> <name pos:line="209" pos:column="27">GetXmlLineNumber</name><parameter_list pos:line="209" pos:column="43">(<param><decl><type><name pos:line="209" pos:column="44">this</name> <name pos:line="209" pos:column="49">XElement</name></type> <name pos:line="209" pos:column="58">element</name></decl></param>)</parameter_list> <block pos:line="209" pos:column="67">{
            <decl_stmt><decl><type><name pos:line="210" pos:column="13">LineInfo</name></type> <name pos:line="210" pos:column="22">li</name> <init pos:line="210" pos:column="25">= <expr><call><name pos:line="210" pos:column="27">GetLineInfo</name><argument_list pos:line="210" pos:column="38">(<argument><expr><name pos:line="210" pos:column="39">element</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="211" pos:column="13">if<condition pos:line="211" pos:column="15">(<expr><name pos:line="211" pos:column="16">null</name> <op:operator pos:line="211" pos:column="21">==</op:operator> <name pos:line="211" pos:column="24">li</name></expr>)</condition><then pos:line="211" pos:column="27">
                <return pos:line="212" pos:column="17">return <expr><op:operator pos:line="212" pos:column="24">-</op:operator><lit:literal type="number" pos:line="212" pos:column="25">1</lit:literal></expr>;</return></then></if>
            <return pos:line="213" pos:column="13">return <expr><name><name pos:line="213" pos:column="20">li</name><op:operator pos:line="213" pos:column="22">.</op:operator><name pos:line="213" pos:column="23">LineNumber</name></name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="216" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="217" pos:column="9">/// Gets the line position for the given element.</comment>
        <comment type="line" pos:line="218" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="219" pos:column="9">/// &lt;param name="element"&gt;The element&lt;/param&gt;</comment>
        <comment type="line" pos:line="220" pos:column="9">/// &lt;returns&gt;The line number that the given element is found on; -1 if the data is not present&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="221" pos:column="9">public</specifier> <specifier pos:line="221" pos:column="16">static</specifier> <name pos:line="221" pos:column="23">int</name></type> <name pos:line="221" pos:column="27">GetXmlLinePosition</name><parameter_list pos:line="221" pos:column="45">(<param><decl><type><name pos:line="221" pos:column="46">this</name> <name pos:line="221" pos:column="51">XElement</name></type> <name pos:line="221" pos:column="60">element</name></decl></param>)</parameter_list> <block pos:line="221" pos:column="69">{
            <decl_stmt><decl><type><name pos:line="222" pos:column="13">LineInfo</name></type> <name pos:line="222" pos:column="22">li</name> <init pos:line="222" pos:column="25">= <expr><call><name pos:line="222" pos:column="27">GetLineInfo</name><argument_list pos:line="222" pos:column="38">(<argument><expr><name pos:line="222" pos:column="39">element</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="223" pos:column="13">if<condition pos:line="223" pos:column="15">(<expr><name pos:line="223" pos:column="16">null</name> <op:operator pos:line="223" pos:column="21">==</op:operator> <name pos:line="223" pos:column="24">li</name></expr>)</condition><then pos:line="223" pos:column="27">
                <return pos:line="224" pos:column="17">return <expr><op:operator pos:line="224" pos:column="24">-</op:operator><lit:literal type="number" pos:line="224" pos:column="25">1</lit:literal></expr>;</return></then></if>
            <return pos:line="225" pos:column="13">return <expr><name><name pos:line="225" pos:column="20">li</name><op:operator pos:line="225" pos:column="22">.</op:operator><name pos:line="225" pos:column="23">Position</name></name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="228" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="229" pos:column="9">/// Gets the line of source code that contains the given element.</comment>
        <comment type="line" pos:line="230" pos:column="9">/// &lt;para&gt;This differs from &lt;see cref="GetXmlLineNumber"/&gt; in that this is the number of lines relative</comment>
        <comment type="line" pos:line="231" pos:column="9">/// to the current &lt;see cref="SRC.Unit"/&gt;; this matches to the line number in the original source file.&lt;/para&gt;</comment>
        <comment type="line" pos:line="232" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="233" pos:column="9">/// &lt;param name="element"&gt;The element&lt;/param&gt;</comment>
        <comment type="line" pos:line="234" pos:column="9">/// &lt;returns&gt;The line of source code; -1 if that info is not found.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="235" pos:column="9">public</specifier> <specifier pos:line="235" pos:column="16">static</specifier> <name pos:line="235" pos:column="23">int</name></type> <name pos:line="235" pos:column="27">GetSrcLineNumber</name><parameter_list pos:line="235" pos:column="43">(<param><decl><type><name pos:line="235" pos:column="44">this</name> <name pos:line="235" pos:column="49">XElement</name></type> <name pos:line="235" pos:column="58">element</name></decl></param>)</parameter_list> <block pos:line="235" pos:column="67">{
            <if pos:line="236" pos:column="13">if<condition pos:line="236" pos:column="15">(<expr><name pos:line="236" pos:column="16">null</name> <op:operator pos:line="236" pos:column="21">==</op:operator> <name pos:line="236" pos:column="24">element</name></expr>)</condition><then pos:line="236" pos:column="32">
                <throw pos:line="237" pos:column="17">throw <expr><op:operator pos:line="237" pos:column="23">new</op:operator> <call><name pos:line="237" pos:column="27">ArgumentNullException</name><argument_list pos:line="237" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="237" pos:column="49">"element"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="239" pos:column="13">int</name></type> <name pos:line="239" pos:column="17">lineNumber</name> <init pos:line="239" pos:column="28">= <expr><op:operator pos:line="239" pos:column="30">-</op:operator><lit:literal type="number" pos:line="239" pos:column="31">1</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="241" pos:column="13">var</name></type> <name pos:line="241" pos:column="17">srcLineAttribute</name> <init pos:line="241" pos:column="34">= <expr><call><name pos:line="241" pos:column="36">GetAttributeFromSelfOrDescendant</name><argument_list pos:line="241" pos:column="68">(<argument><expr><name pos:line="241" pos:column="69">element</name></expr></argument>, <argument><expr><name><name pos:line="241" pos:column="78">POS</name><op:operator pos:line="241" pos:column="81">.</op:operator><name pos:line="241" pos:column="82">Line</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="242" pos:column="13">if<condition pos:line="242" pos:column="15">(<expr><name pos:line="242" pos:column="16">null</name> <op:operator pos:line="242" pos:column="21">!=</op:operator> <name pos:line="242" pos:column="24">srcLineAttribute</name> <op:operator pos:line="242" pos:column="41">&amp;&amp;</op:operator> <call><name><name pos:line="242" pos:column="44">Int32</name><op:operator pos:line="242" pos:column="49">.</op:operator><name pos:line="242" pos:column="50">TryParse</name></name><argument_list pos:line="242" pos:column="58">(<argument><expr><name><name pos:line="242" pos:column="59">srcLineAttribute</name><op:operator pos:line="242" pos:column="75">.</op:operator><name pos:line="242" pos:column="76">Value</name></name></expr></argument>, <argument><expr pos:line="242" pos:column="83">out <name pos:line="242" pos:column="87">lineNumber</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="242" pos:column="99"> <block pos:line="242" pos:column="100">{
                <return pos:line="243" pos:column="17">return <expr><name pos:line="243" pos:column="24">lineNumber</name></expr>;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="246" pos:column="13">int</name></type> <name pos:line="246" pos:column="17">xmlLineNum</name> <init pos:line="246" pos:column="28">= <expr><call><name><name pos:line="246" pos:column="30">element</name><op:operator pos:line="246" pos:column="37">.</op:operator><name pos:line="246" pos:column="38">GetXmlLineNumber</name></name><argument_list pos:line="246" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="248" pos:column="13">// if no line info is present, just return -1</comment>
            <comment type="line" pos:line="249" pos:column="13">// we may want to look at calculating the line number based on the text in the file (see GetSrcLinePosition below)</comment>
            <if pos:line="250" pos:column="13">if<condition pos:line="250" pos:column="15">(<expr><op:operator pos:line="250" pos:column="16">-</op:operator><lit:literal type="number" pos:line="250" pos:column="17">1</lit:literal> <op:operator pos:line="250" pos:column="19">==</op:operator> <name pos:line="250" pos:column="22">xmlLineNum</name></expr>)</condition><then pos:line="250" pos:column="33">
                <return pos:line="251" pos:column="17">return <expr><op:operator pos:line="251" pos:column="24">-</op:operator><lit:literal type="number" pos:line="251" pos:column="25">1</lit:literal></expr>;</return></then></if>

            <comment type="line" pos:line="253" pos:column="13">// if th element is a unit, just return 0: Source line number doesn't make sense for a file.</comment>
            <if pos:line="254" pos:column="13">if<condition pos:line="254" pos:column="15">(<expr><name><name pos:line="254" pos:column="16">SRC</name><op:operator pos:line="254" pos:column="19">.</op:operator><name pos:line="254" pos:column="20">Unit</name></name> <op:operator pos:line="254" pos:column="25">==</op:operator> <name><name pos:line="254" pos:column="28">element</name><op:operator pos:line="254" pos:column="35">.</op:operator><name pos:line="254" pos:column="36">Name</name></name></expr>)</condition><then pos:line="254" pos:column="41">
                <return pos:line="255" pos:column="17">return <expr><lit:literal type="number" pos:line="255" pos:column="24">1</lit:literal></expr>;</return></then></if>

            <comment type="line" pos:line="257" pos:column="13">// get the xml line number of the file unit that contains this element</comment>
            <decl_stmt><decl><type><name pos:line="258" pos:column="13">var</name></type> <name pos:line="258" pos:column="17">unit</name> <init pos:line="258" pos:column="22">= <expr><call><name><name pos:line="258" pos:column="24">element</name><op:operator pos:line="258" pos:column="31">.</op:operator><name pos:line="258" pos:column="32">Ancestors</name></name><argument_list pos:line="258" pos:column="41">(<argument><expr><name><name pos:line="258" pos:column="42">SRC</name><op:operator pos:line="258" pos:column="45">.</op:operator><name pos:line="258" pos:column="46">Unit</name></name></expr></argument>)</argument_list></call><op:operator pos:line="258" pos:column="51">.</op:operator><call><name pos:line="258" pos:column="52">First</name><argument_list pos:line="258" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="259" pos:column="13">int</name></type> <name pos:line="259" pos:column="17">fileStart</name> <init pos:line="259" pos:column="27">= <expr><call><name><name pos:line="259" pos:column="29">unit</name><op:operator pos:line="259" pos:column="33">.</op:operator><name pos:line="259" pos:column="34">GetXmlLineNumber</name></name><argument_list pos:line="259" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="261" pos:column="13">// the line number is just the difference between the xml line number and the xml line number of the unit</comment>
            <expr_stmt><expr><name pos:line="262" pos:column="13">lineNumber</name> <op:operator pos:line="262" pos:column="24">=</op:operator> <name pos:line="262" pos:column="26">xmlLineNum</name> <op:operator pos:line="262" pos:column="37">-</op:operator> <name pos:line="262" pos:column="39">fileStart</name> <op:operator pos:line="262" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="262" pos:column="51">1</lit:literal></expr>;</expr_stmt>
            <return pos:line="263" pos:column="13">return <expr><name pos:line="263" pos:column="20">lineNumber</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="266" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="267" pos:column="9">/// Gets the ending source line number.</comment>
        <comment type="line" pos:line="268" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="269" pos:column="9">/// &lt;param name="element"&gt;The element.&lt;/param&gt;</comment>
        <comment type="line" pos:line="270" pos:column="9">/// &lt;returns&gt;the last line number this element occupies&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="271" pos:column="9">public</specifier> <specifier pos:line="271" pos:column="16">static</specifier> <name pos:line="271" pos:column="23">int</name></type> <name pos:line="271" pos:column="27">GetEndingSrcLineNumber</name><parameter_list pos:line="271" pos:column="49">(<param><decl><type><name pos:line="271" pos:column="50">this</name> <name pos:line="271" pos:column="55">XElement</name></type> <name pos:line="271" pos:column="64">element</name></decl></param>)</parameter_list> <block pos:line="271" pos:column="73">{
            <if pos:line="272" pos:column="13">if<condition pos:line="272" pos:column="15">(<expr><name pos:line="272" pos:column="16">null</name> <op:operator pos:line="272" pos:column="21">==</op:operator> <name pos:line="272" pos:column="24">element</name></expr>)</condition><then pos:line="272" pos:column="32">
                <throw pos:line="273" pos:column="17">throw <expr><op:operator pos:line="273" pos:column="23">new</op:operator> <call><name pos:line="273" pos:column="27">ArgumentNullException</name><argument_list pos:line="273" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="273" pos:column="49">"element"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="275" pos:column="13">var</name></type> <name pos:line="275" pos:column="17">descendants</name> <init pos:line="275" pos:column="29">= <expr><call><name><name pos:line="275" pos:column="31">element</name><op:operator pos:line="275" pos:column="38">.</op:operator><name pos:line="275" pos:column="39">DescendantsAndSelf</name></name><argument_list pos:line="275" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <return pos:line="277" pos:column="13">return <expr><call><name><name pos:line="277" pos:column="20">descendants</name><op:operator pos:line="277" pos:column="31">.</op:operator><name pos:line="277" pos:column="32">Last</name></name><argument_list pos:line="277" pos:column="36">()</argument_list></call><op:operator pos:line="277" pos:column="38">.</op:operator><call><name pos:line="277" pos:column="39">GetSrcLineNumber</name><argument_list pos:line="277" pos:column="55">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="280" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="281" pos:column="9">/// Gets the original source column number that the given element starts on.</comment>
        <comment type="line" pos:line="282" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="283" pos:column="9">/// &lt;param name="element"&gt;The element&lt;/param&gt;</comment>
        <comment type="line" pos:line="284" pos:column="9">/// &lt;returns&gt;The column number that this element starts on. This will return 0 if the element is a Unit and -1 if no line information is present.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="285" pos:column="9">public</specifier> <specifier pos:line="285" pos:column="16">static</specifier> <name pos:line="285" pos:column="23">int</name></type> <name pos:line="285" pos:column="27">GetSrcLinePosition</name><parameter_list pos:line="285" pos:column="45">(<param><decl><type><name pos:line="285" pos:column="46">this</name> <name pos:line="285" pos:column="51">XElement</name></type> <name pos:line="285" pos:column="60">element</name></decl></param>)</parameter_list> <block pos:line="285" pos:column="69">{
            <if pos:line="286" pos:column="13">if<condition pos:line="286" pos:column="15">(<expr><name pos:line="286" pos:column="16">null</name> <op:operator pos:line="286" pos:column="21">==</op:operator> <name pos:line="286" pos:column="24">element</name></expr>)</condition><then pos:line="286" pos:column="32">
                <throw pos:line="287" pos:column="17">throw <expr><op:operator pos:line="287" pos:column="23">new</op:operator> <call><name pos:line="287" pos:column="27">ArgumentNullException</name><argument_list pos:line="287" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="287" pos:column="49">"element"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <comment type="line" pos:line="289" pos:column="13">// if element is a unit, just return 0: Source line position does not make sense for a file.</comment>
            <if pos:line="290" pos:column="13">if<condition pos:line="290" pos:column="15">(<expr><name><name pos:line="290" pos:column="16">SRC</name><op:operator pos:line="290" pos:column="19">.</op:operator><name pos:line="290" pos:column="20">Unit</name></name> <op:operator pos:line="290" pos:column="25">==</op:operator> <name><name pos:line="290" pos:column="28">element</name><op:operator pos:line="290" pos:column="35">.</op:operator><name pos:line="290" pos:column="36">Name</name></name></expr>)</condition><then pos:line="290" pos:column="41">
                <return pos:line="291" pos:column="17">return <expr><lit:literal type="number" pos:line="291" pos:column="24">0</lit:literal></expr>;</return></then></if>

            <decl_stmt><decl><type><name pos:line="293" pos:column="13">var</name></type> <name pos:line="293" pos:column="17">srcPositionAttribute</name> <init pos:line="293" pos:column="38">= <expr><call><name pos:line="293" pos:column="40">GetAttributeFromSelfOrDescendant</name><argument_list pos:line="293" pos:column="72">(<argument><expr><name pos:line="293" pos:column="73">element</name></expr></argument>, <argument><expr><name><name pos:line="293" pos:column="82">POS</name><op:operator pos:line="293" pos:column="85">.</op:operator><name pos:line="293" pos:column="86">Column</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="294" pos:column="13">int</name></type> <name pos:line="294" pos:column="17">columnNumber</name> <init pos:line="294" pos:column="30">= <expr><op:operator pos:line="294" pos:column="32">-</op:operator><lit:literal type="number" pos:line="294" pos:column="33">1</lit:literal></expr></init></decl>;</decl_stmt>

            <if pos:line="296" pos:column="13">if<condition pos:line="296" pos:column="15">(<expr><name pos:line="296" pos:column="16">null</name> <op:operator pos:line="296" pos:column="21">!=</op:operator> <name pos:line="296" pos:column="24">srcPositionAttribute</name> <op:operator pos:line="296" pos:column="45">&amp;&amp;</op:operator> <call><name><name pos:line="296" pos:column="48">Int32</name><op:operator pos:line="296" pos:column="53">.</op:operator><name pos:line="296" pos:column="54">TryParse</name></name><argument_list pos:line="296" pos:column="62">(<argument><expr><name><name pos:line="296" pos:column="63">srcPositionAttribute</name><op:operator pos:line="296" pos:column="83">.</op:operator><name pos:line="296" pos:column="84">Value</name></name></expr></argument>, <argument><expr pos:line="296" pos:column="91">out <name pos:line="296" pos:column="95">columnNumber</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="296" pos:column="109"> <block pos:line="296" pos:column="110">{
                <return pos:line="297" pos:column="17">return <expr><name pos:line="297" pos:column="24">columnNumber</name></expr>;</return>
            }</block></then></if>

            <return pos:line="300" pos:column="13">return <expr><op:operator pos:line="300" pos:column="20">-</op:operator><lit:literal type="number" pos:line="300" pos:column="21">1</lit:literal></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="303" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="304" pos:column="9">/// Adds line info to the given XObject.</comment>
        <comment type="line" pos:line="305" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="306" pos:column="9">/// &lt;param name="xmlObject"&gt;the XObject&lt;/param&gt;</comment>
        <comment type="line" pos:line="307" pos:column="9">/// &lt;param name="lineInfo"&gt;a LineInfo object. This object is added as an annotation to &lt;paramref name="xmlObject"/&gt;&lt;/param&gt;</comment>
        <function><type><specifier pos:line="308" pos:column="9">public</specifier> <specifier pos:line="308" pos:column="16">static</specifier> <name pos:line="308" pos:column="23">void</name></type> <name pos:line="308" pos:column="28">SetLineInfo</name><parameter_list pos:line="308" pos:column="39">(<param><decl><type><name pos:line="308" pos:column="40">this</name> <name pos:line="308" pos:column="45">XObject</name></type> <name pos:line="308" pos:column="53">xmlObject</name></decl></param>, <param><decl><type><name><name pos:line="308" pos:column="64">ABB</name><op:operator pos:line="308" pos:column="67">.</op:operator><name pos:line="308" pos:column="68">SrcML</name><op:operator pos:line="308" pos:column="73">.</op:operator><name pos:line="308" pos:column="74">LineInfo</name></name></type> <name pos:line="308" pos:column="83">lineInfo</name></decl></param>)</parameter_list> <block pos:line="308" pos:column="93">{
            <if pos:line="309" pos:column="13">if<condition pos:line="309" pos:column="15">(<expr><name pos:line="309" pos:column="16">null</name> <op:operator pos:line="309" pos:column="21">==</op:operator> <name pos:line="309" pos:column="24">xmlObject</name></expr>)</condition><then pos:line="309" pos:column="34">
                <throw pos:line="310" pos:column="17">throw <expr><op:operator pos:line="310" pos:column="23">new</op:operator> <call><name pos:line="310" pos:column="27">ArgumentNullException</name><argument_list pos:line="310" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="310" pos:column="49">"xmlObject"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <expr_stmt><expr><call><name><name pos:line="312" pos:column="13">xmlObject</name><op:operator pos:line="312" pos:column="22">.</op:operator><name pos:line="312" pos:column="23">AddAnnotation</name></name><argument_list pos:line="312" pos:column="36">(<argument><expr><name pos:line="312" pos:column="37">lineInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="315" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="316" pos:column="9">/// Returns the parent statement (either expr_stmt, or decl_stmt) of the given node.</comment>
        <comment type="line" pos:line="317" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="318" pos:column="9">/// &lt;param name="node"&gt;The node to search from.&lt;/param&gt;</comment>
        <comment type="line" pos:line="319" pos:column="9">/// &lt;returns&gt;the parent element for &lt;paramref name="node"/&gt;. It will be either &lt;see cref="SRC.ExpressionStatement"/&gt; or &lt;see cref="SRC.DeclarationStatement"/&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="320" pos:column="9">public</specifier> <specifier pos:line="320" pos:column="16">static</specifier> <name pos:line="320" pos:column="23">XElement</name></type> <name pos:line="320" pos:column="32">ParentStatement</name><parameter_list pos:line="320" pos:column="47">(<param><decl><type><name pos:line="320" pos:column="48">this</name> <name pos:line="320" pos:column="53">XNode</name></type> <name pos:line="320" pos:column="59">node</name></decl></param>)</parameter_list> <block pos:line="320" pos:column="65">{
            <if pos:line="321" pos:column="13">if<condition pos:line="321" pos:column="15">(<expr><name pos:line="321" pos:column="16">null</name> <op:operator pos:line="321" pos:column="21">==</op:operator> <name pos:line="321" pos:column="24">node</name></expr>)</condition><then pos:line="321" pos:column="29">
                <throw pos:line="322" pos:column="17">throw <expr><op:operator pos:line="322" pos:column="23">new</op:operator> <call><name pos:line="322" pos:column="27">ArgumentNullException</name><argument_list pos:line="322" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="322" pos:column="49">"node"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="324" pos:column="13">var</name></type> <name pos:line="324" pos:column="17">ancestors</name> <init pos:line="324" pos:column="27">= <expr><call><name><name pos:line="324" pos:column="29">node</name><op:operator pos:line="324" pos:column="33">.</op:operator><name pos:line="324" pos:column="34">Ancestors</name></name><argument_list pos:line="324" pos:column="43">()</argument_list></call><op:operator pos:line="324" pos:column="45">.</op:operator><call><name pos:line="324" pos:column="46">Where</name><argument_list pos:line="324" pos:column="51">(<argument><expr><lambda><name pos:line="324" pos:column="52">a</name> <op:operator pos:line="324" pos:column="54">=&gt;</op:operator> <call><name><name pos:line="324" pos:column="57">a</name><op:operator pos:line="324" pos:column="58">.</op:operator><name pos:line="324" pos:column="59">Name</name><op:operator pos:line="324" pos:column="63">.</op:operator><name pos:line="324" pos:column="64">LocalName</name><op:operator pos:line="324" pos:column="73">.</op:operator><name pos:line="324" pos:column="74">EndsWith</name></name><argument_list pos:line="324" pos:column="82">(<argument><expr><lit:literal type="string" pos:line="324" pos:column="83">"_stmt"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="324" pos:column="92">StringComparison</name><op:operator pos:line="324" pos:column="108">.</op:operator><name pos:line="324" pos:column="109">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if pos:line="326" pos:column="13">if<condition pos:line="326" pos:column="15">(<expr><call><name><name pos:line="326" pos:column="16">ancestors</name><op:operator pos:line="326" pos:column="25">.</op:operator><name pos:line="326" pos:column="26">Any</name></name><argument_list pos:line="326" pos:column="29">()</argument_list></call></expr>)</condition><then pos:line="326" pos:column="32">
                <return pos:line="327" pos:column="17">return <expr><call><name><name pos:line="327" pos:column="24">ancestors</name><op:operator pos:line="327" pos:column="33">.</op:operator><name pos:line="327" pos:column="34">First</name></name><argument_list pos:line="327" pos:column="39">()</argument_list></call></expr>;</return></then></if>
            <return pos:line="328" pos:column="13">return <expr><name pos:line="328" pos:column="20">null</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="331" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="332" pos:column="9">/// Converts the tree rooted at the given element to source code.</comment>
        <comment type="line" pos:line="333" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="334" pos:column="9">/// &lt;param name="element"&gt;The element.&lt;/param&gt;</comment>
        <comment type="line" pos:line="335" pos:column="9">/// &lt;returns&gt;The source code in a string&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="336" pos:column="9">public</specifier> <specifier pos:line="336" pos:column="16">static</specifier> <name pos:line="336" pos:column="23">string</name></type> <name pos:line="336" pos:column="30">ToSource</name><parameter_list pos:line="336" pos:column="38">(<param><decl><type><name pos:line="336" pos:column="39">this</name> <name pos:line="336" pos:column="44">XElement</name></type> <name pos:line="336" pos:column="53">element</name></decl></param>)</parameter_list> <block pos:line="336" pos:column="62">{
            <return pos:line="337" pos:column="13">return <expr><call><name pos:line="337" pos:column="20">ToSource</name><argument_list pos:line="337" pos:column="28">(<argument><expr><name pos:line="337" pos:column="29">element</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="337" pos:column="38">0</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="340" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="341" pos:column="9">/// Converts the tree rooted at the given element to source code.</comment>
        <comment type="line" pos:line="342" pos:column="9">/// &lt;para&gt;It optionally converts tab to spaces.&lt;/para&gt;</comment>
        <comment type="line" pos:line="343" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="344" pos:column="9">/// &lt;param name="element"&gt;The element to convert.&lt;/param&gt;</comment>
        <comment type="line" pos:line="345" pos:column="9">/// &lt;param name="spacesPerTab"&gt;The number of spaces to convert each tab to; if zero, no conversion is done.&lt;/param&gt;</comment>
        <comment type="line" pos:line="346" pos:column="9">/// &lt;returns&gt;The source code in a string.&lt;/returns&gt;</comment>
        <function><type><attribute pos:line="347" pos:column="9">[<expr><call><name><name pos:line="347" pos:column="10">System</name><op:operator pos:line="347" pos:column="16">.</op:operator><name pos:line="347" pos:column="17">Diagnostics</name><op:operator pos:line="347" pos:column="28">.</op:operator><name pos:line="347" pos:column="29">CodeAnalysis</name><op:operator pos:line="347" pos:column="41">.</op:operator><name pos:line="347" pos:column="42">SuppressMessage</name></name><argument_list pos:line="347" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="347" pos:column="58">"Microsoft.Design"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="347" pos:column="78">"CA1011:ConsiderPassingBaseTypesAsParameters"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="348" pos:column="9">public</specifier> <specifier pos:line="348" pos:column="16">static</specifier> <name pos:line="348" pos:column="23">string</name></type> <name pos:line="348" pos:column="30">ToSource</name><parameter_list pos:line="348" pos:column="38">(<param><decl><type><name pos:line="348" pos:column="39">this</name> <name pos:line="348" pos:column="44">XElement</name></type> <name pos:line="348" pos:column="53">element</name></decl></param>, <param><decl><type><name pos:line="348" pos:column="62">int</name></type> <name pos:line="348" pos:column="66">spacesPerTab</name></decl></param>)</parameter_list> <block pos:line="348" pos:column="80">{
            <if pos:line="349" pos:column="13">if<condition pos:line="349" pos:column="15">(<expr><name pos:line="349" pos:column="16">null</name> <op:operator pos:line="349" pos:column="21">==</op:operator> <name pos:line="349" pos:column="24">element</name></expr>)</condition><then pos:line="349" pos:column="32">
                <throw pos:line="350" pos:column="17">throw <expr><op:operator pos:line="350" pos:column="23">new</op:operator> <call><name pos:line="350" pos:column="27">ArgumentNullException</name><argument_list pos:line="350" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="350" pos:column="49">"element"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="352" pos:column="13">XmlReader</name></type> <name pos:line="352" pos:column="23">r</name> <init pos:line="352" pos:column="25">= <expr><call><name><name pos:line="352" pos:column="27">element</name><op:operator pos:line="352" pos:column="34">.</op:operator><name pos:line="352" pos:column="35">CreateReader</name></name><argument_list pos:line="352" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <using pos:line="354" pos:column="13">using(<decl><type><name pos:line="354" pos:column="19">StringWriter</name></type> <name pos:line="354" pos:column="32">sw</name> <init pos:line="354" pos:column="35">= <expr><op:operator pos:line="354" pos:column="37">new</op:operator> <call><name pos:line="354" pos:column="41">StringWriter</name><argument_list pos:line="354" pos:column="53">(<argument><expr><name><name pos:line="354" pos:column="54">CultureInfo</name><op:operator pos:line="354" pos:column="65">.</op:operator><name pos:line="354" pos:column="66">InvariantCulture</name></name></expr></argument>)</argument_list></call></expr></init></decl>) <block pos:line="354" pos:column="85">{
                <while pos:line="355" pos:column="17">while<condition pos:line="355" pos:column="22">(<expr><call><name><name pos:line="355" pos:column="23">r</name><op:operator pos:line="355" pos:column="24">.</op:operator><name pos:line="355" pos:column="25">Read</name></name><argument_list pos:line="355" pos:column="29">()</argument_list></call></expr>)</condition> <block pos:line="355" pos:column="33">{
                    <switch pos:line="356" pos:column="21">switch<condition pos:line="356" pos:column="27">(<expr><name><name pos:line="356" pos:column="28">r</name><op:operator pos:line="356" pos:column="29">.</op:operator><name pos:line="356" pos:column="30">NodeType</name></name></expr>)</condition> <block pos:line="356" pos:column="40">{
                        <case pos:line="357" pos:column="25">case <expr><name><name pos:line="357" pos:column="30">XmlNodeType</name><op:operator pos:line="357" pos:column="41">.</op:operator><name pos:line="357" pos:column="42">Element</name></name></expr>:
                            <break pos:line="358" pos:column="29">break;</break>
                        </case><case pos:line="359" pos:column="25">case <expr><name><name pos:line="359" pos:column="30">XmlNodeType</name><op:operator pos:line="359" pos:column="41">.</op:operator><name pos:line="359" pos:column="42">Text</name></name></expr>:
                        </case><case pos:line="360" pos:column="25">case <expr><name><name pos:line="360" pos:column="30">XmlNodeType</name><op:operator pos:line="360" pos:column="41">.</op:operator><name pos:line="360" pos:column="42">Whitespace</name></name></expr>:
                        </case><case pos:line="361" pos:column="25">case <expr><name><name pos:line="361" pos:column="30">XmlNodeType</name><op:operator pos:line="361" pos:column="41">.</op:operator><name pos:line="361" pos:column="42">SignificantWhitespace</name></name></expr>:
                            <expr_stmt><expr><call><name><name pos:line="362" pos:column="29">sw</name><op:operator pos:line="362" pos:column="31">.</op:operator><name pos:line="362" pos:column="32">Write</name></name><argument_list pos:line="362" pos:column="37">(<argument><expr><name><name pos:line="362" pos:column="38">r</name><op:operator pos:line="362" pos:column="39">.</op:operator><name pos:line="362" pos:column="40">Value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <break pos:line="363" pos:column="29">break;</break>
                        </case><default pos:line="364" pos:column="25">default:
                            <break pos:line="365" pos:column="29">break;</break>
                    </default>}</block></switch>
                }</block></while>
                <decl_stmt><decl><type><name pos:line="368" pos:column="17">var</name></type> <name pos:line="368" pos:column="21">source</name> <init pos:line="368" pos:column="28">= <expr><call><name><name pos:line="368" pos:column="30">sw</name><op:operator pos:line="368" pos:column="32">.</op:operator><name pos:line="368" pos:column="33">ToString</name></name><argument_list pos:line="368" pos:column="41">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="369" pos:column="17">if<condition pos:line="369" pos:column="19">(<expr><name pos:line="369" pos:column="20">spacesPerTab</name> <op:operator pos:line="369" pos:column="33">&gt;</op:operator> <lit:literal type="number" pos:line="369" pos:column="35">0</lit:literal></expr>)</condition><then pos:line="369" pos:column="37"> <block pos:line="369" pos:column="38">{
                    <using pos:line="370" pos:column="21">using(<decl><type><name pos:line="370" pos:column="27">StringWriter</name></type> <name pos:line="370" pos:column="40">spaces</name> <init pos:line="370" pos:column="47">= <expr><op:operator pos:line="370" pos:column="49">new</op:operator> <call><name pos:line="370" pos:column="53">StringWriter</name><argument_list pos:line="370" pos:column="65">(<argument><expr><name><name pos:line="370" pos:column="66">CultureInfo</name><op:operator pos:line="370" pos:column="77">.</op:operator><name pos:line="370" pos:column="78">InvariantCulture</name></name></expr></argument>)</argument_list></call></expr></init></decl>) <block pos:line="370" pos:column="97">{
                        <for pos:line="371" pos:column="25">for(<init><decl><type><name pos:line="371" pos:column="29">int</name></type> <name pos:line="371" pos:column="33">i</name> <init pos:line="371" pos:column="35">= <expr><lit:literal type="number" pos:line="371" pos:column="37">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="371" pos:column="40">i</name> <op:operator pos:line="371" pos:column="42">&lt;</op:operator> <name pos:line="371" pos:column="44">spacesPerTab</name></expr>;</condition> <incr><expr><name pos:line="371" pos:column="58">i</name><op:operator pos:line="371" pos:column="59">++</op:operator></expr></incr>)
                            <expr_stmt><expr><call><name><name pos:line="372" pos:column="29">spaces</name><op:operator pos:line="372" pos:column="35">.</op:operator><name pos:line="372" pos:column="36">Write</name></name><argument_list pos:line="372" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="372" pos:column="42">" "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
                        <expr_stmt><expr><name pos:line="373" pos:column="25">source</name> <op:operator pos:line="373" pos:column="32">=</op:operator> <call><name><name pos:line="373" pos:column="34">source</name><op:operator pos:line="373" pos:column="40">.</op:operator><name pos:line="373" pos:column="41">Replace</name></name><argument_list pos:line="373" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="373" pos:column="49">"\t"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="373" pos:column="55">spaces</name><op:operator pos:line="373" pos:column="61">.</op:operator><name pos:line="373" pos:column="62">ToString</name></name><argument_list pos:line="373" pos:column="70">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></using>
                }</block></then></if>
                <return pos:line="376" pos:column="17">return <expr><call><name><name pos:line="376" pos:column="24">source</name><op:operator pos:line="376" pos:column="30">.</op:operator><name pos:line="376" pos:column="31">Replace</name></name><argument_list pos:line="376" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="376" pos:column="39">"\n"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="376" pos:column="45">Environment</name><op:operator pos:line="376" pos:column="56">.</op:operator><name pos:line="376" pos:column="57">NewLine</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></using>
        }</block></function>

        <function><type><specifier pos:line="380" pos:column="9">private</specifier> <specifier pos:line="380" pos:column="17">static</specifier> <name pos:line="380" pos:column="24">LineInfo</name></type> <name pos:line="380" pos:column="33">GetLineInfo</name><parameter_list pos:line="380" pos:column="44">(<param><decl><type><name pos:line="380" pos:column="45">XElement</name></type> <name pos:line="380" pos:column="54">element</name></decl></param>)</parameter_list> <block pos:line="380" pos:column="63">{
            <decl_stmt><decl><type><name pos:line="381" pos:column="13">IXmlLineInfo</name></type> <name pos:line="381" pos:column="26">ie</name> <init pos:line="381" pos:column="29">= <expr><op:operator pos:line="381" pos:column="31">(</op:operator><name pos:line="381" pos:column="32">IXmlLineInfo</name><op:operator pos:line="381" pos:column="44">)</op:operator> <name pos:line="381" pos:column="46">element</name></expr></init></decl>;</decl_stmt>

            <if pos:line="383" pos:column="13">if<condition pos:line="383" pos:column="15">(<expr><call><name><name pos:line="383" pos:column="16">ie</name><op:operator pos:line="383" pos:column="18">.</op:operator><name pos:line="383" pos:column="19">HasLineInfo</name></name><argument_list pos:line="383" pos:column="30">()</argument_list></call></expr>)</condition><then pos:line="383" pos:column="33">
                <return pos:line="384" pos:column="17">return <expr><op:operator pos:line="384" pos:column="24">new</op:operator> <call><name pos:line="384" pos:column="28">LineInfo</name><argument_list pos:line="384" pos:column="36">(<argument><expr><name><name pos:line="384" pos:column="37">ie</name><op:operator pos:line="384" pos:column="39">.</op:operator><name pos:line="384" pos:column="40">LineNumber</name></name></expr></argument>, <argument><expr><name><name pos:line="384" pos:column="52">ie</name><op:operator pos:line="384" pos:column="54">.</op:operator><name pos:line="384" pos:column="55">LinePosition</name></name></expr></argument>)</argument_list></call></expr>;</return></then>
            <else pos:line="385" pos:column="13">else
                <return pos:line="386" pos:column="17">return <expr><call><name><name pos:line="386" pos:column="24">element</name><op:operator pos:line="386" pos:column="31">.</op:operator><name><name pos:line="386" pos:column="32">Annotation</name><argument_list pos:line="386" pos:column="42">&lt;<argument><name><name pos:line="386" pos:column="43">ABB</name><op:operator pos:line="386" pos:column="46">.</op:operator><name pos:line="386" pos:column="47">SrcML</name><op:operator pos:line="386" pos:column="52">.</op:operator><name pos:line="386" pos:column="53">LineInfo</name></name></argument>&gt;</argument_list></name></name><argument_list pos:line="386" pos:column="62">()</argument_list></call></expr>;</return></else></if>
        }</block></function>

        <comment type="line" pos:line="389" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="390" pos:column="9">/// &lt;exception cref="SrcMLRequiredNameException"&gt;Throws a SrcMLRequiredNameException if &lt;paramref name="name"/&gt; does not match &lt;paramref name="requiredName"/&gt;.&lt;/exception&gt;</comment>
        <comment type="line" pos:line="391" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="392" pos:column="9">/// &lt;param name="name"&gt;The name.&lt;/param&gt;</comment>
        <comment type="line" pos:line="393" pos:column="9">/// &lt;param name="requiredName"&gt;Name of the required.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="394" pos:column="9">public</specifier> <specifier pos:line="394" pos:column="16">static</specifier> <name pos:line="394" pos:column="23">void</name></type> <name pos:line="394" pos:column="28">ThrowExceptionOnInvalidName</name><parameter_list pos:line="394" pos:column="55">(<param><decl><type><name pos:line="394" pos:column="56">XName</name></type> <name pos:line="394" pos:column="62">name</name></decl></param>, <param><decl><type><name pos:line="394" pos:column="68">XName</name></type> <name pos:line="394" pos:column="74">requiredName</name></decl></param>)</parameter_list> <block pos:line="394" pos:column="88">{
            <if pos:line="395" pos:column="13">if<condition pos:line="395" pos:column="15">(<expr><name pos:line="395" pos:column="16">name</name> <op:operator pos:line="395" pos:column="21">!=</op:operator> <name pos:line="395" pos:column="24">requiredName</name></expr>)</condition><then pos:line="395" pos:column="37">
                <throw pos:line="396" pos:column="17">throw <expr><op:operator pos:line="396" pos:column="23">new</op:operator> <call><name pos:line="396" pos:column="27">SrcMLRequiredNameException</name><argument_list pos:line="396" pos:column="53">(<argument><expr><name pos:line="396" pos:column="54">requiredName</name></expr></argument>)</argument_list></call></expr>;</throw></then></if>
        }</block></function>

        <comment type="line" pos:line="399" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="400" pos:column="9">/// &lt;exception cref="SrcMLRequiredNameException"&gt;Throws a SrcMLRequiredNameException if &lt;paramref name="name"/&gt; is not in the list of &lt;paramref name="validNames"&gt;valid names&lt;/paramref&gt;.&lt;/exception&gt;</comment>
        <comment type="line" pos:line="401" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="402" pos:column="9">/// &lt;param name="name"&gt;The name.&lt;/param&gt;</comment>
        <comment type="line" pos:line="403" pos:column="9">/// &lt;param name="validNames"&gt;The valid names.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="404" pos:column="9">public</specifier> <specifier pos:line="404" pos:column="16">static</specifier> <name pos:line="404" pos:column="23">void</name></type> <name pos:line="404" pos:column="28">ThrowExceptionOnInvalidName</name><parameter_list pos:line="404" pos:column="55">(<param><decl><type><name pos:line="404" pos:column="56">XName</name></type> <name pos:line="404" pos:column="62">name</name></decl></param>, <param><decl><type><name><name pos:line="404" pos:column="68">IEnumerable</name><argument_list pos:line="404" pos:column="79">&lt;<argument><name pos:line="404" pos:column="80">XName</name></argument>&gt;</argument_list></name></type> <name pos:line="404" pos:column="87">validNames</name></decl></param>)</parameter_list> <block pos:line="404" pos:column="99">{
            <if pos:line="405" pos:column="13">if<condition pos:line="405" pos:column="15">(<expr><call><name><name pos:line="405" pos:column="16">validNames</name><op:operator pos:line="405" pos:column="26">.</op:operator><name pos:line="405" pos:column="27">All</name></name><argument_list pos:line="405" pos:column="30">(<argument><expr><lambda><name pos:line="405" pos:column="31">validName</name> <op:operator pos:line="405" pos:column="41">=&gt;</op:operator> <name pos:line="405" pos:column="44">validName</name> <op:operator pos:line="405" pos:column="54">!=</op:operator> <name pos:line="405" pos:column="57">name</name></lambda></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="405" pos:column="63">
                <throw pos:line="406" pos:column="17">throw <expr><op:operator pos:line="406" pos:column="23">new</op:operator> <call><name pos:line="406" pos:column="27">SrcMLRequiredNameException</name><argument_list pos:line="406" pos:column="53">(<argument><expr><call><name><name pos:line="406" pos:column="54">validNames</name><op:operator pos:line="406" pos:column="64">.</op:operator><name pos:line="406" pos:column="65">ToList</name></name><argument_list pos:line="406" pos:column="71">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
        }</block></function>

        <comment type="line" pos:line="409" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="410" pos:column="9">/// &lt;exception cref="SrcMLRequiredNameException"&gt;Thrown if the given &lt;paramref name="element"/&gt; does not have &lt;paramref name="requiredName"/&gt; as it's Name.&lt;/exception&gt;</comment>
        <comment type="line" pos:line="411" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="412" pos:column="9">/// &lt;param name="element"&gt;The element to check the name for&lt;/param&gt;</comment>
        <comment type="line" pos:line="413" pos:column="9">/// &lt;param name="requiredName"&gt;The name required&lt;/param&gt;</comment>
        <function><type><specifier pos:line="414" pos:column="9">public</specifier> <specifier pos:line="414" pos:column="16">static</specifier> <name pos:line="414" pos:column="23">void</name></type> <name pos:line="414" pos:column="28">ThrowExceptionOnInvalidName</name><parameter_list pos:line="414" pos:column="55">(<param><decl><type><name pos:line="414" pos:column="56">XElement</name></type> <name pos:line="414" pos:column="65">element</name></decl></param>, <param><decl><type><name pos:line="414" pos:column="74">XName</name></type> <name pos:line="414" pos:column="80">requiredName</name></decl></param>)</parameter_list> <block pos:line="414" pos:column="94">{
            <if pos:line="415" pos:column="13">if<condition pos:line="415" pos:column="15">(<expr><name pos:line="415" pos:column="16">null</name> <op:operator pos:line="415" pos:column="21">==</op:operator> <name pos:line="415" pos:column="24">element</name></expr>)</condition><then pos:line="415" pos:column="32">
                <throw pos:line="416" pos:column="17">throw <expr><op:operator pos:line="416" pos:column="23">new</op:operator> <call><name pos:line="416" pos:column="27">ArgumentNullException</name><argument_list pos:line="416" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="416" pos:column="49">"element"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <expr_stmt><expr><call><name pos:line="418" pos:column="13">ThrowExceptionOnInvalidName</name><argument_list pos:line="418" pos:column="40">(<argument><expr><name><name pos:line="418" pos:column="41">element</name><op:operator pos:line="418" pos:column="48">.</op:operator><name pos:line="418" pos:column="49">Name</name></name></expr></argument>, <argument><expr><name pos:line="418" pos:column="55">requiredName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="421" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="422" pos:column="9">/// &lt;exception cref="SrcMLRequiredNameException"&gt;Thrown if the given &lt;paramref name="element"/&gt; does not have a Name from the list of &lt;paramref name="validNames"/&gt;&lt;/exception&gt;</comment>
        <comment type="line" pos:line="423" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="424" pos:column="9">/// &lt;param name="element"&gt;The element to check the name for&lt;/param&gt;</comment>
        <comment type="line" pos:line="425" pos:column="9">/// &lt;param name="validNames"&gt;The collection of valid names&lt;/param&gt;</comment>
        <function><type><specifier pos:line="426" pos:column="9">public</specifier> <specifier pos:line="426" pos:column="16">static</specifier> <name pos:line="426" pos:column="23">void</name></type> <name pos:line="426" pos:column="28">ThrowExceptionOnInvalidName</name><parameter_list pos:line="426" pos:column="55">(<param><decl><type><name pos:line="426" pos:column="56">XElement</name></type> <name pos:line="426" pos:column="65">element</name></decl></param>, <param><decl><type><name><name pos:line="426" pos:column="74">IEnumerable</name><argument_list pos:line="426" pos:column="85">&lt;<argument><name pos:line="426" pos:column="86">XName</name></argument>&gt;</argument_list></name></type> <name pos:line="426" pos:column="93">validNames</name></decl></param>)</parameter_list> <block pos:line="426" pos:column="105">{
            <if pos:line="427" pos:column="13">if<condition pos:line="427" pos:column="15">(<expr><name pos:line="427" pos:column="16">null</name> <op:operator pos:line="427" pos:column="21">==</op:operator> <name pos:line="427" pos:column="24">element</name></expr>)</condition><then pos:line="427" pos:column="32">
                <throw pos:line="428" pos:column="17">throw <expr><op:operator pos:line="428" pos:column="23">new</op:operator> <call><name pos:line="428" pos:column="27">ArgumentNullException</name><argument_list pos:line="428" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="428" pos:column="49">"element"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <expr_stmt><expr><call><name pos:line="430" pos:column="13">ThrowExceptionOnInvalidName</name><argument_list pos:line="430" pos:column="40">(<argument><expr><name><name pos:line="430" pos:column="41">element</name><op:operator pos:line="430" pos:column="48">.</op:operator><name pos:line="430" pos:column="49">Name</name></name></expr></argument>, <argument><expr><name pos:line="430" pos:column="55">validNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <comment type="line" pos:line="432" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="433" pos:column="9">/// &lt;para&gt;Gets the function name for the given method.&lt;/para&gt;</comment>
        <comment type="line" pos:line="434" pos:column="9">/// &lt;para&gt;If the function is an implementation of a class method, it has two parts: the class name and the method name. This function returns just the method name if both are present&lt;/para&gt;</comment>
        <comment type="line" pos:line="435" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="436" pos:column="9">/// &lt;param name="method"&gt;The method to get the name for&lt;/param&gt;</comment>
        <comment type="line" pos:line="437" pos:column="9">/// &lt;returns&gt;The name of the method&lt;/returns&gt;</comment>
        <function><type><attribute pos:line="438" pos:column="9">[<expr><call><name><name pos:line="438" pos:column="10">System</name><op:operator pos:line="438" pos:column="16">.</op:operator><name pos:line="438" pos:column="17">Diagnostics</name><op:operator pos:line="438" pos:column="28">.</op:operator><name pos:line="438" pos:column="29">CodeAnalysis</name><op:operator pos:line="438" pos:column="41">.</op:operator><name pos:line="438" pos:column="42">SuppressMessage</name></name><argument_list pos:line="438" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="438" pos:column="58">"Microsoft.Design"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="438" pos:column="78">"CA1011:ConsiderPassingBaseTypesAsParameters"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="439" pos:column="9">public</specifier> <specifier pos:line="439" pos:column="16">static</specifier> <name pos:line="439" pos:column="23">XElement</name></type> <name pos:line="439" pos:column="32">GetNameForMethod</name><parameter_list pos:line="439" pos:column="48">(<param><decl><type><name pos:line="439" pos:column="49">XElement</name></type> <name pos:line="439" pos:column="58">method</name></decl></param>)</parameter_list> <block pos:line="439" pos:column="66">{
            <if pos:line="440" pos:column="13">if<condition pos:line="440" pos:column="15">(<expr><name pos:line="440" pos:column="16">null</name> <op:operator pos:line="440" pos:column="21">==</op:operator> <name pos:line="440" pos:column="24">method</name></expr>)</condition><then pos:line="440" pos:column="31">
                <throw pos:line="441" pos:column="17">throw <expr><op:operator pos:line="441" pos:column="23">new</op:operator> <call><name pos:line="441" pos:column="27">ArgumentNullException</name><argument_list pos:line="441" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="441" pos:column="49">"method"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <expr_stmt><expr><call><name pos:line="443" pos:column="13">ThrowExceptionOnInvalidName</name><argument_list pos:line="443" pos:column="40">(<argument><expr><name pos:line="443" pos:column="41">method</name></expr></argument>, <argument><expr><op:operator pos:line="443" pos:column="49">new</op:operator> <call><name><name pos:line="443" pos:column="53">List</name><argument_list pos:line="443" pos:column="57">&lt;<argument><name pos:line="443" pos:column="58">XName</name></argument>&gt;</argument_list></name><argument_list pos:line="443" pos:column="64">()</argument_list></call> <block pos:line="443" pos:column="67">{ <expr><name><name pos:line="443" pos:column="69">SRC</name><op:operator pos:line="443" pos:column="72">.</op:operator><name pos:line="443" pos:column="73">Constructor</name></name></expr><op:operator pos:line="443" pos:column="84">,</op:operator> <expr><name><name pos:line="443" pos:column="86">SRC</name><op:operator pos:line="443" pos:column="89">.</op:operator><name pos:line="443" pos:column="90">Destructor</name></name></expr><op:operator pos:line="443" pos:column="100">,</op:operator> <expr><name><name pos:line="443" pos:column="102">SRC</name><op:operator pos:line="443" pos:column="105">.</op:operator><name pos:line="443" pos:column="106">Function</name></name></expr><op:operator pos:line="443" pos:column="114">,</op:operator>
                                                                    <expr><name><name pos:line="444" pos:column="69">SRC</name><op:operator pos:line="444" pos:column="72">.</op:operator><name pos:line="444" pos:column="73">ConstructorDeclaration</name></name></expr><op:operator pos:line="444" pos:column="95">,</op:operator> <expr><name><name pos:line="444" pos:column="97">SRC</name><op:operator pos:line="444" pos:column="100">.</op:operator><name pos:line="444" pos:column="101">DestructorDeclaration</name></name></expr><op:operator pos:line="444" pos:column="122">,</op:operator> <expr><name><name pos:line="444" pos:column="124">SRC</name><op:operator pos:line="444" pos:column="127">.</op:operator><name pos:line="444" pos:column="128">FunctionDeclaration</name></name></expr><op:operator pos:line="444" pos:column="147">,</op:operator>
                                                                    <expr><name><name pos:line="445" pos:column="69">SRC</name><op:operator pos:line="445" pos:column="72">.</op:operator><name pos:line="445" pos:column="73">Call</name></name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="447" pos:column="13">var</name></type> <name pos:line="447" pos:column="17">name</name> <init pos:line="447" pos:column="22">= <expr><call><name><name pos:line="447" pos:column="24">method</name><op:operator pos:line="447" pos:column="30">.</op:operator><name pos:line="447" pos:column="31">Element</name></name><argument_list pos:line="447" pos:column="38">(<argument><expr><name><name pos:line="447" pos:column="39">SRC</name><op:operator pos:line="447" pos:column="42">.</op:operator><name pos:line="447" pos:column="43">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if pos:line="449" pos:column="13">if<condition pos:line="449" pos:column="15">(<expr><name pos:line="449" pos:column="16">null</name> <op:operator pos:line="449" pos:column="21">==</op:operator> <name pos:line="449" pos:column="24">name</name></expr>)</condition><then pos:line="449" pos:column="29"> <block pos:line="449" pos:column="30">{
                <return pos:line="450" pos:column="17">return <expr><name pos:line="450" pos:column="24">null</name></expr>;</return>
            }</block></then></if>
            <if pos:line="452" pos:column="13">if<condition pos:line="452" pos:column="15">(<expr><call><name><name pos:line="452" pos:column="16">name</name><op:operator pos:line="452" pos:column="20">.</op:operator><name pos:line="452" pos:column="21">Elements</name></name><argument_list pos:line="452" pos:column="29">(<argument><expr><name><name pos:line="452" pos:column="30">SRC</name><op:operator pos:line="452" pos:column="33">.</op:operator><name pos:line="452" pos:column="34">Name</name></name></expr></argument>)</argument_list></call><op:operator pos:line="452" pos:column="39">.</op:operator><call><name pos:line="452" pos:column="40">Any</name><argument_list pos:line="452" pos:column="43">()</argument_list></call></expr>)</condition><then pos:line="452" pos:column="46">
                <return pos:line="453" pos:column="17">return <expr><call><name><name pos:line="453" pos:column="24">name</name><op:operator pos:line="453" pos:column="28">.</op:operator><name pos:line="453" pos:column="29">Elements</name></name><argument_list pos:line="453" pos:column="37">(<argument><expr><name><name pos:line="453" pos:column="38">SRC</name><op:operator pos:line="453" pos:column="41">.</op:operator><name pos:line="453" pos:column="42">Name</name></name></expr></argument>)</argument_list></call><op:operator pos:line="453" pos:column="47">.</op:operator><call><name pos:line="453" pos:column="48">Last</name><argument_list pos:line="453" pos:column="52">()</argument_list></call></expr>;</return></then>
            <else pos:line="454" pos:column="13">else
                <return pos:line="455" pos:column="17">return <expr><name pos:line="455" pos:column="24">name</name></expr>;</return></else></if>
        }</block></function>

        <comment type="line" pos:line="458" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="459" pos:column="9">/// Gets the class name for method.</comment>
        <comment type="line" pos:line="460" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="461" pos:column="9">/// &lt;param name="method"&gt;The method.&lt;/param&gt;</comment>
        <comment type="line" pos:line="462" pos:column="9">/// &lt;returns&gt;the class name if found. Otherwise, null&lt;/returns&gt;</comment>
        <function><type><attribute pos:line="463" pos:column="9">[<expr><call><name><name pos:line="463" pos:column="10">System</name><op:operator pos:line="463" pos:column="16">.</op:operator><name pos:line="463" pos:column="17">Diagnostics</name><op:operator pos:line="463" pos:column="28">.</op:operator><name pos:line="463" pos:column="29">CodeAnalysis</name><op:operator pos:line="463" pos:column="41">.</op:operator><name pos:line="463" pos:column="42">SuppressMessage</name></name><argument_list pos:line="463" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="463" pos:column="58">"Microsoft.Design"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="463" pos:column="78">"CA1011:ConsiderPassingBaseTypesAsParameters"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="464" pos:column="9">public</specifier> <specifier pos:line="464" pos:column="16">static</specifier> <name pos:line="464" pos:column="23">XElement</name></type> <name pos:line="464" pos:column="32">GetClassNameForMethod</name><parameter_list pos:line="464" pos:column="53">(<param><decl><type><name pos:line="464" pos:column="54">XElement</name></type> <name pos:line="464" pos:column="63">method</name></decl></param>)</parameter_list> <block pos:line="464" pos:column="71">{
            <if pos:line="465" pos:column="13">if<condition pos:line="465" pos:column="15">(<expr><name pos:line="465" pos:column="16">null</name> <op:operator pos:line="465" pos:column="21">==</op:operator> <name pos:line="465" pos:column="24">method</name></expr>)</condition><then pos:line="465" pos:column="31">
                <throw pos:line="466" pos:column="17">throw <expr><op:operator pos:line="466" pos:column="23">new</op:operator> <call><name pos:line="466" pos:column="27">ArgumentNullException</name><argument_list pos:line="466" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="466" pos:column="49">"method"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <expr_stmt><expr><call><name pos:line="468" pos:column="13">ThrowExceptionOnInvalidName</name><argument_list pos:line="468" pos:column="40">(<argument><expr><name pos:line="468" pos:column="41">method</name></expr></argument>, <argument><expr><op:operator pos:line="468" pos:column="49">new</op:operator> <call><name><name pos:line="468" pos:column="53">List</name><argument_list pos:line="468" pos:column="57">&lt;<argument><name pos:line="468" pos:column="58">XName</name></argument>&gt;</argument_list></name><argument_list pos:line="468" pos:column="64">()</argument_list></call> <block pos:line="468" pos:column="67">{ <expr><name><name pos:line="468" pos:column="69">SRC</name><op:operator pos:line="468" pos:column="72">.</op:operator><name pos:line="468" pos:column="73">Constructor</name></name></expr><op:operator pos:line="468" pos:column="84">,</op:operator> <expr><name><name pos:line="468" pos:column="86">SRC</name><op:operator pos:line="468" pos:column="89">.</op:operator><name pos:line="468" pos:column="90">Destructor</name></name></expr><op:operator pos:line="468" pos:column="100">,</op:operator> <expr><name><name pos:line="468" pos:column="102">SRC</name><op:operator pos:line="468" pos:column="105">.</op:operator><name pos:line="468" pos:column="106">Function</name></name></expr><op:operator pos:line="468" pos:column="114">,</op:operator>
                                                                    <expr><name><name pos:line="469" pos:column="69">SRC</name><op:operator pos:line="469" pos:column="72">.</op:operator><name pos:line="469" pos:column="73">ConstructorDeclaration</name></name></expr><op:operator pos:line="469" pos:column="95">,</op:operator> <expr><name><name pos:line="469" pos:column="97">SRC</name><op:operator pos:line="469" pos:column="100">.</op:operator><name pos:line="469" pos:column="101">DestructorDeclaration</name></name></expr><op:operator pos:line="469" pos:column="122">,</op:operator> <expr><name><name pos:line="469" pos:column="124">SRC</name><op:operator pos:line="469" pos:column="127">.</op:operator><name pos:line="469" pos:column="128">FunctionDeclaration</name></name></expr><op:operator pos:line="469" pos:column="147">,</op:operator>
                                                                    <expr><name><name pos:line="470" pos:column="69">SRC</name><op:operator pos:line="470" pos:column="72">.</op:operator><name pos:line="470" pos:column="73">Call</name></name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="472" pos:column="13">var</name></type> <name pos:line="472" pos:column="17">name</name> <init pos:line="472" pos:column="22">= <expr><call><name><name pos:line="472" pos:column="24">method</name><op:operator pos:line="472" pos:column="30">.</op:operator><name pos:line="472" pos:column="31">Element</name></name><argument_list pos:line="472" pos:column="38">(<argument><expr><name><name pos:line="472" pos:column="39">SRC</name><op:operator pos:line="472" pos:column="42">.</op:operator><name pos:line="472" pos:column="43">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="473" pos:column="13">if<condition pos:line="473" pos:column="15">(<expr><name pos:line="473" pos:column="16">null</name> <op:operator pos:line="473" pos:column="21">==</op:operator> <name pos:line="473" pos:column="24">name</name></expr>)</condition><then pos:line="473" pos:column="29"> <block pos:line="473" pos:column="30">{
                <return pos:line="474" pos:column="17">return <expr><name pos:line="474" pos:column="24">null</name></expr>;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="477" pos:column="13">var</name></type> <name pos:line="477" pos:column="17">nameCount</name> <init pos:line="477" pos:column="27">= <expr><call><name><name pos:line="477" pos:column="29">name</name><op:operator pos:line="477" pos:column="33">.</op:operator><name pos:line="477" pos:column="34">Elements</name></name><argument_list pos:line="477" pos:column="42">(<argument><expr><name><name pos:line="477" pos:column="43">SRC</name><op:operator pos:line="477" pos:column="46">.</op:operator><name pos:line="477" pos:column="47">Name</name></name></expr></argument>)</argument_list></call><op:operator pos:line="477" pos:column="52">.</op:operator><call><name pos:line="477" pos:column="53">Count</name><argument_list pos:line="477" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if pos:line="479" pos:column="13">if<condition pos:line="479" pos:column="15">(<expr><name pos:line="479" pos:column="16">nameCount</name> <op:operator pos:line="479" pos:column="26">&gt;</op:operator> <lit:literal type="number" pos:line="479" pos:column="28">1</lit:literal></expr>)</condition><then pos:line="479" pos:column="30"> <block pos:line="479" pos:column="31">{
                <decl_stmt><decl><type><name pos:line="480" pos:column="17">var</name></type> <name pos:line="480" pos:column="21">className</name> <init pos:line="480" pos:column="31">= <expr><call><name><name pos:line="480" pos:column="33">name</name><op:operator pos:line="480" pos:column="37">.</op:operator><name pos:line="480" pos:column="38">Elements</name></name><argument_list pos:line="480" pos:column="46">(<argument><expr><name><name pos:line="480" pos:column="47">SRC</name><op:operator pos:line="480" pos:column="50">.</op:operator><name pos:line="480" pos:column="51">Name</name></name></expr></argument>)</argument_list></call><op:operator pos:line="480" pos:column="56">.</op:operator><call><name pos:line="480" pos:column="57">Skip</name><argument_list pos:line="480" pos:column="61">(<argument><expr><name pos:line="480" pos:column="62">nameCount</name> <op:operator pos:line="480" pos:column="72">-</op:operator> <lit:literal type="number" pos:line="480" pos:column="74">2</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="480" pos:column="76">.</op:operator><call><name pos:line="480" pos:column="77">FirstOrDefault</name><argument_list pos:line="480" pos:column="91">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <return pos:line="481" pos:column="17">return <expr><name pos:line="481" pos:column="24">className</name></expr>;</return>
            }</block></then></if>

            <return pos:line="484" pos:column="13">return <expr><name pos:line="484" pos:column="20">null</name></expr>;</return>
        }</block></function>
        <comment type="line" pos:line="486" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="487" pos:column="9">/// &lt;para&gt;Gets all the calls contained in a function element.Function elements can either be of type &lt;c&gt;SRC.Function&lt;/c&gt; or &lt;c&gt;SRC.Constructor&lt;/c&gt;.&lt;/para&gt;</comment>
        <comment type="line" pos:line="488" pos:column="9">/// &lt;exception cref="ABB.SrcML.SrcMLRequiredNameException"&gt;thrown if &lt;c&gt;function.Name&lt;/c&gt; is not &lt;c&gt;SRC.Constructor&lt;/c&gt; or &lt;c&gt;SRC.Function&lt;/c&gt;&lt;/exception&gt;</comment>
        <comment type="line" pos:line="489" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="490" pos:column="9">/// &lt;param name="function"&gt;the function to find calls in&lt;/param&gt;</comment>
        <comment type="line" pos:line="491" pos:column="9">/// &lt;returns&gt;all method calls and constructor uses&lt;/returns&gt;</comment>
        <function><type><attribute pos:line="492" pos:column="9">[<expr><call><name><name pos:line="492" pos:column="10">System</name><op:operator pos:line="492" pos:column="16">.</op:operator><name pos:line="492" pos:column="17">Diagnostics</name><op:operator pos:line="492" pos:column="28">.</op:operator><name pos:line="492" pos:column="29">CodeAnalysis</name><op:operator pos:line="492" pos:column="41">.</op:operator><name pos:line="492" pos:column="42">SuppressMessage</name></name><argument_list pos:line="492" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="492" pos:column="58">"Microsoft.Design"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="492" pos:column="78">"CA1011:ConsiderPassingBaseTypesAsParameters"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="493" pos:column="9">public</specifier> <specifier pos:line="493" pos:column="16">static</specifier> <name><name pos:line="493" pos:column="23">IEnumerable</name><argument_list pos:line="493" pos:column="34">&lt;<argument><name pos:line="493" pos:column="35">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="493" pos:column="45">GetCallsFromFunction</name><parameter_list pos:line="493" pos:column="65">(<param><decl><type><name pos:line="493" pos:column="66">XElement</name></type> <name pos:line="493" pos:column="75">function</name></decl></param>)</parameter_list> <block pos:line="493" pos:column="85">{
            <if pos:line="494" pos:column="13">if<condition pos:line="494" pos:column="15">(<expr><name pos:line="494" pos:column="16">null</name> <op:operator pos:line="494" pos:column="21">==</op:operator> <name pos:line="494" pos:column="24">function</name></expr>)</condition><then pos:line="494" pos:column="33">
                <throw pos:line="495" pos:column="17">throw <expr><op:operator pos:line="495" pos:column="23">new</op:operator> <call><name pos:line="495" pos:column="27">ArgumentNullException</name><argument_list pos:line="495" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="495" pos:column="49">"function"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <expr_stmt><expr><call><name pos:line="497" pos:column="13">ThrowExceptionOnInvalidName</name><argument_list pos:line="497" pos:column="40">(<argument><expr><name pos:line="497" pos:column="41">function</name></expr></argument>, <argument><expr><op:operator pos:line="497" pos:column="51">new</op:operator> <call><name><name pos:line="497" pos:column="55">List</name><argument_list pos:line="497" pos:column="59">&lt;<argument><name pos:line="497" pos:column="60">XName</name></argument>&gt;</argument_list></name><argument_list pos:line="497" pos:column="66">()</argument_list></call> <block pos:line="497" pos:column="69">{ <expr><name><name pos:line="497" pos:column="71">SRC</name><op:operator pos:line="497" pos:column="74">.</op:operator><name pos:line="497" pos:column="75">Function</name></name></expr><op:operator pos:line="497" pos:column="83">,</op:operator> <expr><name><name pos:line="497" pos:column="85">SRC</name><op:operator pos:line="497" pos:column="88">.</op:operator><name pos:line="497" pos:column="89">Constructor</name></name></expr><op:operator pos:line="497" pos:column="100">,</op:operator> <expr><name><name pos:line="497" pos:column="102">SRC</name><op:operator pos:line="497" pos:column="105">.</op:operator><name pos:line="497" pos:column="106">Destructor</name></name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="499" pos:column="13">var</name></type> <name pos:line="499" pos:column="17">calls</name> <init pos:line="499" pos:column="23">= <expr><linq><from pos:line="499" pos:column="25">from <expr><name pos:line="499" pos:column="30">call</name></expr> <in pos:line="499" pos:column="35">in <expr><call><name><name pos:line="499" pos:column="38">function</name><op:operator pos:line="499" pos:column="46">.</op:operator><name pos:line="499" pos:column="47">Descendants</name></name><argument_list pos:line="499" pos:column="58">(<argument><expr><name><name pos:line="499" pos:column="59">SRC</name><op:operator pos:line="499" pos:column="62">.</op:operator><name pos:line="499" pos:column="63">Call</name></name></expr></argument>)</argument_list></call></expr></in></from>
                        <select pos:line="500" pos:column="25">select <expr><name pos:line="500" pos:column="32">call</name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="501" pos:column="13">var</name></type> <name pos:line="501" pos:column="17">constructorCalls</name> <init pos:line="501" pos:column="34">= <expr><linq><from pos:line="501" pos:column="36">from <expr><name pos:line="501" pos:column="41">decl</name></expr> <in pos:line="501" pos:column="46">in <expr><call><name><name pos:line="501" pos:column="49">function</name><op:operator pos:line="501" pos:column="57">.</op:operator><name pos:line="501" pos:column="58">Descendants</name></name><argument_list pos:line="501" pos:column="69">(<argument><expr><name><name pos:line="501" pos:column="70">SRC</name><op:operator pos:line="501" pos:column="73">.</op:operator><name pos:line="501" pos:column="74">Declaration</name></name></expr></argument>)</argument_list></call></expr></in></from>
                                   <where pos:line="502" pos:column="36">where <expr><call><name><name pos:line="502" pos:column="42">decl</name><op:operator pos:line="502" pos:column="46">.</op:operator><name pos:line="502" pos:column="47">Element</name></name><argument_list pos:line="502" pos:column="54">(<argument><expr><name><name pos:line="502" pos:column="55">SRC</name><op:operator pos:line="502" pos:column="58">.</op:operator><name pos:line="502" pos:column="59">ArgumentList</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="502" pos:column="73">!=</op:operator> <name pos:line="502" pos:column="76">null</name></expr></where>
                                   <select pos:line="503" pos:column="36">select <expr><name pos:line="503" pos:column="43">decl</name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="504" pos:column="13">var</name></type> <name pos:line="504" pos:column="17">allCalls</name> <init pos:line="504" pos:column="26">= <expr><call><name><name pos:line="504" pos:column="28">calls</name><op:operator pos:line="504" pos:column="33">.</op:operator><name pos:line="504" pos:column="34">Concat</name></name><argument_list pos:line="504" pos:column="40">(<argument><expr><name pos:line="504" pos:column="41">constructorCalls</name></expr></argument>)</argument_list></call><op:operator pos:line="504" pos:column="58">.</op:operator><call><name pos:line="504" pos:column="59">InDocumentOrder</name><argument_list pos:line="504" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <return pos:line="506" pos:column="13">return <expr><name pos:line="506" pos:column="20">allCalls</name></expr>;</return>
        }</block></function>
    }
}
</unit>
