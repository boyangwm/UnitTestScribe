<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data.Test\FileRemovalTests_CSharp.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">ABB</name><op:operator pos:line="1" pos:column="10">.</op:operator><name pos:line="1" pos:column="11">SrcML</name><op:operator pos:line="1" pos:column="16">.</op:operator><name pos:line="1" pos:column="17">Test</name><op:operator pos:line="1" pos:column="21">.</op:operator><name pos:line="1" pos:column="22">Utilities</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">NUnit</name><op:operator pos:line="2" pos:column="12">.</op:operator><name pos:line="2" pos:column="13">Framework</name></name>;</using>
<using pos:line="3" pos:column="1">using <name pos:line="3" pos:column="7">System</name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Collections</name><op:operator pos:line="4" pos:column="25">.</op:operator><name pos:line="4" pos:column="26">Generic</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Linq</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">Text</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">System</name><op:operator pos:line="7" pos:column="13">.</op:operator><name pos:line="7" pos:column="14">Threading</name><op:operator pos:line="7" pos:column="23">.</op:operator><name pos:line="7" pos:column="24">Tasks</name></name>;</using>

<namespace pos:line="9" pos:column="1">namespace <name><name pos:line="9" pos:column="11">ABB</name><op:operator pos:line="9" pos:column="14">.</op:operator><name pos:line="9" pos:column="15">SrcML</name><op:operator pos:line="9" pos:column="20">.</op:operator><name pos:line="9" pos:column="21">Data</name><op:operator pos:line="9" pos:column="25">.</op:operator><name pos:line="9" pos:column="26">Test</name></name> <block pos:line="9" pos:column="31">{
    <class><attribute pos:line="10" pos:column="5">[<expr><name pos:line="10" pos:column="6">TestFixture</name></expr><op:operator pos:line="10" pos:column="17">,</op:operator> <expr><call><name pos:line="10" pos:column="19">Category</name><argument_list pos:line="10" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="10" pos:column="28">"Build"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="11" pos:column="5">public</specifier> class <name pos:line="11" pos:column="18">FileRemovalTests_CSharp</name> <block pos:line="11" pos:column="42">{
        <decl_stmt><decl><type><specifier pos:line="12" pos:column="9">private</specifier> <name pos:line="12" pos:column="17">CSharpCodeParser</name></type> <name pos:line="12" pos:column="34">CodeParser</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="13" pos:column="9">private</specifier> <name pos:line="13" pos:column="17">SrcMLFileUnitSetup</name></type> <name pos:line="13" pos:column="36">FileUnitSetup</name></decl>;</decl_stmt>

        <function><type><attribute pos:line="15" pos:column="9">[<expr><name pos:line="15" pos:column="10">TestFixtureSetUp</name></expr><op:operator pos:line="15" pos:column="26">,</op:operator> <expr><call><name pos:line="15" pos:column="28">Category</name><argument_list pos:line="15" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="15" pos:column="37">"Build"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="16" pos:column="9">public</specifier> <name pos:line="16" pos:column="16">void</name></type> <name pos:line="16" pos:column="21">ClassSetup</name><parameter_list pos:line="16" pos:column="31">()</parameter_list> <block pos:line="16" pos:column="34">{
            <expr_stmt><expr><name pos:line="17" pos:column="13">FileUnitSetup</name> <op:operator pos:line="17" pos:column="27">=</op:operator> <op:operator pos:line="17" pos:column="29">new</op:operator> <call><name pos:line="17" pos:column="33">SrcMLFileUnitSetup</name><argument_list pos:line="17" pos:column="51">(<argument><expr><name><name pos:line="17" pos:column="52">Language</name><op:operator pos:line="17" pos:column="60">.</op:operator><name pos:line="17" pos:column="61">CPlusPlus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="18" pos:column="13">CodeParser</name> <op:operator pos:line="18" pos:column="24">=</op:operator> <op:operator pos:line="18" pos:column="26">new</op:operator> <call><name pos:line="18" pos:column="30">CSharpCodeParser</name><argument_list pos:line="18" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="21" pos:column="9">[<expr><name pos:line="21" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="22" pos:column="9">public</specifier> <name pos:line="22" pos:column="16">void</name></type> <name pos:line="22" pos:column="21">TestRemoveClass_Global</name><parameter_list pos:line="22" pos:column="43">()</parameter_list> <block pos:line="22" pos:column="46">{
            <comment type="line" pos:line="23" pos:column="13">////Foo.cs</comment>
            <comment type="line" pos:line="24" pos:column="13">//class Foo {</comment>
            <comment type="line" pos:line="25" pos:column="13">//    private int bar;</comment>
            <comment type="line" pos:line="26" pos:column="13">//    public Foo() { bar = 42; }</comment>
            <comment type="line" pos:line="27" pos:column="13">//    public int GetBar() { return bar; }</comment>
            <comment type="line" pos:line="28" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="29" pos:column="13">string</name></type> <name pos:line="29" pos:column="20">fooXml</name> <init pos:line="29" pos:column="27">= <expr><lit:literal type="string" pos:line="29" pos:column="29">@"&lt;class&gt;class &lt;name&gt;Foo&lt;/name&gt; &lt;block&gt;{
    &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;specifier&gt;private&lt;/specifier&gt; &lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;bar&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
    &lt;constructor&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;expr_stmt&gt;&lt;expr&gt;&lt;name&gt;bar&lt;/name&gt; &lt;op:operator&gt;=&lt;/op:operator&gt; &lt;lit:literal type=""number&gt;42&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt; }&lt;/block&gt;&lt;/constructor&gt;
    &lt;function&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;GetBar&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;return&gt;return &lt;expr&gt;&lt;name&gt;bar&lt;/name&gt;&lt;/expr&gt;;&lt;/return&gt; }&lt;/block&gt;&lt;/function&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="34" pos:column="13">var</name></type> <name pos:line="34" pos:column="17">fooFileUnit</name> <init pos:line="34" pos:column="29">= <expr><call><name><name pos:line="34" pos:column="31">FileUnitSetup</name><op:operator pos:line="34" pos:column="44">.</op:operator><name pos:line="34" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="34" pos:column="69">(<argument><expr><name pos:line="34" pos:column="70">fooXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="34" pos:column="78">"Foo.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="35" pos:column="13">var</name></type> <name pos:line="35" pos:column="17">beforeScope</name> <init pos:line="35" pos:column="29">= <expr><call><name><name pos:line="35" pos:column="31">CodeParser</name><op:operator pos:line="35" pos:column="41">.</op:operator><name pos:line="35" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="35" pos:column="55">(<argument><expr><name pos:line="35" pos:column="56">fooFileUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="36" pos:column="13">////Baz.cs</comment>
            <comment type="line" pos:line="37" pos:column="13">//class Baz {</comment>
            <comment type="line" pos:line="38" pos:column="13">//    public static int DoWork() { return 0; }</comment>
            <comment type="line" pos:line="39" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="40" pos:column="13">string</name></type> <name pos:line="40" pos:column="20">bazXml</name> <init pos:line="40" pos:column="27">= <expr><lit:literal type="string" pos:line="40" pos:column="29">@"&lt;class&gt;class &lt;name&gt;Baz&lt;/name&gt; &lt;block&gt;{
    &lt;function&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;specifier&gt;static&lt;/specifier&gt; &lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;DoWork&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;return&gt;return &lt;expr&gt;&lt;lit:literal type=""number&gt;0&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt; }&lt;/block&gt;&lt;/function&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="43" pos:column="13">var</name></type> <name pos:line="43" pos:column="17">bazFileUnit</name> <init pos:line="43" pos:column="29">= <expr><call><name><name pos:line="43" pos:column="31">FileUnitSetup</name><op:operator pos:line="43" pos:column="44">.</op:operator><name pos:line="43" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="43" pos:column="69">(<argument><expr><name pos:line="43" pos:column="70">bazXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="43" pos:column="78">"Baz.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="44" pos:column="13">var</name></type> <name pos:line="44" pos:column="17">afterScope</name> <init pos:line="44" pos:column="28">= <expr><call><name><name pos:line="44" pos:column="30">beforeScope</name><op:operator pos:line="44" pos:column="41">.</op:operator><name pos:line="44" pos:column="42">Merge</name></name><argument_list pos:line="44" pos:column="47">(<argument><expr><call><name><name pos:line="44" pos:column="48">CodeParser</name><op:operator pos:line="44" pos:column="58">.</op:operator><name pos:line="44" pos:column="59">ParseFileUnit</name></name><argument_list pos:line="44" pos:column="72">(<argument><expr><name pos:line="44" pos:column="73">bazFileUnit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="46" pos:column="13">Assert</name><op:operator pos:line="46" pos:column="19">.</op:operator><name pos:line="46" pos:column="20">AreEqual</name></name><argument_list pos:line="46" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="46" pos:column="29">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="46" pos:column="32">afterScope</name><op:operator pos:line="46" pos:column="42">.</op:operator><name pos:line="46" pos:column="43">ChildStatements</name><op:operator pos:line="46" pos:column="58">.</op:operator><name><name pos:line="46" pos:column="59">OfType</name><argument_list pos:line="46" pos:column="65">&lt;<argument><name pos:line="46" pos:column="66">NamespaceDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="46" pos:column="86">()</argument_list></call><op:operator pos:line="46" pos:column="88">.</op:operator><call><name pos:line="46" pos:column="89">Count</name><argument_list pos:line="46" pos:column="94">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="47" pos:column="13">Assert</name><op:operator pos:line="47" pos:column="19">.</op:operator><name pos:line="47" pos:column="20">AreEqual</name></name><argument_list pos:line="47" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="47" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="47" pos:column="32">afterScope</name><op:operator pos:line="47" pos:column="42">.</op:operator><name pos:line="47" pos:column="43">ChildStatements</name><op:operator pos:line="47" pos:column="58">.</op:operator><name><name pos:line="47" pos:column="59">OfType</name><argument_list pos:line="47" pos:column="65">&lt;<argument><name pos:line="47" pos:column="66">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="47" pos:column="81">()</argument_list></call><op:operator pos:line="47" pos:column="83">.</op:operator><call><name pos:line="47" pos:column="84">Count</name><argument_list pos:line="47" pos:column="89">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="49" pos:column="13">afterScope</name><op:operator pos:line="49" pos:column="23">.</op:operator><name pos:line="49" pos:column="24">RemoveFile</name></name><argument_list pos:line="49" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="49" pos:column="35">"Baz.cs"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="51" pos:column="13">DataAssert</name><op:operator pos:line="51" pos:column="23">.</op:operator><name pos:line="51" pos:column="24">StatementsAreEqual</name></name><argument_list pos:line="51" pos:column="42">(<argument><expr><name pos:line="51" pos:column="43">beforeScope</name></expr></argument>, <argument><expr><name pos:line="51" pos:column="56">afterScope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="54" pos:column="9">[<expr><name pos:line="54" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="55" pos:column="9">public</specifier> <name pos:line="55" pos:column="16">void</name></type> <name pos:line="55" pos:column="21">TestRemoveNamespace</name><parameter_list pos:line="55" pos:column="40">()</parameter_list> <block pos:line="55" pos:column="43">{
            <comment type="line" pos:line="56" pos:column="13">////A.cs</comment>
            <comment type="line" pos:line="57" pos:column="13">//namespace A {</comment>
            <comment type="line" pos:line="58" pos:column="13">//    class Foo { int bar; }</comment>
            <comment type="line" pos:line="59" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="60" pos:column="13">string</name></type> <name pos:line="60" pos:column="20">aXml</name> <init pos:line="60" pos:column="25">= <expr><lit:literal type="string" pos:line="60" pos:column="27">@"&lt;namespace&gt;namespace &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{
    &lt;class&gt;class &lt;name&gt;Foo&lt;/name&gt; &lt;block&gt;{ &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;bar&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt; }&lt;/block&gt;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="63" pos:column="13">var</name></type> <name pos:line="63" pos:column="17">aFileunit</name> <init pos:line="63" pos:column="27">= <expr><call><name><name pos:line="63" pos:column="29">FileUnitSetup</name><op:operator pos:line="63" pos:column="42">.</op:operator><name pos:line="63" pos:column="43">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="63" pos:column="67">(<argument><expr><name pos:line="63" pos:column="68">aXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="63" pos:column="74">"A.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="64" pos:column="13">var</name></type> <name pos:line="64" pos:column="17">beforeScope</name> <init pos:line="64" pos:column="29">= <expr><call><name><name pos:line="64" pos:column="31">CodeParser</name><op:operator pos:line="64" pos:column="41">.</op:operator><name pos:line="64" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="64" pos:column="55">(<argument><expr><name pos:line="64" pos:column="56">aFileunit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="65" pos:column="13">////B.cs</comment>
            <comment type="line" pos:line="66" pos:column="13">//namespace B {</comment>
            <comment type="line" pos:line="67" pos:column="13">//    class Baz { public ulong xyzzy; }</comment>
            <comment type="line" pos:line="68" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="69" pos:column="13">string</name></type> <name pos:line="69" pos:column="20">bXml</name> <init pos:line="69" pos:column="25">= <expr><lit:literal type="string" pos:line="69" pos:column="27">@"&lt;namespace&gt;namespace &lt;name&gt;B&lt;/name&gt; &lt;block&gt;{
    &lt;class&gt;class &lt;name&gt;Baz&lt;/name&gt; &lt;block&gt;{ &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;ulong&lt;/name&gt;&lt;/type&gt; &lt;name&gt;xyzzy&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt; }&lt;/block&gt;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="72" pos:column="13">var</name></type> <name pos:line="72" pos:column="17">bFileunit</name> <init pos:line="72" pos:column="27">= <expr><call><name><name pos:line="72" pos:column="29">FileUnitSetup</name><op:operator pos:line="72" pos:column="42">.</op:operator><name pos:line="72" pos:column="43">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="72" pos:column="67">(<argument><expr><name pos:line="72" pos:column="68">bXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="72" pos:column="74">"B.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="73" pos:column="13">var</name></type> <name pos:line="73" pos:column="17">afterScope</name> <init pos:line="73" pos:column="28">= <expr><call><name><name pos:line="73" pos:column="30">beforeScope</name><op:operator pos:line="73" pos:column="41">.</op:operator><name pos:line="73" pos:column="42">Merge</name></name><argument_list pos:line="73" pos:column="47">(<argument><expr><call><name><name pos:line="73" pos:column="48">CodeParser</name><op:operator pos:line="73" pos:column="58">.</op:operator><name pos:line="73" pos:column="59">ParseFileUnit</name></name><argument_list pos:line="73" pos:column="72">(<argument><expr><name pos:line="73" pos:column="73">bFileunit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="75" pos:column="13">Assert</name><op:operator pos:line="75" pos:column="19">.</op:operator><name pos:line="75" pos:column="20">AreEqual</name></name><argument_list pos:line="75" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="75" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="75" pos:column="32">afterScope</name><op:operator pos:line="75" pos:column="42">.</op:operator><name pos:line="75" pos:column="43">ChildStatements</name><op:operator pos:line="75" pos:column="58">.</op:operator><name><name pos:line="75" pos:column="59">OfType</name><argument_list pos:line="75" pos:column="65">&lt;<argument><name pos:line="75" pos:column="66">NamespaceDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="75" pos:column="86">()</argument_list></call><op:operator pos:line="75" pos:column="88">.</op:operator><call><name pos:line="75" pos:column="89">Count</name><argument_list pos:line="75" pos:column="94">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="77" pos:column="13">afterScope</name><op:operator pos:line="77" pos:column="23">.</op:operator><name pos:line="77" pos:column="24">RemoveFile</name></name><argument_list pos:line="77" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="77" pos:column="35">"B.cs"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="79" pos:column="13">DataAssert</name><op:operator pos:line="79" pos:column="23">.</op:operator><name pos:line="79" pos:column="24">StatementsAreEqual</name></name><argument_list pos:line="79" pos:column="42">(<argument><expr><name pos:line="79" pos:column="43">beforeScope</name></expr></argument>, <argument><expr><name pos:line="79" pos:column="56">afterScope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="82" pos:column="9">[<expr><name pos:line="82" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="83" pos:column="9">public</specifier> <name pos:line="83" pos:column="16">void</name></type> <name pos:line="83" pos:column="21">TestRemovePartialClass</name><parameter_list pos:line="83" pos:column="43">()</parameter_list> <block pos:line="83" pos:column="46">{
            <comment type="line" pos:line="84" pos:column="13">////A1.cs</comment>
            <comment type="line" pos:line="85" pos:column="13">//public partial class A {</comment>
            <comment type="line" pos:line="86" pos:column="13">//    public int Execute() {</comment>
            <comment type="line" pos:line="87" pos:column="13">//        return 0;</comment>
            <comment type="line" pos:line="88" pos:column="13">//    }</comment>
            <comment type="line" pos:line="89" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="90" pos:column="13">string</name></type> <name pos:line="90" pos:column="20">a1Xml</name> <init pos:line="90" pos:column="26">= <expr><lit:literal type="string" pos:line="90" pos:column="28">@"&lt;class&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;specifier&gt;partial&lt;/specifier&gt; class &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{
    &lt;function&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Execute&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{
        &lt;return&gt;return &lt;expr&gt;&lt;lit:literal type=""number&gt;0&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt;
    }&lt;/block&gt;&lt;/function&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="95" pos:column="13">var</name></type> <name pos:line="95" pos:column="17">a1FileUnit</name> <init pos:line="95" pos:column="28">= <expr><call><name><name pos:line="95" pos:column="30">FileUnitSetup</name><op:operator pos:line="95" pos:column="43">.</op:operator><name pos:line="95" pos:column="44">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="95" pos:column="68">(<argument><expr><name pos:line="95" pos:column="69">a1Xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="95" pos:column="76">"A1.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="96" pos:column="13">var</name></type> <name pos:line="96" pos:column="17">beforeScope</name> <init pos:line="96" pos:column="29">= <expr><call><name><name pos:line="96" pos:column="31">CodeParser</name><op:operator pos:line="96" pos:column="41">.</op:operator><name pos:line="96" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="96" pos:column="55">(<argument><expr><name pos:line="96" pos:column="56">a1FileUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="97" pos:column="13">////A2.cs</comment>
            <comment type="line" pos:line="98" pos:column="13">//public partial class A {</comment>
            <comment type="line" pos:line="99" pos:column="13">//    private bool Foo() {</comment>
            <comment type="line" pos:line="100" pos:column="13">//        return true;</comment>
            <comment type="line" pos:line="101" pos:column="13">//    }</comment>
            <comment type="line" pos:line="102" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="103" pos:column="13">string</name></type> <name pos:line="103" pos:column="20">a2Xml</name> <init pos:line="103" pos:column="26">= <expr><lit:literal type="string" pos:line="103" pos:column="28">@"&lt;class&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;specifier&gt;partial&lt;/specifier&gt; class &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{
    &lt;function&gt;&lt;type&gt;&lt;specifier&gt;private&lt;/specifier&gt; &lt;name&gt;bool&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{
        &lt;return&gt;return &lt;expr&gt;&lt;lit:literal type=""boolean&gt;true&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt;
    }&lt;/block&gt;&lt;/function&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="108" pos:column="13">var</name></type> <name pos:line="108" pos:column="17">a2FileUnit</name> <init pos:line="108" pos:column="28">= <expr><call><name><name pos:line="108" pos:column="30">FileUnitSetup</name><op:operator pos:line="108" pos:column="43">.</op:operator><name pos:line="108" pos:column="44">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="108" pos:column="68">(<argument><expr><name pos:line="108" pos:column="69">a2Xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="108" pos:column="76">"A2.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="109" pos:column="13">var</name></type> <name pos:line="109" pos:column="17">afterScope</name> <init pos:line="109" pos:column="28">= <expr><call><name><name pos:line="109" pos:column="30">beforeScope</name><op:operator pos:line="109" pos:column="41">.</op:operator><name pos:line="109" pos:column="42">Merge</name></name><argument_list pos:line="109" pos:column="47">(<argument><expr><call><name><name pos:line="109" pos:column="48">CodeParser</name><op:operator pos:line="109" pos:column="58">.</op:operator><name pos:line="109" pos:column="59">ParseFileUnit</name></name><argument_list pos:line="109" pos:column="72">(<argument><expr><name pos:line="109" pos:column="73">a2FileUnit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="111" pos:column="13">Assert</name><op:operator pos:line="111" pos:column="19">.</op:operator><name pos:line="111" pos:column="20">AreEqual</name></name><argument_list pos:line="111" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="111" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="111" pos:column="32">afterScope</name><op:operator pos:line="111" pos:column="42">.</op:operator><name pos:line="111" pos:column="43">ChildStatements</name><op:operator pos:line="111" pos:column="58">.</op:operator><name pos:line="111" pos:column="59">Count</name></name><argument_list pos:line="111" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="112" pos:column="13">var</name></type> <name pos:line="112" pos:column="17">typeA</name> <init pos:line="112" pos:column="23">= <expr><call><name><name pos:line="112" pos:column="25">afterScope</name><op:operator pos:line="112" pos:column="35">.</op:operator><name pos:line="112" pos:column="36">ChildStatements</name><op:operator pos:line="112" pos:column="51">.</op:operator><name pos:line="112" pos:column="52">First</name></name><argument_list pos:line="112" pos:column="57">()</argument_list></call> <op:operator pos:line="112" pos:column="60">as</op:operator> <name pos:line="112" pos:column="63">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="113" pos:column="13">Assert</name><op:operator pos:line="113" pos:column="19">.</op:operator><name pos:line="113" pos:column="20">IsNotNull</name></name><argument_list pos:line="113" pos:column="29">(<argument><expr><name pos:line="113" pos:column="30">typeA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="114" pos:column="13">Assert</name><op:operator pos:line="114" pos:column="19">.</op:operator><name pos:line="114" pos:column="20">AreEqual</name></name><argument_list pos:line="114" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="114" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="114" pos:column="32">typeA</name><op:operator pos:line="114" pos:column="37">.</op:operator><name pos:line="114" pos:column="38">ChildStatements</name><op:operator pos:line="114" pos:column="53">.</op:operator><name><name pos:line="114" pos:column="54">OfType</name><argument_list pos:line="114" pos:column="60">&lt;<argument><name pos:line="114" pos:column="61">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="114" pos:column="78">()</argument_list></call><op:operator pos:line="114" pos:column="80">.</op:operator><call><name pos:line="114" pos:column="81">Count</name><argument_list pos:line="114" pos:column="86">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="115" pos:column="13">Assert</name><op:operator pos:line="115" pos:column="19">.</op:operator><name pos:line="115" pos:column="20">IsTrue</name></name><argument_list pos:line="115" pos:column="26">(<argument><expr><call><name><name pos:line="115" pos:column="27">typeA</name><op:operator pos:line="115" pos:column="32">.</op:operator><name pos:line="115" pos:column="33">ChildStatements</name><op:operator pos:line="115" pos:column="48">.</op:operator><name><name pos:line="115" pos:column="49">OfType</name><argument_list pos:line="115" pos:column="55">&lt;<argument><name pos:line="115" pos:column="56">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="115" pos:column="73">()</argument_list></call><op:operator pos:line="115" pos:column="75">.</op:operator><call><name pos:line="115" pos:column="76">Any</name><argument_list pos:line="115" pos:column="79">(<argument><expr><lambda><name pos:line="115" pos:column="80">m</name> <op:operator pos:line="115" pos:column="82">=&gt;</op:operator> <name><name pos:line="115" pos:column="85">m</name><op:operator pos:line="115" pos:column="86">.</op:operator><name pos:line="115" pos:column="87">Name</name></name> <op:operator pos:line="115" pos:column="92">==</op:operator> <lit:literal type="string" pos:line="115" pos:column="95">"Execute"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="116" pos:column="13">Assert</name><op:operator pos:line="116" pos:column="19">.</op:operator><name pos:line="116" pos:column="20">IsTrue</name></name><argument_list pos:line="116" pos:column="26">(<argument><expr><call><name><name pos:line="116" pos:column="27">typeA</name><op:operator pos:line="116" pos:column="32">.</op:operator><name pos:line="116" pos:column="33">ChildStatements</name><op:operator pos:line="116" pos:column="48">.</op:operator><name><name pos:line="116" pos:column="49">OfType</name><argument_list pos:line="116" pos:column="55">&lt;<argument><name pos:line="116" pos:column="56">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="116" pos:column="73">()</argument_list></call><op:operator pos:line="116" pos:column="75">.</op:operator><call><name pos:line="116" pos:column="76">Any</name><argument_list pos:line="116" pos:column="79">(<argument><expr><lambda><name pos:line="116" pos:column="80">m</name> <op:operator pos:line="116" pos:column="82">=&gt;</op:operator> <name><name pos:line="116" pos:column="85">m</name><op:operator pos:line="116" pos:column="86">.</op:operator><name pos:line="116" pos:column="87">Name</name></name> <op:operator pos:line="116" pos:column="92">==</op:operator> <lit:literal type="string" pos:line="116" pos:column="95">"Foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="118" pos:column="13">afterScope</name><op:operator pos:line="118" pos:column="23">.</op:operator><name pos:line="118" pos:column="24">RemoveFile</name></name><argument_list pos:line="118" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="118" pos:column="35">"A2.cs"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="120" pos:column="13">DataAssert</name><op:operator pos:line="120" pos:column="23">.</op:operator><name pos:line="120" pos:column="24">StatementsAreEqual</name></name><argument_list pos:line="120" pos:column="42">(<argument><expr><name pos:line="120" pos:column="43">beforeScope</name></expr></argument>, <argument><expr><name pos:line="120" pos:column="56">afterScope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="123" pos:column="9">[<expr><name pos:line="123" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="124" pos:column="9">public</specifier> <name pos:line="124" pos:column="16">void</name></type> <name pos:line="124" pos:column="21">TestRemovePartialMethod_Declaration</name><parameter_list pos:line="124" pos:column="56">()</parameter_list> <block pos:line="124" pos:column="59">{
            <comment type="line" pos:line="125" pos:column="13">////A2.cs</comment>
            <comment type="line" pos:line="126" pos:column="13">//public partial class A {</comment>
            <comment type="line" pos:line="127" pos:column="13">//    public partial int Foo() { return 42; }</comment>
            <comment type="line" pos:line="128" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="129" pos:column="13">string</name></type> <name pos:line="129" pos:column="20">a2Xml</name> <init pos:line="129" pos:column="26">= <expr><lit:literal type="string" pos:line="129" pos:column="28">@"&lt;class&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;specifier&gt;partial&lt;/specifier&gt; class &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{
    &lt;function&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;specifier&gt;partial&lt;/specifier&gt; &lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;return&gt;return &lt;expr&gt;&lt;lit:literal type=""number&gt;42&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt; }&lt;/block&gt;&lt;/function&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="132" pos:column="13">var</name></type> <name pos:line="132" pos:column="17">a2FileUnit</name> <init pos:line="132" pos:column="28">= <expr><call><name><name pos:line="132" pos:column="30">FileUnitSetup</name><op:operator pos:line="132" pos:column="43">.</op:operator><name pos:line="132" pos:column="44">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="132" pos:column="68">(<argument><expr><name pos:line="132" pos:column="69">a2Xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="132" pos:column="76">"A2.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="133" pos:column="13">var</name></type> <name pos:line="133" pos:column="17">beforeScope</name> <init pos:line="133" pos:column="29">= <expr><call><name><name pos:line="133" pos:column="31">CodeParser</name><op:operator pos:line="133" pos:column="41">.</op:operator><name pos:line="133" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="133" pos:column="55">(<argument><expr><name pos:line="133" pos:column="56">a2FileUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="134" pos:column="13">////A1.cs</comment>
            <comment type="line" pos:line="135" pos:column="13">//public partial class A {</comment>
            <comment type="line" pos:line="136" pos:column="13">//    public partial int Foo();</comment>
            <comment type="line" pos:line="137" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="138" pos:column="13">string</name></type> <name pos:line="138" pos:column="20">a1Xml</name> <init pos:line="138" pos:column="26">= <expr><lit:literal type="string" pos:line="138" pos:column="28">@"&lt;class&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;specifier&gt;partial&lt;/specifier&gt; class &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{
    &lt;function_decl&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;specifier&gt;partial&lt;/specifier&gt; &lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt;;&lt;/function_decl&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="141" pos:column="13">var</name></type> <name pos:line="141" pos:column="17">a1FileUnit</name> <init pos:line="141" pos:column="28">= <expr><call><name><name pos:line="141" pos:column="30">FileUnitSetup</name><op:operator pos:line="141" pos:column="43">.</op:operator><name pos:line="141" pos:column="44">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="141" pos:column="68">(<argument><expr><name pos:line="141" pos:column="69">a1Xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="141" pos:column="76">"A1.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="142" pos:column="13">var</name></type> <name pos:line="142" pos:column="17">afterScope</name> <init pos:line="142" pos:column="28">= <expr><call><name><name pos:line="142" pos:column="30">beforeScope</name><op:operator pos:line="142" pos:column="41">.</op:operator><name pos:line="142" pos:column="42">Merge</name></name><argument_list pos:line="142" pos:column="47">(<argument><expr><call><name><name pos:line="142" pos:column="48">CodeParser</name><op:operator pos:line="142" pos:column="58">.</op:operator><name pos:line="142" pos:column="59">ParseFileUnit</name></name><argument_list pos:line="142" pos:column="72">(<argument><expr><name pos:line="142" pos:column="73">a1FileUnit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="144" pos:column="13">Assert</name><op:operator pos:line="144" pos:column="19">.</op:operator><name pos:line="144" pos:column="20">AreEqual</name></name><argument_list pos:line="144" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="144" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="144" pos:column="32">afterScope</name><op:operator pos:line="144" pos:column="42">.</op:operator><name pos:line="144" pos:column="43">ChildStatements</name><op:operator pos:line="144" pos:column="58">.</op:operator><name pos:line="144" pos:column="59">Count</name></name><argument_list pos:line="144" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="145" pos:column="13">var</name></type> <name pos:line="145" pos:column="17">typeA</name> <init pos:line="145" pos:column="23">= <expr><call><name><name pos:line="145" pos:column="25">afterScope</name><op:operator pos:line="145" pos:column="35">.</op:operator><name pos:line="145" pos:column="36">ChildStatements</name><op:operator pos:line="145" pos:column="51">.</op:operator><name pos:line="145" pos:column="52">First</name></name><argument_list pos:line="145" pos:column="57">()</argument_list></call> <op:operator pos:line="145" pos:column="60">as</op:operator> <name pos:line="145" pos:column="63">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="146" pos:column="13">Assert</name><op:operator pos:line="146" pos:column="19">.</op:operator><name pos:line="146" pos:column="20">IsNotNull</name></name><argument_list pos:line="146" pos:column="29">(<argument><expr><name pos:line="146" pos:column="30">typeA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="147" pos:column="13">Assert</name><op:operator pos:line="147" pos:column="19">.</op:operator><name pos:line="147" pos:column="20">AreEqual</name></name><argument_list pos:line="147" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="147" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="147" pos:column="32">typeA</name><op:operator pos:line="147" pos:column="37">.</op:operator><name pos:line="147" pos:column="38">ChildStatements</name><op:operator pos:line="147" pos:column="53">.</op:operator><name><name pos:line="147" pos:column="54">OfType</name><argument_list pos:line="147" pos:column="60">&lt;<argument><name pos:line="147" pos:column="61">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="147" pos:column="78">()</argument_list></call><op:operator pos:line="147" pos:column="80">.</op:operator><call><name pos:line="147" pos:column="81">Count</name><argument_list pos:line="147" pos:column="86">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="148" pos:column="13">var</name></type> <name pos:line="148" pos:column="17">foo</name> <init pos:line="148" pos:column="21">= <expr><call><name><name pos:line="148" pos:column="23">typeA</name><op:operator pos:line="148" pos:column="28">.</op:operator><name pos:line="148" pos:column="29">ChildStatements</name><op:operator pos:line="148" pos:column="44">.</op:operator><name pos:line="148" pos:column="45">First</name></name><argument_list pos:line="148" pos:column="50">()</argument_list></call> <op:operator pos:line="148" pos:column="53">as</op:operator> <name pos:line="148" pos:column="56">MethodDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="149" pos:column="13">Assert</name><op:operator pos:line="149" pos:column="19">.</op:operator><name pos:line="149" pos:column="20">That</name></name><argument_list pos:line="149" pos:column="24">(<argument><expr><name><name pos:line="149" pos:column="25">foo</name><op:operator pos:line="149" pos:column="28">.</op:operator><name pos:line="149" pos:column="29">IsPartial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="151" pos:column="13">Assert</name><op:operator pos:line="151" pos:column="19">.</op:operator><name pos:line="151" pos:column="20">IsNotNull</name></name><argument_list pos:line="151" pos:column="29">(<argument><expr><name pos:line="151" pos:column="30">foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="152" pos:column="13">Assert</name><op:operator pos:line="152" pos:column="19">.</op:operator><name pos:line="152" pos:column="20">AreEqual</name></name><argument_list pos:line="152" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="152" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="152" pos:column="36">foo</name><op:operator pos:line="152" pos:column="39">.</op:operator><name pos:line="152" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="154" pos:column="13">afterScope</name><op:operator pos:line="154" pos:column="23">.</op:operator><name pos:line="154" pos:column="24">RemoveFile</name></name><argument_list pos:line="154" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="154" pos:column="35">"A1.cs"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="156" pos:column="13">DataAssert</name><op:operator pos:line="156" pos:column="23">.</op:operator><name pos:line="156" pos:column="24">StatementsAreEqual</name></name><argument_list pos:line="156" pos:column="42">(<argument><expr><name pos:line="156" pos:column="43">beforeScope</name></expr></argument>, <argument><expr><name pos:line="156" pos:column="56">afterScope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="159" pos:column="9">[<expr><name pos:line="159" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="160" pos:column="9">public</specifier> <name pos:line="160" pos:column="16">void</name></type> <name pos:line="160" pos:column="21">TestRemovePartialMethod_Implementation</name><parameter_list pos:line="160" pos:column="59">()</parameter_list> <block pos:line="160" pos:column="62">{
            <comment type="line" pos:line="161" pos:column="13">////A1.cs</comment>
            <comment type="line" pos:line="162" pos:column="13">//public partial class A {</comment>
            <comment type="line" pos:line="163" pos:column="13">//    public partial int Foo();</comment>
            <comment type="line" pos:line="164" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="165" pos:column="13">string</name></type> <name pos:line="165" pos:column="20">a1Xml</name> <init pos:line="165" pos:column="26">= <expr><lit:literal type="string" pos:line="165" pos:column="28">@"&lt;class&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;specifier&gt;partial&lt;/specifier&gt; class &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{
    &lt;function_decl&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;specifier&gt;partial&lt;/specifier&gt; &lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt;;&lt;/function_decl&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="168" pos:column="13">var</name></type> <name pos:line="168" pos:column="17">a1FileUnit</name> <init pos:line="168" pos:column="28">= <expr><call><name><name pos:line="168" pos:column="30">FileUnitSetup</name><op:operator pos:line="168" pos:column="43">.</op:operator><name pos:line="168" pos:column="44">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="168" pos:column="68">(<argument><expr><name pos:line="168" pos:column="69">a1Xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="168" pos:column="76">"A1.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="169" pos:column="13">var</name></type> <name pos:line="169" pos:column="17">beforeScope</name> <init pos:line="169" pos:column="29">= <expr><call><name><name pos:line="169" pos:column="31">CodeParser</name><op:operator pos:line="169" pos:column="41">.</op:operator><name pos:line="169" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="169" pos:column="55">(<argument><expr><name pos:line="169" pos:column="56">a1FileUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="170" pos:column="13">////A2.cs</comment>
            <comment type="line" pos:line="171" pos:column="13">//public partial class A {</comment>
            <comment type="line" pos:line="172" pos:column="13">//    public partial int Foo() { return 42; }</comment>
            <comment type="line" pos:line="173" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="174" pos:column="13">string</name></type> <name pos:line="174" pos:column="20">a2Xml</name> <init pos:line="174" pos:column="26">= <expr><lit:literal type="string" pos:line="174" pos:column="28">@"&lt;class&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;specifier&gt;partial&lt;/specifier&gt; class &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{
    &lt;function&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;specifier&gt;partial&lt;/specifier&gt; &lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;return&gt;return &lt;expr&gt;&lt;lit:literal type=""number&gt;42&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt; }&lt;/block&gt;&lt;/function&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="177" pos:column="13">var</name></type> <name pos:line="177" pos:column="17">a2FileUnit</name> <init pos:line="177" pos:column="28">= <expr><call><name><name pos:line="177" pos:column="30">FileUnitSetup</name><op:operator pos:line="177" pos:column="43">.</op:operator><name pos:line="177" pos:column="44">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="177" pos:column="68">(<argument><expr><name pos:line="177" pos:column="69">a2Xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="177" pos:column="76">"A2.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="178" pos:column="13">var</name></type> <name pos:line="178" pos:column="17">afterScope</name> <init pos:line="178" pos:column="28">= <expr><call><name><name pos:line="178" pos:column="30">beforeScope</name><op:operator pos:line="178" pos:column="41">.</op:operator><name pos:line="178" pos:column="42">Merge</name></name><argument_list pos:line="178" pos:column="47">(<argument><expr><call><name><name pos:line="178" pos:column="48">CodeParser</name><op:operator pos:line="178" pos:column="58">.</op:operator><name pos:line="178" pos:column="59">ParseFileUnit</name></name><argument_list pos:line="178" pos:column="72">(<argument><expr><name pos:line="178" pos:column="73">a2FileUnit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="180" pos:column="13">Assert</name><op:operator pos:line="180" pos:column="19">.</op:operator><name pos:line="180" pos:column="20">AreEqual</name></name><argument_list pos:line="180" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="180" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="180" pos:column="32">afterScope</name><op:operator pos:line="180" pos:column="42">.</op:operator><name pos:line="180" pos:column="43">ChildStatements</name><op:operator pos:line="180" pos:column="58">.</op:operator><name pos:line="180" pos:column="59">Count</name></name><argument_list pos:line="180" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="181" pos:column="13">var</name></type> <name pos:line="181" pos:column="17">typeA</name> <init pos:line="181" pos:column="23">= <expr><call><name><name pos:line="181" pos:column="25">afterScope</name><op:operator pos:line="181" pos:column="35">.</op:operator><name pos:line="181" pos:column="36">ChildStatements</name><op:operator pos:line="181" pos:column="51">.</op:operator><name pos:line="181" pos:column="52">First</name></name><argument_list pos:line="181" pos:column="57">()</argument_list></call> <op:operator pos:line="181" pos:column="60">as</op:operator> <name pos:line="181" pos:column="63">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="182" pos:column="13">Assert</name><op:operator pos:line="182" pos:column="19">.</op:operator><name pos:line="182" pos:column="20">IsNotNull</name></name><argument_list pos:line="182" pos:column="29">(<argument><expr><name pos:line="182" pos:column="30">typeA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="183" pos:column="13">Assert</name><op:operator pos:line="183" pos:column="19">.</op:operator><name pos:line="183" pos:column="20">AreEqual</name></name><argument_list pos:line="183" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="183" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="183" pos:column="32">typeA</name><op:operator pos:line="183" pos:column="37">.</op:operator><name pos:line="183" pos:column="38">ChildStatements</name><op:operator pos:line="183" pos:column="53">.</op:operator><name><name pos:line="183" pos:column="54">OfType</name><argument_list pos:line="183" pos:column="60">&lt;<argument><name pos:line="183" pos:column="61">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="183" pos:column="78">()</argument_list></call><op:operator pos:line="183" pos:column="80">.</op:operator><call><name pos:line="183" pos:column="81">Count</name><argument_list pos:line="183" pos:column="86">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="184" pos:column="13">var</name></type> <name pos:line="184" pos:column="17">foo</name> <init pos:line="184" pos:column="21">= <expr><call><name><name pos:line="184" pos:column="23">typeA</name><op:operator pos:line="184" pos:column="28">.</op:operator><name pos:line="184" pos:column="29">ChildStatements</name><op:operator pos:line="184" pos:column="44">.</op:operator><name pos:line="184" pos:column="45">First</name></name><argument_list pos:line="184" pos:column="50">()</argument_list></call> <op:operator pos:line="184" pos:column="53">as</op:operator> <name pos:line="184" pos:column="56">MethodDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="185" pos:column="13">Assert</name><op:operator pos:line="185" pos:column="19">.</op:operator><name pos:line="185" pos:column="20">IsNotNull</name></name><argument_list pos:line="185" pos:column="29">(<argument><expr><name pos:line="185" pos:column="30">foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="186" pos:column="13">Assert</name><op:operator pos:line="186" pos:column="19">.</op:operator><name pos:line="186" pos:column="20">AreEqual</name></name><argument_list pos:line="186" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="186" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="186" pos:column="36">foo</name><op:operator pos:line="186" pos:column="39">.</op:operator><name pos:line="186" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="188" pos:column="13">afterScope</name><op:operator pos:line="188" pos:column="23">.</op:operator><name pos:line="188" pos:column="24">RemoveFile</name></name><argument_list pos:line="188" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="188" pos:column="35">"A2.cs"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <expr_stmt><expr><call><name><name pos:line="190" pos:column="12">DataAssert</name><op:operator pos:line="190" pos:column="22">.</op:operator><name pos:line="190" pos:column="23">StatementsAreEqual</name></name><argument_list pos:line="190" pos:column="41">(<argument><expr><name pos:line="190" pos:column="42">beforeScope</name></expr></argument>, <argument><expr><name pos:line="190" pos:column="55">afterScope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="193" pos:column="9">[<expr><name pos:line="193" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="194" pos:column="9">public</specifier> <name pos:line="194" pos:column="16">void</name></type> <name pos:line="194" pos:column="21">TestRemovePartOfNamespace</name><parameter_list pos:line="194" pos:column="46">()</parameter_list> <block pos:line="194" pos:column="49">{
            <comment type="line" pos:line="195" pos:column="13">////A1.cs</comment>
            <comment type="line" pos:line="196" pos:column="13">//namespace A {</comment>
            <comment type="line" pos:line="197" pos:column="13">//    class Foo { int bar; }</comment>
            <comment type="line" pos:line="198" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="199" pos:column="13">string</name></type> <name pos:line="199" pos:column="20">a1Xml</name> <init pos:line="199" pos:column="26">= <expr><lit:literal type="string" pos:line="199" pos:column="28">@"&lt;namespace&gt;namespace &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{
    &lt;class&gt;class &lt;name&gt;Foo&lt;/name&gt; &lt;block&gt;{ &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;bar&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt; }&lt;/block&gt;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="202" pos:column="13">var</name></type> <name pos:line="202" pos:column="17">a1FileUnit</name> <init pos:line="202" pos:column="28">= <expr><call><name><name pos:line="202" pos:column="30">FileUnitSetup</name><op:operator pos:line="202" pos:column="43">.</op:operator><name pos:line="202" pos:column="44">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="202" pos:column="68">(<argument><expr><name pos:line="202" pos:column="69">a1Xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="202" pos:column="76">"A1.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="203" pos:column="13">var</name></type> <name pos:line="203" pos:column="17">beforeScope</name> <init pos:line="203" pos:column="29">= <expr><call><name><name pos:line="203" pos:column="31">CodeParser</name><op:operator pos:line="203" pos:column="41">.</op:operator><name pos:line="203" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="203" pos:column="55">(<argument><expr><name pos:line="203" pos:column="56">a1FileUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="204" pos:column="13">////A2.cs</comment>
            <comment type="line" pos:line="205" pos:column="13">//namespace A {</comment>
            <comment type="line" pos:line="206" pos:column="13">//    class Baz { public ulong xyzzy; }</comment>
            <comment type="line" pos:line="207" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="208" pos:column="13">string</name></type> <name pos:line="208" pos:column="20">a2Xml</name> <init pos:line="208" pos:column="26">= <expr><lit:literal type="string" pos:line="208" pos:column="28">@"&lt;namespace&gt;namespace &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{
    &lt;class&gt;class &lt;name&gt;Baz&lt;/name&gt; &lt;block&gt;{ &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;ulong&lt;/name&gt;&lt;/type&gt; &lt;name&gt;xyzzy&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt; }&lt;/block&gt;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="211" pos:column="13">var</name></type> <name pos:line="211" pos:column="17">a2FileUnit</name> <init pos:line="211" pos:column="28">= <expr><call><name><name pos:line="211" pos:column="30">FileUnitSetup</name><op:operator pos:line="211" pos:column="43">.</op:operator><name pos:line="211" pos:column="44">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="211" pos:column="68">(<argument><expr><name pos:line="211" pos:column="69">a2Xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="211" pos:column="76">"A2.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="212" pos:column="13">var</name></type> <name pos:line="212" pos:column="17">afterScope</name> <init pos:line="212" pos:column="28">= <expr><call><name><name pos:line="212" pos:column="30">beforeScope</name><op:operator pos:line="212" pos:column="41">.</op:operator><name pos:line="212" pos:column="42">Merge</name></name><argument_list pos:line="212" pos:column="47">(<argument><expr><call><name><name pos:line="212" pos:column="48">CodeParser</name><op:operator pos:line="212" pos:column="58">.</op:operator><name pos:line="212" pos:column="59">ParseFileUnit</name></name><argument_list pos:line="212" pos:column="72">(<argument><expr><name pos:line="212" pos:column="73">a2FileUnit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="214" pos:column="13">Assert</name><op:operator pos:line="214" pos:column="19">.</op:operator><name pos:line="214" pos:column="20">AreEqual</name></name><argument_list pos:line="214" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="214" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="214" pos:column="32">afterScope</name><op:operator pos:line="214" pos:column="42">.</op:operator><name pos:line="214" pos:column="43">ChildStatements</name><op:operator pos:line="214" pos:column="58">.</op:operator><name><name pos:line="214" pos:column="59">OfType</name><argument_list pos:line="214" pos:column="65">&lt;<argument><name pos:line="214" pos:column="66">NamespaceDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="214" pos:column="86">()</argument_list></call><op:operator pos:line="214" pos:column="88">.</op:operator><call><name pos:line="214" pos:column="89">Count</name><argument_list pos:line="214" pos:column="94">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="215" pos:column="13">Assert</name><op:operator pos:line="215" pos:column="19">.</op:operator><name pos:line="215" pos:column="20">AreEqual</name></name><argument_list pos:line="215" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="215" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="215" pos:column="32">afterScope</name><op:operator pos:line="215" pos:column="42">.</op:operator><name pos:line="215" pos:column="43">ChildStatements</name><op:operator pos:line="215" pos:column="58">.</op:operator><name pos:line="215" pos:column="59">First</name></name><argument_list pos:line="215" pos:column="64">()</argument_list></call><op:operator pos:line="215" pos:column="66">.</op:operator><call><name><name pos:line="215" pos:column="67">ChildStatements</name><op:operator pos:line="215" pos:column="82">.</op:operator><name><name pos:line="215" pos:column="83">OfType</name><argument_list pos:line="215" pos:column="89">&lt;<argument><name pos:line="215" pos:column="90">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="215" pos:column="105">()</argument_list></call><op:operator pos:line="215" pos:column="107">.</op:operator><call><name pos:line="215" pos:column="108">Count</name><argument_list pos:line="215" pos:column="113">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="217" pos:column="13">afterScope</name><op:operator pos:line="217" pos:column="23">.</op:operator><name pos:line="217" pos:column="24">RemoveFile</name></name><argument_list pos:line="217" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="217" pos:column="35">"A2.cs"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="219" pos:column="13">DataAssert</name><op:operator pos:line="219" pos:column="23">.</op:operator><name pos:line="219" pos:column="24">StatementsAreEqual</name></name><argument_list pos:line="219" pos:column="42">(<argument><expr><name pos:line="219" pos:column="43">beforeScope</name></expr></argument>, <argument><expr><name pos:line="219" pos:column="56">afterScope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="222" pos:column="9">[<expr><name pos:line="222" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="223" pos:column="9">public</specifier> <name pos:line="223" pos:column="16">void</name></type> <name pos:line="223" pos:column="21">TestFileRemovalWithDifferentCase</name><parameter_list pos:line="223" pos:column="53">()</parameter_list> <block pos:line="223" pos:column="56">{
            <comment type="line" pos:line="224" pos:column="13">// namespace A { class B { } }</comment>
            <decl_stmt><decl><type><name pos:line="225" pos:column="13">string</name></type> <name pos:line="225" pos:column="20">bXml</name> <init pos:line="225" pos:column="25">= <expr><lit:literal type="string" pos:line="225" pos:column="27">@"&lt;namespace&gt;namespace &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{ &lt;class&gt;class &lt;name&gt;B&lt;/name&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/class&gt; }&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="227" pos:column="13">// namespace C { class D { } }</comment>
            <decl_stmt><decl><type><name pos:line="228" pos:column="13">string</name></type> <name pos:line="228" pos:column="20">dXml</name> <init pos:line="228" pos:column="25">= <expr><lit:literal type="string" pos:line="228" pos:column="27">@"&lt;namespace&gt;namespace &lt;name&gt;C&lt;/name&gt; &lt;block&gt;{ &lt;class&gt;class &lt;name&gt;D&lt;/name&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/class&gt; }&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="230" pos:column="13">var</name></type> <name pos:line="230" pos:column="17">bUnit</name> <init pos:line="230" pos:column="23">= <expr><call><name><name pos:line="230" pos:column="25">FileUnitSetup</name><op:operator pos:line="230" pos:column="38">.</op:operator><name pos:line="230" pos:column="39">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="230" pos:column="63">(<argument><expr><name pos:line="230" pos:column="64">bXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="230" pos:column="70">"B.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="231" pos:column="13">var</name></type> <name pos:line="231" pos:column="17">dUnit</name> <init pos:line="231" pos:column="23">= <expr><call><name><name pos:line="231" pos:column="25">FileUnitSetup</name><op:operator pos:line="231" pos:column="38">.</op:operator><name pos:line="231" pos:column="39">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="231" pos:column="63">(<argument><expr><name pos:line="231" pos:column="64">dXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="231" pos:column="70">"D.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="233" pos:column="13">var</name></type> <name pos:line="233" pos:column="17">bScope</name> <init pos:line="233" pos:column="24">= <expr><call><name><name pos:line="233" pos:column="26">CodeParser</name><op:operator pos:line="233" pos:column="36">.</op:operator><name pos:line="233" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="233" pos:column="50">(<argument><expr><name pos:line="233" pos:column="51">bUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="234" pos:column="13">var</name></type> <name pos:line="234" pos:column="17">dScope</name> <init pos:line="234" pos:column="24">= <expr><call><name><name pos:line="234" pos:column="26">CodeParser</name><op:operator pos:line="234" pos:column="36">.</op:operator><name pos:line="234" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="234" pos:column="50">(<argument><expr><name pos:line="234" pos:column="51">dUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="235" pos:column="13">var</name></type> <name pos:line="235" pos:column="17">globalScope</name> <init pos:line="235" pos:column="29">= <expr><call><name><name pos:line="235" pos:column="31">bScope</name><op:operator pos:line="235" pos:column="37">.</op:operator><name pos:line="235" pos:column="38">Merge</name></name><argument_list pos:line="235" pos:column="43">(<argument><expr><name pos:line="235" pos:column="44">dScope</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="237" pos:column="13">globalScope</name><op:operator pos:line="237" pos:column="24">.</op:operator><name pos:line="237" pos:column="25">RemoveFile</name></name><argument_list pos:line="237" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="237" pos:column="36">"b.cs"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="238" pos:column="13">Assert</name><op:operator pos:line="238" pos:column="19">.</op:operator><name pos:line="238" pos:column="20">AreEqual</name></name><argument_list pos:line="238" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="238" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="238" pos:column="32">globalScope</name><op:operator pos:line="238" pos:column="43">.</op:operator><name pos:line="238" pos:column="44">ChildStatements</name><op:operator pos:line="238" pos:column="59">.</op:operator><name pos:line="238" pos:column="60">Count</name></name><argument_list pos:line="238" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
