<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data\XmlSerialization.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2014 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *    Patrick Francis (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="13" pos:column="1">using <name pos:line="13" pos:column="7">System</name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Collections</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">Generic</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">IO</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">IO</name><op:operator pos:line="16" pos:column="16">.</op:operator><name pos:line="16" pos:column="17">Compression</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Linq</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Text</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">System</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">Xml</name></name>;</using>
<using pos:line="20" pos:column="1">using <name><name pos:line="20" pos:column="7">System</name><op:operator pos:line="20" pos:column="13">.</op:operator><name pos:line="20" pos:column="14">Xml</name><op:operator pos:line="20" pos:column="17">.</op:operator><name pos:line="20" pos:column="18">Serialization</name></name>;</using>

<namespace pos:line="22" pos:column="1">namespace <name><name pos:line="22" pos:column="11">ABB</name><op:operator pos:line="22" pos:column="14">.</op:operator><name pos:line="22" pos:column="15">SrcML</name><op:operator pos:line="22" pos:column="20">.</op:operator><name pos:line="22" pos:column="21">Data</name></name> <block pos:line="22" pos:column="26">{
    <function_decl><type><specifier pos:line="23" pos:column="5">internal</specifier> <specifier pos:line="23" pos:column="14">delegate</specifier> <name pos:line="23" pos:column="23">T</name></type> <name><name pos:line="23" pos:column="25">XmlInitializer</name><argument_list pos:line="23" pos:column="39">&lt;<argument><name pos:line="23" pos:column="40">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="23" pos:column="42">(<param><decl><type><name pos:line="23" pos:column="43">XmlReader</name></type> <name pos:line="23" pos:column="53">reader</name></decl></param>)</parameter_list> <where pos:line="23" pos:column="61">where <name pos:line="23" pos:column="67">T</name> : <name pos:line="23" pos:column="71">IXmlElement</name>, new()</where>;</function_decl>
    
    <comment type="line" pos:line="25" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="26" pos:column="5">/// XmlSerialization provides helper methods that aid in serializing and deserializing different objects in SrcML.Data.</comment>
    <comment type="line" pos:line="27" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="28" pos:column="5">public</specifier> class <name pos:line="28" pos:column="18">XmlSerialization</name> <block pos:line="28" pos:column="35">{

        <comment type="line" pos:line="30" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="31" pos:column="9">/// The default extension to use for serialized files</comment>
        <comment type="line" pos:line="32" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="33" pos:column="9">public</specifier> <specifier pos:line="33" pos:column="16">const</specifier> <name pos:line="33" pos:column="22">string</name></type> <name pos:line="33" pos:column="29">DEFAULT_EXTENSION</name> <init pos:line="33" pos:column="47">= <expr><lit:literal type="string" pos:line="33" pos:column="49">".dml"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="35" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="36" pos:column="9">/// The default extension to use for &lt;see cref="GZipStream"&gt;compressed&lt;/see&gt; serialized files</comment>
        <comment type="line" pos:line="37" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="38" pos:column="9">public</specifier> <specifier pos:line="38" pos:column="16">const</specifier> <name pos:line="38" pos:column="22">string</name></type> <name pos:line="38" pos:column="29">DEFAULT_COMPRESSED_EXTENSION</name> <init pos:line="38" pos:column="58">= <expr><lit:literal type="string" pos:line="38" pos:column="60">".dgz"</lit:literal></expr></init></decl>;</decl_stmt>

        <cpp:region pos:line="40" pos:column="9">#<cpp:directive pos:line="40" pos:column="10">region</cpp:directive> internal xml name mappings</cpp:region>
        <decl_stmt><decl><type><specifier pos:line="41" pos:column="9">internal</specifier> <specifier pos:line="41" pos:column="18">static</specifier> <name><name pos:line="41" pos:column="25">Dictionary</name><argument_list pos:line="41" pos:column="35">&lt;<argument><name pos:line="41" pos:column="36">string</name></argument>, <argument><name><name pos:line="41" pos:column="44">XmlInitializer</name><argument_list pos:line="41" pos:column="58">&lt;<argument><name pos:line="41" pos:column="59">SourceLocation</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="41" pos:column="76">XmlLocationMap</name> <init pos:line="41" pos:column="91">= <expr><op:operator pos:line="41" pos:column="93">new</op:operator> <call><name><name pos:line="41" pos:column="97">Dictionary</name><argument_list pos:line="41" pos:column="107">&lt;<argument><name pos:line="41" pos:column="108">string</name></argument>, <argument><name><name pos:line="41" pos:column="116">XmlInitializer</name><argument_list pos:line="41" pos:column="130">&lt;<argument><name pos:line="41" pos:column="131">SourceLocation</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list pos:line="41" pos:column="147">()</argument_list></call> <block pos:line="41" pos:column="150">{
            <expr><block pos:line="42" pos:column="13">{ <expr><name><name pos:line="42" pos:column="15">SourceLocation</name><op:operator pos:line="42" pos:column="29">.</op:operator><name pos:line="42" pos:column="30">XmlName</name></name></expr>, <expr><name><name pos:line="42" pos:column="39">CreateFromReader</name><argument_list pos:line="42" pos:column="55">&lt;<argument><name pos:line="42" pos:column="56">SourceLocation</name></argument>&gt;</argument_list></name></expr> }</block></expr>,
            <expr><block pos:line="43" pos:column="13">{ <expr><name><name pos:line="43" pos:column="15">SrcMLLocation</name><op:operator pos:line="43" pos:column="28">.</op:operator><name pos:line="43" pos:column="29">XmlName</name></name></expr>, <expr><name><name pos:line="43" pos:column="38">CreateFromReader</name><argument_list pos:line="43" pos:column="54">&lt;<argument><name pos:line="43" pos:column="55">SrcMLLocation</name></argument>&gt;</argument_list></name></expr> }</block></expr>,
        }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="46" pos:column="9">internal</specifier> <specifier pos:line="46" pos:column="18">static</specifier> <name><name pos:line="46" pos:column="25">Dictionary</name><argument_list pos:line="46" pos:column="35">&lt;<argument><name pos:line="46" pos:column="36">string</name></argument>, <argument><name><name pos:line="46" pos:column="44">XmlInitializer</name><argument_list pos:line="46" pos:column="58">&lt;<argument><name pos:line="46" pos:column="59">Statement</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="46" pos:column="71">XmlStatementMap</name> <init pos:line="46" pos:column="87">= <expr><op:operator pos:line="46" pos:column="89">new</op:operator> <call><name><name pos:line="46" pos:column="93">Dictionary</name><argument_list pos:line="46" pos:column="103">&lt;<argument><name pos:line="46" pos:column="104">string</name></argument>, <argument><name><name pos:line="46" pos:column="112">XmlInitializer</name><argument_list pos:line="46" pos:column="126">&lt;<argument><name pos:line="46" pos:column="127">Statement</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list pos:line="46" pos:column="138">()</argument_list></call> <block pos:line="46" pos:column="141">{
            <expr><block pos:line="47" pos:column="13">{ <expr><name><name pos:line="47" pos:column="15">Statement</name><op:operator pos:line="47" pos:column="24">.</op:operator><name pos:line="47" pos:column="25">XmlName</name></name></expr>, <expr><name><name pos:line="47" pos:column="34">CreateFromReader</name><argument_list pos:line="47" pos:column="50">&lt;<argument><name pos:line="47" pos:column="51">Statement</name></argument>&gt;</argument_list></name></expr> }</block></expr>,
            
            <comment type="block" pos:line="49" pos:column="13">/* alias &amp; import statements */</comment>
            <expr><block pos:line="50" pos:column="13">{ <expr><name><name pos:line="50" pos:column="15">AliasStatement</name><op:operator pos:line="50" pos:column="29">.</op:operator><name pos:line="50" pos:column="30">XmlName</name></name></expr>, <expr><name><name pos:line="50" pos:column="39">CreateFromReader</name><argument_list pos:line="50" pos:column="55">&lt;<argument><name pos:line="50" pos:column="56">AliasStatement</name></argument>&gt;</argument_list></name></expr> }</block></expr>,
            <expr><block pos:line="51" pos:column="13">{ <expr><name><name pos:line="51" pos:column="15">ImportStatement</name><op:operator pos:line="51" pos:column="30">.</op:operator><name pos:line="51" pos:column="31">XmlName</name></name></expr>, <expr><name><name pos:line="51" pos:column="40">CreateFromReader</name><argument_list pos:line="51" pos:column="56">&lt;<argument><name pos:line="51" pos:column="57">ImportStatement</name></argument>&gt;</argument_list></name></expr> }</block></expr>,

            <comment type="block" pos:line="53" pos:column="13">/* basic statements */</comment>
            <expr><block pos:line="54" pos:column="13">{ <expr><name><name pos:line="54" pos:column="15">BreakStatement</name><op:operator pos:line="54" pos:column="29">.</op:operator><name pos:line="54" pos:column="30">XmlName</name></name></expr>, <expr><name><name pos:line="54" pos:column="39">CreateFromReader</name><argument_list pos:line="54" pos:column="55">&lt;<argument><name pos:line="54" pos:column="56">BreakStatement</name></argument>&gt;</argument_list></name></expr> }</block></expr>,
            <expr><block pos:line="55" pos:column="13">{ <expr><name><name pos:line="55" pos:column="15">CaseStatement</name><op:operator pos:line="55" pos:column="28">.</op:operator><name pos:line="55" pos:column="29">XmlName</name></name></expr>, <expr><name><name pos:line="55" pos:column="38">CreateFromReader</name><argument_list pos:line="55" pos:column="54">&lt;<argument><name pos:line="55" pos:column="55">CaseStatement</name></argument>&gt;</argument_list></name></expr> }</block></expr>,
            <expr><block pos:line="56" pos:column="13">{ <expr><name><name pos:line="56" pos:column="15">ContinueStatement</name><op:operator pos:line="56" pos:column="32">.</op:operator><name pos:line="56" pos:column="33">XmlName</name></name></expr>, <expr><name><name pos:line="56" pos:column="42">CreateFromReader</name><argument_list pos:line="56" pos:column="58">&lt;<argument><name pos:line="56" pos:column="59">ContinueStatement</name></argument>&gt;</argument_list></name></expr> }</block></expr>,
            <expr><block pos:line="57" pos:column="13">{ <expr><name><name pos:line="57" pos:column="15">GotoStatement</name><op:operator pos:line="57" pos:column="28">.</op:operator><name pos:line="57" pos:column="29">XmlName</name></name></expr>, <expr><name><name pos:line="57" pos:column="38">CreateFromReader</name><argument_list pos:line="57" pos:column="54">&lt;<argument><name pos:line="57" pos:column="55">GotoStatement</name></argument>&gt;</argument_list></name></expr> }</block></expr>,
            <expr><block pos:line="58" pos:column="13">{ <expr><name><name pos:line="58" pos:column="15">ExternStatement</name><op:operator pos:line="58" pos:column="30">.</op:operator><name pos:line="58" pos:column="31">XmlName</name></name></expr>, <expr><name><name pos:line="58" pos:column="40">CreateFromReader</name><argument_list pos:line="58" pos:column="56">&lt;<argument><name pos:line="58" pos:column="57">ExternStatement</name></argument>&gt;</argument_list></name></expr> }</block></expr>,
            <expr><block pos:line="59" pos:column="13">{ <expr><name><name pos:line="59" pos:column="15">LabelStatement</name><op:operator pos:line="59" pos:column="29">.</op:operator><name pos:line="59" pos:column="30">XmlName</name></name></expr>, <expr><name><name pos:line="59" pos:column="39">CreateFromReader</name><argument_list pos:line="59" pos:column="55">&lt;<argument><name pos:line="59" pos:column="56">LabelStatement</name></argument>&gt;</argument_list></name></expr> }</block></expr>,
            <expr><block pos:line="60" pos:column="13">{ <expr><name><name pos:line="60" pos:column="15">ReturnStatement</name><op:operator pos:line="60" pos:column="30">.</op:operator><name pos:line="60" pos:column="31">XmlName</name></name></expr>, <expr><name><name pos:line="60" pos:column="40">CreateFromReader</name><argument_list pos:line="60" pos:column="56">&lt;<argument><name pos:line="60" pos:column="57">ReturnStatement</name></argument>&gt;</argument_list></name></expr> }</block></expr>,
            <expr><block pos:line="61" pos:column="13">{ <expr><name><name pos:line="61" pos:column="15">ThrowStatement</name><op:operator pos:line="61" pos:column="29">.</op:operator><name pos:line="61" pos:column="30">XmlName</name></name></expr>, <expr><name><name pos:line="61" pos:column="39">CreateFromReader</name><argument_list pos:line="61" pos:column="55">&lt;<argument><name pos:line="61" pos:column="56">ThrowStatement</name></argument>&gt;</argument_list></name></expr> }</block></expr>,
            <expr><block pos:line="62" pos:column="13">{ <expr><name><name pos:line="62" pos:column="15">DeclarationStatement</name><op:operator pos:line="62" pos:column="35">.</op:operator><name pos:line="62" pos:column="36">XmlName</name></name></expr>, <expr><name><name pos:line="62" pos:column="45">CreateFromReader</name><argument_list pos:line="62" pos:column="61">&lt;<argument><name pos:line="62" pos:column="62">DeclarationStatement</name></argument>&gt;</argument_list></name></expr> }</block></expr>,

            <comment type="block" pos:line="64" pos:column="13">/* block statements */</comment>
            <expr><block pos:line="65" pos:column="13">{ <expr><name><name pos:line="65" pos:column="15">BlockStatement</name><op:operator pos:line="65" pos:column="29">.</op:operator><name pos:line="65" pos:column="30">XmlName</name></name></expr>, <expr><name><name pos:line="65" pos:column="39">CreateFromReader</name><argument_list pos:line="65" pos:column="55">&lt;<argument><name pos:line="65" pos:column="56">BlockStatement</name></argument>&gt;</argument_list></name></expr> }</block></expr>,
            <expr><block pos:line="66" pos:column="13">{ <expr><name><name pos:line="66" pos:column="15">CatchStatement</name><op:operator pos:line="66" pos:column="29">.</op:operator><name pos:line="66" pos:column="30">XmlName</name></name></expr>, <expr><name><name pos:line="66" pos:column="39">CreateFromReader</name><argument_list pos:line="66" pos:column="55">&lt;<argument><name pos:line="66" pos:column="56">CatchStatement</name></argument>&gt;</argument_list></name></expr> }</block></expr>,
            <expr><block pos:line="67" pos:column="13">{ <expr><name><name pos:line="67" pos:column="15">ForStatement</name><op:operator pos:line="67" pos:column="27">.</op:operator><name pos:line="67" pos:column="28">XmlName</name></name></expr>, <expr><name><name pos:line="67" pos:column="37">CreateFromReader</name><argument_list pos:line="67" pos:column="53">&lt;<argument><name pos:line="67" pos:column="54">ForStatement</name></argument>&gt;</argument_list></name></expr> }</block></expr>,
            <expr><block pos:line="68" pos:column="13">{ <expr><name><name pos:line="68" pos:column="15">ForeachStatement</name><op:operator pos:line="68" pos:column="31">.</op:operator><name pos:line="68" pos:column="32">XmlName</name></name></expr>, <expr><name><name pos:line="68" pos:column="41">CreateFromReader</name><argument_list pos:line="68" pos:column="57">&lt;<argument><name pos:line="68" pos:column="58">ForeachStatement</name></argument>&gt;</argument_list></name></expr> }</block></expr>,
            <expr><block pos:line="69" pos:column="13">{ <expr><name><name pos:line="69" pos:column="15">IfStatement</name><op:operator pos:line="69" pos:column="26">.</op:operator><name pos:line="69" pos:column="27">XmlName</name></name></expr>, <expr><name><name pos:line="69" pos:column="36">CreateFromReader</name><argument_list pos:line="69" pos:column="52">&lt;<argument><name pos:line="69" pos:column="53">IfStatement</name></argument>&gt;</argument_list></name></expr> }</block></expr>,
            <expr><block pos:line="70" pos:column="13">{ <expr><name><name pos:line="70" pos:column="15">SwitchStatement</name><op:operator pos:line="70" pos:column="30">.</op:operator><name pos:line="70" pos:column="31">XmlName</name></name></expr>, <expr><name><name pos:line="70" pos:column="40">CreateFromReader</name><argument_list pos:line="70" pos:column="56">&lt;<argument><name pos:line="70" pos:column="57">SwitchStatement</name></argument>&gt;</argument_list></name></expr> }</block></expr>,
            <expr><block pos:line="71" pos:column="13">{ <expr><name><name pos:line="71" pos:column="15">TryStatement</name><op:operator pos:line="71" pos:column="27">.</op:operator><name pos:line="71" pos:column="28">XmlName</name></name></expr>, <expr><name><name pos:line="71" pos:column="37">CreateFromReader</name><argument_list pos:line="71" pos:column="53">&lt;<argument><name pos:line="71" pos:column="54">TryStatement</name></argument>&gt;</argument_list></name></expr> }</block></expr>,
            <expr><block pos:line="72" pos:column="13">{ <expr><name><name pos:line="72" pos:column="15">WhileStatement</name><op:operator pos:line="72" pos:column="29">.</op:operator><name pos:line="72" pos:column="30">XmlName</name></name></expr>, <expr><name><name pos:line="72" pos:column="39">CreateFromReader</name><argument_list pos:line="72" pos:column="55">&lt;<argument><name pos:line="72" pos:column="56">WhileStatement</name></argument>&gt;</argument_list></name></expr> }</block></expr>,
            <expr><block pos:line="73" pos:column="13">{ <expr><name><name pos:line="73" pos:column="15">DoWhileStatement</name><op:operator pos:line="73" pos:column="31">.</op:operator><name pos:line="73" pos:column="32">XmlName</name></name></expr>, <expr><name><name pos:line="73" pos:column="41">CreateFromReader</name><argument_list pos:line="73" pos:column="57">&lt;<argument><name pos:line="73" pos:column="58">DoWhileStatement</name></argument>&gt;</argument_list></name></expr> }</block></expr>,
            <expr><block pos:line="74" pos:column="13">{ <expr><name><name pos:line="74" pos:column="15">UsingBlockStatement</name><op:operator pos:line="74" pos:column="34">.</op:operator><name pos:line="74" pos:column="35">XmlName</name></name></expr>, <expr><name><name pos:line="74" pos:column="44">CreateFromReader</name><argument_list pos:line="74" pos:column="60">&lt;<argument><name pos:line="74" pos:column="61">UsingBlockStatement</name></argument>&gt;</argument_list></name></expr> }</block></expr>,
            <expr><block pos:line="75" pos:column="13">{ <expr><name><name pos:line="75" pos:column="15">LockStatement</name><op:operator pos:line="75" pos:column="28">.</op:operator><name pos:line="75" pos:column="29">XmlName</name></name></expr>, <expr><name><name pos:line="75" pos:column="38">CreateFromReader</name><argument_list pos:line="75" pos:column="54">&lt;<argument><name pos:line="75" pos:column="55">LockStatement</name></argument>&gt;</argument_list></name></expr> }</block></expr>,

            <comment type="block" pos:line="77" pos:column="13">/* Named statements */</comment>
            <expr><block pos:line="78" pos:column="13">{ <expr><name><name pos:line="78" pos:column="15">NamedScope</name><op:operator pos:line="78" pos:column="25">.</op:operator><name pos:line="78" pos:column="26">XmlName</name></name></expr>, <expr><name><name pos:line="78" pos:column="35">CreateFromReader</name><argument_list pos:line="78" pos:column="51">&lt;<argument><name pos:line="78" pos:column="52">NamedScope</name></argument>&gt;</argument_list></name></expr> }</block></expr>,
            <expr><block pos:line="79" pos:column="13">{ <expr><name><name pos:line="79" pos:column="15">NamespaceDefinition</name><op:operator pos:line="79" pos:column="34">.</op:operator><name pos:line="79" pos:column="35">XmlName</name></name></expr>, <expr><name><name pos:line="79" pos:column="44">CreateFromReader</name><argument_list pos:line="79" pos:column="60">&lt;<argument><name pos:line="79" pos:column="61">NamespaceDefinition</name></argument>&gt;</argument_list></name></expr> }</block></expr>,
            <expr><block pos:line="80" pos:column="13">{ <expr><name><name pos:line="80" pos:column="15">TypeDefinition</name><op:operator pos:line="80" pos:column="29">.</op:operator><name pos:line="80" pos:column="30">XmlName</name></name></expr>, <expr><name><name pos:line="80" pos:column="39">CreateFromReader</name><argument_list pos:line="80" pos:column="55">&lt;<argument><name pos:line="80" pos:column="56">TypeDefinition</name></argument>&gt;</argument_list></name></expr> }</block></expr>,
            <expr><block pos:line="81" pos:column="13">{ <expr><name><name pos:line="81" pos:column="15">MethodDefinition</name><op:operator pos:line="81" pos:column="31">.</op:operator><name pos:line="81" pos:column="32">XmlName</name></name></expr>, <expr><name><name pos:line="81" pos:column="41">CreateFromReader</name><argument_list pos:line="81" pos:column="57">&lt;<argument><name pos:line="81" pos:column="58">MethodDefinition</name></argument>&gt;</argument_list></name></expr> }</block></expr>,
            <expr><block pos:line="82" pos:column="13">{ <expr><name><name pos:line="82" pos:column="15">PropertyDefinition</name><op:operator pos:line="82" pos:column="33">.</op:operator><name pos:line="82" pos:column="34">XmlName</name></name></expr>, <expr><name><name pos:line="82" pos:column="43">CreateFromReader</name><argument_list pos:line="82" pos:column="59">&lt;<argument><name pos:line="82" pos:column="60">PropertyDefinition</name></argument>&gt;</argument_list></name></expr> }</block></expr>,
        }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="85" pos:column="9">internal</specifier> <specifier pos:line="85" pos:column="18">static</specifier> <name><name pos:line="85" pos:column="25">Dictionary</name><argument_list pos:line="85" pos:column="35">&lt;<argument><name pos:line="85" pos:column="36">string</name></argument>, <argument><name><name pos:line="85" pos:column="44">XmlInitializer</name><argument_list pos:line="85" pos:column="58">&lt;<argument><name pos:line="85" pos:column="59">Expression</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="85" pos:column="72">XmlExpressionMap</name> <init pos:line="85" pos:column="89">= <expr><op:operator pos:line="85" pos:column="91">new</op:operator> <call><name><name pos:line="85" pos:column="95">Dictionary</name><argument_list pos:line="85" pos:column="105">&lt;<argument><name pos:line="85" pos:column="106">string</name></argument>, <argument><name><name pos:line="85" pos:column="114">XmlInitializer</name><argument_list pos:line="85" pos:column="128">&lt;<argument><name pos:line="85" pos:column="129">Expression</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list pos:line="85" pos:column="141">()</argument_list></call> <block pos:line="85" pos:column="144">{
            <expr><block pos:line="86" pos:column="13">{ <expr><name><name pos:line="86" pos:column="15">Expression</name><op:operator pos:line="86" pos:column="25">.</op:operator><name pos:line="86" pos:column="26">XmlName</name></name></expr>, <expr><name><name pos:line="86" pos:column="35">CreateFromReader</name><argument_list pos:line="86" pos:column="51">&lt;<argument><name pos:line="86" pos:column="52">Expression</name></argument>&gt;</argument_list></name></expr> }</block></expr>,
            <expr><block pos:line="87" pos:column="13">{ <expr><name><name pos:line="87" pos:column="15">LiteralUse</name><op:operator pos:line="87" pos:column="25">.</op:operator><name pos:line="87" pos:column="26">XmlName</name></name></expr>, <expr><name><name pos:line="87" pos:column="35">CreateFromReader</name><argument_list pos:line="87" pos:column="51">&lt;<argument><name pos:line="87" pos:column="52">LiteralUse</name></argument>&gt;</argument_list></name></expr> }</block></expr>,
            <expr><block pos:line="88" pos:column="13">{ <expr><name><name pos:line="88" pos:column="15">MethodCall</name><op:operator pos:line="88" pos:column="25">.</op:operator><name pos:line="88" pos:column="26">XmlName</name></name></expr>, <expr><name><name pos:line="88" pos:column="35">CreateFromReader</name><argument_list pos:line="88" pos:column="51">&lt;<argument><name pos:line="88" pos:column="52">MethodCall</name></argument>&gt;</argument_list></name></expr> }</block></expr>,
            <expr><block pos:line="89" pos:column="13">{ <expr><name><name pos:line="89" pos:column="15">NameUse</name><op:operator pos:line="89" pos:column="22">.</op:operator><name pos:line="89" pos:column="23">XmlName</name></name></expr>, <expr><name><name pos:line="89" pos:column="32">CreateFromReader</name><argument_list pos:line="89" pos:column="48">&lt;<argument><name pos:line="89" pos:column="49">NameUse</name></argument>&gt;</argument_list></name></expr> }</block></expr>,
            <expr><block pos:line="90" pos:column="13">{ <expr><name><name pos:line="90" pos:column="15">NamePrefix</name><op:operator pos:line="90" pos:column="25">.</op:operator><name pos:line="90" pos:column="26">XmlName</name></name></expr>, <expr><name><name pos:line="90" pos:column="35">CreateFromReader</name><argument_list pos:line="90" pos:column="51">&lt;<argument><name pos:line="90" pos:column="52">NamePrefix</name></argument>&gt;</argument_list></name></expr> }</block></expr>,
            <expr><block pos:line="91" pos:column="13">{ <expr><name><name pos:line="91" pos:column="15">NamespaceUse</name><op:operator pos:line="91" pos:column="27">.</op:operator><name pos:line="91" pos:column="28">XmlName</name></name></expr>, <expr><name><name pos:line="91" pos:column="37">CreateFromReader</name><argument_list pos:line="91" pos:column="53">&lt;<argument><name pos:line="91" pos:column="54">NamespaceUse</name></argument>&gt;</argument_list></name></expr> }</block></expr>,
            <expr><block pos:line="92" pos:column="13">{ <expr><name><name pos:line="92" pos:column="15">OperatorUse</name><op:operator pos:line="92" pos:column="26">.</op:operator><name pos:line="92" pos:column="27">XmlName</name></name></expr>, <expr><name><name pos:line="92" pos:column="36">CreateFromReader</name><argument_list pos:line="92" pos:column="52">&lt;<argument><name pos:line="92" pos:column="53">OperatorUse</name></argument>&gt;</argument_list></name></expr> }</block></expr>,
            <expr><block pos:line="93" pos:column="13">{ <expr><name><name pos:line="93" pos:column="15">TypeUse</name><op:operator pos:line="93" pos:column="22">.</op:operator><name pos:line="93" pos:column="23">XmlName</name></name></expr>, <expr><name><name pos:line="93" pos:column="32">CreateFromReader</name><argument_list pos:line="93" pos:column="48">&lt;<argument><name pos:line="93" pos:column="49">TypeUse</name></argument>&gt;</argument_list></name></expr> }</block></expr>,
            <expr><block pos:line="94" pos:column="13">{ <expr><name><name pos:line="94" pos:column="15">TypeContainerUse</name><op:operator pos:line="94" pos:column="31">.</op:operator><name pos:line="94" pos:column="32">XmlName</name></name></expr>, <expr><name><name pos:line="94" pos:column="41">CreateFromReader</name><argument_list pos:line="94" pos:column="57">&lt;<argument><name pos:line="94" pos:column="58">TypeContainerUse</name></argument>&gt;</argument_list></name></expr> }</block></expr>,
            <expr><block pos:line="95" pos:column="13">{ <expr><name><name pos:line="95" pos:column="15">VariableDeclaration</name><op:operator pos:line="95" pos:column="34">.</op:operator><name pos:line="95" pos:column="35">XmlName</name></name></expr>, <expr><name><name pos:line="95" pos:column="44">CreateFromReader</name><argument_list pos:line="95" pos:column="60">&lt;<argument><name pos:line="95" pos:column="61">VariableDeclaration</name></argument>&gt;</argument_list></name></expr> }</block></expr>,
            <expr><block pos:line="96" pos:column="13">{ <expr><name><name pos:line="96" pos:column="15">VariableUse</name><op:operator pos:line="96" pos:column="26">.</op:operator><name pos:line="96" pos:column="27">XmlName</name></name></expr>, <expr><name><name pos:line="96" pos:column="36">CreateFromReader</name><argument_list pos:line="96" pos:column="52">&lt;<argument><name pos:line="96" pos:column="53">VariableUse</name></argument>&gt;</argument_list></name></expr> }</block></expr>,
        }</block></expr></init></decl>;</decl_stmt>
        <cpp:endregion pos:line="98" pos:column="9">#<cpp:directive pos:line="98" pos:column="10">endregion</cpp:directive> internal xml name mappings</cpp:endregion>
        
        <comment type="line" pos:line="100" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="101" pos:column="9">/// Loads serialized data from &lt;paramref name="fileName"/&gt;. If &lt;paramref name="fileName"/&gt; has</comment>
        <comment type="line" pos:line="102" pos:column="9">/// &lt;see cref="DEFAULT_COMPRESSED_EXTENSION"/&gt; as its extension it is treated as a compressed file.</comment>
        <comment type="line" pos:line="103" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="104" pos:column="9">/// &lt;param name="fileName"&gt;the file name to deserialize&lt;/param&gt;</comment>
        <comment type="line" pos:line="105" pos:column="9">/// &lt;returns&gt;The object stored in &lt;paramref name="fileName"/&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="106" pos:column="9">public</specifier> <specifier pos:line="106" pos:column="16">static</specifier> <name pos:line="106" pos:column="23">IXmlElement</name></type> <name pos:line="106" pos:column="35">Load</name><parameter_list pos:line="106" pos:column="39">(<param><decl><type><name pos:line="106" pos:column="40">string</name></type> <name pos:line="106" pos:column="47">fileName</name></decl></param>)</parameter_list> <block pos:line="106" pos:column="57">{
            <decl_stmt><decl><type><name pos:line="107" pos:column="13">var</name></type> <name pos:line="107" pos:column="17">extension</name> <init pos:line="107" pos:column="27">= <expr><call><name><name pos:line="107" pos:column="29">Path</name><op:operator pos:line="107" pos:column="33">.</op:operator><name pos:line="107" pos:column="34">GetExtension</name></name><argument_list pos:line="107" pos:column="46">(<argument><expr><name pos:line="107" pos:column="47">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="108" pos:column="13">bool</name></type> <name pos:line="108" pos:column="18">fileIsCompressed</name> <init pos:line="108" pos:column="35">= <expr><call><name><name pos:line="108" pos:column="37">extension</name><op:operator pos:line="108" pos:column="46">.</op:operator><name pos:line="108" pos:column="47">Equals</name></name><argument_list pos:line="108" pos:column="53">(<argument><expr><name pos:line="108" pos:column="54">DEFAULT_COMPRESSED_EXTENSION</name></expr></argument>, <argument><expr><name><name pos:line="108" pos:column="84">StringComparison</name><op:operator pos:line="108" pos:column="100">.</op:operator><name pos:line="108" pos:column="101">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="109" pos:column="13">return <expr><call><name pos:line="109" pos:column="20">Load</name><argument_list pos:line="109" pos:column="24">(<argument><expr><name pos:line="109" pos:column="25">fileName</name></expr></argument>, <argument><expr><name pos:line="109" pos:column="35">fileIsCompressed</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="112" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="113" pos:column="9">/// Loads serialized data from &lt;paramref name="fileName"/&gt;</comment>
        <comment type="line" pos:line="114" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="115" pos:column="9">/// &lt;param name="fileName"&gt;The file name to deserialize&lt;/param&gt;</comment>
        <comment type="line" pos:line="116" pos:column="9">/// &lt;param name="fileIsCompressed"&gt;If true, the file is decompressed through a &lt;see cref="GZipStream"/&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="117" pos:column="9">/// &lt;returns&gt;The object stored in &lt;paramref name="fileName"/&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="118" pos:column="9">public</specifier> <specifier pos:line="118" pos:column="16">static</specifier> <name pos:line="118" pos:column="23">IXmlElement</name></type> <name pos:line="118" pos:column="35">Load</name><parameter_list pos:line="118" pos:column="39">(<param><decl><type><name pos:line="118" pos:column="40">string</name></type> <name pos:line="118" pos:column="47">fileName</name></decl></param>, <param><decl><type><name pos:line="118" pos:column="57">bool</name></type> <name pos:line="118" pos:column="62">fileIsCompressed</name></decl></param>)</parameter_list> <block pos:line="118" pos:column="80">{
            <using pos:line="119" pos:column="13">using(<decl><type><name pos:line="119" pos:column="19">var</name></type> <name pos:line="119" pos:column="23">fileStream</name> <init pos:line="119" pos:column="34">= <expr><call><name><name pos:line="119" pos:column="36">File</name><op:operator pos:line="119" pos:column="40">.</op:operator><name pos:line="119" pos:column="41">OpenRead</name></name><argument_list pos:line="119" pos:column="49">(<argument><expr><name pos:line="119" pos:column="50">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>) <block pos:line="119" pos:column="61">{
                <if pos:line="120" pos:column="17">if<condition pos:line="120" pos:column="19">(<expr><name pos:line="120" pos:column="20">fileIsCompressed</name></expr>)</condition><then pos:line="120" pos:column="37"> <block pos:line="120" pos:column="38">{
                    <using pos:line="121" pos:column="21">using(<decl><type><name pos:line="121" pos:column="27">var</name></type> <name pos:line="121" pos:column="31">zipStream</name> <init pos:line="121" pos:column="41">= <expr><op:operator pos:line="121" pos:column="43">new</op:operator> <call><name pos:line="121" pos:column="47">GZipStream</name><argument_list pos:line="121" pos:column="57">(<argument><expr><name pos:line="121" pos:column="58">fileStream</name></expr></argument>, <argument><expr><name><name pos:line="121" pos:column="70">CompressionMode</name><op:operator pos:line="121" pos:column="85">.</op:operator><name pos:line="121" pos:column="86">Decompress</name></name></expr></argument>)</argument_list></call></expr></init></decl>) <block pos:line="121" pos:column="99">{
                        <return pos:line="122" pos:column="25">return <expr><call><name pos:line="122" pos:column="32">Load</name><argument_list pos:line="122" pos:column="36">(<argument><expr><name pos:line="122" pos:column="37">zipStream</name></expr></argument>)</argument_list></call></expr>;</return>
                    }</block></using>
                }</block></then> <else pos:line="124" pos:column="19">else <block pos:line="124" pos:column="24">{
                    <return pos:line="125" pos:column="21">return <expr><call><name pos:line="125" pos:column="28">Load</name><argument_list pos:line="125" pos:column="32">(<argument><expr><name pos:line="125" pos:column="33">fileStream</name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></else></if>
            }</block></using>
        }</block></function>

        <comment type="line" pos:line="130" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="131" pos:column="9">/// Loads serialized data from &lt;paramref name="inputStream"/&gt;</comment>
        <comment type="line" pos:line="132" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="133" pos:column="9">/// &lt;param name="inputStream"&gt;The stream to deserialize from&lt;/param&gt;</comment>
        <comment type="line" pos:line="134" pos:column="9">/// &lt;returns&gt;The object stored in &lt;paramref name="inputStream"/&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="135" pos:column="9">public</specifier> <specifier pos:line="135" pos:column="16">static</specifier> <name pos:line="135" pos:column="23">IXmlElement</name></type> <name pos:line="135" pos:column="35">Load</name><parameter_list pos:line="135" pos:column="39">(<param><decl><type><name pos:line="135" pos:column="40">Stream</name></type> <name pos:line="135" pos:column="47">inputStream</name></decl></param>)</parameter_list> <block pos:line="135" pos:column="60">{
            <using pos:line="136" pos:column="13">using(<decl><type><name pos:line="136" pos:column="19">var</name></type> <name pos:line="136" pos:column="23">reader</name> <init pos:line="136" pos:column="30">= <expr><call><name><name pos:line="136" pos:column="32">XmlReader</name><op:operator pos:line="136" pos:column="41">.</op:operator><name pos:line="136" pos:column="42">Create</name></name><argument_list pos:line="136" pos:column="48">(<argument><expr><name pos:line="136" pos:column="49">inputStream</name></expr></argument>)</argument_list></call></expr></init></decl>) <block pos:line="136" pos:column="63">{
                <expr_stmt><expr><call><name><name pos:line="137" pos:column="17">reader</name><op:operator pos:line="137" pos:column="23">.</op:operator><name pos:line="137" pos:column="24">MoveToContent</name></name><argument_list pos:line="137" pos:column="37">()</argument_list></call></expr>;</expr_stmt>
                <return pos:line="138" pos:column="17">return <expr><call><name pos:line="138" pos:column="24">DeserializeStatement</name><argument_list pos:line="138" pos:column="44">(<argument><expr><name pos:line="138" pos:column="45">reader</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></using>
        }</block></function>

        <comment type="line" pos:line="142" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="143" pos:column="9">/// Writes &lt;paramref name="element"/&gt; to &lt;paramref name="fileName"/&gt;.</comment>
        <comment type="line" pos:line="144" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="145" pos:column="9">/// &lt;param name="element"&gt;The element to serializer&lt;/param&gt;</comment>
        <comment type="line" pos:line="146" pos:column="9">/// &lt;param name="fileName"&gt;The file name to write &lt;paramref name="element"/&gt; to&lt;/param&gt;</comment>
        <function><type><specifier pos:line="147" pos:column="9">public</specifier> <specifier pos:line="147" pos:column="16">static</specifier> <name pos:line="147" pos:column="23">void</name></type> <name pos:line="147" pos:column="28">WriteElement</name><parameter_list pos:line="147" pos:column="40">(<param><decl><type><name pos:line="147" pos:column="41">IXmlElement</name></type> <name pos:line="147" pos:column="53">element</name></decl></param>, <param><decl><type><name pos:line="147" pos:column="62">string</name></type> <name pos:line="147" pos:column="69">fileName</name></decl></param>)</parameter_list> <block pos:line="147" pos:column="79">{
            <decl_stmt><decl><type><name pos:line="148" pos:column="13">var</name></type> <name pos:line="148" pos:column="17">extension</name> <init pos:line="148" pos:column="27">= <expr><call><name><name pos:line="148" pos:column="29">Path</name><op:operator pos:line="148" pos:column="33">.</op:operator><name pos:line="148" pos:column="34">GetExtension</name></name><argument_list pos:line="148" pos:column="46">(<argument><expr><name pos:line="148" pos:column="47">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="149" pos:column="13">var</name></type> <name pos:line="149" pos:column="17">compressionEnabled</name> <init pos:line="149" pos:column="36">= <expr><call><name><name pos:line="149" pos:column="38">extension</name><op:operator pos:line="149" pos:column="47">.</op:operator><name pos:line="149" pos:column="48">Equals</name></name><argument_list pos:line="149" pos:column="54">(<argument><expr><name pos:line="149" pos:column="55">DEFAULT_COMPRESSED_EXTENSION</name></expr></argument>, <argument><expr><name><name pos:line="149" pos:column="85">StringComparison</name><op:operator pos:line="149" pos:column="101">.</op:operator><name pos:line="149" pos:column="102">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="150" pos:column="13">WriteElement</name><argument_list pos:line="150" pos:column="25">(<argument><expr><name pos:line="150" pos:column="26">element</name></expr></argument>, <argument><expr><name pos:line="150" pos:column="35">fileName</name></expr></argument>, <argument><expr><name pos:line="150" pos:column="45">compressionEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="153" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="154" pos:column="9">/// Writes &lt;paramref name="element"/&gt; to &lt;paramref name="fileName"/&gt; with or without &lt;paramref name="compressionEnabled"/&gt;</comment>
        <comment type="line" pos:line="155" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="156" pos:column="9">/// &lt;param name="element"&gt;The element to serialize&lt;/param&gt;</comment>
        <comment type="line" pos:line="157" pos:column="9">/// &lt;param name="fileName"&gt;The file name to write &lt;paramref name="fileName"/&gt; to&lt;/param&gt;</comment>
        <comment type="line" pos:line="158" pos:column="9">/// &lt;param name="compressionEnabled"&gt;if true, compress the output with &lt;see cref="System.IO.Compression.GZipStream"/&gt;&lt;/param&gt;</comment>
        <function><type><specifier pos:line="159" pos:column="9">public</specifier> <specifier pos:line="159" pos:column="16">static</specifier> <name pos:line="159" pos:column="23">void</name></type> <name pos:line="159" pos:column="28">WriteElement</name><parameter_list pos:line="159" pos:column="40">(<param><decl><type><name pos:line="159" pos:column="41">IXmlElement</name></type> <name pos:line="159" pos:column="53">element</name></decl></param>, <param><decl><type><name pos:line="159" pos:column="62">string</name></type> <name pos:line="159" pos:column="69">fileName</name></decl></param>, <param><decl><type><name pos:line="159" pos:column="79">bool</name></type> <name pos:line="159" pos:column="84">compressionEnabled</name></decl></param>)</parameter_list> <block pos:line="159" pos:column="104">{
            <using pos:line="160" pos:column="13">using(<decl><type><name pos:line="160" pos:column="19">var</name></type> <name pos:line="160" pos:column="23">fileStream</name> <init pos:line="160" pos:column="34">= <expr><call><name><name pos:line="160" pos:column="36">File</name><op:operator pos:line="160" pos:column="40">.</op:operator><name pos:line="160" pos:column="41">OpenWrite</name></name><argument_list pos:line="160" pos:column="50">(<argument><expr><name pos:line="160" pos:column="51">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>) <block pos:line="160" pos:column="62">{
                <if pos:line="161" pos:column="17">if<condition pos:line="161" pos:column="19">(<expr><name pos:line="161" pos:column="20">compressionEnabled</name></expr>)</condition><then pos:line="161" pos:column="39"> <block pos:line="161" pos:column="40">{
                    <using pos:line="162" pos:column="21">using(<decl><type><name pos:line="162" pos:column="27">var</name></type> <name pos:line="162" pos:column="31">zipStream</name> <init pos:line="162" pos:column="41">= <expr><op:operator pos:line="162" pos:column="43">new</op:operator> <call><name pos:line="162" pos:column="47">GZipStream</name><argument_list pos:line="162" pos:column="57">(<argument><expr><name pos:line="162" pos:column="58">fileStream</name></expr></argument>, <argument><expr><name><name pos:line="162" pos:column="70">CompressionMode</name><op:operator pos:line="162" pos:column="85">.</op:operator><name pos:line="162" pos:column="86">Compress</name></name></expr></argument>)</argument_list></call></expr></init></decl>) <block pos:line="162" pos:column="97">{
                        <expr_stmt><expr><call><name pos:line="163" pos:column="25">WriteElement</name><argument_list pos:line="163" pos:column="37">(<argument><expr><name pos:line="163" pos:column="38">element</name></expr></argument>, <argument><expr><name pos:line="163" pos:column="47">zipStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></using>
                }</block></then> <else pos:line="165" pos:column="19">else <block pos:line="165" pos:column="24">{
                    <expr_stmt><expr><call><name pos:line="166" pos:column="21">WriteElement</name><argument_list pos:line="166" pos:column="33">(<argument><expr><name pos:line="166" pos:column="34">element</name></expr></argument>, <argument><expr><name pos:line="166" pos:column="43">fileStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></using>
        }</block></function>

        <comment type="line" pos:line="171" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="172" pos:column="9">/// Writes &lt;paramref name="element"/&gt; to &lt;paramref name="outputStream"/&gt;</comment>
        <comment type="line" pos:line="173" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="174" pos:column="9">/// &lt;param name="element"&gt;The element to serialize&lt;/param&gt;</comment>
        <comment type="line" pos:line="175" pos:column="9">/// &lt;param name="outputStream"&gt;The output stream&lt;/param&gt;</comment>
        <function><type><specifier pos:line="176" pos:column="9">public</specifier> <specifier pos:line="176" pos:column="16">static</specifier> <name pos:line="176" pos:column="23">void</name></type> <name pos:line="176" pos:column="28">WriteElement</name><parameter_list pos:line="176" pos:column="40">(<param><decl><type><name pos:line="176" pos:column="41">IXmlElement</name></type> <name pos:line="176" pos:column="53">element</name></decl></param>, <param><decl><type><name pos:line="176" pos:column="62">Stream</name></type> <name pos:line="176" pos:column="69">outputStream</name></decl></param>)</parameter_list> <block pos:line="176" pos:column="83">{
            <using pos:line="177" pos:column="13">using(<decl><type><name pos:line="177" pos:column="19">var</name></type> <name pos:line="177" pos:column="23">writer</name> <init pos:line="177" pos:column="30">= <expr><call><name><name pos:line="177" pos:column="32">XmlWriter</name><op:operator pos:line="177" pos:column="41">.</op:operator><name pos:line="177" pos:column="42">Create</name></name><argument_list pos:line="177" pos:column="48">(<argument><expr><name pos:line="177" pos:column="49">outputStream</name></expr></argument>)</argument_list></call></expr></init></decl>) <block pos:line="177" pos:column="64">{
                <expr_stmt><expr><call><name><name pos:line="178" pos:column="17">writer</name><op:operator pos:line="178" pos:column="23">.</op:operator><name pos:line="178" pos:column="24">WriteStartDocument</name></name><argument_list pos:line="178" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="179" pos:column="17">WriteElement</name><argument_list pos:line="179" pos:column="29">(<argument><expr><name pos:line="179" pos:column="30">writer</name></expr></argument>, <argument><expr><name pos:line="179" pos:column="38">element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="180" pos:column="17">writer</name><op:operator pos:line="180" pos:column="23">.</op:operator><name pos:line="180" pos:column="24">WriteEndDocument</name></name><argument_list pos:line="180" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
            }</block></using>
        }</block></function>

        <comment type="line" pos:line="184" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="185" pos:column="9">/// Deserializes the &lt;see cref="Expression"/&gt; at the current &lt;paramref name="reader"/&gt; position. This automatically looks up the correct</comment>
        <comment type="line" pos:line="186" pos:column="9">/// object to instantiate based on &lt;see cref="XmlReader.Name"/&gt;.</comment>
        <comment type="line" pos:line="187" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="188" pos:column="9">/// &lt;param name="reader"&gt;The XML reader&lt;/param&gt;</comment>
        <comment type="line" pos:line="189" pos:column="9">/// &lt;returns&gt;A new expression of the appropriate type&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="190" pos:column="9">internal</specifier> <specifier pos:line="190" pos:column="18">static</specifier> <name pos:line="190" pos:column="25">Expression</name></type> <name pos:line="190" pos:column="36">DeserializeExpression</name><parameter_list pos:line="190" pos:column="57">(<param><decl><type><name pos:line="190" pos:column="58">XmlReader</name></type> <name pos:line="190" pos:column="68">reader</name></decl></param>)</parameter_list> <block pos:line="190" pos:column="76">{
            <return pos:line="191" pos:column="13">return <expr><name><name pos:line="191" pos:column="20">XmlExpressionMap</name><index pos:line="191" pos:column="36">[<expr><name><name pos:line="191" pos:column="37">reader</name><op:operator pos:line="191" pos:column="43">.</op:operator><name pos:line="191" pos:column="44">Name</name></name></expr>]</index></name><op:operator pos:line="191" pos:column="49">(</op:operator><name pos:line="191" pos:column="50">reader</name><op:operator pos:line="191" pos:column="56">)</op:operator></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="194" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="195" pos:column="9">/// Deserializes the &lt;see cref="SourceLocation"/&gt; at the current &lt;paramref name="reader"/&gt; position. This automatically looks up the correct</comment>
        <comment type="line" pos:line="196" pos:column="9">/// object to instantiate based on &lt;see cref="XmlReader.Name"/&gt;.</comment>
        <comment type="line" pos:line="197" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="198" pos:column="9">/// &lt;param name="reader"&gt;The XML reader&lt;/param&gt;</comment>
        <comment type="line" pos:line="199" pos:column="9">/// &lt;returns&gt;A new location of the appropriate type&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="200" pos:column="9">internal</specifier> <specifier pos:line="200" pos:column="18">static</specifier> <name pos:line="200" pos:column="25">SourceLocation</name></type> <name pos:line="200" pos:column="40">DeserializeLocation</name><parameter_list pos:line="200" pos:column="59">(<param><decl><type><name pos:line="200" pos:column="60">XmlReader</name></type> <name pos:line="200" pos:column="70">reader</name></decl></param>)</parameter_list> <block pos:line="200" pos:column="78">{
            <return pos:line="201" pos:column="13">return <expr><name><name pos:line="201" pos:column="20">XmlLocationMap</name><index pos:line="201" pos:column="34">[<expr><name><name pos:line="201" pos:column="35">reader</name><op:operator pos:line="201" pos:column="41">.</op:operator><name pos:line="201" pos:column="42">Name</name></name></expr>]</index></name><op:operator pos:line="201" pos:column="47">(</op:operator><name pos:line="201" pos:column="48">reader</name><op:operator pos:line="201" pos:column="54">)</op:operator></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="204" pos:column="9">internal</specifier> <specifier pos:line="204" pos:column="18">static</specifier> <name pos:line="204" pos:column="25">SrcMLLocation</name></type> <name pos:line="204" pos:column="39">DeserializeSrcMLLocation</name><parameter_list pos:line="204" pos:column="63">(<param><decl><type><name pos:line="204" pos:column="64">XmlReader</name></type> <name pos:line="204" pos:column="74">reader</name></decl></param>)</parameter_list> <block pos:line="204" pos:column="82">{
            <return pos:line="205" pos:column="13">return <expr><call><name><name pos:line="205" pos:column="20">CreateFromReader</name><argument_list pos:line="205" pos:column="36">&lt;<argument><name pos:line="205" pos:column="37">SrcMLLocation</name></argument>&gt;</argument_list></name><argument_list pos:line="205" pos:column="51">(<argument><expr><name pos:line="205" pos:column="52">reader</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="208" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="209" pos:column="9">/// Deserializes the &lt;see cref="Statement"/&gt; at the current &lt;paramref name="reader"/&gt; position. This automatically looks up the correct</comment>
        <comment type="line" pos:line="210" pos:column="9">/// object to instantiate based on &lt;see cref="XmlReader.Name"/&gt;.</comment>
        <comment type="line" pos:line="211" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="212" pos:column="9">/// &lt;param name="reader"&gt;The XML reader&lt;/param&gt;</comment>
        <comment type="line" pos:line="213" pos:column="9">/// &lt;returns&gt;A new statement object of the appropriate type&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="214" pos:column="9">internal</specifier> <specifier pos:line="214" pos:column="18">static</specifier> <name pos:line="214" pos:column="25">Statement</name></type> <name pos:line="214" pos:column="35">DeserializeStatement</name><parameter_list pos:line="214" pos:column="55">(<param><decl><type><name pos:line="214" pos:column="56">XmlReader</name></type> <name pos:line="214" pos:column="66">reader</name></decl></param>)</parameter_list> <block pos:line="214" pos:column="74">{
            <return pos:line="215" pos:column="13">return <expr><name><name pos:line="215" pos:column="20">XmlStatementMap</name><index pos:line="215" pos:column="35">[<expr><name><name pos:line="215" pos:column="36">reader</name><op:operator pos:line="215" pos:column="42">.</op:operator><name pos:line="215" pos:column="43">Name</name></name></expr>]</index></name><op:operator pos:line="215" pos:column="48">(</op:operator><name pos:line="215" pos:column="49">reader</name><op:operator pos:line="215" pos:column="55">)</op:operator></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="218" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="219" pos:column="9">/// Deserializes a collection of &lt;see cref="SourceLocation"/&gt; objects from &lt;paramref name="reader"/&gt;.</comment>
        <comment type="line" pos:line="220" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="221" pos:column="9">/// &lt;param name="reader"&gt;The XML reader&lt;/param&gt;</comment>
        <comment type="line" pos:line="222" pos:column="9">/// &lt;returns&gt;An enumerable of &lt;see cref="SourceLocation"/&gt; objects&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="223" pos:column="9">internal</specifier> <specifier pos:line="223" pos:column="18">static</specifier> <name><name pos:line="223" pos:column="25">IEnumerable</name><argument_list pos:line="223" pos:column="36">&lt;<argument><name pos:line="223" pos:column="37">SourceLocation</name></argument>&gt;</argument_list></name></type> <name pos:line="223" pos:column="53">ReadChildLocations</name><parameter_list pos:line="223" pos:column="71">(<param><decl><type><name pos:line="223" pos:column="72">XmlReader</name></type> <name pos:line="223" pos:column="82">reader</name></decl></param>)</parameter_list> <block pos:line="223" pos:column="90">{ <return pos:line="223" pos:column="92">return <expr><call><name><name pos:line="223" pos:column="99">ReadChildCollection</name><argument_list pos:line="223" pos:column="118">&lt;<argument><name pos:line="223" pos:column="119">SourceLocation</name></argument>&gt;</argument_list></name><argument_list pos:line="223" pos:column="134">(<argument><expr><name pos:line="223" pos:column="135">reader</name></expr></argument>, <argument><expr><name pos:line="223" pos:column="143">DeserializeLocation</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

        <function><type><specifier pos:line="225" pos:column="9">internal</specifier> <specifier pos:line="225" pos:column="18">static</specifier> <name><name pos:line="225" pos:column="25">IEnumerable</name><argument_list pos:line="225" pos:column="36">&lt;<argument><name pos:line="225" pos:column="37">SrcMLLocation</name></argument>&gt;</argument_list></name></type> <name pos:line="225" pos:column="52">ReadChildSrcMLLocations</name><parameter_list pos:line="225" pos:column="75">(<param><decl><type><name pos:line="225" pos:column="76">XmlReader</name></type> <name pos:line="225" pos:column="86">reader</name></decl></param>)</parameter_list> <block pos:line="225" pos:column="94">{ <return pos:line="225" pos:column="96">return <expr><call><name><name pos:line="225" pos:column="103">ReadChildCollection</name><argument_list pos:line="225" pos:column="122">&lt;<argument><name pos:line="225" pos:column="123">SrcMLLocation</name></argument>&gt;</argument_list></name><argument_list pos:line="225" pos:column="137">(<argument><expr><name pos:line="225" pos:column="138">reader</name></expr></argument>, <argument><expr><name pos:line="225" pos:column="146">DeserializeSrcMLLocation</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

        <function><type><specifier pos:line="227" pos:column="9">internal</specifier> <specifier pos:line="227" pos:column="18">static</specifier> <name pos:line="227" pos:column="25">Expression</name></type> <name pos:line="227" pos:column="36">ReadChildExpression</name><parameter_list pos:line="227" pos:column="55">(<param><decl><type><name pos:line="227" pos:column="56">XmlReader</name></type> <name pos:line="227" pos:column="66">reader</name></decl></param>)</parameter_list> <block pos:line="227" pos:column="74">{ <return pos:line="227" pos:column="76">return <expr><call><name><name pos:line="227" pos:column="83">ReadChildElement</name><argument_list pos:line="227" pos:column="99">&lt;<argument><name pos:line="227" pos:column="100">Expression</name></argument>&gt;</argument_list></name><argument_list pos:line="227" pos:column="111">(<argument><expr><name pos:line="227" pos:column="112">reader</name></expr></argument>, <argument><expr><name pos:line="227" pos:column="120">DeserializeExpression</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

        <comment type="line" pos:line="229" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="230" pos:column="9">/// Deserializes a collection of &lt;see cref="Expression"/&gt; objects from &lt;paramref name="reader"/&gt;.</comment>
        <comment type="line" pos:line="231" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="232" pos:column="9">/// &lt;param name="reader"&gt;The XML reader&lt;/param&gt;</comment>
        <comment type="line" pos:line="233" pos:column="9">/// &lt;returns&gt;An enumerable of &lt;see cref="Expression"/&gt; objects&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="234" pos:column="9">internal</specifier> <specifier pos:line="234" pos:column="18">static</specifier> <name><name pos:line="234" pos:column="25">IEnumerable</name><argument_list pos:line="234" pos:column="36">&lt;<argument><name pos:line="234" pos:column="37">Expression</name></argument>&gt;</argument_list></name></type> <name pos:line="234" pos:column="49">ReadChildExpressions</name><parameter_list pos:line="234" pos:column="69">(<param><decl><type><name pos:line="234" pos:column="70">XmlReader</name></type> <name pos:line="234" pos:column="80">reader</name></decl></param>)</parameter_list> <block pos:line="234" pos:column="88">{ <return pos:line="234" pos:column="90">return <expr><call><name><name pos:line="234" pos:column="97">ReadChildCollection</name><argument_list pos:line="234" pos:column="116">&lt;<argument><name pos:line="234" pos:column="117">Expression</name></argument>&gt;</argument_list></name><argument_list pos:line="234" pos:column="128">(<argument><expr><name pos:line="234" pos:column="129">reader</name></expr></argument>, <argument><expr><name pos:line="234" pos:column="137">DeserializeExpression</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

        <function><type><specifier pos:line="236" pos:column="9">internal</specifier> <specifier pos:line="236" pos:column="18">static</specifier> <name pos:line="236" pos:column="25">Statement</name></type> <name pos:line="236" pos:column="35">ReadChildStatement</name><parameter_list pos:line="236" pos:column="53">(<param><decl><type><name pos:line="236" pos:column="54">XmlReader</name></type> <name pos:line="236" pos:column="64">reader</name></decl></param>)</parameter_list> <block pos:line="236" pos:column="72">{ <return pos:line="236" pos:column="74">return <expr><call><name><name pos:line="236" pos:column="81">ReadChildElement</name><argument_list pos:line="236" pos:column="97">&lt;<argument><name pos:line="236" pos:column="98">Statement</name></argument>&gt;</argument_list></name><argument_list pos:line="236" pos:column="108">(<argument><expr><name pos:line="236" pos:column="109">reader</name></expr></argument>, <argument><expr><name pos:line="236" pos:column="117">DeserializeStatement</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

        <comment type="line" pos:line="238" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="239" pos:column="9">/// Deserializes a collection of &lt;see cref="Statement"/&gt; objects from &lt;paramref name="reader"/&gt;.</comment>
        <comment type="line" pos:line="240" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="241" pos:column="9">/// &lt;param name="reader"&gt;The XML reader&lt;/param&gt;</comment>
        <comment type="line" pos:line="242" pos:column="9">/// &lt;returns&gt;An enumerable of &lt;see cref="Statement"/&gt; objects&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="243" pos:column="9">internal</specifier> <specifier pos:line="243" pos:column="18">static</specifier> <name><name pos:line="243" pos:column="25">IEnumerable</name><argument_list pos:line="243" pos:column="36">&lt;<argument><name pos:line="243" pos:column="37">Statement</name></argument>&gt;</argument_list></name></type> <name pos:line="243" pos:column="48">ReadChildStatements</name><parameter_list pos:line="243" pos:column="67">(<param><decl><type><name pos:line="243" pos:column="68">XmlReader</name></type> <name pos:line="243" pos:column="78">reader</name></decl></param>)</parameter_list> <block pos:line="243" pos:column="86">{ <return pos:line="243" pos:column="88">return <expr><call><name><name pos:line="243" pos:column="95">ReadChildCollection</name><argument_list pos:line="243" pos:column="114">&lt;<argument><name pos:line="243" pos:column="115">Statement</name></argument>&gt;</argument_list></name><argument_list pos:line="243" pos:column="125">(<argument><expr><name pos:line="243" pos:column="126">reader</name></expr></argument>, <argument><expr><name pos:line="243" pos:column="134">DeserializeStatement</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

        <comment type="line" pos:line="245" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="246" pos:column="9">/// Writes the &lt;paramref name="element"/&gt; with &lt;paramref name="writer"/&gt;. The element name is taken from &lt;see cref="IXmlElement.GetXmlName()"/&gt;.</comment>
        <comment type="line" pos:line="247" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="248" pos:column="9">/// &lt;param name="writer"&gt;The XML writer&lt;/param&gt;</comment>
        <comment type="line" pos:line="249" pos:column="9">/// &lt;param name="element"&gt;The object to write&lt;/param&gt;</comment>
        <comment type="line" pos:line="250" pos:column="9">/// &lt;param name="parentElementName"&gt;the parent element. If not null, &lt;paramref name="element"/&gt; is wrapped in an element with this name&lt;/param&gt;</comment>
        <function><type><specifier pos:line="251" pos:column="9">internal</specifier> <specifier pos:line="251" pos:column="18">static</specifier> <name pos:line="251" pos:column="25">void</name></type> <name pos:line="251" pos:column="30">WriteElement</name><parameter_list pos:line="251" pos:column="42">(<param><decl><type><name pos:line="251" pos:column="43">XmlWriter</name></type> <name pos:line="251" pos:column="53">writer</name></decl></param>, <param><decl><type><name pos:line="251" pos:column="61">IXmlElement</name></type> <name pos:line="251" pos:column="73">element</name></decl></param>, <param><decl><type><name pos:line="251" pos:column="82">string</name></type> <name pos:line="251" pos:column="89">parentElementName</name> <init pos:line="251" pos:column="107">= <expr><name pos:line="251" pos:column="109">null</name></expr></init></decl></param>)</parameter_list> <block pos:line="251" pos:column="115">{
            <if pos:line="252" pos:column="13">if<condition pos:line="252" pos:column="15">(<expr><op:operator pos:line="252" pos:column="16">!</op:operator><call><name><name pos:line="252" pos:column="17">String</name><op:operator pos:line="252" pos:column="23">.</op:operator><name pos:line="252" pos:column="24">IsNullOrEmpty</name></name><argument_list pos:line="252" pos:column="37">(<argument><expr><name pos:line="252" pos:column="38">parentElementName</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="252" pos:column="57"> <block pos:line="252" pos:column="58">{
                <expr_stmt><expr><call><name><name pos:line="253" pos:column="17">writer</name><op:operator pos:line="253" pos:column="23">.</op:operator><name pos:line="253" pos:column="24">WriteStartElement</name></name><argument_list pos:line="253" pos:column="41">(<argument><expr><name pos:line="253" pos:column="42">parentElementName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            
            <expr_stmt><expr><call><name><name pos:line="256" pos:column="13">writer</name><op:operator pos:line="256" pos:column="19">.</op:operator><name pos:line="256" pos:column="20">WriteStartElement</name></name><argument_list pos:line="256" pos:column="37">(<argument><expr><call><name><name pos:line="256" pos:column="38">element</name><op:operator pos:line="256" pos:column="45">.</op:operator><name pos:line="256" pos:column="46">GetXmlName</name></name><argument_list pos:line="256" pos:column="56">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="257" pos:column="13">element</name><op:operator pos:line="257" pos:column="20">.</op:operator><name pos:line="257" pos:column="21">WriteXml</name></name><argument_list pos:line="257" pos:column="29">(<argument><expr><name pos:line="257" pos:column="30">writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="258" pos:column="13">writer</name><op:operator pos:line="258" pos:column="19">.</op:operator><name pos:line="258" pos:column="20">WriteEndElement</name></name><argument_list pos:line="258" pos:column="35">()</argument_list></call></expr>;</expr_stmt>

            <if pos:line="260" pos:column="13">if<condition pos:line="260" pos:column="15">(<expr><op:operator pos:line="260" pos:column="16">!</op:operator><call><name><name pos:line="260" pos:column="17">String</name><op:operator pos:line="260" pos:column="23">.</op:operator><name pos:line="260" pos:column="24">IsNullOrEmpty</name></name><argument_list pos:line="260" pos:column="37">(<argument><expr><name pos:line="260" pos:column="38">parentElementName</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="260" pos:column="57"> <block pos:line="260" pos:column="58">{
                <expr_stmt><expr><call><name><name pos:line="261" pos:column="17">writer</name><op:operator pos:line="261" pos:column="23">.</op:operator><name pos:line="261" pos:column="24">WriteEndElement</name></name><argument_list pos:line="261" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="265" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="266" pos:column="9">/// Writes the given &lt;paramref name="collection"/&gt; to the &lt;paramref name="writer"/&gt; with the given &lt;paramref name="collectionName"&gt;collection name&lt;/paramref&gt;</comment>
        <comment type="line" pos:line="267" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="268" pos:column="9">/// &lt;typeparam name="T"&gt;the collection element type&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="269" pos:column="9">/// &lt;param name="writer"&gt;The XML writer&lt;/param&gt;</comment>
        <comment type="line" pos:line="270" pos:column="9">/// &lt;param name="collectionName"&gt;The element name to enclose the collection in&lt;/param&gt;</comment>
        <comment type="line" pos:line="271" pos:column="9">/// &lt;param name="collection"&gt;The collection to serialize&lt;/param&gt;</comment>
        <function><type><specifier pos:line="272" pos:column="9">internal</specifier> <specifier pos:line="272" pos:column="18">static</specifier> <name pos:line="272" pos:column="25">void</name></type> <name><name pos:line="272" pos:column="30">WriteCollection</name><argument_list pos:line="272" pos:column="45">&lt;<argument><name pos:line="272" pos:column="46">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="272" pos:column="48">(<param><decl><type><name pos:line="272" pos:column="49">XmlWriter</name></type> <name pos:line="272" pos:column="59">writer</name></decl></param>, <param><decl><type><name pos:line="272" pos:column="67">string</name></type> <name pos:line="272" pos:column="74">collectionName</name></decl></param>, <param><decl><type><name><name pos:line="272" pos:column="90">ICollection</name><argument_list pos:line="272" pos:column="101">&lt;<argument><name pos:line="272" pos:column="102">T</name></argument>&gt;</argument_list></name></type> <name pos:line="272" pos:column="105">collection</name></decl></param>)</parameter_list> <where pos:line="272" pos:column="117">where <name pos:line="272" pos:column="123">T</name> : <name pos:line="272" pos:column="127">IXmlElement</name></where> <block pos:line="272" pos:column="139">{
            <if pos:line="273" pos:column="13">if<condition pos:line="273" pos:column="15">(<expr><name><name pos:line="273" pos:column="16">collection</name><op:operator pos:line="273" pos:column="26">.</op:operator><name pos:line="273" pos:column="27">Count</name></name> <op:operator pos:line="273" pos:column="33">&gt;</op:operator> <lit:literal type="number" pos:line="273" pos:column="35">0</lit:literal></expr>)</condition><then pos:line="273" pos:column="37"> <block pos:line="273" pos:column="38">{
                <expr_stmt><expr><call><name><name pos:line="274" pos:column="17">writer</name><op:operator pos:line="274" pos:column="23">.</op:operator><name pos:line="274" pos:column="24">WriteStartElement</name></name><argument_list pos:line="274" pos:column="41">(<argument><expr><name pos:line="274" pos:column="42">collectionName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <foreach pos:line="275" pos:column="17">foreach(<init><decl><type><name pos:line="275" pos:column="25">var</name></type> <name pos:line="275" pos:column="29">item</name> <range pos:line="275" pos:column="34">in <expr><name pos:line="275" pos:column="37">collection</name></expr></range></decl></init>) <block pos:line="275" pos:column="49">{
                    <expr_stmt><expr><call><name pos:line="276" pos:column="21">WriteElement</name><argument_list pos:line="276" pos:column="33">(<argument><expr><name pos:line="276" pos:column="34">writer</name></expr></argument>, <argument><expr><name pos:line="276" pos:column="42">item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
                <expr_stmt><expr><call><name><name pos:line="278" pos:column="17">writer</name><op:operator pos:line="278" pos:column="23">.</op:operator><name pos:line="278" pos:column="24">WriteEndElement</name></name><argument_list pos:line="278" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="282" pos:column="9">private</specifier> <specifier pos:line="282" pos:column="17">static</specifier> <name pos:line="282" pos:column="24">T</name></type> <name><name pos:line="282" pos:column="26">ReadChildElement</name><argument_list pos:line="282" pos:column="42">&lt;<argument><name pos:line="282" pos:column="43">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="282" pos:column="45">(<param><decl><type><name pos:line="282" pos:column="46">XmlReader</name></type> <name pos:line="282" pos:column="56">reader</name></decl></param>, <param><decl><type><name><name pos:line="282" pos:column="64">XmlInitializer</name><argument_list pos:line="282" pos:column="78">&lt;<argument><name pos:line="282" pos:column="79">T</name></argument>&gt;</argument_list></name></type> <name pos:line="282" pos:column="82">initializer</name></decl></param>)</parameter_list> <where pos:line="282" pos:column="95">where <name pos:line="282" pos:column="101">T</name> : <name pos:line="282" pos:column="105">IXmlElement</name>, new()</where> <block pos:line="282" pos:column="124">{
            <decl_stmt><decl><type><name pos:line="283" pos:column="13">T</name></type> <name pos:line="283" pos:column="15">element</name> <init pos:line="283" pos:column="23">= <expr><call><name pos:line="283" pos:column="25">default</name><argument_list pos:line="283" pos:column="32">(<argument><expr><name pos:line="283" pos:column="33">T</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="284" pos:column="13">bool</name></type> <name pos:line="284" pos:column="18">isEmpty</name> <init pos:line="284" pos:column="26">= <expr><name><name pos:line="284" pos:column="28">reader</name><op:operator pos:line="284" pos:column="34">.</op:operator><name pos:line="284" pos:column="35">IsEmptyElement</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="285" pos:column="13">reader</name><op:operator pos:line="285" pos:column="19">.</op:operator><name pos:line="285" pos:column="20">ReadStartElement</name></name><argument_list pos:line="285" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
            <if pos:line="286" pos:column="13">if<condition pos:line="286" pos:column="15">(<expr><op:operator pos:line="286" pos:column="16">!</op:operator><name pos:line="286" pos:column="17">isEmpty</name></expr>)</condition><then pos:line="286" pos:column="25"> <block pos:line="286" pos:column="26">{
                <expr_stmt><expr><name pos:line="287" pos:column="17">element</name> <op:operator pos:line="287" pos:column="25">=</op:operator> <call><name pos:line="287" pos:column="27">initializer</name><argument_list pos:line="287" pos:column="38">(<argument><expr><name pos:line="287" pos:column="39">reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="288" pos:column="17">reader</name><op:operator pos:line="288" pos:column="23">.</op:operator><name pos:line="288" pos:column="24">ReadEndElement</name></name><argument_list pos:line="288" pos:column="38">()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <return pos:line="290" pos:column="13">return <expr><name pos:line="290" pos:column="20">element</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="293" pos:column="9">private</specifier> <specifier pos:line="293" pos:column="17">static</specifier> <name><name pos:line="293" pos:column="24">IEnumerable</name><argument_list pos:line="293" pos:column="35">&lt;<argument><name pos:line="293" pos:column="36">T</name></argument>&gt;</argument_list></name></type> <name><name pos:line="293" pos:column="39">ReadChildCollection</name><argument_list pos:line="293" pos:column="58">&lt;<argument><name pos:line="293" pos:column="59">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="293" pos:column="61">(<param><decl><type><name pos:line="293" pos:column="62">XmlReader</name></type> <name pos:line="293" pos:column="72">reader</name></decl></param>, <param><decl><type><name><name pos:line="293" pos:column="80">XmlInitializer</name><argument_list pos:line="293" pos:column="94">&lt;<argument><name pos:line="293" pos:column="95">T</name></argument>&gt;</argument_list></name></type> <name pos:line="293" pos:column="98">initializer</name></decl></param>)</parameter_list> <where pos:line="293" pos:column="111">where <name pos:line="293" pos:column="117">T</name> : <name pos:line="293" pos:column="121">IXmlElement</name>, new()</where> <block pos:line="293" pos:column="140">{
            <decl_stmt><decl><type><name pos:line="294" pos:column="13">bool</name></type> <name pos:line="294" pos:column="18">isEmpty</name> <init pos:line="294" pos:column="26">= <expr><name><name pos:line="294" pos:column="28">reader</name><op:operator pos:line="294" pos:column="34">.</op:operator><name pos:line="294" pos:column="35">IsEmptyElement</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="295" pos:column="13">reader</name><op:operator pos:line="295" pos:column="19">.</op:operator><name pos:line="295" pos:column="20">ReadStartElement</name></name><argument_list pos:line="295" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
            <if pos:line="296" pos:column="13">if<condition pos:line="296" pos:column="15">(<expr><op:operator pos:line="296" pos:column="16">!</op:operator><name pos:line="296" pos:column="17">isEmpty</name></expr>)</condition><then pos:line="296" pos:column="25"> <block pos:line="296" pos:column="26">{
                <while pos:line="297" pos:column="17">while<condition pos:line="297" pos:column="22">(<expr><name><name pos:line="297" pos:column="23">XmlNodeType</name><op:operator pos:line="297" pos:column="34">.</op:operator><name pos:line="297" pos:column="35">Element</name></name> <op:operator pos:line="297" pos:column="43">==</op:operator> <name><name pos:line="297" pos:column="46">reader</name><op:operator pos:line="297" pos:column="52">.</op:operator><name pos:line="297" pos:column="53">NodeType</name></name></expr>)</condition> <block pos:line="297" pos:column="63">{
                    <return><specifier pos:line="298" pos:column="21">yield</specifier> return <expr><call><name pos:line="298" pos:column="34">initializer</name><argument_list pos:line="298" pos:column="45">(<argument><expr><name pos:line="298" pos:column="46">reader</name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></while>
                <expr_stmt><expr><call><name><name pos:line="300" pos:column="17">reader</name><op:operator pos:line="300" pos:column="23">.</op:operator><name pos:line="300" pos:column="24">ReadEndElement</name></name><argument_list pos:line="300" pos:column="38">()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="304" pos:column="9">private</specifier> <specifier pos:line="304" pos:column="17">static</specifier> <name pos:line="304" pos:column="24">T</name></type> <name><name pos:line="304" pos:column="26">CreateFromReader</name><argument_list pos:line="304" pos:column="42">&lt;<argument><name pos:line="304" pos:column="43">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="304" pos:column="45">(<param><decl><type><name pos:line="304" pos:column="46">XmlReader</name></type> <name pos:line="304" pos:column="56">reader</name></decl></param>)</parameter_list> <where pos:line="304" pos:column="64">where <name pos:line="304" pos:column="70">T</name> : <name pos:line="304" pos:column="74">IXmlElement</name>, new()</where> <block pos:line="304" pos:column="93">{
            <decl_stmt><decl><type><name pos:line="305" pos:column="13">T</name></type> <name pos:line="305" pos:column="15">tObj</name> <init pos:line="305" pos:column="20">= <expr><op:operator pos:line="305" pos:column="22">new</op:operator> <call><name pos:line="305" pos:column="26">T</name><argument_list pos:line="305" pos:column="27">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="306" pos:column="13">tObj</name><op:operator pos:line="306" pos:column="17">.</op:operator><name pos:line="306" pos:column="18">ReadXml</name></name><argument_list pos:line="306" pos:column="25">(<argument><expr><name pos:line="306" pos:column="26">reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="307" pos:column="13">return <expr><name pos:line="307" pos:column="20">tObj</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
