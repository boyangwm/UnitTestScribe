<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data\StatementExtensions.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2014 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *    Patrick Francis (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="13" pos:column="1">using <name pos:line="13" pos:column="7">System</name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Collections</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">Generic</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Linq</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Text</name></name>;</using>

<namespace pos:line="18" pos:column="1">namespace <name><name pos:line="18" pos:column="11">ABB</name><op:operator pos:line="18" pos:column="14">.</op:operator><name pos:line="18" pos:column="15">SrcML</name><op:operator pos:line="18" pos:column="20">.</op:operator><name pos:line="18" pos:column="21">Data</name></name> <block pos:line="18" pos:column="26">{
    <comment type="line" pos:line="19" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="20" pos:column="5">/// The Statement Extensions class contains helper extension methods for statements</comment>
    <comment type="line" pos:line="21" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="22" pos:column="5">public</specifier> <specifier pos:line="22" pos:column="12">static</specifier> class <name pos:line="22" pos:column="25">StatementExtensions</name> <block pos:line="22" pos:column="45">{
        <comment type="line" pos:line="23" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="24" pos:column="9">/// Tests whether this method contains any calls to &lt;paramref name="otherMethod"/&gt;</comment>
        <comment type="line" pos:line="25" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="26" pos:column="9">/// &lt;param name="root"&gt;The statement to start searching from&lt;/param&gt;</comment>
        <comment type="line" pos:line="27" pos:column="9">/// &lt;param name="otherMethod"&gt;The other method&lt;/param&gt;</comment>
        <comment type="line" pos:line="28" pos:column="9">/// &lt;returns&gt;True if any of the calls in this method are a match for &lt;paramref name="otherMethod"/&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="29" pos:column="9">public</specifier> <specifier pos:line="29" pos:column="16">static</specifier> <name pos:line="29" pos:column="23">bool</name></type> <name pos:line="29" pos:column="28">ContainsCallTo</name><parameter_list pos:line="29" pos:column="42">(<param><decl><type><name pos:line="29" pos:column="43">this</name> <name pos:line="29" pos:column="48">Statement</name></type> <name pos:line="29" pos:column="58">root</name></decl></param>, <param><decl><type><name pos:line="29" pos:column="64">MethodDefinition</name></type> <name pos:line="29" pos:column="81">otherMethod</name></decl></param>)</parameter_list> <block pos:line="29" pos:column="94">{
            <if pos:line="30" pos:column="13">if<condition pos:line="30" pos:column="15">(<expr><name pos:line="30" pos:column="16">null</name> <op:operator pos:line="30" pos:column="21">==</op:operator> <name pos:line="30" pos:column="24">otherMethod</name></expr>)</condition><then pos:line="30" pos:column="36"> <block pos:line="30" pos:column="37">{ <throw pos:line="30" pos:column="39">throw <expr><op:operator pos:line="30" pos:column="45">new</op:operator> <call><name pos:line="30" pos:column="49">ArgumentNullException</name><argument_list pos:line="30" pos:column="70">(<argument><expr><lit:literal type="string" pos:line="30" pos:column="71">"otherMethod"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>

            <return pos:line="32" pos:column="13">return <expr><call><name><name pos:line="32" pos:column="20">root</name><op:operator pos:line="32" pos:column="24">.</op:operator><name pos:line="32" pos:column="25">GetCallsTo</name></name><argument_list pos:line="32" pos:column="35">(<argument><expr><name pos:line="32" pos:column="36">otherMethod</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="32" pos:column="49">true</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="32" pos:column="54">.</op:operator><call><name pos:line="32" pos:column="55">Any</name><argument_list pos:line="32" pos:column="58">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="35" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="36" pos:column="9">/// Gets all of the method calls in this statement that matches &lt;paramref name="otherMethod"/&gt;</comment>
        <comment type="line" pos:line="37" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="38" pos:column="9">/// &lt;param name="root"&gt;The statement to start searching from&lt;/param&gt;</comment>
        <comment type="line" pos:line="39" pos:column="9">/// &lt;param name="otherMethod"&gt;The other method&lt;/param&gt;</comment>
        <comment type="line" pos:line="40" pos:column="9">/// &lt;param name="searchDescendantStatements"&gt;If true, this will return all the method calls to&lt;paramref name="otherMethod"/&gt; from &lt;paramref name="root"/&gt; and its descendants&lt;/param&gt;</comment>
        <function><type><specifier pos:line="41" pos:column="9">public</specifier> <specifier pos:line="41" pos:column="16">static</specifier> <name><name pos:line="41" pos:column="23">IEnumerable</name><argument_list pos:line="41" pos:column="34">&lt;<argument><name pos:line="41" pos:column="35">MethodCall</name></argument>&gt;</argument_list></name></type> <name pos:line="41" pos:column="47">GetCallsTo</name><parameter_list pos:line="41" pos:column="57">(<param><decl><type><name pos:line="41" pos:column="58">this</name> <name pos:line="41" pos:column="63">Statement</name></type> <name pos:line="41" pos:column="73">root</name></decl></param>, <param><decl><type><name pos:line="41" pos:column="79">MethodDefinition</name></type> <name pos:line="41" pos:column="96">otherMethod</name></decl></param>, <param><decl><type><name pos:line="41" pos:column="109">bool</name></type> <name pos:line="41" pos:column="114">searchDescendantStatements</name></decl></param>)</parameter_list> <block pos:line="41" pos:column="142">{
            <if pos:line="42" pos:column="13">if<condition pos:line="42" pos:column="15">(<expr><name pos:line="42" pos:column="16">null</name> <op:operator pos:line="42" pos:column="21">==</op:operator> <name pos:line="42" pos:column="24">otherMethod</name></expr>)</condition><then pos:line="42" pos:column="36"> <block pos:line="42" pos:column="37">{ <throw pos:line="42" pos:column="39">throw <expr><op:operator pos:line="42" pos:column="45">new</op:operator> <call><name pos:line="42" pos:column="49">ArgumentNullException</name><argument_list pos:line="42" pos:column="70">(<argument><expr><lit:literal type="string" pos:line="42" pos:column="71">"otherMethod"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>

            <comment type="line" pos:line="44" pos:column="13">//first filter calls for ones with the same name, number of parameters, etc.</comment>
            <decl_stmt><decl><type><name pos:line="45" pos:column="13">var</name></type> <name pos:line="45" pos:column="17">initialMatches</name> <init pos:line="45" pos:column="32">= <expr><call><name><name pos:line="45" pos:column="34">root</name><op:operator pos:line="45" pos:column="38">.</op:operator><name><name pos:line="45" pos:column="39">FindExpressions</name><argument_list pos:line="45" pos:column="54">&lt;<argument><name pos:line="45" pos:column="55">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="45" pos:column="66">(<argument><expr><name pos:line="45" pos:column="67">searchDescendantStatements</name></expr></argument>)</argument_list></call><op:operator pos:line="45" pos:column="94">.</op:operator><call><name pos:line="45" pos:column="95">Where</name><argument_list pos:line="45" pos:column="100">(<argument><expr><lambda><name pos:line="45" pos:column="101">c</name> <op:operator pos:line="45" pos:column="103">=&gt;</op:operator> <call><name><name pos:line="45" pos:column="106">c</name><op:operator pos:line="45" pos:column="107">.</op:operator><name pos:line="45" pos:column="108">SignatureMatches</name></name><argument_list pos:line="45" pos:column="124">(<argument><expr><name pos:line="45" pos:column="125">otherMethod</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="45" pos:column="138">.</op:operator><call><name pos:line="45" pos:column="139">ToList</name><argument_list pos:line="45" pos:column="145">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="46" pos:column="13">if<condition pos:line="46" pos:column="15">(<expr><call><name><name pos:line="46" pos:column="16">initialMatches</name><op:operator pos:line="46" pos:column="30">.</op:operator><name pos:line="46" pos:column="31">Any</name></name><argument_list pos:line="46" pos:column="34">()</argument_list></call></expr>)</condition><then pos:line="46" pos:column="37"> <block pos:line="46" pos:column="38">{
                <comment type="line" pos:line="47" pos:column="17">//check whether the call actually resolves to the other method</comment>
                <foreach pos:line="48" pos:column="17">foreach(<init><decl><type><name pos:line="48" pos:column="25">var</name></type> <name pos:line="48" pos:column="29">call</name> <range pos:line="48" pos:column="34">in <expr><name pos:line="48" pos:column="37">initialMatches</name></expr></range></decl></init>) <block pos:line="48" pos:column="53">{
                    <if pos:line="49" pos:column="21">if<condition pos:line="49" pos:column="23">(<expr><call><name><name pos:line="49" pos:column="24">call</name><op:operator pos:line="49" pos:column="28">.</op:operator><name pos:line="49" pos:column="29">FindMatches</name></name><argument_list pos:line="49" pos:column="40">()</argument_list></call><op:operator pos:line="49" pos:column="42">.</op:operator><call><name pos:line="49" pos:column="43">Any</name><argument_list pos:line="49" pos:column="46">(<argument><expr><lambda><name pos:line="49" pos:column="47">m</name> <op:operator pos:line="49" pos:column="49">=&gt;</op:operator> <name pos:line="49" pos:column="52">m</name> <op:operator pos:line="49" pos:column="54">==</op:operator> <name pos:line="49" pos:column="57">otherMethod</name></lambda></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="49" pos:column="70"> <block pos:line="49" pos:column="71">{
                        <return><specifier pos:line="50" pos:column="25">yield</specifier> return <expr><name pos:line="50" pos:column="38">call</name></expr>;</return>
                    }</block></then></if>
                }</block></foreach>
            }</block></then></if>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
