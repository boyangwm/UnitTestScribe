<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Test\LastModifiedArchiveTests.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">NUnit</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">Framework</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">IO</name></name>;</using>
<namespace pos:line="7" pos:column="1">namespace <name><name pos:line="7" pos:column="11">ABB</name><op:operator pos:line="7" pos:column="14">.</op:operator><name pos:line="7" pos:column="15">SrcML</name><op:operator pos:line="7" pos:column="20">.</op:operator><name pos:line="7" pos:column="21">Test</name></name> <block pos:line="7" pos:column="26">{
    <class><attribute pos:line="8" pos:column="5">[<expr><name pos:line="8" pos:column="6">TestFixture</name></expr>]</attribute>
    <attribute pos:line="9" pos:column="5">[<expr><call><name pos:line="9" pos:column="6">Category</name><argument_list pos:line="9" pos:column="14">(<argument><expr><lit:literal type="string" pos:line="9" pos:column="15">"Build"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    class <name pos:line="10" pos:column="11">LastModifiedArchiveTests</name> <block pos:line="10" pos:column="36">{
        <decl_stmt><decl><type><specifier pos:line="11" pos:column="9">private</specifier> <name pos:line="11" pos:column="17">string</name></type> <name pos:line="11" pos:column="24">testDirectory</name> <init pos:line="11" pos:column="38">= <expr><lit:literal type="string" pos:line="11" pos:column="40">"lastmodifiedarchivetests"</lit:literal></expr></init></decl>;</decl_stmt>

        <function><type><attribute pos:line="13" pos:column="9">[<expr><name pos:line="13" pos:column="10">TestFixtureSetUp</name></expr>]</attribute>
        <specifier pos:line="14" pos:column="9">public</specifier> <name pos:line="14" pos:column="16">void</name></type> <name pos:line="14" pos:column="21">SetUp</name><parameter_list pos:line="14" pos:column="26">()</parameter_list> <block pos:line="14" pos:column="29">{
            <if pos:line="15" pos:column="13">if<condition pos:line="15" pos:column="15">(<expr><op:operator pos:line="15" pos:column="16">!</op:operator><call><name><name pos:line="15" pos:column="17">Directory</name><op:operator pos:line="15" pos:column="26">.</op:operator><name pos:line="15" pos:column="27">Exists</name></name><argument_list pos:line="15" pos:column="33">(<argument><expr><name pos:line="15" pos:column="34">testDirectory</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="15" pos:column="49"> <block pos:line="15" pos:column="50">{
                <expr_stmt><expr><call><name><name pos:line="16" pos:column="17">Directory</name><op:operator pos:line="16" pos:column="26">.</op:operator><name pos:line="16" pos:column="27">CreateDirectory</name></name><argument_list pos:line="16" pos:column="42">(<argument><expr><name pos:line="16" pos:column="43">testDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><attribute pos:line="20" pos:column="9">[<expr><name pos:line="20" pos:column="10">SetUp</name></expr>]</attribute>
        <specifier pos:line="21" pos:column="9">public</specifier> <name pos:line="21" pos:column="16">void</name></type> <name pos:line="21" pos:column="21">TestSetUp</name><parameter_list pos:line="21" pos:column="30">()</parameter_list> <block pos:line="21" pos:column="33">{
            <if pos:line="22" pos:column="13">if<condition pos:line="22" pos:column="15">(<expr><call><name><name pos:line="22" pos:column="16">Directory</name><op:operator pos:line="22" pos:column="25">.</op:operator><name pos:line="22" pos:column="26">Exists</name></name><argument_list pos:line="22" pos:column="32">(<argument><expr><name pos:line="22" pos:column="33">testDirectory</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="22" pos:column="48"> <block pos:line="22" pos:column="49">{
                <foreach pos:line="23" pos:column="17">foreach(<init><decl><type><name pos:line="23" pos:column="25">var</name></type> <name pos:line="23" pos:column="29">file</name> <range pos:line="23" pos:column="34">in <expr><call><name><name pos:line="23" pos:column="37">Directory</name><op:operator pos:line="23" pos:column="46">.</op:operator><name pos:line="23" pos:column="47">GetFiles</name></name><argument_list pos:line="23" pos:column="55">(<argument><expr><name pos:line="23" pos:column="56">testDirectory</name></expr></argument>)</argument_list></call></expr></range></decl></init>) <block pos:line="23" pos:column="72">{
                    <expr_stmt><expr><call><name><name pos:line="24" pos:column="21">File</name><op:operator pos:line="24" pos:column="25">.</op:operator><name pos:line="24" pos:column="26">Delete</name></name><argument_list pos:line="24" pos:column="32">(<argument><expr><name pos:line="24" pos:column="33">file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
            }</block></then></if>
        }</block></function>

        <function><type><attribute pos:line="29" pos:column="9">[<expr><name pos:line="29" pos:column="10">TestFixtureTearDown</name></expr>]</attribute>
        <specifier pos:line="30" pos:column="9">public</specifier> <name pos:line="30" pos:column="16">void</name></type> <name pos:line="30" pos:column="21">TearDown</name><parameter_list pos:line="30" pos:column="29">()</parameter_list> <block pos:line="30" pos:column="32">{
            <if pos:line="31" pos:column="13">if<condition pos:line="31" pos:column="15">(<expr><call><name><name pos:line="31" pos:column="16">Directory</name><op:operator pos:line="31" pos:column="25">.</op:operator><name pos:line="31" pos:column="26">Exists</name></name><argument_list pos:line="31" pos:column="32">(<argument><expr><name pos:line="31" pos:column="33">testDirectory</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="31" pos:column="48"> <block pos:line="31" pos:column="49">{
                <expr_stmt><expr><call><name><name pos:line="32" pos:column="17">Directory</name><op:operator pos:line="32" pos:column="26">.</op:operator><name pos:line="32" pos:column="27">Delete</name></name><argument_list pos:line="32" pos:column="33">(<argument><expr><name pos:line="32" pos:column="34">testDirectory</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="32" pos:column="49">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><attribute pos:line="36" pos:column="9">[<expr><name pos:line="36" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="37" pos:column="9">public</specifier> <name pos:line="37" pos:column="16">void</name></type> <name pos:line="37" pos:column="21">TestAddUpdateDelete</name><parameter_list pos:line="37" pos:column="40">()</parameter_list> <block pos:line="37" pos:column="43">{
            <decl_stmt><decl><type><name pos:line="38" pos:column="13">bool</name></type> <name pos:line="38" pos:column="18">receivedFileAdded</name> <init pos:line="38" pos:column="36">= <expr><lit:literal type="boolean" pos:line="38" pos:column="38">false</lit:literal></expr></init><op:operator pos:line="38" pos:column="43">,</op:operator> <name pos:line="38" pos:column="45">receivedFileUpdated</name> <init pos:line="38" pos:column="65">= <expr><lit:literal type="boolean" pos:line="38" pos:column="67">false</lit:literal></expr></init><op:operator pos:line="38" pos:column="72">,</op:operator> <name pos:line="38" pos:column="74">receivedFileDeleted</name> <init pos:line="38" pos:column="94">= <expr><lit:literal type="boolean" pos:line="38" pos:column="96">false</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="39" pos:column="13">LastModifiedArchive</name></type> <name pos:line="39" pos:column="33">archive</name> <init pos:line="39" pos:column="41">= <expr><op:operator pos:line="39" pos:column="43">new</op:operator> <call><name pos:line="39" pos:column="47">LastModifiedArchive</name><argument_list pos:line="39" pos:column="66">(<argument><expr><name pos:line="39" pos:column="67">testDirectory</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="40" pos:column="13">archive</name><op:operator pos:line="40" pos:column="20">.</op:operator><name pos:line="40" pos:column="21">FileChanged</name></name> <op:operator pos:line="40" pos:column="33">+=</op:operator> <lambda><parameter_list pos:line="40" pos:column="36">(<param><decl><name pos:line="40" pos:column="37">sender</name></decl></param>, <param><decl><name pos:line="40" pos:column="45">e</name></decl></param>)</parameter_list> <op:operator pos:line="40" pos:column="48">=&gt;</op:operator> <block pos:line="40" pos:column="51">{
                <switch pos:line="41" pos:column="17">switch<condition pos:line="41" pos:column="23">(<expr><name><name pos:line="41" pos:column="24">e</name><op:operator pos:line="41" pos:column="25">.</op:operator><name pos:line="41" pos:column="26">EventType</name></name></expr>)</condition> <block pos:line="41" pos:column="37">{
                    <case pos:line="42" pos:column="21">case <expr><name><name pos:line="42" pos:column="26">FileEventType</name><op:operator pos:line="42" pos:column="39">.</op:operator><name pos:line="42" pos:column="40">FileAdded</name></name></expr>:
                        <expr_stmt><expr><name pos:line="43" pos:column="25">receivedFileAdded</name> <op:operator pos:line="43" pos:column="43">=</op:operator> <lit:literal type="boolean" pos:line="43" pos:column="45">true</lit:literal></expr>;</expr_stmt>
                        <break pos:line="44" pos:column="25">break;</break>
                    </case><case pos:line="45" pos:column="21">case <expr><name><name pos:line="45" pos:column="26">FileEventType</name><op:operator pos:line="45" pos:column="39">.</op:operator><name pos:line="45" pos:column="40">FileChanged</name></name></expr>:
                        <expr_stmt><expr><name pos:line="46" pos:column="25">receivedFileUpdated</name> <op:operator pos:line="46" pos:column="45">=</op:operator> <lit:literal type="boolean" pos:line="46" pos:column="47">true</lit:literal></expr>;</expr_stmt>
                        <break pos:line="47" pos:column="25">break;</break>
                    </case><case pos:line="48" pos:column="21">case <expr><name><name pos:line="48" pos:column="26">FileEventType</name><op:operator pos:line="48" pos:column="39">.</op:operator><name pos:line="48" pos:column="40">FileDeleted</name></name></expr>:
                        <expr_stmt><expr><name pos:line="49" pos:column="25">receivedFileDeleted</name> <op:operator pos:line="49" pos:column="45">=</op:operator> <lit:literal type="boolean" pos:line="49" pos:column="47">true</lit:literal></expr>;</expr_stmt>
                        <break pos:line="50" pos:column="25">break;</break>
                </case>}</block></switch>
            }</block></lambda></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="54" pos:column="13">string</name></type> <name pos:line="54" pos:column="20">fileFoo</name> <init pos:line="54" pos:column="28">= <expr><call><name><name pos:line="54" pos:column="30">Path</name><op:operator pos:line="54" pos:column="34">.</op:operator><name pos:line="54" pos:column="35">Combine</name></name><argument_list pos:line="54" pos:column="42">(<argument><expr><name pos:line="54" pos:column="43">testDirectory</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="54" pos:column="58">"foo.txt"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="55" pos:column="13">File</name><op:operator pos:line="55" pos:column="17">.</op:operator><name pos:line="55" pos:column="18">Create</name></name><argument_list pos:line="55" pos:column="24">(<argument><expr><name pos:line="55" pos:column="25">fileFoo</name></expr></argument>)</argument_list></call><op:operator pos:line="55" pos:column="33">.</op:operator><call><name pos:line="55" pos:column="34">Dispose</name><argument_list pos:line="55" pos:column="41">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="56" pos:column="13">archive</name><op:operator pos:line="56" pos:column="20">.</op:operator><name pos:line="56" pos:column="21">AddOrUpdateFile</name></name><argument_list pos:line="56" pos:column="36">(<argument><expr><name pos:line="56" pos:column="37">fileFoo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="57" pos:column="13">Assert</name><op:operator pos:line="57" pos:column="19">.</op:operator><name pos:line="57" pos:column="20">That</name></name><argument_list pos:line="57" pos:column="24">(<argument><expr><name pos:line="57" pos:column="25">receivedFileAdded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="59" pos:column="13">Assert</name><op:operator pos:line="59" pos:column="19">.</op:operator><name pos:line="59" pos:column="20">That</name></name><argument_list pos:line="59" pos:column="24">(<argument><expr><call><name><name pos:line="59" pos:column="25">archive</name><op:operator pos:line="59" pos:column="32">.</op:operator><name pos:line="59" pos:column="33">ContainsFile</name></name><argument_list pos:line="59" pos:column="45">(<argument><expr><name pos:line="59" pos:column="46">fileFoo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="60" pos:column="13">Assert</name><op:operator pos:line="60" pos:column="19">.</op:operator><name pos:line="60" pos:column="20">IsFalse</name></name><argument_list pos:line="60" pos:column="27">(<argument><expr><call><name><name pos:line="60" pos:column="28">archive</name><op:operator pos:line="60" pos:column="35">.</op:operator><name pos:line="60" pos:column="36">IsOutdated</name></name><argument_list pos:line="60" pos:column="46">(<argument><expr><name pos:line="60" pos:column="47">fileFoo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="62" pos:column="13">System</name><op:operator pos:line="62" pos:column="19">.</op:operator><name pos:line="62" pos:column="20">Threading</name><op:operator pos:line="62" pos:column="29">.</op:operator><name pos:line="62" pos:column="30">Thread</name><op:operator pos:line="62" pos:column="36">.</op:operator><name pos:line="62" pos:column="37">Sleep</name></name><argument_list pos:line="62" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="62" pos:column="43">5000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="63" pos:column="13">File</name><op:operator pos:line="63" pos:column="17">.</op:operator><name pos:line="63" pos:column="18">AppendAllText</name></name><argument_list pos:line="63" pos:column="31">(<argument><expr><name pos:line="63" pos:column="32">fileFoo</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="63" pos:column="41">"This is bar!\n"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
            <expr_stmt><expr><call><name><name pos:line="64" pos:column="13">Assert</name><op:operator pos:line="64" pos:column="19">.</op:operator><name pos:line="64" pos:column="20">That</name></name><argument_list pos:line="64" pos:column="24">(<argument><expr><call><name><name pos:line="64" pos:column="25">archive</name><op:operator pos:line="64" pos:column="32">.</op:operator><name pos:line="64" pos:column="33">IsOutdated</name></name><argument_list pos:line="64" pos:column="43">(<argument><expr><name pos:line="64" pos:column="44">fileFoo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="65" pos:column="13">archive</name><op:operator pos:line="65" pos:column="20">.</op:operator><name pos:line="65" pos:column="21">AddOrUpdateFile</name></name><argument_list pos:line="65" pos:column="36">(<argument><expr><name pos:line="65" pos:column="37">fileFoo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="66" pos:column="13">Assert</name><op:operator pos:line="66" pos:column="19">.</op:operator><name pos:line="66" pos:column="20">That</name></name><argument_list pos:line="66" pos:column="24">(<argument><expr><name pos:line="66" pos:column="25">receivedFileUpdated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="68" pos:column="13">File</name><op:operator pos:line="68" pos:column="17">.</op:operator><name pos:line="68" pos:column="18">Delete</name></name><argument_list pos:line="68" pos:column="24">(<argument><expr><name pos:line="68" pos:column="25">fileFoo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="69" pos:column="13">Assert</name><op:operator pos:line="69" pos:column="19">.</op:operator><name pos:line="69" pos:column="20">That</name></name><argument_list pos:line="69" pos:column="24">(<argument><expr><call><name><name pos:line="69" pos:column="25">archive</name><op:operator pos:line="69" pos:column="32">.</op:operator><name pos:line="69" pos:column="33">IsOutdated</name></name><argument_list pos:line="69" pos:column="43">(<argument><expr><name pos:line="69" pos:column="44">fileFoo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="70" pos:column="13">archive</name><op:operator pos:line="70" pos:column="20">.</op:operator><name pos:line="70" pos:column="21">DeleteFile</name></name><argument_list pos:line="70" pos:column="31">(<argument><expr><name pos:line="70" pos:column="32">fileFoo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="71" pos:column="13">Assert</name><op:operator pos:line="71" pos:column="19">.</op:operator><name pos:line="71" pos:column="20">That</name></name><argument_list pos:line="71" pos:column="24">(<argument><expr><name pos:line="71" pos:column="25">receivedFileDeleted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="72" pos:column="13">Assert</name><op:operator pos:line="72" pos:column="19">.</op:operator><name pos:line="72" pos:column="20">IsFalse</name></name><argument_list pos:line="72" pos:column="27">(<argument><expr><call><name><name pos:line="72" pos:column="28">archive</name><op:operator pos:line="72" pos:column="35">.</op:operator><name pos:line="72" pos:column="36">ContainsFile</name></name><argument_list pos:line="72" pos:column="48">(<argument><expr><name pos:line="72" pos:column="49">fileFoo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="75" pos:column="9">[<expr><name pos:line="75" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="76" pos:column="9">public</specifier> <name pos:line="76" pos:column="16">void</name></type> <name pos:line="76" pos:column="21">TestRename</name><parameter_list pos:line="76" pos:column="31">()</parameter_list> <block pos:line="76" pos:column="34">{
            <decl_stmt><decl><type><name pos:line="77" pos:column="13">bool</name></type> <name pos:line="77" pos:column="18">receivedFileAdd</name> <init pos:line="77" pos:column="34">= <expr><lit:literal type="boolean" pos:line="77" pos:column="36">false</lit:literal></expr></init><op:operator pos:line="77" pos:column="41">,</op:operator> <name pos:line="77" pos:column="43">receivedFileRename</name> <init pos:line="77" pos:column="62">= <expr><lit:literal type="boolean" pos:line="77" pos:column="64">false</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="78" pos:column="13">LastModifiedArchive</name></type> <name pos:line="78" pos:column="33">archive</name> <init pos:line="78" pos:column="41">= <expr><op:operator pos:line="78" pos:column="43">new</op:operator> <call><name pos:line="78" pos:column="47">LastModifiedArchive</name><argument_list pos:line="78" pos:column="66">(<argument><expr><name pos:line="78" pos:column="67">testDirectory</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="79" pos:column="13">archive</name><op:operator pos:line="79" pos:column="20">.</op:operator><name pos:line="79" pos:column="21">FileChanged</name></name> <op:operator pos:line="79" pos:column="33">+=</op:operator> <lambda><parameter_list pos:line="79" pos:column="36">(<param><decl><name pos:line="79" pos:column="37">sender</name></decl></param>, <param><decl><name pos:line="79" pos:column="45">e</name></decl></param>)</parameter_list> <op:operator pos:line="79" pos:column="48">=&gt;</op:operator> <block pos:line="79" pos:column="51">{
                <switch pos:line="80" pos:column="17">switch<condition pos:line="80" pos:column="23">(<expr><name><name pos:line="80" pos:column="24">e</name><op:operator pos:line="80" pos:column="25">.</op:operator><name pos:line="80" pos:column="26">EventType</name></name></expr>)</condition> <block pos:line="80" pos:column="37">{
                    <case pos:line="81" pos:column="21">case <expr><name><name pos:line="81" pos:column="26">FileEventType</name><op:operator pos:line="81" pos:column="39">.</op:operator><name pos:line="81" pos:column="40">FileAdded</name></name></expr>:
                        <expr_stmt><expr><name pos:line="82" pos:column="25">receivedFileAdd</name> <op:operator pos:line="82" pos:column="41">=</op:operator> <lit:literal type="boolean" pos:line="82" pos:column="43">true</lit:literal></expr>;</expr_stmt>
                        <break pos:line="83" pos:column="25">break;</break>
                    </case><case pos:line="84" pos:column="21">case <expr><name><name pos:line="84" pos:column="26">FileEventType</name><op:operator pos:line="84" pos:column="39">.</op:operator><name pos:line="84" pos:column="40">FileRenamed</name></name></expr>:
                        <expr_stmt><expr><name pos:line="85" pos:column="25">receivedFileRename</name> <op:operator pos:line="85" pos:column="44">=</op:operator> <lit:literal type="boolean" pos:line="85" pos:column="46">true</lit:literal></expr>;</expr_stmt>
                        <break pos:line="86" pos:column="25">break;</break>
                </case>}</block></switch>
            }</block></lambda></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="89" pos:column="13">string</name></type> <name pos:line="89" pos:column="20">pathToFoo</name> <init pos:line="89" pos:column="30">= <expr><call><name><name pos:line="89" pos:column="32">Path</name><op:operator pos:line="89" pos:column="36">.</op:operator><name pos:line="89" pos:column="37">Combine</name></name><argument_list pos:line="89" pos:column="44">(<argument><expr><name pos:line="89" pos:column="45">testDirectory</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="89" pos:column="60">"foo.txt"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="90" pos:column="13">string</name></type> <name pos:line="90" pos:column="20">pathToBar</name> <init pos:line="90" pos:column="30">= <expr><call><name><name pos:line="90" pos:column="32">Path</name><op:operator pos:line="90" pos:column="36">.</op:operator><name pos:line="90" pos:column="37">Combine</name></name><argument_list pos:line="90" pos:column="44">(<argument><expr><name pos:line="90" pos:column="45">testDirectory</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="90" pos:column="60">"bar.txt"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="92" pos:column="13">File</name><op:operator pos:line="92" pos:column="17">.</op:operator><name pos:line="92" pos:column="18">Create</name></name><argument_list pos:line="92" pos:column="24">(<argument><expr><name pos:line="92" pos:column="25">pathToFoo</name></expr></argument>)</argument_list></call><op:operator pos:line="92" pos:column="35">.</op:operator><call><name pos:line="92" pos:column="36">Dispose</name><argument_list pos:line="92" pos:column="43">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="94" pos:column="13">archive</name><op:operator pos:line="94" pos:column="20">.</op:operator><name pos:line="94" pos:column="21">AddOrUpdateFile</name></name><argument_list pos:line="94" pos:column="36">(<argument><expr><name pos:line="94" pos:column="37">pathToFoo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="95" pos:column="13">Assert</name><op:operator pos:line="95" pos:column="19">.</op:operator><name pos:line="95" pos:column="20">That</name></name><argument_list pos:line="95" pos:column="24">(<argument><expr><call><name><name pos:line="95" pos:column="25">archive</name><op:operator pos:line="95" pos:column="32">.</op:operator><name pos:line="95" pos:column="33">ContainsFile</name></name><argument_list pos:line="95" pos:column="45">(<argument><expr><name pos:line="95" pos:column="46">pathToFoo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="96" pos:column="13">Assert</name><op:operator pos:line="96" pos:column="19">.</op:operator><name pos:line="96" pos:column="20">That</name></name><argument_list pos:line="96" pos:column="24">(<argument><expr><name pos:line="96" pos:column="25">receivedFileAdd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="98" pos:column="13">File</name><op:operator pos:line="98" pos:column="17">.</op:operator><name pos:line="98" pos:column="18">Move</name></name><argument_list pos:line="98" pos:column="22">(<argument><expr><name pos:line="98" pos:column="23">pathToFoo</name></expr></argument>, <argument><expr><name pos:line="98" pos:column="34">pathToBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="99" pos:column="13">Assert</name><op:operator pos:line="99" pos:column="19">.</op:operator><name pos:line="99" pos:column="20">That</name></name><argument_list pos:line="99" pos:column="24">(<argument><expr><call><name><name pos:line="99" pos:column="25">archive</name><op:operator pos:line="99" pos:column="32">.</op:operator><name pos:line="99" pos:column="33">IsOutdated</name></name><argument_list pos:line="99" pos:column="43">(<argument><expr><name pos:line="99" pos:column="44">pathToFoo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="100" pos:column="13">archive</name><op:operator pos:line="100" pos:column="20">.</op:operator><name pos:line="100" pos:column="21">RenameFile</name></name><argument_list pos:line="100" pos:column="31">(<argument><expr><name pos:line="100" pos:column="32">pathToFoo</name></expr></argument>, <argument><expr><name pos:line="100" pos:column="43">pathToBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="101" pos:column="13">Assert</name><op:operator pos:line="101" pos:column="19">.</op:operator><name pos:line="101" pos:column="20">That</name></name><argument_list pos:line="101" pos:column="24">(<argument><expr><name pos:line="101" pos:column="25">receivedFileRename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="102" pos:column="13">Assert</name><op:operator pos:line="102" pos:column="19">.</op:operator><name pos:line="102" pos:column="20">That</name></name><argument_list pos:line="102" pos:column="24">(<argument><expr><call><name><name pos:line="102" pos:column="25">archive</name><op:operator pos:line="102" pos:column="32">.</op:operator><name pos:line="102" pos:column="33">ContainsFile</name></name><argument_list pos:line="102" pos:column="45">(<argument><expr><name pos:line="102" pos:column="46">pathToBar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="103" pos:column="13">Assert</name><op:operator pos:line="103" pos:column="19">.</op:operator><name pos:line="103" pos:column="20">IsFalse</name></name><argument_list pos:line="103" pos:column="27">(<argument><expr><call><name><name pos:line="103" pos:column="28">archive</name><op:operator pos:line="103" pos:column="35">.</op:operator><name pos:line="103" pos:column="36">ContainsFile</name></name><argument_list pos:line="103" pos:column="48">(<argument><expr><name pos:line="103" pos:column="49">pathToFoo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="106" pos:column="9">[<expr><name pos:line="106" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="107" pos:column="9">public</specifier> <name pos:line="107" pos:column="16">void</name></type> <name pos:line="107" pos:column="21">TestRelativePathInsertWithFullPathCheck</name><parameter_list pos:line="107" pos:column="60">()</parameter_list> <block pos:line="107" pos:column="63">{
            <decl_stmt><decl><type><name pos:line="108" pos:column="13">LastModifiedArchive</name></type> <name pos:line="108" pos:column="33">archive</name> <init pos:line="108" pos:column="41">= <expr><op:operator pos:line="108" pos:column="43">new</op:operator> <call><name pos:line="108" pos:column="47">LastModifiedArchive</name><argument_list pos:line="108" pos:column="66">(<argument><expr><name pos:line="108" pos:column="67">testDirectory</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="109" pos:column="13">string</name></type> <name pos:line="109" pos:column="20">relativePathToFoo</name> <init pos:line="109" pos:column="38">= <expr><call><name><name pos:line="109" pos:column="40">Path</name><op:operator pos:line="109" pos:column="44">.</op:operator><name pos:line="109" pos:column="45">Combine</name></name><argument_list pos:line="109" pos:column="52">(<argument><expr><name pos:line="109" pos:column="53">testDirectory</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="109" pos:column="68">"foo.txt"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="110" pos:column="13">string</name></type> <name pos:line="110" pos:column="20">fullPathToFoo</name> <init pos:line="110" pos:column="34">= <expr><call><name><name pos:line="110" pos:column="36">Path</name><op:operator pos:line="110" pos:column="40">.</op:operator><name pos:line="110" pos:column="41">GetFullPath</name></name><argument_list pos:line="110" pos:column="52">(<argument><expr><name pos:line="110" pos:column="53">relativePathToFoo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <expr_stmt><expr><call><name><name pos:line="112" pos:column="13">File</name><op:operator pos:line="112" pos:column="17">.</op:operator><name pos:line="112" pos:column="18">Create</name></name><argument_list pos:line="112" pos:column="24">(<argument><expr><name pos:line="112" pos:column="25">relativePathToFoo</name></expr></argument>)</argument_list></call><op:operator pos:line="112" pos:column="43">.</op:operator><call><name pos:line="112" pos:column="44">Dispose</name><argument_list pos:line="112" pos:column="51">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="114" pos:column="13">archive</name><op:operator pos:line="114" pos:column="20">.</op:operator><name pos:line="114" pos:column="21">AddOrUpdateFile</name></name><argument_list pos:line="114" pos:column="36">(<argument><expr><name pos:line="114" pos:column="37">relativePathToFoo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="115" pos:column="13">Assert</name><op:operator pos:line="115" pos:column="19">.</op:operator><name pos:line="115" pos:column="20">That</name></name><argument_list pos:line="115" pos:column="24">(<argument><expr><call><name><name pos:line="115" pos:column="25">archive</name><op:operator pos:line="115" pos:column="32">.</op:operator><name pos:line="115" pos:column="33">ContainsFile</name></name><argument_list pos:line="115" pos:column="45">(<argument><expr><name pos:line="115" pos:column="46">fullPathToFoo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="118" pos:column="9">[<expr><name pos:line="118" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="119" pos:column="9">public</specifier> <name pos:line="119" pos:column="16">void</name></type> <name pos:line="119" pos:column="21">TestArchiveLoadRoundTrip</name><parameter_list pos:line="119" pos:column="45">()</parameter_list> <block pos:line="119" pos:column="48">{
            <decl_stmt><decl><type><name pos:line="120" pos:column="13">LastModifiedArchive</name></type> <name pos:line="120" pos:column="33">archive</name> <init pos:line="120" pos:column="41">= <expr><op:operator pos:line="120" pos:column="43">new</op:operator> <call><name pos:line="120" pos:column="47">LastModifiedArchive</name><argument_list pos:line="120" pos:column="66">(<argument><expr><name pos:line="120" pos:column="67">testDirectory</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="121" pos:column="13">var</name></type> <name pos:line="121" pos:column="17">archivePath</name> <init pos:line="121" pos:column="29">= <expr><name><name pos:line="121" pos:column="31">archive</name><op:operator pos:line="121" pos:column="38">.</op:operator><name pos:line="121" pos:column="39">ArchivePath</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="122" pos:column="13">string</name></type> <name pos:line="122" pos:column="20">pathToFoo</name> <init pos:line="122" pos:column="30">= <expr><call><name><name pos:line="122" pos:column="32">Path</name><op:operator pos:line="122" pos:column="36">.</op:operator><name pos:line="122" pos:column="37">GetFullPath</name></name><argument_list pos:line="122" pos:column="48">(<argument><expr><call><name><name pos:line="122" pos:column="49">Path</name><op:operator pos:line="122" pos:column="53">.</op:operator><name pos:line="122" pos:column="54">Combine</name></name><argument_list pos:line="122" pos:column="61">(<argument><expr><name pos:line="122" pos:column="62">testDirectory</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="122" pos:column="77">"foo.txt"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="124" pos:column="13">File</name><op:operator pos:line="124" pos:column="17">.</op:operator><name pos:line="124" pos:column="18">Create</name></name><argument_list pos:line="124" pos:column="24">(<argument><expr><name pos:line="124" pos:column="25">pathToFoo</name></expr></argument>)</argument_list></call><op:operator pos:line="124" pos:column="35">.</op:operator><call><name pos:line="124" pos:column="36">Dispose</name><argument_list pos:line="124" pos:column="43">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="126" pos:column="13">archive</name><op:operator pos:line="126" pos:column="20">.</op:operator><name pos:line="126" pos:column="21">AddOrUpdateFile</name></name><argument_list pos:line="126" pos:column="36">(<argument><expr><name pos:line="126" pos:column="37">pathToFoo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="128" pos:column="13">archive</name><op:operator pos:line="128" pos:column="20">.</op:operator><name pos:line="128" pos:column="21">Dispose</name></name><argument_list pos:line="128" pos:column="28">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="130" pos:column="13">Assert</name><op:operator pos:line="130" pos:column="19">.</op:operator><name pos:line="130" pos:column="20">That</name></name><argument_list pos:line="130" pos:column="24">(<argument><expr><call><name><name pos:line="130" pos:column="25">File</name><op:operator pos:line="130" pos:column="29">.</op:operator><name pos:line="130" pos:column="30">Exists</name></name><argument_list pos:line="130" pos:column="36">(<argument><expr><name pos:line="130" pos:column="37">archivePath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="132" pos:column="13">archive</name> <op:operator pos:line="132" pos:column="21">=</op:operator> <op:operator pos:line="132" pos:column="23">new</op:operator> <call><name pos:line="132" pos:column="27">LastModifiedArchive</name><argument_list pos:line="132" pos:column="46">(<argument><expr><name pos:line="132" pos:column="47">testDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="134" pos:column="13">Assert</name><op:operator pos:line="134" pos:column="19">.</op:operator><name pos:line="134" pos:column="20">That</name></name><argument_list pos:line="134" pos:column="24">(<argument><expr><call><name><name pos:line="134" pos:column="25">archive</name><op:operator pos:line="134" pos:column="32">.</op:operator><name pos:line="134" pos:column="33">ContainsFile</name></name><argument_list pos:line="134" pos:column="45">(<argument><expr><name pos:line="134" pos:column="46">pathToFoo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="137" pos:column="9">[<expr><name pos:line="137" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="138" pos:column="9">public</specifier> <name pos:line="138" pos:column="16">void</name></type> <name pos:line="138" pos:column="21">TestOutdatedWithNonExistentFiles</name><parameter_list pos:line="138" pos:column="53">()</parameter_list> <block pos:line="138" pos:column="56">{
            <decl_stmt><decl><type><name pos:line="139" pos:column="13">var</name></type> <name pos:line="139" pos:column="17">archive</name> <init pos:line="139" pos:column="25">= <expr><op:operator pos:line="139" pos:column="27">new</op:operator> <call><name pos:line="139" pos:column="31">LastModifiedArchive</name><argument_list pos:line="139" pos:column="50">(<argument><expr><name pos:line="139" pos:column="51">testDirectory</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="139" pos:column="66">"archive.txt"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="140" pos:column="13">Assert</name><op:operator pos:line="140" pos:column="19">.</op:operator><name pos:line="140" pos:column="20">IsFalse</name></name><argument_list pos:line="140" pos:column="27">(<argument><expr><call><name><name pos:line="140" pos:column="28">archive</name><op:operator pos:line="140" pos:column="35">.</op:operator><name pos:line="140" pos:column="36">IsOutdated</name></name><argument_list pos:line="140" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="140" pos:column="47">"foo.txt"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="143" pos:column="9">[<expr><name pos:line="143" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="144" pos:column="9">public</specifier> <name pos:line="144" pos:column="16">void</name></type> <name pos:line="144" pos:column="21">TestIsEmpty</name><parameter_list pos:line="144" pos:column="32">()</parameter_list> <block pos:line="144" pos:column="35">{
            <decl_stmt><decl><type><name pos:line="145" pos:column="13">var</name></type> <name pos:line="145" pos:column="17">archive</name> <init pos:line="145" pos:column="25">= <expr><op:operator pos:line="145" pos:column="27">new</op:operator> <call><name pos:line="145" pos:column="31">LastModifiedArchive</name><argument_list pos:line="145" pos:column="50">(<argument><expr><name pos:line="145" pos:column="51">testDirectory</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="145" pos:column="66">"archive.txt"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="146" pos:column="13">Assert</name><op:operator pos:line="146" pos:column="19">.</op:operator><name pos:line="146" pos:column="20">That</name></name><argument_list pos:line="146" pos:column="24">(<argument><expr><name><name pos:line="146" pos:column="25">archive</name><op:operator pos:line="146" pos:column="32">.</op:operator><name pos:line="146" pos:column="33">IsEmpty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <decl_stmt><decl><type><name pos:line="148" pos:column="13">string</name></type> <name pos:line="148" pos:column="20">pathToFoo</name> <init pos:line="148" pos:column="30">= <expr><call><name><name pos:line="148" pos:column="32">Path</name><op:operator pos:line="148" pos:column="36">.</op:operator><name pos:line="148" pos:column="37">GetFullPath</name></name><argument_list pos:line="148" pos:column="48">(<argument><expr><call><name><name pos:line="148" pos:column="49">Path</name><op:operator pos:line="148" pos:column="53">.</op:operator><name pos:line="148" pos:column="54">Combine</name></name><argument_list pos:line="148" pos:column="61">(<argument><expr><name pos:line="148" pos:column="62">testDirectory</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="148" pos:column="77">"foo.txt"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="149" pos:column="13">File</name><op:operator pos:line="149" pos:column="17">.</op:operator><name pos:line="149" pos:column="18">Create</name></name><argument_list pos:line="149" pos:column="24">(<argument><expr><name pos:line="149" pos:column="25">pathToFoo</name></expr></argument>)</argument_list></call><op:operator pos:line="149" pos:column="35">.</op:operator><call><name pos:line="149" pos:column="36">Dispose</name><argument_list pos:line="149" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="150" pos:column="13">archive</name><op:operator pos:line="150" pos:column="20">.</op:operator><name pos:line="150" pos:column="21">AddOrUpdateFile</name></name><argument_list pos:line="150" pos:column="36">(<argument><expr><name pos:line="150" pos:column="37">pathToFoo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="151" pos:column="13">Assert</name><op:operator pos:line="151" pos:column="19">.</op:operator><name pos:line="151" pos:column="20">That</name></name><argument_list pos:line="151" pos:column="24">(<argument><expr><name><name pos:line="151" pos:column="25">archive</name><op:operator pos:line="151" pos:column="32">.</op:operator><name pos:line="151" pos:column="33">IsEmpty</name></name></expr></argument>, <argument><expr><name><name pos:line="151" pos:column="42">Is</name><op:operator pos:line="151" pos:column="44">.</op:operator><name pos:line="151" pos:column="45">False</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
