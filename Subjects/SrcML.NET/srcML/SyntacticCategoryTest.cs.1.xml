<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\VisualStudio\SDML.SrcMLVSAddin.SyntaticCategory.Test\SyntacticCategoryTest.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2011 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">System</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Text</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Collections</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">Generic</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Linq</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Xml</name><op:operator pos:line="16" pos:column="17">.</op:operator><name pos:line="16" pos:column="18">Linq</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Xml</name><op:operator pos:line="17" pos:column="17">.</op:operator><name pos:line="17" pos:column="18">XPath</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">NUnit</name><op:operator pos:line="18" pos:column="12">.</op:operator><name pos:line="18" pos:column="13">Framework</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">ABB</name><op:operator pos:line="19" pos:column="10">.</op:operator><name pos:line="19" pos:column="11">SrcML</name></name>;</using>
<using pos:line="20" pos:column="1">using <name><name pos:line="20" pos:column="7">SDML</name><op:operator pos:line="20" pos:column="11">.</op:operator><name pos:line="20" pos:column="12">SrcMLVSAddin</name><op:operator pos:line="20" pos:column="24">.</op:operator><name pos:line="20" pos:column="25">SyntaticCategory</name></name>;</using>
<using pos:line="21" pos:column="1">using <name><name pos:line="21" pos:column="7">System</name><op:operator pos:line="21" pos:column="13">.</op:operator><name pos:line="21" pos:column="14">IO</name></name>;</using>


<namespace pos:line="24" pos:column="1">namespace <name><name pos:line="24" pos:column="11">SDML</name><op:operator pos:line="24" pos:column="15">.</op:operator><name pos:line="24" pos:column="16">SrcMLVSAddin</name><op:operator pos:line="24" pos:column="28">.</op:operator><name pos:line="24" pos:column="29">SyntaticCategory</name><op:operator pos:line="24" pos:column="45">.</op:operator><name pos:line="24" pos:column="46">Test</name></name>
<block pos:line="25" pos:column="1">{
    <comment type="line" pos:line="26" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="27" pos:column="5">/// Summary description for SyntacticCategoryTest</comment>
    <comment type="line" pos:line="28" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><attribute pos:line="29" pos:column="5">[<expr><name pos:line="29" pos:column="6">TestFixture</name></expr>]</attribute>
    <attribute pos:line="30" pos:column="5">[<expr><call><name pos:line="30" pos:column="6">Category</name><argument_list pos:line="30" pos:column="14">(<argument><expr><lit:literal type="string" pos:line="30" pos:column="15">"External"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="31" pos:column="5">public</specifier> class <name pos:line="31" pos:column="18">SyntacticCategoryTest</name>
    <block pos:line="32" pos:column="5">{
        <function><type><specifier pos:line="33" pos:column="9">public</specifier> <name><name pos:line="33" pos:column="16">IEnumerable</name><argument_list pos:line="33" pos:column="27">&lt;<argument><name pos:line="33" pos:column="28">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="33" pos:column="38">QueryForNew</name><parameter_list pos:line="33" pos:column="49">(<param><decl><type><name pos:line="33" pos:column="50">XElement</name></type> <name pos:line="33" pos:column="59">element</name></decl></param>)</parameter_list>
        <block pos:line="34" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="35" pos:column="13">var</name></type> <name pos:line="35" pos:column="17">uses</name> <init pos:line="35" pos:column="22">= <expr><linq><from pos:line="35" pos:column="24">from <expr><name pos:line="35" pos:column="29">use</name></expr> <in pos:line="35" pos:column="33">in <expr><call><name><name pos:line="35" pos:column="36">element</name><op:operator pos:line="35" pos:column="43">.</op:operator><name pos:line="35" pos:column="44">Descendants</name></name><argument_list pos:line="35" pos:column="55">(<argument><expr><name><name pos:line="35" pos:column="56">OP</name><op:operator pos:line="35" pos:column="58">.</op:operator><name pos:line="35" pos:column="59">Operator</name></name></expr></argument>)</argument_list></call></expr></in></from>
                       <where pos:line="36" pos:column="24">where <expr><name><name pos:line="36" pos:column="30">use</name><op:operator pos:line="36" pos:column="33">.</op:operator><name pos:line="36" pos:column="34">Value</name></name> <op:operator pos:line="36" pos:column="40">==</op:operator> <lit:literal type="string" pos:line="36" pos:column="43">"new"</lit:literal></expr></where>
                       <select pos:line="37" pos:column="24">select <expr><name pos:line="37" pos:column="31">use</name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <return pos:line="38" pos:column="13">return <expr><name pos:line="38" pos:column="20">uses</name></expr>;</return>
        }</block></function>

        <function><type><attribute pos:line="41" pos:column="9">[<expr><name pos:line="41" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="42" pos:column="9">public</specifier> <name pos:line="42" pos:column="16">void</name></type> <name pos:line="42" pos:column="21">BasicTest</name><parameter_list pos:line="42" pos:column="30">()</parameter_list>
        <block pos:line="43" pos:column="9">{
            <if pos:line="44" pos:column="13">if<condition pos:line="44" pos:column="15">(<expr><op:operator pos:line="44" pos:column="16">!</op:operator><call><name><name pos:line="44" pos:column="17">File</name><op:operator pos:line="44" pos:column="21">.</op:operator><name pos:line="44" pos:column="22">Exists</name></name><argument_list pos:line="44" pos:column="28">(<argument><expr><name><name pos:line="44" pos:column="29">Helper</name><op:operator pos:line="44" pos:column="35">.</op:operator><name pos:line="44" pos:column="36">NppXmlPath</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="44" pos:column="48"> <block pos:line="44" pos:column="49">{
                <expr_stmt><expr><call><name><name pos:line="45" pos:column="17">Assert</name><op:operator pos:line="45" pos:column="23">.</op:operator><name pos:line="45" pos:column="24">Ignore</name></name><argument_list pos:line="45" pos:column="30">(<argument><expr><call><name><name pos:line="45" pos:column="31">String</name><op:operator pos:line="45" pos:column="37">.</op:operator><name pos:line="45" pos:column="38">Format</name></name><argument_list pos:line="45" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="45" pos:column="45">"SrcML for Notepad++ is not available at {0}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="92">Helper</name><op:operator pos:line="45" pos:column="98">.</op:operator><name pos:line="45" pos:column="99">NppXmlPath</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <decl_stmt><decl><type><name pos:line="47" pos:column="13">var</name></type> <name pos:line="47" pos:column="17">document</name> <init pos:line="47" pos:column="26">= <expr><op:operator pos:line="47" pos:column="28">new</op:operator> <call><name pos:line="47" pos:column="32">SrcMLFile</name><argument_list pos:line="47" pos:column="41">(<argument><expr><name><name pos:line="47" pos:column="42">Helper</name><op:operator pos:line="47" pos:column="48">.</op:operator><name pos:line="47" pos:column="49">NppXmlPath</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="49" pos:column="13">var</name></type> <name pos:line="49" pos:column="17">newUses</name> <init pos:line="49" pos:column="25">= <expr><linq><from pos:line="49" pos:column="27">from <expr><name pos:line="49" pos:column="32">unit</name></expr> <in pos:line="49" pos:column="37">in <expr><name><name pos:line="49" pos:column="40">document</name><op:operator pos:line="49" pos:column="48">.</op:operator><name pos:line="49" pos:column="49">FileUnits</name></name></expr></in></from>
                          <from pos:line="50" pos:column="27">from <expr><name pos:line="50" pos:column="32">use</name></expr> <in pos:line="50" pos:column="36">in <expr><call><name pos:line="50" pos:column="39">QueryForNew</name><argument_list pos:line="50" pos:column="50">(<argument><expr><name pos:line="50" pos:column="51">unit</name></expr></argument>)</argument_list></call></expr></in></from>
                          <select pos:line="51" pos:column="27">select <expr><name pos:line="51" pos:column="34">use</name></expr></select></linq></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="53" pos:column="13">SyntaticCategoryDataModel</name></type> <name pos:line="53" pos:column="39">model</name> <init pos:line="53" pos:column="45">= <expr><op:operator pos:line="53" pos:column="47">new</op:operator> <call><name pos:line="53" pos:column="51">SyntaticCategoryDataModel</name><argument_list pos:line="53" pos:column="76">()</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <foreach pos:line="55" pos:column="13">foreach (<init><decl><type><name pos:line="55" pos:column="22">var</name></type> <name pos:line="55" pos:column="26">element</name> <range pos:line="55" pos:column="34">in <expr><name pos:line="55" pos:column="37">newUses</name></expr></range></decl></init>)
            <block pos:line="56" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="57" pos:column="17">var</name></type> <name pos:line="57" pos:column="21">occurrence</name> <init pos:line="57" pos:column="32">= <expr><op:operator pos:line="57" pos:column="34">new</op:operator> <call><name pos:line="57" pos:column="38">SyntaticOccurance</name><argument_list pos:line="57" pos:column="55">(<argument><expr><name pos:line="57" pos:column="56">model</name></expr></argument>, <argument><expr><name pos:line="57" pos:column="63">element</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            }</block></foreach>

            <comment type="line" pos:line="60" pos:column="13">//Console.WriteLine("{0} uses of the \"new\" operator in {1} categories", newUses.Count(), model.SyntaticCategories.Keys.Count);</comment>
            
            <foreach pos:line="62" pos:column="13">foreach (<init><decl><type><name pos:line="62" pos:column="22">var</name></type> <name pos:line="62" pos:column="26">category</name> <range pos:line="62" pos:column="35">in <expr><name><name pos:line="62" pos:column="38">model</name><op:operator pos:line="62" pos:column="43">.</op:operator><name pos:line="62" pos:column="44">SyntaticCategories</name><op:operator pos:line="62" pos:column="62">.</op:operator><name pos:line="62" pos:column="63">Keys</name></name></expr></range></decl></init>)
            <block pos:line="63" pos:column="13">{
                
                <decl_stmt><decl><type><name pos:line="65" pos:column="17">var</name></type> <name pos:line="65" pos:column="21">xpath</name> <init pos:line="65" pos:column="27">= <expr><name><name pos:line="65" pos:column="29">model</name><op:operator pos:line="65" pos:column="34">.</op:operator><name pos:line="65" pos:column="35">SyntaticCategories</name><index pos:line="65" pos:column="53">[<expr><name pos:line="65" pos:column="54">category</name></expr>]</index></name><op:operator pos:line="65" pos:column="63">.</op:operator><call><name pos:line="65" pos:column="64">First</name><argument_list pos:line="65" pos:column="69">()</argument_list></call><op:operator pos:line="65" pos:column="71">.</op:operator><name pos:line="65" pos:column="72">CategoryAsXPath</name></expr></init></decl>;</decl_stmt><comment type="line" pos:line="65" pos:column="88">//.Substring(1);</comment>

                <decl_stmt><decl><type><name pos:line="67" pos:column="17">var</name></type> <name pos:line="67" pos:column="21">results</name> <init pos:line="67" pos:column="29">= <expr><linq><from pos:line="67" pos:column="31">from <expr><name pos:line="67" pos:column="36">use</name></expr> <in pos:line="67" pos:column="40">in <expr><name pos:line="67" pos:column="43">newUses</name></expr></in></from>
                              <let pos:line="68" pos:column="31">let <expr><name pos:line="68" pos:column="35">occurrence</name> <op:operator pos:line="68" pos:column="46">=</op:operator> <op:operator pos:line="68" pos:column="48">new</op:operator> <call><name pos:line="68" pos:column="52">SyntaticOccurance</name><argument_list pos:line="68" pos:column="69">(<argument><expr><name pos:line="68" pos:column="70">model</name></expr></argument>, <argument><expr><name pos:line="68" pos:column="77">use</name></expr></argument>)</argument_list></call></expr></let>
                              <where pos:line="69" pos:column="31">where <expr><name><name pos:line="69" pos:column="37">occurrence</name><op:operator pos:line="69" pos:column="47">.</op:operator><name pos:line="69" pos:column="48">CategoryAsXPath</name></name> <op:operator pos:line="69" pos:column="64">==</op:operator> <name pos:line="69" pos:column="67">xpath</name></expr></where>
                              <select pos:line="70" pos:column="31">select <expr><name pos:line="70" pos:column="38">use</name></expr></select></linq></expr></init></decl>;</decl_stmt>

                <comment type="line" pos:line="72" pos:column="17">//Console.WriteLine("{0,3} uses of the new operator in {1}", results.Count(), xpath);</comment>
                <expr_stmt><expr><call><name><name pos:line="73" pos:column="17">Assert</name><op:operator pos:line="73" pos:column="23">.</op:operator><name pos:line="73" pos:column="24">AreEqual</name></name><argument_list pos:line="73" pos:column="32">(<argument><expr><name><name pos:line="73" pos:column="33">model</name><op:operator pos:line="73" pos:column="38">.</op:operator><name pos:line="73" pos:column="39">SyntaticCategories</name><index pos:line="73" pos:column="57">[<expr><name pos:line="73" pos:column="58">category</name></expr>]</index></name><op:operator pos:line="73" pos:column="67">.</op:operator><name pos:line="73" pos:column="68">Count</name></expr></argument>, <argument><expr><call><name><name pos:line="73" pos:column="75">results</name><op:operator pos:line="73" pos:column="82">.</op:operator><name pos:line="73" pos:column="83">Count</name></name><argument_list pos:line="73" pos:column="88">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="73" pos:column="92">category</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
