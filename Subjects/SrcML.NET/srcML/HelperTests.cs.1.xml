<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Test\HelperTests.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2010 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">System</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Text</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Collections</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">Generic</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Linq</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">NUnit</name><op:operator pos:line="16" pos:column="12">.</op:operator><name pos:line="16" pos:column="13">Framework</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">IO</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Xml</name><op:operator pos:line="18" pos:column="17">.</op:operator><name pos:line="18" pos:column="18">XPath</name></name>;</using>
<namespace pos:line="19" pos:column="1">namespace <name><name pos:line="19" pos:column="11">ABB</name><op:operator pos:line="19" pos:column="14">.</op:operator><name pos:line="19" pos:column="15">SrcML</name><op:operator pos:line="19" pos:column="20">.</op:operator><name pos:line="19" pos:column="21">Test</name></name>
<block pos:line="20" pos:column="1">{
    <class><attribute pos:line="21" pos:column="5">[<expr><name pos:line="21" pos:column="6">TestFixture</name></expr>]</attribute>
    <attribute pos:line="22" pos:column="5">[<expr><call><name pos:line="22" pos:column="6">Category</name><argument_list pos:line="22" pos:column="14">(<argument><expr><lit:literal type="string" pos:line="22" pos:column="15">"Build"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="23" pos:column="5">public</specifier> class <name pos:line="23" pos:column="18">HelperTests</name>
    <block pos:line="24" pos:column="5">{
        <function><type><attribute pos:line="25" pos:column="9">[<expr><name pos:line="25" pos:column="10">TearDown</name></expr>]</attribute>
        <specifier pos:line="26" pos:column="9">public</specifier> <name pos:line="26" pos:column="16">void</name></type> <name pos:line="26" pos:column="21">HelperTestsCleanup</name><parameter_list pos:line="26" pos:column="39">()</parameter_list>
        <block pos:line="27" pos:column="9">{
            <if pos:line="28" pos:column="13">if <condition pos:line="28" pos:column="16">(<expr><call><name><name pos:line="28" pos:column="17">File</name><op:operator pos:line="28" pos:column="21">.</op:operator><name pos:line="28" pos:column="22">Exists</name></name><argument_list pos:line="28" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="28" pos:column="29">"test.xml"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="28" pos:column="41">
                <expr_stmt><expr><call><name><name pos:line="29" pos:column="17">File</name><op:operator pos:line="29" pos:column="21">.</op:operator><name pos:line="29" pos:column="22">Delete</name></name><argument_list pos:line="29" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="29" pos:column="29">"test.xml"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></function>

        <function><type><attribute pos:line="32" pos:column="9">[<expr><name pos:line="32" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="33" pos:column="9">public</specifier> <name pos:line="33" pos:column="16">void</name></type> <name pos:line="33" pos:column="21">GetXPathExtensionTest</name><parameter_list pos:line="33" pos:column="42">()</parameter_list>
        <block pos:line="34" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="35" pos:column="13">File</name><op:operator pos:line="35" pos:column="17">.</op:operator><name pos:line="35" pos:column="18">WriteAllText</name></name><argument_list pos:line="35" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="35" pos:column="31">"test.xml"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="35" pos:column="43">@"&lt;?xml version=""1.0"" encoding=""utf-&gt;
&lt;unit  xmlns=""http://www.sdml.info/srcML/src"" xmlns:cpp=""http://www.sdml.info/srcML/c&gt;
&lt;unit languageFilter=""C"" filename=""c:\Test\myapp&gt;
&lt;cpp:include&gt;#&lt;cpp:directive&gt;include&lt;/cpp:directive&gt; &lt;cpp:file&gt;&amp;lt;stdio.h&amp;gt;&lt;/cpp:file&gt;&lt;/cpp:include&gt;

&lt;function_decl&gt;&lt;type&gt;&lt;name&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name&gt;foo&lt;/name&gt;&lt;parameter_list&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;a&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;, &lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;b&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt;;&lt;/function_decl&gt;

&lt;method&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;main&lt;/name&gt;&lt;parameter_list&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;argc&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;, &lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;char&lt;/name&gt; **&lt;/type&gt;&lt;name&gt;argv&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt;
&lt;block&gt;{
        &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;foo&lt;/name&gt;&lt;argument_list&gt;(&lt;argument&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;atoi&lt;/name&gt;&lt;argument_list&gt;(&lt;argument&gt;&lt;expr&gt;&lt;name&gt;&lt;name&gt;argv&lt;/name&gt;&lt;index&gt;[&lt;expr&gt;1&lt;/expr&gt;]&lt;/index&gt;&lt;/name&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;&lt;/argument&gt;, &lt;argument&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;atoi&lt;/name&gt;&lt;argument_list&gt;(&lt;argument&gt;&lt;expr&gt;&lt;name&gt;&lt;name&gt;argv&lt;/name&gt;&lt;index&gt;[&lt;expr&gt;2&lt;/expr&gt;]&lt;/index&gt;&lt;/name&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
        &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;printf&lt;/name&gt;&lt;argument_list&gt;(&lt;argument&gt;&lt;expr&gt;""Finished with %s and %s&lt;/expr&gt;&lt;/argument&gt;, &lt;argument&gt;&lt;expr&gt;&lt;name&gt;&lt;name&gt;argv&lt;/name&gt;&lt;index&gt;[&lt;expr&gt;1&lt;/expr&gt;]&lt;/index&gt;&lt;/name&gt;&lt;/expr&gt;&lt;/argument&gt;, &lt;argument&gt;&lt;expr&gt;&lt;name&gt;&lt;name&gt;argv&lt;/name&gt;&lt;index&gt;[&lt;expr&gt;2&lt;/expr&gt;]&lt;/index&gt;&lt;/name&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
        &lt;return&gt;return &lt;expr&gt;0&lt;/expr&gt;;&lt;/return&gt;
}&lt;/block&gt;&lt;/method&gt;

&lt;method&gt;&lt;type&gt;&lt;name&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name&gt;foo&lt;/name&gt;&lt;parameter_list&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;a&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;, &lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;b&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt;
&lt;block&gt;{
        &lt;for&gt;for(&lt;init&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;i&lt;/name&gt; =&lt;init&gt; &lt;expr&gt;&lt;name&gt;a&lt;/name&gt;&lt;/expr&gt;&lt;/init&gt;&lt;/decl&gt;;&lt;/init&gt; &lt;condition&gt;&lt;expr&gt;&lt;name&gt;i&lt;/name&gt; &amp;lt; &lt;name&gt;b&lt;/name&gt;&lt;/expr&gt;;&lt;/condition&gt; &lt;incr&gt;&lt;expr&gt;&lt;name&gt;i&lt;/name&gt;++&lt;/expr&gt;&lt;/incr&gt;)
        &lt;block&gt;{
                &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;printf&lt;/name&gt;&lt;argument_list&gt;(&lt;argument&gt;&lt;expr&gt;&lt;name&gt;i&lt;/name&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
        }&lt;/block&gt;&lt;/for&gt;
}&lt;/block&gt;&lt;/method&gt;
&lt;/unit&gt;
&lt;unit languageFilter=""C"" filename=""c:\Test\bar&gt;&lt;comment type=""line&gt;//line1&lt;/comment&gt;
&lt;comment type=""line&gt;//line2&lt;/comment&gt;
&lt;/unit&gt;
&lt;/unit&gt;"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="61" pos:column="13">SrcMLFile</name></type> <name pos:line="61" pos:column="23">doc</name> <init pos:line="61" pos:column="27">= <expr><op:operator pos:line="61" pos:column="29">new</op:operator> <call><name pos:line="61" pos:column="33">SrcMLFile</name><argument_list pos:line="61" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="61" pos:column="43">"test.xml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <foreach pos:line="63" pos:column="13">foreach (<init><decl><type><name pos:line="63" pos:column="22">var</name></type> <name pos:line="63" pos:column="26">unit</name> <range pos:line="63" pos:column="31">in <expr><name><name pos:line="63" pos:column="34">doc</name><op:operator pos:line="63" pos:column="37">.</op:operator><name pos:line="63" pos:column="38">FileUnits</name></name></expr></range></decl></init>)
            <block pos:line="64" pos:column="13">{
                <foreach pos:line="65" pos:column="17">foreach (<init><decl><type><name pos:line="65" pos:column="26">var</name></type> <name pos:line="65" pos:column="30">element</name> <range pos:line="65" pos:column="38">in <expr><call><name><name pos:line="65" pos:column="41">unit</name><op:operator pos:line="65" pos:column="45">.</op:operator><name pos:line="65" pos:column="46">Descendants</name></name><argument_list pos:line="65" pos:column="57">()</argument_list></call></expr></range></decl></init>)
                <block pos:line="66" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="67" pos:column="21">var</name></type> <name pos:line="67" pos:column="25">xpath</name> <init pos:line="67" pos:column="31">= <expr><call><name><name pos:line="67" pos:column="33">element</name><op:operator pos:line="67" pos:column="40">.</op:operator><name pos:line="67" pos:column="41">GetXPath</name></name><argument_list pos:line="67" pos:column="49">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    
                    <comment type="line" pos:line="69" pos:column="21">// Console.WriteLine("{0}: {1}\n", element.ToSource(), xpath);</comment>
                    <decl_stmt><decl><type><name pos:line="70" pos:column="21">var</name></type> <name pos:line="70" pos:column="25">elementsFromXPath</name> <init pos:line="70" pos:column="43">= <expr><call><name><name pos:line="70" pos:column="45">unit</name><op:operator pos:line="70" pos:column="49">.</op:operator><name pos:line="70" pos:column="50">XPathSelectElements</name></name><argument_list pos:line="70" pos:column="69">(<argument><expr><name pos:line="70" pos:column="70">xpath</name></expr></argument>, <argument><expr><name><name pos:line="70" pos:column="77">SrcML</name><op:operator pos:line="70" pos:column="82">.</op:operator><name pos:line="70" pos:column="83">NamespaceManager</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="71" pos:column="21">Assert</name><op:operator pos:line="71" pos:column="27">.</op:operator><name pos:line="71" pos:column="28">AreEqual</name></name><argument_list pos:line="71" pos:column="36">(<argument><expr><lit:literal type="number" pos:line="71" pos:column="37">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="71" pos:column="40">elementsFromXPath</name><op:operator pos:line="71" pos:column="57">.</op:operator><name pos:line="71" pos:column="58">Count</name></name><argument_list pos:line="71" pos:column="63">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="72" pos:column="21">Assert</name><op:operator pos:line="72" pos:column="27">.</op:operator><name pos:line="72" pos:column="28">AreEqual</name></name><argument_list pos:line="72" pos:column="36">(<argument><expr><name pos:line="72" pos:column="37">element</name></expr></argument>, <argument><expr><call><name><name pos:line="72" pos:column="46">elementsFromXPath</name><op:operator pos:line="72" pos:column="63">.</op:operator><name pos:line="72" pos:column="64">First</name></name><argument_list pos:line="72" pos:column="69">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
            }</block></foreach>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
