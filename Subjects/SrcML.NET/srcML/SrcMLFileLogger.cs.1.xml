<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML\Utilities\SrcMLFileLogger.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">IO</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Reflection</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>
<using pos:line="5" pos:column="1">using <name pos:line="5" pos:column="7">log4net</name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">log4net</name><op:operator pos:line="6" pos:column="14">.</op:operator><name pos:line="6" pos:column="15">Appender</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">log4net</name><op:operator pos:line="7" pos:column="14">.</op:operator><name pos:line="7" pos:column="15">Config</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">log4net</name><op:operator pos:line="8" pos:column="14">.</op:operator><name pos:line="8" pos:column="15">Layout</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">log4net</name><op:operator pos:line="9" pos:column="14">.</op:operator><name pos:line="9" pos:column="15">Repository</name><op:operator pos:line="9" pos:column="25">.</op:operator><name pos:line="9" pos:column="26">Hierarchy</name></name>;</using>

<namespace pos:line="11" pos:column="1">namespace <name><name pos:line="11" pos:column="11">ABB</name><op:operator pos:line="11" pos:column="14">.</op:operator><name pos:line="11" pos:column="15">SrcML</name><op:operator pos:line="11" pos:column="20">.</op:operator><name pos:line="11" pos:column="21">Utilities</name></name> <block pos:line="11" pos:column="31">{
    <comment type="line" pos:line="12" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="13" pos:column="5">/// File logger for SrcML.NET</comment>
    <comment type="line" pos:line="14" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="15" pos:column="5">public</specifier> class <name pos:line="15" pos:column="18">SrcMLFileLogger</name> <block pos:line="15" pos:column="34">{

        <comment type="block" pos:line="17" pos:column="9">/*
        public static string MyLoggerName { get; set; }

        public static ILog CreateFileLogger(string loggerName) {
            MyLoggerName = loggerName;
            return LogManager.GetLogger(loggerName);
        }
        */</comment>

        <comment type="line" pos:line="26" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="27" pos:column="9">/// Create a file logger</comment>
        <comment type="line" pos:line="28" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="29" pos:column="9">/// &lt;param name="loggerName"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="30" pos:column="9">/// &lt;param name="filePath"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="31" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="32" pos:column="9">public</specifier> <specifier pos:line="32" pos:column="16">static</specifier> <name pos:line="32" pos:column="23">ILog</name></type> <name pos:line="32" pos:column="28">CreateFileLogger</name><parameter_list pos:line="32" pos:column="44">(<param><decl><type><name pos:line="32" pos:column="45">string</name></type> <name pos:line="32" pos:column="52">loggerName</name></decl></param>, <param><decl><type><name pos:line="32" pos:column="64">string</name></type> <name pos:line="32" pos:column="71">filePath</name></decl></param>)</parameter_list> <block pos:line="32" pos:column="81">{
            <decl_stmt><decl><type><name pos:line="33" pos:column="13">var</name></type> <name pos:line="33" pos:column="17">appender</name> <init pos:line="33" pos:column="26">= <expr><call><name pos:line="33" pos:column="28">CreateFileAppender</name><argument_list pos:line="33" pos:column="46">(<argument><expr><name pos:line="33" pos:column="47">loggerName</name> <op:operator pos:line="33" pos:column="58">+</op:operator> <lit:literal type="string" pos:line="33" pos:column="60">"Appender"</lit:literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="72">filePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="34" pos:column="13">AddAppender</name><argument_list pos:line="34" pos:column="24">(<argument><expr><name pos:line="34" pos:column="25">loggerName</name></expr></argument>, <argument><expr><name pos:line="34" pos:column="37">appender</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="35" pos:column="13">return <expr><call><name><name pos:line="35" pos:column="20">LogManager</name><op:operator pos:line="35" pos:column="30">.</op:operator><name pos:line="35" pos:column="31">GetLogger</name></name><argument_list pos:line="35" pos:column="40">(<argument><expr><name pos:line="35" pos:column="41">loggerName</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="38" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="39" pos:column="9">/// Return the default logger</comment>
        <comment type="line" pos:line="40" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="41" pos:column="9">public</specifier> <specifier pos:line="41" pos:column="16">static</specifier> <name pos:line="41" pos:column="23">ILog</name></type> <name pos:line="41" pos:column="28">DefaultLogger</name> <block pos:line="41" pos:column="42">{
            <function><name pos:line="42" pos:column="13">get</name> <block pos:line="42" pos:column="17">{
                <return pos:line="43" pos:column="17">return <expr><call><name><name pos:line="43" pos:column="24">LogManager</name><op:operator pos:line="43" pos:column="34">.</op:operator><name pos:line="43" pos:column="35">GetLogger</name></name><argument_list pos:line="43" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="43" pos:column="45">"DefaultLogger"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="block" pos:line="47" pos:column="9">/*
        public static ILog MyLogger {
            get {
                return LogManager.GetLogger(MyLoggerName);
            }
        }
        */</comment>

        <function><type><specifier pos:line="55" pos:column="9">private</specifier> <specifier pos:line="55" pos:column="17">static</specifier> <name pos:line="55" pos:column="24">void</name></type> <name pos:line="55" pos:column="29">AddAppender</name><parameter_list pos:line="55" pos:column="40">(<param><decl><type><name pos:line="55" pos:column="41">string</name></type> <name pos:line="55" pos:column="48">loggerName</name></decl></param>, <param><decl><type><name pos:line="55" pos:column="60">IAppender</name></type> <name pos:line="55" pos:column="70">appender</name></decl></param>)</parameter_list> <block pos:line="55" pos:column="80">{
            <decl_stmt><decl><type><name pos:line="56" pos:column="13">var</name></type> <name pos:line="56" pos:column="17">log</name> <init pos:line="56" pos:column="21">= <expr><call><name><name pos:line="56" pos:column="23">LogManager</name><op:operator pos:line="56" pos:column="33">.</op:operator><name pos:line="56" pos:column="34">GetLogger</name></name><argument_list pos:line="56" pos:column="43">(<argument><expr><name pos:line="56" pos:column="44">loggerName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="57" pos:column="13">var</name></type> <name pos:line="57" pos:column="17">logger</name> <init pos:line="57" pos:column="24">= <expr><op:operator pos:line="57" pos:column="26">(</op:operator><name pos:line="57" pos:column="27">Logger</name><op:operator pos:line="57" pos:column="33">)</op:operator><name><name pos:line="57" pos:column="34">log</name><op:operator pos:line="57" pos:column="37">.</op:operator><name pos:line="57" pos:column="38">Logger</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="59" pos:column="13">logger</name><op:operator pos:line="59" pos:column="19">.</op:operator><name pos:line="59" pos:column="20">AddAppender</name></name><argument_list pos:line="59" pos:column="31">(<argument><expr><name pos:line="59" pos:column="32">appender</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="60" pos:column="13">logger</name><op:operator pos:line="60" pos:column="19">.</op:operator><name pos:line="60" pos:column="20">Repository</name><op:operator pos:line="60" pos:column="30">.</op:operator><name pos:line="60" pos:column="31">Configured</name></name> <op:operator pos:line="60" pos:column="42">=</op:operator> <lit:literal type="boolean" pos:line="60" pos:column="44">true</lit:literal></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="63" pos:column="9">private</specifier> <specifier pos:line="63" pos:column="17">static</specifier> <name pos:line="63" pos:column="24">IAppender</name></type> <name pos:line="63" pos:column="34">CreateFileAppender</name><parameter_list pos:line="63" pos:column="52">(<param><decl><type><name pos:line="63" pos:column="53">string</name></type> <name pos:line="63" pos:column="60">name</name></decl></param>, <param><decl><type><name pos:line="63" pos:column="66">string</name></type> <name pos:line="63" pos:column="73">fileName</name></decl></param>)</parameter_list> <block pos:line="63" pos:column="83">{
            <decl_stmt><decl><type><name pos:line="64" pos:column="13">var</name></type> <name pos:line="64" pos:column="17">appender</name> <init pos:line="64" pos:column="26">= <expr><op:operator pos:line="64" pos:column="28">new</op:operator> <name pos:line="64" pos:column="32">FileAppender</name> <block pos:line="64" pos:column="45">{
                <expr><name pos:line="65" pos:column="17">Name</name> <op:operator pos:line="65" pos:column="22">=</op:operator> <name pos:line="65" pos:column="24">name</name></expr>,
                <expr><name pos:line="66" pos:column="17">File</name> <op:operator pos:line="66" pos:column="22">=</op:operator> <name pos:line="66" pos:column="24">fileName</name></expr>,
                <expr><name pos:line="67" pos:column="17">AppendToFile</name> <op:operator pos:line="67" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="67" pos:column="32">false</lit:literal></expr>,
                <expr><name pos:line="68" pos:column="17">ImmediateFlush</name> <op:operator pos:line="68" pos:column="32">=</op:operator> <lit:literal type="boolean" pos:line="68" pos:column="34">true</lit:literal></expr>,
                <expr><name pos:line="69" pos:column="17">LockingModel</name> <op:operator pos:line="69" pos:column="30">=</op:operator> <op:operator pos:line="69" pos:column="32">new</op:operator> <call><name><name pos:line="69" pos:column="36">FileAppender</name><op:operator pos:line="69" pos:column="48">.</op:operator><name pos:line="69" pos:column="49">MinimalLock</name></name><argument_list pos:line="69" pos:column="60">()</argument_list></call></expr>
            }</block></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="72" pos:column="13">var</name></type> <name pos:line="72" pos:column="17">layout</name> <init pos:line="72" pos:column="24">= <expr><op:operator pos:line="72" pos:column="26">new</op:operator> <name pos:line="72" pos:column="30">PatternLayout</name> <block pos:line="72" pos:column="44">{
                <expr><name pos:line="73" pos:column="17">ConversionPattern</name> <op:operator pos:line="73" pos:column="35">=</op:operator> <lit:literal type="string" pos:line="73" pos:column="37">"%date %-5level %logger - %message%newline "</lit:literal></expr>
            }</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="75" pos:column="13">layout</name><op:operator pos:line="75" pos:column="19">.</op:operator><name pos:line="75" pos:column="20">ActivateOptions</name></name><argument_list pos:line="75" pos:column="35">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name pos:line="77" pos:column="13">appender</name><op:operator pos:line="77" pos:column="21">.</op:operator><name pos:line="77" pos:column="22">Layout</name></name> <op:operator pos:line="77" pos:column="29">=</op:operator> <name pos:line="77" pos:column="31">layout</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="78" pos:column="13">appender</name><op:operator pos:line="78" pos:column="21">.</op:operator><name pos:line="78" pos:column="22">ActivateOptions</name></name><argument_list pos:line="78" pos:column="37">()</argument_list></call></expr>;</expr_stmt>

            <return pos:line="80" pos:column="13">return <expr><name pos:line="80" pos:column="20">appender</name></expr>;</return>
        }</block></function>

        <constructor><specifier pos:line="83" pos:column="9">static</specifier> <name pos:line="83" pos:column="16">SrcMLFileLogger</name><parameter_list pos:line="83" pos:column="31">()</parameter_list> <block pos:line="83" pos:column="34">{
            <decl_stmt><decl><type><name pos:line="84" pos:column="13">var</name></type> <name pos:line="84" pos:column="17">fileInfo</name> <init pos:line="84" pos:column="26">= <expr><op:operator pos:line="84" pos:column="28">new</op:operator> <call><name pos:line="84" pos:column="32">FileInfo</name><argument_list pos:line="84" pos:column="40">(<argument><expr><call><name><name pos:line="84" pos:column="41">Assembly</name><op:operator pos:line="84" pos:column="49">.</op:operator><name pos:line="84" pos:column="50">GetCallingAssembly</name></name><argument_list pos:line="84" pos:column="68">()</argument_list></call><op:operator pos:line="84" pos:column="70">.</op:operator><name pos:line="84" pos:column="71">Location</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="85" pos:column="13">var</name></type> <name pos:line="85" pos:column="17">defaultLogPath</name> <init pos:line="85" pos:column="32">= <expr><call><name><name pos:line="85" pos:column="34">Path</name><op:operator pos:line="85" pos:column="38">.</op:operator><name pos:line="85" pos:column="39">Combine</name></name><argument_list pos:line="85" pos:column="46">(<argument><expr><name><name pos:line="85" pos:column="47">fileInfo</name><op:operator pos:line="85" pos:column="55">.</op:operator><name pos:line="85" pos:column="56">DirectoryName</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="85" pos:column="71">"SrcML.NETService"</lit:literal> <op:operator pos:line="85" pos:column="90">+</op:operator> <call><name><name pos:line="85" pos:column="92">Guid</name><op:operator pos:line="85" pos:column="96">.</op:operator><name pos:line="85" pos:column="97">NewGuid</name></name><argument_list pos:line="85" pos:column="104">()</argument_list></call> <op:operator pos:line="85" pos:column="107">+</op:operator> <lit:literal type="string" pos:line="85" pos:column="109">".log"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="86" pos:column="13">//var defaultLogPath = Path.Combine("C:\\Data\\", "SrcML.NETServicee_" + MyLoggerName + "_" + Guid.NewGuid() + ".log");</comment>
            <expr_stmt><expr><call><name pos:line="87" pos:column="13">CreateDefaultLogger</name><argument_list pos:line="87" pos:column="32">(<argument><expr><name pos:line="87" pos:column="33">defaultLogPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier pos:line="90" pos:column="9">private</specifier> <specifier pos:line="90" pos:column="17">static</specifier> <name pos:line="90" pos:column="24">void</name></type> <name pos:line="90" pos:column="29">CreateDefaultLogger</name><parameter_list pos:line="90" pos:column="48">(<param><decl><type><name pos:line="90" pos:column="49">string</name></type> <name pos:line="90" pos:column="56">defaultLoggerLogFile</name></decl></param>)</parameter_list> <block pos:line="90" pos:column="78">{
            <decl_stmt><decl><type><name pos:line="91" pos:column="13">string</name></type> <name pos:line="91" pos:column="20">configurationContent</name> <init pos:line="91" pos:column="41">=
                <expr><lit:literal type="string" pos:line="92" pos:column="17">@"&lt;?xml version='1.0'?&gt;
				&lt;log4net&gt;
					&lt;appender name='DefaultFileAppender' type='log4net.Appender.FileAppender'&gt;
						&lt;file value='"</lit:literal> <op:operator pos:line="95" pos:column="64">+</op:operator> <name pos:line="95" pos:column="66">defaultLoggerLogFile</name> <op:operator pos:line="95" pos:column="87">+</op:operator> <lit:literal type="string" pos:line="95" pos:column="89">@"' /&gt;
						&lt;appendToFile value='false' /&gt;
						&lt;lockingModel type='log4net.Appender.FileAppender+MinimalLock' /&gt;
						&lt;layout type='log4net.Layout.PatternLayout'&gt;
							&lt;conversionPattern value='%date %-5level %logger - %message%newline' /&gt;
						&lt;/layout&gt;
					&lt;/appender&gt;

                    &lt;logger name='DefaultLogger' additivity='false'&gt;
                        &lt;level value='ALL' /&gt;
                        &lt;appender-ref ref='DefaultFileAppender' /&gt;
                    &lt;/logger&gt;
    
					&lt;root&gt;
						&lt;level value='DEBUG' /&gt;
						&lt;appender-ref ref='DefaultFileAppender' /&gt;
					&lt;/root&gt;
				&lt;/log4net&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="113" pos:column="13">XmlConfigurator</name><op:operator pos:line="113" pos:column="28">.</op:operator><name pos:line="113" pos:column="29">Configure</name></name><argument_list pos:line="113" pos:column="38">(<argument><expr><op:operator pos:line="113" pos:column="39">new</op:operator> <call><name pos:line="113" pos:column="43">MemoryStream</name><argument_list pos:line="113" pos:column="55">(<argument><expr><call><name><name pos:line="113" pos:column="56">Encoding</name><op:operator pos:line="113" pos:column="64">.</op:operator><name pos:line="113" pos:column="65">Default</name><op:operator pos:line="113" pos:column="72">.</op:operator><name pos:line="113" pos:column="73">GetBytes</name></name><argument_list pos:line="113" pos:column="81">(<argument><expr><name pos:line="113" pos:column="82">configurationContent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
