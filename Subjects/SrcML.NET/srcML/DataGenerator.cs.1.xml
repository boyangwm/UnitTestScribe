<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data\DataGenerator.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2014 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - Initial implementation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">System</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Collections</name><op:operator pos:line="13" pos:column="25">.</op:operator><name pos:line="13" pos:column="26">Generic</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">IO</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Linq</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Text</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Xml</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Xml</name><op:operator pos:line="18" pos:column="17">.</op:operator><name pos:line="18" pos:column="18">Linq</name></name>;</using>

<namespace pos:line="20" pos:column="1">namespace <name><name pos:line="20" pos:column="11">ABB</name><op:operator pos:line="20" pos:column="14">.</op:operator><name pos:line="20" pos:column="15">SrcML</name><op:operator pos:line="20" pos:column="20">.</op:operator><name pos:line="20" pos:column="21">Data</name></name> <block pos:line="20" pos:column="26">{
    <comment type="line" pos:line="21" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="22" pos:column="5">/// </comment>
    <comment type="line" pos:line="23" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="24" pos:column="5">public</specifier> class <name pos:line="24" pos:column="18">DataGenerator</name> <super pos:line="24" pos:column="32">: <name pos:line="24" pos:column="34">AbstractGenerator</name></super> <block pos:line="24" pos:column="52">{
        <decl_stmt><decl><type><specifier pos:line="25" pos:column="9">private</specifier> <specifier pos:line="25" pos:column="17">static</specifier> <name><name pos:line="25" pos:column="24">List</name><argument_list pos:line="25" pos:column="28">&lt;<argument><name pos:line="25" pos:column="29">string</name></argument>&gt;</argument_list></name></type> <name pos:line="25" pos:column="37">_supportedExtensions</name> <init pos:line="25" pos:column="58">= <expr><op:operator pos:line="25" pos:column="60">new</op:operator> <call><name><name pos:line="25" pos:column="64">List</name><argument_list pos:line="25" pos:column="68">&lt;<argument><name pos:line="25" pos:column="69">string</name></argument>&gt;</argument_list></name><argument_list pos:line="25" pos:column="76">()</argument_list></call> <block pos:line="25" pos:column="79">{ <expr><lit:literal type="string" pos:line="25" pos:column="81">".xml"</lit:literal></expr> }</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="26" pos:column="9">private</specifier> <name pos:line="26" pos:column="17">TextWriter</name></type> <name pos:line="26" pos:column="28">_unknownLog</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="28" pos:column="9">private</specifier> <name><name pos:line="28" pos:column="17">Dictionary</name><argument_list pos:line="28" pos:column="27">&lt;<argument><name pos:line="28" pos:column="28">Language</name></argument>, <argument><name pos:line="28" pos:column="38">AbstractCodeParser</name></argument>&gt;</argument_list></name></type> <name pos:line="28" pos:column="58">_parserMap</name> <init pos:line="28" pos:column="69">= <expr><op:operator pos:line="28" pos:column="71">new</op:operator> <call><name><name pos:line="28" pos:column="75">Dictionary</name><argument_list pos:line="28" pos:column="85">&lt;<argument><name pos:line="28" pos:column="86">Language</name></argument>, <argument><name pos:line="28" pos:column="96">AbstractCodeParser</name></argument>&gt;</argument_list></name><argument_list pos:line="28" pos:column="115">()</argument_list></call> <block pos:line="28" pos:column="118">{
            <expr><block pos:line="29" pos:column="13">{ <expr><name><name pos:line="29" pos:column="15">Language</name><op:operator pos:line="29" pos:column="23">.</op:operator><name pos:line="29" pos:column="24">C</name></name></expr>, <expr><op:operator pos:line="29" pos:column="27">new</op:operator> <call><name pos:line="29" pos:column="31">CPlusPlusCodeParser</name><argument_list pos:line="29" pos:column="50">()</argument_list></call></expr> }</block></expr>,
            <expr><block pos:line="30" pos:column="13">{ <expr><name><name pos:line="30" pos:column="15">Language</name><op:operator pos:line="30" pos:column="23">.</op:operator><name pos:line="30" pos:column="24">CPlusPlus</name></name></expr>, <expr><op:operator pos:line="30" pos:column="35">new</op:operator> <call><name pos:line="30" pos:column="39">CPlusPlusCodeParser</name><argument_list pos:line="30" pos:column="58">()</argument_list></call></expr> }</block></expr>,
            <expr><block pos:line="31" pos:column="13">{ <expr><name><name pos:line="31" pos:column="15">Language</name><op:operator pos:line="31" pos:column="23">.</op:operator><name pos:line="31" pos:column="24">CSharp</name></name></expr>, <expr><op:operator pos:line="31" pos:column="32">new</op:operator> <call><name pos:line="31" pos:column="36">CSharpCodeParser</name><argument_list pos:line="31" pos:column="52">()</argument_list></call></expr> }</block></expr>,
            <expr><block pos:line="32" pos:column="13">{ <expr><name><name pos:line="32" pos:column="15">Language</name><op:operator pos:line="32" pos:column="23">.</op:operator><name pos:line="32" pos:column="24">Java</name></name></expr>, <expr><op:operator pos:line="32" pos:column="30">new</op:operator> <call><name pos:line="32" pos:column="34">JavaCodeParser</name><argument_list pos:line="32" pos:column="48">()</argument_list></call></expr> }</block></expr>,
        }</block></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="35" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="36" pos:column="9">/// The data generator supports the same set of extensions ".xml" as its extension</comment>
        <comment type="line" pos:line="37" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="38" pos:column="9">public</specifier> <specifier pos:line="38" pos:column="16">override</specifier> <name><name pos:line="38" pos:column="25">ICollection</name><argument_list pos:line="38" pos:column="36">&lt;<argument><name pos:line="38" pos:column="37">string</name></argument>&gt;</argument_list></name></type> <name pos:line="38" pos:column="45">SupportedExtensions</name> <block pos:line="38" pos:column="65">{
            <function><name pos:line="39" pos:column="13">get</name> <block pos:line="39" pos:column="17">{ <return pos:line="39" pos:column="19">return <expr><name pos:line="39" pos:column="26">_supportedExtensions</name></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="42" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="43" pos:column="9">/// Sets the &lt;see cref="AbstractCodeParser.UnknownLog"/&gt; property for each &lt;see cref="AbstractCodeParser"/&gt;.</comment>
        <comment type="line" pos:line="44" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="45" pos:column="9">public</specifier> <name pos:line="45" pos:column="16">TextWriter</name></type> <name pos:line="45" pos:column="27">UnknownLog</name> <block pos:line="45" pos:column="38">{
            <function><name pos:line="46" pos:column="13">get</name> <block pos:line="46" pos:column="17">{ <return pos:line="46" pos:column="19">return <expr><name pos:line="46" pos:column="26">_unknownLog</name></expr>;</return> }</block></function>
            <function><name pos:line="47" pos:column="13">set</name> <block pos:line="47" pos:column="17">{ 
                <decl_stmt><decl><type><name pos:line="48" pos:column="17">TextWriter</name></type> <name pos:line="48" pos:column="28">writer</name> <init pos:line="48" pos:column="35">= <expr><op:operator pos:line="48" pos:column="37">(</op:operator><name pos:line="48" pos:column="38">value</name> <op:operator pos:line="48" pos:column="44">!=</op:operator> <name pos:line="48" pos:column="47">null</name> <op:operator pos:line="48" pos:column="52">?</op:operator> <call><name><name pos:line="48" pos:column="54">TextWriter</name><op:operator pos:line="48" pos:column="64">.</op:operator><name pos:line="48" pos:column="65">Synchronized</name></name><argument_list pos:line="48" pos:column="77">(<argument><expr><name pos:line="48" pos:column="78">value</name></expr></argument>)</argument_list></call> <op:operator pos:line="48" pos:column="85">:</op:operator> <name pos:line="48" pos:column="87">null</name><op:operator pos:line="48" pos:column="91">)</op:operator></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name pos:line="49" pos:column="17">_unknownLog</name> <op:operator pos:line="49" pos:column="29">=</op:operator> <name pos:line="49" pos:column="31">writer</name></expr>;</expr_stmt>
                <foreach pos:line="50" pos:column="17">foreach(<init><decl><type><name pos:line="50" pos:column="25">var</name></type> <name pos:line="50" pos:column="29">parser</name> <range pos:line="50" pos:column="36">in <expr><name><name pos:line="50" pos:column="39">_parserMap</name><op:operator pos:line="50" pos:column="49">.</op:operator><name pos:line="50" pos:column="50">Values</name></name></expr></range></decl></init>) <block pos:line="50" pos:column="58">{
                    <expr_stmt><expr><name><name pos:line="51" pos:column="21">parser</name><op:operator pos:line="51" pos:column="27">.</op:operator><name pos:line="51" pos:column="28">UnknownLog</name></name> <op:operator pos:line="51" pos:column="39">=</op:operator> <name pos:line="51" pos:column="41">writer</name></expr>;</expr_stmt>
                }</block></foreach>
            }</block></function>
        }</block></decl></decl_stmt>
        <comment type="line" pos:line="55" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="56" pos:column="9">/// Creates a new data generator with no unknown logger</comment>
        <comment type="line" pos:line="57" pos:column="9">/// &lt;/summary&gt;</comment>
        <constructor><specifier pos:line="58" pos:column="9">public</specifier> <name pos:line="58" pos:column="16">DataGenerator</name><parameter_list pos:line="58" pos:column="29">()</parameter_list> <member_list pos:line="58" pos:column="32">: <call><name pos:line="58" pos:column="34">base</name><argument_list pos:line="58" pos:column="38">()</argument_list></call> </member_list><block pos:line="58" pos:column="41">{
            <expr_stmt><expr><name pos:line="59" pos:column="13">UnknownLog</name> <op:operator pos:line="59" pos:column="24">=</op:operator> <name pos:line="59" pos:column="26">null</name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="62" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="63" pos:column="9">/// Parses a srcML file and returns a &lt;see cref="NamespaceDefinition"/&gt;</comment>
        <comment type="line" pos:line="64" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="65" pos:column="9">/// &lt;param name="srcMLFileName"&gt;The path to the srcML file&lt;/param&gt;</comment>
        <comment type="line" pos:line="66" pos:column="9">/// &lt;returns&gt;The namespace definition for &lt;paramref name="srcMLFileName"/&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="67" pos:column="9">public</specifier> <name pos:line="67" pos:column="16">NamespaceDefinition</name></type> <name pos:line="67" pos:column="36">Parse</name><parameter_list pos:line="67" pos:column="41">(<param><decl><type><name pos:line="67" pos:column="42">string</name></type> <name pos:line="67" pos:column="49">srcMLFileName</name></decl></param>)</parameter_list> <block pos:line="67" pos:column="64">{
            <decl_stmt><decl><type><name pos:line="68" pos:column="13">var</name></type> <name pos:line="68" pos:column="17">unit</name> <init pos:line="68" pos:column="22">= <expr><call><name><name pos:line="68" pos:column="24">SrcMLElement</name><op:operator pos:line="68" pos:column="36">.</op:operator><name pos:line="68" pos:column="37">Load</name></name><argument_list pos:line="68" pos:column="41">(<argument><expr><name pos:line="68" pos:column="42">srcMLFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="69" pos:column="13">return <expr><call><name pos:line="69" pos:column="20">Parse</name><argument_list pos:line="69" pos:column="25">(<argument><expr><name pos:line="69" pos:column="26">unit</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
        <comment type="line" pos:line="71" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="72" pos:column="9">/// Parses a srcML file unit element</comment>
        <comment type="line" pos:line="73" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="74" pos:column="9">/// &lt;param name="fileUnit"&gt;The srcML file unit element&lt;/param&gt;</comment>
        <comment type="line" pos:line="75" pos:column="9">/// &lt;returns&gt;The namespace definition for &lt;paramref name="fileUnit"/&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="76" pos:column="9">public</specifier> <name pos:line="76" pos:column="16">NamespaceDefinition</name></type> <name pos:line="76" pos:column="36">Parse</name><parameter_list pos:line="76" pos:column="41">(<param><decl><type><name pos:line="76" pos:column="42">XElement</name></type> <name pos:line="76" pos:column="51">fileUnit</name></decl></param>)</parameter_list> <block pos:line="76" pos:column="61">{
            <decl_stmt><decl><type><name pos:line="77" pos:column="13">var</name></type> <name pos:line="77" pos:column="17">language</name> <init pos:line="77" pos:column="26">= <expr><call><name><name pos:line="77" pos:column="28">SrcMLElement</name><op:operator pos:line="77" pos:column="40">.</op:operator><name pos:line="77" pos:column="41">GetLanguageForUnit</name></name><argument_list pos:line="77" pos:column="59">(<argument><expr><name pos:line="77" pos:column="60">fileUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="78" pos:column="13">return <expr><name><name pos:line="78" pos:column="20">_parserMap</name><index pos:line="78" pos:column="30">[<expr><name pos:line="78" pos:column="31">language</name></expr>]</index></name><op:operator pos:line="78" pos:column="40">.</op:operator><call><name pos:line="78" pos:column="41">ParseFileUnit</name><argument_list pos:line="78" pos:column="54">(<argument><expr><name pos:line="78" pos:column="55">fileUnit</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="81" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="82" pos:column="9">/// Generates &lt;paramref name="outputFileName"/&gt; from the srcML file designated by &lt;paramref name="inputFileName"/&gt;.</comment>
        <comment type="line" pos:line="83" pos:column="9">/// This works by calling &lt;see cref="Parse(string)"/&gt;.</comment>
        <comment type="line" pos:line="84" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="85" pos:column="9">/// &lt;param name="inputFileName"&gt;The path to a srcML file&lt;/param&gt;</comment>
        <comment type="line" pos:line="86" pos:column="9">/// &lt;param name="outputFileName"&gt;the path to store the resulting namespace definition in.&lt;/param&gt;</comment>
        <comment type="line" pos:line="87" pos:column="9">/// &lt;returns&gt;true if &lt;paramref name="outputFileName"/&gt; was created; false otherwise.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="88" pos:column="9">protected</specifier> <specifier pos:line="88" pos:column="19">override</specifier> <name pos:line="88" pos:column="28">bool</name></type> <name pos:line="88" pos:column="33">GenerateImpl</name><parameter_list pos:line="88" pos:column="45">(<param><decl><type><name pos:line="88" pos:column="46">string</name></type> <name pos:line="88" pos:column="53">inputFileName</name></decl></param>, <param><decl><type><name pos:line="88" pos:column="68">string</name></type> <name pos:line="88" pos:column="75">outputFileName</name></decl></param>)</parameter_list> <block pos:line="88" pos:column="91">{
            <try pos:line="89" pos:column="13">try <block pos:line="89" pos:column="17">{
                <decl_stmt><decl><type><name pos:line="90" pos:column="17">var</name></type> <name pos:line="90" pos:column="21">data</name> <init pos:line="90" pos:column="26">= <expr><call><name pos:line="90" pos:column="28">Parse</name><argument_list pos:line="90" pos:column="33">(<argument><expr><name pos:line="90" pos:column="34">inputFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="91" pos:column="17">XmlSerialization</name><op:operator pos:line="91" pos:column="33">.</op:operator><name pos:line="91" pos:column="34">WriteElement</name></name><argument_list pos:line="91" pos:column="46">(<argument><expr><name pos:line="91" pos:column="47">data</name></expr></argument>, <argument><expr><name pos:line="91" pos:column="53">outputFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="92" pos:column="17">return <expr><lit:literal type="boolean" pos:line="92" pos:column="24">true</lit:literal></expr>;</return>
            }</block> <catch pos:line="93" pos:column="15">catch<parameter_list pos:line="93" pos:column="20">(<param><decl><type><name pos:line="93" pos:column="21">XmlException</name></type></decl></param>)</parameter_list> <block pos:line="93" pos:column="35">{
                <return pos:line="94" pos:column="17">return <expr><lit:literal type="boolean" pos:line="94" pos:column="24">false</lit:literal></expr>;</return>
            }</block></catch> <catch pos:line="95" pos:column="15">catch<parameter_list pos:line="95" pos:column="20">(<param><decl><type><name pos:line="95" pos:column="21">FileNotFoundException</name></type></decl></param>)</parameter_list> <block pos:line="95" pos:column="44">{
                <return pos:line="96" pos:column="17">return <expr><lit:literal type="boolean" pos:line="96" pos:column="24">false</lit:literal></expr>;</return>
            }</block></catch> <catch pos:line="97" pos:column="15">catch<parameter_list pos:line="97" pos:column="20">(<param><decl><type><name pos:line="97" pos:column="21">ArgumentNullException</name></type></decl></param>)</parameter_list> <block pos:line="97" pos:column="44">{
                <return pos:line="98" pos:column="17">return <expr><lit:literal type="boolean" pos:line="98" pos:column="24">false</lit:literal></expr>;</return>
            }</block></catch></try>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
