<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data.Test\QueryTests.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">NUnit</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">Framework</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">IO</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Threading</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">ABB</name><op:operator pos:line="5" pos:column="10">.</op:operator><name pos:line="5" pos:column="11">SrcML</name><op:operator pos:line="5" pos:column="16">.</op:operator><name pos:line="5" pos:column="17">Data</name><op:operator pos:line="5" pos:column="21">.</op:operator><name pos:line="5" pos:column="22">Queries</name></name>;</using>

<namespace pos:line="7" pos:column="1">namespace <name><name pos:line="7" pos:column="11">ABB</name><op:operator pos:line="7" pos:column="14">.</op:operator><name pos:line="7" pos:column="15">SrcML</name><op:operator pos:line="7" pos:column="20">.</op:operator><name pos:line="7" pos:column="21">Data</name><op:operator pos:line="7" pos:column="25">.</op:operator><name pos:line="7" pos:column="26">Test</name></name> <block pos:line="7" pos:column="31">{

    <class><attribute pos:line="9" pos:column="5">[<expr><name pos:line="9" pos:column="6">TestFixture</name></expr>]</attribute>
    <attribute pos:line="10" pos:column="5">[<expr><call><name pos:line="10" pos:column="6">Category</name><argument_list pos:line="10" pos:column="14">(<argument><expr><lit:literal type="string" pos:line="10" pos:column="15">"Build"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="11" pos:column="5">public</specifier> class <name pos:line="11" pos:column="18">QueryTests</name> <block pos:line="11" pos:column="29">{
        <decl_stmt><decl><type><specifier pos:line="12" pos:column="9">private</specifier> <specifier pos:line="12" pos:column="17">const</specifier> <name pos:line="12" pos:column="23">string</name></type> <name pos:line="12" pos:column="30">TestDir</name> <init pos:line="12" pos:column="38">= <expr><lit:literal type="string" pos:line="12" pos:column="40">"DataRepositoryTests"</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="13" pos:column="9">private</specifier> <specifier pos:line="13" pos:column="17">const</specifier> <name pos:line="13" pos:column="23">string</name></type> <name pos:line="13" pos:column="30">DataDir</name> <init pos:line="13" pos:column="38">= <expr><lit:literal type="string" pos:line="13" pos:column="40">"DataRepositoryTestsData"</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="14" pos:column="9">private</specifier> <specifier pos:line="14" pos:column="17">const</specifier> <name pos:line="14" pos:column="23">string</name></type> <name pos:line="14" pos:column="30">SrcMLDir</name> <init pos:line="14" pos:column="39">= <expr><lit:literal type="string" pos:line="14" pos:column="41">@"..\..\External\SrcML"</lit:literal></expr></init></decl>;</decl_stmt>

        <function><type><attribute pos:line="16" pos:column="9">[<expr><name pos:line="16" pos:column="10">SetUp</name></expr>]</attribute>
        <specifier pos:line="17" pos:column="9">public</specifier> <name pos:line="17" pos:column="16">void</name></type> <name pos:line="17" pos:column="21">TestSetup</name><parameter_list pos:line="17" pos:column="30">()</parameter_list> <block pos:line="17" pos:column="33">{
            <if pos:line="18" pos:column="13">if<condition pos:line="18" pos:column="15">(<expr><call><name><name pos:line="18" pos:column="16">Directory</name><op:operator pos:line="18" pos:column="25">.</op:operator><name pos:line="18" pos:column="26">Exists</name></name><argument_list pos:line="18" pos:column="32">(<argument><expr><name pos:line="18" pos:column="33">TestDir</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="18" pos:column="42"> <block pos:line="18" pos:column="43">{
                <expr_stmt><expr><call><name><name pos:line="19" pos:column="17">Directory</name><op:operator pos:line="19" pos:column="26">.</op:operator><name pos:line="19" pos:column="27">Delete</name></name><argument_list pos:line="19" pos:column="33">(<argument><expr><name pos:line="19" pos:column="34">TestDir</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="19" pos:column="43">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if pos:line="21" pos:column="13">if<condition pos:line="21" pos:column="15">(<expr><call><name><name pos:line="21" pos:column="16">Directory</name><op:operator pos:line="21" pos:column="25">.</op:operator><name pos:line="21" pos:column="26">Exists</name></name><argument_list pos:line="21" pos:column="32">(<argument><expr><name pos:line="21" pos:column="33">DataDir</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="21" pos:column="42"> <block pos:line="21" pos:column="43">{
                <expr_stmt><expr><call><name><name pos:line="22" pos:column="17">Directory</name><op:operator pos:line="22" pos:column="26">.</op:operator><name pos:line="22" pos:column="27">Delete</name></name><argument_list pos:line="22" pos:column="33">(<argument><expr><name pos:line="22" pos:column="34">DataDir</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="22" pos:column="43">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name pos:line="24" pos:column="13">Directory</name><op:operator pos:line="24" pos:column="22">.</op:operator><name pos:line="24" pos:column="23">CreateDirectory</name></name><argument_list pos:line="24" pos:column="38">(<argument><expr><name pos:line="24" pos:column="39">TestDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="25" pos:column="13">Directory</name><op:operator pos:line="25" pos:column="22">.</op:operator><name pos:line="25" pos:column="23">CreateDirectory</name></name><argument_list pos:line="25" pos:column="38">(<argument><expr><name pos:line="25" pos:column="39">DataDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="28" pos:column="9">[<expr><name pos:line="28" pos:column="10">TestFixtureTearDown</name></expr>]</attribute>
        <specifier pos:line="29" pos:column="9">public</specifier> <name pos:line="29" pos:column="16">void</name></type> <name pos:line="29" pos:column="21">ClassTearDown</name><parameter_list pos:line="29" pos:column="34">()</parameter_list> <block pos:line="29" pos:column="37">{
            <if pos:line="30" pos:column="13">if<condition pos:line="30" pos:column="15">(<expr><call><name><name pos:line="30" pos:column="16">Directory</name><op:operator pos:line="30" pos:column="25">.</op:operator><name pos:line="30" pos:column="26">Exists</name></name><argument_list pos:line="30" pos:column="32">(<argument><expr><name pos:line="30" pos:column="33">TestDir</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="30" pos:column="42"> <block pos:line="30" pos:column="43">{
                <expr_stmt><expr><call><name><name pos:line="31" pos:column="17">Directory</name><op:operator pos:line="31" pos:column="26">.</op:operator><name pos:line="31" pos:column="27">Delete</name></name><argument_list pos:line="31" pos:column="33">(<argument><expr><name pos:line="31" pos:column="34">TestDir</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="31" pos:column="43">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if pos:line="33" pos:column="13">if<condition pos:line="33" pos:column="15">(<expr><call><name><name pos:line="33" pos:column="16">Directory</name><op:operator pos:line="33" pos:column="25">.</op:operator><name pos:line="33" pos:column="26">Exists</name></name><argument_list pos:line="33" pos:column="32">(<argument><expr><name pos:line="33" pos:column="33">DataDir</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="33" pos:column="42"> <block pos:line="33" pos:column="43">{
                <expr_stmt><expr><call><name><name pos:line="34" pos:column="17">Directory</name><op:operator pos:line="34" pos:column="26">.</op:operator><name pos:line="34" pos:column="27">Delete</name></name><argument_list pos:line="34" pos:column="33">(<argument><expr><name pos:line="34" pos:column="34">DataDir</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="34" pos:column="43">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><attribute pos:line="38" pos:column="9">[<expr><name pos:line="38" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="39" pos:column="9">public</specifier> <name pos:line="39" pos:column="16">void</name></type> <name pos:line="39" pos:column="21">TestFindMethodCalls_Nested</name><parameter_list pos:line="39" pos:column="47">()</parameter_list> <block pos:line="39" pos:column="50">{
            <expr_stmt><expr><call><name><name pos:line="40" pos:column="13">File</name><op:operator pos:line="40" pos:column="17">.</op:operator><name pos:line="40" pos:column="18">Copy</name></name><argument_list pos:line="40" pos:column="22">(<argument><expr><lit:literal type="string" pos:line="40" pos:column="23">@"..\..\TestInputs\nested_method_calls.cpp"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="40" pos:column="68">Path</name><op:operator pos:line="40" pos:column="72">.</op:operator><name pos:line="40" pos:column="73">Combine</name></name><argument_list pos:line="40" pos:column="80">(<argument><expr><name pos:line="40" pos:column="81">TestDir</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="40" pos:column="90">"nested_method_calls.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <using pos:line="42" pos:column="13">using(<decl><type><name pos:line="42" pos:column="19">var</name></type> <name pos:line="42" pos:column="23">dataProj</name> <init pos:line="42" pos:column="32">= <expr><op:operator pos:line="42" pos:column="34">new</op:operator> <call><name><name pos:line="42" pos:column="38">DataProject</name><argument_list pos:line="42" pos:column="49">&lt;<argument><name pos:line="42" pos:column="50">CompleteWorkingSet</name></argument>&gt;</argument_list></name><argument_list pos:line="42" pos:column="69">(<argument><expr><name pos:line="42" pos:column="70">DataDir</name></expr></argument>, <argument><expr><name pos:line="42" pos:column="79">TestDir</name></expr></argument>, <argument><expr><name pos:line="42" pos:column="88">SrcMLDir</name></expr></argument>)</argument_list></call></expr></init></decl>) <block pos:line="42" pos:column="99">{
                <expr_stmt><expr><call><name><name pos:line="43" pos:column="17">dataProj</name><op:operator pos:line="43" pos:column="25">.</op:operator><name pos:line="43" pos:column="26">Update</name></name><argument_list pos:line="43" pos:column="32">()</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="45" pos:column="17">NamespaceDefinition</name></type> <name pos:line="45" pos:column="37">globalScope</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="46" pos:column="17">MethodCall</name><index pos:line="46" pos:column="27">[]</index></type> <name pos:line="46" pos:column="30">expected</name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="47" pos:column="17">Assert</name><op:operator pos:line="47" pos:column="23">.</op:operator><name pos:line="47" pos:column="24">That</name></name><argument_list pos:line="47" pos:column="28">(<argument><expr><call><name><name pos:line="47" pos:column="29">dataProj</name><op:operator pos:line="47" pos:column="37">.</op:operator><name pos:line="47" pos:column="38">WorkingSet</name><op:operator pos:line="47" pos:column="48">.</op:operator><name pos:line="47" pos:column="49">TryObtainReadLock</name></name><argument_list pos:line="47" pos:column="66">(<argument><expr><name><name pos:line="47" pos:column="67">Timeout</name><op:operator pos:line="47" pos:column="74">.</op:operator><name pos:line="47" pos:column="75">Infinite</name></name></expr></argument>, <argument><expr pos:line="47" pos:column="85">out <name pos:line="47" pos:column="89">globalScope</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <try pos:line="48" pos:column="17">try <block pos:line="48" pos:column="21">{
                    <expr_stmt><expr><name pos:line="49" pos:column="21">expected</name> <op:operator pos:line="49" pos:column="30">=</op:operator> <op:operator pos:line="49" pos:column="32">new</op:operator><index pos:line="49" pos:column="35">[]</index> <block pos:line="49" pos:column="38">{
                        <expr><call><name><name pos:line="50" pos:column="25">globalScope</name><op:operator pos:line="50" pos:column="36">.</op:operator><name><name pos:line="50" pos:column="37">FindExpressions</name><argument_list pos:line="50" pos:column="52">&lt;<argument><name pos:line="50" pos:column="53">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="50" pos:column="64">(<argument><expr><lit:literal type="boolean" pos:line="50" pos:column="65">true</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="50" pos:column="70">.</op:operator><call><name pos:line="50" pos:column="71">First</name><argument_list pos:line="50" pos:column="76">(<argument><expr><lambda><name pos:line="50" pos:column="77">mc</name> <op:operator pos:line="50" pos:column="80">=&gt;</op:operator> <name><name pos:line="50" pos:column="83">mc</name><op:operator pos:line="50" pos:column="85">.</op:operator><name pos:line="50" pos:column="86">Name</name></name> <op:operator pos:line="50" pos:column="91">==</op:operator> <lit:literal type="string" pos:line="50" pos:column="94">"ToString"</lit:literal></lambda></expr></argument>)</argument_list></call></expr><op:operator pos:line="50" pos:column="105">,</op:operator>
                        <expr><call><name><name pos:line="51" pos:column="25">globalScope</name><op:operator pos:line="51" pos:column="36">.</op:operator><name><name pos:line="51" pos:column="37">FindExpressions</name><argument_list pos:line="51" pos:column="52">&lt;<argument><name pos:line="51" pos:column="53">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="51" pos:column="64">(<argument><expr><lit:literal type="boolean" pos:line="51" pos:column="65">true</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="51" pos:column="70">.</op:operator><call><name pos:line="51" pos:column="71">First</name><argument_list pos:line="51" pos:column="76">(<argument><expr><lambda><name pos:line="51" pos:column="77">mc</name> <op:operator pos:line="51" pos:column="80">=&gt;</op:operator> <name><name pos:line="51" pos:column="83">mc</name><op:operator pos:line="51" pos:column="85">.</op:operator><name pos:line="51" pos:column="86">Name</name></name> <op:operator pos:line="51" pos:column="91">==</op:operator> <lit:literal type="string" pos:line="51" pos:column="94">"SomeMethodCall"</lit:literal></lambda></expr></argument>)</argument_list></call></expr><op:operator pos:line="51" pos:column="111">,</op:operator>
                        <expr><call><name><name pos:line="52" pos:column="25">globalScope</name><op:operator pos:line="52" pos:column="36">.</op:operator><name><name pos:line="52" pos:column="37">FindExpressions</name><argument_list pos:line="52" pos:column="52">&lt;<argument><name pos:line="52" pos:column="53">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="52" pos:column="64">(<argument><expr><lit:literal type="boolean" pos:line="52" pos:column="65">true</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="52" pos:column="70">.</op:operator><call><name pos:line="52" pos:column="71">First</name><argument_list pos:line="52" pos:column="76">(<argument><expr><lambda><name pos:line="52" pos:column="77">mc</name> <op:operator pos:line="52" pos:column="80">=&gt;</op:operator> <name><name pos:line="52" pos:column="83">mc</name><op:operator pos:line="52" pos:column="85">.</op:operator><name pos:line="52" pos:column="86">Name</name></name> <op:operator pos:line="52" pos:column="91">==</op:operator> <lit:literal type="string" pos:line="52" pos:column="94">"printf"</lit:literal></lambda></expr></argument>)</argument_list></call></expr>
                    }</block></expr>;</expr_stmt>
                }</block> <finally pos:line="54" pos:column="19">finally <block pos:line="54" pos:column="27">{
                    <expr_stmt><expr><call><name><name pos:line="55" pos:column="21">dataProj</name><op:operator pos:line="55" pos:column="29">.</op:operator><name pos:line="55" pos:column="30">WorkingSet</name><op:operator pos:line="55" pos:column="40">.</op:operator><name pos:line="55" pos:column="41">ReleaseReadLock</name></name><argument_list pos:line="55" pos:column="56">()</argument_list></call></expr>;</expr_stmt>
                }</block></finally></try>

                <decl_stmt><decl><type><name pos:line="58" pos:column="17">var</name></type> <name pos:line="58" pos:column="21">query</name> <init pos:line="58" pos:column="27">= <expr><op:operator pos:line="58" pos:column="29">new</op:operator> <call><name pos:line="58" pos:column="33">FindMethodCallsAtLocationQuery</name><argument_list pos:line="58" pos:column="63">(<argument><expr><name><name pos:line="58" pos:column="64">dataProj</name><op:operator pos:line="58" pos:column="72">.</op:operator><name pos:line="58" pos:column="73">WorkingSet</name></name></expr></argument>, <argument><expr><name><name pos:line="58" pos:column="85">Timeout</name><op:operator pos:line="58" pos:column="92">.</op:operator><name pos:line="58" pos:column="93">Infinite</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="59" pos:column="17">var</name></type> <name pos:line="59" pos:column="21">testFile</name> <init pos:line="59" pos:column="30">= <expr><call><name><name pos:line="59" pos:column="32">Path</name><op:operator pos:line="59" pos:column="36">.</op:operator><name pos:line="59" pos:column="37">GetFullPath</name></name><argument_list pos:line="59" pos:column="48">(<argument><expr><call><name><name pos:line="59" pos:column="49">Path</name><op:operator pos:line="59" pos:column="53">.</op:operator><name pos:line="59" pos:column="54">Combine</name></name><argument_list pos:line="59" pos:column="61">(<argument><expr><name pos:line="59" pos:column="62">TestDir</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="59" pos:column="71">"nested_method_calls.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="60" pos:column="17">var</name></type> <name pos:line="60" pos:column="21">actual</name> <init pos:line="60" pos:column="28">= <expr><call><name><name pos:line="60" pos:column="30">query</name><op:operator pos:line="60" pos:column="35">.</op:operator><name pos:line="60" pos:column="36">Execute</name></name><argument_list pos:line="60" pos:column="43">(<argument><expr><op:operator pos:line="60" pos:column="44">new</op:operator> <call><name pos:line="60" pos:column="48">SourceLocation</name><argument_list pos:line="60" pos:column="62">(<argument><expr><name pos:line="60" pos:column="63">testFile</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="60" pos:column="73">4</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="60" pos:column="76">41</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="61" pos:column="17">Assert</name><op:operator pos:line="61" pos:column="23">.</op:operator><name pos:line="61" pos:column="24">IsNotNull</name></name><argument_list pos:line="61" pos:column="33">(<argument><expr><name pos:line="61" pos:column="34">actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="62" pos:column="17">Assert</name><op:operator pos:line="62" pos:column="23">.</op:operator><name pos:line="62" pos:column="24">AreEqual</name></name><argument_list pos:line="62" pos:column="32">(<argument><expr><name><name pos:line="62" pos:column="33">expected</name><op:operator pos:line="62" pos:column="41">.</op:operator><name pos:line="62" pos:column="42">Length</name></name></expr></argument>, <argument><expr><name><name pos:line="62" pos:column="50">actual</name><op:operator pos:line="62" pos:column="56">.</op:operator><name pos:line="62" pos:column="57">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for pos:line="63" pos:column="17">for(<init><decl><type><name pos:line="63" pos:column="21">int</name></type> <name pos:line="63" pos:column="25">i</name> <init pos:line="63" pos:column="27">= <expr><lit:literal type="number" pos:line="63" pos:column="29">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="63" pos:column="32">i</name> <op:operator pos:line="63" pos:column="34">&lt;</op:operator> <name><name pos:line="63" pos:column="36">expected</name><op:operator pos:line="63" pos:column="44">.</op:operator><name pos:line="63" pos:column="45">Length</name></name></expr>;</condition> <incr><expr><name pos:line="63" pos:column="53">i</name><op:operator pos:line="63" pos:column="54">++</op:operator></expr></incr>) <block pos:line="63" pos:column="58">{
                    <expr_stmt><expr><call><name><name pos:line="64" pos:column="21">Assert</name><op:operator pos:line="64" pos:column="27">.</op:operator><name pos:line="64" pos:column="28">AreSame</name></name><argument_list pos:line="64" pos:column="35">(<argument><expr><name><name pos:line="64" pos:column="36">expected</name><index pos:line="64" pos:column="44">[<expr><name pos:line="64" pos:column="45">i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name pos:line="64" pos:column="49">actual</name><index pos:line="64" pos:column="55">[<expr><name pos:line="64" pos:column="56">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>

            }</block></using>
        }</block></function>

        <function><type><attribute pos:line="70" pos:column="9">[<expr><name pos:line="70" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="71" pos:column="9">public</specifier> <name pos:line="71" pos:column="16">void</name></type> <name pos:line="71" pos:column="21">TestFindMethodCalls_Simple</name><parameter_list pos:line="71" pos:column="47">()</parameter_list> <block pos:line="71" pos:column="50">{
            <expr_stmt><expr><call><name><name pos:line="72" pos:column="13">File</name><op:operator pos:line="72" pos:column="17">.</op:operator><name pos:line="72" pos:column="18">Copy</name></name><argument_list pos:line="72" pos:column="22">(<argument><expr><lit:literal type="string" pos:line="72" pos:column="23">@"..\..\TestInputs\function_def.cpp"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="72" pos:column="61">Path</name><op:operator pos:line="72" pos:column="65">.</op:operator><name pos:line="72" pos:column="66">Combine</name></name><argument_list pos:line="72" pos:column="73">(<argument><expr><name pos:line="72" pos:column="74">TestDir</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="72" pos:column="83">"function_def.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <using pos:line="74" pos:column="13">using(<decl><type><name pos:line="74" pos:column="19">var</name></type> <name pos:line="74" pos:column="23">dataProj</name> <init pos:line="74" pos:column="32">= <expr><op:operator pos:line="74" pos:column="34">new</op:operator> <call><name><name pos:line="74" pos:column="38">DataProject</name><argument_list pos:line="74" pos:column="49">&lt;<argument><name pos:line="74" pos:column="50">CompleteWorkingSet</name></argument>&gt;</argument_list></name><argument_list pos:line="74" pos:column="69">(<argument><expr><name pos:line="74" pos:column="70">DataDir</name></expr></argument>, <argument><expr><name pos:line="74" pos:column="79">TestDir</name></expr></argument>, <argument><expr><name pos:line="74" pos:column="88">SrcMLDir</name></expr></argument>)</argument_list></call></expr></init></decl>) <block pos:line="74" pos:column="99">{
                <expr_stmt><expr><call><name><name pos:line="75" pos:column="17">dataProj</name><op:operator pos:line="75" pos:column="25">.</op:operator><name pos:line="75" pos:column="26">Update</name></name><argument_list pos:line="75" pos:column="32">()</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="77" pos:column="17">NamespaceDefinition</name></type> <name pos:line="77" pos:column="37">globalScope</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="78" pos:column="17">MethodCall</name></type> <name pos:line="78" pos:column="28">expected</name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="79" pos:column="17">Assert</name><op:operator pos:line="79" pos:column="23">.</op:operator><name pos:line="79" pos:column="24">That</name></name><argument_list pos:line="79" pos:column="28">(<argument><expr><call><name><name pos:line="79" pos:column="29">dataProj</name><op:operator pos:line="79" pos:column="37">.</op:operator><name pos:line="79" pos:column="38">WorkingSet</name><op:operator pos:line="79" pos:column="48">.</op:operator><name pos:line="79" pos:column="49">TryObtainReadLock</name></name><argument_list pos:line="79" pos:column="66">(<argument><expr><name><name pos:line="79" pos:column="67">Timeout</name><op:operator pos:line="79" pos:column="74">.</op:operator><name pos:line="79" pos:column="75">Infinite</name></name></expr></argument>, <argument><expr pos:line="79" pos:column="85">out <name pos:line="79" pos:column="89">globalScope</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <try pos:line="80" pos:column="17">try <block pos:line="80" pos:column="21">{
                    <expr_stmt><expr><name pos:line="81" pos:column="21">expected</name> <op:operator pos:line="81" pos:column="30">=</op:operator> <call><name><name pos:line="81" pos:column="32">globalScope</name><op:operator pos:line="81" pos:column="43">.</op:operator><name><name pos:line="81" pos:column="44">FindExpressions</name><argument_list pos:line="81" pos:column="59">&lt;<argument><name pos:line="81" pos:column="60">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="81" pos:column="71">(<argument><expr><lit:literal type="boolean" pos:line="81" pos:column="72">true</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="81" pos:column="77">.</op:operator><call><name pos:line="81" pos:column="78">First</name><argument_list pos:line="81" pos:column="83">(<argument><expr><lambda><name pos:line="81" pos:column="84">mc</name> <op:operator pos:line="81" pos:column="87">=&gt;</op:operator> <name><name pos:line="81" pos:column="90">mc</name><op:operator pos:line="81" pos:column="92">.</op:operator><name pos:line="81" pos:column="93">Name</name></name> <op:operator pos:line="81" pos:column="98">==</op:operator> <lit:literal type="string" pos:line="81" pos:column="101">"MyFunction"</lit:literal></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <finally pos:line="82" pos:column="19">finally <block pos:line="82" pos:column="27">{
                    <expr_stmt><expr><call><name><name pos:line="83" pos:column="21">dataProj</name><op:operator pos:line="83" pos:column="29">.</op:operator><name pos:line="83" pos:column="30">WorkingSet</name><op:operator pos:line="83" pos:column="40">.</op:operator><name pos:line="83" pos:column="41">ReleaseReadLock</name></name><argument_list pos:line="83" pos:column="56">()</argument_list></call></expr>;</expr_stmt>
                }</block></finally></try>

                <decl_stmt><decl><type><name pos:line="86" pos:column="17">var</name></type> <name pos:line="86" pos:column="21">query</name> <init pos:line="86" pos:column="27">= <expr><op:operator pos:line="86" pos:column="29">new</op:operator> <call><name pos:line="86" pos:column="33">FindMethodCallsAtLocationQuery</name><argument_list pos:line="86" pos:column="63">(<argument><expr><name><name pos:line="86" pos:column="64">dataProj</name><op:operator pos:line="86" pos:column="72">.</op:operator><name pos:line="86" pos:column="73">WorkingSet</name></name></expr></argument>, <argument><expr><name><name pos:line="86" pos:column="85">Timeout</name><op:operator pos:line="86" pos:column="92">.</op:operator><name pos:line="86" pos:column="93">Infinite</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="87" pos:column="17">var</name></type> <name pos:line="87" pos:column="21">testFile</name> <init pos:line="87" pos:column="30">= <expr><call><name><name pos:line="87" pos:column="32">Path</name><op:operator pos:line="87" pos:column="36">.</op:operator><name pos:line="87" pos:column="37">GetFullPath</name></name><argument_list pos:line="87" pos:column="48">(<argument><expr><call><name><name pos:line="87" pos:column="49">Path</name><op:operator pos:line="87" pos:column="53">.</op:operator><name pos:line="87" pos:column="54">Combine</name></name><argument_list pos:line="87" pos:column="61">(<argument><expr><name pos:line="87" pos:column="62">TestDir</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="87" pos:column="71">"function_def.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="88" pos:column="17">var</name></type> <name pos:line="88" pos:column="21">actual</name> <init pos:line="88" pos:column="28">= <expr><call><name><name pos:line="88" pos:column="30">query</name><op:operator pos:line="88" pos:column="35">.</op:operator><name pos:line="88" pos:column="36">Execute</name></name><argument_list pos:line="88" pos:column="43">(<argument><expr><op:operator pos:line="88" pos:column="44">new</op:operator> <call><name pos:line="88" pos:column="48">SourceLocation</name><argument_list pos:line="88" pos:column="62">(<argument><expr><name pos:line="88" pos:column="63">testFile</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="88" pos:column="73">12</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="88" pos:column="77">20</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="89" pos:column="17">Assert</name><op:operator pos:line="89" pos:column="23">.</op:operator><name pos:line="89" pos:column="24">IsNotNull</name></name><argument_list pos:line="89" pos:column="33">(<argument><expr><name pos:line="89" pos:column="34">actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="90" pos:column="17">Assert</name><op:operator pos:line="90" pos:column="23">.</op:operator><name pos:line="90" pos:column="24">AreEqual</name></name><argument_list pos:line="90" pos:column="32">(<argument><expr><lit:literal type="number" pos:line="90" pos:column="33">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="90" pos:column="36">actual</name><op:operator pos:line="90" pos:column="42">.</op:operator><name pos:line="90" pos:column="43">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="91" pos:column="17">Assert</name><op:operator pos:line="91" pos:column="23">.</op:operator><name pos:line="91" pos:column="24">AreSame</name></name><argument_list pos:line="91" pos:column="31">(<argument><expr><name pos:line="91" pos:column="32">expected</name></expr></argument>, <argument><expr><name><name pos:line="91" pos:column="42">actual</name><index pos:line="91" pos:column="48">[<expr><lit:literal type="number" pos:line="91" pos:column="49">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></using>
        }</block></function>

        <function><type><attribute pos:line="95" pos:column="9">[<expr><name pos:line="95" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="96" pos:column="9">public</specifier> <name pos:line="96" pos:column="16">void</name></type> <name pos:line="96" pos:column="21">TestFindScopeForAdjacentMethods</name><parameter_list pos:line="96" pos:column="52">()</parameter_list> <block pos:line="96" pos:column="55">{
            <expr_stmt><expr><call><name><name pos:line="97" pos:column="13">File</name><op:operator pos:line="97" pos:column="17">.</op:operator><name pos:line="97" pos:column="18">Copy</name></name><argument_list pos:line="97" pos:column="22">(<argument><expr><lit:literal type="string" pos:line="97" pos:column="23">@"..\..\TestInputs\adjacent_methods.cpp"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="97" pos:column="65">Path</name><op:operator pos:line="97" pos:column="69">.</op:operator><name pos:line="97" pos:column="70">Combine</name></name><argument_list pos:line="97" pos:column="77">(<argument><expr><name pos:line="97" pos:column="78">TestDir</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="97" pos:column="87">"adjacent_methods.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <using pos:line="99" pos:column="13">using(<decl><type><name pos:line="99" pos:column="19">var</name></type> <name pos:line="99" pos:column="23">dataProj</name> <init pos:line="99" pos:column="32">= <expr><op:operator pos:line="99" pos:column="34">new</op:operator> <call><name><name pos:line="99" pos:column="38">DataProject</name><argument_list pos:line="99" pos:column="49">&lt;<argument><name pos:line="99" pos:column="50">CompleteWorkingSet</name></argument>&gt;</argument_list></name><argument_list pos:line="99" pos:column="69">(<argument><expr><name pos:line="99" pos:column="70">DataDir</name></expr></argument>, <argument><expr><name pos:line="99" pos:column="79">TestDir</name></expr></argument>, <argument><expr><name pos:line="99" pos:column="88">SrcMLDir</name></expr></argument>)</argument_list></call></expr></init></decl>) <block pos:line="99" pos:column="99">{
                <expr_stmt><expr><call><name><name pos:line="100" pos:column="17">dataProj</name><op:operator pos:line="100" pos:column="25">.</op:operator><name pos:line="100" pos:column="26">Update</name></name><argument_list pos:line="100" pos:column="32">()</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="102" pos:column="17">NamespaceDefinition</name></type> <name pos:line="102" pos:column="37">globalScope</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="103" pos:column="17">MethodDefinition</name></type> <name pos:line="103" pos:column="34">mainMethod</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="104" pos:column="17">MethodDefinition</name></type> <name pos:line="104" pos:column="34">fooMethod</name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="105" pos:column="17">Assert</name><op:operator pos:line="105" pos:column="23">.</op:operator><name pos:line="105" pos:column="24">That</name></name><argument_list pos:line="105" pos:column="28">(<argument><expr><call><name><name pos:line="105" pos:column="29">dataProj</name><op:operator pos:line="105" pos:column="37">.</op:operator><name pos:line="105" pos:column="38">WorkingSet</name><op:operator pos:line="105" pos:column="48">.</op:operator><name pos:line="105" pos:column="49">TryObtainReadLock</name></name><argument_list pos:line="105" pos:column="66">(<argument><expr><name><name pos:line="105" pos:column="67">Timeout</name><op:operator pos:line="105" pos:column="74">.</op:operator><name pos:line="105" pos:column="75">Infinite</name></name></expr></argument>, <argument><expr pos:line="105" pos:column="85">out <name pos:line="105" pos:column="89">globalScope</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <try pos:line="106" pos:column="17">try <block pos:line="106" pos:column="21">{
                    <expr_stmt><expr><name pos:line="107" pos:column="21">mainMethod</name> <op:operator pos:line="107" pos:column="32">=</op:operator> <call><name><name pos:line="107" pos:column="34">globalScope</name><op:operator pos:line="107" pos:column="45">.</op:operator><name><name pos:line="107" pos:column="46">GetDescendants</name><argument_list pos:line="107" pos:column="60">&lt;<argument><name pos:line="107" pos:column="61">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="107" pos:column="78">()</argument_list></call><op:operator pos:line="107" pos:column="80">.</op:operator><call><name pos:line="107" pos:column="81">First</name><argument_list pos:line="107" pos:column="86">(<argument><expr><lambda><name pos:line="107" pos:column="87">md</name> <op:operator pos:line="107" pos:column="90">=&gt;</op:operator> <name><name pos:line="107" pos:column="93">md</name><op:operator pos:line="107" pos:column="95">.</op:operator><name pos:line="107" pos:column="96">Name</name></name> <op:operator pos:line="107" pos:column="101">==</op:operator> <lit:literal type="string" pos:line="107" pos:column="104">"main"</lit:literal></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="108" pos:column="21">fooMethod</name> <op:operator pos:line="108" pos:column="31">=</op:operator> <call><name><name pos:line="108" pos:column="33">globalScope</name><op:operator pos:line="108" pos:column="44">.</op:operator><name><name pos:line="108" pos:column="45">GetDescendants</name><argument_list pos:line="108" pos:column="59">&lt;<argument><name pos:line="108" pos:column="60">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="108" pos:column="77">()</argument_list></call><op:operator pos:line="108" pos:column="79">.</op:operator><call><name pos:line="108" pos:column="80">First</name><argument_list pos:line="108" pos:column="85">(<argument><expr><lambda><name pos:line="108" pos:column="86">md</name> <op:operator pos:line="108" pos:column="89">=&gt;</op:operator> <name><name pos:line="108" pos:column="92">md</name><op:operator pos:line="108" pos:column="94">.</op:operator><name pos:line="108" pos:column="95">Name</name></name> <op:operator pos:line="108" pos:column="100">==</op:operator> <lit:literal type="string" pos:line="108" pos:column="103">"Foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <finally pos:line="109" pos:column="19">finally <block pos:line="109" pos:column="27">{
                    <expr_stmt><expr><call><name><name pos:line="110" pos:column="21">dataProj</name><op:operator pos:line="110" pos:column="29">.</op:operator><name pos:line="110" pos:column="30">WorkingSet</name><op:operator pos:line="110" pos:column="40">.</op:operator><name pos:line="110" pos:column="41">ReleaseReadLock</name></name><argument_list pos:line="110" pos:column="56">()</argument_list></call></expr>;</expr_stmt>
                }</block></finally></try>

                <decl_stmt><decl><type><name pos:line="113" pos:column="17">var</name></type> <name pos:line="113" pos:column="21">query</name> <init pos:line="113" pos:column="27">= <expr><op:operator pos:line="113" pos:column="29">new</op:operator> <call><name pos:line="113" pos:column="33">StatementForLocationQuery</name><argument_list pos:line="113" pos:column="58">(<argument><expr><name><name pos:line="113" pos:column="59">dataProj</name><op:operator pos:line="113" pos:column="67">.</op:operator><name pos:line="113" pos:column="68">WorkingSet</name></name></expr></argument>, <argument><expr><name><name pos:line="113" pos:column="80">Timeout</name><op:operator pos:line="113" pos:column="87">.</op:operator><name pos:line="113" pos:column="88">Infinite</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="114" pos:column="17">var</name></type> <name pos:line="114" pos:column="21">testFile</name> <init pos:line="114" pos:column="30">= <expr><call><name><name pos:line="114" pos:column="32">Path</name><op:operator pos:line="114" pos:column="36">.</op:operator><name pos:line="114" pos:column="37">GetFullPath</name></name><argument_list pos:line="114" pos:column="48">(<argument><expr><call><name><name pos:line="114" pos:column="49">Path</name><op:operator pos:line="114" pos:column="53">.</op:operator><name pos:line="114" pos:column="54">Combine</name></name><argument_list pos:line="114" pos:column="61">(<argument><expr><name pos:line="114" pos:column="62">TestDir</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="114" pos:column="71">"adjacent_methods.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name pos:line="116" pos:column="17">var</name></type> <name pos:line="116" pos:column="21">startOfMain</name> <init pos:line="116" pos:column="33">= <expr><op:operator pos:line="116" pos:column="35">new</op:operator> <call><name pos:line="116" pos:column="39">SourceLocation</name><argument_list pos:line="116" pos:column="53">(<argument><expr><name pos:line="116" pos:column="54">testFile</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="116" pos:column="64">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="116" pos:column="67">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="117" pos:column="17">var</name></type> <name pos:line="117" pos:column="21">locationInMain</name> <init pos:line="117" pos:column="36">= <expr><op:operator pos:line="117" pos:column="38">new</op:operator> <call><name pos:line="117" pos:column="42">SourceLocation</name><argument_list pos:line="117" pos:column="56">(<argument><expr><name pos:line="117" pos:column="57">testFile</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="117" pos:column="67">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="117" pos:column="70">11</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="118" pos:column="17">Assert</name><op:operator pos:line="118" pos:column="23">.</op:operator><name pos:line="118" pos:column="24">That</name></name><argument_list pos:line="118" pos:column="28">(<argument><expr><call><name><name pos:line="118" pos:column="29">mainMethod</name><op:operator pos:line="118" pos:column="39">.</op:operator><name pos:line="118" pos:column="40">PrimaryLocation</name><op:operator pos:line="118" pos:column="55">.</op:operator><name pos:line="118" pos:column="56">Contains</name></name><argument_list pos:line="118" pos:column="64">(<argument><expr><name pos:line="118" pos:column="65">startOfMain</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="119" pos:column="17">Assert</name><op:operator pos:line="119" pos:column="23">.</op:operator><name pos:line="119" pos:column="24">That</name></name><argument_list pos:line="119" pos:column="28">(<argument><expr><call><name><name pos:line="119" pos:column="29">mainMethod</name><op:operator pos:line="119" pos:column="39">.</op:operator><name pos:line="119" pos:column="40">PrimaryLocation</name><op:operator pos:line="119" pos:column="55">.</op:operator><name pos:line="119" pos:column="56">Contains</name></name><argument_list pos:line="119" pos:column="64">(<argument><expr><name pos:line="119" pos:column="65">locationInMain</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name pos:line="121" pos:column="17">Assert</name><op:operator pos:line="121" pos:column="23">.</op:operator><name pos:line="121" pos:column="24">AreSame</name></name><argument_list pos:line="121" pos:column="31">(<argument><expr><name pos:line="121" pos:column="32">mainMethod</name></expr></argument>, <argument><expr><call><name><name pos:line="121" pos:column="44">query</name><op:operator pos:line="121" pos:column="49">.</op:operator><name pos:line="121" pos:column="50">Execute</name></name><argument_list pos:line="121" pos:column="57">(<argument><expr><name pos:line="121" pos:column="58">startOfMain</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="122" pos:column="17">Assert</name><op:operator pos:line="122" pos:column="23">.</op:operator><name pos:line="122" pos:column="24">AreSame</name></name><argument_list pos:line="122" pos:column="31">(<argument><expr><name pos:line="122" pos:column="32">mainMethod</name></expr></argument>, <argument><expr><call><name><name pos:line="122" pos:column="44">query</name><op:operator pos:line="122" pos:column="49">.</op:operator><name pos:line="122" pos:column="50">Execute</name></name><argument_list pos:line="122" pos:column="57">(<argument><expr><name pos:line="122" pos:column="58">locationInMain</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="124" pos:column="17">var</name></type> <name pos:line="124" pos:column="21">startOfFoo</name> <init pos:line="124" pos:column="32">= <expr><op:operator pos:line="124" pos:column="34">new</op:operator> <call><name pos:line="124" pos:column="38">SourceLocation</name><argument_list pos:line="124" pos:column="52">(<argument><expr><name pos:line="124" pos:column="53">testFile</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="124" pos:column="63">3</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="124" pos:column="66">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="125" pos:column="17">var</name></type> <name pos:line="125" pos:column="21">locationInFoo</name> <init pos:line="125" pos:column="35">= <expr><op:operator pos:line="125" pos:column="37">new</op:operator> <call><name pos:line="125" pos:column="41">SourceLocation</name><argument_list pos:line="125" pos:column="55">(<argument><expr><name pos:line="125" pos:column="56">testFile</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="125" pos:column="66">3</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="125" pos:column="69">11</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="126" pos:column="17">Assert</name><op:operator pos:line="126" pos:column="23">.</op:operator><name pos:line="126" pos:column="24">That</name></name><argument_list pos:line="126" pos:column="28">(<argument><expr><call><name><name pos:line="126" pos:column="29">fooMethod</name><op:operator pos:line="126" pos:column="38">.</op:operator><name pos:line="126" pos:column="39">PrimaryLocation</name><op:operator pos:line="126" pos:column="54">.</op:operator><name pos:line="126" pos:column="55">Contains</name></name><argument_list pos:line="126" pos:column="63">(<argument><expr><name pos:line="126" pos:column="64">startOfFoo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="127" pos:column="17">Assert</name><op:operator pos:line="127" pos:column="23">.</op:operator><name pos:line="127" pos:column="24">That</name></name><argument_list pos:line="127" pos:column="28">(<argument><expr><call><name><name pos:line="127" pos:column="29">fooMethod</name><op:operator pos:line="127" pos:column="38">.</op:operator><name pos:line="127" pos:column="39">PrimaryLocation</name><op:operator pos:line="127" pos:column="54">.</op:operator><name pos:line="127" pos:column="55">Contains</name></name><argument_list pos:line="127" pos:column="63">(<argument><expr><name pos:line="127" pos:column="64">locationInFoo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name pos:line="129" pos:column="17">Assert</name><op:operator pos:line="129" pos:column="23">.</op:operator><name pos:line="129" pos:column="24">AreSame</name></name><argument_list pos:line="129" pos:column="31">(<argument><expr><name pos:line="129" pos:column="32">fooMethod</name></expr></argument>, <argument><expr><call><name><name pos:line="129" pos:column="43">query</name><op:operator pos:line="129" pos:column="48">.</op:operator><name pos:line="129" pos:column="49">Execute</name></name><argument_list pos:line="129" pos:column="56">(<argument><expr><name pos:line="129" pos:column="57">startOfFoo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="130" pos:column="17">Assert</name><op:operator pos:line="130" pos:column="23">.</op:operator><name pos:line="130" pos:column="24">AreSame</name></name><argument_list pos:line="130" pos:column="31">(<argument><expr><name pos:line="130" pos:column="32">fooMethod</name></expr></argument>, <argument><expr><call><name><name pos:line="130" pos:column="43">query</name><op:operator pos:line="130" pos:column="48">.</op:operator><name pos:line="130" pos:column="49">Execute</name></name><argument_list pos:line="130" pos:column="56">(<argument><expr><name pos:line="130" pos:column="57">locationInFoo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="132" pos:column="17">var</name></type> <name pos:line="132" pos:column="21">lineBetweenMethods</name> <init pos:line="132" pos:column="40">= <expr><op:operator pos:line="132" pos:column="42">new</op:operator> <call><name pos:line="132" pos:column="46">SourceLocation</name><argument_list pos:line="132" pos:column="60">(<argument><expr><name pos:line="132" pos:column="61">testFile</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="132" pos:column="71">2</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="132" pos:column="74">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="133" pos:column="17">Assert</name><op:operator pos:line="133" pos:column="23">.</op:operator><name pos:line="133" pos:column="24">That</name></name><argument_list pos:line="133" pos:column="28">(<argument><expr><call><name><name pos:line="133" pos:column="29">mainMethod</name><op:operator pos:line="133" pos:column="39">.</op:operator><name pos:line="133" pos:column="40">PrimaryLocation</name><op:operator pos:line="133" pos:column="55">.</op:operator><name pos:line="133" pos:column="56">Contains</name></name><argument_list pos:line="133" pos:column="64">(<argument><expr><name pos:line="133" pos:column="65">lineBetweenMethods</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="134" pos:column="17">Assert</name><op:operator pos:line="134" pos:column="23">.</op:operator><name pos:line="134" pos:column="24">IsFalse</name></name><argument_list pos:line="134" pos:column="31">(<argument><expr><call><name><name pos:line="134" pos:column="32">fooMethod</name><op:operator pos:line="134" pos:column="41">.</op:operator><name pos:line="134" pos:column="42">PrimaryLocation</name><op:operator pos:line="134" pos:column="57">.</op:operator><name pos:line="134" pos:column="58">Contains</name></name><argument_list pos:line="134" pos:column="66">(<argument><expr><name pos:line="134" pos:column="67">lineBetweenMethods</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="135" pos:column="17">Assert</name><op:operator pos:line="135" pos:column="23">.</op:operator><name pos:line="135" pos:column="24">AreSame</name></name><argument_list pos:line="135" pos:column="31">(<argument><expr><name pos:line="135" pos:column="32">mainMethod</name></expr></argument>, <argument><expr><call><name><name pos:line="135" pos:column="44">query</name><op:operator pos:line="135" pos:column="49">.</op:operator><name pos:line="135" pos:column="50">Execute</name></name><argument_list pos:line="135" pos:column="57">(<argument><expr><name pos:line="135" pos:column="58">lineBetweenMethods</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></using>
        }</block></function>

        <function><type><attribute pos:line="139" pos:column="9">[<expr><name pos:line="139" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="140" pos:column="9">public</specifier> <name pos:line="140" pos:column="16">void</name></type> <name pos:line="140" pos:column="21">TestOverloadedMethodCallResolution</name><parameter_list pos:line="140" pos:column="55">()</parameter_list> <block pos:line="140" pos:column="58">{
            <expr_stmt><expr><call><name><name pos:line="141" pos:column="13">File</name><op:operator pos:line="141" pos:column="17">.</op:operator><name pos:line="141" pos:column="18">Copy</name></name><argument_list pos:line="141" pos:column="22">(<argument><expr><lit:literal type="string" pos:line="141" pos:column="23">@"..\..\TestInputs\csharp_overload_calls.cs"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="141" pos:column="69">Path</name><op:operator pos:line="141" pos:column="73">.</op:operator><name pos:line="141" pos:column="74">Combine</name></name><argument_list pos:line="141" pos:column="81">(<argument><expr><name pos:line="141" pos:column="82">TestDir</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="141" pos:column="91">"csharp_overload_calls.cs"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <using pos:line="142" pos:column="13">using(<decl><type><name pos:line="142" pos:column="19">var</name></type> <name pos:line="142" pos:column="23">project</name> <init pos:line="142" pos:column="31">= <expr><op:operator pos:line="142" pos:column="33">new</op:operator> <call><name><name pos:line="142" pos:column="37">DataProject</name><argument_list pos:line="142" pos:column="48">&lt;<argument><name pos:line="142" pos:column="49">CompleteWorkingSet</name></argument>&gt;</argument_list></name><argument_list pos:line="142" pos:column="68">(<argument><expr><name pos:line="142" pos:column="69">DataDir</name></expr></argument>, <argument><expr><name pos:line="142" pos:column="78">TestDir</name></expr></argument>, <argument><expr><name pos:line="142" pos:column="87">SrcMLDir</name></expr></argument>)</argument_list></call></expr></init></decl>) <block pos:line="142" pos:column="98">{
                <expr_stmt><expr><call><name><name pos:line="143" pos:column="17">project</name><op:operator pos:line="143" pos:column="24">.</op:operator><name pos:line="143" pos:column="25">Update</name></name><argument_list pos:line="143" pos:column="31">()</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="145" pos:column="17">var</name></type> <name pos:line="145" pos:column="21">query</name> <init pos:line="145" pos:column="27">= <expr><op:operator pos:line="145" pos:column="29">new</op:operator> <call><name><name pos:line="145" pos:column="33">StatementForLocationQuery</name><argument_list pos:line="145" pos:column="58">&lt;<argument><name pos:line="145" pos:column="59">MethodDefinition</name></argument>&gt;</argument_list></name><argument_list pos:line="145" pos:column="76">(<argument><expr><name><name pos:line="145" pos:column="77">project</name><op:operator pos:line="145" pos:column="84">.</op:operator><name pos:line="145" pos:column="85">WorkingSet</name></name></expr></argument>, <argument><expr><name><name pos:line="145" pos:column="97">Timeout</name><op:operator pos:line="145" pos:column="104">.</op:operator><name pos:line="145" pos:column="105">Infinite</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name pos:line="147" pos:column="17">var</name></type> <name pos:line="147" pos:column="21">startOffoo0</name> <init pos:line="147" pos:column="33">= <expr><op:operator pos:line="147" pos:column="35">new</op:operator> <call><name pos:line="147" pos:column="39">SourceLocation</name><argument_list pos:line="147" pos:column="53">(<argument><expr><call><name><name pos:line="147" pos:column="54">Path</name><op:operator pos:line="147" pos:column="58">.</op:operator><name pos:line="147" pos:column="59">GetFullPath</name></name><argument_list pos:line="147" pos:column="70">(<argument><expr><call><name><name pos:line="147" pos:column="71">Path</name><op:operator pos:line="147" pos:column="75">.</op:operator><name pos:line="147" pos:column="76">Combine</name></name><argument_list pos:line="147" pos:column="83">(<argument><expr><name pos:line="147" pos:column="84">TestDir</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="147" pos:column="93">"csharp_overload_calls.cs"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="147" pos:column="123">11</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="147" pos:column="127">25</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="148" pos:column="17">var</name></type> <name pos:line="148" pos:column="21">startOffoo1</name> <init pos:line="148" pos:column="33">= <expr><op:operator pos:line="148" pos:column="35">new</op:operator> <call><name pos:line="148" pos:column="39">SourceLocation</name><argument_list pos:line="148" pos:column="53">(<argument><expr><call><name><name pos:line="148" pos:column="54">Path</name><op:operator pos:line="148" pos:column="58">.</op:operator><name pos:line="148" pos:column="59">GetFullPath</name></name><argument_list pos:line="148" pos:column="70">(<argument><expr><call><name><name pos:line="148" pos:column="71">Path</name><op:operator pos:line="148" pos:column="75">.</op:operator><name pos:line="148" pos:column="76">Combine</name></name><argument_list pos:line="148" pos:column="83">(<argument><expr><name pos:line="148" pos:column="84">TestDir</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="148" pos:column="93">"csharp_overload_calls.cs"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="148" pos:column="123">13</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="148" pos:column="127">25</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name pos:line="150" pos:column="17">var</name></type> <name pos:line="150" pos:column="21">startOfCallFooWithoutParameters</name> <init pos:line="150" pos:column="53">= <expr><op:operator pos:line="150" pos:column="55">new</op:operator> <call><name pos:line="150" pos:column="59">SourceLocation</name><argument_list pos:line="150" pos:column="73">(<argument><expr><call><name><name pos:line="150" pos:column="74">Path</name><op:operator pos:line="150" pos:column="78">.</op:operator><name pos:line="150" pos:column="79">GetFullPath</name></name><argument_list pos:line="150" pos:column="90">(<argument><expr><call><name><name pos:line="150" pos:column="91">Path</name><op:operator pos:line="150" pos:column="95">.</op:operator><name pos:line="150" pos:column="96">Combine</name></name><argument_list pos:line="150" pos:column="103">(<argument><expr><name pos:line="150" pos:column="104">TestDir</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="150" pos:column="113">"csharp_overload_calls.cs"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="150" pos:column="143">4</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="150" pos:column="146">25</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="151" pos:column="17">var</name></type> <name pos:line="151" pos:column="21">startOfCallFooWithParameter</name> <init pos:line="151" pos:column="49">= <expr><op:operator pos:line="151" pos:column="51">new</op:operator> <call><name pos:line="151" pos:column="55">SourceLocation</name><argument_list pos:line="151" pos:column="69">(<argument><expr><call><name><name pos:line="151" pos:column="70">Path</name><op:operator pos:line="151" pos:column="74">.</op:operator><name pos:line="151" pos:column="75">GetFullPath</name></name><argument_list pos:line="151" pos:column="86">(<argument><expr><call><name><name pos:line="151" pos:column="87">Path</name><op:operator pos:line="151" pos:column="91">.</op:operator><name pos:line="151" pos:column="92">Combine</name></name><argument_list pos:line="151" pos:column="99">(<argument><expr><name pos:line="151" pos:column="100">TestDir</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="151" pos:column="109">"csharp_overload_calls.cs"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="151" pos:column="139">8</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="151" pos:column="142">25</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name pos:line="153" pos:column="17">var</name></type> <name pos:line="153" pos:column="21">foo0</name> <init pos:line="153" pos:column="26">= <expr><call><name><name pos:line="153" pos:column="28">query</name><op:operator pos:line="153" pos:column="33">.</op:operator><name pos:line="153" pos:column="34">Execute</name></name><argument_list pos:line="153" pos:column="41">(<argument><expr><name pos:line="153" pos:column="42">startOffoo0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="154" pos:column="17">Assert</name><op:operator pos:line="154" pos:column="23">.</op:operator><name pos:line="154" pos:column="24">AreEqual</name></name><argument_list pos:line="154" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="154" pos:column="33">"foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="154" pos:column="40">foo0</name><op:operator pos:line="154" pos:column="44">.</op:operator><name pos:line="154" pos:column="45">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="155" pos:column="17">Assert</name><op:operator pos:line="155" pos:column="23">.</op:operator><name pos:line="155" pos:column="24">AreEqual</name></name><argument_list pos:line="155" pos:column="32">(<argument><expr><lit:literal type="number" pos:line="155" pos:column="33">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="155" pos:column="36">foo0</name><op:operator pos:line="155" pos:column="40">.</op:operator><name pos:line="155" pos:column="41">Parameters</name><op:operator pos:line="155" pos:column="51">.</op:operator><name pos:line="155" pos:column="52">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="157" pos:column="17">var</name></type> <name pos:line="157" pos:column="21">foo1</name> <init pos:line="157" pos:column="26">= <expr><call><name><name pos:line="157" pos:column="28">query</name><op:operator pos:line="157" pos:column="33">.</op:operator><name pos:line="157" pos:column="34">Execute</name></name><argument_list pos:line="157" pos:column="41">(<argument><expr><name pos:line="157" pos:column="42">startOffoo1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="158" pos:column="17">Assert</name><op:operator pos:line="158" pos:column="23">.</op:operator><name pos:line="158" pos:column="24">AreEqual</name></name><argument_list pos:line="158" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="158" pos:column="33">"foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="158" pos:column="40">foo1</name><op:operator pos:line="158" pos:column="44">.</op:operator><name pos:line="158" pos:column="45">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="159" pos:column="17">Assert</name><op:operator pos:line="159" pos:column="23">.</op:operator><name pos:line="159" pos:column="24">AreEqual</name></name><argument_list pos:line="159" pos:column="32">(<argument><expr><lit:literal type="number" pos:line="159" pos:column="33">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="159" pos:column="36">foo1</name><op:operator pos:line="159" pos:column="40">.</op:operator><name pos:line="159" pos:column="41">Parameters</name><op:operator pos:line="159" pos:column="51">.</op:operator><name pos:line="159" pos:column="52">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="161" pos:column="17">var</name></type> <name pos:line="161" pos:column="21">callFooMethodWithoutParameters</name> <init pos:line="161" pos:column="52">= <expr><call><name><name pos:line="161" pos:column="54">query</name><op:operator pos:line="161" pos:column="59">.</op:operator><name pos:line="161" pos:column="60">Execute</name></name><argument_list pos:line="161" pos:column="67">(<argument><expr><name pos:line="161" pos:column="68">startOfCallFooWithoutParameters</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="162" pos:column="17">Assert</name><op:operator pos:line="162" pos:column="23">.</op:operator><name pos:line="162" pos:column="24">AreEqual</name></name><argument_list pos:line="162" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="162" pos:column="33">"CallFooWithoutParameters"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="162" pos:column="61">callFooMethodWithoutParameters</name><op:operator pos:line="162" pos:column="91">.</op:operator><name pos:line="162" pos:column="92">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="164" pos:column="17">var</name></type> <name pos:line="164" pos:column="21">callFooMethodWithParameter</name> <init pos:line="164" pos:column="48">= <expr><call><name><name pos:line="164" pos:column="50">query</name><op:operator pos:line="164" pos:column="55">.</op:operator><name pos:line="164" pos:column="56">Execute</name></name><argument_list pos:line="164" pos:column="63">(<argument><expr><name pos:line="164" pos:column="64">startOfCallFooWithParameter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="165" pos:column="17">Assert</name><op:operator pos:line="165" pos:column="23">.</op:operator><name pos:line="165" pos:column="24">AreEqual</name></name><argument_list pos:line="165" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="165" pos:column="33">"CallFooWithParameter"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="165" pos:column="57">callFooMethodWithParameter</name><op:operator pos:line="165" pos:column="83">.</op:operator><name pos:line="165" pos:column="84">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name pos:line="167" pos:column="17">Assert</name><op:operator pos:line="167" pos:column="23">.</op:operator><name pos:line="167" pos:column="24">That</name></name><argument_list pos:line="167" pos:column="28">(<argument><expr><call><name><name pos:line="167" pos:column="29">callFooMethodWithoutParameters</name><op:operator pos:line="167" pos:column="59">.</op:operator><name pos:line="167" pos:column="60">ContainsCallTo</name></name><argument_list pos:line="167" pos:column="74">(<argument><expr><name pos:line="167" pos:column="75">foo0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="168" pos:column="17">Assert</name><op:operator pos:line="168" pos:column="23">.</op:operator><name pos:line="168" pos:column="24">That</name></name><argument_list pos:line="168" pos:column="28">(<argument><expr><op:operator pos:line="168" pos:column="29">!</op:operator><call><name><name pos:line="168" pos:column="30">callFooMethodWithoutParameters</name><op:operator pos:line="168" pos:column="60">.</op:operator><name pos:line="168" pos:column="61">ContainsCallTo</name></name><argument_list pos:line="168" pos:column="75">(<argument><expr><name pos:line="168" pos:column="76">foo1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name pos:line="170" pos:column="17">Assert</name><op:operator pos:line="170" pos:column="23">.</op:operator><name pos:line="170" pos:column="24">That</name></name><argument_list pos:line="170" pos:column="28">(<argument><expr><call><name><name pos:line="170" pos:column="29">callFooMethodWithParameter</name><op:operator pos:line="170" pos:column="55">.</op:operator><name pos:line="170" pos:column="56">ContainsCallTo</name></name><argument_list pos:line="170" pos:column="70">(<argument><expr><name pos:line="170" pos:column="71">foo1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="171" pos:column="17">Assert</name><op:operator pos:line="171" pos:column="23">.</op:operator><name pos:line="171" pos:column="24">That</name></name><argument_list pos:line="171" pos:column="28">(<argument><expr><op:operator pos:line="171" pos:column="29">!</op:operator><call><name><name pos:line="171" pos:column="30">callFooMethodWithParameter</name><op:operator pos:line="171" pos:column="56">.</op:operator><name pos:line="171" pos:column="57">ContainsCallTo</name></name><argument_list pos:line="171" pos:column="71">(<argument><expr><name pos:line="171" pos:column="72">foo0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="173" pos:column="17">var</name></type> <name pos:line="173" pos:column="21">callNoParams</name> <init pos:line="173" pos:column="34">= <expr><call><name><name pos:line="173" pos:column="36">callFooMethodWithoutParameters</name><op:operator pos:line="173" pos:column="66">.</op:operator><name><name pos:line="173" pos:column="67">FindExpressions</name><argument_list pos:line="173" pos:column="82">&lt;<argument><name pos:line="173" pos:column="83">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="173" pos:column="94">(<argument><expr><lit:literal type="boolean" pos:line="173" pos:column="95">true</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="173" pos:column="100">.</op:operator><call><name pos:line="173" pos:column="101">FirstOrDefault</name><argument_list pos:line="173" pos:column="115">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="174" pos:column="17">var</name></type> <name pos:line="174" pos:column="21">matches</name> <init pos:line="174" pos:column="29">= <expr><call><name><name pos:line="174" pos:column="31">callNoParams</name><op:operator pos:line="174" pos:column="43">.</op:operator><name pos:line="174" pos:column="44">FindMatches</name></name><argument_list pos:line="174" pos:column="55">()</argument_list></call><op:operator pos:line="174" pos:column="57">.</op:operator><call><name pos:line="174" pos:column="58">ToList</name><argument_list pos:line="174" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="175" pos:column="17">Assert</name><op:operator pos:line="175" pos:column="23">.</op:operator><name pos:line="175" pos:column="24">AreEqual</name></name><argument_list pos:line="175" pos:column="32">(<argument><expr><lit:literal type="number" pos:line="175" pos:column="33">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="175" pos:column="36">matches</name><op:operator pos:line="175" pos:column="43">.</op:operator><name pos:line="175" pos:column="44">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="176" pos:column="17">Assert</name><op:operator pos:line="176" pos:column="23">.</op:operator><name pos:line="176" pos:column="24">AreSame</name></name><argument_list pos:line="176" pos:column="31">(<argument><expr><name pos:line="176" pos:column="32">foo0</name></expr></argument>, <argument><expr><name><name pos:line="176" pos:column="38">matches</name><index pos:line="176" pos:column="45">[<expr><lit:literal type="number" pos:line="176" pos:column="46">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="178" pos:column="17">var</name></type> <name pos:line="178" pos:column="21">callWithParam</name> <init pos:line="178" pos:column="35">= <expr><call><name><name pos:line="178" pos:column="37">callFooMethodWithParameter</name><op:operator pos:line="178" pos:column="63">.</op:operator><name><name pos:line="178" pos:column="64">FindExpressions</name><argument_list pos:line="178" pos:column="79">&lt;<argument><name pos:line="178" pos:column="80">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="178" pos:column="91">(<argument><expr><lit:literal type="boolean" pos:line="178" pos:column="92">true</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="178" pos:column="97">.</op:operator><call><name pos:line="178" pos:column="98">FirstOrDefault</name><argument_list pos:line="178" pos:column="112">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name pos:line="179" pos:column="17">matches</name> <op:operator pos:line="179" pos:column="25">=</op:operator> <call><name><name pos:line="179" pos:column="27">callWithParam</name><op:operator pos:line="179" pos:column="40">.</op:operator><name pos:line="179" pos:column="41">FindMatches</name></name><argument_list pos:line="179" pos:column="52">()</argument_list></call><op:operator pos:line="179" pos:column="54">.</op:operator><call><name pos:line="179" pos:column="55">ToList</name><argument_list pos:line="179" pos:column="61">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="180" pos:column="17">Assert</name><op:operator pos:line="180" pos:column="23">.</op:operator><name pos:line="180" pos:column="24">AreEqual</name></name><argument_list pos:line="180" pos:column="32">(<argument><expr><lit:literal type="number" pos:line="180" pos:column="33">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="180" pos:column="36">matches</name><op:operator pos:line="180" pos:column="43">.</op:operator><name pos:line="180" pos:column="44">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="181" pos:column="17">Assert</name><op:operator pos:line="181" pos:column="23">.</op:operator><name pos:line="181" pos:column="24">AreSame</name></name><argument_list pos:line="181" pos:column="31">(<argument><expr><name pos:line="181" pos:column="32">foo1</name></expr></argument>, <argument><expr><name><name pos:line="181" pos:column="38">matches</name><index pos:line="181" pos:column="45">[<expr><lit:literal type="number" pos:line="181" pos:column="46">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></using>
        }</block></function>

        <function><type><attribute pos:line="185" pos:column="9">[<expr><name pos:line="185" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="186" pos:column="9">public</specifier> <name pos:line="186" pos:column="16">void</name></type> <name pos:line="186" pos:column="21">TestOverloadedMethodCallResolutionWithCallingObject</name><parameter_list pos:line="186" pos:column="72">()</parameter_list> <block pos:line="186" pos:column="75">{
            <expr_stmt><expr><call><name><name pos:line="187" pos:column="13">File</name><op:operator pos:line="187" pos:column="17">.</op:operator><name pos:line="187" pos:column="18">Copy</name></name><argument_list pos:line="187" pos:column="22">(<argument><expr><lit:literal type="string" pos:line="187" pos:column="23">@"..\..\TestInputs\csharp_overload_callingobj.cs"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="187" pos:column="74">Path</name><op:operator pos:line="187" pos:column="78">.</op:operator><name pos:line="187" pos:column="79">Combine</name></name><argument_list pos:line="187" pos:column="86">(<argument><expr><name pos:line="187" pos:column="87">TestDir</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="187" pos:column="96">"csharp_overload_callingobj.cs"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="188" pos:column="13">File</name><op:operator pos:line="188" pos:column="17">.</op:operator><name pos:line="188" pos:column="18">Copy</name></name><argument_list pos:line="188" pos:column="22">(<argument><expr><lit:literal type="string" pos:line="188" pos:column="23">@"..\..\TestInputs\csharp_overload_calls.cs"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="188" pos:column="69">Path</name><op:operator pos:line="188" pos:column="73">.</op:operator><name pos:line="188" pos:column="74">Combine</name></name><argument_list pos:line="188" pos:column="81">(<argument><expr><name pos:line="188" pos:column="82">TestDir</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="188" pos:column="91">"csharp_overload_calls.cs"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <using pos:line="189" pos:column="13">using(<decl><type><name pos:line="189" pos:column="19">var</name></type> <name pos:line="189" pos:column="23">project</name> <init pos:line="189" pos:column="31">= <expr><op:operator pos:line="189" pos:column="33">new</op:operator> <call><name><name pos:line="189" pos:column="37">DataProject</name><argument_list pos:line="189" pos:column="48">&lt;<argument><name pos:line="189" pos:column="49">CompleteWorkingSet</name></argument>&gt;</argument_list></name><argument_list pos:line="189" pos:column="68">(<argument><expr><name pos:line="189" pos:column="69">DataDir</name></expr></argument>, <argument><expr><name pos:line="189" pos:column="78">TestDir</name></expr></argument>, <argument><expr><name pos:line="189" pos:column="87">SrcMLDir</name></expr></argument>)</argument_list></call></expr></init></decl>) <block pos:line="189" pos:column="98">{
                <expr_stmt><expr><call><name><name pos:line="190" pos:column="17">project</name><op:operator pos:line="190" pos:column="24">.</op:operator><name pos:line="190" pos:column="25">Update</name></name><argument_list pos:line="190" pos:column="31">()</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="192" pos:column="17">var</name></type> <name pos:line="192" pos:column="21">query</name> <init pos:line="192" pos:column="27">= <expr><op:operator pos:line="192" pos:column="29">new</op:operator> <call><name><name pos:line="192" pos:column="33">StatementForLocationQuery</name><argument_list pos:line="192" pos:column="58">&lt;<argument><name pos:line="192" pos:column="59">MethodDefinition</name></argument>&gt;</argument_list></name><argument_list pos:line="192" pos:column="76">(<argument><expr><name><name pos:line="192" pos:column="77">project</name><op:operator pos:line="192" pos:column="84">.</op:operator><name pos:line="192" pos:column="85">WorkingSet</name></name></expr></argument>, <argument><expr><name><name pos:line="192" pos:column="97">Timeout</name><op:operator pos:line="192" pos:column="104">.</op:operator><name pos:line="192" pos:column="105">Infinite</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name pos:line="194" pos:column="17">var</name></type> <name pos:line="194" pos:column="21">startOffoo0</name> <init pos:line="194" pos:column="33">= <expr><op:operator pos:line="194" pos:column="35">new</op:operator> <call><name pos:line="194" pos:column="39">SourceLocation</name><argument_list pos:line="194" pos:column="53">(<argument><expr><call><name><name pos:line="194" pos:column="54">Path</name><op:operator pos:line="194" pos:column="58">.</op:operator><name pos:line="194" pos:column="59">GetFullPath</name></name><argument_list pos:line="194" pos:column="70">(<argument><expr><call><name><name pos:line="194" pos:column="71">Path</name><op:operator pos:line="194" pos:column="75">.</op:operator><name pos:line="194" pos:column="76">Combine</name></name><argument_list pos:line="194" pos:column="83">(<argument><expr><name pos:line="194" pos:column="84">TestDir</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="194" pos:column="93">"csharp_overload_calls.cs"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="194" pos:column="123">11</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="194" pos:column="127">25</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="195" pos:column="17">var</name></type> <name pos:line="195" pos:column="21">startOffoo1</name> <init pos:line="195" pos:column="33">= <expr><op:operator pos:line="195" pos:column="35">new</op:operator> <call><name pos:line="195" pos:column="39">SourceLocation</name><argument_list pos:line="195" pos:column="53">(<argument><expr><call><name><name pos:line="195" pos:column="54">Path</name><op:operator pos:line="195" pos:column="58">.</op:operator><name pos:line="195" pos:column="59">GetFullPath</name></name><argument_list pos:line="195" pos:column="70">(<argument><expr><call><name><name pos:line="195" pos:column="71">Path</name><op:operator pos:line="195" pos:column="75">.</op:operator><name pos:line="195" pos:column="76">Combine</name></name><argument_list pos:line="195" pos:column="83">(<argument><expr><name pos:line="195" pos:column="84">TestDir</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="195" pos:column="93">"csharp_overload_calls.cs"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="195" pos:column="123">13</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="195" pos:column="127">25</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name pos:line="197" pos:column="17">var</name></type> <name pos:line="197" pos:column="21">startOfRunFoo0</name> <init pos:line="197" pos:column="36">= <expr><op:operator pos:line="197" pos:column="38">new</op:operator> <call><name pos:line="197" pos:column="42">SourceLocation</name><argument_list pos:line="197" pos:column="56">(<argument><expr><call><name><name pos:line="197" pos:column="57">Path</name><op:operator pos:line="197" pos:column="61">.</op:operator><name pos:line="197" pos:column="62">GetFullPath</name></name><argument_list pos:line="197" pos:column="73">(<argument><expr><call><name><name pos:line="197" pos:column="74">Path</name><op:operator pos:line="197" pos:column="78">.</op:operator><name pos:line="197" pos:column="79">Combine</name></name><argument_list pos:line="197" pos:column="86">(<argument><expr><name pos:line="197" pos:column="87">TestDir</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="197" pos:column="96">"csharp_overload_callingobj.cs"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="197" pos:column="131">5</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="197" pos:column="134">25</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="198" pos:column="17">var</name></type> <name pos:line="198" pos:column="21">startOfRunFoo1</name> <init pos:line="198" pos:column="36">= <expr><op:operator pos:line="198" pos:column="38">new</op:operator> <call><name pos:line="198" pos:column="42">SourceLocation</name><argument_list pos:line="198" pos:column="56">(<argument><expr><call><name><name pos:line="198" pos:column="57">Path</name><op:operator pos:line="198" pos:column="61">.</op:operator><name pos:line="198" pos:column="62">GetFullPath</name></name><argument_list pos:line="198" pos:column="73">(<argument><expr><call><name><name pos:line="198" pos:column="74">Path</name><op:operator pos:line="198" pos:column="78">.</op:operator><name pos:line="198" pos:column="79">Combine</name></name><argument_list pos:line="198" pos:column="86">(<argument><expr><name pos:line="198" pos:column="87">TestDir</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="198" pos:column="96">"csharp_overload_callingobj.cs"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="198" pos:column="131">7</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="198" pos:column="134">25</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name pos:line="200" pos:column="17">var</name></type> <name pos:line="200" pos:column="21">foo0</name> <init pos:line="200" pos:column="26">= <expr><call><name><name pos:line="200" pos:column="28">query</name><op:operator pos:line="200" pos:column="33">.</op:operator><name pos:line="200" pos:column="34">Execute</name></name><argument_list pos:line="200" pos:column="41">(<argument><expr><name pos:line="200" pos:column="42">startOffoo0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="201" pos:column="17">Assert</name><op:operator pos:line="201" pos:column="23">.</op:operator><name pos:line="201" pos:column="24">AreEqual</name></name><argument_list pos:line="201" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="201" pos:column="33">"foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="201" pos:column="40">foo0</name><op:operator pos:line="201" pos:column="44">.</op:operator><name pos:line="201" pos:column="45">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="202" pos:column="17">Assert</name><op:operator pos:line="202" pos:column="23">.</op:operator><name pos:line="202" pos:column="24">AreEqual</name></name><argument_list pos:line="202" pos:column="32">(<argument><expr><lit:literal type="number" pos:line="202" pos:column="33">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="202" pos:column="36">foo0</name><op:operator pos:line="202" pos:column="40">.</op:operator><name pos:line="202" pos:column="41">Parameters</name><op:operator pos:line="202" pos:column="51">.</op:operator><name pos:line="202" pos:column="52">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="204" pos:column="17">var</name></type> <name pos:line="204" pos:column="21">foo1</name> <init pos:line="204" pos:column="26">= <expr><call><name><name pos:line="204" pos:column="28">query</name><op:operator pos:line="204" pos:column="33">.</op:operator><name pos:line="204" pos:column="34">Execute</name></name><argument_list pos:line="204" pos:column="41">(<argument><expr><name pos:line="204" pos:column="42">startOffoo1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="205" pos:column="17">Assert</name><op:operator pos:line="205" pos:column="23">.</op:operator><name pos:line="205" pos:column="24">AreEqual</name></name><argument_list pos:line="205" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="205" pos:column="33">"foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="205" pos:column="40">foo1</name><op:operator pos:line="205" pos:column="44">.</op:operator><name pos:line="205" pos:column="45">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="206" pos:column="17">Assert</name><op:operator pos:line="206" pos:column="23">.</op:operator><name pos:line="206" pos:column="24">AreEqual</name></name><argument_list pos:line="206" pos:column="32">(<argument><expr><lit:literal type="number" pos:line="206" pos:column="33">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="206" pos:column="36">foo1</name><op:operator pos:line="206" pos:column="40">.</op:operator><name pos:line="206" pos:column="41">Parameters</name><op:operator pos:line="206" pos:column="51">.</op:operator><name pos:line="206" pos:column="52">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="208" pos:column="17">var</name></type> <name pos:line="208" pos:column="21">runFoo0</name> <init pos:line="208" pos:column="29">= <expr><call><name><name pos:line="208" pos:column="31">query</name><op:operator pos:line="208" pos:column="36">.</op:operator><name pos:line="208" pos:column="37">Execute</name></name><argument_list pos:line="208" pos:column="44">(<argument><expr><name pos:line="208" pos:column="45">startOfRunFoo0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="209" pos:column="17">Assert</name><op:operator pos:line="209" pos:column="23">.</op:operator><name pos:line="209" pos:column="24">AreEqual</name></name><argument_list pos:line="209" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="209" pos:column="33">"runFoo0"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="209" pos:column="44">runFoo0</name><op:operator pos:line="209" pos:column="51">.</op:operator><name pos:line="209" pos:column="52">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="211" pos:column="17">var</name></type> <name pos:line="211" pos:column="21">runFoo1</name> <init pos:line="211" pos:column="29">= <expr><call><name><name pos:line="211" pos:column="31">query</name><op:operator pos:line="211" pos:column="36">.</op:operator><name pos:line="211" pos:column="37">Execute</name></name><argument_list pos:line="211" pos:column="44">(<argument><expr><name pos:line="211" pos:column="45">startOfRunFoo1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="212" pos:column="17">Assert</name><op:operator pos:line="212" pos:column="23">.</op:operator><name pos:line="212" pos:column="24">AreEqual</name></name><argument_list pos:line="212" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="212" pos:column="33">"runFoo1"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="212" pos:column="44">runFoo1</name><op:operator pos:line="212" pos:column="51">.</op:operator><name pos:line="212" pos:column="52">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name pos:line="214" pos:column="17">Assert</name><op:operator pos:line="214" pos:column="23">.</op:operator><name pos:line="214" pos:column="24">That</name></name><argument_list pos:line="214" pos:column="28">(<argument><expr><call><name><name pos:line="214" pos:column="29">runFoo0</name><op:operator pos:line="214" pos:column="36">.</op:operator><name pos:line="214" pos:column="37">ContainsCallTo</name></name><argument_list pos:line="214" pos:column="51">(<argument><expr><name pos:line="214" pos:column="52">foo0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="215" pos:column="17">Assert</name><op:operator pos:line="215" pos:column="23">.</op:operator><name pos:line="215" pos:column="24">That</name></name><argument_list pos:line="215" pos:column="28">(<argument><expr><op:operator pos:line="215" pos:column="29">!</op:operator><call><name><name pos:line="215" pos:column="30">runFoo0</name><op:operator pos:line="215" pos:column="37">.</op:operator><name pos:line="215" pos:column="38">ContainsCallTo</name></name><argument_list pos:line="215" pos:column="52">(<argument><expr><name pos:line="215" pos:column="53">foo1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name pos:line="217" pos:column="17">Assert</name><op:operator pos:line="217" pos:column="23">.</op:operator><name pos:line="217" pos:column="24">That</name></name><argument_list pos:line="217" pos:column="28">(<argument><expr><call><name><name pos:line="217" pos:column="29">runFoo1</name><op:operator pos:line="217" pos:column="36">.</op:operator><name pos:line="217" pos:column="37">ContainsCallTo</name></name><argument_list pos:line="217" pos:column="51">(<argument><expr><name pos:line="217" pos:column="52">foo1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="218" pos:column="17">Assert</name><op:operator pos:line="218" pos:column="23">.</op:operator><name pos:line="218" pos:column="24">That</name></name><argument_list pos:line="218" pos:column="28">(<argument><expr><op:operator pos:line="218" pos:column="29">!</op:operator><call><name><name pos:line="218" pos:column="30">runFoo1</name><op:operator pos:line="218" pos:column="37">.</op:operator><name pos:line="218" pos:column="38">ContainsCallTo</name></name><argument_list pos:line="218" pos:column="52">(<argument><expr><name pos:line="218" pos:column="53">foo0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="220" pos:column="17">var</name></type> <name pos:line="220" pos:column="21">callNoParams</name> <init pos:line="220" pos:column="34">= <expr><call><name><name pos:line="220" pos:column="36">runFoo0</name><op:operator pos:line="220" pos:column="43">.</op:operator><name><name pos:line="220" pos:column="44">FindExpressions</name><argument_list pos:line="220" pos:column="59">&lt;<argument><name pos:line="220" pos:column="60">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="220" pos:column="71">(<argument><expr><lit:literal type="boolean" pos:line="220" pos:column="72">true</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="220" pos:column="77">.</op:operator><call><name pos:line="220" pos:column="78">FirstOrDefault</name><argument_list pos:line="220" pos:column="92">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="221" pos:column="17">var</name></type> <name pos:line="221" pos:column="21">matches</name> <init pos:line="221" pos:column="29">= <expr><call><name><name pos:line="221" pos:column="31">callNoParams</name><op:operator pos:line="221" pos:column="43">.</op:operator><name pos:line="221" pos:column="44">FindMatches</name></name><argument_list pos:line="221" pos:column="55">()</argument_list></call><op:operator pos:line="221" pos:column="57">.</op:operator><call><name pos:line="221" pos:column="58">ToList</name><argument_list pos:line="221" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="222" pos:column="17">Assert</name><op:operator pos:line="222" pos:column="23">.</op:operator><name pos:line="222" pos:column="24">AreEqual</name></name><argument_list pos:line="222" pos:column="32">(<argument><expr><lit:literal type="number" pos:line="222" pos:column="33">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="222" pos:column="36">matches</name><op:operator pos:line="222" pos:column="43">.</op:operator><name pos:line="222" pos:column="44">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="223" pos:column="17">Assert</name><op:operator pos:line="223" pos:column="23">.</op:operator><name pos:line="223" pos:column="24">AreSame</name></name><argument_list pos:line="223" pos:column="31">(<argument><expr><name pos:line="223" pos:column="32">foo0</name></expr></argument>, <argument><expr><name><name pos:line="223" pos:column="38">matches</name><index pos:line="223" pos:column="45">[<expr><lit:literal type="number" pos:line="223" pos:column="46">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="225" pos:column="17">var</name></type> <name pos:line="225" pos:column="21">callWithParam</name> <init pos:line="225" pos:column="35">= <expr><call><name><name pos:line="225" pos:column="37">runFoo1</name><op:operator pos:line="225" pos:column="44">.</op:operator><name><name pos:line="225" pos:column="45">FindExpressions</name><argument_list pos:line="225" pos:column="60">&lt;<argument><name pos:line="225" pos:column="61">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="225" pos:column="72">(<argument><expr><lit:literal type="boolean" pos:line="225" pos:column="73">true</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="225" pos:column="78">.</op:operator><call><name pos:line="225" pos:column="79">FirstOrDefault</name><argument_list pos:line="225" pos:column="93">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name pos:line="226" pos:column="17">matches</name> <op:operator pos:line="226" pos:column="25">=</op:operator> <call><name><name pos:line="226" pos:column="27">callWithParam</name><op:operator pos:line="226" pos:column="40">.</op:operator><name pos:line="226" pos:column="41">FindMatches</name></name><argument_list pos:line="226" pos:column="52">()</argument_list></call><op:operator pos:line="226" pos:column="54">.</op:operator><call><name pos:line="226" pos:column="55">ToList</name><argument_list pos:line="226" pos:column="61">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="227" pos:column="17">Assert</name><op:operator pos:line="227" pos:column="23">.</op:operator><name pos:line="227" pos:column="24">AreEqual</name></name><argument_list pos:line="227" pos:column="32">(<argument><expr><lit:literal type="number" pos:line="227" pos:column="33">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="227" pos:column="36">matches</name><op:operator pos:line="227" pos:column="43">.</op:operator><name pos:line="227" pos:column="44">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="228" pos:column="17">Assert</name><op:operator pos:line="228" pos:column="23">.</op:operator><name pos:line="228" pos:column="24">AreSame</name></name><argument_list pos:line="228" pos:column="31">(<argument><expr><name pos:line="228" pos:column="32">foo1</name></expr></argument>, <argument><expr><name><name pos:line="228" pos:column="38">matches</name><index pos:line="228" pos:column="45">[<expr><lit:literal type="number" pos:line="228" pos:column="46">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></using>
        }</block></function>

        <comment type="line" pos:line="232" pos:column="9">//TODO: write tests that use the XPath overload</comment>
    }</block></class>
}</block></namespace></unit>
