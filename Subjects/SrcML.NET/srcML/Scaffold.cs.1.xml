<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\VisualStudio\ABB.SrcML.VisualStudio.SrcMLService.IntegrationTests\Scaffold.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">EnvDTE</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">Microsoft</name><op:operator pos:line="2" pos:column="16">.</op:operator><name pos:line="2" pos:column="17">VisualStudio</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Microsoft</name><op:operator pos:line="3" pos:column="16">.</op:operator><name pos:line="3" pos:column="17">VisualStudio</name><op:operator pos:line="3" pos:column="29">.</op:operator><name pos:line="3" pos:column="30">Shell</name><op:operator pos:line="3" pos:column="35">.</op:operator><name pos:line="3" pos:column="36">Interop</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Microsoft</name><op:operator pos:line="4" pos:column="16">.</op:operator><name pos:line="4" pos:column="17">VisualStudio</name><op:operator pos:line="4" pos:column="29">.</op:operator><name pos:line="4" pos:column="30">TestTools</name><op:operator pos:line="4" pos:column="39">.</op:operator><name pos:line="4" pos:column="40">UnitTesting</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Microsoft</name><op:operator pos:line="5" pos:column="16">.</op:operator><name pos:line="5" pos:column="17">VSSDK</name><op:operator pos:line="5" pos:column="22">.</op:operator><name pos:line="5" pos:column="23">Tools</name><op:operator pos:line="5" pos:column="28">.</op:operator><name pos:line="5" pos:column="29">VsIdeTesting</name></name>;</using>
<using pos:line="6" pos:column="1">using <name pos:line="6" pos:column="7">System</name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">System</name><op:operator pos:line="7" pos:column="13">.</op:operator><name pos:line="7" pos:column="14">Collections</name><op:operator pos:line="7" pos:column="25">.</op:operator><name pos:line="7" pos:column="26">Generic</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">System</name><op:operator pos:line="8" pos:column="13">.</op:operator><name pos:line="8" pos:column="14">Linq</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">System</name><op:operator pos:line="9" pos:column="13">.</op:operator><name pos:line="9" pos:column="14">Text</name></name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">System</name><op:operator pos:line="10" pos:column="13">.</op:operator><name pos:line="10" pos:column="14">Threading</name><op:operator pos:line="10" pos:column="23">.</op:operator><name pos:line="10" pos:column="24">Tasks</name></name>;</using>
<using pos:line="11" pos:column="1">using <name pos:line="11" pos:column="7">IOleServiceProvider</name> <init pos:line="11" pos:column="27">= <expr><name><name pos:line="11" pos:column="29">Microsoft</name><op:operator pos:line="11" pos:column="38">.</op:operator><name pos:line="11" pos:column="39">VisualStudio</name><op:operator pos:line="11" pos:column="51">.</op:operator><name pos:line="11" pos:column="52">OLE</name><op:operator pos:line="11" pos:column="55">.</op:operator><name pos:line="11" pos:column="56">Interop</name><op:operator pos:line="11" pos:column="63">.</op:operator><name pos:line="11" pos:column="64">IServiceProvider</name></name></expr></init>;</using>

<namespace pos:line="13" pos:column="1">namespace <name><name pos:line="13" pos:column="11">ABB</name><op:operator pos:line="13" pos:column="14">.</op:operator><name pos:line="13" pos:column="15">SrcML</name><op:operator pos:line="13" pos:column="20">.</op:operator><name pos:line="13" pos:column="21">VisualStudio</name><op:operator pos:line="13" pos:column="33">.</op:operator><name pos:line="13" pos:column="34">SrcMLService</name><op:operator pos:line="13" pos:column="46">.</op:operator><name pos:line="13" pos:column="47">IntegrationTests</name></name> <block pos:line="13" pos:column="64">{
    <comment type="line" pos:line="14" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="15" pos:column="5">/// The scaffold class provides a quick setup for Visual Studio integration tests.</comment>
    <comment type="line" pos:line="16" pos:column="5">/// &lt;/summary&gt;</comment>
    <comment type="line" pos:line="17" pos:column="5">/// &lt;typeparam name="ISERVICE"&gt;The service interface being tested&lt;/typeparam&gt;</comment>
    <class pos:line="18" pos:column="5">class <name><name pos:line="18" pos:column="11">Scaffold</name><argument_list pos:line="18" pos:column="19">&lt;<argument><name pos:line="18" pos:column="20">ISERVICE</name></argument>&gt; <where pos:line="18" pos:column="30">where <name pos:line="18" pos:column="36">ISERVICE</name> : class</where></argument_list></name> <block pos:line="18" pos:column="53">{
        <comment type="line" pos:line="19" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="20" pos:column="9">/// The package that contains &lt;typeparam name="ISERVICE" /&gt;</comment>
        <comment type="line" pos:line="21" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="22" pos:column="9">public</specifier> <name pos:line="22" pos:column="16">IVsPackage</name></type> <name pos:line="22" pos:column="27">Package</name> <block pos:line="22" pos:column="35">{ <function_decl><name pos:line="22" pos:column="37">get</name>;</function_decl> <function_decl><name pos:line="22" pos:column="42">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="24" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="25" pos:column="9">/// An instance of the service to be tested</comment>
        <comment type="line" pos:line="26" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="27" pos:column="9">public</specifier> <name pos:line="27" pos:column="16">ISERVICE</name></type> <name pos:line="27" pos:column="25">Service</name> <block pos:line="27" pos:column="33">{ <function_decl><name pos:line="27" pos:column="35">get</name>;</function_decl> <function_decl><name pos:line="27" pos:column="40">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="29" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="30" pos:column="9">/// Sets up the visual studio host instance. This method sites the package in the &lt;see cref="Microsoft.VSSDK.Tools.VsIdeTesting.VsIdeTestHostContext"/&gt;</comment>
        <comment type="line" pos:line="31" pos:column="9">/// and gets the service instance.</comment>
        <comment type="line" pos:line="32" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="33" pos:column="9">/// &lt;param name="package"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="34" pos:column="9">/// &lt;param name="serviceType"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="35" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="36" pos:column="9">public</specifier> <specifier pos:line="36" pos:column="16">static</specifier> <name><name pos:line="36" pos:column="23">Scaffold</name><argument_list pos:line="36" pos:column="31">&lt;<argument><name pos:line="36" pos:column="32">ISERVICE</name></argument>&gt;</argument_list></name></type> <name pos:line="36" pos:column="42">Setup</name><parameter_list pos:line="36" pos:column="47">(<param><decl><type><name pos:line="36" pos:column="48">IVsPackage</name></type> <name pos:line="36" pos:column="59">package</name></decl></param>, <param><decl><type><name pos:line="36" pos:column="68">Type</name></type> <name pos:line="36" pos:column="73">serviceType</name></decl></param>)</parameter_list> <block pos:line="36" pos:column="86">{
            <expr_stmt><expr><call><name><name pos:line="37" pos:column="13">Assert</name><op:operator pos:line="37" pos:column="19">.</op:operator><name pos:line="37" pos:column="20">IsNotNull</name></name><argument_list pos:line="37" pos:column="29">(<argument><expr><name pos:line="37" pos:column="30">package</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="37" pos:column="39">"Package is null"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="38" pos:column="13">var</name></type> <name pos:line="38" pos:column="17">scaffold</name> <init pos:line="38" pos:column="26">= <expr><op:operator pos:line="38" pos:column="28">new</op:operator> <call><name><name pos:line="38" pos:column="32">Scaffold</name><argument_list pos:line="38" pos:column="40">&lt;<argument><name pos:line="38" pos:column="41">ISERVICE</name></argument>&gt;</argument_list></name><argument_list pos:line="38" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="39" pos:column="13">scaffold</name><op:operator pos:line="39" pos:column="21">.</op:operator><name pos:line="39" pos:column="22">Package</name></name> <op:operator pos:line="39" pos:column="30">=</op:operator> <name pos:line="39" pos:column="32">package</name></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="41" pos:column="13">var</name></type> <name pos:line="41" pos:column="17">serviceProvider</name> <init pos:line="41" pos:column="33">= <expr><name><name pos:line="41" pos:column="35">VsIdeTestHostContext</name><op:operator pos:line="41" pos:column="55">.</op:operator><name pos:line="41" pos:column="56">Dte</name></name> <op:operator pos:line="41" pos:column="60">as</op:operator> <name pos:line="41" pos:column="63">IOleServiceProvider</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="42" pos:column="13">Assert</name><op:operator pos:line="42" pos:column="19">.</op:operator><name pos:line="42" pos:column="20">IsNotNull</name></name><argument_list pos:line="42" pos:column="29">(<argument><expr><name pos:line="42" pos:column="30">serviceProvider</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="42" pos:column="47">"Could not get the service provider"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="44" pos:column="13">// site the package</comment>
            <expr_stmt><expr><call><name><name pos:line="45" pos:column="13">Assert</name><op:operator pos:line="45" pos:column="19">.</op:operator><name pos:line="45" pos:column="20">AreEqual</name></name><argument_list pos:line="45" pos:column="28">(<argument><expr><name><name pos:line="45" pos:column="29">VSConstants</name><op:operator pos:line="45" pos:column="40">.</op:operator><name pos:line="45" pos:column="41">S_OK</name></name></expr></argument>, <argument><expr><call><name><name pos:line="45" pos:column="47">scaffold</name><op:operator pos:line="45" pos:column="55">.</op:operator><name pos:line="45" pos:column="56">Package</name><op:operator pos:line="45" pos:column="63">.</op:operator><name pos:line="45" pos:column="64">SetSite</name></name><argument_list pos:line="45" pos:column="71">(<argument><expr><name pos:line="45" pos:column="72">serviceProvider</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="45" pos:column="90">"Could not site the package"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="47" pos:column="13">object</name></type> <name pos:line="47" pos:column="20">serviceObject</name> <init pos:line="47" pos:column="34">= <expr><call><name><name pos:line="47" pos:column="36">VsIdeTestHostContext</name><op:operator pos:line="47" pos:column="56">.</op:operator><name pos:line="47" pos:column="57">ServiceProvider</name><op:operator pos:line="47" pos:column="72">.</op:operator><name pos:line="47" pos:column="73">GetService</name></name><argument_list pos:line="47" pos:column="83">(<argument><expr><name pos:line="47" pos:column="84">serviceType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="48" pos:column="13">Assert</name><op:operator pos:line="48" pos:column="19">.</op:operator><name pos:line="48" pos:column="20">IsNotNull</name></name><argument_list pos:line="48" pos:column="29">(<argument><expr><name pos:line="48" pos:column="30">serviceObject</name></expr></argument>, <argument><expr><call><name><name pos:line="48" pos:column="45">String</name><op:operator pos:line="48" pos:column="51">.</op:operator><name pos:line="48" pos:column="52">Format</name></name><argument_list pos:line="48" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="48" pos:column="59">"Could not get the service {0}"</lit:literal></expr></argument>, <argument><expr><name pos:line="48" pos:column="92">serviceType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="49" pos:column="13">Assert</name><op:operator pos:line="49" pos:column="19">.</op:operator><name pos:line="49" pos:column="20">IsInstanceOfType</name></name><argument_list pos:line="49" pos:column="36">(<argument><expr><name pos:line="49" pos:column="37">serviceObject</name></expr></argument>, <argument><expr><call><name pos:line="49" pos:column="52">typeof</name><argument_list pos:line="49" pos:column="58">(<argument><expr><name pos:line="49" pos:column="59">ISERVICE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="49" pos:column="70">String</name><op:operator pos:line="49" pos:column="76">.</op:operator><name pos:line="49" pos:column="77">Format</name></name><argument_list pos:line="49" pos:column="83">(<argument><expr><lit:literal type="string" pos:line="49" pos:column="84">"Service object does not implement {0}"</lit:literal></expr></argument>, <argument><expr><call><name pos:line="49" pos:column="125">typeof</name><argument_list pos:line="49" pos:column="131">(<argument><expr><name pos:line="49" pos:column="132">ISERVICE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="50" pos:column="13">scaffold</name><op:operator pos:line="50" pos:column="21">.</op:operator><name pos:line="50" pos:column="22">Service</name></name> <op:operator pos:line="50" pos:column="30">=</op:operator> <name pos:line="50" pos:column="32">serviceObject</name> <op:operator pos:line="50" pos:column="46">as</op:operator> <name pos:line="50" pos:column="49">ISERVICE</name></expr>;</expr_stmt>

            <return pos:line="52" pos:column="13">return <expr><name pos:line="52" pos:column="20">scaffold</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="55" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="56" pos:column="9">/// Cleans up the scaffold (unsites the package and sets &lt;see cref="Service"/&gt; and &lt;see cref="Package"/&gt; to null.</comment>
        <comment type="line" pos:line="57" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="58" pos:column="9">public</specifier> <name pos:line="58" pos:column="16">void</name></type> <name pos:line="58" pos:column="21">Cleanup</name><parameter_list pos:line="58" pos:column="28">()</parameter_list> <block pos:line="58" pos:column="31">{
            <expr_stmt><expr><name pos:line="59" pos:column="13">Service</name> <op:operator pos:line="59" pos:column="21">=</op:operator> <name pos:line="59" pos:column="23">null</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="60" pos:column="13">Package</name><op:operator pos:line="60" pos:column="20">.</op:operator><name pos:line="60" pos:column="21">SetSite</name></name><argument_list pos:line="60" pos:column="28">(<argument><expr><name pos:line="60" pos:column="29">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="61" pos:column="13">Package</name> <op:operator pos:line="61" pos:column="21">=</op:operator> <name pos:line="61" pos:column="23">null</name></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
