<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data\AbstractProgramElement.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2014 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Patrick Francis (ABB Group) - initial API, implementation, &amp; documentation
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">ABB</name><op:operator pos:line="13" pos:column="10">.</op:operator><name pos:line="13" pos:column="11">SrcML</name><op:operator pos:line="13" pos:column="16">.</op:operator><name pos:line="13" pos:column="17">Utilities</name></name>;</using>
<using pos:line="14" pos:column="1">using <name pos:line="14" pos:column="7">System</name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Collections</name><op:operator pos:line="15" pos:column="25">.</op:operator><name pos:line="15" pos:column="26">Generic</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Linq</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Text</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Xml</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">System</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">Xml</name><op:operator pos:line="19" pos:column="17">.</op:operator><name pos:line="19" pos:column="18">Schema</name></name>;</using>
<using pos:line="20" pos:column="1">using <name><name pos:line="20" pos:column="7">System</name><op:operator pos:line="20" pos:column="13">.</op:operator><name pos:line="20" pos:column="14">Xml</name><op:operator pos:line="20" pos:column="17">.</op:operator><name pos:line="20" pos:column="18">Serialization</name></name>;</using>

<namespace pos:line="22" pos:column="1">namespace <name><name pos:line="22" pos:column="11">ABB</name><op:operator pos:line="22" pos:column="14">.</op:operator><name pos:line="22" pos:column="15">SrcML</name><op:operator pos:line="22" pos:column="20">.</op:operator><name pos:line="22" pos:column="21">Data</name></name> <block pos:line="22" pos:column="26">{
    <comment type="line" pos:line="23" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="24" pos:column="5">/// An abstract class representing a thing in a program. This exists to hold functionality common to</comment>
    <comment type="line" pos:line="25" pos:column="5">/// both Statements and Expressions.</comment>
    <comment type="line" pos:line="26" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="27" pos:column="5">public</specifier> <specifier pos:line="27" pos:column="12">abstract</specifier> class <name pos:line="27" pos:column="27">AbstractProgramElement</name> <super pos:line="27" pos:column="50">: <name pos:line="27" pos:column="52">IXmlElement</name></super> <block pos:line="27" pos:column="64">{
        <comment type="line" pos:line="28" pos:column="9">/// &lt;summary&gt; XML Name for &lt;see cref="ProgrammingLanguage" /&gt; &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="29" pos:column="9">public</specifier> <specifier pos:line="29" pos:column="16">const</specifier> <name pos:line="29" pos:column="22">string</name></type> <name pos:line="29" pos:column="29">LanguageXmlName</name> <init pos:line="29" pos:column="45">= <expr><lit:literal type="string" pos:line="29" pos:column="47">"lang"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="31" pos:column="9">/// &lt;summary&gt;The language that this statement is written in.&lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="32" pos:column="9">public</specifier> <name pos:line="32" pos:column="16">Language</name></type> <name pos:line="32" pos:column="25">ProgrammingLanguage</name> <block pos:line="32" pos:column="45">{ <function_decl><name pos:line="32" pos:column="47">get</name>;</function_decl> <function_decl><name pos:line="32" pos:column="52">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="34" pos:column="9">/// &lt;summary&gt;Returns the parent of this element.&lt;/summary&gt;</comment>
        <function_decl><type><specifier pos:line="35" pos:column="9">protected</specifier> <specifier pos:line="35" pos:column="19">abstract</specifier> <name pos:line="35" pos:column="28">AbstractProgramElement</name></type> <name pos:line="35" pos:column="51">GetParent</name><parameter_list pos:line="35" pos:column="60">()</parameter_list>;</function_decl>
        <comment type="line" pos:line="36" pos:column="9">/// &lt;summary&gt;Returns the children of this element.&lt;/summary&gt;</comment>
        <function_decl><type><specifier pos:line="37" pos:column="9">protected</specifier> <specifier pos:line="37" pos:column="19">abstract</specifier> <name><name pos:line="37" pos:column="28">IEnumerable</name><argument_list pos:line="37" pos:column="39">&lt;<argument><name pos:line="37" pos:column="40">AbstractProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="37" pos:column="64">GetChildren</name><parameter_list pos:line="37" pos:column="75">()</parameter_list>;</function_decl>

        <comment type="line" pos:line="39" pos:column="9">/// &lt;summary&gt; Returns the XML name for this program element. &lt;/summary&gt;</comment>
        <function_decl><type><specifier pos:line="40" pos:column="9">public</specifier> <specifier pos:line="40" pos:column="16">abstract</specifier> <name pos:line="40" pos:column="25">string</name></type> <name pos:line="40" pos:column="32">GetXmlName</name><parameter_list pos:line="40" pos:column="42">()</parameter_list>;</function_decl>

        <comment type="line" pos:line="42" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="43" pos:column="9">/// Gets all of the parents of this element</comment>
        <comment type="line" pos:line="44" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="45" pos:column="9">/// &lt;returns&gt;The parents of this element&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="46" pos:column="9">public</specifier> <name><name pos:line="46" pos:column="16">IEnumerable</name><argument_list pos:line="46" pos:column="27">&lt;<argument><name pos:line="46" pos:column="28">AbstractProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="46" pos:column="52">GetAncestors</name><parameter_list pos:line="46" pos:column="64">()</parameter_list> <block pos:line="46" pos:column="67">{
            <return pos:line="47" pos:column="13">return <expr><call><name pos:line="47" pos:column="20">GetAncestorsAndStartingPoint</name><argument_list pos:line="47" pos:column="48">(<argument><expr><call><name><name pos:line="47" pos:column="49">this</name><op:operator pos:line="47" pos:column="53">.</op:operator><name pos:line="47" pos:column="54">GetParent</name></name><argument_list pos:line="47" pos:column="63">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="50" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="51" pos:column="9">/// Gets all of the parents of type &lt;typeparamref name="T"/&gt; of this element.</comment>
        <comment type="line" pos:line="52" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="53" pos:column="9">/// &lt;typeparam name="T"&gt;The type to filter the parent elements by&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="54" pos:column="9">/// &lt;returns&gt;The parents of type &lt;typeparamref name="T"/&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="55" pos:column="9">public</specifier> <name><name pos:line="55" pos:column="16">IEnumerable</name><argument_list pos:line="55" pos:column="27">&lt;<argument><name pos:line="55" pos:column="28">T</name></argument>&gt;</argument_list></name></type> <name><name pos:line="55" pos:column="31">GetAncestors</name><argument_list pos:line="55" pos:column="43">&lt;<argument><name pos:line="55" pos:column="44">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="55" pos:column="46">()</parameter_list> <where pos:line="55" pos:column="49">where <name pos:line="55" pos:column="55">T</name> : <name pos:line="55" pos:column="59">AbstractProgramElement</name></where> <block pos:line="55" pos:column="82">{
            <return pos:line="56" pos:column="13">return <expr><call><name pos:line="56" pos:column="20">GetAncestorsAndStartingPoint</name><argument_list pos:line="56" pos:column="48">(<argument><expr><call><name><name pos:line="56" pos:column="49">this</name><op:operator pos:line="56" pos:column="53">.</op:operator><name pos:line="56" pos:column="54">GetParent</name></name><argument_list pos:line="56" pos:column="63">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="56" pos:column="66">.</op:operator><call><name><name pos:line="56" pos:column="67">OfType</name><argument_list pos:line="56" pos:column="73">&lt;<argument><name pos:line="56" pos:column="74">T</name></argument>&gt;</argument_list></name><argument_list pos:line="56" pos:column="76">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="59" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="60" pos:column="9">/// Gets all of parents of this element as well as this element.</comment>
        <comment type="line" pos:line="61" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="62" pos:column="9">/// &lt;returns&gt;This element followed by its parents&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="63" pos:column="9">public</specifier> <name><name pos:line="63" pos:column="16">IEnumerable</name><argument_list pos:line="63" pos:column="27">&lt;<argument><name pos:line="63" pos:column="28">AbstractProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="63" pos:column="52">GetAncestorsAndSelf</name><parameter_list pos:line="63" pos:column="71">()</parameter_list> <block pos:line="63" pos:column="74">{
            <return pos:line="64" pos:column="13">return <expr><call><name pos:line="64" pos:column="20">GetAncestorsAndStartingPoint</name><argument_list pos:line="64" pos:column="48">(<argument><expr><name pos:line="64" pos:column="49">this</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="67" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="68" pos:column="9">/// Gets all of the parents of this element as well as the element itself where the type is &lt;typeparamref name="T"/&gt;.</comment>
        <comment type="line" pos:line="69" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="70" pos:column="9">/// &lt;typeparam name="T"&gt;The type to filter the parent elements by&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="71" pos:column="9">/// &lt;returns&gt;This element followed by its parent elements where the type is &lt;typeparamref name="T"/&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="72" pos:column="9">public</specifier> <name><name pos:line="72" pos:column="16">IEnumerable</name><argument_list pos:line="72" pos:column="27">&lt;<argument><name pos:line="72" pos:column="28">T</name></argument>&gt;</argument_list></name></type> <name><name pos:line="72" pos:column="31">GetAncestorsAndSelf</name><argument_list pos:line="72" pos:column="50">&lt;<argument><name pos:line="72" pos:column="51">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="72" pos:column="53">()</parameter_list> <where pos:line="72" pos:column="56">where <name pos:line="72" pos:column="62">T</name> : <name pos:line="72" pos:column="66">AbstractProgramElement</name></where> <block pos:line="72" pos:column="89">{
            <return pos:line="73" pos:column="13">return <expr><call><name pos:line="73" pos:column="20">GetAncestorsAndStartingPoint</name><argument_list pos:line="73" pos:column="48">(<argument><expr><name pos:line="73" pos:column="49">this</name></expr></argument>)</argument_list></call><op:operator pos:line="73" pos:column="54">.</op:operator><call><name><name pos:line="73" pos:column="55">OfType</name><argument_list pos:line="73" pos:column="61">&lt;<argument><name pos:line="73" pos:column="62">T</name></argument>&gt;</argument_list></name><argument_list pos:line="73" pos:column="64">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="76" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="77" pos:column="9">/// Gets all of the descendant elements of this statement. This is every element that is rooted at this element.</comment>
        <comment type="line" pos:line="78" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="79" pos:column="9">/// &lt;returns&gt;The descendants of this statement&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="80" pos:column="9">public</specifier> <name><name pos:line="80" pos:column="16">IEnumerable</name><argument_list pos:line="80" pos:column="27">&lt;<argument><name pos:line="80" pos:column="28">AbstractProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="80" pos:column="52">GetDescendants</name><parameter_list pos:line="80" pos:column="66">()</parameter_list> <block pos:line="80" pos:column="69">{
            <return pos:line="81" pos:column="13">return <expr><call><name pos:line="81" pos:column="20">GetDescendants</name><argument_list pos:line="81" pos:column="34">(<argument><expr><name pos:line="81" pos:column="35">this</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="81" pos:column="41">false</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="84" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="85" pos:column="9">/// Gets all of the descendant elements of this element where the type is &lt;typeparamref name="T"/&gt;.</comment>
        <comment type="line" pos:line="86" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="87" pos:column="9">/// &lt;typeparam name="T"&gt;The type to filter the descendant elements by&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="88" pos:column="9">/// &lt;returns&gt;The descendants of type &lt;typeparamref name="T"/&gt; of this element&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="89" pos:column="9">public</specifier> <name><name pos:line="89" pos:column="16">IEnumerable</name><argument_list pos:line="89" pos:column="27">&lt;<argument><name pos:line="89" pos:column="28">T</name></argument>&gt;</argument_list></name></type> <name><name pos:line="89" pos:column="31">GetDescendants</name><argument_list pos:line="89" pos:column="45">&lt;<argument><name pos:line="89" pos:column="46">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="89" pos:column="48">()</parameter_list> <where pos:line="89" pos:column="51">where <name pos:line="89" pos:column="57">T</name> : <name pos:line="89" pos:column="61">AbstractProgramElement</name></where> <block pos:line="89" pos:column="84">{
            <return pos:line="90" pos:column="13">return <expr><call><name pos:line="90" pos:column="20">GetDescendants</name><argument_list pos:line="90" pos:column="34">(<argument><expr><name pos:line="90" pos:column="35">this</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="90" pos:column="41">false</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="90" pos:column="47">.</op:operator><call><name><name pos:line="90" pos:column="48">OfType</name><argument_list pos:line="90" pos:column="54">&lt;<argument><name pos:line="90" pos:column="55">T</name></argument>&gt;</argument_list></name><argument_list pos:line="90" pos:column="57">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="93" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="94" pos:column="9">/// Gets all of the descendants of this element as well as the element itself.</comment>
        <comment type="line" pos:line="95" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="96" pos:column="9">/// &lt;returns&gt;This element, followed by all of its descendants&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="97" pos:column="9">public</specifier> <name><name pos:line="97" pos:column="16">IEnumerable</name><argument_list pos:line="97" pos:column="27">&lt;<argument><name pos:line="97" pos:column="28">AbstractProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="97" pos:column="52">GetDescendantsAndSelf</name><parameter_list pos:line="97" pos:column="73">()</parameter_list> <block pos:line="97" pos:column="76">{
            <return pos:line="98" pos:column="13">return <expr><call><name pos:line="98" pos:column="20">GetDescendants</name><argument_list pos:line="98" pos:column="34">(<argument><expr><name pos:line="98" pos:column="35">this</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="98" pos:column="41">true</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="101" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="102" pos:column="9">/// Gets all of the descendants of this element as well as the element itself where the type is &lt;typeparamref name="T"/&gt;.</comment>
        <comment type="line" pos:line="103" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="104" pos:column="9">/// &lt;typeparam name="T"&gt;The type to filter the descendant elements by&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="105" pos:column="9">/// &lt;returns&gt;This element and its descendants where the type is &lt;typeparamref name="T"/&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="106" pos:column="9">public</specifier> <name><name pos:line="106" pos:column="16">IEnumerable</name><argument_list pos:line="106" pos:column="27">&lt;<argument><name pos:line="106" pos:column="28">T</name></argument>&gt;</argument_list></name></type> <name><name pos:line="106" pos:column="31">GetDescendantsAndSelf</name><argument_list pos:line="106" pos:column="52">&lt;<argument><name pos:line="106" pos:column="53">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="106" pos:column="55">()</parameter_list> <where pos:line="106" pos:column="58">where <name pos:line="106" pos:column="64">T</name> : <name pos:line="106" pos:column="68">AbstractProgramElement</name></where> <block pos:line="106" pos:column="91">{
            <return pos:line="107" pos:column="13">return <expr><call><name pos:line="107" pos:column="20">GetDescendants</name><argument_list pos:line="107" pos:column="34">(<argument><expr><name pos:line="107" pos:column="35">this</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="107" pos:column="41">true</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="107" pos:column="46">.</op:operator><call><name><name pos:line="107" pos:column="47">OfType</name><argument_list pos:line="107" pos:column="53">&lt;<argument><name pos:line="107" pos:column="54">T</name></argument>&gt;</argument_list></name><argument_list pos:line="107" pos:column="56">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="110" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="111" pos:column="9">/// Returns the siblings of this element (i.e. the children of its parent) that occur before this element.</comment>
        <comment type="line" pos:line="112" pos:column="9">/// The siblings are returned in document order.</comment>
        <comment type="line" pos:line="113" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="114" pos:column="9">/// &lt;exception cref="InvalidOperationException"&gt;This element is not a child of its parent.&lt;/exception&gt;</comment>
        <function><type><specifier pos:line="115" pos:column="9">public</specifier> <name><name pos:line="115" pos:column="16">IEnumerable</name><argument_list pos:line="115" pos:column="27">&lt;<argument><name pos:line="115" pos:column="28">AbstractProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="115" pos:column="52">GetSiblingsBeforeSelf</name><parameter_list pos:line="115" pos:column="73">()</parameter_list> <block pos:line="115" pos:column="76">{
            <decl_stmt><decl><type><name pos:line="116" pos:column="13">var</name></type> <name pos:line="116" pos:column="17">parent</name> <init pos:line="116" pos:column="24">= <expr><call><name pos:line="116" pos:column="26">GetParent</name><argument_list pos:line="116" pos:column="35">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="117" pos:column="13">if<condition pos:line="117" pos:column="15">(<expr><name pos:line="117" pos:column="16">parent</name> <op:operator pos:line="117" pos:column="23">==</op:operator> <name pos:line="117" pos:column="26">null</name></expr>)</condition><then pos:line="117" pos:column="31"> <block pos:line="117" pos:column="32">{ <return pos:line="117" pos:column="34">return <expr><call><name><name pos:line="117" pos:column="41">Enumerable</name><op:operator pos:line="117" pos:column="51">.</op:operator><name><name pos:line="117" pos:column="52">Empty</name><argument_list pos:line="117" pos:column="57">&lt;<argument><name pos:line="117" pos:column="58">AbstractProgramElement</name></argument>&gt;</argument_list></name></name><argument_list pos:line="117" pos:column="81">()</argument_list></call></expr>;</return> }</block></then></if>

            <decl_stmt><decl><type><name pos:line="119" pos:column="13">var</name></type> <name pos:line="119" pos:column="17">siblings</name> <init pos:line="119" pos:column="26">= <expr><call><name><name pos:line="119" pos:column="28">parent</name><op:operator pos:line="119" pos:column="34">.</op:operator><name pos:line="119" pos:column="35">GetChildren</name></name><argument_list pos:line="119" pos:column="46">()</argument_list></call><op:operator pos:line="119" pos:column="48">.</op:operator><call><name pos:line="119" pos:column="49">ToList</name><argument_list pos:line="119" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="120" pos:column="13">if<condition pos:line="120" pos:column="15">(<expr><op:operator pos:line="120" pos:column="16">!</op:operator><call><name><name pos:line="120" pos:column="17">siblings</name><op:operator pos:line="120" pos:column="25">.</op:operator><name pos:line="120" pos:column="26">Contains</name></name><argument_list pos:line="120" pos:column="34">(<argument><expr><name pos:line="120" pos:column="35">this</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="120" pos:column="41"> <block pos:line="120" pos:column="42">{
                <throw pos:line="121" pos:column="17">throw <expr><op:operator pos:line="121" pos:column="23">new</op:operator> <call><name pos:line="121" pos:column="27">InvalidOperationException</name><argument_list pos:line="121" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="121" pos:column="53">"Program element is not a child of its parent!"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <return pos:line="123" pos:column="13">return <expr><call><name><name pos:line="123" pos:column="20">siblings</name><op:operator pos:line="123" pos:column="28">.</op:operator><name pos:line="123" pos:column="29">TakeWhile</name></name><argument_list pos:line="123" pos:column="38">(<argument><expr><lambda><name pos:line="123" pos:column="39">e</name> <op:operator pos:line="123" pos:column="41">=&gt;</op:operator> <name pos:line="123" pos:column="44">e</name> <op:operator pos:line="123" pos:column="46">!=</op:operator> <name pos:line="123" pos:column="49">this</name></lambda></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="126" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="127" pos:column="9">/// Returns the siblings of this element (i.e. the children of its parent) that occur before this element</comment>
        <comment type="line" pos:line="128" pos:column="9">/// and have type T.</comment>
        <comment type="line" pos:line="129" pos:column="9">/// The siblings are returned in document order.</comment>
        <comment type="line" pos:line="130" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="131" pos:column="9">/// &lt;exception cref="InvalidOperationException"&gt;This element is not a child of its parent.&lt;/exception&gt;</comment>
        <function><type><specifier pos:line="132" pos:column="9">public</specifier> <name><name pos:line="132" pos:column="16">IEnumerable</name><argument_list pos:line="132" pos:column="27">&lt;<argument><name pos:line="132" pos:column="28">T</name></argument>&gt;</argument_list></name></type> <name><name pos:line="132" pos:column="31">GetSiblingsBeforeSelf</name><argument_list pos:line="132" pos:column="52">&lt;<argument><name pos:line="132" pos:column="53">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="132" pos:column="55">()</parameter_list> <where pos:line="132" pos:column="58">where <name pos:line="132" pos:column="64">T</name> : <name pos:line="132" pos:column="68">AbstractProgramElement</name></where> <block pos:line="132" pos:column="91">{
            <return pos:line="133" pos:column="13">return <expr><call><name pos:line="133" pos:column="20">GetSiblingsBeforeSelf</name><argument_list pos:line="133" pos:column="41">()</argument_list></call><op:operator pos:line="133" pos:column="43">.</op:operator><call><name><name pos:line="133" pos:column="44">OfType</name><argument_list pos:line="133" pos:column="50">&lt;<argument><name pos:line="133" pos:column="51">T</name></argument>&gt;</argument_list></name><argument_list pos:line="133" pos:column="53">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="136" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="137" pos:column="9">/// Returns the siblings of this element (i.e. the children of its parent) that occur after this element.</comment>
        <comment type="line" pos:line="138" pos:column="9">/// The siblings are returned in document order.</comment>
        <comment type="line" pos:line="139" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="140" pos:column="9">/// &lt;exception cref="InvalidOperationException"&gt;This element is not a child of its parent.&lt;/exception&gt;</comment>
        <function><type><specifier pos:line="141" pos:column="9">public</specifier> <name><name pos:line="141" pos:column="16">IEnumerable</name><argument_list pos:line="141" pos:column="27">&lt;<argument><name pos:line="141" pos:column="28">AbstractProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="141" pos:column="52">GetSiblingsAfterSelf</name><parameter_list pos:line="141" pos:column="72">()</parameter_list> <block pos:line="141" pos:column="75">{
            <decl_stmt><decl><type><name pos:line="142" pos:column="13">var</name></type> <name pos:line="142" pos:column="17">parent</name> <init pos:line="142" pos:column="24">= <expr><call><name pos:line="142" pos:column="26">GetParent</name><argument_list pos:line="142" pos:column="35">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="143" pos:column="13">if<condition pos:line="143" pos:column="15">(<expr><name pos:line="143" pos:column="16">parent</name> <op:operator pos:line="143" pos:column="23">==</op:operator> <name pos:line="143" pos:column="26">null</name></expr>)</condition><then pos:line="143" pos:column="31"> <block pos:line="143" pos:column="32">{ <return pos:line="143" pos:column="34">return <expr><call><name><name pos:line="143" pos:column="41">Enumerable</name><op:operator pos:line="143" pos:column="51">.</op:operator><name><name pos:line="143" pos:column="52">Empty</name><argument_list pos:line="143" pos:column="57">&lt;<argument><name pos:line="143" pos:column="58">AbstractProgramElement</name></argument>&gt;</argument_list></name></name><argument_list pos:line="143" pos:column="81">()</argument_list></call></expr>;</return> }</block></then></if>

            <decl_stmt><decl><type><name pos:line="145" pos:column="13">var</name></type> <name pos:line="145" pos:column="17">siblings</name> <init pos:line="145" pos:column="26">= <expr><call><name><name pos:line="145" pos:column="28">parent</name><op:operator pos:line="145" pos:column="34">.</op:operator><name pos:line="145" pos:column="35">GetChildren</name></name><argument_list pos:line="145" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="146" pos:column="13">var</name></type> <name pos:line="146" pos:column="17">selfAndAfter</name> <init pos:line="146" pos:column="30">= <expr><call><name><name pos:line="146" pos:column="32">siblings</name><op:operator pos:line="146" pos:column="40">.</op:operator><name pos:line="146" pos:column="41">SkipWhile</name></name><argument_list pos:line="146" pos:column="50">(<argument><expr><lambda><name pos:line="146" pos:column="51">e</name> <op:operator pos:line="146" pos:column="53">=&gt;</op:operator> <name pos:line="146" pos:column="56">e</name> <op:operator pos:line="146" pos:column="58">!=</op:operator> <name pos:line="146" pos:column="61">this</name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="147" pos:column="13">if<condition pos:line="147" pos:column="15">(<expr><call><name><name pos:line="147" pos:column="16">selfAndAfter</name><op:operator pos:line="147" pos:column="28">.</op:operator><name pos:line="147" pos:column="29">First</name></name><argument_list pos:line="147" pos:column="34">()</argument_list></call> <op:operator pos:line="147" pos:column="37">!=</op:operator> <name pos:line="147" pos:column="40">this</name></expr>)</condition><then pos:line="147" pos:column="45"> <block pos:line="147" pos:column="46">{
                <throw pos:line="148" pos:column="17">throw <expr><op:operator pos:line="148" pos:column="23">new</op:operator> <call><name pos:line="148" pos:column="27">InvalidOperationException</name><argument_list pos:line="148" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="148" pos:column="53">"Program element is not a child of its parent!"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <return pos:line="150" pos:column="13">return <expr><call><name><name pos:line="150" pos:column="20">selfAndAfter</name><op:operator pos:line="150" pos:column="32">.</op:operator><name pos:line="150" pos:column="33">Skip</name></name><argument_list pos:line="150" pos:column="37">(<argument><expr><lit:literal type="number" pos:line="150" pos:column="38">1</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="153" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="154" pos:column="9">/// Returns the siblings of this element (i.e. the children of its parent) that occur after this element</comment>
        <comment type="line" pos:line="155" pos:column="9">/// and have type T.</comment>
        <comment type="line" pos:line="156" pos:column="9">/// The siblings are returned in document order.</comment>
        <comment type="line" pos:line="157" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="158" pos:column="9">/// &lt;exception cref="InvalidOperationException"&gt;This element is not a child of its parent.&lt;/exception&gt;</comment>
        <function><type><specifier pos:line="159" pos:column="9">public</specifier> <name><name pos:line="159" pos:column="16">IEnumerable</name><argument_list pos:line="159" pos:column="27">&lt;<argument><name pos:line="159" pos:column="28">T</name></argument>&gt;</argument_list></name></type> <name><name pos:line="159" pos:column="31">GetSiblingsAfterSelf</name><argument_list pos:line="159" pos:column="51">&lt;<argument><name pos:line="159" pos:column="52">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="159" pos:column="54">()</parameter_list> <where pos:line="159" pos:column="57">where <name pos:line="159" pos:column="63">T</name> : <name pos:line="159" pos:column="67">AbstractProgramElement</name></where> <block pos:line="159" pos:column="90">{
            <return pos:line="160" pos:column="13">return <expr><call><name pos:line="160" pos:column="20">GetSiblingsAfterSelf</name><argument_list pos:line="160" pos:column="40">()</argument_list></call><op:operator pos:line="160" pos:column="42">.</op:operator><call><name><name pos:line="160" pos:column="43">OfType</name><argument_list pos:line="160" pos:column="49">&lt;<argument><name pos:line="160" pos:column="50">T</name></argument>&gt;</argument_list></name><argument_list pos:line="160" pos:column="52">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="163" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="164" pos:column="9">/// Gets an element and all of its ancestors</comment>
        <comment type="line" pos:line="165" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="166" pos:column="9">/// &lt;param name="startingPoint"&gt;The first element to return&lt;/param&gt;</comment>
        <comment type="line" pos:line="167" pos:column="9">/// &lt;returns&gt;The &lt;paramref name="startingPoint"/&gt; and all of its ancestors&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="168" pos:column="9">protected</specifier> <specifier pos:line="168" pos:column="19">static</specifier> <name><name pos:line="168" pos:column="26">IEnumerable</name><argument_list pos:line="168" pos:column="37">&lt;<argument><name pos:line="168" pos:column="38">AbstractProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="168" pos:column="62">GetAncestorsAndStartingPoint</name><parameter_list pos:line="168" pos:column="90">(<param><decl><type><name pos:line="168" pos:column="91">AbstractProgramElement</name></type> <name pos:line="168" pos:column="114">startingPoint</name></decl></param>)</parameter_list> <block pos:line="168" pos:column="129">{
            <decl_stmt><decl><type><name pos:line="169" pos:column="13">var</name></type> <name pos:line="169" pos:column="17">current</name> <init pos:line="169" pos:column="25">= <expr><name pos:line="169" pos:column="27">startingPoint</name></expr></init></decl>;</decl_stmt>
            <while pos:line="170" pos:column="13">while<condition pos:line="170" pos:column="18">(<expr><name pos:line="170" pos:column="19">null</name> <op:operator pos:line="170" pos:column="24">!=</op:operator> <name pos:line="170" pos:column="27">current</name></expr>)</condition> <block pos:line="170" pos:column="36">{
                <return><specifier pos:line="171" pos:column="17">yield</specifier> return <expr><name pos:line="171" pos:column="30">current</name></expr>;</return>
                <expr_stmt><expr><name pos:line="172" pos:column="17">current</name> <op:operator pos:line="172" pos:column="25">=</op:operator> <call><name><name pos:line="172" pos:column="27">current</name><op:operator pos:line="172" pos:column="34">.</op:operator><name pos:line="172" pos:column="35">GetParent</name></name><argument_list pos:line="172" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
            }</block></while>
        }</block></function>

        <comment type="line" pos:line="176" pos:column="9">/// &lt;summary&gt; Returns the XML schema for this program element. &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="177" pos:column="9">public</specifier> <name pos:line="177" pos:column="16">XmlSchema</name></type> <name pos:line="177" pos:column="26">GetSchema</name><parameter_list pos:line="177" pos:column="35">()</parameter_list> <block pos:line="177" pos:column="38">{ <return pos:line="177" pos:column="40">return <expr><name pos:line="177" pos:column="47">null</name></expr>;</return> }</block></function>

        <comment type="line" pos:line="179" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="180" pos:column="9">/// Read the current XML element into this object</comment>
        <comment type="line" pos:line="181" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="182" pos:column="9">/// &lt;param name="reader"&gt;The XML reader&lt;/param&gt;</comment>
        <function><type><specifier pos:line="183" pos:column="9">public</specifier> <name pos:line="183" pos:column="16">void</name></type> <name pos:line="183" pos:column="21">ReadXml</name><parameter_list pos:line="183" pos:column="28">(<param><decl><type><name pos:line="183" pos:column="29">XmlReader</name></type> <name pos:line="183" pos:column="39">reader</name></decl></param>)</parameter_list> <block pos:line="183" pos:column="47">{
            <comment type="line" pos:line="184" pos:column="13">// you have to call ReadXmlAttributes prior to calling ReadStartElement()</comment>
            <expr_stmt><expr><call><name pos:line="185" pos:column="13">ReadXmlAttributes</name><argument_list pos:line="185" pos:column="30">(<argument><expr><name pos:line="185" pos:column="31">reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="186" pos:column="13">reader</name><op:operator pos:line="186" pos:column="19">.</op:operator><name pos:line="186" pos:column="20">ReadStartElement</name></name><argument_list pos:line="186" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
            <while pos:line="187" pos:column="13">while<condition pos:line="187" pos:column="18">(<expr><name><name pos:line="187" pos:column="19">XmlNodeType</name><op:operator pos:line="187" pos:column="30">.</op:operator><name pos:line="187" pos:column="31">Element</name></name> <op:operator pos:line="187" pos:column="39">==</op:operator> <name><name pos:line="187" pos:column="42">reader</name><op:operator pos:line="187" pos:column="48">.</op:operator><name pos:line="187" pos:column="49">NodeType</name></name></expr>)</condition> <block pos:line="187" pos:column="59">{
                <expr_stmt><expr><call><name pos:line="188" pos:column="17">ReadXmlChild</name><argument_list pos:line="188" pos:column="29">(<argument><expr><name pos:line="188" pos:column="30">reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            <expr_stmt><expr><call><name><name pos:line="190" pos:column="13">reader</name><op:operator pos:line="190" pos:column="19">.</op:operator><name pos:line="190" pos:column="20">ReadEndElement</name></name><argument_list pos:line="190" pos:column="34">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="193" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="194" pos:column="9">/// Writes all of the data to be serialized to &lt;paramref name="writer"/&gt;.</comment>
        <comment type="line" pos:line="195" pos:column="9">/// This works by calling &lt;see cref="WriteXmlAttributes(XmlWriter)"/&gt;</comment>
        <comment type="line" pos:line="196" pos:column="9">/// and then &lt;see cref="WriteXmlContents(XmlWriter)"/&gt;</comment>
        <comment type="line" pos:line="197" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="198" pos:column="9">/// &lt;param name="writer"&gt;The XML writer&lt;/param&gt;</comment>
        <function><type><specifier pos:line="199" pos:column="9">public</specifier> <specifier pos:line="199" pos:column="16">virtual</specifier> <name pos:line="199" pos:column="24">void</name></type> <name pos:line="199" pos:column="29">WriteXml</name><parameter_list pos:line="199" pos:column="37">(<param><decl><type><name pos:line="199" pos:column="38">XmlWriter</name></type> <name pos:line="199" pos:column="48">writer</name></decl></param>)</parameter_list> <block pos:line="199" pos:column="56">{
            <expr_stmt><expr><call><name pos:line="200" pos:column="13">WriteXmlAttributes</name><argument_list pos:line="200" pos:column="31">(<argument><expr><name pos:line="200" pos:column="32">writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="201" pos:column="13">WriteXmlContents</name><argument_list pos:line="201" pos:column="29">(<argument><expr><name pos:line="201" pos:column="30">writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="204" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="205" pos:column="9">/// Read the XML attributes from the current &lt;paramref name="reader"/&gt; position</comment>
        <comment type="line" pos:line="206" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="207" pos:column="9">/// &lt;param name="reader"&gt;The XML reader&lt;/param&gt;</comment>
        <function><type><specifier pos:line="208" pos:column="9">protected</specifier> <specifier pos:line="208" pos:column="19">virtual</specifier> <name pos:line="208" pos:column="27">void</name></type> <name pos:line="208" pos:column="32">ReadXmlAttributes</name><parameter_list pos:line="208" pos:column="49">(<param><decl><type><name pos:line="208" pos:column="50">XmlReader</name></type> <name pos:line="208" pos:column="60">reader</name></decl></param>)</parameter_list> <block pos:line="208" pos:column="68">{
            <expr_stmt><expr><name pos:line="209" pos:column="13">ProgrammingLanguage</name> <op:operator pos:line="209" pos:column="33">=</op:operator> <call><name><name pos:line="209" pos:column="35">SrcMLElement</name><op:operator pos:line="209" pos:column="47">.</op:operator><name pos:line="209" pos:column="48">GetLanguageFromString</name></name><argument_list pos:line="209" pos:column="69">(<argument><expr><call><name><name pos:line="209" pos:column="70">reader</name><op:operator pos:line="209" pos:column="76">.</op:operator><name pos:line="209" pos:column="77">GetAttribute</name></name><argument_list pos:line="209" pos:column="89">(<argument><expr><name pos:line="209" pos:column="90">LanguageXmlName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="212" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="213" pos:column="9">/// Writes XML attributes from this object to the XML writer</comment>
        <comment type="line" pos:line="214" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="215" pos:column="9">/// &lt;param name="writer"&gt;The XML writer&lt;/param&gt;</comment>
        <function><type><specifier pos:line="216" pos:column="9">protected</specifier> <specifier pos:line="216" pos:column="19">virtual</specifier> <name pos:line="216" pos:column="27">void</name></type> <name pos:line="216" pos:column="32">WriteXmlAttributes</name><parameter_list pos:line="216" pos:column="50">(<param><decl><type><name pos:line="216" pos:column="51">XmlWriter</name></type> <name pos:line="216" pos:column="61">writer</name></decl></param>)</parameter_list> <block pos:line="216" pos:column="69">{
            <expr_stmt><expr><call><name><name pos:line="217" pos:column="13">writer</name><op:operator pos:line="217" pos:column="19">.</op:operator><name pos:line="217" pos:column="20">WriteAttributeString</name></name><argument_list pos:line="217" pos:column="40">(<argument><expr><name pos:line="217" pos:column="41">LanguageXmlName</name></expr></argument>, <argument><expr><call><name><name pos:line="217" pos:column="58">KsuAdapter</name><op:operator pos:line="217" pos:column="68">.</op:operator><name pos:line="217" pos:column="69">GetLanguage</name></name><argument_list pos:line="217" pos:column="80">(<argument><expr><name pos:line="217" pos:column="81">ProgrammingLanguage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="220" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="221" pos:column="9">/// Processes the child of the current reader position into a child of this object.</comment>
        <comment type="line" pos:line="222" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="223" pos:column="9">/// &lt;param name="reader"&gt;The XML reader&lt;/param&gt;</comment>
        <function_decl><type><specifier pos:line="224" pos:column="9">protected</specifier> <specifier pos:line="224" pos:column="19">abstract</specifier> <name pos:line="224" pos:column="28">void</name></type> <name pos:line="224" pos:column="33">ReadXmlChild</name><parameter_list pos:line="224" pos:column="45">(<param><decl><type><name pos:line="224" pos:column="46">XmlReader</name></type> <name pos:line="224" pos:column="56">reader</name></decl></param>)</parameter_list>;</function_decl>

        <comment type="line" pos:line="226" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="227" pos:column="9">/// Writes the contents of this object to &lt;paramref name="writer"/&gt;.</comment>
        <comment type="line" pos:line="228" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="229" pos:column="9">/// &lt;param name="writer"&gt;The XML writer to write to&lt;/param&gt;</comment>
        <function_decl><type><specifier pos:line="230" pos:column="9">protected</specifier> <specifier pos:line="230" pos:column="19">abstract</specifier> <name pos:line="230" pos:column="28">void</name></type> <name pos:line="230" pos:column="33">WriteXmlContents</name><parameter_list pos:line="230" pos:column="49">(<param><decl><type><name pos:line="230" pos:column="50">XmlWriter</name></type> <name pos:line="230" pos:column="60">writer</name></decl></param>)</parameter_list>;</function_decl>

        <comment type="line" pos:line="232" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="233" pos:column="9">/// Gets the &lt;paramref name="startingPoint"/&gt; (if &lt;paramref name="returnStartingPoint"/&gt; is true) and all of the descendants of the &lt;paramref name="startingPoint"/&gt;.</comment>
        <comment type="line" pos:line="234" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="235" pos:column="9">/// &lt;param name="startingPoint"&gt;The starting point&lt;/param&gt;</comment>
        <comment type="line" pos:line="236" pos:column="9">/// &lt;param name="returnStartingPoint"&gt;If true, return the starting point first. Otherwise, just return  the descendants.&lt;/param&gt;</comment>
        <comment type="line" pos:line="237" pos:column="9">/// &lt;returns&gt;&lt;paramref name="startingPoint"/&gt; (if &lt;paramref name="returnStartingPoint"/&gt; is true) and its descendants&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="238" pos:column="9">protected</specifier> <specifier pos:line="238" pos:column="19">static</specifier> <name><name pos:line="238" pos:column="26">IEnumerable</name><argument_list pos:line="238" pos:column="37">&lt;<argument><name pos:line="238" pos:column="38">AbstractProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="238" pos:column="62">GetDescendants</name><parameter_list pos:line="238" pos:column="76">(<param><decl><type><name pos:line="238" pos:column="77">AbstractProgramElement</name></type> <name pos:line="238" pos:column="100">startingPoint</name></decl></param>, <param><decl><type><name pos:line="238" pos:column="115">bool</name></type> <name pos:line="238" pos:column="120">returnStartingPoint</name></decl></param>)</parameter_list> <block pos:line="238" pos:column="141">{
            <if pos:line="239" pos:column="13">if<condition pos:line="239" pos:column="15">(<expr><name pos:line="239" pos:column="16">returnStartingPoint</name></expr>)</condition><then pos:line="239" pos:column="36"> <block pos:line="239" pos:column="37">{
                <return><specifier pos:line="240" pos:column="17">yield</specifier> return <expr><name pos:line="240" pos:column="30">startingPoint</name></expr>;</return>
            }</block></then></if>

            <foreach pos:line="243" pos:column="13">foreach(<init><decl><type><name pos:line="243" pos:column="21">var</name></type> <name pos:line="243" pos:column="25">element</name> <range pos:line="243" pos:column="33">in <expr><call><name><name pos:line="243" pos:column="36">startingPoint</name><op:operator pos:line="243" pos:column="49">.</op:operator><name pos:line="243" pos:column="50">GetChildren</name></name><argument_list pos:line="243" pos:column="61">()</argument_list></call></expr></range></decl></init>) <block pos:line="243" pos:column="65">{
                <foreach pos:line="244" pos:column="17">foreach(<init><decl><type><name pos:line="244" pos:column="25">var</name></type> <name pos:line="244" pos:column="29">descendant</name> <range pos:line="244" pos:column="40">in <expr><call><name pos:line="244" pos:column="43">GetDescendants</name><argument_list pos:line="244" pos:column="57">(<argument><expr><name pos:line="244" pos:column="58">element</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="244" pos:column="67">true</lit:literal></expr></argument>)</argument_list></call></expr></range></decl></init>) <block pos:line="244" pos:column="74">{
                    <return><specifier pos:line="245" pos:column="21">yield</specifier> return <expr><name pos:line="245" pos:column="34">descendant</name></expr>;</return>
                }</block></foreach>
            }</block></foreach>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
