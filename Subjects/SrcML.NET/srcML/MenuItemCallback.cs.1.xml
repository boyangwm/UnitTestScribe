<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\VisualStudio\ABB.SrcML.VisualStudio.SrcMLService.UnitTests\MenuItemTests\MenuItemCallback.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Text</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Reflection</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">ComponentModel</name><op:operator pos:line="5" pos:column="28">.</op:operator><name pos:line="5" pos:column="29">Design</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Microsoft</name><op:operator pos:line="6" pos:column="16">.</op:operator><name pos:line="6" pos:column="17">VsSDK</name><op:operator pos:line="6" pos:column="22">.</op:operator><name pos:line="6" pos:column="23">UnitTestLibrary</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Microsoft</name><op:operator pos:line="7" pos:column="16">.</op:operator><name pos:line="7" pos:column="17">VisualStudio</name><op:operator pos:line="7" pos:column="29">.</op:operator><name pos:line="7" pos:column="30">Shell</name><op:operator pos:line="7" pos:column="35">.</op:operator><name pos:line="7" pos:column="36">Interop</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Microsoft</name><op:operator pos:line="8" pos:column="16">.</op:operator><name pos:line="8" pos:column="17">VisualStudio</name><op:operator pos:line="8" pos:column="29">.</op:operator><name pos:line="8" pos:column="30">TestTools</name><op:operator pos:line="8" pos:column="39">.</op:operator><name pos:line="8" pos:column="40">UnitTesting</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">Microsoft</name><op:operator pos:line="9" pos:column="16">.</op:operator><name pos:line="9" pos:column="17">VisualStudio</name><op:operator pos:line="9" pos:column="29">.</op:operator><name pos:line="9" pos:column="30">Shell</name></name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">ABB</name><op:operator pos:line="10" pos:column="10">.</op:operator><name pos:line="10" pos:column="11">SrcML</name><op:operator pos:line="10" pos:column="16">.</op:operator><name pos:line="10" pos:column="17">VisualStudio</name><op:operator pos:line="10" pos:column="29">.</op:operator><name pos:line="10" pos:column="30">SrcMLService</name></name>;</using>

<namespace pos:line="12" pos:column="1">namespace <name><name pos:line="12" pos:column="11">ABB</name><op:operator pos:line="12" pos:column="14">.</op:operator><name pos:line="12" pos:column="15">SrcML</name><op:operator pos:line="12" pos:column="20">.</op:operator><name pos:line="12" pos:column="21">VisualStudio</name><op:operator pos:line="12" pos:column="33">.</op:operator><name pos:line="12" pos:column="34">SrcMLService</name><op:operator pos:line="12" pos:column="46">.</op:operator><name pos:line="12" pos:column="47">UnitTests</name><op:operator pos:line="12" pos:column="56">.</op:operator><name pos:line="12" pos:column="57">MenuItemTests</name></name> <block pos:line="12" pos:column="71">{
    <class><attribute pos:line="13" pos:column="5">[<expr><call><name pos:line="13" pos:column="6">TestClass</name><argument_list pos:line="13" pos:column="15">()</argument_list></call></expr>]</attribute>
    <specifier pos:line="14" pos:column="5">public</specifier> class <name pos:line="14" pos:column="18">MenuItemTest</name> <block pos:line="14" pos:column="31">{
        <comment type="line" pos:line="15" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="16" pos:column="9">/// Verify that a new menu command object gets added to the OleMenuCommandService. </comment>
        <comment type="line" pos:line="17" pos:column="9">/// This action takes place In the Initialize method of the Package object</comment>
        <comment type="line" pos:line="18" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><attribute pos:line="19" pos:column="9">[<expr><name pos:line="19" pos:column="10">TestMethod</name></expr>]</attribute>
        <specifier pos:line="20" pos:column="9">public</specifier> <name pos:line="20" pos:column="16">void</name></type> <name pos:line="20" pos:column="21">InitializeMenuCommand</name><parameter_list pos:line="20" pos:column="42">()</parameter_list> <block pos:line="20" pos:column="45">{
            <comment type="line" pos:line="21" pos:column="13">// Create the package</comment>
            <decl_stmt><decl><type><name pos:line="22" pos:column="13">IVsPackage</name></type> <name pos:line="22" pos:column="24">package</name> <init pos:line="22" pos:column="32">= <expr><op:operator pos:line="22" pos:column="34">new</op:operator> <call><name pos:line="22" pos:column="38">SrcMLServicePackage</name><argument_list pos:line="22" pos:column="57">()</argument_list></call> <op:operator pos:line="22" pos:column="60">as</op:operator> <name pos:line="22" pos:column="63">IVsPackage</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="23" pos:column="13">Assert</name><op:operator pos:line="23" pos:column="19">.</op:operator><name pos:line="23" pos:column="20">IsNotNull</name></name><argument_list pos:line="23" pos:column="29">(<argument><expr><name pos:line="23" pos:column="30">package</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="23" pos:column="39">"The object does not implement IVsPackage"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="25" pos:column="13">// Create a basic service provider</comment>
            <decl_stmt><decl><type><name pos:line="26" pos:column="13">OleServiceProvider</name></type> <name pos:line="26" pos:column="32">serviceProvider</name> <init pos:line="26" pos:column="48">= <expr><call><name><name pos:line="26" pos:column="50">OleServiceProvider</name><op:operator pos:line="26" pos:column="68">.</op:operator><name pos:line="26" pos:column="69">CreateOleServiceProviderWithBasicServices</name></name><argument_list pos:line="26" pos:column="110">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="28" pos:column="13">// Site the package</comment>
            <expr_stmt><expr><call><name><name pos:line="29" pos:column="13">Assert</name><op:operator pos:line="29" pos:column="19">.</op:operator><name pos:line="29" pos:column="20">AreEqual</name></name><argument_list pos:line="29" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="29" pos:column="29">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="29" pos:column="32">package</name><op:operator pos:line="29" pos:column="39">.</op:operator><name pos:line="29" pos:column="40">SetSite</name></name><argument_list pos:line="29" pos:column="47">(<argument><expr><name pos:line="29" pos:column="48">serviceProvider</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="29" pos:column="66">"SetSite did not return S_OK"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="31" pos:column="13">//Verify that the menu command can be found</comment>
            <comment type="line" pos:line="32" pos:column="13">////CommandID menuCommandID = new CommandID(GuidList.guidSrcMLServiceCmdSet, (int)PkgCmdIDList.SrcML);</comment>
            <decl_stmt><decl><type><name><name pos:line="33" pos:column="13">System</name><op:operator pos:line="33" pos:column="19">.</op:operator><name pos:line="33" pos:column="20">Reflection</name><op:operator pos:line="33" pos:column="30">.</op:operator><name pos:line="33" pos:column="31">MethodInfo</name></name></type> <name pos:line="33" pos:column="42">info</name> <init pos:line="33" pos:column="47">= <expr><call><name pos:line="33" pos:column="49">typeof</name><argument_list pos:line="33" pos:column="55">(<argument><expr><name pos:line="33" pos:column="56">Package</name></expr></argument>)</argument_list></call><op:operator pos:line="33" pos:column="64">.</op:operator><call><name pos:line="33" pos:column="65">GetMethod</name><argument_list pos:line="33" pos:column="74">(<argument><expr><lit:literal type="string" pos:line="33" pos:column="75">"GetService"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="89">BindingFlags</name><op:operator pos:line="33" pos:column="101">.</op:operator><name pos:line="33" pos:column="102">Instance</name></name> <op:operator pos:line="33" pos:column="111">|</op:operator> <name><name pos:line="33" pos:column="113">BindingFlags</name><op:operator pos:line="33" pos:column="125">.</op:operator><name pos:line="33" pos:column="126">NonPublic</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="34" pos:column="13">Assert</name><op:operator pos:line="34" pos:column="19">.</op:operator><name pos:line="34" pos:column="20">IsNotNull</name></name><argument_list pos:line="34" pos:column="29">(<argument><expr><name pos:line="34" pos:column="30">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="35" pos:column="13">OleMenuCommandService</name></type> <name pos:line="35" pos:column="35">mcs</name> <init pos:line="35" pos:column="39">= <expr><call><name><name pos:line="35" pos:column="41">info</name><op:operator pos:line="35" pos:column="45">.</op:operator><name pos:line="35" pos:column="46">Invoke</name></name><argument_list pos:line="35" pos:column="52">(<argument><expr><name pos:line="35" pos:column="53">package</name></expr></argument>, <argument><expr><op:operator pos:line="35" pos:column="62">new</op:operator> <name><name pos:line="35" pos:column="66">object</name><index pos:line="35" pos:column="72">[]</index></name> <block pos:line="35" pos:column="75">{ <expr><op:operator pos:line="35" pos:column="77">(</op:operator><call><name pos:line="35" pos:column="78">typeof</name><argument_list pos:line="35" pos:column="84">(<argument><expr><name pos:line="35" pos:column="85">IMenuCommandService</name></expr></argument>)</argument_list></call><op:operator pos:line="35" pos:column="105">)</op:operator></expr> }</block></expr></argument>)</argument_list></call> <op:operator pos:line="35" pos:column="110">as</op:operator> <name pos:line="35" pos:column="113">OleMenuCommandService</name></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="36" pos:column="13">////Assert.IsNotNull(mcs.FindCommand(menuCommandID));</comment>
        }</block></function>

        <function><type><attribute pos:line="39" pos:column="9">[<expr><name pos:line="39" pos:column="10">TestMethod</name></expr>]</attribute>
        <specifier pos:line="40" pos:column="9">public</specifier> <name pos:line="40" pos:column="16">void</name></type> <name pos:line="40" pos:column="21">MenuItemCallback</name><parameter_list pos:line="40" pos:column="37">()</parameter_list> <block pos:line="40" pos:column="40">{
            <comment type="line" pos:line="41" pos:column="13">// Create the package</comment>
            <decl_stmt><decl><type><name pos:line="42" pos:column="13">IVsPackage</name></type> <name pos:line="42" pos:column="24">package</name> <init pos:line="42" pos:column="32">= <expr><op:operator pos:line="42" pos:column="34">new</op:operator> <call><name pos:line="42" pos:column="38">SrcMLServicePackage</name><argument_list pos:line="42" pos:column="57">()</argument_list></call> <op:operator pos:line="42" pos:column="60">as</op:operator> <name pos:line="42" pos:column="63">IVsPackage</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="43" pos:column="13">Assert</name><op:operator pos:line="43" pos:column="19">.</op:operator><name pos:line="43" pos:column="20">IsNotNull</name></name><argument_list pos:line="43" pos:column="29">(<argument><expr><name pos:line="43" pos:column="30">package</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="43" pos:column="39">"The object does not implement IVsPackage"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="45" pos:column="13">// Create a basic service provider</comment>
            <decl_stmt><decl><type><name pos:line="46" pos:column="13">OleServiceProvider</name></type> <name pos:line="46" pos:column="32">serviceProvider</name> <init pos:line="46" pos:column="48">= <expr><call><name><name pos:line="46" pos:column="50">OleServiceProvider</name><op:operator pos:line="46" pos:column="68">.</op:operator><name pos:line="46" pos:column="69">CreateOleServiceProviderWithBasicServices</name></name><argument_list pos:line="46" pos:column="110">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="48" pos:column="13">// Create a UIShell service mock and proffer the service so that it can called from the MenuItemCallback method</comment>
            <decl_stmt><decl><type><name pos:line="49" pos:column="13">BaseMock</name></type> <name pos:line="49" pos:column="22">uishellMock</name> <init pos:line="49" pos:column="34">= <expr><call><name><name pos:line="49" pos:column="36">UIShellServiceMock</name><op:operator pos:line="49" pos:column="54">.</op:operator><name pos:line="49" pos:column="55">GetUiShellInstance</name></name><argument_list pos:line="49" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="50" pos:column="13">serviceProvider</name><op:operator pos:line="50" pos:column="28">.</op:operator><name pos:line="50" pos:column="29">AddService</name></name><argument_list pos:line="50" pos:column="39">(<argument><expr><call><name pos:line="50" pos:column="40">typeof</name><argument_list pos:line="50" pos:column="46">(<argument><expr><name pos:line="50" pos:column="47">SVsUIShell</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="50" pos:column="60">uishellMock</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="50" pos:column="73">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="52" pos:column="13">// Site the package</comment>
            <expr_stmt><expr><call><name><name pos:line="53" pos:column="13">Assert</name><op:operator pos:line="53" pos:column="19">.</op:operator><name pos:line="53" pos:column="20">AreEqual</name></name><argument_list pos:line="53" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="53" pos:column="29">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="53" pos:column="32">package</name><op:operator pos:line="53" pos:column="39">.</op:operator><name pos:line="53" pos:column="40">SetSite</name></name><argument_list pos:line="53" pos:column="47">(<argument><expr><name pos:line="53" pos:column="48">serviceProvider</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="53" pos:column="66">"SetSite did not return S_OK"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="55" pos:column="13">//Invoke private method on package class and observe that the method does not throw</comment>
            <decl_stmt><decl><type><name><name pos:line="56" pos:column="13">System</name><op:operator pos:line="56" pos:column="19">.</op:operator><name pos:line="56" pos:column="20">Reflection</name><op:operator pos:line="56" pos:column="30">.</op:operator><name pos:line="56" pos:column="31">MethodInfo</name></name></type> <name pos:line="56" pos:column="42">info</name> <init pos:line="56" pos:column="47">= <expr><call><name><name pos:line="56" pos:column="49">package</name><op:operator pos:line="56" pos:column="56">.</op:operator><name pos:line="56" pos:column="57">GetType</name></name><argument_list pos:line="56" pos:column="64">()</argument_list></call><op:operator pos:line="56" pos:column="66">.</op:operator><call><name pos:line="56" pos:column="67">GetMethod</name><argument_list pos:line="56" pos:column="76">(<argument><expr><lit:literal type="string" pos:line="56" pos:column="77">"MenuItemCallback"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="97">BindingFlags</name><op:operator pos:line="56" pos:column="109">.</op:operator><name pos:line="56" pos:column="110">Instance</name></name> <op:operator pos:line="56" pos:column="119">|</op:operator> <name><name pos:line="56" pos:column="121">BindingFlags</name><op:operator pos:line="56" pos:column="133">.</op:operator><name pos:line="56" pos:column="134">NonPublic</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="57" pos:column="13">Assert</name><op:operator pos:line="57" pos:column="19">.</op:operator><name pos:line="57" pos:column="20">IsNotNull</name></name><argument_list pos:line="57" pos:column="29">(<argument><expr><name pos:line="57" pos:column="30">info</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="57" pos:column="36">"Failed to get the private method MenuItemCallback throug refplection"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="58" pos:column="13">info</name><op:operator pos:line="58" pos:column="17">.</op:operator><name pos:line="58" pos:column="18">Invoke</name></name><argument_list pos:line="58" pos:column="24">(<argument><expr><name pos:line="58" pos:column="25">package</name></expr></argument>, <argument><expr><op:operator pos:line="58" pos:column="34">new</op:operator> <name><name pos:line="58" pos:column="38">object</name><index pos:line="58" pos:column="44">[]</index></name> <block pos:line="58" pos:column="47">{ <expr><name pos:line="58" pos:column="49">null</name></expr><op:operator pos:line="58" pos:column="53">,</op:operator> <expr><name pos:line="58" pos:column="55">null</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="60" pos:column="13">//Clean up services</comment>
            <expr_stmt><expr><call><name><name pos:line="61" pos:column="13">serviceProvider</name><op:operator pos:line="61" pos:column="28">.</op:operator><name pos:line="61" pos:column="29">RemoveService</name></name><argument_list pos:line="61" pos:column="42">(<argument><expr><call><name pos:line="61" pos:column="43">typeof</name><argument_list pos:line="61" pos:column="49">(<argument><expr><name pos:line="61" pos:column="50">SVsUIShell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
