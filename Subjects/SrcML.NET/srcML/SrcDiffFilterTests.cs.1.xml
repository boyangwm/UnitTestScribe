<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Test\SrcDiffFilterTests.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Xml</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">Linq</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">ABB</name><op:operator pos:line="6" pos:column="10">.</op:operator><name pos:line="6" pos:column="11">SrcML</name><op:operator pos:line="6" pos:column="16">.</op:operator><name pos:line="6" pos:column="17">Test</name><op:operator pos:line="6" pos:column="21">.</op:operator><name pos:line="6" pos:column="22">Utilities</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">NUnit</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">Framework</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">ABB</name><op:operator pos:line="8" pos:column="10">.</op:operator><name pos:line="8" pos:column="11">SrcML</name><op:operator pos:line="8" pos:column="16">.</op:operator><name pos:line="8" pos:column="17">Utilities</name></name>;</using>

<namespace pos:line="10" pos:column="1">namespace <name><name pos:line="10" pos:column="11">ABB</name><op:operator pos:line="10" pos:column="14">.</op:operator><name pos:line="10" pos:column="15">SrcML</name><op:operator pos:line="10" pos:column="20">.</op:operator><name pos:line="10" pos:column="21">Test</name></name>
<block pos:line="11" pos:column="1">{
    <class><attribute pos:line="12" pos:column="5">[<expr><name pos:line="12" pos:column="6">TestFixture</name></expr>]</attribute>
    <attribute pos:line="13" pos:column="5">[<expr><call><name pos:line="13" pos:column="6">Category</name><argument_list pos:line="13" pos:column="14">(<argument><expr><lit:literal type="string" pos:line="13" pos:column="15">"Build"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="14" pos:column="5">public</specifier> class <name pos:line="14" pos:column="18">SrcDiffFilterTests</name>
    <block pos:line="15" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="16" pos:column="9">private</specifier> <name><name pos:line="16" pos:column="17">Dictionary</name><argument_list pos:line="16" pos:column="27">&lt;<argument><name pos:line="16" pos:column="28">Language</name></argument>, <argument><name pos:line="16" pos:column="38">SrcMLFileUnitSetup</name></argument>&gt;</argument_list></name></type> <name pos:line="16" pos:column="58">fileSetup</name></decl>;</decl_stmt>

        <function><type><attribute pos:line="18" pos:column="9">[<expr><name pos:line="18" pos:column="10">TestFixtureSetUp</name></expr>]</attribute>
        <specifier pos:line="19" pos:column="9">public</specifier> <name pos:line="19" pos:column="16">void</name></type> <name pos:line="19" pos:column="21">ClassSetup</name><parameter_list pos:line="19" pos:column="31">()</parameter_list> <block pos:line="19" pos:column="34">{
            <expr_stmt><expr><name pos:line="20" pos:column="13">fileSetup</name> <op:operator pos:line="20" pos:column="23">=</op:operator> <op:operator pos:line="20" pos:column="25">new</op:operator> <name><name pos:line="20" pos:column="29">Dictionary</name><argument_list pos:line="20" pos:column="39">&lt;<argument><name pos:line="20" pos:column="40">Language</name></argument>, <argument><name pos:line="20" pos:column="50">SrcMLFileUnitSetup</name></argument>&gt;</argument_list></name> <block pos:line="20" pos:column="70">{
                <expr><block pos:line="21" pos:column="17">{<expr><name><name pos:line="21" pos:column="18">Language</name><op:operator pos:line="21" pos:column="26">.</op:operator><name pos:line="21" pos:column="27">CSharp</name></name></expr><op:operator pos:line="21" pos:column="33">,</op:operator> <expr><op:operator pos:line="21" pos:column="35">new</op:operator> <call><name pos:line="21" pos:column="39">SrcMLFileUnitSetup</name><argument_list pos:line="21" pos:column="57">(<argument><expr><name><name pos:line="21" pos:column="58">Language</name><op:operator pos:line="21" pos:column="66">.</op:operator><name pos:line="21" pos:column="67">CSharp</name></name></expr></argument>)</argument_list></call></expr>}</block></expr><op:operator pos:line="21" pos:column="75">,</op:operator>
                <expr><block pos:line="22" pos:column="17">{<expr><name><name pos:line="22" pos:column="18">Language</name><op:operator pos:line="22" pos:column="26">.</op:operator><name pos:line="22" pos:column="27">CPlusPlus</name></name></expr><op:operator pos:line="22" pos:column="36">,</op:operator> <expr><op:operator pos:line="22" pos:column="38">new</op:operator> <call><name pos:line="22" pos:column="42">SrcMLFileUnitSetup</name><argument_list pos:line="22" pos:column="60">(<argument><expr><name><name pos:line="22" pos:column="61">Language</name><op:operator pos:line="22" pos:column="69">.</op:operator><name pos:line="22" pos:column="70">CPlusPlus</name></name></expr></argument>)</argument_list></call></expr>}</block></expr><op:operator pos:line="22" pos:column="81">,</op:operator>
                <expr><block pos:line="23" pos:column="17">{<expr><name><name pos:line="23" pos:column="18">Language</name><op:operator pos:line="23" pos:column="26">.</op:operator><name pos:line="23" pos:column="27">Java</name></name></expr><op:operator pos:line="23" pos:column="31">,</op:operator> <expr><op:operator pos:line="23" pos:column="33">new</op:operator> <call><name pos:line="23" pos:column="37">SrcMLFileUnitSetup</name><argument_list pos:line="23" pos:column="55">(<argument><expr><name><name pos:line="23" pos:column="56">Language</name><op:operator pos:line="23" pos:column="64">.</op:operator><name pos:line="23" pos:column="65">Java</name></name></expr></argument>)</argument_list></call></expr>}</block></expr>
            }</block></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="27" pos:column="9">[<expr><name pos:line="27" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="28" pos:column="9">public</specifier> <name pos:line="28" pos:column="16">void</name></type> <name pos:line="28" pos:column="21">TestRenameFunction</name><parameter_list pos:line="28" pos:column="39">()</parameter_list> <block pos:line="28" pos:column="42">{
            <decl_stmt><decl><type><name pos:line="29" pos:column="13">string</name></type> <name pos:line="29" pos:column="20">beforeXml</name> <init pos:line="29" pos:column="30">= <expr><lit:literal type="string" pos:line="29" pos:column="32">@"&lt;function&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;MyFunction&lt;/name&gt;&lt;parameter_list&gt;(&lt;parameter&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;a&lt;/name&gt;&lt;/decl&gt;&lt;/parameter&gt;, &lt;parameter&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;BOOL&lt;/name&gt;&lt;/type&gt; &lt;name&gt;b&lt;/name&gt;&lt;/decl&gt;&lt;/parameter&gt;)&lt;/parameter_list&gt;
&lt;block&gt;{
    &lt;return&gt;return &lt;expr&gt;&lt;ternary&gt;&lt;condition&gt;&lt;expr&gt;&lt;name&gt;b&lt;/name&gt;&lt;/expr&gt; ?&lt;/condition&gt;&lt;then&gt; &lt;expr&gt;&lt;name&gt;a&lt;/name&gt;&lt;/expr&gt; &lt;/then&gt;&lt;else&gt;: &lt;expr&gt;&lt;name&gt;a&lt;/name&gt;&lt;operator&gt;-&lt;/operator&gt;&lt;literal type=""number&gt;1&lt;/literal&gt;&lt;/expr&gt;&lt;/else&gt;&lt;/ternary&gt;&lt;/expr&gt;;&lt;/return&gt;
}&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="33" pos:column="13">var</name></type> <name pos:line="33" pos:column="17">beforeUnit</name> <init pos:line="33" pos:column="28">= <expr><name><name pos:line="33" pos:column="30">fileSetup</name><index pos:line="33" pos:column="39">[<expr><name><name pos:line="33" pos:column="40">Language</name><op:operator pos:line="33" pos:column="48">.</op:operator><name pos:line="33" pos:column="49">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="33" pos:column="59">.</op:operator><call><name pos:line="33" pos:column="60">GetFileUnitForXmlSnippet</name><argument_list pos:line="33" pos:column="84">(<argument><expr><name pos:line="33" pos:column="85">beforeXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="33" pos:column="96">"before.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="34" pos:column="13">var</name></type> <name pos:line="34" pos:column="17">beforeFunc</name> <init pos:line="34" pos:column="28">= <expr><call><name><name pos:line="34" pos:column="30">beforeUnit</name><op:operator pos:line="34" pos:column="40">.</op:operator><name pos:line="34" pos:column="41">Element</name></name><argument_list pos:line="34" pos:column="48">(<argument><expr><name><name pos:line="34" pos:column="49">SRC</name><op:operator pos:line="34" pos:column="52">.</op:operator><name pos:line="34" pos:column="53">Function</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <decl_stmt><decl><type><name pos:line="36" pos:column="13">string</name></type> <name pos:line="36" pos:column="20">afterXml</name> <init pos:line="36" pos:column="29">= <expr><lit:literal type="string" pos:line="36" pos:column="31">@"&lt;function&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;YourFunction&lt;/name&gt;&lt;parameter_list&gt;(&lt;parameter&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;a&lt;/name&gt;&lt;/decl&gt;&lt;/parameter&gt;, &lt;parameter&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;BOOL&lt;/name&gt;&lt;/type&gt; &lt;name&gt;b&lt;/name&gt;&lt;/decl&gt;&lt;/parameter&gt;)&lt;/parameter_list&gt;
&lt;block&gt;{
    &lt;return&gt;return &lt;expr&gt;&lt;ternary&gt;&lt;condition&gt;&lt;expr&gt;&lt;name&gt;b&lt;/name&gt;&lt;/expr&gt; ?&lt;/condition&gt;&lt;then&gt; &lt;expr&gt;&lt;name&gt;a&lt;/name&gt;&lt;/expr&gt; &lt;/then&gt;&lt;else&gt;: &lt;expr&gt;&lt;name&gt;a&lt;/name&gt;&lt;operator&gt;-&lt;/operator&gt;&lt;literal type=""number&gt;1&lt;/literal&gt;&lt;/expr&gt;&lt;/else&gt;&lt;/ternary&gt;&lt;/expr&gt;;&lt;/return&gt;
}&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="40" pos:column="13">var</name></type> <name pos:line="40" pos:column="17">afterUnit</name> <init pos:line="40" pos:column="27">= <expr><name><name pos:line="40" pos:column="29">fileSetup</name><index pos:line="40" pos:column="38">[<expr><name><name pos:line="40" pos:column="39">Language</name><op:operator pos:line="40" pos:column="47">.</op:operator><name pos:line="40" pos:column="48">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="40" pos:column="58">.</op:operator><call><name pos:line="40" pos:column="59">GetFileUnitForXmlSnippet</name><argument_list pos:line="40" pos:column="83">(<argument><expr><name pos:line="40" pos:column="84">afterXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="40" pos:column="94">"after.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="41" pos:column="13">var</name></type> <name pos:line="41" pos:column="17">afterFunc</name> <init pos:line="41" pos:column="27">= <expr><call><name><name pos:line="41" pos:column="29">afterUnit</name><op:operator pos:line="41" pos:column="38">.</op:operator><name pos:line="41" pos:column="39">Element</name></name><argument_list pos:line="41" pos:column="46">(<argument><expr><name><name pos:line="41" pos:column="47">SRC</name><op:operator pos:line="41" pos:column="50">.</op:operator><name pos:line="41" pos:column="51">Function</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <decl_stmt><decl><type><name pos:line="43" pos:column="13">string</name></type> <name pos:line="43" pos:column="20">diffXml</name> <init pos:line="43" pos:column="28">= <expr><lit:literal type="string" pos:line="43" pos:column="30">@"&lt;function&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;&lt;diff:delete type=""change&gt;MyFunction&lt;/diff:delete&gt;&lt;diff:insert type=""change&gt;YourFunction&lt;/diff:insert&gt;&lt;/name&gt;&lt;parameter_list&gt;(&lt;parameter&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;a&lt;/name&gt;&lt;/decl&gt;&lt;/parameter&gt;, &lt;parameter&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;BOOL&lt;/name&gt;&lt;/type&gt; &lt;name&gt;b&lt;/name&gt;&lt;/decl&gt;&lt;/parameter&gt;)&lt;/parameter_list&gt;
&lt;block&gt;{
    &lt;return&gt;return &lt;expr&gt;&lt;ternary&gt;&lt;condition&gt;&lt;expr&gt;&lt;name&gt;b&lt;/name&gt;&lt;/expr&gt; ?&lt;/condition&gt;&lt;then&gt; &lt;expr&gt;&lt;name&gt;a&lt;/name&gt;&lt;/expr&gt; &lt;/then&gt;&lt;else&gt;: &lt;expr&gt;&lt;name&gt;a&lt;/name&gt;&lt;operator&gt;-&lt;/operator&gt;&lt;literal type=""number&gt;1&lt;/literal&gt;&lt;/expr&gt;&lt;/else&gt;&lt;/ternary&gt;&lt;/expr&gt;;&lt;/return&gt;
}&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="47" pos:column="13">var</name></type> <name pos:line="47" pos:column="17">diffUnit</name> <init pos:line="47" pos:column="26">= <expr><name><name pos:line="47" pos:column="28">fileSetup</name><index pos:line="47" pos:column="37">[<expr><name><name pos:line="47" pos:column="38">Language</name><op:operator pos:line="47" pos:column="46">.</op:operator><name pos:line="47" pos:column="47">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="47" pos:column="57">.</op:operator><call><name pos:line="47" pos:column="58">GetFileUnitForXmlSnippet</name><argument_list pos:line="47" pos:column="82">(<argument><expr><name pos:line="47" pos:column="83">diffXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="47" pos:column="92">"before.cpp|after.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="48" pos:column="13">var</name></type> <name pos:line="48" pos:column="17">diffFunc</name> <init pos:line="48" pos:column="26">= <expr><call><name><name pos:line="48" pos:column="28">diffUnit</name><op:operator pos:line="48" pos:column="36">.</op:operator><name pos:line="48" pos:column="37">Element</name></name><argument_list pos:line="48" pos:column="44">(<argument><expr><name><name pos:line="48" pos:column="45">SRC</name><op:operator pos:line="48" pos:column="48">.</op:operator><name pos:line="48" pos:column="49">Function</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="50" pos:column="13">var</name></type> <name pos:line="50" pos:column="17">diffBeforeUnit</name> <init pos:line="50" pos:column="32">= <expr><call><name><name pos:line="50" pos:column="34">SrcDiffFilter</name><op:operator pos:line="50" pos:column="47">.</op:operator><name pos:line="50" pos:column="48">GetBeforeVersion</name></name><argument_list pos:line="50" pos:column="64">(<argument><expr><name pos:line="50" pos:column="65">diffUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="51" pos:column="13">var</name></type> <name pos:line="51" pos:column="17">diffBeforeFunc</name> <init pos:line="51" pos:column="32">= <expr><call><name><name pos:line="51" pos:column="34">diffBeforeUnit</name><op:operator pos:line="51" pos:column="48">.</op:operator><name pos:line="51" pos:column="49">Element</name></name><argument_list pos:line="51" pos:column="56">(<argument><expr><name><name pos:line="51" pos:column="57">SRC</name><op:operator pos:line="51" pos:column="60">.</op:operator><name pos:line="51" pos:column="61">Function</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="53" pos:column="13">Assert</name><op:operator pos:line="53" pos:column="19">.</op:operator><name pos:line="53" pos:column="20">AreNotSame</name></name><argument_list pos:line="53" pos:column="30">(<argument><expr><name pos:line="53" pos:column="31">diffBeforeFunc</name></expr></argument>, <argument><expr><name pos:line="53" pos:column="47">beforeFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="54" pos:column="13">Assert</name><op:operator pos:line="54" pos:column="19">.</op:operator><name pos:line="54" pos:column="20">IsTrue</name></name><argument_list pos:line="54" pos:column="26">(<argument><expr><call><name><name pos:line="54" pos:column="27">XNode</name><op:operator pos:line="54" pos:column="32">.</op:operator><name pos:line="54" pos:column="33">DeepEquals</name></name><argument_list pos:line="54" pos:column="43">(<argument><expr><name pos:line="54" pos:column="44">beforeFunc</name></expr></argument>, <argument><expr><name pos:line="54" pos:column="56">diffBeforeFunc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="56" pos:column="13">var</name></type> <name pos:line="56" pos:column="17">diffAfterUnit</name> <init pos:line="56" pos:column="31">= <expr><call><name><name pos:line="56" pos:column="33">SrcDiffFilter</name><op:operator pos:line="56" pos:column="46">.</op:operator><name pos:line="56" pos:column="47">GetAfterVersion</name></name><argument_list pos:line="56" pos:column="62">(<argument><expr><name pos:line="56" pos:column="63">diffUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="57" pos:column="13">var</name></type> <name pos:line="57" pos:column="17">diffAfterFunc</name> <init pos:line="57" pos:column="31">= <expr><call><name><name pos:line="57" pos:column="33">diffAfterUnit</name><op:operator pos:line="57" pos:column="46">.</op:operator><name pos:line="57" pos:column="47">Element</name></name><argument_list pos:line="57" pos:column="54">(<argument><expr><name><name pos:line="57" pos:column="55">SRC</name><op:operator pos:line="57" pos:column="58">.</op:operator><name pos:line="57" pos:column="59">Function</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="59" pos:column="13">Assert</name><op:operator pos:line="59" pos:column="19">.</op:operator><name pos:line="59" pos:column="20">AreNotSame</name></name><argument_list pos:line="59" pos:column="30">(<argument><expr><name pos:line="59" pos:column="31">diffAfterFunc</name></expr></argument>, <argument><expr><name pos:line="59" pos:column="46">afterFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="60" pos:column="13">Assert</name><op:operator pos:line="60" pos:column="19">.</op:operator><name pos:line="60" pos:column="20">IsTrue</name></name><argument_list pos:line="60" pos:column="26">(<argument><expr><call><name><name pos:line="60" pos:column="27">XNode</name><op:operator pos:line="60" pos:column="32">.</op:operator><name pos:line="60" pos:column="33">DeepEquals</name></name><argument_list pos:line="60" pos:column="43">(<argument><expr><name pos:line="60" pos:column="44">afterFunc</name></expr></argument>, <argument><expr><name pos:line="60" pos:column="55">diffAfterFunc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="63" pos:column="9">[<expr><name pos:line="63" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="64" pos:column="9">public</specifier> <name pos:line="64" pos:column="16">void</name></type> <name pos:line="64" pos:column="21">TestAddConditionBlock</name><parameter_list pos:line="64" pos:column="42">()</parameter_list> <block pos:line="64" pos:column="45">{
            <decl_stmt><decl><type><name pos:line="65" pos:column="13">string</name></type> <name pos:line="65" pos:column="20">beforeXml</name> <init pos:line="65" pos:column="30">= <expr><lit:literal type="string" pos:line="65" pos:column="32">@"&lt;function&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;MyFunction&lt;/name&gt;&lt;parameter_list&gt;(&lt;parameter&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;char&lt;/name&gt;&lt;modifier&gt;*&lt;/modifier&gt;&lt;/type&gt; &lt;name&gt;data&lt;/name&gt;&lt;/decl&gt;&lt;/parameter&gt;, &lt;parameter&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;mode&lt;/name&gt;&lt;/decl&gt;&lt;/parameter&gt;)&lt;/parameter_list&gt;
&lt;block&gt;{
    &lt;if&gt;if &lt;condition&gt;(&lt;expr&gt;&lt;name&gt;data&lt;/name&gt; &lt;operator&gt;==&lt;/operator&gt; &lt;literal type=""string&gt;""Hello, World&lt;/literal&gt;&lt;/expr&gt;)&lt;/condition&gt;&lt;then&gt;
    &lt;block&gt;{
        &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;CancelEvent&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
        &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;DoOtherWork&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
    }&lt;/block&gt;&lt;/then&gt;&lt;/if&gt;
    &lt;return&gt;return &lt;expr&gt;&lt;literal type=""number&gt;0&lt;/literal&gt;&lt;/expr&gt;;&lt;/return&gt;
}&lt;/block&gt;&lt;/function&gt;
"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="75" pos:column="13">var</name></type> <name pos:line="75" pos:column="17">beforeUnit</name> <init pos:line="75" pos:column="28">= <expr><name><name pos:line="75" pos:column="30">fileSetup</name><index pos:line="75" pos:column="39">[<expr><name><name pos:line="75" pos:column="40">Language</name><op:operator pos:line="75" pos:column="48">.</op:operator><name pos:line="75" pos:column="49">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="75" pos:column="59">.</op:operator><call><name pos:line="75" pos:column="60">GetFileUnitForXmlSnippet</name><argument_list pos:line="75" pos:column="84">(<argument><expr><name pos:line="75" pos:column="85">beforeXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="75" pos:column="96">"before.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="76" pos:column="13">var</name></type> <name pos:line="76" pos:column="17">beforeFunc</name> <init pos:line="76" pos:column="28">= <expr><call><name><name pos:line="76" pos:column="30">beforeUnit</name><op:operator pos:line="76" pos:column="40">.</op:operator><name pos:line="76" pos:column="41">Element</name></name><argument_list pos:line="76" pos:column="48">(<argument><expr><name><name pos:line="76" pos:column="49">SRC</name><op:operator pos:line="76" pos:column="52">.</op:operator><name pos:line="76" pos:column="53">Function</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="78" pos:column="13">string</name></type> <name pos:line="78" pos:column="20">afterXml</name> <init pos:line="78" pos:column="29">= <expr><lit:literal type="string" pos:line="78" pos:column="31">@"&lt;function&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;MyFunction&lt;/name&gt;&lt;parameter_list&gt;(&lt;parameter&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;char&lt;/name&gt;&lt;modifier&gt;*&lt;/modifier&gt;&lt;/type&gt; &lt;name&gt;data&lt;/name&gt;&lt;/decl&gt;&lt;/parameter&gt;, &lt;parameter&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;mode&lt;/name&gt;&lt;/decl&gt;&lt;/parameter&gt;)&lt;/parameter_list&gt;
&lt;block&gt;{
    &lt;if&gt;if &lt;condition&gt;(&lt;expr&gt;&lt;name&gt;data&lt;/name&gt; &lt;operator&gt;==&lt;/operator&gt; &lt;literal type=""string&gt;""Hello, World&lt;/literal&gt;&lt;/expr&gt;)&lt;/condition&gt;&lt;then&gt;
    &lt;block&gt;{
        &lt;if&gt;if &lt;condition&gt;(&lt;expr&gt;&lt;name&gt;mode&lt;/name&gt; &lt;operator&gt;!=&lt;/operator&gt; &lt;name&gt;UNDO&lt;/name&gt;&lt;/expr&gt;)&lt;/condition&gt;&lt;then&gt;
        &lt;block&gt;{
            &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;CancelEvent&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
        }&lt;/block&gt;&lt;/then&gt;&lt;/if&gt;
        &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;DoOtherWork&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
    }&lt;/block&gt;&lt;/then&gt;&lt;/if&gt;
    &lt;return&gt;return &lt;expr&gt;&lt;literal type=""number&gt;0&lt;/literal&gt;&lt;/expr&gt;;&lt;/return&gt;
}&lt;/block&gt;&lt;/function&gt;
"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="91" pos:column="13">var</name></type> <name pos:line="91" pos:column="17">afterUnit</name> <init pos:line="91" pos:column="27">= <expr><name><name pos:line="91" pos:column="29">fileSetup</name><index pos:line="91" pos:column="38">[<expr><name><name pos:line="91" pos:column="39">Language</name><op:operator pos:line="91" pos:column="47">.</op:operator><name pos:line="91" pos:column="48">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="91" pos:column="58">.</op:operator><call><name pos:line="91" pos:column="59">GetFileUnitForXmlSnippet</name><argument_list pos:line="91" pos:column="83">(<argument><expr><name pos:line="91" pos:column="84">afterXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="91" pos:column="94">"after.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="92" pos:column="13">var</name></type> <name pos:line="92" pos:column="17">afterFunc</name> <init pos:line="92" pos:column="27">= <expr><call><name><name pos:line="92" pos:column="29">afterUnit</name><op:operator pos:line="92" pos:column="38">.</op:operator><name pos:line="92" pos:column="39">Element</name></name><argument_list pos:line="92" pos:column="46">(<argument><expr><name><name pos:line="92" pos:column="47">SRC</name><op:operator pos:line="92" pos:column="50">.</op:operator><name pos:line="92" pos:column="51">Function</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="94" pos:column="13">string</name></type> <name pos:line="94" pos:column="20">diffXml</name> <init pos:line="94" pos:column="28">= <expr><lit:literal type="string" pos:line="94" pos:column="30">@"&lt;function&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;MyFunction&lt;/name&gt;&lt;parameter_list&gt;(&lt;parameter&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;char&lt;/name&gt;&lt;modifier&gt;*&lt;/modifier&gt;&lt;/type&gt; &lt;name&gt;data&lt;/name&gt;&lt;/decl&gt;&lt;/parameter&gt;, &lt;parameter&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;mode&lt;/name&gt;&lt;/decl&gt;&lt;/parameter&gt;)&lt;/parameter_list&gt;
&lt;block&gt;{
    &lt;if&gt;if &lt;condition&gt;(&lt;expr&gt;&lt;name&gt;data&lt;/name&gt; &lt;operator&gt;==&lt;/operator&gt; &lt;literal type=""string&gt;""Hello, World&lt;/literal&gt;&lt;/expr&gt;)&lt;/condition&gt;&lt;then&gt;
    &lt;block&gt;{
&lt;diff:insert&gt;        &lt;if&gt;if &lt;condition&gt;(&lt;expr&gt;&lt;name&gt;mode&lt;/name&gt; &lt;operator&gt;!=&lt;/operator&gt; &lt;name&gt;UNDO&lt;/name&gt;&lt;/expr&gt;)&lt;/condition&gt;&lt;then&gt;
        &lt;block&gt;{
    &lt;diff:common&gt;        &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;CancelEvent&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
&lt;/diff:common&gt;        }&lt;/block&gt;&lt;/then&gt;&lt;/if&gt;
&lt;/diff:insert&gt;        &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;DoOtherWork&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
    }&lt;/block&gt;&lt;/then&gt;&lt;/if&gt;
    &lt;return&gt;return &lt;expr&gt;&lt;literal type=""number&gt;0&lt;/literal&gt;&lt;/expr&gt;;&lt;/return&gt;
}&lt;/block&gt;&lt;/function&gt;
"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="107" pos:column="13">var</name></type> <name pos:line="107" pos:column="17">diffUnit</name> <init pos:line="107" pos:column="26">= <expr><name><name pos:line="107" pos:column="28">fileSetup</name><index pos:line="107" pos:column="37">[<expr><name><name pos:line="107" pos:column="38">Language</name><op:operator pos:line="107" pos:column="46">.</op:operator><name pos:line="107" pos:column="47">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="107" pos:column="57">.</op:operator><call><name pos:line="107" pos:column="58">GetFileUnitForXmlSnippet</name><argument_list pos:line="107" pos:column="82">(<argument><expr><name pos:line="107" pos:column="83">diffXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="107" pos:column="92">"before.cpp|after.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="108" pos:column="13">var</name></type> <name pos:line="108" pos:column="17">diffFunc</name> <init pos:line="108" pos:column="26">= <expr><call><name><name pos:line="108" pos:column="28">diffUnit</name><op:operator pos:line="108" pos:column="36">.</op:operator><name pos:line="108" pos:column="37">Element</name></name><argument_list pos:line="108" pos:column="44">(<argument><expr><name><name pos:line="108" pos:column="45">SRC</name><op:operator pos:line="108" pos:column="48">.</op:operator><name pos:line="108" pos:column="49">Function</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="110" pos:column="13">var</name></type> <name pos:line="110" pos:column="17">diffBeforeUnit</name> <init pos:line="110" pos:column="32">= <expr><call><name><name pos:line="110" pos:column="34">SrcDiffFilter</name><op:operator pos:line="110" pos:column="47">.</op:operator><name pos:line="110" pos:column="48">GetBeforeVersion</name></name><argument_list pos:line="110" pos:column="64">(<argument><expr><name pos:line="110" pos:column="65">diffUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="111" pos:column="13">var</name></type> <name pos:line="111" pos:column="17">diffBeforeFunc</name> <init pos:line="111" pos:column="32">= <expr><call><name><name pos:line="111" pos:column="34">diffBeforeUnit</name><op:operator pos:line="111" pos:column="48">.</op:operator><name pos:line="111" pos:column="49">Element</name></name><argument_list pos:line="111" pos:column="56">(<argument><expr><name><name pos:line="111" pos:column="57">SRC</name><op:operator pos:line="111" pos:column="60">.</op:operator><name pos:line="111" pos:column="61">Function</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="113" pos:column="13">Assert</name><op:operator pos:line="113" pos:column="19">.</op:operator><name pos:line="113" pos:column="20">AreNotSame</name></name><argument_list pos:line="113" pos:column="30">(<argument><expr><name pos:line="113" pos:column="31">diffBeforeFunc</name></expr></argument>, <argument><expr><name pos:line="113" pos:column="47">beforeFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="114" pos:column="13">Assert</name><op:operator pos:line="114" pos:column="19">.</op:operator><name pos:line="114" pos:column="20">IsTrue</name></name><argument_list pos:line="114" pos:column="26">(<argument><expr><call><name><name pos:line="114" pos:column="27">XNode</name><op:operator pos:line="114" pos:column="32">.</op:operator><name pos:line="114" pos:column="33">DeepEquals</name></name><argument_list pos:line="114" pos:column="43">(<argument><expr><name pos:line="114" pos:column="44">beforeFunc</name></expr></argument>, <argument><expr><name pos:line="114" pos:column="56">diffBeforeFunc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="116" pos:column="13">var</name></type> <name pos:line="116" pos:column="17">diffAfterUnit</name> <init pos:line="116" pos:column="31">= <expr><call><name><name pos:line="116" pos:column="33">SrcDiffFilter</name><op:operator pos:line="116" pos:column="46">.</op:operator><name pos:line="116" pos:column="47">GetAfterVersion</name></name><argument_list pos:line="116" pos:column="62">(<argument><expr><name pos:line="116" pos:column="63">diffUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="117" pos:column="13">var</name></type> <name pos:line="117" pos:column="17">diffAfterFunc</name> <init pos:line="117" pos:column="31">= <expr><call><name><name pos:line="117" pos:column="33">diffAfterUnit</name><op:operator pos:line="117" pos:column="46">.</op:operator><name pos:line="117" pos:column="47">Element</name></name><argument_list pos:line="117" pos:column="54">(<argument><expr><name><name pos:line="117" pos:column="55">SRC</name><op:operator pos:line="117" pos:column="58">.</op:operator><name pos:line="117" pos:column="59">Function</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="119" pos:column="13">Assert</name><op:operator pos:line="119" pos:column="19">.</op:operator><name pos:line="119" pos:column="20">AreNotSame</name></name><argument_list pos:line="119" pos:column="30">(<argument><expr><name pos:line="119" pos:column="31">diffAfterFunc</name></expr></argument>, <argument><expr><name pos:line="119" pos:column="46">afterFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="120" pos:column="13">Assert</name><op:operator pos:line="120" pos:column="19">.</op:operator><name pos:line="120" pos:column="20">IsTrue</name></name><argument_list pos:line="120" pos:column="26">(<argument><expr><call><name><name pos:line="120" pos:column="27">XNode</name><op:operator pos:line="120" pos:column="32">.</op:operator><name pos:line="120" pos:column="33">DeepEquals</name></name><argument_list pos:line="120" pos:column="43">(<argument><expr><name pos:line="120" pos:column="44">afterFunc</name></expr></argument>, <argument><expr><name pos:line="120" pos:column="55">diffAfterFunc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="123" pos:column="9">[<expr><name pos:line="123" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="124" pos:column="9">public</specifier> <name pos:line="124" pos:column="16">void</name></type> <name pos:line="124" pos:column="21">TestRemoveConditionBlock</name><parameter_list pos:line="124" pos:column="45">()</parameter_list> <block pos:line="124" pos:column="48">{
            <decl_stmt><decl><type><name pos:line="125" pos:column="13">string</name></type> <name pos:line="125" pos:column="20">beforeXml</name> <init pos:line="125" pos:column="30">= <expr><lit:literal type="string" pos:line="125" pos:column="32">@"&lt;function&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;MyFunction&lt;/name&gt;&lt;parameter_list&gt;(&lt;parameter&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;char&lt;/name&gt;&lt;modifier&gt;*&lt;/modifier&gt;&lt;/type&gt; &lt;name&gt;data&lt;/name&gt;&lt;/decl&gt;&lt;/parameter&gt;, &lt;parameter&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;mode&lt;/name&gt;&lt;/decl&gt;&lt;/parameter&gt;)&lt;/parameter_list&gt;
&lt;block&gt;{
    &lt;if&gt;if &lt;condition&gt;(&lt;expr&gt;&lt;name&gt;data&lt;/name&gt; &lt;operator&gt;==&lt;/operator&gt; &lt;literal type=""string&gt;""Hello, World&lt;/literal&gt;&lt;/expr&gt;)&lt;/condition&gt;&lt;then&gt;
    &lt;block&gt;{
        &lt;if&gt;if &lt;condition&gt;(&lt;expr&gt;&lt;name&gt;mode&lt;/name&gt; &lt;operator&gt;!=&lt;/operator&gt; &lt;name&gt;UNDO&lt;/name&gt;&lt;/expr&gt;)&lt;/condition&gt;&lt;then&gt;
        &lt;block&gt;{
            &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;CancelEvent&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
        }&lt;/block&gt;&lt;/then&gt;&lt;/if&gt;
        &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;DoOtherWork&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
    }&lt;/block&gt;&lt;/then&gt;&lt;/if&gt;
    &lt;return&gt;return &lt;expr&gt;&lt;literal type=""number&gt;0&lt;/literal&gt;&lt;/expr&gt;;&lt;/return&gt;
}&lt;/block&gt;&lt;/function&gt;
"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="138" pos:column="13">var</name></type> <name pos:line="138" pos:column="17">beforeUnit</name> <init pos:line="138" pos:column="28">= <expr><name><name pos:line="138" pos:column="30">fileSetup</name><index pos:line="138" pos:column="39">[<expr><name><name pos:line="138" pos:column="40">Language</name><op:operator pos:line="138" pos:column="48">.</op:operator><name pos:line="138" pos:column="49">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="138" pos:column="59">.</op:operator><call><name pos:line="138" pos:column="60">GetFileUnitForXmlSnippet</name><argument_list pos:line="138" pos:column="84">(<argument><expr><name pos:line="138" pos:column="85">beforeXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="138" pos:column="96">"before.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="139" pos:column="13">var</name></type> <name pos:line="139" pos:column="17">beforeFunc</name> <init pos:line="139" pos:column="28">= <expr><call><name><name pos:line="139" pos:column="30">beforeUnit</name><op:operator pos:line="139" pos:column="40">.</op:operator><name pos:line="139" pos:column="41">Element</name></name><argument_list pos:line="139" pos:column="48">(<argument><expr><name><name pos:line="139" pos:column="49">SRC</name><op:operator pos:line="139" pos:column="52">.</op:operator><name pos:line="139" pos:column="53">Function</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="141" pos:column="13">string</name></type> <name pos:line="141" pos:column="20">afterXml</name> <init pos:line="141" pos:column="29">= <expr><lit:literal type="string" pos:line="141" pos:column="31">@"&lt;function&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;MyFunction&lt;/name&gt;&lt;parameter_list&gt;(&lt;parameter&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;char&lt;/name&gt;&lt;modifier&gt;*&lt;/modifier&gt;&lt;/type&gt; &lt;name&gt;data&lt;/name&gt;&lt;/decl&gt;&lt;/parameter&gt;, &lt;parameter&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;mode&lt;/name&gt;&lt;/decl&gt;&lt;/parameter&gt;)&lt;/parameter_list&gt;
&lt;block&gt;{
    &lt;if&gt;if &lt;condition&gt;(&lt;expr&gt;&lt;name&gt;data&lt;/name&gt; &lt;operator&gt;==&lt;/operator&gt; &lt;literal type=""string&gt;""Hello, World&lt;/literal&gt;&lt;/expr&gt;)&lt;/condition&gt;&lt;then&gt;
    &lt;block&gt;{
        &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;CancelEvent&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
        &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;DoOtherWork&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
    }&lt;/block&gt;&lt;/then&gt;&lt;/if&gt;
    &lt;return&gt;return &lt;expr&gt;&lt;literal type=""number&gt;0&lt;/literal&gt;&lt;/expr&gt;;&lt;/return&gt;
}&lt;/block&gt;&lt;/function&gt;
"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="151" pos:column="13">var</name></type> <name pos:line="151" pos:column="17">afterUnit</name> <init pos:line="151" pos:column="27">= <expr><name><name pos:line="151" pos:column="29">fileSetup</name><index pos:line="151" pos:column="38">[<expr><name><name pos:line="151" pos:column="39">Language</name><op:operator pos:line="151" pos:column="47">.</op:operator><name pos:line="151" pos:column="48">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="151" pos:column="58">.</op:operator><call><name pos:line="151" pos:column="59">GetFileUnitForXmlSnippet</name><argument_list pos:line="151" pos:column="83">(<argument><expr><name pos:line="151" pos:column="84">afterXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="151" pos:column="94">"after.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="152" pos:column="13">var</name></type> <name pos:line="152" pos:column="17">afterFunc</name> <init pos:line="152" pos:column="27">= <expr><call><name><name pos:line="152" pos:column="29">afterUnit</name><op:operator pos:line="152" pos:column="38">.</op:operator><name pos:line="152" pos:column="39">Element</name></name><argument_list pos:line="152" pos:column="46">(<argument><expr><name><name pos:line="152" pos:column="47">SRC</name><op:operator pos:line="152" pos:column="50">.</op:operator><name pos:line="152" pos:column="51">Function</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="154" pos:column="13">string</name></type> <name pos:line="154" pos:column="20">diffXml</name> <init pos:line="154" pos:column="28">= <expr><lit:literal type="string" pos:line="154" pos:column="30">@"&lt;function&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;MyFunction&lt;/name&gt;&lt;parameter_list&gt;(&lt;parameter&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;char&lt;/name&gt;&lt;modifier&gt;*&lt;/modifier&gt;&lt;/type&gt; &lt;name&gt;data&lt;/name&gt;&lt;/decl&gt;&lt;/parameter&gt;, &lt;parameter&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;mode&lt;/name&gt;&lt;/decl&gt;&lt;/parameter&gt;)&lt;/parameter_list&gt;
&lt;block&gt;{
    &lt;if&gt;if &lt;condition&gt;(&lt;expr&gt;&lt;name&gt;data&lt;/name&gt; &lt;operator&gt;==&lt;/operator&gt; &lt;literal type=""string&gt;""Hello, World&lt;/literal&gt;&lt;/expr&gt;)&lt;/condition&gt;&lt;then&gt;
    &lt;block&gt;{
&lt;diff:delete&gt;        &lt;if&gt;if &lt;condition&gt;(&lt;expr&gt;&lt;name&gt;mode&lt;/name&gt; &lt;operator&gt;!=&lt;/operator&gt; &lt;name&gt;UNDO&lt;/name&gt;&lt;/expr&gt;)&lt;/condition&gt;&lt;then&gt;
        &lt;block&gt;{
    &lt;diff:common&gt;        &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;CancelEvent&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
&lt;/diff:common&gt;        }&lt;/block&gt;&lt;/then&gt;&lt;/if&gt;
&lt;/diff:delete&gt;        &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;DoOtherWork&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
    }&lt;/block&gt;&lt;/then&gt;&lt;/if&gt;
    &lt;return&gt;return &lt;expr&gt;&lt;literal type=""number&gt;0&lt;/literal&gt;&lt;/expr&gt;;&lt;/return&gt;
}&lt;/block&gt;&lt;/function&gt;
"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="167" pos:column="13">var</name></type> <name pos:line="167" pos:column="17">diffUnit</name> <init pos:line="167" pos:column="26">= <expr><name><name pos:line="167" pos:column="28">fileSetup</name><index pos:line="167" pos:column="37">[<expr><name><name pos:line="167" pos:column="38">Language</name><op:operator pos:line="167" pos:column="46">.</op:operator><name pos:line="167" pos:column="47">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="167" pos:column="57">.</op:operator><call><name pos:line="167" pos:column="58">GetFileUnitForXmlSnippet</name><argument_list pos:line="167" pos:column="82">(<argument><expr><name pos:line="167" pos:column="83">diffXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="167" pos:column="92">"before.cpp|after.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="168" pos:column="13">var</name></type> <name pos:line="168" pos:column="17">diffFunc</name> <init pos:line="168" pos:column="26">= <expr><call><name><name pos:line="168" pos:column="28">diffUnit</name><op:operator pos:line="168" pos:column="36">.</op:operator><name pos:line="168" pos:column="37">Element</name></name><argument_list pos:line="168" pos:column="44">(<argument><expr><name><name pos:line="168" pos:column="45">SRC</name><op:operator pos:line="168" pos:column="48">.</op:operator><name pos:line="168" pos:column="49">Function</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="170" pos:column="13">var</name></type> <name pos:line="170" pos:column="17">diffBeforeUnit</name> <init pos:line="170" pos:column="32">= <expr><call><name><name pos:line="170" pos:column="34">SrcDiffFilter</name><op:operator pos:line="170" pos:column="47">.</op:operator><name pos:line="170" pos:column="48">GetBeforeVersion</name></name><argument_list pos:line="170" pos:column="64">(<argument><expr><name pos:line="170" pos:column="65">diffUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="171" pos:column="13">var</name></type> <name pos:line="171" pos:column="17">diffBeforeFunc</name> <init pos:line="171" pos:column="32">= <expr><call><name><name pos:line="171" pos:column="34">diffBeforeUnit</name><op:operator pos:line="171" pos:column="48">.</op:operator><name pos:line="171" pos:column="49">Element</name></name><argument_list pos:line="171" pos:column="56">(<argument><expr><name><name pos:line="171" pos:column="57">SRC</name><op:operator pos:line="171" pos:column="60">.</op:operator><name pos:line="171" pos:column="61">Function</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="173" pos:column="13">Assert</name><op:operator pos:line="173" pos:column="19">.</op:operator><name pos:line="173" pos:column="20">AreNotSame</name></name><argument_list pos:line="173" pos:column="30">(<argument><expr><name pos:line="173" pos:column="31">diffBeforeFunc</name></expr></argument>, <argument><expr><name pos:line="173" pos:column="47">beforeFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="174" pos:column="13">Assert</name><op:operator pos:line="174" pos:column="19">.</op:operator><name pos:line="174" pos:column="20">IsTrue</name></name><argument_list pos:line="174" pos:column="26">(<argument><expr><call><name><name pos:line="174" pos:column="27">XNode</name><op:operator pos:line="174" pos:column="32">.</op:operator><name pos:line="174" pos:column="33">DeepEquals</name></name><argument_list pos:line="174" pos:column="43">(<argument><expr><name pos:line="174" pos:column="44">beforeFunc</name></expr></argument>, <argument><expr><name pos:line="174" pos:column="56">diffBeforeFunc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="176" pos:column="13">var</name></type> <name pos:line="176" pos:column="17">diffAfterUnit</name> <init pos:line="176" pos:column="31">= <expr><call><name><name pos:line="176" pos:column="33">SrcDiffFilter</name><op:operator pos:line="176" pos:column="46">.</op:operator><name pos:line="176" pos:column="47">GetAfterVersion</name></name><argument_list pos:line="176" pos:column="62">(<argument><expr><name pos:line="176" pos:column="63">diffUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="177" pos:column="13">var</name></type> <name pos:line="177" pos:column="17">diffAfterFunc</name> <init pos:line="177" pos:column="31">= <expr><call><name><name pos:line="177" pos:column="33">diffAfterUnit</name><op:operator pos:line="177" pos:column="46">.</op:operator><name pos:line="177" pos:column="47">Element</name></name><argument_list pos:line="177" pos:column="54">(<argument><expr><name><name pos:line="177" pos:column="55">SRC</name><op:operator pos:line="177" pos:column="58">.</op:operator><name pos:line="177" pos:column="59">Function</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="179" pos:column="13">Assert</name><op:operator pos:line="179" pos:column="19">.</op:operator><name pos:line="179" pos:column="20">AreNotSame</name></name><argument_list pos:line="179" pos:column="30">(<argument><expr><name pos:line="179" pos:column="31">diffAfterFunc</name></expr></argument>, <argument><expr><name pos:line="179" pos:column="46">afterFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="180" pos:column="13">Assert</name><op:operator pos:line="180" pos:column="19">.</op:operator><name pos:line="180" pos:column="20">IsTrue</name></name><argument_list pos:line="180" pos:column="26">(<argument><expr><call><name><name pos:line="180" pos:column="27">XNode</name><op:operator pos:line="180" pos:column="32">.</op:operator><name pos:line="180" pos:column="33">DeepEquals</name></name><argument_list pos:line="180" pos:column="43">(<argument><expr><name pos:line="180" pos:column="44">afterFunc</name></expr></argument>, <argument><expr><name pos:line="180" pos:column="55">diffAfterFunc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="183" pos:column="9">[<expr><name pos:line="183" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="184" pos:column="9">public</specifier> <name pos:line="184" pos:column="16">void</name></type> <name pos:line="184" pos:column="21">TestSplitFunction</name><parameter_list pos:line="184" pos:column="38">()</parameter_list> <block pos:line="184" pos:column="41">{
            <decl_stmt><decl><type><name pos:line="185" pos:column="13">string</name></type> <name pos:line="185" pos:column="20">beforeXml</name> <init pos:line="185" pos:column="30">= <expr><lit:literal type="string" pos:line="185" pos:column="32">@"&lt;constructor&gt;&lt;name&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;operator&gt;::&lt;/operator&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;/name&gt;&lt;parameter_list&gt;(&lt;parameter&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;bar&lt;/name&gt;&lt;/decl&gt;&lt;/parameter&gt;, &lt;parameter&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;baz&lt;/name&gt;&lt;/decl&gt;&lt;/parameter&gt;)&lt;/parameter_list&gt; &lt;member_init_list&gt;: &lt;call&gt;&lt;name&gt;_bar&lt;/name&gt;&lt;argument_list&gt;(&lt;argument&gt;&lt;expr&gt;&lt;name&gt;bar&lt;/name&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt;, &lt;call&gt;&lt;name&gt;_baz&lt;/name&gt;&lt;argument_list&gt;(&lt;argument&gt;&lt;expr&gt;&lt;name&gt;baz&lt;/name&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt;
&lt;/member_init_list&gt;&lt;block&gt;{
    &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;DoWork1&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
    &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;DoWork2&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
}&lt;/block&gt;&lt;/constructor&gt;
"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="191" pos:column="13">var</name></type> <name pos:line="191" pos:column="17">beforeUnit</name> <init pos:line="191" pos:column="28">= <expr><name><name pos:line="191" pos:column="30">fileSetup</name><index pos:line="191" pos:column="39">[<expr><name><name pos:line="191" pos:column="40">Language</name><op:operator pos:line="191" pos:column="48">.</op:operator><name pos:line="191" pos:column="49">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="191" pos:column="59">.</op:operator><call><name pos:line="191" pos:column="60">GetFileUnitForXmlSnippet</name><argument_list pos:line="191" pos:column="84">(<argument><expr><name pos:line="191" pos:column="85">beforeXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="191" pos:column="96">"test.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="192" pos:column="13">var</name></type> <name pos:line="192" pos:column="17">beforeFunc</name> <init pos:line="192" pos:column="28">= <expr><call><name><name pos:line="192" pos:column="30">beforeUnit</name><op:operator pos:line="192" pos:column="40">.</op:operator><name pos:line="192" pos:column="41">Element</name></name><argument_list pos:line="192" pos:column="48">(<argument><expr><name><name pos:line="192" pos:column="49">SRC</name><op:operator pos:line="192" pos:column="52">.</op:operator><name pos:line="192" pos:column="53">Function</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="194" pos:column="13">string</name></type> <name pos:line="194" pos:column="20">afterXml</name> <init pos:line="194" pos:column="29">= <expr><lit:literal type="string" pos:line="194" pos:column="31">@"&lt;constructor&gt;&lt;name&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;operator&gt;::&lt;/operator&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;/name&gt;&lt;parameter_list&gt;(&lt;parameter&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;bar&lt;/name&gt;&lt;/decl&gt;&lt;/parameter&gt;, &lt;parameter&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;baz&lt;/name&gt;&lt;/decl&gt;&lt;/parameter&gt;)&lt;/parameter_list&gt; &lt;member_init_list&gt;: &lt;call&gt;&lt;name&gt;_bar&lt;/name&gt;&lt;argument_list&gt;(&lt;argument&gt;&lt;expr&gt;&lt;name&gt;bar&lt;/name&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt;, &lt;call&gt;&lt;name&gt;_baz&lt;/name&gt;&lt;argument_list&gt;(&lt;argument&gt;&lt;expr&gt;&lt;name&gt;baz&lt;/name&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt; &lt;/member_init_list&gt;&lt;block&gt;{}&lt;/block&gt;&lt;/constructor&gt;

&lt;function&gt;&lt;type&gt;&lt;name&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;operator&gt;::&lt;/operator&gt;&lt;name&gt;Initialize&lt;/name&gt;&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt;
&lt;block&gt;{
    &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;DoWork1&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
    &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;DoWork2&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
}&lt;/block&gt;&lt;/function&gt;
"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="202" pos:column="13">var</name></type> <name pos:line="202" pos:column="17">afterUnit</name> <init pos:line="202" pos:column="27">= <expr><name><name pos:line="202" pos:column="29">fileSetup</name><index pos:line="202" pos:column="38">[<expr><name><name pos:line="202" pos:column="39">Language</name><op:operator pos:line="202" pos:column="47">.</op:operator><name pos:line="202" pos:column="48">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="202" pos:column="58">.</op:operator><call><name pos:line="202" pos:column="59">GetFileUnitForXmlSnippet</name><argument_list pos:line="202" pos:column="83">(<argument><expr><name pos:line="202" pos:column="84">afterXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="202" pos:column="94">"test.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="203" pos:column="13">var</name></type> <name pos:line="203" pos:column="17">afterFunc</name> <init pos:line="203" pos:column="27">= <expr><call><name><name pos:line="203" pos:column="29">afterUnit</name><op:operator pos:line="203" pos:column="38">.</op:operator><name pos:line="203" pos:column="39">Element</name></name><argument_list pos:line="203" pos:column="46">(<argument><expr><name><name pos:line="203" pos:column="47">SRC</name><op:operator pos:line="203" pos:column="50">.</op:operator><name pos:line="203" pos:column="51">Function</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="205" pos:column="13">string</name></type> <name pos:line="205" pos:column="20">diffXml</name> <init pos:line="205" pos:column="28">= <expr><lit:literal type="string" pos:line="205" pos:column="30">@"&lt;constructor&gt;&lt;name&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;operator&gt;::&lt;/operator&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;/name&gt;&lt;parameter_list&gt;(&lt;parameter&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;bar&lt;/name&gt;&lt;/decl&gt;&lt;/parameter&gt;, &lt;parameter&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;baz&lt;/name&gt;&lt;/decl&gt;&lt;/parameter&gt;)&lt;/parameter_list&gt; &lt;member_init_list&gt;: &lt;call&gt;&lt;name&gt;_bar&lt;/name&gt;&lt;argument_list&gt;(&lt;argument&gt;&lt;expr&gt;&lt;name&gt;bar&lt;/name&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt;, &lt;call&gt;&lt;name&gt;_baz&lt;/name&gt;&lt;argument_list&gt;(&lt;argument&gt;&lt;expr&gt;&lt;name&gt;baz&lt;/name&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt;&lt;diff:delete type=""whitespace&gt;
&lt;/diff:delete&gt;&lt;diff:insert type=""whitespace&gt; &lt;/diff:insert&gt;&lt;/member_init_list&gt;&lt;block&gt;&lt;diff:delete type=""change&gt;{
    &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;DoWork1&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
    &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;DoWork2&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
}&lt;/diff:delete&gt;&lt;diff:insert type=""change&gt;{}&lt;/diff:insert&gt;&lt;/block&gt;&lt;/constructor&gt;
&lt;diff:insert&gt;
&lt;function&gt;&lt;type&gt;&lt;name&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;operator&gt;::&lt;/operator&gt;&lt;name&gt;Initialize&lt;/name&gt;&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt;
&lt;block&gt;{
    &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;DoWork1&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
    &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;DoWork2&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
}&lt;/block&gt;&lt;/function&gt;
&lt;/diff:insert&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="217" pos:column="13">var</name></type> <name pos:line="217" pos:column="17">diffUnit</name> <init pos:line="217" pos:column="26">= <expr><name><name pos:line="217" pos:column="28">fileSetup</name><index pos:line="217" pos:column="37">[<expr><name><name pos:line="217" pos:column="38">Language</name><op:operator pos:line="217" pos:column="46">.</op:operator><name pos:line="217" pos:column="47">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="217" pos:column="57">.</op:operator><call><name pos:line="217" pos:column="58">GetFileUnitForXmlSnippet</name><argument_list pos:line="217" pos:column="82">(<argument><expr><name pos:line="217" pos:column="83">diffXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="217" pos:column="92">"test.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="218" pos:column="13">var</name></type> <name pos:line="218" pos:column="17">diffFunc</name> <init pos:line="218" pos:column="26">= <expr><call><name><name pos:line="218" pos:column="28">diffUnit</name><op:operator pos:line="218" pos:column="36">.</op:operator><name pos:line="218" pos:column="37">Element</name></name><argument_list pos:line="218" pos:column="44">(<argument><expr><name><name pos:line="218" pos:column="45">SRC</name><op:operator pos:line="218" pos:column="48">.</op:operator><name pos:line="218" pos:column="49">Function</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="220" pos:column="13">var</name></type> <name pos:line="220" pos:column="17">diffBeforeUnit</name> <init pos:line="220" pos:column="32">= <expr><call><name><name pos:line="220" pos:column="34">SrcDiffFilter</name><op:operator pos:line="220" pos:column="47">.</op:operator><name pos:line="220" pos:column="48">GetBeforeVersion</name></name><argument_list pos:line="220" pos:column="64">(<argument><expr><name pos:line="220" pos:column="65">diffUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="221" pos:column="13">var</name></type> <name pos:line="221" pos:column="17">diffBeforeFunc</name> <init pos:line="221" pos:column="32">= <expr><call><name><name pos:line="221" pos:column="34">diffBeforeUnit</name><op:operator pos:line="221" pos:column="48">.</op:operator><name pos:line="221" pos:column="49">Element</name></name><argument_list pos:line="221" pos:column="56">(<argument><expr><name><name pos:line="221" pos:column="57">SRC</name><op:operator pos:line="221" pos:column="60">.</op:operator><name pos:line="221" pos:column="61">Function</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="223" pos:column="13">Assert</name><op:operator pos:line="223" pos:column="19">.</op:operator><name pos:line="223" pos:column="20">AreNotSame</name></name><argument_list pos:line="223" pos:column="30">(<argument><expr><name pos:line="223" pos:column="31">diffBeforeUnit</name></expr></argument>, <argument><expr><name pos:line="223" pos:column="47">beforeUnit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="224" pos:column="13">Assert</name><op:operator pos:line="224" pos:column="19">.</op:operator><name pos:line="224" pos:column="20">IsTrue</name></name><argument_list pos:line="224" pos:column="26">(<argument><expr><call><name><name pos:line="224" pos:column="27">XNode</name><op:operator pos:line="224" pos:column="32">.</op:operator><name pos:line="224" pos:column="33">DeepEquals</name></name><argument_list pos:line="224" pos:column="43">(<argument><expr><name pos:line="224" pos:column="44">beforeUnit</name></expr></argument>, <argument><expr><name pos:line="224" pos:column="56">diffBeforeUnit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="226" pos:column="13">var</name></type> <name pos:line="226" pos:column="17">diffAfterUnit</name> <init pos:line="226" pos:column="31">= <expr><call><name><name pos:line="226" pos:column="33">SrcDiffFilter</name><op:operator pos:line="226" pos:column="46">.</op:operator><name pos:line="226" pos:column="47">GetAfterVersion</name></name><argument_list pos:line="226" pos:column="62">(<argument><expr><name pos:line="226" pos:column="63">diffUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="227" pos:column="13">var</name></type> <name pos:line="227" pos:column="17">diffAfterFunc</name> <init pos:line="227" pos:column="31">= <expr><call><name><name pos:line="227" pos:column="33">diffAfterUnit</name><op:operator pos:line="227" pos:column="46">.</op:operator><name pos:line="227" pos:column="47">Element</name></name><argument_list pos:line="227" pos:column="54">(<argument><expr><name><name pos:line="227" pos:column="55">SRC</name><op:operator pos:line="227" pos:column="58">.</op:operator><name pos:line="227" pos:column="59">Function</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="229" pos:column="13">Assert</name><op:operator pos:line="229" pos:column="19">.</op:operator><name pos:line="229" pos:column="20">AreNotSame</name></name><argument_list pos:line="229" pos:column="30">(<argument><expr><name pos:line="229" pos:column="31">diffAfterUnit</name></expr></argument>, <argument><expr><name pos:line="229" pos:column="46">afterUnit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="230" pos:column="13">Assert</name><op:operator pos:line="230" pos:column="19">.</op:operator><name pos:line="230" pos:column="20">IsTrue</name></name><argument_list pos:line="230" pos:column="26">(<argument><expr><call><name><name pos:line="230" pos:column="27">XNode</name><op:operator pos:line="230" pos:column="32">.</op:operator><name pos:line="230" pos:column="33">DeepEquals</name></name><argument_list pos:line="230" pos:column="43">(<argument><expr><name pos:line="230" pos:column="44">afterUnit</name></expr></argument>, <argument><expr><name pos:line="230" pos:column="55">diffAfterUnit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
