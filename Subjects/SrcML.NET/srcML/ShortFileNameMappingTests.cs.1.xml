<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Test\ShortFileNameMappingTests.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">NUnit</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">Framework</name></name>;</using>
<using pos:line="2" pos:column="1">using <name pos:line="2" pos:column="7">System</name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Collections</name><op:operator pos:line="3" pos:column="25">.</op:operator><name pos:line="3" pos:column="26">Generic</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">IO</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Linq</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">Text</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">System</name><op:operator pos:line="7" pos:column="13">.</op:operator><name pos:line="7" pos:column="14">Threading</name></name>;</using>

<namespace pos:line="9" pos:column="1">namespace <name><name pos:line="9" pos:column="11">ABB</name><op:operator pos:line="9" pos:column="14">.</op:operator><name pos:line="9" pos:column="15">SrcML</name><op:operator pos:line="9" pos:column="20">.</op:operator><name pos:line="9" pos:column="21">Test</name></name> <block pos:line="9" pos:column="26">{

    <class><attribute pos:line="11" pos:column="5">[<expr><name pos:line="11" pos:column="6">TestFixture</name></expr>]</attribute>
    <attribute pos:line="12" pos:column="5">[<expr><call><name pos:line="12" pos:column="6">Category</name><argument_list pos:line="12" pos:column="14">(<argument><expr><lit:literal type="string" pos:line="12" pos:column="15">"Build"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="13" pos:column="5">public</specifier> class <name pos:line="13" pos:column="18">ShortFileNameMappingTests</name> <block pos:line="13" pos:column="44">{

        <function><type><attribute pos:line="15" pos:column="9">[<expr><name pos:line="15" pos:column="10">TestFixtureSetUp</name></expr>]</attribute>
        <specifier pos:line="16" pos:column="9">public</specifier> <name pos:line="16" pos:column="16">void</name></type> <name pos:line="16" pos:column="21">FixtureSetUp</name><parameter_list pos:line="16" pos:column="33">()</parameter_list> <block pos:line="16" pos:column="36">{
            <if pos:line="17" pos:column="13">if<condition pos:line="17" pos:column="15">(<expr><op:operator pos:line="17" pos:column="16">!</op:operator><call><name><name pos:line="17" pos:column="17">Directory</name><op:operator pos:line="17" pos:column="26">.</op:operator><name pos:line="17" pos:column="27">Exists</name></name><argument_list pos:line="17" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="17" pos:column="34">"mappingTest"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="17" pos:column="49"> <block pos:line="17" pos:column="50">{
                <expr_stmt><expr><call><name><name pos:line="18" pos:column="17">Directory</name><op:operator pos:line="18" pos:column="26">.</op:operator><name pos:line="18" pos:column="27">CreateDirectory</name></name><argument_list pos:line="18" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="18" pos:column="43">"mappingTest"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><attribute pos:line="22" pos:column="9">[<expr><name pos:line="22" pos:column="10">TestFixtureTearDown</name></expr>]</attribute>
        <specifier pos:line="23" pos:column="9">public</specifier> <name pos:line="23" pos:column="16">void</name></type> <name pos:line="23" pos:column="21">FixtureTearDown</name><parameter_list pos:line="23" pos:column="36">()</parameter_list> <block pos:line="23" pos:column="39">{
            <if pos:line="24" pos:column="13">if<condition pos:line="24" pos:column="15">(<expr><call><name><name pos:line="24" pos:column="16">Directory</name><op:operator pos:line="24" pos:column="25">.</op:operator><name pos:line="24" pos:column="26">Exists</name></name><argument_list pos:line="24" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="24" pos:column="33">"mappingTest"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="24" pos:column="48"> <block pos:line="24" pos:column="49">{
                <expr_stmt><expr><call><name><name pos:line="25" pos:column="17">Directory</name><op:operator pos:line="25" pos:column="26">.</op:operator><name pos:line="25" pos:column="27">Delete</name></name><argument_list pos:line="25" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="25" pos:column="34">"mappingTest"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="25" pos:column="49">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><attribute pos:line="29" pos:column="9">[<expr><name pos:line="29" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="30" pos:column="9">public</specifier> <name pos:line="30" pos:column="16">void</name></type> <name pos:line="30" pos:column="21">TestConcurrentAccess</name><parameter_list pos:line="30" pos:column="41">()</parameter_list> <block pos:line="30" pos:column="44">{
            <decl_stmt><decl><type><name pos:line="31" pos:column="13">var</name></type> <name pos:line="31" pos:column="17">sourceFiles1</name> <init pos:line="31" pos:column="30">= <expr><op:operator pos:line="31" pos:column="32">new</op:operator><index pos:line="31" pos:column="35">[]</index>
                               <block pos:line="32" pos:column="32">{
                                   <expr><name><name pos:line="33" pos:column="36">Environment</name><op:operator pos:line="33" pos:column="47">.</op:operator><name pos:line="33" pos:column="48">CurrentDirectory</name></name><op:operator pos:line="33" pos:column="64">+</op:operator><lit:literal type="string" pos:line="33" pos:column="65">@"\xyzzy\Example.cs"</lit:literal></expr>,
                                   <expr><name><name pos:line="34" pos:column="36">Environment</name><op:operator pos:line="34" pos:column="47">.</op:operator><name pos:line="34" pos:column="48">CurrentDirectory</name></name><op:operator pos:line="34" pos:column="64">+</op:operator><lit:literal type="string" pos:line="34" pos:column="65">@"\foo\bar\MissingFile.cs"</lit:literal></expr>,
                                   <expr><name><name pos:line="35" pos:column="36">Environment</name><op:operator pos:line="35" pos:column="47">.</op:operator><name pos:line="35" pos:column="48">CurrentDirectory</name></name><op:operator pos:line="35" pos:column="64">+</op:operator><lit:literal type="string" pos:line="35" pos:column="65">@"\zork\Example.cs"</lit:literal></expr>,
                                   <expr><name><name pos:line="36" pos:column="36">Environment</name><op:operator pos:line="36" pos:column="47">.</op:operator><name pos:line="36" pos:column="48">CurrentDirectory</name></name><op:operator pos:line="36" pos:column="64">+</op:operator><lit:literal type="string" pos:line="36" pos:column="65">@"\path\to\file\data.cpp"</lit:literal></expr>,
                                   <expr><name><name pos:line="37" pos:column="36">Environment</name><op:operator pos:line="37" pos:column="47">.</op:operator><name pos:line="37" pos:column="48">CurrentDirectory</name></name><op:operator pos:line="37" pos:column="64">+</op:operator><lit:literal type="string" pos:line="37" pos:column="65">@"\path\to\file\data1.cpp"</lit:literal></expr>,
                                   <expr><name><name pos:line="38" pos:column="36">Environment</name><op:operator pos:line="38" pos:column="47">.</op:operator><name pos:line="38" pos:column="48">CurrentDirectory</name></name><op:operator pos:line="38" pos:column="64">+</op:operator><lit:literal type="string" pos:line="38" pos:column="65">@"\path\to\file\data2.cpp"</lit:literal></expr>,
                                   <expr><name><name pos:line="39" pos:column="36">Environment</name><op:operator pos:line="39" pos:column="47">.</op:operator><name pos:line="39" pos:column="48">CurrentDirectory</name></name><op:operator pos:line="39" pos:column="64">+</op:operator><lit:literal type="string" pos:line="39" pos:column="65">@"\path\to\file\data3.cpp"</lit:literal></expr>,
                                   <expr><name><name pos:line="40" pos:column="36">Environment</name><op:operator pos:line="40" pos:column="47">.</op:operator><name pos:line="40" pos:column="48">CurrentDirectory</name></name><op:operator pos:line="40" pos:column="64">+</op:operator><lit:literal type="string" pos:line="40" pos:column="65">@"\path\to\file\data4.cpp"</lit:literal></expr>,
                                   <expr><name><name pos:line="41" pos:column="36">Environment</name><op:operator pos:line="41" pos:column="47">.</op:operator><name pos:line="41" pos:column="48">CurrentDirectory</name></name><op:operator pos:line="41" pos:column="64">+</op:operator><lit:literal type="string" pos:line="41" pos:column="65">@"\path\to\file\data5.cpp"</lit:literal></expr>,
                                   <expr><name><name pos:line="42" pos:column="36">Environment</name><op:operator pos:line="42" pos:column="47">.</op:operator><name pos:line="42" pos:column="48">CurrentDirectory</name></name><op:operator pos:line="42" pos:column="64">+</op:operator><lit:literal type="string" pos:line="42" pos:column="65">@"\path\to\file\data6.cpp"</lit:literal></expr>,
                                   <expr><name><name pos:line="43" pos:column="36">Environment</name><op:operator pos:line="43" pos:column="47">.</op:operator><name pos:line="43" pos:column="48">CurrentDirectory</name></name><op:operator pos:line="43" pos:column="64">+</op:operator><lit:literal type="string" pos:line="43" pos:column="65">@"\path\to\file\data7.cpp"</lit:literal></expr>,
                                   <expr><name><name pos:line="44" pos:column="36">Environment</name><op:operator pos:line="44" pos:column="47">.</op:operator><name pos:line="44" pos:column="48">CurrentDirectory</name></name><op:operator pos:line="44" pos:column="64">+</op:operator><lit:literal type="string" pos:line="44" pos:column="65">@"\path\to\file\data8.cpp"</lit:literal></expr>,
                                   <expr><name><name pos:line="45" pos:column="36">Environment</name><op:operator pos:line="45" pos:column="47">.</op:operator><name pos:line="45" pos:column="48">CurrentDirectory</name></name><op:operator pos:line="45" pos:column="64">+</op:operator><lit:literal type="string" pos:line="45" pos:column="65">@"\path\to\file\data9.cpp"</lit:literal></expr>,
                                   <expr><name><name pos:line="46" pos:column="36">Environment</name><op:operator pos:line="46" pos:column="47">.</op:operator><name pos:line="46" pos:column="48">CurrentDirectory</name></name><op:operator pos:line="46" pos:column="64">+</op:operator><lit:literal type="string" pos:line="46" pos:column="65">@"\path\to\file\data10.cpp"</lit:literal></expr>,
                                   <expr><name><name pos:line="47" pos:column="36">Environment</name><op:operator pos:line="47" pos:column="47">.</op:operator><name pos:line="47" pos:column="48">CurrentDirectory</name></name><op:operator pos:line="47" pos:column="64">+</op:operator><lit:literal type="string" pos:line="47" pos:column="65">@"\path\to\file\data11.c"</lit:literal></expr>
                               }</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="49" pos:column="13">var</name></type> <name pos:line="49" pos:column="17">sourceFiles2</name> <init pos:line="49" pos:column="30">= <expr><op:operator pos:line="49" pos:column="32">new</op:operator><index pos:line="49" pos:column="35">[]</index>
                               <block pos:line="50" pos:column="32">{
                                   <expr><name><name pos:line="51" pos:column="36">Environment</name><op:operator pos:line="51" pos:column="47">.</op:operator><name pos:line="51" pos:column="48">CurrentDirectory</name></name><op:operator pos:line="51" pos:column="64">+</op:operator><lit:literal type="string" pos:line="51" pos:column="65">@"\foo\bar\Example.cs"</lit:literal></expr>,
                                   <expr><name><name pos:line="52" pos:column="36">Environment</name><op:operator pos:line="52" pos:column="47">.</op:operator><name pos:line="52" pos:column="48">CurrentDirectory</name></name><op:operator pos:line="52" pos:column="64">+</op:operator><lit:literal type="string" pos:line="52" pos:column="65">@"\path\to\file\data.cpp"</lit:literal></expr>,
                                   <expr><name><name pos:line="53" pos:column="36">Environment</name><op:operator pos:line="53" pos:column="47">.</op:operator><name pos:line="53" pos:column="48">CurrentDirectory</name></name><op:operator pos:line="53" pos:column="64">+</op:operator><lit:literal type="string" pos:line="53" pos:column="65">@"\path\to\file\data1.cpp"</lit:literal></expr>,
                                   <expr><name><name pos:line="54" pos:column="36">Environment</name><op:operator pos:line="54" pos:column="47">.</op:operator><name pos:line="54" pos:column="48">CurrentDirectory</name></name><op:operator pos:line="54" pos:column="64">+</op:operator><lit:literal type="string" pos:line="54" pos:column="65">@"\path\to\file\data2.cpp"</lit:literal></expr>,
                                   <expr><name><name pos:line="55" pos:column="36">Environment</name><op:operator pos:line="55" pos:column="47">.</op:operator><name pos:line="55" pos:column="48">CurrentDirectory</name></name><op:operator pos:line="55" pos:column="64">+</op:operator><lit:literal type="string" pos:line="55" pos:column="65">@"\foo\bar\ImportantData.cpp"</lit:literal></expr>,
                                   <expr><name><name pos:line="56" pos:column="36">Environment</name><op:operator pos:line="56" pos:column="47">.</op:operator><name pos:line="56" pos:column="48">CurrentDirectory</name></name><op:operator pos:line="56" pos:column="64">+</op:operator><lit:literal type="string" pos:line="56" pos:column="65">@"\path\to\file\data3.cpp"</lit:literal></expr>,
                                   <expr><name><name pos:line="57" pos:column="36">Environment</name><op:operator pos:line="57" pos:column="47">.</op:operator><name pos:line="57" pos:column="48">CurrentDirectory</name></name><op:operator pos:line="57" pos:column="64">+</op:operator><lit:literal type="string" pos:line="57" pos:column="65">@"\path\to\file\data4.cpp"</lit:literal></expr>,
                                   <expr><name><name pos:line="58" pos:column="36">Environment</name><op:operator pos:line="58" pos:column="47">.</op:operator><name pos:line="58" pos:column="48">CurrentDirectory</name></name><op:operator pos:line="58" pos:column="64">+</op:operator><lit:literal type="string" pos:line="58" pos:column="65">@"\path\to\file\data5.cpp"</lit:literal></expr>,
                                   <expr><name><name pos:line="59" pos:column="36">Environment</name><op:operator pos:line="59" pos:column="47">.</op:operator><name pos:line="59" pos:column="48">CurrentDirectory</name></name><op:operator pos:line="59" pos:column="64">+</op:operator><lit:literal type="string" pos:line="59" pos:column="65">@"\path\to\file\data6.cpp"</lit:literal></expr>,
                                   <expr><name><name pos:line="60" pos:column="36">Environment</name><op:operator pos:line="60" pos:column="47">.</op:operator><name pos:line="60" pos:column="48">CurrentDirectory</name></name><op:operator pos:line="60" pos:column="64">+</op:operator><lit:literal type="string" pos:line="60" pos:column="65">@"\path\to\file\data7.cpp"</lit:literal></expr>,
                                   <expr><name><name pos:line="61" pos:column="36">Environment</name><op:operator pos:line="61" pos:column="47">.</op:operator><name pos:line="61" pos:column="48">CurrentDirectory</name></name><op:operator pos:line="61" pos:column="64">+</op:operator><lit:literal type="string" pos:line="61" pos:column="65">@"\path\to\file\data8.cpp"</lit:literal></expr>,
                                   <expr><name><name pos:line="62" pos:column="36">Environment</name><op:operator pos:line="62" pos:column="47">.</op:operator><name pos:line="62" pos:column="48">CurrentDirectory</name></name><op:operator pos:line="62" pos:column="64">+</op:operator><lit:literal type="string" pos:line="62" pos:column="65">@"\path\to\file\data9.cpp"</lit:literal></expr>,
                                   <expr><name><name pos:line="63" pos:column="36">Environment</name><op:operator pos:line="63" pos:column="47">.</op:operator><name pos:line="63" pos:column="48">CurrentDirectory</name></name><op:operator pos:line="63" pos:column="64">+</op:operator><lit:literal type="string" pos:line="63" pos:column="65">@"\other\dir\Sample.h"</lit:literal></expr>,
                                   <expr><name><name pos:line="64" pos:column="36">Environment</name><op:operator pos:line="64" pos:column="47">.</op:operator><name pos:line="64" pos:column="48">CurrentDirectory</name></name><op:operator pos:line="64" pos:column="64">+</op:operator><lit:literal type="string" pos:line="64" pos:column="65">@"\path\to\file\data10.cpp"</lit:literal></expr>,
                                   <expr><name><name pos:line="65" pos:column="36">Environment</name><op:operator pos:line="65" pos:column="47">.</op:operator><name pos:line="65" pos:column="48">CurrentDirectory</name></name><op:operator pos:line="65" pos:column="64">+</op:operator><lit:literal type="string" pos:line="65" pos:column="65">@"\path\to\file\data11.c"</lit:literal></expr>
                               }</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="67" pos:column="13">var</name></type> <name pos:line="67" pos:column="17">xmlFiles</name> <init pos:line="67" pos:column="26">= <expr><op:operator pos:line="67" pos:column="28">new</op:operator><index pos:line="67" pos:column="31">[]</index>
                           <block pos:line="68" pos:column="28">{
                               <expr><name><name pos:line="69" pos:column="32">Environment</name><op:operator pos:line="69" pos:column="43">.</op:operator><name pos:line="69" pos:column="44">CurrentDirectory</name></name><op:operator pos:line="69" pos:column="60">+</op:operator><lit:literal type="string" pos:line="69" pos:column="61">@"\mappingTest\Example.cs.1.xml"</lit:literal></expr>,
                               <expr><name><name pos:line="70" pos:column="32">Environment</name><op:operator pos:line="70" pos:column="43">.</op:operator><name pos:line="70" pos:column="44">CurrentDirectory</name></name><op:operator pos:line="70" pos:column="60">+</op:operator><lit:literal type="string" pos:line="70" pos:column="61">@"\mappingTest\MissingFile.cs.1.xml"</lit:literal></expr>,
                               <expr><name><name pos:line="71" pos:column="32">Environment</name><op:operator pos:line="71" pos:column="43">.</op:operator><name pos:line="71" pos:column="44">CurrentDirectory</name></name><op:operator pos:line="71" pos:column="60">+</op:operator><lit:literal type="string" pos:line="71" pos:column="61">@"\mappingTest\Example.cs.2.xml"</lit:literal></expr>,
                               <expr><name><name pos:line="72" pos:column="32">Environment</name><op:operator pos:line="72" pos:column="43">.</op:operator><name pos:line="72" pos:column="44">CurrentDirectory</name></name><op:operator pos:line="72" pos:column="60">+</op:operator><lit:literal type="string" pos:line="72" pos:column="61">@"\mappingTest\data.cpp.1.xml"</lit:literal></expr>,
                               <expr><name><name pos:line="73" pos:column="32">Environment</name><op:operator pos:line="73" pos:column="43">.</op:operator><name pos:line="73" pos:column="44">CurrentDirectory</name></name><op:operator pos:line="73" pos:column="60">+</op:operator><lit:literal type="string" pos:line="73" pos:column="61">@"\mappingTest\data1.cpp.1.xml"</lit:literal></expr>,
                               <expr><name><name pos:line="74" pos:column="32">Environment</name><op:operator pos:line="74" pos:column="43">.</op:operator><name pos:line="74" pos:column="44">CurrentDirectory</name></name><op:operator pos:line="74" pos:column="60">+</op:operator><lit:literal type="string" pos:line="74" pos:column="61">@"\mappingTest\data2.cpp.1.xml"</lit:literal></expr>,
                               <expr><name><name pos:line="75" pos:column="32">Environment</name><op:operator pos:line="75" pos:column="43">.</op:operator><name pos:line="75" pos:column="44">CurrentDirectory</name></name><op:operator pos:line="75" pos:column="60">+</op:operator><lit:literal type="string" pos:line="75" pos:column="61">@"\mappingTest\data3.cpp.1.xml"</lit:literal></expr>,
                               <expr><name><name pos:line="76" pos:column="32">Environment</name><op:operator pos:line="76" pos:column="43">.</op:operator><name pos:line="76" pos:column="44">CurrentDirectory</name></name><op:operator pos:line="76" pos:column="60">+</op:operator><lit:literal type="string" pos:line="76" pos:column="61">@"\mappingTest\data4.cpp.1.xml"</lit:literal></expr>,
                               <expr><name><name pos:line="77" pos:column="32">Environment</name><op:operator pos:line="77" pos:column="43">.</op:operator><name pos:line="77" pos:column="44">CurrentDirectory</name></name><op:operator pos:line="77" pos:column="60">+</op:operator><lit:literal type="string" pos:line="77" pos:column="61">@"\mappingTest\data5.cpp.1.xml"</lit:literal></expr>,
                               <expr><name><name pos:line="78" pos:column="32">Environment</name><op:operator pos:line="78" pos:column="43">.</op:operator><name pos:line="78" pos:column="44">CurrentDirectory</name></name><op:operator pos:line="78" pos:column="60">+</op:operator><lit:literal type="string" pos:line="78" pos:column="61">@"\mappingTest\data6.cpp.1.xml"</lit:literal></expr>,
                               <expr><name><name pos:line="79" pos:column="32">Environment</name><op:operator pos:line="79" pos:column="43">.</op:operator><name pos:line="79" pos:column="44">CurrentDirectory</name></name><op:operator pos:line="79" pos:column="60">+</op:operator><lit:literal type="string" pos:line="79" pos:column="61">@"\mappingTest\data7.cpp.1.xml"</lit:literal></expr>,
                               <expr><name><name pos:line="80" pos:column="32">Environment</name><op:operator pos:line="80" pos:column="43">.</op:operator><name pos:line="80" pos:column="44">CurrentDirectory</name></name><op:operator pos:line="80" pos:column="60">+</op:operator><lit:literal type="string" pos:line="80" pos:column="61">@"\mappingTest\data8.cpp.1.xml"</lit:literal></expr>,
                               <expr><name><name pos:line="81" pos:column="32">Environment</name><op:operator pos:line="81" pos:column="43">.</op:operator><name pos:line="81" pos:column="44">CurrentDirectory</name></name><op:operator pos:line="81" pos:column="60">+</op:operator><lit:literal type="string" pos:line="81" pos:column="61">@"\mappingTest\data9.cpp.1.xml"</lit:literal></expr>,
                               <expr><name><name pos:line="82" pos:column="32">Environment</name><op:operator pos:line="82" pos:column="43">.</op:operator><name pos:line="82" pos:column="44">CurrentDirectory</name></name><op:operator pos:line="82" pos:column="60">+</op:operator><lit:literal type="string" pos:line="82" pos:column="61">@"\mappingTest\data10.cpp.1.xml"</lit:literal></expr>,
                               <expr><name><name pos:line="83" pos:column="32">Environment</name><op:operator pos:line="83" pos:column="43">.</op:operator><name pos:line="83" pos:column="44">CurrentDirectory</name></name><op:operator pos:line="83" pos:column="60">+</op:operator><lit:literal type="string" pos:line="83" pos:column="61">@"\mappingTest\data11.c.1.xml"</lit:literal></expr>,
                               <expr><name><name pos:line="84" pos:column="32">Environment</name><op:operator pos:line="84" pos:column="43">.</op:operator><name pos:line="84" pos:column="44">CurrentDirectory</name></name><op:operator pos:line="84" pos:column="60">+</op:operator><lit:literal type="string" pos:line="84" pos:column="61">@"\mappingTest\Example.cs.3.xml"</lit:literal></expr>,
                               <expr><name><name pos:line="85" pos:column="32">Environment</name><op:operator pos:line="85" pos:column="43">.</op:operator><name pos:line="85" pos:column="44">CurrentDirectory</name></name><op:operator pos:line="85" pos:column="60">+</op:operator><lit:literal type="string" pos:line="85" pos:column="61">@"\mappingTest\ImportantData.cpp.1.xml"</lit:literal></expr>,
                               <expr><name><name pos:line="86" pos:column="32">Environment</name><op:operator pos:line="86" pos:column="43">.</op:operator><name pos:line="86" pos:column="44">CurrentDirectory</name></name><op:operator pos:line="86" pos:column="60">+</op:operator><lit:literal type="string" pos:line="86" pos:column="61">@"\mappingTest\Sample.h.1.xml"</lit:literal></expr>,
                           }</block></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="89" pos:column="13">var</name></type> <name pos:line="89" pos:column="17">map</name> <init pos:line="89" pos:column="21">= <expr><op:operator pos:line="89" pos:column="23">new</op:operator> <call><name pos:line="89" pos:column="27">SrcMLFileNameMapping</name><argument_list pos:line="89" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="89" pos:column="48">"mappingTest"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="90" pos:column="13">var</name></type> <name pos:line="90" pos:column="17">worker</name> <init pos:line="90" pos:column="24">= <expr><op:operator pos:line="90" pos:column="26">new</op:operator> <call><name pos:line="90" pos:column="30">Thread</name><argument_list pos:line="90" pos:column="36">(<argument><expr><lambda><parameter_list pos:line="90" pos:column="37">()</parameter_list> <op:operator pos:line="90" pos:column="40">=&gt;</op:operator> <call><name pos:line="90" pos:column="43">ConcurrentWorker</name><argument_list pos:line="90" pos:column="59">(<argument><expr><name pos:line="90" pos:column="60">map</name></expr></argument>, <argument><expr><name pos:line="90" pos:column="65">sourceFiles2</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="91" pos:column="13">worker</name><op:operator pos:line="91" pos:column="19">.</op:operator><name pos:line="91" pos:column="20">Start</name></name><argument_list pos:line="91" pos:column="25">()</argument_list></call></expr>;</expr_stmt>
            <foreach pos:line="92" pos:column="13">foreach(<init><decl><type><name pos:line="92" pos:column="21">var</name></type> <name pos:line="92" pos:column="25">file</name> <range pos:line="92" pos:column="30">in <expr><name pos:line="92" pos:column="33">sourceFiles1</name></expr></range></decl></init>) <block pos:line="92" pos:column="47">{
                <expr_stmt><expr><call><name><name pos:line="93" pos:column="17">map</name><op:operator pos:line="93" pos:column="20">.</op:operator><name pos:line="93" pos:column="21">GetTargetPath</name></name><argument_list pos:line="93" pos:column="34">(<argument><expr><name pos:line="93" pos:column="35">file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
            <expr_stmt><expr><call><name><name pos:line="95" pos:column="13">worker</name><op:operator pos:line="95" pos:column="19">.</op:operator><name pos:line="95" pos:column="20">Join</name></name><argument_list pos:line="95" pos:column="24">(<argument><expr><lit:literal type="number" pos:line="95" pos:column="25">5000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="96" pos:column="13">map</name><op:operator pos:line="96" pos:column="16">.</op:operator><name pos:line="96" pos:column="17">SaveMapping</name></name><argument_list pos:line="96" pos:column="28">()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="98" pos:column="13">var</name></type> <name pos:line="98" pos:column="17">obsSourceFiles</name> <init pos:line="98" pos:column="32">= <expr><op:operator pos:line="98" pos:column="34">new</op:operator> <call><name><name pos:line="98" pos:column="38">HashSet</name><argument_list pos:line="98" pos:column="45">&lt;<argument><name pos:line="98" pos:column="46">string</name></argument>&gt;</argument_list></name><argument_list pos:line="98" pos:column="53">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="99" pos:column="13">var</name></type> <name pos:line="99" pos:column="17">obsXmlFiles</name> <init pos:line="99" pos:column="29">= <expr><op:operator pos:line="99" pos:column="31">new</op:operator> <call><name><name pos:line="99" pos:column="35">HashSet</name><argument_list pos:line="99" pos:column="42">&lt;<argument><name pos:line="99" pos:column="43">string</name></argument>&gt;</argument_list></name><argument_list pos:line="99" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="100" pos:column="13">foreach(<init><decl><type><name pos:line="100" pos:column="21">var</name></type> <name pos:line="100" pos:column="25">entry</name> <range pos:line="100" pos:column="31">in <expr><call><name><name pos:line="100" pos:column="34">File</name><op:operator pos:line="100" pos:column="38">.</op:operator><name pos:line="100" pos:column="39">ReadAllLines</name></name><argument_list pos:line="100" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="100" pos:column="52">"mappingTest\\mapping.txt"</lit:literal></expr></argument>)</argument_list></call></expr></range></decl></init>) <block pos:line="100" pos:column="81">{
                <decl_stmt><decl><type><name pos:line="101" pos:column="17">var</name></type> <name pos:line="101" pos:column="21">fields</name> <init pos:line="101" pos:column="28">= <expr><call><name><name pos:line="101" pos:column="30">entry</name><op:operator pos:line="101" pos:column="35">.</op:operator><name pos:line="101" pos:column="36">Split</name></name><argument_list pos:line="101" pos:column="41">(<argument><expr><lit:literal type="char" pos:line="101" pos:column="42">'|'</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="102" pos:column="17">obsSourceFiles</name><op:operator pos:line="102" pos:column="31">.</op:operator><name pos:line="102" pos:column="32">Add</name></name><argument_list pos:line="102" pos:column="35">(<argument><expr><name><name pos:line="102" pos:column="36">fields</name><index pos:line="102" pos:column="42">[<expr><lit:literal type="number" pos:line="102" pos:column="43">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="103" pos:column="17">obsXmlFiles</name><op:operator pos:line="103" pos:column="28">.</op:operator><name pos:line="103" pos:column="29">Add</name></name><argument_list pos:line="103" pos:column="32">(<argument><expr><name><name pos:line="103" pos:column="33">fields</name><index pos:line="103" pos:column="39">[<expr><lit:literal type="number" pos:line="103" pos:column="40">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
            <decl_stmt><decl><type><name pos:line="105" pos:column="13">var</name></type> <name pos:line="105" pos:column="17">sourceFiles</name> <init pos:line="105" pos:column="29">= <expr><call><name><name pos:line="105" pos:column="31">sourceFiles1</name><op:operator pos:line="105" pos:column="43">.</op:operator><name pos:line="105" pos:column="44">Union</name></name><argument_list pos:line="105" pos:column="49">(<argument><expr><name pos:line="105" pos:column="50">sourceFiles2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="106" pos:column="13">Assert</name><op:operator pos:line="106" pos:column="19">.</op:operator><name pos:line="106" pos:column="20">AreEqual</name></name><argument_list pos:line="106" pos:column="28">(<argument><expr><call><name><name pos:line="106" pos:column="29">sourceFiles</name><op:operator pos:line="106" pos:column="40">.</op:operator><name pos:line="106" pos:column="41">Count</name></name><argument_list pos:line="106" pos:column="46">()</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="106" pos:column="50">obsSourceFiles</name><op:operator pos:line="106" pos:column="64">.</op:operator><name pos:line="106" pos:column="65">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="107" pos:column="13">Assert</name><op:operator pos:line="107" pos:column="19">.</op:operator><name pos:line="107" pos:column="20">AreEqual</name></name><argument_list pos:line="107" pos:column="28">(<argument><expr><call><name><name pos:line="107" pos:column="29">xmlFiles</name><op:operator pos:line="107" pos:column="37">.</op:operator><name pos:line="107" pos:column="38">Count</name></name><argument_list pos:line="107" pos:column="43">()</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="107" pos:column="47">obsXmlFiles</name><op:operator pos:line="107" pos:column="58">.</op:operator><name pos:line="107" pos:column="59">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <foreach pos:line="108" pos:column="13">foreach(<init><decl><type><name pos:line="108" pos:column="21">var</name></type> <name pos:line="108" pos:column="25">file</name> <range pos:line="108" pos:column="30">in <expr><name pos:line="108" pos:column="33">obsSourceFiles</name></expr></range></decl></init>) <block pos:line="108" pos:column="49">{
                <expr_stmt><expr><call><name><name pos:line="109" pos:column="17">Assert</name><op:operator pos:line="109" pos:column="23">.</op:operator><name pos:line="109" pos:column="24">IsTrue</name></name><argument_list pos:line="109" pos:column="30">(<argument><expr><call><name><name pos:line="109" pos:column="31">sourceFiles</name><op:operator pos:line="109" pos:column="42">.</op:operator><name pos:line="109" pos:column="43">Contains</name></name><argument_list pos:line="109" pos:column="51">(<argument><expr><name pos:line="109" pos:column="52">file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
            <foreach pos:line="111" pos:column="13">foreach(<init><decl><type><name pos:line="111" pos:column="21">var</name></type> <name pos:line="111" pos:column="25">file</name> <range pos:line="111" pos:column="30">in <expr><name pos:line="111" pos:column="33">obsXmlFiles</name></expr></range></decl></init>) <block pos:line="111" pos:column="46">{
                <expr_stmt><expr><call><name><name pos:line="112" pos:column="17">Assert</name><op:operator pos:line="112" pos:column="23">.</op:operator><name pos:line="112" pos:column="24">IsTrue</name></name><argument_list pos:line="112" pos:column="30">(<argument><expr><call><name><name pos:line="112" pos:column="31">xmlFiles</name><op:operator pos:line="112" pos:column="39">.</op:operator><name pos:line="112" pos:column="40">Contains</name></name><argument_list pos:line="112" pos:column="48">(<argument><expr><name pos:line="112" pos:column="49">file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>

        <function><type><attribute pos:line="116" pos:column="9">[<expr><name pos:line="116" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="117" pos:column="9">public</specifier> <name pos:line="117" pos:column="16">void</name></type> <name pos:line="117" pos:column="21">TestConstructor_CurrentDirectory</name><parameter_list pos:line="117" pos:column="53">()</parameter_list> <block pos:line="117" pos:column="56">{
            <expr_stmt><expr><call><name><name pos:line="118" pos:column="13">Directory</name><op:operator pos:line="118" pos:column="22">.</op:operator><name pos:line="118" pos:column="23">SetCurrentDirectory</name></name><argument_list pos:line="118" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="118" pos:column="43">"mappingTest"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="119" pos:column="13">var</name></type> <name pos:line="119" pos:column="17">map</name> <init pos:line="119" pos:column="21">= <expr><op:operator pos:line="119" pos:column="23">new</op:operator> <call><name pos:line="119" pos:column="27">SrcMLFileNameMapping</name><argument_list pos:line="119" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="119" pos:column="48">"."</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="120" pos:column="13">var</name></type> <name pos:line="120" pos:column="17">xmlPath</name> <init pos:line="120" pos:column="25">= <expr><call><name><name pos:line="120" pos:column="27">map</name><op:operator pos:line="120" pos:column="30">.</op:operator><name pos:line="120" pos:column="31">GetTargetPath</name></name><argument_list pos:line="120" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="120" pos:column="45">"Foo.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="121" pos:column="13">Assert</name><op:operator pos:line="121" pos:column="19">.</op:operator><name pos:line="121" pos:column="20">That</name></name><argument_list pos:line="121" pos:column="24">(<argument><expr><call><name><name pos:line="121" pos:column="25">xmlPath</name><op:operator pos:line="121" pos:column="32">.</op:operator><name pos:line="121" pos:column="33">StartsWith</name></name><argument_list pos:line="121" pos:column="43">(<argument><expr><name><name pos:line="121" pos:column="44">Environment</name><op:operator pos:line="121" pos:column="55">.</op:operator><name pos:line="121" pos:column="56">CurrentDirectory</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="124" pos:column="9">[<expr><name pos:line="124" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="125" pos:column="9">public</specifier> <name pos:line="125" pos:column="16">void</name></type> <name pos:line="125" pos:column="21">TestDispose</name><parameter_list pos:line="125" pos:column="32">()</parameter_list> <block pos:line="125" pos:column="35">{
            <expr_stmt><expr><call><name><name pos:line="126" pos:column="13">Assert</name><op:operator pos:line="126" pos:column="19">.</op:operator><name pos:line="126" pos:column="20">IsTrue</name></name><argument_list pos:line="126" pos:column="26">(<argument><expr><op:operator pos:line="126" pos:column="27">!</op:operator><call><name><name pos:line="126" pos:column="28">File</name><op:operator pos:line="126" pos:column="32">.</op:operator><name pos:line="126" pos:column="33">Exists</name></name><argument_list pos:line="126" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="126" pos:column="40">"mappingTest\\mapping.txt"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <using pos:line="127" pos:column="13">using(<decl><type><name pos:line="127" pos:column="19">var</name></type> <name pos:line="127" pos:column="23">map</name> <init pos:line="127" pos:column="27">= <expr><op:operator pos:line="127" pos:column="29">new</op:operator> <call><name pos:line="127" pos:column="33">SrcMLFileNameMapping</name><argument_list pos:line="127" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="127" pos:column="54">"mappingTest"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>) <block pos:line="127" pos:column="70">{
                <expr_stmt><expr><call><name><name pos:line="128" pos:column="17">map</name><op:operator pos:line="128" pos:column="20">.</op:operator><name pos:line="128" pos:column="21">GetTargetPath</name></name><argument_list pos:line="128" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="128" pos:column="35">@"foo\bar\Example.cs"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="129" pos:column="17">map</name><op:operator pos:line="129" pos:column="20">.</op:operator><name pos:line="129" pos:column="21">GetTargetPath</name></name><argument_list pos:line="129" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="129" pos:column="35">@"foo\bar\Data.cs"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="130" pos:column="17">map</name><op:operator pos:line="130" pos:column="20">.</op:operator><name pos:line="130" pos:column="21">GetTargetPath</name></name><argument_list pos:line="130" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="130" pos:column="35">@"foo\bar\baz\Example.cs"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></using>
            <expr_stmt><expr><call><name><name pos:line="132" pos:column="13">Assert</name><op:operator pos:line="132" pos:column="19">.</op:operator><name pos:line="132" pos:column="20">IsTrue</name></name><argument_list pos:line="132" pos:column="26">(<argument><expr><call><name><name pos:line="132" pos:column="27">File</name><op:operator pos:line="132" pos:column="31">.</op:operator><name pos:line="132" pos:column="32">Exists</name></name><argument_list pos:line="132" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="132" pos:column="39">"mappingTest\\mapping.txt"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="135" pos:column="9">[<expr><name pos:line="135" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="136" pos:column="9">public</specifier> <name pos:line="136" pos:column="16">void</name></type> <name pos:line="136" pos:column="21">TestSrcMLWithNoMappingFile</name><parameter_list pos:line="136" pos:column="47">()</parameter_list> <block pos:line="136" pos:column="50">{
            <expr_stmt><expr><call><name><name pos:line="137" pos:column="13">File</name><op:operator pos:line="137" pos:column="17">.</op:operator><name pos:line="137" pos:column="18">Copy</name></name><argument_list pos:line="137" pos:column="22">(<argument><expr><lit:literal type="string" pos:line="137" pos:column="23">@"..\..\TestInputs\function_def.xml"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="137" pos:column="61">@"mappingTest\function_def.xml"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="137" pos:column="94">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="138" pos:column="13">File</name><op:operator pos:line="138" pos:column="17">.</op:operator><name pos:line="138" pos:column="18">Copy</name></name><argument_list pos:line="138" pos:column="22">(<argument><expr><lit:literal type="string" pos:line="138" pos:column="23">@"..\..\TestInputs\method_def.xml"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="138" pos:column="59">@"mappingTest\method_def.xml"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="138" pos:column="90">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="139" pos:column="13">File</name><op:operator pos:line="139" pos:column="17">.</op:operator><name pos:line="139" pos:column="18">Copy</name></name><argument_list pos:line="139" pos:column="22">(<argument><expr><lit:literal type="string" pos:line="139" pos:column="23">@"..\..\TestInputs\nested_scopes.xml"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="139" pos:column="62">@"mappingTest\nested_scopes.xml"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="139" pos:column="96">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="141" pos:column="13">var</name></type> <name pos:line="141" pos:column="17">map</name> <init pos:line="141" pos:column="21">= <expr><op:operator pos:line="141" pos:column="23">new</op:operator> <call><name pos:line="141" pos:column="27">SrcMLFileNameMapping</name><argument_list pos:line="141" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="141" pos:column="48">"mappingTest"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="142" pos:column="13">Assert</name><op:operator pos:line="142" pos:column="19">.</op:operator><name pos:line="142" pos:column="20">AreEqual</name></name><argument_list pos:line="142" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="142" pos:column="29">@"C:\Workspaces\SrcML.NET\TestInputs\function_def.cpp"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="142" pos:column="85">map</name><op:operator pos:line="142" pos:column="88">.</op:operator><name pos:line="142" pos:column="89">GetSourcePath</name></name><argument_list pos:line="142" pos:column="102">(<argument><expr><lit:literal type="string" pos:line="142" pos:column="103">@"function_def.xml"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="143" pos:column="13">Assert</name><op:operator pos:line="143" pos:column="19">.</op:operator><name pos:line="143" pos:column="20">AreEqual</name></name><argument_list pos:line="143" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="143" pos:column="29">@"C:\Workspaces\SrcML.NET\TestInputs\method_def.cpp"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="143" pos:column="83">map</name><op:operator pos:line="143" pos:column="86">.</op:operator><name pos:line="143" pos:column="87">GetSourcePath</name></name><argument_list pos:line="143" pos:column="100">(<argument><expr><lit:literal type="string" pos:line="143" pos:column="101">@"method_def.xml"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="144" pos:column="13">Assert</name><op:operator pos:line="144" pos:column="19">.</op:operator><name pos:line="144" pos:column="20">AreEqual</name></name><argument_list pos:line="144" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="144" pos:column="29">@"C:\Workspaces\SrcML.NET\TestInputs\nested_scopes.c"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="144" pos:column="84">map</name><op:operator pos:line="144" pos:column="87">.</op:operator><name pos:line="144" pos:column="88">GetSourcePath</name></name><argument_list pos:line="144" pos:column="101">(<argument><expr><lit:literal type="string" pos:line="144" pos:column="102">@"nested_scopes.xml"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="147" pos:column="9">[<expr><name pos:line="147" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="148" pos:column="9">public</specifier> <name pos:line="148" pos:column="16">void</name></type> <name pos:line="148" pos:column="21">TestFolderWithXmlNoMappingFile_NonSrcMLXml</name><parameter_list pos:line="148" pos:column="63">()</parameter_list> <block pos:line="148" pos:column="66">{
            <expr_stmt><expr><call><name><name pos:line="149" pos:column="13">File</name><op:operator pos:line="149" pos:column="17">.</op:operator><name pos:line="149" pos:column="18">Copy</name></name><argument_list pos:line="149" pos:column="22">(<argument><expr><lit:literal type="string" pos:line="149" pos:column="23">@"..\..\TestInputs\function_def.xml"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="149" pos:column="61">@"mappingTest\function_def.xml"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="149" pos:column="94">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="150" pos:column="13">File</name><op:operator pos:line="150" pos:column="17">.</op:operator><name pos:line="150" pos:column="18">Copy</name></name><argument_list pos:line="150" pos:column="22">(<argument><expr><lit:literal type="string" pos:line="150" pos:column="23">@"..\..\TestInputs\method_def.xml"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="150" pos:column="59">@"mappingTest\method_def.xml"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="150" pos:column="90">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="151" pos:column="13">File</name><op:operator pos:line="151" pos:column="17">.</op:operator><name pos:line="151" pos:column="18">Copy</name></name><argument_list pos:line="151" pos:column="22">(<argument><expr><lit:literal type="string" pos:line="151" pos:column="23">@"..\..\TestInputs\nested_scopes.xml"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="151" pos:column="62">@"mappingTest\nested_scopes.xml"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="151" pos:column="96">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="152" pos:column="13">File</name><op:operator pos:line="152" pos:column="17">.</op:operator><name pos:line="152" pos:column="18">Copy</name></name><argument_list pos:line="152" pos:column="22">(<argument><expr><lit:literal type="string" pos:line="152" pos:column="23">@"..\..\TestInputs\NotSrcML.xml"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="152" pos:column="57">@"mappingTest\NotSrcML.xml"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="152" pos:column="86">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="154" pos:column="13">var</name></type> <name pos:line="154" pos:column="17">map</name> <init pos:line="154" pos:column="21">= <expr><op:operator pos:line="154" pos:column="23">new</op:operator> <call><name pos:line="154" pos:column="27">SrcMLFileNameMapping</name><argument_list pos:line="154" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="154" pos:column="48">"mappingTest"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="155" pos:column="13">Assert</name><op:operator pos:line="155" pos:column="19">.</op:operator><name pos:line="155" pos:column="20">AreEqual</name></name><argument_list pos:line="155" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="155" pos:column="29">@"C:\Workspaces\SrcML.NET\TestInputs\function_def.cpp"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="155" pos:column="85">map</name><op:operator pos:line="155" pos:column="88">.</op:operator><name pos:line="155" pos:column="89">GetSourcePath</name></name><argument_list pos:line="155" pos:column="102">(<argument><expr><lit:literal type="string" pos:line="155" pos:column="103">@"function_def.xml"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="156" pos:column="13">Assert</name><op:operator pos:line="156" pos:column="19">.</op:operator><name pos:line="156" pos:column="20">AreEqual</name></name><argument_list pos:line="156" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="156" pos:column="29">@"C:\Workspaces\SrcML.NET\TestInputs\method_def.cpp"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="156" pos:column="83">map</name><op:operator pos:line="156" pos:column="86">.</op:operator><name pos:line="156" pos:column="87">GetSourcePath</name></name><argument_list pos:line="156" pos:column="100">(<argument><expr><lit:literal type="string" pos:line="156" pos:column="101">@"method_def.xml"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="157" pos:column="13">Assert</name><op:operator pos:line="157" pos:column="19">.</op:operator><name pos:line="157" pos:column="20">AreEqual</name></name><argument_list pos:line="157" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="157" pos:column="29">@"C:\Workspaces\SrcML.NET\TestInputs\nested_scopes.c"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="157" pos:column="84">map</name><op:operator pos:line="157" pos:column="87">.</op:operator><name pos:line="157" pos:column="88">GetSourcePath</name></name><argument_list pos:line="157" pos:column="101">(<argument><expr><lit:literal type="string" pos:line="157" pos:column="102">@"nested_scopes.xml"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="160" pos:column="9">[<expr><name pos:line="160" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="161" pos:column="9">public</specifier> <name pos:line="161" pos:column="16">void</name></type> <name pos:line="161" pos:column="21">TestGetSourcePath_FullPath</name><parameter_list pos:line="161" pos:column="47">()</parameter_list> <block pos:line="161" pos:column="50">{
            <decl_stmt><decl><type><name pos:line="162" pos:column="13">string</name></type> <name pos:line="162" pos:column="20">fileContents</name> <init pos:line="162" pos:column="33">= <expr><lit:literal type="string" pos:line="162" pos:column="35">@"C:\Foo\Bar\test.cs|C:\srcmlArchive\test.cs.1.xml
C:\Foo\Bar\Example.cs|C:\srcmlArchive\Example.cs.1.xml
C:\Foo\Bar\xyzzy\Example.cs|C:\srcmlArchive\Example.cs.2.xml"</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="165" pos:column="13">File</name><op:operator pos:line="165" pos:column="17">.</op:operator><name pos:line="165" pos:column="18">WriteAllText</name></name><argument_list pos:line="165" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="165" pos:column="31">@"mappingTest\mapping.txt"</lit:literal></expr></argument>, <argument><expr><name pos:line="165" pos:column="59">fileContents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="167" pos:column="13">var</name></type> <name pos:line="167" pos:column="17">map</name> <init pos:line="167" pos:column="21">= <expr><op:operator pos:line="167" pos:column="23">new</op:operator> <call><name pos:line="167" pos:column="27">SrcMLFileNameMapping</name><argument_list pos:line="167" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="167" pos:column="48">"mappingTest"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="168" pos:column="13">var</name></type> <name pos:line="168" pos:column="17">sourcePath</name> <init pos:line="168" pos:column="28">= <expr><call><name><name pos:line="168" pos:column="30">map</name><op:operator pos:line="168" pos:column="33">.</op:operator><name pos:line="168" pos:column="34">GetSourcePath</name></name><argument_list pos:line="168" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="168" pos:column="48">@"C:\srcmlArchive\Example.cs.1.xml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="169" pos:column="13">Assert</name><op:operator pos:line="169" pos:column="19">.</op:operator><name pos:line="169" pos:column="20">AreEqual</name></name><argument_list pos:line="169" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="169" pos:column="29">@"C:\Foo\Bar\Example.cs"</lit:literal></expr></argument>, <argument><expr><name pos:line="169" pos:column="55">sourcePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="172" pos:column="9">[<expr><name pos:line="172" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="173" pos:column="9">public</specifier> <name pos:line="173" pos:column="16">void</name></type> <name pos:line="173" pos:column="21">TestGetSourcePath_JustFileName</name><parameter_list pos:line="173" pos:column="51">()</parameter_list> <block pos:line="173" pos:column="54">{
            <decl_stmt><decl><type><name pos:line="174" pos:column="13">string</name></type> <name pos:line="174" pos:column="20">fileContents</name> <init pos:line="174" pos:column="33">= <expr><lit:literal type="string" pos:line="174" pos:column="35">@"C:\Foo\Bar\test.cs|{0}\mappingTest\test.cs.1.xml
C:\Foo\Bar\Example.cs|{0}\mappingTest\Example.cs.1.xml
C:\Foo\Bar\xyzzy\Example.cs|{0}\mappingTest\Example.cs.2.xml"</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="177" pos:column="13">File</name><op:operator pos:line="177" pos:column="17">.</op:operator><name pos:line="177" pos:column="18">WriteAllText</name></name><argument_list pos:line="177" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="177" pos:column="31">@"mappingTest\mapping.txt"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="177" pos:column="59">string</name><op:operator pos:line="177" pos:column="65">.</op:operator><name pos:line="177" pos:column="66">Format</name></name><argument_list pos:line="177" pos:column="72">(<argument><expr><name pos:line="177" pos:column="73">fileContents</name></expr></argument>, <argument><expr><name><name pos:line="177" pos:column="87">Environment</name><op:operator pos:line="177" pos:column="98">.</op:operator><name pos:line="177" pos:column="99">CurrentDirectory</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="179" pos:column="13">var</name></type> <name pos:line="179" pos:column="17">map</name> <init pos:line="179" pos:column="21">= <expr><op:operator pos:line="179" pos:column="23">new</op:operator> <call><name pos:line="179" pos:column="27">SrcMLFileNameMapping</name><argument_list pos:line="179" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="179" pos:column="48">"mappingTest"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="180" pos:column="13">var</name></type> <name pos:line="180" pos:column="17">sourcePath</name> <init pos:line="180" pos:column="28">= <expr><call><name><name pos:line="180" pos:column="30">map</name><op:operator pos:line="180" pos:column="33">.</op:operator><name pos:line="180" pos:column="34">GetSourcePath</name></name><argument_list pos:line="180" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="180" pos:column="48">@"Example.cs.2.xml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="181" pos:column="13">Assert</name><op:operator pos:line="181" pos:column="19">.</op:operator><name pos:line="181" pos:column="20">AreEqual</name></name><argument_list pos:line="181" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="181" pos:column="29">@"C:\Foo\Bar\xyzzy\Example.cs"</lit:literal></expr></argument>, <argument><expr><name pos:line="181" pos:column="61">sourcePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="184" pos:column="9">[<expr><name pos:line="184" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="185" pos:column="9">public</specifier> <name pos:line="185" pos:column="16">void</name></type> <name pos:line="185" pos:column="21">TestGetXmlPath_CorrectDir</name><parameter_list pos:line="185" pos:column="46">()</parameter_list> <block pos:line="185" pos:column="49">{
            <decl_stmt><decl><type><name pos:line="186" pos:column="13">var</name></type> <name pos:line="186" pos:column="17">map</name> <init pos:line="186" pos:column="21">= <expr><op:operator pos:line="186" pos:column="23">new</op:operator> <call><name pos:line="186" pos:column="27">SrcMLFileNameMapping</name><argument_list pos:line="186" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="186" pos:column="48">"mappingTest"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="187" pos:column="13">var</name></type> <name pos:line="187" pos:column="17">xmlPath</name> <init pos:line="187" pos:column="25">= <expr><call><name><name pos:line="187" pos:column="27">map</name><op:operator pos:line="187" pos:column="30">.</op:operator><name pos:line="187" pos:column="31">GetTargetPath</name></name><argument_list pos:line="187" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="187" pos:column="45">"Example.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="188" pos:column="13">Assert</name><op:operator pos:line="188" pos:column="19">.</op:operator><name pos:line="188" pos:column="20">That</name></name><argument_list pos:line="188" pos:column="24">(<argument><expr><call><name><name pos:line="188" pos:column="25">xmlPath</name><op:operator pos:line="188" pos:column="32">.</op:operator><name pos:line="188" pos:column="33">StartsWith</name></name><argument_list pos:line="188" pos:column="43">(<argument><expr><name><name pos:line="188" pos:column="44">map</name><op:operator pos:line="188" pos:column="47">.</op:operator><name pos:line="188" pos:column="48">TargetDirectory</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="191" pos:column="9">[<expr><name pos:line="191" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="192" pos:column="9">public</specifier> <name pos:line="192" pos:column="16">void</name></type> <name pos:line="192" pos:column="21">TestGetXmlPath_DifferentCase</name><parameter_list pos:line="192" pos:column="49">()</parameter_list> <block pos:line="192" pos:column="52">{
            <decl_stmt><decl><type><name pos:line="193" pos:column="13">var</name></type> <name pos:line="193" pos:column="17">map</name> <init pos:line="193" pos:column="21">= <expr><op:operator pos:line="193" pos:column="23">new</op:operator> <call><name pos:line="193" pos:column="27">SrcMLFileNameMapping</name><argument_list pos:line="193" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="193" pos:column="48">"mappingTest"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="194" pos:column="13">var</name></type> <name pos:line="194" pos:column="17">xmlPath1</name> <init pos:line="194" pos:column="26">= <expr><call><name><name pos:line="194" pos:column="28">map</name><op:operator pos:line="194" pos:column="31">.</op:operator><name pos:line="194" pos:column="32">GetTargetPath</name></name><argument_list pos:line="194" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="194" pos:column="46">"foo\\Example.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="195" pos:column="13">var</name></type> <name pos:line="195" pos:column="17">xmlPath2</name> <init pos:line="195" pos:column="26">= <expr><call><name><name pos:line="195" pos:column="28">map</name><op:operator pos:line="195" pos:column="31">.</op:operator><name pos:line="195" pos:column="32">GetTargetPath</name></name><argument_list pos:line="195" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="195" pos:column="46">"bar\\example.CPP"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="196" pos:column="13">//If the file system is case insensitive, the paths should be Example.cpp.1.xml and example.CPP.2.xml</comment>
            <comment type="line" pos:line="197" pos:column="13">//If the file system is case sensitive, the paths should be Example.cpp.1.xml and example.CPP.1.xml</comment>
            <expr_stmt><expr><call><name><name pos:line="198" pos:column="13">Assert</name><op:operator pos:line="198" pos:column="19">.</op:operator><name pos:line="198" pos:column="20">IsTrue</name></name><argument_list pos:line="198" pos:column="26">(<argument><expr><call><name><name pos:line="198" pos:column="27">string</name><op:operator pos:line="198" pos:column="33">.</op:operator><name pos:line="198" pos:column="34">Compare</name></name><argument_list pos:line="198" pos:column="41">(<argument><expr><name pos:line="198" pos:column="42">xmlPath1</name></expr></argument>, <argument><expr><name pos:line="198" pos:column="52">xmlPath2</name></expr></argument>, <argument><expr><name><name pos:line="198" pos:column="62">StringComparison</name><op:operator pos:line="198" pos:column="78">.</op:operator><name pos:line="198" pos:column="79">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="198" pos:column="98">!=</op:operator> <lit:literal type="number" pos:line="198" pos:column="101">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="201" pos:column="9">[<expr><name pos:line="201" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="202" pos:column="9">public</specifier> <name pos:line="202" pos:column="16">void</name></type> <name pos:line="202" pos:column="21">TestGetXmlPath_DuplicatesInMapFile</name><parameter_list pos:line="202" pos:column="55">()</parameter_list> <block pos:line="202" pos:column="58">{
            <decl_stmt><decl><type><name pos:line="203" pos:column="13">string</name></type> <name pos:line="203" pos:column="20">fileContents</name> <init pos:line="203" pos:column="33">= <expr><lit:literal type="string" pos:line="203" pos:column="35">@"C:\Foo\Bar\test.cs|C:\srcmlArchive\test.cs.1.xml
C:\Foo\Bar\Example.cs|C:\srcmlArchive\Example.cs.1.xml
C:\Foo\Bar\xyzzy\Example.cs|C:\srcmlArchive\Example.cs.2.xml"</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="206" pos:column="13">File</name><op:operator pos:line="206" pos:column="17">.</op:operator><name pos:line="206" pos:column="18">WriteAllText</name></name><argument_list pos:line="206" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="206" pos:column="31">@"mappingTest\mapping.txt"</lit:literal></expr></argument>, <argument><expr><name pos:line="206" pos:column="59">fileContents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="207" pos:column="13">var</name></type> <name pos:line="207" pos:column="17">map</name> <init pos:line="207" pos:column="21">= <expr><op:operator pos:line="207" pos:column="23">new</op:operator> <call><name pos:line="207" pos:column="27">SrcMLFileNameMapping</name><argument_list pos:line="207" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="207" pos:column="48">"mappingTest"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="208" pos:column="13">var</name></type> <name pos:line="208" pos:column="17">thirdName</name> <init pos:line="208" pos:column="27">= <expr><call><name><name pos:line="208" pos:column="29">map</name><op:operator pos:line="208" pos:column="32">.</op:operator><name pos:line="208" pos:column="33">GetTargetPath</name></name><argument_list pos:line="208" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="208" pos:column="47">@"C:\OtherDir\Example.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="209" pos:column="13">Assert</name><op:operator pos:line="209" pos:column="19">.</op:operator><name pos:line="209" pos:column="20">AreEqual</name></name><argument_list pos:line="209" pos:column="28">(<argument><expr><call><name><name pos:line="209" pos:column="29">Path</name><op:operator pos:line="209" pos:column="33">.</op:operator><name pos:line="209" pos:column="34">Combine</name></name><argument_list pos:line="209" pos:column="41">(<argument><expr><name><name pos:line="209" pos:column="42">Environment</name><op:operator pos:line="209" pos:column="53">.</op:operator><name pos:line="209" pos:column="54">CurrentDirectory</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="209" pos:column="72">@"mappingTest\Example.cs.3.xml"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="209" pos:column="106">thirdName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="212" pos:column="9">[<expr><name pos:line="212" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="213" pos:column="9">public</specifier> <name pos:line="213" pos:column="16">void</name></type> <name pos:line="213" pos:column="21">TestGetXmlPath_NonExistentDir</name><parameter_list pos:line="213" pos:column="50">()</parameter_list> <block pos:line="213" pos:column="53">{
            <expr_stmt><expr><call><name><name pos:line="214" pos:column="13">Assert</name><op:operator pos:line="214" pos:column="19">.</op:operator><name pos:line="214" pos:column="20">That</name></name><argument_list pos:line="214" pos:column="24">(<argument><expr><op:operator pos:line="214" pos:column="25">!</op:operator><call><name><name pos:line="214" pos:column="26">File</name><op:operator pos:line="214" pos:column="30">.</op:operator><name pos:line="214" pos:column="31">Exists</name></name><argument_list pos:line="214" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="214" pos:column="38">"MissingDir"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="215" pos:column="13">var</name></type> <name pos:line="215" pos:column="17">map</name> <init pos:line="215" pos:column="21">= <expr><op:operator pos:line="215" pos:column="23">new</op:operator> <call><name pos:line="215" pos:column="27">SrcMLFileNameMapping</name><argument_list pos:line="215" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="215" pos:column="48">"MissingDir"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="216" pos:column="13">var</name></type> <name pos:line="216" pos:column="17">xmlPath</name> <init pos:line="216" pos:column="25">= <expr><call><name><name pos:line="216" pos:column="27">map</name><op:operator pos:line="216" pos:column="30">.</op:operator><name pos:line="216" pos:column="31">GetTargetPath</name></name><argument_list pos:line="216" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="216" pos:column="45">"Example.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="217" pos:column="13">Assert</name><op:operator pos:line="217" pos:column="19">.</op:operator><name pos:line="217" pos:column="20">That</name></name><argument_list pos:line="217" pos:column="24">(<argument><expr><call><name><name pos:line="217" pos:column="25">xmlPath</name><op:operator pos:line="217" pos:column="32">.</op:operator><name pos:line="217" pos:column="33">StartsWith</name></name><argument_list pos:line="217" pos:column="43">(<argument><expr><name><name pos:line="217" pos:column="44">map</name><op:operator pos:line="217" pos:column="47">.</op:operator><name pos:line="217" pos:column="48">TargetDirectory</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="220" pos:column="9">[<expr><name pos:line="220" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="221" pos:column="9">public</specifier> <name pos:line="221" pos:column="16">void</name></type> <name pos:line="221" pos:column="21">TestGetXmlPath_Repeated</name><parameter_list pos:line="221" pos:column="44">()</parameter_list> <block pos:line="221" pos:column="47">{
            <decl_stmt><decl><type><name pos:line="222" pos:column="13">var</name></type> <name pos:line="222" pos:column="17">map</name> <init pos:line="222" pos:column="21">= <expr><op:operator pos:line="222" pos:column="23">new</op:operator> <call><name pos:line="222" pos:column="27">SrcMLFileNameMapping</name><argument_list pos:line="222" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="222" pos:column="48">"mappingTest"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="223" pos:column="13">var</name></type> <name pos:line="223" pos:column="17">xmlPath1</name> <init pos:line="223" pos:column="26">= <expr><call><name><name pos:line="223" pos:column="28">map</name><op:operator pos:line="223" pos:column="31">.</op:operator><name pos:line="223" pos:column="32">GetTargetPath</name></name><argument_list pos:line="223" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="223" pos:column="46">"Example.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="224" pos:column="13">var</name></type> <name pos:line="224" pos:column="17">xmlPath2</name> <init pos:line="224" pos:column="26">= <expr><call><name><name pos:line="224" pos:column="28">map</name><op:operator pos:line="224" pos:column="31">.</op:operator><name pos:line="224" pos:column="32">GetTargetPath</name></name><argument_list pos:line="224" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="224" pos:column="46">"Example.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="225" pos:column="13">Assert</name><op:operator pos:line="225" pos:column="19">.</op:operator><name pos:line="225" pos:column="20">AreEqual</name></name><argument_list pos:line="225" pos:column="28">(<argument><expr><name pos:line="225" pos:column="29">xmlPath1</name></expr></argument>, <argument><expr><name pos:line="225" pos:column="39">xmlPath2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="228" pos:column="9">[<expr><name pos:line="228" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="229" pos:column="9">public</specifier> <name pos:line="229" pos:column="16">void</name></type> <name pos:line="229" pos:column="21">TestGetXmlPath_SameName</name><parameter_list pos:line="229" pos:column="44">()</parameter_list> <block pos:line="229" pos:column="47">{
            <decl_stmt><decl><type><name pos:line="230" pos:column="13">var</name></type> <name pos:line="230" pos:column="17">map</name> <init pos:line="230" pos:column="21">= <expr><op:operator pos:line="230" pos:column="23">new</op:operator> <call><name pos:line="230" pos:column="27">SrcMLFileNameMapping</name><argument_list pos:line="230" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="230" pos:column="48">"mappingTest"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="231" pos:column="13">var</name></type> <name pos:line="231" pos:column="17">xmlPath1</name> <init pos:line="231" pos:column="26">= <expr><call><name><name pos:line="231" pos:column="28">map</name><op:operator pos:line="231" pos:column="31">.</op:operator><name pos:line="231" pos:column="32">GetTargetPath</name></name><argument_list pos:line="231" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="231" pos:column="46">"Example.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="232" pos:column="13">var</name></type> <name pos:line="232" pos:column="17">xmlPath2</name> <init pos:line="232" pos:column="26">= <expr><call><name><name pos:line="232" pos:column="28">map</name><op:operator pos:line="232" pos:column="31">.</op:operator><name pos:line="232" pos:column="32">GetTargetPath</name></name><argument_list pos:line="232" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="232" pos:column="46">@"Subdir\Example.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="233" pos:column="13">Assert</name><op:operator pos:line="233" pos:column="19">.</op:operator><name pos:line="233" pos:column="20">AreNotEqual</name></name><argument_list pos:line="233" pos:column="31">(<argument><expr><name pos:line="233" pos:column="32">xmlPath1</name></expr></argument>, <argument><expr><name pos:line="233" pos:column="42">xmlPath2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="236" pos:column="9">[<expr><name pos:line="236" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="237" pos:column="9">public</specifier> <name pos:line="237" pos:column="16">void</name></type> <name pos:line="237" pos:column="21">TestMappingFile</name><parameter_list pos:line="237" pos:column="36">()</parameter_list> <block pos:line="237" pos:column="39">{
            <decl_stmt><decl><type><name pos:line="238" pos:column="13">string</name></type> <name pos:line="238" pos:column="20">fileContents</name> <init pos:line="238" pos:column="33">= <expr><lit:literal type="string" pos:line="238" pos:column="35">@"C:\Foo\Bar\test.cs|C:\srcmlArchive\test.cs.1.xml
C:\Foo\Bar\Example.cs|C:\srcmlArchive\Example.cs.1.xml
C:\Foo\Bar\xyzzy\Example.cs|C:\srcmlArchive\Example.cs.2.xml"</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="241" pos:column="13">File</name><op:operator pos:line="241" pos:column="17">.</op:operator><name pos:line="241" pos:column="18">WriteAllText</name></name><argument_list pos:line="241" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="241" pos:column="31">@"mappingTest\mapping.txt"</lit:literal></expr></argument>, <argument><expr><name pos:line="241" pos:column="59">fileContents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="242" pos:column="13">var</name></type> <name pos:line="242" pos:column="17">map</name> <init pos:line="242" pos:column="21">= <expr><op:operator pos:line="242" pos:column="23">new</op:operator> <call><name pos:line="242" pos:column="27">SrcMLFileNameMapping</name><argument_list pos:line="242" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="242" pos:column="48">"mappingTest"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="243" pos:column="13">Assert</name><op:operator pos:line="243" pos:column="19">.</op:operator><name pos:line="243" pos:column="20">AreEqual</name></name><argument_list pos:line="243" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="243" pos:column="29">@"C:\srcmlArchive\test.cs.1.xml"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="243" pos:column="63">map</name><op:operator pos:line="243" pos:column="66">.</op:operator><name pos:line="243" pos:column="67">GetTargetPath</name></name><argument_list pos:line="243" pos:column="80">(<argument><expr><lit:literal type="string" pos:line="243" pos:column="81">@"C:\Foo\Bar\test.cs"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="244" pos:column="13">Assert</name><op:operator pos:line="244" pos:column="19">.</op:operator><name pos:line="244" pos:column="20">AreEqual</name></name><argument_list pos:line="244" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="244" pos:column="29">@"C:\srcmlArchive\Example.cs.1.xml"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="244" pos:column="66">map</name><op:operator pos:line="244" pos:column="69">.</op:operator><name pos:line="244" pos:column="70">GetTargetPath</name></name><argument_list pos:line="244" pos:column="83">(<argument><expr><lit:literal type="string" pos:line="244" pos:column="84">@"C:\Foo\Bar\Example.cs"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="245" pos:column="13">Assert</name><op:operator pos:line="245" pos:column="19">.</op:operator><name pos:line="245" pos:column="20">AreEqual</name></name><argument_list pos:line="245" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="245" pos:column="29">@"C:\srcmlArchive\Example.cs.2.xml"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="245" pos:column="66">map</name><op:operator pos:line="245" pos:column="69">.</op:operator><name pos:line="245" pos:column="70">GetTargetPath</name></name><argument_list pos:line="245" pos:column="83">(<argument><expr><lit:literal type="string" pos:line="245" pos:column="84">@"C:\Foo\Bar\xyzzy\Example.cs"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="248" pos:column="9">[<expr><name pos:line="248" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="249" pos:column="9">public</specifier> <name pos:line="249" pos:column="16">void</name></type> <name pos:line="249" pos:column="21">TestRountrip</name><parameter_list pos:line="249" pos:column="33">()</parameter_list> <block pos:line="249" pos:column="36">{
            <decl_stmt><decl><type><name pos:line="250" pos:column="13">var</name></type> <name pos:line="250" pos:column="17">map</name> <init pos:line="250" pos:column="21">= <expr><op:operator pos:line="250" pos:column="23">new</op:operator> <call><name pos:line="250" pos:column="27">SrcMLFileNameMapping</name><argument_list pos:line="250" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="250" pos:column="48">"mappingTest"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="251" pos:column="13">var</name></type> <name pos:line="251" pos:column="17">xmlPath</name> <init pos:line="251" pos:column="25">= <expr><call><name><name pos:line="251" pos:column="27">map</name><op:operator pos:line="251" pos:column="30">.</op:operator><name pos:line="251" pos:column="31">GetTargetPath</name></name><argument_list pos:line="251" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="251" pos:column="45">"Foo.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="252" pos:column="13">Assert</name><op:operator pos:line="252" pos:column="19">.</op:operator><name pos:line="252" pos:column="20">AreEqual</name></name><argument_list pos:line="252" pos:column="28">(<argument><expr><call><name><name pos:line="252" pos:column="29">Path</name><op:operator pos:line="252" pos:column="33">.</op:operator><name pos:line="252" pos:column="34">GetFullPath</name></name><argument_list pos:line="252" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="252" pos:column="46">"Foo.cs"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="252" pos:column="57">map</name><op:operator pos:line="252" pos:column="60">.</op:operator><name pos:line="252" pos:column="61">GetSourcePath</name></name><argument_list pos:line="252" pos:column="74">(<argument><expr><name pos:line="252" pos:column="75">xmlPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="255" pos:column="9">[<expr><name pos:line="255" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="256" pos:column="9">public</specifier> <name pos:line="256" pos:column="16">void</name></type> <name pos:line="256" pos:column="21">TestSaveMapping</name><parameter_list pos:line="256" pos:column="36">()</parameter_list> <block pos:line="256" pos:column="39">{
            <decl_stmt><decl><type><name pos:line="257" pos:column="13">var</name></type> <name pos:line="257" pos:column="17">map</name> <init pos:line="257" pos:column="21">= <expr><op:operator pos:line="257" pos:column="23">new</op:operator> <call><name pos:line="257" pos:column="27">SrcMLFileNameMapping</name><argument_list pos:line="257" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="257" pos:column="48">"mappingTest"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="258" pos:column="13">map</name><op:operator pos:line="258" pos:column="16">.</op:operator><name pos:line="258" pos:column="17">GetTargetPath</name></name><argument_list pos:line="258" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="258" pos:column="31">"main.c"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="259" pos:column="13">map</name><op:operator pos:line="259" pos:column="16">.</op:operator><name pos:line="259" pos:column="17">GetTargetPath</name></name><argument_list pos:line="259" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="259" pos:column="31">"integer.cpp"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="260" pos:column="13">map</name><op:operator pos:line="260" pos:column="16">.</op:operator><name pos:line="260" pos:column="17">SaveMapping</name></name><argument_list pos:line="260" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="261" pos:column="13">Assert</name><op:operator pos:line="261" pos:column="19">.</op:operator><name pos:line="261" pos:column="20">That</name></name><argument_list pos:line="261" pos:column="24">(<argument><expr><call><name><name pos:line="261" pos:column="25">File</name><op:operator pos:line="261" pos:column="29">.</op:operator><name pos:line="261" pos:column="30">Exists</name></name><argument_list pos:line="261" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="261" pos:column="37">@"mappingTest\mapping.txt"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="262" pos:column="13">var</name></type> <name pos:line="262" pos:column="17">lines</name> <init pos:line="262" pos:column="23">= <expr><call><name><name pos:line="262" pos:column="25">File</name><op:operator pos:line="262" pos:column="29">.</op:operator><name pos:line="262" pos:column="30">ReadAllLines</name></name><argument_list pos:line="262" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="262" pos:column="43">@"mappingTest\mapping.txt"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="263" pos:column="13">Assert</name><op:operator pos:line="263" pos:column="19">.</op:operator><name pos:line="263" pos:column="20">AreEqual</name></name><argument_list pos:line="263" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="263" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="263" pos:column="32">lines</name><op:operator pos:line="263" pos:column="37">.</op:operator><name pos:line="263" pos:column="38">Length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="266" pos:column="9">[<expr><name pos:line="266" pos:column="10">SetUp</name></expr>]</attribute>
        <specifier pos:line="267" pos:column="9">public</specifier> <name pos:line="267" pos:column="16">void</name></type> <name pos:line="267" pos:column="21">TestSetUp</name><parameter_list pos:line="267" pos:column="30">()</parameter_list> <block pos:line="267" pos:column="33">{
            <if pos:line="268" pos:column="13">if<condition pos:line="268" pos:column="15">(<expr><call><name><name pos:line="268" pos:column="16">Directory</name><op:operator pos:line="268" pos:column="25">.</op:operator><name pos:line="268" pos:column="26">Exists</name></name><argument_list pos:line="268" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="268" pos:column="33">"mappingTest"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="268" pos:column="48"> <block pos:line="268" pos:column="49">{
                <foreach pos:line="269" pos:column="17">foreach(<init><decl><type><name pos:line="269" pos:column="25">var</name></type> <name pos:line="269" pos:column="29">file</name> <range pos:line="269" pos:column="34">in <expr><call><name><name pos:line="269" pos:column="37">Directory</name><op:operator pos:line="269" pos:column="46">.</op:operator><name pos:line="269" pos:column="47">GetFiles</name></name><argument_list pos:line="269" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="269" pos:column="56">"mappingTest"</lit:literal></expr></argument>)</argument_list></call></expr></range></decl></init>) <block pos:line="269" pos:column="72">{
                    <expr_stmt><expr><call><name><name pos:line="270" pos:column="21">File</name><op:operator pos:line="270" pos:column="25">.</op:operator><name pos:line="270" pos:column="26">Delete</name></name><argument_list pos:line="270" pos:column="32">(<argument><expr><name pos:line="270" pos:column="33">file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
            }</block></then></if>
        }</block></function>

        <function><type><attribute pos:line="275" pos:column="9">[<expr><name pos:line="275" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="276" pos:column="9">public</specifier> <name pos:line="276" pos:column="16">void</name></type> <name pos:line="276" pos:column="21">TestXmlPathWithDifferentCase</name><parameter_list pos:line="276" pos:column="49">()</parameter_list> <block pos:line="276" pos:column="52">{
            <decl_stmt><decl><type><name pos:line="277" pos:column="13">var</name></type> <name pos:line="277" pos:column="17">xmlFilePath</name> <init pos:line="277" pos:column="29">= <expr><lit:literal type="string" pos:line="277" pos:column="31">@"..\..\TestInputs\function_def.xml"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="278" pos:column="13">var</name></type> <name pos:line="278" pos:column="17">sourceFilePath</name> <init pos:line="278" pos:column="32">= <expr><lit:literal type="string" pos:line="278" pos:column="34">@"C:\Workspaces\SrcML.NET\TestInputs\function_def.cpp"</lit:literal></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="280" pos:column="13">File</name><op:operator pos:line="280" pos:column="17">.</op:operator><name pos:line="280" pos:column="18">Copy</name></name><argument_list pos:line="280" pos:column="22">(<argument><expr><name pos:line="280" pos:column="23">xmlFilePath</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="280" pos:column="36">@"mappingTest\function_def.xml"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="280" pos:column="69">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="282" pos:column="13">var</name></type> <name pos:line="282" pos:column="17">map</name> <init pos:line="282" pos:column="21">= <expr><op:operator pos:line="282" pos:column="23">new</op:operator> <call><name pos:line="282" pos:column="27">SrcMLFileNameMapping</name><argument_list pos:line="282" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="282" pos:column="48">"mappingTest"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="283" pos:column="13">var</name></type> <name pos:line="283" pos:column="17">storedXmlPath</name> <init pos:line="283" pos:column="31">= <expr><call><name><name pos:line="283" pos:column="33">map</name><op:operator pos:line="283" pos:column="36">.</op:operator><name pos:line="283" pos:column="37">GetTargetPath</name></name><argument_list pos:line="283" pos:column="50">(<argument><expr><name pos:line="283" pos:column="51">sourceFilePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="284" pos:column="13">Assert</name><op:operator pos:line="284" pos:column="19">.</op:operator><name pos:line="284" pos:column="20">IsNotNull</name></name><argument_list pos:line="284" pos:column="29">(<argument><expr><call><name><name pos:line="284" pos:column="30">map</name><op:operator pos:line="284" pos:column="33">.</op:operator><name pos:line="284" pos:column="34">GetSourcePath</name></name><argument_list pos:line="284" pos:column="47">(<argument><expr><name pos:line="284" pos:column="48">storedXmlPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="286" pos:column="13">var</name></type> <name pos:line="286" pos:column="17">modifiedDriveLetter</name> <init pos:line="286" pos:column="37">= <expr><call><name><name pos:line="286" pos:column="39">Char</name><op:operator pos:line="286" pos:column="43">.</op:operator><name pos:line="286" pos:column="44">IsLower</name></name><argument_list pos:line="286" pos:column="51">(<argument><expr><name><name pos:line="286" pos:column="52">storedXmlPath</name><index pos:line="286" pos:column="65">[<expr><lit:literal type="number" pos:line="286" pos:column="66">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="286" pos:column="70">?</op:operator> <call><name><name pos:line="286" pos:column="72">Char</name><op:operator pos:line="286" pos:column="76">.</op:operator><name pos:line="286" pos:column="77">ToUpper</name></name><argument_list pos:line="286" pos:column="84">(<argument><expr><name><name pos:line="286" pos:column="85">storedXmlPath</name><index pos:line="286" pos:column="98">[<expr><lit:literal type="number" pos:line="286" pos:column="99">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="286" pos:column="103">:</op:operator> <call><name><name pos:line="286" pos:column="105">Char</name><op:operator pos:line="286" pos:column="109">.</op:operator><name pos:line="286" pos:column="110">ToLower</name></name><argument_list pos:line="286" pos:column="117">(<argument><expr><name><name pos:line="286" pos:column="118">storedXmlPath</name><index pos:line="286" pos:column="131">[<expr><lit:literal type="number" pos:line="286" pos:column="132">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="287" pos:column="13">var</name></type> <name pos:line="287" pos:column="17">absoluteXmlPath</name> <init pos:line="287" pos:column="33">= <expr><call><name><name pos:line="287" pos:column="35">String</name><op:operator pos:line="287" pos:column="41">.</op:operator><name pos:line="287" pos:column="42">Concat</name></name><argument_list pos:line="287" pos:column="48">(<argument><expr><name pos:line="287" pos:column="49">modifiedDriveLetter</name></expr></argument>, <argument><expr><call><name><name pos:line="287" pos:column="70">storedXmlPath</name><op:operator pos:line="287" pos:column="83">.</op:operator><name pos:line="287" pos:column="84">Substring</name></name><argument_list pos:line="287" pos:column="93">(<argument><expr><lit:literal type="number" pos:line="287" pos:column="94">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="288" pos:column="13">Assert</name><op:operator pos:line="288" pos:column="19">.</op:operator><name pos:line="288" pos:column="20">IsNotNull</name></name><argument_list pos:line="288" pos:column="29">(<argument><expr><call><name><name pos:line="288" pos:column="30">map</name><op:operator pos:line="288" pos:column="33">.</op:operator><name pos:line="288" pos:column="34">GetSourcePath</name></name><argument_list pos:line="288" pos:column="47">(<argument><expr><name pos:line="288" pos:column="48">absoluteXmlPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="291" pos:column="9">private</specifier> <name pos:line="291" pos:column="17">void</name></type> <name pos:line="291" pos:column="22">ConcurrentWorker</name><parameter_list pos:line="291" pos:column="38">(<param><decl><type><name pos:line="291" pos:column="39">SrcMLFileNameMapping</name></type> <name pos:line="291" pos:column="60">map</name></decl></param>, <param><decl><type><name><name pos:line="291" pos:column="65">IEnumerable</name><argument_list pos:line="291" pos:column="76">&lt;<argument><name pos:line="291" pos:column="77">string</name></argument>&gt;</argument_list></name></type> <name pos:line="291" pos:column="85">sourceFiles</name></decl></param>)</parameter_list> <block pos:line="291" pos:column="98">{
            <foreach pos:line="292" pos:column="13">foreach(<init><decl><type><name pos:line="292" pos:column="21">var</name></type> <name pos:line="292" pos:column="25">file</name> <range pos:line="292" pos:column="30">in <expr><name pos:line="292" pos:column="33">sourceFiles</name></expr></range></decl></init>) <block pos:line="292" pos:column="46">{
                <expr_stmt><expr><call><name><name pos:line="293" pos:column="17">map</name><op:operator pos:line="293" pos:column="20">.</op:operator><name pos:line="293" pos:column="21">GetTargetPath</name></name><argument_list pos:line="293" pos:column="34">(<argument><expr><name pos:line="293" pos:column="35">file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
