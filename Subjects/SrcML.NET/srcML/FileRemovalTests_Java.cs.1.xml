<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data.Test\FileRemovalTests_Java.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">ABB</name><op:operator pos:line="1" pos:column="10">.</op:operator><name pos:line="1" pos:column="11">SrcML</name><op:operator pos:line="1" pos:column="16">.</op:operator><name pos:line="1" pos:column="17">Test</name><op:operator pos:line="1" pos:column="21">.</op:operator><name pos:line="1" pos:column="22">Utilities</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">NUnit</name><op:operator pos:line="2" pos:column="12">.</op:operator><name pos:line="2" pos:column="13">Framework</name></name>;</using>
<using pos:line="3" pos:column="1">using <name pos:line="3" pos:column="7">System</name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Collections</name><op:operator pos:line="4" pos:column="25">.</op:operator><name pos:line="4" pos:column="26">Generic</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Linq</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">Text</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">System</name><op:operator pos:line="7" pos:column="13">.</op:operator><name pos:line="7" pos:column="14">Threading</name><op:operator pos:line="7" pos:column="23">.</op:operator><name pos:line="7" pos:column="24">Tasks</name></name>;</using>

<namespace pos:line="9" pos:column="1">namespace <name><name pos:line="9" pos:column="11">ABB</name><op:operator pos:line="9" pos:column="14">.</op:operator><name pos:line="9" pos:column="15">SrcML</name><op:operator pos:line="9" pos:column="20">.</op:operator><name pos:line="9" pos:column="21">Data</name><op:operator pos:line="9" pos:column="25">.</op:operator><name pos:line="9" pos:column="26">Test</name></name> <block pos:line="9" pos:column="31">{
    <class><attribute pos:line="10" pos:column="5">[<expr><name pos:line="10" pos:column="6">TestFixture</name></expr>]</attribute>
    <attribute pos:line="11" pos:column="5">[<expr><call><name pos:line="11" pos:column="6">Category</name><argument_list pos:line="11" pos:column="14">(<argument><expr><lit:literal type="string" pos:line="11" pos:column="15">"Build"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="12" pos:column="5">public</specifier> class <name pos:line="12" pos:column="18">FileRemovalTests_Java</name> <block pos:line="12" pos:column="40">{
        <decl_stmt><decl><type><specifier pos:line="13" pos:column="9">private</specifier> <name pos:line="13" pos:column="17">JavaCodeParser</name></type> <name pos:line="13" pos:column="32">CodeParser</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="14" pos:column="9">private</specifier> <name pos:line="14" pos:column="17">SrcMLFileUnitSetup</name></type> <name pos:line="14" pos:column="36">FileUnitSetup</name></decl>;</decl_stmt>

        <function><type><attribute pos:line="16" pos:column="9">[<expr><name pos:line="16" pos:column="10">TestFixtureSetUp</name></expr><op:operator pos:line="16" pos:column="26">,</op:operator> <expr><call><name pos:line="16" pos:column="28">Category</name><argument_list pos:line="16" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="16" pos:column="37">"Build"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="17" pos:column="9">public</specifier> <name pos:line="17" pos:column="16">void</name></type> <name pos:line="17" pos:column="21">ClassSetup</name><parameter_list pos:line="17" pos:column="31">()</parameter_list> <block pos:line="17" pos:column="34">{
            <expr_stmt><expr><name pos:line="18" pos:column="13">FileUnitSetup</name> <op:operator pos:line="18" pos:column="27">=</op:operator> <op:operator pos:line="18" pos:column="29">new</op:operator> <call><name pos:line="18" pos:column="33">SrcMLFileUnitSetup</name><argument_list pos:line="18" pos:column="51">(<argument><expr><name><name pos:line="18" pos:column="52">Language</name><op:operator pos:line="18" pos:column="60">.</op:operator><name pos:line="18" pos:column="61">CPlusPlus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="19" pos:column="13">CodeParser</name> <op:operator pos:line="19" pos:column="24">=</op:operator> <op:operator pos:line="19" pos:column="26">new</op:operator> <call><name pos:line="19" pos:column="30">JavaCodeParser</name><argument_list pos:line="19" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="22" pos:column="9">[<expr><name pos:line="22" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="23" pos:column="9">public</specifier> <name pos:line="23" pos:column="16">void</name></type> <name pos:line="23" pos:column="21">TestRemoveClass_Global</name><parameter_list pos:line="23" pos:column="43">()</parameter_list> <block pos:line="23" pos:column="46">{
            <comment type="line" pos:line="24" pos:column="13">////Foo.java</comment>
            <comment type="line" pos:line="25" pos:column="13">//class Foo {</comment>
            <comment type="line" pos:line="26" pos:column="13">//    private int bar;</comment>
            <comment type="line" pos:line="27" pos:column="13">//    public Foo() { bar = 42; }</comment>
            <comment type="line" pos:line="28" pos:column="13">//    public int GetBar() { return bar; }</comment>
            <comment type="line" pos:line="29" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="30" pos:column="13">string</name></type> <name pos:line="30" pos:column="20">fooXml</name> <init pos:line="30" pos:column="27">= <expr><lit:literal type="string" pos:line="30" pos:column="29">@"&lt;class&gt;class &lt;name&gt;Foo&lt;/name&gt; &lt;block&gt;{
    &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;specifier&gt;private&lt;/specifier&gt; &lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;bar&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
    &lt;constructor&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;expr_stmt&gt;&lt;expr&gt;&lt;name&gt;bar&lt;/name&gt; &lt;op:operator&gt;=&lt;/op:operator&gt; &lt;lit:literal type=""number&gt;42&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt; }&lt;/block&gt;&lt;/constructor&gt;
    &lt;function&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;GetBar&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;return&gt;return &lt;expr&gt;&lt;name&gt;bar&lt;/name&gt;&lt;/expr&gt;;&lt;/return&gt; }&lt;/block&gt;&lt;/function&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="35" pos:column="13">var</name></type> <name pos:line="35" pos:column="17">fooFileUnit</name> <init pos:line="35" pos:column="29">= <expr><call><name><name pos:line="35" pos:column="31">FileUnitSetup</name><op:operator pos:line="35" pos:column="44">.</op:operator><name pos:line="35" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="35" pos:column="69">(<argument><expr><name pos:line="35" pos:column="70">fooXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="35" pos:column="78">"Foo.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="36" pos:column="13">var</name></type> <name pos:line="36" pos:column="17">beforeScope</name> <init pos:line="36" pos:column="29">= <expr><call><name><name pos:line="36" pos:column="31">CodeParser</name><op:operator pos:line="36" pos:column="41">.</op:operator><name pos:line="36" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="36" pos:column="55">(<argument><expr><name pos:line="36" pos:column="56">fooFileUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="37" pos:column="13">////Baz.java</comment>
            <comment type="line" pos:line="38" pos:column="13">//class Baz {</comment>
            <comment type="line" pos:line="39" pos:column="13">//    public static int DoWork() { return 0; }</comment>
            <comment type="line" pos:line="40" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="41" pos:column="13">string</name></type> <name pos:line="41" pos:column="20">bazXml</name> <init pos:line="41" pos:column="27">= <expr><lit:literal type="string" pos:line="41" pos:column="29">@"&lt;class&gt;class &lt;name&gt;Baz&lt;/name&gt; &lt;block&gt;{
    &lt;function&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;specifier&gt;static&lt;/specifier&gt; &lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;DoWork&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;return&gt;return &lt;expr&gt;&lt;lit:literal type=""number&gt;0&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt; }&lt;/block&gt;&lt;/function&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="44" pos:column="13">var</name></type> <name pos:line="44" pos:column="17">bazFileUnit</name> <init pos:line="44" pos:column="29">= <expr><call><name><name pos:line="44" pos:column="31">FileUnitSetup</name><op:operator pos:line="44" pos:column="44">.</op:operator><name pos:line="44" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="44" pos:column="69">(<argument><expr><name pos:line="44" pos:column="70">bazXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="44" pos:column="78">"Baz.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="45" pos:column="13">var</name></type> <name pos:line="45" pos:column="17">afterScope</name> <init pos:line="45" pos:column="28">= <expr><call><name><name pos:line="45" pos:column="30">beforeScope</name><op:operator pos:line="45" pos:column="41">.</op:operator><name pos:line="45" pos:column="42">Merge</name></name><argument_list pos:line="45" pos:column="47">(<argument><expr><call><name><name pos:line="45" pos:column="48">CodeParser</name><op:operator pos:line="45" pos:column="58">.</op:operator><name pos:line="45" pos:column="59">ParseFileUnit</name></name><argument_list pos:line="45" pos:column="72">(<argument><expr><name pos:line="45" pos:column="73">bazFileUnit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="47" pos:column="13">Assert</name><op:operator pos:line="47" pos:column="19">.</op:operator><name pos:line="47" pos:column="20">AreEqual</name></name><argument_list pos:line="47" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="47" pos:column="29">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="47" pos:column="32">afterScope</name><op:operator pos:line="47" pos:column="42">.</op:operator><name pos:line="47" pos:column="43">ChildStatements</name><op:operator pos:line="47" pos:column="58">.</op:operator><name><name pos:line="47" pos:column="59">OfType</name><argument_list pos:line="47" pos:column="65">&lt;<argument><name pos:line="47" pos:column="66">NamespaceDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="47" pos:column="86">()</argument_list></call><op:operator pos:line="47" pos:column="88">.</op:operator><call><name pos:line="47" pos:column="89">Count</name><argument_list pos:line="47" pos:column="94">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="48" pos:column="13">Assert</name><op:operator pos:line="48" pos:column="19">.</op:operator><name pos:line="48" pos:column="20">AreEqual</name></name><argument_list pos:line="48" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="48" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="48" pos:column="32">afterScope</name><op:operator pos:line="48" pos:column="42">.</op:operator><name pos:line="48" pos:column="43">ChildStatements</name><op:operator pos:line="48" pos:column="58">.</op:operator><name><name pos:line="48" pos:column="59">OfType</name><argument_list pos:line="48" pos:column="65">&lt;<argument><name pos:line="48" pos:column="66">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="48" pos:column="81">()</argument_list></call><op:operator pos:line="48" pos:column="83">.</op:operator><call><name pos:line="48" pos:column="84">Count</name><argument_list pos:line="48" pos:column="89">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="50" pos:column="13">afterScope</name><op:operator pos:line="50" pos:column="23">.</op:operator><name pos:line="50" pos:column="24">RemoveFile</name></name><argument_list pos:line="50" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="50" pos:column="35">"Baz.java"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="52" pos:column="13">DataAssert</name><op:operator pos:line="52" pos:column="23">.</op:operator><name pos:line="52" pos:column="24">StatementsAreEqual</name></name><argument_list pos:line="52" pos:column="42">(<argument><expr><name pos:line="52" pos:column="43">beforeScope</name></expr></argument>, <argument><expr><name pos:line="52" pos:column="56">afterScope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="55" pos:column="9">[<expr><name pos:line="55" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="56" pos:column="9">public</specifier> <name pos:line="56" pos:column="16">void</name></type> <name pos:line="56" pos:column="21">TestRemoveClass_Namespace</name><parameter_list pos:line="56" pos:column="46">()</parameter_list> <block pos:line="56" pos:column="49">{
            <comment type="line" pos:line="57" pos:column="13">////Foo.java</comment>
            <comment type="line" pos:line="58" pos:column="13">//package com.ABB.Example;</comment>
            <comment type="line" pos:line="59" pos:column="13">//class Foo {</comment>
            <comment type="line" pos:line="60" pos:column="13">//    private int bar;</comment>
            <comment type="line" pos:line="61" pos:column="13">//    public Foo() { bar = 42; }</comment>
            <comment type="line" pos:line="62" pos:column="13">//    public int GetBar() { return bar; }</comment>
            <comment type="line" pos:line="63" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="64" pos:column="13">string</name></type> <name pos:line="64" pos:column="20">fooXml</name> <init pos:line="64" pos:column="27">= <expr><lit:literal type="string" pos:line="64" pos:column="29">@"&lt;package&gt;package &lt;name&gt;com&lt;/name&gt;.&lt;name&gt;ABB&lt;/name&gt;.&lt;name&gt;Example&lt;/name&gt;;&lt;/package&gt;
&lt;class&gt;class &lt;name&gt;Foo&lt;/name&gt; &lt;block&gt;{
    &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;specifier&gt;private&lt;/specifier&gt; &lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;bar&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
    &lt;constructor&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;expr_stmt&gt;&lt;expr&gt;&lt;name&gt;bar&lt;/name&gt; &lt;op:operator&gt;=&lt;/op:operator&gt; &lt;lit:literal type=""number&gt;42&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt; }&lt;/block&gt;&lt;/constructor&gt;
    &lt;function&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;GetBar&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;return&gt;return &lt;expr&gt;&lt;name&gt;bar&lt;/name&gt;&lt;/expr&gt;;&lt;/return&gt; }&lt;/block&gt;&lt;/function&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="70" pos:column="13">var</name></type> <name pos:line="70" pos:column="17">fooFileUnit</name> <init pos:line="70" pos:column="29">= <expr><call><name><name pos:line="70" pos:column="31">FileUnitSetup</name><op:operator pos:line="70" pos:column="44">.</op:operator><name pos:line="70" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="70" pos:column="69">(<argument><expr><name pos:line="70" pos:column="70">fooXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="70" pos:column="78">"Foo.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="71" pos:column="13">var</name></type> <name pos:line="71" pos:column="17">beforeScope</name> <init pos:line="71" pos:column="29">= <expr><call><name><name pos:line="71" pos:column="31">CodeParser</name><op:operator pos:line="71" pos:column="41">.</op:operator><name pos:line="71" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="71" pos:column="55">(<argument><expr><name pos:line="71" pos:column="56">fooFileUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="72" pos:column="13">////Baz.java</comment>
            <comment type="line" pos:line="73" pos:column="13">//package com.ABB.Example;</comment>
            <comment type="line" pos:line="74" pos:column="13">//class Baz {</comment>
            <comment type="line" pos:line="75" pos:column="13">//    public static int DoWork() { return 0; }</comment>
            <comment type="line" pos:line="76" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="77" pos:column="13">string</name></type> <name pos:line="77" pos:column="20">bazXml</name> <init pos:line="77" pos:column="27">= <expr><lit:literal type="string" pos:line="77" pos:column="29">@"&lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;package&lt;/name&gt;&lt;/type&gt; &lt;name&gt;&lt;name&gt;com&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;ABB&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;Example&lt;/name&gt;&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
&lt;class&gt;class &lt;name&gt;Baz&lt;/name&gt; &lt;block&gt;{
    &lt;function&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;specifier&gt;static&lt;/specifier&gt; &lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;DoWork&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;return&gt;return &lt;expr&gt;&lt;lit:literal type=""number&gt;0&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt; }&lt;/block&gt;&lt;/function&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="81" pos:column="13">var</name></type> <name pos:line="81" pos:column="17">bazFileUnit</name> <init pos:line="81" pos:column="29">= <expr><call><name><name pos:line="81" pos:column="31">FileUnitSetup</name><op:operator pos:line="81" pos:column="44">.</op:operator><name pos:line="81" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="81" pos:column="69">(<argument><expr><name pos:line="81" pos:column="70">bazXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="81" pos:column="78">"Baz.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="82" pos:column="13">var</name></type> <name pos:line="82" pos:column="17">afterScope</name> <init pos:line="82" pos:column="28">= <expr><call><name><name pos:line="82" pos:column="30">beforeScope</name><op:operator pos:line="82" pos:column="41">.</op:operator><name pos:line="82" pos:column="42">Merge</name></name><argument_list pos:line="82" pos:column="47">(<argument><expr><call><name><name pos:line="82" pos:column="48">CodeParser</name><op:operator pos:line="82" pos:column="58">.</op:operator><name pos:line="82" pos:column="59">ParseFileUnit</name></name><argument_list pos:line="82" pos:column="72">(<argument><expr><name pos:line="82" pos:column="73">bazFileUnit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="84" pos:column="13">Assert</name><op:operator pos:line="84" pos:column="19">.</op:operator><name pos:line="84" pos:column="20">AreEqual</name></name><argument_list pos:line="84" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="84" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="84" pos:column="32">afterScope</name><op:operator pos:line="84" pos:column="42">.</op:operator><name pos:line="84" pos:column="43">ChildStatements</name><op:operator pos:line="84" pos:column="58">.</op:operator><name><name pos:line="84" pos:column="59">OfType</name><argument_list pos:line="84" pos:column="65">&lt;<argument><name pos:line="84" pos:column="66">NamespaceDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="84" pos:column="86">()</argument_list></call><op:operator pos:line="84" pos:column="88">.</op:operator><call><name pos:line="84" pos:column="89">Count</name><argument_list pos:line="84" pos:column="94">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="86" pos:column="13">afterScope</name><op:operator pos:line="86" pos:column="23">.</op:operator><name pos:line="86" pos:column="24">RemoveFile</name></name><argument_list pos:line="86" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="86" pos:column="35">"Baz.java"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="88" pos:column="13">DataAssert</name><op:operator pos:line="88" pos:column="23">.</op:operator><name pos:line="88" pos:column="24">StatementsAreEqual</name></name><argument_list pos:line="88" pos:column="42">(<argument><expr><name pos:line="88" pos:column="43">beforeScope</name></expr></argument>, <argument><expr><name pos:line="88" pos:column="56">afterScope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="91" pos:column="9">[<expr><name pos:line="91" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="92" pos:column="9">public</specifier> <name pos:line="92" pos:column="16">void</name></type> <name pos:line="92" pos:column="21">TestRemoveNamespace</name><parameter_list pos:line="92" pos:column="40">()</parameter_list> <block pos:line="92" pos:column="43">{
            <comment type="line" pos:line="93" pos:column="13">////Foo.java</comment>
            <comment type="line" pos:line="94" pos:column="13">//package com.ABB.example;</comment>
            <comment type="line" pos:line="95" pos:column="13">//class Foo {</comment>
            <comment type="line" pos:line="96" pos:column="13">//    private int bar;</comment>
            <comment type="line" pos:line="97" pos:column="13">//    public Foo() { bar = 42; }</comment>
            <comment type="line" pos:line="98" pos:column="13">//    public int GetBar() { return bar; }</comment>
            <comment type="line" pos:line="99" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="100" pos:column="13">string</name></type> <name pos:line="100" pos:column="20">fooXml</name> <init pos:line="100" pos:column="27">= <expr><lit:literal type="string" pos:line="100" pos:column="29">@"&lt;package&gt;package &lt;name&gt;&lt;name&gt;com&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;ABB&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;example&lt;/name&gt;&lt;/name&gt;;&lt;/package&gt;
&lt;class&gt;class &lt;name&gt;Foo&lt;/name&gt; &lt;block&gt;{
	&lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;specifier&gt;private&lt;/specifier&gt; &lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;bar&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
	&lt;constructor&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;expr_stmt&gt;&lt;expr&gt;&lt;name&gt;bar&lt;/name&gt; &lt;op:operator&gt;=&lt;/op:operator&gt; &lt;lit:literal type=""number&gt;42&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt; }&lt;/block&gt;&lt;/constructor&gt;
	&lt;function&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;GetBar&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;return&gt;return &lt;expr&gt;&lt;name&gt;bar&lt;/name&gt;&lt;/expr&gt;;&lt;/return&gt; }&lt;/block&gt;&lt;/function&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="106" pos:column="13">var</name></type> <name pos:line="106" pos:column="17">fooFileUnit</name> <init pos:line="106" pos:column="29">= <expr><call><name><name pos:line="106" pos:column="31">FileUnitSetup</name><op:operator pos:line="106" pos:column="44">.</op:operator><name pos:line="106" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="106" pos:column="69">(<argument><expr><name pos:line="106" pos:column="70">fooXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="106" pos:column="78">"Foo.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="107" pos:column="13">var</name></type> <name pos:line="107" pos:column="17">beforeScope</name> <init pos:line="107" pos:column="29">= <expr><call><name><name pos:line="107" pos:column="31">CodeParser</name><op:operator pos:line="107" pos:column="41">.</op:operator><name pos:line="107" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="107" pos:column="55">(<argument><expr><name pos:line="107" pos:column="56">fooFileUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="108" pos:column="13">////Baz.java</comment>
            <comment type="line" pos:line="109" pos:column="13">//package com.ABB.DifferentExample;</comment>
            <comment type="line" pos:line="110" pos:column="13">//class Baz {</comment>
            <comment type="line" pos:line="111" pos:column="13">//    public static int DoWork() { return 0; }</comment>
            <comment type="line" pos:line="112" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="113" pos:column="13">string</name></type> <name pos:line="113" pos:column="20">bazXml</name> <init pos:line="113" pos:column="27">= <expr><lit:literal type="string" pos:line="113" pos:column="29">@"&lt;package&gt;package &lt;name&gt;&lt;name&gt;com&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;ABB&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;DifferentExample&lt;/name&gt;&lt;/name&gt;;&lt;/package&gt;
&lt;class&gt;class &lt;name&gt;Baz&lt;/name&gt; &lt;block&gt;{
	&lt;function&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;specifier&gt;static&lt;/specifier&gt; &lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;DoWork&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;return&gt;return &lt;expr&gt;&lt;lit:literal type=""number&gt;0&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt; }&lt;/block&gt;&lt;/function&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="117" pos:column="13">var</name></type> <name pos:line="117" pos:column="17">bazFileUnit</name> <init pos:line="117" pos:column="29">= <expr><call><name><name pos:line="117" pos:column="31">FileUnitSetup</name><op:operator pos:line="117" pos:column="44">.</op:operator><name pos:line="117" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="117" pos:column="69">(<argument><expr><name pos:line="117" pos:column="70">bazXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="117" pos:column="78">"Baz.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="118" pos:column="13">var</name></type> <name pos:line="118" pos:column="17">afterScope</name> <init pos:line="118" pos:column="28">= <expr><call><name><name pos:line="118" pos:column="30">beforeScope</name><op:operator pos:line="118" pos:column="41">.</op:operator><name pos:line="118" pos:column="42">Merge</name></name><argument_list pos:line="118" pos:column="47">(<argument><expr><call><name><name pos:line="118" pos:column="48">CodeParser</name><op:operator pos:line="118" pos:column="58">.</op:operator><name pos:line="118" pos:column="59">ParseFileUnit</name></name><argument_list pos:line="118" pos:column="72">(<argument><expr><name pos:line="118" pos:column="73">bazFileUnit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="120" pos:column="13">var</name></type> <name pos:line="120" pos:column="17">comDotAbb</name> <init pos:line="120" pos:column="27">= <expr><call><name><name pos:line="120" pos:column="29">afterScope</name><op:operator pos:line="120" pos:column="39">.</op:operator><name pos:line="120" pos:column="40">ChildStatements</name><op:operator pos:line="120" pos:column="55">.</op:operator><name><name pos:line="120" pos:column="56">OfType</name><argument_list pos:line="120" pos:column="62">&lt;<argument><name pos:line="120" pos:column="63">NamespaceDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="120" pos:column="83">()</argument_list></call><op:operator pos:line="120" pos:column="85">.</op:operator><call><name pos:line="120" pos:column="86">First</name><argument_list pos:line="120" pos:column="91">()</argument_list></call><op:operator pos:line="120" pos:column="93">.</op:operator><call><name><name pos:line="120" pos:column="94">ChildStatements</name><op:operator pos:line="120" pos:column="109">.</op:operator><name><name pos:line="120" pos:column="110">OfType</name><argument_list pos:line="120" pos:column="116">&lt;<argument><name pos:line="120" pos:column="117">NamespaceDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="120" pos:column="137">()</argument_list></call><op:operator pos:line="120" pos:column="139">.</op:operator><call><name pos:line="120" pos:column="140">First</name><argument_list pos:line="120" pos:column="145">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="121" pos:column="13">Assert</name><op:operator pos:line="121" pos:column="19">.</op:operator><name pos:line="121" pos:column="20">AreEqual</name></name><argument_list pos:line="121" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="121" pos:column="29">"com.ABB"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="121" pos:column="40">comDotAbb</name><op:operator pos:line="121" pos:column="49">.</op:operator><name pos:line="121" pos:column="50">GetFullName</name></name><argument_list pos:line="121" pos:column="61">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="122" pos:column="13">Assert</name><op:operator pos:line="122" pos:column="19">.</op:operator><name pos:line="122" pos:column="20">AreEqual</name></name><argument_list pos:line="122" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="122" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="122" pos:column="32">comDotAbb</name><op:operator pos:line="122" pos:column="41">.</op:operator><name pos:line="122" pos:column="42">ChildStatements</name><op:operator pos:line="122" pos:column="57">.</op:operator><name><name pos:line="122" pos:column="58">OfType</name><argument_list pos:line="122" pos:column="64">&lt;<argument><name pos:line="122" pos:column="65">NamespaceDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="122" pos:column="85">()</argument_list></call><op:operator pos:line="122" pos:column="87">.</op:operator><call><name pos:line="122" pos:column="88">Count</name><argument_list pos:line="122" pos:column="93">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="124" pos:column="13">afterScope</name><op:operator pos:line="124" pos:column="23">.</op:operator><name pos:line="124" pos:column="24">RemoveFile</name></name><argument_list pos:line="124" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="124" pos:column="35">"Baz.java"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="126" pos:column="13">DataAssert</name><op:operator pos:line="126" pos:column="23">.</op:operator><name pos:line="126" pos:column="24">StatementsAreEqual</name></name><argument_list pos:line="126" pos:column="42">(<argument><expr><name pos:line="126" pos:column="43">beforeScope</name></expr></argument>, <argument><expr><name pos:line="126" pos:column="56">afterScope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
