<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data\NamePrefix.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2014 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *    Patrick Francis (ABB Group) - API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="13" pos:column="1">using <name pos:line="13" pos:column="7">System</name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Collections</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">Generic</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Collections</name><op:operator pos:line="15" pos:column="25">.</op:operator><name pos:line="15" pos:column="26">ObjectModel</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Linq</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Text</name></name>;</using>

<namespace pos:line="19" pos:column="1">namespace <name><name pos:line="19" pos:column="11">ABB</name><op:operator pos:line="19" pos:column="14">.</op:operator><name pos:line="19" pos:column="15">SrcML</name><op:operator pos:line="19" pos:column="20">.</op:operator><name pos:line="19" pos:column="21">Data</name></name> <block pos:line="19" pos:column="26">{
    <comment type="line" pos:line="20" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="21" pos:column="5">/// Represents the expression, if any, prefixing the use of a name.</comment>
    <comment type="line" pos:line="22" pos:column="5">/// For example, in void Foo::Bar() {...}, "Foo::" is the prefix of Bar</comment>
    <comment type="line" pos:line="23" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="24" pos:column="5">public</specifier> class <name pos:line="24" pos:column="18">NamePrefix</name> <super pos:line="24" pos:column="29">: <name pos:line="24" pos:column="31">Expression</name></super> <block pos:line="24" pos:column="42">{
        <comment type="line" pos:line="25" pos:column="9">/// &lt;summary&gt; The XML name for NamePrefix. &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="26" pos:column="9">public</specifier> <specifier pos:line="26" pos:column="16">new</specifier> <specifier pos:line="26" pos:column="20">const</specifier> <name pos:line="26" pos:column="26">string</name></type> <name pos:line="26" pos:column="33">XmlName</name> <init pos:line="26" pos:column="41">= <expr><lit:literal type="string" pos:line="26" pos:column="43">"Prefix"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="28" pos:column="9">/// &lt;summary&gt; The NameUses in this prefix. &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="29" pos:column="9">public</specifier> <name><name pos:line="29" pos:column="16">IEnumerable</name><argument_list pos:line="29" pos:column="27">&lt;<argument><name pos:line="29" pos:column="28">NameUse</name></argument>&gt;</argument_list></name></type> <name pos:line="29" pos:column="37">Names</name> <block pos:line="29" pos:column="43">{ <function><name pos:line="29" pos:column="45">get</name> <block pos:line="29" pos:column="49">{ <return pos:line="29" pos:column="51">return <expr><call><name><name pos:line="29" pos:column="58">Components</name><op:operator pos:line="29" pos:column="68">.</op:operator><name><name pos:line="29" pos:column="69">OfType</name><argument_list pos:line="29" pos:column="75">&lt;<argument><name pos:line="29" pos:column="76">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="29" pos:column="84">()</argument_list></call></expr>;</return> }</block></function> }</block></decl></decl_stmt>

        <comment type="line" pos:line="31" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="32" pos:column="9">/// Returns an enumerable of possible NamedScopes that this prefix might be referring to.</comment>
        <comment type="line" pos:line="33" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="34" pos:column="9">public</specifier> <name><name pos:line="34" pos:column="16">IEnumerable</name><argument_list pos:line="34" pos:column="27">&lt;<argument><name pos:line="34" pos:column="28">NamedScope</name></argument>&gt;</argument_list></name></type> <name pos:line="34" pos:column="40">FindMatches</name><parameter_list pos:line="34" pos:column="51">()</parameter_list> <block pos:line="34" pos:column="54">{
            <decl_stmt><decl><type><name pos:line="35" pos:column="13">var</name></type> <name pos:line="35" pos:column="17">lastName</name> <init pos:line="35" pos:column="26">= <expr><call><name><name pos:line="35" pos:column="28">Names</name><op:operator pos:line="35" pos:column="33">.</op:operator><name pos:line="35" pos:column="34">LastOrDefault</name></name><argument_list pos:line="35" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="36" pos:column="13">if<condition pos:line="36" pos:column="15">(<expr><name pos:line="36" pos:column="16">lastName</name> <op:operator pos:line="36" pos:column="25">!=</op:operator> <name pos:line="36" pos:column="28">null</name></expr>)</condition><then pos:line="36" pos:column="33"> <block pos:line="36" pos:column="34">{
                <return pos:line="37" pos:column="17">return <expr><call><name><name pos:line="37" pos:column="24">lastName</name><op:operator pos:line="37" pos:column="32">.</op:operator><name pos:line="37" pos:column="33">FindMatches</name></name><argument_list pos:line="37" pos:column="44">()</argument_list></call><op:operator pos:line="37" pos:column="46">.</op:operator><call><name><name pos:line="37" pos:column="47">OfType</name><argument_list pos:line="37" pos:column="53">&lt;<argument><name pos:line="37" pos:column="54">NamedScope</name></argument>&gt;</argument_list></name><argument_list pos:line="37" pos:column="65">()</argument_list></call></expr>;</return>
            }</block></then> <else pos:line="38" pos:column="15">else <block pos:line="38" pos:column="20">{
                <return pos:line="39" pos:column="17">return <expr><call><name><name pos:line="39" pos:column="24">Enumerable</name><op:operator pos:line="39" pos:column="34">.</op:operator><name><name pos:line="39" pos:column="35">Empty</name><argument_list pos:line="39" pos:column="40">&lt;<argument><name pos:line="39" pos:column="41">NamedScope</name></argument>&gt;</argument_list></name></name><argument_list pos:line="39" pos:column="52">()</argument_list></call></expr>;</return>
            }</block></else></if>
        }</block></function>

        <comment type="line" pos:line="43" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="44" pos:column="9">/// Returns an enumerable of possible NamedScopes that this prefix might be referring to.</comment>
        <comment type="line" pos:line="45" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="46" pos:column="9">/// &lt;param name="root"&gt;The root NamedScope from which to begin searching for matches.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="47" pos:column="9">public</specifier> <name><name pos:line="47" pos:column="16">IEnumerable</name><argument_list pos:line="47" pos:column="27">&lt;<argument><name pos:line="47" pos:column="28">NamedScope</name></argument>&gt;</argument_list></name></type> <name pos:line="47" pos:column="40">FindMatches</name><parameter_list pos:line="47" pos:column="51">(<param><decl><type><name pos:line="47" pos:column="52">NamedScope</name></type> <name pos:line="47" pos:column="63">root</name></decl></param>)</parameter_list> <block pos:line="47" pos:column="69">{
            <decl_stmt><decl><type><name pos:line="48" pos:column="13">var</name></type> <name pos:line="48" pos:column="17">prefixes</name> <init pos:line="48" pos:column="26">= <expr><call><name><name pos:line="48" pos:column="28">Names</name><op:operator pos:line="48" pos:column="33">.</op:operator><name pos:line="48" pos:column="34">ToList</name></name><argument_list pos:line="48" pos:column="40">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="49" pos:column="13">var</name></type> <name pos:line="49" pos:column="17">prefixMap</name> <init pos:line="49" pos:column="27">= <expr><op:operator pos:line="49" pos:column="29">new</op:operator> <call><name><name pos:line="49" pos:column="33">Dictionary</name><argument_list pos:line="49" pos:column="43">&lt;<argument><name pos:line="49" pos:column="44">NameUse</name></argument>, <argument><name><name pos:line="49" pos:column="53">List</name><argument_list pos:line="49" pos:column="57">&lt;<argument><name pos:line="49" pos:column="58">NamedScope</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list pos:line="49" pos:column="70">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for pos:line="50" pos:column="13">for(<init><decl><type><name pos:line="50" pos:column="17">int</name></type> <name pos:line="50" pos:column="21">i</name> <init pos:line="50" pos:column="23">= <expr><lit:literal type="number" pos:line="50" pos:column="25">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="50" pos:column="28">i</name> <op:operator pos:line="50" pos:column="30">&lt;</op:operator> <name><name pos:line="50" pos:column="32">prefixes</name><op:operator pos:line="50" pos:column="40">.</op:operator><name pos:line="50" pos:column="41">Count</name></name></expr>;</condition> <incr><expr><name pos:line="50" pos:column="48">i</name><op:operator pos:line="50" pos:column="49">++</op:operator></expr></incr>) <block pos:line="50" pos:column="53">{
                <if pos:line="51" pos:column="17">if<condition pos:line="51" pos:column="19">(<expr><lit:literal type="number" pos:line="51" pos:column="20">0</lit:literal> <op:operator pos:line="51" pos:column="22">==</op:operator> <name pos:line="51" pos:column="25">i</name></expr>)</condition><then pos:line="51" pos:column="27"> <block pos:line="51" pos:column="28">{
                    <expr_stmt><expr><name><name pos:line="52" pos:column="21">prefixMap</name><index pos:line="52" pos:column="30">[<expr><name><name pos:line="52" pos:column="31">prefixes</name><index pos:line="52" pos:column="39">[<expr><name pos:line="52" pos:column="40">i</name></expr>]</index></name></expr>]</index></name> <op:operator pos:line="52" pos:column="44">=</op:operator> <op:operator pos:line="52" pos:column="46">(</op:operator><linq><from pos:line="52" pos:column="47">from <expr><name pos:line="52" pos:column="52">child</name></expr> <in pos:line="52" pos:column="58">in <expr><call><name><name pos:line="52" pos:column="61">root</name><op:operator pos:line="52" pos:column="65">.</op:operator><name pos:line="52" pos:column="66">ChildStatements</name><op:operator pos:line="52" pos:column="81">.</op:operator><name><name pos:line="52" pos:column="82">OfType</name><argument_list pos:line="52" pos:column="88">&lt;<argument><name pos:line="52" pos:column="89">NamedScope</name></argument>&gt;</argument_list></name></name><argument_list pos:line="52" pos:column="100">()</argument_list></call></expr></in></from>
                                              <where pos:line="53" pos:column="47">where <expr><name><name pos:line="53" pos:column="53">child</name><op:operator pos:line="53" pos:column="58">.</op:operator><name pos:line="53" pos:column="59">Name</name></name> <op:operator pos:line="53" pos:column="64">==</op:operator> <name><name pos:line="53" pos:column="67">prefixes</name><index pos:line="53" pos:column="75">[<expr><name pos:line="53" pos:column="76">i</name></expr>]</index></name><op:operator pos:line="53" pos:column="78">.</op:operator><name pos:line="53" pos:column="79">Name</name></expr></where>
                                              <select pos:line="54" pos:column="47">select <expr><name pos:line="54" pos:column="54">child</name></expr></select></linq><op:operator pos:line="54" pos:column="59">)</op:operator><op:operator pos:line="54" pos:column="60">.</op:operator><call><name pos:line="54" pos:column="61">ToList</name><argument_list pos:line="54" pos:column="67">()</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="55" pos:column="19">else <block pos:line="55" pos:column="24">{
                    <expr_stmt><expr><name><name pos:line="56" pos:column="21">prefixMap</name><index pos:line="56" pos:column="30">[<expr><name><name pos:line="56" pos:column="31">prefixes</name><index pos:line="56" pos:column="39">[<expr><name pos:line="56" pos:column="40">i</name></expr>]</index></name></expr>]</index></name> <op:operator pos:line="56" pos:column="44">=</op:operator> <op:operator pos:line="56" pos:column="46">(</op:operator><linq><from pos:line="56" pos:column="47">from <expr><name pos:line="56" pos:column="52">candidate</name></expr> <in pos:line="56" pos:column="62">in <expr><name><name pos:line="56" pos:column="65">prefixMap</name><index pos:line="56" pos:column="74">[<expr><name><name pos:line="56" pos:column="75">prefixes</name><index pos:line="56" pos:column="83">[<expr><name pos:line="56" pos:column="84">i</name> <op:operator pos:line="56" pos:column="86">-</op:operator> <lit:literal type="number" pos:line="56" pos:column="88">1</lit:literal></expr>]</index></name></expr>]</index></name></expr></in></from>
                                              <from pos:line="57" pos:column="47">from <expr><name pos:line="57" pos:column="52">child</name></expr> <in pos:line="57" pos:column="58">in <expr><call><name><name pos:line="57" pos:column="61">candidate</name><op:operator pos:line="57" pos:column="70">.</op:operator><name pos:line="57" pos:column="71">ChildStatements</name><op:operator pos:line="57" pos:column="86">.</op:operator><name><name pos:line="57" pos:column="87">OfType</name><argument_list pos:line="57" pos:column="93">&lt;<argument><name pos:line="57" pos:column="94">NamedScope</name></argument>&gt;</argument_list></name></name><argument_list pos:line="57" pos:column="105">()</argument_list></call></expr></in></from>
                                              <where pos:line="58" pos:column="47">where <expr><name><name pos:line="58" pos:column="53">child</name><op:operator pos:line="58" pos:column="58">.</op:operator><name pos:line="58" pos:column="59">Name</name></name> <op:operator pos:line="58" pos:column="64">==</op:operator> <name><name pos:line="58" pos:column="67">prefixes</name><index pos:line="58" pos:column="75">[<expr><name pos:line="58" pos:column="76">i</name></expr>]</index></name><op:operator pos:line="58" pos:column="78">.</op:operator><name pos:line="58" pos:column="79">Name</name></expr></where>
                                              <select pos:line="59" pos:column="47">select <expr><name pos:line="59" pos:column="54">child</name></expr></select></linq><op:operator pos:line="59" pos:column="59">)</op:operator><op:operator pos:line="59" pos:column="60">.</op:operator><call><name pos:line="59" pos:column="61">ToList</name><argument_list pos:line="59" pos:column="67">()</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></for>
            <return pos:line="62" pos:column="13">return <expr><name><name pos:line="62" pos:column="20">prefixMap</name><index pos:line="62" pos:column="29">[<expr><name><name pos:line="62" pos:column="30">prefixes</name><index pos:line="62" pos:column="38">[<expr><name><name pos:line="62" pos:column="39">prefixes</name><op:operator pos:line="62" pos:column="47">.</op:operator><name pos:line="62" pos:column="48">Count</name></name> <op:operator pos:line="62" pos:column="54">-</op:operator> <lit:literal type="number" pos:line="62" pos:column="56">1</lit:literal></expr>]</index></name></expr>]</index></name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="65" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="66" pos:column="9">/// Instance method for getting &lt;see cref="NamePrefix.XmlName"/&gt;</comment>
        <comment type="line" pos:line="67" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="68" pos:column="9">/// &lt;returns&gt;Returns the XML name for NamePrefix&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="69" pos:column="9">public</specifier> <specifier pos:line="69" pos:column="16">override</specifier> <name pos:line="69" pos:column="25">string</name></type> <name pos:line="69" pos:column="32">GetXmlName</name><parameter_list pos:line="69" pos:column="42">()</parameter_list> <block pos:line="69" pos:column="45">{ <return pos:line="69" pos:column="47">return <expr><name><name pos:line="69" pos:column="54">NamePrefix</name><op:operator pos:line="69" pos:column="64">.</op:operator><name pos:line="69" pos:column="65">XmlName</name></name></expr>;</return> }</block></function>

        <comment type="line" pos:line="71" pos:column="9">/// &lt;summary&gt; Returns a string representation of this object. &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="72" pos:column="9">public</specifier> <specifier pos:line="72" pos:column="16">override</specifier> <name pos:line="72" pos:column="25">string</name></type> <name pos:line="72" pos:column="32">ToString</name><parameter_list pos:line="72" pos:column="40">()</parameter_list> <block pos:line="72" pos:column="43">{
            <return pos:line="73" pos:column="13">return <expr><call><name><name pos:line="73" pos:column="20">string</name><op:operator pos:line="73" pos:column="26">.</op:operator><name pos:line="73" pos:column="27">Join</name></name><argument_list pos:line="73" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="73" pos:column="32">""</lit:literal></expr></argument>, <argument><expr><name pos:line="73" pos:column="36">Components</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
