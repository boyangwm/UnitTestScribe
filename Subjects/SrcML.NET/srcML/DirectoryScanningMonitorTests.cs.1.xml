<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Test\DirectoryScanningMonitorTests.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2013 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - Initial implementation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">ABB</name><op:operator pos:line="12" pos:column="10">.</op:operator><name pos:line="12" pos:column="11">SrcML</name><op:operator pos:line="12" pos:column="16">.</op:operator><name pos:line="12" pos:column="17">Utilities</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">NUnit</name><op:operator pos:line="13" pos:column="12">.</op:operator><name pos:line="13" pos:column="13">Framework</name></name>;</using>
<using pos:line="14" pos:column="1">using <name pos:line="14" pos:column="7">System</name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Collections</name><op:operator pos:line="15" pos:column="25">.</op:operator><name pos:line="15" pos:column="26">Generic</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Diagnostics</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">IO</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Linq</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">System</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">Text</name></name>;</using>
<using pos:line="20" pos:column="1">using <name><name pos:line="20" pos:column="7">System</name><op:operator pos:line="20" pos:column="13">.</op:operator><name pos:line="20" pos:column="14">Threading</name></name>;</using>

<namespace pos:line="22" pos:column="1">namespace <name><name pos:line="22" pos:column="11">ABB</name><op:operator pos:line="22" pos:column="14">.</op:operator><name pos:line="22" pos:column="15">SrcML</name><op:operator pos:line="22" pos:column="20">.</op:operator><name pos:line="22" pos:column="21">Test</name></name> <block pos:line="22" pos:column="26">{

    <class><attribute pos:line="24" pos:column="5">[<expr><name pos:line="24" pos:column="6">TestFixture</name></expr><op:operator pos:line="24" pos:column="17">,</op:operator> <expr><call><name pos:line="24" pos:column="19">Category</name><argument_list pos:line="24" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="24" pos:column="28">"Build"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="25" pos:column="5">public</specifier> class <name pos:line="25" pos:column="18">DirectoryScanningMonitorTests</name> <block pos:line="25" pos:column="48">{
        <decl_stmt><decl><type><specifier pos:line="26" pos:column="9">private</specifier> <specifier pos:line="26" pos:column="17">const</specifier> <name pos:line="26" pos:column="23">string</name></type> <name pos:line="26" pos:column="30">monitorFolder</name> <init pos:line="26" pos:column="44">= <expr><lit:literal type="string" pos:line="26" pos:column="46">"monitor"</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="27" pos:column="9">private</specifier> <specifier pos:line="27" pos:column="17">const</specifier> <name pos:line="27" pos:column="23">int</name></type> <name pos:line="27" pos:column="27">numStartingFiles</name> <init pos:line="27" pos:column="44">= <expr><lit:literal type="number" pos:line="27" pos:column="46">100</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="28" pos:column="9">private</specifier> <specifier pos:line="28" pos:column="17">const</specifier> <name pos:line="28" pos:column="23">string</name></type> <name pos:line="28" pos:column="30">testFolder</name> <init pos:line="28" pos:column="41">= <expr><lit:literal type="string" pos:line="28" pos:column="43">"test"</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="29" pos:column="9">private</specifier> <specifier pos:line="29" pos:column="17">const</specifier> <name pos:line="29" pos:column="23">int</name></type> <name pos:line="29" pos:column="27">WaitInterval</name> <init pos:line="29" pos:column="40">= <expr><lit:literal type="number" pos:line="29" pos:column="42">5000</lit:literal></expr></init></decl>;</decl_stmt>
        <cpp:region pos:line="30" pos:column="9">#<cpp:directive pos:line="30" pos:column="10">region</cpp:directive> test setup</cpp:region>

        <function><type><attribute pos:line="32" pos:column="9">[<expr><name pos:line="32" pos:column="10">TearDown</name></expr>]</attribute>
        <specifier pos:line="33" pos:column="9">public</specifier> <name pos:line="33" pos:column="16">void</name></type> <name pos:line="33" pos:column="21">TestCleanup</name><parameter_list pos:line="33" pos:column="32">()</parameter_list> <block pos:line="33" pos:column="35">{
            <expr_stmt><expr><call><name><name pos:line="34" pos:column="13">Directory</name><op:operator pos:line="34" pos:column="22">.</op:operator><name pos:line="34" pos:column="23">Delete</name></name><argument_list pos:line="34" pos:column="29">(<argument><expr><name pos:line="34" pos:column="30">monitorFolder</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="34" pos:column="45">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="35" pos:column="13">Directory</name><op:operator pos:line="35" pos:column="22">.</op:operator><name pos:line="35" pos:column="23">Delete</name></name><argument_list pos:line="35" pos:column="29">(<argument><expr><name pos:line="35" pos:column="30">testFolder</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="35" pos:column="42">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="38" pos:column="9">[<expr><name pos:line="38" pos:column="10">SetUp</name></expr>]</attribute>
        <specifier pos:line="39" pos:column="9">public</specifier> <name pos:line="39" pos:column="16">void</name></type> <name pos:line="39" pos:column="21">TestSetup</name><parameter_list pos:line="39" pos:column="30">()</parameter_list> <block pos:line="39" pos:column="33">{
            <expr_stmt><expr><call><name><name pos:line="40" pos:column="13">Directory</name><op:operator pos:line="40" pos:column="22">.</op:operator><name pos:line="40" pos:column="23">CreateDirectory</name></name><argument_list pos:line="40" pos:column="38">(<argument><expr><name pos:line="40" pos:column="39">monitorFolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="41" pos:column="13">Directory</name><op:operator pos:line="41" pos:column="22">.</op:operator><name pos:line="41" pos:column="23">CreateDirectory</name></name><argument_list pos:line="41" pos:column="38">(<argument><expr><name pos:line="41" pos:column="39">testFolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for pos:line="42" pos:column="13">for(<init><decl><type><name pos:line="42" pos:column="17">int</name></type> <name pos:line="42" pos:column="21">i</name> <init pos:line="42" pos:column="23">= <expr><lit:literal type="number" pos:line="42" pos:column="25">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="42" pos:column="28">i</name> <op:operator pos:line="42" pos:column="30">&lt;</op:operator> <name pos:line="42" pos:column="32">numStartingFiles</name></expr>;</condition> <incr><expr><name pos:line="42" pos:column="50">i</name><op:operator pos:line="42" pos:column="51">++</op:operator></expr></incr>) <block pos:line="42" pos:column="55">{
                <expr_stmt><expr><call><name><name pos:line="43" pos:column="17">File</name><op:operator pos:line="43" pos:column="21">.</op:operator><name pos:line="43" pos:column="22">Create</name></name><argument_list pos:line="43" pos:column="28">(<argument><expr><call><name><name pos:line="43" pos:column="29">Path</name><op:operator pos:line="43" pos:column="33">.</op:operator><name pos:line="43" pos:column="34">Combine</name></name><argument_list pos:line="43" pos:column="41">(<argument><expr><name pos:line="43" pos:column="42">testFolder</name></expr></argument>, <argument><expr><call><name><name pos:line="43" pos:column="54">String</name><op:operator pos:line="43" pos:column="60">.</op:operator><name pos:line="43" pos:column="61">Format</name></name><argument_list pos:line="43" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="43" pos:column="68">"{0}.txt"</lit:literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="79">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="43" pos:column="83">.</op:operator><call><name pos:line="43" pos:column="84">Close</name><argument_list pos:line="43" pos:column="89">()</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></function>

        <cpp:endregion pos:line="47" pos:column="9">#<cpp:directive pos:line="47" pos:column="10">endregion</cpp:directive> test setup</cpp:endregion>

        <function><type><attribute pos:line="49" pos:column="9">[<expr><name pos:line="49" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="50" pos:column="9">public</specifier> <name pos:line="50" pos:column="16">void</name></type> <name pos:line="50" pos:column="21">TestAddDuplicateDirectory</name><parameter_list pos:line="50" pos:column="46">()</parameter_list> <block pos:line="50" pos:column="49">{
            <decl_stmt><decl><type><name pos:line="51" pos:column="13">var</name></type> <name pos:line="51" pos:column="17">archive</name> <init pos:line="51" pos:column="25">= <expr><op:operator pos:line="51" pos:column="27">new</op:operator> <call><name pos:line="51" pos:column="31">LastModifiedArchive</name><argument_list pos:line="51" pos:column="50">(<argument><expr><name pos:line="51" pos:column="51">monitorFolder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="52" pos:column="13">DirectoryScanningMonitor</name></type> <name pos:line="52" pos:column="38">monitor</name> <init pos:line="52" pos:column="46">= <expr><op:operator pos:line="52" pos:column="48">new</op:operator> <call><name pos:line="52" pos:column="52">DirectoryScanningMonitor</name><argument_list pos:line="52" pos:column="76">(<argument><expr><name pos:line="52" pos:column="77">monitorFolder</name></expr></argument>, <argument><expr><name pos:line="52" pos:column="92">archive</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="53" pos:column="13">AutoResetEvent</name></type> <name pos:line="53" pos:column="28">are</name> <init pos:line="53" pos:column="32">= <expr><op:operator pos:line="53" pos:column="34">new</op:operator> <call><name pos:line="53" pos:column="38">AutoResetEvent</name><argument_list pos:line="53" pos:column="52">(<argument><expr><lit:literal type="boolean" pos:line="53" pos:column="53">false</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="54" pos:column="13">monitor</name><op:operator pos:line="54" pos:column="20">.</op:operator><name pos:line="54" pos:column="21">DirectoryAdded</name></name> <op:operator pos:line="54" pos:column="36">+=</op:operator> <lambda><parameter_list pos:line="54" pos:column="39">(<param><decl><name pos:line="54" pos:column="40">o</name></decl></param>, <param><decl><name pos:line="54" pos:column="43">e</name></decl></param>)</parameter_list> <op:operator pos:line="54" pos:column="46">=&gt;</op:operator> <block pos:line="54" pos:column="49">{ <expr_stmt><expr><call><name><name pos:line="54" pos:column="51">are</name><op:operator pos:line="54" pos:column="54">.</op:operator><name pos:line="54" pos:column="55">Set</name></name><argument_list pos:line="54" pos:column="58">()</argument_list></call></expr>;</expr_stmt> }</block></lambda></expr>;</expr_stmt>
            
            <expr_stmt><expr><call><name><name pos:line="56" pos:column="13">monitor</name><op:operator pos:line="56" pos:column="20">.</op:operator><name pos:line="56" pos:column="21">AddDirectory</name></name><argument_list pos:line="56" pos:column="33">(<argument><expr><name pos:line="56" pos:column="34">testFolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="57" pos:column="13">Assert</name><op:operator pos:line="57" pos:column="19">.</op:operator><name pos:line="57" pos:column="20">IsTrue</name></name><argument_list pos:line="57" pos:column="26">(<argument><expr><call><name><name pos:line="57" pos:column="27">are</name><op:operator pos:line="57" pos:column="30">.</op:operator><name pos:line="57" pos:column="31">WaitOne</name></name><argument_list pos:line="57" pos:column="38">(<argument><expr><name pos:line="57" pos:column="39">WaitInterval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="59" pos:column="13">monitor</name><op:operator pos:line="59" pos:column="20">.</op:operator><name pos:line="59" pos:column="21">AddDirectory</name></name><argument_list pos:line="59" pos:column="33">(<argument><expr><name pos:line="59" pos:column="34">testFolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="60" pos:column="13">Assert</name><op:operator pos:line="60" pos:column="19">.</op:operator><name pos:line="60" pos:column="20">IsFalse</name></name><argument_list pos:line="60" pos:column="27">(<argument><expr><call><name><name pos:line="60" pos:column="28">are</name><op:operator pos:line="60" pos:column="31">.</op:operator><name pos:line="60" pos:column="32">WaitOne</name></name><argument_list pos:line="60" pos:column="39">(<argument><expr><name pos:line="60" pos:column="40">WaitInterval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="62" pos:column="13">Assert</name><op:operator pos:line="62" pos:column="19">.</op:operator><name pos:line="62" pos:column="20">AreEqual</name></name><argument_list pos:line="62" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="62" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="62" pos:column="32">monitor</name><op:operator pos:line="62" pos:column="39">.</op:operator><name pos:line="62" pos:column="40">MonitoredDirectories</name><op:operator pos:line="62" pos:column="60">.</op:operator><name pos:line="62" pos:column="61">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="65" pos:column="9">[<expr><name pos:line="65" pos:column="10">Test</name></expr><op:operator pos:line="65" pos:column="14">,</op:operator> <expr><call><name pos:line="65" pos:column="16">ExpectedException</name><argument_list pos:line="65" pos:column="33">(<argument><expr><name pos:line="65" pos:column="34">ExpectedException</name> <op:operator pos:line="65" pos:column="52">=</op:operator> <call><name pos:line="65" pos:column="54">typeof</name><argument_list pos:line="65" pos:column="60">(<argument><expr><name pos:line="65" pos:column="61">DirectoryScanningMonitorSubDirectoryException</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="66" pos:column="9">public</specifier> <name pos:line="66" pos:column="16">void</name></type> <name pos:line="66" pos:column="21">TestAddSubdirectory</name><parameter_list pos:line="66" pos:column="40">()</parameter_list> <block pos:line="66" pos:column="43">{
            <decl_stmt><decl><type><name pos:line="67" pos:column="13">var</name></type> <name pos:line="67" pos:column="17">archive</name> <init pos:line="67" pos:column="25">= <expr><op:operator pos:line="67" pos:column="27">new</op:operator> <call><name pos:line="67" pos:column="31">LastModifiedArchive</name><argument_list pos:line="67" pos:column="50">(<argument><expr><name pos:line="67" pos:column="51">monitorFolder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="68" pos:column="13">DirectoryScanningMonitor</name></type> <name pos:line="68" pos:column="38">monitor</name> <init pos:line="68" pos:column="46">= <expr><op:operator pos:line="68" pos:column="48">new</op:operator> <call><name pos:line="68" pos:column="52">DirectoryScanningMonitor</name><argument_list pos:line="68" pos:column="76">(<argument><expr><name pos:line="68" pos:column="77">monitorFolder</name></expr></argument>, <argument><expr><name pos:line="68" pos:column="92">archive</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="69" pos:column="13">AutoResetEvent</name></type> <name pos:line="69" pos:column="28">are</name> <init pos:line="69" pos:column="32">= <expr><op:operator pos:line="69" pos:column="34">new</op:operator> <call><name pos:line="69" pos:column="38">AutoResetEvent</name><argument_list pos:line="69" pos:column="52">(<argument><expr><lit:literal type="boolean" pos:line="69" pos:column="53">false</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="70" pos:column="13">monitor</name><op:operator pos:line="70" pos:column="20">.</op:operator><name pos:line="70" pos:column="21">DirectoryAdded</name></name> <op:operator pos:line="70" pos:column="36">+=</op:operator> <lambda><parameter_list pos:line="70" pos:column="39">(<param><decl><name pos:line="70" pos:column="40">o</name></decl></param>, <param><decl><name pos:line="70" pos:column="43">e</name></decl></param>)</parameter_list> <op:operator pos:line="70" pos:column="46">=&gt;</op:operator> <call><name><name pos:line="70" pos:column="49">are</name><op:operator pos:line="70" pos:column="52">.</op:operator><name pos:line="70" pos:column="53">Set</name></name><argument_list pos:line="70" pos:column="56">()</argument_list></call></lambda></expr>;</expr_stmt>
            
            <expr_stmt><expr><call><name><name pos:line="72" pos:column="13">monitor</name><op:operator pos:line="72" pos:column="20">.</op:operator><name pos:line="72" pos:column="21">AddDirectory</name></name><argument_list pos:line="72" pos:column="33">(<argument><expr><name pos:line="72" pos:column="34">testFolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="73" pos:column="13">Assert</name><op:operator pos:line="73" pos:column="19">.</op:operator><name pos:line="73" pos:column="20">IsTrue</name></name><argument_list pos:line="73" pos:column="26">(<argument><expr><call><name><name pos:line="73" pos:column="27">are</name><op:operator pos:line="73" pos:column="30">.</op:operator><name pos:line="73" pos:column="31">WaitOne</name></name><argument_list pos:line="73" pos:column="38">(<argument><expr><name pos:line="73" pos:column="39">WaitInterval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="74" pos:column="13">monitor</name><op:operator pos:line="74" pos:column="20">.</op:operator><name pos:line="74" pos:column="21">AddDirectory</name></name><argument_list pos:line="74" pos:column="33">(<argument><expr><call><name><name pos:line="74" pos:column="34">Path</name><op:operator pos:line="74" pos:column="38">.</op:operator><name pos:line="74" pos:column="39">Combine</name></name><argument_list pos:line="74" pos:column="46">(<argument><expr><name pos:line="74" pos:column="47">testFolder</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="74" pos:column="59">"test"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="75" pos:column="13">//Assert.IsFalse(are.WaitOne(WaitInterval));</comment>
        }</block></function>

        <function><type><attribute pos:line="78" pos:column="9">[<expr><name pos:line="78" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="79" pos:column="9">public</specifier> <name pos:line="79" pos:column="16">void</name></type> <name pos:line="79" pos:column="21">TestAddSimilarDirectory</name><parameter_list pos:line="79" pos:column="44">()</parameter_list> <block pos:line="79" pos:column="47">{
            <decl_stmt><decl><type><name pos:line="80" pos:column="13">var</name></type> <name pos:line="80" pos:column="17">archive</name> <init pos:line="80" pos:column="25">= <expr><op:operator pos:line="80" pos:column="27">new</op:operator> <call><name pos:line="80" pos:column="31">LastModifiedArchive</name><argument_list pos:line="80" pos:column="50">(<argument><expr><name pos:line="80" pos:column="51">monitorFolder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="81" pos:column="13">DirectoryScanningMonitor</name></type> <name pos:line="81" pos:column="38">monitor</name> <init pos:line="81" pos:column="46">= <expr><op:operator pos:line="81" pos:column="48">new</op:operator> <call><name pos:line="81" pos:column="52">DirectoryScanningMonitor</name><argument_list pos:line="81" pos:column="76">(<argument><expr><name pos:line="81" pos:column="77">monitorFolder</name></expr></argument>, <argument><expr><name pos:line="81" pos:column="92">archive</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="82" pos:column="13">AutoResetEvent</name></type> <name pos:line="82" pos:column="28">are</name> <init pos:line="82" pos:column="32">= <expr><op:operator pos:line="82" pos:column="34">new</op:operator> <call><name pos:line="82" pos:column="38">AutoResetEvent</name><argument_list pos:line="82" pos:column="52">(<argument><expr><lit:literal type="boolean" pos:line="82" pos:column="53">false</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="83" pos:column="13">monitor</name><op:operator pos:line="83" pos:column="20">.</op:operator><name pos:line="83" pos:column="21">DirectoryAdded</name></name> <op:operator pos:line="83" pos:column="36">+=</op:operator> <lambda><parameter_list pos:line="83" pos:column="39">(<param><decl><name pos:line="83" pos:column="40">o</name></decl></param>, <param><decl><name pos:line="83" pos:column="43">e</name></decl></param>)</parameter_list> <op:operator pos:line="83" pos:column="46">=&gt;</op:operator> <call><name><name pos:line="83" pos:column="49">are</name><op:operator pos:line="83" pos:column="52">.</op:operator><name pos:line="83" pos:column="53">Set</name></name><argument_list pos:line="83" pos:column="56">()</argument_list></call></lambda></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="85" pos:column="13">monitor</name><op:operator pos:line="85" pos:column="20">.</op:operator><name pos:line="85" pos:column="21">AddDirectory</name></name><argument_list pos:line="85" pos:column="33">(<argument><expr><name pos:line="85" pos:column="34">testFolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="86" pos:column="13">Assert</name><op:operator pos:line="86" pos:column="19">.</op:operator><name pos:line="86" pos:column="20">IsTrue</name></name><argument_list pos:line="86" pos:column="26">(<argument><expr><call><name><name pos:line="86" pos:column="27">are</name><op:operator pos:line="86" pos:column="30">.</op:operator><name pos:line="86" pos:column="31">WaitOne</name></name><argument_list pos:line="86" pos:column="38">(<argument><expr><name pos:line="86" pos:column="39">WaitInterval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="87" pos:column="13">monitor</name><op:operator pos:line="87" pos:column="20">.</op:operator><name pos:line="87" pos:column="21">AddDirectory</name></name><argument_list pos:line="87" pos:column="33">(<argument><expr><name pos:line="87" pos:column="34">testFolder</name> <op:operator pos:line="87" pos:column="45">+</op:operator> <lit:literal type="string" pos:line="87" pos:column="47">"NotSubDirectory"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="88" pos:column="13">Assert</name><op:operator pos:line="88" pos:column="19">.</op:operator><name pos:line="88" pos:column="20">IsTrue</name></name><argument_list pos:line="88" pos:column="26">(<argument><expr><call><name><name pos:line="88" pos:column="27">are</name><op:operator pos:line="88" pos:column="30">.</op:operator><name pos:line="88" pos:column="31">WaitOne</name></name><argument_list pos:line="88" pos:column="38">(<argument><expr><name pos:line="88" pos:column="39">WaitInterval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="91" pos:column="9">[<expr><name pos:line="91" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="92" pos:column="9">public</specifier> <name pos:line="92" pos:column="16">void</name></type> <name pos:line="92" pos:column="21">TestEmptyMonitor</name><parameter_list pos:line="92" pos:column="37">()</parameter_list> <block pos:line="92" pos:column="40">{
            <using pos:line="93" pos:column="13">using(<decl><type><name pos:line="93" pos:column="19">var</name></type> <name pos:line="93" pos:column="23">monitor</name> <init pos:line="93" pos:column="31">= <expr><op:operator pos:line="93" pos:column="33">new</op:operator> <call><name pos:line="93" pos:column="37">DirectoryScanningMonitor</name><argument_list pos:line="93" pos:column="61">(<argument><expr><name pos:line="93" pos:column="62">monitorFolder</name></expr></argument>, <argument><expr><name><name pos:line="93" pos:column="77">DirectoryScanningMonitor</name><op:operator pos:line="93" pos:column="101">.</op:operator><name pos:line="93" pos:column="102">DEFAULT_SCAN_INTERVAL</name></name></expr></argument>)</argument_list></call></expr></init></decl>) <block pos:line="93" pos:column="126">{
                <expr_stmt><expr><call><name><name pos:line="94" pos:column="17">monitor</name><op:operator pos:line="94" pos:column="24">.</op:operator><name pos:line="94" pos:column="25">AddDirectory</name></name><argument_list pos:line="94" pos:column="37">(<argument><expr><name pos:line="94" pos:column="38">testFolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="95" pos:column="17">monitor</name><op:operator pos:line="95" pos:column="24">.</op:operator><name pos:line="95" pos:column="25">FileChanged</name></name> <op:operator pos:line="95" pos:column="37">+=</op:operator> <lambda><parameter_list pos:line="95" pos:column="40">(<param><decl><name pos:line="95" pos:column="41">o</name></decl></param>, <param><decl><name pos:line="95" pos:column="44">e</name></decl></param>)</parameter_list> <op:operator pos:line="95" pos:column="47">=&gt;</op:operator> <call><name><name pos:line="95" pos:column="50">Assert</name><op:operator pos:line="95" pos:column="56">.</op:operator><name pos:line="95" pos:column="57">Fail</name></name><argument_list pos:line="95" pos:column="61">(<argument><expr><name><name pos:line="95" pos:column="62">e</name><op:operator pos:line="95" pos:column="63">.</op:operator><name pos:line="95" pos:column="64">FilePath</name></name></expr></argument>)</argument_list></call></lambda></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="96" pos:column="17">monitor</name><op:operator pos:line="96" pos:column="24">.</op:operator><name pos:line="96" pos:column="25">UpdateArchives</name></name><argument_list pos:line="96" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
            }</block></using>
        }</block></function>

        <function><type><attribute pos:line="100" pos:column="9">[<expr><name pos:line="100" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="101" pos:column="9">public</specifier> <name pos:line="101" pos:column="16">void</name></type> <name pos:line="101" pos:column="21">TestExcludedDirectory</name><parameter_list pos:line="101" pos:column="42">()</parameter_list> <block pos:line="101" pos:column="45">{
            <decl_stmt><decl><type><name pos:line="102" pos:column="13">var</name></type> <name pos:line="102" pos:column="17">testExcludedDirectoryPath</name> <init pos:line="102" pos:column="43">= <expr><call><name><name pos:line="102" pos:column="45">Path</name><op:operator pos:line="102" pos:column="49">.</op:operator><name pos:line="102" pos:column="50">Combine</name></name><argument_list pos:line="102" pos:column="57">(<argument><expr><name pos:line="102" pos:column="58">testFolder</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="102" pos:column="70">"TestExcludedDirectory"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="103" pos:column="13">var</name></type> <name pos:line="103" pos:column="17">excludedFolders</name> <init pos:line="103" pos:column="33">= <expr><op:operator pos:line="103" pos:column="35">new</op:operator> <name><name pos:line="103" pos:column="39">string</name><index pos:line="103" pos:column="45">[]</index></name> <block pos:line="103" pos:column="48">{
                <expr><call><name><name pos:line="104" pos:column="17">Path</name><op:operator pos:line="104" pos:column="21">.</op:operator><name pos:line="104" pos:column="22">Combine</name></name><argument_list pos:line="104" pos:column="29">(<argument><expr><name pos:line="104" pos:column="30">testExcludedDirectoryPath</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="104" pos:column="57">"TestResults"</lit:literal></expr></argument>)</argument_list></call></expr>,
                <expr><call><name><name pos:line="105" pos:column="17">Path</name><op:operator pos:line="105" pos:column="21">.</op:operator><name pos:line="105" pos:column="22">Combine</name></name><argument_list pos:line="105" pos:column="29">(<argument><expr><name pos:line="105" pos:column="30">testExcludedDirectoryPath</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="105" pos:column="57">"Backup"</lit:literal></expr></argument>)</argument_list></call></expr>,
                <expr><call><name><name pos:line="106" pos:column="17">Path</name><op:operator pos:line="106" pos:column="21">.</op:operator><name pos:line="106" pos:column="22">Combine</name></name><argument_list pos:line="106" pos:column="29">(<argument><expr><name pos:line="106" pos:column="30">testExcludedDirectoryPath</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="106" pos:column="57">"Backup1"</lit:literal></expr></argument>)</argument_list></call></expr>,
                <expr><call><name><name pos:line="107" pos:column="17">Path</name><op:operator pos:line="107" pos:column="21">.</op:operator><name pos:line="107" pos:column="22">Combine</name></name><argument_list pos:line="107" pos:column="29">(<argument><expr><name pos:line="107" pos:column="30">testExcludedDirectoryPath</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="107" pos:column="57">"backup111"</lit:literal></expr></argument>)</argument_list></call></expr>,
                <expr><call><name><name pos:line="108" pos:column="17">Path</name><op:operator pos:line="108" pos:column="21">.</op:operator><name pos:line="108" pos:column="22">Combine</name></name><argument_list pos:line="108" pos:column="29">(<argument><expr><name pos:line="108" pos:column="30">testExcludedDirectoryPath</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="108" pos:column="57">".test"</lit:literal></expr></argument>)</argument_list></call></expr>
            }</block></expr></init></decl>;</decl_stmt>

            <foreach pos:line="111" pos:column="13">foreach(<init><decl><type><name pos:line="111" pos:column="21">var</name></type> <name pos:line="111" pos:column="25">folder</name> <range pos:line="111" pos:column="32">in <expr><name pos:line="111" pos:column="35">excludedFolders</name></expr></range></decl></init>) <block pos:line="111" pos:column="52">{
                <expr_stmt><expr><call><name><name pos:line="112" pos:column="17">Directory</name><op:operator pos:line="112" pos:column="26">.</op:operator><name pos:line="112" pos:column="27">CreateDirectory</name></name><argument_list pos:line="112" pos:column="42">(<argument><expr><name pos:line="112" pos:column="43">folder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="113" pos:column="17">File</name><op:operator pos:line="113" pos:column="21">.</op:operator><name pos:line="113" pos:column="22">Create</name></name><argument_list pos:line="113" pos:column="28">(<argument><expr><call><name><name pos:line="113" pos:column="29">Path</name><op:operator pos:line="113" pos:column="33">.</op:operator><name pos:line="113" pos:column="34">Combine</name></name><argument_list pos:line="113" pos:column="41">(<argument><expr><name pos:line="113" pos:column="42">folder</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="113" pos:column="50">"test.txt"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="113" pos:column="62">.</op:operator><call><name pos:line="113" pos:column="63">Close</name><argument_list pos:line="113" pos:column="68">()</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>

            <decl_stmt><decl><type><name pos:line="116" pos:column="13">var</name></type> <name pos:line="116" pos:column="17">archive</name> <init pos:line="116" pos:column="25">= <expr><op:operator pos:line="116" pos:column="27">new</op:operator> <call><name pos:line="116" pos:column="31">LastModifiedArchive</name><argument_list pos:line="116" pos:column="50">(<argument><expr><name pos:line="116" pos:column="51">monitorFolder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <using pos:line="117" pos:column="13">using(<decl><type><name pos:line="117" pos:column="19">var</name></type> <name pos:line="117" pos:column="23">monitor</name> <init pos:line="117" pos:column="31">= <expr><op:operator pos:line="117" pos:column="33">new</op:operator> <call><name pos:line="117" pos:column="37">DirectoryScanningMonitor</name><argument_list pos:line="117" pos:column="61">(<argument><expr><name pos:line="117" pos:column="62">monitorFolder</name></expr></argument>, <argument><expr><name pos:line="117" pos:column="77">archive</name></expr></argument>)</argument_list></call></expr></init></decl>) <block pos:line="117" pos:column="87">{
                <expr_stmt><expr><call><name><name pos:line="118" pos:column="17">monitor</name><op:operator pos:line="118" pos:column="24">.</op:operator><name pos:line="118" pos:column="25">AddDirectory</name></name><argument_list pos:line="118" pos:column="37">(<argument><expr><name pos:line="118" pos:column="38">testExcludedDirectoryPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="119" pos:column="17">Assert</name><op:operator pos:line="119" pos:column="23">.</op:operator><name pos:line="119" pos:column="24">AreEqual</name></name><argument_list pos:line="119" pos:column="32">(<argument><expr><lit:literal type="number" pos:line="119" pos:column="33">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="119" pos:column="36">monitor</name><op:operator pos:line="119" pos:column="43">.</op:operator><name pos:line="119" pos:column="44">GetFilesFromSource</name></name><argument_list pos:line="119" pos:column="62">()</argument_list></call><op:operator pos:line="119" pos:column="64">.</op:operator><name pos:line="119" pos:column="65">Count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></using>
        }</block></function>

        <function><type><attribute pos:line="123" pos:column="9">[<expr><name pos:line="123" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="124" pos:column="9">public</specifier> <name pos:line="124" pos:column="16">void</name></type> <name pos:line="124" pos:column="21">TestExcludedFiles</name><parameter_list pos:line="124" pos:column="38">()</parameter_list> <block pos:line="124" pos:column="41">{
            <decl_stmt><decl><type><name pos:line="125" pos:column="13">var</name></type> <name pos:line="125" pos:column="17">testDirectoryPath</name> <init pos:line="125" pos:column="35">= <expr><call><name><name pos:line="125" pos:column="37">Path</name><op:operator pos:line="125" pos:column="41">.</op:operator><name pos:line="125" pos:column="42">Combine</name></name><argument_list pos:line="125" pos:column="49">(<argument><expr><name pos:line="125" pos:column="50">testFolder</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="125" pos:column="62">"TestExcludedFiles"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="126" pos:column="13">var</name></type> <name pos:line="126" pos:column="17">exludedFiles</name> <init pos:line="126" pos:column="30">= <expr><op:operator pos:line="126" pos:column="32">new</op:operator> <name><name pos:line="126" pos:column="36">string</name><index pos:line="126" pos:column="42">[]</index></name> <block pos:line="126" pos:column="45">{
                <expr><call><name><name pos:line="127" pos:column="17">Path</name><op:operator pos:line="127" pos:column="21">.</op:operator><name pos:line="127" pos:column="22">Combine</name></name><argument_list pos:line="127" pos:column="29">(<argument><expr><name pos:line="127" pos:column="30">testDirectoryPath</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="127" pos:column="49">".test.txt"</lit:literal></expr></argument>)</argument_list></call></expr>,
                <expr><call><name><name pos:line="128" pos:column="17">Path</name><op:operator pos:line="128" pos:column="21">.</op:operator><name pos:line="128" pos:column="22">Combine</name></name><argument_list pos:line="128" pos:column="29">(<argument><expr><name pos:line="128" pos:column="30">testDirectoryPath</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="128" pos:column="49">"#test.txt"</lit:literal></expr></argument>)</argument_list></call></expr>,
                <expr><call><name><name pos:line="129" pos:column="17">Path</name><op:operator pos:line="129" pos:column="21">.</op:operator><name pos:line="129" pos:column="22">Combine</name></name><argument_list pos:line="129" pos:column="29">(<argument><expr><name pos:line="129" pos:column="30">testDirectoryPath</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="129" pos:column="49">"~autorecover.test.txt"</lit:literal></expr></argument>)</argument_list></call></expr>,
                <expr><call><name><name pos:line="130" pos:column="17">Path</name><op:operator pos:line="130" pos:column="21">.</op:operator><name pos:line="130" pos:column="22">Combine</name></name><argument_list pos:line="130" pos:column="29">(<argument><expr><name pos:line="130" pos:column="30">testDirectoryPath</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="130" pos:column="49">"~test.txt"</lit:literal></expr></argument>)</argument_list></call></expr>,
            }</block></expr></init></decl>;</decl_stmt>
            
            <expr_stmt><expr><call><name><name pos:line="133" pos:column="13">Directory</name><op:operator pos:line="133" pos:column="22">.</op:operator><name pos:line="133" pos:column="23">CreateDirectory</name></name><argument_list pos:line="133" pos:column="38">(<argument><expr><name pos:line="133" pos:column="39">testDirectoryPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <foreach pos:line="134" pos:column="13">foreach(<init><decl><type><name pos:line="134" pos:column="21">var</name></type> <name pos:line="134" pos:column="25">filePath</name> <range pos:line="134" pos:column="34">in <expr><name pos:line="134" pos:column="37">exludedFiles</name></expr></range></decl></init>) <block pos:line="134" pos:column="51">{
                <expr_stmt><expr><call><name><name pos:line="135" pos:column="17">File</name><op:operator pos:line="135" pos:column="21">.</op:operator><name pos:line="135" pos:column="22">Create</name></name><argument_list pos:line="135" pos:column="28">(<argument><expr><name pos:line="135" pos:column="29">filePath</name></expr></argument>)</argument_list></call><op:operator pos:line="135" pos:column="38">.</op:operator><call><name pos:line="135" pos:column="39">Close</name><argument_list pos:line="135" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>

            <decl_stmt><decl><type><name pos:line="138" pos:column="13">var</name></type> <name pos:line="138" pos:column="17">archive</name> <init pos:line="138" pos:column="25">= <expr><op:operator pos:line="138" pos:column="27">new</op:operator> <call><name pos:line="138" pos:column="31">LastModifiedArchive</name><argument_list pos:line="138" pos:column="50">(<argument><expr><name pos:line="138" pos:column="51">monitorFolder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <using pos:line="139" pos:column="13">using(<decl><type><name pos:line="139" pos:column="19">var</name></type> <name pos:line="139" pos:column="23">monitor</name> <init pos:line="139" pos:column="31">= <expr><op:operator pos:line="139" pos:column="33">new</op:operator> <call><name pos:line="139" pos:column="37">DirectoryScanningMonitor</name><argument_list pos:line="139" pos:column="61">(<argument><expr><name pos:line="139" pos:column="62">monitorFolder</name></expr></argument>, <argument><expr><name pos:line="139" pos:column="77">archive</name></expr></argument>)</argument_list></call></expr></init></decl>) <block pos:line="139" pos:column="87">{
                <expr_stmt><expr><call><name><name pos:line="140" pos:column="17">monitor</name><op:operator pos:line="140" pos:column="24">.</op:operator><name pos:line="140" pos:column="25">AddDirectory</name></name><argument_list pos:line="140" pos:column="37">(<argument><expr><name pos:line="140" pos:column="38">testDirectoryPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="141" pos:column="17">Assert</name><op:operator pos:line="141" pos:column="23">.</op:operator><name pos:line="141" pos:column="24">AreEqual</name></name><argument_list pos:line="141" pos:column="32">(<argument><expr><lit:literal type="number" pos:line="141" pos:column="33">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="141" pos:column="36">monitor</name><op:operator pos:line="141" pos:column="43">.</op:operator><name pos:line="141" pos:column="44">GetFilesFromSource</name></name><argument_list pos:line="141" pos:column="62">()</argument_list></call><op:operator pos:line="141" pos:column="64">.</op:operator><name pos:line="141" pos:column="65">Count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></using>
        }</block></function>
        <function><type><attribute pos:line="144" pos:column="9">[<expr><name pos:line="144" pos:column="10">Test</name></expr><op:operator pos:line="144" pos:column="14">,</op:operator> <expr><call><name pos:line="144" pos:column="16">ExpectedException</name><argument_list pos:line="144" pos:column="33">(<argument><expr><name pos:line="144" pos:column="34">ExpectedException</name><op:operator pos:line="144" pos:column="51">=</op:operator><call><name pos:line="144" pos:column="52">typeof</name><argument_list pos:line="144" pos:column="58">(<argument><expr><name pos:line="144" pos:column="59">ForbiddenDirectoryException</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="145" pos:column="9">public</specifier> <name pos:line="145" pos:column="16">void</name></type> <name pos:line="145" pos:column="21">TestForbiddenDirectory</name><parameter_list pos:line="145" pos:column="43">()</parameter_list> <block pos:line="145" pos:column="46">{
            <decl_stmt><decl><type><name pos:line="146" pos:column="13">var</name></type> <name pos:line="146" pos:column="17">forbiddenDirectory</name> <init pos:line="146" pos:column="36">= <expr><call><name><name pos:line="146" pos:column="38">Environment</name><op:operator pos:line="146" pos:column="49">.</op:operator><name pos:line="146" pos:column="50">GetEnvironmentVariable</name></name><argument_list pos:line="146" pos:column="72">(<argument><expr><lit:literal type="string" pos:line="146" pos:column="73">"USERPROFILE"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="147" pos:column="13">var</name></type> <name pos:line="147" pos:column="17">archive</name> <init pos:line="147" pos:column="25">= <expr><op:operator pos:line="147" pos:column="27">new</op:operator> <call><name pos:line="147" pos:column="31">LastModifiedArchive</name><argument_list pos:line="147" pos:column="50">(<argument><expr><name pos:line="147" pos:column="51">monitorFolder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="148" pos:column="13">var</name></type> <name pos:line="148" pos:column="17">monitor</name> <init pos:line="148" pos:column="25">= <expr><op:operator pos:line="148" pos:column="27">new</op:operator> <call><name pos:line="148" pos:column="31">DirectoryScanningMonitor</name><argument_list pos:line="148" pos:column="55">(<argument><expr><name pos:line="148" pos:column="56">monitorFolder</name></expr></argument>, <argument><expr><name pos:line="148" pos:column="71">archive</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="149" pos:column="13">monitor</name><op:operator pos:line="149" pos:column="20">.</op:operator><name pos:line="149" pos:column="21">AddDirectory</name></name><argument_list pos:line="149" pos:column="33">(<argument><expr><name pos:line="149" pos:column="34">forbiddenDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <function><type><attribute pos:line="151" pos:column="9">[<expr><name pos:line="151" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="152" pos:column="9">public</specifier> <name pos:line="152" pos:column="16">void</name></type> <name pos:line="152" pos:column="21">TestFileChanges</name><parameter_list pos:line="152" pos:column="36">()</parameter_list> <block pos:line="152" pos:column="39">{
            <decl_stmt><decl><type><name pos:line="153" pos:column="13">var</name></type> <name pos:line="153" pos:column="17">archive</name> <init pos:line="153" pos:column="25">= <expr><op:operator pos:line="153" pos:column="27">new</op:operator> <call><name pos:line="153" pos:column="31">LastModifiedArchive</name><argument_list pos:line="153" pos:column="50">(<argument><expr><name pos:line="153" pos:column="51">monitorFolder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="154" pos:column="13">DirectoryScanningMonitor</name></type> <name pos:line="154" pos:column="38">monitor</name> <init pos:line="154" pos:column="46">= <expr><op:operator pos:line="154" pos:column="48">new</op:operator> <call><name pos:line="154" pos:column="52">DirectoryScanningMonitor</name><argument_list pos:line="154" pos:column="76">(<argument><expr><name pos:line="154" pos:column="77">monitorFolder</name></expr></argument>, <argument><expr><name pos:line="154" pos:column="92">archive</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="155" pos:column="13">monitor</name><op:operator pos:line="155" pos:column="20">.</op:operator><name pos:line="155" pos:column="21">ScanInterval</name></name> <op:operator pos:line="155" pos:column="34">=</op:operator> <lit:literal type="number" pos:line="155" pos:column="36">1</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="156" pos:column="13">monitor</name><op:operator pos:line="156" pos:column="20">.</op:operator><name pos:line="156" pos:column="21">AddDirectory</name></name><argument_list pos:line="156" pos:column="33">(<argument><expr><name pos:line="156" pos:column="34">testFolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="157" pos:column="13">monitor</name><op:operator pos:line="157" pos:column="20">.</op:operator><name pos:line="157" pos:column="21">UpdateArchives</name></name><argument_list pos:line="157" pos:column="35">()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="159" pos:column="13">AutoResetEvent</name></type> <name pos:line="159" pos:column="28">are</name> <init pos:line="159" pos:column="32">= <expr><op:operator pos:line="159" pos:column="34">new</op:operator> <call><name pos:line="159" pos:column="38">AutoResetEvent</name><argument_list pos:line="159" pos:column="52">(<argument><expr><lit:literal type="boolean" pos:line="159" pos:column="53">false</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="160" pos:column="13">var</name></type> <name pos:line="160" pos:column="17">expectedEventType</name> <init pos:line="160" pos:column="35">= <expr><name><name pos:line="160" pos:column="37">FileEventType</name><op:operator pos:line="160" pos:column="50">.</op:operator><name pos:line="160" pos:column="51">FileAdded</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="161" pos:column="13">var</name></type> <name pos:line="161" pos:column="17">expectedFileName</name> <init pos:line="161" pos:column="34">= <expr><call><name><name pos:line="161" pos:column="36">Path</name><op:operator pos:line="161" pos:column="40">.</op:operator><name pos:line="161" pos:column="41">GetFullPath</name></name><argument_list pos:line="161" pos:column="52">(<argument><expr><call><name><name pos:line="161" pos:column="53">Path</name><op:operator pos:line="161" pos:column="57">.</op:operator><name pos:line="161" pos:column="58">Combine</name></name><argument_list pos:line="161" pos:column="65">(<argument><expr><name pos:line="161" pos:column="66">testFolder</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="161" pos:column="78">"new.txt"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="162" pos:column="13">monitor</name><op:operator pos:line="162" pos:column="20">.</op:operator><name pos:line="162" pos:column="21">FileChanged</name></name> <op:operator pos:line="162" pos:column="33">+=</op:operator> <lambda><parameter_list pos:line="162" pos:column="36">(<param><decl><name pos:line="162" pos:column="37">o</name></decl></param>, <param><decl><name pos:line="162" pos:column="40">e</name></decl></param>)</parameter_list> <op:operator pos:line="162" pos:column="43">=&gt;</op:operator> <block pos:line="162" pos:column="46">{
                <if pos:line="163" pos:column="17">if<condition pos:line="163" pos:column="19">(<expr><name><name pos:line="163" pos:column="20">e</name><op:operator pos:line="163" pos:column="21">.</op:operator><name pos:line="163" pos:column="22">EventType</name></name> <op:operator pos:line="163" pos:column="32">==</op:operator> <name pos:line="163" pos:column="35">expectedEventType</name> <op:operator pos:line="163" pos:column="53">&amp;&amp;</op:operator> <name><name pos:line="163" pos:column="56">e</name><op:operator pos:line="163" pos:column="57">.</op:operator><name pos:line="163" pos:column="58">FilePath</name></name> <op:operator pos:line="163" pos:column="67">==</op:operator> <name pos:line="163" pos:column="70">expectedFileName</name></expr>)</condition><then pos:line="163" pos:column="87"> <block pos:line="163" pos:column="88">{
                    <expr_stmt><expr><call><name><name pos:line="164" pos:column="21">are</name><op:operator pos:line="164" pos:column="24">.</op:operator><name pos:line="164" pos:column="25">Set</name></name><argument_list pos:line="164" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></lambda></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="167" pos:column="13">monitor</name><op:operator pos:line="167" pos:column="20">.</op:operator><name pos:line="167" pos:column="21">StartMonitoring</name></name><argument_list pos:line="167" pos:column="36">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="169" pos:column="13">File</name><op:operator pos:line="169" pos:column="17">.</op:operator><name pos:line="169" pos:column="18">Create</name></name><argument_list pos:line="169" pos:column="24">(<argument><expr><name pos:line="169" pos:column="25">expectedFileName</name></expr></argument>)</argument_list></call><op:operator pos:line="169" pos:column="42">.</op:operator><call><name pos:line="169" pos:column="43">Close</name><argument_list pos:line="169" pos:column="48">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="170" pos:column="13">Assert</name><op:operator pos:line="170" pos:column="19">.</op:operator><name pos:line="170" pos:column="20">IsTrue</name></name><argument_list pos:line="170" pos:column="26">(<argument><expr><call><name><name pos:line="170" pos:column="27">are</name><op:operator pos:line="170" pos:column="30">.</op:operator><name pos:line="170" pos:column="31">WaitOne</name></name><argument_list pos:line="170" pos:column="38">(<argument><expr><name pos:line="170" pos:column="39">WaitInterval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="172" pos:column="13">expectedEventType</name> <op:operator pos:line="172" pos:column="31">=</op:operator> <name><name pos:line="172" pos:column="33">FileEventType</name><op:operator pos:line="172" pos:column="46">.</op:operator><name pos:line="172" pos:column="47">FileChanged</name></name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="173" pos:column="13">var</name></type> <name pos:line="173" pos:column="17">expectedLastWriteTime</name> <init pos:line="173" pos:column="39">= <expr><name><name pos:line="173" pos:column="41">DateTime</name><op:operator pos:line="173" pos:column="49">.</op:operator><name pos:line="173" pos:column="50">Now</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="174" pos:column="13">File</name><op:operator pos:line="174" pos:column="17">.</op:operator><name pos:line="174" pos:column="18">SetLastWriteTime</name></name><argument_list pos:line="174" pos:column="34">(<argument><expr><name pos:line="174" pos:column="35">expectedFileName</name></expr></argument>, <argument><expr><name pos:line="174" pos:column="53">expectedLastWriteTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="175" pos:column="13">Assert</name><op:operator pos:line="175" pos:column="19">.</op:operator><name pos:line="175" pos:column="20">IsTrue</name></name><argument_list pos:line="175" pos:column="26">(<argument><expr><call><name><name pos:line="175" pos:column="27">are</name><op:operator pos:line="175" pos:column="30">.</op:operator><name pos:line="175" pos:column="31">WaitOne</name></name><argument_list pos:line="175" pos:column="38">(<argument><expr><name pos:line="175" pos:column="39">WaitInterval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="176" pos:column="13">Assert</name><op:operator pos:line="176" pos:column="19">.</op:operator><name pos:line="176" pos:column="20">AreEqual</name></name><argument_list pos:line="176" pos:column="28">(<argument><expr><name pos:line="176" pos:column="29">expectedLastWriteTime</name></expr></argument>, <argument><expr><call><name><name pos:line="176" pos:column="52">archive</name><op:operator pos:line="176" pos:column="59">.</op:operator><name pos:line="176" pos:column="60">GetLastModifiedTime</name></name><argument_list pos:line="176" pos:column="79">(<argument><expr><name pos:line="176" pos:column="80">expectedFileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="178" pos:column="13">expectedEventType</name> <op:operator pos:line="178" pos:column="31">=</op:operator> <name><name pos:line="178" pos:column="33">FileEventType</name><op:operator pos:line="178" pos:column="46">.</op:operator><name pos:line="178" pos:column="47">FileDeleted</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="179" pos:column="13">File</name><op:operator pos:line="179" pos:column="17">.</op:operator><name pos:line="179" pos:column="18">Delete</name></name><argument_list pos:line="179" pos:column="24">(<argument><expr><name pos:line="179" pos:column="25">expectedFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="180" pos:column="13">Assert</name><op:operator pos:line="180" pos:column="19">.</op:operator><name pos:line="180" pos:column="20">IsTrue</name></name><argument_list pos:line="180" pos:column="26">(<argument><expr><call><name><name pos:line="180" pos:column="27">are</name><op:operator pos:line="180" pos:column="30">.</op:operator><name pos:line="180" pos:column="31">WaitOne</name></name><argument_list pos:line="180" pos:column="38">(<argument><expr><name pos:line="180" pos:column="39">WaitInterval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="183" pos:column="9">[<expr><name pos:line="183" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="184" pos:column="9">public</specifier> <name pos:line="184" pos:column="16">void</name></type> <name pos:line="184" pos:column="21">TestFileSaveAndRestore</name><parameter_list pos:line="184" pos:column="43">()</parameter_list> <block pos:line="184" pos:column="46">{
            <using pos:line="185" pos:column="13">using(<decl><type><name pos:line="185" pos:column="19">var</name></type> <name pos:line="185" pos:column="23">monitor</name> <init pos:line="185" pos:column="31">= <expr><op:operator pos:line="185" pos:column="33">new</op:operator> <call><name pos:line="185" pos:column="37">DirectoryScanningMonitor</name><argument_list pos:line="185" pos:column="61">(<argument><expr><name pos:line="185" pos:column="62">monitorFolder</name></expr></argument>, <argument><expr><op:operator pos:line="185" pos:column="77">new</op:operator> <call><name pos:line="185" pos:column="81">LastModifiedArchive</name><argument_list pos:line="185" pos:column="100">(<argument><expr><name pos:line="185" pos:column="101">monitorFolder</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>) <block pos:line="185" pos:column="118">{
                <expr_stmt><expr><call><name><name pos:line="186" pos:column="17">monitor</name><op:operator pos:line="186" pos:column="24">.</op:operator><name pos:line="186" pos:column="25">AddDirectory</name></name><argument_list pos:line="186" pos:column="37">(<argument><expr><name pos:line="186" pos:column="38">testFolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></using>

            <using pos:line="189" pos:column="13">using(<decl><type><name pos:line="189" pos:column="19">var</name></type> <name pos:line="189" pos:column="23">monitor</name> <init pos:line="189" pos:column="31">= <expr><op:operator pos:line="189" pos:column="33">new</op:operator> <call><name pos:line="189" pos:column="37">DirectoryScanningMonitor</name><argument_list pos:line="189" pos:column="61">(<argument><expr><name pos:line="189" pos:column="62">monitorFolder</name></expr></argument>, <argument><expr><op:operator pos:line="189" pos:column="77">new</op:operator> <call><name pos:line="189" pos:column="81">LastModifiedArchive</name><argument_list pos:line="189" pos:column="100">(<argument><expr><name pos:line="189" pos:column="101">monitorFolder</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>) <block pos:line="189" pos:column="118">{
                <expr_stmt><expr><call><name><name pos:line="190" pos:column="17">monitor</name><op:operator pos:line="190" pos:column="24">.</op:operator><name pos:line="190" pos:column="25">AddDirectoriesFromSaveFile</name></name><argument_list pos:line="190" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="191" pos:column="17">Assert</name><op:operator pos:line="191" pos:column="23">.</op:operator><name pos:line="191" pos:column="24">AreEqual</name></name><argument_list pos:line="191" pos:column="32">(<argument><expr><lit:literal type="number" pos:line="191" pos:column="33">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="191" pos:column="36">monitor</name><op:operator pos:line="191" pos:column="43">.</op:operator><name pos:line="191" pos:column="44">MonitoredDirectories</name><op:operator pos:line="191" pos:column="64">.</op:operator><name pos:line="191" pos:column="65">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="192" pos:column="17">Assert</name><op:operator pos:line="192" pos:column="23">.</op:operator><name pos:line="192" pos:column="24">AreEqual</name></name><argument_list pos:line="192" pos:column="32">(<argument><expr><call><name><name pos:line="192" pos:column="33">Path</name><op:operator pos:line="192" pos:column="37">.</op:operator><name pos:line="192" pos:column="38">GetFullPath</name></name><argument_list pos:line="192" pos:column="49">(<argument><expr><name pos:line="192" pos:column="50">testFolder</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="192" pos:column="63">monitor</name><op:operator pos:line="192" pos:column="70">.</op:operator><name pos:line="192" pos:column="71">MonitoredDirectories</name><index pos:line="192" pos:column="91">[<expr><lit:literal type="number" pos:line="192" pos:column="92">0</lit:literal></expr>]</index></name><op:operator pos:line="192" pos:column="94">.</op:operator><call><name pos:line="192" pos:column="95">TrimEnd</name><argument_list pos:line="192" pos:column="102">(<argument><expr><name><name pos:line="192" pos:column="103">Path</name><op:operator pos:line="192" pos:column="107">.</op:operator><name pos:line="192" pos:column="108">DirectorySeparatorChar</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></using>

            <using pos:line="195" pos:column="13">using(<decl><type><name pos:line="195" pos:column="19">var</name></type> <name pos:line="195" pos:column="23">monitor</name> <init pos:line="195" pos:column="31">= <expr><op:operator pos:line="195" pos:column="33">new</op:operator> <call><name pos:line="195" pos:column="37">DirectoryScanningMonitor</name><argument_list pos:line="195" pos:column="61">(<argument><expr><name pos:line="195" pos:column="62">monitorFolder</name></expr></argument>, <argument><expr><op:operator pos:line="195" pos:column="77">new</op:operator> <call><name pos:line="195" pos:column="81">LastModifiedArchive</name><argument_list pos:line="195" pos:column="100">(<argument><expr><name pos:line="195" pos:column="101">monitorFolder</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>) <block pos:line="195" pos:column="118">{
                <expr_stmt><expr><call><name><name pos:line="196" pos:column="17">monitor</name><op:operator pos:line="196" pos:column="24">.</op:operator><name pos:line="196" pos:column="25">AddDirectoriesFromSaveFile</name></name><argument_list pos:line="196" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="197" pos:column="17">Assert</name><op:operator pos:line="197" pos:column="23">.</op:operator><name pos:line="197" pos:column="24">AreEqual</name></name><argument_list pos:line="197" pos:column="32">(<argument><expr><lit:literal type="number" pos:line="197" pos:column="33">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="197" pos:column="36">monitor</name><op:operator pos:line="197" pos:column="43">.</op:operator><name pos:line="197" pos:column="44">MonitoredDirectories</name><op:operator pos:line="197" pos:column="64">.</op:operator><name pos:line="197" pos:column="65">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="198" pos:column="17">Assert</name><op:operator pos:line="198" pos:column="23">.</op:operator><name pos:line="198" pos:column="24">AreEqual</name></name><argument_list pos:line="198" pos:column="32">(<argument><expr><call><name><name pos:line="198" pos:column="33">Path</name><op:operator pos:line="198" pos:column="37">.</op:operator><name pos:line="198" pos:column="38">GetFullPath</name></name><argument_list pos:line="198" pos:column="49">(<argument><expr><name pos:line="198" pos:column="50">testFolder</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="198" pos:column="63">monitor</name><op:operator pos:line="198" pos:column="70">.</op:operator><name pos:line="198" pos:column="71">MonitoredDirectories</name><index pos:line="198" pos:column="91">[<expr><lit:literal type="number" pos:line="198" pos:column="92">0</lit:literal></expr>]</index></name><op:operator pos:line="198" pos:column="94">.</op:operator><call><name pos:line="198" pos:column="95">TrimEnd</name><argument_list pos:line="198" pos:column="102">(<argument><expr><name><name pos:line="198" pos:column="103">Path</name><op:operator pos:line="198" pos:column="107">.</op:operator><name pos:line="198" pos:column="108">DirectorySeparatorChar</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></using>
        }</block></function>

        <function><type><attribute pos:line="202" pos:column="9">[<expr><name pos:line="202" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="203" pos:column="9">public</specifier> <name pos:line="203" pos:column="16">void</name></type> <name pos:line="203" pos:column="21">TestIsMonitoringFile</name><parameter_list pos:line="203" pos:column="41">()</parameter_list> <block pos:line="203" pos:column="44">{
            <decl_stmt><decl><type><name pos:line="204" pos:column="13">var</name></type> <name pos:line="204" pos:column="17">archive</name> <init pos:line="204" pos:column="25">= <expr><op:operator pos:line="204" pos:column="27">new</op:operator> <call><name pos:line="204" pos:column="31">LastModifiedArchive</name><argument_list pos:line="204" pos:column="50">(<argument><expr><name pos:line="204" pos:column="51">monitorFolder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="205" pos:column="13">DirectoryScanningMonitor</name></type> <name pos:line="205" pos:column="38">monitor</name> <init pos:line="205" pos:column="46">= <expr><op:operator pos:line="205" pos:column="48">new</op:operator> <call><name pos:line="205" pos:column="52">DirectoryScanningMonitor</name><argument_list pos:line="205" pos:column="76">(<argument><expr><name pos:line="205" pos:column="77">monitorFolder</name></expr></argument>, <argument><expr><name pos:line="205" pos:column="92">archive</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="206" pos:column="13">monitor</name><op:operator pos:line="206" pos:column="20">.</op:operator><name pos:line="206" pos:column="21">AddDirectory</name></name><argument_list pos:line="206" pos:column="33">(<argument><expr><name pos:line="206" pos:column="34">testFolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <foreach pos:line="208" pos:column="13">foreach(<init><decl><type><name pos:line="208" pos:column="21">var</name></type> <name pos:line="208" pos:column="25">fileName</name> <range pos:line="208" pos:column="34">in <expr><call><name><name pos:line="208" pos:column="37">Directory</name><op:operator pos:line="208" pos:column="46">.</op:operator><name pos:line="208" pos:column="47">EnumerateFiles</name></name><argument_list pos:line="208" pos:column="61">(<argument><expr><name pos:line="208" pos:column="62">testFolder</name></expr></argument>)</argument_list></call></expr></range></decl></init>) <block pos:line="208" pos:column="75">{
                <expr_stmt><expr><call><name><name pos:line="209" pos:column="17">Assert</name><op:operator pos:line="209" pos:column="23">.</op:operator><name pos:line="209" pos:column="24">IsTrue</name></name><argument_list pos:line="209" pos:column="30">(<argument><expr><call><name><name pos:line="209" pos:column="31">monitor</name><op:operator pos:line="209" pos:column="38">.</op:operator><name pos:line="209" pos:column="39">IsMonitoringFile</name></name><argument_list pos:line="209" pos:column="55">(<argument><expr><name pos:line="209" pos:column="56">fileName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="209" pos:column="67">"should be able to use the file name with the relative path"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="210" pos:column="17">Assert</name><op:operator pos:line="210" pos:column="23">.</op:operator><name pos:line="210" pos:column="24">IsTrue</name></name><argument_list pos:line="210" pos:column="30">(<argument><expr><call><name><name pos:line="210" pos:column="31">monitor</name><op:operator pos:line="210" pos:column="38">.</op:operator><name pos:line="210" pos:column="39">IsMonitoringFile</name></name><argument_list pos:line="210" pos:column="55">(<argument><expr><call><name><name pos:line="210" pos:column="56">Path</name><op:operator pos:line="210" pos:column="60">.</op:operator><name pos:line="210" pos:column="61">GetFullPath</name></name><argument_list pos:line="210" pos:column="72">(<argument><expr><name pos:line="210" pos:column="73">fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="210" pos:column="85">"should be able to find the file name with the absolute path"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>

        <function><type><attribute pos:line="214" pos:column="9">[<expr><name pos:line="214" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="215" pos:column="9">public</specifier> <name pos:line="215" pos:column="16">void</name></type> <name pos:line="215" pos:column="21">TestRemoveDirectory</name><parameter_list pos:line="215" pos:column="40">()</parameter_list> <block pos:line="215" pos:column="43">{
            <decl_stmt><decl><type><name pos:line="216" pos:column="13">var</name></type> <name pos:line="216" pos:column="17">archive</name> <init pos:line="216" pos:column="25">= <expr><op:operator pos:line="216" pos:column="27">new</op:operator> <call><name pos:line="216" pos:column="31">LastModifiedArchive</name><argument_list pos:line="216" pos:column="50">(<argument><expr><name pos:line="216" pos:column="51">monitorFolder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="217" pos:column="13">DirectoryScanningMonitor</name></type> <name pos:line="217" pos:column="38">monitor</name> <init pos:line="217" pos:column="46">= <expr><op:operator pos:line="217" pos:column="48">new</op:operator> <call><name pos:line="217" pos:column="52">DirectoryScanningMonitor</name><argument_list pos:line="217" pos:column="76">(<argument><expr><name pos:line="217" pos:column="77">monitorFolder</name></expr></argument>, <argument><expr><name pos:line="217" pos:column="92">archive</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="218" pos:column="13">AutoResetEvent</name></type> <name pos:line="218" pos:column="28">directoryResetEvent</name> <init pos:line="218" pos:column="48">= <expr><op:operator pos:line="218" pos:column="50">new</op:operator> <call><name pos:line="218" pos:column="54">AutoResetEvent</name><argument_list pos:line="218" pos:column="68">(<argument><expr><lit:literal type="boolean" pos:line="218" pos:column="69">false</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <expr_stmt><expr><name><name pos:line="220" pos:column="13">monitor</name><op:operator pos:line="220" pos:column="20">.</op:operator><name pos:line="220" pos:column="21">DirectoryAdded</name></name> <op:operator pos:line="220" pos:column="36">+=</op:operator> <lambda><parameter_list pos:line="220" pos:column="39">(<param><decl><name pos:line="220" pos:column="40">o</name></decl></param>, <param><decl><name pos:line="220" pos:column="43">e</name></decl></param>)</parameter_list> <op:operator pos:line="220" pos:column="46">=&gt;</op:operator> <call><name><name pos:line="220" pos:column="49">directoryResetEvent</name><op:operator pos:line="220" pos:column="68">.</op:operator><name pos:line="220" pos:column="69">Set</name></name><argument_list pos:line="220" pos:column="72">()</argument_list></call></lambda></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="221" pos:column="13">monitor</name><op:operator pos:line="221" pos:column="20">.</op:operator><name pos:line="221" pos:column="21">DirectoryRemoved</name></name> <op:operator pos:line="221" pos:column="38">+=</op:operator> <lambda><parameter_list pos:line="221" pos:column="41">(<param><decl><name pos:line="221" pos:column="42">o</name></decl></param>, <param><decl><name pos:line="221" pos:column="45">e</name></decl></param>)</parameter_list> <op:operator pos:line="221" pos:column="48">=&gt;</op:operator> <call><name><name pos:line="221" pos:column="51">directoryResetEvent</name><op:operator pos:line="221" pos:column="70">.</op:operator><name pos:line="221" pos:column="71">Set</name></name><argument_list pos:line="221" pos:column="74">()</argument_list></call></lambda></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="223" pos:column="13">monitor</name><op:operator pos:line="223" pos:column="20">.</op:operator><name pos:line="223" pos:column="21">AddDirectory</name></name><argument_list pos:line="223" pos:column="33">(<argument><expr><name pos:line="223" pos:column="34">testFolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="224" pos:column="13">Assert</name><op:operator pos:line="224" pos:column="19">.</op:operator><name pos:line="224" pos:column="20">IsTrue</name></name><argument_list pos:line="224" pos:column="26">(<argument><expr><call><name><name pos:line="224" pos:column="27">directoryResetEvent</name><op:operator pos:line="224" pos:column="46">.</op:operator><name pos:line="224" pos:column="47">WaitOne</name></name><argument_list pos:line="224" pos:column="54">(<argument><expr><name pos:line="224" pos:column="55">WaitInterval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="225" pos:column="13">monitor</name><op:operator pos:line="225" pos:column="20">.</op:operator><name pos:line="225" pos:column="21">UpdateArchives</name></name><argument_list pos:line="225" pos:column="35">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="227" pos:column="13">Assert</name><op:operator pos:line="227" pos:column="19">.</op:operator><name pos:line="227" pos:column="20">AreEqual</name></name><argument_list pos:line="227" pos:column="28">(<argument><expr><name pos:line="227" pos:column="29">numStartingFiles</name></expr></argument>, <argument><expr><call><name><name pos:line="227" pos:column="47">monitor</name><op:operator pos:line="227" pos:column="54">.</op:operator><name pos:line="227" pos:column="55">GetArchivedFiles</name></name><argument_list pos:line="227" pos:column="71">()</argument_list></call><op:operator pos:line="227" pos:column="73">.</op:operator><call><name pos:line="227" pos:column="74">Count</name><argument_list pos:line="227" pos:column="79">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="228" pos:column="13">monitor</name><op:operator pos:line="228" pos:column="20">.</op:operator><name pos:line="228" pos:column="21">RemoveDirectory</name></name><argument_list pos:line="228" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="228" pos:column="37">"test1"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="229" pos:column="13">Assert</name><op:operator pos:line="229" pos:column="19">.</op:operator><name pos:line="229" pos:column="20">IsFalse</name></name><argument_list pos:line="229" pos:column="27">(<argument><expr><call><name><name pos:line="229" pos:column="28">directoryResetEvent</name><op:operator pos:line="229" pos:column="47">.</op:operator><name pos:line="229" pos:column="48">WaitOne</name></name><argument_list pos:line="229" pos:column="55">(<argument><expr><name pos:line="229" pos:column="56">WaitInterval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="230" pos:column="13">Assert</name><op:operator pos:line="230" pos:column="19">.</op:operator><name pos:line="230" pos:column="20">AreEqual</name></name><argument_list pos:line="230" pos:column="28">(<argument><expr><name pos:line="230" pos:column="29">numStartingFiles</name></expr></argument>, <argument><expr><call><name><name pos:line="230" pos:column="47">monitor</name><op:operator pos:line="230" pos:column="54">.</op:operator><name pos:line="230" pos:column="55">GetArchivedFiles</name></name><argument_list pos:line="230" pos:column="71">()</argument_list></call><op:operator pos:line="230" pos:column="73">.</op:operator><call><name pos:line="230" pos:column="74">Count</name><argument_list pos:line="230" pos:column="79">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="232" pos:column="13">AutoResetEvent</name></type> <name pos:line="232" pos:column="28">fileDeletionResetEvent</name> <init pos:line="232" pos:column="51">= <expr><op:operator pos:line="232" pos:column="53">new</op:operator> <call><name pos:line="232" pos:column="57">AutoResetEvent</name><argument_list pos:line="232" pos:column="71">(<argument><expr><lit:literal type="boolean" pos:line="232" pos:column="72">false</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="233" pos:column="13">int</name></type> <name pos:line="233" pos:column="17">count</name> <init pos:line="233" pos:column="23">= <expr><name pos:line="233" pos:column="25">numStartingFiles</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="234" pos:column="13">monitor</name><op:operator pos:line="234" pos:column="20">.</op:operator><name pos:line="234" pos:column="21">FileChanged</name></name> <op:operator pos:line="234" pos:column="33">+=</op:operator> <lambda><parameter_list pos:line="234" pos:column="36">(<param><decl><name pos:line="234" pos:column="37">o</name></decl></param>, <param><decl><name pos:line="234" pos:column="40">e</name></decl></param>)</parameter_list> <op:operator pos:line="234" pos:column="43">=&gt;</op:operator> <block pos:line="234" pos:column="46">{
                <if pos:line="235" pos:column="17">if<condition pos:line="235" pos:column="19">(<expr><name><name pos:line="235" pos:column="20">e</name><op:operator pos:line="235" pos:column="21">.</op:operator><name pos:line="235" pos:column="22">EventType</name></name> <op:operator pos:line="235" pos:column="32">==</op:operator> <name><name pos:line="235" pos:column="35">FileEventType</name><op:operator pos:line="235" pos:column="48">.</op:operator><name pos:line="235" pos:column="49">FileDeleted</name></name></expr>)</condition><then pos:line="235" pos:column="61"> <block pos:line="235" pos:column="62">{
                    <if pos:line="236" pos:column="21">if<condition pos:line="236" pos:column="23">(<expr><op:operator pos:line="236" pos:column="24">--</op:operator><name pos:line="236" pos:column="26">count</name> <op:operator pos:line="236" pos:column="32">==</op:operator> <lit:literal type="number" pos:line="236" pos:column="35">0</lit:literal></expr>)</condition><then pos:line="236" pos:column="37">
                        <expr_stmt><expr><call><name><name pos:line="237" pos:column="25">fileDeletionResetEvent</name><op:operator pos:line="237" pos:column="47">.</op:operator><name pos:line="237" pos:column="48">Set</name></name><argument_list pos:line="237" pos:column="51">()</argument_list></call></expr>;</expr_stmt></then></if>
                }</block></then></if>
            }</block></lambda></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="241" pos:column="13">monitor</name><op:operator pos:line="241" pos:column="20">.</op:operator><name pos:line="241" pos:column="21">RemoveDirectory</name></name><argument_list pos:line="241" pos:column="36">(<argument><expr><name pos:line="241" pos:column="37">testFolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="242" pos:column="13">Assert</name><op:operator pos:line="242" pos:column="19">.</op:operator><name pos:line="242" pos:column="20">IsTrue</name></name><argument_list pos:line="242" pos:column="26">(<argument><expr><call><name><name pos:line="242" pos:column="27">directoryResetEvent</name><op:operator pos:line="242" pos:column="46">.</op:operator><name pos:line="242" pos:column="47">WaitOne</name></name><argument_list pos:line="242" pos:column="54">(<argument><expr><name pos:line="242" pos:column="55">WaitInterval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="243" pos:column="13">Assert</name><op:operator pos:line="243" pos:column="19">.</op:operator><name pos:line="243" pos:column="20">IsTrue</name></name><argument_list pos:line="243" pos:column="26">(<argument><expr><call><name><name pos:line="243" pos:column="27">fileDeletionResetEvent</name><op:operator pos:line="243" pos:column="49">.</op:operator><name pos:line="243" pos:column="50">WaitOne</name></name><argument_list pos:line="243" pos:column="57">(<argument><expr><name pos:line="243" pos:column="58">WaitInterval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="245" pos:column="13">Assert</name><op:operator pos:line="245" pos:column="19">.</op:operator><name pos:line="245" pos:column="20">AreEqual</name></name><argument_list pos:line="245" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="245" pos:column="29">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="245" pos:column="32">monitor</name><op:operator pos:line="245" pos:column="39">.</op:operator><name pos:line="245" pos:column="40">GetArchivedFiles</name></name><argument_list pos:line="245" pos:column="56">()</argument_list></call><op:operator pos:line="245" pos:column="58">.</op:operator><call><name pos:line="245" pos:column="59">Count</name><argument_list pos:line="245" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <foreach pos:line="246" pos:column="13">foreach(<init><decl><type><name pos:line="246" pos:column="21">var</name></type> <name pos:line="246" pos:column="25">fileName</name> <range pos:line="246" pos:column="34">in <expr><call><name><name pos:line="246" pos:column="37">Directory</name><op:operator pos:line="246" pos:column="46">.</op:operator><name pos:line="246" pos:column="47">EnumerateFiles</name></name><argument_list pos:line="246" pos:column="61">(<argument><expr><name pos:line="246" pos:column="62">testFolder</name></expr></argument>)</argument_list></call></expr></range></decl></init>) <block pos:line="246" pos:column="75">{
                <expr_stmt><expr><call><name><name pos:line="247" pos:column="17">Assert</name><op:operator pos:line="247" pos:column="23">.</op:operator><name pos:line="247" pos:column="24">IsTrue</name></name><argument_list pos:line="247" pos:column="30">(<argument><expr><call><name><name pos:line="247" pos:column="31">File</name><op:operator pos:line="247" pos:column="35">.</op:operator><name pos:line="247" pos:column="36">Exists</name></name><argument_list pos:line="247" pos:column="42">(<argument><expr><name pos:line="247" pos:column="43">fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>

        <function><type><attribute pos:line="251" pos:column="9">[<expr><name pos:line="251" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="252" pos:column="9">public</specifier> <name pos:line="252" pos:column="16">void</name></type> <name pos:line="252" pos:column="21">TestStartup</name><parameter_list pos:line="252" pos:column="32">()</parameter_list> <block pos:line="252" pos:column="35">{
            <decl_stmt><decl><type><name pos:line="253" pos:column="13">AutoResetEvent</name></type> <name pos:line="253" pos:column="28">are</name> <init pos:line="253" pos:column="32">= <expr><op:operator pos:line="253" pos:column="34">new</op:operator> <call><name pos:line="253" pos:column="38">AutoResetEvent</name><argument_list pos:line="253" pos:column="52">(<argument><expr><lit:literal type="boolean" pos:line="253" pos:column="53">false</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="254" pos:column="13">var</name></type> <name pos:line="254" pos:column="17">archive</name> <init pos:line="254" pos:column="25">= <expr><op:operator pos:line="254" pos:column="27">new</op:operator> <call><name pos:line="254" pos:column="31">LastModifiedArchive</name><argument_list pos:line="254" pos:column="50">(<argument><expr><name pos:line="254" pos:column="51">monitorFolder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="255" pos:column="13">DirectoryScanningMonitor</name></type> <name pos:line="255" pos:column="38">monitor</name> <init pos:line="255" pos:column="46">= <expr><op:operator pos:line="255" pos:column="48">new</op:operator> <call><name pos:line="255" pos:column="52">DirectoryScanningMonitor</name><argument_list pos:line="255" pos:column="76">(<argument><expr><name pos:line="255" pos:column="77">monitorFolder</name></expr></argument>, <argument><expr><name pos:line="255" pos:column="92">archive</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <expr_stmt><expr><name><name pos:line="257" pos:column="13">monitor</name><op:operator pos:line="257" pos:column="20">.</op:operator><name pos:line="257" pos:column="21">DirectoryAdded</name></name> <op:operator pos:line="257" pos:column="36">+=</op:operator> <lambda><parameter_list pos:line="257" pos:column="39">(<param><decl><name pos:line="257" pos:column="40">o</name></decl></param>, <param><decl><name pos:line="257" pos:column="43">e</name></decl></param>)</parameter_list> <op:operator pos:line="257" pos:column="46">=&gt;</op:operator> <block pos:line="257" pos:column="49">{ <expr_stmt><expr><call><name><name pos:line="257" pos:column="51">are</name><op:operator pos:line="257" pos:column="54">.</op:operator><name pos:line="257" pos:column="55">Set</name></name><argument_list pos:line="257" pos:column="58">()</argument_list></call></expr>;</expr_stmt> }</block></lambda></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="258" pos:column="13">monitor</name><op:operator pos:line="258" pos:column="20">.</op:operator><name pos:line="258" pos:column="21">AddDirectory</name></name><argument_list pos:line="258" pos:column="33">(<argument><expr><name pos:line="258" pos:column="34">testFolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="259" pos:column="13">Assert</name><op:operator pos:line="259" pos:column="19">.</op:operator><name pos:line="259" pos:column="20">IsTrue</name></name><argument_list pos:line="259" pos:column="26">(<argument><expr><call><name><name pos:line="259" pos:column="27">are</name><op:operator pos:line="259" pos:column="30">.</op:operator><name pos:line="259" pos:column="31">WaitOne</name></name><argument_list pos:line="259" pos:column="38">(<argument><expr><name pos:line="259" pos:column="39">WaitInterval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <decl_stmt><decl><type><name pos:line="261" pos:column="13">int</name></type> <name pos:line="261" pos:column="17">count</name> <init pos:line="261" pos:column="23">= <expr><lit:literal type="number" pos:line="261" pos:column="25">0</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="262" pos:column="13">monitor</name><op:operator pos:line="262" pos:column="20">.</op:operator><name pos:line="262" pos:column="21">FileChanged</name></name> <op:operator pos:line="262" pos:column="33">+=</op:operator> <lambda><parameter_list pos:line="262" pos:column="36">(<param><decl><name pos:line="262" pos:column="37">o</name></decl></param>, <param><decl><name pos:line="262" pos:column="40">e</name></decl></param>)</parameter_list> <op:operator pos:line="262" pos:column="43">=&gt;</op:operator> <block pos:line="262" pos:column="46">{
                <if pos:line="263" pos:column="17">if<condition pos:line="263" pos:column="19">(<expr><name><name pos:line="263" pos:column="20">e</name><op:operator pos:line="263" pos:column="21">.</op:operator><name pos:line="263" pos:column="22">EventType</name></name> <op:operator pos:line="263" pos:column="32">==</op:operator> <name><name pos:line="263" pos:column="35">FileEventType</name><op:operator pos:line="263" pos:column="48">.</op:operator><name pos:line="263" pos:column="49">FileAdded</name></name></expr>)</condition><then pos:line="263" pos:column="59"> <block pos:line="263" pos:column="60">{
                    <expr_stmt><expr><name pos:line="264" pos:column="21">count</name><op:operator pos:line="264" pos:column="26">++</op:operator></expr>;</expr_stmt>
                    <if pos:line="265" pos:column="21">if<condition pos:line="265" pos:column="23">(<expr><name pos:line="265" pos:column="24">count</name> <op:operator pos:line="265" pos:column="30">==</op:operator> <name pos:line="265" pos:column="33">numStartingFiles</name></expr>)</condition><then pos:line="265" pos:column="50"> <block pos:line="265" pos:column="51">{
                        <expr_stmt><expr><call><name><name pos:line="266" pos:column="25">are</name><op:operator pos:line="266" pos:column="28">.</op:operator><name pos:line="266" pos:column="29">Set</name></name><argument_list pos:line="266" pos:column="32">()</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>
            }</block></lambda></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="270" pos:column="13">monitor</name><op:operator pos:line="270" pos:column="20">.</op:operator><name pos:line="270" pos:column="21">UpdateArchives</name></name><argument_list pos:line="270" pos:column="35">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="272" pos:column="13">Assert</name><op:operator pos:line="272" pos:column="19">.</op:operator><name pos:line="272" pos:column="20">IsTrue</name></name><argument_list pos:line="272" pos:column="26">(<argument><expr><call><name><name pos:line="272" pos:column="27">are</name><op:operator pos:line="272" pos:column="30">.</op:operator><name pos:line="272" pos:column="31">WaitOne</name></name><argument_list pos:line="272" pos:column="38">(<argument><expr><name pos:line="272" pos:column="39">WaitInterval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="273" pos:column="13">Assert</name><op:operator pos:line="273" pos:column="19">.</op:operator><name pos:line="273" pos:column="20">AreEqual</name></name><argument_list pos:line="273" pos:column="28">(<argument><expr><name pos:line="273" pos:column="29">numStartingFiles</name></expr></argument>, <argument><expr><call><name><name pos:line="273" pos:column="47">archive</name><op:operator pos:line="273" pos:column="54">.</op:operator><name pos:line="273" pos:column="55">GetFiles</name></name><argument_list pos:line="273" pos:column="63">()</argument_list></call><op:operator pos:line="273" pos:column="65">.</op:operator><call><name pos:line="273" pos:column="66">Count</name><argument_list pos:line="273" pos:column="71">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="273" pos:column="75">String</name><op:operator pos:line="273" pos:column="81">.</op:operator><name pos:line="273" pos:column="82">Format</name></name><argument_list pos:line="273" pos:column="88">(<argument><expr><lit:literal type="string" pos:line="273" pos:column="89">"only found {0} files in the archive"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="273" pos:column="128">archive</name><op:operator pos:line="273" pos:column="135">.</op:operator><name pos:line="273" pos:column="136">GetFiles</name></name><argument_list pos:line="273" pos:column="144">()</argument_list></call><op:operator pos:line="273" pos:column="146">.</op:operator><call><name pos:line="273" pos:column="147">Count</name><argument_list pos:line="273" pos:column="152">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <foreach pos:line="275" pos:column="13">foreach(<init><decl><type><name pos:line="275" pos:column="21">var</name></type> <name pos:line="275" pos:column="25">fileName</name> <range pos:line="275" pos:column="34">in <expr><call><name><name pos:line="275" pos:column="37">Directory</name><op:operator pos:line="275" pos:column="46">.</op:operator><name pos:line="275" pos:column="47">EnumerateFiles</name></name><argument_list pos:line="275" pos:column="61">(<argument><expr><name pos:line="275" pos:column="62">testFolder</name></expr></argument>)</argument_list></call></expr></range></decl></init>) <block pos:line="275" pos:column="75">{
                <expr_stmt><expr><call><name><name pos:line="276" pos:column="17">Assert</name><op:operator pos:line="276" pos:column="23">.</op:operator><name pos:line="276" pos:column="24">IsTrue</name></name><argument_list pos:line="276" pos:column="30">(<argument><expr><call><name><name pos:line="276" pos:column="31">archive</name><op:operator pos:line="276" pos:column="38">.</op:operator><name pos:line="276" pos:column="39">ContainsFile</name></name><argument_list pos:line="276" pos:column="51">(<argument><expr><name pos:line="276" pos:column="52">fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="277" pos:column="17">Assert</name><op:operator pos:line="277" pos:column="23">.</op:operator><name pos:line="277" pos:column="24">IsFalse</name></name><argument_list pos:line="277" pos:column="31">(<argument><expr><call><name><name pos:line="277" pos:column="32">archive</name><op:operator pos:line="277" pos:column="39">.</op:operator><name pos:line="277" pos:column="40">IsOutdated</name></name><argument_list pos:line="277" pos:column="50">(<argument><expr><name pos:line="277" pos:column="51">fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="278" pos:column="17">Assert</name><op:operator pos:line="278" pos:column="23">.</op:operator><name pos:line="278" pos:column="24">AreEqual</name></name><argument_list pos:line="278" pos:column="32">(<argument><expr><call><name><name pos:line="278" pos:column="33">File</name><op:operator pos:line="278" pos:column="37">.</op:operator><name pos:line="278" pos:column="38">GetLastWriteTime</name></name><argument_list pos:line="278" pos:column="54">(<argument><expr><name pos:line="278" pos:column="55">fileName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="278" pos:column="66">archive</name><op:operator pos:line="278" pos:column="73">.</op:operator><name pos:line="278" pos:column="74">GetLastModifiedTime</name></name><argument_list pos:line="278" pos:column="93">(<argument><expr><name pos:line="278" pos:column="94">fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
