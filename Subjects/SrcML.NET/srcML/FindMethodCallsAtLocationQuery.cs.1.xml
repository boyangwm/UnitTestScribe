<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data\Queries\FindMethodCallsAtLocationQuery.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2014 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *  Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">System</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Collections</name><op:operator pos:line="13" pos:column="25">.</op:operator><name pos:line="13" pos:column="26">Generic</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Collections</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">ObjectModel</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Linq</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Text</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Threading</name><op:operator pos:line="17" pos:column="23">.</op:operator><name pos:line="17" pos:column="24">Tasks</name></name>;</using>

<namespace pos:line="19" pos:column="1">namespace <name><name pos:line="19" pos:column="11">ABB</name><op:operator pos:line="19" pos:column="14">.</op:operator><name pos:line="19" pos:column="15">SrcML</name><op:operator pos:line="19" pos:column="20">.</op:operator><name pos:line="19" pos:column="21">Data</name><op:operator pos:line="19" pos:column="25">.</op:operator><name pos:line="19" pos:column="26">Queries</name></name> <block pos:line="19" pos:column="34">{
    <comment type="line" pos:line="20" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="21" pos:column="5">/// This query finds all of the method calls at the given location</comment>
    <comment type="line" pos:line="22" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="23" pos:column="5">public</specifier> class <name pos:line="23" pos:column="18">FindMethodCallsAtLocationQuery</name> <super pos:line="23" pos:column="49">: <name><name pos:line="23" pos:column="51">AbstractQuery</name><argument_list pos:line="23" pos:column="64">&lt;<argument><name pos:line="23" pos:column="65">SourceLocation</name></argument>, <argument><name><name pos:line="23" pos:column="81">Collection</name><argument_list pos:line="23" pos:column="91">&lt;<argument><name pos:line="23" pos:column="92">MethodCall</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super> <block pos:line="23" pos:column="105">{
        <comment type="line" pos:line="24" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="25" pos:column="9">/// Creates a new query object</comment>
        <comment type="line" pos:line="26" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="27" pos:column="9">/// &lt;param name="workingSet"&gt;The working set to query&lt;/param&gt;</comment>
        <comment type="line" pos:line="28" pos:column="9">/// &lt;param name="lockTimeout"&gt;The time in milliseconds to wait for the read lock&lt;/param&gt;</comment>
        <constructor><specifier pos:line="29" pos:column="9">public</specifier> <name pos:line="29" pos:column="16">FindMethodCallsAtLocationQuery</name><parameter_list pos:line="29" pos:column="46">(<param><decl><type><name pos:line="29" pos:column="47">AbstractWorkingSet</name></type> <name pos:line="29" pos:column="66">workingSet</name></decl></param>, <param><decl><type><name pos:line="29" pos:column="78">int</name></type> <name pos:line="29" pos:column="82">lockTimeout</name></decl></param>)</parameter_list> 
            <member_list pos:line="30" pos:column="13">: <call><name pos:line="30" pos:column="15">base</name><argument_list pos:line="30" pos:column="19">(<argument><expr><name pos:line="30" pos:column="20">workingSet</name></expr></argument>, <argument><expr><name pos:line="30" pos:column="32">lockTimeout</name></expr></argument>)</argument_list></call> </member_list><block pos:line="30" pos:column="45">{}</block></constructor>

        <comment type="line" pos:line="32" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="33" pos:column="9">/// Creates a new query object</comment>
        <comment type="line" pos:line="34" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="35" pos:column="9">/// &lt;param name="workingSet"&gt;The working set to query&lt;/param&gt;</comment>
        <comment type="line" pos:line="36" pos:column="9">/// &lt;param name="lockTimeout"&gt;The time in milliseconds to wait for the read lock&lt;/param&gt;</comment>
        <comment type="line" pos:line="37" pos:column="9">/// &lt;param name="factory"&gt;The task factory to use for asynchronous methods&lt;/param&gt;</comment>
        <constructor><specifier pos:line="38" pos:column="9">public</specifier> <name pos:line="38" pos:column="16">FindMethodCallsAtLocationQuery</name><parameter_list pos:line="38" pos:column="46">(<param><decl><type><name pos:line="38" pos:column="47">AbstractWorkingSet</name></type> <name pos:line="38" pos:column="66">workingSet</name></decl></param>, <param><decl><type><name pos:line="38" pos:column="78">int</name></type> <name pos:line="38" pos:column="82">lockTimeout</name></decl></param>, <param><decl><type><name pos:line="38" pos:column="95">TaskFactory</name></type> <name pos:line="38" pos:column="107">factory</name></decl></param>)</parameter_list>
            <member_list pos:line="39" pos:column="13">: <call><name pos:line="39" pos:column="15">base</name><argument_list pos:line="39" pos:column="19">(<argument><expr><name pos:line="39" pos:column="20">workingSet</name></expr></argument>, <argument><expr><name pos:line="39" pos:column="32">lockTimeout</name></expr></argument>, <argument><expr><name pos:line="39" pos:column="45">factory</name></expr></argument>)</argument_list></call> </member_list><block pos:line="39" pos:column="54">{ }</block></constructor>

        <comment type="line" pos:line="41" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="42" pos:column="9">/// Finds the &lt;see cref="StatementForLocationQuery"&gt;furthest descendant&lt;/see&gt; of &lt;paramref name="root"/&gt; that contains &lt;paramref name="parameter"/&gt;</comment>
        <comment type="line" pos:line="43" pos:column="9">/// and then identifies all of the methods descended from that statement.</comment>
        <comment type="line" pos:line="44" pos:column="9">/// Calls &lt;see cref="Query"/&gt;.</comment>
        <comment type="line" pos:line="45" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="46" pos:column="9">/// &lt;param name="root"&gt;The root to query&lt;/param&gt;</comment>
        <comment type="line" pos:line="47" pos:column="9">/// &lt;param name="parameter"&gt;The parameter to search for&lt;/param&gt;</comment>
        <comment type="line" pos:line="48" pos:column="9">/// &lt;returns&gt;A collection of method calls found at this location&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="49" pos:column="9">public</specifier> <specifier pos:line="49" pos:column="16">override</specifier> <name><name pos:line="49" pos:column="25">Collection</name><argument_list pos:line="49" pos:column="35">&lt;<argument><name pos:line="49" pos:column="36">MethodCall</name></argument>&gt;</argument_list></name></type> <name pos:line="49" pos:column="48">Execute</name><parameter_list pos:line="49" pos:column="55">(<param><decl><type><name pos:line="49" pos:column="56">Statement</name></type> <name pos:line="49" pos:column="66">root</name></decl></param>, <param><decl><type><name pos:line="49" pos:column="72">SourceLocation</name></type> <name pos:line="49" pos:column="87">parameter</name></decl></param>)</parameter_list> <block pos:line="49" pos:column="98">{
            <return pos:line="50" pos:column="13">return <expr><call><name pos:line="50" pos:column="20">Query</name><argument_list pos:line="50" pos:column="25">(<argument><expr><name pos:line="50" pos:column="26">root</name></expr></argument>, <argument><expr><name pos:line="50" pos:column="32">parameter</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="53" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="54" pos:column="9">/// Finds the &lt;see cref="StatementForLocationQuery"&gt;furthest descendant&lt;/see&gt; of &lt;paramref name="root"/&gt; that contains &lt;paramref name="parameter"/&gt;</comment>
        <comment type="line" pos:line="55" pos:column="9">/// and then identifies all of the methods descended from that statement.</comment>
        <comment type="line" pos:line="56" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="57" pos:column="9">/// &lt;param name="root"&gt;The root to query&lt;/param&gt;</comment>
        <comment type="line" pos:line="58" pos:column="9">/// &lt;param name="parameter"&gt;The parameter to search for&lt;/param&gt;</comment>
        <comment type="line" pos:line="59" pos:column="9">/// &lt;returns&gt;A collection of method calls found at this location&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="60" pos:column="9">public</specifier> <specifier pos:line="60" pos:column="16">static</specifier> <name><name pos:line="60" pos:column="23">Collection</name><argument_list pos:line="60" pos:column="33">&lt;<argument><name pos:line="60" pos:column="34">MethodCall</name></argument>&gt;</argument_list></name></type> <name pos:line="60" pos:column="46">Query</name><parameter_list pos:line="60" pos:column="51">(<param><decl><type><name pos:line="60" pos:column="52">Statement</name></type> <name pos:line="60" pos:column="62">root</name></decl></param>, <param><decl><type><name pos:line="60" pos:column="68">SourceLocation</name></type> <name pos:line="60" pos:column="83">parameter</name></decl></param>)</parameter_list> <block pos:line="60" pos:column="94">{
            <if pos:line="61" pos:column="13">if<condition pos:line="61" pos:column="15">(<expr><name pos:line="61" pos:column="16">null</name> <op:operator pos:line="61" pos:column="21">!=</op:operator> <name pos:line="61" pos:column="24">root</name></expr>)</condition><then pos:line="61" pos:column="29"> <block pos:line="61" pos:column="30">{
                <decl_stmt><decl><type><name pos:line="62" pos:column="17">var</name></type> <name pos:line="62" pos:column="21">statement</name> <init pos:line="62" pos:column="31">= <expr><call><name><name pos:line="62" pos:column="33">StatementForLocationQuery</name><op:operator pos:line="62" pos:column="58">.</op:operator><name pos:line="62" pos:column="59">Query</name></name><argument_list pos:line="62" pos:column="64">(<argument><expr><name pos:line="62" pos:column="65">root</name></expr></argument>, <argument><expr><name pos:line="62" pos:column="71">parameter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="63" pos:column="17">if<condition pos:line="63" pos:column="19">(<expr><name pos:line="63" pos:column="20">null</name> <op:operator pos:line="63" pos:column="25">!=</op:operator> <name pos:line="63" pos:column="28">statement</name></expr>)</condition><then pos:line="63" pos:column="38"> <block pos:line="63" pos:column="39">{
                    <decl_stmt><decl><type><name pos:line="64" pos:column="21">var</name></type> <name pos:line="64" pos:column="25">calls</name> <init pos:line="64" pos:column="31">= <expr><call><name><name pos:line="64" pos:column="33">statement</name><op:operator pos:line="64" pos:column="42">.</op:operator><name><name pos:line="64" pos:column="43">FindExpressions</name><argument_list pos:line="64" pos:column="58">&lt;<argument><name pos:line="64" pos:column="59">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="64" pos:column="70">()</argument_list></call><op:operator pos:line="64" pos:column="72">.</op:operator><call><name pos:line="64" pos:column="73">Where</name><argument_list pos:line="64" pos:column="78">(<argument><expr><lambda><name pos:line="64" pos:column="79">mc</name> <op:operator pos:line="64" pos:column="82">=&gt;</op:operator> <call><name><name pos:line="64" pos:column="85">mc</name><op:operator pos:line="64" pos:column="87">.</op:operator><name pos:line="64" pos:column="88">Location</name><op:operator pos:line="64" pos:column="96">.</op:operator><name pos:line="64" pos:column="97">Contains</name></name><argument_list pos:line="64" pos:column="105">(<argument><expr><name pos:line="64" pos:column="106">parameter</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <return pos:line="65" pos:column="21">return <expr><op:operator pos:line="65" pos:column="28">new</op:operator> <call><name><name pos:line="65" pos:column="32">Collection</name><argument_list pos:line="65" pos:column="42">&lt;<argument><name pos:line="65" pos:column="43">MethodCall</name></argument>&gt;</argument_list></name><argument_list pos:line="65" pos:column="54">(<argument><expr><call><name><name pos:line="65" pos:column="55">calls</name><op:operator pos:line="65" pos:column="60">.</op:operator><name pos:line="65" pos:column="61">OrderByDescending</name></name><argument_list pos:line="65" pos:column="78">(<argument><expr><lambda><name pos:line="65" pos:column="79">mc</name> <op:operator pos:line="65" pos:column="82">=&gt;</op:operator> <name><name pos:line="65" pos:column="85">mc</name><op:operator pos:line="65" pos:column="87">.</op:operator><name pos:line="65" pos:column="88">Location</name></name></lambda></expr></argument>, <argument><expr><op:operator pos:line="65" pos:column="98">new</op:operator> <call><name pos:line="65" pos:column="102">SourceLocationComparer</name><argument_list pos:line="65" pos:column="124">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="65" pos:column="127">.</op:operator><call><name pos:line="65" pos:column="128">ToList</name><argument_list pos:line="65" pos:column="134">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
                }</block></then></if>
            }</block></then></if>
            <return pos:line="68" pos:column="13">return <expr><op:operator pos:line="68" pos:column="20">new</op:operator> <call><name><name pos:line="68" pos:column="24">Collection</name><argument_list pos:line="68" pos:column="34">&lt;<argument><name pos:line="68" pos:column="35">MethodCall</name></argument>&gt;</argument_list></name><argument_list pos:line="68" pos:column="46">()</argument_list></call></expr>;</return>
        }</block></function>

        <class><specifier pos:line="71" pos:column="9">private</specifier> class <name pos:line="71" pos:column="23">SourceLocationComparer</name> <super pos:line="71" pos:column="46">: <name><name pos:line="71" pos:column="48">Comparer</name><argument_list pos:line="71" pos:column="56">&lt;<argument><name pos:line="71" pos:column="57">SourceLocation</name></argument>&gt;</argument_list></name></super> <block pos:line="71" pos:column="73">{

            <function><type><specifier pos:line="73" pos:column="13">public</specifier> <specifier pos:line="73" pos:column="20">override</specifier> <name pos:line="73" pos:column="29">int</name></type> <name pos:line="73" pos:column="33">Compare</name><parameter_list pos:line="73" pos:column="40">(<param><decl><type><name pos:line="73" pos:column="41">SourceLocation</name></type> <name pos:line="73" pos:column="56">x</name></decl></param>, <param><decl><type><name pos:line="73" pos:column="59">SourceLocation</name></type> <name pos:line="73" pos:column="74">y</name></decl></param>)</parameter_list> <block pos:line="73" pos:column="77">{
                <if pos:line="74" pos:column="17">if<condition pos:line="74" pos:column="19">(<expr><call><name><name pos:line="74" pos:column="20">object</name><op:operator pos:line="74" pos:column="26">.</op:operator><name pos:line="74" pos:column="27">Equals</name></name><argument_list pos:line="74" pos:column="33">(<argument><expr><name pos:line="74" pos:column="34">x</name></expr></argument>, <argument><expr><name pos:line="74" pos:column="37">y</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="74" pos:column="40">
                    <return pos:line="75" pos:column="21">return <expr><lit:literal type="number" pos:line="75" pos:column="28">0</lit:literal></expr>;</return></then></if>
                <if pos:line="76" pos:column="17">if<condition pos:line="76" pos:column="19">(<expr><name pos:line="76" pos:column="20">x</name> <op:operator pos:line="76" pos:column="22">==</op:operator> <name pos:line="76" pos:column="25">null</name> <op:operator pos:line="76" pos:column="30">&amp;&amp;</op:operator> <name pos:line="76" pos:column="33">y</name> <op:operator pos:line="76" pos:column="35">!=</op:operator> <name pos:line="76" pos:column="38">null</name></expr>)</condition><then pos:line="76" pos:column="43">
                    <return pos:line="77" pos:column="21">return <expr><op:operator pos:line="77" pos:column="28">-</op:operator><lit:literal type="number" pos:line="77" pos:column="29">1</lit:literal></expr>;</return></then></if>
                <if pos:line="78" pos:column="17">if<condition pos:line="78" pos:column="19">(<expr><name pos:line="78" pos:column="20">x</name> <op:operator pos:line="78" pos:column="22">!=</op:operator> <name pos:line="78" pos:column="25">null</name> <op:operator pos:line="78" pos:column="30">&amp;&amp;</op:operator> <name pos:line="78" pos:column="33">y</name> <op:operator pos:line="78" pos:column="35">==</op:operator> <name pos:line="78" pos:column="38">null</name></expr>)</condition><then pos:line="78" pos:column="43">
                    <return pos:line="79" pos:column="21">return <expr><lit:literal type="number" pos:line="79" pos:column="28">1</lit:literal></expr>;</return></then></if>

                <decl_stmt><decl><type><name pos:line="81" pos:column="17">var</name></type> <name pos:line="81" pos:column="21">result</name> <init pos:line="81" pos:column="28">= <expr><call><name><name pos:line="81" pos:column="30">x</name><op:operator pos:line="81" pos:column="31">.</op:operator><name pos:line="81" pos:column="32">StartingLineNumber</name><op:operator pos:line="81" pos:column="50">.</op:operator><name pos:line="81" pos:column="51">CompareTo</name></name><argument_list pos:line="81" pos:column="60">(<argument><expr><name><name pos:line="81" pos:column="61">y</name><op:operator pos:line="81" pos:column="62">.</op:operator><name pos:line="81" pos:column="63">StartingLineNumber</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="82" pos:column="17">if<condition pos:line="82" pos:column="19">(<expr><name pos:line="82" pos:column="20">result</name> <op:operator pos:line="82" pos:column="27">==</op:operator> <lit:literal type="number" pos:line="82" pos:column="30">0</lit:literal></expr>)</condition><then pos:line="82" pos:column="32"> <block pos:line="82" pos:column="33">{
                    <expr_stmt><expr><name pos:line="83" pos:column="21">result</name> <op:operator pos:line="83" pos:column="28">=</op:operator> <call><name><name pos:line="83" pos:column="30">x</name><op:operator pos:line="83" pos:column="31">.</op:operator><name pos:line="83" pos:column="32">StartingColumnNumber</name><op:operator pos:line="83" pos:column="52">.</op:operator><name pos:line="83" pos:column="53">CompareTo</name></name><argument_list pos:line="83" pos:column="62">(<argument><expr><name><name pos:line="83" pos:column="63">y</name><op:operator pos:line="83" pos:column="64">.</op:operator><name pos:line="83" pos:column="65">StartingColumnNumber</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <return pos:line="85" pos:column="17">return <expr><name pos:line="85" pos:column="24">result</name></expr>;</return>
            }</block></function>
        }</block></class>
    }</block></class>
}</block></namespace>
</unit>
