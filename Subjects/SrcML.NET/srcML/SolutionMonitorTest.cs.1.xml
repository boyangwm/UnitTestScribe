<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Test\SolutionMonitorTest.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2011 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - Initial implementation
 *    Jiang Zheng (ABB Group) - Initial implementation
 *****************************************************************************/</comment>

<using pos:line="13" pos:column="1">using <name pos:line="13" pos:column="7">System</name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Collections</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">Generic</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Diagnostics</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">IO</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Linq</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Xml</name><op:operator pos:line="18" pos:column="17">.</op:operator><name pos:line="18" pos:column="18">Linq</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">ABB</name><op:operator pos:line="19" pos:column="10">.</op:operator><name pos:line="19" pos:column="11">SrcML</name></name>;</using>
<using pos:line="20" pos:column="1">using <name><name pos:line="20" pos:column="7">NUnit</name><op:operator pos:line="20" pos:column="12">.</op:operator><name pos:line="20" pos:column="13">Framework</name></name>;</using>
<using pos:line="21" pos:column="1">using <name pos:line="21" pos:column="7">NSubstitute</name>;</using>

<namespace pos:line="23" pos:column="1">namespace <name><name pos:line="23" pos:column="11">ABB</name><op:operator pos:line="23" pos:column="14">.</op:operator><name pos:line="23" pos:column="15">SrcML</name><op:operator pos:line="23" pos:column="20">.</op:operator><name pos:line="23" pos:column="21">Test</name></name>
<block pos:line="24" pos:column="1">{
    <class><attribute pos:line="25" pos:column="5">[<expr><name pos:line="25" pos:column="6">TestFixture</name></expr>]</attribute>
    class <name pos:line="26" pos:column="11">SolutionMonitorTest</name>
    <block pos:line="27" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="28" pos:column="9">public</specifier> <specifier pos:line="28" pos:column="16">const</specifier> <name pos:line="28" pos:column="22">string</name></type> <name pos:line="28" pos:column="29">SOURCEDIRECTORY</name> <init pos:line="28" pos:column="45">= <expr><lit:literal type="string" pos:line="28" pos:column="47">"testSourceDir"</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="29" pos:column="9">private</specifier> <name pos:line="29" pos:column="17">DirectoryInfo</name></type> <name pos:line="29" pos:column="31">srcDirectoryInfo</name></decl>;</decl_stmt>

        <function><type><attribute pos:line="31" pos:column="9">[<expr><name pos:line="31" pos:column="10">TestFixtureSetUp</name></expr>]</attribute>
        <specifier pos:line="32" pos:column="9">public</specifier> <name pos:line="32" pos:column="16">void</name></type> <name pos:line="32" pos:column="21">Setup</name><parameter_list pos:line="32" pos:column="26">()</parameter_list>
        <block pos:line="33" pos:column="9">{
            <if pos:line="34" pos:column="13">if <condition pos:line="34" pos:column="16">(<expr><call><name><name pos:line="34" pos:column="17">Directory</name><op:operator pos:line="34" pos:column="26">.</op:operator><name pos:line="34" pos:column="27">Exists</name></name><argument_list pos:line="34" pos:column="33">(<argument><expr><name pos:line="34" pos:column="34">SOURCEDIRECTORY</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="34" pos:column="51">
            <block pos:line="35" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="36" pos:column="17">Directory</name><op:operator pos:line="36" pos:column="26">.</op:operator><name pos:line="36" pos:column="27">Delete</name></name><argument_list pos:line="36" pos:column="33">(<argument><expr><name pos:line="36" pos:column="34">SOURCEDIRECTORY</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="36" pos:column="51">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name pos:line="38" pos:column="13">srcDirectoryInfo</name> <op:operator pos:line="38" pos:column="30">=</op:operator> <call><name><name pos:line="38" pos:column="32">Directory</name><op:operator pos:line="38" pos:column="41">.</op:operator><name pos:line="38" pos:column="42">CreateDirectory</name></name><argument_list pos:line="38" pos:column="57">(<argument><expr><name pos:line="38" pos:column="58">SOURCEDIRECTORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="41" pos:column="9">// Added on 2012.10.10</comment>
        <function><type><attribute pos:line="42" pos:column="9">[<expr><name pos:line="42" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="43" pos:column="9">public</specifier> <name pos:line="43" pos:column="16">void</name></type> <name pos:line="43" pos:column="21">GenerateXmlForDirectoryTest</name><parameter_list pos:line="43" pos:column="48">()</parameter_list>
        <block pos:line="44" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="45" pos:column="13">IFileMonitor</name></type> <name pos:line="45" pos:column="26">watchedFolder</name> <init pos:line="45" pos:column="40">= <expr><call><name><name pos:line="45" pos:column="42">Substitute</name><op:operator pos:line="45" pos:column="52">.</op:operator><name><name pos:line="45" pos:column="53">For</name><argument_list pos:line="45" pos:column="56">&lt;<argument><name pos:line="45" pos:column="57">IFileMonitor</name></argument>&gt;</argument_list></name></name><argument_list pos:line="45" pos:column="70">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="47" pos:column="13">var</name></type> <name pos:line="47" pos:column="17">archive</name> <init pos:line="47" pos:column="25">= <expr><op:operator pos:line="47" pos:column="27">new</op:operator> <call><name pos:line="47" pos:column="31">SrcMLArchive</name><argument_list pos:line="47" pos:column="43">(<argument><expr><name pos:line="47" pos:column="44">watchedFolder</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="47" pos:column="59">".srcml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="48" pos:column="13">archive</name><op:operator pos:line="48" pos:column="20">.</op:operator><name pos:line="48" pos:column="21">XmlGenerator</name><op:operator pos:line="48" pos:column="33">.</op:operator><name pos:line="48" pos:column="34">ApplicationDirectory</name></name> <op:operator pos:line="48" pos:column="55">=</op:operator> <name><name pos:line="48" pos:column="57">TestConstants</name><op:operator pos:line="48" pos:column="70">.</op:operator><name pos:line="48" pos:column="71">SrcmlPath</name></name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="49" pos:column="13">var</name></type> <name pos:line="49" pos:column="17">xmlDirectory</name> <init pos:line="49" pos:column="30">= <expr><op:operator pos:line="49" pos:column="32">new</op:operator> <call><name pos:line="49" pos:column="36">DirectoryInfo</name><argument_list pos:line="49" pos:column="49">(<argument><expr><name><name pos:line="49" pos:column="50">archive</name><op:operator pos:line="49" pos:column="57">.</op:operator><name pos:line="49" pos:column="58">ArchivePath</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="51" pos:column="13">File</name><op:operator pos:line="51" pos:column="17">.</op:operator><name pos:line="51" pos:column="18">WriteAllText</name></name><argument_list pos:line="51" pos:column="30">(<argument><expr><name pos:line="51" pos:column="31">SOURCEDIRECTORY</name> <op:operator pos:line="51" pos:column="47">+</op:operator> <lit:literal type="string" pos:line="51" pos:column="49">"\\foo.c"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="51" pos:column="60">String</name><op:operator pos:line="51" pos:column="66">.</op:operator><name pos:line="51" pos:column="67">Format</name></name><argument_list pos:line="51" pos:column="73">(<argument><expr><lit:literal type="string" pos:line="51" pos:column="74">@"int foo() {{{0}printf(""hello world!"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="124">Environment</name><op:operator pos:line="51" pos:column="135">.</op:operator><name pos:line="51" pos:column="136">NewLine</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="52" pos:column="13">File</name><op:operator pos:line="52" pos:column="17">.</op:operator><name pos:line="52" pos:column="18">WriteAllText</name></name><argument_list pos:line="52" pos:column="30">(<argument><expr><name pos:line="52" pos:column="31">SOURCEDIRECTORY</name> <op:operator pos:line="52" pos:column="47">+</op:operator> <lit:literal type="string" pos:line="52" pos:column="49">"\\bar.c"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="52" pos:column="60">String</name><op:operator pos:line="52" pos:column="66">.</op:operator><name pos:line="52" pos:column="67">Format</name></name><argument_list pos:line="52" pos:column="73">(<argument><expr><lit:literal type="string" pos:line="52" pos:column="74">@"int bar() {{{0}    printf(""goodbye, world!"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="52" pos:column="131">Environment</name><op:operator pos:line="52" pos:column="142">.</op:operator><name pos:line="52" pos:column="143">NewLine</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="53" pos:column="13">Directory</name><op:operator pos:line="53" pos:column="22">.</op:operator><name pos:line="53" pos:column="23">CreateDirectory</name></name><argument_list pos:line="53" pos:column="38">(<argument><expr><call><name><name pos:line="53" pos:column="39">Path</name><op:operator pos:line="53" pos:column="43">.</op:operator><name pos:line="53" pos:column="44">Combine</name></name><argument_list pos:line="53" pos:column="51">(<argument><expr><name pos:line="53" pos:column="52">SOURCEDIRECTORY</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="53" pos:column="69">"subdir1"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="54" pos:column="13">File</name><op:operator pos:line="54" pos:column="17">.</op:operator><name pos:line="54" pos:column="18">WriteAllText</name></name><argument_list pos:line="54" pos:column="30">(<argument><expr><name pos:line="54" pos:column="31">SOURCEDIRECTORY</name> <op:operator pos:line="54" pos:column="47">+</op:operator> <lit:literal type="string" pos:line="54" pos:column="49">"\\subdir1\\foo1.c"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="54" pos:column="70">String</name><op:operator pos:line="54" pos:column="76">.</op:operator><name pos:line="54" pos:column="77">Format</name></name><argument_list pos:line="54" pos:column="83">(<argument><expr><lit:literal type="string" pos:line="54" pos:column="84">@"int foo1() {{{0}printf(""hello world 1!"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="137">Environment</name><op:operator pos:line="54" pos:column="148">.</op:operator><name pos:line="54" pos:column="149">NewLine</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="55" pos:column="13">File</name><op:operator pos:line="55" pos:column="17">.</op:operator><name pos:line="55" pos:column="18">WriteAllText</name></name><argument_list pos:line="55" pos:column="30">(<argument><expr><name pos:line="55" pos:column="31">SOURCEDIRECTORY</name> <op:operator pos:line="55" pos:column="47">+</op:operator> <lit:literal type="string" pos:line="55" pos:column="49">"\\subdir1\\bar1.c"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="55" pos:column="70">String</name><op:operator pos:line="55" pos:column="76">.</op:operator><name pos:line="55" pos:column="77">Format</name></name><argument_list pos:line="55" pos:column="83">(<argument><expr><lit:literal type="string" pos:line="55" pos:column="84">@"int bar1() {{{0}    printf(""goodbye, world 1!"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="55" pos:column="144">Environment</name><op:operator pos:line="55" pos:column="155">.</op:operator><name pos:line="55" pos:column="156">NewLine</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="56" pos:column="13">Directory</name><op:operator pos:line="56" pos:column="22">.</op:operator><name pos:line="56" pos:column="23">CreateDirectory</name></name><argument_list pos:line="56" pos:column="38">(<argument><expr><call><name><name pos:line="56" pos:column="39">Path</name><op:operator pos:line="56" pos:column="43">.</op:operator><name pos:line="56" pos:column="44">Combine</name></name><argument_list pos:line="56" pos:column="51">(<argument><expr><name pos:line="56" pos:column="52">SOURCEDIRECTORY</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="56" pos:column="69">"subdir2"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="57" pos:column="13">File</name><op:operator pos:line="57" pos:column="17">.</op:operator><name pos:line="57" pos:column="18">WriteAllText</name></name><argument_list pos:line="57" pos:column="30">(<argument><expr><name pos:line="57" pos:column="31">SOURCEDIRECTORY</name> <op:operator pos:line="57" pos:column="47">+</op:operator> <lit:literal type="string" pos:line="57" pos:column="49">"\\subdir2\\foo2.c"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="57" pos:column="70">String</name><op:operator pos:line="57" pos:column="76">.</op:operator><name pos:line="57" pos:column="77">Format</name></name><argument_list pos:line="57" pos:column="83">(<argument><expr><lit:literal type="string" pos:line="57" pos:column="84">@"int foo2() {{{0}printf(""hello world 2!"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="57" pos:column="137">Environment</name><op:operator pos:line="57" pos:column="148">.</op:operator><name pos:line="57" pos:column="149">NewLine</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="58" pos:column="13">File</name><op:operator pos:line="58" pos:column="17">.</op:operator><name pos:line="58" pos:column="18">WriteAllText</name></name><argument_list pos:line="58" pos:column="30">(<argument><expr><name pos:line="58" pos:column="31">SOURCEDIRECTORY</name> <op:operator pos:line="58" pos:column="47">+</op:operator> <lit:literal type="string" pos:line="58" pos:column="49">"\\subdir2\\bar2.c"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="58" pos:column="70">String</name><op:operator pos:line="58" pos:column="76">.</op:operator><name pos:line="58" pos:column="77">Format</name></name><argument_list pos:line="58" pos:column="83">(<argument><expr><lit:literal type="string" pos:line="58" pos:column="84">@"int bar2() {{{0}    printf(""goodbye, world 2!"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="58" pos:column="144">Environment</name><op:operator pos:line="58" pos:column="155">.</op:operator><name pos:line="58" pos:column="156">NewLine</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="59" pos:column="13">Directory</name><op:operator pos:line="59" pos:column="22">.</op:operator><name pos:line="59" pos:column="23">CreateDirectory</name></name><argument_list pos:line="59" pos:column="38">(<argument><expr><call><name><name pos:line="59" pos:column="39">Path</name><op:operator pos:line="59" pos:column="43">.</op:operator><name pos:line="59" pos:column="44">Combine</name></name><argument_list pos:line="59" pos:column="51">(<argument><expr><name pos:line="59" pos:column="52">SOURCEDIRECTORY</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="59" pos:column="69">"subdir1\\subdir11"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="60" pos:column="13">File</name><op:operator pos:line="60" pos:column="17">.</op:operator><name pos:line="60" pos:column="18">WriteAllText</name></name><argument_list pos:line="60" pos:column="30">(<argument><expr><name pos:line="60" pos:column="31">SOURCEDIRECTORY</name> <op:operator pos:line="60" pos:column="47">+</op:operator> <lit:literal type="string" pos:line="60" pos:column="49">"\\subdir1\\subdir11\\foo11.c"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="60" pos:column="81">String</name><op:operator pos:line="60" pos:column="87">.</op:operator><name pos:line="60" pos:column="88">Format</name></name><argument_list pos:line="60" pos:column="94">(<argument><expr><lit:literal type="string" pos:line="60" pos:column="95">@"int foo11() {{{0}printf(""hello world 11!"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="60" pos:column="150">Environment</name><op:operator pos:line="60" pos:column="161">.</op:operator><name pos:line="60" pos:column="162">NewLine</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="61" pos:column="13">File</name><op:operator pos:line="61" pos:column="17">.</op:operator><name pos:line="61" pos:column="18">WriteAllText</name></name><argument_list pos:line="61" pos:column="30">(<argument><expr><name pos:line="61" pos:column="31">SOURCEDIRECTORY</name> <op:operator pos:line="61" pos:column="47">+</op:operator> <lit:literal type="string" pos:line="61" pos:column="49">"\\subdir1\\subdir11\\bar11.c"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="61" pos:column="81">String</name><op:operator pos:line="61" pos:column="87">.</op:operator><name pos:line="61" pos:column="88">Format</name></name><argument_list pos:line="61" pos:column="94">(<argument><expr><lit:literal type="string" pos:line="61" pos:column="95">@"int bar11() {{{0}    printf(""goodbye, world 11!"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="61" pos:column="157">Environment</name><op:operator pos:line="61" pos:column="168">.</op:operator><name pos:line="61" pos:column="169">NewLine</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="62" pos:column="13">Directory</name><op:operator pos:line="62" pos:column="22">.</op:operator><name pos:line="62" pos:column="23">CreateDirectory</name></name><argument_list pos:line="62" pos:column="38">(<argument><expr><call><name><name pos:line="62" pos:column="39">Path</name><op:operator pos:line="62" pos:column="43">.</op:operator><name pos:line="62" pos:column="44">Combine</name></name><argument_list pos:line="62" pos:column="51">(<argument><expr><name pos:line="62" pos:column="52">SOURCEDIRECTORY</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="62" pos:column="69">"subdir1\\subdir12"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="63" pos:column="13">File</name><op:operator pos:line="63" pos:column="17">.</op:operator><name pos:line="63" pos:column="18">WriteAllText</name></name><argument_list pos:line="63" pos:column="30">(<argument><expr><name pos:line="63" pos:column="31">SOURCEDIRECTORY</name> <op:operator pos:line="63" pos:column="47">+</op:operator> <lit:literal type="string" pos:line="63" pos:column="49">"\\subdir1\\subdir12\\foo12.c"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="63" pos:column="81">String</name><op:operator pos:line="63" pos:column="87">.</op:operator><name pos:line="63" pos:column="88">Format</name></name><argument_list pos:line="63" pos:column="94">(<argument><expr><lit:literal type="string" pos:line="63" pos:column="95">@"int foo12() {{{0}printf(""hello world 12!"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="63" pos:column="150">Environment</name><op:operator pos:line="63" pos:column="161">.</op:operator><name pos:line="63" pos:column="162">NewLine</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="64" pos:column="13">File</name><op:operator pos:line="64" pos:column="17">.</op:operator><name pos:line="64" pos:column="18">WriteAllText</name></name><argument_list pos:line="64" pos:column="30">(<argument><expr><name pos:line="64" pos:column="31">SOURCEDIRECTORY</name> <op:operator pos:line="64" pos:column="47">+</op:operator> <lit:literal type="string" pos:line="64" pos:column="49">"\\subdir1\\subdir12\\bar12.c"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="64" pos:column="81">String</name><op:operator pos:line="64" pos:column="87">.</op:operator><name pos:line="64" pos:column="88">Format</name></name><argument_list pos:line="64" pos:column="94">(<argument><expr><lit:literal type="string" pos:line="64" pos:column="95">@"int bar12() {{{0}    printf(""goodbye, world 12!"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="64" pos:column="157">Environment</name><op:operator pos:line="64" pos:column="168">.</op:operator><name pos:line="64" pos:column="169">NewLine</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="65" pos:column="13">Directory</name><op:operator pos:line="65" pos:column="22">.</op:operator><name pos:line="65" pos:column="23">CreateDirectory</name></name><argument_list pos:line="65" pos:column="38">(<argument><expr><call><name><name pos:line="65" pos:column="39">Path</name><op:operator pos:line="65" pos:column="43">.</op:operator><name pos:line="65" pos:column="44">Combine</name></name><argument_list pos:line="65" pos:column="51">(<argument><expr><name pos:line="65" pos:column="52">SOURCEDIRECTORY</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="65" pos:column="69">"subdir2\\subdir21"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="66" pos:column="13">File</name><op:operator pos:line="66" pos:column="17">.</op:operator><name pos:line="66" pos:column="18">WriteAllText</name></name><argument_list pos:line="66" pos:column="30">(<argument><expr><name pos:line="66" pos:column="31">SOURCEDIRECTORY</name> <op:operator pos:line="66" pos:column="47">+</op:operator> <lit:literal type="string" pos:line="66" pos:column="49">"\\subdir2\\subdir21\\foo21.c"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="66" pos:column="81">String</name><op:operator pos:line="66" pos:column="87">.</op:operator><name pos:line="66" pos:column="88">Format</name></name><argument_list pos:line="66" pos:column="94">(<argument><expr><lit:literal type="string" pos:line="66" pos:column="95">@"int foo21() {{{0}printf(""hello world 21!"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="66" pos:column="150">Environment</name><op:operator pos:line="66" pos:column="161">.</op:operator><name pos:line="66" pos:column="162">NewLine</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="67" pos:column="13">File</name><op:operator pos:line="67" pos:column="17">.</op:operator><name pos:line="67" pos:column="18">WriteAllText</name></name><argument_list pos:line="67" pos:column="30">(<argument><expr><name pos:line="67" pos:column="31">SOURCEDIRECTORY</name> <op:operator pos:line="67" pos:column="47">+</op:operator> <lit:literal type="string" pos:line="67" pos:column="49">"\\subdir2\\subdir21\\bar21.c"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="67" pos:column="81">String</name><op:operator pos:line="67" pos:column="87">.</op:operator><name pos:line="67" pos:column="88">Format</name></name><argument_list pos:line="67" pos:column="94">(<argument><expr><lit:literal type="string" pos:line="67" pos:column="95">@"int bar21() {{{0}    printf(""goodbye, world 21!"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="67" pos:column="157">Environment</name><op:operator pos:line="67" pos:column="168">.</op:operator><name pos:line="67" pos:column="169">NewLine</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="68" pos:column="13">Directory</name><op:operator pos:line="68" pos:column="22">.</op:operator><name pos:line="68" pos:column="23">CreateDirectory</name></name><argument_list pos:line="68" pos:column="38">(<argument><expr><call><name><name pos:line="68" pos:column="39">Path</name><op:operator pos:line="68" pos:column="43">.</op:operator><name pos:line="68" pos:column="44">Combine</name></name><argument_list pos:line="68" pos:column="51">(<argument><expr><name pos:line="68" pos:column="52">SOURCEDIRECTORY</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="68" pos:column="69">"subdir2\\subdir22"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="69" pos:column="13">File</name><op:operator pos:line="69" pos:column="17">.</op:operator><name pos:line="69" pos:column="18">WriteAllText</name></name><argument_list pos:line="69" pos:column="30">(<argument><expr><name pos:line="69" pos:column="31">SOURCEDIRECTORY</name> <op:operator pos:line="69" pos:column="47">+</op:operator> <lit:literal type="string" pos:line="69" pos:column="49">"\\subdir2\\subdir22\\foo22.c"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="69" pos:column="81">String</name><op:operator pos:line="69" pos:column="87">.</op:operator><name pos:line="69" pos:column="88">Format</name></name><argument_list pos:line="69" pos:column="94">(<argument><expr><lit:literal type="string" pos:line="69" pos:column="95">@"int foo22() {{{0}printf(""hello world 22!"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="69" pos:column="150">Environment</name><op:operator pos:line="69" pos:column="161">.</op:operator><name pos:line="69" pos:column="162">NewLine</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="70" pos:column="13">File</name><op:operator pos:line="70" pos:column="17">.</op:operator><name pos:line="70" pos:column="18">WriteAllText</name></name><argument_list pos:line="70" pos:column="30">(<argument><expr><name pos:line="70" pos:column="31">SOURCEDIRECTORY</name> <op:operator pos:line="70" pos:column="47">+</op:operator> <lit:literal type="string" pos:line="70" pos:column="49">"\\subdir2\\subdir22\\bar22.c"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="70" pos:column="81">String</name><op:operator pos:line="70" pos:column="87">.</op:operator><name pos:line="70" pos:column="88">Format</name></name><argument_list pos:line="70" pos:column="94">(<argument><expr><lit:literal type="string" pos:line="70" pos:column="95">@"int bar22() {{{0}    printf(""goodbye, world 22!"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="70" pos:column="157">Environment</name><op:operator pos:line="70" pos:column="168">.</op:operator><name pos:line="70" pos:column="169">NewLine</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="72" pos:column="13">System</name><op:operator pos:line="72" pos:column="19">.</op:operator><name pos:line="72" pos:column="20">Threading</name><op:operator pos:line="72" pos:column="29">.</op:operator><name pos:line="72" pos:column="30">Thread</name><op:operator pos:line="72" pos:column="36">.</op:operator><name pos:line="72" pos:column="37">Sleep</name></name><argument_list pos:line="72" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="72" pos:column="43">5000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="73" pos:column="13">////archive.GenerateXmlForDirectory(SOURCEDIRECTORY);</comment>
            <comment type="block" pos:line="74" pos:column="13">/*
            Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "foo.c.xml")));
            Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "bar.c.xml")));
            Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir1\\foo1.c.xml")));
            Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir1\\bar1.c.xml")));
            Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir2\\foo2.c.xml")));
            Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir2\\bar2.c.xml")));
            Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir1\\subdir11\\foo11.c.xml")));
            Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir1\\subdir11\\bar11.c.xml")));
            Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir1\\subdir12\\foo12.c.xml")));
            Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir1\\subdir12\\bar12.c.xml")));
            Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir2\\subdir21\\foo21.c.xml")));
            Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir2\\subdir21\\bar21.c.xml")));
            Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir2\\subdir22\\foo22.c.xml")));
            Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir2\\subdir22\\bar22.c.xml")));
            Assert.That(archive.FileUnits.Count(), Is.EqualTo(14));
            */</comment>

            <expr_stmt><expr><call><name><name pos:line="92" pos:column="13">File</name><op:operator pos:line="92" pos:column="17">.</op:operator><name pos:line="92" pos:column="18">WriteAllText</name></name><argument_list pos:line="92" pos:column="30">(<argument><expr><name pos:line="92" pos:column="31">SOURCEDIRECTORY</name> <op:operator pos:line="92" pos:column="47">+</op:operator> <lit:literal type="string" pos:line="92" pos:column="49">"\\foo.c"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="92" pos:column="60">String</name><op:operator pos:line="92" pos:column="66">.</op:operator><name pos:line="92" pos:column="67">Format</name></name><argument_list pos:line="92" pos:column="73">(<argument><expr><lit:literal type="string" pos:line="92" pos:column="74">@"int foo() {{{0}printf(""hello world! changed"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="92" pos:column="132">Environment</name><op:operator pos:line="92" pos:column="143">.</op:operator><name pos:line="92" pos:column="144">NewLine</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="93" pos:column="13">File</name><op:operator pos:line="93" pos:column="17">.</op:operator><name pos:line="93" pos:column="18">WriteAllText</name></name><argument_list pos:line="93" pos:column="30">(<argument><expr><name pos:line="93" pos:column="31">SOURCEDIRECTORY</name> <op:operator pos:line="93" pos:column="47">+</op:operator> <lit:literal type="string" pos:line="93" pos:column="49">"\\subdir2\\subdir21\\bar21.c"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="93" pos:column="81">String</name><op:operator pos:line="93" pos:column="87">.</op:operator><name pos:line="93" pos:column="88">Format</name></name><argument_list pos:line="93" pos:column="94">(<argument><expr><lit:literal type="string" pos:line="93" pos:column="95">@"int bar21() {{{0}    printf(""goodbye, world 21! changed"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="93" pos:column="165">Environment</name><op:operator pos:line="93" pos:column="176">.</op:operator><name pos:line="93" pos:column="177">NewLine</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="94" pos:column="13">File</name><op:operator pos:line="94" pos:column="17">.</op:operator><name pos:line="94" pos:column="18">Delete</name></name><argument_list pos:line="94" pos:column="24">(<argument><expr><lit:literal type="string" pos:line="94" pos:column="25">"C:\\Users\\USJIZHE\\Documents\\GitHub\\SrcML.NET\\Build\\Debug\\testSourceDir\\subdir1\\subdir12\\bar12.c"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="95" pos:column="13">File</name><op:operator pos:line="95" pos:column="17">.</op:operator><name pos:line="95" pos:column="18">Move</name></name><argument_list pos:line="95" pos:column="22">(<argument><expr><lit:literal type="string" pos:line="95" pos:column="23">"C:\\Users\\USJIZHE\\Documents\\GitHub\\SrcML.NET\\Build\\Debug\\testSourceDir\\subdir1\\subdir11\\foo11.c"</lit:literal></expr></argument>,
                <argument><expr><lit:literal type="string" pos:line="96" pos:column="17">"C:\\Users\\USJIZHE\\Documents\\GitHub\\SrcML.NET\\Build\\Debug\\testSourceDir\\subdir1\\subdir11\\foo1111111.c"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="98" pos:column="13">System</name><op:operator pos:line="98" pos:column="19">.</op:operator><name pos:line="98" pos:column="20">Threading</name><op:operator pos:line="98" pos:column="29">.</op:operator><name pos:line="98" pos:column="30">Thread</name><op:operator pos:line="98" pos:column="36">.</op:operator><name pos:line="98" pos:column="37">Sleep</name></name><argument_list pos:line="98" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="98" pos:column="43">5000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="99" pos:column="13">////archive.GenerateXmlForDirectory(SOURCEDIRECTORY);</comment>
            <comment type="block" pos:line="100" pos:column="13">/*
            Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "foo.c.xml")));
            Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "bar.c.xml")));
            Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir1\\foo1.c.xml")));
            Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir1\\bar1.c.xml")));
            Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir2\\foo2.c.xml")));
            Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir2\\bar2.c.xml")));
            Assert.That(!File.Exists(Path.Combine(xmlDirectory.FullName, "subdir1\\subdir11\\foo11.c.xml")));
            Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir1\\subdir11\\foo1111111.c.xml")));
            Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir1\\subdir11\\bar11.c.xml")));
            Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir1\\subdir12\\foo12.c.xml")));
            Assert.That(!File.Exists(Path.Combine(xmlDirectory.FullName, "subdir1\\subdir12\\bar12.c.xml")));
            Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir2\\subdir21\\foo21.c.xml")));
            Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir2\\subdir21\\bar21.c.xml")));
            Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir2\\subdir22\\foo22.c.xml")));
            Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir2\\subdir22\\bar22.c.xml")));
            Assert.That(archive.FileUnits.Count(), Is.EqualTo(13));
            */</comment>

        }</block></function>

        <comment type="line" pos:line="121" pos:column="9">// Added on 2012.10.09</comment>
        <function><type><attribute pos:line="122" pos:column="9">[<expr><name pos:line="122" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="123" pos:column="9">public</specifier> <name pos:line="123" pos:column="16">void</name></type> <name pos:line="123" pos:column="21">GenerateXmlForSourceTest</name><parameter_list pos:line="123" pos:column="45">()</parameter_list>
        <block pos:line="124" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="125" pos:column="13">IFileMonitor</name></type> <name pos:line="125" pos:column="26">watchedFolder</name> <init pos:line="125" pos:column="40">= <expr><call><name><name pos:line="125" pos:column="42">Substitute</name><op:operator pos:line="125" pos:column="52">.</op:operator><name><name pos:line="125" pos:column="53">For</name><argument_list pos:line="125" pos:column="56">&lt;<argument><name pos:line="125" pos:column="57">IFileMonitor</name></argument>&gt;</argument_list></name></name><argument_list pos:line="125" pos:column="70">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="127" pos:column="13">var</name></type> <name pos:line="127" pos:column="17">archive</name> <init pos:line="127" pos:column="25">= <expr><op:operator pos:line="127" pos:column="27">new</op:operator> <call><name pos:line="127" pos:column="31">SrcMLArchive</name><argument_list pos:line="127" pos:column="43">(<argument><expr><name pos:line="127" pos:column="44">watchedFolder</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="127" pos:column="59">".srcml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="128" pos:column="13">archive</name><op:operator pos:line="128" pos:column="20">.</op:operator><name pos:line="128" pos:column="21">XmlGenerator</name><op:operator pos:line="128" pos:column="33">.</op:operator><name pos:line="128" pos:column="34">ApplicationDirectory</name></name> <op:operator pos:line="128" pos:column="55">=</op:operator> <name><name pos:line="128" pos:column="57">TestConstants</name><op:operator pos:line="128" pos:column="70">.</op:operator><name pos:line="128" pos:column="71">SrcmlPath</name></name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="129" pos:column="13">var</name></type> <name pos:line="129" pos:column="17">xmlDirectory</name> <init pos:line="129" pos:column="30">= <expr><op:operator pos:line="129" pos:column="32">new</op:operator> <call><name pos:line="129" pos:column="36">DirectoryInfo</name><argument_list pos:line="129" pos:column="49">(<argument><expr><name><name pos:line="129" pos:column="50">archive</name><op:operator pos:line="129" pos:column="57">.</op:operator><name pos:line="129" pos:column="58">ArchivePath</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="131" pos:column="13">File</name><op:operator pos:line="131" pos:column="17">.</op:operator><name pos:line="131" pos:column="18">WriteAllText</name></name><argument_list pos:line="131" pos:column="30">(<argument><expr><name pos:line="131" pos:column="31">SOURCEDIRECTORY</name> <op:operator pos:line="131" pos:column="47">+</op:operator> <lit:literal type="string" pos:line="131" pos:column="49">"\\foo.c"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="131" pos:column="60">String</name><op:operator pos:line="131" pos:column="66">.</op:operator><name pos:line="131" pos:column="67">Format</name></name><argument_list pos:line="131" pos:column="73">(<argument><expr><lit:literal type="string" pos:line="131" pos:column="74">@"int foo() {{{0}printf(""hello world!"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="131" pos:column="124">Environment</name><op:operator pos:line="131" pos:column="135">.</op:operator><name pos:line="131" pos:column="136">NewLine</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="132" pos:column="13">File</name><op:operator pos:line="132" pos:column="17">.</op:operator><name pos:line="132" pos:column="18">WriteAllText</name></name><argument_list pos:line="132" pos:column="30">(<argument><expr><name pos:line="132" pos:column="31">SOURCEDIRECTORY</name> <op:operator pos:line="132" pos:column="47">+</op:operator> <lit:literal type="string" pos:line="132" pos:column="49">"\\bar.c"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="132" pos:column="60">String</name><op:operator pos:line="132" pos:column="66">.</op:operator><name pos:line="132" pos:column="67">Format</name></name><argument_list pos:line="132" pos:column="73">(<argument><expr><lit:literal type="string" pos:line="132" pos:column="74">@"int bar() {{{0}    printf(""goodbye, world!"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="132" pos:column="131">Environment</name><op:operator pos:line="132" pos:column="142">.</op:operator><name pos:line="132" pos:column="143">NewLine</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="134" pos:column="13">archive</name><op:operator pos:line="134" pos:column="20">.</op:operator><name pos:line="134" pos:column="21">GenerateXmlForSource</name></name><argument_list pos:line="134" pos:column="41">(<argument><expr><name pos:line="134" pos:column="42">SOURCEDIRECTORY</name> <op:operator pos:line="134" pos:column="58">+</op:operator> <lit:literal type="string" pos:line="134" pos:column="60">"\\foo.c"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="135" pos:column="13">archive</name><op:operator pos:line="135" pos:column="20">.</op:operator><name pos:line="135" pos:column="21">GenerateXmlForSource</name></name><argument_list pos:line="135" pos:column="41">(<argument><expr><name pos:line="135" pos:column="42">SOURCEDIRECTORY</name> <op:operator pos:line="135" pos:column="58">+</op:operator> <lit:literal type="string" pos:line="135" pos:column="60">"\\bar.c"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="137" pos:column="13">Assert</name><op:operator pos:line="137" pos:column="19">.</op:operator><name pos:line="137" pos:column="20">That</name></name><argument_list pos:line="137" pos:column="24">(<argument><expr><call><name><name pos:line="137" pos:column="25">File</name><op:operator pos:line="137" pos:column="29">.</op:operator><name pos:line="137" pos:column="30">Exists</name></name><argument_list pos:line="137" pos:column="36">(<argument><expr><call><name><name pos:line="137" pos:column="37">Path</name><op:operator pos:line="137" pos:column="41">.</op:operator><name pos:line="137" pos:column="42">Combine</name></name><argument_list pos:line="137" pos:column="49">(<argument><expr><name><name pos:line="137" pos:column="50">xmlDirectory</name><op:operator pos:line="137" pos:column="62">.</op:operator><name pos:line="137" pos:column="63">FullName</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="137" pos:column="73">"foo.c.xml"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="138" pos:column="13">Assert</name><op:operator pos:line="138" pos:column="19">.</op:operator><name pos:line="138" pos:column="20">That</name></name><argument_list pos:line="138" pos:column="24">(<argument><expr><call><name><name pos:line="138" pos:column="25">File</name><op:operator pos:line="138" pos:column="29">.</op:operator><name pos:line="138" pos:column="30">Exists</name></name><argument_list pos:line="138" pos:column="36">(<argument><expr><call><name><name pos:line="138" pos:column="37">Path</name><op:operator pos:line="138" pos:column="41">.</op:operator><name pos:line="138" pos:column="42">Combine</name></name><argument_list pos:line="138" pos:column="49">(<argument><expr><name><name pos:line="138" pos:column="50">xmlDirectory</name><op:operator pos:line="138" pos:column="62">.</op:operator><name pos:line="138" pos:column="63">FullName</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="138" pos:column="73">"bar.c.xml"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="141" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="142" pos:column="9">/// Added by JZ on 12/3/2012</comment>
        <comment type="line" pos:line="143" pos:column="9">/// Unit test for SrcMLArchive.public string GenerateXmlAndStringForSource(string sourcePath)</comment>
        <comment type="line" pos:line="144" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><attribute pos:line="145" pos:column="9">[<expr><name pos:line="145" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="146" pos:column="9">public</specifier> <name pos:line="146" pos:column="16">void</name></type> <name pos:line="146" pos:column="21">GenerateXmlAndStringForSourceTest</name><parameter_list pos:line="146" pos:column="54">()</parameter_list>
        <block pos:line="147" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="148" pos:column="13">IFileMonitor</name></type> <name pos:line="148" pos:column="26">watchedFolder</name> <init pos:line="148" pos:column="40">= <expr><call><name><name pos:line="148" pos:column="42">Substitute</name><op:operator pos:line="148" pos:column="52">.</op:operator><name><name pos:line="148" pos:column="53">For</name><argument_list pos:line="148" pos:column="56">&lt;<argument><name pos:line="148" pos:column="57">IFileMonitor</name></argument>&gt;</argument_list></name></name><argument_list pos:line="148" pos:column="70">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="150" pos:column="13">var</name></type> <name pos:line="150" pos:column="17">archive</name> <init pos:line="150" pos:column="25">= <expr><op:operator pos:line="150" pos:column="27">new</op:operator> <call><name pos:line="150" pos:column="31">SrcMLArchive</name><argument_list pos:line="150" pos:column="43">(<argument><expr><name pos:line="150" pos:column="44">watchedFolder</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="150" pos:column="59">".srcml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="151" pos:column="13">archive</name><op:operator pos:line="151" pos:column="20">.</op:operator><name pos:line="151" pos:column="21">XmlGenerator</name><op:operator pos:line="151" pos:column="33">.</op:operator><name pos:line="151" pos:column="34">ApplicationDirectory</name></name> <op:operator pos:line="151" pos:column="55">=</op:operator> <name><name pos:line="151" pos:column="57">TestConstants</name><op:operator pos:line="151" pos:column="70">.</op:operator><name pos:line="151" pos:column="71">SrcmlPath</name></name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="152" pos:column="13">var</name></type> <name pos:line="152" pos:column="17">xmlDirectory</name> <init pos:line="152" pos:column="30">= <expr><op:operator pos:line="152" pos:column="32">new</op:operator> <call><name pos:line="152" pos:column="36">DirectoryInfo</name><argument_list pos:line="152" pos:column="49">(<argument><expr><name><name pos:line="152" pos:column="50">archive</name><op:operator pos:line="152" pos:column="57">.</op:operator><name pos:line="152" pos:column="58">ArchivePath</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="154" pos:column="13">File</name><op:operator pos:line="154" pos:column="17">.</op:operator><name pos:line="154" pos:column="18">WriteAllText</name></name><argument_list pos:line="154" pos:column="30">(<argument><expr><name pos:line="154" pos:column="31">SOURCEDIRECTORY</name> <op:operator pos:line="154" pos:column="47">+</op:operator> <lit:literal type="string" pos:line="154" pos:column="49">"\\foo.c"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="154" pos:column="60">String</name><op:operator pos:line="154" pos:column="66">.</op:operator><name pos:line="154" pos:column="67">Format</name></name><argument_list pos:line="154" pos:column="73">(<argument><expr><lit:literal type="string" pos:line="154" pos:column="74">@"int foo() {{{0}printf(""hello world!"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="154" pos:column="124">Environment</name><op:operator pos:line="154" pos:column="135">.</op:operator><name pos:line="154" pos:column="136">NewLine</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="155" pos:column="13">File</name><op:operator pos:line="155" pos:column="17">.</op:operator><name pos:line="155" pos:column="18">WriteAllText</name></name><argument_list pos:line="155" pos:column="30">(<argument><expr><name pos:line="155" pos:column="31">SOURCEDIRECTORY</name> <op:operator pos:line="155" pos:column="47">+</op:operator> <lit:literal type="string" pos:line="155" pos:column="49">"\\bar.c"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="155" pos:column="60">String</name><op:operator pos:line="155" pos:column="66">.</op:operator><name pos:line="155" pos:column="67">Format</name></name><argument_list pos:line="155" pos:column="73">(<argument><expr><lit:literal type="string" pos:line="155" pos:column="74">@"int bar() {{{0}    printf(""goodbye, world!"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="155" pos:column="131">Environment</name><op:operator pos:line="155" pos:column="142">.</op:operator><name pos:line="155" pos:column="143">NewLine</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="157" pos:column="13">string</name></type> <name pos:line="157" pos:column="20">fooXML</name> <init pos:line="157" pos:column="27">= <expr><call><name><name pos:line="157" pos:column="29">archive</name><op:operator pos:line="157" pos:column="36">.</op:operator><name pos:line="157" pos:column="37">GenerateXmlAndStringForSource</name></name><argument_list pos:line="157" pos:column="66">(<argument><expr><name pos:line="157" pos:column="67">SOURCEDIRECTORY</name> <op:operator pos:line="157" pos:column="83">+</op:operator> <lit:literal type="string" pos:line="157" pos:column="85">"\\foo.c"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="158" pos:column="13">string</name></type> <name pos:line="158" pos:column="20">barXML</name> <init pos:line="158" pos:column="27">= <expr><call><name><name pos:line="158" pos:column="29">archive</name><op:operator pos:line="158" pos:column="36">.</op:operator><name pos:line="158" pos:column="37">GenerateXmlAndStringForSource</name></name><argument_list pos:line="158" pos:column="66">(<argument><expr><name pos:line="158" pos:column="67">SOURCEDIRECTORY</name> <op:operator pos:line="158" pos:column="83">+</op:operator> <lit:literal type="string" pos:line="158" pos:column="85">"\\bar.c"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="160" pos:column="13">Assert</name><op:operator pos:line="160" pos:column="19">.</op:operator><name pos:line="160" pos:column="20">That</name></name><argument_list pos:line="160" pos:column="24">(<argument><expr><call><name><name pos:line="160" pos:column="25">File</name><op:operator pos:line="160" pos:column="29">.</op:operator><name pos:line="160" pos:column="30">Exists</name></name><argument_list pos:line="160" pos:column="36">(<argument><expr><call><name><name pos:line="160" pos:column="37">Path</name><op:operator pos:line="160" pos:column="41">.</op:operator><name pos:line="160" pos:column="42">Combine</name></name><argument_list pos:line="160" pos:column="49">(<argument><expr><name><name pos:line="160" pos:column="50">xmlDirectory</name><op:operator pos:line="160" pos:column="62">.</op:operator><name pos:line="160" pos:column="63">FullName</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="160" pos:column="73">"2BVUHCFVS6KX3VHC6BBBWFADSZ7EY7FRH48CX7GV627VYYGVEC9WXVFCB8UMWXJSVCGESVDEH4MUXBG4WCJWNM9RKZ9CNJGV6M8C3JFRS2GBXJG4X88LX7RR.xml"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="161" pos:column="13">Assert</name><op:operator pos:line="161" pos:column="19">.</op:operator><name pos:line="161" pos:column="20">That</name></name><argument_list pos:line="161" pos:column="24">(<argument><expr><call><name><name pos:line="161" pos:column="25">File</name><op:operator pos:line="161" pos:column="29">.</op:operator><name pos:line="161" pos:column="30">Exists</name></name><argument_list pos:line="161" pos:column="36">(<argument><expr><call><name><name pos:line="161" pos:column="37">Path</name><op:operator pos:line="161" pos:column="41">.</op:operator><name pos:line="161" pos:column="42">Combine</name></name><argument_list pos:line="161" pos:column="49">(<argument><expr><name><name pos:line="161" pos:column="50">xmlDirectory</name><op:operator pos:line="161" pos:column="62">.</op:operator><name pos:line="161" pos:column="63">FullName</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="161" pos:column="73">"2BVUHCFVS6KX3VHC6BBBWFADSZ7EY7FRH48CX7GV627VYYGVEC9WXVFCB8UMWXJSVCGESVDEH4MUXBG4WCJWNM9RKZ9CNJGV6M8C3JFRS2GBXJG4Z4UW37RR.xml"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="164" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="165" pos:column="9">/// Added by JZ on 12/4/2012</comment>
        <comment type="line" pos:line="166" pos:column="9">/// Unit test for SrcMLArchive.public string GenerateXmlAndXElementForSource(string sourcePath)</comment>
        <comment type="line" pos:line="167" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><attribute pos:line="168" pos:column="9">[<expr><name pos:line="168" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="169" pos:column="9">public</specifier> <name pos:line="169" pos:column="16">void</name></type> <name pos:line="169" pos:column="21">GenerateXmlAndXElementForSourceTest</name><parameter_list pos:line="169" pos:column="56">()</parameter_list>
        <block pos:line="170" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="171" pos:column="13">IFileMonitor</name></type> <name pos:line="171" pos:column="26">watchedFolder</name> <init pos:line="171" pos:column="40">= <expr><call><name><name pos:line="171" pos:column="42">Substitute</name><op:operator pos:line="171" pos:column="52">.</op:operator><name><name pos:line="171" pos:column="53">For</name><argument_list pos:line="171" pos:column="56">&lt;<argument><name pos:line="171" pos:column="57">IFileMonitor</name></argument>&gt;</argument_list></name></name><argument_list pos:line="171" pos:column="70">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="173" pos:column="13">var</name></type> <name pos:line="173" pos:column="17">archive</name> <init pos:line="173" pos:column="25">= <expr><op:operator pos:line="173" pos:column="27">new</op:operator> <call><name pos:line="173" pos:column="31">SrcMLArchive</name><argument_list pos:line="173" pos:column="43">(<argument><expr><name pos:line="173" pos:column="44">watchedFolder</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="173" pos:column="59">".srcml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="174" pos:column="13">archive</name><op:operator pos:line="174" pos:column="20">.</op:operator><name pos:line="174" pos:column="21">XmlGenerator</name><op:operator pos:line="174" pos:column="33">.</op:operator><name pos:line="174" pos:column="34">ApplicationDirectory</name></name> <op:operator pos:line="174" pos:column="55">=</op:operator> <name><name pos:line="174" pos:column="57">TestConstants</name><op:operator pos:line="174" pos:column="70">.</op:operator><name pos:line="174" pos:column="71">SrcmlPath</name></name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="175" pos:column="13">var</name></type> <name pos:line="175" pos:column="17">xmlDirectory</name> <init pos:line="175" pos:column="30">= <expr><op:operator pos:line="175" pos:column="32">new</op:operator> <call><name pos:line="175" pos:column="36">DirectoryInfo</name><argument_list pos:line="175" pos:column="49">(<argument><expr><name><name pos:line="175" pos:column="50">archive</name><op:operator pos:line="175" pos:column="57">.</op:operator><name pos:line="175" pos:column="58">ArchivePath</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="177" pos:column="13">File</name><op:operator pos:line="177" pos:column="17">.</op:operator><name pos:line="177" pos:column="18">WriteAllText</name></name><argument_list pos:line="177" pos:column="30">(<argument><expr><name pos:line="177" pos:column="31">SOURCEDIRECTORY</name> <op:operator pos:line="177" pos:column="47">+</op:operator> <lit:literal type="string" pos:line="177" pos:column="49">"\\foo.c"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="177" pos:column="60">String</name><op:operator pos:line="177" pos:column="66">.</op:operator><name pos:line="177" pos:column="67">Format</name></name><argument_list pos:line="177" pos:column="73">(<argument><expr><lit:literal type="string" pos:line="177" pos:column="74">@"int foo() {{{0}printf(""hello world!"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="177" pos:column="124">Environment</name><op:operator pos:line="177" pos:column="135">.</op:operator><name pos:line="177" pos:column="136">NewLine</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="178" pos:column="13">File</name><op:operator pos:line="178" pos:column="17">.</op:operator><name pos:line="178" pos:column="18">WriteAllText</name></name><argument_list pos:line="178" pos:column="30">(<argument><expr><name pos:line="178" pos:column="31">SOURCEDIRECTORY</name> <op:operator pos:line="178" pos:column="47">+</op:operator> <lit:literal type="string" pos:line="178" pos:column="49">"\\bar.c"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="178" pos:column="60">String</name><op:operator pos:line="178" pos:column="66">.</op:operator><name pos:line="178" pos:column="67">Format</name></name><argument_list pos:line="178" pos:column="73">(<argument><expr><lit:literal type="string" pos:line="178" pos:column="74">@"int bar() {{{0}    printf(""goodbye, world!"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="178" pos:column="131">Environment</name><op:operator pos:line="178" pos:column="142">.</op:operator><name pos:line="178" pos:column="143">NewLine</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="180" pos:column="13">XElement</name></type> <name pos:line="180" pos:column="22">fooXElement</name> <init pos:line="180" pos:column="34">= <expr><call><name><name pos:line="180" pos:column="36">archive</name><op:operator pos:line="180" pos:column="43">.</op:operator><name pos:line="180" pos:column="44">GenerateXmlAndXElementForSource</name></name><argument_list pos:line="180" pos:column="75">(<argument><expr><name pos:line="180" pos:column="76">SOURCEDIRECTORY</name> <op:operator pos:line="180" pos:column="92">+</op:operator> <lit:literal type="string" pos:line="180" pos:column="94">"\\foo.c"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="181" pos:column="13">XElement</name></type> <name pos:line="181" pos:column="22">barXElement</name> <init pos:line="181" pos:column="34">= <expr><call><name><name pos:line="181" pos:column="36">archive</name><op:operator pos:line="181" pos:column="43">.</op:operator><name pos:line="181" pos:column="44">GenerateXmlAndXElementForSource</name></name><argument_list pos:line="181" pos:column="75">(<argument><expr><name pos:line="181" pos:column="76">SOURCEDIRECTORY</name> <op:operator pos:line="181" pos:column="92">+</op:operator> <lit:literal type="string" pos:line="181" pos:column="94">"\\bar.c"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="183" pos:column="13">Assert</name><op:operator pos:line="183" pos:column="19">.</op:operator><name pos:line="183" pos:column="20">IsNotNull</name></name><argument_list pos:line="183" pos:column="29">(<argument><expr><name pos:line="183" pos:column="30">fooXElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="184" pos:column="13">Assert</name><op:operator pos:line="184" pos:column="19">.</op:operator><name pos:line="184" pos:column="20">IsNotNull</name></name><argument_list pos:line="184" pos:column="29">(<argument><expr><name pos:line="184" pos:column="30">barXElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="185" pos:column="13">Assert</name><op:operator pos:line="185" pos:column="19">.</op:operator><name pos:line="185" pos:column="20">That</name></name><argument_list pos:line="185" pos:column="24">(<argument><expr><call><name><name pos:line="185" pos:column="25">File</name><op:operator pos:line="185" pos:column="29">.</op:operator><name pos:line="185" pos:column="30">Exists</name></name><argument_list pos:line="185" pos:column="36">(<argument><expr><call><name><name pos:line="185" pos:column="37">Path</name><op:operator pos:line="185" pos:column="41">.</op:operator><name pos:line="185" pos:column="42">Combine</name></name><argument_list pos:line="185" pos:column="49">(<argument><expr><name><name pos:line="185" pos:column="50">xmlDirectory</name><op:operator pos:line="185" pos:column="62">.</op:operator><name pos:line="185" pos:column="63">FullName</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="185" pos:column="73">"2BVUHCFVS6KX3VHC6BBBWFADSZ7EY7FRH48CX7GV627VYYGVEC9WXVFCB8UMWXJSVCGESVDEH4MUXBG4WCJWNM9RKZ9CNJGV6M8C3JFRS2GBXJG4X88LX7RR.xml"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="186" pos:column="13">Assert</name><op:operator pos:line="186" pos:column="19">.</op:operator><name pos:line="186" pos:column="20">That</name></name><argument_list pos:line="186" pos:column="24">(<argument><expr><call><name><name pos:line="186" pos:column="25">File</name><op:operator pos:line="186" pos:column="29">.</op:operator><name pos:line="186" pos:column="30">Exists</name></name><argument_list pos:line="186" pos:column="36">(<argument><expr><call><name><name pos:line="186" pos:column="37">Path</name><op:operator pos:line="186" pos:column="41">.</op:operator><name pos:line="186" pos:column="42">Combine</name></name><argument_list pos:line="186" pos:column="49">(<argument><expr><name><name pos:line="186" pos:column="50">xmlDirectory</name><op:operator pos:line="186" pos:column="62">.</op:operator><name pos:line="186" pos:column="63">FullName</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="186" pos:column="73">"2BVUHCFVS6KX3VHC6BBBWFADSZ7EY7FRH48CX7GV627VYYGVEC9WXVFCB8UMWXJSVCGESVDEH4MUXBG4WCJWNM9RKZ9CNJGV6M8C3JFRS2GBXJG4Z4UW37RR.xml"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="189" pos:column="9">[<expr><name pos:line="189" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="190" pos:column="9">public</specifier> <name pos:line="190" pos:column="16">void</name></type> <name pos:line="190" pos:column="21">FileAddDeleteChangeRenameTest</name><parameter_list pos:line="190" pos:column="50">()</parameter_list>
        <block pos:line="191" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="192" pos:column="13">int</name></type> <name pos:line="192" pos:column="17">numberOfEventsRaised</name> <init pos:line="192" pos:column="38">= <expr><lit:literal type="number" pos:line="192" pos:column="40">0</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="193" pos:column="13">IFileMonitor</name></type> <name pos:line="193" pos:column="26">watchedFolder</name> <init pos:line="193" pos:column="40">= <expr><call><name><name pos:line="193" pos:column="42">Substitute</name><op:operator pos:line="193" pos:column="52">.</op:operator><name><name pos:line="193" pos:column="53">For</name><argument_list pos:line="193" pos:column="56">&lt;<argument><name pos:line="193" pos:column="57">IFileMonitor</name></argument>&gt;</argument_list></name></name><argument_list pos:line="193" pos:column="70">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="195" pos:column="13">var</name></type> <name pos:line="195" pos:column="17">archive</name> <init pos:line="195" pos:column="25">= <expr><op:operator pos:line="195" pos:column="27">new</op:operator> <call><name pos:line="195" pos:column="31">SrcMLArchive</name><argument_list pos:line="195" pos:column="43">(<argument><expr><name pos:line="195" pos:column="44">watchedFolder</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="195" pos:column="59">".srcml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="196" pos:column="13">archive</name><op:operator pos:line="196" pos:column="20">.</op:operator><name pos:line="196" pos:column="21">XmlGenerator</name><op:operator pos:line="196" pos:column="33">.</op:operator><name pos:line="196" pos:column="34">ApplicationDirectory</name></name> <op:operator pos:line="196" pos:column="55">=</op:operator> <name><name pos:line="196" pos:column="57">TestConstants</name><op:operator pos:line="196" pos:column="70">.</op:operator><name pos:line="196" pos:column="71">SrcmlPath</name></name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="197" pos:column="13">var</name></type> <name pos:line="197" pos:column="17">xmlDirectory</name> <init pos:line="197" pos:column="30">= <expr><op:operator pos:line="197" pos:column="32">new</op:operator> <call><name pos:line="197" pos:column="36">DirectoryInfo</name><argument_list pos:line="197" pos:column="49">(<argument><expr><name><name pos:line="197" pos:column="50">archive</name><op:operator pos:line="197" pos:column="57">.</op:operator><name pos:line="197" pos:column="58">ArchivePath</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="199" pos:column="13">////archive.SourceFileChanged += (o, e) =&gt;</comment>
            <expr_stmt><expr><name><name pos:line="200" pos:column="13">archive</name><op:operator pos:line="200" pos:column="20">.</op:operator><name pos:line="200" pos:column="21">SourceFileChanged</name></name> <op:operator pos:line="200" pos:column="39">+=</op:operator> <lambda><parameter_list pos:line="200" pos:column="42">(<param><decl><name pos:line="200" pos:column="43">o</name></decl></param>, <param><decl><name pos:line="200" pos:column="46">e</name></decl></param>)</parameter_list> <op:operator pos:line="200" pos:column="49">=&gt;</op:operator>
            <block pos:line="201" pos:column="13">{
                <expr_stmt><expr><name pos:line="202" pos:column="17">numberOfEventsRaised</name><op:operator pos:line="202" pos:column="37">++</op:operator></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="203" pos:column="17">Assert</name><op:operator pos:line="203" pos:column="23">.</op:operator><name pos:line="203" pos:column="24">That</name></name><argument_list pos:line="203" pos:column="28">(<argument><expr><name><name pos:line="203" pos:column="29">e</name><op:operator pos:line="203" pos:column="30">.</op:operator><name pos:line="203" pos:column="31">SourceFilePath</name></name></expr></argument>, <argument><expr><call><name><name pos:line="203" pos:column="47">Is</name><op:operator pos:line="203" pos:column="49">.</op:operator><name pos:line="203" pos:column="50">Not</name><op:operator pos:line="203" pos:column="53">.</op:operator><name pos:line="203" pos:column="54">SamePathOrUnder</name></name><argument_list pos:line="203" pos:column="69">(<argument><expr><name><name pos:line="203" pos:column="70">xmlDirectory</name><op:operator pos:line="203" pos:column="82">.</op:operator><name pos:line="203" pos:column="83">Name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="204" pos:column="17">Console</name><op:operator pos:line="204" pos:column="24">.</op:operator><name pos:line="204" pos:column="25">WriteLine</name></name><argument_list pos:line="204" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="204" pos:column="35">"Event Type '{0}': [{1}]"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="204" pos:column="62">e</name><op:operator pos:line="204" pos:column="63">.</op:operator><name pos:line="204" pos:column="64">EventType</name></name></expr></argument>, <argument><expr><name><name pos:line="204" pos:column="75">e</name><op:operator pos:line="204" pos:column="76">.</op:operator><name pos:line="204" pos:column="77">SourceFilePath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></lambda></expr>;</expr_stmt>

            <expr_stmt><expr><call><name pos:line="207" pos:column="13">WriteTextAndRaiseEvent</name><argument_list pos:line="207" pos:column="35">(<argument><expr><name pos:line="207" pos:column="36">watchedFolder</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="207" pos:column="51">"foo.c"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="207" pos:column="60">@"int foo(int i) {
    return i + 1;
}"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="210" pos:column="13">// Base32 encoded filename foo.c.xml</comment>
            <expr_stmt><expr><call><name><name pos:line="211" pos:column="13">Assert</name><op:operator pos:line="211" pos:column="19">.</op:operator><name pos:line="211" pos:column="20">That</name></name><argument_list pos:line="211" pos:column="24">(<argument><expr><call><name><name pos:line="211" pos:column="25">File</name><op:operator pos:line="211" pos:column="29">.</op:operator><name pos:line="211" pos:column="30">Exists</name></name><argument_list pos:line="211" pos:column="36">(<argument><expr><call><name><name pos:line="211" pos:column="37">Path</name><op:operator pos:line="211" pos:column="41">.</op:operator><name pos:line="211" pos:column="42">Combine</name></name><argument_list pos:line="211" pos:column="49">(<argument><expr><name><name pos:line="211" pos:column="50">xmlDirectory</name><op:operator pos:line="211" pos:column="62">.</op:operator><name pos:line="211" pos:column="63">FullName</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="211" pos:column="73">"2BVUHCFVS6KX3VHC6BBBWFADSZ7EY7FRH48CX7GV627VYYGVEC9WXVFCB8UMWXJSVCGESVDEH4MUXBG4WCJWNM9RKZ9CNJGV6M8C3JFRS2GBXJG4X88LX7RR.xml"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name pos:line="213" pos:column="13">WriteTextAndRaiseEvent</name><argument_list pos:line="213" pos:column="35">(<argument><expr><name pos:line="213" pos:column="36">watchedFolder</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="213" pos:column="51">"bar.c"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="213" pos:column="60">@"int bar(int i) {
    return i - 1;
}"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="216" pos:column="13">// Base32 encoded filename bar.c.xml</comment>
            <expr_stmt><expr><call><name><name pos:line="217" pos:column="13">Assert</name><op:operator pos:line="217" pos:column="19">.</op:operator><name pos:line="217" pos:column="20">That</name></name><argument_list pos:line="217" pos:column="24">(<argument><expr><call><name><name pos:line="217" pos:column="25">File</name><op:operator pos:line="217" pos:column="29">.</op:operator><name pos:line="217" pos:column="30">Exists</name></name><argument_list pos:line="217" pos:column="36">(<argument><expr><call><name><name pos:line="217" pos:column="37">Path</name><op:operator pos:line="217" pos:column="41">.</op:operator><name pos:line="217" pos:column="42">Combine</name></name><argument_list pos:line="217" pos:column="49">(<argument><expr><name><name pos:line="217" pos:column="50">xmlDirectory</name><op:operator pos:line="217" pos:column="62">.</op:operator><name pos:line="217" pos:column="63">FullName</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="217" pos:column="73">"2BVUHCFVS6KX3VHC6BBBWFADSZ7EY7FRH48CX7GV627VYYGVEC9WXVFCB8UMWXJSVCGESVDEH4MUXBG4WCJWNM9RKZ9CNJGV6M8C3JFRS2GBXJG4Z4UW37RR.xml"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="219" pos:column="13">Directory</name><op:operator pos:line="219" pos:column="22">.</op:operator><name pos:line="219" pos:column="23">CreateDirectory</name></name><argument_list pos:line="219" pos:column="38">(<argument><expr><call><name><name pos:line="219" pos:column="39">Path</name><op:operator pos:line="219" pos:column="43">.</op:operator><name pos:line="219" pos:column="44">Combine</name></name><argument_list pos:line="219" pos:column="51">(<argument><expr><name pos:line="219" pos:column="52">SOURCEDIRECTORY</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="219" pos:column="69">"subdir"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="220" pos:column="13">WriteTextAndRaiseEvent</name><argument_list pos:line="220" pos:column="35">(<argument><expr><name pos:line="220" pos:column="36">watchedFolder</name></expr></argument>, <argument><expr><call><name><name pos:line="220" pos:column="51">Path</name><op:operator pos:line="220" pos:column="55">.</op:operator><name pos:line="220" pos:column="56">Combine</name></name><argument_list pos:line="220" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="220" pos:column="64">"subdir"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="220" pos:column="74">"component.c"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="220" pos:column="90">@"int are_equal(int i, int j) {
    return i == j;

}"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="224" pos:column="13">// Base32 encoded filename subdir\component.c.xml</comment>
            <expr_stmt><expr><call><name><name pos:line="225" pos:column="13">Assert</name><op:operator pos:line="225" pos:column="19">.</op:operator><name pos:line="225" pos:column="20">That</name></name><argument_list pos:line="225" pos:column="24">(<argument><expr><call><name><name pos:line="225" pos:column="25">File</name><op:operator pos:line="225" pos:column="29">.</op:operator><name pos:line="225" pos:column="30">Exists</name></name><argument_list pos:line="225" pos:column="36">(<argument><expr><call><name><name pos:line="225" pos:column="37">Path</name><op:operator pos:line="225" pos:column="41">.</op:operator><name pos:line="225" pos:column="42">Combine</name></name><argument_list pos:line="225" pos:column="49">(<argument><expr><name><name pos:line="225" pos:column="50">xmlDirectory</name><op:operator pos:line="225" pos:column="62">.</op:operator><name pos:line="225" pos:column="63">FullName</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="225" pos:column="73">"2BVUHCFVS6KX3VHC6BBBWFADSZ7EY7FRH48CX7GV627VYYGVEC9WXVFCB8UMWXJSVCGESVDEH4MUXBG4WCJWNM9RKZ9CNJGV6M8C3JFRS2GBXJG4649WXBSFB27XN7HFT88KNBJFY64XX.xml"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="226" pos:column="13">Assert</name><op:operator pos:line="226" pos:column="19">.</op:operator><name pos:line="226" pos:column="20">That</name></name><argument_list pos:line="226" pos:column="24">(<argument><expr><call><name><name pos:line="226" pos:column="25">archive</name><op:operator pos:line="226" pos:column="32">.</op:operator><name pos:line="226" pos:column="33">FileUnits</name><op:operator pos:line="226" pos:column="42">.</op:operator><name pos:line="226" pos:column="43">Count</name></name><argument_list pos:line="226" pos:column="48">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="226" pos:column="52">Is</name><op:operator pos:line="226" pos:column="54">.</op:operator><name pos:line="226" pos:column="55">EqualTo</name></name><argument_list pos:line="226" pos:column="62">(<argument><expr><lit:literal type="number" pos:line="226" pos:column="63">3</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="227" pos:column="13">Assert</name><op:operator pos:line="227" pos:column="19">.</op:operator><name pos:line="227" pos:column="20">That</name></name><argument_list pos:line="227" pos:column="24">(<argument><expr><call><name pos:line="227" pos:column="25">numberOfFunctions</name><argument_list pos:line="227" pos:column="42">(<argument><expr><name pos:line="227" pos:column="43">archive</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="227" pos:column="53">Is</name><op:operator pos:line="227" pos:column="55">.</op:operator><name pos:line="227" pos:column="56">EqualTo</name></name><argument_list pos:line="227" pos:column="63">(<argument><expr><lit:literal type="number" pos:line="227" pos:column="64">3</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name pos:line="229" pos:column="13">DeleteSourceAndRaiseEvent</name><argument_list pos:line="229" pos:column="38">(<argument><expr><name pos:line="229" pos:column="39">watchedFolder</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="229" pos:column="54">"bar.c"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="230" pos:column="13">// Base32 encoded filename bar.c.xml</comment>
            <expr_stmt><expr><call><name><name pos:line="231" pos:column="13">Assert</name><op:operator pos:line="231" pos:column="19">.</op:operator><name pos:line="231" pos:column="20">That</name></name><argument_list pos:line="231" pos:column="24">(<argument><expr><op:operator pos:line="231" pos:column="25">!</op:operator><call><name><name pos:line="231" pos:column="26">File</name><op:operator pos:line="231" pos:column="30">.</op:operator><name pos:line="231" pos:column="31">Exists</name></name><argument_list pos:line="231" pos:column="37">(<argument><expr><call><name><name pos:line="231" pos:column="38">Path</name><op:operator pos:line="231" pos:column="42">.</op:operator><name pos:line="231" pos:column="43">Combine</name></name><argument_list pos:line="231" pos:column="50">(<argument><expr><name><name pos:line="231" pos:column="51">xmlDirectory</name><op:operator pos:line="231" pos:column="63">.</op:operator><name pos:line="231" pos:column="64">FullName</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="231" pos:column="74">"2BVUHCFVS6KX3VHC6BBBWFADSZ7EY7FRH48CX7GV627VYYGVEC9WXVFCB8UMWXJSVCGESVDEH4MUXBG4WCJWNM9RKZ9CNJGV6M8C3JFRS2GBXJG4Z4UW37RR.xml"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="232" pos:column="13">Assert</name><op:operator pos:line="232" pos:column="19">.</op:operator><name pos:line="232" pos:column="20">That</name></name><argument_list pos:line="232" pos:column="24">(<argument><expr><call><name><name pos:line="232" pos:column="25">archive</name><op:operator pos:line="232" pos:column="32">.</op:operator><name pos:line="232" pos:column="33">FileUnits</name><op:operator pos:line="232" pos:column="42">.</op:operator><name pos:line="232" pos:column="43">Count</name></name><argument_list pos:line="232" pos:column="48">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="232" pos:column="52">Is</name><op:operator pos:line="232" pos:column="54">.</op:operator><name pos:line="232" pos:column="55">EqualTo</name></name><argument_list pos:line="232" pos:column="62">(<argument><expr><lit:literal type="number" pos:line="232" pos:column="63">2</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="233" pos:column="13">Assert</name><op:operator pos:line="233" pos:column="19">.</op:operator><name pos:line="233" pos:column="20">That</name></name><argument_list pos:line="233" pos:column="24">(<argument><expr><call><name pos:line="233" pos:column="25">numberOfFunctions</name><argument_list pos:line="233" pos:column="42">(<argument><expr><name pos:line="233" pos:column="43">archive</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="233" pos:column="53">Is</name><op:operator pos:line="233" pos:column="55">.</op:operator><name pos:line="233" pos:column="56">EqualTo</name></name><argument_list pos:line="233" pos:column="63">(<argument><expr><lit:literal type="number" pos:line="233" pos:column="64">2</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name pos:line="235" pos:column="13">WriteTextAndRaiseEvent</name><argument_list pos:line="235" pos:column="35">(<argument><expr><name pos:line="235" pos:column="36">watchedFolder</name></expr></argument>, <argument><expr><call><name><name pos:line="235" pos:column="51">Path</name><op:operator pos:line="235" pos:column="55">.</op:operator><name pos:line="235" pos:column="56">Combine</name></name><argument_list pos:line="235" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="235" pos:column="64">"subdir"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="235" pos:column="74">"component.c"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="235" pos:column="90">@"struct A {
    int a;
    char b;
}"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="239" pos:column="13">// Base32 encoded filename subdir\component.c.xml</comment>
            <expr_stmt><expr><call><name><name pos:line="240" pos:column="13">Assert</name><op:operator pos:line="240" pos:column="19">.</op:operator><name pos:line="240" pos:column="20">That</name></name><argument_list pos:line="240" pos:column="24">(<argument><expr><call><name><name pos:line="240" pos:column="25">File</name><op:operator pos:line="240" pos:column="29">.</op:operator><name pos:line="240" pos:column="30">Exists</name></name><argument_list pos:line="240" pos:column="36">(<argument><expr><call><name><name pos:line="240" pos:column="37">Path</name><op:operator pos:line="240" pos:column="41">.</op:operator><name pos:line="240" pos:column="42">Combine</name></name><argument_list pos:line="240" pos:column="49">(<argument><expr><name><name pos:line="240" pos:column="50">xmlDirectory</name><op:operator pos:line="240" pos:column="62">.</op:operator><name pos:line="240" pos:column="63">FullName</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="240" pos:column="73">"2BVUHCFVS6KX3VHC6BBBWFADSZ7EY7FRH48CX7GV627VYYGVEC9WXVFCB8UMWXJSVCGESVDEH4MUXBG4WCJWNM9RKZ9CNJGV6M8C3JFRS2GBXJG4649WXBSFB27XN7HFT88KNBJFY64XX.xml"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="241" pos:column="13">Assert</name><op:operator pos:line="241" pos:column="19">.</op:operator><name pos:line="241" pos:column="20">That</name></name><argument_list pos:line="241" pos:column="24">(<argument><expr><call><name><name pos:line="241" pos:column="25">archive</name><op:operator pos:line="241" pos:column="32">.</op:operator><name pos:line="241" pos:column="33">FileUnits</name><op:operator pos:line="241" pos:column="42">.</op:operator><name pos:line="241" pos:column="43">Count</name></name><argument_list pos:line="241" pos:column="48">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="241" pos:column="52">Is</name><op:operator pos:line="241" pos:column="54">.</op:operator><name pos:line="241" pos:column="55">EqualTo</name></name><argument_list pos:line="241" pos:column="62">(<argument><expr><lit:literal type="number" pos:line="241" pos:column="63">2</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="242" pos:column="13">Assert</name><op:operator pos:line="242" pos:column="19">.</op:operator><name pos:line="242" pos:column="20">That</name></name><argument_list pos:line="242" pos:column="24">(<argument><expr><call><name pos:line="242" pos:column="25">numberOfFunctions</name><argument_list pos:line="242" pos:column="42">(<argument><expr><name pos:line="242" pos:column="43">archive</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="242" pos:column="53">Is</name><op:operator pos:line="242" pos:column="55">.</op:operator><name pos:line="242" pos:column="56">EqualTo</name></name><argument_list pos:line="242" pos:column="63">(<argument><expr><lit:literal type="number" pos:line="242" pos:column="64">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name pos:line="244" pos:column="13">RenameSourceFileAndRaiseEvent</name><argument_list pos:line="244" pos:column="42">(<argument><expr><name pos:line="244" pos:column="43">watchedFolder</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="244" pos:column="58">"foo.c"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="244" pos:column="67">"foo2.c"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="245" pos:column="13">// Base32 encoded filename foo.c.xml</comment>
            <expr_stmt><expr><call><name><name pos:line="246" pos:column="13">Assert</name><op:operator pos:line="246" pos:column="19">.</op:operator><name pos:line="246" pos:column="20">That</name></name><argument_list pos:line="246" pos:column="24">(<argument><expr><op:operator pos:line="246" pos:column="25">!</op:operator><call><name><name pos:line="246" pos:column="26">File</name><op:operator pos:line="246" pos:column="30">.</op:operator><name pos:line="246" pos:column="31">Exists</name></name><argument_list pos:line="246" pos:column="37">(<argument><expr><call><name><name pos:line="246" pos:column="38">Path</name><op:operator pos:line="246" pos:column="42">.</op:operator><name pos:line="246" pos:column="43">Combine</name></name><argument_list pos:line="246" pos:column="50">(<argument><expr><name><name pos:line="246" pos:column="51">xmlDirectory</name><op:operator pos:line="246" pos:column="63">.</op:operator><name pos:line="246" pos:column="64">FullName</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="246" pos:column="74">"2BVUHCFVS6KX3VHC6BBBWFADSZ7EY7FRH48CX7GV627VYYGVEC9WXVFCB8UMWXJSVCGESVDEH4MUXBG4WCJWNM9RKZ9CNJGV6M8C3JFRS2GBXJG4X88LX7RR.xml"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="247" pos:column="13">// Base32 encoded filename foo2.c.xml</comment>
            <expr_stmt><expr><call><name><name pos:line="248" pos:column="13">Assert</name><op:operator pos:line="248" pos:column="19">.</op:operator><name pos:line="248" pos:column="20">That</name></name><argument_list pos:line="248" pos:column="24">(<argument><expr><call><name><name pos:line="248" pos:column="25">File</name><op:operator pos:line="248" pos:column="29">.</op:operator><name pos:line="248" pos:column="30">Exists</name></name><argument_list pos:line="248" pos:column="36">(<argument><expr><call><name><name pos:line="248" pos:column="37">Path</name><op:operator pos:line="248" pos:column="41">.</op:operator><name pos:line="248" pos:column="42">Combine</name></name><argument_list pos:line="248" pos:column="49">(<argument><expr><name><name pos:line="248" pos:column="50">xmlDirectory</name><op:operator pos:line="248" pos:column="62">.</op:operator><name pos:line="248" pos:column="63">FullName</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="248" pos:column="73">"2BVUHCFVS6KX3VHC6BBBWFADSZ7EY7FRH48CX7GV627VYYGVEC9WXVFCB8UMWXJSVCGESVDEH4MUXBG4WCJWNM9RKZ9CNJGV6M8C3JFRS2GBXJG4X88LXJUS22.xml"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="249" pos:column="13">Assert</name><op:operator pos:line="249" pos:column="19">.</op:operator><name pos:line="249" pos:column="20">That</name></name><argument_list pos:line="249" pos:column="24">(<argument><expr><call><name><name pos:line="249" pos:column="25">archive</name><op:operator pos:line="249" pos:column="32">.</op:operator><name pos:line="249" pos:column="33">FileUnits</name><op:operator pos:line="249" pos:column="42">.</op:operator><name pos:line="249" pos:column="43">Count</name></name><argument_list pos:line="249" pos:column="48">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="249" pos:column="52">Is</name><op:operator pos:line="249" pos:column="54">.</op:operator><name pos:line="249" pos:column="55">EqualTo</name></name><argument_list pos:line="249" pos:column="62">(<argument><expr><lit:literal type="number" pos:line="249" pos:column="63">2</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="250" pos:column="13">Assert</name><op:operator pos:line="250" pos:column="19">.</op:operator><name pos:line="250" pos:column="20">That</name></name><argument_list pos:line="250" pos:column="24">(<argument><expr><call><name pos:line="250" pos:column="25">numberOfFunctions</name><argument_list pos:line="250" pos:column="42">(<argument><expr><name pos:line="250" pos:column="43">archive</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="250" pos:column="53">Is</name><op:operator pos:line="250" pos:column="55">.</op:operator><name pos:line="250" pos:column="56">EqualTo</name></name><argument_list pos:line="250" pos:column="63">(<argument><expr><lit:literal type="number" pos:line="250" pos:column="64">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="252" pos:column="13">Assert</name><op:operator pos:line="252" pos:column="19">.</op:operator><name pos:line="252" pos:column="20">That</name></name><argument_list pos:line="252" pos:column="24">(<argument><expr><name pos:line="252" pos:column="25">numberOfEventsRaised</name></expr></argument>, <argument><expr><call><name><name pos:line="252" pos:column="47">Is</name><op:operator pos:line="252" pos:column="49">.</op:operator><name pos:line="252" pos:column="50">EqualTo</name></name><argument_list pos:line="252" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="252" pos:column="58">6</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="255" pos:column="9">private</specifier> <name pos:line="255" pos:column="17">int</name></type> <name pos:line="255" pos:column="21">numberOfFunctions</name><parameter_list pos:line="255" pos:column="38">(<param><decl><type><name pos:line="255" pos:column="39">IArchive</name></type> <name pos:line="255" pos:column="48">archive</name></decl></param>)</parameter_list>
        <block pos:line="256" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="257" pos:column="13">var</name></type> <name pos:line="257" pos:column="17">functions</name> <init pos:line="257" pos:column="27">= <expr><linq><from pos:line="257" pos:column="29">from <expr><name pos:line="257" pos:column="34">unit</name></expr> <in pos:line="257" pos:column="39">in <expr><name><name pos:line="257" pos:column="42">archive</name><op:operator pos:line="257" pos:column="49">.</op:operator><name pos:line="257" pos:column="50">FileUnits</name></name></expr></in></from>
                            <from pos:line="258" pos:column="29">from <expr><name pos:line="258" pos:column="34">function</name></expr> <in pos:line="258" pos:column="43">in <expr><call><name><name pos:line="258" pos:column="46">unit</name><op:operator pos:line="258" pos:column="50">.</op:operator><name pos:line="258" pos:column="51">Elements</name></name><argument_list pos:line="258" pos:column="59">(<argument><expr><name><name pos:line="258" pos:column="60">SRC</name><op:operator pos:line="258" pos:column="63">.</op:operator><name pos:line="258" pos:column="64">Function</name></name></expr></argument>)</argument_list></call></expr></in></from>
                            <select pos:line="259" pos:column="29">select <expr><name pos:line="259" pos:column="36">function</name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <return pos:line="260" pos:column="13">return <expr><call><name><name pos:line="260" pos:column="20">functions</name><op:operator pos:line="260" pos:column="29">.</op:operator><name pos:line="260" pos:column="30">Count</name></name><argument_list pos:line="260" pos:column="35">()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="263" pos:column="9">private</specifier> <name pos:line="263" pos:column="17">void</name></type> <name pos:line="263" pos:column="22">WriteTextAndRaiseEvent</name><parameter_list pos:line="263" pos:column="44">(<param><decl><type><name pos:line="263" pos:column="45">IFileMonitor</name></type> <name pos:line="263" pos:column="58">watchedFolder</name></decl></param>, <param><decl><type><name pos:line="263" pos:column="73">string</name></type> <name pos:line="263" pos:column="80">fileName</name></decl></param>, <param><decl><type><name pos:line="263" pos:column="90">string</name></type> <name pos:line="263" pos:column="97">source</name></decl></param>)</parameter_list>
        <block pos:line="264" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="265" pos:column="13">var</name></type> <name pos:line="265" pos:column="17">path</name> <init pos:line="265" pos:column="22">= <expr><call><name><name pos:line="265" pos:column="24">Path</name><op:operator pos:line="265" pos:column="28">.</op:operator><name pos:line="265" pos:column="29">Combine</name></name><argument_list pos:line="265" pos:column="36">(<argument><expr><name><name pos:line="265" pos:column="37">this</name><op:operator pos:line="265" pos:column="41">.</op:operator><name pos:line="265" pos:column="42">srcDirectoryInfo</name><op:operator pos:line="265" pos:column="58">.</op:operator><name pos:line="265" pos:column="59">Name</name></name></expr></argument>, <argument><expr><name pos:line="265" pos:column="65">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="266" pos:column="13">var</name></type> <name pos:line="266" pos:column="17">xmlPath</name> <init pos:line="266" pos:column="25">= <expr><call><name><name pos:line="266" pos:column="27">Path</name><op:operator pos:line="266" pos:column="31">.</op:operator><name pos:line="266" pos:column="32">Combine</name></name><argument_list pos:line="266" pos:column="39">(<argument><expr><name><name pos:line="266" pos:column="40">this</name><op:operator pos:line="266" pos:column="44">.</op:operator><name pos:line="266" pos:column="45">srcDirectoryInfo</name><op:operator pos:line="266" pos:column="61">.</op:operator><name pos:line="266" pos:column="62">Name</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="266" pos:column="68">".srcml"</lit:literal></expr></argument>, <argument><expr><name pos:line="266" pos:column="78">fileName</name></expr></argument>)</argument_list></call> <op:operator pos:line="266" pos:column="88">+</op:operator> <lit:literal type="string" pos:line="266" pos:column="90">".xml"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="267" pos:column="13">var</name></type> <name pos:line="267" pos:column="17">eventType</name> <init pos:line="267" pos:column="27">= <expr><op:operator pos:line="267" pos:column="29">(</op:operator><call><name><name pos:line="267" pos:column="30">File</name><op:operator pos:line="267" pos:column="34">.</op:operator><name pos:line="267" pos:column="35">Exists</name></name><argument_list pos:line="267" pos:column="41">(<argument><expr><name pos:line="267" pos:column="42">path</name></expr></argument>)</argument_list></call> <op:operator pos:line="267" pos:column="48">?</op:operator> <name><name pos:line="267" pos:column="50">FileEventType</name><op:operator pos:line="267" pos:column="63">.</op:operator><name pos:line="267" pos:column="64">FileChanged</name></name> <op:operator pos:line="267" pos:column="76">:</op:operator> <name><name pos:line="267" pos:column="78">FileEventType</name><op:operator pos:line="267" pos:column="91">.</op:operator><name pos:line="267" pos:column="92">FileAdded</name></name><op:operator pos:line="267" pos:column="101">)</op:operator></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="269" pos:column="13">File</name><op:operator pos:line="269" pos:column="17">.</op:operator><name pos:line="269" pos:column="18">WriteAllText</name></name><argument_list pos:line="269" pos:column="30">(<argument><expr><name pos:line="269" pos:column="31">path</name></expr></argument>, <argument><expr><name pos:line="269" pos:column="37">source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name pos:line="271" pos:column="13">watchedFolder</name><op:operator pos:line="271" pos:column="26">.</op:operator><name pos:line="271" pos:column="27">FileEventRaised</name></name> <op:operator pos:line="271" pos:column="43">+=</op:operator> <call><name><name pos:line="271" pos:column="46">Raise</name><op:operator pos:line="271" pos:column="51">.</op:operator><name pos:line="271" pos:column="52">EventWith</name></name><argument_list pos:line="271" pos:column="61">(<argument><expr><op:operator pos:line="271" pos:column="62">new</op:operator> <call><name pos:line="271" pos:column="66">FileEventRaisedArgs</name><argument_list pos:line="271" pos:column="85">(<argument><expr><name pos:line="271" pos:column="86">path</name></expr></argument>, <argument><expr><name pos:line="271" pos:column="92">eventType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="272" pos:column="13">watchedFolder</name><op:operator pos:line="272" pos:column="26">.</op:operator><name pos:line="272" pos:column="27">FileEventRaised</name></name> <op:operator pos:line="272" pos:column="43">+=</op:operator> <call><name><name pos:line="272" pos:column="46">Raise</name><op:operator pos:line="272" pos:column="51">.</op:operator><name pos:line="272" pos:column="52">EventWith</name></name><argument_list pos:line="272" pos:column="61">(<argument><expr><op:operator pos:line="272" pos:column="62">new</op:operator> <call><name pos:line="272" pos:column="66">FileEventRaisedArgs</name><argument_list pos:line="272" pos:column="85">(<argument><expr><name pos:line="272" pos:column="86">xmlPath</name></expr></argument>, <argument><expr><name pos:line="272" pos:column="95">eventType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="275" pos:column="9">private</specifier> <name pos:line="275" pos:column="17">void</name></type> <name pos:line="275" pos:column="22">DeleteSourceAndRaiseEvent</name><parameter_list pos:line="275" pos:column="47">(<param><decl><type><name pos:line="275" pos:column="48">IFileMonitor</name></type> <name pos:line="275" pos:column="61">watchedFolder</name></decl></param>, <param><decl><type><name pos:line="275" pos:column="76">string</name></type> <name pos:line="275" pos:column="83">fileName</name></decl></param>)</parameter_list>
        <block pos:line="276" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="277" pos:column="13">var</name></type> <name pos:line="277" pos:column="17">path</name> <init pos:line="277" pos:column="22">= <expr><call><name><name pos:line="277" pos:column="24">Path</name><op:operator pos:line="277" pos:column="28">.</op:operator><name pos:line="277" pos:column="29">Combine</name></name><argument_list pos:line="277" pos:column="36">(<argument><expr><name><name pos:line="277" pos:column="37">this</name><op:operator pos:line="277" pos:column="41">.</op:operator><name pos:line="277" pos:column="42">srcDirectoryInfo</name><op:operator pos:line="277" pos:column="58">.</op:operator><name pos:line="277" pos:column="59">Name</name></name></expr></argument>, <argument><expr><name pos:line="277" pos:column="65">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="278" pos:column="13">var</name></type> <name pos:line="278" pos:column="17">xmlPath</name> <init pos:line="278" pos:column="25">= <expr><call><name><name pos:line="278" pos:column="27">Path</name><op:operator pos:line="278" pos:column="31">.</op:operator><name pos:line="278" pos:column="32">Combine</name></name><argument_list pos:line="278" pos:column="39">(<argument><expr><name><name pos:line="278" pos:column="40">this</name><op:operator pos:line="278" pos:column="44">.</op:operator><name pos:line="278" pos:column="45">srcDirectoryInfo</name><op:operator pos:line="278" pos:column="61">.</op:operator><name pos:line="278" pos:column="62">Name</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="278" pos:column="68">".srcml"</lit:literal></expr></argument>, <argument><expr><name pos:line="278" pos:column="78">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="279" pos:column="13">xmlPath</name> <op:operator pos:line="279" pos:column="21">+=</op:operator> <lit:literal type="string" pos:line="279" pos:column="24">".xml"</lit:literal></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="281" pos:column="13">File</name><op:operator pos:line="281" pos:column="17">.</op:operator><name pos:line="281" pos:column="18">Delete</name></name><argument_list pos:line="281" pos:column="24">(<argument><expr><name pos:line="281" pos:column="25">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="282" pos:column="13">watchedFolder</name><op:operator pos:line="282" pos:column="26">.</op:operator><name pos:line="282" pos:column="27">FileEventRaised</name></name> <op:operator pos:line="282" pos:column="43">+=</op:operator> <call><name><name pos:line="282" pos:column="46">Raise</name><op:operator pos:line="282" pos:column="51">.</op:operator><name pos:line="282" pos:column="52">EventWith</name></name><argument_list pos:line="282" pos:column="61">(<argument><expr><op:operator pos:line="282" pos:column="62">new</op:operator> <call><name pos:line="282" pos:column="66">FileEventRaisedArgs</name><argument_list pos:line="282" pos:column="85">(<argument><expr><name pos:line="282" pos:column="86">path</name></expr></argument>, <argument><expr><name><name pos:line="282" pos:column="92">FileEventType</name><op:operator pos:line="282" pos:column="105">.</op:operator><name pos:line="282" pos:column="106">FileDeleted</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="283" pos:column="13">watchedFolder</name><op:operator pos:line="283" pos:column="26">.</op:operator><name pos:line="283" pos:column="27">FileEventRaised</name></name> <op:operator pos:line="283" pos:column="43">+=</op:operator> <call><name><name pos:line="283" pos:column="46">Raise</name><op:operator pos:line="283" pos:column="51">.</op:operator><name pos:line="283" pos:column="52">EventWith</name></name><argument_list pos:line="283" pos:column="61">(<argument><expr><op:operator pos:line="283" pos:column="62">new</op:operator> <call><name pos:line="283" pos:column="66">FileEventRaisedArgs</name><argument_list pos:line="283" pos:column="85">(<argument><expr><name pos:line="283" pos:column="86">xmlPath</name></expr></argument>, <argument><expr><name><name pos:line="283" pos:column="95">FileEventType</name><op:operator pos:line="283" pos:column="108">.</op:operator><name pos:line="283" pos:column="109">FileDeleted</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="286" pos:column="9">private</specifier> <name pos:line="286" pos:column="17">void</name></type> <name pos:line="286" pos:column="22">RenameSourceFileAndRaiseEvent</name><parameter_list pos:line="286" pos:column="51">(<param><decl><type><name pos:line="286" pos:column="52">IFileMonitor</name></type> <name pos:line="286" pos:column="65">watchedFolder</name></decl></param>, <param><decl><type><name pos:line="286" pos:column="80">string</name></type> <name pos:line="286" pos:column="87">oldFileName</name></decl></param>, <param><decl><type><name pos:line="286" pos:column="100">string</name></type> <name pos:line="286" pos:column="107">fileName</name></decl></param>)</parameter_list>
        <block pos:line="287" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="288" pos:column="13">var</name></type> <name pos:line="288" pos:column="17">oldPath</name> <init pos:line="288" pos:column="25">= <expr><call><name><name pos:line="288" pos:column="27">Path</name><op:operator pos:line="288" pos:column="31">.</op:operator><name pos:line="288" pos:column="32">Combine</name></name><argument_list pos:line="288" pos:column="39">(<argument><expr><name><name pos:line="288" pos:column="40">this</name><op:operator pos:line="288" pos:column="44">.</op:operator><name pos:line="288" pos:column="45">srcDirectoryInfo</name><op:operator pos:line="288" pos:column="61">.</op:operator><name pos:line="288" pos:column="62">Name</name></name></expr></argument>, <argument><expr><name pos:line="288" pos:column="68">oldFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="289" pos:column="13">var</name></type> <name pos:line="289" pos:column="17">path</name> <init pos:line="289" pos:column="22">= <expr><call><name><name pos:line="289" pos:column="24">Path</name><op:operator pos:line="289" pos:column="28">.</op:operator><name pos:line="289" pos:column="29">Combine</name></name><argument_list pos:line="289" pos:column="36">(<argument><expr><name><name pos:line="289" pos:column="37">this</name><op:operator pos:line="289" pos:column="41">.</op:operator><name pos:line="289" pos:column="42">srcDirectoryInfo</name><op:operator pos:line="289" pos:column="58">.</op:operator><name pos:line="289" pos:column="59">Name</name></name></expr></argument>, <argument><expr><name pos:line="289" pos:column="65">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="291" pos:column="13">var</name></type> <name pos:line="291" pos:column="17">oldXmlPath</name> <init pos:line="291" pos:column="28">= <expr><call><name><name pos:line="291" pos:column="30">Path</name><op:operator pos:line="291" pos:column="34">.</op:operator><name pos:line="291" pos:column="35">Combine</name></name><argument_list pos:line="291" pos:column="42">(<argument><expr><name><name pos:line="291" pos:column="43">this</name><op:operator pos:line="291" pos:column="47">.</op:operator><name pos:line="291" pos:column="48">srcDirectoryInfo</name><op:operator pos:line="291" pos:column="64">.</op:operator><name pos:line="291" pos:column="65">Name</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="291" pos:column="71">".srcml"</lit:literal></expr></argument>, <argument><expr><name pos:line="291" pos:column="81">oldFileName</name></expr></argument>)</argument_list></call> <op:operator pos:line="291" pos:column="94">+</op:operator> <lit:literal type="string" pos:line="291" pos:column="96">".xml"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="292" pos:column="13">var</name></type> <name pos:line="292" pos:column="17">xmlPath</name> <init pos:line="292" pos:column="25">= <expr><call><name><name pos:line="292" pos:column="27">Path</name><op:operator pos:line="292" pos:column="31">.</op:operator><name pos:line="292" pos:column="32">Combine</name></name><argument_list pos:line="292" pos:column="39">(<argument><expr><name><name pos:line="292" pos:column="40">this</name><op:operator pos:line="292" pos:column="44">.</op:operator><name pos:line="292" pos:column="45">srcDirectoryInfo</name><op:operator pos:line="292" pos:column="61">.</op:operator><name pos:line="292" pos:column="62">Name</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="292" pos:column="68">".srcml"</lit:literal></expr></argument>, <argument><expr><name pos:line="292" pos:column="78">fileName</name></expr></argument>)</argument_list></call> <op:operator pos:line="292" pos:column="88">+</op:operator> <lit:literal type="string" pos:line="292" pos:column="90">".xml"</lit:literal></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="294" pos:column="13">File</name><op:operator pos:line="294" pos:column="17">.</op:operator><name pos:line="294" pos:column="18">Move</name></name><argument_list pos:line="294" pos:column="22">(<argument><expr><name pos:line="294" pos:column="23">oldPath</name></expr></argument>, <argument><expr><name pos:line="294" pos:column="32">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="295" pos:column="13">watchedFolder</name><op:operator pos:line="295" pos:column="26">.</op:operator><name pos:line="295" pos:column="27">FileEventRaised</name></name> <op:operator pos:line="295" pos:column="43">+=</op:operator> <call><name><name pos:line="295" pos:column="46">Raise</name><op:operator pos:line="295" pos:column="51">.</op:operator><name pos:line="295" pos:column="52">EventWith</name></name><argument_list pos:line="295" pos:column="61">(<argument><expr><op:operator pos:line="295" pos:column="62">new</op:operator> <call><name pos:line="295" pos:column="66">FileEventRaisedArgs</name><argument_list pos:line="295" pos:column="85">(<argument><expr><name pos:line="295" pos:column="86">path</name></expr></argument>, <argument><expr><name pos:line="295" pos:column="92">oldPath</name></expr></argument>, <argument><expr><name><name pos:line="295" pos:column="101">FileEventType</name><op:operator pos:line="295" pos:column="114">.</op:operator><name pos:line="295" pos:column="115">FileRenamed</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="296" pos:column="13">watchedFolder</name><op:operator pos:line="296" pos:column="26">.</op:operator><name pos:line="296" pos:column="27">FileEventRaised</name></name> <op:operator pos:line="296" pos:column="43">+=</op:operator> <call><name><name pos:line="296" pos:column="46">Raise</name><op:operator pos:line="296" pos:column="51">.</op:operator><name pos:line="296" pos:column="52">EventWith</name></name><argument_list pos:line="296" pos:column="61">(<argument><expr><op:operator pos:line="296" pos:column="62">new</op:operator> <call><name pos:line="296" pos:column="66">FileEventRaisedArgs</name><argument_list pos:line="296" pos:column="85">(<argument><expr><name pos:line="296" pos:column="86">oldXmlPath</name></expr></argument>, <argument><expr><name><name pos:line="296" pos:column="98">FileEventType</name><op:operator pos:line="296" pos:column="111">.</op:operator><name pos:line="296" pos:column="112">FileDeleted</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="297" pos:column="13">watchedFolder</name><op:operator pos:line="297" pos:column="26">.</op:operator><name pos:line="297" pos:column="27">FileEventRaised</name></name> <op:operator pos:line="297" pos:column="43">+=</op:operator> <call><name><name pos:line="297" pos:column="46">Raise</name><op:operator pos:line="297" pos:column="51">.</op:operator><name pos:line="297" pos:column="52">EventWith</name></name><argument_list pos:line="297" pos:column="61">(<argument><expr><op:operator pos:line="297" pos:column="62">new</op:operator> <call><name pos:line="297" pos:column="66">FileEventRaisedArgs</name><argument_list pos:line="297" pos:column="85">(<argument><expr><name pos:line="297" pos:column="86">xmlPath</name></expr></argument>, <argument><expr><name><name pos:line="297" pos:column="95">FileEventType</name><op:operator pos:line="297" pos:column="108">.</op:operator><name pos:line="297" pos:column="109">FileAdded</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
