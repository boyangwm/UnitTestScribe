<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML\LastModifiedArchive.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Concurrent</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Collections</name><op:operator pos:line="3" pos:column="25">.</op:operator><name pos:line="3" pos:column="26">Generic</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Collections</name><op:operator pos:line="4" pos:column="25">.</op:operator><name pos:line="4" pos:column="26">ObjectModel</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">IO</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">Linq</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">System</name><op:operator pos:line="7" pos:column="13">.</op:operator><name pos:line="7" pos:column="14">Text</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">System</name><op:operator pos:line="8" pos:column="13">.</op:operator><name pos:line="8" pos:column="14">Threading</name><op:operator pos:line="8" pos:column="23">.</op:operator><name pos:line="8" pos:column="24">Tasks</name></name>;</using>

<namespace pos:line="10" pos:column="1">namespace <name><name pos:line="10" pos:column="11">ABB</name><op:operator pos:line="10" pos:column="14">.</op:operator><name pos:line="10" pos:column="15">SrcML</name></name> <block pos:line="10" pos:column="21">{

    <comment type="line" pos:line="12" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="13" pos:column="5">/// The last modified archive simply stores the last-modified times of all its files. It</comment>
    <comment type="line" pos:line="14" pos:column="5">/// serializes them to disk upon &lt;see cref="LastModifiedArchive.Dispose()"&gt;disposal&lt;/see&gt;</comment>
    <comment type="line" pos:line="15" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="16" pos:column="5">public</specifier> class <name pos:line="16" pos:column="18">LastModifiedArchive</name> <super pos:line="16" pos:column="38">: <name pos:line="16" pos:column="40">AbstractArchive</name></super> <block pos:line="16" pos:column="56">{
        <comment type="line" pos:line="17" pos:column="9">// private readonly object mapLock = new object();</comment>
        <decl_stmt><decl><type><specifier pos:line="18" pos:column="9">private</specifier> <specifier pos:line="18" pos:column="17">volatile</specifier> <name pos:line="18" pos:column="26">bool</name></type> <name pos:line="18" pos:column="31">_changed</name></decl>;</decl_stmt>

        <comment type="line" pos:line="20" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="21" pos:column="9">/// The default file name to store this archive in</comment>
        <comment type="line" pos:line="22" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="23" pos:column="9">public</specifier> <specifier pos:line="23" pos:column="16">const</specifier> <name pos:line="23" pos:column="22">string</name></type> <name pos:line="23" pos:column="29">DEFAULT_FILENAME</name> <init pos:line="23" pos:column="46">= <expr><lit:literal type="string" pos:line="23" pos:column="48">"lastmodifiedmap.txt"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="25" pos:column="9">//private Dictionary&lt;string, DateTime&gt; lastModifiedMap;</comment>
        <decl_stmt><decl><type><specifier pos:line="26" pos:column="9">private</specifier> <name><name pos:line="26" pos:column="17">ConcurrentDictionary</name><argument_list pos:line="26" pos:column="37">&lt;<argument><name pos:line="26" pos:column="38">string</name></argument>, <argument><name pos:line="26" pos:column="46">DateTime</name></argument>&gt;</argument_list></name></type> <name pos:line="26" pos:column="56">lastModifiedMap</name></decl>;</decl_stmt>

        <comment type="line" pos:line="28" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="29" pos:column="9">/// Creates a last modified archive that will be stored in &lt;see cref="DEFAULT_FILENAME"/&gt; within &lt;see cref="Environment.CurrentDirectory"/&gt;</comment>
        <comment type="line" pos:line="30" pos:column="9">/// &lt;/summary&gt;</comment>
        <constructor><specifier pos:line="31" pos:column="9">public</specifier> <name pos:line="31" pos:column="16">LastModifiedArchive</name><parameter_list pos:line="31" pos:column="35">()</parameter_list> <member_list pos:line="31" pos:column="38">: <call><name pos:line="31" pos:column="40">this</name><argument_list pos:line="31" pos:column="44">(<argument><expr><name><name pos:line="31" pos:column="45">Environment</name><op:operator pos:line="31" pos:column="56">.</op:operator><name pos:line="31" pos:column="57">CurrentDirectory</name></name></expr></argument>)</argument_list></call> </member_list><block pos:line="31" pos:column="75">{ }</block></constructor>

        <comment type="line" pos:line="33" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="34" pos:column="9">/// Creates a new archive in the</comment>
        <comment type="line" pos:line="35" pos:column="9">/// &lt;paramref name="baseDirectory"&gt;specified directory&lt;/paramref&gt; with a default file name.</comment>
        <comment type="line" pos:line="36" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="37" pos:column="9">/// &lt;param name="baseDirectory"&gt;The directory to save the map to&lt;/param&gt;</comment>
        <constructor><specifier pos:line="38" pos:column="9">public</specifier> <name pos:line="38" pos:column="16">LastModifiedArchive</name><parameter_list pos:line="38" pos:column="35">(<param><decl><type><name pos:line="38" pos:column="36">string</name></type> <name pos:line="38" pos:column="43">baseDirectory</name></decl></param>)</parameter_list>
            <member_list pos:line="39" pos:column="13">: <call><name pos:line="39" pos:column="15">this</name><argument_list pos:line="39" pos:column="19">(<argument><expr><name pos:line="39" pos:column="20">baseDirectory</name></expr></argument>, <argument><expr><name pos:line="39" pos:column="35">DEFAULT_FILENAME</name></expr></argument>)</argument_list></call> </member_list><block pos:line="39" pos:column="53">{
        }</block></constructor>

        <comment type="line" pos:line="42" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="43" pos:column="9">/// Creates a new archive in the</comment>
        <comment type="line" pos:line="44" pos:column="9">/// &lt;paramref name="baseDirectory"&gt;specified directory&lt;/paramref&gt; with the given</comment>
        <comment type="line" pos:line="45" pos:column="9">/// &lt;paramref name="fileName"/&gt;&lt;/summary&gt;</comment>
        <comment type="line" pos:line="46" pos:column="9">/// &lt;param name="baseDirectory"&gt;the directory that this archive will be stored in&lt;/param&gt;</comment>
        <comment type="line" pos:line="47" pos:column="9">/// &lt;param name="fileName"&gt;the filename to store the mapping in&lt;/param&gt;</comment>
        <constructor><specifier pos:line="48" pos:column="9">public</specifier> <name pos:line="48" pos:column="16">LastModifiedArchive</name><parameter_list pos:line="48" pos:column="35">(<param><decl><type><name pos:line="48" pos:column="36">string</name></type> <name pos:line="48" pos:column="43">baseDirectory</name></decl></param>, <param><decl><type><name pos:line="48" pos:column="58">string</name></type> <name pos:line="48" pos:column="65">fileName</name></decl></param>)</parameter_list>
            <member_list pos:line="49" pos:column="13">: <call><name pos:line="49" pos:column="15">this</name><argument_list pos:line="49" pos:column="19">(<argument><expr><name pos:line="49" pos:column="20">baseDirectory</name></expr></argument>, <argument><expr><name pos:line="49" pos:column="35">fileName</name></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="45">TaskScheduler</name><op:operator pos:line="49" pos:column="58">.</op:operator><name pos:line="49" pos:column="59">Default</name></name></expr></argument>)</argument_list></call> </member_list><block pos:line="49" pos:column="68">{ }</block></constructor>

        <comment type="line" pos:line="51" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="52" pos:column="9">/// Creates a new archive in the</comment>
        <comment type="line" pos:line="53" pos:column="9">/// &lt;paramref name="baseDirectory"&gt;specified directory&lt;/paramref&gt; with the given</comment>
        <comment type="line" pos:line="54" pos:column="9">/// &lt;paramref name="fileName"/&gt;&lt;/summary&gt;</comment>
        <comment type="line" pos:line="55" pos:column="9">/// &lt;param name="baseDirectory"&gt;the directory that this archive will be stored in&lt;/param&gt;</comment>
        <comment type="line" pos:line="56" pos:column="9">/// &lt;param name="fileName"&gt;the filename to store the mapping in&lt;/param&gt;</comment>
        <comment type="line" pos:line="57" pos:column="9">/// &lt;param name="scheduler"&gt;The task factory to use for asynchronous methods&lt;/param&gt;</comment>
        <constructor><specifier pos:line="58" pos:column="9">public</specifier> <name pos:line="58" pos:column="16">LastModifiedArchive</name><parameter_list pos:line="58" pos:column="35">(<param><decl><type><name pos:line="58" pos:column="36">string</name></type> <name pos:line="58" pos:column="43">baseDirectory</name></decl></param>, <param><decl><type><name pos:line="58" pos:column="58">string</name></type> <name pos:line="58" pos:column="65">fileName</name></decl></param>, <param><decl><type><name pos:line="58" pos:column="75">TaskScheduler</name></type> <name pos:line="58" pos:column="89">scheduler</name></decl></param>)</parameter_list>
            <member_list pos:line="59" pos:column="13">: <call><name pos:line="59" pos:column="15">base</name><argument_list pos:line="59" pos:column="19">(<argument><expr><name pos:line="59" pos:column="20">baseDirectory</name></expr></argument>, <argument><expr><name pos:line="59" pos:column="35">fileName</name></expr></argument>, <argument><expr><name pos:line="59" pos:column="45">scheduler</name></expr></argument>)</argument_list></call> </member_list><block pos:line="59" pos:column="56">{
                <expr_stmt><expr><name pos:line="60" pos:column="17">lastModifiedMap</name> <op:operator pos:line="60" pos:column="33">=</op:operator> <op:operator pos:line="60" pos:column="35">new</op:operator> <call><name><name pos:line="60" pos:column="39">ConcurrentDictionary</name><argument_list pos:line="60" pos:column="59">&lt;<argument><name pos:line="60" pos:column="60">string</name></argument>, <argument><name pos:line="60" pos:column="68">DateTime</name></argument>&gt;</argument_list></name><argument_list pos:line="60" pos:column="77">(<argument><expr><name><name pos:line="60" pos:column="78">StringComparer</name><op:operator pos:line="60" pos:column="92">.</op:operator><name pos:line="60" pos:column="93">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="61" pos:column="13">ReadMap</name><argument_list pos:line="61" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="62" pos:column="13">_changed</name> <op:operator pos:line="62" pos:column="22">=</op:operator> <lit:literal type="boolean" pos:line="62" pos:column="24">false</lit:literal></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="65" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="66" pos:column="9">/// Returns true if there are no entries in this last modified archive</comment>
        <comment type="line" pos:line="67" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="68" pos:column="9">public</specifier> <specifier pos:line="68" pos:column="16">override</specifier> <name pos:line="68" pos:column="25">bool</name></type> <name pos:line="68" pos:column="30">IsEmpty</name> <block pos:line="68" pos:column="38">{
            <function><name pos:line="69" pos:column="13">get</name> <block pos:line="69" pos:column="17">{ <return pos:line="69" pos:column="19">return <expr><name><name pos:line="69" pos:column="26">this</name><op:operator pos:line="69" pos:column="30">.</op:operator><name pos:line="69" pos:column="31">lastModifiedMap</name><op:operator pos:line="69" pos:column="46">.</op:operator><name pos:line="69" pos:column="47">Count</name></name> <op:operator pos:line="69" pos:column="53">==</op:operator> <lit:literal type="number" pos:line="69" pos:column="56">0</lit:literal></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>
        <comment type="line" pos:line="71" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="72" pos:column="9">/// Returns a collection of all supported file extensions.</comment>
        <comment type="line" pos:line="73" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="74" pos:column="9">public</specifier> <specifier pos:line="74" pos:column="16">override</specifier> <name><name pos:line="74" pos:column="25">ICollection</name><argument_list pos:line="74" pos:column="36">&lt;<argument><name pos:line="74" pos:column="37">string</name></argument>&gt;</argument_list></name></type> <name pos:line="74" pos:column="45">SupportedExtensions</name> <block pos:line="74" pos:column="65">{
            <function><name pos:line="75" pos:column="13">get</name> <block pos:line="75" pos:column="17">{ <throw pos:line="75" pos:column="19">throw <expr><op:operator pos:line="75" pos:column="25">new</op:operator> <call><name pos:line="75" pos:column="29">NotImplementedException</name><argument_list pos:line="75" pos:column="52">()</argument_list></call></expr>;</throw> }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="78" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="79" pos:column="9">/// Checks if the given file name is present in the archive</comment>
        <comment type="line" pos:line="80" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="81" pos:column="9">/// &lt;param name="fileName"&gt;The file name to test for&lt;/param&gt;</comment>
        <comment type="line" pos:line="82" pos:column="9">/// &lt;returns&gt;True if the file is in the archive; false otherwise&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="83" pos:column="9">public</specifier> <specifier pos:line="83" pos:column="16">override</specifier> <name pos:line="83" pos:column="25">bool</name></type> <name pos:line="83" pos:column="30">ContainsFile</name><parameter_list pos:line="83" pos:column="42">(<param><decl><type><name pos:line="83" pos:column="43">string</name></type> <name pos:line="83" pos:column="50">fileName</name></decl></param>)</parameter_list> <block pos:line="83" pos:column="60">{
            <decl_stmt><decl><type><name pos:line="84" pos:column="13">string</name></type> <name pos:line="84" pos:column="20">fullPath</name> <init pos:line="84" pos:column="29">= <expr><call><name pos:line="84" pos:column="31">GetFullPath</name><argument_list pos:line="84" pos:column="42">(<argument><expr><name pos:line="84" pos:column="43">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="85" pos:column="13">//lock(mapLock) {</comment>
            <return pos:line="86" pos:column="13">return <expr><call><name><name pos:line="86" pos:column="20">lastModifiedMap</name><op:operator pos:line="86" pos:column="35">.</op:operator><name pos:line="86" pos:column="36">ContainsKey</name></name><argument_list pos:line="86" pos:column="47">(<argument><expr><name pos:line="86" pos:column="48">fullPath</name></expr></argument>)</argument_list></call></expr>;</return>
            <comment type="line" pos:line="87" pos:column="13">//}</comment>
        }</block></function>

        <comment type="line" pos:line="90" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="91" pos:column="9">/// saves this archive to disk</comment>
        <comment type="line" pos:line="92" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="93" pos:column="9">public</specifier> <specifier pos:line="93" pos:column="16">override</specifier> <name pos:line="93" pos:column="25">void</name></type> <name pos:line="93" pos:column="30">Dispose</name><parameter_list pos:line="93" pos:column="37">()</parameter_list> <block pos:line="93" pos:column="40">{
            <expr_stmt><expr><call><name pos:line="94" pos:column="13">SaveMap</name><argument_list pos:line="94" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="95" pos:column="13">base</name><op:operator pos:line="95" pos:column="17">.</op:operator><name pos:line="95" pos:column="18">Dispose</name></name><argument_list pos:line="95" pos:column="25">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="98" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="99" pos:column="9">/// Gets all of the files stored in the archive</comment>
        <comment type="line" pos:line="100" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="101" pos:column="9">/// &lt;returns&gt;the files in the archive&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="102" pos:column="9">public</specifier> <specifier pos:line="102" pos:column="16">override</specifier> <name><name pos:line="102" pos:column="25">Collection</name><argument_list pos:line="102" pos:column="35">&lt;<argument><name pos:line="102" pos:column="36">string</name></argument>&gt;</argument_list></name></type> <name pos:line="102" pos:column="44">GetFiles</name><parameter_list pos:line="102" pos:column="52">()</parameter_list> <block pos:line="102" pos:column="55">{
            <decl_stmt><decl><type><name><name pos:line="103" pos:column="13">Collection</name><argument_list pos:line="103" pos:column="23">&lt;<argument><name pos:line="103" pos:column="24">string</name></argument>&gt;</argument_list></name></type> <name pos:line="103" pos:column="32">fileNames</name> <init pos:line="103" pos:column="42">= <expr><op:operator pos:line="103" pos:column="44">new</op:operator> <call><name><name pos:line="103" pos:column="48">Collection</name><argument_list pos:line="103" pos:column="58">&lt;<argument><name pos:line="103" pos:column="59">string</name></argument>&gt;</argument_list></name><argument_list pos:line="103" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="104" pos:column="13">//lock(mapLock) {</comment>
            <foreach pos:line="105" pos:column="13">foreach(<init><decl><type><name pos:line="105" pos:column="21">var</name></type> <name pos:line="105" pos:column="25">fileName</name> <range pos:line="105" pos:column="34">in <expr><name><name pos:line="105" pos:column="37">lastModifiedMap</name><op:operator pos:line="105" pos:column="52">.</op:operator><name pos:line="105" pos:column="53">Keys</name></name></expr></range></decl></init>) <block pos:line="105" pos:column="59">{
                <expr_stmt><expr><call><name><name pos:line="106" pos:column="17">fileNames</name><op:operator pos:line="106" pos:column="26">.</op:operator><name pos:line="106" pos:column="27">Add</name></name><argument_list pos:line="106" pos:column="30">(<argument><expr><name pos:line="106" pos:column="31">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
            <comment type="line" pos:line="108" pos:column="13">//}</comment>
            <return pos:line="109" pos:column="13">return <expr><name pos:line="109" pos:column="20">fileNames</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="112" pos:column="9">public</specifier> <specifier pos:line="112" pos:column="16">virtual</specifier> <name pos:line="112" pos:column="24">DateTime</name></type> <name pos:line="112" pos:column="33">GetLastModifiedTime</name><parameter_list pos:line="112" pos:column="52">(<param><decl><type><name pos:line="112" pos:column="53">string</name></type> <name pos:line="112" pos:column="60">fileName</name></decl></param>)</parameter_list> <block pos:line="112" pos:column="70">{
            <if pos:line="113" pos:column="13">if<condition pos:line="113" pos:column="15">(<expr><call><name pos:line="113" pos:column="16">ContainsFile</name><argument_list pos:line="113" pos:column="28">(<argument><expr><name pos:line="113" pos:column="29">fileName</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="113" pos:column="39"> <block pos:line="113" pos:column="40">{
                <return pos:line="114" pos:column="17">return <expr><name><name pos:line="114" pos:column="24">lastModifiedMap</name><index pos:line="114" pos:column="39">[<expr><call><name pos:line="114" pos:column="40">GetFullPath</name><argument_list pos:line="114" pos:column="51">(<argument><expr><name pos:line="114" pos:column="52">fileName</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</return>
            }</block></then></if>
            <return pos:line="116" pos:column="13">return <expr><name><name pos:line="116" pos:column="20">DateTime</name><op:operator pos:line="116" pos:column="28">.</op:operator><name pos:line="116" pos:column="29">MaxValue</name></name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="119" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="120" pos:column="9">/// Checks if the archive is outdated in comparison to the original file. A file is outdated</comment>
        <comment type="line" pos:line="121" pos:column="9">/// if any of the following are true: &lt;list type="bullet"&gt; &lt;item&gt;&lt;description&gt;the file does</comment>
        <comment type="line" pos:line="122" pos:column="9">/// not exist and it is in the archive&lt;/description&gt;&lt;/item&gt; &lt;item&gt;&lt;description&gt;the file is</comment>
        <comment type="line" pos:line="123" pos:column="9">/// not in the archive and it exists&lt;/description&gt;&lt;/item&gt; &lt;item&gt;&lt;description&gt;The last</comment>
        <comment type="line" pos:line="124" pos:column="9">/// modified time in the archive is more recent than</comment>
        <comment type="line" pos:line="125" pos:column="9">/// &lt;paramref name="fileName"/&gt;&lt;/description&gt;&lt;/item&gt; &lt;/list&gt;</comment>
        <comment type="line" pos:line="126" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="127" pos:column="9">/// &lt;param name="fileName"&gt;the file to check&lt;/param&gt;</comment>
        <comment type="line" pos:line="128" pos:column="9">/// &lt;returns&gt;True if the file is outdated; false otherwise&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="129" pos:column="9">public</specifier> <specifier pos:line="129" pos:column="16">override</specifier> <name pos:line="129" pos:column="25">bool</name></type> <name pos:line="129" pos:column="30">IsOutdated</name><parameter_list pos:line="129" pos:column="40">(<param><decl><type><name pos:line="129" pos:column="41">string</name></type> <name pos:line="129" pos:column="48">fileName</name></decl></param>)</parameter_list> <block pos:line="129" pos:column="58">{
            <decl_stmt><decl><type><name pos:line="130" pos:column="13">string</name></type> <name pos:line="130" pos:column="20">fullPath</name> <init pos:line="130" pos:column="29">= <expr><call><name pos:line="130" pos:column="31">GetFullPath</name><argument_list pos:line="130" pos:column="42">(<argument><expr><name pos:line="130" pos:column="43">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="131" pos:column="13">bool</name></type> <name pos:line="131" pos:column="18">fileNameExists</name> <init pos:line="131" pos:column="33">= <expr><call><name><name pos:line="131" pos:column="35">File</name><op:operator pos:line="131" pos:column="39">.</op:operator><name pos:line="131" pos:column="40">Exists</name></name><argument_list pos:line="131" pos:column="46">(<argument><expr><name pos:line="131" pos:column="47">fullPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="132" pos:column="13">bool</name></type> <name pos:line="132" pos:column="18">fileIsInArchive</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="133" pos:column="13">DateTime</name></type> <name pos:line="133" pos:column="22">lastModified</name> <init pos:line="133" pos:column="35">= <expr><op:operator pos:line="133" pos:column="37">(</op:operator><name pos:line="133" pos:column="38">fileNameExists</name> <op:operator pos:line="133" pos:column="53">?</op:operator> <call><name><name pos:line="133" pos:column="55">File</name><op:operator pos:line="133" pos:column="59">.</op:operator><name pos:line="133" pos:column="60">GetLastWriteTime</name></name><argument_list pos:line="133" pos:column="76">(<argument><expr><name pos:line="133" pos:column="77">fullPath</name></expr></argument>)</argument_list></call> <op:operator pos:line="133" pos:column="87">:</op:operator> <name><name pos:line="133" pos:column="89">DateTime</name><op:operator pos:line="133" pos:column="97">.</op:operator><name pos:line="133" pos:column="98">MinValue</name></name><op:operator pos:line="133" pos:column="106">)</op:operator></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="134" pos:column="13">DateTime</name></type> <name pos:line="134" pos:column="22">lastModifiedInArchive</name></decl>;</decl_stmt>

            <expr_stmt><expr><name pos:line="136" pos:column="13">fileIsInArchive</name> <op:operator pos:line="136" pos:column="29">=</op:operator> <call><name><name pos:line="136" pos:column="31">this</name><op:operator pos:line="136" pos:column="35">.</op:operator><name pos:line="136" pos:column="36">lastModifiedMap</name><op:operator pos:line="136" pos:column="51">.</op:operator><name pos:line="136" pos:column="52">TryGetValue</name></name><argument_list pos:line="136" pos:column="63">(<argument><expr><name pos:line="136" pos:column="64">fullPath</name></expr></argument>, <argument><expr pos:line="136" pos:column="74">out <name pos:line="136" pos:column="78">lastModifiedInArchive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if pos:line="137" pos:column="13">if<condition pos:line="137" pos:column="15">(<expr><op:operator pos:line="137" pos:column="16">!</op:operator><name pos:line="137" pos:column="17">fileIsInArchive</name></expr>)</condition><then pos:line="137" pos:column="33"> <block pos:line="137" pos:column="34">{
                <expr_stmt><expr><name pos:line="138" pos:column="17">lastModifiedInArchive</name> <op:operator pos:line="138" pos:column="39">=</op:operator> <name><name pos:line="138" pos:column="41">DateTime</name><op:operator pos:line="138" pos:column="49">.</op:operator><name pos:line="138" pos:column="50">MinValue</name></name></expr>;</expr_stmt>
            }</block></then></if>

            <return pos:line="141" pos:column="13">return <expr><op:operator pos:line="141" pos:column="20">!</op:operator><op:operator pos:line="141" pos:column="21">(</op:operator><name pos:line="141" pos:column="22">fileNameExists</name> <op:operator pos:line="141" pos:column="37">==</op:operator> <name pos:line="141" pos:column="40">fileIsInArchive</name> <op:operator pos:line="141" pos:column="56">&amp;&amp;</op:operator> <name pos:line="141" pos:column="59">lastModified</name> <op:operator pos:line="141" pos:column="72">&lt;=</op:operator> <name pos:line="141" pos:column="75">lastModifiedInArchive</name><op:operator pos:line="141" pos:column="96">)</op:operator></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="144" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="145" pos:column="9">/// Loads this map from disk (assuming &lt;see cref="AbstractArchive.ArchivePath"/&gt; exists)</comment>
        <comment type="line" pos:line="146" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="147" pos:column="9">public</specifier> <name pos:line="147" pos:column="16">void</name></type> <name pos:line="147" pos:column="21">ReadMap</name><parameter_list pos:line="147" pos:column="28">()</parameter_list> <block pos:line="147" pos:column="31">{
            <if pos:line="148" pos:column="13">if<condition pos:line="148" pos:column="15">(<expr><call><name><name pos:line="148" pos:column="16">File</name><op:operator pos:line="148" pos:column="20">.</op:operator><name pos:line="148" pos:column="21">Exists</name></name><argument_list pos:line="148" pos:column="27">(<argument><expr><name><name pos:line="148" pos:column="28">this</name><op:operator pos:line="148" pos:column="32">.</op:operator><name pos:line="148" pos:column="33">ArchivePath</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="148" pos:column="46"> <block pos:line="148" pos:column="47">{
                <foreach pos:line="149" pos:column="17">foreach(<init><decl><type><name pos:line="149" pos:column="25">var</name></type> <name pos:line="149" pos:column="29">line</name> <range pos:line="149" pos:column="34">in <expr><call><name><name pos:line="149" pos:column="37">File</name><op:operator pos:line="149" pos:column="41">.</op:operator><name pos:line="149" pos:column="42">ReadLines</name></name><argument_list pos:line="149" pos:column="51">(<argument><expr><name><name pos:line="149" pos:column="52">this</name><op:operator pos:line="149" pos:column="56">.</op:operator><name pos:line="149" pos:column="57">ArchivePath</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>) <block pos:line="149" pos:column="71">{
                    <decl_stmt><decl><type><name pos:line="150" pos:column="21">var</name></type> <name pos:line="150" pos:column="25">parts</name> <init pos:line="150" pos:column="31">= <expr><call><name><name pos:line="150" pos:column="33">line</name><op:operator pos:line="150" pos:column="37">.</op:operator><name pos:line="150" pos:column="38">Split</name></name><argument_list pos:line="150" pos:column="43">(<argument><expr><lit:literal type="char" pos:line="150" pos:column="44">'|'</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name><name pos:line="151" pos:column="21">this</name><op:operator pos:line="151" pos:column="25">.</op:operator><name pos:line="151" pos:column="26">lastModifiedMap</name><index pos:line="151" pos:column="41">[<expr><name><name pos:line="151" pos:column="42">parts</name><index pos:line="151" pos:column="47">[<expr><lit:literal type="number" pos:line="151" pos:column="48">0</lit:literal></expr>]</index></name></expr>]</index></name> <op:operator pos:line="151" pos:column="52">=</op:operator> <op:operator pos:line="151" pos:column="54">new</op:operator> <call><name pos:line="151" pos:column="58">DateTime</name><argument_list pos:line="151" pos:column="66">(<argument><expr><call><name><name pos:line="151" pos:column="67">Int64</name><op:operator pos:line="151" pos:column="72">.</op:operator><name pos:line="151" pos:column="73">Parse</name></name><argument_list pos:line="151" pos:column="78">(<argument><expr><name><name pos:line="151" pos:column="79">parts</name><index pos:line="151" pos:column="84">[<expr><lit:literal type="number" pos:line="151" pos:column="85">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="156" pos:column="9">public</specifier> <specifier pos:line="156" pos:column="16">override</specifier> <name pos:line="156" pos:column="25">void</name></type> <name pos:line="156" pos:column="30">Save</name><parameter_list pos:line="156" pos:column="34">()</parameter_list> <block pos:line="156" pos:column="37">{
            <expr_stmt><expr><call><name pos:line="157" pos:column="13">SaveMap</name><argument_list pos:line="157" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="160" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="161" pos:column="9">/// Saves this map to disk (at &lt;see cref="AbstractArchive.ArchivePath"/&gt;</comment>
        <comment type="line" pos:line="162" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="163" pos:column="9">public</specifier> <name pos:line="163" pos:column="16">void</name></type> <name pos:line="163" pos:column="21">SaveMap</name><parameter_list pos:line="163" pos:column="28">()</parameter_list> <block pos:line="163" pos:column="31">{
            <decl_stmt><decl><type><name pos:line="164" pos:column="13">bool</name></type> <name pos:line="164" pos:column="18">isChanged</name> <init pos:line="164" pos:column="28">= <expr><name pos:line="164" pos:column="30">_changed</name></expr></init></decl>;</decl_stmt>

            <if pos:line="166" pos:column="13">if<condition pos:line="166" pos:column="15">(<expr><name pos:line="166" pos:column="16">isChanged</name></expr>)</condition><then pos:line="166" pos:column="26"> <block pos:line="166" pos:column="27">{
                <decl_stmt><decl><type><name pos:line="167" pos:column="17">var</name></type> <name pos:line="167" pos:column="21">mapCopy</name> <init pos:line="167" pos:column="29">= <expr><op:operator pos:line="167" pos:column="31">new</op:operator> <call><name><name pos:line="167" pos:column="35">Dictionary</name><argument_list pos:line="167" pos:column="45">&lt;<argument><name pos:line="167" pos:column="46">string</name></argument>, <argument><name pos:line="167" pos:column="54">DateTime</name></argument>&gt;</argument_list></name><argument_list pos:line="167" pos:column="63">(<argument><expr><name pos:line="167" pos:column="64">lastModifiedMap</name></expr></argument>, <argument><expr><name><name pos:line="167" pos:column="81">StringComparer</name><op:operator pos:line="167" pos:column="95">.</op:operator><name pos:line="167" pos:column="96">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name pos:line="168" pos:column="17">_changed</name> <op:operator pos:line="168" pos:column="26">=</op:operator> <lit:literal type="boolean" pos:line="168" pos:column="28">false</lit:literal></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="170" pos:column="17">var</name></type> <name pos:line="170" pos:column="21">tempFileName</name> <init pos:line="170" pos:column="34">= <expr><call><name><name pos:line="170" pos:column="36">Path</name><op:operator pos:line="170" pos:column="40">.</op:operator><name pos:line="170" pos:column="41">Combine</name></name><argument_list pos:line="170" pos:column="48">(<argument><expr><call><name><name pos:line="170" pos:column="49">Path</name><op:operator pos:line="170" pos:column="53">.</op:operator><name pos:line="170" pos:column="54">GetTempPath</name></name><argument_list pos:line="170" pos:column="65">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="170" pos:column="69">Path</name><op:operator pos:line="170" pos:column="73">.</op:operator><name pos:line="170" pos:column="74">ChangeExtension</name></name><argument_list pos:line="170" pos:column="89">(<argument><expr><call><name><name pos:line="170" pos:column="90">Path</name><op:operator pos:line="170" pos:column="94">.</op:operator><name pos:line="170" pos:column="95">GetRandomFileName</name></name><argument_list pos:line="170" pos:column="112">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="170" pos:column="116">".txt"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <using pos:line="172" pos:column="17">using(<decl><type><name pos:line="172" pos:column="23">var</name></type> <name pos:line="172" pos:column="27">output</name> <init pos:line="172" pos:column="34">= <expr><call><name><name pos:line="172" pos:column="36">File</name><op:operator pos:line="172" pos:column="40">.</op:operator><name pos:line="172" pos:column="41">CreateText</name></name><argument_list pos:line="172" pos:column="51">(<argument><expr><name pos:line="172" pos:column="52">tempFileName</name></expr></argument>)</argument_list></call></expr></init></decl>) <block pos:line="172" pos:column="67">{
                    <foreach pos:line="173" pos:column="21">foreach(<init><decl><type><name pos:line="173" pos:column="29">var</name></type> <name pos:line="173" pos:column="33">kvp</name> <range pos:line="173" pos:column="37">in <expr><name pos:line="173" pos:column="40">mapCopy</name></expr></range></decl></init>) <block pos:line="173" pos:column="49">{
                        <expr_stmt><expr><call><name><name pos:line="174" pos:column="25">output</name><op:operator pos:line="174" pos:column="31">.</op:operator><name pos:line="174" pos:column="32">WriteLine</name></name><argument_list pos:line="174" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="174" pos:column="42">"{0}|{1}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="174" pos:column="53">kvp</name><op:operator pos:line="174" pos:column="56">.</op:operator><name pos:line="174" pos:column="57">Key</name></name></expr></argument>, <argument><expr><name><name pos:line="174" pos:column="62">kvp</name><op:operator pos:line="174" pos:column="65">.</op:operator><name pos:line="174" pos:column="66">Value</name><op:operator pos:line="174" pos:column="71">.</op:operator><name pos:line="174" pos:column="72">Ticks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></foreach>
                }</block></using>
                <expr_stmt><expr><call><name><name pos:line="177" pos:column="17">File</name><op:operator pos:line="177" pos:column="21">.</op:operator><name pos:line="177" pos:column="22">Copy</name></name><argument_list pos:line="177" pos:column="26">(<argument><expr><name pos:line="177" pos:column="27">tempFileName</name></expr></argument>, <argument><expr><name><name pos:line="177" pos:column="41">this</name><op:operator pos:line="177" pos:column="45">.</op:operator><name pos:line="177" pos:column="46">ArchivePath</name></name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="177" pos:column="59">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="178" pos:column="17">File</name><op:operator pos:line="178" pos:column="21">.</op:operator><name pos:line="178" pos:column="22">Delete</name></name><argument_list pos:line="178" pos:column="28">(<argument><expr><name pos:line="178" pos:column="29">tempFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="182" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="183" pos:column="9">/// Adds or updates</comment>
        <comment type="line" pos:line="184" pos:column="9">/// &lt;paramref name="fileName"/&gt;to the archive. It raises</comment>
        <comment type="line" pos:line="185" pos:column="9">/// &lt;see cref="AbstractArchive.FileChanged"/&gt; with &lt;see cref="FileEventType.FileChanged"/&gt;</comment>
        <comment type="line" pos:line="186" pos:column="9">/// (if the file was in the archive) or &lt;see cref="FileEventType.FileAdded"/&gt;.</comment>
        <comment type="line" pos:line="187" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="188" pos:column="9">/// &lt;param name="fileName"&gt;The file name to add&lt;/param&gt;</comment>
        <function><type><specifier pos:line="189" pos:column="9">protected</specifier> <specifier pos:line="189" pos:column="19">override</specifier> <name pos:line="189" pos:column="28">FileEventType</name><type:modifier pos:line="189" pos:column="41">?</type:modifier></type> <name pos:line="189" pos:column="43">AddOrUpdateFileImpl</name><parameter_list pos:line="189" pos:column="62">(<param><decl><type><name pos:line="189" pos:column="63">string</name></type> <name pos:line="189" pos:column="70">fileName</name></decl></param>)</parameter_list> <block pos:line="189" pos:column="80">{
            <decl_stmt><decl><type><name pos:line="190" pos:column="13">string</name></type> <name pos:line="190" pos:column="20">fullPath</name> <init pos:line="190" pos:column="29">= <expr><call><name pos:line="190" pos:column="31">GetFullPath</name><argument_list pos:line="190" pos:column="42">(<argument><expr><name pos:line="190" pos:column="43">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="191" pos:column="13">bool</name></type> <name pos:line="191" pos:column="18">fileAlreadyExists</name> <init pos:line="191" pos:column="36">= <expr><call><name pos:line="191" pos:column="38">ContainsFile</name><argument_list pos:line="191" pos:column="50">(<argument><expr><name pos:line="191" pos:column="51">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="192" pos:column="13">lastModifiedMap</name><index pos:line="192" pos:column="28">[<expr><name pos:line="192" pos:column="29">fullPath</name></expr>]</index></name> <op:operator pos:line="192" pos:column="39">=</op:operator> <call><name><name pos:line="192" pos:column="41">File</name><op:operator pos:line="192" pos:column="45">.</op:operator><name pos:line="192" pos:column="46">GetLastWriteTime</name></name><argument_list pos:line="192" pos:column="62">(<argument><expr><name pos:line="192" pos:column="63">fullPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="193" pos:column="13">_changed</name> <op:operator pos:line="193" pos:column="22">=</op:operator> <lit:literal type="boolean" pos:line="193" pos:column="24">true</lit:literal></expr>;</expr_stmt>
            <return pos:line="194" pos:column="13">return <expr><op:operator pos:line="194" pos:column="20">(</op:operator><name pos:line="194" pos:column="21">fileAlreadyExists</name> <op:operator pos:line="194" pos:column="39">?</op:operator> <name><name pos:line="194" pos:column="41">FileEventType</name><op:operator pos:line="194" pos:column="54">.</op:operator><name pos:line="194" pos:column="55">FileChanged</name></name> <op:operator pos:line="194" pos:column="67">:</op:operator> <name><name pos:line="194" pos:column="69">FileEventType</name><op:operator pos:line="194" pos:column="82">.</op:operator><name pos:line="194" pos:column="83">FileAdded</name></name><op:operator pos:line="194" pos:column="92">)</op:operator></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="197" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="198" pos:column="9">/// Deletes the given</comment>
        <comment type="line" pos:line="199" pos:column="9">/// &lt;paramref name="fileName"/&gt;from the archive. It raises</comment>
        <comment type="line" pos:line="200" pos:column="9">/// &lt;see cref="AbstractArchive.FileChanged"/&gt; with &lt;see cref="FileEventType.FileDeleted"/&gt;</comment>
        <comment type="line" pos:line="201" pos:column="9">/// if the file was in the archive.</comment>
        <comment type="line" pos:line="202" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="203" pos:column="9">/// &lt;param name="fileName"&gt;The file to delete&lt;/param&gt;</comment>
        <function><type><specifier pos:line="204" pos:column="9">protected</specifier> <specifier pos:line="204" pos:column="19">override</specifier> <name pos:line="204" pos:column="28">bool</name></type> <name pos:line="204" pos:column="33">DeleteFileImpl</name><parameter_list pos:line="204" pos:column="47">(<param><decl><type><name pos:line="204" pos:column="48">string</name></type> <name pos:line="204" pos:column="55">fileName</name></decl></param>)</parameter_list> <block pos:line="204" pos:column="65">{
            <decl_stmt><decl><type><name pos:line="205" pos:column="13">string</name></type> <name pos:line="205" pos:column="20">fullPath</name> <init pos:line="205" pos:column="29">= <expr><call><name pos:line="205" pos:column="31">GetFullPath</name><argument_list pos:line="205" pos:column="42">(<argument><expr><name pos:line="205" pos:column="43">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="206" pos:column="13">bool</name></type> <name pos:line="206" pos:column="18">mapContainsFile</name> <init pos:line="206" pos:column="34">= <expr><lit:literal type="boolean" pos:line="206" pos:column="36">true</lit:literal></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name pos:line="208" pos:column="13">mapContainsFile</name> <op:operator pos:line="208" pos:column="29">=</op:operator> <call><name><name pos:line="208" pos:column="31">lastModifiedMap</name><op:operator pos:line="208" pos:column="46">.</op:operator><name pos:line="208" pos:column="47">ContainsKey</name></name><argument_list pos:line="208" pos:column="58">(<argument><expr><name pos:line="208" pos:column="59">fullPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="209" pos:column="13">DateTime</name></type> <name pos:line="209" pos:column="22">result</name></decl>;</decl_stmt>
            <if pos:line="210" pos:column="13">if<condition pos:line="210" pos:column="15">(<expr><call><name><name pos:line="210" pos:column="16">lastModifiedMap</name><op:operator pos:line="210" pos:column="31">.</op:operator><name pos:line="210" pos:column="32">TryRemove</name></name><argument_list pos:line="210" pos:column="41">(<argument><expr><name pos:line="210" pos:column="42">fullPath</name></expr></argument>, <argument><expr pos:line="210" pos:column="52">out <name pos:line="210" pos:column="56">result</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="210" pos:column="64"> <block pos:line="210" pos:column="65">{
                <expr_stmt><expr><name pos:line="211" pos:column="17">_changed</name> <op:operator pos:line="211" pos:column="26">=</op:operator> <lit:literal type="boolean" pos:line="211" pos:column="28">true</lit:literal></expr>;</expr_stmt>
                <return pos:line="212" pos:column="17">return <expr><lit:literal type="boolean" pos:line="212" pos:column="24">true</lit:literal></expr>;</return>
            }</block></then></if>
            <return pos:line="214" pos:column="13">return <expr><lit:literal type="boolean" pos:line="214" pos:column="20">false</lit:literal></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="217" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="218" pos:column="9">/// Renames filename from</comment>
        <comment type="line" pos:line="219" pos:column="9">/// &lt;paramref name="oldFileName"/&gt;to</comment>
        <comment type="line" pos:line="220" pos:column="9">/// &lt;paramref name="newFileName"/&gt;. If</comment>
        <comment type="line" pos:line="221" pos:column="9">/// &lt;paramref name="oldFileName"/&gt;is in the archive, then</comment>
        <comment type="line" pos:line="222" pos:column="9">/// &lt;see cref="AbstractArchive.FileChanged"/&gt; is raised with</comment>
        <comment type="line" pos:line="223" pos:column="9">/// &lt;see cref="FileEventType.FileRenamed"/&gt;. Otherwise, this method simply calls</comment>
        <comment type="line" pos:line="224" pos:column="9">/// &lt;see cref="AddOrUpdateFileImpl(string)"/&gt;</comment>
        <comment type="line" pos:line="225" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="226" pos:column="9">/// &lt;param name="oldFileName"&gt;the old file path&lt;/param&gt;</comment>
        <comment type="line" pos:line="227" pos:column="9">/// &lt;param name="newFileName"&gt;the new file path&lt;/param&gt;</comment>
        <function><type><specifier pos:line="228" pos:column="9">protected</specifier> <specifier pos:line="228" pos:column="19">override</specifier> <name pos:line="228" pos:column="28">bool</name></type> <name pos:line="228" pos:column="33">RenameFileImpl</name><parameter_list pos:line="228" pos:column="47">(<param><decl><type><name pos:line="228" pos:column="48">string</name></type> <name pos:line="228" pos:column="55">oldFileName</name></decl></param>, <param><decl><type><name pos:line="228" pos:column="68">string</name></type> <name pos:line="228" pos:column="75">newFileName</name></decl></param>)</parameter_list> <block pos:line="228" pos:column="88">{
            <decl_stmt><decl><type><name pos:line="229" pos:column="13">string</name></type> <name pos:line="229" pos:column="20">oldFullPath</name> <init pos:line="229" pos:column="32">= <expr><call><name pos:line="229" pos:column="34">GetFullPath</name><argument_list pos:line="229" pos:column="45">(<argument><expr><name pos:line="229" pos:column="46">oldFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="230" pos:column="13">string</name></type> <name pos:line="230" pos:column="20">newFullPath</name> <init pos:line="230" pos:column="32">= <expr><call><name pos:line="230" pos:column="34">GetFullPath</name><argument_list pos:line="230" pos:column="45">(<argument><expr><name pos:line="230" pos:column="46">newFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="232" pos:column="13">DateTime</name></type> <name pos:line="232" pos:column="22">result</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="233" pos:column="13">lastModifiedMap</name><op:operator pos:line="233" pos:column="28">.</op:operator><name pos:line="233" pos:column="29">TryRemove</name></name><argument_list pos:line="233" pos:column="38">(<argument><expr><name pos:line="233" pos:column="39">oldFullPath</name></expr></argument>, <argument><expr pos:line="233" pos:column="52">out <name pos:line="233" pos:column="56">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="234" pos:column="13">lastModifiedMap</name><index pos:line="234" pos:column="28">[<expr><name pos:line="234" pos:column="29">newFullPath</name></expr>]</index></name> <op:operator pos:line="234" pos:column="42">=</op:operator> <call><name><name pos:line="234" pos:column="44">File</name><op:operator pos:line="234" pos:column="48">.</op:operator><name pos:line="234" pos:column="49">GetLastWriteTime</name></name><argument_list pos:line="234" pos:column="65">(<argument><expr><name pos:line="234" pos:column="66">newFullPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="235" pos:column="13">_changed</name> <op:operator pos:line="235" pos:column="22">=</op:operator> <lit:literal type="boolean" pos:line="235" pos:column="24">true</lit:literal></expr>;</expr_stmt>
            <return pos:line="236" pos:column="13">return <expr><lit:literal type="boolean" pos:line="236" pos:column="20">true</lit:literal></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="239" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="240" pos:column="9">/// Gets the full path for a file name (returns the file name if</comment>
        <comment type="line" pos:line="241" pos:column="9">/// &lt;see cref="Path.IsPathRooted(string)"/&gt; is true.</comment>
        <comment type="line" pos:line="242" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="243" pos:column="9">/// &lt;param name="fileName"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="244" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="245" pos:column="9">private</specifier> <name pos:line="245" pos:column="17">string</name></type> <name pos:line="245" pos:column="24">GetFullPath</name><parameter_list pos:line="245" pos:column="35">(<param><decl><type><name pos:line="245" pos:column="36">string</name></type> <name pos:line="245" pos:column="43">fileName</name></decl></param>)</parameter_list> <block pos:line="245" pos:column="53">{
            <return pos:line="246" pos:column="13">return <expr><op:operator pos:line="246" pos:column="20">(</op:operator><call><name><name pos:line="246" pos:column="21">Path</name><op:operator pos:line="246" pos:column="25">.</op:operator><name pos:line="246" pos:column="26">IsPathRooted</name></name><argument_list pos:line="246" pos:column="38">(<argument><expr><name pos:line="246" pos:column="39">fileName</name></expr></argument>)</argument_list></call> <op:operator pos:line="246" pos:column="49">?</op:operator> <name pos:line="246" pos:column="51">fileName</name> <op:operator pos:line="246" pos:column="60">:</op:operator> <call><name><name pos:line="246" pos:column="62">Path</name><op:operator pos:line="246" pos:column="66">.</op:operator><name pos:line="246" pos:column="67">GetFullPath</name></name><argument_list pos:line="246" pos:column="78">(<argument><expr><name pos:line="246" pos:column="79">fileName</name></expr></argument>)</argument_list></call><op:operator pos:line="246" pos:column="88">)</op:operator></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
