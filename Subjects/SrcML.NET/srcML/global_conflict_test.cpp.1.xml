<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="D:\Research\Subjects\SrcML.NET\TestInputs\global_conflict_test.cpp" pos:tabs="8"><cpp:include pos:line="1" pos:column="1">#<cpp:directive pos:line="1" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="1" pos:column="10">"global_conflict_test.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="2" pos:column="1">#<cpp:directive pos:line="2" pos:column="2">include</cpp:directive> <cpp:file pos:line="2" pos:column="10">&lt;iostream&gt;</cpp:file></cpp:include>

<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">std</name><op:operator pos:line="4" pos:column="10">::</op:operator><name pos:line="4" pos:column="12">cout</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">std</name><op:operator pos:line="5" pos:column="10">::</op:operator><name pos:line="5" pos:column="12">endl</name></name>;</using>

<decl_stmt><decl><type><name pos:line="7" pos:column="1">int</name></type> <name pos:line="7" pos:column="5">X</name> <init pos:line="7" pos:column="7">= <expr><lit:literal type="number" pos:line="7" pos:column="9">10</lit:literal></expr></init></decl>;</decl_stmt>
<function><type><name pos:line="8" pos:column="1">int</name></type> <name pos:line="8" pos:column="5">main</name><parameter_list pos:line="8" pos:column="9">()</parameter_list> <block pos:line="8" pos:column="12">{
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">A</name></type> <name pos:line="9" pos:column="5">a</name></decl>;</decl_stmt>
  <expr_stmt><expr><name pos:line="10" pos:column="3">cout</name> <op:operator pos:line="10" pos:column="8">&lt;&lt;</op:operator> <lit:literal type="string" pos:line="10" pos:column="11">"X is "</lit:literal> <op:operator pos:line="10" pos:column="19">&lt;&lt;</op:operator> <call><name><name pos:line="10" pos:column="22">a</name><op:operator pos:line="10" pos:column="23">.</op:operator><name pos:line="10" pos:column="24">GetX</name></name><argument_list pos:line="10" pos:column="28">()</argument_list></call> <op:operator pos:line="10" pos:column="31">&lt;&lt;</op:operator> <name pos:line="10" pos:column="34">endl</name></expr>;</expr_stmt>
  <expr_stmt><expr><name pos:line="11" pos:column="3">cout</name> <op:operator pos:line="11" pos:column="8">&lt;&lt;</op:operator> <lit:literal type="string" pos:line="11" pos:column="11">"global X is "</lit:literal> <op:operator pos:line="11" pos:column="26">&lt;&lt;</op:operator> <name pos:line="11" pos:column="29">X</name> <op:operator pos:line="11" pos:column="31">&lt;&lt;</op:operator> <name pos:line="11" pos:column="34">endl</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="14" pos:column="1">int</name></type> <name><name pos:line="14" pos:column="5">A</name><op:operator pos:line="14" pos:column="6">::</op:operator><name pos:line="14" pos:column="8">GetX</name></name><parameter_list pos:line="14" pos:column="12">()</parameter_list> <block pos:line="14" pos:column="15">{
  <return pos:line="15" pos:column="3">return <expr><name pos:line="15" pos:column="10">X</name></expr>;</return>
}</block></function>
</unit>
