<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Test\Src2SrcMLRunnerTests.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2010 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">System</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">IO</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Text</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Collections</name><op:operator pos:line="15" pos:column="25">.</op:operator><name pos:line="15" pos:column="26">Generic</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Linq</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">NUnit</name><op:operator pos:line="17" pos:column="12">.</op:operator><name pos:line="17" pos:column="13">Framework</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">ABB</name><op:operator pos:line="18" pos:column="10">.</op:operator><name pos:line="18" pos:column="11">SrcML</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">System</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">Xml</name><op:operator pos:line="19" pos:column="17">.</op:operator><name pos:line="19" pos:column="18">Linq</name></name>;</using>

<namespace pos:line="21" pos:column="1">namespace <name><name pos:line="21" pos:column="11">ABB</name><op:operator pos:line="21" pos:column="14">.</op:operator><name pos:line="21" pos:column="15">SrcML</name><op:operator pos:line="21" pos:column="20">.</op:operator><name pos:line="21" pos:column="21">Test</name></name>
<block pos:line="22" pos:column="1">{
    <class><attribute pos:line="23" pos:column="5">[<expr><name pos:line="23" pos:column="6">TestFixture</name></expr>]</attribute>
    <attribute pos:line="24" pos:column="5">[<expr><call><name pos:line="24" pos:column="6">Category</name><argument_list pos:line="24" pos:column="14">(<argument><expr><lit:literal type="string" pos:line="24" pos:column="15">"Build"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="25" pos:column="5">public</specifier> class <name pos:line="25" pos:column="18">Src2SrcMLRunnerTests</name>
    <block pos:line="26" pos:column="5">{
        <function><type><attribute pos:line="27" pos:column="9">[<expr><name pos:line="27" pos:column="10">TestFixtureSetUp</name></expr>]</attribute>
        <specifier pos:line="28" pos:column="9">public</specifier> <specifier pos:line="28" pos:column="16">static</specifier> <name pos:line="28" pos:column="23">void</name></type> <name pos:line="28" pos:column="28">SrcMLTestInitialize</name><parameter_list pos:line="28" pos:column="47">()</parameter_list>
        <block pos:line="29" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="30" pos:column="13">Directory</name><op:operator pos:line="30" pos:column="22">.</op:operator><name pos:line="30" pos:column="23">CreateDirectory</name></name><argument_list pos:line="30" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="30" pos:column="39">"srcmltest"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="31" pos:column="13">Directory</name><op:operator pos:line="31" pos:column="22">.</op:operator><name pos:line="31" pos:column="23">CreateDirectory</name></name><argument_list pos:line="31" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="31" pos:column="39">"srcml_xml"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="32" pos:column="13">File</name><op:operator pos:line="32" pos:column="17">.</op:operator><name pos:line="32" pos:column="18">WriteAllText</name></name><argument_list pos:line="32" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="32" pos:column="31">"srcmltest\\foo.c"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="32" pos:column="51">String</name><op:operator pos:line="32" pos:column="57">.</op:operator><name pos:line="32" pos:column="58">Format</name></name><argument_list pos:line="32" pos:column="64">(<argument><expr><lit:literal type="string" pos:line="32" pos:column="65">@"int foo() {{{0}printf(""hello world!"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="115">Environment</name><op:operator pos:line="32" pos:column="126">.</op:operator><name pos:line="32" pos:column="127">NewLine</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="34" pos:column="13">File</name><op:operator pos:line="34" pos:column="17">.</op:operator><name pos:line="34" pos:column="18">WriteAllText</name></name><argument_list pos:line="34" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="34" pos:column="31">"srcmltest\\bar.c"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="34" pos:column="51">String</name><op:operator pos:line="34" pos:column="57">.</op:operator><name pos:line="34" pos:column="58">Format</name></name><argument_list pos:line="34" pos:column="64">(<argument><expr><lit:literal type="string" pos:line="34" pos:column="65">@"int bar() {{{0}    printf(""goodbye, world!"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="122">Environment</name><op:operator pos:line="34" pos:column="133">.</op:operator><name pos:line="34" pos:column="134">NewLine</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="36" pos:column="13">File</name><op:operator pos:line="36" pos:column="17">.</op:operator><name pos:line="36" pos:column="18">WriteAllText</name></name><argument_list pos:line="36" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="36" pos:column="31">"srcmltest\\CSHARP.cs"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="36" pos:column="55">@"using System.Collections.Generic;
using System.Linq;
using System.Xml;
using System.Xml.Linq;
using System.Xml.XPath;
using ABB.SrcML;

namespace LoggingTransformation
{
    public class FunctionEntryLogTransform : ITransform
    {
        public IEnumerable&lt;XElement&gt; Query(XElement element)
        {
            var functions = from method in element.Descendants(SRC.method)
                                select method;
            return functions;
        }

        public XElement Transform(XElement element)
        {
            var first = element.Element(SRC.Block).Elements().First();
            var functionName = element.Element(SRC.Name).Value;
            first.AddBeforeSelf(new XElement(SRC.ExpressionStatement, string.Format(""LOG_FUNCTION_ENTRY(\""{0}\"");\n\t"", functionName)));

            return element;
        }
    }
}
"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="65" pos:column="13">File</name><op:operator pos:line="65" pos:column="17">.</op:operator><name pos:line="65" pos:column="18">WriteAllText</name></name><argument_list pos:line="65" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="65" pos:column="31">"srcmltest\\File with spaces.cpp"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="65" pos:column="66">String</name><op:operator pos:line="65" pos:column="72">.</op:operator><name pos:line="65" pos:column="73">Format</name></name><argument_list pos:line="65" pos:column="79">(<argument><expr><lit:literal type="string" pos:line="65" pos:column="80">@"int foo() {{{0}    printf(""hello world!"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="65" pos:column="134">Environment</name><op:operator pos:line="65" pos:column="145">.</op:operator><name pos:line="65" pos:column="146">NewLine</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="68" pos:column="9">[<expr><name pos:line="68" pos:column="10">TestFixtureTearDown</name></expr>]</attribute>
        <specifier pos:line="69" pos:column="9">public</specifier> <specifier pos:line="69" pos:column="16">static</specifier> <name pos:line="69" pos:column="23">void</name></type> <name pos:line="69" pos:column="28">SrcMLTestCleanup</name><parameter_list pos:line="69" pos:column="44">()</parameter_list>
        <block pos:line="70" pos:column="9">{
            <comment type="block" pos:line="71" pos:column="13">/*
            foreach (var file in Directory.GetFiles("srcmltest"))
            {
                File.Delete(file);
            }
            foreach (var file in Directory.GetFiles("srcml_xml"))
            {
                File.Delete(file);
            }
            Directory.Delete("srcmltest");
            Directory.Delete("srcml_xml");
            */</comment>
        }</block></function>

        <function><type><attribute pos:line="85" pos:column="9">[<expr><name pos:line="85" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="86" pos:column="9">public</specifier> <name pos:line="86" pos:column="16">void</name></type> <name pos:line="86" pos:column="21">DifferentLanguageTest</name><parameter_list pos:line="86" pos:column="42">()</parameter_list>
        <block pos:line="87" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="88" pos:column="13">var</name></type> <name pos:line="88" pos:column="17">srcmlObject</name> <init pos:line="88" pos:column="29">= <expr><op:operator pos:line="88" pos:column="31">new</op:operator> <call><name pos:line="88" pos:column="35">Src2SrcMLRunner</name><argument_list pos:line="88" pos:column="50">(<argument><expr><call><name><name pos:line="88" pos:column="51">Path</name><op:operator pos:line="88" pos:column="55">.</op:operator><name pos:line="88" pos:column="56">Combine</name></name><argument_list pos:line="88" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="88" pos:column="64">"."</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="88" pos:column="69">"SrcML"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <decl_stmt><decl><type><name pos:line="90" pos:column="13">var</name></type> <name pos:line="90" pos:column="17">doc</name> <init pos:line="90" pos:column="21">= <expr><call><name><name pos:line="90" pos:column="23">srcmlObject</name><op:operator pos:line="90" pos:column="34">.</op:operator><name pos:line="90" pos:column="35">GenerateSrcMLFromFile</name></name><argument_list pos:line="90" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="90" pos:column="57">"srcmltest\\CSHARP.cs"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="90" pos:column="81">"srcml_xml\\differentlanguage_java.xml"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="90" pos:column="122">Language</name><op:operator pos:line="90" pos:column="130">.</op:operator><name pos:line="90" pos:column="131">Java</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="92" pos:column="13">Assert</name><op:operator pos:line="92" pos:column="19">.</op:operator><name pos:line="92" pos:column="20">IsNotNull</name></name><argument_list pos:line="92" pos:column="29">(<argument><expr><name pos:line="92" pos:column="30">doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="95" pos:column="9">[<expr><name pos:line="95" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="96" pos:column="9">public</specifier> <name pos:line="96" pos:column="16">void</name></type> <name pos:line="96" pos:column="21">SrcMLFromStringTest</name><parameter_list pos:line="96" pos:column="40">()</parameter_list>
        <block pos:line="97" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="98" pos:column="13">string</name></type> <name pos:line="98" pos:column="20">sourceCode</name> <init pos:line="98" pos:column="31">= <expr><lit:literal type="string" pos:line="98" pos:column="33">@"int foo() {
printf(""hello world!"");
}"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="101" pos:column="13">var</name></type> <name pos:line="101" pos:column="17">srcmlObject</name> <init pos:line="101" pos:column="29">= <expr><op:operator pos:line="101" pos:column="31">new</op:operator> <call><name pos:line="101" pos:column="35">Src2SrcMLRunner</name><argument_list pos:line="101" pos:column="50">(<argument><expr><call><name><name pos:line="101" pos:column="51">Path</name><op:operator pos:line="101" pos:column="55">.</op:operator><name pos:line="101" pos:column="56">Combine</name></name><argument_list pos:line="101" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="101" pos:column="64">"."</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="101" pos:column="69">"SrcML"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="102" pos:column="13">string</name></type> <name pos:line="102" pos:column="20">xml</name> <init pos:line="102" pos:column="24">= <expr><call><name><name pos:line="102" pos:column="26">srcmlObject</name><op:operator pos:line="102" pos:column="37">.</op:operator><name pos:line="102" pos:column="38">GenerateSrcMLFromString</name></name><argument_list pos:line="102" pos:column="61">(<argument><expr><name pos:line="102" pos:column="62">sourceCode</name></expr></argument>, <argument><expr><name><name pos:line="102" pos:column="74">Language</name><op:operator pos:line="102" pos:column="82">.</op:operator><name pos:line="102" pos:column="83">C</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="104" pos:column="13">XElement</name></type> <name pos:line="104" pos:column="22">element</name> <init pos:line="104" pos:column="30">= <expr><call><name><name pos:line="104" pos:column="32">XElement</name><op:operator pos:line="104" pos:column="40">.</op:operator><name pos:line="104" pos:column="41">Parse</name></name><argument_list pos:line="104" pos:column="46">(<argument><expr><name pos:line="104" pos:column="47">xml</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="106" pos:column="13">Assert</name><op:operator pos:line="106" pos:column="19">.</op:operator><name pos:line="106" pos:column="20">IsNotNull</name></name><argument_list pos:line="106" pos:column="29">(<argument><expr><name pos:line="106" pos:column="30">element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="109" pos:column="9">[<expr><name pos:line="109" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="110" pos:column="9">public</specifier> <name pos:line="110" pos:column="16">void</name></type> <name pos:line="110" pos:column="21">InvalidLanguageTest</name><parameter_list pos:line="110" pos:column="40">()</parameter_list>
        <block pos:line="111" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="112" pos:column="13">var</name></type> <name pos:line="112" pos:column="17">srcmlObject</name> <init pos:line="112" pos:column="29">= <expr><op:operator pos:line="112" pos:column="31">new</op:operator> <call><name pos:line="112" pos:column="35">Src2SrcMLRunner</name><argument_list pos:line="112" pos:column="50">(<argument><expr><call><name><name pos:line="112" pos:column="51">Path</name><op:operator pos:line="112" pos:column="55">.</op:operator><name pos:line="112" pos:column="56">Combine</name></name><argument_list pos:line="112" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="112" pos:column="64">"."</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="112" pos:column="69">"SrcML"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="114" pos:column="13">var</name></type> <name pos:line="114" pos:column="17">doc</name> <init pos:line="114" pos:column="21">= <expr><call><name><name pos:line="114" pos:column="23">srcmlObject</name><op:operator pos:line="114" pos:column="34">.</op:operator><name pos:line="114" pos:column="35">GenerateSrcMLFromFile</name></name><argument_list pos:line="114" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="114" pos:column="57">"srcmltest\\foo.c"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="114" pos:column="77">"srcml_xml\\invalidlanguage_java.xml"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="114" pos:column="116">Language</name><op:operator pos:line="114" pos:column="124">.</op:operator><name pos:line="114" pos:column="125">Java</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="115" pos:column="13">Assert</name><op:operator pos:line="115" pos:column="19">.</op:operator><name pos:line="115" pos:column="20">IsNotNull</name></name><argument_list pos:line="115" pos:column="29">(<argument><expr><name pos:line="115" pos:column="30">doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <expr_stmt><expr><name pos:line="117" pos:column="13">doc</name> <op:operator pos:line="117" pos:column="17">=</op:operator> <name pos:line="117" pos:column="19">null</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="118" pos:column="13">doc</name> <op:operator pos:line="118" pos:column="17">=</op:operator> <call><name><name pos:line="118" pos:column="19">srcmlObject</name><op:operator pos:line="118" pos:column="30">.</op:operator><name pos:line="118" pos:column="31">GenerateSrcMLFromFile</name></name><argument_list pos:line="118" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="118" pos:column="53">"srcmltest\\foo.c"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="118" pos:column="73">"srcml_xml\\invalidlanguage_cpp.xml"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="118" pos:column="111">Language</name><op:operator pos:line="118" pos:column="119">.</op:operator><name pos:line="118" pos:column="120">CPlusPlus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="119" pos:column="13">Assert</name><op:operator pos:line="119" pos:column="19">.</op:operator><name pos:line="119" pos:column="20">IsNotNull</name></name><argument_list pos:line="119" pos:column="29">(<argument><expr><name pos:line="119" pos:column="30">doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="121" pos:column="13">doc</name> <op:operator pos:line="121" pos:column="17">=</op:operator> <name pos:line="121" pos:column="19">null</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="122" pos:column="13">doc</name> <op:operator pos:line="122" pos:column="17">=</op:operator> <call><name><name pos:line="122" pos:column="19">srcmlObject</name><op:operator pos:line="122" pos:column="30">.</op:operator><name pos:line="122" pos:column="31">GenerateSrcMLFromFile</name></name><argument_list pos:line="122" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="122" pos:column="53">"srcmltest\\foo.c"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="122" pos:column="73">"srcml_xml\\invalidlanguage_c.xml"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="122" pos:column="109">Language</name><op:operator pos:line="122" pos:column="117">.</op:operator><name pos:line="122" pos:column="118">C</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="124" pos:column="13">Assert</name><op:operator pos:line="124" pos:column="19">.</op:operator><name pos:line="124" pos:column="20">IsNotNull</name></name><argument_list pos:line="124" pos:column="29">(<argument><expr><name pos:line="124" pos:column="30">doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="127" pos:column="9">[<expr><name pos:line="127" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="128" pos:column="9">public</specifier> <name pos:line="128" pos:column="16">void</name></type> <name pos:line="128" pos:column="21">SingleFileTest</name><parameter_list pos:line="128" pos:column="35">()</parameter_list>
        <block pos:line="129" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="130" pos:column="13">var</name></type> <name pos:line="130" pos:column="17">srcmlObject</name> <init pos:line="130" pos:column="29">= <expr><op:operator pos:line="130" pos:column="31">new</op:operator> <call><name pos:line="130" pos:column="35">Src2SrcMLRunner</name><argument_list pos:line="130" pos:column="50">(<argument><expr><call><name><name pos:line="130" pos:column="51">Path</name><op:operator pos:line="130" pos:column="55">.</op:operator><name pos:line="130" pos:column="56">Combine</name></name><argument_list pos:line="130" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="130" pos:column="64">"."</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="130" pos:column="69">"SrcML"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="132" pos:column="13">var</name></type> <name pos:line="132" pos:column="17">doc</name> <init pos:line="132" pos:column="21">= <expr><call><name><name pos:line="132" pos:column="23">srcmlObject</name><op:operator pos:line="132" pos:column="34">.</op:operator><name pos:line="132" pos:column="35">GenerateSrcMLFromFile</name></name><argument_list pos:line="132" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="132" pos:column="57">"srcmltest\\foo.c"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="132" pos:column="77">"srcml_xml\\singlefile.xml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <expr_stmt><expr><call><name><name pos:line="134" pos:column="13">Assert</name><op:operator pos:line="134" pos:column="19">.</op:operator><name pos:line="134" pos:column="20">IsNotNull</name></name><argument_list pos:line="134" pos:column="29">(<argument><expr><name pos:line="134" pos:column="30">doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="135" pos:column="13">Assert</name><op:operator pos:line="135" pos:column="19">.</op:operator><name pos:line="135" pos:column="20">AreEqual</name></name><argument_list pos:line="135" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="135" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="135" pos:column="32">doc</name><op:operator pos:line="135" pos:column="35">.</op:operator><name pos:line="135" pos:column="36">FileUnits</name><op:operator pos:line="135" pos:column="45">.</op:operator><name pos:line="135" pos:column="46">Count</name></name><argument_list pos:line="135" pos:column="51">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="136" pos:column="13">Assert</name><op:operator pos:line="136" pos:column="19">.</op:operator><name pos:line="136" pos:column="20">AreEqual</name></name><argument_list pos:line="136" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="136" pos:column="29">"srcmltest\\foo.c"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="136" pos:column="49">doc</name><op:operator pos:line="136" pos:column="52">.</op:operator><name pos:line="136" pos:column="53">FileUnits</name><op:operator pos:line="136" pos:column="62">.</op:operator><name pos:line="136" pos:column="63">First</name></name><argument_list pos:line="136" pos:column="68">()</argument_list></call><op:operator pos:line="136" pos:column="70">.</op:operator><call><name pos:line="136" pos:column="71">Attribute</name><argument_list pos:line="136" pos:column="80">(<argument><expr><lit:literal type="string" pos:line="136" pos:column="81">"filename"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="136" pos:column="92">.</op:operator><name pos:line="136" pos:column="93">Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="139" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="140" pos:column="9">/// Added by JZ on 12/3/2012.</comment>
        <comment type="line" pos:line="141" pos:column="9">/// Unit test for Src2SrcMLRunner.GenerateSrcMLAndStringFromFile()</comment>
        <comment type="line" pos:line="142" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><attribute pos:line="143" pos:column="9">[<expr><name pos:line="143" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="144" pos:column="9">public</specifier> <name pos:line="144" pos:column="16">void</name></type> <name pos:line="144" pos:column="21">SingleFileToFileAndStringTest</name><parameter_list pos:line="144" pos:column="50">()</parameter_list>
        <block pos:line="145" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="146" pos:column="13">var</name></type> <name pos:line="146" pos:column="17">srcmlObject</name> <init pos:line="146" pos:column="29">= <expr><op:operator pos:line="146" pos:column="31">new</op:operator> <call><name pos:line="146" pos:column="35">Src2SrcMLRunner</name><argument_list pos:line="146" pos:column="50">(<argument><expr><name><name pos:line="146" pos:column="51">TestConstants</name><op:operator pos:line="146" pos:column="64">.</op:operator><name pos:line="146" pos:column="65">SrcmlPath</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="148" pos:column="13">string</name></type> <name pos:line="148" pos:column="20">xml</name> <init pos:line="148" pos:column="24">= <expr><call><name><name pos:line="148" pos:column="26">srcmlObject</name><op:operator pos:line="148" pos:column="37">.</op:operator><name pos:line="148" pos:column="38">GenerateSrcMLAndStringFromFile</name></name><argument_list pos:line="148" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="148" pos:column="69">"srcmltest\\foo.c"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="148" pos:column="89">"srcml_xml\\singlefile.xml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="149" pos:column="13">Console</name><op:operator pos:line="149" pos:column="20">.</op:operator><name pos:line="149" pos:column="21">WriteLine</name></name><argument_list pos:line="149" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="149" pos:column="31">"xml = "</lit:literal> <op:operator pos:line="149" pos:column="40">+</op:operator> <name pos:line="149" pos:column="42">xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="151" pos:column="13">Assert</name><op:operator pos:line="151" pos:column="19">.</op:operator><name pos:line="151" pos:column="20">IsNotNull</name></name><argument_list pos:line="151" pos:column="29">(<argument><expr><name pos:line="151" pos:column="30">xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="152" pos:column="13">//Assert.AreEqual(1, doc.FileUnits.Count());</comment>
            <comment type="line" pos:line="153" pos:column="13">//Assert.AreEqual("srcmltest\\foo.c", doc.FileUnits.First().Attribute("filename").Value);</comment>
            <expr_stmt><expr><call><name><name pos:line="154" pos:column="13">Assert</name><op:operator pos:line="154" pos:column="19">.</op:operator><name pos:line="154" pos:column="20">That</name></name><argument_list pos:line="154" pos:column="24">(<argument><expr><call><name><name pos:line="154" pos:column="25">File</name><op:operator pos:line="154" pos:column="29">.</op:operator><name pos:line="154" pos:column="30">Exists</name></name><argument_list pos:line="154" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="154" pos:column="37">"srcml_xml\\singlefile.xml"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="157" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="158" pos:column="9">/// Added by JZ on 12/4/2012.</comment>
        <comment type="line" pos:line="159" pos:column="9">/// Unit test for Src2SrcMLRunner.GenerateSrcMLAndXElementFromFile()</comment>
        <comment type="line" pos:line="160" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><attribute pos:line="161" pos:column="9">[<expr><name pos:line="161" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="162" pos:column="9">public</specifier> <name pos:line="162" pos:column="16">void</name></type> <name pos:line="162" pos:column="21">SingleFileToFileAndXElementTest</name><parameter_list pos:line="162" pos:column="52">()</parameter_list>
        <block pos:line="163" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="164" pos:column="13">var</name></type> <name pos:line="164" pos:column="17">srcmlObject</name> <init pos:line="164" pos:column="29">= <expr><op:operator pos:line="164" pos:column="31">new</op:operator> <call><name pos:line="164" pos:column="35">Src2SrcMLRunner</name><argument_list pos:line="164" pos:column="50">(<argument><expr><name><name pos:line="164" pos:column="51">TestConstants</name><op:operator pos:line="164" pos:column="64">.</op:operator><name pos:line="164" pos:column="65">SrcmlPath</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="166" pos:column="13">XElement</name></type> <name pos:line="166" pos:column="22">xElement</name> <init pos:line="166" pos:column="31">= <expr><call><name><name pos:line="166" pos:column="33">srcmlObject</name><op:operator pos:line="166" pos:column="44">.</op:operator><name pos:line="166" pos:column="45">GenerateSrcMLAndXElementFromFile</name></name><argument_list pos:line="166" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="166" pos:column="78">"srcmltest\\foo.c"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="166" pos:column="98">"srcml_xml\\singlefile.xml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="168" pos:column="13">Assert</name><op:operator pos:line="168" pos:column="19">.</op:operator><name pos:line="168" pos:column="20">IsNotNull</name></name><argument_list pos:line="168" pos:column="29">(<argument><expr><name pos:line="168" pos:column="30">xElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="169" pos:column="13">//Assert.AreEqual(1, doc.FileUnits.Count());</comment>
            <comment type="line" pos:line="170" pos:column="13">//Assert.AreEqual("srcmltest\\foo.c", doc.FileUnits.First().Attribute("filename").Value);</comment>
            <expr_stmt><expr><call><name><name pos:line="171" pos:column="13">Assert</name><op:operator pos:line="171" pos:column="19">.</op:operator><name pos:line="171" pos:column="20">That</name></name><argument_list pos:line="171" pos:column="24">(<argument><expr><call><name><name pos:line="171" pos:column="25">File</name><op:operator pos:line="171" pos:column="29">.</op:operator><name pos:line="171" pos:column="30">Exists</name></name><argument_list pos:line="171" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="171" pos:column="37">"srcml_xml\\singlefile.xml"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="174" pos:column="9">[<expr><name pos:line="174" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="175" pos:column="9">public</specifier> <name pos:line="175" pos:column="16">void</name></type> <name pos:line="175" pos:column="21">MultipleFilesTest</name><parameter_list pos:line="175" pos:column="38">()</parameter_list>
        <block pos:line="176" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="177" pos:column="13">var</name></type> <name pos:line="177" pos:column="17">srcmlObject</name> <init pos:line="177" pos:column="29">= <expr><op:operator pos:line="177" pos:column="31">new</op:operator> <call><name pos:line="177" pos:column="35">Src2SrcMLRunner</name><argument_list pos:line="177" pos:column="50">(<argument><expr><call><name><name pos:line="177" pos:column="51">Path</name><op:operator pos:line="177" pos:column="55">.</op:operator><name pos:line="177" pos:column="56">Combine</name></name><argument_list pos:line="177" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="177" pos:column="64">"."</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="177" pos:column="69">"SrcML"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="178" pos:column="13">var</name></type> <name pos:line="178" pos:column="17">doc</name> <init pos:line="178" pos:column="21">= <expr><call><name><name pos:line="178" pos:column="23">srcmlObject</name><op:operator pos:line="178" pos:column="34">.</op:operator><name pos:line="178" pos:column="35">GenerateSrcMLFromFiles</name></name><argument_list pos:line="178" pos:column="57">(<argument><expr><op:operator pos:line="178" pos:column="58">new</op:operator> <name><name pos:line="178" pos:column="62">string</name><index pos:line="178" pos:column="68">[]</index></name> <block pos:line="178" pos:column="71">{<expr><lit:literal type="string" pos:line="178" pos:column="72">"srcmltest\\foo.c"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="178" pos:column="92">"srcmltest\\bar.c"</lit:literal></expr>}</block></expr></argument>, <argument><expr><lit:literal type="string" pos:line="178" pos:column="113">"srcml_xml\\multiplefile.xml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="180" pos:column="13">Assert</name><op:operator pos:line="180" pos:column="19">.</op:operator><name pos:line="180" pos:column="20">IsNotNull</name></name><argument_list pos:line="180" pos:column="29">(<argument><expr><name pos:line="180" pos:column="30">doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="181" pos:column="13">var</name></type> <name pos:line="181" pos:column="17">files</name> <init pos:line="181" pos:column="23">= <expr><call><name><name pos:line="181" pos:column="25">doc</name><op:operator pos:line="181" pos:column="28">.</op:operator><name pos:line="181" pos:column="29">FileUnits</name><op:operator pos:line="181" pos:column="38">.</op:operator><name pos:line="181" pos:column="39">ToList</name></name><argument_list pos:line="181" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="182" pos:column="13">Assert</name><op:operator pos:line="182" pos:column="19">.</op:operator><name pos:line="182" pos:column="20">AreEqual</name></name><argument_list pos:line="182" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="182" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="182" pos:column="32">files</name><op:operator pos:line="182" pos:column="37">.</op:operator><name pos:line="182" pos:column="38">Count</name></name><argument_list pos:line="182" pos:column="43">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="183" pos:column="13">Assert</name><op:operator pos:line="183" pos:column="19">.</op:operator><name pos:line="183" pos:column="20">AreEqual</name></name><argument_list pos:line="183" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="183" pos:column="29">"srcmltest\\foo.c"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="183" pos:column="49">files</name><index pos:line="183" pos:column="54">[<expr><lit:literal type="number" pos:line="183" pos:column="55">0</lit:literal></expr>]</index></name><op:operator pos:line="183" pos:column="57">.</op:operator><call><name pos:line="183" pos:column="58">Attribute</name><argument_list pos:line="183" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="183" pos:column="68">"filename"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="183" pos:column="79">.</op:operator><name pos:line="183" pos:column="80">Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="184" pos:column="13">Assert</name><op:operator pos:line="184" pos:column="19">.</op:operator><name pos:line="184" pos:column="20">AreEqual</name></name><argument_list pos:line="184" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="184" pos:column="29">"srcmltest\\bar.c"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="184" pos:column="49">files</name><index pos:line="184" pos:column="54">[<expr><lit:literal type="number" pos:line="184" pos:column="55">1</lit:literal></expr>]</index></name><op:operator pos:line="184" pos:column="57">.</op:operator><call><name pos:line="184" pos:column="58">Attribute</name><argument_list pos:line="184" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="184" pos:column="68">"filename"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="184" pos:column="79">.</op:operator><name pos:line="184" pos:column="80">Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="187" pos:column="9">[<expr><name pos:line="187" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="188" pos:column="9">public</specifier> <name pos:line="188" pos:column="16">void</name></type> <name pos:line="188" pos:column="21">MultipleFilesTest_DifferentDirectories</name><parameter_list pos:line="188" pos:column="59">()</parameter_list>
        <block pos:line="189" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="190" pos:column="13">var</name></type> <name pos:line="190" pos:column="17">srcmlObject</name> <init pos:line="190" pos:column="29">= <expr><op:operator pos:line="190" pos:column="31">new</op:operator> <call><name pos:line="190" pos:column="35">Src2SrcMLRunner</name><argument_list pos:line="190" pos:column="50">(<argument><expr><call><name><name pos:line="190" pos:column="51">Path</name><op:operator pos:line="190" pos:column="55">.</op:operator><name pos:line="190" pos:column="56">Combine</name></name><argument_list pos:line="190" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="190" pos:column="64">"."</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="190" pos:column="69">"SrcML"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="191" pos:column="13">var</name></type> <name pos:line="191" pos:column="17">doc</name> <init pos:line="191" pos:column="21">= <expr><call><name><name pos:line="191" pos:column="23">srcmlObject</name><op:operator pos:line="191" pos:column="34">.</op:operator><name pos:line="191" pos:column="35">GenerateSrcMLFromFiles</name></name><argument_list pos:line="191" pos:column="57">(<argument><expr><op:operator pos:line="191" pos:column="58">new</op:operator> <name><name pos:line="191" pos:column="62">string</name><index pos:line="191" pos:column="68">[]</index></name> <block pos:line="191" pos:column="71">{<expr><lit:literal type="string" pos:line="191" pos:column="72">"srcmltest\\foo.c"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="191" pos:column="92">"srcmltest\\bar.c"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="191" pos:column="112">"..\\..\\TestInputs\\baz.cpp"</lit:literal></expr>}</block></expr></argument>, <argument><expr><lit:literal type="string" pos:line="191" pos:column="144">"srcml_xml\\multiplefile.xml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="193" pos:column="13">Assert</name><op:operator pos:line="193" pos:column="19">.</op:operator><name pos:line="193" pos:column="20">IsNotNull</name></name><argument_list pos:line="193" pos:column="29">(<argument><expr><name pos:line="193" pos:column="30">doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="194" pos:column="13">var</name></type> <name pos:line="194" pos:column="17">files</name> <init pos:line="194" pos:column="23">= <expr><call><name><name pos:line="194" pos:column="25">doc</name><op:operator pos:line="194" pos:column="28">.</op:operator><name pos:line="194" pos:column="29">FileUnits</name><op:operator pos:line="194" pos:column="38">.</op:operator><name pos:line="194" pos:column="39">ToList</name></name><argument_list pos:line="194" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="195" pos:column="13">Assert</name><op:operator pos:line="195" pos:column="19">.</op:operator><name pos:line="195" pos:column="20">AreEqual</name></name><argument_list pos:line="195" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="195" pos:column="29">3</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="195" pos:column="32">files</name><op:operator pos:line="195" pos:column="37">.</op:operator><name pos:line="195" pos:column="38">Count</name></name><argument_list pos:line="195" pos:column="43">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="196" pos:column="13">Assert</name><op:operator pos:line="196" pos:column="19">.</op:operator><name pos:line="196" pos:column="20">AreEqual</name></name><argument_list pos:line="196" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="196" pos:column="29">"srcmltest\\foo.c"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="196" pos:column="49">files</name><index pos:line="196" pos:column="54">[<expr><lit:literal type="number" pos:line="196" pos:column="55">0</lit:literal></expr>]</index></name><op:operator pos:line="196" pos:column="57">.</op:operator><call><name pos:line="196" pos:column="58">Attribute</name><argument_list pos:line="196" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="196" pos:column="68">"filename"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="196" pos:column="79">.</op:operator><name pos:line="196" pos:column="80">Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="197" pos:column="13">Assert</name><op:operator pos:line="197" pos:column="19">.</op:operator><name pos:line="197" pos:column="20">AreEqual</name></name><argument_list pos:line="197" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="197" pos:column="29">"srcmltest\\bar.c"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="197" pos:column="49">files</name><index pos:line="197" pos:column="54">[<expr><lit:literal type="number" pos:line="197" pos:column="55">1</lit:literal></expr>]</index></name><op:operator pos:line="197" pos:column="57">.</op:operator><call><name pos:line="197" pos:column="58">Attribute</name><argument_list pos:line="197" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="197" pos:column="68">"filename"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="197" pos:column="79">.</op:operator><name pos:line="197" pos:column="80">Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="198" pos:column="13">Assert</name><op:operator pos:line="198" pos:column="19">.</op:operator><name pos:line="198" pos:column="20">AreEqual</name></name><argument_list pos:line="198" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="198" pos:column="29">"TestInputs\\baz.cpp"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="198" pos:column="52">files</name><index pos:line="198" pos:column="57">[<expr><lit:literal type="number" pos:line="198" pos:column="58">2</lit:literal></expr>]</index></name><op:operator pos:line="198" pos:column="60">.</op:operator><call><name pos:line="198" pos:column="61">Attribute</name><argument_list pos:line="198" pos:column="70">(<argument><expr><lit:literal type="string" pos:line="198" pos:column="71">"filename"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="198" pos:column="82">.</op:operator><name pos:line="198" pos:column="83">Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="201" pos:column="9">[<expr><name pos:line="201" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="202" pos:column="9">public</specifier> <name pos:line="202" pos:column="16">void</name></type> <name pos:line="202" pos:column="21">MultipleFilesTest_Language</name><parameter_list pos:line="202" pos:column="47">()</parameter_list> <block pos:line="202" pos:column="50">{
            <decl_stmt><decl><type><name pos:line="203" pos:column="13">var</name></type> <name pos:line="203" pos:column="17">srcmlObject</name> <init pos:line="203" pos:column="29">= <expr><op:operator pos:line="203" pos:column="31">new</op:operator> <call><name pos:line="203" pos:column="35">Src2SrcMLRunner</name><argument_list pos:line="203" pos:column="50">(<argument><expr><call><name><name pos:line="203" pos:column="51">Path</name><op:operator pos:line="203" pos:column="55">.</op:operator><name pos:line="203" pos:column="56">Combine</name></name><argument_list pos:line="203" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="203" pos:column="64">"."</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="203" pos:column="69">"SrcML"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="204" pos:column="13">var</name></type> <name pos:line="204" pos:column="17">doc</name> <init pos:line="204" pos:column="21">= <expr><call><name><name pos:line="204" pos:column="23">srcmlObject</name><op:operator pos:line="204" pos:column="34">.</op:operator><name pos:line="204" pos:column="35">GenerateSrcMLFromFiles</name></name><argument_list pos:line="204" pos:column="57">(<argument><expr><op:operator pos:line="204" pos:column="58">new</op:operator> <name><name pos:line="204" pos:column="62">string</name><index pos:line="204" pos:column="68">[]</index></name> <block pos:line="204" pos:column="71">{ <expr><lit:literal type="string" pos:line="204" pos:column="73">"srcmltest\\foo.c"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="204" pos:column="93">"srcmltest\\bar.c"</lit:literal></expr> }</block></expr></argument>, <argument><expr><lit:literal type="string" pos:line="204" pos:column="115">"srcml_xml\\multiplefile.xml"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="204" pos:column="146">Language</name><op:operator pos:line="204" pos:column="154">.</op:operator><name pos:line="204" pos:column="155">CPlusPlus</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="206" pos:column="13">Assert</name><op:operator pos:line="206" pos:column="19">.</op:operator><name pos:line="206" pos:column="20">IsNotNull</name></name><argument_list pos:line="206" pos:column="29">(<argument><expr><name pos:line="206" pos:column="30">doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="207" pos:column="13">var</name></type> <name pos:line="207" pos:column="17">files</name> <init pos:line="207" pos:column="23">= <expr><call><name><name pos:line="207" pos:column="25">doc</name><op:operator pos:line="207" pos:column="28">.</op:operator><name pos:line="207" pos:column="29">FileUnits</name><op:operator pos:line="207" pos:column="38">.</op:operator><name pos:line="207" pos:column="39">ToList</name></name><argument_list pos:line="207" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="208" pos:column="13">Assert</name><op:operator pos:line="208" pos:column="19">.</op:operator><name pos:line="208" pos:column="20">AreEqual</name></name><argument_list pos:line="208" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="208" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="208" pos:column="32">files</name><op:operator pos:line="208" pos:column="37">.</op:operator><name pos:line="208" pos:column="38">Count</name></name><argument_list pos:line="208" pos:column="43">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="209" pos:column="13">Assert</name><op:operator pos:line="209" pos:column="19">.</op:operator><name pos:line="209" pos:column="20">AreEqual</name></name><argument_list pos:line="209" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="209" pos:column="29">"srcmltest\\foo.c"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="209" pos:column="49">files</name><index pos:line="209" pos:column="54">[<expr><lit:literal type="number" pos:line="209" pos:column="55">0</lit:literal></expr>]</index></name><op:operator pos:line="209" pos:column="57">.</op:operator><call><name pos:line="209" pos:column="58">Attribute</name><argument_list pos:line="209" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="209" pos:column="68">"filename"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="209" pos:column="79">.</op:operator><name pos:line="209" pos:column="80">Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="210" pos:column="13">Assert</name><op:operator pos:line="210" pos:column="19">.</op:operator><name pos:line="210" pos:column="20">AreEqual</name></name><argument_list pos:line="210" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="210" pos:column="29">"C++"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="210" pos:column="36">files</name><index pos:line="210" pos:column="41">[<expr><lit:literal type="number" pos:line="210" pos:column="42">0</lit:literal></expr>]</index></name><op:operator pos:line="210" pos:column="44">.</op:operator><call><name pos:line="210" pos:column="45">Attribute</name><argument_list pos:line="210" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="210" pos:column="55">"language"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="210" pos:column="66">.</op:operator><name pos:line="210" pos:column="67">Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="211" pos:column="13">Assert</name><op:operator pos:line="211" pos:column="19">.</op:operator><name pos:line="211" pos:column="20">AreEqual</name></name><argument_list pos:line="211" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="211" pos:column="29">"srcmltest\\bar.c"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="211" pos:column="49">files</name><index pos:line="211" pos:column="54">[<expr><lit:literal type="number" pos:line="211" pos:column="55">1</lit:literal></expr>]</index></name><op:operator pos:line="211" pos:column="57">.</op:operator><call><name pos:line="211" pos:column="58">Attribute</name><argument_list pos:line="211" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="211" pos:column="68">"filename"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="211" pos:column="79">.</op:operator><name pos:line="211" pos:column="80">Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="212" pos:column="13">Assert</name><op:operator pos:line="212" pos:column="19">.</op:operator><name pos:line="212" pos:column="20">AreEqual</name></name><argument_list pos:line="212" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="212" pos:column="29">"C++"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="212" pos:column="36">files</name><index pos:line="212" pos:column="41">[<expr><lit:literal type="number" pos:line="212" pos:column="42">1</lit:literal></expr>]</index></name><op:operator pos:line="212" pos:column="44">.</op:operator><call><name pos:line="212" pos:column="45">Attribute</name><argument_list pos:line="212" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="212" pos:column="55">"language"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="212" pos:column="66">.</op:operator><name pos:line="212" pos:column="67">Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="215" pos:column="9">//[Test]</comment>
        <comment type="line" pos:line="216" pos:column="9">// TODO this test depends on my computer. Fix it.</comment>
        <comment type="line" pos:line="217" pos:column="9">//public void TestDirectoryParsing()</comment>
        <comment type="line" pos:line="218" pos:column="9">//{</comment>
        <comment type="line" pos:line="219" pos:column="9">//    var srcmlObject = new Src2SrcMLRunner(TestConstants.SrcmlPath);</comment>
        <comment type="line" pos:line="220" pos:column="9">//    var xmlFileName = Path.GetTempFileName();</comment>
        <comment type="line" pos:line="221" pos:column="9">//    var document = srcmlObject.GenerateSrcMLFromDirectory(@"C:\Users\USVIAUG\Documents\Source Code\Notepad++", xmlFileName);</comment>
        <comment type="line" pos:line="222" pos:column="9">//    Assert.AreEqual(283, document.FileUnits.Count());</comment>
        <comment type="line" pos:line="223" pos:column="9">//}</comment>
        <function><type><attribute pos:line="224" pos:column="9">[<expr><name pos:line="224" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="225" pos:column="9">public</specifier> <name pos:line="225" pos:column="16">void</name></type> <name pos:line="225" pos:column="21">ExclusionFilterTest</name><parameter_list pos:line="225" pos:column="40">()</parameter_list>
        <block pos:line="226" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="227" pos:column="13">var</name></type> <name pos:line="227" pos:column="17">exclusionList</name> <init pos:line="227" pos:column="31">= <expr><op:operator pos:line="227" pos:column="33">new</op:operator> <call><name><name pos:line="227" pos:column="37">List</name><argument_list pos:line="227" pos:column="41">&lt;<argument><name pos:line="227" pos:column="42">string</name></argument>&gt;</argument_list></name><argument_list pos:line="227" pos:column="49">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="228" pos:column="13">exclusionList</name><op:operator pos:line="228" pos:column="26">.</op:operator><name pos:line="228" pos:column="27">Add</name></name><argument_list pos:line="228" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="228" pos:column="31">"srcmltest\\bar.c"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="229" pos:column="13">exclusionList</name><op:operator pos:line="229" pos:column="26">.</op:operator><name pos:line="229" pos:column="27">Add</name></name><argument_list pos:line="229" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="229" pos:column="31">"srcmltest\\BadPath™\\badPathTest.c"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="230" pos:column="13">exclusionList</name><op:operator pos:line="230" pos:column="26">.</op:operator><name pos:line="230" pos:column="27">Add</name></name><argument_list pos:line="230" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="230" pos:column="31">"srcmltest\\fooBody.c"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="232" pos:column="13">var</name></type> <name pos:line="232" pos:column="17">srcmlObject</name> <init pos:line="232" pos:column="29">= <expr><op:operator pos:line="232" pos:column="31">new</op:operator> <call><name pos:line="232" pos:column="35">Src2SrcMLRunner</name><argument_list pos:line="232" pos:column="50">(<argument><expr><call><name><name pos:line="232" pos:column="51">Path</name><op:operator pos:line="232" pos:column="55">.</op:operator><name pos:line="232" pos:column="56">Combine</name></name><argument_list pos:line="232" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="232" pos:column="64">"."</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="232" pos:column="69">"SrcML"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="234" pos:column="13">var</name></type> <name pos:line="234" pos:column="17">doc</name> <init pos:line="234" pos:column="21">= <expr><call><name><name pos:line="234" pos:column="23">srcmlObject</name><op:operator pos:line="234" pos:column="34">.</op:operator><name pos:line="234" pos:column="35">GenerateSrcMLFromDirectory</name></name><argument_list pos:line="234" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="234" pos:column="62">"srcmltest"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="234" pos:column="75">"srcml_xml\\exclusionfilter.xml"</lit:literal></expr></argument>, <argument><expr><name pos:line="234" pos:column="109">exclusionList</name></expr></argument>, <argument><expr><name><name pos:line="234" pos:column="124">Language</name><op:operator pos:line="234" pos:column="132">.</op:operator><name pos:line="234" pos:column="133">C</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="236" pos:column="13">var</name></type> <name pos:line="236" pos:column="17">numFileUnits</name> <init pos:line="236" pos:column="30">= <expr><call><name><name pos:line="236" pos:column="32">doc</name><op:operator pos:line="236" pos:column="35">.</op:operator><name pos:line="236" pos:column="36">FileUnits</name><op:operator pos:line="236" pos:column="45">.</op:operator><name pos:line="236" pos:column="46">Count</name></name><argument_list pos:line="236" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="237" pos:column="13">string</name></type> <name pos:line="237" pos:column="20">firstSourceFile</name> <init pos:line="237" pos:column="36">= <expr><name pos:line="237" pos:column="38">null</name></expr></init></decl>;</decl_stmt>
            <if pos:line="238" pos:column="13">if<condition pos:line="238" pos:column="15">(<expr><name pos:line="238" pos:column="16">numFileUnits</name> <op:operator pos:line="238" pos:column="29">&gt;</op:operator> <lit:literal type="number" pos:line="238" pos:column="31">0</lit:literal></expr>)</condition><then pos:line="238" pos:column="33">
            <block pos:line="239" pos:column="13">{
                <expr_stmt><expr><name pos:line="240" pos:column="17">firstSourceFile</name> <op:operator pos:line="240" pos:column="33">=</op:operator> <call><name><name pos:line="240" pos:column="35">doc</name><op:operator pos:line="240" pos:column="38">.</op:operator><name pos:line="240" pos:column="39">FileUnits</name><op:operator pos:line="240" pos:column="48">.</op:operator><name pos:line="240" pos:column="49">First</name></name><argument_list pos:line="240" pos:column="54">()</argument_list></call><op:operator pos:line="240" pos:column="56">.</op:operator><call><name pos:line="240" pos:column="57">Attribute</name><argument_list pos:line="240" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="240" pos:column="67">"filename"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="240" pos:column="78">.</op:operator><name pos:line="240" pos:column="79">Value</name></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name><name pos:line="243" pos:column="13">Assert</name><op:operator pos:line="243" pos:column="19">.</op:operator><name pos:line="243" pos:column="20">AreEqual</name></name><argument_list pos:line="243" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="243" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name pos:line="243" pos:column="32">numFileUnits</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="243" pos:column="46">"test.xml should have only one file in it"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="244" pos:column="13">Assert</name><op:operator pos:line="244" pos:column="19">.</op:operator><name pos:line="244" pos:column="20">AreEqual</name></name><argument_list pos:line="244" pos:column="28">(<argument><expr><call><name><name pos:line="244" pos:column="29">Path</name><op:operator pos:line="244" pos:column="33">.</op:operator><name pos:line="244" pos:column="34">GetFullPath</name></name><argument_list pos:line="244" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="244" pos:column="46">"srcmltest\\foo.c"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="244" pos:column="67">firstSourceFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="247" pos:column="9">[<expr><name pos:line="247" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="248" pos:column="9">public</specifier> <name pos:line="248" pos:column="16">void</name></type> <name pos:line="248" pos:column="21">EmptyOutputFileTest</name><parameter_list pos:line="248" pos:column="40">()</parameter_list>
        <block pos:line="249" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="250" pos:column="13">var</name></type> <name pos:line="250" pos:column="17">srcmlObject</name> <init pos:line="250" pos:column="29">= <expr><op:operator pos:line="250" pos:column="31">new</op:operator> <call><name pos:line="250" pos:column="35">Src2SrcMLRunner</name><argument_list pos:line="250" pos:column="50">(<argument><expr><call><name><name pos:line="250" pos:column="51">Path</name><op:operator pos:line="250" pos:column="55">.</op:operator><name pos:line="250" pos:column="56">Combine</name></name><argument_list pos:line="250" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="250" pos:column="64">"."</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="250" pos:column="69">"SrcML"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="251" pos:column="13">File</name><op:operator pos:line="251" pos:column="17">.</op:operator><name pos:line="251" pos:column="18">WriteAllText</name></name><argument_list pos:line="251" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="251" pos:column="31">"srcml_xml\\emptyFile.xml"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="251" pos:column="59">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="252" pos:column="13">Assert</name><op:operator pos:line="252" pos:column="19">.</op:operator><name pos:line="252" pos:column="20">IsTrue</name></name><argument_list pos:line="252" pos:column="26">(<argument><expr><call><name><name pos:line="252" pos:column="27">File</name><op:operator pos:line="252" pos:column="31">.</op:operator><name pos:line="252" pos:column="32">Exists</name></name><argument_list pos:line="252" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="252" pos:column="39">"srcml_xml\\emptyFile.xml"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="254" pos:column="13">var</name></type> <name pos:line="254" pos:column="17">doc</name> <init pos:line="254" pos:column="21">= <expr><call><name><name pos:line="254" pos:column="23">srcmlObject</name><op:operator pos:line="254" pos:column="34">.</op:operator><name pos:line="254" pos:column="35">GenerateSrcMLFromFile</name></name><argument_list pos:line="254" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="254" pos:column="57">"srcmltest\\foo.c"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="254" pos:column="77">"srcml_xml\\emptyFile.xml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="256" pos:column="13">Assert</name><op:operator pos:line="256" pos:column="19">.</op:operator><name pos:line="256" pos:column="20">IsNotNull</name></name><argument_list pos:line="256" pos:column="29">(<argument><expr><name pos:line="256" pos:column="30">doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="257" pos:column="13">Assert</name><op:operator pos:line="257" pos:column="19">.</op:operator><name pos:line="257" pos:column="20">AreEqual</name></name><argument_list pos:line="257" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="257" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="257" pos:column="32">doc</name><op:operator pos:line="257" pos:column="35">.</op:operator><name pos:line="257" pos:column="36">FileUnits</name><op:operator pos:line="257" pos:column="45">.</op:operator><name pos:line="257" pos:column="46">Count</name></name><argument_list pos:line="257" pos:column="51">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="260" pos:column="9">[<expr><name pos:line="260" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="261" pos:column="9">public</specifier> <name pos:line="261" pos:column="16">void</name></type> <name pos:line="261" pos:column="21">InputWithSpacesTest</name><parameter_list pos:line="261" pos:column="40">()</parameter_list>
        <block pos:line="262" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="263" pos:column="13">var</name></type> <name pos:line="263" pos:column="17">runner</name> <init pos:line="263" pos:column="24">= <expr><op:operator pos:line="263" pos:column="26">new</op:operator> <call><name pos:line="263" pos:column="30">Src2SrcMLRunner</name><argument_list pos:line="263" pos:column="45">(<argument><expr><call><name><name pos:line="263" pos:column="46">Path</name><op:operator pos:line="263" pos:column="50">.</op:operator><name pos:line="263" pos:column="51">Combine</name></name><argument_list pos:line="263" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="263" pos:column="59">"."</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="263" pos:column="64">"SrcML"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="264" pos:column="13">var</name></type> <name pos:line="264" pos:column="17">doc</name> <init pos:line="264" pos:column="21">= <expr><call><name><name pos:line="264" pos:column="23">runner</name><op:operator pos:line="264" pos:column="29">.</op:operator><name pos:line="264" pos:column="30">GenerateSrcMLFromFile</name></name><argument_list pos:line="264" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="264" pos:column="52">"srcmltest\\File with spaces.cpp"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="264" pos:column="87">"srcml_xml\\input_with_spaces.xml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="266" pos:column="13">Assert</name><op:operator pos:line="266" pos:column="19">.</op:operator><name pos:line="266" pos:column="20">IsNotNull</name></name><argument_list pos:line="266" pos:column="29">(<argument><expr><name pos:line="266" pos:column="30">doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="267" pos:column="13">Assert</name><op:operator pos:line="267" pos:column="19">.</op:operator><name pos:line="267" pos:column="20">AreEqual</name></name><argument_list pos:line="267" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="267" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="267" pos:column="32">doc</name><op:operator pos:line="267" pos:column="35">.</op:operator><name pos:line="267" pos:column="36">FileUnits</name><op:operator pos:line="267" pos:column="45">.</op:operator><name pos:line="267" pos:column="46">Count</name></name><argument_list pos:line="267" pos:column="51">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="270" pos:column="9">[<expr><name pos:line="270" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="271" pos:column="9">public</specifier> <name pos:line="271" pos:column="16">void</name></type> <name pos:line="271" pos:column="21">MyTestMethod</name><parameter_list pos:line="271" pos:column="33">()</parameter_list>
        <block pos:line="272" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="273" pos:column="13">var</name></type> <name pos:line="273" pos:column="17">runner</name> <init pos:line="273" pos:column="24">= <expr><op:operator pos:line="273" pos:column="26">new</op:operator> <call><name pos:line="273" pos:column="30">Src2SrcMLRunner</name><argument_list pos:line="273" pos:column="45">(<argument><expr><call><name><name pos:line="273" pos:column="46">Path</name><op:operator pos:line="273" pos:column="50">.</op:operator><name pos:line="273" pos:column="51">Combine</name></name><argument_list pos:line="273" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="273" pos:column="59">"."</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="273" pos:column="64">"SrcML"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="274" pos:column="13">runner</name><op:operator pos:line="274" pos:column="19">.</op:operator><name pos:line="274" pos:column="20">GenerateSrcMLFromDirectory</name></name><argument_list pos:line="274" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="274" pos:column="47">"srcmltest"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="274" pos:column="60">"srcmltest1.xml"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="275" pos:column="13">runner</name><op:operator pos:line="275" pos:column="19">.</op:operator><name pos:line="275" pos:column="20">GenerateSrcMLFromFile</name></name><argument_list pos:line="275" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="275" pos:column="42">"srcmltest\\File with spaces.cpp"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="275" pos:column="77">"testfile.xml"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <comment type="line" pos:line="277" pos:column="9">//[Test]</comment>
        <comment type="line" pos:line="278" pos:column="9">//public void TestRegularExpression()</comment>
        <comment type="line" pos:line="279" pos:column="9">//{</comment>
        <comment type="line" pos:line="280" pos:column="9">//    string output;</comment>
        <comment type="line" pos:line="281" pos:column="9">//    output = SrcML.GetLogFromOutput(@"    - ..\..\TEST\dbglib.py      Skipped: Unregistered extension.");</comment>
        <comment type="line" pos:line="282" pos:column="9">//    Assert.AreEqual(@"-: ..\..\TEST\dbglib.py: Skipped: Unregistered extension.", output);</comment>

        <comment type="line" pos:line="284" pos:column="9">//    output = SrcML.GetLogFromOutput(@"Path: ..\..\TEST\dbglib.c       Error: Unable to open file.");</comment>
        <comment type="line" pos:line="285" pos:column="9">//    Assert.AreEqual(@"Path:: ..\..\TEST\dbglib.c: Error: Unable to open file.", output);</comment>

        <comment type="line" pos:line="287" pos:column="9">//    output = SrcML.GetLogFromOutput(@"    1 Z:\Source\Robotics\rel5_11.0160.release\sys\modulelib\dbglib\dbglib.c");</comment>
        <comment type="line" pos:line="288" pos:column="9">//    Assert.AreEqual(@"1: Z:\Source\Robotics\rel5_11.0160.release\sys\modulelib\dbglib\dbglib.c: : ", output);</comment>

        <comment type="line" pos:line="290" pos:column="9">//    output = SrcML.GetLogFromOutput(@"Path: Z:\Source\Robotics\rel5_11.0160.release\sys\modulelib\dbglib\dbglib.c");</comment>
        <comment type="line" pos:line="291" pos:column="9">//    Assert.AreEqual(@"Path:: Z:\Source\Robotics\rel5_11.0160.release\sys\modulelib\dbglib\dbglib.c: : ", output);</comment>
        <comment type="line" pos:line="292" pos:column="9">//}</comment>
    }</block></class>
}</block></namespace>
</unit>
