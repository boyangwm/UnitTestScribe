<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\VisualStudio\ABB.SrcML.VisualStudio.SrcMLService\Method.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2015 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Xiao Qu (ABB Group) - Initial implementation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">ABB</name><op:operator pos:line="12" pos:column="10">.</op:operator><name pos:line="12" pos:column="11">SrcML</name><op:operator pos:line="12" pos:column="16">.</op:operator><name pos:line="12" pos:column="17">Data</name></name>;</using>
<using pos:line="13" pos:column="1">using <name pos:line="13" pos:column="7">System</name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Collections</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">Concurrent</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Collections</name><op:operator pos:line="15" pos:column="25">.</op:operator><name pos:line="15" pos:column="26">Generic</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Collections</name><op:operator pos:line="16" pos:column="25">.</op:operator><name pos:line="16" pos:column="26">ObjectModel</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Diagnostics</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Linq</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">System</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">Threading</name><op:operator pos:line="19" pos:column="23">.</op:operator><name pos:line="19" pos:column="24">Tasks</name></name>;</using>

<namespace pos:line="21" pos:column="1">namespace <name><name pos:line="21" pos:column="11">ABB</name><op:operator pos:line="21" pos:column="14">.</op:operator><name pos:line="21" pos:column="15">VisualStudio</name></name>
<block pos:line="22" pos:column="1">{

    <class><specifier pos:line="24" pos:column="5">public</specifier> class <name pos:line="24" pos:column="18">Method</name>
    <block pos:line="25" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="26" pos:column="9">public</specifier> <name pos:line="26" pos:column="16">string</name></type> <name pos:line="26" pos:column="23">FilePath</name> <block pos:line="26" pos:column="32">{ <function_decl><name pos:line="26" pos:column="34">get</name>;</function_decl> <function_decl><name pos:line="26" pos:column="39">set</name>;</function_decl> }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="28" pos:column="9">public</specifier> <name pos:line="28" pos:column="16">string</name></type> <name pos:line="28" pos:column="23">NameSpace</name> <block pos:line="28" pos:column="33">{ <function_decl><name pos:line="28" pos:column="35">get</name>;</function_decl> <function_decl><specifier pos:line="28" pos:column="40">private</specifier> <name pos:line="28" pos:column="48">set</name>;</function_decl> }</block></decl></decl_stmt> <comment type="line" pos:line="28" pos:column="55">//namespace</comment>
        
        <decl_stmt><decl><type><specifier pos:line="30" pos:column="9">public</specifier> <name pos:line="30" pos:column="16">string</name></type> <name pos:line="30" pos:column="23">Type</name> <block pos:line="30" pos:column="28">{ <function_decl><name pos:line="30" pos:column="30">get</name>;</function_decl> <function_decl><specifier pos:line="30" pos:column="35">private</specifier> <name pos:line="30" pos:column="43">set</name>;</function_decl> }</block></decl></decl_stmt> <comment type="line" pos:line="30" pos:column="50">//class         </comment>

        <decl_stmt><decl><type><specifier pos:line="32" pos:column="9">public</specifier> <name pos:line="32" pos:column="16">string</name></type> <name pos:line="32" pos:column="23">Name</name> <block pos:line="32" pos:column="28">{ <function_decl><name pos:line="32" pos:column="30">get</name>;</function_decl> <function_decl><specifier pos:line="32" pos:column="35">private</specifier> <name pos:line="32" pos:column="43">set</name>;</function_decl> }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="34" pos:column="9">public</specifier> <name pos:line="34" pos:column="16">int</name></type> <name pos:line="34" pos:column="20">StartLineNumber</name> <block pos:line="34" pos:column="36">{<function_decl><name pos:line="34" pos:column="37">get</name>;</function_decl> <function_decl><specifier pos:line="34" pos:column="42">private</specifier> <name pos:line="34" pos:column="50">set</name>;</function_decl>}</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="36" pos:column="9">public</specifier> <name><name pos:line="36" pos:column="16">List</name><argument_list pos:line="36" pos:column="20">&lt;<argument><name pos:line="36" pos:column="21">string</name></argument>&gt;</argument_list></name></type> <name pos:line="36" pos:column="29">ParameterNames</name> <block pos:line="36" pos:column="44">{ <function_decl><name pos:line="36" pos:column="46">get</name>;</function_decl> <function_decl><specifier pos:line="36" pos:column="51">private</specifier> <name pos:line="36" pos:column="59">set</name>;</function_decl> }</block></decl></decl_stmt>  

        <decl_stmt><decl><type><specifier pos:line="38" pos:column="9">public</specifier> <name><name pos:line="38" pos:column="16">List</name><argument_list pos:line="38" pos:column="20">&lt;<argument><name pos:line="38" pos:column="21">string</name></argument>&gt;</argument_list></name></type> <name pos:line="38" pos:column="29">ParameterTypes</name> <block pos:line="38" pos:column="44">{ <function_decl><name pos:line="38" pos:column="46">get</name>;</function_decl> <function_decl><specifier pos:line="38" pos:column="51">private</specifier> <name pos:line="38" pos:column="59">set</name>;</function_decl> }</block></decl></decl_stmt>
                

        <constructor><specifier pos:line="41" pos:column="9">public</specifier> <name pos:line="41" pos:column="16">Method</name><parameter_list pos:line="41" pos:column="22">()</parameter_list>
        <block pos:line="42" pos:column="9">{
            <expr_stmt><expr><name pos:line="43" pos:column="13">FilePath</name> <op:operator pos:line="43" pos:column="22">=</op:operator> <lit:literal type="string" pos:line="43" pos:column="24">""</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="44" pos:column="13">NameSpace</name> <op:operator pos:line="44" pos:column="23">=</op:operator> <lit:literal type="string" pos:line="44" pos:column="25">""</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="45" pos:column="13">Type</name> <op:operator pos:line="45" pos:column="18">=</op:operator> <lit:literal type="string" pos:line="45" pos:column="20">""</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="46" pos:column="13">Name</name> <op:operator pos:line="46" pos:column="18">=</op:operator> <lit:literal type="string" pos:line="46" pos:column="20">""</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="47" pos:column="13">StartLineNumber</name> <op:operator pos:line="47" pos:column="29">=</op:operator> <lit:literal type="number" pos:line="47" pos:column="31">0</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="48" pos:column="13">ParameterNames</name> <op:operator pos:line="48" pos:column="28">=</op:operator> <op:operator pos:line="48" pos:column="30">new</op:operator> <call><name><name pos:line="48" pos:column="34">List</name><argument_list pos:line="48" pos:column="38">&lt;<argument><name pos:line="48" pos:column="39">string</name></argument>&gt;</argument_list></name><argument_list pos:line="48" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="49" pos:column="13">ParameterTypes</name> <op:operator pos:line="49" pos:column="28">=</op:operator> <op:operator pos:line="49" pos:column="30">new</op:operator> <call><name><name pos:line="49" pos:column="34">List</name><argument_list pos:line="49" pos:column="38">&lt;<argument><name pos:line="49" pos:column="39">string</name></argument>&gt;</argument_list></name><argument_list pos:line="49" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>
        
        <constructor><specifier pos:line="52" pos:column="9">public</specifier> <name pos:line="52" pos:column="16">Method</name><parameter_list pos:line="52" pos:column="22">(<param><decl><type><name pos:line="52" pos:column="23">MethodDefinition</name></type> <name pos:line="52" pos:column="40">methodDef</name></decl></param>)</parameter_list>            
        <block pos:line="53" pos:column="9">{
            <expr_stmt><expr><name pos:line="54" pos:column="13">FilePath</name> <op:operator pos:line="54" pos:column="22">=</op:operator> <name><name pos:line="54" pos:column="24">methodDef</name><op:operator pos:line="54" pos:column="33">.</op:operator><name pos:line="54" pos:column="34">PrimaryLocation</name><op:operator pos:line="54" pos:column="49">.</op:operator><name pos:line="54" pos:column="50">SourceFileName</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="55" pos:column="13">NameSpace</name> <op:operator pos:line="55" pos:column="23">=</op:operator> <call><name><name pos:line="55" pos:column="25">methodDef</name><op:operator pos:line="55" pos:column="34">.</op:operator><name pos:line="55" pos:column="35">GetFullName</name></name><argument_list pos:line="55" pos:column="46">()</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="55" pos:column="50">//the global level of namespace is the file name</comment>
            <expr_stmt><expr><name pos:line="56" pos:column="13">Type</name> <op:operator pos:line="56" pos:column="18">=</op:operator> <call><name><name pos:line="56" pos:column="20">methodDef</name><op:operator pos:line="56" pos:column="29">.</op:operator><name><name pos:line="56" pos:column="30">GetAncestors</name><argument_list pos:line="56" pos:column="42">&lt;<argument><name pos:line="56" pos:column="43">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="56" pos:column="58">()</argument_list></call><op:operator pos:line="56" pos:column="60">.</op:operator><call><name pos:line="56" pos:column="61">FirstOrDefault</name><argument_list pos:line="56" pos:column="75">()</argument_list></call><op:operator pos:line="56" pos:column="77">.</op:operator><name pos:line="56" pos:column="78">Name</name></expr>;</expr_stmt> 
            <expr_stmt><expr><name pos:line="57" pos:column="13">Name</name> <op:operator pos:line="57" pos:column="18">=</op:operator> <name><name pos:line="57" pos:column="20">methodDef</name><op:operator pos:line="57" pos:column="29">.</op:operator><name pos:line="57" pos:column="30">Name</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="58" pos:column="13">StartLineNumber</name> <op:operator pos:line="58" pos:column="29">=</op:operator> <name><name pos:line="58" pos:column="31">methodDef</name><op:operator pos:line="58" pos:column="40">.</op:operator><name pos:line="58" pos:column="41">PrimaryLocation</name><op:operator pos:line="58" pos:column="56">.</op:operator><name pos:line="58" pos:column="57">StartingLineNumber</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="59" pos:column="13">SetParameterNames</name><argument_list pos:line="59" pos:column="30">(<argument><expr><name pos:line="59" pos:column="31">methodDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="60" pos:column="13">SetParameterTypes</name><argument_list pos:line="60" pos:column="30">(<argument><expr><name pos:line="60" pos:column="31">methodDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
        }</block></constructor>
        

        <cpp:region pos:line="64" pos:column="9">#<cpp:directive pos:line="64" pos:column="10">region</cpp:directive> Equals</cpp:region>

        <function><type><specifier pos:line="66" pos:column="9">public</specifier> <specifier pos:line="66" pos:column="16">static</specifier> <name pos:line="66" pos:column="23">bool</name></type> <name pos:line="66" pos:column="28">operator ==</name><parameter_list pos:line="66" pos:column="39">(<param><decl><type><name pos:line="66" pos:column="40">Method</name></type> <name pos:line="66" pos:column="47">a</name></decl></param>, <param><decl><type><name pos:line="66" pos:column="50">Method</name></type> <name pos:line="66" pos:column="57">b</name></decl></param>)</parameter_list> <block pos:line="66" pos:column="60">{
            <if pos:line="67" pos:column="13">if<condition pos:line="67" pos:column="15">(<expr><call><name><name pos:line="67" pos:column="16">System</name><op:operator pos:line="67" pos:column="22">.</op:operator><name pos:line="67" pos:column="23">Object</name><op:operator pos:line="67" pos:column="29">.</op:operator><name pos:line="67" pos:column="30">ReferenceEquals</name></name><argument_list pos:line="67" pos:column="45">(<argument><expr><name pos:line="67" pos:column="46">a</name></expr></argument>, <argument><expr><name pos:line="67" pos:column="49">b</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="67" pos:column="52"> <block pos:line="67" pos:column="53">{ <return pos:line="67" pos:column="55">return <expr><lit:literal type="boolean" pos:line="67" pos:column="62">true</lit:literal></expr>;</return> }</block></then></if>
            <if pos:line="68" pos:column="13">if<condition pos:line="68" pos:column="15">(<expr><op:operator pos:line="68" pos:column="16">(</op:operator><op:operator pos:line="68" pos:column="17">(</op:operator><name pos:line="68" pos:column="18">object</name><op:operator pos:line="68" pos:column="24">)</op:operator> <name pos:line="68" pos:column="26">a</name> <op:operator pos:line="68" pos:column="28">==</op:operator> <name pos:line="68" pos:column="31">null</name><op:operator pos:line="68" pos:column="35">)</op:operator> <op:operator pos:line="68" pos:column="37">||</op:operator> <op:operator pos:line="68" pos:column="40">(</op:operator><op:operator pos:line="68" pos:column="41">(</op:operator><name pos:line="68" pos:column="42">object</name><op:operator pos:line="68" pos:column="48">)</op:operator> <name pos:line="68" pos:column="50">b</name> <op:operator pos:line="68" pos:column="52">==</op:operator> <name pos:line="68" pos:column="55">null</name><op:operator pos:line="68" pos:column="59">)</op:operator></expr>)</condition><then pos:line="68" pos:column="61"> <block pos:line="68" pos:column="62">{ <return pos:line="68" pos:column="64">return <expr><lit:literal type="boolean" pos:line="68" pos:column="71">false</lit:literal></expr>;</return> }</block></then></if>
            <return pos:line="69" pos:column="13">return <expr><call><name><name pos:line="69" pos:column="20">a</name><op:operator pos:line="69" pos:column="21">.</op:operator><name pos:line="69" pos:column="22">Equals</name></name><argument_list pos:line="69" pos:column="28">(<argument><expr><name pos:line="69" pos:column="29">b</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="72" pos:column="9">public</specifier> <specifier pos:line="72" pos:column="16">static</specifier> <name pos:line="72" pos:column="23">bool</name></type> <name pos:line="72" pos:column="28">operator !=</name><parameter_list pos:line="72" pos:column="39">(<param><decl><type><name pos:line="72" pos:column="40">Method</name></type> <name pos:line="72" pos:column="47">a</name></decl></param>, <param><decl><type><name pos:line="72" pos:column="50">Method</name></type> <name pos:line="72" pos:column="57">b</name></decl></param>)</parameter_list> <block pos:line="72" pos:column="60">{
            <return pos:line="73" pos:column="13">return <expr><op:operator pos:line="73" pos:column="20">!</op:operator><op:operator pos:line="73" pos:column="21">(</op:operator><name pos:line="73" pos:column="22">a</name> <op:operator pos:line="73" pos:column="24">==</op:operator> <name pos:line="73" pos:column="27">b</name><op:operator pos:line="73" pos:column="28">)</op:operator></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="76" pos:column="9">public</specifier> <specifier pos:line="76" pos:column="16">override</specifier> <name pos:line="76" pos:column="25">bool</name></type> <name pos:line="76" pos:column="30">Equals</name><parameter_list pos:line="76" pos:column="36">(<param><decl><type><name pos:line="76" pos:column="37">Object</name></type> <name pos:line="76" pos:column="44">obj</name></decl></param>)</parameter_list> <block pos:line="76" pos:column="49">{
            <if pos:line="77" pos:column="13">if<condition pos:line="77" pos:column="15">(<expr><call><name><name pos:line="77" pos:column="16">Object</name><op:operator pos:line="77" pos:column="22">.</op:operator><name pos:line="77" pos:column="23">ReferenceEquals</name></name><argument_list pos:line="77" pos:column="38">(<argument><expr><name pos:line="77" pos:column="39">this</name></expr></argument>, <argument><expr><name pos:line="77" pos:column="45">obj</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="77" pos:column="50"> <block pos:line="77" pos:column="51">{ <return pos:line="77" pos:column="53">return <expr><lit:literal type="boolean" pos:line="77" pos:column="60">true</lit:literal></expr>;</return> }</block></then></if>
            <return pos:line="78" pos:column="13">return <expr><call><name><name pos:line="78" pos:column="20">this</name><op:operator pos:line="78" pos:column="24">.</op:operator><name pos:line="78" pos:column="25">Equals</name></name><argument_list pos:line="78" pos:column="31">(<argument><expr><name pos:line="78" pos:column="32">obj</name> <op:operator pos:line="78" pos:column="36">as</op:operator> <name pos:line="78" pos:column="39">Method</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="81" pos:column="9">public</specifier> <name pos:line="81" pos:column="16">bool</name></type> <name pos:line="81" pos:column="21">Equals</name><parameter_list pos:line="81" pos:column="27">(<param><decl><type><name pos:line="81" pos:column="28">Method</name></type> <name pos:line="81" pos:column="35">b</name></decl></param>)</parameter_list> <block pos:line="81" pos:column="38">{
            <if pos:line="82" pos:column="13">if<condition pos:line="82" pos:column="15">(<expr><name pos:line="82" pos:column="16">null</name> <op:operator pos:line="82" pos:column="21">==</op:operator> <name pos:line="82" pos:column="24">b</name></expr>)</condition><then pos:line="82" pos:column="26"> <block pos:line="82" pos:column="27">{ <return pos:line="82" pos:column="29">return <expr><lit:literal type="boolean" pos:line="82" pos:column="36">false</lit:literal></expr>;</return> }</block></then></if>
            <return pos:line="83" pos:column="13">return <expr><call><name pos:line="83" pos:column="20">CompareMethodDefinitions</name><argument_list pos:line="83" pos:column="44">(<argument><expr><name pos:line="83" pos:column="45">this</name></expr></argument>, <argument><expr><name pos:line="83" pos:column="51">b</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="86" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="87" pos:column="9">/// Determine if two methods have the same signatures (name, paramtertype)</comment>
        <comment type="line" pos:line="88" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="89" pos:column="9">/// &lt;param name="b"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="90" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="91" pos:column="9">public</specifier> <name pos:line="91" pos:column="16">bool</name></type> <name pos:line="91" pos:column="21">SignatureEquals</name><parameter_list pos:line="91" pos:column="36">(<param><decl><type><name pos:line="91" pos:column="37">Method</name></type> <name pos:line="91" pos:column="44">b</name></decl></param>)</parameter_list>
        <block pos:line="92" pos:column="9">{
            <if pos:line="93" pos:column="13">if <condition pos:line="93" pos:column="16">(<expr><name pos:line="93" pos:column="17">null</name> <op:operator pos:line="93" pos:column="22">==</op:operator> <name pos:line="93" pos:column="25">b</name></expr>)</condition><then pos:line="93" pos:column="27">
            <block pos:line="94" pos:column="13">{
                <return pos:line="95" pos:column="17">return <expr><lit:literal type="boolean" pos:line="95" pos:column="24">false</lit:literal></expr>;</return>
            }</block></then></if>
            <return pos:line="97" pos:column="13">return <expr><op:operator pos:line="97" pos:column="20">(</op:operator><name><name pos:line="97" pos:column="21">this</name><op:operator pos:line="97" pos:column="25">.</op:operator><name pos:line="97" pos:column="26">Name</name></name> <op:operator pos:line="97" pos:column="31">==</op:operator> <name><name pos:line="97" pos:column="34">b</name><op:operator pos:line="97" pos:column="35">.</op:operator><name pos:line="97" pos:column="36">Name</name> <type:modifier pos:line="97" pos:column="41">&amp;&amp;</type:modifier></name> <call><name pos:line="97" pos:column="44">ParameterTypesMatch</name><argument_list pos:line="97" pos:column="63">(<argument><expr><name><name pos:line="97" pos:column="64">this</name><op:operator pos:line="97" pos:column="68">.</op:operator><name pos:line="97" pos:column="69">ParameterTypes</name></name></expr></argument>, <argument><expr><name><name pos:line="97" pos:column="85">b</name><op:operator pos:line="97" pos:column="86">.</op:operator><name pos:line="97" pos:column="87">ParameterTypes</name></name></expr></argument>)</argument_list></call><op:operator pos:line="97" pos:column="102">)</op:operator></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="100" pos:column="9">private</specifier> <specifier pos:line="100" pos:column="17">static</specifier> <name pos:line="100" pos:column="24">bool</name></type> <name pos:line="100" pos:column="29">CompareMethodDefinitions</name><parameter_list pos:line="100" pos:column="53">(<param><decl><type><name pos:line="100" pos:column="54">Method</name></type> <name pos:line="100" pos:column="61">a</name></decl></param>, <param><decl><type><name pos:line="100" pos:column="64">Method</name></type> <name pos:line="100" pos:column="71">b</name></decl></param>)</parameter_list>
        <block pos:line="101" pos:column="9">{
            <if pos:line="102" pos:column="13">if <condition pos:line="102" pos:column="16">(<expr><name pos:line="102" pos:column="17">a</name> <op:operator pos:line="102" pos:column="19">==</op:operator> <name pos:line="102" pos:column="22">null</name> <op:operator pos:line="102" pos:column="27">||</op:operator> <name pos:line="102" pos:column="30">b</name> <op:operator pos:line="102" pos:column="32">==</op:operator> <name pos:line="102" pos:column="35">null</name></expr>)</condition><then pos:line="102" pos:column="40">
                <return pos:line="103" pos:column="17">return <expr><lit:literal type="boolean" pos:line="103" pos:column="24">false</lit:literal></expr>;</return></then></if>

            <if pos:line="105" pos:column="13">if <condition pos:line="105" pos:column="16">(<expr><name><name pos:line="105" pos:column="17">a</name><op:operator pos:line="105" pos:column="18">.</op:operator><name pos:line="105" pos:column="19">Name</name></name> <op:operator pos:line="105" pos:column="24">==</op:operator> <name><name pos:line="105" pos:column="27">b</name><op:operator pos:line="105" pos:column="28">.</op:operator><name pos:line="105" pos:column="29">Name</name>
                <type:modifier pos:line="106" pos:column="17">&amp;&amp;</type:modifier></name> <call><name pos:line="106" pos:column="20">ParameterTypesMatch</name><argument_list pos:line="106" pos:column="39">(<argument><expr><name><name pos:line="106" pos:column="40">a</name><op:operator pos:line="106" pos:column="41">.</op:operator><name pos:line="106" pos:column="42">ParameterTypes</name></name></expr></argument>, <argument><expr><name><name pos:line="106" pos:column="58">b</name><op:operator pos:line="106" pos:column="59">.</op:operator><name pos:line="106" pos:column="60">ParameterTypes</name></name></expr></argument>)</argument_list></call></expr>
               )</condition><then pos:line="107" pos:column="17">
            <block pos:line="108" pos:column="13">{   
                <return pos:line="109" pos:column="17">return <expr><name><name pos:line="109" pos:column="24">a</name><op:operator pos:line="109" pos:column="25">.</op:operator><name pos:line="109" pos:column="26">StartLineNumber</name></name> <op:operator pos:line="109" pos:column="42">==</op:operator> <name><name pos:line="109" pos:column="45">b</name><op:operator pos:line="109" pos:column="46">.</op:operator><name pos:line="109" pos:column="47">StartLineNumber</name></name></expr>;</return>
            }</block></then>
            <else pos:line="111" pos:column="13">else
                <return pos:line="112" pos:column="17">return <expr><lit:literal type="boolean" pos:line="112" pos:column="24">false</lit:literal></expr>;</return></else></if>
        }</block></function>

        <function><type><specifier pos:line="115" pos:column="9">private</specifier> <specifier pos:line="115" pos:column="17">static</specifier> <name pos:line="115" pos:column="24">bool</name></type> <name pos:line="115" pos:column="29">ParameterTypesMatch</name><parameter_list pos:line="115" pos:column="48">(<param><decl><type><name><name pos:line="115" pos:column="49">List</name><argument_list pos:line="115" pos:column="53">&lt;<argument><name pos:line="115" pos:column="54">string</name></argument>&gt;</argument_list></name></type> <name pos:line="115" pos:column="62">paramsA</name></decl></param>, <param><decl><type><name><name pos:line="115" pos:column="71">List</name><argument_list pos:line="115" pos:column="75">&lt;<argument><name pos:line="115" pos:column="76">string</name></argument>&gt;</argument_list></name></type> <name pos:line="115" pos:column="84">paramsB</name></decl></param>)</parameter_list>
        <block pos:line="116" pos:column="9">{
            <if pos:line="117" pos:column="13">if <condition pos:line="117" pos:column="16">(<expr><name pos:line="117" pos:column="17">paramsA</name> <op:operator pos:line="117" pos:column="25">==</op:operator> <name pos:line="117" pos:column="28">null</name> <op:operator pos:line="117" pos:column="33">||</op:operator> <name pos:line="117" pos:column="36">paramsB</name> <op:operator pos:line="117" pos:column="44">==</op:operator> <name pos:line="117" pos:column="47">null</name> <op:operator pos:line="117" pos:column="52">||</op:operator> <name><name pos:line="117" pos:column="55">paramsA</name><op:operator pos:line="117" pos:column="62">.</op:operator><name pos:line="117" pos:column="63">Count</name></name> <op:operator pos:line="117" pos:column="69">!=</op:operator> <name><name pos:line="117" pos:column="72">paramsB</name><op:operator pos:line="117" pos:column="79">.</op:operator><name pos:line="117" pos:column="80">Count</name></name></expr>)</condition><then pos:line="117" pos:column="86">
                <return pos:line="118" pos:column="17">return <expr><lit:literal type="boolean" pos:line="118" pos:column="24">false</lit:literal></expr>;</return></then></if>
            <decl_stmt><decl><type><name pos:line="119" pos:column="13">int</name></type> <name pos:line="119" pos:column="17">i</name> <init pos:line="119" pos:column="19">= <expr><lit:literal type="number" pos:line="119" pos:column="21">0</lit:literal></expr></init></decl>;</decl_stmt>
            <foreach pos:line="120" pos:column="13">foreach (<init><decl><type><name pos:line="120" pos:column="22">var</name></type> <name pos:line="120" pos:column="26">param</name> <range pos:line="120" pos:column="32">in <expr><name pos:line="120" pos:column="35">paramsA</name></expr></range></decl></init>)
            <block pos:line="121" pos:column="13">{
                <if pos:line="122" pos:column="17">if <condition pos:line="122" pos:column="20">(<expr><name pos:line="122" pos:column="21">param</name> <op:operator pos:line="122" pos:column="27">!=</op:operator> <call><name><name pos:line="122" pos:column="30">paramsB</name><op:operator pos:line="122" pos:column="37">.</op:operator><name pos:line="122" pos:column="38">ElementAt</name></name><argument_list pos:line="122" pos:column="47">(<argument><expr><name pos:line="122" pos:column="48">i</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="122" pos:column="51">
                    <return pos:line="123" pos:column="21">return <expr><lit:literal type="boolean" pos:line="123" pos:column="28">false</lit:literal></expr>;</return></then></if>
                <expr_stmt><expr><name pos:line="124" pos:column="17">i</name><op:operator pos:line="124" pos:column="18">++</op:operator></expr>;</expr_stmt>
            }</block></foreach>
            <return pos:line="126" pos:column="13">return <expr><lit:literal type="boolean" pos:line="126" pos:column="20">true</lit:literal></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="129" pos:column="9">public</specifier> <specifier pos:line="129" pos:column="16">override</specifier> <name pos:line="129" pos:column="25">int</name></type> <name pos:line="129" pos:column="29">GetHashCode</name><parameter_list pos:line="129" pos:column="40">()</parameter_list> <block pos:line="129" pos:column="43">{
            <decl_stmt><decl><type><name pos:line="130" pos:column="13">int</name></type> <name pos:line="130" pos:column="17">result</name> <init pos:line="130" pos:column="24">= <expr><lit:literal type="number" pos:line="130" pos:column="26">17</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="131" pos:column="13">result</name> <op:operator pos:line="131" pos:column="20">=</op:operator> <name pos:line="131" pos:column="22">result</name> <op:operator pos:line="131" pos:column="29">*</op:operator> <lit:literal type="number" pos:line="131" pos:column="31">31</lit:literal> <op:operator pos:line="131" pos:column="34">+</op:operator> <call><name><name pos:line="131" pos:column="36">Name</name><op:operator pos:line="131" pos:column="40">.</op:operator><name pos:line="131" pos:column="41">GetHashCode</name></name><argument_list pos:line="131" pos:column="52">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="132" pos:column="13">result</name> <op:operator pos:line="132" pos:column="20">=</op:operator> <name pos:line="132" pos:column="22">result</name> <op:operator pos:line="132" pos:column="29">*</op:operator> <lit:literal type="number" pos:line="132" pos:column="31">31</lit:literal> <op:operator pos:line="132" pos:column="34">+</op:operator> <call><name><name pos:line="132" pos:column="36">Type</name><op:operator pos:line="132" pos:column="40">.</op:operator><name pos:line="132" pos:column="41">GetHashCode</name></name><argument_list pos:line="132" pos:column="52">()</argument_list></call></expr>;</expr_stmt>
            <return pos:line="133" pos:column="13">return <expr><name pos:line="133" pos:column="20">result</name></expr>;</return>
        }</block></function>

        <cpp:endregion pos:line="136" pos:column="9">#<cpp:directive pos:line="136" pos:column="10">endregion</cpp:directive> Equals</cpp:endregion>

        <function><type><specifier pos:line="138" pos:column="9">public</specifier> <specifier pos:line="138" pos:column="16">override</specifier> <name pos:line="138" pos:column="25">string</name></type> <name pos:line="138" pos:column="32">ToString</name><parameter_list pos:line="138" pos:column="40">()</parameter_list> <block pos:line="138" pos:column="43">{
            <decl_stmt><decl><type><name pos:line="139" pos:column="13">string</name></type> <name pos:line="139" pos:column="20">parameters</name> <init pos:line="139" pos:column="31">= <expr><lit:literal type="string" pos:line="139" pos:column="33">""</lit:literal></expr></init></decl>;</decl_stmt>
            <if pos:line="140" pos:column="13">if<condition pos:line="140" pos:column="15">(<expr><call><name><name pos:line="140" pos:column="16">ParameterNames</name><op:operator pos:line="140" pos:column="30">.</op:operator><name pos:line="140" pos:column="31">Count</name></name><argument_list pos:line="140" pos:column="36">()</argument_list></call> <op:operator pos:line="140" pos:column="39">==</op:operator> <lit:literal type="number" pos:line="140" pos:column="42">1</lit:literal></expr>)</condition><then pos:line="140" pos:column="44"> <block pos:line="140" pos:column="45">{
                <expr_stmt><expr><name pos:line="141" pos:column="17">parameters</name> <op:operator pos:line="141" pos:column="28">=</op:operator> <call><name><name pos:line="141" pos:column="30">ParameterNames</name><op:operator pos:line="141" pos:column="44">.</op:operator><name pos:line="141" pos:column="45">ToList</name></name><argument_list pos:line="141" pos:column="51">()</argument_list></call><index pos:line="141" pos:column="53">[<expr><lit:literal type="number" pos:line="141" pos:column="54">0</lit:literal></expr>]</index></expr>;</expr_stmt>
            }</block></then> <else pos:line="142" pos:column="15">else <if pos:line="142" pos:column="20">if<condition pos:line="142" pos:column="22">(<expr><call><name><name pos:line="142" pos:column="23">ParameterNames</name><op:operator pos:line="142" pos:column="37">.</op:operator><name pos:line="142" pos:column="38">Count</name></name><argument_list pos:line="142" pos:column="43">()</argument_list></call> <op:operator pos:line="142" pos:column="46">&gt;</op:operator> <lit:literal type="number" pos:line="142" pos:column="48">1</lit:literal></expr>)</condition><then pos:line="142" pos:column="50"> <block pos:line="142" pos:column="51">{
                <expr_stmt><expr><name pos:line="143" pos:column="17">parameters</name> <op:operator pos:line="143" pos:column="28">=</op:operator> <call><name><name pos:line="143" pos:column="30">ParameterNames</name><op:operator pos:line="143" pos:column="44">.</op:operator><name pos:line="143" pos:column="45">Aggregate</name></name><argument_list pos:line="143" pos:column="54">(<argument><expr><lambda><parameter_list pos:line="143" pos:column="55">(<param><decl><name pos:line="143" pos:column="56">n1</name></decl></param>, <param><decl><name pos:line="143" pos:column="60">n2</name></decl></param>)</parameter_list> <op:operator pos:line="143" pos:column="64">=&gt;</op:operator> <name pos:line="143" pos:column="67">n1</name> <op:operator pos:line="143" pos:column="70">+</op:operator> <lit:literal type="string" pos:line="143" pos:column="72">", "</lit:literal> <op:operator pos:line="143" pos:column="77">+</op:operator> <name pos:line="143" pos:column="79">n2</name></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>
            <return pos:line="145" pos:column="13">return <expr><name pos:line="145" pos:column="20">Type</name> <op:operator pos:line="145" pos:column="25">+</op:operator> <lit:literal type="string" pos:line="145" pos:column="27">"::"</lit:literal> <op:operator pos:line="145" pos:column="32">+</op:operator> <name pos:line="145" pos:column="34">Name</name> <op:operator pos:line="145" pos:column="39">+</op:operator> <lit:literal type="string" pos:line="145" pos:column="41">"("</lit:literal> <op:operator pos:line="145" pos:column="45">+</op:operator> <name pos:line="145" pos:column="47">parameters</name> <op:operator pos:line="145" pos:column="58">+</op:operator> <lit:literal type="string" pos:line="145" pos:column="60">")"</lit:literal></expr>;</return>
        }</block></function>


        <function><type><specifier pos:line="149" pos:column="9">private</specifier> <name pos:line="149" pos:column="17">void</name></type> <name pos:line="149" pos:column="22">SetParameterNames</name><parameter_list pos:line="149" pos:column="39">(<param><decl><type><name pos:line="149" pos:column="40">MethodDefinition</name></type> <name pos:line="149" pos:column="57">methodDefinition</name></decl></param>)</parameter_list>
        <block pos:line="150" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="151" pos:column="13">var</name></type> <name pos:line="151" pos:column="17">parameterNames</name> <init pos:line="151" pos:column="32">= <expr><linq><from pos:line="151" pos:column="34">from <expr><name pos:line="151" pos:column="39">parameter</name></expr> <in pos:line="151" pos:column="49">in <expr><name><name pos:line="151" pos:column="52">methodDefinition</name><op:operator pos:line="151" pos:column="68">.</op:operator><name pos:line="151" pos:column="69">Parameters</name></name></expr></in></from>
                                     <where pos:line="152" pos:column="38">where <expr><name><name pos:line="152" pos:column="44">parameter</name><op:operator pos:line="152" pos:column="53">.</op:operator><name pos:line="152" pos:column="54">Name</name></name> <op:operator pos:line="152" pos:column="59">!=</op:operator> <name pos:line="152" pos:column="62">null</name></expr></where>
                                     <select pos:line="153" pos:column="38">select <expr><name><name pos:line="153" pos:column="45">parameter</name><op:operator pos:line="153" pos:column="54">.</op:operator><name pos:line="153" pos:column="55">Name</name></name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="154" pos:column="13">ParameterNames</name> <op:operator pos:line="154" pos:column="28">=</op:operator> <op:operator pos:line="154" pos:column="30">new</op:operator> <call><name><name pos:line="154" pos:column="34">List</name><argument_list pos:line="154" pos:column="38">&lt;<argument><name pos:line="154" pos:column="39">string</name></argument>&gt;</argument_list></name><argument_list pos:line="154" pos:column="46">(<argument><expr><name pos:line="154" pos:column="47">parameterNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="157" pos:column="9">private</specifier> <name pos:line="157" pos:column="17">void</name></type> <name pos:line="157" pos:column="22">SetParameterTypes</name><parameter_list pos:line="157" pos:column="39">(<param><decl><type><name pos:line="157" pos:column="40">MethodDefinition</name></type> <name pos:line="157" pos:column="57">methodDefinition</name></decl></param>)</parameter_list> 
        <block pos:line="158" pos:column="9">{            
                <decl_stmt><decl><type><name pos:line="159" pos:column="17">var</name></type> <name pos:line="159" pos:column="21">parameterTypeNames</name> <init pos:line="159" pos:column="40">= <expr><linq><from pos:line="159" pos:column="42">from <expr><name pos:line="159" pos:column="47">parameter</name></expr> <in pos:line="159" pos:column="57">in <expr><name><name pos:line="159" pos:column="60">methodDefinition</name><op:operator pos:line="159" pos:column="76">.</op:operator><name pos:line="159" pos:column="77">Parameters</name></name></expr></in></from>
                                         <where pos:line="160" pos:column="42">where <expr><name><name pos:line="160" pos:column="48">parameter</name><op:operator pos:line="160" pos:column="57">.</op:operator><name pos:line="160" pos:column="58">VariableType</name></name> <op:operator pos:line="160" pos:column="71">!=</op:operator> <name pos:line="160" pos:column="74">null</name></expr></where>
                                         <select pos:line="161" pos:column="42">select <expr><name><name pos:line="161" pos:column="49">parameter</name><op:operator pos:line="161" pos:column="58">.</op:operator><name pos:line="161" pos:column="59">VariableType</name><op:operator pos:line="161" pos:column="71">.</op:operator><name pos:line="161" pos:column="72">Name</name></name></expr></select></linq></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name pos:line="162" pos:column="17">ParameterTypes</name> <op:operator pos:line="162" pos:column="32">=</op:operator> <op:operator pos:line="162" pos:column="34">new</op:operator> <call><name><name pos:line="162" pos:column="38">List</name><argument_list pos:line="162" pos:column="42">&lt;<argument><name pos:line="162" pos:column="43">string</name></argument>&gt;</argument_list></name><argument_list pos:line="162" pos:column="50">(<argument><expr><name pos:line="162" pos:column="51">parameterTypeNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        
    }</block></class>
}</block></namespace></unit>
