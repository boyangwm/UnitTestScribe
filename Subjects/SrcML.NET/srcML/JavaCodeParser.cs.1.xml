<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data\JavaCodeParser.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2013 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">System</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Collections</name><op:operator pos:line="13" pos:column="25">.</op:operator><name pos:line="13" pos:column="26">Generic</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Collections</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">ObjectModel</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Linq</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Xml</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Xml</name><op:operator pos:line="17" pos:column="17">.</op:operator><name pos:line="17" pos:column="18">Linq</name></name>;</using>

<namespace pos:line="19" pos:column="1">namespace <name><name pos:line="19" pos:column="11">ABB</name><op:operator pos:line="19" pos:column="14">.</op:operator><name pos:line="19" pos:column="15">SrcML</name><op:operator pos:line="19" pos:column="20">.</op:operator><name pos:line="19" pos:column="21">Data</name></name> <block pos:line="19" pos:column="26">{

    <comment type="line" pos:line="21" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="22" pos:column="5">/// Provides parsing facilities for the Java language</comment>
    <comment type="line" pos:line="23" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="24" pos:column="5">public</specifier> class <name pos:line="24" pos:column="18">JavaCodeParser</name> <super pos:line="24" pos:column="33">: <name pos:line="24" pos:column="35">AbstractCodeParser</name></super> <block pos:line="24" pos:column="54">{

        <comment type="line" pos:line="26" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="27" pos:column="9">/// Creates a new java code parser object</comment>
        <comment type="line" pos:line="28" pos:column="9">/// &lt;/summary&gt;</comment>
        <constructor><specifier pos:line="29" pos:column="9">public</specifier> <name pos:line="29" pos:column="16">JavaCodeParser</name><parameter_list pos:line="29" pos:column="30">()</parameter_list> <block pos:line="29" pos:column="33">{
            <expr_stmt><expr><name><name pos:line="30" pos:column="13">this</name><op:operator pos:line="30" pos:column="17">.</op:operator><name pos:line="30" pos:column="18">TypeElementNames</name></name> <op:operator pos:line="30" pos:column="35">=</op:operator> <op:operator pos:line="30" pos:column="37">new</op:operator> <call><name><name pos:line="30" pos:column="41">HashSet</name><argument_list pos:line="30" pos:column="48">&lt;<argument><name pos:line="30" pos:column="49">XName</name></argument>&gt;</argument_list></name><argument_list pos:line="30" pos:column="55">(<argument><expr><op:operator pos:line="30" pos:column="56">new</op:operator> <name><name pos:line="30" pos:column="60">XName</name><index pos:line="30" pos:column="65">[]</index></name> <block pos:line="30" pos:column="68">{ <expr><name><name pos:line="30" pos:column="70">SRC</name><op:operator pos:line="30" pos:column="73">.</op:operator><name pos:line="30" pos:column="74">Class</name></name></expr><op:operator pos:line="30" pos:column="79">,</op:operator> <expr><name><name pos:line="30" pos:column="81">SRC</name><op:operator pos:line="30" pos:column="84">.</op:operator><name pos:line="30" pos:column="85">Enum</name></name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="31" pos:column="13">this</name><op:operator pos:line="31" pos:column="17">.</op:operator><name pos:line="31" pos:column="18">NamespaceElementNames</name></name> <op:operator pos:line="31" pos:column="40">=</op:operator> <op:operator pos:line="31" pos:column="42">new</op:operator> <call><name><name pos:line="31" pos:column="46">HashSet</name><argument_list pos:line="31" pos:column="53">&lt;<argument><name pos:line="31" pos:column="54">XName</name></argument>&gt;</argument_list></name><argument_list pos:line="31" pos:column="60">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="32" pos:column="13">this</name><op:operator pos:line="32" pos:column="17">.</op:operator><name pos:line="32" pos:column="18">AliasElementName</name></name> <op:operator pos:line="32" pos:column="35">=</op:operator> <name><name pos:line="32" pos:column="37">SRC</name><op:operator pos:line="32" pos:column="40">.</op:operator><name pos:line="32" pos:column="41">Import</name></name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="35" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="36" pos:column="9">/// Returns &lt;c&gt;Language.Java&lt;/c&gt;</comment>
        <comment type="line" pos:line="37" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="38" pos:column="9">public</specifier> <specifier pos:line="38" pos:column="16">override</specifier> <name pos:line="38" pos:column="25">Language</name></type> <name pos:line="38" pos:column="34">ParserLanguage</name> <block pos:line="38" pos:column="49">{
            <function><name pos:line="39" pos:column="13">get</name> <block pos:line="39" pos:column="17">{ <return pos:line="39" pos:column="19">return <expr><name><name pos:line="39" pos:column="26">Language</name><op:operator pos:line="39" pos:column="34">.</op:operator><name pos:line="39" pos:column="35">Java</name></name></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>


        <comment type="line" pos:line="43" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="44" pos:column="9">/// Gets the parent type from a java type</comment>
        <comment type="line" pos:line="45" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="46" pos:column="9">/// &lt;param name="typeElement"&gt;The type element&lt;/param&gt;</comment>
        <comment type="line" pos:line="47" pos:column="9">/// &lt;returns&gt;The parent type elements for the class&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="48" pos:column="9">protected</specifier> <specifier pos:line="48" pos:column="19">override</specifier> <name><name pos:line="48" pos:column="28">IEnumerable</name><argument_list pos:line="48" pos:column="39">&lt;<argument><name pos:line="48" pos:column="40">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="48" pos:column="50">GetParentTypeUseElements</name><parameter_list pos:line="48" pos:column="74">(<param><decl><type><name pos:line="48" pos:column="75">XElement</name></type> <name pos:line="48" pos:column="84">typeElement</name></decl></param>)</parameter_list> <block pos:line="48" pos:column="97">{
            <decl_stmt><decl><type><name pos:line="49" pos:column="13">var</name></type> <name pos:line="49" pos:column="17">superTag</name> <init pos:line="49" pos:column="26">= <expr><call><name><name pos:line="49" pos:column="28">typeElement</name><op:operator pos:line="49" pos:column="39">.</op:operator><name pos:line="49" pos:column="40">Element</name></name><argument_list pos:line="49" pos:column="47">(<argument><expr><name><name pos:line="49" pos:column="48">SRC</name><op:operator pos:line="49" pos:column="51">.</op:operator><name pos:line="49" pos:column="52">Super</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="51" pos:column="13">var</name></type> <name pos:line="51" pos:column="17">parentElements</name> <init pos:line="51" pos:column="32">= <expr><call><name><name pos:line="51" pos:column="34">Enumerable</name><op:operator pos:line="51" pos:column="44">.</op:operator><name><name pos:line="51" pos:column="45">Empty</name><argument_list pos:line="51" pos:column="50">&lt;<argument><name pos:line="51" pos:column="51">XElement</name></argument>&gt;</argument_list></name></name><argument_list pos:line="51" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if pos:line="53" pos:column="13">if<condition pos:line="53" pos:column="15">(<expr><name pos:line="53" pos:column="16">null</name> <op:operator pos:line="53" pos:column="21">!=</op:operator> <name pos:line="53" pos:column="24">superTag</name></expr>)</condition><then pos:line="53" pos:column="33"> <block pos:line="53" pos:column="34">{
                <expr_stmt><expr><name pos:line="54" pos:column="17">parentElements</name> <op:operator pos:line="54" pos:column="32">=</op:operator> <linq><from pos:line="54" pos:column="34">from <expr><name pos:line="54" pos:column="39">element</name></expr> <in pos:line="54" pos:column="47">in <expr><call><name><name pos:line="54" pos:column="50">superTag</name><op:operator pos:line="54" pos:column="58">.</op:operator><name pos:line="54" pos:column="59">Elements</name></name><argument_list pos:line="54" pos:column="67">()</argument_list></call></expr></in></from>
                                 <where pos:line="55" pos:column="34">where <expr><name><name pos:line="55" pos:column="40">element</name><op:operator pos:line="55" pos:column="47">.</op:operator><name pos:line="55" pos:column="48">Name</name></name> <op:operator pos:line="55" pos:column="53">==</op:operator> <name><name pos:line="55" pos:column="56">SRC</name><op:operator pos:line="55" pos:column="59">.</op:operator><name pos:line="55" pos:column="60">Extends</name></name> <op:operator pos:line="55" pos:column="68">||</op:operator> <name><name pos:line="55" pos:column="71">element</name><op:operator pos:line="55" pos:column="78">.</op:operator><name pos:line="55" pos:column="79">Name</name></name> <op:operator pos:line="55" pos:column="84">==</op:operator> <name><name pos:line="55" pos:column="87">SRC</name><op:operator pos:line="55" pos:column="90">.</op:operator><name pos:line="55" pos:column="91">Implements</name></name></expr></where>
                                 <from pos:line="56" pos:column="34">from <expr><name pos:line="56" pos:column="39">name</name></expr> <in pos:line="56" pos:column="44">in <expr><call><name><name pos:line="56" pos:column="47">element</name><op:operator pos:line="56" pos:column="54">.</op:operator><name pos:line="56" pos:column="55">Elements</name></name><argument_list pos:line="56" pos:column="63">(<argument><expr><name><name pos:line="56" pos:column="64">SRC</name><op:operator pos:line="56" pos:column="67">.</op:operator><name pos:line="56" pos:column="68">Name</name></name></expr></argument>)</argument_list></call></expr></in></from>
                                 <select pos:line="57" pos:column="34">select <expr><name pos:line="57" pos:column="41">name</name></expr></select></linq></expr>;</expr_stmt>
            }</block></then></if>
            <return pos:line="59" pos:column="13">return <expr><name pos:line="59" pos:column="20">parentElements</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="62" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="63" pos:column="9">/// Parses a java boolean literal</comment>
        <comment type="line" pos:line="64" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="65" pos:column="9">/// &lt;param name="literalValue"&gt;the literal value&lt;/param&gt;</comment>
        <comment type="line" pos:line="66" pos:column="9">/// &lt;returns&gt;not implemented&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="67" pos:column="9">protected</specifier> <specifier pos:line="67" pos:column="19">override</specifier> <name pos:line="67" pos:column="28">string</name></type> <name pos:line="67" pos:column="35">GetTypeForBooleanLiteral</name><parameter_list pos:line="67" pos:column="59">(<param><decl><type><name pos:line="67" pos:column="60">string</name></type> <name pos:line="67" pos:column="67">literalValue</name></decl></param>)</parameter_list> <block pos:line="67" pos:column="81">{
            <throw pos:line="68" pos:column="13">throw <expr><op:operator pos:line="68" pos:column="19">new</op:operator> <call><name pos:line="68" pos:column="23">NotImplementedException</name><argument_list pos:line="68" pos:column="46">()</argument_list></call></expr>;</throw>
        }</block></function>

        <comment type="line" pos:line="71" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="72" pos:column="9">/// Parses a java character literal</comment>
        <comment type="line" pos:line="73" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="74" pos:column="9">/// &lt;param name="literalValue"&gt;the literal value&lt;/param&gt;</comment>
        <comment type="line" pos:line="75" pos:column="9">/// &lt;returns&gt;not implemented&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="76" pos:column="9">protected</specifier> <specifier pos:line="76" pos:column="19">override</specifier> <name pos:line="76" pos:column="28">string</name></type> <name pos:line="76" pos:column="35">GetTypeForCharacterLiteral</name><parameter_list pos:line="76" pos:column="61">(<param><decl><type><name pos:line="76" pos:column="62">string</name></type> <name pos:line="76" pos:column="69">literalValue</name></decl></param>)</parameter_list> <block pos:line="76" pos:column="83">{
            <throw pos:line="77" pos:column="13">throw <expr><op:operator pos:line="77" pos:column="19">new</op:operator> <call><name pos:line="77" pos:column="23">NotImplementedException</name><argument_list pos:line="77" pos:column="46">()</argument_list></call></expr>;</throw>
        }</block></function>

        <comment type="line" pos:line="80" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="81" pos:column="9">/// Parses a java number literal</comment>
        <comment type="line" pos:line="82" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="83" pos:column="9">/// &lt;param name="literalValue"&gt;the literal value&lt;/param&gt;</comment>
        <comment type="line" pos:line="84" pos:column="9">/// &lt;returns&gt;not implemented&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="85" pos:column="9">protected</specifier> <specifier pos:line="85" pos:column="19">override</specifier> <name pos:line="85" pos:column="28">string</name></type> <name pos:line="85" pos:column="35">GetTypeForNumberLiteral</name><parameter_list pos:line="85" pos:column="58">(<param><decl><type><name pos:line="85" pos:column="59">string</name></type> <name pos:line="85" pos:column="66">literalValue</name></decl></param>)</parameter_list> <block pos:line="85" pos:column="80">{
            <throw pos:line="86" pos:column="13">throw <expr><op:operator pos:line="86" pos:column="19">new</op:operator> <call><name pos:line="86" pos:column="23">NotImplementedException</name><argument_list pos:line="86" pos:column="46">()</argument_list></call></expr>;</throw>
        }</block></function>

        <comment type="line" pos:line="89" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="90" pos:column="9">/// Parses a java string</comment>
        <comment type="line" pos:line="91" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="92" pos:column="9">/// &lt;param name="literalValue"&gt;the literal value&lt;/param&gt;</comment>
        <comment type="line" pos:line="93" pos:column="9">/// &lt;returns&gt;Not implemented&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="94" pos:column="9">protected</specifier> <specifier pos:line="94" pos:column="19">override</specifier> <name pos:line="94" pos:column="28">string</name></type> <name pos:line="94" pos:column="35">GetTypeForStringLiteral</name><parameter_list pos:line="94" pos:column="58">(<param><decl><type><name pos:line="94" pos:column="59">string</name></type> <name pos:line="94" pos:column="66">literalValue</name></decl></param>)</parameter_list> <block pos:line="94" pos:column="80">{
            <throw pos:line="95" pos:column="13">throw <expr><op:operator pos:line="95" pos:column="19">new</op:operator> <call><name pos:line="95" pos:column="23">NotImplementedException</name><argument_list pos:line="95" pos:column="46">()</argument_list></call></expr>;</throw>
        }</block></function>

        <comment type="line" pos:line="98" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="99" pos:column="9">/// Creates a NamespaceDefinition object from the given Java package element.</comment>
        <comment type="line" pos:line="100" pos:column="9">/// This will create a NamespaceDefinition for each component of the name, e.g. com.java.foo.bar, and link them as children of each other.</comment>
        <comment type="line" pos:line="101" pos:column="9">/// This will not add any child statements to the bottom namespace.</comment>
        <comment type="line" pos:line="102" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="103" pos:column="9">/// &lt;param name="packageElement"&gt;The SRC.Package element to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="104" pos:column="9">/// &lt;param name="context"&gt;The parser context to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="105" pos:column="9">/// &lt;returns&gt;A NamespaceDefinition corresponding to &lt;paramref name="packageElement"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="106" pos:column="9">protected</specifier> <specifier pos:line="106" pos:column="19">override</specifier> <name pos:line="106" pos:column="28">NamespaceDefinition</name></type> <name pos:line="106" pos:column="48">ParseNamespaceElement</name><parameter_list pos:line="106" pos:column="69">(<param><decl><type><name pos:line="106" pos:column="70">XElement</name></type> <name pos:line="106" pos:column="79">packageElement</name></decl></param>, <param><decl><type><name pos:line="106" pos:column="95">ParserContext</name></type> <name pos:line="106" pos:column="109">context</name></decl></param>)</parameter_list> <block pos:line="106" pos:column="118">{
            <if pos:line="107" pos:column="13">if<condition pos:line="107" pos:column="15">(<expr><name pos:line="107" pos:column="16">packageElement</name> <op:operator pos:line="107" pos:column="31">==</op:operator> <name pos:line="107" pos:column="34">null</name></expr>)</condition><then pos:line="107" pos:column="39">
                <throw pos:line="108" pos:column="17">throw <expr><op:operator pos:line="108" pos:column="23">new</op:operator> <call><name pos:line="108" pos:column="27">ArgumentNullException</name><argument_list pos:line="108" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="108" pos:column="49">"packageElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="109" pos:column="13">if<condition pos:line="109" pos:column="15">(<expr><name><name pos:line="109" pos:column="16">packageElement</name><op:operator pos:line="109" pos:column="30">.</op:operator><name pos:line="109" pos:column="31">Name</name></name> <op:operator pos:line="109" pos:column="36">!=</op:operator> <name><name pos:line="109" pos:column="39">SRC</name><op:operator pos:line="109" pos:column="42">.</op:operator><name pos:line="109" pos:column="43">Package</name></name></expr>)</condition><then pos:line="109" pos:column="51">
                <throw pos:line="110" pos:column="17">throw <expr><op:operator pos:line="110" pos:column="23">new</op:operator> <call><name pos:line="110" pos:column="27">ArgumentException</name><argument_list pos:line="110" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="110" pos:column="45">"must be a SRC.Package"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="110" pos:column="70">"packageElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="111" pos:column="13">if<condition pos:line="111" pos:column="15">(<expr><name pos:line="111" pos:column="16">context</name> <op:operator pos:line="111" pos:column="24">==</op:operator> <name pos:line="111" pos:column="27">null</name></expr>)</condition><then pos:line="111" pos:column="32">
                <throw pos:line="112" pos:column="17">throw <expr><op:operator pos:line="112" pos:column="23">new</op:operator> <call><name pos:line="112" pos:column="27">ArgumentNullException</name><argument_list pos:line="112" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="112" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="114" pos:column="13">var</name></type> <name pos:line="114" pos:column="17">nameElement</name> <init pos:line="114" pos:column="29">= <expr><call><name><name pos:line="114" pos:column="31">packageElement</name><op:operator pos:line="114" pos:column="45">.</op:operator><name pos:line="114" pos:column="46">Element</name></name><argument_list pos:line="114" pos:column="53">(<argument><expr><name><name pos:line="114" pos:column="54">SRC</name><op:operator pos:line="114" pos:column="57">.</op:operator><name pos:line="114" pos:column="58">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="115" pos:column="13">if<condition pos:line="115" pos:column="15">(<expr><name pos:line="115" pos:column="16">nameElement</name> <op:operator pos:line="115" pos:column="28">==</op:operator> <name pos:line="115" pos:column="31">null</name></expr>)</condition><then pos:line="115" pos:column="36"> <block pos:line="115" pos:column="37">{
                <throw pos:line="116" pos:column="17">throw <expr><op:operator pos:line="116" pos:column="23">new</op:operator> <call><name pos:line="116" pos:column="27">ParseException</name><argument_list pos:line="116" pos:column="41">(<argument><expr><name><name pos:line="116" pos:column="42">context</name><op:operator pos:line="116" pos:column="49">.</op:operator><name pos:line="116" pos:column="50">FileName</name></name></expr></argument>, <argument><expr><call><name><name pos:line="116" pos:column="60">packageElement</name><op:operator pos:line="116" pos:column="74">.</op:operator><name pos:line="116" pos:column="75">GetSrcLineNumber</name></name><argument_list pos:line="116" pos:column="91">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="116" pos:column="95">packageElement</name><op:operator pos:line="116" pos:column="109">.</op:operator><name pos:line="116" pos:column="110">GetSrcLinePosition</name></name><argument_list pos:line="116" pos:column="128">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="116" pos:column="132">this</name></expr></argument>,
                                            <argument><expr><lit:literal type="string" pos:line="117" pos:column="45">"No SRC.Name element found in namespace."</lit:literal></expr></argument>, <argument><expr><name pos:line="117" pos:column="88">null</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <comment type="line" pos:line="120" pos:column="13">//parse the name and create a NamespaceDefinition for each component</comment>
            <decl_stmt><decl><type><name pos:line="121" pos:column="13">NamespaceDefinition</name></type> <name pos:line="121" pos:column="33">topNS</name> <init pos:line="121" pos:column="39">= <expr><name pos:line="121" pos:column="41">null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="122" pos:column="13">NamespaceDefinition</name></type> <name pos:line="122" pos:column="33">lastNS</name> <init pos:line="122" pos:column="40">= <expr><name pos:line="122" pos:column="42">null</name></expr></init></decl>;</decl_stmt>
            <foreach pos:line="123" pos:column="13">foreach(<init><decl><type><name pos:line="123" pos:column="21">var</name></type> <name pos:line="123" pos:column="25">name</name> <range pos:line="123" pos:column="30">in <expr><call><name><name pos:line="123" pos:column="33">NameHelper</name><op:operator pos:line="123" pos:column="43">.</op:operator><name pos:line="123" pos:column="44">GetNameElementsFromName</name></name><argument_list pos:line="123" pos:column="67">(<argument><expr><name pos:line="123" pos:column="68">nameElement</name></expr></argument>)</argument_list></call></expr></range></decl></init>) <block pos:line="123" pos:column="82">{
                <decl_stmt><decl><type><name pos:line="124" pos:column="17">var</name></type> <name pos:line="124" pos:column="21">newNS</name> <init pos:line="124" pos:column="27">= <expr><op:operator pos:line="124" pos:column="29">new</op:operator> <name pos:line="124" pos:column="33">NamespaceDefinition</name> <block pos:line="124" pos:column="53">{
                    <expr><name pos:line="125" pos:column="21">Name</name> <op:operator pos:line="125" pos:column="26">=</op:operator> <name><name pos:line="125" pos:column="28">name</name><op:operator pos:line="125" pos:column="32">.</op:operator><name pos:line="125" pos:column="33">Value</name></name></expr>,
                    <expr><name pos:line="126" pos:column="21">ProgrammingLanguage</name> <op:operator pos:line="126" pos:column="41">=</op:operator> <name pos:line="126" pos:column="43">ParserLanguage</name></expr>
                }</block></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="128" pos:column="17">newNS</name><op:operator pos:line="128" pos:column="22">.</op:operator><name pos:line="128" pos:column="23">AddLocation</name></name><argument_list pos:line="128" pos:column="34">(<argument><expr><call><name><name pos:line="128" pos:column="35">context</name><op:operator pos:line="128" pos:column="42">.</op:operator><name pos:line="128" pos:column="43">CreateLocation</name></name><argument_list pos:line="128" pos:column="57">(<argument><expr><name pos:line="128" pos:column="58">name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="129" pos:column="17">if<condition pos:line="129" pos:column="19">(<expr><name pos:line="129" pos:column="20">topNS</name> <op:operator pos:line="129" pos:column="26">==</op:operator> <name pos:line="129" pos:column="29">null</name></expr>)</condition><then pos:line="129" pos:column="34"> <block pos:line="129" pos:column="35">{ <expr_stmt><expr><name pos:line="129" pos:column="37">topNS</name> <op:operator pos:line="129" pos:column="43">=</op:operator> <name pos:line="129" pos:column="45">newNS</name></expr>;</expr_stmt> }</block></then></if>
                <if pos:line="130" pos:column="17">if<condition pos:line="130" pos:column="19">(<expr><name pos:line="130" pos:column="20">lastNS</name> <op:operator pos:line="130" pos:column="27">!=</op:operator> <name pos:line="130" pos:column="30">null</name></expr>)</condition><then pos:line="130" pos:column="35"> <block pos:line="130" pos:column="36">{
                    <expr_stmt><expr><call><name><name pos:line="131" pos:column="21">lastNS</name><op:operator pos:line="131" pos:column="27">.</op:operator><name pos:line="131" pos:column="28">AddChildStatement</name></name><argument_list pos:line="131" pos:column="45">(<argument><expr><name pos:line="131" pos:column="46">newNS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name pos:line="133" pos:column="17">lastNS</name> <op:operator pos:line="133" pos:column="24">=</op:operator> <name pos:line="133" pos:column="26">newNS</name></expr>;</expr_stmt>
            }</block></foreach>

            <return pos:line="136" pos:column="13">return <expr><name pos:line="136" pos:column="20">topNS</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="139" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="140" pos:column="9">/// Parses a java file unit. This handles the "package" directive by calling</comment>
        <comment type="line" pos:line="141" pos:column="9">/// &lt;see cref="ParseNamespaceElement"/&gt;</comment>
        <comment type="line" pos:line="142" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="143" pos:column="9">/// &lt;param name="unitElement"&gt;The file unit to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="144" pos:column="9">/// &lt;param name="context"&gt;The parser context to use.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="145" pos:column="9">protected</specifier> <specifier pos:line="145" pos:column="19">override</specifier> <name pos:line="145" pos:column="28">NamespaceDefinition</name></type> <name pos:line="145" pos:column="48">ParseUnitElement</name><parameter_list pos:line="145" pos:column="64">(<param><decl><type><name pos:line="145" pos:column="65">XElement</name></type> <name pos:line="145" pos:column="74">unitElement</name></decl></param>, <param><decl><type><name pos:line="145" pos:column="87">ParserContext</name></type> <name pos:line="145" pos:column="101">context</name></decl></param>)</parameter_list> <block pos:line="145" pos:column="110">{
            <if pos:line="146" pos:column="13">if<condition pos:line="146" pos:column="15">(<expr><name pos:line="146" pos:column="16">null</name> <op:operator pos:line="146" pos:column="21">==</op:operator> <name pos:line="146" pos:column="24">unitElement</name></expr>)</condition><then pos:line="146" pos:column="36">
                <throw pos:line="147" pos:column="17">throw <expr><op:operator pos:line="147" pos:column="23">new</op:operator> <call><name pos:line="147" pos:column="27">ArgumentNullException</name><argument_list pos:line="147" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="147" pos:column="49">"unitElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="148" pos:column="13">if<condition pos:line="148" pos:column="15">(<expr><name><name pos:line="148" pos:column="16">SRC</name><op:operator pos:line="148" pos:column="19">.</op:operator><name pos:line="148" pos:column="20">Unit</name></name> <op:operator pos:line="148" pos:column="25">!=</op:operator> <name><name pos:line="148" pos:column="28">unitElement</name><op:operator pos:line="148" pos:column="39">.</op:operator><name pos:line="148" pos:column="40">Name</name></name></expr>)</condition><then pos:line="148" pos:column="45">
                <throw pos:line="149" pos:column="17">throw <expr><op:operator pos:line="149" pos:column="23">new</op:operator> <call><name pos:line="149" pos:column="27">ArgumentException</name><argument_list pos:line="149" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="149" pos:column="45">"should be a SRC.Unit"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="149" pos:column="69">"unitElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="150" pos:column="13">if<condition pos:line="150" pos:column="15">(<expr><name pos:line="150" pos:column="16">context</name> <op:operator pos:line="150" pos:column="24">==</op:operator> <name pos:line="150" pos:column="27">null</name></expr>)</condition><then pos:line="150" pos:column="32">
                <throw pos:line="151" pos:column="17">throw <expr><op:operator pos:line="151" pos:column="23">new</op:operator> <call><name pos:line="151" pos:column="27">ArgumentNullException</name><argument_list pos:line="151" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="151" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <expr_stmt><expr><name><name pos:line="152" pos:column="13">context</name><op:operator pos:line="152" pos:column="20">.</op:operator><name pos:line="152" pos:column="21">FileUnit</name></name> <op:operator pos:line="152" pos:column="30">=</op:operator> <name pos:line="152" pos:column="32">unitElement</name></expr>;</expr_stmt>
            <comment type="line" pos:line="153" pos:column="13">//var aliases = from aliasStatement in GetAliasElementsForFile(unitElement)</comment>
            <comment type="line" pos:line="154" pos:column="13">//              select ParseAliasElement(aliasStatement, context);</comment>

            <comment type="line" pos:line="156" pos:column="13">//context.Aliases = new Collection&lt;Alias&gt;(aliases.ToList());</comment>

            <comment type="line" pos:line="158" pos:column="13">//create a global namespace for the file unit</comment>
            <decl_stmt><decl><type><name pos:line="159" pos:column="13">var</name></type> <name pos:line="159" pos:column="17">namespaceForUnit</name> <init pos:line="159" pos:column="34">= <expr><op:operator pos:line="159" pos:column="36">new</op:operator> <call><name pos:line="159" pos:column="40">NamespaceDefinition</name><argument_list pos:line="159" pos:column="59">()</argument_list></call> <block pos:line="159" pos:column="62">{<expr><name pos:line="159" pos:column="63">ProgrammingLanguage</name> <op:operator pos:line="159" pos:column="83">=</op:operator> <name pos:line="159" pos:column="85">ParserLanguage</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="160" pos:column="13">namespaceForUnit</name><op:operator pos:line="160" pos:column="29">.</op:operator><name pos:line="160" pos:column="30">AddLocation</name></name><argument_list pos:line="160" pos:column="41">(<argument><expr><call><name><name pos:line="160" pos:column="42">context</name><op:operator pos:line="160" pos:column="49">.</op:operator><name pos:line="160" pos:column="50">CreateLocation</name></name><argument_list pos:line="160" pos:column="64">(<argument><expr><name pos:line="160" pos:column="65">unitElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="161" pos:column="13">NamespaceDefinition</name></type> <name pos:line="161" pos:column="33">bottomNamespace</name> <init pos:line="161" pos:column="49">= <expr><name pos:line="161" pos:column="51">namespaceForUnit</name></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="163" pos:column="13">//create a namespace for the package, and attach to global namespace</comment>
            <decl_stmt><decl><type><name pos:line="164" pos:column="13">var</name></type> <name pos:line="164" pos:column="17">packageElement</name> <init pos:line="164" pos:column="32">= <expr><call><name><name pos:line="164" pos:column="34">unitElement</name><op:operator pos:line="164" pos:column="45">.</op:operator><name pos:line="164" pos:column="46">Element</name></name><argument_list pos:line="164" pos:column="53">(<argument><expr><name><name pos:line="164" pos:column="54">SRC</name><op:operator pos:line="164" pos:column="57">.</op:operator><name pos:line="164" pos:column="58">Package</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="165" pos:column="13">if<condition pos:line="165" pos:column="15">(<expr><name pos:line="165" pos:column="16">packageElement</name> <op:operator pos:line="165" pos:column="31">!=</op:operator> <name pos:line="165" pos:column="34">null</name></expr>)</condition><then pos:line="165" pos:column="39"> <block pos:line="165" pos:column="40">{
                <decl_stmt><decl><type><name pos:line="166" pos:column="17">var</name></type> <name pos:line="166" pos:column="21">namespaceForPackage</name> <init pos:line="166" pos:column="41">= <expr><call><name pos:line="166" pos:column="43">ParseNamespaceElement</name><argument_list pos:line="166" pos:column="64">(<argument><expr><name pos:line="166" pos:column="65">packageElement</name></expr></argument>, <argument><expr><name pos:line="166" pos:column="81">context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="167" pos:column="17">namespaceForUnit</name><op:operator pos:line="167" pos:column="33">.</op:operator><name pos:line="167" pos:column="34">AddChildStatement</name></name><argument_list pos:line="167" pos:column="51">(<argument><expr><name pos:line="167" pos:column="52">namespaceForPackage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="168" pos:column="17">bottomNamespace</name> <op:operator pos:line="168" pos:column="33">=</op:operator> <call><name><name pos:line="168" pos:column="35">namespaceForPackage</name><op:operator pos:line="168" pos:column="54">.</op:operator><name><name pos:line="168" pos:column="55">GetDescendantsAndSelf</name><argument_list pos:line="168" pos:column="76">&lt;<argument><name pos:line="168" pos:column="77">NamespaceDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="168" pos:column="97">()</argument_list></call><op:operator pos:line="168" pos:column="99">.</op:operator><call><name pos:line="168" pos:column="100">Last</name><argument_list pos:line="168" pos:column="104">()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <comment type="line" pos:line="171" pos:column="13">//add children to bottom namespace</comment>
            <foreach pos:line="172" pos:column="13">foreach(<init><decl><type><name pos:line="172" pos:column="21">var</name></type> <name pos:line="172" pos:column="25">child</name> <range pos:line="172" pos:column="31">in <expr><call><name><name pos:line="172" pos:column="34">unitElement</name><op:operator pos:line="172" pos:column="45">.</op:operator><name pos:line="172" pos:column="46">Elements</name></name><argument_list pos:line="172" pos:column="54">()</argument_list></call></expr></range></decl></init>) <block pos:line="172" pos:column="58">{
                <decl_stmt><decl><type><name pos:line="173" pos:column="17">var</name></type> <name pos:line="173" pos:column="21">childStmt</name> <init pos:line="173" pos:column="31">= <expr><call><name pos:line="173" pos:column="33">ParseStatement</name><argument_list pos:line="173" pos:column="47">(<argument><expr><name pos:line="173" pos:column="48">child</name></expr></argument>, <argument><expr><name pos:line="173" pos:column="55">context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="174" pos:column="17">if<condition pos:line="174" pos:column="19">(<expr><name pos:line="174" pos:column="20">childStmt</name> <op:operator pos:line="174" pos:column="30">!=</op:operator> <name pos:line="174" pos:column="33">null</name></expr>)</condition><then pos:line="174" pos:column="38"> <block pos:line="174" pos:column="39">{
                    <expr_stmt><expr><call><name><name pos:line="175" pos:column="21">bottomNamespace</name><op:operator pos:line="175" pos:column="36">.</op:operator><name pos:line="175" pos:column="37">AddChildStatement</name></name><argument_list pos:line="175" pos:column="54">(<argument><expr><name pos:line="175" pos:column="55">childStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></foreach>

            <return pos:line="179" pos:column="13">return <expr><name pos:line="179" pos:column="20">namespaceForUnit</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="182" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="183" pos:column="9">/// Creates a ForStatement or ForeachStatement from the given element.</comment>
        <comment type="line" pos:line="184" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="185" pos:column="9">/// &lt;param name="forElement"&gt;The SRC.For element to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="186" pos:column="9">/// &lt;param name="context"&gt;The parser context to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="187" pos:column="9">/// &lt;returns&gt;A ForStatement or ForeachStatement corresponding to forElement.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="188" pos:column="9">protected</specifier> <specifier pos:line="188" pos:column="19">override</specifier> <name pos:line="188" pos:column="28">ConditionBlockStatement</name></type> <name pos:line="188" pos:column="52">ParseForElement</name><parameter_list pos:line="188" pos:column="67">(<param><decl><type><name pos:line="188" pos:column="68">XElement</name></type> <name pos:line="188" pos:column="77">forElement</name></decl></param>, <param><decl><type><name pos:line="188" pos:column="89">ParserContext</name></type> <name pos:line="188" pos:column="103">context</name></decl></param>)</parameter_list> <block pos:line="188" pos:column="112">{
            <if pos:line="189" pos:column="13">if<condition pos:line="189" pos:column="15">(<expr><name pos:line="189" pos:column="16">forElement</name> <op:operator pos:line="189" pos:column="27">==</op:operator> <name pos:line="189" pos:column="30">null</name></expr>)</condition><then pos:line="189" pos:column="35">
                <throw pos:line="190" pos:column="17">throw <expr><op:operator pos:line="190" pos:column="23">new</op:operator> <call><name pos:line="190" pos:column="27">ArgumentNullException</name><argument_list pos:line="190" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="190" pos:column="49">"forElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="191" pos:column="13">if<condition pos:line="191" pos:column="15">(<expr><name><name pos:line="191" pos:column="16">forElement</name><op:operator pos:line="191" pos:column="26">.</op:operator><name pos:line="191" pos:column="27">Name</name></name> <op:operator pos:line="191" pos:column="32">!=</op:operator> <name><name pos:line="191" pos:column="35">SRC</name><op:operator pos:line="191" pos:column="38">.</op:operator><name pos:line="191" pos:column="39">For</name></name></expr>)</condition><then pos:line="191" pos:column="43">
                <throw pos:line="192" pos:column="17">throw <expr><op:operator pos:line="192" pos:column="23">new</op:operator> <call><name pos:line="192" pos:column="27">ArgumentException</name><argument_list pos:line="192" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="192" pos:column="45">"Must be a SRC.For element"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="192" pos:column="74">"forElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="193" pos:column="13">if<condition pos:line="193" pos:column="15">(<expr><name pos:line="193" pos:column="16">context</name> <op:operator pos:line="193" pos:column="24">==</op:operator> <name pos:line="193" pos:column="27">null</name></expr>)</condition><then pos:line="193" pos:column="32">
                <throw pos:line="194" pos:column="17">throw <expr><op:operator pos:line="194" pos:column="23">new</op:operator> <call><name pos:line="194" pos:column="27">ArgumentNullException</name><argument_list pos:line="194" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="194" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <if pos:line="196" pos:column="13">if<condition pos:line="196" pos:column="15">(<expr><call><name><name pos:line="196" pos:column="16">forElement</name><op:operator pos:line="196" pos:column="26">.</op:operator><name pos:line="196" pos:column="27">Element</name></name><argument_list pos:line="196" pos:column="34">(<argument><expr><name><name pos:line="196" pos:column="35">SRC</name><op:operator pos:line="196" pos:column="38">.</op:operator><name pos:line="196" pos:column="39">Condition</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="196" pos:column="50">!=</op:operator> <name pos:line="196" pos:column="53">null</name></expr>)</condition><then pos:line="196" pos:column="58"> <block pos:line="196" pos:column="59">{
                <comment type="line" pos:line="197" pos:column="17">//this is a standard for-loop, use the base processing</comment>
                <return pos:line="198" pos:column="17">return <expr><call><name><name pos:line="198" pos:column="24">base</name><op:operator pos:line="198" pos:column="28">.</op:operator><name pos:line="198" pos:column="29">ParseForElement</name></name><argument_list pos:line="198" pos:column="44">(<argument><expr><name pos:line="198" pos:column="45">forElement</name></expr></argument>, <argument><expr><name pos:line="198" pos:column="57">context</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>

            <comment type="line" pos:line="201" pos:column="13">//else, this is a Java-style foreach loop</comment>
            <decl_stmt><decl><type><name pos:line="202" pos:column="13">var</name></type> <name pos:line="202" pos:column="17">foreachStmt</name> <init pos:line="202" pos:column="29">= <expr><op:operator pos:line="202" pos:column="31">new</op:operator> <call><name pos:line="202" pos:column="35">ForeachStatement</name><argument_list pos:line="202" pos:column="51">()</argument_list></call> <block pos:line="202" pos:column="54">{<expr><name pos:line="202" pos:column="55">ProgrammingLanguage</name> <op:operator pos:line="202" pos:column="75">=</op:operator> <name pos:line="202" pos:column="77">ParserLanguage</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="203" pos:column="13">foreachStmt</name><op:operator pos:line="203" pos:column="24">.</op:operator><name pos:line="203" pos:column="25">AddLocation</name></name><argument_list pos:line="203" pos:column="36">(<argument><expr><call><name><name pos:line="203" pos:column="37">context</name><op:operator pos:line="203" pos:column="44">.</op:operator><name pos:line="203" pos:column="45">CreateLocation</name></name><argument_list pos:line="203" pos:column="59">(<argument><expr><name pos:line="203" pos:column="60">forElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <foreach pos:line="205" pos:column="13">foreach(<init><decl><type><name pos:line="205" pos:column="21">var</name></type> <name pos:line="205" pos:column="25">child</name> <range pos:line="205" pos:column="31">in <expr><call><name><name pos:line="205" pos:column="34">forElement</name><op:operator pos:line="205" pos:column="44">.</op:operator><name pos:line="205" pos:column="45">Elements</name></name><argument_list pos:line="205" pos:column="53">()</argument_list></call></expr></range></decl></init>) <block pos:line="205" pos:column="57">{
                <if pos:line="206" pos:column="17">if<condition pos:line="206" pos:column="19">(<expr><name><name pos:line="206" pos:column="20">child</name><op:operator pos:line="206" pos:column="25">.</op:operator><name pos:line="206" pos:column="26">Name</name></name> <op:operator pos:line="206" pos:column="31">==</op:operator> <name><name pos:line="206" pos:column="34">SRC</name><op:operator pos:line="206" pos:column="37">.</op:operator><name pos:line="206" pos:column="38">Init</name></name></expr>)</condition><then pos:line="206" pos:column="43"> <block pos:line="206" pos:column="44">{
                    <comment type="line" pos:line="207" pos:column="21">//fill in condition/initializer</comment>
                    <decl_stmt><decl><type><name pos:line="208" pos:column="21">var</name></type> <name pos:line="208" pos:column="25">expElement</name> <init pos:line="208" pos:column="36">= <expr><call><name pos:line="208" pos:column="38">GetFirstChildExpression</name><argument_list pos:line="208" pos:column="61">(<argument><expr><name pos:line="208" pos:column="62">child</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="209" pos:column="21">if<condition pos:line="209" pos:column="23">(<expr><name pos:line="209" pos:column="24">expElement</name> <op:operator pos:line="209" pos:column="35">!=</op:operator> <name pos:line="209" pos:column="38">null</name></expr>)</condition><then pos:line="209" pos:column="43"> <block pos:line="209" pos:column="44">{
                        <expr_stmt><expr><name><name pos:line="210" pos:column="25">foreachStmt</name><op:operator pos:line="210" pos:column="36">.</op:operator><name pos:line="210" pos:column="37">Condition</name></name> <op:operator pos:line="210" pos:column="47">=</op:operator> <call><name pos:line="210" pos:column="49">ParseExpression</name><argument_list pos:line="210" pos:column="64">(<argument><expr><name pos:line="210" pos:column="65">expElement</name></expr></argument>, <argument><expr><name pos:line="210" pos:column="77">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then>
                <else pos:line="213" pos:column="17">else <if pos:line="213" pos:column="22">if<condition pos:line="213" pos:column="24">(<expr><name><name pos:line="213" pos:column="25">child</name><op:operator pos:line="213" pos:column="30">.</op:operator><name pos:line="213" pos:column="31">Name</name></name> <op:operator pos:line="213" pos:column="36">==</op:operator> <name><name pos:line="213" pos:column="39">SRC</name><op:operator pos:line="213" pos:column="42">.</op:operator><name pos:line="213" pos:column="43">Block</name></name></expr>)</condition><then pos:line="213" pos:column="49"> <block pos:line="213" pos:column="50">{
                    <comment type="line" pos:line="214" pos:column="21">//add children from block</comment>
                    <decl_stmt><decl><type><name pos:line="215" pos:column="21">var</name></type> <name pos:line="215" pos:column="25">blockStatements</name> <init pos:line="215" pos:column="41">= <expr><call><name><name pos:line="215" pos:column="43">child</name><op:operator pos:line="215" pos:column="48">.</op:operator><name pos:line="215" pos:column="49">Elements</name></name><argument_list pos:line="215" pos:column="57">()</argument_list></call><op:operator pos:line="215" pos:column="59">.</op:operator><call><name pos:line="215" pos:column="60">Select</name><argument_list pos:line="215" pos:column="66">(<argument><expr><lambda><name pos:line="215" pos:column="67">e</name> <op:operator pos:line="215" pos:column="69">=&gt;</op:operator> <call><name pos:line="215" pos:column="72">ParseStatement</name><argument_list pos:line="215" pos:column="86">(<argument><expr><name pos:line="215" pos:column="87">e</name></expr></argument>, <argument><expr><name pos:line="215" pos:column="90">context</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="216" pos:column="21">foreachStmt</name><op:operator pos:line="216" pos:column="32">.</op:operator><name pos:line="216" pos:column="33">AddChildStatements</name></name><argument_list pos:line="216" pos:column="51">(<argument><expr><name pos:line="216" pos:column="52">blockStatements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="217" pos:column="19">else <block pos:line="217" pos:column="24">{
                    <comment type="line" pos:line="218" pos:column="21">//add child</comment>
                    <expr_stmt><expr><call><name><name pos:line="219" pos:column="21">foreachStmt</name><op:operator pos:line="219" pos:column="32">.</op:operator><name pos:line="219" pos:column="33">AddChildStatement</name></name><argument_list pos:line="219" pos:column="50">(<argument><expr><call><name pos:line="219" pos:column="51">ParseStatement</name><argument_list pos:line="219" pos:column="65">(<argument><expr><name pos:line="219" pos:column="66">child</name></expr></argument>, <argument><expr><name pos:line="219" pos:column="73">context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if></else></if>
            }</block></foreach>

            <return pos:line="223" pos:column="13">return <expr><name pos:line="223" pos:column="20">foreachStmt</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="226" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="227" pos:column="9">/// Parses the given &lt;paramref name="aliasElement"/&gt; and creates an ImportStatement or AliasStatement from it.</comment>
        <comment type="line" pos:line="228" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="229" pos:column="9">/// &lt;param name="aliasElement"&gt;The alias element to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="230" pos:column="9">/// &lt;param name="context"&gt;The parser context to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="231" pos:column="9">/// &lt;returns&gt;An ImportStatement if the element is an import, or an AliasStatement if it is an alias.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="232" pos:column="9">protected</specifier> <specifier pos:line="232" pos:column="19">override</specifier> <name pos:line="232" pos:column="28">Statement</name></type> <name pos:line="232" pos:column="38">ParseAliasElement</name><parameter_list pos:line="232" pos:column="55">(<param><decl><type><name pos:line="232" pos:column="56">XElement</name></type> <name pos:line="232" pos:column="65">aliasElement</name></decl></param>, <param><decl><type><name pos:line="232" pos:column="79">ParserContext</name></type> <name pos:line="232" pos:column="93">context</name></decl></param>)</parameter_list> <block pos:line="232" pos:column="102">{
            <if pos:line="233" pos:column="13">if<condition pos:line="233" pos:column="15">(<expr><name pos:line="233" pos:column="16">aliasElement</name> <op:operator pos:line="233" pos:column="29">==</op:operator> <name pos:line="233" pos:column="32">null</name></expr>)</condition><then pos:line="233" pos:column="37">
                <throw pos:line="234" pos:column="17">throw <expr><op:operator pos:line="234" pos:column="23">new</op:operator> <call><name pos:line="234" pos:column="27">ArgumentNullException</name><argument_list pos:line="234" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="234" pos:column="49">"aliasElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="235" pos:column="13">if<condition pos:line="235" pos:column="15">(<expr><name><name pos:line="235" pos:column="16">aliasElement</name><op:operator pos:line="235" pos:column="28">.</op:operator><name pos:line="235" pos:column="29">Name</name></name> <op:operator pos:line="235" pos:column="34">!=</op:operator> <name pos:line="235" pos:column="37">AliasElementName</name></expr>)</condition><then pos:line="235" pos:column="54">
                <throw pos:line="236" pos:column="17">throw <expr><op:operator pos:line="236" pos:column="23">new</op:operator> <call><name pos:line="236" pos:column="27">ArgumentException</name><argument_list pos:line="236" pos:column="44">(<argument><expr><call><name><name pos:line="236" pos:column="45">string</name><op:operator pos:line="236" pos:column="51">.</op:operator><name pos:line="236" pos:column="52">Format</name></name><argument_list pos:line="236" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="236" pos:column="59">"Must be a SRC.{0} element"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="236" pos:column="88">AliasElementName</name><op:operator pos:line="236" pos:column="104">.</op:operator><name pos:line="236" pos:column="105">LocalName</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="236" pos:column="117">"aliasElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="237" pos:column="13">if<condition pos:line="237" pos:column="15">(<expr><name pos:line="237" pos:column="16">context</name> <op:operator pos:line="237" pos:column="24">==</op:operator> <name pos:line="237" pos:column="27">null</name></expr>)</condition><then pos:line="237" pos:column="32">
                <throw pos:line="238" pos:column="17">throw <expr><op:operator pos:line="238" pos:column="23">new</op:operator> <call><name pos:line="238" pos:column="27">ArgumentNullException</name><argument_list pos:line="238" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="238" pos:column="49">"context"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="240" pos:column="13">var</name></type> <name pos:line="240" pos:column="17">isNamespaceImport</name> <init pos:line="240" pos:column="35">= <expr><call><name pos:line="240" pos:column="37">GetTextNodes</name><argument_list pos:line="240" pos:column="49">(<argument><expr><name pos:line="240" pos:column="50">aliasElement</name></expr></argument>)</argument_list></call><op:operator pos:line="240" pos:column="63">.</op:operator><call><name pos:line="240" pos:column="64">Any</name><argument_list pos:line="240" pos:column="67">(<argument><expr><lambda><name pos:line="240" pos:column="68">n</name> <op:operator pos:line="240" pos:column="70">=&gt;</op:operator> <call><name><name pos:line="240" pos:column="73">n</name><op:operator pos:line="240" pos:column="74">.</op:operator><name pos:line="240" pos:column="75">Value</name><op:operator pos:line="240" pos:column="80">.</op:operator><name pos:line="240" pos:column="81">Contains</name></name><argument_list pos:line="240" pos:column="89">(<argument><expr><lit:literal type="string" pos:line="240" pos:column="90">"*"</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="242" pos:column="13">Statement</name></type> <name pos:line="242" pos:column="23">stmt</name> <init pos:line="242" pos:column="28">= <expr><name pos:line="242" pos:column="30">null</name></expr></init></decl>;</decl_stmt>
            <if pos:line="243" pos:column="13">if<condition pos:line="243" pos:column="15">(<expr><name pos:line="243" pos:column="16">isNamespaceImport</name></expr>)</condition><then pos:line="243" pos:column="34"> <block pos:line="243" pos:column="35">{
                <comment type="line" pos:line="244" pos:column="17">//namespace import</comment>
                <decl_stmt><decl><type><name pos:line="245" pos:column="17">var</name></type> <name pos:line="245" pos:column="21">import</name> <init pos:line="245" pos:column="28">= <expr><op:operator pos:line="245" pos:column="30">new</op:operator> <call><name pos:line="245" pos:column="34">ImportStatement</name><argument_list pos:line="245" pos:column="49">()</argument_list></call> <block pos:line="245" pos:column="52">{<expr><name pos:line="245" pos:column="53">ProgrammingLanguage</name> <op:operator pos:line="245" pos:column="73">=</op:operator> <name pos:line="245" pos:column="75">ParserLanguage</name></expr>}</block></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="246" pos:column="17">import</name><op:operator pos:line="246" pos:column="23">.</op:operator><name pos:line="246" pos:column="24">AddLocation</name></name><argument_list pos:line="246" pos:column="35">(<argument><expr><call><name><name pos:line="246" pos:column="36">context</name><op:operator pos:line="246" pos:column="43">.</op:operator><name pos:line="246" pos:column="44">CreateLocation</name></name><argument_list pos:line="246" pos:column="58">(<argument><expr><name pos:line="246" pos:column="59">aliasElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="247" pos:column="17">var</name></type> <name pos:line="247" pos:column="21">nameElement</name> <init pos:line="247" pos:column="33">= <expr><call><name><name pos:line="247" pos:column="35">aliasElement</name><op:operator pos:line="247" pos:column="47">.</op:operator><name pos:line="247" pos:column="48">Element</name></name><argument_list pos:line="247" pos:column="55">(<argument><expr><name><name pos:line="247" pos:column="56">SRC</name><op:operator pos:line="247" pos:column="59">.</op:operator><name pos:line="247" pos:column="60">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="248" pos:column="17">if<condition pos:line="248" pos:column="19">(<expr><name pos:line="248" pos:column="20">nameElement</name> <op:operator pos:line="248" pos:column="32">!=</op:operator> <name pos:line="248" pos:column="35">null</name></expr>)</condition><then pos:line="248" pos:column="40"> <block pos:line="248" pos:column="41">{
                    <expr_stmt><expr><name><name pos:line="249" pos:column="21">import</name><op:operator pos:line="249" pos:column="27">.</op:operator><name pos:line="249" pos:column="28">ImportedNamespace</name></name> <op:operator pos:line="249" pos:column="46">=</op:operator> <call><name><name pos:line="249" pos:column="48">ParseNameUseElement</name><argument_list pos:line="249" pos:column="67">&lt;<argument><name pos:line="249" pos:column="68">NamespaceUse</name></argument>&gt;</argument_list></name><argument_list pos:line="249" pos:column="81">(<argument><expr><name pos:line="249" pos:column="82">nameElement</name></expr></argument>, <argument><expr><name pos:line="249" pos:column="95">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="line" pos:line="250" pos:column="21">//TODO: fix to handle the trailing operator tag</comment>
                }</block></then></if>
                <expr_stmt><expr><name pos:line="252" pos:column="17">stmt</name> <op:operator pos:line="252" pos:column="22">=</op:operator> <name pos:line="252" pos:column="24">import</name></expr>;</expr_stmt>
            }</block></then> <else pos:line="253" pos:column="15">else <block pos:line="253" pos:column="20">{
                <comment type="line" pos:line="254" pos:column="17">//importing a single member, i.e. an alias</comment>
                <decl_stmt><decl><type><name pos:line="255" pos:column="17">var</name></type> <name pos:line="255" pos:column="21">alias</name> <init pos:line="255" pos:column="27">= <expr><op:operator pos:line="255" pos:column="29">new</op:operator> <call><name pos:line="255" pos:column="33">AliasStatement</name><argument_list pos:line="255" pos:column="47">()</argument_list></call> <block pos:line="255" pos:column="50">{<expr><name pos:line="255" pos:column="51">ProgrammingLanguage</name> <op:operator pos:line="255" pos:column="71">=</op:operator> <name pos:line="255" pos:column="73">ParserLanguage</name></expr>}</block></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="256" pos:column="17">alias</name><op:operator pos:line="256" pos:column="22">.</op:operator><name pos:line="256" pos:column="23">AddLocation</name></name><argument_list pos:line="256" pos:column="34">(<argument><expr><call><name><name pos:line="256" pos:column="35">context</name><op:operator pos:line="256" pos:column="42">.</op:operator><name pos:line="256" pos:column="43">CreateLocation</name></name><argument_list pos:line="256" pos:column="57">(<argument><expr><name pos:line="256" pos:column="58">aliasElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="257" pos:column="17">var</name></type> <name pos:line="257" pos:column="21">nameElement</name> <init pos:line="257" pos:column="33">= <expr><call><name><name pos:line="257" pos:column="35">aliasElement</name><op:operator pos:line="257" pos:column="47">.</op:operator><name pos:line="257" pos:column="48">Element</name></name><argument_list pos:line="257" pos:column="55">(<argument><expr><name><name pos:line="257" pos:column="56">SRC</name><op:operator pos:line="257" pos:column="59">.</op:operator><name pos:line="257" pos:column="60">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="258" pos:column="17">if<condition pos:line="258" pos:column="19">(<expr><name pos:line="258" pos:column="20">nameElement</name> <op:operator pos:line="258" pos:column="32">!=</op:operator> <name pos:line="258" pos:column="35">null</name></expr>)</condition><then pos:line="258" pos:column="40"> <block pos:line="258" pos:column="41">{
                    <expr_stmt><expr><name><name pos:line="259" pos:column="21">alias</name><op:operator pos:line="259" pos:column="26">.</op:operator><name pos:line="259" pos:column="27">Target</name></name> <op:operator pos:line="259" pos:column="34">=</op:operator> <call><name pos:line="259" pos:column="36">ParseExpression</name><argument_list pos:line="259" pos:column="51">(<argument><expr><name pos:line="259" pos:column="52">nameElement</name></expr></argument>, <argument><expr><name pos:line="259" pos:column="65">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="260" pos:column="21">alias</name><op:operator pos:line="260" pos:column="26">.</op:operator><name pos:line="260" pos:column="27">AliasName</name></name> <op:operator pos:line="260" pos:column="37">=</op:operator> <call><name><name pos:line="260" pos:column="39">NameHelper</name><op:operator pos:line="260" pos:column="49">.</op:operator><name pos:line="260" pos:column="50">GetLastName</name></name><argument_list pos:line="260" pos:column="61">(<argument><expr><name pos:line="260" pos:column="62">nameElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name pos:line="262" pos:column="17">stmt</name> <op:operator pos:line="262" pos:column="22">=</op:operator> <name pos:line="262" pos:column="24">alias</name></expr>;</expr_stmt>
            }</block></else></if>

            <return pos:line="265" pos:column="13">return <expr><name pos:line="265" pos:column="20">stmt</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
