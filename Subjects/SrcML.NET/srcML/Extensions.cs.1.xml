<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML\Extensions.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2010 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">System</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Collections</name><op:operator pos:line="13" pos:column="25">.</op:operator><name pos:line="13" pos:column="26">Generic</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Linq</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Text</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Xml</name><op:operator pos:line="16" pos:column="17">.</op:operator><name pos:line="16" pos:column="18">Linq</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Xml</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">IO</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">System</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">Globalization</name></name>;</using>

<namespace pos:line="21" pos:column="1">namespace <name><name pos:line="21" pos:column="11">ABB</name><op:operator pos:line="21" pos:column="14">.</op:operator><name pos:line="21" pos:column="15">SrcML</name></name>
<block pos:line="22" pos:column="1">{
    <comment type="line" pos:line="23" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="24" pos:column="5">/// Extensions for working with SrcML documents</comment>
    <comment type="line" pos:line="25" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="26" pos:column="5">public</specifier> <specifier pos:line="26" pos:column="12">static</specifier> class <name pos:line="26" pos:column="25">Extensions</name>
    <block pos:line="27" pos:column="5">{
        <cpp:region pos:line="28" pos:column="9">#<cpp:directive pos:line="28" pos:column="10">region</cpp:directive> UNUSED</cpp:region>
        <comment type="line" pos:line="29" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="30" pos:column="9">/// Checks whether the given container contains a call to the specified function.</comment>
        <comment type="line" pos:line="31" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="32" pos:column="9">/// &lt;param name="container"&gt;The container to test.&lt;/param&gt;</comment>
        <comment type="line" pos:line="33" pos:column="9">/// &lt;param name="functionName"&gt;The function name to look for.&lt;/param&gt;</comment>
        <comment type="line" pos:line="34" pos:column="9">/// &lt;returns&gt;True if the call exists, false if not.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="35" pos:column="9">public</specifier> <specifier pos:line="35" pos:column="16">static</specifier> <name pos:line="35" pos:column="23">bool</name></type> <name pos:line="35" pos:column="28">ContainsCallTo</name><parameter_list pos:line="35" pos:column="42">(<param><decl><type><name pos:line="35" pos:column="43">this</name> <name pos:line="35" pos:column="48">XContainer</name></type> <name pos:line="35" pos:column="59">container</name></decl></param>, <param><decl><type><name pos:line="35" pos:column="70">string</name></type> <name pos:line="35" pos:column="77">functionName</name></decl></param>)</parameter_list>
        <block pos:line="36" pos:column="9">{
            <if pos:line="37" pos:column="13">if <condition pos:line="37" pos:column="16">(<expr><name pos:line="37" pos:column="17">null</name> <op:operator pos:line="37" pos:column="22">==</op:operator> <name pos:line="37" pos:column="25">container</name></expr>)</condition><then pos:line="37" pos:column="35">
                <throw pos:line="38" pos:column="17">throw <expr><op:operator pos:line="38" pos:column="23">new</op:operator> <call><name pos:line="38" pos:column="27">ArgumentNullException</name><argument_list pos:line="38" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="38" pos:column="49">"container"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <return pos:line="40" pos:column="13">return <expr><call><name><name pos:line="40" pos:column="20">container</name><op:operator pos:line="40" pos:column="29">.</op:operator><name pos:line="40" pos:column="30">Descendants</name></name><argument_list pos:line="40" pos:column="41">(<argument><expr><name><name pos:line="40" pos:column="42">SRC</name><op:operator pos:line="40" pos:column="45">.</op:operator><name pos:line="40" pos:column="46">Call</name></name></expr></argument>)</argument_list></call><op:operator pos:line="40" pos:column="51">.</op:operator><call><name pos:line="40" pos:column="52">Where</name><argument_list pos:line="40" pos:column="57">(<argument><expr><lambda><name pos:line="40" pos:column="58">c</name> <op:operator pos:line="40" pos:column="60">=&gt;</op:operator> <call><name><name pos:line="40" pos:column="63">c</name><op:operator pos:line="40" pos:column="64">.</op:operator><name pos:line="40" pos:column="65">Element</name></name><argument_list pos:line="40" pos:column="72">(<argument><expr><name><name pos:line="40" pos:column="73">SRC</name><op:operator pos:line="40" pos:column="76">.</op:operator><name pos:line="40" pos:column="77">Name</name></name></expr></argument>)</argument_list></call><op:operator pos:line="40" pos:column="82">.</op:operator><name pos:line="40" pos:column="83">Value</name> <op:operator pos:line="40" pos:column="89">==</op:operator> <name pos:line="40" pos:column="92">functionName</name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="40" pos:column="105">.</op:operator><call><name pos:line="40" pos:column="106">Any</name><argument_list pos:line="40" pos:column="109">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="43" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="44" pos:column="9">/// Checks whether the element is a declaration statement for a variable of the specified type.</comment>
        <comment type="line" pos:line="45" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="46" pos:column="9">/// &lt;param name="element"&gt;The element to test.&lt;/param&gt;</comment>
        <comment type="line" pos:line="47" pos:column="9">/// &lt;param name="typeName"&gt;The typename to look for.&lt;/param&gt;</comment>
        <comment type="line" pos:line="48" pos:column="9">/// &lt;returns&gt;True if this is a declaration for the given type; false if not.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="49" pos:column="9">public</specifier> <specifier pos:line="49" pos:column="16">static</specifier> <name pos:line="49" pos:column="23">bool</name></type> <name pos:line="49" pos:column="28">IsDeclOfType</name><parameter_list pos:line="49" pos:column="40">(<param><decl><type><name pos:line="49" pos:column="41">this</name> <name pos:line="49" pos:column="46">XElement</name></type> <name pos:line="49" pos:column="55">element</name></decl></param>, <param><decl><type><name pos:line="49" pos:column="64">string</name></type> <name pos:line="49" pos:column="71">typeName</name></decl></param>)</parameter_list>
        <block pos:line="50" pos:column="9">{
            <if pos:line="51" pos:column="13">if <condition pos:line="51" pos:column="16">(<expr><name pos:line="51" pos:column="17">null</name> <op:operator pos:line="51" pos:column="22">==</op:operator> <name pos:line="51" pos:column="25">element</name></expr>)</condition><then pos:line="51" pos:column="33">
                <throw pos:line="52" pos:column="17">throw <expr><op:operator pos:line="52" pos:column="23">new</op:operator> <call><name pos:line="52" pos:column="27">ArgumentNullException</name><argument_list pos:line="52" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="52" pos:column="49">"element"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <return pos:line="54" pos:column="13">return <expr><name><name pos:line="54" pos:column="20">element</name><op:operator pos:line="54" pos:column="27">.</op:operator><name pos:line="54" pos:column="28">Name</name></name> <op:operator pos:line="54" pos:column="33">==</op:operator> <macro><name pos:line="54" pos:column="36">SRC</name></macro><op:operator pos:line="54" pos:column="39">.</op:operator><name pos:line="54" pos:column="40">DeclarationStatement</name> <op:operator pos:line="54" pos:column="61">&amp;&amp;</op:operator>
                   <op:operator pos:line="55" pos:column="20">(</op:operator><linq><from pos:line="55" pos:column="21">from <expr><name pos:line="55" pos:column="26">decl</name></expr> <in pos:line="55" pos:column="31">in <expr><call><name><name pos:line="55" pos:column="34">element</name><op:operator pos:line="55" pos:column="41">.</op:operator><name pos:line="55" pos:column="42">Descendants</name></name><argument_list pos:line="55" pos:column="53">(<argument><expr><name><name pos:line="55" pos:column="54">SRC</name><op:operator pos:line="55" pos:column="57">.</op:operator><name pos:line="55" pos:column="58">Declaration</name></name></expr></argument>)</argument_list></call></expr></in></from>
                    <where pos:line="56" pos:column="21">where <expr><call><name><name pos:line="56" pos:column="27">decl</name><op:operator pos:line="56" pos:column="31">.</op:operator><name pos:line="56" pos:column="32">Elements</name></name><argument_list pos:line="56" pos:column="40">(<argument><expr><name><name pos:line="56" pos:column="41">SRC</name><op:operator pos:line="56" pos:column="44">.</op:operator><name pos:line="56" pos:column="45">Type</name></name></expr></argument>)</argument_list></call><op:operator pos:line="56" pos:column="50">.</op:operator><call><name pos:line="56" pos:column="51">Any</name><argument_list pos:line="56" pos:column="54">()</argument_list></call></expr></where>
                    <where pos:line="57" pos:column="21">where <expr><call><name><name pos:line="57" pos:column="27">decl</name><op:operator pos:line="57" pos:column="31">.</op:operator><name pos:line="57" pos:column="32">Element</name></name><argument_list pos:line="57" pos:column="39">(<argument><expr><name><name pos:line="57" pos:column="40">SRC</name><op:operator pos:line="57" pos:column="43">.</op:operator><name pos:line="57" pos:column="44">Type</name></name></expr></argument>)</argument_list></call><op:operator pos:line="57" pos:column="49">.</op:operator><name pos:line="57" pos:column="50">Value</name> <op:operator pos:line="57" pos:column="56">==</op:operator> <name pos:line="57" pos:column="59">typeName</name></expr></where>
                    <select pos:line="58" pos:column="21">select <expr><name pos:line="58" pos:column="28">decl</name></expr></select></linq><op:operator pos:line="58" pos:column="32">)</op:operator><op:operator pos:line="58" pos:column="33">.</op:operator><call><name pos:line="58" pos:column="34">Any</name><argument_list pos:line="58" pos:column="37">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="61" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="62" pos:column="9">/// Gets the local declaration corresponding to the given name.</comment>
        <comment type="line" pos:line="63" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="64" pos:column="9">/// &lt;param name="name"&gt;A &lt;see cref="SRC"/&gt; element.&lt;/param&gt;</comment>
        <comment type="line" pos:line="65" pos:column="9">/// &lt;returns&gt;The corresponding declaration, null if not found.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="66" pos:column="9">public</specifier> <specifier pos:line="66" pos:column="16">static</specifier> <name pos:line="66" pos:column="23">XElement</name></type> <name pos:line="66" pos:column="32">GetLocalDecl</name><parameter_list pos:line="66" pos:column="44">(<param><decl><type><name pos:line="66" pos:column="45">this</name> <name pos:line="66" pos:column="50">XElement</name></type> <name pos:line="66" pos:column="59">name</name></decl></param>)</parameter_list>
        <block pos:line="67" pos:column="9">{
            <if pos:line="68" pos:column="13">if <condition pos:line="68" pos:column="16">(<expr><name pos:line="68" pos:column="17">null</name> <op:operator pos:line="68" pos:column="22">==</op:operator> <name pos:line="68" pos:column="25">name</name></expr>)</condition><then pos:line="68" pos:column="30">
                <throw pos:line="69" pos:column="17">throw <expr><op:operator pos:line="69" pos:column="23">new</op:operator> <call><name pos:line="69" pos:column="27">ArgumentNullException</name><argument_list pos:line="69" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="69" pos:column="49">"name"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <expr_stmt><expr><call><name><name pos:line="71" pos:column="13">SrcMLElement</name><op:operator pos:line="71" pos:column="25">.</op:operator><name pos:line="71" pos:column="26">ThrowExceptionOnInvalidName</name></name><argument_list pos:line="71" pos:column="53">(<argument><expr><name pos:line="71" pos:column="54">name</name></expr></argument>, <argument><expr><name><name pos:line="71" pos:column="60">SRC</name><op:operator pos:line="71" pos:column="63">.</op:operator><name pos:line="71" pos:column="64">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="73" pos:column="13">var</name></type> <name pos:line="73" pos:column="17">decls</name> <init pos:line="73" pos:column="23">= <expr><linq><from pos:line="73" pos:column="25">from <expr><name pos:line="73" pos:column="30">d</name></expr> <in pos:line="73" pos:column="32">in <expr><call><name><name pos:line="73" pos:column="35">name</name><op:operator pos:line="73" pos:column="39">.</op:operator><name pos:line="73" pos:column="40">Ancestors</name></name><argument_list pos:line="73" pos:column="49">(<argument><expr><name><name pos:line="73" pos:column="50">SRC</name><op:operator pos:line="73" pos:column="53">.</op:operator><name pos:line="73" pos:column="54">Function</name></name></expr></argument>)</argument_list></call><op:operator pos:line="73" pos:column="63">.</op:operator><call><name pos:line="73" pos:column="64">First</name><argument_list pos:line="73" pos:column="69">()</argument_list></call><op:operator pos:line="73" pos:column="71">.</op:operator><call><name pos:line="73" pos:column="72">Descendants</name><argument_list pos:line="73" pos:column="83">(<argument><expr><name><name pos:line="73" pos:column="84">SRC</name><op:operator pos:line="73" pos:column="87">.</op:operator><name pos:line="73" pos:column="88">Declaration</name></name></expr></argument>)</argument_list></call></expr></in></from>
                        <where pos:line="74" pos:column="25">where <expr><call><name><name pos:line="74" pos:column="31">d</name><op:operator pos:line="74" pos:column="32">.</op:operator><name pos:line="74" pos:column="33">Elements</name></name><argument_list pos:line="74" pos:column="41">(<argument><expr><name><name pos:line="74" pos:column="42">SRC</name><op:operator pos:line="74" pos:column="45">.</op:operator><name pos:line="74" pos:column="46">Name</name></name></expr></argument>)</argument_list></call><op:operator pos:line="74" pos:column="51">.</op:operator><call><name pos:line="74" pos:column="52">Any</name><argument_list pos:line="74" pos:column="55">()</argument_list></call></expr></where>
                        <where pos:line="75" pos:column="25">where <expr><call><name><name pos:line="75" pos:column="31">d</name><op:operator pos:line="75" pos:column="32">.</op:operator><name pos:line="75" pos:column="33">IsBefore</name></name><argument_list pos:line="75" pos:column="41">(<argument><expr><name pos:line="75" pos:column="42">name</name></expr></argument>)</argument_list></call> <op:operator pos:line="75" pos:column="48">&amp;&amp;</op:operator> <call><name><name pos:line="75" pos:column="51">d</name><op:operator pos:line="75" pos:column="52">.</op:operator><name pos:line="75" pos:column="53">Element</name></name><argument_list pos:line="75" pos:column="60">(<argument><expr><name><name pos:line="75" pos:column="61">SRC</name><op:operator pos:line="75" pos:column="64">.</op:operator><name pos:line="75" pos:column="65">Name</name></name></expr></argument>)</argument_list></call><op:operator pos:line="75" pos:column="70">.</op:operator><name pos:line="75" pos:column="71">Value</name> <op:operator pos:line="75" pos:column="77">==</op:operator> <name><name pos:line="75" pos:column="80">name</name><op:operator pos:line="75" pos:column="84">.</op:operator><name pos:line="75" pos:column="85">Value</name></name></expr></where>
                        <select pos:line="76" pos:column="25">select <expr><name pos:line="76" pos:column="32">d</name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <return pos:line="77" pos:column="13">return <expr><call><name><name pos:line="77" pos:column="20">decls</name><op:operator pos:line="77" pos:column="25">.</op:operator><name pos:line="77" pos:column="26">Last</name></name><argument_list pos:line="77" pos:column="30">()</argument_list></call></expr>;</return>
        }</block></function>
        <cpp:endregion pos:line="79" pos:column="9">#<cpp:directive pos:line="79" pos:column="10">endregion</cpp:directive></cpp:endregion>
    }</block></class>
}</block></namespace>
</unit>
