<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Test\LimitedConcurrencyLevelTaskSchedulerTests.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">ABB</name><op:operator pos:line="1" pos:column="10">.</op:operator><name pos:line="1" pos:column="11">SrcML</name><op:operator pos:line="1" pos:column="16">.</op:operator><name pos:line="1" pos:column="17">Utilities</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">NUnit</name><op:operator pos:line="2" pos:column="12">.</op:operator><name pos:line="2" pos:column="13">Framework</name></name>;</using>
<using pos:line="3" pos:column="1">using <name pos:line="3" pos:column="7">System</name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Collections</name><op:operator pos:line="4" pos:column="25">.</op:operator><name pos:line="4" pos:column="26">Generic</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Linq</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">Text</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">System</name><op:operator pos:line="7" pos:column="13">.</op:operator><name pos:line="7" pos:column="14">Threading</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">System</name><op:operator pos:line="8" pos:column="13">.</op:operator><name pos:line="8" pos:column="14">Threading</name><op:operator pos:line="8" pos:column="23">.</op:operator><name pos:line="8" pos:column="24">Tasks</name></name>;</using>

<namespace pos:line="10" pos:column="1">namespace <name><name pos:line="10" pos:column="11">ABB</name><op:operator pos:line="10" pos:column="14">.</op:operator><name pos:line="10" pos:column="15">SrcML</name><op:operator pos:line="10" pos:column="20">.</op:operator><name pos:line="10" pos:column="21">Test</name></name> <block pos:line="10" pos:column="26">{
    <class><attribute pos:line="11" pos:column="5">[<expr><name pos:line="11" pos:column="6">TestFixture</name></expr><op:operator pos:line="11" pos:column="17">,</op:operator> <expr><call><name pos:line="11" pos:column="19">Category</name><argument_list pos:line="11" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="11" pos:column="28">"Build"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    class <name pos:line="12" pos:column="11">LimitedConcurrencyLevelTaskSchedulerTests</name> <block pos:line="12" pos:column="53">{

        <function><type><attribute pos:line="14" pos:column="9">[<expr><name pos:line="14" pos:column="10">Test</name></expr><op:operator pos:line="14" pos:column="14">,</op:operator> <expr><call><name pos:line="14" pos:column="16">ExpectedException</name><argument_list pos:line="14" pos:column="33">(<argument><expr><name pos:line="14" pos:column="34">ExpectedException</name><op:operator pos:line="14" pos:column="51">=</op:operator><call><name pos:line="14" pos:column="52">typeof</name><argument_list pos:line="14" pos:column="58">(<argument><expr><name pos:line="14" pos:column="59">ArgumentOutOfRangeException</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="15" pos:column="9">public</specifier> <name pos:line="15" pos:column="16">void</name></type> <name pos:line="15" pos:column="21">TestZeroTaskExecution</name><parameter_list pos:line="15" pos:column="42">()</parameter_list> <block pos:line="15" pos:column="45">{
            <expr_stmt><expr><call><name pos:line="16" pos:column="13">TestConcurrencyLimit</name><argument_list pos:line="16" pos:column="33">(<argument><expr><op:operator pos:line="16" pos:column="34">new</op:operator> <call><name pos:line="16" pos:column="38">LimitedConcurrencyLevelTaskScheduler</name><argument_list pos:line="16" pos:column="74">(<argument><expr><lit:literal type="number" pos:line="16" pos:column="75">0</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <function><type><attribute pos:line="18" pos:column="9">[<expr><name pos:line="18" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="19" pos:column="9">public</specifier> <name pos:line="19" pos:column="16">void</name></type> <name pos:line="19" pos:column="21">TestSingleTaskExecution</name><parameter_list pos:line="19" pos:column="44">()</parameter_list> <block pos:line="19" pos:column="47">{
            <expr_stmt><expr><call><name pos:line="20" pos:column="13">TestConcurrencyLimit</name><argument_list pos:line="20" pos:column="33">(<argument><expr><op:operator pos:line="20" pos:column="34">new</op:operator> <call><name pos:line="20" pos:column="38">LimitedConcurrencyLevelTaskScheduler</name><argument_list pos:line="20" pos:column="74">(<argument><expr><lit:literal type="number" pos:line="20" pos:column="75">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="23" pos:column="9">[<expr><name pos:line="23" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="24" pos:column="9">public</specifier> <name pos:line="24" pos:column="16">void</name></type> <name pos:line="24" pos:column="21">TestDoubleTaskExecution</name><parameter_list pos:line="24" pos:column="44">()</parameter_list> <block pos:line="24" pos:column="47">{
            <expr_stmt><expr><call><name pos:line="25" pos:column="13">TestConcurrencyLimit</name><argument_list pos:line="25" pos:column="33">(<argument><expr><op:operator pos:line="25" pos:column="34">new</op:operator> <call><name pos:line="25" pos:column="38">LimitedConcurrencyLevelTaskScheduler</name><argument_list pos:line="25" pos:column="74">(<argument><expr><lit:literal type="number" pos:line="25" pos:column="75">2</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="28" pos:column="9">[<expr><name pos:line="28" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="29" pos:column="9">public</specifier> <name pos:line="29" pos:column="16">void</name></type> <name pos:line="29" pos:column="21">TestStartAndStop</name><parameter_list pos:line="29" pos:column="37">()</parameter_list> <block pos:line="29" pos:column="40">{
            <decl_stmt><decl><type><name pos:line="30" pos:column="13">int</name></type> <name pos:line="30" pos:column="17">NUM_TASKS</name> <init pos:line="30" pos:column="27">= <expr><lit:literal type="number" pos:line="30" pos:column="29">10</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="31" pos:column="13">int</name></type> <name pos:line="31" pos:column="17">STOP_NUM</name> <init pos:line="31" pos:column="26">= <expr><lit:literal type="number" pos:line="31" pos:column="28">3</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="32" pos:column="13">int</name></type> <name pos:line="32" pos:column="17">START_NUM</name> <init pos:line="32" pos:column="27">= <expr><lit:literal type="number" pos:line="32" pos:column="29">6</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="33" pos:column="13">int</name></type> <name pos:line="33" pos:column="17">TIMEOUT</name> <init pos:line="33" pos:column="25">= <expr><lit:literal type="number" pos:line="33" pos:column="27">60000</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="35" pos:column="13">var</name></type> <name pos:line="35" pos:column="17">scheduler</name> <init pos:line="35" pos:column="27">= <expr><op:operator pos:line="35" pos:column="29">new</op:operator> <call><name pos:line="35" pos:column="33">LimitedConcurrencyLevelTaskScheduler</name><argument_list pos:line="35" pos:column="69">(<argument><expr><lit:literal type="number" pos:line="35" pos:column="70">4</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="36" pos:column="13">var</name></type> <name pos:line="36" pos:column="17">factory</name> <init pos:line="36" pos:column="25">= <expr><op:operator pos:line="36" pos:column="27">new</op:operator> <call><name pos:line="36" pos:column="31">TaskFactory</name><argument_list pos:line="36" pos:column="42">(<argument><expr><name pos:line="36" pos:column="43">scheduler</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="37" pos:column="13">var</name></type> <name pos:line="37" pos:column="17">rng</name> <init pos:line="37" pos:column="21">= <expr><op:operator pos:line="37" pos:column="23">new</op:operator> <call><name pos:line="37" pos:column="27">Random</name><argument_list pos:line="37" pos:column="33">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="38" pos:column="13">int</name></type> <name pos:line="38" pos:column="17">currentlyExecuting</name> <init pos:line="38" pos:column="36">= <expr><lit:literal type="number" pos:line="38" pos:column="38">0</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name><name pos:line="40" pos:column="13">Action</name><argument_list pos:line="40" pos:column="19">&lt;<argument><name pos:line="40" pos:column="20">int</name></argument>&gt;</argument_list></name></type> <name pos:line="40" pos:column="25">testAction</name> <init pos:line="40" pos:column="36">= <expr><lambda><parameter_list pos:line="40" pos:column="38">(<param><decl><type><name pos:line="40" pos:column="39">int</name></type> <name pos:line="40" pos:column="43">i</name></decl></param>)</parameter_list> <op:operator pos:line="40" pos:column="46">=&gt;</op:operator> <block pos:line="40" pos:column="49">{
                <decl_stmt><decl><type><name pos:line="41" pos:column="17">int</name></type> <name pos:line="41" pos:column="21">value</name> <init pos:line="41" pos:column="27">= <expr><call><name><name pos:line="41" pos:column="29">Interlocked</name><op:operator pos:line="41" pos:column="40">.</op:operator><name pos:line="41" pos:column="41">Increment</name></name><argument_list pos:line="41" pos:column="50">(<argument><expr pos:line="41" pos:column="51">ref <name pos:line="41" pos:column="55">currentlyExecuting</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="42" pos:column="17">Thread</name><op:operator pos:line="42" pos:column="23">.</op:operator><name pos:line="42" pos:column="24">Sleep</name></name><argument_list pos:line="42" pos:column="29">(<argument><expr><name pos:line="42" pos:column="30">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="43" pos:column="17">Interlocked</name><op:operator pos:line="43" pos:column="28">.</op:operator><name pos:line="43" pos:column="29">Decrement</name></name><argument_list pos:line="43" pos:column="38">(<argument><expr pos:line="43" pos:column="39">ref <name pos:line="43" pos:column="43">currentlyExecuting</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></lambda></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="46" pos:column="13">Task</name><index pos:line="46" pos:column="17">[]</index></type> <name pos:line="46" pos:column="20">tasks</name> <init pos:line="46" pos:column="26">= <expr><op:operator pos:line="46" pos:column="28">new</op:operator> <name><name pos:line="46" pos:column="32">Task</name><index pos:line="46" pos:column="36">[<expr><name pos:line="46" pos:column="37">NUM_TASKS</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <for pos:line="47" pos:column="13">for(<init><decl><type><name pos:line="47" pos:column="17">int</name></type> <name pos:line="47" pos:column="21">i</name> <init pos:line="47" pos:column="23">= <expr><lit:literal type="number" pos:line="47" pos:column="25">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="47" pos:column="28">i</name> <op:operator pos:line="47" pos:column="30">&lt;</op:operator> <name pos:line="47" pos:column="32">NUM_TASKS</name></expr>;</condition> <incr><expr><name pos:line="47" pos:column="43">i</name><op:operator pos:line="47" pos:column="44">++</op:operator></expr></incr>) <block pos:line="47" pos:column="48">{
                <expr_stmt><expr><name><name pos:line="48" pos:column="17">tasks</name><index pos:line="48" pos:column="22">[<expr><name pos:line="48" pos:column="23">i</name></expr>]</index></name> <op:operator pos:line="48" pos:column="26">=</op:operator> <call><name><name pos:line="48" pos:column="28">factory</name><op:operator pos:line="48" pos:column="35">.</op:operator><name pos:line="48" pos:column="36">StartNew</name></name><argument_list pos:line="48" pos:column="44">(<argument><expr><lambda><parameter_list pos:line="48" pos:column="45">()</parameter_list> <op:operator pos:line="48" pos:column="48">=&gt;</op:operator> <call><name pos:line="48" pos:column="51">testAction</name><argument_list pos:line="48" pos:column="61">(<argument><expr><call><name><name pos:line="48" pos:column="62">rng</name><op:operator pos:line="48" pos:column="65">.</op:operator><name pos:line="48" pos:column="66">Next</name></name><argument_list pos:line="48" pos:column="70">(<argument><expr><lit:literal type="number" pos:line="48" pos:column="71">100</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="48" pos:column="76">500</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="49" pos:column="17">if<condition pos:line="49" pos:column="19">(<expr><name pos:line="49" pos:column="20">i</name> <op:operator pos:line="49" pos:column="22">==</op:operator> <name pos:line="49" pos:column="25">STOP_NUM</name></expr>)</condition><then pos:line="49" pos:column="34"> <block pos:line="49" pos:column="35">{
                    <expr_stmt><expr><call><name><name pos:line="50" pos:column="21">scheduler</name><op:operator pos:line="50" pos:column="30">.</op:operator><name pos:line="50" pos:column="31">Stop</name></name><argument_list pos:line="50" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
                    <for pos:line="51" pos:column="21">for(<init><decl><type><name pos:line="51" pos:column="25">int</name></type> <name pos:line="51" pos:column="29">j</name> <init pos:line="51" pos:column="31">= <expr><lit:literal type="number" pos:line="51" pos:column="33">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="51" pos:column="36">j</name> <op:operator pos:line="51" pos:column="38">&lt;</op:operator> <name pos:line="51" pos:column="40">NUM_TASKS</name></expr>;</condition> <incr><expr><name pos:line="51" pos:column="51">j</name><op:operator pos:line="51" pos:column="52">++</op:operator></expr></incr>) <block pos:line="51" pos:column="56">{
                        <if pos:line="52" pos:column="25">if<condition pos:line="52" pos:column="27">(<expr><lit:literal type="number" pos:line="52" pos:column="28">0</lit:literal> <op:operator pos:line="52" pos:column="30">==</op:operator> <name pos:line="52" pos:column="33">currentlyExecuting</name></expr>)</condition><then pos:line="52" pos:column="52"> <block pos:line="52" pos:column="53">{
                            <expr_stmt><expr><call><name><name pos:line="53" pos:column="29">Console</name><op:operator pos:line="53" pos:column="36">.</op:operator><name pos:line="53" pos:column="37">WriteLine</name></name><argument_list pos:line="53" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="53" pos:column="47">"Slept for {0} ms"</lit:literal></expr></argument>, <argument><expr><name pos:line="53" pos:column="67">j</name> <op:operator pos:line="53" pos:column="69">*</op:operator> <lit:literal type="number" pos:line="53" pos:column="71">500</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <break pos:line="54" pos:column="29">break;</break>
                        }</block></then></if>
                        <expr_stmt><expr><call><name><name pos:line="56" pos:column="25">Thread</name><op:operator pos:line="56" pos:column="31">.</op:operator><name pos:line="56" pos:column="32">Sleep</name></name><argument_list pos:line="56" pos:column="37">(<argument><expr><lit:literal type="number" pos:line="56" pos:column="38">500</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></for>
                }</block></then></if>
                <if pos:line="59" pos:column="17">if<condition pos:line="59" pos:column="19">(<expr><name pos:line="59" pos:column="20">i</name> <op:operator pos:line="59" pos:column="22">&gt;=</op:operator> <name pos:line="59" pos:column="25">STOP_NUM</name> <op:operator pos:line="59" pos:column="34">&amp;&amp;</op:operator> <name pos:line="59" pos:column="37">i</name> <op:operator pos:line="59" pos:column="39">&lt;=</op:operator> <name pos:line="59" pos:column="42">START_NUM</name></expr>)</condition><then pos:line="59" pos:column="52"> <block pos:line="59" pos:column="53">{
                    <expr_stmt><expr><call><name><name pos:line="60" pos:column="21">Assert</name><op:operator pos:line="60" pos:column="27">.</op:operator><name pos:line="60" pos:column="28">AreEqual</name></name><argument_list pos:line="60" pos:column="36">(<argument><expr><lit:literal type="number" pos:line="60" pos:column="37">0</lit:literal></expr></argument>, <argument><expr><name pos:line="60" pos:column="40">currentlyExecuting</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <if pos:line="62" pos:column="17">if<condition pos:line="62" pos:column="19">(<expr><name pos:line="62" pos:column="20">i</name> <op:operator pos:line="62" pos:column="22">==</op:operator> <name pos:line="62" pos:column="25">START_NUM</name></expr>)</condition><then pos:line="62" pos:column="35"> <block pos:line="62" pos:column="36">{
                    <expr_stmt><expr><call><name><name pos:line="63" pos:column="21">scheduler</name><op:operator pos:line="63" pos:column="30">.</op:operator><name pos:line="63" pos:column="31">Start</name></name><argument_list pos:line="63" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
            <expr_stmt><expr><call><name><name pos:line="66" pos:column="13">Task</name><op:operator pos:line="66" pos:column="17">.</op:operator><name pos:line="66" pos:column="18">WaitAll</name></name><argument_list pos:line="66" pos:column="25">(<argument><expr><name pos:line="66" pos:column="26">tasks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="67" pos:column="13">Assert</name><op:operator pos:line="67" pos:column="19">.</op:operator><name pos:line="67" pos:column="20">AreEqual</name></name><argument_list pos:line="67" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="67" pos:column="29">0</lit:literal></expr></argument>, <argument><expr><name pos:line="67" pos:column="32">currentlyExecuting</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="70" pos:column="9">private</specifier> <specifier pos:line="70" pos:column="17">static</specifier> <name pos:line="70" pos:column="24">void</name></type> <name pos:line="70" pos:column="29">TestConcurrencyLimit</name><parameter_list pos:line="70" pos:column="49">(<param><decl><type><name pos:line="70" pos:column="50">LimitedConcurrencyLevelTaskScheduler</name></type> <name pos:line="70" pos:column="87">scheduler</name></decl></param>)</parameter_list> <block pos:line="70" pos:column="98">{
            <decl_stmt><decl><type><name pos:line="71" pos:column="13">var</name></type> <name pos:line="71" pos:column="17">factory</name> <init pos:line="71" pos:column="25">= <expr><op:operator pos:line="71" pos:column="27">new</op:operator> <call><name pos:line="71" pos:column="31">TaskFactory</name><argument_list pos:line="71" pos:column="42">(<argument><expr><name pos:line="71" pos:column="43">scheduler</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="72" pos:column="13">bool</name></type> <name pos:line="72" pos:column="18">IsIdled</name> <init pos:line="72" pos:column="26">= <expr><lit:literal type="boolean" pos:line="72" pos:column="28">true</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="74" pos:column="13">AutoResetEvent</name></type> <name pos:line="74" pos:column="28">are</name> <init pos:line="74" pos:column="32">= <expr><op:operator pos:line="74" pos:column="34">new</op:operator> <call><name pos:line="74" pos:column="38">AutoResetEvent</name><argument_list pos:line="74" pos:column="52">(<argument><expr><lit:literal type="boolean" pos:line="74" pos:column="53">false</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="75" pos:column="13">scheduler</name><op:operator pos:line="75" pos:column="22">.</op:operator><name pos:line="75" pos:column="23">SchedulerIdled</name></name> <op:operator pos:line="75" pos:column="38">+=</op:operator> <lambda><parameter_list pos:line="75" pos:column="41">(<param><decl><name pos:line="75" pos:column="42">o</name></decl></param>,<param><decl><name pos:line="75" pos:column="44">e</name></decl></param>)</parameter_list> <op:operator pos:line="75" pos:column="47">=&gt;</op:operator> <block pos:line="75" pos:column="50">{
                <expr_stmt><expr><name pos:line="76" pos:column="17">IsIdled</name> <op:operator pos:line="76" pos:column="25">=</op:operator> <lit:literal type="boolean" pos:line="76" pos:column="27">true</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="77" pos:column="17">are</name><op:operator pos:line="77" pos:column="20">.</op:operator><name pos:line="77" pos:column="21">Set</name></name><argument_list pos:line="77" pos:column="24">()</argument_list></call></expr>;</expr_stmt>
            }</block></lambda></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="80" pos:column="13">var</name></type> <name pos:line="80" pos:column="17">rng</name> <init pos:line="80" pos:column="21">= <expr><op:operator pos:line="80" pos:column="23">new</op:operator> <call><name pos:line="80" pos:column="27">Random</name><argument_list pos:line="80" pos:column="33">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="81" pos:column="13">int</name></type> <name pos:line="81" pos:column="17">currentlyExecuting</name> <init pos:line="81" pos:column="36">= <expr><lit:literal type="number" pos:line="81" pos:column="38">0</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="82" pos:column="13">int</name></type> <name pos:line="82" pos:column="17">maxCurrentlyExecuting</name> <init pos:line="82" pos:column="39">= <expr><lit:literal type="number" pos:line="82" pos:column="41">0</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="83" pos:column="13">Action</name><argument_list pos:line="83" pos:column="19">&lt;<argument><name pos:line="83" pos:column="20">int</name></argument>&gt;</argument_list></name></type> <name pos:line="83" pos:column="25">testAction</name> <init pos:line="83" pos:column="36">= <expr><lambda><parameter_list pos:line="83" pos:column="38">(<param><decl><type><name pos:line="83" pos:column="39">int</name></type> <name pos:line="83" pos:column="43">i</name></decl></param>)</parameter_list> <op:operator pos:line="83" pos:column="46">=&gt;</op:operator> <block pos:line="83" pos:column="49">{
                <expr_stmt><expr><name pos:line="84" pos:column="17">IsIdled</name> <op:operator pos:line="84" pos:column="25">=</op:operator> <lit:literal type="boolean" pos:line="84" pos:column="27">false</lit:literal></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="85" pos:column="17">int</name></type> <name pos:line="85" pos:column="21">value</name> <init pos:line="85" pos:column="27">= <expr><call><name><name pos:line="85" pos:column="29">Interlocked</name><op:operator pos:line="85" pos:column="40">.</op:operator><name pos:line="85" pos:column="41">Increment</name></name><argument_list pos:line="85" pos:column="50">(<argument><expr pos:line="85" pos:column="51">ref <name pos:line="85" pos:column="55">currentlyExecuting</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="86" pos:column="17">Assert</name><op:operator pos:line="86" pos:column="23">.</op:operator><name pos:line="86" pos:column="24">LessOrEqual</name></name><argument_list pos:line="86" pos:column="35">(<argument><expr><name pos:line="86" pos:column="36">value</name></expr></argument>, <argument><expr><name><name pos:line="86" pos:column="43">scheduler</name><op:operator pos:line="86" pos:column="52">.</op:operator><name pos:line="86" pos:column="53">MaximumConcurrencyLevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="87" pos:column="17">if<condition pos:line="87" pos:column="19">(<expr><name pos:line="87" pos:column="20">value</name> <op:operator pos:line="87" pos:column="26">&gt;</op:operator> <name pos:line="87" pos:column="28">maxCurrentlyExecuting</name></expr>)</condition><then pos:line="87" pos:column="50"> <block pos:line="87" pos:column="51">{
                    <expr_stmt><expr><call><name><name pos:line="88" pos:column="21">Interlocked</name><op:operator pos:line="88" pos:column="32">.</op:operator><name pos:line="88" pos:column="33">Exchange</name></name><argument_list pos:line="88" pos:column="41">(<argument><expr pos:line="88" pos:column="42">ref <name pos:line="88" pos:column="46">maxCurrentlyExecuting</name></expr></argument>, <argument><expr><name pos:line="88" pos:column="69">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                
                <expr_stmt><expr><call><name><name pos:line="91" pos:column="17">Thread</name><op:operator pos:line="91" pos:column="23">.</op:operator><name pos:line="91" pos:column="24">Sleep</name></name><argument_list pos:line="91" pos:column="29">(<argument><expr><name pos:line="91" pos:column="30">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="92" pos:column="17">Interlocked</name><op:operator pos:line="92" pos:column="28">.</op:operator><name pos:line="92" pos:column="29">Decrement</name></name><argument_list pos:line="92" pos:column="38">(<argument><expr pos:line="92" pos:column="39">ref <name pos:line="92" pos:column="43">currentlyExecuting</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></lambda></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="95" pos:column="13">Task</name><index pos:line="95" pos:column="17">[]</index></type> <name pos:line="95" pos:column="20">tasks</name> <init pos:line="95" pos:column="26">= <expr><op:operator pos:line="95" pos:column="28">new</op:operator> <name><name pos:line="95" pos:column="32">Task</name><index pos:line="95" pos:column="36">[<expr><lit:literal type="number" pos:line="95" pos:column="37">100</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <for pos:line="96" pos:column="13">for(<init><decl><type><name pos:line="96" pos:column="17">int</name></type> <name pos:line="96" pos:column="21">i</name> <init pos:line="96" pos:column="23">= <expr><lit:literal type="number" pos:line="96" pos:column="25">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="96" pos:column="28">i</name> <op:operator pos:line="96" pos:column="30">&lt;</op:operator> <lit:literal type="number" pos:line="96" pos:column="32">100</lit:literal></expr>;</condition> <incr><expr><name pos:line="96" pos:column="37">i</name><op:operator pos:line="96" pos:column="38">++</op:operator></expr></incr>) <block pos:line="96" pos:column="42">{
                <expr_stmt><expr><name><name pos:line="97" pos:column="17">tasks</name><index pos:line="97" pos:column="22">[<expr><name pos:line="97" pos:column="23">i</name></expr>]</index></name> <op:operator pos:line="97" pos:column="26">=</op:operator> <call><name><name pos:line="97" pos:column="28">factory</name><op:operator pos:line="97" pos:column="35">.</op:operator><name pos:line="97" pos:column="36">StartNew</name></name><argument_list pos:line="97" pos:column="44">(<argument><expr><lambda><parameter_list pos:line="97" pos:column="45">()</parameter_list> <op:operator pos:line="97" pos:column="48">=&gt;</op:operator> <call><name pos:line="97" pos:column="51">testAction</name><argument_list pos:line="97" pos:column="61">(<argument><expr><call><name><name pos:line="97" pos:column="62">rng</name><op:operator pos:line="97" pos:column="65">.</op:operator><name pos:line="97" pos:column="66">Next</name></name><argument_list pos:line="97" pos:column="70">(<argument><expr><lit:literal type="number" pos:line="97" pos:column="71">100</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="97" pos:column="76">500</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><call><name><name pos:line="99" pos:column="13">Task</name><op:operator pos:line="99" pos:column="17">.</op:operator><name pos:line="99" pos:column="18">WaitAll</name></name><argument_list pos:line="99" pos:column="25">(<argument><expr><name pos:line="99" pos:column="26">tasks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="100" pos:column="13">Assert</name><op:operator pos:line="100" pos:column="19">.</op:operator><name pos:line="100" pos:column="20">AreEqual</name></name><argument_list pos:line="100" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="100" pos:column="29">0</lit:literal></expr></argument>, <argument><expr><name pos:line="100" pos:column="32">currentlyExecuting</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="101" pos:column="13">Assert</name><op:operator pos:line="101" pos:column="19">.</op:operator><name pos:line="101" pos:column="20">AreEqual</name></name><argument_list pos:line="101" pos:column="28">(<argument><expr><name><name pos:line="101" pos:column="29">scheduler</name><op:operator pos:line="101" pos:column="38">.</op:operator><name pos:line="101" pos:column="39">MaximumConcurrencyLevel</name></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="64">maxCurrentlyExecuting</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="102" pos:column="13">Assert</name><op:operator pos:line="102" pos:column="19">.</op:operator><name pos:line="102" pos:column="20">IsTrue</name></name><argument_list pos:line="102" pos:column="26">(<argument><expr><call><name><name pos:line="102" pos:column="27">are</name><op:operator pos:line="102" pos:column="30">.</op:operator><name pos:line="102" pos:column="31">WaitOne</name></name><argument_list pos:line="102" pos:column="38">(<argument><expr><lit:literal type="number" pos:line="102" pos:column="39">500</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="103" pos:column="13">Assert</name><op:operator pos:line="103" pos:column="19">.</op:operator><name pos:line="103" pos:column="20">IsTrue</name></name><argument_list pos:line="103" pos:column="26">(<argument><expr><name pos:line="103" pos:column="27">IsIdled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
