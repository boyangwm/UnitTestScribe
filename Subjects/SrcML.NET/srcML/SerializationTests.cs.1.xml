<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data.Test\SerializationTests.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2014 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *    Patrick Francis (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">NUnit</name><op:operator pos:line="13" pos:column="12">.</op:operator><name pos:line="13" pos:column="13">Framework</name></name>;</using>
<using pos:line="14" pos:column="1">using <name pos:line="14" pos:column="7">System</name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Collections</name><op:operator pos:line="15" pos:column="25">.</op:operator><name pos:line="15" pos:column="26">Generic</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">IO</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Linq</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Text</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">System</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">Threading</name><op:operator pos:line="19" pos:column="23">.</op:operator><name pos:line="19" pos:column="24">Tasks</name></name>;</using>

<namespace pos:line="21" pos:column="1">namespace <name><name pos:line="21" pos:column="11">ABB</name><op:operator pos:line="21" pos:column="14">.</op:operator><name pos:line="21" pos:column="15">SrcML</name><op:operator pos:line="21" pos:column="20">.</op:operator><name pos:line="21" pos:column="21">Data</name><op:operator pos:line="21" pos:column="25">.</op:operator><name pos:line="21" pos:column="26">Test</name></name> <block pos:line="21" pos:column="31">{
    <class><attribute pos:line="22" pos:column="5">[<expr><call><name pos:line="22" pos:column="6">TestFixture</name><argument_list pos:line="22" pos:column="17">(<argument><expr><name pos:line="22" pos:column="18">Category</name><op:operator pos:line="22" pos:column="26">=</op:operator><lit:literal type="string" pos:line="22" pos:column="27">"Build"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="23" pos:column="5">public</specifier> class <name pos:line="23" pos:column="18">SerializationTests</name> <block pos:line="23" pos:column="37">{
        <decl_stmt><decl><type><specifier pos:line="24" pos:column="9">private</specifier> <specifier pos:line="24" pos:column="17">const</specifier> <name pos:line="24" pos:column="23">string</name></type> <name pos:line="24" pos:column="30">TestInputPath</name> <init pos:line="24" pos:column="44">= <expr><lit:literal type="string" pos:line="24" pos:column="46">@"..\..\TestInputs"</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="25" pos:column="9">private</specifier> <specifier pos:line="25" pos:column="17">const</specifier> <name pos:line="25" pos:column="23">string</name></type> <name pos:line="25" pos:column="30">DefaultInputName</name> <init pos:line="25" pos:column="47">= <expr><lit:literal type="string" pos:line="25" pos:column="49">"serializationtest_input.xml"</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="26" pos:column="9">private</specifier> <specifier pos:line="26" pos:column="17">const</specifier> <name pos:line="26" pos:column="23">string</name></type> <name pos:line="26" pos:column="30">DefaultOutputName</name> <init pos:line="26" pos:column="48">= <expr><lit:literal type="string" pos:line="26" pos:column="50">"serializationtest_output"</lit:literal></expr></init></decl>;</decl_stmt>
        <function><type><attribute pos:line="27" pos:column="9">[<expr><name pos:line="27" pos:column="10">SetUp</name></expr>]</attribute>
        <specifier pos:line="28" pos:column="9">public</specifier> <name pos:line="28" pos:column="16">void</name></type> <name pos:line="28" pos:column="21">TestSetup</name><parameter_list pos:line="28" pos:column="30">()</parameter_list> <block pos:line="28" pos:column="33">{
            <expr_stmt><expr><call><name><name pos:line="29" pos:column="13">File</name><op:operator pos:line="29" pos:column="17">.</op:operator><name pos:line="29" pos:column="18">Delete</name></name><argument_list pos:line="29" pos:column="24">(<argument><expr><name pos:line="29" pos:column="25">DefaultInputName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="30" pos:column="13">File</name><op:operator pos:line="30" pos:column="17">.</op:operator><name pos:line="30" pos:column="18">Delete</name></name><argument_list pos:line="30" pos:column="24">(<argument><expr><name pos:line="30" pos:column="25">DefaultOutputName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="31" pos:column="13">File</name><op:operator pos:line="31" pos:column="17">.</op:operator><name pos:line="31" pos:column="18">Delete</name></name><argument_list pos:line="31" pos:column="24">(<argument><expr><call><name><name pos:line="31" pos:column="25">Path</name><op:operator pos:line="31" pos:column="29">.</op:operator><name pos:line="31" pos:column="30">ChangeExtension</name></name><argument_list pos:line="31" pos:column="45">(<argument><expr><name pos:line="31" pos:column="46">DefaultOutputName</name></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="65">XmlSerialization</name><op:operator pos:line="31" pos:column="81">.</op:operator><name pos:line="31" pos:column="82">DEFAULT_EXTENSION</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="32" pos:column="13">File</name><op:operator pos:line="32" pos:column="17">.</op:operator><name pos:line="32" pos:column="18">Delete</name></name><argument_list pos:line="32" pos:column="24">(<argument><expr><call><name><name pos:line="32" pos:column="25">Path</name><op:operator pos:line="32" pos:column="29">.</op:operator><name pos:line="32" pos:column="30">ChangeExtension</name></name><argument_list pos:line="32" pos:column="45">(<argument><expr><name pos:line="32" pos:column="46">DefaultOutputName</name></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="65">XmlSerialization</name><op:operator pos:line="32" pos:column="81">.</op:operator><name pos:line="32" pos:column="82">DEFAULT_COMPRESSED_EXTENSION</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="35" pos:column="9">[<expr><name pos:line="35" pos:column="10">Test</name></expr>]</attribute>
        <attribute pos:line="36" pos:column="9">[<expr><call><name pos:line="36" pos:column="10">TestCase</name><argument_list pos:line="36" pos:column="18">(<argument><expr><lit:literal type="string" pos:line="36" pos:column="19">"A.cpp"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="36" pos:column="28">true</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <attribute pos:line="37" pos:column="9">[<expr><call><name pos:line="37" pos:column="10">TestCase</name><argument_list pos:line="37" pos:column="18">(<argument><expr><lit:literal type="string" pos:line="37" pos:column="19">"A.cpp"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="37" pos:column="28">false</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <attribute pos:line="38" pos:column="9">[<expr><call><name pos:line="38" pos:column="10">TestCase</name><argument_list pos:line="38" pos:column="18">(<argument><expr><lit:literal type="string" pos:line="38" pos:column="19">"A.h"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="38" pos:column="26">true</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <attribute pos:line="39" pos:column="9">[<expr><call><name pos:line="39" pos:column="10">TestCase</name><argument_list pos:line="39" pos:column="18">(<argument><expr><lit:literal type="string" pos:line="39" pos:column="19">"A.h"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="39" pos:column="26">false</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="40" pos:column="9">public</specifier> <name pos:line="40" pos:column="16">void</name></type> <name pos:line="40" pos:column="21">TestRoundTrip</name><parameter_list pos:line="40" pos:column="34">(<param><decl><type><name pos:line="40" pos:column="35">string</name></type> <name pos:line="40" pos:column="42">sourceFileName</name></decl></param>, <param><decl><type><name pos:line="40" pos:column="58">bool</name></type> <name pos:line="40" pos:column="63">compressOutput</name></decl></param>)</parameter_list> <block pos:line="40" pos:column="79">{
            <decl_stmt><decl><type><name pos:line="41" pos:column="13">var</name></type> <name pos:line="41" pos:column="17">sourceFilePath</name> <init pos:line="41" pos:column="32">= <expr><call><name><name pos:line="41" pos:column="34">Path</name><op:operator pos:line="41" pos:column="38">.</op:operator><name pos:line="41" pos:column="39">Combine</name></name><argument_list pos:line="41" pos:column="46">(<argument><expr><name pos:line="41" pos:column="47">TestInputPath</name></expr></argument>, <argument><expr><name pos:line="41" pos:column="62">sourceFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="43" pos:column="13">var</name></type> <name pos:line="43" pos:column="17">srcMLGenerator</name> <init pos:line="43" pos:column="32">= <expr><op:operator pos:line="43" pos:column="34">new</op:operator> <call><name pos:line="43" pos:column="38">SrcMLGenerator</name><argument_list pos:line="43" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="43" pos:column="53">"SrcML"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="44" pos:column="13">var</name></type> <name pos:line="44" pos:column="17">dataGenerator</name> <init pos:line="44" pos:column="31">= <expr><op:operator pos:line="44" pos:column="33">new</op:operator> <call><name pos:line="44" pos:column="37">DataGenerator</name><argument_list pos:line="44" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="46" pos:column="13">Assert</name><op:operator pos:line="46" pos:column="19">.</op:operator><name pos:line="46" pos:column="20">That</name></name><argument_list pos:line="46" pos:column="24">(<argument><expr><call><name><name pos:line="46" pos:column="25">srcMLGenerator</name><op:operator pos:line="46" pos:column="39">.</op:operator><name pos:line="46" pos:column="40">Generate</name></name><argument_list pos:line="46" pos:column="48">(<argument><expr><name pos:line="46" pos:column="49">sourceFilePath</name></expr></argument>, <argument><expr><name pos:line="46" pos:column="65">DefaultInputName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="47" pos:column="13">var</name></type> <name pos:line="47" pos:column="17">fileUnit</name> <init pos:line="47" pos:column="26">= <expr><call><name><name pos:line="47" pos:column="28">SrcMLElement</name><op:operator pos:line="47" pos:column="40">.</op:operator><name pos:line="47" pos:column="41">Load</name></name><argument_list pos:line="47" pos:column="45">(<argument><expr><name pos:line="47" pos:column="46">DefaultInputName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="48" pos:column="13">var</name></type> <name pos:line="48" pos:column="17">nsd</name> <init pos:line="48" pos:column="21">= <expr><call><name><name pos:line="48" pos:column="23">dataGenerator</name><op:operator pos:line="48" pos:column="36">.</op:operator><name pos:line="48" pos:column="37">Parse</name></name><argument_list pos:line="48" pos:column="42">(<argument><expr><name pos:line="48" pos:column="43">fileUnit</name></expr></argument>)</argument_list></call> <op:operator pos:line="48" pos:column="53">as</op:operator> <name pos:line="48" pos:column="56">NamespaceDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="49" pos:column="13">XmlSerialization</name><op:operator pos:line="49" pos:column="29">.</op:operator><name pos:line="49" pos:column="30">WriteElement</name></name><argument_list pos:line="49" pos:column="42">(<argument><expr><name pos:line="49" pos:column="43">nsd</name></expr></argument>, <argument><expr><name pos:line="49" pos:column="48">DefaultOutputName</name></expr></argument>, <argument><expr><name pos:line="49" pos:column="67">compressOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="50" pos:column="13">var</name></type> <name pos:line="50" pos:column="17">nsdFromFile</name> <init pos:line="50" pos:column="29">= <expr><call><name><name pos:line="50" pos:column="31">XmlSerialization</name><op:operator pos:line="50" pos:column="47">.</op:operator><name pos:line="50" pos:column="48">Load</name></name><argument_list pos:line="50" pos:column="52">(<argument><expr><name pos:line="50" pos:column="53">DefaultOutputName</name></expr></argument>, <argument><expr><name pos:line="50" pos:column="72">compressOutput</name></expr></argument>)</argument_list></call> <op:operator pos:line="50" pos:column="88">as</op:operator> <name pos:line="50" pos:column="91">NamespaceDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="51" pos:column="13">DataAssert</name><op:operator pos:line="51" pos:column="23">.</op:operator><name pos:line="51" pos:column="24">StatementsAreEqual</name></name><argument_list pos:line="51" pos:column="42">(<argument><expr><name pos:line="51" pos:column="43">nsd</name></expr></argument>, <argument><expr><name pos:line="51" pos:column="48">nsdFromFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="54" pos:column="9">[<expr><name pos:line="54" pos:column="10">Test</name></expr>]</attribute>
        <attribute pos:line="55" pos:column="9">[<expr><call><name pos:line="55" pos:column="10">TestCase</name><argument_list pos:line="55" pos:column="18">(<argument><expr><lit:literal type="string" pos:line="55" pos:column="19">"A.cpp"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="55" pos:column="28">true</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <attribute pos:line="56" pos:column="9">[<expr><call><name pos:line="56" pos:column="10">TestCase</name><argument_list pos:line="56" pos:column="18">(<argument><expr><lit:literal type="string" pos:line="56" pos:column="19">"A.cpp"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="56" pos:column="28">false</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <attribute pos:line="57" pos:column="9">[<expr><call><name pos:line="57" pos:column="10">TestCase</name><argument_list pos:line="57" pos:column="18">(<argument><expr><lit:literal type="string" pos:line="57" pos:column="19">"A.h"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="57" pos:column="26">true</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <attribute pos:line="58" pos:column="9">[<expr><call><name pos:line="58" pos:column="10">TestCase</name><argument_list pos:line="58" pos:column="18">(<argument><expr><lit:literal type="string" pos:line="58" pos:column="19">"A.h"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="58" pos:column="26">false</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="59" pos:column="9">public</specifier> <name pos:line="59" pos:column="16">void</name></type> <name pos:line="59" pos:column="21">TestRoundTripWithDefaultExtension</name><parameter_list pos:line="59" pos:column="54">(<param><decl><type><name pos:line="59" pos:column="55">string</name></type> <name pos:line="59" pos:column="62">sourceFileName</name></decl></param>, <param><decl><type><name pos:line="59" pos:column="78">bool</name></type> <name pos:line="59" pos:column="83">useCompression</name></decl></param>)</parameter_list> <block pos:line="59" pos:column="99">{
            <decl_stmt><decl><type><name pos:line="60" pos:column="13">var</name></type> <name pos:line="60" pos:column="17">sourceFilePath</name> <init pos:line="60" pos:column="32">= <expr><call><name><name pos:line="60" pos:column="34">Path</name><op:operator pos:line="60" pos:column="38">.</op:operator><name pos:line="60" pos:column="39">Combine</name></name><argument_list pos:line="60" pos:column="46">(<argument><expr><name pos:line="60" pos:column="47">TestInputPath</name></expr></argument>, <argument><expr><name pos:line="60" pos:column="62">sourceFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="62" pos:column="13">var</name></type> <name pos:line="62" pos:column="17">srcMLGenerator</name> <init pos:line="62" pos:column="32">= <expr><op:operator pos:line="62" pos:column="34">new</op:operator> <call><name pos:line="62" pos:column="38">SrcMLGenerator</name><argument_list pos:line="62" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="62" pos:column="53">"SrcML"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="63" pos:column="13">var</name></type> <name pos:line="63" pos:column="17">dataGenerator</name> <init pos:line="63" pos:column="31">= <expr><op:operator pos:line="63" pos:column="33">new</op:operator> <call><name pos:line="63" pos:column="37">DataGenerator</name><argument_list pos:line="63" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="65" pos:column="13">Assert</name><op:operator pos:line="65" pos:column="19">.</op:operator><name pos:line="65" pos:column="20">That</name></name><argument_list pos:line="65" pos:column="24">(<argument><expr><call><name><name pos:line="65" pos:column="25">srcMLGenerator</name><op:operator pos:line="65" pos:column="39">.</op:operator><name pos:line="65" pos:column="40">Generate</name></name><argument_list pos:line="65" pos:column="48">(<argument><expr><name pos:line="65" pos:column="49">sourceFilePath</name></expr></argument>, <argument><expr><name pos:line="65" pos:column="65">DefaultInputName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="66" pos:column="13">var</name></type> <name pos:line="66" pos:column="17">fileUnit</name> <init pos:line="66" pos:column="26">= <expr><call><name><name pos:line="66" pos:column="28">SrcMLElement</name><op:operator pos:line="66" pos:column="40">.</op:operator><name pos:line="66" pos:column="41">Load</name></name><argument_list pos:line="66" pos:column="45">(<argument><expr><name pos:line="66" pos:column="46">DefaultInputName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="67" pos:column="13">var</name></type> <name pos:line="67" pos:column="17">nsd</name> <init pos:line="67" pos:column="21">= <expr><call><name><name pos:line="67" pos:column="23">dataGenerator</name><op:operator pos:line="67" pos:column="36">.</op:operator><name pos:line="67" pos:column="37">Parse</name></name><argument_list pos:line="67" pos:column="42">(<argument><expr><name pos:line="67" pos:column="43">fileUnit</name></expr></argument>)</argument_list></call> <op:operator pos:line="67" pos:column="53">as</op:operator> <name pos:line="67" pos:column="56">NamespaceDefinition</name></expr></init></decl>;</decl_stmt>
            
            <decl_stmt><decl><type><name pos:line="69" pos:column="13">string</name></type> <name pos:line="69" pos:column="20">outputFileName</name> <init pos:line="69" pos:column="35">= <expr><call><name><name pos:line="69" pos:column="37">Path</name><op:operator pos:line="69" pos:column="41">.</op:operator><name pos:line="69" pos:column="42">ChangeExtension</name></name><argument_list pos:line="69" pos:column="57">(<argument><expr><name pos:line="69" pos:column="58">DefaultOutputName</name></expr></argument>, <argument><expr><name pos:line="69" pos:column="77">useCompression</name> <op:operator pos:line="69" pos:column="92">?</op:operator> <name><name pos:line="69" pos:column="94">XmlSerialization</name><op:operator pos:line="69" pos:column="110">.</op:operator><name pos:line="69" pos:column="111">DEFAULT_COMPRESSED_EXTENSION</name></name> <op:operator pos:line="69" pos:column="140">:</op:operator> <name><name pos:line="69" pos:column="142">XmlSerialization</name><op:operator pos:line="69" pos:column="158">.</op:operator><name pos:line="69" pos:column="159">DEFAULT_EXTENSION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="70" pos:column="13">XmlSerialization</name><op:operator pos:line="70" pos:column="29">.</op:operator><name pos:line="70" pos:column="30">WriteElement</name></name><argument_list pos:line="70" pos:column="42">(<argument><expr><name pos:line="70" pos:column="43">nsd</name></expr></argument>, <argument><expr><name pos:line="70" pos:column="48">outputFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="71" pos:column="13">var</name></type> <name pos:line="71" pos:column="17">nsdFromFile</name> <init pos:line="71" pos:column="29">= <expr><call><name><name pos:line="71" pos:column="31">XmlSerialization</name><op:operator pos:line="71" pos:column="47">.</op:operator><name pos:line="71" pos:column="48">Load</name></name><argument_list pos:line="71" pos:column="52">(<argument><expr><name pos:line="71" pos:column="53">outputFileName</name></expr></argument>)</argument_list></call> <op:operator pos:line="71" pos:column="69">as</op:operator> <name pos:line="71" pos:column="72">NamespaceDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="72" pos:column="13">DataAssert</name><op:operator pos:line="72" pos:column="23">.</op:operator><name pos:line="72" pos:column="24">StatementsAreEqual</name></name><argument_list pos:line="72" pos:column="42">(<argument><expr><name pos:line="72" pos:column="43">nsd</name></expr></argument>, <argument><expr><name pos:line="72" pos:column="48">nsdFromFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
