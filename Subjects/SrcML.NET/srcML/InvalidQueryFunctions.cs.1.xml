<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Test\InvalidQueryFunctions.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2010 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">System</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Collections</name><op:operator pos:line="13" pos:column="25">.</op:operator><name pos:line="13" pos:column="26">Generic</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Linq</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Text</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Xml</name><op:operator pos:line="16" pos:column="17">.</op:operator><name pos:line="16" pos:column="18">Linq</name></name>;</using>

<namespace pos:line="18" pos:column="1">namespace <name><name pos:line="18" pos:column="11">ABB</name><op:operator pos:line="18" pos:column="14">.</op:operator><name pos:line="18" pos:column="15">SrcML</name><op:operator pos:line="18" pos:column="20">.</op:operator><name pos:line="18" pos:column="21">Test</name></name>
<block pos:line="19" pos:column="1">{
    <class pos:line="20" pos:column="5">class <name pos:line="20" pos:column="11">InvalidQueryFunctions</name>
    <block pos:line="21" pos:column="5">{
        <function><type><attribute pos:line="22" pos:column="9">[<expr><name pos:line="22" pos:column="10">Query</name></expr>]</attribute>
        <specifier pos:line="23" pos:column="9">private</specifier> <name><name pos:line="23" pos:column="17">IEnumerable</name><argument_list pos:line="23" pos:column="28">&lt;<argument><name pos:line="23" pos:column="29">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="23" pos:column="39">test1</name><parameter_list pos:line="23" pos:column="44">(<param><decl><type><name pos:line="23" pos:column="45">XElement</name></type> <name pos:line="23" pos:column="54">element</name></decl></param>)</parameter_list>
        <block pos:line="24" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="25" pos:column="13">var</name></type> <name pos:line="25" pos:column="17">results</name> <init pos:line="25" pos:column="25">= <expr><linq><from pos:line="25" pos:column="27">from <expr><name pos:line="25" pos:column="32">r</name></expr> <in pos:line="25" pos:column="34">in <expr><call><name><name pos:line="25" pos:column="37">element</name><op:operator pos:line="25" pos:column="44">.</op:operator><name pos:line="25" pos:column="45">Descendants</name></name><argument_list pos:line="25" pos:column="56">(<argument><expr><name><name pos:line="25" pos:column="57">SRC</name><op:operator pos:line="25" pos:column="60">.</op:operator><name pos:line="25" pos:column="61">Block</name></name></expr></argument>)</argument_list></call></expr></in></from>
                          <select pos:line="26" pos:column="27">select <expr><name pos:line="26" pos:column="34">r</name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <return pos:line="27" pos:column="13">return <expr><name pos:line="27" pos:column="20">results</name></expr>;</return>
        }</block></function>

        <function><type><attribute pos:line="30" pos:column="9">[<expr><name pos:line="30" pos:column="10">Query</name></expr>]</attribute>
        <specifier pos:line="31" pos:column="9">public</specifier> <name><name pos:line="31" pos:column="16">IEnumerable</name><argument_list pos:line="31" pos:column="27">&lt;<argument><name pos:line="31" pos:column="28">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="31" pos:column="38">test1</name><parameter_list pos:line="31" pos:column="43">(<param><decl><type><name pos:line="31" pos:column="44">XElement</name></type> <name pos:line="31" pos:column="53">element</name></decl></param>, <param><decl><type><name pos:line="31" pos:column="62">XElement</name></type> <name pos:line="31" pos:column="71">element2</name></decl></param>)</parameter_list>
        <block pos:line="32" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="33" pos:column="13">var</name></type> <name pos:line="33" pos:column="17">results</name> <init pos:line="33" pos:column="25">= <expr><linq><from pos:line="33" pos:column="27">from <expr><name pos:line="33" pos:column="32">e</name></expr> <in pos:line="33" pos:column="34">in <expr><call><name><name pos:line="33" pos:column="37">element</name><op:operator pos:line="33" pos:column="44">.</op:operator><name pos:line="33" pos:column="45">Descendants</name></name><argument_list pos:line="33" pos:column="56">(<argument><expr><name><name pos:line="33" pos:column="57">SRC</name><op:operator pos:line="33" pos:column="60">.</op:operator><name pos:line="33" pos:column="61">Function</name></name></expr></argument>)</argument_list></call></expr></in></from>
                          <select pos:line="34" pos:column="27">select <expr><name pos:line="34" pos:column="34">e</name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <return pos:line="35" pos:column="13">return <expr><name pos:line="35" pos:column="20">results</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="38" pos:column="9">public</specifier> <name><name pos:line="38" pos:column="16">IEnumerable</name><argument_list pos:line="38" pos:column="27">&lt;<argument><name pos:line="38" pos:column="28">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="38" pos:column="38">test2</name><parameter_list pos:line="38" pos:column="43">(<param><decl><type><name pos:line="38" pos:column="44">XName</name></type> <name pos:line="38" pos:column="50">name</name></decl></param>)</parameter_list>
        <block pos:line="39" pos:column="9">{
            <return pos:line="40" pos:column="13">return <expr><call><name><name pos:line="40" pos:column="20">Enumerable</name><op:operator pos:line="40" pos:column="30">.</op:operator><name><name pos:line="40" pos:column="31">Empty</name><argument_list pos:line="40" pos:column="36">&lt;<argument><name pos:line="40" pos:column="37">XElement</name></argument>&gt;</argument_list></name></name><argument_list pos:line="40" pos:column="46">()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
