<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML\Utilities\ReadyNotifier.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>

<namespace pos:line="6" pos:column="1">namespace <name><name pos:line="6" pos:column="11">ABB</name><op:operator pos:line="6" pos:column="14">.</op:operator><name pos:line="6" pos:column="15">SrcML</name><op:operator pos:line="6" pos:column="20">.</op:operator><name pos:line="6" pos:column="21">Utilities</name></name> <block pos:line="6" pos:column="31">{
    <comment type="line" pos:line="7" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="8" pos:column="5">/// The ready-state notifier contains a boolean property and an event that fires whenever the state changes</comment>
    <comment type="line" pos:line="9" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="10" pos:column="5">public</specifier> class <name pos:line="10" pos:column="18">ReadyNotifier</name> <super pos:line="10" pos:column="32">: <name pos:line="10" pos:column="34">IDisposable</name></super> <block pos:line="10" pos:column="46">{
        <decl_stmt><decl><type><name pos:line="11" pos:column="9">bool</name></type> <name pos:line="11" pos:column="14">_ready</name></decl>;</decl_stmt>

        <comment type="line" pos:line="13" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="14" pos:column="9">/// Constructs the ReadyNotifier object</comment>
        <comment type="line" pos:line="15" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="16" pos:column="9">/// &lt;param name="parent"&gt;&lt;/param&gt;</comment>
        <constructor><specifier pos:line="17" pos:column="9">public</specifier> <name pos:line="17" pos:column="16">ReadyNotifier</name><parameter_list pos:line="17" pos:column="29">(<param><decl><type><name pos:line="17" pos:column="30">object</name></type> <name pos:line="17" pos:column="37">parent</name></decl></param>)</parameter_list> <block pos:line="17" pos:column="45">{
            <expr_stmt><expr><name pos:line="18" pos:column="13">_ready</name> <op:operator pos:line="18" pos:column="20">=</op:operator> <lit:literal type="boolean" pos:line="18" pos:column="22">true</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="19" pos:column="13">this</name><op:operator pos:line="19" pos:column="17">.</op:operator><name pos:line="19" pos:column="18">Parent</name></name> <op:operator pos:line="19" pos:column="25">=</op:operator> <name pos:line="19" pos:column="27">parent</name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="22" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="23" pos:column="9">/// True if the state is "ready". Changing this value causes &lt;see cref="IsReadyChanged"/&gt; to fire</comment>
        <comment type="line" pos:line="24" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="25" pos:column="9">public</specifier> <name pos:line="25" pos:column="16">bool</name></type> <name pos:line="25" pos:column="21">IsReady</name> <block pos:line="25" pos:column="29">{
            <function><name pos:line="26" pos:column="13">get</name> <block pos:line="26" pos:column="17">{ <return pos:line="26" pos:column="19">return <expr><name pos:line="26" pos:column="26">_ready</name></expr>;</return> }</block></function>
            <function><name pos:line="27" pos:column="13">set</name> <block pos:line="27" pos:column="17">{
                <decl_stmt><decl><type><name pos:line="28" pos:column="17">bool</name></type> <name pos:line="28" pos:column="22">stateChanged</name> <init pos:line="28" pos:column="35">= <expr><op:operator pos:line="28" pos:column="37">(</op:operator><name pos:line="28" pos:column="38">_ready</name> <op:operator pos:line="28" pos:column="45">!=</op:operator> <name pos:line="28" pos:column="48">value</name><op:operator pos:line="28" pos:column="53">)</op:operator></expr></init></decl>;</decl_stmt>
                <if pos:line="29" pos:column="17">if<condition pos:line="29" pos:column="19">(<expr><name pos:line="29" pos:column="20">stateChanged</name></expr>)</condition><then pos:line="29" pos:column="33"> <block pos:line="29" pos:column="34">{
                    <expr_stmt><expr><name pos:line="30" pos:column="21">_ready</name> <op:operator pos:line="30" pos:column="28">=</op:operator> <name pos:line="30" pos:column="30">value</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="31" pos:column="21">OnIsReadyChanged</name><argument_list pos:line="31" pos:column="37">(<argument><expr><op:operator pos:line="31" pos:column="38">new</op:operator> <call><name pos:line="31" pos:column="42">IsReadyChangedEventArgs</name><argument_list pos:line="31" pos:column="65">(<argument><expr><name pos:line="31" pos:column="66">_ready</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="36" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="37" pos:column="9">/// The parent object that should be used as the "sender" for &lt;see cref="IsReadyChanged"/&gt;</comment>
        <comment type="line" pos:line="38" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="39" pos:column="9">public</specifier> <name pos:line="39" pos:column="16">object</name></type> <name pos:line="39" pos:column="23">Parent</name> <block pos:line="39" pos:column="30">{ <function_decl><name pos:line="39" pos:column="32">get</name>;</function_decl> <function_decl><specifier pos:line="39" pos:column="37">private</specifier> <name pos:line="39" pos:column="45">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="41" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="42" pos:column="9">/// This event fires whenever the value of &lt;see cref="IsReady"/&gt; changes</comment>
        <comment type="line" pos:line="43" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="44" pos:column="9">public</specifier> <specifier pos:line="44" pos:column="16">event</specifier> <name><name pos:line="44" pos:column="22">EventHandler</name><argument_list pos:line="44" pos:column="34">&lt;<argument><name pos:line="44" pos:column="35">IsReadyChangedEventArgs</name></argument>&gt;</argument_list></name></type> <name pos:line="44" pos:column="60">IsReadyChanged</name></decl>;</decl_stmt>

        <comment type="line" pos:line="46" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="47" pos:column="9">/// Disposes of this notifier object</comment>
        <comment type="line" pos:line="48" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="49" pos:column="9">public</specifier> <name pos:line="49" pos:column="16">void</name></type> <name pos:line="49" pos:column="21">Dispose</name><parameter_list pos:line="49" pos:column="28">()</parameter_list> <block pos:line="49" pos:column="31">{
            <expr_stmt><expr><name pos:line="50" pos:column="13">IsReadyChanged</name> <op:operator pos:line="50" pos:column="28">=</op:operator> <name pos:line="50" pos:column="30">null</name></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="53" pos:column="9">private</specifier> <name pos:line="53" pos:column="17">void</name></type> <name pos:line="53" pos:column="22">OnIsReadyChanged</name><parameter_list pos:line="53" pos:column="38">(<param><decl><type><name pos:line="53" pos:column="39">IsReadyChangedEventArgs</name></type> <name pos:line="53" pos:column="63">e</name></decl></param>)</parameter_list> <block pos:line="53" pos:column="66">{
            <decl_stmt><decl><type><name><name pos:line="54" pos:column="13">EventHandler</name><argument_list pos:line="54" pos:column="25">&lt;<argument><name pos:line="54" pos:column="26">IsReadyChangedEventArgs</name></argument>&gt;</argument_list></name></type> <name pos:line="54" pos:column="51">handler</name> <init pos:line="54" pos:column="59">= <expr><name pos:line="54" pos:column="61">IsReadyChanged</name></expr></init></decl>;</decl_stmt>
            <if pos:line="55" pos:column="13">if<condition pos:line="55" pos:column="15">(<expr><name pos:line="55" pos:column="16">handler</name> <op:operator pos:line="55" pos:column="24">!=</op:operator> <name pos:line="55" pos:column="27">null</name></expr>)</condition><then pos:line="55" pos:column="32"> <block pos:line="55" pos:column="33">{
                <expr_stmt><expr><call><name pos:line="56" pos:column="17">handler</name><argument_list pos:line="56" pos:column="24">(<argument><expr><name><name pos:line="56" pos:column="25">this</name><op:operator pos:line="56" pos:column="29">.</op:operator><name pos:line="56" pos:column="30">Parent</name></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="38">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
