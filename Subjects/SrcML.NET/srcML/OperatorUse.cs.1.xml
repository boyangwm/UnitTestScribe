<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data\OperatorUse.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2014 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *    Patrick Francis (ABB Group) - API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="13" pos:column="1">using <name pos:line="13" pos:column="7">System</name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Collections</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">Generic</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Linq</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Text</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Xml</name></name>;</using>

<namespace pos:line="19" pos:column="1">namespace <name><name pos:line="19" pos:column="11">ABB</name><op:operator pos:line="19" pos:column="14">.</op:operator><name pos:line="19" pos:column="15">SrcML</name><op:operator pos:line="19" pos:column="20">.</op:operator><name pos:line="19" pos:column="21">Data</name></name> <block pos:line="19" pos:column="26">{
    <comment type="line" pos:line="20" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="21" pos:column="5">/// Represents the use of an operator in an expression.</comment>
    <comment type="line" pos:line="22" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="23" pos:column="5">public</specifier> class <name pos:line="23" pos:column="18">OperatorUse</name> <super pos:line="23" pos:column="30">: <name pos:line="23" pos:column="32">Expression</name></super> <block pos:line="23" pos:column="43">{

        <comment type="line" pos:line="25" pos:column="9">/// &lt;summary&gt; The XML name for OperatorUse &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="26" pos:column="9">public</specifier> <specifier pos:line="26" pos:column="16">new</specifier> <specifier pos:line="26" pos:column="20">const</specifier> <name pos:line="26" pos:column="26">string</name></type> <name pos:line="26" pos:column="33">XmlName</name> <init pos:line="26" pos:column="41">= <expr><lit:literal type="string" pos:line="26" pos:column="43">"op"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="28" pos:column="9">/// &lt;summary&gt; XML Name for &lt;see cref="Text" /&gt; &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="29" pos:column="9">public</specifier> <specifier pos:line="29" pos:column="16">const</specifier> <name pos:line="29" pos:column="22">string</name></type> <name pos:line="29" pos:column="29">XmlTextName</name> <init pos:line="29" pos:column="41">= <expr><lit:literal type="string" pos:line="29" pos:column="43">"text"</lit:literal></expr></init></decl>;</decl_stmt>
        
        <comment type="line" pos:line="31" pos:column="9">/// &lt;summary&gt; The text of the operator. &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="32" pos:column="9">public</specifier> <name pos:line="32" pos:column="16">string</name></type> <name pos:line="32" pos:column="23">Text</name> <block pos:line="32" pos:column="28">{ <function_decl><name pos:line="32" pos:column="30">get</name>;</function_decl> <function_decl><name pos:line="32" pos:column="35">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="34" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="35" pos:column="9">/// Instance method for getting &lt;see cref="OperatorUse.XmlName"/&gt;</comment>
        <comment type="line" pos:line="36" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="37" pos:column="9">/// &lt;returns&gt;Returns the XML name for OperatorUse&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="38" pos:column="9">public</specifier> <specifier pos:line="38" pos:column="16">override</specifier> <name pos:line="38" pos:column="25">string</name></type> <name pos:line="38" pos:column="32">GetXmlName</name><parameter_list pos:line="38" pos:column="42">()</parameter_list> <block pos:line="38" pos:column="45">{ <return pos:line="38" pos:column="47">return <expr><name><name pos:line="38" pos:column="54">OperatorUse</name><op:operator pos:line="38" pos:column="65">.</op:operator><name pos:line="38" pos:column="66">XmlName</name></name></expr>;</return> }</block></function>

        <comment type="line" pos:line="40" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="41" pos:column="9">/// Read the XML attributes from the current &lt;paramref name="reader"/&gt; position</comment>
        <comment type="line" pos:line="42" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="43" pos:column="9">/// &lt;param name="reader"&gt;The XML reader&lt;/param&gt;</comment>
        <function><type><specifier pos:line="44" pos:column="9">protected</specifier> <specifier pos:line="44" pos:column="19">override</specifier> <name pos:line="44" pos:column="28">void</name></type> <name pos:line="44" pos:column="33">ReadXmlAttributes</name><parameter_list pos:line="44" pos:column="50">(<param><decl><type><name pos:line="44" pos:column="51">XmlReader</name></type> <name pos:line="44" pos:column="61">reader</name></decl></param>)</parameter_list> <block pos:line="44" pos:column="69">{
            <decl_stmt><decl><type><name pos:line="45" pos:column="13">var</name></type> <name pos:line="45" pos:column="17">textAttribute</name> <init pos:line="45" pos:column="31">= <expr><call><name><name pos:line="45" pos:column="33">reader</name><op:operator pos:line="45" pos:column="39">.</op:operator><name pos:line="45" pos:column="40">GetAttribute</name></name><argument_list pos:line="45" pos:column="52">(<argument><expr><name pos:line="45" pos:column="53">XmlTextName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="46" pos:column="13">if<condition pos:line="46" pos:column="15">(<expr><op:operator pos:line="46" pos:column="16">!</op:operator><call><name><name pos:line="46" pos:column="17">String</name><op:operator pos:line="46" pos:column="23">.</op:operator><name pos:line="46" pos:column="24">IsNullOrEmpty</name></name><argument_list pos:line="46" pos:column="37">(<argument><expr><name pos:line="46" pos:column="38">textAttribute</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="46" pos:column="53"> <block pos:line="46" pos:column="54">{
                <expr_stmt><expr><name pos:line="47" pos:column="17">Text</name> <op:operator pos:line="47" pos:column="22">=</op:operator> <name pos:line="47" pos:column="24">textAttribute</name></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name pos:line="49" pos:column="13">base</name><op:operator pos:line="49" pos:column="17">.</op:operator><name pos:line="49" pos:column="18">ReadXmlAttributes</name></name><argument_list pos:line="49" pos:column="35">(<argument><expr><name pos:line="49" pos:column="36">reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="52" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="53" pos:column="9">/// Writes XML attributes from this object to the XML writer</comment>
        <comment type="line" pos:line="54" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="55" pos:column="9">/// &lt;param name="writer"&gt;The XML writer&lt;/param&gt;</comment>
        <function><type><specifier pos:line="56" pos:column="9">protected</specifier> <specifier pos:line="56" pos:column="19">override</specifier> <name pos:line="56" pos:column="28">void</name></type> <name pos:line="56" pos:column="33">WriteXmlAttributes</name><parameter_list pos:line="56" pos:column="51">(<param><decl><type><name pos:line="56" pos:column="52">XmlWriter</name></type> <name pos:line="56" pos:column="62">writer</name></decl></param>)</parameter_list> <block pos:line="56" pos:column="70">{
            <if pos:line="57" pos:column="13">if<condition pos:line="57" pos:column="15">(<expr><op:operator pos:line="57" pos:column="16">!</op:operator><call><name><name pos:line="57" pos:column="17">string</name><op:operator pos:line="57" pos:column="23">.</op:operator><name pos:line="57" pos:column="24">IsNullOrEmpty</name></name><argument_list pos:line="57" pos:column="37">(<argument><expr><name pos:line="57" pos:column="38">Text</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="57" pos:column="44"> <block pos:line="57" pos:column="45">{
                <expr_stmt><expr><call><name><name pos:line="58" pos:column="17">writer</name><op:operator pos:line="58" pos:column="23">.</op:operator><name pos:line="58" pos:column="24">WriteAttributeString</name></name><argument_list pos:line="58" pos:column="44">(<argument><expr><name pos:line="58" pos:column="45">XmlTextName</name></expr></argument>, <argument><expr><name pos:line="58" pos:column="58">Text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name pos:line="60" pos:column="13">base</name><op:operator pos:line="60" pos:column="17">.</op:operator><name pos:line="60" pos:column="18">WriteXmlAttributes</name></name><argument_list pos:line="60" pos:column="36">(<argument><expr><name pos:line="60" pos:column="37">writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="63" pos:column="9">/// &lt;summary&gt; Returns a string representation of this object. &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="64" pos:column="9">public</specifier> <specifier pos:line="64" pos:column="16">override</specifier> <name pos:line="64" pos:column="25">string</name></type> <name pos:line="64" pos:column="32">ToString</name><parameter_list pos:line="64" pos:column="40">()</parameter_list> <block pos:line="64" pos:column="43">{
            <return pos:line="65" pos:column="13">return <expr><name pos:line="65" pos:column="20">Text</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
