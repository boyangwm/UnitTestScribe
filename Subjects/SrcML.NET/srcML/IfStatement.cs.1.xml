<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data\IfStatement.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2014 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Patrick Francis (ABB Group) - initial API, implementation, &amp; documentation
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="13" pos:column="1">using <name pos:line="13" pos:column="7">System</name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Collections</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">Generic</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Collections</name><op:operator pos:line="15" pos:column="25">.</op:operator><name pos:line="15" pos:column="26">ObjectModel</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Linq</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Text</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Xml</name></name>;</using>

<namespace pos:line="20" pos:column="1">namespace <name><name pos:line="20" pos:column="11">ABB</name><op:operator pos:line="20" pos:column="14">.</op:operator><name pos:line="20" pos:column="15">SrcML</name><op:operator pos:line="20" pos:column="20">.</op:operator><name pos:line="20" pos:column="21">Data</name></name> <block pos:line="20" pos:column="26">{
    <comment type="line" pos:line="21" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="22" pos:column="5">/// Represents an if-statement in a program.</comment>
    <comment type="line" pos:line="23" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="24" pos:column="5">public</specifier> class <name pos:line="24" pos:column="18">IfStatement</name> <super pos:line="24" pos:column="30">: <name pos:line="24" pos:column="32">ConditionBlockStatement</name></super> <block pos:line="24" pos:column="56">{
        <decl_stmt><decl><type><specifier pos:line="25" pos:column="9">private</specifier> <name><name pos:line="25" pos:column="17">List</name><argument_list pos:line="25" pos:column="21">&lt;<argument><name pos:line="25" pos:column="22">Statement</name></argument>&gt;</argument_list></name></type> <name pos:line="25" pos:column="33">elseStatementsList</name></decl>;</decl_stmt>
        
        <comment type="line" pos:line="27" pos:column="9">/// &lt;summary&gt; The XML name for IfStatement. &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="28" pos:column="9">public</specifier> <specifier pos:line="28" pos:column="16">new</specifier> <specifier pos:line="28" pos:column="20">const</specifier> <name pos:line="28" pos:column="26">string</name></type> <name pos:line="28" pos:column="33">XmlName</name> <init pos:line="28" pos:column="41">= <expr><lit:literal type="string" pos:line="28" pos:column="43">"If"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="30" pos:column="9">/// &lt;summary&gt; The XML name for &lt;see cref="ElseStatements"/&gt;. &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="31" pos:column="9">public</specifier> <specifier pos:line="31" pos:column="16">const</specifier> <name pos:line="31" pos:column="22">string</name></type> <name pos:line="31" pos:column="29">XmlElseName</name> <init pos:line="31" pos:column="41">= <expr><lit:literal type="string" pos:line="31" pos:column="43">"Else"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="33" pos:column="9">/// &lt;summary&gt; Creates a new empty IfStatement. &lt;/summary&gt;</comment>
        <constructor><specifier pos:line="34" pos:column="9">public</specifier> <name pos:line="34" pos:column="16">IfStatement</name><parameter_list pos:line="34" pos:column="27">()</parameter_list> <member_list pos:line="34" pos:column="30">: <call><name pos:line="34" pos:column="32">base</name><argument_list pos:line="34" pos:column="36">()</argument_list></call> </member_list><block pos:line="34" pos:column="39">{
            <expr_stmt><expr><name pos:line="35" pos:column="13">elseStatementsList</name> <op:operator pos:line="35" pos:column="32">=</op:operator> <op:operator pos:line="35" pos:column="34">new</op:operator> <call><name><name pos:line="35" pos:column="38">List</name><argument_list pos:line="35" pos:column="42">&lt;<argument><name pos:line="35" pos:column="43">Statement</name></argument>&gt;</argument_list></name><argument_list pos:line="35" pos:column="53">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="36" pos:column="13">ElseStatements</name> <op:operator pos:line="36" pos:column="28">=</op:operator> <op:operator pos:line="36" pos:column="30">new</op:operator> <call><name><name pos:line="36" pos:column="34">ReadOnlyCollection</name><argument_list pos:line="36" pos:column="52">&lt;<argument><name pos:line="36" pos:column="53">Statement</name></argument>&gt;</argument_list></name><argument_list pos:line="36" pos:column="63">(<argument><expr><name pos:line="36" pos:column="64">elseStatementsList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>
        
        <comment type="line" pos:line="39" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="40" pos:column="9">/// The statements contained within the else block, if any.</comment>
        <comment type="line" pos:line="41" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="42" pos:column="9">public</specifier> <name><name pos:line="42" pos:column="16">ReadOnlyCollection</name><argument_list pos:line="42" pos:column="34">&lt;<argument><name pos:line="42" pos:column="35">Statement</name></argument>&gt;</argument_list></name></type> <name pos:line="42" pos:column="46">ElseStatements</name> <block pos:line="42" pos:column="61">{ <function_decl><name pos:line="42" pos:column="63">get</name>;</function_decl> <function_decl><specifier pos:line="42" pos:column="68">private</specifier> <name pos:line="42" pos:column="76">set</name>;</function_decl> }</block></decl></decl_stmt>
        
        <comment type="line" pos:line="44" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="45" pos:column="9">/// Adds the given statement to the ElseStatements collection.</comment>
        <comment type="line" pos:line="46" pos:column="9">/// If &lt;paramref name="child"/&gt; is null, nothing will be done.</comment>
        <comment type="line" pos:line="47" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="48" pos:column="9">/// &lt;param name="child"&gt;The statement to add.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="49" pos:column="9">public</specifier> <name pos:line="49" pos:column="16">void</name></type> <name pos:line="49" pos:column="21">AddElseStatement</name><parameter_list pos:line="49" pos:column="37">(<param><decl><type><name pos:line="49" pos:column="38">Statement</name></type> <name pos:line="49" pos:column="48">child</name></decl></param>)</parameter_list> <block pos:line="49" pos:column="55">{
            <if pos:line="50" pos:column="13">if<condition pos:line="50" pos:column="15">(<expr><name pos:line="50" pos:column="16">child</name> <op:operator pos:line="50" pos:column="22">!=</op:operator> <name pos:line="50" pos:column="25">null</name></expr>)</condition><then pos:line="50" pos:column="30"> <block pos:line="50" pos:column="31">{
                <expr_stmt><expr><name><name pos:line="51" pos:column="17">child</name><op:operator pos:line="51" pos:column="22">.</op:operator><name pos:line="51" pos:column="23">ParentStatement</name></name> <op:operator pos:line="51" pos:column="39">=</op:operator> <name pos:line="51" pos:column="41">this</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="52" pos:column="17">elseStatementsList</name><op:operator pos:line="52" pos:column="35">.</op:operator><name pos:line="52" pos:column="36">Add</name></name><argument_list pos:line="52" pos:column="39">(<argument><expr><name pos:line="52" pos:column="40">child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="56" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="57" pos:column="9">/// Adds the given statements to the ElseStatements collection.</comment>
        <comment type="line" pos:line="58" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="59" pos:column="9">/// &lt;param name="elseStatements"&gt;An enumerable of statements to add.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="60" pos:column="9">public</specifier> <name pos:line="60" pos:column="16">void</name></type> <name pos:line="60" pos:column="21">AddElseStatements</name><parameter_list pos:line="60" pos:column="38">(<param><decl><type><name><name pos:line="60" pos:column="39">IEnumerable</name><argument_list pos:line="60" pos:column="50">&lt;<argument><name pos:line="60" pos:column="51">Statement</name></argument>&gt;</argument_list></name></type> <name pos:line="60" pos:column="62">elseStatements</name></decl></param>)</parameter_list> <block pos:line="60" pos:column="78">{
            <foreach pos:line="61" pos:column="13">foreach(<init><decl><type><name pos:line="61" pos:column="21">var</name></type> <name pos:line="61" pos:column="25">stmt</name> <range pos:line="61" pos:column="30">in <expr><name pos:line="61" pos:column="33">elseStatements</name></expr></range></decl></init>) <block pos:line="61" pos:column="49">{
                <expr_stmt><expr><call><name pos:line="62" pos:column="17">AddElseStatement</name><argument_list pos:line="62" pos:column="33">(<argument><expr><name pos:line="62" pos:column="34">stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>

        <comment type="line" pos:line="66" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="67" pos:column="9">/// Returns the child statements, including those in the Else block.</comment>
        <comment type="line" pos:line="68" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="69" pos:column="9">protected</specifier> <specifier pos:line="69" pos:column="19">override</specifier> <name><name pos:line="69" pos:column="28">IEnumerable</name><argument_list pos:line="69" pos:column="39">&lt;<argument><name pos:line="69" pos:column="40">AbstractProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="69" pos:column="64">GetChildren</name><parameter_list pos:line="69" pos:column="75">()</parameter_list> <block pos:line="69" pos:column="78">{
            <return pos:line="70" pos:column="13">return <expr><call><name><name pos:line="70" pos:column="20">base</name><op:operator pos:line="70" pos:column="24">.</op:operator><name pos:line="70" pos:column="25">GetChildren</name></name><argument_list pos:line="70" pos:column="36">()</argument_list></call><op:operator pos:line="70" pos:column="38">.</op:operator><call><name pos:line="70" pos:column="39">Concat</name><argument_list pos:line="70" pos:column="45">(<argument><expr><name pos:line="70" pos:column="46">ElseStatements</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="73" pos:column="9">/// &lt;summary&gt; Returns the XML name for this program element. &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="74" pos:column="9">public</specifier> <specifier pos:line="74" pos:column="16">override</specifier> <name pos:line="74" pos:column="25">string</name></type> <name pos:line="74" pos:column="32">GetXmlName</name><parameter_list pos:line="74" pos:column="42">()</parameter_list> <block pos:line="74" pos:column="45">{ <return pos:line="74" pos:column="47">return <expr><name><name pos:line="74" pos:column="54">IfStatement</name><op:operator pos:line="74" pos:column="65">.</op:operator><name pos:line="74" pos:column="66">XmlName</name></name></expr>;</return> }</block></function>

        <comment type="line" pos:line="76" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="77" pos:column="9">/// Processes the child of the current reader position into a child of this object.</comment>
        <comment type="line" pos:line="78" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="79" pos:column="9">/// &lt;param name="reader"&gt;The XML reader&lt;/param&gt;</comment>
        <function><type><specifier pos:line="80" pos:column="9">protected</specifier> <specifier pos:line="80" pos:column="19">override</specifier> <name pos:line="80" pos:column="28">void</name></type> <name pos:line="80" pos:column="33">ReadXmlChild</name><parameter_list pos:line="80" pos:column="45">(<param><decl><type><name pos:line="80" pos:column="46">XmlReader</name></type> <name pos:line="80" pos:column="56">reader</name></decl></param>)</parameter_list> <block pos:line="80" pos:column="64">{
            <if pos:line="81" pos:column="13">if<condition pos:line="81" pos:column="15">(<expr><name pos:line="81" pos:column="16">XmlElseName</name> <op:operator pos:line="81" pos:column="28">==</op:operator> <name><name pos:line="81" pos:column="31">reader</name><op:operator pos:line="81" pos:column="37">.</op:operator><name pos:line="81" pos:column="38">Name</name></name></expr>)</condition><then pos:line="81" pos:column="43"> <block pos:line="81" pos:column="44">{
                <expr_stmt><expr><call><name pos:line="82" pos:column="17">AddElseStatements</name><argument_list pos:line="82" pos:column="34">(<argument><expr><call><name><name pos:line="82" pos:column="35">XmlSerialization</name><op:operator pos:line="82" pos:column="51">.</op:operator><name pos:line="82" pos:column="52">ReadChildStatements</name></name><argument_list pos:line="82" pos:column="71">(<argument><expr><name pos:line="82" pos:column="72">reader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="83" pos:column="15">else <block pos:line="83" pos:column="20">{
                <expr_stmt><expr><call><name><name pos:line="84" pos:column="17">base</name><op:operator pos:line="84" pos:column="21">.</op:operator><name pos:line="84" pos:column="22">ReadXmlChild</name></name><argument_list pos:line="84" pos:column="34">(<argument><expr><name pos:line="84" pos:column="35">reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></function>

        <comment type="line" pos:line="88" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="89" pos:column="9">/// Writes the contents of this object to &lt;paramref name="writer"/&gt;.</comment>
        <comment type="line" pos:line="90" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="91" pos:column="9">/// &lt;param name="writer"&gt;The XML writer to write to&lt;/param&gt;</comment>
        <function><type><specifier pos:line="92" pos:column="9">protected</specifier> <specifier pos:line="92" pos:column="19">override</specifier> <name pos:line="92" pos:column="28">void</name></type> <name pos:line="92" pos:column="33">WriteXmlContents</name><parameter_list pos:line="92" pos:column="49">(<param><decl><type><name pos:line="92" pos:column="50">XmlWriter</name></type> <name pos:line="92" pos:column="60">writer</name></decl></param>)</parameter_list> <block pos:line="92" pos:column="68">{
            <expr_stmt><expr><call><name><name pos:line="93" pos:column="13">base</name><op:operator pos:line="93" pos:column="17">.</op:operator><name pos:line="93" pos:column="18">WriteXmlContents</name></name><argument_list pos:line="93" pos:column="34">(<argument><expr><name pos:line="93" pos:column="35">writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="94" pos:column="13">XmlSerialization</name><op:operator pos:line="94" pos:column="29">.</op:operator><name><name pos:line="94" pos:column="30">WriteCollection</name><argument_list pos:line="94" pos:column="45">&lt;<argument><name pos:line="94" pos:column="46">Statement</name></argument>&gt;</argument_list></name></name><argument_list pos:line="94" pos:column="56">(<argument><expr><name pos:line="94" pos:column="57">writer</name></expr></argument>, <argument><expr><name pos:line="94" pos:column="65">XmlElseName</name></expr></argument>, <argument><expr><name pos:line="94" pos:column="78">ElseStatements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="97" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="98" pos:column="9">/// Returns the children of this statement that have the same name as the given &lt;paramref name="use"/&gt;, and the given type.</comment>
        <comment type="line" pos:line="99" pos:column="9">/// This method searches only the immediate children, and not further descendants.</comment>
        <comment type="line" pos:line="100" pos:column="9">/// If the &lt;paramref name="use"/&gt; occurs within this statement, this method will return only the children</comment>
        <comment type="line" pos:line="101" pos:column="9">/// that occur prior to that use.</comment>
        <comment type="line" pos:line="102" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="103" pos:column="9">/// &lt;typeparam name="T"&gt;The type of children to return.&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="104" pos:column="9">/// &lt;param name="use"&gt;The use containing the name to search for.&lt;/param&gt;</comment>
        <comment type="line" pos:line="105" pos:column="9">/// &lt;param name="searchDeclarations"&gt;Whether to search the child DeclarationStatements for named entities.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="106" pos:column="9">public</specifier> <specifier pos:line="106" pos:column="16">override</specifier> <name><name pos:line="106" pos:column="25">IEnumerable</name><argument_list pos:line="106" pos:column="36">&lt;<argument><name pos:line="106" pos:column="37">T</name></argument>&gt;</argument_list></name></type> <name><name pos:line="106" pos:column="40">GetNamedChildren</name><argument_list pos:line="106" pos:column="56">&lt;<argument><name pos:line="106" pos:column="57">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="106" pos:column="59">(<param><decl><type><name pos:line="106" pos:column="60">NameUse</name></type> <name pos:line="106" pos:column="68">use</name></decl></param>, <param><decl><type><name pos:line="106" pos:column="73">bool</name></type> <name pos:line="106" pos:column="78">searchDeclarations</name></decl></param>)</parameter_list> <block pos:line="106" pos:column="98">{
            <decl_stmt><decl><type><name pos:line="107" pos:column="13">var</name></type> <name pos:line="107" pos:column="17">matches</name> <init pos:line="107" pos:column="25">= <expr><call><name><name pos:line="107" pos:column="27">base</name><op:operator pos:line="107" pos:column="31">.</op:operator><name><name pos:line="107" pos:column="32">GetNamedChildren</name><argument_list pos:line="107" pos:column="48">&lt;<argument><name pos:line="107" pos:column="49">T</name></argument>&gt;</argument_list></name></name><argument_list pos:line="107" pos:column="51">(<argument><expr><name pos:line="107" pos:column="52">use</name></expr></argument>, <argument><expr><name pos:line="107" pos:column="57">searchDeclarations</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="108" pos:column="13">//check if we should filter the results</comment>
            <if pos:line="109" pos:column="13">if<condition pos:line="109" pos:column="15">(<expr><name><name pos:line="109" pos:column="16">ElseStatements</name><op:operator pos:line="109" pos:column="30">.</op:operator><name pos:line="109" pos:column="31">Count</name></name> <op:operator pos:line="109" pos:column="37">&gt;</op:operator> <lit:literal type="number" pos:line="109" pos:column="39">0</lit:literal></expr>)</condition><then pos:line="109" pos:column="41"> <block pos:line="109" pos:column="42">{
                <decl_stmt><decl><type><name pos:line="110" pos:column="17">var</name></type> <name pos:line="110" pos:column="21">firstElseLoc</name> <init pos:line="110" pos:column="34">= <expr><call><name><name pos:line="110" pos:column="36">ElseStatements</name><op:operator pos:line="110" pos:column="50">.</op:operator><name pos:line="110" pos:column="51">First</name></name><argument_list pos:line="110" pos:column="56">()</argument_list></call><op:operator pos:line="110" pos:column="58">.</op:operator><name pos:line="110" pos:column="59">PrimaryLocation</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="111" pos:column="17">var</name></type> <name pos:line="111" pos:column="21">lastElseLoc</name> <init pos:line="111" pos:column="33">= <expr><call><name><name pos:line="111" pos:column="35">ElseStatements</name><op:operator pos:line="111" pos:column="49">.</op:operator><name pos:line="111" pos:column="50">Last</name></name><argument_list pos:line="111" pos:column="54">()</argument_list></call><op:operator pos:line="111" pos:column="56">.</op:operator><name pos:line="111" pos:column="57">PrimaryLocation</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="112" pos:column="17">var</name></type> <name pos:line="112" pos:column="21">elseLocation</name> <init pos:line="112" pos:column="34">= <expr><op:operator pos:line="112" pos:column="36">new</op:operator> <call><name pos:line="112" pos:column="40">SourceLocation</name><argument_list pos:line="112" pos:column="54">(<argument><expr><name><name pos:line="112" pos:column="55">firstElseLoc</name><op:operator pos:line="112" pos:column="67">.</op:operator><name pos:line="112" pos:column="68">SourceFileName</name></name></expr></argument>, <argument><expr><name><name pos:line="112" pos:column="84">firstElseLoc</name><op:operator pos:line="112" pos:column="96">.</op:operator><name pos:line="112" pos:column="97">StartingLineNumber</name></name></expr></argument>, <argument><expr><name><name pos:line="112" pos:column="117">firstElseLoc</name><op:operator pos:line="112" pos:column="129">.</op:operator><name pos:line="112" pos:column="130">StartingColumnNumber</name></name></expr></argument>, <argument><expr><name><name pos:line="112" pos:column="152">lastElseLoc</name><op:operator pos:line="112" pos:column="163">.</op:operator><name pos:line="112" pos:column="164">EndingLineNumber</name></name></expr></argument>, <argument><expr><name><name pos:line="112" pos:column="182">lastElseLoc</name><op:operator pos:line="112" pos:column="193">.</op:operator><name pos:line="112" pos:column="194">EndingColumnNumber</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="113" pos:column="17">if<condition pos:line="113" pos:column="19">(<expr><call><name><name pos:line="113" pos:column="20">string</name><op:operator pos:line="113" pos:column="26">.</op:operator><name pos:line="113" pos:column="27">Compare</name></name><argument_list pos:line="113" pos:column="34">(<argument><expr><name><name pos:line="113" pos:column="35">elseLocation</name><op:operator pos:line="113" pos:column="47">.</op:operator><name pos:line="113" pos:column="48">SourceFileName</name></name></expr></argument>, <argument><expr><name><name pos:line="113" pos:column="64">use</name><op:operator pos:line="113" pos:column="67">.</op:operator><name pos:line="113" pos:column="68">Location</name><op:operator pos:line="113" pos:column="76">.</op:operator><name pos:line="113" pos:column="77">SourceFileName</name></name></expr></argument>, <argument><expr><name><name pos:line="113" pos:column="93">StringComparison</name><op:operator pos:line="113" pos:column="109">.</op:operator><name pos:line="113" pos:column="110">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="113" pos:column="129">==</op:operator> <lit:literal type="number" pos:line="113" pos:column="132">0</lit:literal>
                   <op:operator pos:line="114" pos:column="20">&amp;&amp;</op:operator> <call><name><name pos:line="114" pos:column="23">elseLocation</name><op:operator pos:line="114" pos:column="35">.</op:operator><name pos:line="114" pos:column="36">Contains</name></name><argument_list pos:line="114" pos:column="44">(<argument><expr><name><name pos:line="114" pos:column="45">use</name><op:operator pos:line="114" pos:column="48">.</op:operator><name pos:line="114" pos:column="49">Location</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="114" pos:column="59"> <block pos:line="114" pos:column="60">{
                    <comment type="line" pos:line="115" pos:column="21">//the use is in the else-block, don't return results from the then-block</comment>
                    <return pos:line="116" pos:column="21">return <expr><call><name><name pos:line="116" pos:column="28">matches</name><op:operator pos:line="116" pos:column="35">.</op:operator><name pos:line="116" pos:column="36">SkipWhile</name></name><argument_list pos:line="116" pos:column="45">(<argument><expr><lambda><name pos:line="116" pos:column="46">m</name> <op:operator pos:line="116" pos:column="48">=&gt;</op:operator> <call><name><name pos:line="116" pos:column="51">PositionComparer</name><op:operator pos:line="116" pos:column="67">.</op:operator><name pos:line="116" pos:column="68">CompareLocation</name></name><argument_list pos:line="116" pos:column="83">(<argument><expr><call><name><name pos:line="116" pos:column="84">m</name><op:operator pos:line="116" pos:column="85">.</op:operator><name pos:line="116" pos:column="86">GetLocations</name></name><argument_list pos:line="116" pos:column="98">()</argument_list></call><op:operator pos:line="116" pos:column="100">.</op:operator><call><name pos:line="116" pos:column="101">First</name><argument_list pos:line="116" pos:column="106">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="116" pos:column="110">elseLocation</name></expr></argument>)</argument_list></call> <op:operator pos:line="116" pos:column="124">&lt;</op:operator> <lit:literal type="number" pos:line="116" pos:column="126">0</lit:literal></lambda></expr></argument>)</argument_list></call></expr>;</return>
                }</block></then></if>
            }</block></then></if>
            <return pos:line="119" pos:column="13">return <expr><name pos:line="119" pos:column="20">matches</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="122" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="123" pos:column="9">/// Returns a string representation of this statement.</comment>
        <comment type="line" pos:line="124" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="125" pos:column="9">public</specifier> <specifier pos:line="125" pos:column="16">override</specifier> <name pos:line="125" pos:column="25">string</name></type> <name pos:line="125" pos:column="32">ToString</name><parameter_list pos:line="125" pos:column="40">()</parameter_list> <block pos:line="125" pos:column="43">{
            <return pos:line="126" pos:column="13">return <expr><call><name><name pos:line="126" pos:column="20">string</name><op:operator pos:line="126" pos:column="26">.</op:operator><name pos:line="126" pos:column="27">Format</name></name><argument_list pos:line="126" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="126" pos:column="34">"if({0})"</lit:literal></expr></argument>, <argument><expr><name pos:line="126" pos:column="45">Condition</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
