<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML\Utilities\Base32.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2010 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *    Jiang Zheng (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="13" pos:column="1">using <name pos:line="13" pos:column="7">System</name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">IO</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Text</name></name>;</using>

<namespace pos:line="17" pos:column="1">namespace <name><name pos:line="17" pos:column="11">ABB</name><op:operator pos:line="17" pos:column="14">.</op:operator><name pos:line="17" pos:column="15">SrcML</name><op:operator pos:line="17" pos:column="20">.</op:operator><name pos:line="17" pos:column="21">Utilities</name></name>
<block pos:line="18" pos:column="1">{
    <comment type="line" pos:line="19" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="20" pos:column="5">/// Base32 encoding and decoding.</comment>
    <comment type="line" pos:line="21" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="22" pos:column="5">public</specifier> <specifier pos:line="22" pos:column="12">sealed</specifier> class <name pos:line="22" pos:column="25">Base32</name>
    <block pos:line="23" pos:column="5">{
        <comment type="line" pos:line="24" pos:column="9">// the valid chars for the encoding</comment>
        <decl_stmt><decl><type><specifier pos:line="25" pos:column="9">private</specifier> <specifier pos:line="25" pos:column="17">static</specifier> <name pos:line="25" pos:column="24">string</name></type> <name pos:line="25" pos:column="31">ValidChars</name> <init pos:line="25" pos:column="42">= <expr><lit:literal type="string" pos:line="25" pos:column="44">"QAZ2WSX3"</lit:literal> <op:operator pos:line="25" pos:column="55">+</op:operator> <lit:literal type="string" pos:line="25" pos:column="57">"EDC4RFV5"</lit:literal> <op:operator pos:line="25" pos:column="68">+</op:operator> <lit:literal type="string" pos:line="25" pos:column="70">"TGB6YHN7"</lit:literal> <op:operator pos:line="25" pos:column="81">+</op:operator> <lit:literal type="string" pos:line="25" pos:column="83">"UJM8K9LP"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="27" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="28" pos:column="9">/// Converts a string of bytes to a Base32-k string.</comment>
        <comment type="line" pos:line="29" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="30" pos:column="9">/// &lt;param name="str"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="31" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="32" pos:column="9">public</specifier> <specifier pos:line="32" pos:column="16">static</specifier> <name pos:line="32" pos:column="23">string</name></type> <name pos:line="32" pos:column="30">ToBase32String</name><parameter_list pos:line="32" pos:column="44">(<param><decl><type><name pos:line="32" pos:column="45">string</name></type> <name pos:line="32" pos:column="52">str</name></decl></param>)</parameter_list>
        <block pos:line="33" pos:column="9">{
            <return pos:line="34" pos:column="13">return <expr><call><name pos:line="34" pos:column="20">ToBase32String</name><argument_list pos:line="34" pos:column="34">(<argument><expr><call><name><name pos:line="34" pos:column="35">Encoding</name><op:operator pos:line="34" pos:column="43">.</op:operator><name pos:line="34" pos:column="44">ASCII</name><op:operator pos:line="34" pos:column="49">.</op:operator><name pos:line="34" pos:column="50">GetBytes</name></name><argument_list pos:line="34" pos:column="58">(<argument><expr><name pos:line="34" pos:column="59">str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="37" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="38" pos:column="9">/// Converts an array of bytes to a Base32-k string.</comment>
        <comment type="line" pos:line="39" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="40" pos:column="9">public</specifier> <specifier pos:line="40" pos:column="16">static</specifier> <name pos:line="40" pos:column="23">string</name></type> <name pos:line="40" pos:column="30">ToBase32String</name><parameter_list pos:line="40" pos:column="44">(<param><decl><type><name><name pos:line="40" pos:column="45">byte</name><index pos:line="40" pos:column="49">[]</index></name></type> <name pos:line="40" pos:column="52">bytes</name></decl></param>)</parameter_list>
        <block pos:line="41" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="42" pos:column="13">StringBuilder</name></type> <name pos:line="42" pos:column="27">sb</name> <init pos:line="42" pos:column="30">= <expr><op:operator pos:line="42" pos:column="32">new</op:operator> <call><name pos:line="42" pos:column="36">StringBuilder</name><argument_list pos:line="42" pos:column="49">()</argument_list></call></expr></init></decl>;</decl_stmt>         <comment type="line" pos:line="42" pos:column="61">// holds the base32 chars</comment>
            <decl_stmt><decl><type><name pos:line="43" pos:column="13">byte</name></type> <name pos:line="43" pos:column="18">index</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="44" pos:column="13">int</name></type> <name pos:line="44" pos:column="17">hi</name> <init pos:line="44" pos:column="20">= <expr><lit:literal type="number" pos:line="44" pos:column="22">5</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="45" pos:column="13">int</name></type> <name pos:line="45" pos:column="17">currentByte</name> <init pos:line="45" pos:column="29">= <expr><lit:literal type="number" pos:line="45" pos:column="31">0</lit:literal></expr></init></decl>;</decl_stmt>

            <while pos:line="47" pos:column="13">while <condition pos:line="47" pos:column="19">(<expr><name pos:line="47" pos:column="20">currentByte</name> <op:operator pos:line="47" pos:column="32">&lt;</op:operator> <name><name pos:line="47" pos:column="34">bytes</name><op:operator pos:line="47" pos:column="39">.</op:operator><name pos:line="47" pos:column="40">Length</name></name></expr>)</condition>
            <block pos:line="48" pos:column="13">{
                <comment type="line" pos:line="49" pos:column="17">// do we need to use the next byte?</comment>
                <if pos:line="50" pos:column="17">if <condition pos:line="50" pos:column="20">(<expr><name pos:line="50" pos:column="21">hi</name> <op:operator pos:line="50" pos:column="24">&gt;</op:operator> <lit:literal type="number" pos:line="50" pos:column="26">8</lit:literal></expr>)</condition><then pos:line="50" pos:column="28">
                <block pos:line="51" pos:column="17">{
                    <comment type="line" pos:line="52" pos:column="21">// get the last piece from the current byte, shift it to the right</comment>
                    <comment type="line" pos:line="53" pos:column="21">// and increment the byte counter</comment>
                    <expr_stmt><expr><name pos:line="54" pos:column="21">index</name> <op:operator pos:line="54" pos:column="27">=</op:operator> <call pos:line="54" pos:column="29">(<name pos:line="54" pos:column="30">byte</name>)<argument_list pos:line="54" pos:column="35">(<argument><expr><name><name pos:line="54" pos:column="36">bytes</name><index pos:line="54" pos:column="41">[<expr><name pos:line="54" pos:column="42">currentByte</name><op:operator pos:line="54" pos:column="53">++</op:operator></expr>]</index></name> <op:operator pos:line="54" pos:column="57">&gt;&gt;</op:operator> <op:operator pos:line="54" pos:column="60">(</op:operator><name pos:line="54" pos:column="61">hi</name> <op:operator pos:line="54" pos:column="64">-</op:operator> <lit:literal type="number" pos:line="54" pos:column="66">5</lit:literal><op:operator pos:line="54" pos:column="67">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if pos:line="55" pos:column="21">if <condition pos:line="55" pos:column="24">(<expr><name pos:line="55" pos:column="25">currentByte</name> <op:operator pos:line="55" pos:column="37">!=</op:operator> <name><name pos:line="55" pos:column="40">bytes</name><op:operator pos:line="55" pos:column="45">.</op:operator><name pos:line="55" pos:column="46">Length</name></name></expr>)</condition><then pos:line="55" pos:column="53">
                    <block pos:line="56" pos:column="21">{
                        <comment type="line" pos:line="57" pos:column="25">// if we are not at the end, get the first piece from</comment>
                        <comment type="line" pos:line="58" pos:column="25">// the next byte, clear it and shift it to the left</comment>
                        <expr_stmt><expr><name pos:line="59" pos:column="25">index</name> <op:operator pos:line="59" pos:column="31">=</op:operator> <call pos:line="59" pos:column="33">(<name pos:line="59" pos:column="34">byte</name>)<argument_list pos:line="59" pos:column="39">(<argument><expr><op:operator pos:line="59" pos:column="40">(</op:operator><call pos:line="59" pos:column="41">(<name pos:line="59" pos:column="42">byte</name>)<argument_list pos:line="59" pos:column="47">(<argument><expr><name><name pos:line="59" pos:column="48">bytes</name><index pos:line="59" pos:column="53">[<expr><name pos:line="59" pos:column="54">currentByte</name></expr>]</index></name> <op:operator pos:line="59" pos:column="67">&lt;&lt;</op:operator> <op:operator pos:line="59" pos:column="70">(</op:operator><lit:literal type="number" pos:line="59" pos:column="71">16</lit:literal> <op:operator pos:line="59" pos:column="74">-</op:operator> <name pos:line="59" pos:column="76">hi</name><op:operator pos:line="59" pos:column="78">)</op:operator></expr></argument>)</argument_list></call> <op:operator pos:line="59" pos:column="81">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="59" pos:column="84">3</lit:literal><op:operator pos:line="59" pos:column="85">)</op:operator> <op:operator pos:line="59" pos:column="87">|</op:operator> <name pos:line="59" pos:column="89">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>

                    <expr_stmt><expr><name pos:line="62" pos:column="21">hi</name> <op:operator pos:line="62" pos:column="24">-=</op:operator> <lit:literal type="number" pos:line="62" pos:column="27">3</lit:literal></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="64" pos:column="17">else <if pos:line="64" pos:column="22">if <condition pos:line="64" pos:column="25">(<expr><name pos:line="64" pos:column="26">hi</name> <op:operator pos:line="64" pos:column="29">==</op:operator> <lit:literal type="number" pos:line="64" pos:column="32">8</lit:literal></expr>)</condition><then pos:line="64" pos:column="34">
                <block pos:line="65" pos:column="17">{
                    <expr_stmt><expr><name pos:line="66" pos:column="21">index</name> <op:operator pos:line="66" pos:column="27">=</op:operator> <call pos:line="66" pos:column="29">(<name pos:line="66" pos:column="30">byte</name>)<argument_list pos:line="66" pos:column="35">(<argument><expr><name><name pos:line="66" pos:column="36">bytes</name><index pos:line="66" pos:column="41">[<expr><name pos:line="66" pos:column="42">currentByte</name><op:operator pos:line="66" pos:column="53">++</op:operator></expr>]</index></name> <op:operator pos:line="66" pos:column="57">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="66" pos:column="60">3</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="67" pos:column="21">hi</name> <op:operator pos:line="67" pos:column="24">-=</op:operator> <lit:literal type="number" pos:line="67" pos:column="27">3</lit:literal></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="69" pos:column="17">else
                <block pos:line="70" pos:column="17">{

                    <comment type="line" pos:line="72" pos:column="21">// simply get the stuff from the current byte</comment>
                    <expr_stmt><expr><name pos:line="73" pos:column="21">index</name> <op:operator pos:line="73" pos:column="27">=</op:operator> <call pos:line="73" pos:column="29">(<name pos:line="73" pos:column="30">byte</name>)<argument_list pos:line="73" pos:column="35">(<argument><expr><call pos:line="73" pos:column="36">(<name pos:line="73" pos:column="37">byte</name>)<argument_list pos:line="73" pos:column="42">(<argument><expr><name><name pos:line="73" pos:column="43">bytes</name><index pos:line="73" pos:column="48">[<expr><name pos:line="73" pos:column="49">currentByte</name></expr>]</index></name> <op:operator pos:line="73" pos:column="62">&lt;&lt;</op:operator> <op:operator pos:line="73" pos:column="65">(</op:operator><lit:literal type="number" pos:line="73" pos:column="66">8</lit:literal> <op:operator pos:line="73" pos:column="68">-</op:operator> <name pos:line="73" pos:column="70">hi</name><op:operator pos:line="73" pos:column="72">)</op:operator></expr></argument>)</argument_list></call> <op:operator pos:line="73" pos:column="75">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="73" pos:column="78">3</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="74" pos:column="21">hi</name> <op:operator pos:line="74" pos:column="24">+=</op:operator> <lit:literal type="number" pos:line="74" pos:column="27">5</lit:literal></expr>;</expr_stmt>
                }</block></else></if></else></if>

                <expr_stmt><expr><call><name><name pos:line="77" pos:column="17">sb</name><op:operator pos:line="77" pos:column="19">.</op:operator><name pos:line="77" pos:column="20">Append</name></name><argument_list pos:line="77" pos:column="26">(<argument><expr><name><name pos:line="77" pos:column="27">ValidChars</name><index pos:line="77" pos:column="37">[<expr><name pos:line="77" pos:column="38">index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>

            <return pos:line="80" pos:column="13">return <expr><call><name><name pos:line="80" pos:column="20">sb</name><op:operator pos:line="80" pos:column="22">.</op:operator><name pos:line="80" pos:column="23">ToString</name></name><argument_list pos:line="80" pos:column="31">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="83" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="84" pos:column="9">/// Converts a Base32-k string into an array of bytes.</comment>
        <comment type="line" pos:line="85" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="86" pos:column="9">/// &lt;exception cref="System.ArgumentException"&gt;</comment>
        <comment type="line" pos:line="87" pos:column="9">/// Input string &lt;paramref name="str"&gt;str&lt;/paramref&gt; contains invalid Base32-k characters.</comment>
        <comment type="line" pos:line="88" pos:column="9">/// &lt;/exception&gt;</comment>
        <function><type><specifier pos:line="89" pos:column="9">public</specifier> <specifier pos:line="89" pos:column="16">static</specifier> <name pos:line="89" pos:column="23">string</name></type> <name pos:line="89" pos:column="30">FromBase32String</name><parameter_list pos:line="89" pos:column="46">(<param><decl><type><name pos:line="89" pos:column="47">string</name></type> <name pos:line="89" pos:column="54">str</name></decl></param>)</parameter_list>
        <block pos:line="90" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="91" pos:column="13">int</name></type> <name pos:line="91" pos:column="17">numBytes</name> <init pos:line="91" pos:column="26">= <expr><name><name pos:line="91" pos:column="28">str</name><op:operator pos:line="91" pos:column="31">.</op:operator><name pos:line="91" pos:column="32">Length</name> <type:modifier pos:line="91" pos:column="39">*</type:modifier></name> <lit:literal type="number" pos:line="91" pos:column="41">5</lit:literal> <op:operator pos:line="91" pos:column="43">/</op:operator> <lit:literal type="number" pos:line="91" pos:column="45">8</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="92" pos:column="13">byte</name><index pos:line="92" pos:column="17">[]</index></type> <name pos:line="92" pos:column="20">bytes</name> <init pos:line="92" pos:column="26">= <expr><op:operator pos:line="92" pos:column="28">new</op:operator> <name><name pos:line="92" pos:column="32">Byte</name><index pos:line="92" pos:column="36">[<expr><name pos:line="92" pos:column="37">numBytes</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="94" pos:column="13">// all UPPERCASE chars</comment>
            <expr_stmt><expr><name pos:line="95" pos:column="13">str</name> <op:operator pos:line="95" pos:column="17">=</op:operator> <call><name><name pos:line="95" pos:column="19">str</name><op:operator pos:line="95" pos:column="22">.</op:operator><name pos:line="95" pos:column="23">ToUpper</name></name><argument_list pos:line="95" pos:column="30">()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="97" pos:column="13">int</name></type> <name pos:line="97" pos:column="17">bit_buffer</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="98" pos:column="13">int</name></type> <name pos:line="98" pos:column="17">currentCharIndex</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="99" pos:column="13">int</name></type> <name pos:line="99" pos:column="17">bits_in_buffer</name></decl>;</decl_stmt>

            <if pos:line="101" pos:column="13">if <condition pos:line="101" pos:column="16">(<expr><name><name pos:line="101" pos:column="17">str</name><op:operator pos:line="101" pos:column="20">.</op:operator><name pos:line="101" pos:column="21">Length</name></name> <op:operator pos:line="101" pos:column="28">&lt;</op:operator> <lit:literal type="number" pos:line="101" pos:column="30">3</lit:literal></expr>)</condition><then pos:line="101" pos:column="32">
            <block pos:line="102" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="103" pos:column="17">bytes</name><index pos:line="103" pos:column="22">[<expr><lit:literal type="number" pos:line="103" pos:column="23">0</lit:literal></expr>]</index></name> <op:operator pos:line="103" pos:column="26">=</op:operator> <call pos:line="103" pos:column="28">(<name pos:line="103" pos:column="29">byte</name>)<argument_list pos:line="103" pos:column="34">(<argument><expr><call><name><name pos:line="103" pos:column="35">ValidChars</name><op:operator pos:line="103" pos:column="45">.</op:operator><name pos:line="103" pos:column="46">IndexOf</name></name><argument_list pos:line="103" pos:column="53">(<argument><expr><name><name pos:line="103" pos:column="54">str</name><index pos:line="103" pos:column="57">[<expr><lit:literal type="number" pos:line="103" pos:column="58">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="103" pos:column="62">|</op:operator> <call><name><name pos:line="103" pos:column="64">ValidChars</name><op:operator pos:line="103" pos:column="74">.</op:operator><name pos:line="103" pos:column="75">IndexOf</name></name><argument_list pos:line="103" pos:column="82">(<argument><expr><name><name pos:line="103" pos:column="83">str</name><index pos:line="103" pos:column="86">[<expr><lit:literal type="number" pos:line="103" pos:column="87">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="103" pos:column="91">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="103" pos:column="94">5</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="104" pos:column="17">return <expr><call><name><name pos:line="104" pos:column="24">ASCIIEncoding</name><op:operator pos:line="104" pos:column="37">.</op:operator><name pos:line="104" pos:column="38">ASCII</name><op:operator pos:line="104" pos:column="43">.</op:operator><name pos:line="104" pos:column="44">GetString</name></name><argument_list pos:line="104" pos:column="53">(<argument><expr><name pos:line="104" pos:column="54">bytes</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>

            <expr_stmt><expr><name pos:line="107" pos:column="13">bit_buffer</name> <op:operator pos:line="107" pos:column="24">=</op:operator> <op:operator pos:line="107" pos:column="26">(</op:operator><call><name><name pos:line="107" pos:column="27">ValidChars</name><op:operator pos:line="107" pos:column="37">.</op:operator><name pos:line="107" pos:column="38">IndexOf</name></name><argument_list pos:line="107" pos:column="45">(<argument><expr><name><name pos:line="107" pos:column="46">str</name><index pos:line="107" pos:column="49">[<expr><lit:literal type="number" pos:line="107" pos:column="50">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="107" pos:column="54">|</op:operator> <call><name><name pos:line="107" pos:column="56">ValidChars</name><op:operator pos:line="107" pos:column="66">.</op:operator><name pos:line="107" pos:column="67">IndexOf</name></name><argument_list pos:line="107" pos:column="74">(<argument><expr><name><name pos:line="107" pos:column="75">str</name><index pos:line="107" pos:column="78">[<expr><lit:literal type="number" pos:line="107" pos:column="79">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="107" pos:column="83">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="107" pos:column="86">5</lit:literal><op:operator pos:line="107" pos:column="87">)</op:operator></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="108" pos:column="13">bits_in_buffer</name> <op:operator pos:line="108" pos:column="28">=</op:operator> <lit:literal type="number" pos:line="108" pos:column="30">10</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="109" pos:column="13">currentCharIndex</name> <op:operator pos:line="109" pos:column="30">=</op:operator> <lit:literal type="number" pos:line="109" pos:column="32">2</lit:literal></expr>;</expr_stmt>
            <for pos:line="110" pos:column="13">for (<init><decl><type><name pos:line="110" pos:column="18">int</name></type> <name pos:line="110" pos:column="22">i</name> <init pos:line="110" pos:column="24">= <expr><lit:literal type="number" pos:line="110" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="110" pos:column="29">i</name> <op:operator pos:line="110" pos:column="31">&lt;</op:operator> <name><name pos:line="110" pos:column="33">bytes</name><op:operator pos:line="110" pos:column="38">.</op:operator><name pos:line="110" pos:column="39">Length</name></name></expr>;</condition> <incr><expr><name pos:line="110" pos:column="47">i</name><op:operator pos:line="110" pos:column="48">++</op:operator></expr></incr>)
            <block pos:line="111" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="112" pos:column="17">bytes</name><index pos:line="112" pos:column="22">[<expr><name pos:line="112" pos:column="23">i</name></expr>]</index></name> <op:operator pos:line="112" pos:column="26">=</op:operator> <op:operator pos:line="112" pos:column="28">(</op:operator><name pos:line="112" pos:column="29">byte</name><op:operator pos:line="112" pos:column="33">)</op:operator><name pos:line="112" pos:column="34">bit_buffer</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="113" pos:column="17">bit_buffer</name> <op:operator pos:line="113" pos:column="28">&gt;&gt;=</op:operator> <lit:literal type="number" pos:line="113" pos:column="32">8</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="114" pos:column="17">bits_in_buffer</name> <op:operator pos:line="114" pos:column="32">-=</op:operator> <lit:literal type="number" pos:line="114" pos:column="35">8</lit:literal></expr>;</expr_stmt>
                <while pos:line="115" pos:column="17">while <condition pos:line="115" pos:column="23">(<expr><name pos:line="115" pos:column="24">bits_in_buffer</name> <op:operator pos:line="115" pos:column="39">&lt;</op:operator> <lit:literal type="number" pos:line="115" pos:column="41">8</lit:literal> <op:operator pos:line="115" pos:column="43">&amp;&amp;</op:operator> <name pos:line="115" pos:column="46">currentCharIndex</name> <op:operator pos:line="115" pos:column="63">&lt;</op:operator> <name><name pos:line="115" pos:column="65">str</name><op:operator pos:line="115" pos:column="68">.</op:operator><name pos:line="115" pos:column="69">Length</name></name></expr>)</condition>
                <block pos:line="116" pos:column="17">{
                    <expr_stmt><expr><name pos:line="117" pos:column="21">bit_buffer</name> <op:operator pos:line="117" pos:column="32">|=</op:operator> <call><name><name pos:line="117" pos:column="35">ValidChars</name><op:operator pos:line="117" pos:column="45">.</op:operator><name pos:line="117" pos:column="46">IndexOf</name></name><argument_list pos:line="117" pos:column="53">(<argument><expr><name><name pos:line="117" pos:column="54">str</name><index pos:line="117" pos:column="57">[<expr><name pos:line="117" pos:column="58">currentCharIndex</name><op:operator pos:line="117" pos:column="74">++</op:operator></expr>]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="117" pos:column="79">&lt;&lt;</op:operator> <name pos:line="117" pos:column="82">bits_in_buffer</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="118" pos:column="21">bits_in_buffer</name> <op:operator pos:line="118" pos:column="36">+=</op:operator> <lit:literal type="number" pos:line="118" pos:column="39">5</lit:literal></expr>;</expr_stmt>
                }</block></while>
            }</block></for>

            <return pos:line="122" pos:column="13">return <expr><call><name><name pos:line="122" pos:column="20">Encoding</name><op:operator pos:line="122" pos:column="28">.</op:operator><name pos:line="122" pos:column="29">ASCII</name><op:operator pos:line="122" pos:column="34">.</op:operator><name pos:line="122" pos:column="35">GetString</name></name><argument_list pos:line="122" pos:column="44">(<argument><expr><name pos:line="122" pos:column="45">bytes</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
