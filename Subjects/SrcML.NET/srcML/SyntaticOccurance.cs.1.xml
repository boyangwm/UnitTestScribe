<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\VisualStudio\SDML.SrcMLVSAddin.SyntaticCategory\SyntaticOccurance.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2011 Brian Bartman
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Brian Bartman (SDML) - initial API, implementation, &amp; documentation
 *    Vinay Augustine (ABB Group) - integration with ABB.SrcML Framework
 *****************************************************************************/</comment>

<using pos:line="13" pos:column="1">using <name pos:line="13" pos:column="7">System</name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Collections</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">Generic</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Linq</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Text</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Xml</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Xml</name><op:operator pos:line="18" pos:column="17">.</op:operator><name pos:line="18" pos:column="18">Linq</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">SDML</name><op:operator pos:line="19" pos:column="11">.</op:operator><name pos:line="19" pos:column="12">SrcMLVSAddin</name><op:operator pos:line="19" pos:column="24">.</op:operator><name pos:line="19" pos:column="25">SrcML</name><op:operator pos:line="19" pos:column="30">.</op:operator><name pos:line="19" pos:column="31">XMLExtensions</name></name>;</using>
<using pos:line="20" pos:column="1">using <name pos:line="20" pos:column="7">Diagnostics</name> <init pos:line="20" pos:column="19">= <expr><name><name pos:line="20" pos:column="21">System</name><op:operator pos:line="20" pos:column="27">.</op:operator><name pos:line="20" pos:column="28">Diagnostics</name></name></expr></init>;</using>
<cpp:region pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">region</cpp:directive> unused imports</cpp:region>
<comment type="line" pos:line="22" pos:column="1">//using EnvDTE;</comment>
<comment type="line" pos:line="23" pos:column="1">//using System.Xml.XPath;</comment>
<comment type="line" pos:line="24" pos:column="1">//using SDML.SrcMLVSAddin.SrcML;</comment>
<comment type="line" pos:line="25" pos:column="1">//using System.Diagnostics;</comment>
<comment type="line" pos:line="26" pos:column="1">//using System.Reflection;</comment>
<comment type="line" pos:line="27" pos:column="1">//using System.Runtime.InteropServices;</comment>
<comment type="line" pos:line="28" pos:column="1">//using System.ComponentModel.Design;</comment>
<comment type="line" pos:line="29" pos:column="1">//using Microsoft.Win32;</comment>
<comment type="line" pos:line="30" pos:column="1">//using Microsoft.VisualStudio;</comment>
<comment type="line" pos:line="31" pos:column="1">//using Microsoft.VisualStudio.Shell.Interop;</comment>
<comment type="line" pos:line="32" pos:column="1">//using Microsoft.VisualStudio.OLE.Interop;</comment>
<comment type="line" pos:line="33" pos:column="1">//using Microsoft.VisualStudio.Shell;</comment>
<comment type="line" pos:line="34" pos:column="1">//using Microsoft.VisualStudio.VCProjectEngine;</comment>
<comment type="line" pos:line="35" pos:column="1">//using SDML.SrcMLVSAddin.UI.Controls;</comment>
<cpp:endregion pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">endregion</cpp:directive></cpp:endregion>


<namespace pos:line="39" pos:column="1">namespace <name><name pos:line="39" pos:column="11">SDML</name><op:operator pos:line="39" pos:column="15">.</op:operator><name pos:line="39" pos:column="16">SrcMLVSAddin</name><op:operator pos:line="39" pos:column="28">.</op:operator><name pos:line="39" pos:column="29">SyntaticCategory</name></name>
<block pos:line="40" pos:column="1">{
    <comment type="line" pos:line="41" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="42" pos:column="5">/// This class represents the finding of a syntatic category occurance</comment>
    <comment type="line" pos:line="43" pos:column="5">/// within a srcml archive or msvc project.</comment>
    <comment type="line" pos:line="44" pos:column="5">/// &lt;/summary&gt;</comment>
    <comment type="line" pos:line="45" pos:column="5">/// &lt;remarks&gt;</comment>
    <comment type="line" pos:line="46" pos:column="5">/// It may be benificial to use the msvc code model so that if the user</comment>
    <comment type="line" pos:line="47" pos:column="5">/// edits something I can go and where it's been moved to. This would be</comment>
    <comment type="line" pos:line="48" pos:column="5">/// something which I would only do in the future and only if I have time.</comment>
    <comment type="line" pos:line="49" pos:column="5">/// &lt;/remarks&gt;</comment>
    <class><specifier pos:line="50" pos:column="5">public</specifier> class <name pos:line="50" pos:column="18">SyntaticOccurance</name>
        <comment type="line" pos:line="51" pos:column="9">//:ITreeListViewHeaderInterface</comment>
    <block pos:line="52" pos:column="5">{

        <cpp:region pos:line="54" pos:column="9">#<cpp:directive pos:line="54" pos:column="10">region</cpp:directive> Constructor/s.</cpp:region>
        
        <comment type="line" pos:line="56" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="57" pos:column="9">/// Constructor which is used to create an instance of this class</comment>
        <comment type="line" pos:line="58" pos:column="9">/// however this constructor requiers that some specific properties</comment>
        <comment type="line" pos:line="59" pos:column="9">/// be met. The dataModel is simply the class which owns this one</comment>
        <comment type="line" pos:line="60" pos:column="9">/// and that should only ever be the class which creates an instance</comment>
        <comment type="line" pos:line="61" pos:column="9">/// of this type. The element is the xml element from inside of a </comment>
        <comment type="line" pos:line="62" pos:column="9">/// srcml archive, which represents an instance of a match matched </comment>
        <comment type="line" pos:line="63" pos:column="9">/// by a search pattern. The VCFile is the file which contains </comment>
        <comment type="line" pos:line="64" pos:column="9">/// the matched pattern and is used so that it can be easily located </comment>
        <comment type="line" pos:line="65" pos:column="9">/// and opened if necessary.</comment>
        <comment type="line" pos:line="66" pos:column="9">/// </comment>
        <comment type="line" pos:line="67" pos:column="9">/// TODO: in the future: make this into an interface</comment>
        <comment type="line" pos:line="68" pos:column="9">/// and implement that interface inside of a different class which is</comment>
        <comment type="line" pos:line="69" pos:column="9">/// private to this namespace.</comment>
        <comment type="line" pos:line="70" pos:column="9">/// </comment>
        <comment type="line" pos:line="71" pos:column="9">/// Not sure if it's benificial but it may be necessary to use something</comment>
        <comment type="line" pos:line="72" pos:column="9">/// other then VCFile but I'm not 100% sure what.</comment>
        <comment type="line" pos:line="73" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="74" pos:column="9">/// &lt;param name="dataModel"&gt;The data model which is owns this class.&lt;/param&gt;</comment>
        <comment type="line" pos:line="75" pos:column="9">/// &lt;param name="node"&gt;The element which is used to &lt;/param&gt;</comment>
        <constructor><specifier pos:line="76" pos:column="9">public</specifier> <name pos:line="76" pos:column="16">SyntaticOccurance</name><parameter_list pos:line="76" pos:column="33">(<param><decl><type><name pos:line="76" pos:column="34">SyntaticCategoryDataModel</name></type> <name pos:line="76" pos:column="60">dataModel</name></decl></param>, <param><decl><type><name pos:line="76" pos:column="71">XElement</name></type> <name pos:line="76" pos:column="80">element</name></decl></param>)</parameter_list>
        <block pos:line="77" pos:column="9">{
            <expr_stmt><expr><name pos:line="78" pos:column="13">Element</name> <op:operator pos:line="78" pos:column="21">=</op:operator> <name pos:line="78" pos:column="23">element</name></expr>;</expr_stmt>
            <comment type="line" pos:line="79" pos:column="13">// SyntaticCategoryGenerationType = SyntaticCategoryPathTypes.OuterBlockCategory;</comment>
            <expr_stmt><expr><name pos:line="80" pos:column="13">mDataModel</name> <op:operator pos:line="80" pos:column="24">=</op:operator> <name pos:line="80" pos:column="26">dataModel</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="81" pos:column="13">XElement</name></type> <name pos:line="81" pos:column="22">translationUnitElem</name> <init pos:line="81" pos:column="42">= <expr><call><name pos:line="81" pos:column="44">GetTranslationUnit</name><argument_list pos:line="81" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="82" pos:column="13">mTranslationUnitName</name> <op:operator pos:line="82" pos:column="34">=</op:operator> <call><name><name pos:line="82" pos:column="36">translationUnitElem</name><op:operator pos:line="82" pos:column="55">.</op:operator><name pos:line="82" pos:column="56">Attributes</name></name><argument_list pos:line="82" pos:column="66">()</argument_list></call><op:operator pos:line="82" pos:column="68">.</op:operator><call><name pos:line="82" pos:column="69">Where</name><argument_list pos:line="82" pos:column="74">(
                <argument><expr><op:operator pos:line="83" pos:column="17">new</op:operator> <call><name><name pos:line="83" pos:column="21">Func</name><argument_list pos:line="83" pos:column="25">&lt;<argument><name pos:line="83" pos:column="26">XAttribute</name></argument>, <argument><name pos:line="83" pos:column="38">bool</name></argument>&gt;</argument_list></name><argument_list pos:line="83" pos:column="43">(
                    <argument><expr><lambda><parameter_list pos:line="84" pos:column="21">(<param><decl><name pos:line="84" pos:column="22">x</name></decl></param>)</parameter_list> <op:operator pos:line="84" pos:column="25">=&gt;</op:operator> <name><name pos:line="84" pos:column="28">x</name><op:operator pos:line="84" pos:column="29">.</op:operator><name pos:line="84" pos:column="30">Name</name></name> <op:operator pos:line="84" pos:column="35">==</op:operator> <lit:literal type="string" pos:line="84" pos:column="38">"filename"</lit:literal></lambda></expr></argument>
                )</argument_list></call></expr></argument>
            )</argument_list></call><op:operator pos:line="86" pos:column="14">.</op:operator><call><name pos:line="86" pos:column="15">First</name><argument_list pos:line="86" pos:column="20">()</argument_list></call><op:operator pos:line="86" pos:column="22">.</op:operator><name pos:line="86" pos:column="23">Value</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="87" pos:column="13">UpdateCategory</name><argument_list pos:line="87" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <cpp:endregion pos:line="90" pos:column="9">#<cpp:directive pos:line="90" pos:column="10">endregion</cpp:directive></cpp:endregion>

        <cpp:region pos:line="92" pos:column="9">#<cpp:directive pos:line="92" pos:column="10">region</cpp:directive> Public Properties.</cpp:region>

        <comment type="line" pos:line="94" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="95" pos:column="9">/// The xml element associated a syntatic occurance.</comment>
        <comment type="line" pos:line="96" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="97" pos:column="9">public</specifier> <name pos:line="97" pos:column="16">XElement</name></type> <name pos:line="97" pos:column="25">Element</name>
        <block pos:line="98" pos:column="9">{
            <function_decl><name pos:line="99" pos:column="13">get</name>;</function_decl>
            <function_decl><name pos:line="100" pos:column="13">set</name>;</function_decl>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="103" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="104" pos:column="9">/// The data model which owns this object.</comment>
        <comment type="line" pos:line="105" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="106" pos:column="9">public</specifier> <name pos:line="106" pos:column="16">SyntaticCategoryDataModel</name></type> <name pos:line="106" pos:column="42">DataModel</name>
        <block pos:line="107" pos:column="9">{
            <function><name pos:line="108" pos:column="13">get</name>
            <block pos:line="109" pos:column="13">{
                <return pos:line="110" pos:column="17">return <expr><name pos:line="110" pos:column="24">mDataModel</name></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="114" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="115" pos:column="9">/// Returns the file path and name associated with</comment>
        <comment type="line" pos:line="116" pos:column="9">/// the translation unit of this</comment>
        <comment type="line" pos:line="117" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="118" pos:column="9">public</specifier> <name pos:line="118" pos:column="16">String</name></type> <name pos:line="118" pos:column="23">TranslationUnitName</name>
        <block pos:line="119" pos:column="9">{
            <function><name pos:line="120" pos:column="13">get</name>
            <block pos:line="121" pos:column="13">{
                <return pos:line="122" pos:column="17">return <expr><name pos:line="122" pos:column="24">mTranslationUnitName</name></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="126" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="127" pos:column="9">/// Returns the string category for each of the different</comment>
        <comment type="line" pos:line="128" pos:column="9">/// categories.</comment>
        <comment type="line" pos:line="129" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="130" pos:column="9">public</specifier> <name pos:line="130" pos:column="16">String</name></type> <name pos:line="130" pos:column="23">Category</name>
        <block pos:line="131" pos:column="9">{
            <function><name pos:line="132" pos:column="13">get</name>
            <block pos:line="133" pos:column="13">{
                <return pos:line="134" pos:column="17">return <expr><name pos:line="134" pos:column="24">mCategory</name></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="138" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="139" pos:column="9">/// Returns the category as an xpath expression.</comment>
        <comment type="line" pos:line="140" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="141" pos:column="9">public</specifier> <name pos:line="141" pos:column="16">String</name></type> <name pos:line="141" pos:column="23">CategoryAsXPath</name>
        <block pos:line="142" pos:column="9">{
            <function><name pos:line="143" pos:column="13">get</name>
            <block pos:line="144" pos:column="13">{
                <return pos:line="145" pos:column="17">return <expr><name pos:line="145" pos:column="24">mCategoryAsXPath</name></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>
        <cpp:endregion pos:line="148" pos:column="9">#<cpp:directive pos:line="148" pos:column="10">endregion</cpp:directive></cpp:endregion>

        <cpp:region pos:line="150" pos:column="9">#<cpp:directive pos:line="150" pos:column="10">region</cpp:directive> ITreeListViewInterface Properties.</cpp:region>

        <comment type="line" pos:line="152" pos:column="9">///// &lt;summary&gt;</comment>
        <comment type="line" pos:line="153" pos:column="9">///// The context or occurance column.</comment>
        <comment type="line" pos:line="154" pos:column="9">///// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="155" pos:column="9">//public String ContextOrOccuranceColumn</comment>
        <comment type="line" pos:line="156" pos:column="9">//{</comment>
        <comment type="line" pos:line="157" pos:column="9">//    get</comment>
        <comment type="line" pos:line="158" pos:column="9">//    {</comment>
        <comment type="line" pos:line="159" pos:column="9">//        return Element.Value;</comment>
        <comment type="line" pos:line="160" pos:column="9">//    }</comment>
        <comment type="line" pos:line="161" pos:column="9">//}</comment>

        <comment type="line" pos:line="163" pos:column="9">///// &lt;summary&gt;</comment>
        <comment type="line" pos:line="164" pos:column="9">///// The Text for the file path column of the grid view.</comment>
        <comment type="line" pos:line="165" pos:column="9">///// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="166" pos:column="9">//public String FilePathColumn</comment>
        <comment type="line" pos:line="167" pos:column="9">//{</comment>
        <comment type="line" pos:line="168" pos:column="9">//    get</comment>
        <comment type="line" pos:line="169" pos:column="9">//    {</comment>
        <comment type="line" pos:line="170" pos:column="9">//        return mTranslationUnitName;</comment>
        <comment type="line" pos:line="171" pos:column="9">//    }</comment>
        <comment type="line" pos:line="172" pos:column="9">//}</comment>
        <cpp:endregion pos:line="173" pos:column="9">#<cpp:directive pos:line="173" pos:column="10">endregion</cpp:directive></cpp:endregion>

        <cpp:region pos:line="175" pos:column="9">#<cpp:directive pos:line="175" pos:column="10">region</cpp:directive> Public Member functions.</cpp:region>

        <comment type="line" pos:line="177" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="178" pos:column="9">/// Attempts to locate the translation unit associated with</comment>
        <comment type="line" pos:line="179" pos:column="9">/// the element. Throws an exception when the Element property</comment>
        <comment type="line" pos:line="180" pos:column="9">/// is null.</comment>
        <comment type="line" pos:line="181" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="182" pos:column="9">/// &lt;returns&gt;The translation unit associated with the element.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="183" pos:column="9">public</specifier> <name pos:line="183" pos:column="16">XElement</name></type> <name pos:line="183" pos:column="25">GetTranslationUnit</name><parameter_list pos:line="183" pos:column="43">()</parameter_list>
        <block pos:line="184" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="185" pos:column="13">XElement</name></type> <name pos:line="185" pos:column="22">searchElement</name> <init pos:line="185" pos:column="36">= <expr><name pos:line="185" pos:column="38">Element</name></expr></init></decl>;</decl_stmt>
            <while pos:line="186" pos:column="13">while <condition pos:line="186" pos:column="19">(<expr><name><name pos:line="186" pos:column="20">searchElement</name><op:operator pos:line="186" pos:column="33">.</op:operator><name pos:line="186" pos:column="34">Name</name><op:operator pos:line="186" pos:column="38">.</op:operator><name pos:line="186" pos:column="39">LocalName</name></name> <op:operator pos:line="186" pos:column="49">!=</op:operator> <lit:literal type="string" pos:line="186" pos:column="52">"unit"</lit:literal></expr>)</condition>
            <block pos:line="187" pos:column="13">{
                <expr_stmt><expr><name pos:line="188" pos:column="17">searchElement</name> <op:operator pos:line="188" pos:column="31">=</op:operator> <op:operator pos:line="188" pos:column="33">(</op:operator><name pos:line="188" pos:column="34">XElement</name><op:operator pos:line="188" pos:column="42">)</op:operator><name><name pos:line="188" pos:column="43">searchElement</name><op:operator pos:line="188" pos:column="56">.</op:operator><name pos:line="188" pos:column="57">Parent</name></name></expr>;</expr_stmt>
            }</block></while>
            <return pos:line="190" pos:column="13">return <expr><name pos:line="190" pos:column="20">searchElement</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="193" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="194" pos:column="9">/// Returns the line associated with the syntatic occurance</comment>
        <comment type="line" pos:line="195" pos:column="9">/// within it's translation unit.</comment>
        <comment type="line" pos:line="196" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="197" pos:column="9">/// &lt;returns&gt;The line number of at which this syntatic occurance occurs.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="198" pos:column="9">public</specifier> <name pos:line="198" pos:column="16">int</name></type> <name pos:line="198" pos:column="20">GetLineInTranslationUnit</name><parameter_list pos:line="198" pos:column="44">()</parameter_list>
        <block pos:line="199" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="200" pos:column="13">XElement</name></type> <name pos:line="200" pos:column="22">surroundingTanslationUnit</name> <init pos:line="200" pos:column="48">= <expr><call><name pos:line="200" pos:column="50">GetTranslationUnit</name><argument_list pos:line="200" pos:column="68">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="201" pos:column="13">return <expr><op:operator pos:line="201" pos:column="20">(</op:operator><op:operator pos:line="201" pos:column="21">(</op:operator><name pos:line="201" pos:column="22">IXmlLineInfo</name><op:operator pos:line="201" pos:column="34">)</op:operator><name pos:line="201" pos:column="35">Element</name><op:operator pos:line="201" pos:column="42">)</op:operator><op:operator pos:line="201" pos:column="43">.</op:operator><name pos:line="201" pos:column="44">LineNumber</name> <op:operator pos:line="201" pos:column="55">-</op:operator> <op:operator pos:line="201" pos:column="57">(</op:operator><op:operator pos:line="201" pos:column="58">(</op:operator><name pos:line="201" pos:column="59">IXmlLineInfo</name><op:operator pos:line="201" pos:column="71">)</op:operator><name pos:line="201" pos:column="72">surroundingTanslationUnit</name><op:operator pos:line="201" pos:column="97">)</op:operator><op:operator pos:line="201" pos:column="98">.</op:operator><name pos:line="201" pos:column="99">LineNumber</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="204" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="205" pos:column="9">/// Updates the syntatic category of the of this occurance.</comment>
        <comment type="line" pos:line="206" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="207" pos:column="9">public</specifier> <name pos:line="207" pos:column="16">void</name></type> <name pos:line="207" pos:column="21">UpdateCategory</name><parameter_list pos:line="207" pos:column="35">()</parameter_list>
        <block pos:line="208" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="209" pos:column="13">StringBuilder</name></type> <name pos:line="209" pos:column="27">categoryBuilder</name> <init pos:line="209" pos:column="43">= <expr><op:operator pos:line="209" pos:column="45">new</op:operator> <call><name pos:line="209" pos:column="49">StringBuilder</name><argument_list pos:line="209" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="210" pos:column="13">StringBuilder</name></type> <name pos:line="210" pos:column="27">categoryXPathBuilder</name> <init pos:line="210" pos:column="48">= <expr><op:operator pos:line="210" pos:column="50">new</op:operator> <call><name pos:line="210" pos:column="54">StringBuilder</name><argument_list pos:line="210" pos:column="67">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="211" pos:column="13">// mCategoryAsXPath</comment>
            <comment type="line" pos:line="212" pos:column="13">// OuterStatmentCategory</comment>
            <if pos:line="213" pos:column="13">if <condition pos:line="213" pos:column="16">(<expr><name><name pos:line="213" pos:column="17">DataModel</name><op:operator pos:line="213" pos:column="26">.</op:operator><name pos:line="213" pos:column="27">SyntaticCategoryGenerationType</name></name> <op:operator pos:line="213" pos:column="58">==</op:operator> <name><name pos:line="213" pos:column="61">SyntaticCategoryPathTypes</name><op:operator pos:line="213" pos:column="86">.</op:operator><name pos:line="213" pos:column="87">OuterStatmentCategory</name></name></expr>)</condition><then pos:line="213" pos:column="109">
            <block pos:line="214" pos:column="13">{
                <decl_stmt><decl><type><specifier pos:line="215" pos:column="17">const</specifier> <name pos:line="215" pos:column="23">String</name></type> <name pos:line="215" pos:column="30">exprStmt</name> <init pos:line="215" pos:column="39">= <expr><lit:literal type="string" pos:line="215" pos:column="41">"expr_stmt"</lit:literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier pos:line="216" pos:column="17">const</specifier> <name pos:line="216" pos:column="23">String</name></type> <name pos:line="216" pos:column="30">declStmt</name> <init pos:line="216" pos:column="39">= <expr><lit:literal type="string" pos:line="216" pos:column="41">"decl_stmt"</lit:literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="217" pos:column="17">XElement</name></type> <name pos:line="217" pos:column="26">currentElement</name> <init pos:line="217" pos:column="41">= <expr><name><name pos:line="217" pos:column="43">Element</name><op:operator pos:line="217" pos:column="50">.</op:operator><name pos:line="217" pos:column="51">Parent</name></name></expr></init></decl>;</decl_stmt>
                <while pos:line="218" pos:column="17">while <condition pos:line="218" pos:column="23">(<expr><name pos:line="218" pos:column="24">null</name> <op:operator pos:line="218" pos:column="29">!=</op:operator> <name pos:line="218" pos:column="32">currentElement</name> <op:operator pos:line="218" pos:column="47">&amp;&amp;</op:operator> <name><name pos:line="218" pos:column="50">currentElement</name><op:operator pos:line="218" pos:column="64">.</op:operator><name pos:line="218" pos:column="65">Name</name><op:operator pos:line="218" pos:column="69">.</op:operator><name pos:line="218" pos:column="70">LocalName</name></name> <op:operator pos:line="218" pos:column="80">!=</op:operator> <name pos:line="218" pos:column="83">declStmt</name> <op:operator pos:line="218" pos:column="92">&amp;&amp;</op:operator> <name><name pos:line="218" pos:column="95">currentElement</name><op:operator pos:line="218" pos:column="109">.</op:operator><name pos:line="218" pos:column="110">Name</name><op:operator pos:line="218" pos:column="114">.</op:operator><name pos:line="218" pos:column="115">LocalName</name></name> <op:operator pos:line="218" pos:column="125">!=</op:operator> <name pos:line="218" pos:column="128">exprStmt</name></expr>)</condition>
                <block pos:line="219" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="220" pos:column="21">categoryBuilder</name><op:operator pos:line="220" pos:column="36">.</op:operator><name pos:line="220" pos:column="37">Insert</name></name><argument_list pos:line="220" pos:column="43">(<argument><expr><lit:literal type="number" pos:line="220" pos:column="44">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="220" pos:column="47">"/"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="221" pos:column="21">categoryBuilder</name><op:operator pos:line="221" pos:column="36">.</op:operator><name pos:line="221" pos:column="37">Insert</name></name><argument_list pos:line="221" pos:column="43">(<argument><expr><lit:literal type="number" pos:line="221" pos:column="44">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="221" pos:column="47">currentElement</name><op:operator pos:line="221" pos:column="61">.</op:operator><name pos:line="221" pos:column="62">Name</name><op:operator pos:line="221" pos:column="66">.</op:operator><name pos:line="221" pos:column="67">LocalName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="line" pos:line="223" pos:column="21">// Adding the name first then the slash for the xpath representation.</comment>
                    <expr_stmt><expr><call><name><name pos:line="224" pos:column="21">categoryXPathBuilder</name><op:operator pos:line="224" pos:column="41">.</op:operator><name pos:line="224" pos:column="42">Insert</name></name><argument_list pos:line="224" pos:column="48">(<argument><expr><lit:literal type="number" pos:line="224" pos:column="49">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="224" pos:column="52">currentElement</name><op:operator pos:line="224" pos:column="66">.</op:operator><name pos:line="224" pos:column="67">GetXPathName</name></name><argument_list pos:line="224" pos:column="79">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="225" pos:column="21">categoryXPathBuilder</name><op:operator pos:line="225" pos:column="41">.</op:operator><name pos:line="225" pos:column="42">Insert</name></name><argument_list pos:line="225" pos:column="48">(<argument><expr><lit:literal type="number" pos:line="225" pos:column="49">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="225" pos:column="52">"/"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if pos:line="227" pos:column="21">if <condition pos:line="227" pos:column="24">(<expr><name pos:line="227" pos:column="25">currentElement</name> <op:operator pos:line="227" pos:column="40">==</op:operator> <name pos:line="227" pos:column="43">null</name></expr>)</condition><then pos:line="227" pos:column="48">
                    <block pos:line="228" pos:column="21">{
                        <expr_stmt><expr><name pos:line="229" pos:column="25">mCategory</name> <op:operator pos:line="229" pos:column="35">=</op:operator> <call><name><name pos:line="229" pos:column="37">categoryBuilder</name><op:operator pos:line="229" pos:column="52">.</op:operator><name pos:line="229" pos:column="53">ToString</name></name><argument_list pos:line="229" pos:column="61">()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="230" pos:column="25">mCategoryAsXPath</name> <op:operator pos:line="230" pos:column="42">=</op:operator> <call><name><name pos:line="230" pos:column="44">categoryXPathBuilder</name><op:operator pos:line="230" pos:column="64">.</op:operator><name pos:line="230" pos:column="65">ToString</name></name><argument_list pos:line="230" pos:column="73">()</argument_list></call></expr>;</expr_stmt>
                        <return pos:line="231" pos:column="25">return;</return>
                    }</block></then></if>
                    <expr_stmt><expr><name pos:line="233" pos:column="21">currentElement</name> <op:operator pos:line="233" pos:column="36">=</op:operator> <name><name pos:line="233" pos:column="38">currentElement</name><op:operator pos:line="233" pos:column="52">.</op:operator><name pos:line="233" pos:column="53">Parent</name></name></expr>;</expr_stmt>
                }</block></while>

                <comment type="line" pos:line="236" pos:column="17">// if the current element doesn't equal null then get the last</comment>
                <comment type="line" pos:line="237" pos:column="17">// element and prepend it into the string builder.</comment>
                <if pos:line="238" pos:column="17">if <condition pos:line="238" pos:column="20">(<expr><name pos:line="238" pos:column="21">currentElement</name> <op:operator pos:line="238" pos:column="36">!=</op:operator> <name pos:line="238" pos:column="39">null</name></expr>)</condition><then pos:line="238" pos:column="44">
                <block pos:line="239" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="240" pos:column="21">categoryBuilder</name><op:operator pos:line="240" pos:column="36">.</op:operator><name pos:line="240" pos:column="37">Insert</name></name><argument_list pos:line="240" pos:column="43">(<argument><expr><lit:literal type="number" pos:line="240" pos:column="44">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="240" pos:column="47">currentElement</name><op:operator pos:line="240" pos:column="61">.</op:operator><name pos:line="240" pos:column="62">Name</name><op:operator pos:line="240" pos:column="66">.</op:operator><name pos:line="240" pos:column="67">LocalName</name></name> <op:operator pos:line="240" pos:column="77">+</op:operator> <lit:literal type="string" pos:line="240" pos:column="79">"/"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name><name pos:line="242" pos:column="21">categoryXPathBuilder</name><op:operator pos:line="242" pos:column="41">.</op:operator><name pos:line="242" pos:column="42">Insert</name></name><argument_list pos:line="242" pos:column="48">(<argument><expr><lit:literal type="number" pos:line="242" pos:column="49">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="242" pos:column="52">currentElement</name><op:operator pos:line="242" pos:column="66">.</op:operator><name pos:line="242" pos:column="67">GetXPathName</name></name><argument_list pos:line="242" pos:column="79">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="243" pos:column="21">categoryXPathBuilder</name><op:operator pos:line="243" pos:column="41">.</op:operator><name pos:line="243" pos:column="42">Insert</name></name><argument_list pos:line="243" pos:column="48">(<argument><expr><lit:literal type="number" pos:line="243" pos:column="49">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="243" pos:column="52">"/"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name pos:line="245" pos:column="17">mCategoryAsXPath</name> <op:operator pos:line="245" pos:column="34">=</op:operator> <call><name><name pos:line="245" pos:column="36">categoryXPathBuilder</name><op:operator pos:line="245" pos:column="56">.</op:operator><name pos:line="245" pos:column="57">ToString</name></name><argument_list pos:line="245" pos:column="65">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="246" pos:column="17">mCategory</name> <op:operator pos:line="246" pos:column="27">=</op:operator> <call><name><name pos:line="246" pos:column="29">categoryBuilder</name><op:operator pos:line="246" pos:column="44">.</op:operator><name pos:line="246" pos:column="45">ToString</name></name><argument_list pos:line="246" pos:column="53">()</argument_list></call></expr>;</expr_stmt>
                <return pos:line="247" pos:column="17">return;</return>
            }</block></then></if>

            <comment type="line" pos:line="250" pos:column="13">// OuterMostBlockCategory</comment>
            <if pos:line="251" pos:column="13">if <condition pos:line="251" pos:column="16">(<expr><name><name pos:line="251" pos:column="17">DataModel</name><op:operator pos:line="251" pos:column="26">.</op:operator><name pos:line="251" pos:column="27">SyntaticCategoryGenerationType</name></name> <op:operator pos:line="251" pos:column="58">==</op:operator> <name><name pos:line="251" pos:column="61">SyntaticCategoryPathTypes</name><op:operator pos:line="251" pos:column="86">.</op:operator><name pos:line="251" pos:column="87">OuterMostBlockCategory</name></name></expr>)</condition><then pos:line="251" pos:column="110">
            <block pos:line="252" pos:column="13">{
                <return pos:line="253" pos:column="17">return;</return>
            }</block></then></if>

            <comment type="line" pos:line="256" pos:column="13">// OuterBlockCategory</comment>
            <if pos:line="257" pos:column="13">if <condition pos:line="257" pos:column="16">(<expr><name><name pos:line="257" pos:column="17">DataModel</name><op:operator pos:line="257" pos:column="26">.</op:operator><name pos:line="257" pos:column="27">SyntaticCategoryGenerationType</name></name> <op:operator pos:line="257" pos:column="58">==</op:operator> <name><name pos:line="257" pos:column="61">SyntaticCategoryPathTypes</name><op:operator pos:line="257" pos:column="86">.</op:operator><name pos:line="257" pos:column="87">OuterBlockCategory</name></name></expr>)</condition><then pos:line="257" pos:column="106">
            <block pos:line="258" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="259" pos:column="17">XElement</name></type> <name pos:line="259" pos:column="26">currentElement</name> <init pos:line="259" pos:column="41">= <expr><name><name pos:line="259" pos:column="43">Element</name><op:operator pos:line="259" pos:column="50">.</op:operator><name pos:line="259" pos:column="51">Parent</name></name></expr></init></decl>;</decl_stmt>
                <while pos:line="260" pos:column="17">while <condition pos:line="260" pos:column="23">(<expr><name><name pos:line="260" pos:column="24">currentElement</name><op:operator pos:line="260" pos:column="38">.</op:operator><name pos:line="260" pos:column="39">Name</name><op:operator pos:line="260" pos:column="43">.</op:operator><name pos:line="260" pos:column="44">LocalName</name></name> <op:operator pos:line="260" pos:column="54">!=</op:operator> <lit:literal type="string" pos:line="260" pos:column="57">"unit"</lit:literal> <op:operator pos:line="260" pos:column="64">&amp;&amp;</op:operator> <name><name pos:line="260" pos:column="67">currentElement</name><op:operator pos:line="260" pos:column="81">.</op:operator><name pos:line="260" pos:column="82">Name</name><op:operator pos:line="260" pos:column="86">.</op:operator><name pos:line="260" pos:column="87">LocalName</name></name> <op:operator pos:line="260" pos:column="97">!=</op:operator> <lit:literal type="string" pos:line="260" pos:column="100">"block"</lit:literal></expr>)</condition>
                <block pos:line="261" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="262" pos:column="21">categoryBuilder</name><op:operator pos:line="262" pos:column="36">.</op:operator><name pos:line="262" pos:column="37">Insert</name></name><argument_list pos:line="262" pos:column="43">(<argument><expr><lit:literal type="number" pos:line="262" pos:column="44">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="262" pos:column="47">"/"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="263" pos:column="21">categoryBuilder</name><op:operator pos:line="263" pos:column="36">.</op:operator><name pos:line="263" pos:column="37">Insert</name></name><argument_list pos:line="263" pos:column="43">(<argument><expr><lit:literal type="number" pos:line="263" pos:column="44">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="263" pos:column="47">currentElement</name><op:operator pos:line="263" pos:column="61">.</op:operator><name pos:line="263" pos:column="62">Name</name><op:operator pos:line="263" pos:column="66">.</op:operator><name pos:line="263" pos:column="67">LocalName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="264" pos:column="21">categoryXPathBuilder</name><op:operator pos:line="264" pos:column="41">.</op:operator><name pos:line="264" pos:column="42">Insert</name></name><argument_list pos:line="264" pos:column="48">(<argument><expr><lit:literal type="number" pos:line="264" pos:column="49">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="264" pos:column="52">currentElement</name><op:operator pos:line="264" pos:column="66">.</op:operator><name pos:line="264" pos:column="67">GetXPathName</name></name><argument_list pos:line="264" pos:column="79">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="265" pos:column="21">categoryXPathBuilder</name><op:operator pos:line="265" pos:column="41">.</op:operator><name pos:line="265" pos:column="42">Insert</name></name><argument_list pos:line="265" pos:column="48">(<argument><expr><lit:literal type="number" pos:line="265" pos:column="49">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="265" pos:column="52">"/"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if pos:line="267" pos:column="21">if <condition pos:line="267" pos:column="24">(<expr><name pos:line="267" pos:column="25">currentElement</name> <op:operator pos:line="267" pos:column="40">==</op:operator> <name pos:line="267" pos:column="43">null</name></expr>)</condition><then pos:line="267" pos:column="48">
                    <block pos:line="268" pos:column="21">{
                        <expr_stmt><expr><name pos:line="269" pos:column="25">mCategoryAsXPath</name> <op:operator pos:line="269" pos:column="42">=</op:operator> <call><name><name pos:line="269" pos:column="44">categoryXPathBuilder</name><op:operator pos:line="269" pos:column="64">.</op:operator><name pos:line="269" pos:column="65">ToString</name></name><argument_list pos:line="269" pos:column="73">()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="270" pos:column="25">mCategory</name> <op:operator pos:line="270" pos:column="35">=</op:operator> <call><name><name pos:line="270" pos:column="37">categoryBuilder</name><op:operator pos:line="270" pos:column="52">.</op:operator><name pos:line="270" pos:column="53">ToString</name></name><argument_list pos:line="270" pos:column="61">()</argument_list></call></expr>;</expr_stmt>
                        <return pos:line="271" pos:column="25">return;</return>
                    }</block></then></if>
                    <expr_stmt><expr><name pos:line="273" pos:column="21">currentElement</name> <op:operator pos:line="273" pos:column="36">=</op:operator> <name><name pos:line="273" pos:column="38">currentElement</name><op:operator pos:line="273" pos:column="52">.</op:operator><name pos:line="273" pos:column="53">Parent</name></name></expr>;</expr_stmt>
                }</block></while>

                <expr_stmt><expr><call><name><name pos:line="276" pos:column="17">categoryBuilder</name><op:operator pos:line="276" pos:column="32">.</op:operator><name pos:line="276" pos:column="33">Insert</name></name><argument_list pos:line="276" pos:column="39">(<argument><expr><lit:literal type="number" pos:line="276" pos:column="40">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="276" pos:column="43">"/"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="277" pos:column="17">categoryBuilder</name><op:operator pos:line="277" pos:column="32">.</op:operator><name pos:line="277" pos:column="33">Insert</name></name><argument_list pos:line="277" pos:column="39">(<argument><expr><lit:literal type="number" pos:line="277" pos:column="40">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="277" pos:column="43">currentElement</name><op:operator pos:line="277" pos:column="57">.</op:operator><name pos:line="277" pos:column="58">Name</name><op:operator pos:line="277" pos:column="62">.</op:operator><name pos:line="277" pos:column="63">LocalName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                
                <expr_stmt><expr><call><name><name pos:line="279" pos:column="17">categoryXPathBuilder</name><op:operator pos:line="279" pos:column="37">.</op:operator><name pos:line="279" pos:column="38">Insert</name></name><argument_list pos:line="279" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="279" pos:column="45">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="279" pos:column="48">currentElement</name><op:operator pos:line="279" pos:column="62">.</op:operator><name pos:line="279" pos:column="63">GetXPathName</name></name><argument_list pos:line="279" pos:column="75">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="280" pos:column="17">categoryXPathBuilder</name><op:operator pos:line="280" pos:column="37">.</op:operator><name pos:line="280" pos:column="38">Insert</name></name><argument_list pos:line="280" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="280" pos:column="45">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="280" pos:column="48">"/"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name pos:line="282" pos:column="17">mCategoryAsXPath</name> <op:operator pos:line="282" pos:column="34">=</op:operator> <call><name><name pos:line="282" pos:column="36">categoryXPathBuilder</name><op:operator pos:line="282" pos:column="56">.</op:operator><name pos:line="282" pos:column="57">ToString</name></name><argument_list pos:line="282" pos:column="65">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="283" pos:column="17">mCategory</name> <op:operator pos:line="283" pos:column="27">=</op:operator> <call><name><name pos:line="283" pos:column="29">categoryBuilder</name><op:operator pos:line="283" pos:column="44">.</op:operator><name pos:line="283" pos:column="45">ToString</name></name><argument_list pos:line="283" pos:column="53">()</argument_list></call></expr>;</expr_stmt>
                <return pos:line="284" pos:column="17">return;</return>
            }</block></then></if>
        }</block></function>
        <cpp:endregion pos:line="287" pos:column="9">#<cpp:directive pos:line="287" pos:column="10">endregion</cpp:directive></cpp:endregion>

        <cpp:region pos:line="289" pos:column="9">#<cpp:directive pos:line="289" pos:column="10">region</cpp:directive> Member Variables.</cpp:region>

        <decl_stmt><decl><type><specifier pos:line="291" pos:column="9">private</specifier> <name pos:line="291" pos:column="17">String</name></type> <name pos:line="291" pos:column="24">mTranslationUnitName</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="292" pos:column="9">private</specifier> <name pos:line="292" pos:column="17">SyntaticCategoryDataModel</name></type> <name pos:line="292" pos:column="43">mDataModel</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="293" pos:column="9">private</specifier> <name pos:line="293" pos:column="17">String</name></type> <name pos:line="293" pos:column="24">mCategory</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="294" pos:column="9">private</specifier> <name pos:line="294" pos:column="17">String</name></type> <name pos:line="294" pos:column="24">mCategoryAsXPath</name></decl>;</decl_stmt>

        <cpp:endregion pos:line="296" pos:column="9">#<cpp:directive pos:line="296" pos:column="10">endregion</cpp:directive></cpp:endregion>
    }</block></class>
}</block></namespace>
</unit>
