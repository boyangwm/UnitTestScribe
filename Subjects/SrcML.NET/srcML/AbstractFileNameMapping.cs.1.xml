<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML\AbstractFileNameMapping.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2013 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Patrick Francis (ABB Group) - Initial implementation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">System</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">IO</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Collections</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">Generic</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Linq</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Text</name></name>;</using>

<namespace pos:line="18" pos:column="1">namespace <name><name pos:line="18" pos:column="11">ABB</name><op:operator pos:line="18" pos:column="14">.</op:operator><name pos:line="18" pos:column="15">SrcML</name></name> <block pos:line="18" pos:column="21">{
    <comment type="line" pos:line="19" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="20" pos:column="5">/// Maintains a mapping between source file paths and their corresponding target file paths.</comment>
    <comment type="line" pos:line="21" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="22" pos:column="5">public</specifier> <specifier pos:line="22" pos:column="12">abstract</specifier> class <name pos:line="22" pos:column="27">AbstractFileNameMapping</name> <super pos:line="22" pos:column="51">: <name pos:line="22" pos:column="53">IDisposable</name></super> <block pos:line="22" pos:column="65">{
        <decl_stmt><decl><type><specifier pos:line="23" pos:column="9">private</specifier> <name pos:line="23" pos:column="17">string</name></type> <name pos:line="23" pos:column="24">_targetExtension</name></decl>;</decl_stmt>

        <comment type="line" pos:line="25" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="26" pos:column="9">/// The directory where the target files should be located.</comment>
        <comment type="line" pos:line="27" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="28" pos:column="9">public</specifier> <name pos:line="28" pos:column="16">string</name></type> <name pos:line="28" pos:column="23">TargetDirectory</name> <block pos:line="28" pos:column="39">{ <function_decl><name pos:line="28" pos:column="41">get</name>;</function_decl> <function_decl><specifier pos:line="28" pos:column="46">protected</specifier> <name pos:line="28" pos:column="56">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="30" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="31" pos:column="9">/// The extension to use for the target files. This will always have a starting period.</comment>
        <comment type="line" pos:line="32" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="33" pos:column="9">public</specifier> <name pos:line="33" pos:column="16">string</name></type> <name pos:line="33" pos:column="23">TargetExtension</name> <block pos:line="33" pos:column="39">{
            <function><name pos:line="34" pos:column="13">get</name> <block pos:line="34" pos:column="17">{ <return pos:line="34" pos:column="19">return <expr><name pos:line="34" pos:column="26">_targetExtension</name></expr>;</return> }</block></function>
            <function><specifier pos:line="35" pos:column="13">protected</specifier> <name pos:line="35" pos:column="23">set</name> <block pos:line="35" pos:column="27">{
                <if pos:line="36" pos:column="17">if<condition pos:line="36" pos:column="19">(<expr><op:operator pos:line="36" pos:column="20">!</op:operator><call><name><name pos:line="36" pos:column="21">String</name><op:operator pos:line="36" pos:column="27">.</op:operator><name pos:line="36" pos:column="28">IsNullOrWhiteSpace</name></name><argument_list pos:line="36" pos:column="46">(<argument><expr><name pos:line="36" pos:column="47">value</name></expr></argument>)</argument_list></call> <op:operator pos:line="36" pos:column="54">||</op:operator> <lit:literal type="char" pos:line="36" pos:column="57">'.'</lit:literal> <op:operator pos:line="36" pos:column="61">==</op:operator> <name><name pos:line="36" pos:column="64">value</name><index pos:line="36" pos:column="69">[<expr><lit:literal type="number" pos:line="36" pos:column="70">0</lit:literal></expr>]</index></name></expr>)</condition><then pos:line="36" pos:column="73"> <block pos:line="36" pos:column="74">{
                    <expr_stmt><expr><name pos:line="37" pos:column="21">_targetExtension</name> <op:operator pos:line="37" pos:column="38">=</op:operator> <name pos:line="37" pos:column="40">value</name></expr>;</expr_stmt>
                }</block></then> <else pos:line="38" pos:column="19">else <block pos:line="38" pos:column="24">{
                    <expr_stmt><expr><name pos:line="39" pos:column="21">_targetExtension</name> <op:operator pos:line="39" pos:column="38">=</op:operator> <call><name><name pos:line="39" pos:column="40">value</name><op:operator pos:line="39" pos:column="45">.</op:operator><name pos:line="39" pos:column="46">Insert</name></name><argument_list pos:line="39" pos:column="52">(<argument><expr><lit:literal type="number" pos:line="39" pos:column="53">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="39" pos:column="56">"."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="44" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="45" pos:column="9">/// Creates a new AbstractFileNameMapping.</comment>
        <comment type="line" pos:line="46" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="47" pos:column="9">/// &lt;param name="targetDirectory"&gt;The directory for the XML files.&lt;/param&gt;</comment>
        <comment type="line" pos:line="48" pos:column="9">/// &lt;param name="targetExtension"&gt;The target extension. If the extension has no starting period, one will be added.&lt;/param&gt;</comment>
        <constructor><specifier pos:line="49" pos:column="9">protected</specifier> <name pos:line="49" pos:column="19">AbstractFileNameMapping</name><parameter_list pos:line="49" pos:column="42">(<param><decl><type><name pos:line="49" pos:column="43">string</name></type> <name pos:line="49" pos:column="50">targetDirectory</name></decl></param>, <param><decl><type><name pos:line="49" pos:column="67">string</name></type> <name pos:line="49" pos:column="74">targetExtension</name></decl></param>)</parameter_list> <block pos:line="49" pos:column="91">{
            <if pos:line="50" pos:column="13">if<condition pos:line="50" pos:column="15">(<expr><call><name><name pos:line="50" pos:column="16">string</name><op:operator pos:line="50" pos:column="22">.</op:operator><name pos:line="50" pos:column="23">IsNullOrWhiteSpace</name></name><argument_list pos:line="50" pos:column="41">(<argument><expr><name pos:line="50" pos:column="42">targetDirectory</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="50" pos:column="59"> <block pos:line="50" pos:column="60">{
                <throw pos:line="51" pos:column="17">throw <expr><op:operator pos:line="51" pos:column="23">new</op:operator> <call><name pos:line="51" pos:column="27">ArgumentException</name><argument_list pos:line="51" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="51" pos:column="45">"Argument cannot be null, empty, or whitespace."</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="51" pos:column="95">"xmlDirectory"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <expr_stmt><expr><name><name pos:line="53" pos:column="13">this</name><op:operator pos:line="53" pos:column="17">.</op:operator><name pos:line="53" pos:column="18">TargetDirectory</name></name> <op:operator pos:line="53" pos:column="34">=</op:operator> <call><name><name pos:line="53" pos:column="36">Path</name><op:operator pos:line="53" pos:column="40">.</op:operator><name pos:line="53" pos:column="41">GetFullPath</name></name><argument_list pos:line="53" pos:column="52">(<argument><expr><name pos:line="53" pos:column="53">targetDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="54" pos:column="13">this</name><op:operator pos:line="54" pos:column="17">.</op:operator><name pos:line="54" pos:column="18">TargetExtension</name></name> <op:operator pos:line="54" pos:column="34">=</op:operator> <name pos:line="54" pos:column="36">targetExtension</name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="57" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="58" pos:column="9">/// Returns all of the files </comment>
        <comment type="line" pos:line="59" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="60" pos:column="9">/// &lt;returns&gt;all of the files in &lt;see cref="TargetDirectory"/&gt; that have &lt;see cref="TargetExtension"/&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="61" pos:column="9">public</specifier> <name><name pos:line="61" pos:column="16">IEnumerable</name><argument_list pos:line="61" pos:column="27">&lt;<argument><name pos:line="61" pos:column="28">string</name></argument>&gt;</argument_list></name></type> <name pos:line="61" pos:column="36">GetTargetFiles</name><parameter_list pos:line="61" pos:column="50">()</parameter_list> <block pos:line="61" pos:column="53">{
            <return pos:line="62" pos:column="13">return <expr><op:operator pos:line="62" pos:column="20">(</op:operator><call><name><name pos:line="62" pos:column="21">Directory</name><op:operator pos:line="62" pos:column="30">.</op:operator><name pos:line="62" pos:column="31">Exists</name></name><argument_list pos:line="62" pos:column="37">(<argument><expr><name pos:line="62" pos:column="38">TargetDirectory</name></expr></argument>)</argument_list></call>
                    <op:operator pos:line="63" pos:column="21">?</op:operator> <call><name><name pos:line="63" pos:column="23">Directory</name><op:operator pos:line="63" pos:column="32">.</op:operator><name pos:line="63" pos:column="33">EnumerateFiles</name></name><argument_list pos:line="63" pos:column="47">(<argument><expr><name pos:line="63" pos:column="48">TargetDirectory</name></expr></argument>, <argument><expr><call><name><name pos:line="63" pos:column="65">String</name><op:operator pos:line="63" pos:column="71">.</op:operator><name pos:line="63" pos:column="72">Format</name></name><argument_list pos:line="63" pos:column="78">(<argument><expr><lit:literal type="string" pos:line="63" pos:column="79">"*{0}"</lit:literal></expr></argument>, <argument><expr><name pos:line="63" pos:column="87">TargetExtension</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="63" pos:column="105">SearchOption</name><op:operator pos:line="63" pos:column="117">.</op:operator><name pos:line="63" pos:column="118">AllDirectories</name></name></expr></argument>)</argument_list></call>
                    <op:operator pos:line="64" pos:column="21">:</op:operator> <call><name><name pos:line="64" pos:column="23">Enumerable</name><op:operator pos:line="64" pos:column="33">.</op:operator><name><name pos:line="64" pos:column="34">Empty</name><argument_list pos:line="64" pos:column="39">&lt;<argument><name pos:line="64" pos:column="40">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="64" pos:column="47">()</argument_list></call><op:operator pos:line="64" pos:column="49">)</op:operator></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="67" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="68" pos:column="9">/// Returns the path for the XML file mapped to &lt;paramref name="sourcePath"/&gt;.</comment>
        <comment type="line" pos:line="69" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="70" pos:column="9">/// &lt;param name="sourcePath"&gt;The path for the source file.&lt;/param&gt;</comment>
        <comment type="line" pos:line="71" pos:column="9">/// &lt;returns&gt;The full path for an XML file based on &lt;paramref name="sourcePath"/&gt;.&lt;/returns&gt;</comment>
        <function_decl><type><specifier pos:line="72" pos:column="9">public</specifier> <specifier pos:line="72" pos:column="16">abstract</specifier> <name pos:line="72" pos:column="25">string</name></type> <name pos:line="72" pos:column="32">GetTargetPath</name><parameter_list pos:line="72" pos:column="45">(<param><decl><type><name pos:line="72" pos:column="46">string</name></type> <name pos:line="72" pos:column="53">sourcePath</name></decl></param>)</parameter_list>;</function_decl>

        <comment type="line" pos:line="74" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="75" pos:column="9">/// Returns the path where the source file for &lt;paramref name="targetPath"/&gt; is located.</comment>
        <comment type="line" pos:line="76" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="77" pos:column="9">/// &lt;param name="targetPath"&gt;The path for the XML file.&lt;/param&gt;</comment>
        <comment type="line" pos:line="78" pos:column="9">/// &lt;returns&gt;The full path for the source file that &lt;paramref name="targetPath"/&gt; is based on.&lt;/returns&gt;</comment>
        <function_decl><type><specifier pos:line="79" pos:column="9">public</specifier> <specifier pos:line="79" pos:column="16">abstract</specifier> <name pos:line="79" pos:column="25">string</name></type> <name pos:line="79" pos:column="32">GetSourcePath</name><parameter_list pos:line="79" pos:column="45">(<param><decl><type><name pos:line="79" pos:column="46">string</name></type> <name pos:line="79" pos:column="53">targetPath</name></decl></param>)</parameter_list>;</function_decl>

        <comment type="line" pos:line="81" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="82" pos:column="9">/// Saves the file name mapping to the XmlDirectory.</comment>
        <comment type="line" pos:line="83" pos:column="9">/// &lt;/summary&gt;</comment>
        <function_decl><type><specifier pos:line="84" pos:column="9">public</specifier> <specifier pos:line="84" pos:column="16">abstract</specifier> <name pos:line="84" pos:column="25">void</name></type> <name pos:line="84" pos:column="30">SaveMapping</name><parameter_list pos:line="84" pos:column="41">()</parameter_list>;</function_decl>

        <cpp:region pos:line="86" pos:column="9">#<cpp:directive pos:line="86" pos:column="10">region</cpp:directive> IDisposable Members</cpp:region>

        <comment type="line" pos:line="88" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="89" pos:column="9">/// Disposes of this file name mapping</comment>
        <comment type="line" pos:line="90" pos:column="9">/// &lt;/summary&gt;</comment>
        <function_decl><type><specifier pos:line="91" pos:column="9">public</specifier> <specifier pos:line="91" pos:column="16">abstract</specifier> <name pos:line="91" pos:column="25">void</name></type> <name pos:line="91" pos:column="30">Dispose</name><parameter_list pos:line="91" pos:column="37">()</parameter_list>;</function_decl>

        <cpp:endregion pos:line="93" pos:column="9">#<cpp:directive pos:line="93" pos:column="10">endregion</cpp:directive></cpp:endregion>
    }</block></class>
}</block></namespace>
</unit>
