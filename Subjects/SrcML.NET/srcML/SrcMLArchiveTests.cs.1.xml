<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Test\SrcMLArchiveTests.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2011 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - Initial implementation
 *    Jiang Zheng (ABB Group) - Initial implementation
 *****************************************************************************/</comment>

<using pos:line="13" pos:column="1">using <name pos:line="13" pos:column="7">System</name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Collections</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">Generic</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Diagnostics</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">IO</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Linq</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Threading</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">ABB</name><op:operator pos:line="19" pos:column="10">.</op:operator><name pos:line="19" pos:column="11">SrcML</name></name>;</using>
<using pos:line="20" pos:column="1">using <name><name pos:line="20" pos:column="7">NUnit</name><op:operator pos:line="20" pos:column="12">.</op:operator><name pos:line="20" pos:column="13">Framework</name></name>;</using>

<namespace pos:line="22" pos:column="1">namespace <name><name pos:line="22" pos:column="11">ABB</name><op:operator pos:line="22" pos:column="14">.</op:operator><name pos:line="22" pos:column="15">SrcML</name><op:operator pos:line="22" pos:column="20">.</op:operator><name pos:line="22" pos:column="21">Test</name></name>
<block pos:line="23" pos:column="1">{
    <class><attribute pos:line="24" pos:column="5">[<expr><name pos:line="24" pos:column="6">TestFixture</name></expr>]</attribute>
    <attribute pos:line="25" pos:column="5">[<expr><call><name pos:line="25" pos:column="6">Category</name><argument_list pos:line="25" pos:column="14">(<argument><expr><lit:literal type="string" pos:line="25" pos:column="15">"Build"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="26" pos:column="5">public</specifier> class <name pos:line="26" pos:column="18">SrcMLArchiveTests</name>
    <block pos:line="27" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="28" pos:column="9">public</specifier> <specifier pos:line="28" pos:column="16">const</specifier> <name pos:line="28" pos:column="22">string</name></type> <name pos:line="28" pos:column="29">SourceDirectory</name> <init pos:line="28" pos:column="45">= <expr><lit:literal type="string" pos:line="28" pos:column="47">"testSourceDir"</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="29" pos:column="9">public</specifier> <specifier pos:line="29" pos:column="16">const</specifier> <name pos:line="29" pos:column="22">string</name></type> <name pos:line="29" pos:column="29">ArchiveDirectory</name> <init pos:line="29" pos:column="46">= <expr><lit:literal type="string" pos:line="29" pos:column="48">"SrcMLArchive"</lit:literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="31" pos:column="9">private</specifier> <name pos:line="31" pos:column="17">DirectoryInfo</name></type> <name pos:line="31" pos:column="31">srcDirectoryInfo</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="32" pos:column="9">private</specifier> <name pos:line="32" pos:column="17">DirectoryInfo</name></type> <name pos:line="32" pos:column="31">archiveDirectoryInfo</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="33" pos:column="9">private</specifier> <name pos:line="33" pos:column="17">bool</name></type> <name pos:line="33" pos:column="22">startupCompleted</name> <init pos:line="33" pos:column="39">= <expr><lit:literal type="boolean" pos:line="33" pos:column="41">false</lit:literal></expr></init></decl>;</decl_stmt>

        <function><type><attribute pos:line="35" pos:column="9">[<expr><name pos:line="35" pos:column="10">TestFixtureSetUp</name></expr>]</attribute>
        <specifier pos:line="36" pos:column="9">public</specifier> <name pos:line="36" pos:column="16">void</name></type> <name pos:line="36" pos:column="21">Setup</name><parameter_list pos:line="36" pos:column="26">()</parameter_list>
        <block pos:line="37" pos:column="9">{
            <if pos:line="38" pos:column="13">if<condition pos:line="38" pos:column="15">(<expr><op:operator pos:line="38" pos:column="16">!</op:operator><call><name><name pos:line="38" pos:column="17">Directory</name><op:operator pos:line="38" pos:column="26">.</op:operator><name pos:line="38" pos:column="27">Exists</name></name><argument_list pos:line="38" pos:column="33">(<argument><expr><name pos:line="38" pos:column="34">SourceDirectory</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="38" pos:column="51"> <block pos:line="38" pos:column="52">{
                <expr_stmt><expr><name pos:line="39" pos:column="17">srcDirectoryInfo</name> <op:operator pos:line="39" pos:column="34">=</op:operator> <call><name><name pos:line="39" pos:column="36">Directory</name><op:operator pos:line="39" pos:column="45">.</op:operator><name pos:line="39" pos:column="46">CreateDirectory</name></name><argument_list pos:line="39" pos:column="61">(<argument><expr><name pos:line="39" pos:column="62">SourceDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="40" pos:column="15">else <block pos:line="40" pos:column="20">{
                <expr_stmt><expr><name pos:line="41" pos:column="17">srcDirectoryInfo</name> <op:operator pos:line="41" pos:column="34">=</op:operator> <op:operator pos:line="41" pos:column="36">new</op:operator> <call><name pos:line="41" pos:column="40">DirectoryInfo</name><argument_list pos:line="41" pos:column="53">(<argument><expr><name pos:line="41" pos:column="54">SourceDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <if pos:line="44" pos:column="13">if<condition pos:line="44" pos:column="15">(<expr><op:operator pos:line="44" pos:column="16">!</op:operator><call><name><name pos:line="44" pos:column="17">Directory</name><op:operator pos:line="44" pos:column="26">.</op:operator><name pos:line="44" pos:column="27">Exists</name></name><argument_list pos:line="44" pos:column="33">(<argument><expr><name pos:line="44" pos:column="34">ArchiveDirectory</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="44" pos:column="52"> <block pos:line="44" pos:column="53">{
                <expr_stmt><expr><name pos:line="45" pos:column="17">archiveDirectoryInfo</name> <op:operator pos:line="45" pos:column="38">=</op:operator> <call><name><name pos:line="45" pos:column="40">Directory</name><op:operator pos:line="45" pos:column="49">.</op:operator><name pos:line="45" pos:column="50">CreateDirectory</name></name><argument_list pos:line="45" pos:column="65">(<argument><expr><name pos:line="45" pos:column="66">ArchiveDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="46" pos:column="15">else <block pos:line="46" pos:column="20">{
                <expr_stmt><expr><name pos:line="47" pos:column="17">archiveDirectoryInfo</name> <op:operator pos:line="47" pos:column="38">=</op:operator> <op:operator pos:line="47" pos:column="40">new</op:operator> <call><name pos:line="47" pos:column="44">DirectoryInfo</name><argument_list pos:line="47" pos:column="57">(<argument><expr><name pos:line="47" pos:column="58">ArchiveDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></function>

        <function><type><attribute pos:line="51" pos:column="9">[<expr><name pos:line="51" pos:column="10">SetUp</name></expr>]</attribute>
        <specifier pos:line="52" pos:column="9">public</specifier> <name pos:line="52" pos:column="16">void</name></type> <name pos:line="52" pos:column="21">TestSetUp</name><parameter_list pos:line="52" pos:column="30">()</parameter_list> <block pos:line="52" pos:column="33">{
            <if pos:line="53" pos:column="13">if<condition pos:line="53" pos:column="15">(<expr><name><name pos:line="53" pos:column="16">srcDirectoryInfo</name><op:operator pos:line="53" pos:column="32">.</op:operator><name pos:line="53" pos:column="33">Exists</name></name></expr>)</condition><then pos:line="53" pos:column="40"> <block pos:line="53" pos:column="41">{
                <foreach pos:line="54" pos:column="17">foreach(<init><decl><type><name pos:line="54" pos:column="25">var</name></type> <name pos:line="54" pos:column="29">file</name> <range pos:line="54" pos:column="34">in <expr><call><name><name pos:line="54" pos:column="37">srcDirectoryInfo</name><op:operator pos:line="54" pos:column="53">.</op:operator><name pos:line="54" pos:column="54">GetFiles</name></name><argument_list pos:line="54" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="54" pos:column="63">"*.*"</lit:literal></expr></argument>)</argument_list></call></expr></range></decl></init>) <block pos:line="54" pos:column="71">{
                    <expr_stmt><expr><call><name><name pos:line="55" pos:column="21">File</name><op:operator pos:line="55" pos:column="25">.</op:operator><name pos:line="55" pos:column="26">Delete</name></name><argument_list pos:line="55" pos:column="32">(<argument><expr><name><name pos:line="55" pos:column="33">file</name><op:operator pos:line="55" pos:column="37">.</op:operator><name pos:line="55" pos:column="38">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
            }</block></then></if>
            <if pos:line="58" pos:column="13">if<condition pos:line="58" pos:column="15">(<expr><name><name pos:line="58" pos:column="16">archiveDirectoryInfo</name><op:operator pos:line="58" pos:column="36">.</op:operator><name pos:line="58" pos:column="37">Exists</name></name></expr>)</condition><then pos:line="58" pos:column="44"> <block pos:line="58" pos:column="45">{
                <foreach pos:line="59" pos:column="17">foreach(<init><decl><type><name pos:line="59" pos:column="25">var</name></type> <name pos:line="59" pos:column="29">file</name> <range pos:line="59" pos:column="34">in <expr><call><name><name pos:line="59" pos:column="37">archiveDirectoryInfo</name><op:operator pos:line="59" pos:column="57">.</op:operator><name pos:line="59" pos:column="58">GetFiles</name></name><argument_list pos:line="59" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="59" pos:column="67">"*.*"</lit:literal></expr></argument>)</argument_list></call></expr></range></decl></init>) <block pos:line="59" pos:column="75">{
                    <expr_stmt><expr><call><name><name pos:line="60" pos:column="21">File</name><op:operator pos:line="60" pos:column="25">.</op:operator><name pos:line="60" pos:column="26">Delete</name></name><argument_list pos:line="60" pos:column="32">(<argument><expr><name><name pos:line="60" pos:column="33">file</name><op:operator pos:line="60" pos:column="37">.</op:operator><name pos:line="60" pos:column="38">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
            }</block></then></if>
        }</block></function>

        <function><type><attribute pos:line="65" pos:column="9">[<expr><name pos:line="65" pos:column="10">TestFixtureTearDown</name></expr>]</attribute>
        <specifier pos:line="66" pos:column="9">public</specifier> <name pos:line="66" pos:column="16">void</name></type> <name pos:line="66" pos:column="21">TearDown</name><parameter_list pos:line="66" pos:column="29">()</parameter_list> <block pos:line="66" pos:column="32">{
            <if pos:line="67" pos:column="13">if<condition pos:line="67" pos:column="15">(<expr><call><name><name pos:line="67" pos:column="16">Directory</name><op:operator pos:line="67" pos:column="25">.</op:operator><name pos:line="67" pos:column="26">Exists</name></name><argument_list pos:line="67" pos:column="32">(<argument><expr><name pos:line="67" pos:column="33">SourceDirectory</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="67" pos:column="50"> <block pos:line="67" pos:column="51">{
                <expr_stmt><expr><call><name><name pos:line="68" pos:column="17">Directory</name><op:operator pos:line="68" pos:column="26">.</op:operator><name pos:line="68" pos:column="27">Delete</name></name><argument_list pos:line="68" pos:column="33">(<argument><expr><name pos:line="68" pos:column="34">SourceDirectory</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="68" pos:column="51">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if pos:line="70" pos:column="13">if<condition pos:line="70" pos:column="15">(<expr><call><name><name pos:line="70" pos:column="16">Directory</name><op:operator pos:line="70" pos:column="25">.</op:operator><name pos:line="70" pos:column="26">Exists</name></name><argument_list pos:line="70" pos:column="32">(<argument><expr><name pos:line="70" pos:column="33">ArchiveDirectory</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="70" pos:column="51"> <block pos:line="70" pos:column="52">{
                <expr_stmt><expr><call><name><name pos:line="71" pos:column="17">Directory</name><op:operator pos:line="71" pos:column="26">.</op:operator><name pos:line="71" pos:column="27">Delete</name></name><argument_list pos:line="71" pos:column="33">(<argument><expr><name pos:line="71" pos:column="34">ArchiveDirectory</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="71" pos:column="52">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><attribute pos:line="75" pos:column="9">[<expr><name pos:line="75" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="76" pos:column="9">public</specifier> <name pos:line="76" pos:column="16">void</name></type> <name pos:line="76" pos:column="21">GenerateXmlForDirectoryTest</name><parameter_list pos:line="76" pos:column="48">()</parameter_list> <block pos:line="76" pos:column="51">{
            <decl_stmt><decl><type><name pos:line="77" pos:column="13">ManualResetEvent</name></type> <name pos:line="77" pos:column="30">resetEvent</name> <init pos:line="77" pos:column="41">= <expr><op:operator pos:line="77" pos:column="43">new</op:operator> <call><name pos:line="77" pos:column="47">ManualResetEvent</name><argument_list pos:line="77" pos:column="63">(<argument><expr><lit:literal type="boolean" pos:line="77" pos:column="64">false</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="79" pos:column="13">var</name></type> <name pos:line="79" pos:column="17">archive</name> <init pos:line="79" pos:column="25">= <expr><op:operator pos:line="79" pos:column="27">new</op:operator> <call><name pos:line="79" pos:column="31">SrcMLArchive</name><argument_list pos:line="79" pos:column="43">(<argument><expr><name pos:line="79" pos:column="44">ArchiveDirectory</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="79" pos:column="62">false</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="79" pos:column="69">new</op:operator> <call><name pos:line="79" pos:column="73">SrcMLGenerator</name><argument_list pos:line="79" pos:column="87">(<argument><expr><name><name pos:line="79" pos:column="88">TestConstants</name><op:operator pos:line="79" pos:column="101">.</op:operator><name pos:line="79" pos:column="102">SrcmlPath</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="80" pos:column="13">FileEventType</name></type> <name pos:line="80" pos:column="27">expectedEventType</name> <init pos:line="80" pos:column="45">= <expr><name><name pos:line="80" pos:column="47">FileEventType</name><op:operator pos:line="80" pos:column="60">.</op:operator><name pos:line="80" pos:column="61">FileAdded</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="81" pos:column="13">FileEventType</name></type> <name pos:line="81" pos:column="27">actualEventType</name> <init pos:line="81" pos:column="43">= <expr><name><name pos:line="81" pos:column="45">FileEventType</name><op:operator pos:line="81" pos:column="58">.</op:operator><name pos:line="81" pos:column="59">FileChanged</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name pos:line="83" pos:column="13">archive</name><op:operator pos:line="83" pos:column="20">.</op:operator><name pos:line="83" pos:column="21">FileChanged</name></name> <op:operator pos:line="83" pos:column="33">+=</op:operator> <lambda><parameter_list pos:line="83" pos:column="36">(<param><decl><name pos:line="83" pos:column="37">sender</name></decl></param>, <param><decl><name pos:line="83" pos:column="45">e</name></decl></param>)</parameter_list> <op:operator pos:line="83" pos:column="48">=&gt;</op:operator> <block pos:line="83" pos:column="51">{
                <expr_stmt><expr><name pos:line="84" pos:column="17">actualEventType</name> <op:operator pos:line="84" pos:column="33">=</op:operator> <name><name pos:line="84" pos:column="35">e</name><op:operator pos:line="84" pos:column="36">.</op:operator><name pos:line="84" pos:column="37">EventType</name></name></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="85" pos:column="17">bool</name></type> <name pos:line="85" pos:column="22">shouldHaveSrcML</name> <init pos:line="85" pos:column="38">= <expr><op:operator pos:line="85" pos:column="40">(</op:operator><name><name pos:line="85" pos:column="41">e</name><op:operator pos:line="85" pos:column="42">.</op:operator><name pos:line="85" pos:column="43">EventType</name></name> <op:operator pos:line="85" pos:column="53">!=</op:operator> <name><name pos:line="85" pos:column="56">FileEventType</name><op:operator pos:line="85" pos:column="69">.</op:operator><name pos:line="85" pos:column="70">FileDeleted</name></name><op:operator pos:line="85" pos:column="81">)</op:operator></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="86" pos:column="17">Assert</name><op:operator pos:line="86" pos:column="23">.</op:operator><name pos:line="86" pos:column="24">AreEqual</name></name><argument_list pos:line="86" pos:column="32">(<argument><expr><name pos:line="86" pos:column="33">shouldHaveSrcML</name></expr></argument>, <argument><expr><name><name pos:line="86" pos:column="50">e</name><op:operator pos:line="86" pos:column="51">.</op:operator><name pos:line="86" pos:column="52">HasSrcML</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="87" pos:column="17">resetEvent</name><op:operator pos:line="87" pos:column="27">.</op:operator><name pos:line="87" pos:column="28">Set</name></name><argument_list pos:line="87" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
            }</block></lambda></expr>;</expr_stmt>

            <decl_stmt><decl><type><name><name pos:line="90" pos:column="13">Dictionary</name><argument_list pos:line="90" pos:column="23">&lt;<argument><name pos:line="90" pos:column="24">string</name></argument>, <argument><name pos:line="90" pos:column="32">string</name></argument>&gt;</argument_list></name></type> <name pos:line="90" pos:column="40">sourceFiles</name> <init pos:line="90" pos:column="52">= <expr><op:operator pos:line="90" pos:column="54">new</op:operator> <call><name><name pos:line="90" pos:column="58">Dictionary</name><argument_list pos:line="90" pos:column="68">&lt;<argument><name pos:line="90" pos:column="69">string</name></argument>, <argument><name pos:line="90" pos:column="77">string</name></argument>&gt;</argument_list></name><argument_list pos:line="90" pos:column="84">()</argument_list></call> <block pos:line="90" pos:column="87">{
                <expr><block pos:line="91" pos:column="17">{ <expr><call><name><name pos:line="91" pos:column="19">Path</name><op:operator pos:line="91" pos:column="23">.</op:operator><name pos:line="91" pos:column="24">Combine</name></name><argument_list pos:line="91" pos:column="31">(<argument><expr><name pos:line="91" pos:column="32">SourceDirectory</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="91" pos:column="49">"foo.c"</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><call><name><name pos:line="91" pos:column="59">String</name><op:operator pos:line="91" pos:column="65">.</op:operator><name pos:line="91" pos:column="66">Format</name></name><argument_list pos:line="91" pos:column="72">(<argument><expr><lit:literal type="string" pos:line="91" pos:column="73">@"int foo() {{{0}printf(""hello world!"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="91" pos:column="123">Environment</name><op:operator pos:line="91" pos:column="134">.</op:operator><name pos:line="91" pos:column="135">NewLine</name></name></expr></argument>)</argument_list></call></expr> }</block></expr>, 
                <expr><block pos:line="92" pos:column="17">{ <expr><call><name><name pos:line="92" pos:column="19">Path</name><op:operator pos:line="92" pos:column="23">.</op:operator><name pos:line="92" pos:column="24">Combine</name></name><argument_list pos:line="92" pos:column="31">(<argument><expr><name pos:line="92" pos:column="32">SourceDirectory</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="92" pos:column="49">"bar.c"</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><call><name><name pos:line="92" pos:column="59">String</name><op:operator pos:line="92" pos:column="65">.</op:operator><name pos:line="92" pos:column="66">Format</name></name><argument_list pos:line="92" pos:column="72">(<argument><expr><lit:literal type="string" pos:line="92" pos:column="73">@"int bar() {{{0}    printf(""goodbye, world!"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="92" pos:column="130">Environment</name><op:operator pos:line="92" pos:column="141">.</op:operator><name pos:line="92" pos:column="142">NewLine</name></name></expr></argument>)</argument_list></call></expr> }</block></expr>,
                <expr><block pos:line="93" pos:column="17">{ <expr><call><name><name pos:line="93" pos:column="19">Path</name><op:operator pos:line="93" pos:column="23">.</op:operator><name pos:line="93" pos:column="24">Combine</name></name><argument_list pos:line="93" pos:column="31">(<argument><expr><name pos:line="93" pos:column="32">SourceDirectory</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="93" pos:column="49">"subdir1"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="93" pos:column="60">"foo1.c"</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><call><name><name pos:line="93" pos:column="71">String</name><op:operator pos:line="93" pos:column="77">.</op:operator><name pos:line="93" pos:column="78">Format</name></name><argument_list pos:line="93" pos:column="84">(<argument><expr><lit:literal type="string" pos:line="93" pos:column="85">@"int foo1() {{{0}printf(""hello world 1!"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="93" pos:column="138">Environment</name><op:operator pos:line="93" pos:column="149">.</op:operator><name pos:line="93" pos:column="150">NewLine</name></name></expr></argument>)</argument_list></call></expr> }</block></expr>,
                <expr><block pos:line="94" pos:column="17">{ <expr><call><name><name pos:line="94" pos:column="19">Path</name><op:operator pos:line="94" pos:column="23">.</op:operator><name pos:line="94" pos:column="24">Combine</name></name><argument_list pos:line="94" pos:column="31">(<argument><expr><name pos:line="94" pos:column="32">SourceDirectory</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="94" pos:column="49">"subdir1"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="94" pos:column="60">"bar1.c"</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><call><name><name pos:line="94" pos:column="71">String</name><op:operator pos:line="94" pos:column="77">.</op:operator><name pos:line="94" pos:column="78">Format</name></name><argument_list pos:line="94" pos:column="84">(<argument><expr><lit:literal type="string" pos:line="94" pos:column="85">@"int bar1() {{{0}    printf(""goodbye, world 1!"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="94" pos:column="145">Environment</name><op:operator pos:line="94" pos:column="156">.</op:operator><name pos:line="94" pos:column="157">NewLine</name></name></expr></argument>)</argument_list></call></expr> }</block></expr>,
                <expr><block pos:line="95" pos:column="17">{ <expr><call><name><name pos:line="95" pos:column="19">Path</name><op:operator pos:line="95" pos:column="23">.</op:operator><name pos:line="95" pos:column="24">Combine</name></name><argument_list pos:line="95" pos:column="31">(<argument><expr><name pos:line="95" pos:column="32">SourceDirectory</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="95" pos:column="49">"subdir2"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="95" pos:column="60">"foo2.c"</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><call><name><name pos:line="95" pos:column="71">String</name><op:operator pos:line="95" pos:column="77">.</op:operator><name pos:line="95" pos:column="78">Format</name></name><argument_list pos:line="95" pos:column="84">(<argument><expr><lit:literal type="string" pos:line="95" pos:column="85">@"int foo2() {{{0}printf(""hello world 2!"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="95" pos:column="138">Environment</name><op:operator pos:line="95" pos:column="149">.</op:operator><name pos:line="95" pos:column="150">NewLine</name></name></expr></argument>)</argument_list></call></expr> }</block></expr>,
                <expr><block pos:line="96" pos:column="17">{ <expr><call><name><name pos:line="96" pos:column="19">Path</name><op:operator pos:line="96" pos:column="23">.</op:operator><name pos:line="96" pos:column="24">Combine</name></name><argument_list pos:line="96" pos:column="31">(<argument><expr><name pos:line="96" pos:column="32">SourceDirectory</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="96" pos:column="49">"subdir2"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="96" pos:column="60">"bar2.c"</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><call><name><name pos:line="96" pos:column="71">String</name><op:operator pos:line="96" pos:column="77">.</op:operator><name pos:line="96" pos:column="78">Format</name></name><argument_list pos:line="96" pos:column="84">(<argument><expr><lit:literal type="string" pos:line="96" pos:column="85">@"int bar2() {{{0}    printf(""goodbye, world 2!"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="96" pos:column="145">Environment</name><op:operator pos:line="96" pos:column="156">.</op:operator><name pos:line="96" pos:column="157">NewLine</name></name></expr></argument>)</argument_list></call></expr> }</block></expr>,
                <expr><block pos:line="97" pos:column="17">{ <expr><call><name><name pos:line="97" pos:column="19">Path</name><op:operator pos:line="97" pos:column="23">.</op:operator><name pos:line="97" pos:column="24">Combine</name></name><argument_list pos:line="97" pos:column="31">(<argument><expr><name pos:line="97" pos:column="32">SourceDirectory</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="97" pos:column="49">"subdir1"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="97" pos:column="60">"subdir11"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="97" pos:column="72">"foo11.c"</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><call><name><name pos:line="97" pos:column="84">String</name><op:operator pos:line="97" pos:column="90">.</op:operator><name pos:line="97" pos:column="91">Format</name></name><argument_list pos:line="97" pos:column="97">(<argument><expr><lit:literal type="string" pos:line="97" pos:column="98">@"int foo11() {{{0}printf(""hello world 11!"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="97" pos:column="153">Environment</name><op:operator pos:line="97" pos:column="164">.</op:operator><name pos:line="97" pos:column="165">NewLine</name></name></expr></argument>)</argument_list></call></expr> }</block></expr>,
                <expr><block pos:line="98" pos:column="17">{ <expr><call><name><name pos:line="98" pos:column="19">Path</name><op:operator pos:line="98" pos:column="23">.</op:operator><name pos:line="98" pos:column="24">Combine</name></name><argument_list pos:line="98" pos:column="31">(<argument><expr><name pos:line="98" pos:column="32">SourceDirectory</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="98" pos:column="49">"subdir1"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="98" pos:column="60">"subdir11"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="98" pos:column="72">"bar11.c"</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><call><name><name pos:line="98" pos:column="84">String</name><op:operator pos:line="98" pos:column="90">.</op:operator><name pos:line="98" pos:column="91">Format</name></name><argument_list pos:line="98" pos:column="97">(<argument><expr><lit:literal type="string" pos:line="98" pos:column="98">@"int bar11() {{{0}    printf(""goodbye, world 11!"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="98" pos:column="160">Environment</name><op:operator pos:line="98" pos:column="171">.</op:operator><name pos:line="98" pos:column="172">NewLine</name></name></expr></argument>)</argument_list></call></expr> }</block></expr>,
                <expr><block pos:line="99" pos:column="17">{ <expr><call><name><name pos:line="99" pos:column="19">Path</name><op:operator pos:line="99" pos:column="23">.</op:operator><name pos:line="99" pos:column="24">Combine</name></name><argument_list pos:line="99" pos:column="31">(<argument><expr><name pos:line="99" pos:column="32">SourceDirectory</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="99" pos:column="49">"subdir1"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="99" pos:column="60">"subdir12"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="99" pos:column="72">"foo12.c"</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><call><name><name pos:line="99" pos:column="84">String</name><op:operator pos:line="99" pos:column="90">.</op:operator><name pos:line="99" pos:column="91">Format</name></name><argument_list pos:line="99" pos:column="97">(<argument><expr><lit:literal type="string" pos:line="99" pos:column="98">@"int foo12() {{{0}printf(""hello world 12!"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="99" pos:column="153">Environment</name><op:operator pos:line="99" pos:column="164">.</op:operator><name pos:line="99" pos:column="165">NewLine</name></name></expr></argument>)</argument_list></call></expr> }</block></expr>,
                <expr><block pos:line="100" pos:column="17">{ <expr><call><name><name pos:line="100" pos:column="19">Path</name><op:operator pos:line="100" pos:column="23">.</op:operator><name pos:line="100" pos:column="24">Combine</name></name><argument_list pos:line="100" pos:column="31">(<argument><expr><name pos:line="100" pos:column="32">SourceDirectory</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="100" pos:column="49">"subdir1"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="100" pos:column="60">"subdir12"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="100" pos:column="72">"bar12.c"</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><call><name><name pos:line="100" pos:column="84">String</name><op:operator pos:line="100" pos:column="90">.</op:operator><name pos:line="100" pos:column="91">Format</name></name><argument_list pos:line="100" pos:column="97">(<argument><expr><lit:literal type="string" pos:line="100" pos:column="98">@"int bar12() {{{0}    printf(""goodbye, world 12!"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="100" pos:column="160">Environment</name><op:operator pos:line="100" pos:column="171">.</op:operator><name pos:line="100" pos:column="172">NewLine</name></name></expr></argument>)</argument_list></call></expr> }</block></expr>,
                <expr><block pos:line="101" pos:column="17">{ <expr><call><name><name pos:line="101" pos:column="19">Path</name><op:operator pos:line="101" pos:column="23">.</op:operator><name pos:line="101" pos:column="24">Combine</name></name><argument_list pos:line="101" pos:column="31">(<argument><expr><name pos:line="101" pos:column="32">SourceDirectory</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="101" pos:column="49">"subdir2"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="101" pos:column="60">"subdir21"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="101" pos:column="72">"foo21.c"</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><call><name><name pos:line="101" pos:column="84">String</name><op:operator pos:line="101" pos:column="90">.</op:operator><name pos:line="101" pos:column="91">Format</name></name><argument_list pos:line="101" pos:column="97">(<argument><expr><lit:literal type="string" pos:line="101" pos:column="98">@"int foo21() {{{0}printf(""hello world 21!"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="101" pos:column="153">Environment</name><op:operator pos:line="101" pos:column="164">.</op:operator><name pos:line="101" pos:column="165">NewLine</name></name></expr></argument>)</argument_list></call></expr> }</block></expr>,
                <expr><block pos:line="102" pos:column="17">{ <expr><call><name><name pos:line="102" pos:column="19">Path</name><op:operator pos:line="102" pos:column="23">.</op:operator><name pos:line="102" pos:column="24">Combine</name></name><argument_list pos:line="102" pos:column="31">(<argument><expr><name pos:line="102" pos:column="32">SourceDirectory</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="102" pos:column="49">"subdir2"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="102" pos:column="60">"subdir21"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="102" pos:column="72">"bar21.c"</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><call><name><name pos:line="102" pos:column="84">String</name><op:operator pos:line="102" pos:column="90">.</op:operator><name pos:line="102" pos:column="91">Format</name></name><argument_list pos:line="102" pos:column="97">(<argument><expr><lit:literal type="string" pos:line="102" pos:column="98">@"int bar21() {{{0}    printf(""goodbye, world 21!"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="102" pos:column="160">Environment</name><op:operator pos:line="102" pos:column="171">.</op:operator><name pos:line="102" pos:column="172">NewLine</name></name></expr></argument>)</argument_list></call></expr> }</block></expr>,
                <expr><block pos:line="103" pos:column="17">{ <expr><call><name><name pos:line="103" pos:column="19">Path</name><op:operator pos:line="103" pos:column="23">.</op:operator><name pos:line="103" pos:column="24">Combine</name></name><argument_list pos:line="103" pos:column="31">(<argument><expr><name pos:line="103" pos:column="32">SourceDirectory</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="103" pos:column="49">"subdir2"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="103" pos:column="60">"subdir22"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="103" pos:column="72">"foo22.c"</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><call><name><name pos:line="103" pos:column="84">String</name><op:operator pos:line="103" pos:column="90">.</op:operator><name pos:line="103" pos:column="91">Format</name></name><argument_list pos:line="103" pos:column="97">(<argument><expr><lit:literal type="string" pos:line="103" pos:column="98">@"int foo22() {{{0}printf(""hello world 22!"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="103" pos:column="153">Environment</name><op:operator pos:line="103" pos:column="164">.</op:operator><name pos:line="103" pos:column="165">NewLine</name></name></expr></argument>)</argument_list></call></expr> }</block></expr>,
                <expr><block pos:line="104" pos:column="17">{ <expr><call><name><name pos:line="104" pos:column="19">Path</name><op:operator pos:line="104" pos:column="23">.</op:operator><name pos:line="104" pos:column="24">Combine</name></name><argument_list pos:line="104" pos:column="31">(<argument><expr><name pos:line="104" pos:column="32">SourceDirectory</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="104" pos:column="49">"subdir2"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="104" pos:column="60">"subdir22"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="104" pos:column="72">"bar22.c"</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><call><name><name pos:line="104" pos:column="84">String</name><op:operator pos:line="104" pos:column="90">.</op:operator><name pos:line="104" pos:column="91">Format</name></name><argument_list pos:line="104" pos:column="97">(<argument><expr><lit:literal type="string" pos:line="104" pos:column="98">@"int bar22() {{{0}    printf(""goodbye, world 22!"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="104" pos:column="160">Environment</name><op:operator pos:line="104" pos:column="171">.</op:operator><name pos:line="104" pos:column="172">NewLine</name></name></expr></argument>)</argument_list></call></expr> }</block></expr>,
            }</block></expr></init></decl>;</decl_stmt>

            <foreach pos:line="107" pos:column="13">foreach(<init><decl><type><name pos:line="107" pos:column="21">var</name></type> <name pos:line="107" pos:column="25">fileDataPair</name> <range pos:line="107" pos:column="38">in <expr><name pos:line="107" pos:column="41">sourceFiles</name></expr></range></decl></init>) <block pos:line="107" pos:column="54">{
                <decl_stmt><decl><type><name pos:line="108" pos:column="17">var</name></type> <name pos:line="108" pos:column="21">directory</name> <init pos:line="108" pos:column="31">= <expr><call><name><name pos:line="108" pos:column="33">Path</name><op:operator pos:line="108" pos:column="37">.</op:operator><name pos:line="108" pos:column="38">GetDirectoryName</name></name><argument_list pos:line="108" pos:column="54">(<argument><expr><name><name pos:line="108" pos:column="55">fileDataPair</name><op:operator pos:line="108" pos:column="67">.</op:operator><name pos:line="108" pos:column="68">Key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="109" pos:column="17">if<condition pos:line="109" pos:column="19">(<expr><op:operator pos:line="109" pos:column="20">!</op:operator><call><name><name pos:line="109" pos:column="21">Directory</name><op:operator pos:line="109" pos:column="30">.</op:operator><name pos:line="109" pos:column="31">Exists</name></name><argument_list pos:line="109" pos:column="37">(<argument><expr><name pos:line="109" pos:column="38">directory</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="109" pos:column="49"> <block pos:line="109" pos:column="50">{
                    <expr_stmt><expr><call><name><name pos:line="110" pos:column="21">Directory</name><op:operator pos:line="110" pos:column="30">.</op:operator><name pos:line="110" pos:column="31">CreateDirectory</name></name><argument_list pos:line="110" pos:column="46">(<argument><expr><name pos:line="110" pos:column="47">directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name><name pos:line="112" pos:column="17">File</name><op:operator pos:line="112" pos:column="21">.</op:operator><name pos:line="112" pos:column="22">WriteAllText</name></name><argument_list pos:line="112" pos:column="34">(<argument><expr><name><name pos:line="112" pos:column="35">fileDataPair</name><op:operator pos:line="112" pos:column="47">.</op:operator><name pos:line="112" pos:column="48">Key</name></name></expr></argument>, <argument><expr><name><name pos:line="112" pos:column="53">fileDataPair</name><op:operator pos:line="112" pos:column="65">.</op:operator><name pos:line="112" pos:column="66">Value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="113" pos:column="17">archive</name><op:operator pos:line="113" pos:column="24">.</op:operator><name pos:line="113" pos:column="25">AddOrUpdateFile</name></name><argument_list pos:line="113" pos:column="40">(<argument><expr><name><name pos:line="113" pos:column="41">fileDataPair</name><op:operator pos:line="113" pos:column="53">.</op:operator><name pos:line="113" pos:column="54">Key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="114" pos:column="17">Assert</name><op:operator pos:line="114" pos:column="23">.</op:operator><name pos:line="114" pos:column="24">That</name></name><argument_list pos:line="114" pos:column="28">(<argument><expr><call><name><name pos:line="114" pos:column="29">resetEvent</name><op:operator pos:line="114" pos:column="39">.</op:operator><name pos:line="114" pos:column="40">WaitOne</name></name><argument_list pos:line="114" pos:column="47">(<argument><expr><lit:literal type="number" pos:line="114" pos:column="48">300</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="115" pos:column="17">Assert</name><op:operator pos:line="115" pos:column="23">.</op:operator><name pos:line="115" pos:column="24">AreEqual</name></name><argument_list pos:line="115" pos:column="32">(<argument><expr><name pos:line="115" pos:column="33">expectedEventType</name></expr></argument>, <argument><expr><name pos:line="115" pos:column="52">actualEventType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>

            <foreach pos:line="118" pos:column="13">foreach(<init><decl><type><name pos:line="118" pos:column="21">var</name></type> <name pos:line="118" pos:column="25">fileName</name> <range pos:line="118" pos:column="34">in <expr><name><name pos:line="118" pos:column="37">sourceFiles</name><op:operator pos:line="118" pos:column="48">.</op:operator><name pos:line="118" pos:column="49">Keys</name></name></expr></range></decl></init>) <block pos:line="118" pos:column="55">{
                <expr_stmt><expr><call><name><name pos:line="119" pos:column="17">Assert</name><op:operator pos:line="119" pos:column="23">.</op:operator><name pos:line="119" pos:column="24">That</name></name><argument_list pos:line="119" pos:column="28">(<argument><expr><call><name><name pos:line="119" pos:column="29">archive</name><op:operator pos:line="119" pos:column="36">.</op:operator><name pos:line="119" pos:column="37">ContainsFile</name></name><argument_list pos:line="119" pos:column="49">(<argument><expr><name pos:line="119" pos:column="50">fileName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="119" pos:column="61">String</name><op:operator pos:line="119" pos:column="67">.</op:operator><name pos:line="119" pos:column="68">Format</name></name><argument_list pos:line="119" pos:column="74">(<argument><expr><lit:literal type="string" pos:line="119" pos:column="75">"Archive should contain {0}"</lit:literal></expr></argument>, <argument><expr><name pos:line="119" pos:column="105">fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>

            <decl_stmt><decl><type><name pos:line="122" pos:column="13">var</name></type> <name pos:line="122" pos:column="17">changedFileName</name> <init pos:line="122" pos:column="33">= <expr><call><name><name pos:line="122" pos:column="35">Path</name><op:operator pos:line="122" pos:column="39">.</op:operator><name pos:line="122" pos:column="40">Combine</name></name><argument_list pos:line="122" pos:column="47">(<argument><expr><name pos:line="122" pos:column="48">SourceDirectory</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="122" pos:column="65">"foo.c"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="123" pos:column="13">var</name></type> <name pos:line="123" pos:column="17">changedFileContents</name> <init pos:line="123" pos:column="37">= <expr><call><name><name pos:line="123" pos:column="39">String</name><op:operator pos:line="123" pos:column="45">.</op:operator><name pos:line="123" pos:column="46">Format</name></name><argument_list pos:line="123" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="123" pos:column="53">@"int foo() {{{0}printf(""hello world! changed"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="123" pos:column="111">Environment</name><op:operator pos:line="123" pos:column="122">.</op:operator><name pos:line="123" pos:column="123">NewLine</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name pos:line="125" pos:column="13">expectedEventType</name> <op:operator pos:line="125" pos:column="31">=</op:operator> <name><name pos:line="125" pos:column="33">FileEventType</name><op:operator pos:line="125" pos:column="46">.</op:operator><name pos:line="125" pos:column="47">FileChanged</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="126" pos:column="13">File</name><op:operator pos:line="126" pos:column="17">.</op:operator><name pos:line="126" pos:column="18">WriteAllText</name></name><argument_list pos:line="126" pos:column="30">(<argument><expr><name pos:line="126" pos:column="31">changedFileName</name></expr></argument>, <argument><expr><name pos:line="126" pos:column="48">changedFileContents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="127" pos:column="13">File</name><op:operator pos:line="127" pos:column="17">.</op:operator><name pos:line="127" pos:column="18">SetLastWriteTime</name></name><argument_list pos:line="127" pos:column="34">(<argument><expr><name pos:line="127" pos:column="35">changedFileName</name></expr></argument>, <argument><expr><name><name pos:line="127" pos:column="52">DateTime</name><op:operator pos:line="127" pos:column="60">.</op:operator><name pos:line="127" pos:column="61">Now</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <expr_stmt><expr><call><name><name pos:line="129" pos:column="13">Assert</name><op:operator pos:line="129" pos:column="19">.</op:operator><name pos:line="129" pos:column="20">That</name></name><argument_list pos:line="129" pos:column="24">(<argument><expr><call><name><name pos:line="129" pos:column="25">archive</name><op:operator pos:line="129" pos:column="32">.</op:operator><name pos:line="129" pos:column="33">ContainsFile</name></name><argument_list pos:line="129" pos:column="45">(<argument><expr><name pos:line="129" pos:column="46">changedFileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="130" pos:column="13">Assert</name><op:operator pos:line="130" pos:column="19">.</op:operator><name pos:line="130" pos:column="20">That</name></name><argument_list pos:line="130" pos:column="24">(<argument><expr><call><name><name pos:line="130" pos:column="25">archive</name><op:operator pos:line="130" pos:column="32">.</op:operator><name pos:line="130" pos:column="33">IsOutdated</name></name><argument_list pos:line="130" pos:column="43">(<argument><expr><name pos:line="130" pos:column="44">changedFileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="132" pos:column="13">archive</name><op:operator pos:line="132" pos:column="20">.</op:operator><name pos:line="132" pos:column="21">AddOrUpdateFile</name></name><argument_list pos:line="132" pos:column="36">(<argument><expr><name pos:line="132" pos:column="37">changedFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="133" pos:column="13">Assert</name><op:operator pos:line="133" pos:column="19">.</op:operator><name pos:line="133" pos:column="20">That</name></name><argument_list pos:line="133" pos:column="24">(<argument><expr><call><name><name pos:line="133" pos:column="25">resetEvent</name><op:operator pos:line="133" pos:column="35">.</op:operator><name pos:line="133" pos:column="36">WaitOne</name></name><argument_list pos:line="133" pos:column="43">(<argument><expr><lit:literal type="number" pos:line="133" pos:column="44">300</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="134" pos:column="13">Assert</name><op:operator pos:line="134" pos:column="19">.</op:operator><name pos:line="134" pos:column="20">AreEqual</name></name><argument_list pos:line="134" pos:column="28">(<argument><expr><name pos:line="134" pos:column="29">expectedEventType</name></expr></argument>, <argument><expr><name pos:line="134" pos:column="48">actualEventType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="136" pos:column="13">expectedEventType</name> <op:operator pos:line="136" pos:column="31">=</op:operator> <name><name pos:line="136" pos:column="33">FileEventType</name><op:operator pos:line="136" pos:column="46">.</op:operator><name pos:line="136" pos:column="47">FileDeleted</name></name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="137" pos:column="13">var</name></type> <name pos:line="137" pos:column="17">deletedFileName</name> <init pos:line="137" pos:column="33">= <expr><call><name><name pos:line="137" pos:column="35">Path</name><op:operator pos:line="137" pos:column="39">.</op:operator><name pos:line="137" pos:column="40">Combine</name></name><argument_list pos:line="137" pos:column="47">(<argument><expr><name pos:line="137" pos:column="48">SourceDirectory</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="137" pos:column="65">"subdir1"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="137" pos:column="76">"subdir12"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="137" pos:column="88">"bar12.c"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="138" pos:column="13">File</name><op:operator pos:line="138" pos:column="17">.</op:operator><name pos:line="138" pos:column="18">Delete</name></name><argument_list pos:line="138" pos:column="24">(<argument><expr><name pos:line="138" pos:column="25">deletedFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="139" pos:column="13">Assert</name><op:operator pos:line="139" pos:column="19">.</op:operator><name pos:line="139" pos:column="20">That</name></name><argument_list pos:line="139" pos:column="24">(<argument><expr><call><name><name pos:line="139" pos:column="25">archive</name><op:operator pos:line="139" pos:column="32">.</op:operator><name pos:line="139" pos:column="33">IsOutdated</name></name><argument_list pos:line="139" pos:column="43">(<argument><expr><name pos:line="139" pos:column="44">deletedFileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="140" pos:column="13">archive</name><op:operator pos:line="140" pos:column="20">.</op:operator><name pos:line="140" pos:column="21">DeleteFile</name></name><argument_list pos:line="140" pos:column="31">(<argument><expr><name pos:line="140" pos:column="32">deletedFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="141" pos:column="13">Assert</name><op:operator pos:line="141" pos:column="19">.</op:operator><name pos:line="141" pos:column="20">That</name></name><argument_list pos:line="141" pos:column="24">(<argument><expr><call><name><name pos:line="141" pos:column="25">resetEvent</name><op:operator pos:line="141" pos:column="35">.</op:operator><name pos:line="141" pos:column="36">WaitOne</name></name><argument_list pos:line="141" pos:column="43">(<argument><expr><lit:literal type="number" pos:line="141" pos:column="44">300</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="142" pos:column="13">Assert</name><op:operator pos:line="142" pos:column="19">.</op:operator><name pos:line="142" pos:column="20">AreEqual</name></name><argument_list pos:line="142" pos:column="28">(<argument><expr><name pos:line="142" pos:column="29">expectedEventType</name></expr></argument>, <argument><expr><name pos:line="142" pos:column="48">actualEventType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="144" pos:column="13">expectedEventType</name> <op:operator pos:line="144" pos:column="31">=</op:operator> <name><name pos:line="144" pos:column="33">FileEventType</name><op:operator pos:line="144" pos:column="46">.</op:operator><name pos:line="144" pos:column="47">FileRenamed</name></name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="145" pos:column="13">var</name></type> <name pos:line="145" pos:column="17">movedFileName</name> <init pos:line="145" pos:column="31">= <expr><call><name><name pos:line="145" pos:column="33">Path</name><op:operator pos:line="145" pos:column="37">.</op:operator><name pos:line="145" pos:column="38">Combine</name></name><argument_list pos:line="145" pos:column="45">(<argument><expr><name pos:line="145" pos:column="46">SourceDirectory</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="145" pos:column="63">"subdir1"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="145" pos:column="74">"subdir11"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="145" pos:column="86">"foo11.c"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="146" pos:column="13">var</name></type> <name pos:line="146" pos:column="17">newNameForMoved</name> <init pos:line="146" pos:column="33">= <expr><call><name><name pos:line="146" pos:column="35">Path</name><op:operator pos:line="146" pos:column="39">.</op:operator><name pos:line="146" pos:column="40">Combine</name></name><argument_list pos:line="146" pos:column="47">(<argument><expr><name pos:line="146" pos:column="48">SourceDirectory</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="146" pos:column="65">"subdir1"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="146" pos:column="76">"subdir11"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="146" pos:column="88">"foo1111111.c"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="147" pos:column="13">File</name><op:operator pos:line="147" pos:column="17">.</op:operator><name pos:line="147" pos:column="18">Move</name></name><argument_list pos:line="147" pos:column="22">(<argument><expr><name pos:line="147" pos:column="23">movedFileName</name></expr></argument>, <argument><expr><name pos:line="147" pos:column="38">newNameForMoved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="148" pos:column="13">Assert</name><op:operator pos:line="148" pos:column="19">.</op:operator><name pos:line="148" pos:column="20">That</name></name><argument_list pos:line="148" pos:column="24">(<argument><expr><call><name><name pos:line="148" pos:column="25">archive</name><op:operator pos:line="148" pos:column="32">.</op:operator><name pos:line="148" pos:column="33">IsOutdated</name></name><argument_list pos:line="148" pos:column="43">(<argument><expr><name pos:line="148" pos:column="44">movedFileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="149" pos:column="13">archive</name><op:operator pos:line="149" pos:column="20">.</op:operator><name pos:line="149" pos:column="21">RenameFile</name></name><argument_list pos:line="149" pos:column="31">(<argument><expr><name pos:line="149" pos:column="32">movedFileName</name></expr></argument>, <argument><expr><name pos:line="149" pos:column="47">newNameForMoved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="150" pos:column="13">Assert</name><op:operator pos:line="150" pos:column="19">.</op:operator><name pos:line="150" pos:column="20">That</name></name><argument_list pos:line="150" pos:column="24">(<argument><expr><call><name><name pos:line="150" pos:column="25">resetEvent</name><op:operator pos:line="150" pos:column="35">.</op:operator><name pos:line="150" pos:column="36">WaitOne</name></name><argument_list pos:line="150" pos:column="43">(<argument><expr><lit:literal type="number" pos:line="150" pos:column="44">300</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="151" pos:column="13">Assert</name><op:operator pos:line="151" pos:column="19">.</op:operator><name pos:line="151" pos:column="20">AreEqual</name></name><argument_list pos:line="151" pos:column="28">(<argument><expr><name pos:line="151" pos:column="29">expectedEventType</name></expr></argument>, <argument><expr><name pos:line="151" pos:column="48">actualEventType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="152" pos:column="13">Assert</name><op:operator pos:line="152" pos:column="19">.</op:operator><name pos:line="152" pos:column="20">That</name></name><argument_list pos:line="152" pos:column="24">(<argument><expr><call><name><name pos:line="152" pos:column="25">archive</name><op:operator pos:line="152" pos:column="32">.</op:operator><name pos:line="152" pos:column="33">ContainsFile</name></name><argument_list pos:line="152" pos:column="45">(<argument><expr><name pos:line="152" pos:column="46">newNameForMoved</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="153" pos:column="13">Assert</name><op:operator pos:line="153" pos:column="19">.</op:operator><name pos:line="153" pos:column="20">IsFalse</name></name><argument_list pos:line="153" pos:column="27">(<argument><expr><call><name><name pos:line="153" pos:column="28">archive</name><op:operator pos:line="153" pos:column="35">.</op:operator><name pos:line="153" pos:column="36">ContainsFile</name></name><argument_list pos:line="153" pos:column="48">(<argument><expr><name pos:line="153" pos:column="49">movedFileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="156" pos:column="9">[<expr><name pos:line="156" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="157" pos:column="9">public</specifier> <name pos:line="157" pos:column="16">void</name></type> <name pos:line="157" pos:column="21">TestDontUseExistingSrcML</name><parameter_list pos:line="157" pos:column="45">()</parameter_list> <block pos:line="157" pos:column="48">{
            <comment type="line" pos:line="158" pos:column="13">//convert the test files and place in the xml directory</comment>
            <decl_stmt><decl><type><name pos:line="159" pos:column="13">ManualResetEvent</name></type> <name pos:line="159" pos:column="30">resetEvent</name> <init pos:line="159" pos:column="41">= <expr><op:operator pos:line="159" pos:column="43">new</op:operator> <call><name pos:line="159" pos:column="47">ManualResetEvent</name><argument_list pos:line="159" pos:column="63">(<argument><expr><lit:literal type="boolean" pos:line="159" pos:column="64">false</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="160" pos:column="13">var</name></type> <name pos:line="160" pos:column="17">archive</name> <init pos:line="160" pos:column="25">= <expr><op:operator pos:line="160" pos:column="27">new</op:operator> <call><name pos:line="160" pos:column="31">SrcMLArchive</name><argument_list pos:line="160" pos:column="43">(<argument><expr><name pos:line="160" pos:column="44">ArchiveDirectory</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="160" pos:column="62">false</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="160" pos:column="69">new</op:operator> <call><name pos:line="160" pos:column="73">SrcMLGenerator</name><argument_list pos:line="160" pos:column="87">(<argument><expr><name><name pos:line="160" pos:column="88">TestConstants</name><op:operator pos:line="160" pos:column="101">.</op:operator><name pos:line="160" pos:column="102">SrcmlPath</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="161" pos:column="13">archive</name><op:operator pos:line="161" pos:column="20">.</op:operator><name pos:line="161" pos:column="21">FileChanged</name></name> <op:operator pos:line="161" pos:column="33">+=</op:operator> <lambda><parameter_list pos:line="161" pos:column="36">(<param><decl><name pos:line="161" pos:column="37">o</name></decl></param>, <param><decl><name pos:line="161" pos:column="40">e</name></decl></param>)</parameter_list> <op:operator pos:line="161" pos:column="43">=&gt;</op:operator> <block pos:line="161" pos:column="46">{ <expr_stmt><expr><call><name><name pos:line="161" pos:column="48">resetEvent</name><op:operator pos:line="161" pos:column="58">.</op:operator><name pos:line="161" pos:column="59">Set</name></name><argument_list pos:line="161" pos:column="62">()</argument_list></call></expr>;</expr_stmt> }</block></lambda></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="163" pos:column="13">string</name><index pos:line="163" pos:column="19">[]</index></type> <name pos:line="163" pos:column="22">sourceFiles</name> <init pos:line="163" pos:column="34">= <expr><op:operator pos:line="163" pos:column="36">new</op:operator><index pos:line="163" pos:column="39">[]</index> <block pos:line="163" pos:column="42">{ <expr><lit:literal type="string" pos:line="163" pos:column="44">@"..\..\TestInputs\foo.c"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="163" pos:column="71">@"..\..\TestInputs\baz.cpp"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="163" pos:column="100">@"..\..\TestInputs\function_def.cpp"</lit:literal></expr> }</block></expr></init></decl>;</decl_stmt>

            <foreach pos:line="165" pos:column="13">foreach(<init><decl><type><name pos:line="165" pos:column="21">var</name></type> <name pos:line="165" pos:column="25">sourceFile</name> <range pos:line="165" pos:column="36">in <expr><name pos:line="165" pos:column="39">sourceFiles</name></expr></range></decl></init>) <block pos:line="165" pos:column="52">{
                <expr_stmt><expr><call><name><name pos:line="166" pos:column="17">archive</name><op:operator pos:line="166" pos:column="24">.</op:operator><name pos:line="166" pos:column="25">AddOrUpdateFile</name></name><argument_list pos:line="166" pos:column="40">(<argument><expr><name pos:line="166" pos:column="41">sourceFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="167" pos:column="17">Assert</name><op:operator pos:line="167" pos:column="23">.</op:operator><name pos:line="167" pos:column="24">That</name></name><argument_list pos:line="167" pos:column="28">(<argument><expr><call><name><name pos:line="167" pos:column="29">resetEvent</name><op:operator pos:line="167" pos:column="39">.</op:operator><name pos:line="167" pos:column="40">WaitOne</name></name><argument_list pos:line="167" pos:column="47">(<argument><expr><lit:literal type="number" pos:line="167" pos:column="48">300</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="167" pos:column="54">"Timed out waiting for "</lit:literal> <op:operator pos:line="167" pos:column="79">+</op:operator> <name pos:line="167" pos:column="81">sourceFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
            <foreach pos:line="169" pos:column="13">foreach(<init><decl><type><name pos:line="169" pos:column="21">var</name></type> <name pos:line="169" pos:column="25">sourceFile</name> <range pos:line="169" pos:column="36">in <expr><name pos:line="169" pos:column="39">sourceFiles</name></expr></range></decl></init>) <block pos:line="169" pos:column="52">{
                <expr_stmt><expr><call><name><name pos:line="170" pos:column="17">Assert</name><op:operator pos:line="170" pos:column="23">.</op:operator><name pos:line="170" pos:column="24">That</name></name><argument_list pos:line="170" pos:column="28">(<argument><expr><call><name><name pos:line="170" pos:column="29">archive</name><op:operator pos:line="170" pos:column="36">.</op:operator><name pos:line="170" pos:column="37">ContainsFile</name></name><argument_list pos:line="170" pos:column="49">(<argument><expr><name pos:line="170" pos:column="50">sourceFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="170" pos:column="63">sourceFile</name> <op:operator pos:line="170" pos:column="74">+</op:operator> <lit:literal type="string" pos:line="170" pos:column="76">" should be in the archive!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
            <expr_stmt><expr><call><name><name pos:line="172" pos:column="13">archive</name><op:operator pos:line="172" pos:column="20">.</op:operator><name pos:line="172" pos:column="21">Dispose</name></name><argument_list pos:line="172" pos:column="28">()</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="174" pos:column="13">//make new archive, and ignore existing srcml files in xml directory</comment>
            <expr_stmt><expr><name pos:line="175" pos:column="13">archive</name> <op:operator pos:line="175" pos:column="21">=</op:operator> <op:operator pos:line="175" pos:column="23">new</op:operator> <call><name pos:line="175" pos:column="27">SrcMLArchive</name><argument_list pos:line="175" pos:column="39">(<argument><expr><name pos:line="175" pos:column="40">ArchiveDirectory</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="175" pos:column="58">false</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="175" pos:column="65">new</op:operator> <call><name pos:line="175" pos:column="69">SrcMLGenerator</name><argument_list pos:line="175" pos:column="83">(<argument><expr><name><name pos:line="175" pos:column="84">TestConstants</name><op:operator pos:line="175" pos:column="97">.</op:operator><name pos:line="175" pos:column="98">SrcmlPath</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <foreach pos:line="176" pos:column="13">foreach(<init><decl><type><name pos:line="176" pos:column="21">var</name></type> <name pos:line="176" pos:column="25">sourceFile</name> <range pos:line="176" pos:column="36">in <expr><name pos:line="176" pos:column="39">sourceFiles</name></expr></range></decl></init>) <block pos:line="176" pos:column="52">{
                <expr_stmt><expr><call><name><name pos:line="177" pos:column="17">Assert</name><op:operator pos:line="177" pos:column="23">.</op:operator><name pos:line="177" pos:column="24">IsFalse</name></name><argument_list pos:line="177" pos:column="31">(<argument><expr><call><name><name pos:line="177" pos:column="32">archive</name><op:operator pos:line="177" pos:column="39">.</op:operator><name pos:line="177" pos:column="40">ContainsFile</name></name><argument_list pos:line="177" pos:column="52">(<argument><expr><name pos:line="177" pos:column="53">sourceFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
            <expr_stmt><expr><call><name><name pos:line="179" pos:column="13">archive</name><op:operator pos:line="179" pos:column="20">.</op:operator><name pos:line="179" pos:column="21">Dispose</name></name><argument_list pos:line="179" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="182" pos:column="9">[<expr><name pos:line="182" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="183" pos:column="9">public</specifier> <name pos:line="183" pos:column="16">void</name></type> <name pos:line="183" pos:column="21">TestEmptyArchive</name><parameter_list pos:line="183" pos:column="37">()</parameter_list> <block pos:line="183" pos:column="40">{
            <decl_stmt><decl><type><name pos:line="184" pos:column="13">var</name></type> <name pos:line="184" pos:column="17">archive</name> <init pos:line="184" pos:column="25">= <expr><op:operator pos:line="184" pos:column="27">new</op:operator> <call><name pos:line="184" pos:column="31">SrcMLArchive</name><argument_list pos:line="184" pos:column="43">(<argument><expr><name pos:line="184" pos:column="44">ArchiveDirectory</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="184" pos:column="62">false</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="184" pos:column="69">new</op:operator> <call><name pos:line="184" pos:column="73">SrcMLGenerator</name><argument_list pos:line="184" pos:column="87">(<argument><expr><call><name><name pos:line="184" pos:column="88">Path</name><op:operator pos:line="184" pos:column="92">.</op:operator><name pos:line="184" pos:column="93">Combine</name></name><argument_list pos:line="184" pos:column="100">(<argument><expr><lit:literal type="string" pos:line="184" pos:column="101">"."</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="184" pos:column="106">"SrcML"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="185" pos:column="13">Assert</name><op:operator pos:line="185" pos:column="19">.</op:operator><name pos:line="185" pos:column="20">That</name></name><argument_list pos:line="185" pos:column="24">(<argument><expr><name><name pos:line="185" pos:column="25">archive</name><op:operator pos:line="185" pos:column="32">.</op:operator><name pos:line="185" pos:column="33">IsEmpty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="186" pos:column="13">var</name></type> <name pos:line="186" pos:column="17">foo_c</name> <init pos:line="186" pos:column="23">= <expr><call><name><name pos:line="186" pos:column="25">Path</name><op:operator pos:line="186" pos:column="29">.</op:operator><name pos:line="186" pos:column="30">Combine</name></name><argument_list pos:line="186" pos:column="37">(<argument><expr><name pos:line="186" pos:column="38">SourceDirectory</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="186" pos:column="55">"foo.c"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="187" pos:column="13">File</name><op:operator pos:line="187" pos:column="17">.</op:operator><name pos:line="187" pos:column="18">WriteAllText</name></name><argument_list pos:line="187" pos:column="30">(<argument><expr><name pos:line="187" pos:column="31">foo_c</name></expr></argument>, <argument><expr><call><name><name pos:line="187" pos:column="38">String</name><op:operator pos:line="187" pos:column="44">.</op:operator><name pos:line="187" pos:column="45">Format</name></name><argument_list pos:line="187" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="187" pos:column="52">@"int foo() {{{0}printf(""hello world!"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="187" pos:column="102">Environment</name><op:operator pos:line="187" pos:column="113">.</op:operator><name pos:line="187" pos:column="114">NewLine</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="188" pos:column="13">archive</name><op:operator pos:line="188" pos:column="20">.</op:operator><name pos:line="188" pos:column="21">AddOrUpdateFile</name></name><argument_list pos:line="188" pos:column="36">(<argument><expr><name pos:line="188" pos:column="37">foo_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="189" pos:column="13">Assert</name><op:operator pos:line="189" pos:column="19">.</op:operator><name pos:line="189" pos:column="20">That</name></name><argument_list pos:line="189" pos:column="24">(<argument><expr><name><name pos:line="189" pos:column="25">archive</name><op:operator pos:line="189" pos:column="32">.</op:operator><name pos:line="189" pos:column="33">IsEmpty</name></name></expr></argument>, <argument><expr><name><name pos:line="189" pos:column="42">Is</name><op:operator pos:line="189" pos:column="44">.</op:operator><name pos:line="189" pos:column="45">False</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="192" pos:column="9">//[Test]</comment>
        <comment type="line" pos:line="193" pos:column="9">//public void GenerateXmlForDirectoryStressTest()</comment>
        <comment type="line" pos:line="194" pos:column="9">//{</comment>
        <comment type="line" pos:line="195" pos:column="9">//    Console.WriteLine("------- Start -------\n");</comment>

        <comment type="line" pos:line="197" pos:column="9">//    Process thisProcess = null;</comment>

        <comment type="line" pos:line="199" pos:column="9">//    thisProcess = Process.GetCurrentProcess();</comment>
        <comment type="line" pos:line="200" pos:column="9">//    Console.WriteLine("ID: [" + thisProcess.Id + "\n");</comment>
        <comment type="line" pos:line="201" pos:column="9">//    Console.WriteLine("NonpagedSystemMemorySize64: [" + thisProcess.NonpagedSystemMemorySize64 + "\n");</comment>
        <comment type="line" pos:line="202" pos:column="9">//    Console.WriteLine("PagedMemorySize64: [" + thisProcess.PagedMemorySize64 + "\n");</comment>
        <comment type="line" pos:line="203" pos:column="9">//    Console.WriteLine("PagedSystemMemorySize64: [" + thisProcess.PagedSystemMemorySize64 + "\n");</comment>
        <comment type="line" pos:line="204" pos:column="9">//    Console.WriteLine("PeakPagedMemorySize64: [" + thisProcess.PeakPagedMemorySize64 + "\n");</comment>
        <comment type="line" pos:line="205" pos:column="9">//    Console.WriteLine("PeakVirtualMemorySize64: [" + thisProcess.PeakVirtualMemorySize64 + "\n");</comment>
        <comment type="line" pos:line="206" pos:column="9">//    Console.WriteLine("PeakWorkingSet64: [" + thisProcess.PeakWorkingSet64 + "\n");</comment>
        <comment type="line" pos:line="207" pos:column="9">//    Console.WriteLine("PrivateMemorySize64: [" + thisProcess.PrivateMemorySize64 + "\n");</comment>
        <comment type="line" pos:line="208" pos:column="9">//    Console.WriteLine("VirtualMemorySize64: [" + thisProcess.VirtualMemorySize64 + "\n");</comment>

        <comment type="line" pos:line="210" pos:column="9">//    Stopwatch swInit = new Stopwatch();</comment>
        <comment type="line" pos:line="211" pos:column="9">//    swInit.Start();</comment>

        <comment type="line" pos:line="213" pos:column="9">//    IFileMonitor watchedFolder = Substitute.For&lt;IFileMonitor&gt;();</comment>

        <comment type="line" pos:line="215" pos:column="9">//    var archive = new SrcMLArchive(watchedFolder, Path.Combine(srcDirectoryInfo.FullName, ".srcml"), new SrcMLGenerator(TestConstants.SrcmlPath));</comment>
        <comment type="line" pos:line="216" pos:column="9">//    var xmlDirectory = new DirectoryInfo(archive.ArchivePath);</comment>

        <comment type="line" pos:line="218" pos:column="9">//    for (int i = 0; i &lt; 10; i++)</comment>
        <comment type="line" pos:line="219" pos:column="9">//    {</comment>
        <comment type="line" pos:line="220" pos:column="9">//        File.WriteAllText(SourceDirectory + "\\foo(" + i + ").c", String.Format(@"int foo() {{{0}printf(""hello world!"");{0}}}", Environment.NewLine));</comment>
        <comment type="line" pos:line="221" pos:column="9">//        File.WriteAllText(SourceDirectory + "\\bar(" + i + ").c", String.Format(@"int bar() {{{0}    printf(""goodbye, world!"");{0}}}", Environment.NewLine));</comment>
        <comment type="line" pos:line="222" pos:column="9">//        Directory.CreateDirectory(Path.Combine(SourceDirectory, "subdir_" + i));</comment>
        <comment type="line" pos:line="223" pos:column="9">//        for (int j = 0; j &lt; 10; j++)</comment>
        <comment type="line" pos:line="224" pos:column="9">//        {</comment>
        <comment type="line" pos:line="225" pos:column="9">//            File.WriteAllText(SourceDirectory + "\\subdir_" + i + "\\foo(" + i + "_" + j + ").c", String.Format(@"int foo1() {{{0}printf(""hello world 1!"");{0}}}", Environment.NewLine));</comment>
        <comment type="line" pos:line="226" pos:column="9">//            File.WriteAllText(SourceDirectory + "\\subdir_" + i + "\\bar(" + i + "_" + j + ").c", String.Format(@"int bar1() {{{0}    printf(""goodbye, world 1!"");{0}}}", Environment.NewLine));</comment>
        <comment type="line" pos:line="227" pos:column="9">//            Directory.CreateDirectory(Path.Combine(SourceDirectory, "subdir_" + i + "\\subdir_" + i + "_" + j));</comment>
        <comment type="line" pos:line="228" pos:column="9">//            for (int k = 0; k &lt; 10; k++)</comment>
        <comment type="line" pos:line="229" pos:column="9">//            {</comment>
        <comment type="line" pos:line="230" pos:column="9">//                File.WriteAllText(SourceDirectory + "\\subdir_" + i + "\\subdir_" + i + "_" + j + "\\foo(" + i + "_" + j + "_" + k + ").c", String.Format(@"int foo1() {{{0}printf(""hello world 1!"");{0}}}", Environment.NewLine));</comment>
        <comment type="line" pos:line="231" pos:column="9">//                File.WriteAllText(SourceDirectory + "\\subdir_" + i + "\\subdir_" + i + "_" + j + "\\bar(" + i + "_" + j + "_" + k + ").c", String.Format(@"int bar1() {{{0}    printf(""goodbye, world 1!"");{0}}}", Environment.NewLine));</comment>
        <comment type="line" pos:line="232" pos:column="9">//            }</comment>
        <comment type="line" pos:line="233" pos:column="9">//        }</comment>
        <comment type="line" pos:line="234" pos:column="9">//    }</comment>

        <comment type="line" pos:line="236" pos:column="9">//    swInit.Stop();</comment>
        <comment type="line" pos:line="237" pos:column="9">//    Console.WriteLine("\nTotal time elapsed for initialization: {0}", swInit.Elapsed.ToString());</comment>
        <comment type="line" pos:line="238" pos:column="9">//    Console.WriteLine("ID: [" + thisProcess.Id + "\n");</comment>
        <comment type="line" pos:line="239" pos:column="9">//    Console.WriteLine("NonpagedSystemMemorySize64: [" + thisProcess.NonpagedSystemMemorySize64 + "\n");</comment>
        <comment type="line" pos:line="240" pos:column="9">//    Console.WriteLine("PagedMemorySize64: [" + thisProcess.PagedMemorySize64 + "\n");</comment>
        <comment type="line" pos:line="241" pos:column="9">//    Console.WriteLine("PagedSystemMemorySize64: [" + thisProcess.PagedSystemMemorySize64 + "\n");</comment>
        <comment type="line" pos:line="242" pos:column="9">//    Console.WriteLine("PeakPagedMemorySize64: [" + thisProcess.PeakPagedMemorySize64 + "\n");</comment>
        <comment type="line" pos:line="243" pos:column="9">//    Console.WriteLine("PeakVirtualMemorySize64: [" + thisProcess.PeakVirtualMemorySize64 + "\n");</comment>
        <comment type="line" pos:line="244" pos:column="9">//    Console.WriteLine("PeakWorkingSet64: [" + thisProcess.PeakWorkingSet64 + "\n");</comment>
        <comment type="line" pos:line="245" pos:column="9">//    Console.WriteLine("PrivateMemorySize64: [" + thisProcess.PrivateMemorySize64 + "\n");</comment>
        <comment type="line" pos:line="246" pos:column="9">//    Console.WriteLine("VirtualMemorySize64: [" + thisProcess.VirtualMemorySize64 + "\n");</comment>

        <comment type="line" pos:line="248" pos:column="9">//    //System.Threading.Thread.Sleep(1000);</comment>
        <comment type="line" pos:line="249" pos:column="9">//    Stopwatch sw = new Stopwatch();</comment>
        <comment type="line" pos:line="250" pos:column="9">//    sw.Start();</comment>
            
        <comment type="line" pos:line="252" pos:column="9">//    ////archive.GenerateXmlForDirectory(SourceDirectory);</comment>
            
        <comment type="line" pos:line="254" pos:column="9">//    sw.Stop();</comment>
        <comment type="line" pos:line="255" pos:column="9">//    Console.WriteLine("\nTotal time elapsed for srcML files generation: {0}", sw.Elapsed.ToString());</comment>
        <comment type="line" pos:line="256" pos:column="9">//    Console.WriteLine("ID: [" + thisProcess.Id + "\n");</comment>
        <comment type="line" pos:line="257" pos:column="9">//    Console.WriteLine("NonpagedSystemMemorySize64: [" + thisProcess.NonpagedSystemMemorySize64 + "\n");</comment>
        <comment type="line" pos:line="258" pos:column="9">//    Console.WriteLine("PagedMemorySize64: [" + thisProcess.PagedMemorySize64 + "\n");</comment>
        <comment type="line" pos:line="259" pos:column="9">//    Console.WriteLine("PagedSystemMemorySize64: [" + thisProcess.PagedSystemMemorySize64 + "\n");</comment>
        <comment type="line" pos:line="260" pos:column="9">//    Console.WriteLine("PeakPagedMemorySize64: [" + thisProcess.PeakPagedMemorySize64 + "\n");</comment>
        <comment type="line" pos:line="261" pos:column="9">//    Console.WriteLine("PeakVirtualMemorySize64: [" + thisProcess.PeakVirtualMemorySize64 + "\n");</comment>
        <comment type="line" pos:line="262" pos:column="9">//    Console.WriteLine("PeakWorkingSet64: [" + thisProcess.PeakWorkingSet64 + "\n");</comment>
        <comment type="line" pos:line="263" pos:column="9">//    Console.WriteLine("PrivateMemorySize64: [" + thisProcess.PrivateMemorySize64 + "\n");</comment>
        <comment type="line" pos:line="264" pos:column="9">//    Console.WriteLine("VirtualMemorySize64: [" + thisProcess.VirtualMemorySize64 + "\n");</comment>
        <comment type="line" pos:line="265" pos:column="9">//    Console.WriteLine("\n------- End -------\n");</comment>

        <comment type="line" pos:line="267" pos:column="9">//    /*</comment>
        <comment type="line" pos:line="268" pos:column="9">//    Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "foo.c.xml")));</comment>
        <comment type="line" pos:line="269" pos:column="9">//    Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "bar.c.xml")));</comment>
        <comment type="line" pos:line="270" pos:column="9">//    Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir1\\foo1.c.xml")));</comment>
        <comment type="line" pos:line="271" pos:column="9">//    Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir1\\bar1.c.xml")));</comment>
        <comment type="line" pos:line="272" pos:column="9">//    Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir2\\foo2.c.xml")));</comment>
        <comment type="line" pos:line="273" pos:column="9">//    Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir2\\bar2.c.xml")));</comment>
        <comment type="line" pos:line="274" pos:column="9">//    Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir1\\subdir11\\foo11.c.xml")));</comment>
        <comment type="line" pos:line="275" pos:column="9">//    Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir1\\subdir11\\bar11.c.xml")));</comment>
        <comment type="line" pos:line="276" pos:column="9">//    Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir1\\subdir12\\foo12.c.xml")));</comment>
        <comment type="line" pos:line="277" pos:column="9">//    Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir1\\subdir12\\bar12.c.xml")));</comment>
        <comment type="line" pos:line="278" pos:column="9">//    Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir2\\subdir21\\foo21.c.xml")));</comment>
        <comment type="line" pos:line="279" pos:column="9">//    Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir2\\subdir21\\bar21.c.xml")));</comment>
        <comment type="line" pos:line="280" pos:column="9">//    Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir2\\subdir22\\foo22.c.xml")));</comment>
        <comment type="line" pos:line="281" pos:column="9">//    Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir2\\subdir22\\bar22.c.xml")));</comment>
        <comment type="line" pos:line="282" pos:column="9">//    Assert.That(archive.FileUnits.Count(), Is.EqualTo(14));</comment>
        <comment type="line" pos:line="283" pos:column="9">//    */</comment>

        <comment type="line" pos:line="285" pos:column="9">//    /*</comment>
        <comment type="line" pos:line="286" pos:column="9">//    File.WriteAllText(SourceDirectory + "\\foo.c", String.Format(@"int foo() {{{0}printf(""hello world! changed"");{0}}}", Environment.NewLine));</comment>
        <comment type="line" pos:line="287" pos:column="9">//    File.WriteAllText(SourceDirectory + "\\subdir2\\subdir21\\bar21.c", String.Format(@"int bar21() {{{0}    printf(""goodbye, world 21! changed"");{0}}}", Environment.NewLine));</comment>
        <comment type="line" pos:line="288" pos:column="9">//    File.Delete("C:\\Users\\USJIZHE\\Documents\\GitHub\\SrcML.NET\\Build\\Debug\\testSourceDir\\subdir1\\subdir12\\bar12.c");</comment>
        <comment type="line" pos:line="289" pos:column="9">//    File.Move("C:\\Users\\USJIZHE\\Documents\\GitHub\\SrcML.NET\\Build\\Debug\\testSourceDir\\subdir1\\subdir11\\foo11.c",</comment>
        <comment type="line" pos:line="290" pos:column="9">//        "C:\\Users\\USJIZHE\\Documents\\GitHub\\SrcML.NET\\Build\\Debug\\testSourceDir\\subdir1\\subdir11\\foo1111111.c");</comment>

        <comment type="line" pos:line="292" pos:column="9">//    System.Threading.Thread.Sleep(5000);</comment>
        <comment type="line" pos:line="293" pos:column="9">//    archive.GenerateXmlForDirectory(SourceDirectory);</comment>
        <comment type="line" pos:line="294" pos:column="9">//    */</comment>

        <comment type="line" pos:line="296" pos:column="9">//    /*</comment>
        <comment type="line" pos:line="297" pos:column="9">//    Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "foo.c.xml")));</comment>
        <comment type="line" pos:line="298" pos:column="9">//    Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "bar.c.xml")));</comment>
        <comment type="line" pos:line="299" pos:column="9">//    Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir1\\foo1.c.xml")));</comment>
        <comment type="line" pos:line="300" pos:column="9">//    Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir1\\bar1.c.xml")));</comment>
        <comment type="line" pos:line="301" pos:column="9">//    Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir2\\foo2.c.xml")));</comment>
        <comment type="line" pos:line="302" pos:column="9">//    Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir2\\bar2.c.xml")));</comment>
        <comment type="line" pos:line="303" pos:column="9">//    Assert.That(!File.Exists(Path.Combine(xmlDirectory.FullName, "subdir1\\subdir11\\foo11.c.xml")));</comment>
        <comment type="line" pos:line="304" pos:column="9">//    Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir1\\subdir11\\foo1111111.c.xml")));</comment>
        <comment type="line" pos:line="305" pos:column="9">//    Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir1\\subdir11\\bar11.c.xml")));</comment>
        <comment type="line" pos:line="306" pos:column="9">//    Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir1\\subdir12\\foo12.c.xml")));</comment>
        <comment type="line" pos:line="307" pos:column="9">//    Assert.That(!File.Exists(Path.Combine(xmlDirectory.FullName, "subdir1\\subdir12\\bar12.c.xml")));</comment>
        <comment type="line" pos:line="308" pos:column="9">//    Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir2\\subdir21\\foo21.c.xml")));</comment>
        <comment type="line" pos:line="309" pos:column="9">//    Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir2\\subdir21\\bar21.c.xml")));</comment>
        <comment type="line" pos:line="310" pos:column="9">//    Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir2\\subdir22\\foo22.c.xml")));</comment>
        <comment type="line" pos:line="311" pos:column="9">//    Assert.That(File.Exists(Path.Combine(xmlDirectory.FullName, "subdir2\\subdir22\\bar22.c.xml")));</comment>
        <comment type="line" pos:line="312" pos:column="9">//    Assert.That(archive.FileUnits.Count(), Is.EqualTo(13));</comment>
        <comment type="line" pos:line="313" pos:column="9">//    */</comment>

        <comment type="line" pos:line="315" pos:column="9">//}</comment>
    }</block></class>
}</block></namespace>
</unit>
