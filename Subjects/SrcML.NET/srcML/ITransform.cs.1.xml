<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML\ITransform.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2010 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">System</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Collections</name><op:operator pos:line="13" pos:column="25">.</op:operator><name pos:line="13" pos:column="26">Generic</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Linq</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Text</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Xml</name><op:operator pos:line="16" pos:column="17">.</op:operator><name pos:line="16" pos:column="18">Linq</name></name>;</using>

<namespace pos:line="18" pos:column="1">namespace <name><name pos:line="18" pos:column="11">ABB</name><op:operator pos:line="18" pos:column="14">.</op:operator><name pos:line="18" pos:column="15">SrcML</name></name>
<block pos:line="19" pos:column="1">{
    <comment type="line" pos:line="20" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="21" pos:column="5">/// Interface for SrcML transformations.</comment>
    <comment type="line" pos:line="22" pos:column="5">/// &lt;/summary&gt;</comment>
    <class type="interface"><specifier pos:line="23" pos:column="5">public</specifier> interface <name pos:line="23" pos:column="22">ITransform</name>
    <block pos:line="24" pos:column="5">{
        <comment type="line" pos:line="25" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="26" pos:column="9">/// Find each matching element rooted at the given element.</comment>
        <comment type="line" pos:line="27" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="28" pos:column="9">/// &lt;param name="element"&gt;the rootUnit element&lt;/param&gt;</comment>
        <comment type="line" pos:line="29" pos:column="9">/// &lt;returns&gt;the matching elements&lt;/returns&gt;</comment>
        <function_decl><type><name><name pos:line="30" pos:column="9">IEnumerable</name><argument_list pos:line="30" pos:column="20">&lt;<argument><name pos:line="30" pos:column="21">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="30" pos:column="31">Query</name><parameter_list pos:line="30" pos:column="36">(<param><decl><type><name pos:line="30" pos:column="37">XElement</name></type> <name pos:line="30" pos:column="46">element</name></decl></param>)</parameter_list>;</function_decl>

        <comment type="line" pos:line="32" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="33" pos:column="9">/// Transform the given element. Typically, the input for this function should come from &lt;see cref="QueryAttribute"/&gt;.</comment>
        <comment type="line" pos:line="34" pos:column="9">/// &lt;code lang="C#"&gt;</comment>
        <comment type="line" pos:line="35" pos:column="9">/// foreach(var e in transform.QueryAttribute(element))</comment>
        <comment type="line" pos:line="36" pos:column="9">///     e.ReplaceWith(transform.Transform(e);</comment>
        <comment type="line" pos:line="37" pos:column="9">/// &lt;/code&gt;</comment>
        <comment type="line" pos:line="38" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="39" pos:column="9">/// &lt;param name="element"&gt;the element to transform. Typically comes from &lt;see cref="QueryAttribute"/&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="40" pos:column="9">/// &lt;returns&gt;a transformed version of the &lt;/returns&gt;</comment>
        <function_decl><type><name pos:line="41" pos:column="9">XElement</name></type> <name pos:line="41" pos:column="18">Transform</name><parameter_list pos:line="41" pos:column="27">(<param><decl><type><name pos:line="41" pos:column="28">XElement</name></type> <name pos:line="41" pos:column="37">element</name></decl></param>)</parameter_list>;</function_decl>
    }</block></class>
}</block></namespace>
</unit>
