<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data\TypeContainerUse.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2014 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Patrick Francis (ABB Group) - initial API, implementation, &amp; documentation
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="13" pos:column="1">using <name pos:line="13" pos:column="7">System</name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Collections</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">Generic</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Linq</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Text</name></name>;</using>

<namespace pos:line="18" pos:column="1">namespace <name><name pos:line="18" pos:column="11">ABB</name><op:operator pos:line="18" pos:column="14">.</op:operator><name pos:line="18" pos:column="15">SrcML</name><op:operator pos:line="18" pos:column="20">.</op:operator><name pos:line="18" pos:column="21">Data</name></name> <block pos:line="18" pos:column="26">{
    <comment type="line" pos:line="19" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="20" pos:column="5">/// Represents a use of a program element that may contain types, e.g. namespaces or type definitions.</comment>
    <comment type="line" pos:line="21" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="22" pos:column="5">public</specifier> class <name pos:line="22" pos:column="18">TypeContainerUse</name> <super pos:line="22" pos:column="35">: <name pos:line="22" pos:column="37">NameUse</name></super> <block pos:line="22" pos:column="45">{
        <comment type="line" pos:line="23" pos:column="9">/// &lt;summary&gt; The XML name for TypeContainerUse &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="24" pos:column="9">public</specifier> <specifier pos:line="24" pos:column="16">new</specifier> <specifier pos:line="24" pos:column="20">const</specifier> <name pos:line="24" pos:column="26">string</name></type> <name pos:line="24" pos:column="33">XmlName</name> <init pos:line="24" pos:column="41">= <expr><lit:literal type="string" pos:line="24" pos:column="43">"TypeContainerUse"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="26" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="27" pos:column="9">/// Instance method for getting &lt;see cref="TypeContainerUse.XmlName"/&gt;</comment>
        <comment type="line" pos:line="28" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="29" pos:column="9">/// &lt;returns&gt;Returns the XML name for TypeContainerUse&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="30" pos:column="9">public</specifier> <specifier pos:line="30" pos:column="16">override</specifier> <name pos:line="30" pos:column="25">string</name></type> <name pos:line="30" pos:column="32">GetXmlName</name><parameter_list pos:line="30" pos:column="42">()</parameter_list> <block pos:line="30" pos:column="45">{
            <return pos:line="31" pos:column="13">return <expr><name><name pos:line="31" pos:column="20">TypeContainerUse</name><op:operator pos:line="31" pos:column="36">.</op:operator><name pos:line="31" pos:column="37">XmlName</name></name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="34" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="35" pos:column="9">/// Finds TypeDefinitions or NamespaceDefinitions that match this name.</comment>
        <comment type="line" pos:line="36" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="37" pos:column="9">public</specifier> <specifier pos:line="37" pos:column="16">override</specifier> <name><name pos:line="37" pos:column="25">IEnumerable</name><argument_list pos:line="37" pos:column="36">&lt;<argument><name pos:line="37" pos:column="37">INamedEntity</name></argument>&gt;</argument_list></name></type> <name pos:line="37" pos:column="51">FindMatches</name><parameter_list pos:line="37" pos:column="62">()</parameter_list> <block pos:line="37" pos:column="65">{
            <if pos:line="38" pos:column="13">if<condition pos:line="38" pos:column="15">(<expr><name pos:line="38" pos:column="16">ParentStatement</name> <op:operator pos:line="38" pos:column="32">==</op:operator> <name pos:line="38" pos:column="35">null</name></expr>)</condition><then pos:line="38" pos:column="40"> <block pos:line="38" pos:column="41">{
                <throw pos:line="39" pos:column="17">throw <expr><op:operator pos:line="39" pos:column="23">new</op:operator> <call><name pos:line="39" pos:column="27">InvalidOperationException</name><argument_list pos:line="39" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="39" pos:column="53">"ParentStatement is null"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <comment type="line" pos:line="42" pos:column="13">//handle keywords</comment>
            <if pos:line="43" pos:column="13">if<condition pos:line="43" pos:column="15">(<expr><name pos:line="43" pos:column="16">Name</name> <op:operator pos:line="43" pos:column="21">==</op:operator> <lit:literal type="string" pos:line="43" pos:column="24">"this"</lit:literal> <op:operator pos:line="43" pos:column="31">||</op:operator>
               <op:operator pos:line="44" pos:column="16">(</op:operator><name pos:line="44" pos:column="17">Name</name> <op:operator pos:line="44" pos:column="22">==</op:operator> <lit:literal type="string" pos:line="44" pos:column="25">"base"</lit:literal> <op:operator pos:line="44" pos:column="32">&amp;&amp;</op:operator> <name pos:line="44" pos:column="35">ProgrammingLanguage</name> <op:operator pos:line="44" pos:column="55">==</op:operator> <name><name pos:line="44" pos:column="58">Language</name><op:operator pos:line="44" pos:column="66">.</op:operator><name pos:line="44" pos:column="67">CSharp</name></name><op:operator pos:line="44" pos:column="73">)</op:operator> <op:operator pos:line="44" pos:column="75">||</op:operator>
               <op:operator pos:line="45" pos:column="16">(</op:operator><name pos:line="45" pos:column="17">Name</name> <op:operator pos:line="45" pos:column="22">==</op:operator> <lit:literal type="string" pos:line="45" pos:column="25">"super"</lit:literal> <op:operator pos:line="45" pos:column="33">&amp;&amp;</op:operator> <name pos:line="45" pos:column="36">ProgrammingLanguage</name> <op:operator pos:line="45" pos:column="56">==</op:operator> <name><name pos:line="45" pos:column="59">Language</name><op:operator pos:line="45" pos:column="67">.</op:operator><name pos:line="45" pos:column="68">Java</name></name><op:operator pos:line="45" pos:column="72">)</op:operator></expr>)</condition><then pos:line="45" pos:column="74"> <block pos:line="45" pos:column="75">{
                <return pos:line="46" pos:column="17">return <expr><call><name><name pos:line="46" pos:column="24">TypeDefinition</name><op:operator pos:line="46" pos:column="38">.</op:operator><name pos:line="46" pos:column="39">GetTypeForKeyword</name></name><argument_list pos:line="46" pos:column="56">(<argument><expr><name pos:line="46" pos:column="57">this</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>

            <comment type="line" pos:line="49" pos:column="13">//If there's a prefix, resolve that and search under results</comment>
            <if pos:line="50" pos:column="13">if<condition pos:line="50" pos:column="15">(<expr><name pos:line="50" pos:column="16">Prefix</name> <op:operator pos:line="50" pos:column="23">!=</op:operator> <name pos:line="50" pos:column="26">null</name></expr>)</condition><then pos:line="50" pos:column="31"> <block pos:line="50" pos:column="32">{
                <return pos:line="51" pos:column="17">return <expr><call><name><name pos:line="51" pos:column="24">Prefix</name><op:operator pos:line="51" pos:column="30">.</op:operator><name pos:line="51" pos:column="31">FindMatches</name></name><argument_list pos:line="51" pos:column="42">()</argument_list></call><op:operator pos:line="51" pos:column="44">.</op:operator><call><name pos:line="51" pos:column="45">SelectMany</name><argument_list pos:line="51" pos:column="55">(<argument><expr><lambda><name pos:line="51" pos:column="56">ns</name> <op:operator pos:line="51" pos:column="59">=&gt;</op:operator> <call><name><name pos:line="51" pos:column="62">ns</name><op:operator pos:line="51" pos:column="64">.</op:operator><name><name pos:line="51" pos:column="65">GetNamedChildren</name><argument_list pos:line="51" pos:column="81">&lt;<argument><name pos:line="51" pos:column="82">NamedScope</name></argument>&gt;</argument_list></name></name><argument_list pos:line="51" pos:column="93">(<argument><expr><name><name pos:line="51" pos:column="94">this</name><op:operator pos:line="51" pos:column="98">.</op:operator><name pos:line="51" pos:column="99">Name</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="51" pos:column="105">.</op:operator><call><name pos:line="51" pos:column="106">Where</name><argument_list pos:line="51" pos:column="111">(<argument><expr><lambda><name pos:line="51" pos:column="112">e</name> <op:operator pos:line="51" pos:column="114">=&gt;</op:operator> <name pos:line="51" pos:column="117">e</name> <op:operator pos:line="51" pos:column="119">is</op:operator> <name pos:line="51" pos:column="122">TypeDefinition</name> <op:operator pos:line="51" pos:column="137">||</op:operator> <name pos:line="51" pos:column="140">e</name> <op:operator pos:line="51" pos:column="142">is</op:operator> <name pos:line="51" pos:column="145">NamespaceDefinition</name></lambda></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>

            <comment type="line" pos:line="54" pos:column="13">//If there's a calling expression, match and search under results</comment>
            <decl_stmt><decl><type><name pos:line="55" pos:column="13">var</name></type> <name pos:line="55" pos:column="17">callingScopes</name> <init pos:line="55" pos:column="31">= <expr><call><name pos:line="55" pos:column="33">GetCallingScope</name><argument_list pos:line="55" pos:column="48">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="56" pos:column="13">if<condition pos:line="56" pos:column="15">(<expr><name pos:line="56" pos:column="16">callingScopes</name> <op:operator pos:line="56" pos:column="30">!=</op:operator> <name pos:line="56" pos:column="33">null</name></expr>)</condition><then pos:line="56" pos:column="38"> <block pos:line="56" pos:column="39">{
                <decl_stmt><decl><type><name><name pos:line="57" pos:column="17">IEnumerable</name><argument_list pos:line="57" pos:column="28">&lt;<argument><name pos:line="57" pos:column="29">INamedEntity</name></argument>&gt;</argument_list></name></type> <name pos:line="57" pos:column="43">matches</name> <init pos:line="57" pos:column="51">= <expr><call><name><name pos:line="57" pos:column="53">Enumerable</name><op:operator pos:line="57" pos:column="63">.</op:operator><name><name pos:line="57" pos:column="64">Empty</name><argument_list pos:line="57" pos:column="69">&lt;<argument><name pos:line="57" pos:column="70">INamedEntity</name></argument>&gt;</argument_list></name></name><argument_list pos:line="57" pos:column="83">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <foreach pos:line="58" pos:column="17">foreach(<init><decl><type><name pos:line="58" pos:column="25">var</name></type> <name pos:line="58" pos:column="29">scope</name> <range pos:line="58" pos:column="35">in <expr><name pos:line="58" pos:column="38">callingScopes</name></expr></range></decl></init>) <block pos:line="58" pos:column="53">{
                    <decl_stmt><decl><type><name pos:line="59" pos:column="21">var</name></type> <name pos:line="59" pos:column="25">localMatches</name> <init pos:line="59" pos:column="38">= <expr><call><name><name pos:line="59" pos:column="40">scope</name><op:operator pos:line="59" pos:column="45">.</op:operator><name><name pos:line="59" pos:column="46">GetNamedChildren</name><argument_list pos:line="59" pos:column="62">&lt;<argument><name pos:line="59" pos:column="63">NamedScope</name></argument>&gt;</argument_list></name></name><argument_list pos:line="59" pos:column="74">(<argument><expr><name><name pos:line="59" pos:column="75">this</name><op:operator pos:line="59" pos:column="79">.</op:operator><name pos:line="59" pos:column="80">Name</name></name></expr></argument>)</argument_list></call><op:operator pos:line="59" pos:column="85">.</op:operator><call><name pos:line="59" pos:column="86">Where</name><argument_list pos:line="59" pos:column="91">(<argument><expr><lambda><name pos:line="59" pos:column="92">e</name> <op:operator pos:line="59" pos:column="94">=&gt;</op:operator> <name pos:line="59" pos:column="97">e</name> <op:operator pos:line="59" pos:column="99">is</op:operator> <name pos:line="59" pos:column="102">TypeDefinition</name> <op:operator pos:line="59" pos:column="117">||</op:operator> <name pos:line="59" pos:column="120">e</name> <op:operator pos:line="59" pos:column="122">is</op:operator> <name pos:line="59" pos:column="125">NamespaceDefinition</name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="59" pos:column="145">.</op:operator><call><name pos:line="59" pos:column="146">ToList</name><argument_list pos:line="59" pos:column="152">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="60" pos:column="21">var</name></type> <name pos:line="60" pos:column="25">callingType</name> <init pos:line="60" pos:column="37">= <expr><name pos:line="60" pos:column="39">scope</name> <op:operator pos:line="60" pos:column="45">as</op:operator> <name pos:line="60" pos:column="48">TypeDefinition</name></expr></init></decl>;</decl_stmt>
                    <if pos:line="61" pos:column="21">if<condition pos:line="61" pos:column="23">(<expr><op:operator pos:line="61" pos:column="24">!</op:operator><call><name><name pos:line="61" pos:column="25">localMatches</name><op:operator pos:line="61" pos:column="37">.</op:operator><name pos:line="61" pos:column="38">Any</name></name><argument_list pos:line="61" pos:column="41">()</argument_list></call> <op:operator pos:line="61" pos:column="44">&amp;&amp;</op:operator> <name pos:line="61" pos:column="47">callingType</name> <op:operator pos:line="61" pos:column="59">!=</op:operator> <name pos:line="61" pos:column="62">null</name></expr>)</condition><then pos:line="61" pos:column="67"> <block pos:line="61" pos:column="68">{
                        <comment type="line" pos:line="62" pos:column="25">//also search under the base types of the calling scope</comment>
                        <expr_stmt><expr><name pos:line="63" pos:column="25">matches</name> <op:operator pos:line="63" pos:column="33">=</op:operator> <call><name><name pos:line="63" pos:column="35">matches</name><op:operator pos:line="63" pos:column="42">.</op:operator><name pos:line="63" pos:column="43">Concat</name></name><argument_list pos:line="63" pos:column="49">(<argument><expr><call><name><name pos:line="63" pos:column="50">callingType</name><op:operator pos:line="63" pos:column="61">.</op:operator><name><name pos:line="63" pos:column="62">SearchParentTypes</name><argument_list pos:line="63" pos:column="79">&lt;<argument><name pos:line="63" pos:column="80">NamedScope</name></argument>&gt;</argument_list></name></name><argument_list pos:line="63" pos:column="91">(<argument><expr><name><name pos:line="63" pos:column="92">this</name><op:operator pos:line="63" pos:column="96">.</op:operator><name pos:line="63" pos:column="97">Name</name></name></expr></argument>, <argument><expr><lambda><name pos:line="63" pos:column="103">e</name> <op:operator pos:line="63" pos:column="105">=&gt;</op:operator> <name pos:line="63" pos:column="108">e</name> <op:operator pos:line="63" pos:column="110">is</op:operator> <name pos:line="63" pos:column="113">TypeDefinition</name> <op:operator pos:line="63" pos:column="128">||</op:operator> <name pos:line="63" pos:column="131">e</name> <op:operator pos:line="63" pos:column="133">is</op:operator> <name pos:line="63" pos:column="136">NamespaceDefinition</name></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else pos:line="64" pos:column="23">else <block pos:line="64" pos:column="28">{
                        <expr_stmt><expr><name pos:line="65" pos:column="25">matches</name> <op:operator pos:line="65" pos:column="33">=</op:operator> <call><name><name pos:line="65" pos:column="35">matches</name><op:operator pos:line="65" pos:column="42">.</op:operator><name pos:line="65" pos:column="43">Concat</name></name><argument_list pos:line="65" pos:column="49">(<argument><expr><name pos:line="65" pos:column="50">localMatches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></foreach>
                <return pos:line="68" pos:column="17">return <expr><name pos:line="68" pos:column="24">matches</name></expr>;</return>
            }</block></then></if>

            <comment type="line" pos:line="71" pos:column="13">//search enclosing scopes and base types for the method</comment>
            <foreach pos:line="72" pos:column="13">foreach(<init><decl><type><name pos:line="72" pos:column="21">var</name></type> <name pos:line="72" pos:column="25">scope</name> <range pos:line="72" pos:column="31">in <expr><call><name><name pos:line="72" pos:column="34">ParentStatement</name><op:operator pos:line="72" pos:column="49">.</op:operator><name pos:line="72" pos:column="50">GetAncestors</name></name><argument_list pos:line="72" pos:column="62">()</argument_list></call></expr></range></decl></init>) <block pos:line="72" pos:column="66">{
                <decl_stmt><decl><type><name pos:line="73" pos:column="17">var</name></type> <name pos:line="73" pos:column="21">matches</name> <init pos:line="73" pos:column="29">= <expr><call><name><name pos:line="73" pos:column="31">scope</name><op:operator pos:line="73" pos:column="36">.</op:operator><name><name pos:line="73" pos:column="37">GetNamedChildren</name><argument_list pos:line="73" pos:column="53">&lt;<argument><name pos:line="73" pos:column="54">NamedScope</name></argument>&gt;</argument_list></name></name><argument_list pos:line="73" pos:column="65">(<argument><expr><name pos:line="73" pos:column="66">this</name></expr></argument>)</argument_list></call><op:operator pos:line="73" pos:column="71">.</op:operator><call><name pos:line="73" pos:column="72">Where</name><argument_list pos:line="73" pos:column="77">(<argument><expr><lambda><name pos:line="73" pos:column="78">e</name> <op:operator pos:line="73" pos:column="80">=&gt;</op:operator> <name pos:line="73" pos:column="83">e</name> <op:operator pos:line="73" pos:column="85">is</op:operator> <name pos:line="73" pos:column="88">TypeDefinition</name> <op:operator pos:line="73" pos:column="103">||</op:operator> <name pos:line="73" pos:column="106">e</name> <op:operator pos:line="73" pos:column="108">is</op:operator> <name pos:line="73" pos:column="111">NamespaceDefinition</name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="73" pos:column="131">.</op:operator><call><name pos:line="73" pos:column="132">ToList</name><argument_list pos:line="73" pos:column="138">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="74" pos:column="17">if<condition pos:line="74" pos:column="19">(<expr><call><name><name pos:line="74" pos:column="20">matches</name><op:operator pos:line="74" pos:column="27">.</op:operator><name pos:line="74" pos:column="28">Any</name></name><argument_list pos:line="74" pos:column="31">()</argument_list></call></expr>)</condition><then pos:line="74" pos:column="34"> <block pos:line="74" pos:column="35">{
                    <return pos:line="75" pos:column="21">return <expr><name pos:line="75" pos:column="28">matches</name></expr>;</return>
                }</block></then></if>
                <decl_stmt><decl><type><name pos:line="77" pos:column="17">var</name></type> <name pos:line="77" pos:column="21">typeDef</name> <init pos:line="77" pos:column="29">= <expr><name pos:line="77" pos:column="31">scope</name> <op:operator pos:line="77" pos:column="37">as</op:operator> <name pos:line="77" pos:column="40">TypeDefinition</name></expr></init></decl>;</decl_stmt>
                <if pos:line="78" pos:column="17">if<condition pos:line="78" pos:column="19">(<expr><name pos:line="78" pos:column="20">typeDef</name> <op:operator pos:line="78" pos:column="28">!=</op:operator> <name pos:line="78" pos:column="31">null</name></expr>)</condition><then pos:line="78" pos:column="36"> <block pos:line="78" pos:column="37">{
                    <decl_stmt><decl><type><name pos:line="79" pos:column="21">var</name></type> <name pos:line="79" pos:column="25">baseTypeMatches</name> <init pos:line="79" pos:column="41">= <expr><call><name><name pos:line="79" pos:column="43">typeDef</name><op:operator pos:line="79" pos:column="50">.</op:operator><name><name pos:line="79" pos:column="51">SearchParentTypes</name><argument_list pos:line="79" pos:column="68">&lt;<argument><name pos:line="79" pos:column="69">NamedScope</name></argument>&gt;</argument_list></name></name><argument_list pos:line="79" pos:column="80">(<argument><expr><name><name pos:line="79" pos:column="81">this</name><op:operator pos:line="79" pos:column="85">.</op:operator><name pos:line="79" pos:column="86">Name</name></name></expr></argument>, <argument><expr><lambda><name pos:line="79" pos:column="92">e</name> <op:operator pos:line="79" pos:column="94">=&gt;</op:operator> <name pos:line="79" pos:column="97">e</name> <op:operator pos:line="79" pos:column="99">is</op:operator> <name pos:line="79" pos:column="102">TypeDefinition</name> <op:operator pos:line="79" pos:column="117">||</op:operator> <name pos:line="79" pos:column="120">e</name> <op:operator pos:line="79" pos:column="122">is</op:operator> <name pos:line="79" pos:column="125">NamespaceDefinition</name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="79" pos:column="145">.</op:operator><call><name pos:line="79" pos:column="146">ToList</name><argument_list pos:line="79" pos:column="152">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="80" pos:column="21">if<condition pos:line="80" pos:column="23">(<expr><call><name><name pos:line="80" pos:column="24">baseTypeMatches</name><op:operator pos:line="80" pos:column="39">.</op:operator><name pos:line="80" pos:column="40">Any</name></name><argument_list pos:line="80" pos:column="43">()</argument_list></call></expr>)</condition><then pos:line="80" pos:column="46"> <block pos:line="80" pos:column="47">{
                        <return pos:line="81" pos:column="25">return <expr><name pos:line="81" pos:column="32">baseTypeMatches</name></expr>;</return>
                    }</block></then></if>
                }</block></then></if>
            }</block></foreach>

            <comment type="line" pos:line="86" pos:column="13">//search if there is an alias for this name</comment>
            <foreach pos:line="87" pos:column="13">foreach(<init><decl><type><name pos:line="87" pos:column="21">var</name></type> <name pos:line="87" pos:column="25">alias</name> <range pos:line="87" pos:column="31">in <expr><call><name pos:line="87" pos:column="34">GetAliases</name><argument_list pos:line="87" pos:column="44">()</argument_list></call></expr></range></decl></init>) <block pos:line="87" pos:column="48">{
                <if pos:line="88" pos:column="17">if<condition pos:line="88" pos:column="19">(<expr><name><name pos:line="88" pos:column="20">alias</name><op:operator pos:line="88" pos:column="25">.</op:operator><name pos:line="88" pos:column="26">AliasName</name></name> <op:operator pos:line="88" pos:column="36">==</op:operator> <name><name pos:line="88" pos:column="39">this</name><op:operator pos:line="88" pos:column="43">.</op:operator><name pos:line="88" pos:column="44">Name</name></name></expr>)</condition><then pos:line="88" pos:column="49"> <block pos:line="88" pos:column="50">{
                    <decl_stmt><decl><type><name pos:line="89" pos:column="21">var</name></type> <name pos:line="89" pos:column="25">targetName</name> <init pos:line="89" pos:column="36">= <expr><name><name pos:line="89" pos:column="38">alias</name><op:operator pos:line="89" pos:column="43">.</op:operator><name pos:line="89" pos:column="44">Target</name></name> <op:operator pos:line="89" pos:column="51">as</op:operator> <name pos:line="89" pos:column="54">NameUse</name></expr></init></decl>;</decl_stmt>
                    <if pos:line="90" pos:column="21">if<condition pos:line="90" pos:column="23">(<expr><name pos:line="90" pos:column="24">targetName</name> <op:operator pos:line="90" pos:column="35">==</op:operator> <name pos:line="90" pos:column="38">null</name></expr>)</condition><then pos:line="90" pos:column="43"> <block pos:line="90" pos:column="44">{
                        <comment type="line" pos:line="91" pos:column="25">//Target is not a NameUse, probably an Expression</comment>
                        <expr_stmt><expr><name pos:line="92" pos:column="25">targetName</name> <op:operator pos:line="92" pos:column="36">=</op:operator> <call><name><name pos:line="92" pos:column="38">alias</name><op:operator pos:line="92" pos:column="43">.</op:operator><name pos:line="92" pos:column="44">Target</name><op:operator pos:line="92" pos:column="50">.</op:operator><name><name pos:line="92" pos:column="51">GetDescendantsAndSelf</name><argument_list pos:line="92" pos:column="72">&lt;<argument><name pos:line="92" pos:column="73">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="92" pos:column="81">()</argument_list></call><op:operator pos:line="92" pos:column="83">.</op:operator><call><name pos:line="92" pos:column="84">LastOrDefault</name><argument_list pos:line="92" pos:column="97">()</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <if pos:line="94" pos:column="21">if<condition pos:line="94" pos:column="23">(<expr><name pos:line="94" pos:column="24">targetName</name> <op:operator pos:line="94" pos:column="35">!=</op:operator> <name pos:line="94" pos:column="38">null</name></expr>)</condition><then pos:line="94" pos:column="43"> <block pos:line="94" pos:column="44">{
                        <return pos:line="95" pos:column="25">return <expr><call><name><name pos:line="95" pos:column="32">targetName</name><op:operator pos:line="95" pos:column="42">.</op:operator><name pos:line="95" pos:column="43">FindMatches</name></name><argument_list pos:line="95" pos:column="54">()</argument_list></call></expr>;</return>
                    }</block></then></if>
                }</block></then></if>
            }</block></foreach>

            <comment type="line" pos:line="100" pos:column="13">//we didn't find it locally, search under imported namespaces</comment>
            <return pos:line="101" pos:column="13">return <expr><op:operator pos:line="101" pos:column="20">(</op:operator><linq><from pos:line="101" pos:column="21">from <expr><name pos:line="101" pos:column="26">import</name></expr> <in pos:line="101" pos:column="33">in <expr><call><name pos:line="101" pos:column="36">GetImports</name><argument_list pos:line="101" pos:column="46">()</argument_list></call></expr></in></from>
                    <from pos:line="102" pos:column="21">from <expr><name pos:line="102" pos:column="26">match</name></expr> <in pos:line="102" pos:column="32">in <expr><call><name><name pos:line="102" pos:column="35">import</name><op:operator pos:line="102" pos:column="41">.</op:operator><name pos:line="102" pos:column="42">ImportedNamespace</name><op:operator pos:line="102" pos:column="59">.</op:operator><name><name pos:line="102" pos:column="60">GetDescendantsAndSelf</name><argument_list pos:line="102" pos:column="81">&lt;<argument><name pos:line="102" pos:column="82">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="102" pos:column="90">()</argument_list></call><op:operator pos:line="102" pos:column="92">.</op:operator><call><name pos:line="102" pos:column="93">Last</name><argument_list pos:line="102" pos:column="97">()</argument_list></call><op:operator pos:line="102" pos:column="99">.</op:operator><call><name pos:line="102" pos:column="100">FindMatches</name><argument_list pos:line="102" pos:column="111">()</argument_list></call><op:operator pos:line="102" pos:column="113">.</op:operator><call><name><name pos:line="102" pos:column="114">OfType</name><argument_list pos:line="102" pos:column="120">&lt;<argument><name pos:line="102" pos:column="121">NamedScope</name></argument>&gt;</argument_list></name><argument_list pos:line="102" pos:column="132">()</argument_list></call></expr></in></from>
                    <from pos:line="103" pos:column="21">from <expr><name pos:line="103" pos:column="26">child</name></expr> <in pos:line="103" pos:column="32">in <expr><call><name><name pos:line="103" pos:column="35">match</name><op:operator pos:line="103" pos:column="40">.</op:operator><name><name pos:line="103" pos:column="41">GetNamedChildren</name><argument_list pos:line="103" pos:column="57">&lt;<argument><name pos:line="103" pos:column="58">NamedScope</name></argument>&gt;</argument_list></name></name><argument_list pos:line="103" pos:column="69">(<argument><expr><name><name pos:line="103" pos:column="70">this</name><op:operator pos:line="103" pos:column="74">.</op:operator><name pos:line="103" pos:column="75">Name</name></name></expr></argument>)</argument_list></call></expr></in></from>
                    <where pos:line="104" pos:column="21">where <expr><name pos:line="104" pos:column="27">child</name> <op:operator pos:line="104" pos:column="33">is</op:operator> <name pos:line="104" pos:column="36">TypeDefinition</name> <op:operator pos:line="104" pos:column="51">||</op:operator> <name pos:line="104" pos:column="54">child</name> <op:operator pos:line="104" pos:column="60">is</op:operator> <name pos:line="104" pos:column="63">NamespaceDefinition</name></expr></where>
                    <select pos:line="105" pos:column="21">select <expr><name pos:line="105" pos:column="28">child</name></expr></select></linq><op:operator pos:line="105" pos:column="33">)</op:operator></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="108" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="109" pos:column="9">/// Determines the possible types of this expression.</comment>
        <comment type="line" pos:line="110" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="111" pos:column="9">/// &lt;returns&gt;An enumerable of the matching TypeDefinitions for this expression's possible types.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="112" pos:column="9">public</specifier> <specifier pos:line="112" pos:column="16">override</specifier> <name><name pos:line="112" pos:column="25">IEnumerable</name><argument_list pos:line="112" pos:column="36">&lt;<argument><name pos:line="112" pos:column="37">TypeDefinition</name></argument>&gt;</argument_list></name></type> <name pos:line="112" pos:column="53">ResolveType</name><parameter_list pos:line="112" pos:column="64">()</parameter_list> <block pos:line="112" pos:column="67">{
            <return pos:line="113" pos:column="13">return <expr><call><name pos:line="113" pos:column="20">FindMatches</name><argument_list pos:line="113" pos:column="31">()</argument_list></call><op:operator pos:line="113" pos:column="33">.</op:operator><call><name><name pos:line="113" pos:column="34">OfType</name><argument_list pos:line="113" pos:column="40">&lt;<argument><name pos:line="113" pos:column="41">TypeDefinition</name></argument>&gt;</argument_list></name><argument_list pos:line="113" pos:column="56">()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
