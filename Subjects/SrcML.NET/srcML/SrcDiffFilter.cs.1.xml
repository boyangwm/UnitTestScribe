<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML\Utilities\SrcDiffFilter.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2015 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Patrick Francis (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">System</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Collections</name><op:operator pos:line="13" pos:column="25">.</op:operator><name pos:line="13" pos:column="26">Generic</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Linq</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Text</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Xml</name><op:operator pos:line="16" pos:column="17">.</op:operator><name pos:line="16" pos:column="18">Linq</name></name>;</using>

<namespace pos:line="18" pos:column="1">namespace <name><name pos:line="18" pos:column="11">ABB</name><op:operator pos:line="18" pos:column="14">.</op:operator><name pos:line="18" pos:column="15">SrcML</name><op:operator pos:line="18" pos:column="20">.</op:operator><name pos:line="18" pos:column="21">Utilities</name></name> <block pos:line="18" pos:column="31">{
    <comment type="line" pos:line="19" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="20" pos:column="5">/// A helper class for recovering the before/after version of a SrcML file from SrcDiff output.</comment>
    <comment type="line" pos:line="21" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="22" pos:column="5">public</specifier> <specifier pos:line="22" pos:column="12">static</specifier> class <name pos:line="22" pos:column="25">SrcDiffFilter</name> <block pos:line="22" pos:column="39">{

        <comment type="line" pos:line="24" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="25" pos:column="9">/// Recovers the "before" SrcML from a SrcDiff representation.</comment>
        <comment type="line" pos:line="26" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="27" pos:column="9">/// &lt;param name="xml"&gt;The root element of the SrcDiff XML to filter.&lt;/param&gt;</comment>
        <comment type="line" pos:line="28" pos:column="9">/// &lt;returns&gt;A copy of the input XML, with the diff elements removed, representing the original file.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="29" pos:column="9">public</specifier> <specifier pos:line="29" pos:column="16">static</specifier> <name pos:line="29" pos:column="23">XElement</name></type> <name pos:line="29" pos:column="32">GetBeforeVersion</name><parameter_list pos:line="29" pos:column="48">(<param><decl><type><name pos:line="29" pos:column="49">XElement</name></type> <name pos:line="29" pos:column="58">xml</name></decl></param>)</parameter_list> <block pos:line="29" pos:column="63">{
            <if pos:line="30" pos:column="13">if<condition pos:line="30" pos:column="15">(<expr><name pos:line="30" pos:column="16">xml</name> <op:operator pos:line="30" pos:column="20">==</op:operator> <name pos:line="30" pos:column="23">null</name></expr>)</condition><then pos:line="30" pos:column="28"> <block pos:line="30" pos:column="29">{ <throw pos:line="30" pos:column="31">throw <expr><op:operator pos:line="30" pos:column="37">new</op:operator> <call><name pos:line="30" pos:column="41">ArgumentNullException</name><argument_list pos:line="30" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="30" pos:column="63">"xml"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>

            <decl_stmt><decl><type><name pos:line="32" pos:column="13">var</name></type> <name pos:line="32" pos:column="17">root</name> <init pos:line="32" pos:column="22">= <expr><op:operator pos:line="32" pos:column="24">new</op:operator> <call><name pos:line="32" pos:column="28">XElement</name><argument_list pos:line="32" pos:column="36">(<argument><expr><name pos:line="32" pos:column="37">xml</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="34" pos:column="13">//trim any nodes that were added (but keeping any common elements that might be within)</comment>
            <foreach pos:line="35" pos:column="13">foreach(<init><decl><type><name pos:line="35" pos:column="21">var</name></type> <name pos:line="35" pos:column="25">addElement</name> <range pos:line="35" pos:column="36">in <expr><call><name><name pos:line="35" pos:column="39">root</name><op:operator pos:line="35" pos:column="43">.</op:operator><name pos:line="35" pos:column="44">Descendants</name></name><argument_list pos:line="35" pos:column="55">(<argument><expr><name><name pos:line="35" pos:column="56">DIFF</name><op:operator pos:line="35" pos:column="60">.</op:operator><name pos:line="35" pos:column="61">Insert</name></name></expr></argument>)</argument_list></call><op:operator pos:line="35" pos:column="68">.</op:operator><call><name pos:line="35" pos:column="69">ToList</name><argument_list pos:line="35" pos:column="75">()</argument_list></call></expr></range></decl></init>) <block pos:line="35" pos:column="79">{
                <decl_stmt><decl><type><name pos:line="36" pos:column="17">var</name></type> <name pos:line="36" pos:column="21">commonElements</name> <init pos:line="36" pos:column="36">= <expr><call><name><name pos:line="36" pos:column="38">addElement</name><op:operator pos:line="36" pos:column="48">.</op:operator><name pos:line="36" pos:column="49">Descendants</name></name><argument_list pos:line="36" pos:column="60">(<argument><expr><name><name pos:line="36" pos:column="61">DIFF</name><op:operator pos:line="36" pos:column="65">.</op:operator><name pos:line="36" pos:column="66">Common</name></name></expr></argument>)</argument_list></call><op:operator pos:line="36" pos:column="73">.</op:operator><call><name pos:line="36" pos:column="74">ToList</name><argument_list pos:line="36" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="37" pos:column="17">if<condition pos:line="37" pos:column="19">(<expr><name><name pos:line="37" pos:column="20">commonElements</name><op:operator pos:line="37" pos:column="34">.</op:operator><name pos:line="37" pos:column="35">Count</name></name> <op:operator pos:line="37" pos:column="41">&gt;</op:operator> <lit:literal type="number" pos:line="37" pos:column="43">0</lit:literal></expr>)</condition><then pos:line="37" pos:column="45"> <block pos:line="37" pos:column="46">{
                    <expr_stmt><expr><call><name><name pos:line="38" pos:column="21">addElement</name><op:operator pos:line="38" pos:column="31">.</op:operator><name pos:line="38" pos:column="32">ReplaceWith</name></name><argument_list pos:line="38" pos:column="43">(<argument><expr><call><name><name pos:line="38" pos:column="44">commonElements</name><op:operator pos:line="38" pos:column="58">.</op:operator><name pos:line="38" pos:column="59">SelectMany</name></name><argument_list pos:line="38" pos:column="69">(<argument><expr><lambda><name pos:line="38" pos:column="70">ce</name> <op:operator pos:line="38" pos:column="73">=&gt;</op:operator> <call><name><name pos:line="38" pos:column="76">ce</name><op:operator pos:line="38" pos:column="78">.</op:operator><name pos:line="38" pos:column="79">Nodes</name></name><argument_list pos:line="38" pos:column="84">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="38" pos:column="87">.</op:operator><call><name pos:line="38" pos:column="88">ToList</name><argument_list pos:line="38" pos:column="94">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="39" pos:column="19">else <block pos:line="39" pos:column="24">{
                    <expr_stmt><expr><call><name><name pos:line="40" pos:column="21">addElement</name><op:operator pos:line="40" pos:column="31">.</op:operator><name pos:line="40" pos:column="32">Remove</name></name><argument_list pos:line="40" pos:column="38">()</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></foreach>

            <comment type="line" pos:line="44" pos:column="13">//add back any nodes that were removed</comment>
            <foreach pos:line="45" pos:column="13">foreach(<init><decl><type><name pos:line="45" pos:column="21">var</name></type> <name pos:line="45" pos:column="25">deleteElement</name> <range pos:line="45" pos:column="39">in <expr><call><name><name pos:line="45" pos:column="42">root</name><op:operator pos:line="45" pos:column="46">.</op:operator><name pos:line="45" pos:column="47">Descendants</name></name><argument_list pos:line="45" pos:column="58">(<argument><expr><name><name pos:line="45" pos:column="59">DIFF</name><op:operator pos:line="45" pos:column="63">.</op:operator><name pos:line="45" pos:column="64">Delete</name></name></expr></argument>)</argument_list></call><op:operator pos:line="45" pos:column="71">.</op:operator><call><name pos:line="45" pos:column="72">ToList</name><argument_list pos:line="45" pos:column="78">()</argument_list></call></expr></range></decl></init>) <block pos:line="45" pos:column="82">{
                <expr_stmt><expr><call><name><name pos:line="46" pos:column="17">deleteElement</name><op:operator pos:line="46" pos:column="30">.</op:operator><name pos:line="46" pos:column="31">ReplaceWith</name></name><argument_list pos:line="46" pos:column="42">(<argument><expr><call><name><name pos:line="46" pos:column="43">deleteElement</name><op:operator pos:line="46" pos:column="56">.</op:operator><name pos:line="46" pos:column="57">Nodes</name></name><argument_list pos:line="46" pos:column="62">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>

            <comment type="line" pos:line="49" pos:column="13">//remove the diff tags from any remaining common elements</comment>
            <foreach pos:line="50" pos:column="13">foreach(<init><decl><type><name pos:line="50" pos:column="21">var</name></type> <name pos:line="50" pos:column="25">commonElement</name> <range pos:line="50" pos:column="39">in <expr><call><name><name pos:line="50" pos:column="42">root</name><op:operator pos:line="50" pos:column="46">.</op:operator><name pos:line="50" pos:column="47">Descendants</name></name><argument_list pos:line="50" pos:column="58">(<argument><expr><name><name pos:line="50" pos:column="59">DIFF</name><op:operator pos:line="50" pos:column="63">.</op:operator><name pos:line="50" pos:column="64">Common</name></name></expr></argument>)</argument_list></call><op:operator pos:line="50" pos:column="71">.</op:operator><call><name pos:line="50" pos:column="72">ToList</name><argument_list pos:line="50" pos:column="78">()</argument_list></call></expr></range></decl></init>) <block pos:line="50" pos:column="82">{
                <expr_stmt><expr><call><name><name pos:line="51" pos:column="17">commonElement</name><op:operator pos:line="51" pos:column="30">.</op:operator><name pos:line="51" pos:column="31">ReplaceWith</name></name><argument_list pos:line="51" pos:column="42">(<argument><expr><call><name><name pos:line="51" pos:column="43">commonElement</name><op:operator pos:line="51" pos:column="56">.</op:operator><name pos:line="51" pos:column="57">Nodes</name></name><argument_list pos:line="51" pos:column="62">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>

            <return pos:line="54" pos:column="13">return <expr><name pos:line="54" pos:column="20">root</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="57" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="58" pos:column="9">/// Recovers the "after" SrcML from a SrcDiff representation.</comment>
        <comment type="line" pos:line="59" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="60" pos:column="9">/// &lt;param name="xml"&gt;The root element of the SrcDiff XML to filter.&lt;/param&gt;</comment>
        <comment type="line" pos:line="61" pos:column="9">/// &lt;returns&gt;A copy of the input XML, with the diff elements removed, representing the modified file.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="62" pos:column="9">public</specifier> <specifier pos:line="62" pos:column="16">static</specifier> <name pos:line="62" pos:column="23">XElement</name></type> <name pos:line="62" pos:column="32">GetAfterVersion</name><parameter_list pos:line="62" pos:column="47">(<param><decl><type><name pos:line="62" pos:column="48">XElement</name></type> <name pos:line="62" pos:column="57">xml</name></decl></param>)</parameter_list> <block pos:line="62" pos:column="62">{
            <if pos:line="63" pos:column="13">if<condition pos:line="63" pos:column="15">(<expr><name pos:line="63" pos:column="16">xml</name> <op:operator pos:line="63" pos:column="20">==</op:operator> <name pos:line="63" pos:column="23">null</name></expr>)</condition><then pos:line="63" pos:column="28"> <block pos:line="63" pos:column="29">{ <throw pos:line="63" pos:column="31">throw <expr><op:operator pos:line="63" pos:column="37">new</op:operator> <call><name pos:line="63" pos:column="41">ArgumentNullException</name><argument_list pos:line="63" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="63" pos:column="63">"xml"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>

            <decl_stmt><decl><type><name pos:line="65" pos:column="13">var</name></type> <name pos:line="65" pos:column="17">root</name> <init pos:line="65" pos:column="22">= <expr><op:operator pos:line="65" pos:column="24">new</op:operator> <call><name pos:line="65" pos:column="28">XElement</name><argument_list pos:line="65" pos:column="36">(<argument><expr><name pos:line="65" pos:column="37">xml</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="67" pos:column="13">//trim any nodes that were deleted (but keeping any common elements that might be within)</comment>
            <foreach pos:line="68" pos:column="13">foreach(<init><decl><type><name pos:line="68" pos:column="21">var</name></type> <name pos:line="68" pos:column="25">deleteElement</name> <range pos:line="68" pos:column="39">in <expr><call><name><name pos:line="68" pos:column="42">root</name><op:operator pos:line="68" pos:column="46">.</op:operator><name pos:line="68" pos:column="47">Descendants</name></name><argument_list pos:line="68" pos:column="58">(<argument><expr><name><name pos:line="68" pos:column="59">DIFF</name><op:operator pos:line="68" pos:column="63">.</op:operator><name pos:line="68" pos:column="64">Delete</name></name></expr></argument>)</argument_list></call><op:operator pos:line="68" pos:column="71">.</op:operator><call><name pos:line="68" pos:column="72">ToList</name><argument_list pos:line="68" pos:column="78">()</argument_list></call></expr></range></decl></init>) <block pos:line="68" pos:column="82">{
                <decl_stmt><decl><type><name pos:line="69" pos:column="17">var</name></type> <name pos:line="69" pos:column="21">commonElements</name> <init pos:line="69" pos:column="36">= <expr><call><name><name pos:line="69" pos:column="38">deleteElement</name><op:operator pos:line="69" pos:column="51">.</op:operator><name pos:line="69" pos:column="52">Descendants</name></name><argument_list pos:line="69" pos:column="63">(<argument><expr><name><name pos:line="69" pos:column="64">DIFF</name><op:operator pos:line="69" pos:column="68">.</op:operator><name pos:line="69" pos:column="69">Common</name></name></expr></argument>)</argument_list></call><op:operator pos:line="69" pos:column="76">.</op:operator><call><name pos:line="69" pos:column="77">ToList</name><argument_list pos:line="69" pos:column="83">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="70" pos:column="17">if<condition pos:line="70" pos:column="19">(<expr><name><name pos:line="70" pos:column="20">commonElements</name><op:operator pos:line="70" pos:column="34">.</op:operator><name pos:line="70" pos:column="35">Count</name></name> <op:operator pos:line="70" pos:column="41">&gt;</op:operator> <lit:literal type="number" pos:line="70" pos:column="43">0</lit:literal></expr>)</condition><then pos:line="70" pos:column="45"> <block pos:line="70" pos:column="46">{
                    <expr_stmt><expr><call><name><name pos:line="71" pos:column="21">deleteElement</name><op:operator pos:line="71" pos:column="34">.</op:operator><name pos:line="71" pos:column="35">ReplaceWith</name></name><argument_list pos:line="71" pos:column="46">(<argument><expr><call><name><name pos:line="71" pos:column="47">commonElements</name><op:operator pos:line="71" pos:column="61">.</op:operator><name pos:line="71" pos:column="62">SelectMany</name></name><argument_list pos:line="71" pos:column="72">(<argument><expr><lambda><name pos:line="71" pos:column="73">ce</name> <op:operator pos:line="71" pos:column="76">=&gt;</op:operator> <call><name><name pos:line="71" pos:column="79">ce</name><op:operator pos:line="71" pos:column="81">.</op:operator><name pos:line="71" pos:column="82">Nodes</name></name><argument_list pos:line="71" pos:column="87">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="71" pos:column="90">.</op:operator><call><name pos:line="71" pos:column="91">ToList</name><argument_list pos:line="71" pos:column="97">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="72" pos:column="19">else <block pos:line="72" pos:column="24">{
                    <expr_stmt><expr><call><name><name pos:line="73" pos:column="21">deleteElement</name><op:operator pos:line="73" pos:column="34">.</op:operator><name pos:line="73" pos:column="35">Remove</name></name><argument_list pos:line="73" pos:column="41">()</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></foreach>

            <comment type="line" pos:line="77" pos:column="13">//add the nodes that were added</comment>
            <foreach pos:line="78" pos:column="13">foreach(<init><decl><type><name pos:line="78" pos:column="21">var</name></type> <name pos:line="78" pos:column="25">addElement</name> <range pos:line="78" pos:column="36">in <expr><call><name><name pos:line="78" pos:column="39">root</name><op:operator pos:line="78" pos:column="43">.</op:operator><name pos:line="78" pos:column="44">Descendants</name></name><argument_list pos:line="78" pos:column="55">(<argument><expr><name><name pos:line="78" pos:column="56">DIFF</name><op:operator pos:line="78" pos:column="60">.</op:operator><name pos:line="78" pos:column="61">Insert</name></name></expr></argument>)</argument_list></call><op:operator pos:line="78" pos:column="68">.</op:operator><call><name pos:line="78" pos:column="69">ToList</name><argument_list pos:line="78" pos:column="75">()</argument_list></call></expr></range></decl></init>) <block pos:line="78" pos:column="79">{
                <expr_stmt><expr><call><name><name pos:line="79" pos:column="17">addElement</name><op:operator pos:line="79" pos:column="27">.</op:operator><name pos:line="79" pos:column="28">ReplaceWith</name></name><argument_list pos:line="79" pos:column="39">(<argument><expr><call><name><name pos:line="79" pos:column="40">addElement</name><op:operator pos:line="79" pos:column="50">.</op:operator><name pos:line="79" pos:column="51">Nodes</name></name><argument_list pos:line="79" pos:column="56">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>

            <comment type="line" pos:line="82" pos:column="13">//remove the diff tags from any remaining common elements</comment>
            <foreach pos:line="83" pos:column="13">foreach(<init><decl><type><name pos:line="83" pos:column="21">var</name></type> <name pos:line="83" pos:column="25">commonElement</name> <range pos:line="83" pos:column="39">in <expr><call><name><name pos:line="83" pos:column="42">root</name><op:operator pos:line="83" pos:column="46">.</op:operator><name pos:line="83" pos:column="47">Descendants</name></name><argument_list pos:line="83" pos:column="58">(<argument><expr><name><name pos:line="83" pos:column="59">DIFF</name><op:operator pos:line="83" pos:column="63">.</op:operator><name pos:line="83" pos:column="64">Common</name></name></expr></argument>)</argument_list></call><op:operator pos:line="83" pos:column="71">.</op:operator><call><name pos:line="83" pos:column="72">ToList</name><argument_list pos:line="83" pos:column="78">()</argument_list></call></expr></range></decl></init>) <block pos:line="83" pos:column="82">{
                <expr_stmt><expr><call><name><name pos:line="84" pos:column="17">commonElement</name><op:operator pos:line="84" pos:column="30">.</op:operator><name pos:line="84" pos:column="31">ReplaceWith</name></name><argument_list pos:line="84" pos:column="42">(<argument><expr><call><name><name pos:line="84" pos:column="43">commonElement</name><op:operator pos:line="84" pos:column="56">.</op:operator><name pos:line="84" pos:column="57">Nodes</name></name><argument_list pos:line="84" pos:column="62">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>

            <return pos:line="87" pos:column="13">return <expr><name pos:line="87" pos:column="20">root</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
