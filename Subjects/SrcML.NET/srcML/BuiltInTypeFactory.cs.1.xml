<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data\BuiltInTypeFactory.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2013 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">System</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Collections</name><op:operator pos:line="13" pos:column="25">.</op:operator><name pos:line="13" pos:column="26">Generic</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Linq</name></name>;</using>

<namespace pos:line="16" pos:column="1">namespace <name><name pos:line="16" pos:column="11">ABB</name><op:operator pos:line="16" pos:column="14">.</op:operator><name pos:line="16" pos:column="15">SrcML</name><op:operator pos:line="16" pos:column="20">.</op:operator><name pos:line="16" pos:column="21">Data</name></name> <block pos:line="16" pos:column="26">{

    <comment type="line" pos:line="18" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="19" pos:column="5">/// The Built-In type factory creates on-demand instances of built-in types for each language.</comment>
    <comment type="line" pos:line="20" pos:column="5">/// It creates and stores one &lt;see cref="TypeDefinition"/&gt; object for each</comment>
    <comment type="line" pos:line="21" pos:column="5">/// &lt;see cref="ABB.SrcML.Language"/&gt;/built-in type pair. This factory is primarily used when</comment>
    <comment type="line" pos:line="22" pos:column="5">/// comparing &lt;see cref="TypeUse"/&gt; objects for method parameters. A parameter and an argument</comment>
    <comment type="line" pos:line="23" pos:column="5">/// should have the same &lt;see cref="TypeDefinition"/&gt; object.</comment>
    <comment type="line" pos:line="24" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="25" pos:column="5">public</specifier> <specifier pos:line="25" pos:column="12">static</specifier> class <name pos:line="25" pos:column="25">BuiltInTypeFactory</name> <block pos:line="25" pos:column="44">{
        <decl_stmt><decl><type><specifier pos:line="26" pos:column="9">private</specifier> <specifier pos:line="26" pos:column="17">static</specifier> <name><name pos:line="26" pos:column="24">Dictionary</name><argument_list pos:line="26" pos:column="34">&lt;<argument><name><name pos:line="26" pos:column="35">Tuple</name><argument_list pos:line="26" pos:column="40">&lt;<argument><name pos:line="26" pos:column="41">Language</name></argument>, <argument><name pos:line="26" pos:column="51">string</name></argument>&gt;</argument_list></name></argument>, <argument><name pos:line="26" pos:column="60">TypeDefinition</name></argument>&gt;</argument_list></name></type> <name pos:line="26" pos:column="76">builtInTypeMap</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="28" pos:column="9">private</specifier> <specifier pos:line="28" pos:column="17">static</specifier> <name><name pos:line="28" pos:column="24">HashSet</name><argument_list pos:line="28" pos:column="31">&lt;<argument><name pos:line="28" pos:column="32">string</name></argument>&gt;</argument_list></name></type> <name pos:line="28" pos:column="40">cppBuiltInParts</name> <init pos:line="28" pos:column="56">= <expr><op:operator pos:line="28" pos:column="58">new</op:operator> <name><name pos:line="28" pos:column="62">HashSet</name><argument_list pos:line="28" pos:column="69">&lt;<argument><name pos:line="28" pos:column="70">string</name></argument>&gt;</argument_list></name> <block pos:line="28" pos:column="78">{ <expr><lit:literal type="string" pos:line="28" pos:column="80">"char"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="28" pos:column="88">"short"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="28" pos:column="97">"int"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="28" pos:column="104">"long"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="28" pos:column="112">"bool"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="28" pos:column="120">"float"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="28" pos:column="129">"double"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="28" pos:column="139">"wchar_t"</lit:literal></expr>,
                                                                               <expr><lit:literal type="string" pos:line="29" pos:column="80">"signed"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="29" pos:column="90">"unsigned"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="29" pos:column="102">"short"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="29" pos:column="111">"long"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="29" pos:column="119">"char*"</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="31" pos:column="9">private</specifier> <specifier pos:line="31" pos:column="17">static</specifier> <name><name pos:line="31" pos:column="24">HashSet</name><argument_list pos:line="31" pos:column="31">&lt;<argument><name pos:line="31" pos:column="32">string</name></argument>&gt;</argument_list></name></type> <name pos:line="31" pos:column="40">csharpBuiltIns</name> <init pos:line="31" pos:column="55">= <expr><op:operator pos:line="31" pos:column="57">new</op:operator> <name><name pos:line="31" pos:column="61">HashSet</name><argument_list pos:line="31" pos:column="68">&lt;<argument><name pos:line="31" pos:column="69">string</name></argument>&gt;</argument_list></name> <block pos:line="31" pos:column="77">{ <expr><lit:literal type="string" pos:line="31" pos:column="79">"byte"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="31" pos:column="87">"sbyte"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="31" pos:column="96">"short"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="31" pos:column="105">"ushort"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="31" pos:column="115">"int"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="31" pos:column="122">"uint"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="31" pos:column="130">"long"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="31" pos:column="138">"ulong"</lit:literal></expr>,
                                                                              <expr><lit:literal type="string" pos:line="32" pos:column="79">"float"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="32" pos:column="88">"double"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="32" pos:column="98">"decimal"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="32" pos:column="109">"char"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="32" pos:column="117">"string"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="32" pos:column="127">"bool"</lit:literal></expr> }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="34" pos:column="9">private</specifier> <specifier pos:line="34" pos:column="17">static</specifier> <name><name pos:line="34" pos:column="24">HashSet</name><argument_list pos:line="34" pos:column="31">&lt;<argument><name pos:line="34" pos:column="32">string</name></argument>&gt;</argument_list></name></type> <name pos:line="34" pos:column="40">javaBuiltIns</name> <init pos:line="34" pos:column="53">= <expr><op:operator pos:line="34" pos:column="55">new</op:operator> <name><name pos:line="34" pos:column="59">HashSet</name><argument_list pos:line="34" pos:column="66">&lt;<argument><name pos:line="34" pos:column="67">string</name></argument>&gt;</argument_list></name> <block pos:line="34" pos:column="75">{ <expr><lit:literal type="string" pos:line="34" pos:column="77">"byte"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="34" pos:column="85">"short"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="34" pos:column="94">"int"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="34" pos:column="101">"long"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="34" pos:column="109">"float"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="34" pos:column="118">"double"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="34" pos:column="128">"boolean"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="34" pos:column="139">"char"</lit:literal></expr> }</block></expr></init></decl>;</decl_stmt>

        <constructor><specifier pos:line="36" pos:column="9">static</specifier> <name pos:line="36" pos:column="16">BuiltInTypeFactory</name><parameter_list pos:line="36" pos:column="34">()</parameter_list> <block pos:line="36" pos:column="37">{
            <expr_stmt><expr><name pos:line="37" pos:column="13">builtInTypeMap</name> <op:operator pos:line="37" pos:column="28">=</op:operator> <op:operator pos:line="37" pos:column="30">new</op:operator> <call><name><name pos:line="37" pos:column="34">Dictionary</name><argument_list pos:line="37" pos:column="44">&lt;<argument><name><name pos:line="37" pos:column="45">Tuple</name><argument_list pos:line="37" pos:column="50">&lt;<argument><name pos:line="37" pos:column="51">Language</name></argument>, <argument><name pos:line="37" pos:column="61">string</name></argument>&gt;</argument_list></name></argument>, <argument><name pos:line="37" pos:column="70">TypeDefinition</name></argument>&gt;</argument_list></name><argument_list pos:line="37" pos:column="85">()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="40" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="41" pos:column="9">/// Returns the built-in type for the given type use</comment>
        <comment type="line" pos:line="42" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="43" pos:column="9">/// &lt;param name="use"&gt;the type use to locate&lt;/param&gt;</comment>
        <comment type="line" pos:line="44" pos:column="9">/// &lt;returns&gt;A type definition that matches the type use; null if this is not a</comment>
        <comment type="line" pos:line="45" pos:column="9">/// built-in&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="46" pos:column="9">public</specifier> <specifier pos:line="46" pos:column="16">static</specifier> <name pos:line="46" pos:column="23">TypeDefinition</name></type> <name pos:line="46" pos:column="38">GetBuiltIn</name><parameter_list pos:line="46" pos:column="48">(<param><decl><type><name pos:line="46" pos:column="49">TypeUse</name></type> <name pos:line="46" pos:column="57">use</name></decl></param>)</parameter_list> <block pos:line="46" pos:column="62">{
            <if pos:line="47" pos:column="13">if<condition pos:line="47" pos:column="15">(<expr><op:operator pos:line="47" pos:column="16">!</op:operator><call><name pos:line="47" pos:column="17">IsBuiltIn</name><argument_list pos:line="47" pos:column="26">(<argument><expr><name pos:line="47" pos:column="27">use</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="47" pos:column="32"> <block pos:line="47" pos:column="33">{
                <return pos:line="48" pos:column="17">return <expr><name pos:line="48" pos:column="24">null</name></expr>;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="51" pos:column="13">var</name></type> <name pos:line="51" pos:column="17">key</name> <init pos:line="51" pos:column="21">= <expr><op:operator pos:line="51" pos:column="23">new</op:operator> <call><name><name pos:line="51" pos:column="27">Tuple</name><argument_list pos:line="51" pos:column="32">&lt;<argument><name pos:line="51" pos:column="33">Language</name></argument>, <argument><name pos:line="51" pos:column="43">string</name></argument>&gt;</argument_list></name><argument_list pos:line="51" pos:column="50">(<argument><expr><name><name pos:line="51" pos:column="51">use</name><op:operator pos:line="51" pos:column="54">.</op:operator><name pos:line="51" pos:column="55">ProgrammingLanguage</name></name></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="76">use</name><op:operator pos:line="51" pos:column="79">.</op:operator><name pos:line="51" pos:column="80">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="52" pos:column="13">TypeDefinition</name></type> <name pos:line="52" pos:column="28">builtIn</name></decl>;</decl_stmt>
            <if pos:line="53" pos:column="13">if<condition pos:line="53" pos:column="15">(<expr><op:operator pos:line="53" pos:column="16">!</op:operator><call><name><name pos:line="53" pos:column="17">builtInTypeMap</name><op:operator pos:line="53" pos:column="31">.</op:operator><name pos:line="53" pos:column="32">TryGetValue</name></name><argument_list pos:line="53" pos:column="43">(<argument><expr><name pos:line="53" pos:column="44">key</name></expr></argument>, <argument><expr pos:line="53" pos:column="49">out <name pos:line="53" pos:column="53">builtIn</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="53" pos:column="62"> <block pos:line="53" pos:column="63">{
                <expr_stmt><expr><name pos:line="54" pos:column="17">builtIn</name> <op:operator pos:line="54" pos:column="25">=</op:operator> <op:operator pos:line="54" pos:column="27">new</op:operator> <call><name pos:line="54" pos:column="31">TypeDefinition</name><argument_list pos:line="54" pos:column="45">()</argument_list></call> <block pos:line="54" pos:column="48">{
                    <expr><name pos:line="55" pos:column="21">Accessibility</name> <op:operator pos:line="55" pos:column="35">=</op:operator> <name><name pos:line="55" pos:column="37">AccessModifier</name><op:operator pos:line="55" pos:column="51">.</op:operator><name pos:line="55" pos:column="52">None</name></name></expr><op:operator pos:line="55" pos:column="56">,</op:operator>
                    <expr><name pos:line="56" pos:column="21">Kind</name> <op:operator pos:line="56" pos:column="26">=</op:operator> <name><name pos:line="56" pos:column="28">TypeKind</name><op:operator pos:line="56" pos:column="36">.</op:operator><name pos:line="56" pos:column="37">BuiltIn</name></name></expr><op:operator pos:line="56" pos:column="44">,</op:operator>
                    <expr><name pos:line="57" pos:column="21">Name</name> <op:operator pos:line="57" pos:column="26">=</op:operator> <name><name pos:line="57" pos:column="28">key</name><op:operator pos:line="57" pos:column="31">.</op:operator><name pos:line="57" pos:column="32">Item2</name></name></expr><op:operator pos:line="57" pos:column="37">,</op:operator>
                    <expr><name pos:line="58" pos:column="21">ProgrammingLanguage</name> <op:operator pos:line="58" pos:column="41">=</op:operator> <name><name pos:line="58" pos:column="43">key</name><op:operator pos:line="58" pos:column="46">.</op:operator><name pos:line="58" pos:column="47">Item1</name></name></expr><op:operator pos:line="58" pos:column="52">,</op:operator>
                }</block></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="60" pos:column="17">builtInTypeMap</name><index pos:line="60" pos:column="31">[<expr><name pos:line="60" pos:column="32">key</name></expr>]</index></name> <op:operator pos:line="60" pos:column="37">=</op:operator> <name pos:line="60" pos:column="39">builtIn</name></expr>;</expr_stmt>
            }</block></then></if>
            <return pos:line="62" pos:column="13">return <expr><name pos:line="62" pos:column="20">builtIn</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="65" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="66" pos:column="9">/// Checks if the</comment>
        <comment type="line" pos:line="67" pos:column="9">/// &lt;paramref name="use"&gt;given type use&lt;/paramref&gt; is a built-in type.</comment>
        <comment type="line" pos:line="68" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="69" pos:column="9">/// &lt;param name="use"&gt;The type use to test&lt;/param&gt;</comment>
        <comment type="line" pos:line="70" pos:column="9">/// &lt;returns&gt;true if this is a built-in type; false otherwise&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="71" pos:column="9">public</specifier> <specifier pos:line="71" pos:column="16">static</specifier> <name pos:line="71" pos:column="23">bool</name></type> <name pos:line="71" pos:column="28">IsBuiltIn</name><parameter_list pos:line="71" pos:column="37">(<param><decl><type><name pos:line="71" pos:column="38">TypeUse</name></type> <name pos:line="71" pos:column="46">use</name></decl></param>)</parameter_list> <block pos:line="71" pos:column="51">{
            <if pos:line="72" pos:column="13">if<condition pos:line="72" pos:column="15">(<expr><name pos:line="72" pos:column="16">use</name> <op:operator pos:line="72" pos:column="20">==</op:operator> <name pos:line="72" pos:column="23">null</name></expr>)</condition><then pos:line="72" pos:column="28">
                <throw pos:line="73" pos:column="17">throw <expr><op:operator pos:line="73" pos:column="23">new</op:operator> <call><name pos:line="73" pos:column="27">ArgumentNullException</name><argument_list pos:line="73" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="73" pos:column="49">"use"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <switch pos:line="75" pos:column="13">switch<condition pos:line="75" pos:column="19">(<expr><name><name pos:line="75" pos:column="20">use</name><op:operator pos:line="75" pos:column="23">.</op:operator><name pos:line="75" pos:column="24">ProgrammingLanguage</name></name></expr>)</condition> <block pos:line="75" pos:column="45">{
                <case pos:line="76" pos:column="17">case <expr><name><name pos:line="76" pos:column="22">Language</name><op:operator pos:line="76" pos:column="30">.</op:operator><name pos:line="76" pos:column="31">CPlusPlus</name></name></expr>:
                    <return pos:line="77" pos:column="21">return <expr><call><name pos:line="77" pos:column="28">IsCppBuiltIn</name><argument_list pos:line="77" pos:column="40">(<argument><expr><name><name pos:line="77" pos:column="41">use</name><op:operator pos:line="77" pos:column="44">.</op:operator><name pos:line="77" pos:column="45">Name</name></name></expr></argument>)</argument_list></call></expr>;</return>

                </case><case pos:line="79" pos:column="17">case <expr><name><name pos:line="79" pos:column="22">Language</name><op:operator pos:line="79" pos:column="30">.</op:operator><name pos:line="79" pos:column="31">CSharp</name></name></expr>:
                    <return pos:line="80" pos:column="21">return <expr><call><name pos:line="80" pos:column="28">IsCSharpBuiltIn</name><argument_list pos:line="80" pos:column="43">(<argument><expr><name><name pos:line="80" pos:column="44">use</name><op:operator pos:line="80" pos:column="47">.</op:operator><name pos:line="80" pos:column="48">Name</name></name></expr></argument>)</argument_list></call></expr>;</return>

                </case><case pos:line="82" pos:column="17">case <expr><name><name pos:line="82" pos:column="22">Language</name><op:operator pos:line="82" pos:column="30">.</op:operator><name pos:line="82" pos:column="31">Java</name></name></expr>:
                    <return pos:line="83" pos:column="21">return <expr><call><name pos:line="83" pos:column="28">IsJavaBuiltIn</name><argument_list pos:line="83" pos:column="41">(<argument><expr><name><name pos:line="83" pos:column="42">use</name><op:operator pos:line="83" pos:column="45">.</op:operator><name pos:line="83" pos:column="46">Name</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </case>}</block></switch>
            <return pos:line="85" pos:column="13">return <expr><lit:literal type="boolean" pos:line="85" pos:column="20">false</lit:literal></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="88" pos:column="9">private</specifier> <specifier pos:line="88" pos:column="17">static</specifier> <name pos:line="88" pos:column="24">bool</name></type> <name pos:line="88" pos:column="29">IsCppBuiltIn</name><parameter_list pos:line="88" pos:column="41">(<param><decl><type><name pos:line="88" pos:column="42">string</name></type> <name pos:line="88" pos:column="49">name</name></decl></param>)</parameter_list> <block pos:line="88" pos:column="55">{
            <decl_stmt><decl><type><name pos:line="89" pos:column="13">var</name></type> <name pos:line="89" pos:column="17">parts</name> <init pos:line="89" pos:column="23">= <expr><call><name><name pos:line="89" pos:column="25">name</name><op:operator pos:line="89" pos:column="29">.</op:operator><name pos:line="89" pos:column="30">Split</name></name><argument_list pos:line="89" pos:column="35">(<argument><expr><op:operator pos:line="89" pos:column="36">(</op:operator><name><name pos:line="89" pos:column="37">char</name><index pos:line="89" pos:column="41">[]</index></name><op:operator pos:line="89" pos:column="43">)</op:operator> <name pos:line="89" pos:column="45">null</name></expr></argument>, <argument><expr><name><name pos:line="89" pos:column="51">StringSplitOptions</name><op:operator pos:line="89" pos:column="69">.</op:operator><name pos:line="89" pos:column="70">RemoveEmptyEntries</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="90" pos:column="13">return <expr><call><name><name pos:line="90" pos:column="20">parts</name><op:operator pos:line="90" pos:column="25">.</op:operator><name pos:line="90" pos:column="26">All</name></name><argument_list pos:line="90" pos:column="29">(<argument><expr><lambda><name pos:line="90" pos:column="30">p</name> <op:operator pos:line="90" pos:column="32">=&gt;</op:operator> <call><name><name pos:line="90" pos:column="35">cppBuiltInParts</name><op:operator pos:line="90" pos:column="50">.</op:operator><name pos:line="90" pos:column="51">Contains</name></name><argument_list pos:line="90" pos:column="59">(<argument><expr><name pos:line="90" pos:column="60">p</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="93" pos:column="9">private</specifier> <specifier pos:line="93" pos:column="17">static</specifier> <name pos:line="93" pos:column="24">bool</name></type> <name pos:line="93" pos:column="29">IsCSharpBuiltIn</name><parameter_list pos:line="93" pos:column="44">(<param><decl><type><name pos:line="93" pos:column="45">string</name></type> <name pos:line="93" pos:column="52">name</name></decl></param>)</parameter_list> <block pos:line="93" pos:column="58">{
            <return pos:line="94" pos:column="13">return <expr><call><name><name pos:line="94" pos:column="20">csharpBuiltIns</name><op:operator pos:line="94" pos:column="34">.</op:operator><name pos:line="94" pos:column="35">Contains</name></name><argument_list pos:line="94" pos:column="43">(<argument><expr><name pos:line="94" pos:column="44">name</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="97" pos:column="9">private</specifier> <specifier pos:line="97" pos:column="17">static</specifier> <name pos:line="97" pos:column="24">bool</name></type> <name pos:line="97" pos:column="29">IsJavaBuiltIn</name><parameter_list pos:line="97" pos:column="42">(<param><decl><type><name pos:line="97" pos:column="43">string</name></type> <name pos:line="97" pos:column="50">name</name></decl></param>)</parameter_list> <block pos:line="97" pos:column="56">{
            <return pos:line="98" pos:column="13">return <expr><call><name><name pos:line="98" pos:column="20">javaBuiltIns</name><op:operator pos:line="98" pos:column="32">.</op:operator><name pos:line="98" pos:column="33">Contains</name></name><argument_list pos:line="98" pos:column="41">(<argument><expr><name pos:line="98" pos:column="42">name</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
