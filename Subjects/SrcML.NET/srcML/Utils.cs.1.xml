<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\VisualStudio\ABB.SrcML.VisualStudio.SrcMLService.IntegrationTests\IntegrationTest Library\Utils.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">IO</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Text</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Reflection</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Diagnostics</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">Collections</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">System</name><op:operator pos:line="7" pos:column="13">.</op:operator><name pos:line="7" pos:column="14">Collections</name><op:operator pos:line="7" pos:column="25">.</op:operator><name pos:line="7" pos:column="26">Generic</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">System</name><op:operator pos:line="8" pos:column="13">.</op:operator><name pos:line="8" pos:column="14">ComponentModel</name><op:operator pos:line="8" pos:column="28">.</op:operator><name pos:line="8" pos:column="29">Design</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">System</name><op:operator pos:line="9" pos:column="13">.</op:operator><name pos:line="9" pos:column="14">Runtime</name><op:operator pos:line="9" pos:column="21">.</op:operator><name pos:line="9" pos:column="22">InteropServices</name></name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">Microsoft</name><op:operator pos:line="10" pos:column="16">.</op:operator><name pos:line="10" pos:column="17">VisualStudio</name><op:operator pos:line="10" pos:column="29">.</op:operator><name pos:line="10" pos:column="30">Shell</name><op:operator pos:line="10" pos:column="35">.</op:operator><name pos:line="10" pos:column="36">Interop</name></name>;</using>
<using pos:line="11" pos:column="1">using <name><name pos:line="11" pos:column="7">Microsoft</name><op:operator pos:line="11" pos:column="16">.</op:operator><name pos:line="11" pos:column="17">VisualStudio</name><op:operator pos:line="11" pos:column="29">.</op:operator><name pos:line="11" pos:column="30">Shell</name></name>;</using>
<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">EnvDTE</name>;</using>
<using pos:line="13" pos:column="1">using <name pos:line="13" pos:column="7">EnvDTE80</name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">Microsoft</name><op:operator pos:line="14" pos:column="16">.</op:operator><name pos:line="14" pos:column="17">Win32</name></name>;</using>
<using pos:line="15" pos:column="1">using <name pos:line="15" pos:column="7">IOleServiceProvider</name> <init pos:line="15" pos:column="27">= <expr><name><name pos:line="15" pos:column="29">Microsoft</name><op:operator pos:line="15" pos:column="38">.</op:operator><name pos:line="15" pos:column="39">VisualStudio</name><op:operator pos:line="15" pos:column="51">.</op:operator><name pos:line="15" pos:column="52">OLE</name><op:operator pos:line="15" pos:column="55">.</op:operator><name pos:line="15" pos:column="56">Interop</name><op:operator pos:line="15" pos:column="63">.</op:operator><name pos:line="15" pos:column="64">IServiceProvider</name></name></expr></init>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">Microsoft</name><op:operator pos:line="16" pos:column="16">.</op:operator><name pos:line="16" pos:column="17">VisualStudio</name><op:operator pos:line="16" pos:column="29">.</op:operator><name pos:line="16" pos:column="30">TestTools</name><op:operator pos:line="16" pos:column="39">.</op:operator><name pos:line="16" pos:column="40">UnitTesting</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">Microsoft</name><op:operator pos:line="17" pos:column="16">.</op:operator><name pos:line="17" pos:column="17">VSSDK</name><op:operator pos:line="17" pos:column="22">.</op:operator><name pos:line="17" pos:column="23">Tools</name><op:operator pos:line="17" pos:column="28">.</op:operator><name pos:line="17" pos:column="29">VsIdeTesting</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">Microsoft</name><op:operator pos:line="18" pos:column="16">.</op:operator><name pos:line="18" pos:column="17">VisualStudio</name></name>;</using>

<namespace pos:line="20" pos:column="1">namespace <name><name pos:line="20" pos:column="11">Microsoft</name><op:operator pos:line="20" pos:column="20">.</op:operator><name pos:line="20" pos:column="21">VsSDK</name><op:operator pos:line="20" pos:column="26">.</op:operator><name pos:line="20" pos:column="27">IntegrationTestLibrary</name></name> <block pos:line="20" pos:column="50">{
    <comment type="line" pos:line="21" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="22" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="23" pos:column="5">public</specifier> class <name pos:line="23" pos:column="18">TestUtils</name> <block pos:line="23" pos:column="28">{

        <cpp:region pos:line="25" pos:column="9">#<cpp:directive pos:line="25" pos:column="10">region</cpp:directive> Methods: Handling embedded resources</cpp:region>
        <comment type="line" pos:line="26" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="27" pos:column="9">/// Gets the embedded file identified by the resource name, and converts the</comment>
        <comment type="line" pos:line="28" pos:column="9">/// file into a string.</comment>
        <comment type="line" pos:line="29" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="30" pos:column="9">/// &lt;param name="resourceName"&gt;In VS, is DefaultNamespace.FileName?&lt;/param&gt;</comment>
        <comment type="line" pos:line="31" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="32" pos:column="9">public</specifier> <specifier pos:line="32" pos:column="16">static</specifier> <name pos:line="32" pos:column="23">string</name></type> <name pos:line="32" pos:column="30">GetEmbeddedStringResource</name><parameter_list pos:line="32" pos:column="55">(<param><decl><type><name pos:line="32" pos:column="56">Assembly</name></type> <name pos:line="32" pos:column="65">assembly</name></decl></param>, <param><decl><type><name pos:line="32" pos:column="75">string</name></type> <name pos:line="32" pos:column="82">resourceName</name></decl></param>)</parameter_list> <block pos:line="32" pos:column="96">{
            <decl_stmt><decl><type><name pos:line="33" pos:column="13">string</name></type> <name pos:line="33" pos:column="20">result</name> <init pos:line="33" pos:column="27">= <expr><name pos:line="33" pos:column="29">null</name></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="35" pos:column="13">// Use the .NET procedure for loading a file embedded in the assembly</comment>
            <decl_stmt><decl><type><name pos:line="36" pos:column="13">Stream</name></type> <name pos:line="36" pos:column="20">stream</name> <init pos:line="36" pos:column="27">= <expr><call><name><name pos:line="36" pos:column="29">assembly</name><op:operator pos:line="36" pos:column="37">.</op:operator><name pos:line="36" pos:column="38">GetManifestResourceStream</name></name><argument_list pos:line="36" pos:column="63">(<argument><expr><name pos:line="36" pos:column="64">resourceName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="37" pos:column="13">if<condition pos:line="37" pos:column="15">(<expr><name pos:line="37" pos:column="16">stream</name> <op:operator pos:line="37" pos:column="23">!=</op:operator> <name pos:line="37" pos:column="26">null</name></expr>)</condition><then pos:line="37" pos:column="31"> <block pos:line="37" pos:column="32">{
                <comment type="line" pos:line="38" pos:column="17">// Convert bytes to string</comment>
                <decl_stmt><decl><type><name pos:line="39" pos:column="17">byte</name><index pos:line="39" pos:column="21">[]</index></type> <name pos:line="39" pos:column="24">fileContentsAsBytes</name> <init pos:line="39" pos:column="44">= <expr><op:operator pos:line="39" pos:column="46">new</op:operator> <name><name pos:line="39" pos:column="50">byte</name><index pos:line="39" pos:column="54">[<expr><name><name pos:line="39" pos:column="55">stream</name><op:operator pos:line="39" pos:column="61">.</op:operator><name pos:line="39" pos:column="62">Length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="40" pos:column="17">stream</name><op:operator pos:line="40" pos:column="23">.</op:operator><name pos:line="40" pos:column="24">Read</name></name><argument_list pos:line="40" pos:column="28">(<argument><expr><name pos:line="40" pos:column="29">fileContentsAsBytes</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="40" pos:column="50">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="40" pos:column="53">(</op:operator><name pos:line="40" pos:column="54">int</name><op:operator pos:line="40" pos:column="57">)</op:operator><name><name pos:line="40" pos:column="58">stream</name><op:operator pos:line="40" pos:column="64">.</op:operator><name pos:line="40" pos:column="65">Length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="41" pos:column="17">result</name> <op:operator pos:line="41" pos:column="24">=</op:operator> <call><name><name pos:line="41" pos:column="26">Encoding</name><op:operator pos:line="41" pos:column="34">.</op:operator><name pos:line="41" pos:column="35">Default</name><op:operator pos:line="41" pos:column="42">.</op:operator><name pos:line="41" pos:column="43">GetString</name></name><argument_list pos:line="41" pos:column="52">(<argument><expr><name pos:line="41" pos:column="53">fileContentsAsBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="42" pos:column="15">else <block pos:line="42" pos:column="20">{
                <comment type="line" pos:line="43" pos:column="17">// Embedded resource not found - list available resources</comment>
                <expr_stmt><expr><call><name><name pos:line="44" pos:column="17">Debug</name><op:operator pos:line="44" pos:column="22">.</op:operator><name pos:line="44" pos:column="23">WriteLine</name></name><argument_list pos:line="44" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="44" pos:column="33">"Unable to find the embedded resource file '"</lit:literal> <op:operator pos:line="44" pos:column="79">+</op:operator> <name pos:line="44" pos:column="81">resourceName</name> <op:operator pos:line="44" pos:column="94">+</op:operator> <lit:literal type="string" pos:line="44" pos:column="96">"'."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="45" pos:column="17">Debug</name><op:operator pos:line="45" pos:column="22">.</op:operator><name pos:line="45" pos:column="23">WriteLine</name></name><argument_list pos:line="45" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="45" pos:column="33">"  Available resources:"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <foreach pos:line="46" pos:column="17">foreach(<init><decl><type><name pos:line="46" pos:column="25">string</name></type> <name pos:line="46" pos:column="32">aResourceName</name> <range pos:line="46" pos:column="46">in <expr><call><name><name pos:line="46" pos:column="49">assembly</name><op:operator pos:line="46" pos:column="57">.</op:operator><name pos:line="46" pos:column="58">GetManifestResourceNames</name></name><argument_list pos:line="46" pos:column="82">()</argument_list></call></expr></range></decl></init>) <block pos:line="46" pos:column="86">{
                    <expr_stmt><expr><call><name><name pos:line="47" pos:column="21">Debug</name><op:operator pos:line="47" pos:column="26">.</op:operator><name pos:line="47" pos:column="27">WriteLine</name></name><argument_list pos:line="47" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="47" pos:column="37">"    "</lit:literal> <op:operator pos:line="47" pos:column="44">+</op:operator> <name pos:line="47" pos:column="46">aResourceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
            }</block></else></if>

            <return pos:line="51" pos:column="13">return <expr><name pos:line="51" pos:column="20">result</name></expr>;</return>
        }</block></function>
        <comment type="line" pos:line="53" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="54" pos:column="9">/// </comment>
        <comment type="line" pos:line="55" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="56" pos:column="9">/// &lt;param name="embeddedResourceName"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="57" pos:column="9">/// &lt;param name="baseFileName"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="58" pos:column="9">/// &lt;param name="fileExtension"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="59" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="60" pos:column="9">public</specifier> <specifier pos:line="60" pos:column="16">static</specifier> <name pos:line="60" pos:column="23">void</name></type> <name pos:line="60" pos:column="28">WriteEmbeddedResourceToFile</name><parameter_list pos:line="60" pos:column="55">(<param><decl><type><name pos:line="60" pos:column="56">Assembly</name></type> <name pos:line="60" pos:column="65">assembly</name></decl></param>, <param><decl><type><name pos:line="60" pos:column="75">string</name></type> <name pos:line="60" pos:column="82">embeddedResourceName</name></decl></param>, <param><decl><type><name pos:line="60" pos:column="104">string</name></type> <name pos:line="60" pos:column="111">fileName</name></decl></param>)</parameter_list> <block pos:line="60" pos:column="121">{
            <comment type="line" pos:line="61" pos:column="13">// Get file contents</comment>
            <decl_stmt><decl><type><name pos:line="62" pos:column="13">string</name></type> <name pos:line="62" pos:column="20">fileContents</name> <init pos:line="62" pos:column="33">= <expr><call><name pos:line="62" pos:column="35">GetEmbeddedStringResource</name><argument_list pos:line="62" pos:column="60">(<argument><expr><name pos:line="62" pos:column="61">assembly</name></expr></argument>, <argument><expr><name pos:line="62" pos:column="71">embeddedResourceName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="63" pos:column="13">if<condition pos:line="63" pos:column="15">(<expr><name pos:line="63" pos:column="16">fileContents</name> <op:operator pos:line="63" pos:column="29">==</op:operator> <name pos:line="63" pos:column="32">null</name></expr>)</condition><then pos:line="63" pos:column="37">
                <throw pos:line="64" pos:column="17">throw <expr><op:operator pos:line="64" pos:column="23">new</op:operator> <call><name pos:line="64" pos:column="27">ApplicationException</name><argument_list pos:line="64" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="64" pos:column="48">"Failed to get embedded resource '"</lit:literal> <op:operator pos:line="64" pos:column="84">+</op:operator> <name pos:line="64" pos:column="86">embeddedResourceName</name> <op:operator pos:line="64" pos:column="107">+</op:operator> <lit:literal type="string" pos:line="64" pos:column="109">"' from assembly '"</lit:literal> <op:operator pos:line="64" pos:column="129">+</op:operator> <name><name pos:line="64" pos:column="131">assembly</name><op:operator pos:line="64" pos:column="139">.</op:operator><name pos:line="64" pos:column="140">FullName</name></name></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <comment type="line" pos:line="66" pos:column="13">// Write to file</comment>
            <decl_stmt><decl><type><name pos:line="67" pos:column="13">StreamWriter</name></type> <name pos:line="67" pos:column="26">sw</name> <init pos:line="67" pos:column="29">= <expr><op:operator pos:line="67" pos:column="31">new</op:operator> <call><name pos:line="67" pos:column="35">StreamWriter</name><argument_list pos:line="67" pos:column="47">(<argument><expr><name pos:line="67" pos:column="48">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="68" pos:column="13">sw</name><op:operator pos:line="68" pos:column="15">.</op:operator><name pos:line="68" pos:column="16">Write</name></name><argument_list pos:line="68" pos:column="21">(<argument><expr><name pos:line="68" pos:column="22">fileContents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="69" pos:column="13">sw</name><op:operator pos:line="69" pos:column="15">.</op:operator><name pos:line="69" pos:column="16">Close</name></name><argument_list pos:line="69" pos:column="21">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="72" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="73" pos:column="9">/// Writes an embedded resource to a file.</comment>
        <comment type="line" pos:line="74" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="75" pos:column="9">/// &lt;param name="assembly"&gt;The name of the assembly that the embedded resource is defined.&lt;/param&gt;</comment>
        <comment type="line" pos:line="76" pos:column="9">/// &lt;param name="embeddedResourceName"&gt;The name of the embedded resource.&lt;/param&gt;</comment>
        <comment type="line" pos:line="77" pos:column="9">/// &lt;param name="fileName"&gt;The file to write the embedded resource's content.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="78" pos:column="9">public</specifier> <specifier pos:line="78" pos:column="16">static</specifier> <name pos:line="78" pos:column="23">void</name></type> <name pos:line="78" pos:column="28">WriteEmbeddedResourceToBinaryFile</name><parameter_list pos:line="78" pos:column="61">(<param><decl><type><name pos:line="78" pos:column="62">Assembly</name></type> <name pos:line="78" pos:column="71">assembly</name></decl></param>, <param><decl><type><name pos:line="78" pos:column="81">string</name></type> <name pos:line="78" pos:column="88">embeddedResourceName</name></decl></param>, <param><decl><type><name pos:line="78" pos:column="110">string</name></type> <name pos:line="78" pos:column="117">fileName</name></decl></param>)</parameter_list> <block pos:line="78" pos:column="127">{
            <comment type="line" pos:line="79" pos:column="13">// Get file contents</comment>
            <decl_stmt><decl><type><name pos:line="80" pos:column="13">Stream</name></type> <name pos:line="80" pos:column="20">stream</name> <init pos:line="80" pos:column="27">= <expr><call><name><name pos:line="80" pos:column="29">assembly</name><op:operator pos:line="80" pos:column="37">.</op:operator><name pos:line="80" pos:column="38">GetManifestResourceStream</name></name><argument_list pos:line="80" pos:column="63">(<argument><expr><name pos:line="80" pos:column="64">embeddedResourceName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="81" pos:column="13">if<condition pos:line="81" pos:column="15">(<expr><name pos:line="81" pos:column="16">stream</name> <op:operator pos:line="81" pos:column="23">==</op:operator> <name pos:line="81" pos:column="26">null</name></expr>)</condition><then pos:line="81" pos:column="31">
                <throw pos:line="82" pos:column="17">throw <expr><op:operator pos:line="82" pos:column="23">new</op:operator> <call><name pos:line="82" pos:column="27">InvalidOperationException</name><argument_list pos:line="82" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="82" pos:column="53">"Failed to get embedded resource '"</lit:literal> <op:operator pos:line="82" pos:column="89">+</op:operator> <name pos:line="82" pos:column="91">embeddedResourceName</name> <op:operator pos:line="82" pos:column="112">+</op:operator> <lit:literal type="string" pos:line="82" pos:column="114">"' from assembly '"</lit:literal> <op:operator pos:line="82" pos:column="134">+</op:operator> <name><name pos:line="82" pos:column="136">assembly</name><op:operator pos:line="82" pos:column="144">.</op:operator><name pos:line="82" pos:column="145">FullName</name></name></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <comment type="line" pos:line="84" pos:column="13">// Write to file</comment>
            <decl_stmt><decl><type><name pos:line="85" pos:column="13">BinaryWriter</name></type> <name pos:line="85" pos:column="26">sw</name> <init pos:line="85" pos:column="29">= <expr><name pos:line="85" pos:column="31">null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="86" pos:column="13">FileStream</name></type> <name pos:line="86" pos:column="24">fs</name> <init pos:line="86" pos:column="27">= <expr><name pos:line="86" pos:column="29">null</name></expr></init></decl>;</decl_stmt>
            <try pos:line="87" pos:column="13">try <block pos:line="87" pos:column="17">{
                <decl_stmt><decl><type><name pos:line="88" pos:column="17">byte</name><index pos:line="88" pos:column="21">[]</index></type> <name pos:line="88" pos:column="24">fileContentsAsBytes</name> <init pos:line="88" pos:column="44">= <expr><op:operator pos:line="88" pos:column="46">new</op:operator> <name><name pos:line="88" pos:column="50">byte</name><index pos:line="88" pos:column="54">[<expr><name><name pos:line="88" pos:column="55">stream</name><op:operator pos:line="88" pos:column="61">.</op:operator><name pos:line="88" pos:column="62">Length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="89" pos:column="17">stream</name><op:operator pos:line="89" pos:column="23">.</op:operator><name pos:line="89" pos:column="24">Read</name></name><argument_list pos:line="89" pos:column="28">(<argument><expr><name pos:line="89" pos:column="29">fileContentsAsBytes</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="89" pos:column="50">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="89" pos:column="53">(</op:operator><name pos:line="89" pos:column="54">int</name><op:operator pos:line="89" pos:column="57">)</op:operator><name><name pos:line="89" pos:column="58">stream</name><op:operator pos:line="89" pos:column="64">.</op:operator><name pos:line="89" pos:column="65">Length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="91" pos:column="17">FileMode</name></type> <name pos:line="91" pos:column="26">mode</name> <init pos:line="91" pos:column="31">= <expr><name><name pos:line="91" pos:column="33">FileMode</name><op:operator pos:line="91" pos:column="41">.</op:operator><name pos:line="91" pos:column="42">CreateNew</name></name></expr></init></decl>;</decl_stmt>
                <if pos:line="92" pos:column="17">if<condition pos:line="92" pos:column="19">(<expr><call><name><name pos:line="92" pos:column="20">File</name><op:operator pos:line="92" pos:column="24">.</op:operator><name pos:line="92" pos:column="25">Exists</name></name><argument_list pos:line="92" pos:column="31">(<argument><expr><name pos:line="92" pos:column="32">fileName</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="92" pos:column="42"> <block pos:line="92" pos:column="43">{
                    <expr_stmt><expr><name pos:line="93" pos:column="21">mode</name> <op:operator pos:line="93" pos:column="26">=</op:operator> <name><name pos:line="93" pos:column="28">FileMode</name><op:operator pos:line="93" pos:column="36">.</op:operator><name pos:line="93" pos:column="37">Truncate</name></name></expr>;</expr_stmt>
                }</block></then></if>

                <expr_stmt><expr><name pos:line="96" pos:column="17">fs</name> <op:operator pos:line="96" pos:column="20">=</op:operator> <op:operator pos:line="96" pos:column="22">new</op:operator> <call><name pos:line="96" pos:column="26">FileStream</name><argument_list pos:line="96" pos:column="36">(<argument><expr><name pos:line="96" pos:column="37">fileName</name></expr></argument>, <argument><expr><name pos:line="96" pos:column="47">mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name pos:line="98" pos:column="17">sw</name> <op:operator pos:line="98" pos:column="20">=</op:operator> <op:operator pos:line="98" pos:column="22">new</op:operator> <call><name pos:line="98" pos:column="26">BinaryWriter</name><argument_list pos:line="98" pos:column="38">(<argument><expr><name pos:line="98" pos:column="39">fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="99" pos:column="17">sw</name><op:operator pos:line="99" pos:column="19">.</op:operator><name pos:line="99" pos:column="20">Write</name></name><argument_list pos:line="99" pos:column="25">(<argument><expr><name pos:line="99" pos:column="26">fileContentsAsBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <finally pos:line="100" pos:column="15">finally <block pos:line="100" pos:column="23">{
                <if pos:line="101" pos:column="17">if<condition pos:line="101" pos:column="19">(<expr><name pos:line="101" pos:column="20">fs</name> <op:operator pos:line="101" pos:column="23">!=</op:operator> <name pos:line="101" pos:column="26">null</name></expr>)</condition><then pos:line="101" pos:column="31"> <block pos:line="101" pos:column="32">{
                    <expr_stmt><expr><call><name><name pos:line="102" pos:column="21">fs</name><op:operator pos:line="102" pos:column="23">.</op:operator><name pos:line="102" pos:column="24">Close</name></name><argument_list pos:line="102" pos:column="29">()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <if pos:line="104" pos:column="17">if<condition pos:line="104" pos:column="19">(<expr><name pos:line="104" pos:column="20">sw</name> <op:operator pos:line="104" pos:column="23">!=</op:operator> <name pos:line="104" pos:column="26">null</name></expr>)</condition><then pos:line="104" pos:column="31"> <block pos:line="104" pos:column="32">{
                    <expr_stmt><expr><call><name><name pos:line="105" pos:column="21">sw</name><op:operator pos:line="105" pos:column="23">.</op:operator><name pos:line="105" pos:column="24">Close</name></name><argument_list pos:line="105" pos:column="29">()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></finally></try>
        }</block></function>

        <cpp:endregion pos:line="110" pos:column="9">#<cpp:directive pos:line="110" pos:column="10">endregion</cpp:directive></cpp:endregion>

        <cpp:region pos:line="112" pos:column="9">#<cpp:directive pos:line="112" pos:column="10">region</cpp:directive> Methods: Handling temporary files and directories</cpp:region>
        <comment type="line" pos:line="113" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="114" pos:column="9">/// Returns the first available file name on the form</comment>
        <comment type="line" pos:line="115" pos:column="9">///   [baseFileName]i.[extension]</comment>
        <comment type="line" pos:line="116" pos:column="9">/// where [i] starts at 1 and increases until there is an available file name</comment>
        <comment type="line" pos:line="117" pos:column="9">/// in the given directory. Also creates an empty file with that name to mark</comment>
        <comment type="line" pos:line="118" pos:column="9">/// that file as occupied.</comment>
        <comment type="line" pos:line="119" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="120" pos:column="9">/// &lt;param name="directory"&gt;Directory that the file should live in.&lt;/param&gt;</comment>
        <comment type="line" pos:line="121" pos:column="9">/// &lt;param name="baseFileName"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="122" pos:column="9">/// &lt;param name="extension"&gt;may be null, in which case the .[extension] part</comment>
        <comment type="line" pos:line="123" pos:column="9">/// is not added.&lt;/param&gt;</comment>
        <comment type="line" pos:line="124" pos:column="9">/// &lt;returns&gt;Full file name.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="125" pos:column="9">public</specifier> <specifier pos:line="125" pos:column="16">static</specifier> <name pos:line="125" pos:column="23">string</name></type> <name pos:line="125" pos:column="30">GetNewFileName</name><parameter_list pos:line="125" pos:column="44">(<param><decl><type><name pos:line="125" pos:column="45">string</name></type> <name pos:line="125" pos:column="52">directory</name></decl></param>, <param><decl><type><name pos:line="125" pos:column="63">string</name></type> <name pos:line="125" pos:column="70">baseFileName</name></decl></param>, <param><decl><type><name pos:line="125" pos:column="84">string</name></type> <name pos:line="125" pos:column="91">extension</name></decl></param>)</parameter_list> <block pos:line="125" pos:column="102">{
            <comment type="line" pos:line="126" pos:column="13">// Get the new file name</comment>
            <decl_stmt><decl><type><name pos:line="127" pos:column="13">string</name></type> <name pos:line="127" pos:column="20">fileName</name> <init pos:line="127" pos:column="29">= <expr><call><name pos:line="127" pos:column="31">GetNewFileOrDirectoryNameWithoutCreatingAnything</name><argument_list pos:line="127" pos:column="79">(<argument><expr><name pos:line="127" pos:column="80">directory</name></expr></argument>, <argument><expr><name pos:line="127" pos:column="91">baseFileName</name></expr></argument>, <argument><expr><name pos:line="127" pos:column="105">extension</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="129" pos:column="13">// Create an empty file to mark it as taken</comment>
            <decl_stmt><decl><type><name pos:line="130" pos:column="13">StreamWriter</name></type> <name pos:line="130" pos:column="26">sw</name> <init pos:line="130" pos:column="29">= <expr><op:operator pos:line="130" pos:column="31">new</op:operator> <call><name pos:line="130" pos:column="35">StreamWriter</name><argument_list pos:line="130" pos:column="47">(<argument><expr><name pos:line="130" pos:column="48">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="132" pos:column="13">sw</name><op:operator pos:line="132" pos:column="15">.</op:operator><name pos:line="132" pos:column="16">Write</name></name><argument_list pos:line="132" pos:column="21">(<argument><expr><lit:literal type="string" pos:line="132" pos:column="22">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="133" pos:column="13">sw</name><op:operator pos:line="133" pos:column="15">.</op:operator><name pos:line="133" pos:column="16">Close</name></name><argument_list pos:line="133" pos:column="21">()</argument_list></call></expr>;</expr_stmt>
            <return pos:line="134" pos:column="13">return <expr><name pos:line="134" pos:column="20">fileName</name></expr>;</return>
        }</block></function>
        <comment type="line" pos:line="136" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="137" pos:column="9">/// Returns the first available directory name on the form</comment>
        <comment type="line" pos:line="138" pos:column="9">///   [baseDirectoryName]i</comment>
        <comment type="line" pos:line="139" pos:column="9">/// where [i] starts at 1 and increases until there is an available directory name</comment>
        <comment type="line" pos:line="140" pos:column="9">/// in the given directory. Also creates the directory to mark it as occupied.</comment>
        <comment type="line" pos:line="141" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="142" pos:column="9">/// &lt;param name="directory"&gt;Directory that the file should live in.&lt;/param&gt;</comment>
        <comment type="line" pos:line="143" pos:column="9">/// &lt;param name="baseDirectoryName"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="144" pos:column="9">/// &lt;returns&gt;Full directory name.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="145" pos:column="9">public</specifier> <specifier pos:line="145" pos:column="16">static</specifier> <name pos:line="145" pos:column="23">string</name></type> <name pos:line="145" pos:column="30">GetNewDirectoryName</name><parameter_list pos:line="145" pos:column="49">(<param><decl><type><name pos:line="145" pos:column="50">string</name></type> <name pos:line="145" pos:column="57">directory</name></decl></param>, <param><decl><type><name pos:line="145" pos:column="68">string</name></type> <name pos:line="145" pos:column="75">baseDirectoryName</name></decl></param>)</parameter_list> <block pos:line="145" pos:column="94">{
            <comment type="line" pos:line="146" pos:column="13">// Get the new file name</comment>
            <decl_stmt><decl><type><name pos:line="147" pos:column="13">string</name></type> <name pos:line="147" pos:column="20">directoryName</name> <init pos:line="147" pos:column="34">= <expr><call><name pos:line="147" pos:column="36">GetNewFileOrDirectoryNameWithoutCreatingAnything</name><argument_list pos:line="147" pos:column="84">(<argument><expr><name pos:line="147" pos:column="85">directory</name></expr></argument>, <argument><expr><name pos:line="147" pos:column="96">baseDirectoryName</name></expr></argument>, <argument><expr><name pos:line="147" pos:column="115">null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="149" pos:column="13">// Create an empty directory to make it as occupied</comment>
            <expr_stmt><expr><call><name><name pos:line="150" pos:column="13">Directory</name><op:operator pos:line="150" pos:column="22">.</op:operator><name pos:line="150" pos:column="23">CreateDirectory</name></name><argument_list pos:line="150" pos:column="38">(<argument><expr><name pos:line="150" pos:column="39">directoryName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:line="152" pos:column="13">return <expr><name pos:line="152" pos:column="20">directoryName</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="155" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="156" pos:column="9">/// </comment>
        <comment type="line" pos:line="157" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="158" pos:column="9">/// &lt;param name="directory"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="159" pos:column="9">/// &lt;param name="baseFileName"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="160" pos:column="9">/// &lt;param name="extension"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="161" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="162" pos:column="9">private</specifier> <specifier pos:line="162" pos:column="17">static</specifier> <name pos:line="162" pos:column="24">string</name></type> <name pos:line="162" pos:column="31">GetNewFileOrDirectoryNameWithoutCreatingAnything</name><parameter_list pos:line="162" pos:column="79">(<param><decl><type><name pos:line="162" pos:column="80">string</name></type> <name pos:line="162" pos:column="87">directory</name></decl></param>, <param><decl><type><name pos:line="162" pos:column="98">string</name></type> <name pos:line="162" pos:column="105">baseFileName</name></decl></param>, <param><decl><type><name pos:line="162" pos:column="119">string</name></type> <name pos:line="162" pos:column="126">extension</name></decl></param>)</parameter_list> <block pos:line="162" pos:column="137">{
            <comment type="line" pos:line="163" pos:column="13">// - get a file name that we can use</comment>
            <decl_stmt><decl><type><name pos:line="164" pos:column="13">string</name></type> <name pos:line="164" pos:column="20">fileName</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="165" pos:column="13">int</name></type> <name pos:line="165" pos:column="17">i</name> <init pos:line="165" pos:column="19">= <expr><lit:literal type="number" pos:line="165" pos:column="21">1</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="167" pos:column="13">string</name></type> <name pos:line="167" pos:column="20">fullFileName</name> <init pos:line="167" pos:column="33">= <expr><name pos:line="167" pos:column="35">null</name></expr></init></decl>;</decl_stmt>
            <while pos:line="168" pos:column="13">while<condition pos:line="168" pos:column="18">(<expr><lit:literal type="boolean" pos:line="168" pos:column="19">true</lit:literal></expr>)</condition> <block pos:line="168" pos:column="25">{
                <comment type="line" pos:line="169" pos:column="17">// construct next file name</comment>
                <expr_stmt><expr><name pos:line="170" pos:column="17">fileName</name> <op:operator pos:line="170" pos:column="26">=</op:operator> <name pos:line="170" pos:column="28">baseFileName</name> <op:operator pos:line="170" pos:column="41">+</op:operator> <name pos:line="170" pos:column="43">i</name></expr>;</expr_stmt>
                <if pos:line="171" pos:column="17">if<condition pos:line="171" pos:column="19">(<expr><name pos:line="171" pos:column="20">extension</name> <op:operator pos:line="171" pos:column="30">!=</op:operator> <name pos:line="171" pos:column="33">null</name></expr>)</condition><then pos:line="171" pos:column="38">
                    <expr_stmt><expr><name pos:line="172" pos:column="21">fileName</name> <op:operator pos:line="172" pos:column="30">+=</op:operator> <lit:literal type="char" pos:line="172" pos:column="33">'.'</lit:literal> <op:operator pos:line="172" pos:column="37">+</op:operator> <name pos:line="172" pos:column="39">extension</name></expr>;</expr_stmt></then></if>

                <comment type="line" pos:line="174" pos:column="17">// check if that file exists in the directory</comment>
                <expr_stmt><expr><name pos:line="175" pos:column="17">fullFileName</name> <op:operator pos:line="175" pos:column="30">=</op:operator> <call><name><name pos:line="175" pos:column="32">Path</name><op:operator pos:line="175" pos:column="36">.</op:operator><name pos:line="175" pos:column="37">Combine</name></name><argument_list pos:line="175" pos:column="44">(<argument><expr><name pos:line="175" pos:column="45">directory</name></expr></argument>, <argument><expr><name pos:line="175" pos:column="56">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if pos:line="177" pos:column="17">if<condition pos:line="177" pos:column="19">(<expr><op:operator pos:line="177" pos:column="20">!</op:operator><call><name><name pos:line="177" pos:column="21">File</name><op:operator pos:line="177" pos:column="25">.</op:operator><name pos:line="177" pos:column="26">Exists</name></name><argument_list pos:line="177" pos:column="32">(<argument><expr><name pos:line="177" pos:column="33">fullFileName</name></expr></argument>)</argument_list></call> <op:operator pos:line="177" pos:column="47">&amp;&amp;</op:operator> <op:operator pos:line="177" pos:column="50">!</op:operator><call><name><name pos:line="177" pos:column="51">Directory</name><op:operator pos:line="177" pos:column="60">.</op:operator><name pos:line="177" pos:column="61">Exists</name></name><argument_list pos:line="177" pos:column="67">(<argument><expr><name pos:line="177" pos:column="68">fullFileName</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="177" pos:column="82">
                    <break pos:line="178" pos:column="21">break;</break></then>
                <else pos:line="179" pos:column="17">else
                    <expr_stmt><expr><name pos:line="180" pos:column="21">i</name><op:operator pos:line="180" pos:column="22">++</op:operator></expr>;</expr_stmt></else></if>
            }</block></while>

            <return pos:line="183" pos:column="13">return <expr><name pos:line="183" pos:column="20">fullFileName</name></expr>;</return>
        }</block></function>
        <cpp:endregion pos:line="185" pos:column="9">#<cpp:directive pos:line="185" pos:column="10">endregion</cpp:directive></cpp:endregion>

        <cpp:region pos:line="187" pos:column="9">#<cpp:directive pos:line="187" pos:column="10">region</cpp:directive> Methods: Handling solutions</cpp:region>
        <comment type="line" pos:line="188" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="189" pos:column="9">/// Closes the currently open solution (if any), and creates a new solution with the given name.</comment>
        <comment type="line" pos:line="190" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="191" pos:column="9">/// &lt;param name="solutionName"&gt;Name of new solution.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="192" pos:column="9">public</specifier> <name pos:line="192" pos:column="16">void</name></type> <name pos:line="192" pos:column="21">CreateEmptySolution</name><parameter_list pos:line="192" pos:column="40">(<param><decl><type><name pos:line="192" pos:column="41">string</name></type> <name pos:line="192" pos:column="48">directory</name></decl></param>, <param><decl><type><name pos:line="192" pos:column="59">string</name></type> <name pos:line="192" pos:column="66">solutionName</name></decl></param>)</parameter_list> <block pos:line="192" pos:column="80">{
            <expr_stmt><expr><call><name pos:line="193" pos:column="13">CloseCurrentSolution</name><argument_list pos:line="193" pos:column="33">(<argument><expr><name><name pos:line="193" pos:column="34">__VSSLNSAVEOPTIONS</name><op:operator pos:line="193" pos:column="52">.</op:operator><name pos:line="193" pos:column="53">SLNSAVEOPT_NoSave</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="195" pos:column="13">string</name></type> <name pos:line="195" pos:column="20">solutionDirectory</name> <init pos:line="195" pos:column="38">= <expr><call><name pos:line="195" pos:column="40">GetNewDirectoryName</name><argument_list pos:line="195" pos:column="59">(<argument><expr><name pos:line="195" pos:column="60">directory</name></expr></argument>, <argument><expr><name pos:line="195" pos:column="71">solutionName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="197" pos:column="13">// Create and force save solution</comment>
            <decl_stmt><decl><type><name pos:line="198" pos:column="13">IVsSolution</name></type> <name pos:line="198" pos:column="25">solutionService</name> <init pos:line="198" pos:column="41">= <expr><op:operator pos:line="198" pos:column="43">(</op:operator><name pos:line="198" pos:column="44">IVsSolution</name><op:operator pos:line="198" pos:column="55">)</op:operator><call><name><name pos:line="198" pos:column="56">VsIdeTestHostContext</name><op:operator pos:line="198" pos:column="76">.</op:operator><name pos:line="198" pos:column="77">ServiceProvider</name><op:operator pos:line="198" pos:column="92">.</op:operator><name pos:line="198" pos:column="93">GetService</name></name><argument_list pos:line="198" pos:column="103">(<argument><expr><call><name pos:line="198" pos:column="104">typeof</name><argument_list pos:line="198" pos:column="110">(<argument><expr><name pos:line="198" pos:column="111">IVsSolution</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="199" pos:column="13">solutionService</name><op:operator pos:line="199" pos:column="28">.</op:operator><name pos:line="199" pos:column="29">CreateSolution</name></name><argument_list pos:line="199" pos:column="43">(<argument><expr><name pos:line="199" pos:column="44">solutionDirectory</name></expr></argument>, <argument><expr><name pos:line="199" pos:column="63">solutionName</name></expr></argument>, <argument><expr><op:operator pos:line="199" pos:column="77">(</op:operator><name pos:line="199" pos:column="78">uint</name><op:operator pos:line="199" pos:column="82">)</op:operator><name><name pos:line="199" pos:column="83">__VSCREATESOLUTIONFLAGS</name><op:operator pos:line="199" pos:column="106">.</op:operator><name pos:line="199" pos:column="107">CSF_SILENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="200" pos:column="13">solutionService</name><op:operator pos:line="200" pos:column="28">.</op:operator><name pos:line="200" pos:column="29">SaveSolutionElement</name></name><argument_list pos:line="200" pos:column="48">(<argument><expr><op:operator pos:line="200" pos:column="49">(</op:operator><name pos:line="200" pos:column="50">uint</name><op:operator pos:line="200" pos:column="54">)</op:operator><name><name pos:line="200" pos:column="55">__VSSLNSAVEOPTIONS</name><op:operator pos:line="200" pos:column="73">.</op:operator><name pos:line="200" pos:column="74">SLNSAVEOPT_ForceSave</name></name></expr></argument>, <argument><expr><name pos:line="200" pos:column="96">null</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="200" pos:column="102">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="201" pos:column="13">DTE</name></type> <name pos:line="201" pos:column="17">dte</name> <init pos:line="201" pos:column="21">= <expr><name><name pos:line="201" pos:column="23">VsIdeTestHostContext</name><op:operator pos:line="201" pos:column="43">.</op:operator><name pos:line="201" pos:column="44">Dte</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="202" pos:column="13">Assert</name><op:operator pos:line="202" pos:column="19">.</op:operator><name pos:line="202" pos:column="20">AreEqual</name></name><argument_list pos:line="202" pos:column="28">(<argument><expr><name pos:line="202" pos:column="29">solutionName</name> <op:operator pos:line="202" pos:column="42">+</op:operator> <lit:literal type="string" pos:line="202" pos:column="44">".sln"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="202" pos:column="52">Path</name><op:operator pos:line="202" pos:column="56">.</op:operator><name pos:line="202" pos:column="57">GetFileName</name></name><argument_list pos:line="202" pos:column="68">(<argument><expr><name><name pos:line="202" pos:column="69">dte</name><op:operator pos:line="202" pos:column="72">.</op:operator><name pos:line="202" pos:column="73">Solution</name><op:operator pos:line="202" pos:column="81">.</op:operator><name pos:line="202" pos:column="82">FileName</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="202" pos:column="93">"Newly created solution has wrong Filename"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="205" pos:column="9">public</specifier> <name pos:line="205" pos:column="16">void</name></type> <name pos:line="205" pos:column="21">CloseCurrentSolution</name><parameter_list pos:line="205" pos:column="41">(<param><decl><type><name pos:line="205" pos:column="42">__VSSLNSAVEOPTIONS</name></type> <name pos:line="205" pos:column="61">saveoptions</name></decl></param>)</parameter_list> <block pos:line="205" pos:column="74">{
            <comment type="line" pos:line="206" pos:column="13">// Get solution service</comment>
            <decl_stmt><decl><type><name pos:line="207" pos:column="13">IVsSolution</name></type> <name pos:line="207" pos:column="25">solutionService</name> <init pos:line="207" pos:column="41">= <expr><op:operator pos:line="207" pos:column="43">(</op:operator><name pos:line="207" pos:column="44">IVsSolution</name><op:operator pos:line="207" pos:column="55">)</op:operator><call><name><name pos:line="207" pos:column="56">VsIdeTestHostContext</name><op:operator pos:line="207" pos:column="76">.</op:operator><name pos:line="207" pos:column="77">ServiceProvider</name><op:operator pos:line="207" pos:column="92">.</op:operator><name pos:line="207" pos:column="93">GetService</name></name><argument_list pos:line="207" pos:column="103">(<argument><expr><call><name pos:line="207" pos:column="104">typeof</name><argument_list pos:line="207" pos:column="110">(<argument><expr><name pos:line="207" pos:column="111">IVsSolution</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="209" pos:column="13">// Close already open solution</comment>
            <expr_stmt><expr><call><name><name pos:line="210" pos:column="13">solutionService</name><op:operator pos:line="210" pos:column="28">.</op:operator><name pos:line="210" pos:column="29">CloseSolutionElement</name></name><argument_list pos:line="210" pos:column="49">(<argument><expr><op:operator pos:line="210" pos:column="50">(</op:operator><name pos:line="210" pos:column="51">uint</name><op:operator pos:line="210" pos:column="55">)</op:operator><name pos:line="210" pos:column="56">saveoptions</name></expr></argument>, <argument><expr><name pos:line="210" pos:column="69">null</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="210" pos:column="75">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="213" pos:column="9">public</specifier> <name pos:line="213" pos:column="16">void</name></type> <name pos:line="213" pos:column="21">ForceSaveSolution</name><parameter_list pos:line="213" pos:column="38">()</parameter_list> <block pos:line="213" pos:column="41">{
            <comment type="line" pos:line="214" pos:column="13">// Get solution service</comment>
            <decl_stmt><decl><type><name pos:line="215" pos:column="13">IVsSolution</name></type> <name pos:line="215" pos:column="25">solutionService</name> <init pos:line="215" pos:column="41">= <expr><op:operator pos:line="215" pos:column="43">(</op:operator><name pos:line="215" pos:column="44">IVsSolution</name><op:operator pos:line="215" pos:column="55">)</op:operator><call><name><name pos:line="215" pos:column="56">VsIdeTestHostContext</name><op:operator pos:line="215" pos:column="76">.</op:operator><name pos:line="215" pos:column="77">ServiceProvider</name><op:operator pos:line="215" pos:column="92">.</op:operator><name pos:line="215" pos:column="93">GetService</name></name><argument_list pos:line="215" pos:column="103">(<argument><expr><call><name pos:line="215" pos:column="104">typeof</name><argument_list pos:line="215" pos:column="110">(<argument><expr><name pos:line="215" pos:column="111">IVsSolution</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="217" pos:column="13">// Force-save the solution</comment>
            <expr_stmt><expr><call><name><name pos:line="218" pos:column="13">solutionService</name><op:operator pos:line="218" pos:column="28">.</op:operator><name pos:line="218" pos:column="29">SaveSolutionElement</name></name><argument_list pos:line="218" pos:column="48">(<argument><expr><op:operator pos:line="218" pos:column="49">(</op:operator><name pos:line="218" pos:column="50">uint</name><op:operator pos:line="218" pos:column="54">)</op:operator><name><name pos:line="218" pos:column="55">__VSSLNSAVEOPTIONS</name><op:operator pos:line="218" pos:column="73">.</op:operator><name pos:line="218" pos:column="74">SLNSAVEOPT_ForceSave</name></name></expr></argument>, <argument><expr><name pos:line="218" pos:column="96">null</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="218" pos:column="102">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="221" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="222" pos:column="9">/// Get current number of open project in solution</comment>
        <comment type="line" pos:line="223" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="224" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="225" pos:column="9">public</specifier> <name pos:line="225" pos:column="16">int</name></type> <name pos:line="225" pos:column="20">ProjectCount</name><parameter_list pos:line="225" pos:column="32">()</parameter_list> <block pos:line="225" pos:column="35">{
            <comment type="line" pos:line="226" pos:column="13">// Get solution service</comment>
            <decl_stmt><decl><type><name pos:line="227" pos:column="13">IVsSolution</name></type> <name pos:line="227" pos:column="25">solutionService</name> <init pos:line="227" pos:column="41">= <expr><op:operator pos:line="227" pos:column="43">(</op:operator><name pos:line="227" pos:column="44">IVsSolution</name><op:operator pos:line="227" pos:column="55">)</op:operator><call><name><name pos:line="227" pos:column="56">VsIdeTestHostContext</name><op:operator pos:line="227" pos:column="76">.</op:operator><name pos:line="227" pos:column="77">ServiceProvider</name><op:operator pos:line="227" pos:column="92">.</op:operator><name pos:line="227" pos:column="93">GetService</name></name><argument_list pos:line="227" pos:column="103">(<argument><expr><call><name pos:line="227" pos:column="104">typeof</name><argument_list pos:line="227" pos:column="110">(<argument><expr><name pos:line="227" pos:column="111">IVsSolution</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="228" pos:column="13">object</name></type> <name pos:line="228" pos:column="20">projectCount</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="229" pos:column="13">solutionService</name><op:operator pos:line="229" pos:column="28">.</op:operator><name pos:line="229" pos:column="29">GetProperty</name></name><argument_list pos:line="229" pos:column="40">(<argument><expr><op:operator pos:line="229" pos:column="41">(</op:operator><name pos:line="229" pos:column="42">int</name><op:operator pos:line="229" pos:column="45">)</op:operator><name><name pos:line="229" pos:column="46">__VSPROPID</name><op:operator pos:line="229" pos:column="56">.</op:operator><name pos:line="229" pos:column="57">VSPROPID_ProjectCount</name></name></expr></argument>, <argument><expr pos:line="229" pos:column="80">out <name pos:line="229" pos:column="84">projectCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="230" pos:column="13">return <expr><op:operator pos:line="230" pos:column="20">(</op:operator><name pos:line="230" pos:column="21">int</name><op:operator pos:line="230" pos:column="24">)</op:operator><name pos:line="230" pos:column="25">projectCount</name></expr>;</return>
        }</block></function>
        <cpp:endregion pos:line="232" pos:column="9">#<cpp:directive pos:line="232" pos:column="10">endregion</cpp:directive></cpp:endregion>

        <cpp:region pos:line="234" pos:column="9">#<cpp:directive pos:line="234" pos:column="10">region</cpp:directive> Methods: Handling projects</cpp:region>
        <comment type="line" pos:line="235" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="236" pos:column="9">/// Creates a project.</comment>
        <comment type="line" pos:line="237" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="238" pos:column="9">/// &lt;param name="projectName"&gt;Name of new project.&lt;/param&gt;</comment>
        <comment type="line" pos:line="239" pos:column="9">/// &lt;param name="templateName"&gt;Name of project template to use&lt;/param&gt;</comment>
        <comment type="line" pos:line="240" pos:column="9">/// &lt;param name="language"&gt;language&lt;/param&gt;</comment>
        <comment type="line" pos:line="241" pos:column="9">/// &lt;returns&gt;New project.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="242" pos:column="9">public</specifier> <name pos:line="242" pos:column="16">void</name></type> <name pos:line="242" pos:column="21">CreateProjectFromTemplate</name><parameter_list pos:line="242" pos:column="46">(<param><decl><type><name pos:line="242" pos:column="47">string</name></type> <name pos:line="242" pos:column="54">projectName</name></decl></param>, <param><decl><type><name pos:line="242" pos:column="67">string</name></type> <name pos:line="242" pos:column="74">templateName</name></decl></param>, <param><decl><type><name pos:line="242" pos:column="88">string</name></type> <name pos:line="242" pos:column="95">language</name></decl></param>, <param><decl><type><name pos:line="242" pos:column="105">bool</name></type> <name pos:line="242" pos:column="110">exclusive</name></decl></param>)</parameter_list> <block pos:line="242" pos:column="121">{
            <decl_stmt><decl><type><name pos:line="243" pos:column="13">DTE</name></type> <name pos:line="243" pos:column="17">dte</name> <init pos:line="243" pos:column="21">= <expr><op:operator pos:line="243" pos:column="23">(</op:operator><name pos:line="243" pos:column="24">DTE</name><op:operator pos:line="243" pos:column="27">)</op:operator><call><name><name pos:line="243" pos:column="28">VsIdeTestHostContext</name><op:operator pos:line="243" pos:column="48">.</op:operator><name pos:line="243" pos:column="49">ServiceProvider</name><op:operator pos:line="243" pos:column="64">.</op:operator><name pos:line="243" pos:column="65">GetService</name></name><argument_list pos:line="243" pos:column="75">(<argument><expr><call><name pos:line="243" pos:column="76">typeof</name><argument_list pos:line="243" pos:column="82">(<argument><expr><name pos:line="243" pos:column="83">DTE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="245" pos:column="13">Solution2</name></type> <name pos:line="245" pos:column="23">sol</name> <init pos:line="245" pos:column="27">= <expr><name><name pos:line="245" pos:column="29">dte</name><op:operator pos:line="245" pos:column="32">.</op:operator><name pos:line="245" pos:column="33">Solution</name></name> <op:operator pos:line="245" pos:column="42">as</op:operator> <name pos:line="245" pos:column="45">Solution2</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="246" pos:column="13">string</name></type> <name pos:line="246" pos:column="20">projectTemplate</name> <init pos:line="246" pos:column="36">= <expr><call><name><name pos:line="246" pos:column="38">sol</name><op:operator pos:line="246" pos:column="41">.</op:operator><name pos:line="246" pos:column="42">GetProjectTemplate</name></name><argument_list pos:line="246" pos:column="60">(<argument><expr><name pos:line="246" pos:column="61">templateName</name></expr></argument>, <argument><expr><name pos:line="246" pos:column="75">language</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="248" pos:column="13">// - project name and directory</comment>
            <decl_stmt><decl><type><name pos:line="249" pos:column="13">string</name></type> <name pos:line="249" pos:column="20">solutionDirectory</name> <init pos:line="249" pos:column="38">= <expr><call><name><name pos:line="249" pos:column="40">Directory</name><op:operator pos:line="249" pos:column="49">.</op:operator><name pos:line="249" pos:column="50">GetParent</name></name><argument_list pos:line="249" pos:column="59">(<argument><expr><name><name pos:line="249" pos:column="60">dte</name><op:operator pos:line="249" pos:column="63">.</op:operator><name pos:line="249" pos:column="64">Solution</name><op:operator pos:line="249" pos:column="72">.</op:operator><name pos:line="249" pos:column="73">FullName</name></name></expr></argument>)</argument_list></call><op:operator pos:line="249" pos:column="82">.</op:operator><name pos:line="249" pos:column="83">FullName</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="250" pos:column="13">string</name></type> <name pos:line="250" pos:column="20">projectDirectory</name> <init pos:line="250" pos:column="37">= <expr><call><name pos:line="250" pos:column="39">GetNewDirectoryName</name><argument_list pos:line="250" pos:column="58">(<argument><expr><name pos:line="250" pos:column="59">solutionDirectory</name></expr></argument>, <argument><expr><name pos:line="250" pos:column="78">projectName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="252" pos:column="13">dte</name><op:operator pos:line="252" pos:column="16">.</op:operator><name pos:line="252" pos:column="17">Solution</name><op:operator pos:line="252" pos:column="25">.</op:operator><name pos:line="252" pos:column="26">AddFromTemplate</name></name><argument_list pos:line="252" pos:column="41">(<argument><expr><name pos:line="252" pos:column="42">projectTemplate</name></expr></argument>, <argument><expr><name pos:line="252" pos:column="59">projectDirectory</name></expr></argument>, <argument><expr><name pos:line="252" pos:column="77">projectName</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="252" pos:column="90">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <cpp:endregion pos:line="254" pos:column="9">#<cpp:directive pos:line="254" pos:column="10">endregion</cpp:directive></cpp:endregion>

        <cpp:region pos:line="256" pos:column="9">#<cpp:directive pos:line="256" pos:column="10">region</cpp:directive> Methods: Handling project items</cpp:region>
        <comment type="line" pos:line="257" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="258" pos:column="9">/// Create a new item in the project</comment>
        <comment type="line" pos:line="259" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="260" pos:column="9">/// &lt;param name="parent"&gt;the parent collection for the new item&lt;/param&gt;</comment>
        <comment type="line" pos:line="261" pos:column="9">/// &lt;param name="templateName"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="262" pos:column="9">/// &lt;param name="language"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="263" pos:column="9">/// &lt;param name="name"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="264" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="265" pos:column="9">public</specifier> <name pos:line="265" pos:column="16">ProjectItem</name></type> <name pos:line="265" pos:column="28">AddNewItemFromVsTemplate</name><parameter_list pos:line="265" pos:column="52">(<param><decl><type><name pos:line="265" pos:column="53">ProjectItems</name></type> <name pos:line="265" pos:column="66">parent</name></decl></param>, <param><decl><type><name pos:line="265" pos:column="74">string</name></type> <name pos:line="265" pos:column="81">templateName</name></decl></param>, <param><decl><type><name pos:line="265" pos:column="95">string</name></type> <name pos:line="265" pos:column="102">language</name></decl></param>, <param><decl><type><name pos:line="265" pos:column="112">string</name></type> <name pos:line="265" pos:column="119">name</name></decl></param>)</parameter_list> <block pos:line="265" pos:column="125">{
            <if pos:line="266" pos:column="13">if<condition pos:line="266" pos:column="15">(<expr><name pos:line="266" pos:column="16">parent</name> <op:operator pos:line="266" pos:column="23">==</op:operator> <name pos:line="266" pos:column="26">null</name></expr>)</condition><then pos:line="266" pos:column="31">
                <throw pos:line="267" pos:column="17">throw <expr><op:operator pos:line="267" pos:column="23">new</op:operator> <call><name pos:line="267" pos:column="27">ArgumentException</name><argument_list pos:line="267" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="267" pos:column="45">"project"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="268" pos:column="13">if<condition pos:line="268" pos:column="15">(<expr><name pos:line="268" pos:column="16">name</name> <op:operator pos:line="268" pos:column="21">==</op:operator> <name pos:line="268" pos:column="24">null</name></expr>)</condition><then pos:line="268" pos:column="29">
                <throw pos:line="269" pos:column="17">throw <expr><op:operator pos:line="269" pos:column="23">new</op:operator> <call><name pos:line="269" pos:column="27">ArgumentException</name><argument_list pos:line="269" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="269" pos:column="45">"name"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="271" pos:column="13">DTE</name></type> <name pos:line="271" pos:column="17">dte</name> <init pos:line="271" pos:column="21">= <expr><op:operator pos:line="271" pos:column="23">(</op:operator><name pos:line="271" pos:column="24">DTE</name><op:operator pos:line="271" pos:column="27">)</op:operator><call><name><name pos:line="271" pos:column="28">VsIdeTestHostContext</name><op:operator pos:line="271" pos:column="48">.</op:operator><name pos:line="271" pos:column="49">ServiceProvider</name><op:operator pos:line="271" pos:column="64">.</op:operator><name pos:line="271" pos:column="65">GetService</name></name><argument_list pos:line="271" pos:column="75">(<argument><expr><call><name pos:line="271" pos:column="76">typeof</name><argument_list pos:line="271" pos:column="82">(<argument><expr><name pos:line="271" pos:column="83">DTE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="273" pos:column="13">Solution2</name></type> <name pos:line="273" pos:column="23">sol</name> <init pos:line="273" pos:column="27">= <expr><name><name pos:line="273" pos:column="29">dte</name><op:operator pos:line="273" pos:column="32">.</op:operator><name pos:line="273" pos:column="33">Solution</name></name> <op:operator pos:line="273" pos:column="42">as</op:operator> <name pos:line="273" pos:column="45">Solution2</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="275" pos:column="13">string</name></type> <name pos:line="275" pos:column="20">filename</name> <init pos:line="275" pos:column="29">= <expr><call><name><name pos:line="275" pos:column="31">sol</name><op:operator pos:line="275" pos:column="34">.</op:operator><name pos:line="275" pos:column="35">GetProjectItemTemplate</name></name><argument_list pos:line="275" pos:column="57">(<argument><expr><name pos:line="275" pos:column="58">templateName</name></expr></argument>, <argument><expr><name pos:line="275" pos:column="72">language</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="277" pos:column="13">parent</name><op:operator pos:line="277" pos:column="19">.</op:operator><name pos:line="277" pos:column="20">AddFromTemplate</name></name><argument_list pos:line="277" pos:column="35">(<argument><expr><name pos:line="277" pos:column="36">filename</name></expr></argument>, <argument><expr><name pos:line="277" pos:column="46">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:line="279" pos:column="13">return <expr><call><name><name pos:line="279" pos:column="20">parent</name><op:operator pos:line="279" pos:column="26">.</op:operator><name pos:line="279" pos:column="27">Item</name></name><argument_list pos:line="279" pos:column="31">(<argument><expr><name pos:line="279" pos:column="32">name</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="282" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="283" pos:column="9">/// Save an open document.</comment>
        <comment type="line" pos:line="284" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="285" pos:column="9">/// &lt;param name="documentMoniker"&gt;for filebased documents this is the full path to the document&lt;/param&gt;</comment>
        <function><type><specifier pos:line="286" pos:column="9">public</specifier> <name pos:line="286" pos:column="16">void</name></type> <name pos:line="286" pos:column="21">SaveDocument</name><parameter_list pos:line="286" pos:column="33">(<param><decl><type><name pos:line="286" pos:column="34">string</name></type> <name pos:line="286" pos:column="41">documentMoniker</name></decl></param>)</parameter_list> <block pos:line="286" pos:column="58">{
            <comment type="line" pos:line="287" pos:column="13">// Get document cookie and hierarchy for the file</comment>
            <decl_stmt><decl><type><name pos:line="288" pos:column="13">IVsRunningDocumentTable</name></type> <name pos:line="288" pos:column="37">runningDocumentTableService</name> <init pos:line="288" pos:column="65">= <expr><op:operator pos:line="288" pos:column="67">(</op:operator><name pos:line="288" pos:column="68">IVsRunningDocumentTable</name><op:operator pos:line="288" pos:column="91">)</op:operator><call><name><name pos:line="288" pos:column="92">VsIdeTestHostContext</name><op:operator pos:line="288" pos:column="112">.</op:operator><name pos:line="288" pos:column="113">ServiceProvider</name><op:operator pos:line="288" pos:column="128">.</op:operator><name pos:line="288" pos:column="129">GetService</name></name><argument_list pos:line="288" pos:column="139">(<argument><expr><call><name pos:line="288" pos:column="140">typeof</name><argument_list pos:line="288" pos:column="146">(<argument><expr><name pos:line="288" pos:column="147">IVsRunningDocumentTable</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="289" pos:column="13">uint</name></type> <name pos:line="289" pos:column="18">docCookie</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="290" pos:column="13">IntPtr</name></type> <name pos:line="290" pos:column="20">docData</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="291" pos:column="13">IVsHierarchy</name></type> <name pos:line="291" pos:column="26">hierarchy</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="292" pos:column="13">uint</name></type> <name pos:line="292" pos:column="18">itemId</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="293" pos:column="13">runningDocumentTableService</name><op:operator pos:line="293" pos:column="40">.</op:operator><name pos:line="293" pos:column="41">FindAndLockDocument</name></name><argument_list pos:line="293" pos:column="60">(
                <argument><expr><op:operator pos:line="294" pos:column="17">(</op:operator><name pos:line="294" pos:column="18">uint</name><op:operator pos:line="294" pos:column="22">)</op:operator><name><name pos:line="294" pos:column="23">Microsoft</name><op:operator pos:line="294" pos:column="32">.</op:operator><name pos:line="294" pos:column="33">VisualStudio</name><op:operator pos:line="294" pos:column="45">.</op:operator><name pos:line="294" pos:column="46">Shell</name><op:operator pos:line="294" pos:column="51">.</op:operator><name pos:line="294" pos:column="52">Interop</name><op:operator pos:line="294" pos:column="59">.</op:operator><name pos:line="294" pos:column="60">_VSRDTFLAGS</name><op:operator pos:line="294" pos:column="71">.</op:operator><name pos:line="294" pos:column="72">RDT_NoLock</name></name></expr></argument>,
                <argument><expr><name pos:line="295" pos:column="17">documentMoniker</name></expr></argument>,
                <argument><expr pos:line="296" pos:column="17">out <name pos:line="296" pos:column="21">hierarchy</name></expr></argument>,
                <argument><expr pos:line="297" pos:column="17">out <name pos:line="297" pos:column="21">itemId</name></expr></argument>,
                <argument><expr pos:line="298" pos:column="17">out <name pos:line="298" pos:column="21">docData</name></expr></argument>,
                <argument><expr pos:line="299" pos:column="17">out <name pos:line="299" pos:column="21">docCookie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="301" pos:column="13">// Save the document</comment>
            <decl_stmt><decl><type><name pos:line="302" pos:column="13">IVsSolution</name></type> <name pos:line="302" pos:column="25">solutionService</name> <init pos:line="302" pos:column="41">= <expr><op:operator pos:line="302" pos:column="43">(</op:operator><name pos:line="302" pos:column="44">IVsSolution</name><op:operator pos:line="302" pos:column="55">)</op:operator><call><name><name pos:line="302" pos:column="56">VsIdeTestHostContext</name><op:operator pos:line="302" pos:column="76">.</op:operator><name pos:line="302" pos:column="77">ServiceProvider</name><op:operator pos:line="302" pos:column="92">.</op:operator><name pos:line="302" pos:column="93">GetService</name></name><argument_list pos:line="302" pos:column="103">(<argument><expr><call><name pos:line="302" pos:column="104">typeof</name><argument_list pos:line="302" pos:column="110">(<argument><expr><name pos:line="302" pos:column="111">IVsSolution</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="303" pos:column="13">solutionService</name><op:operator pos:line="303" pos:column="28">.</op:operator><name pos:line="303" pos:column="29">SaveSolutionElement</name></name><argument_list pos:line="303" pos:column="48">(<argument><expr><op:operator pos:line="303" pos:column="49">(</op:operator><name pos:line="303" pos:column="50">uint</name><op:operator pos:line="303" pos:column="54">)</op:operator><name><name pos:line="303" pos:column="55">__VSSLNSAVEOPTIONS</name><op:operator pos:line="303" pos:column="73">.</op:operator><name pos:line="303" pos:column="74">SLNSAVEOPT_ForceSave</name></name></expr></argument>, <argument><expr><name pos:line="303" pos:column="96">hierarchy</name></expr></argument>, <argument><expr><name pos:line="303" pos:column="107">docCookie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="306" pos:column="9">public</specifier> <name pos:line="306" pos:column="16">void</name></type> <name pos:line="306" pos:column="21">CloseInEditorWithoutSaving</name><parameter_list pos:line="306" pos:column="47">(<param><decl><type><name pos:line="306" pos:column="48">string</name></type> <name pos:line="306" pos:column="55">fullFileName</name></decl></param>)</parameter_list> <block pos:line="306" pos:column="69">{
            <comment type="line" pos:line="307" pos:column="13">// Get the RDT service</comment>
            <decl_stmt><decl><type><name pos:line="308" pos:column="13">IVsRunningDocumentTable</name></type> <name pos:line="308" pos:column="37">runningDocumentTableService</name> <init pos:line="308" pos:column="65">= <expr><op:operator pos:line="308" pos:column="67">(</op:operator><name pos:line="308" pos:column="68">IVsRunningDocumentTable</name><op:operator pos:line="308" pos:column="91">)</op:operator><call><name><name pos:line="308" pos:column="92">VsIdeTestHostContext</name><op:operator pos:line="308" pos:column="112">.</op:operator><name pos:line="308" pos:column="113">ServiceProvider</name><op:operator pos:line="308" pos:column="128">.</op:operator><name pos:line="308" pos:column="129">GetService</name></name><argument_list pos:line="308" pos:column="139">(<argument><expr><call><name pos:line="308" pos:column="140">typeof</name><argument_list pos:line="308" pos:column="146">(<argument><expr><name pos:line="308" pos:column="147">IVsRunningDocumentTable</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="309" pos:column="13">Assert</name><op:operator pos:line="309" pos:column="19">.</op:operator><name pos:line="309" pos:column="20">IsNotNull</name></name><argument_list pos:line="309" pos:column="29">(<argument><expr><name pos:line="309" pos:column="30">runningDocumentTableService</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="309" pos:column="59">"Failed to get the Running Document Table Service"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="311" pos:column="13">// Get our document cookie and hierarchy for the file</comment>
            <decl_stmt><decl><type><name pos:line="312" pos:column="13">uint</name></type> <name pos:line="312" pos:column="18">docCookie</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="313" pos:column="13">IntPtr</name></type> <name pos:line="313" pos:column="20">docData</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="314" pos:column="13">IVsHierarchy</name></type> <name pos:line="314" pos:column="26">hierarchy</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="315" pos:column="13">uint</name></type> <name pos:line="315" pos:column="18">itemId</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="316" pos:column="13">runningDocumentTableService</name><op:operator pos:line="316" pos:column="40">.</op:operator><name pos:line="316" pos:column="41">FindAndLockDocument</name></name><argument_list pos:line="316" pos:column="60">(
                <argument><expr><op:operator pos:line="317" pos:column="17">(</op:operator><name pos:line="317" pos:column="18">uint</name><op:operator pos:line="317" pos:column="22">)</op:operator><name><name pos:line="317" pos:column="23">Microsoft</name><op:operator pos:line="317" pos:column="32">.</op:operator><name pos:line="317" pos:column="33">VisualStudio</name><op:operator pos:line="317" pos:column="45">.</op:operator><name pos:line="317" pos:column="46">Shell</name><op:operator pos:line="317" pos:column="51">.</op:operator><name pos:line="317" pos:column="52">Interop</name><op:operator pos:line="317" pos:column="59">.</op:operator><name pos:line="317" pos:column="60">_VSRDTFLAGS</name><op:operator pos:line="317" pos:column="71">.</op:operator><name pos:line="317" pos:column="72">RDT_NoLock</name></name></expr></argument>,
                <argument><expr><name pos:line="318" pos:column="17">fullFileName</name></expr></argument>,
                <argument><expr pos:line="319" pos:column="17">out <name pos:line="319" pos:column="21">hierarchy</name></expr></argument>,
                <argument><expr pos:line="320" pos:column="17">out <name pos:line="320" pos:column="21">itemId</name></expr></argument>,
                <argument><expr pos:line="321" pos:column="17">out <name pos:line="321" pos:column="21">docData</name></expr></argument>,
                <argument><expr pos:line="322" pos:column="17">out <name pos:line="322" pos:column="21">docCookie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="324" pos:column="13">// Get the SolutionService</comment>
            <decl_stmt><decl><type><name pos:line="325" pos:column="13">IVsSolution</name></type> <name pos:line="325" pos:column="25">solutionService</name> <init pos:line="325" pos:column="41">= <expr><call><name><name pos:line="325" pos:column="43">VsIdeTestHostContext</name><op:operator pos:line="325" pos:column="63">.</op:operator><name pos:line="325" pos:column="64">ServiceProvider</name><op:operator pos:line="325" pos:column="79">.</op:operator><name pos:line="325" pos:column="80">GetService</name></name><argument_list pos:line="325" pos:column="90">(<argument><expr><call><name pos:line="325" pos:column="91">typeof</name><argument_list pos:line="325" pos:column="97">(<argument><expr><name pos:line="325" pos:column="98">IVsSolution</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="325" pos:column="112">as</op:operator> <name pos:line="325" pos:column="115">IVsSolution</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="326" pos:column="13">Assert</name><op:operator pos:line="326" pos:column="19">.</op:operator><name pos:line="326" pos:column="20">IsNotNull</name></name><argument_list pos:line="326" pos:column="29">(<argument><expr><name pos:line="326" pos:column="30">solutionService</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="326" pos:column="47">"Failed to get IVsSolution service"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="328" pos:column="13">// Close the document</comment>
            <expr_stmt><expr><call><name><name pos:line="329" pos:column="13">solutionService</name><op:operator pos:line="329" pos:column="28">.</op:operator><name pos:line="329" pos:column="29">CloseSolutionElement</name></name><argument_list pos:line="329" pos:column="49">(
                <argument><expr><op:operator pos:line="330" pos:column="17">(</op:operator><name pos:line="330" pos:column="18">uint</name><op:operator pos:line="330" pos:column="22">)</op:operator><name><name pos:line="330" pos:column="23">__VSSLNSAVEOPTIONS</name><op:operator pos:line="330" pos:column="41">.</op:operator><name pos:line="330" pos:column="42">SLNSAVEOPT_NoSave</name></name></expr></argument>,
                <argument><expr><name pos:line="331" pos:column="17">hierarchy</name></expr></argument>,
                <argument><expr><name pos:line="332" pos:column="17">docCookie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <cpp:endregion pos:line="334" pos:column="9">#<cpp:directive pos:line="334" pos:column="10">endregion</cpp:directive></cpp:endregion>

        <cpp:region pos:line="336" pos:column="9">#<cpp:directive pos:line="336" pos:column="10">region</cpp:directive> Methods: Handling Toolwindows</cpp:region>
        <function><type><specifier pos:line="337" pos:column="9">public</specifier> <name pos:line="337" pos:column="16">bool</name></type> <name pos:line="337" pos:column="21">CanFindToolwindow</name><parameter_list pos:line="337" pos:column="38">(<param><decl><type><name pos:line="337" pos:column="39">Guid</name></type> <name pos:line="337" pos:column="44">persistenceGuid</name></decl></param>)</parameter_list> <block pos:line="337" pos:column="61">{
            <decl_stmt><decl><type><name pos:line="338" pos:column="13">IVsUIShell</name></type> <name pos:line="338" pos:column="24">uiShellService</name> <init pos:line="338" pos:column="39">= <expr><call><name><name pos:line="338" pos:column="41">VsIdeTestHostContext</name><op:operator pos:line="338" pos:column="61">.</op:operator><name pos:line="338" pos:column="62">ServiceProvider</name><op:operator pos:line="338" pos:column="77">.</op:operator><name pos:line="338" pos:column="78">GetService</name></name><argument_list pos:line="338" pos:column="88">(<argument><expr><call><name pos:line="338" pos:column="89">typeof</name><argument_list pos:line="338" pos:column="95">(<argument><expr><name pos:line="338" pos:column="96">SVsUIShell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="338" pos:column="109">as</op:operator> <name pos:line="338" pos:column="112">IVsUIShell</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="339" pos:column="13">Assert</name><op:operator pos:line="339" pos:column="19">.</op:operator><name pos:line="339" pos:column="20">IsNotNull</name></name><argument_list pos:line="339" pos:column="29">(<argument><expr><name pos:line="339" pos:column="30">uiShellService</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="340" pos:column="13">IVsWindowFrame</name></type> <name pos:line="340" pos:column="28">windowFrame</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="341" pos:column="13">int</name></type> <name pos:line="341" pos:column="17">hr</name> <init pos:line="341" pos:column="20">= <expr><call><name><name pos:line="341" pos:column="22">uiShellService</name><op:operator pos:line="341" pos:column="36">.</op:operator><name pos:line="341" pos:column="37">FindToolWindow</name></name><argument_list pos:line="341" pos:column="51">(<argument><expr><op:operator pos:line="341" pos:column="52">(</op:operator><name pos:line="341" pos:column="53">uint</name><op:operator pos:line="341" pos:column="57">)</op:operator><name><name pos:line="341" pos:column="58">__VSFINDTOOLWIN</name><op:operator pos:line="341" pos:column="73">.</op:operator><name pos:line="341" pos:column="74">FTW_fFindFirst</name></name></expr></argument>, <argument><expr pos:line="341" pos:column="90">ref <name pos:line="341" pos:column="94">persistenceGuid</name></expr></argument>, <argument><expr pos:line="341" pos:column="111">out <name pos:line="341" pos:column="115">windowFrame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="342" pos:column="13">Assert</name><op:operator pos:line="342" pos:column="19">.</op:operator><name pos:line="342" pos:column="20">IsTrue</name></name><argument_list pos:line="342" pos:column="26">(<argument><expr><name pos:line="342" pos:column="27">hr</name> <op:operator pos:line="342" pos:column="30">==</op:operator> <name><name pos:line="342" pos:column="33">VSConstants</name><op:operator pos:line="342" pos:column="44">.</op:operator><name pos:line="342" pos:column="45">S_OK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:line="344" pos:column="13">return <expr><op:operator pos:line="344" pos:column="20">(</op:operator><name pos:line="344" pos:column="21">windowFrame</name> <op:operator pos:line="344" pos:column="33">!=</op:operator> <name pos:line="344" pos:column="36">null</name><op:operator pos:line="344" pos:column="40">)</op:operator></expr>;</return>
        }</block></function>
        <cpp:endregion pos:line="346" pos:column="9">#<cpp:directive pos:line="346" pos:column="10">endregion</cpp:directive></cpp:endregion>

        <cpp:region pos:line="348" pos:column="9">#<cpp:directive pos:line="348" pos:column="10">region</cpp:directive> Methods: Loading packages</cpp:region>
        <function><type><specifier pos:line="349" pos:column="9">public</specifier> <name pos:line="349" pos:column="16">IVsPackage</name></type> <name pos:line="349" pos:column="27">LoadPackage</name><parameter_list pos:line="349" pos:column="38">(<param><decl><type><name pos:line="349" pos:column="39">Guid</name></type> <name pos:line="349" pos:column="44">packageGuid</name></decl></param>)</parameter_list> <block pos:line="349" pos:column="57">{
            <decl_stmt><decl><type><name pos:line="350" pos:column="13">IVsShell</name></type> <name pos:line="350" pos:column="22">shellService</name> <init pos:line="350" pos:column="35">= <expr><op:operator pos:line="350" pos:column="37">(</op:operator><name pos:line="350" pos:column="38">IVsShell</name><op:operator pos:line="350" pos:column="46">)</op:operator><call><name><name pos:line="350" pos:column="47">VsIdeTestHostContext</name><op:operator pos:line="350" pos:column="67">.</op:operator><name pos:line="350" pos:column="68">ServiceProvider</name><op:operator pos:line="350" pos:column="83">.</op:operator><name pos:line="350" pos:column="84">GetService</name></name><argument_list pos:line="350" pos:column="94">(<argument><expr><call><name pos:line="350" pos:column="95">typeof</name><argument_list pos:line="350" pos:column="101">(<argument><expr><name pos:line="350" pos:column="102">SVsShell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="351" pos:column="13">IVsPackage</name></type> <name pos:line="351" pos:column="24">package</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="352" pos:column="13">shellService</name><op:operator pos:line="352" pos:column="25">.</op:operator><name pos:line="352" pos:column="26">LoadPackage</name></name><argument_list pos:line="352" pos:column="37">(<argument><expr pos:line="352" pos:column="38">ref <name pos:line="352" pos:column="42">packageGuid</name></expr></argument>, <argument><expr pos:line="352" pos:column="55">out <name pos:line="352" pos:column="59">package</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="353" pos:column="13">Assert</name><op:operator pos:line="353" pos:column="19">.</op:operator><name pos:line="353" pos:column="20">IsNotNull</name></name><argument_list pos:line="353" pos:column="29">(<argument><expr><name pos:line="353" pos:column="30">package</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="353" pos:column="39">"Failed to load package"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="354" pos:column="13">return <expr><name pos:line="354" pos:column="20">package</name></expr>;</return>
        }</block></function>
        <cpp:endregion pos:line="356" pos:column="9">#<cpp:directive pos:line="356" pos:column="10">endregion</cpp:directive></cpp:endregion>

        <comment type="line" pos:line="358" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="359" pos:column="9">/// Executes a Command (menu item) in the given context</comment>
        <comment type="line" pos:line="360" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="361" pos:column="9">public</specifier> <name pos:line="361" pos:column="16">void</name></type> <name pos:line="361" pos:column="21">ExecuteCommand</name><parameter_list pos:line="361" pos:column="35">(<param><decl><type><name pos:line="361" pos:column="36">CommandID</name></type> <name pos:line="361" pos:column="46">cmd</name></decl></param>)</parameter_list> <block pos:line="361" pos:column="51">{
            <decl_stmt><decl><type><name pos:line="362" pos:column="13">object</name></type> <name pos:line="362" pos:column="20">Customin</name> <init pos:line="362" pos:column="29">= <expr><name pos:line="362" pos:column="31">null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="363" pos:column="13">object</name></type> <name pos:line="363" pos:column="20">Customout</name> <init pos:line="363" pos:column="30">= <expr><name pos:line="363" pos:column="32">null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="364" pos:column="13">string</name></type> <name pos:line="364" pos:column="20">guidString</name> <init pos:line="364" pos:column="31">= <expr><call><name><name pos:line="364" pos:column="33">cmd</name><op:operator pos:line="364" pos:column="36">.</op:operator><name pos:line="364" pos:column="37">Guid</name><op:operator pos:line="364" pos:column="41">.</op:operator><name pos:line="364" pos:column="42">ToString</name></name><argument_list pos:line="364" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="364" pos:column="51">"B"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="364" pos:column="55">.</op:operator><call><name pos:line="364" pos:column="56">ToUpper</name><argument_list pos:line="364" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="365" pos:column="13">int</name></type> <name pos:line="365" pos:column="17">cmdId</name> <init pos:line="365" pos:column="23">= <expr><name><name pos:line="365" pos:column="25">cmd</name><op:operator pos:line="365" pos:column="28">.</op:operator><name pos:line="365" pos:column="29">ID</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="366" pos:column="13">DTE</name></type> <name pos:line="366" pos:column="17">dte</name> <init pos:line="366" pos:column="21">= <expr><name><name pos:line="366" pos:column="23">VsIdeTestHostContext</name><op:operator pos:line="366" pos:column="43">.</op:operator><name pos:line="366" pos:column="44">Dte</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="367" pos:column="13">dte</name><op:operator pos:line="367" pos:column="16">.</op:operator><name pos:line="367" pos:column="17">Commands</name><op:operator pos:line="367" pos:column="25">.</op:operator><name pos:line="367" pos:column="26">Raise</name></name><argument_list pos:line="367" pos:column="31">(<argument><expr><name pos:line="367" pos:column="32">guidString</name></expr></argument>, <argument><expr><name pos:line="367" pos:column="44">cmdId</name></expr></argument>, <argument><expr pos:line="367" pos:column="51">ref <name pos:line="367" pos:column="55">Customin</name></expr></argument>, <argument><expr pos:line="367" pos:column="65">ref <name pos:line="367" pos:column="69">Customout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

    }</block></class>
}</block></namespace>
</unit>
