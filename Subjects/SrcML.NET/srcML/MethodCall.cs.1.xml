<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data\MethodCall.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2014 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *    Patrick Francis (ABB Group) - API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="13" pos:column="1">using <name pos:line="13" pos:column="7">System</name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Collections</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">Generic</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Collections</name><op:operator pos:line="15" pos:column="25">.</op:operator><name pos:line="15" pos:column="26">ObjectModel</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Linq</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Text</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Xml</name></name>;</using>

<namespace pos:line="20" pos:column="1">namespace <name><name pos:line="20" pos:column="11">ABB</name><op:operator pos:line="20" pos:column="14">.</op:operator><name pos:line="20" pos:column="15">SrcML</name><op:operator pos:line="20" pos:column="20">.</op:operator><name pos:line="20" pos:column="21">Data</name></name> <block pos:line="20" pos:column="26">{

    <comment type="line" pos:line="22" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="23" pos:column="5">/// Represents a method call</comment>
    <comment type="line" pos:line="24" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="25" pos:column="5">public</specifier> class <name pos:line="25" pos:column="18">MethodCall</name> <super pos:line="25" pos:column="29">: <name pos:line="25" pos:column="31">NameUse</name></super> <block pos:line="25" pos:column="39">{
        <decl_stmt><decl><type><specifier pos:line="26" pos:column="9">private</specifier> <name><name pos:line="26" pos:column="17">List</name><argument_list pos:line="26" pos:column="21">&lt;<argument><name pos:line="26" pos:column="22">Expression</name></argument>&gt;</argument_list></name></type> <name pos:line="26" pos:column="34">argumentList</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="27" pos:column="9">private</specifier> <name><name pos:line="27" pos:column="17">List</name><argument_list pos:line="27" pos:column="21">&lt;<argument><name pos:line="27" pos:column="22">TypeUse</name></argument>&gt;</argument_list></name></type> <name pos:line="27" pos:column="31">typeArgumentList</name></decl>;</decl_stmt>

        <comment type="line" pos:line="29" pos:column="9">/// &lt;summary&gt; The XML name for MethodCall &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="30" pos:column="9">public</specifier> <specifier pos:line="30" pos:column="16">new</specifier> <specifier pos:line="30" pos:column="20">const</specifier> <name pos:line="30" pos:column="26">string</name></type> <name pos:line="30" pos:column="33">XmlName</name> <init pos:line="30" pos:column="41">= <expr><lit:literal type="string" pos:line="30" pos:column="43">"call"</lit:literal></expr></init></decl>;</decl_stmt>
        
        <comment type="line" pos:line="32" pos:column="9">/// &lt;summary&gt; XML Name for &lt;see cref="Arguments" /&gt; &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="33" pos:column="9">public</specifier> <specifier pos:line="33" pos:column="16">const</specifier> <name pos:line="33" pos:column="22">string</name></type> <name pos:line="33" pos:column="29">XmlArgumentsName</name> <init pos:line="33" pos:column="46">= <expr><lit:literal type="string" pos:line="33" pos:column="48">"Arguments"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="35" pos:column="9">/// &lt;summary&gt; XML name for &lt;see cref="TypeArguments"/&gt; &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="36" pos:column="9">public</specifier> <specifier pos:line="36" pos:column="16">const</specifier> <name pos:line="36" pos:column="22">string</name></type> <name pos:line="36" pos:column="29">XmlTypeArgumentsName</name> <init pos:line="36" pos:column="50">= <expr><lit:literal type="string" pos:line="36" pos:column="52">"TypeArguments"</lit:literal></expr></init></decl>;</decl_stmt>
        
        <comment type="line" pos:line="38" pos:column="9">/// &lt;summary&gt; XML Name for &lt;see cref="IsConstructor" /&gt; &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="39" pos:column="9">public</specifier> <specifier pos:line="39" pos:column="16">const</specifier> <name pos:line="39" pos:column="22">string</name></type> <name pos:line="39" pos:column="29">XmlIsConstructorName</name> <init pos:line="39" pos:column="50">= <expr><lit:literal type="string" pos:line="39" pos:column="52">"IsConstructor"</lit:literal></expr></init></decl>;</decl_stmt>
        
        <comment type="line" pos:line="41" pos:column="9">/// &lt;summary&gt; XML Name for &lt;see cref="IsConstructorInitializer"/&gt;&lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="42" pos:column="9">public</specifier> <specifier pos:line="42" pos:column="16">const</specifier> <name pos:line="42" pos:column="22">string</name></type> <name pos:line="42" pos:column="29">XmlIsConstructorInitializerName</name> <init pos:line="42" pos:column="61">= <expr><lit:literal type="string" pos:line="42" pos:column="63">"IsConstructorInitializer"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="44" pos:column="9">/// &lt;summary&gt; XML Name for &lt;see cref="IsDestructor" /&gt; &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="45" pos:column="9">public</specifier> <specifier pos:line="45" pos:column="16">const</specifier> <name pos:line="45" pos:column="22">string</name></type> <name pos:line="45" pos:column="29">XmlIsDestructorName</name> <init pos:line="45" pos:column="49">= <expr><lit:literal type="string" pos:line="45" pos:column="51">"IsDestructor"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="47" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="48" pos:column="9">/// Creates a new MethodCall object</comment>
        <comment type="line" pos:line="49" pos:column="9">/// &lt;/summary&gt;</comment>
        <constructor><specifier pos:line="50" pos:column="9">public</specifier> <name pos:line="50" pos:column="16">MethodCall</name><parameter_list pos:line="50" pos:column="26">()</parameter_list> <block pos:line="50" pos:column="29">{
            <expr_stmt><expr><name pos:line="51" pos:column="13">argumentList</name> <op:operator pos:line="51" pos:column="26">=</op:operator> <op:operator pos:line="51" pos:column="28">new</op:operator> <call><name><name pos:line="51" pos:column="32">List</name><argument_list pos:line="51" pos:column="36">&lt;<argument><name pos:line="51" pos:column="37">Expression</name></argument>&gt;</argument_list></name><argument_list pos:line="51" pos:column="48">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="52" pos:column="13">Arguments</name> <op:operator pos:line="52" pos:column="23">=</op:operator> <op:operator pos:line="52" pos:column="25">new</op:operator> <call><name><name pos:line="52" pos:column="29">ReadOnlyCollection</name><argument_list pos:line="52" pos:column="47">&lt;<argument><name pos:line="52" pos:column="48">Expression</name></argument>&gt;</argument_list></name><argument_list pos:line="52" pos:column="59">(<argument><expr><name pos:line="52" pos:column="60">argumentList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="53" pos:column="13">typeArgumentList</name> <op:operator pos:line="53" pos:column="30">=</op:operator> <op:operator pos:line="53" pos:column="32">new</op:operator> <call><name><name pos:line="53" pos:column="36">List</name><argument_list pos:line="53" pos:column="40">&lt;<argument><name pos:line="53" pos:column="41">TypeUse</name></argument>&gt;</argument_list></name><argument_list pos:line="53" pos:column="49">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="54" pos:column="13">TypeArguments</name> <op:operator pos:line="54" pos:column="27">=</op:operator> <op:operator pos:line="54" pos:column="29">new</op:operator> <call><name><name pos:line="54" pos:column="33">ReadOnlyCollection</name><argument_list pos:line="54" pos:column="51">&lt;<argument><name pos:line="54" pos:column="52">TypeUse</name></argument>&gt;</argument_list></name><argument_list pos:line="54" pos:column="60">(<argument><expr><name pos:line="54" pos:column="61">typeArgumentList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="55" pos:column="13">IsConstructor</name> <op:operator pos:line="55" pos:column="27">=</op:operator> <lit:literal type="boolean" pos:line="55" pos:column="29">false</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="56" pos:column="13">IsDestructor</name> <op:operator pos:line="56" pos:column="26">=</op:operator> <lit:literal type="boolean" pos:line="56" pos:column="28">false</lit:literal></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="59" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="60" pos:column="9">/// The arguments to this call.</comment>
        <comment type="line" pos:line="61" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="62" pos:column="9">public</specifier> <name><name pos:line="62" pos:column="16">ReadOnlyCollection</name><argument_list pos:line="62" pos:column="34">&lt;<argument><name pos:line="62" pos:column="35">Expression</name></argument>&gt;</argument_list></name></type> <name pos:line="62" pos:column="47">Arguments</name> <block pos:line="62" pos:column="57">{ <function_decl><name pos:line="62" pos:column="59">get</name>;</function_decl> <function_decl><specifier pos:line="62" pos:column="64">private</specifier> <name pos:line="62" pos:column="72">set</name>;</function_decl>}</block></decl></decl_stmt>

        <comment type="line" pos:line="64" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="65" pos:column="9">/// The type arguments to this method call. </comment>
        <comment type="line" pos:line="66" pos:column="9">/// For example, in "Foo&amp;lt;int&amp;gt;(17)", int is a type argument.</comment>
        <comment type="line" pos:line="67" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="68" pos:column="9">public</specifier> <name><name pos:line="68" pos:column="16">ReadOnlyCollection</name><argument_list pos:line="68" pos:column="34">&lt;<argument><name pos:line="68" pos:column="35">TypeUse</name></argument>&gt;</argument_list></name></type> <name pos:line="68" pos:column="44">TypeArguments</name> <block pos:line="68" pos:column="58">{ <function_decl><name pos:line="68" pos:column="60">get</name>;</function_decl> <function_decl><specifier pos:line="68" pos:column="65">private</specifier> <name pos:line="68" pos:column="73">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="70" pos:column="9">/// &lt;summary&gt; True if this is a call to a constructor &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="71" pos:column="9">public</specifier> <name pos:line="71" pos:column="16">bool</name></type> <name pos:line="71" pos:column="21">IsConstructor</name> <block pos:line="71" pos:column="35">{ <function_decl><name pos:line="71" pos:column="37">get</name>;</function_decl> <function_decl><name pos:line="71" pos:column="42">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="73" pos:column="9">/// &lt;summary&gt; True if this call appears in a constructor's initializer list. &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="74" pos:column="9">public</specifier> <name pos:line="74" pos:column="16">bool</name></type> <name pos:line="74" pos:column="21">IsConstructorInitializer</name> <block pos:line="74" pos:column="46">{ <function_decl><name pos:line="74" pos:column="48">get</name>;</function_decl> <function_decl><name pos:line="74" pos:column="53">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="76" pos:column="9">/// &lt;summary&gt; True if this is a call to a destructor &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="77" pos:column="9">public</specifier> <name pos:line="77" pos:column="16">bool</name></type> <name pos:line="77" pos:column="21">IsDestructor</name> <block pos:line="77" pos:column="34">{ <function_decl><name pos:line="77" pos:column="36">get</name>;</function_decl> <function_decl><name pos:line="77" pos:column="41">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="79" pos:column="9">/// &lt;summary&gt; The statement containing this expression. &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="80" pos:column="9">public</specifier> <specifier pos:line="80" pos:column="16">override</specifier> <name pos:line="80" pos:column="25">Statement</name></type> <name pos:line="80" pos:column="35">ParentStatement</name> <block pos:line="80" pos:column="51">{
            <function><name pos:line="81" pos:column="13">get</name> <block pos:line="81" pos:column="17">{ <return pos:line="81" pos:column="19">return <expr><name><name pos:line="81" pos:column="26">base</name><op:operator pos:line="81" pos:column="30">.</op:operator><name pos:line="81" pos:column="31">ParentStatement</name></name></expr>;</return> }</block></function>
            <function><name pos:line="82" pos:column="13">set</name> <block pos:line="82" pos:column="17">{
                <expr_stmt><expr><name><name pos:line="83" pos:column="17">base</name><op:operator pos:line="83" pos:column="21">.</op:operator><name pos:line="83" pos:column="22">ParentStatement</name></name> <op:operator pos:line="83" pos:column="38">=</op:operator> <name pos:line="83" pos:column="40">value</name></expr>;</expr_stmt>
                <foreach pos:line="84" pos:column="17">foreach(<init><decl><type><name pos:line="84" pos:column="25">var</name></type> <name pos:line="84" pos:column="29">arg</name> <range pos:line="84" pos:column="33">in <expr><name pos:line="84" pos:column="36">Arguments</name></expr></range></decl></init>) <block pos:line="84" pos:column="47">{ <expr_stmt><expr><name><name pos:line="84" pos:column="49">arg</name><op:operator pos:line="84" pos:column="52">.</op:operator><name pos:line="84" pos:column="53">ParentStatement</name></name> <op:operator pos:line="84" pos:column="69">=</op:operator> <name pos:line="84" pos:column="71">value</name></expr>;</expr_stmt> }</block></foreach>
                <foreach pos:line="85" pos:column="17">foreach(<init><decl><type><name pos:line="85" pos:column="25">var</name></type> <name pos:line="85" pos:column="29">typeArg</name> <range pos:line="85" pos:column="37">in <expr><name pos:line="85" pos:column="40">TypeArguments</name></expr></range></decl></init>) <block pos:line="85" pos:column="55">{ <expr_stmt><expr><name><name pos:line="85" pos:column="57">typeArg</name><op:operator pos:line="85" pos:column="64">.</op:operator><name pos:line="85" pos:column="65">ParentStatement</name></name> <op:operator pos:line="85" pos:column="81">=</op:operator> <name pos:line="85" pos:column="83">value</name></expr>;</expr_stmt> }</block></foreach>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="89" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="90" pos:column="9">/// Adds the given argument to the Arguments collection.</comment>
        <comment type="line" pos:line="91" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="92" pos:column="9">/// &lt;param name="arg"&gt;The argument to add.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="93" pos:column="9">public</specifier> <name pos:line="93" pos:column="16">void</name></type> <name pos:line="93" pos:column="21">AddArgument</name><parameter_list pos:line="93" pos:column="32">(<param><decl><type><name pos:line="93" pos:column="33">Expression</name></type> <name pos:line="93" pos:column="44">arg</name></decl></param>)</parameter_list> <block pos:line="93" pos:column="49">{
            <if pos:line="94" pos:column="13">if<condition pos:line="94" pos:column="15">(<expr><name pos:line="94" pos:column="16">arg</name> <op:operator pos:line="94" pos:column="20">==</op:operator> <name pos:line="94" pos:column="23">null</name></expr>)</condition><then pos:line="94" pos:column="28"> <block pos:line="94" pos:column="29">{ <throw pos:line="94" pos:column="31">throw <expr><op:operator pos:line="94" pos:column="37">new</op:operator> <call><name pos:line="94" pos:column="41">ArgumentNullException</name><argument_list pos:line="94" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="94" pos:column="63">"arg"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>
            <expr_stmt><expr><name><name pos:line="95" pos:column="13">arg</name><op:operator pos:line="95" pos:column="16">.</op:operator><name pos:line="95" pos:column="17">ParentExpression</name></name> <op:operator pos:line="95" pos:column="34">=</op:operator> <name pos:line="95" pos:column="36">this</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="96" pos:column="13">arg</name><op:operator pos:line="96" pos:column="16">.</op:operator><name pos:line="96" pos:column="17">ParentStatement</name></name> <op:operator pos:line="96" pos:column="33">=</op:operator> <name><name pos:line="96" pos:column="35">this</name><op:operator pos:line="96" pos:column="39">.</op:operator><name pos:line="96" pos:column="40">ParentStatement</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="97" pos:column="13">argumentList</name><op:operator pos:line="97" pos:column="25">.</op:operator><name pos:line="97" pos:column="26">Add</name></name><argument_list pos:line="97" pos:column="29">(<argument><expr><name pos:line="97" pos:column="30">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="100" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="101" pos:column="9">/// Adds the given arguments to the Arguments collection.</comment>
        <comment type="line" pos:line="102" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="103" pos:column="9">/// &lt;param name="args"&gt;The arguments to add.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="104" pos:column="9">public</specifier> <name pos:line="104" pos:column="16">void</name></type> <name pos:line="104" pos:column="21">AddArguments</name><parameter_list pos:line="104" pos:column="33">(<param><decl><type><name><name pos:line="104" pos:column="34">IEnumerable</name><argument_list pos:line="104" pos:column="45">&lt;<argument><name pos:line="104" pos:column="46">Expression</name></argument>&gt;</argument_list></name></type> <name pos:line="104" pos:column="58">args</name></decl></param>)</parameter_list> <block pos:line="104" pos:column="64">{
            <foreach pos:line="105" pos:column="13">foreach(<init><decl><type><name pos:line="105" pos:column="21">var</name></type> <name pos:line="105" pos:column="25">arg</name> <range pos:line="105" pos:column="29">in <expr><name pos:line="105" pos:column="32">args</name></expr></range></decl></init>) <block pos:line="105" pos:column="38">{
                <expr_stmt><expr><call><name pos:line="106" pos:column="17">AddArgument</name><argument_list pos:line="106" pos:column="28">(<argument><expr><name pos:line="106" pos:column="29">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>

        <comment type="line" pos:line="110" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="111" pos:column="9">/// Adds the given type argument to the TypeArguments collection.</comment>
        <comment type="line" pos:line="112" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="113" pos:column="9">/// &lt;param name="arg"&gt;The type argument to add.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="114" pos:column="9">public</specifier> <name pos:line="114" pos:column="16">void</name></type> <name pos:line="114" pos:column="21">AddTypeArgument</name><parameter_list pos:line="114" pos:column="36">(<param><decl><type><name pos:line="114" pos:column="37">TypeUse</name></type> <name pos:line="114" pos:column="45">arg</name></decl></param>)</parameter_list> <block pos:line="114" pos:column="50">{
            <if pos:line="115" pos:column="13">if<condition pos:line="115" pos:column="15">(<expr><name pos:line="115" pos:column="16">arg</name> <op:operator pos:line="115" pos:column="20">==</op:operator> <name pos:line="115" pos:column="23">null</name></expr>)</condition><then pos:line="115" pos:column="28"> <block pos:line="115" pos:column="29">{ <throw pos:line="115" pos:column="31">throw <expr><op:operator pos:line="115" pos:column="37">new</op:operator> <call><name pos:line="115" pos:column="41">ArgumentNullException</name><argument_list pos:line="115" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="115" pos:column="63">"arg"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>
            <expr_stmt><expr><name><name pos:line="116" pos:column="13">arg</name><op:operator pos:line="116" pos:column="16">.</op:operator><name pos:line="116" pos:column="17">ParentExpression</name></name> <op:operator pos:line="116" pos:column="34">=</op:operator> <name pos:line="116" pos:column="36">this</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="117" pos:column="13">arg</name><op:operator pos:line="117" pos:column="16">.</op:operator><name pos:line="117" pos:column="17">ParentStatement</name></name> <op:operator pos:line="117" pos:column="33">=</op:operator> <name><name pos:line="117" pos:column="35">this</name><op:operator pos:line="117" pos:column="39">.</op:operator><name pos:line="117" pos:column="40">ParentStatement</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="118" pos:column="13">typeArgumentList</name><op:operator pos:line="118" pos:column="29">.</op:operator><name pos:line="118" pos:column="30">Add</name></name><argument_list pos:line="118" pos:column="33">(<argument><expr><name pos:line="118" pos:column="34">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="121" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="122" pos:column="9">/// Adds the given type arguments to the TypeArguments collection.</comment>
        <comment type="line" pos:line="123" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="124" pos:column="9">/// &lt;param name="args"&gt;The type arguments to add.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="125" pos:column="9">public</specifier> <name pos:line="125" pos:column="16">void</name></type> <name pos:line="125" pos:column="21">AddTypeArguments</name><parameter_list pos:line="125" pos:column="37">(<param><decl><type><name><name pos:line="125" pos:column="38">IEnumerable</name><argument_list pos:line="125" pos:column="49">&lt;<argument><name pos:line="125" pos:column="50">TypeUse</name></argument>&gt;</argument_list></name></type> <name pos:line="125" pos:column="59">args</name></decl></param>)</parameter_list> <block pos:line="125" pos:column="65">{
            <foreach pos:line="126" pos:column="13">foreach(<init><decl><type><name pos:line="126" pos:column="21">var</name></type> <name pos:line="126" pos:column="25">arg</name> <range pos:line="126" pos:column="29">in <expr><name pos:line="126" pos:column="32">args</name></expr></range></decl></init>) <block pos:line="126" pos:column="38">{
                <expr_stmt><expr><call><name pos:line="127" pos:column="17">AddTypeArgument</name><argument_list pos:line="127" pos:column="32">(<argument><expr><name pos:line="127" pos:column="33">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>

        <comment type="line" pos:line="131" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="132" pos:column="9">/// Returns the child expressions, including the TypeArguments and Arguments.</comment>
        <comment type="line" pos:line="133" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="134" pos:column="9">protected</specifier> <specifier pos:line="134" pos:column="19">override</specifier> <name><name pos:line="134" pos:column="28">IEnumerable</name><argument_list pos:line="134" pos:column="39">&lt;<argument><name pos:line="134" pos:column="40">AbstractProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="134" pos:column="64">GetChildren</name><parameter_list pos:line="134" pos:column="75">()</parameter_list> <block pos:line="134" pos:column="78">{
            <return pos:line="135" pos:column="13">return <expr><call><name><name pos:line="135" pos:column="20">TypeArguments</name><op:operator pos:line="135" pos:column="33">.</op:operator><name pos:line="135" pos:column="34">Concat</name></name><argument_list pos:line="135" pos:column="40">(<argument><expr><name pos:line="135" pos:column="41">Arguments</name></expr></argument>)</argument_list></call><op:operator pos:line="135" pos:column="51">.</op:operator><call><name pos:line="135" pos:column="52">Concat</name><argument_list pos:line="135" pos:column="58">(<argument><expr><call><name><name pos:line="135" pos:column="59">base</name><op:operator pos:line="135" pos:column="63">.</op:operator><name pos:line="135" pos:column="64">GetChildren</name></name><argument_list pos:line="135" pos:column="75">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="138" pos:column="9">/// &lt;summary&gt; Returns a string representation of this object. &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="139" pos:column="9">public</specifier> <specifier pos:line="139" pos:column="16">override</specifier> <name pos:line="139" pos:column="25">string</name></type> <name pos:line="139" pos:column="32">ToString</name><parameter_list pos:line="139" pos:column="40">()</parameter_list> <block pos:line="139" pos:column="43">{
            <if pos:line="140" pos:column="13">if<condition pos:line="140" pos:column="15">(<expr><call><name><name pos:line="140" pos:column="16">TypeArguments</name><op:operator pos:line="140" pos:column="29">.</op:operator><name pos:line="140" pos:column="30">Any</name></name><argument_list pos:line="140" pos:column="33">()</argument_list></call></expr>)</condition><then pos:line="140" pos:column="36"> <block pos:line="140" pos:column="37">{
                <return pos:line="141" pos:column="17">return <expr><call><name><name pos:line="141" pos:column="24">string</name><op:operator pos:line="141" pos:column="30">.</op:operator><name pos:line="141" pos:column="31">Format</name></name><argument_list pos:line="141" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="141" pos:column="38">"{0}{1}&lt;{2}&gt;({3})"</lit:literal></expr></argument>, <argument><expr><name pos:line="141" pos:column="58">Prefix</name></expr></argument>, <argument><expr><name pos:line="141" pos:column="66">Name</name></expr></argument>, <argument><expr><call><name><name pos:line="141" pos:column="72">string</name><op:operator pos:line="141" pos:column="78">.</op:operator><name pos:line="141" pos:column="79">Join</name></name><argument_list pos:line="141" pos:column="83">(<argument><expr><lit:literal type="string" pos:line="141" pos:column="84">","</lit:literal></expr></argument>, <argument><expr><name pos:line="141" pos:column="89">TypeArguments</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="141" pos:column="105">string</name><op:operator pos:line="141" pos:column="111">.</op:operator><name pos:line="141" pos:column="112">Join</name></name><argument_list pos:line="141" pos:column="116">(<argument><expr><lit:literal type="string" pos:line="141" pos:column="117">","</lit:literal></expr></argument>, <argument><expr><name pos:line="141" pos:column="122">Arguments</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
            <return pos:line="143" pos:column="13">return <expr><call><name><name pos:line="143" pos:column="20">string</name><op:operator pos:line="143" pos:column="26">.</op:operator><name pos:line="143" pos:column="27">Format</name></name><argument_list pos:line="143" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="143" pos:column="34">"{0}{1}({2})"</lit:literal></expr></argument>, <argument><expr><name pos:line="143" pos:column="49">Prefix</name></expr></argument>, <argument><expr><name pos:line="143" pos:column="57">Name</name></expr></argument>, <argument><expr><call><name><name pos:line="143" pos:column="63">string</name><op:operator pos:line="143" pos:column="69">.</op:operator><name pos:line="143" pos:column="70">Join</name></name><argument_list pos:line="143" pos:column="74">(<argument><expr><lit:literal type="string" pos:line="143" pos:column="75">","</lit:literal></expr></argument>, <argument><expr><name pos:line="143" pos:column="80">Arguments</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="146" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="147" pos:column="9">/// Gets the first type definition that matches the return type for this method</comment>
        <comment type="line" pos:line="148" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="149" pos:column="9">/// &lt;returns&gt;The first matching type definition&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="150" pos:column="9">public</specifier> <name pos:line="150" pos:column="16">TypeDefinition</name></type> <name pos:line="150" pos:column="31">FindFirstMatchingType</name><parameter_list pos:line="150" pos:column="52">()</parameter_list> <block pos:line="150" pos:column="55">{
            <return pos:line="151" pos:column="13">return <expr><call><name pos:line="151" pos:column="20">ResolveType</name><argument_list pos:line="151" pos:column="31">()</argument_list></call><op:operator pos:line="151" pos:column="33">.</op:operator><call><name pos:line="151" pos:column="34">FirstOrDefault</name><argument_list pos:line="151" pos:column="48">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="154" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="155" pos:column="9">/// Finds matching &lt;see cref="MethodDefinition"&gt;method definitions&lt;/see&gt; for this method call.</comment>
        <comment type="line" pos:line="156" pos:column="9">/// This method searches for matches in the ancestor scopes of the call. Because method calls can also be</comment>
        <comment type="line" pos:line="157" pos:column="9">/// to constructors and destructors, this will also search for matching types and then</comment>
        <comment type="line" pos:line="158" pos:column="9">/// constructors within those types</comment>
        <comment type="line" pos:line="159" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="160" pos:column="9">/// &lt;returns&gt;An enumerable of method definitions that match this method call&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="161" pos:column="9">public</specifier> <specifier pos:line="161" pos:column="16">override</specifier> <name><name pos:line="161" pos:column="25">IEnumerable</name><argument_list pos:line="161" pos:column="36">&lt;<argument><name pos:line="161" pos:column="37">INamedEntity</name></argument>&gt;</argument_list></name></type> <name pos:line="161" pos:column="51">FindMatches</name><parameter_list pos:line="161" pos:column="62">()</parameter_list> <block pos:line="161" pos:column="65">{
            <if pos:line="162" pos:column="13">if<condition pos:line="162" pos:column="15">(<expr><name pos:line="162" pos:column="16">ParentStatement</name> <op:operator pos:line="162" pos:column="32">==</op:operator> <name pos:line="162" pos:column="35">null</name></expr>)</condition><then pos:line="162" pos:column="40"> <block pos:line="162" pos:column="41">{
                <throw pos:line="163" pos:column="17">throw <expr><op:operator pos:line="163" pos:column="23">new</op:operator> <call><name pos:line="163" pos:column="27">InvalidOperationException</name><argument_list pos:line="163" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="163" pos:column="53">"ParentStatement is null"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>            

            <if pos:line="166" pos:column="13">if<condition pos:line="166" pos:column="15">(<expr><name pos:line="166" pos:column="16">IsConstructor</name> <op:operator pos:line="166" pos:column="30">||</op:operator> <name pos:line="166" pos:column="33">IsDestructor</name></expr>)</condition><then pos:line="166" pos:column="46"> <block pos:line="166" pos:column="47">{
                <decl_stmt><decl><type><name><name pos:line="167" pos:column="17">List</name><argument_list pos:line="167" pos:column="21">&lt;<argument><name pos:line="167" pos:column="22">TypeDefinition</name></argument>&gt;</argument_list></name></type> <name pos:line="167" pos:column="38">typeDefinitions</name></decl>;</decl_stmt>
                <if pos:line="168" pos:column="17">if<condition pos:line="168" pos:column="19">(<expr><name><name pos:line="168" pos:column="20">this</name><op:operator pos:line="168" pos:column="24">.</op:operator><name pos:line="168" pos:column="25">Name</name></name> <op:operator pos:line="168" pos:column="30">==</op:operator> <lit:literal type="string" pos:line="168" pos:column="33">"this"</lit:literal> <op:operator pos:line="168" pos:column="40">||</op:operator>
                   <op:operator pos:line="169" pos:column="20">(</op:operator><name><name pos:line="169" pos:column="21">this</name><op:operator pos:line="169" pos:column="25">.</op:operator><name pos:line="169" pos:column="26">Name</name></name> <op:operator pos:line="169" pos:column="31">==</op:operator> <lit:literal type="string" pos:line="169" pos:column="34">"base"</lit:literal> <op:operator pos:line="169" pos:column="41">&amp;&amp;</op:operator> <name><name pos:line="169" pos:column="44">this</name><op:operator pos:line="169" pos:column="48">.</op:operator><name pos:line="169" pos:column="49">ProgrammingLanguage</name></name> <op:operator pos:line="169" pos:column="69">==</op:operator> <name><name pos:line="169" pos:column="72">Language</name><op:operator pos:line="169" pos:column="80">.</op:operator><name pos:line="169" pos:column="81">CSharp</name></name><op:operator pos:line="169" pos:column="87">)</op:operator> <op:operator pos:line="169" pos:column="89">||</op:operator>
                   <op:operator pos:line="170" pos:column="20">(</op:operator><name><name pos:line="170" pos:column="21">this</name><op:operator pos:line="170" pos:column="25">.</op:operator><name pos:line="170" pos:column="26">Name</name></name> <op:operator pos:line="170" pos:column="31">==</op:operator> <lit:literal type="string" pos:line="170" pos:column="34">"super"</lit:literal> <op:operator pos:line="170" pos:column="42">&amp;&amp;</op:operator> <name><name pos:line="170" pos:column="45">this</name><op:operator pos:line="170" pos:column="49">.</op:operator><name pos:line="170" pos:column="50">ProgrammingLanguage</name></name> <op:operator pos:line="170" pos:column="70">==</op:operator> <name><name pos:line="170" pos:column="73">Language</name><op:operator pos:line="170" pos:column="81">.</op:operator><name pos:line="170" pos:column="82">Java</name></name><op:operator pos:line="170" pos:column="86">)</op:operator></expr>)</condition><then pos:line="170" pos:column="88"> <block pos:line="170" pos:column="89">{
                    <expr_stmt><expr><name pos:line="171" pos:column="21">typeDefinitions</name> <op:operator pos:line="171" pos:column="37">=</op:operator> <call><name><name pos:line="171" pos:column="39">TypeDefinition</name><op:operator pos:line="171" pos:column="53">.</op:operator><name pos:line="171" pos:column="54">GetTypeForKeyword</name></name><argument_list pos:line="171" pos:column="71">(<argument><expr><name pos:line="171" pos:column="72">this</name></expr></argument>)</argument_list></call><op:operator pos:line="171" pos:column="77">.</op:operator><call><name pos:line="171" pos:column="78">ToList</name><argument_list pos:line="171" pos:column="84">()</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="172" pos:column="19">else <block pos:line="172" pos:column="24">{
                    <decl_stmt><decl><type><name pos:line="173" pos:column="21">var</name></type> <name pos:line="173" pos:column="25">tempTypeUse</name> <init pos:line="173" pos:column="37">= <expr><op:operator pos:line="173" pos:column="39">new</op:operator> <call><name pos:line="173" pos:column="43">TypeUse</name><argument_list pos:line="173" pos:column="50">()</argument_list></call> <block pos:line="173" pos:column="53">{
                        <expr><name pos:line="174" pos:column="25">Name</name> <op:operator pos:line="174" pos:column="30">=</op:operator> <name><name pos:line="174" pos:column="32">this</name><op:operator pos:line="174" pos:column="36">.</op:operator><name pos:line="174" pos:column="37">Name</name></name></expr>,
                        <expr><name pos:line="175" pos:column="25">ParentStatement</name> <op:operator pos:line="175" pos:column="41">=</op:operator> <name><name pos:line="175" pos:column="43">this</name><op:operator pos:line="175" pos:column="47">.</op:operator><name pos:line="175" pos:column="48">ParentStatement</name></name></expr>,
                        <expr><name pos:line="176" pos:column="25">Location</name> <op:operator pos:line="176" pos:column="34">=</op:operator> <name><name pos:line="176" pos:column="36">this</name><op:operator pos:line="176" pos:column="40">.</op:operator><name pos:line="176" pos:column="41">Location</name></name></expr>
                    }</block></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name pos:line="178" pos:column="21">typeDefinitions</name> <op:operator pos:line="178" pos:column="37">=</op:operator> <call><name><name pos:line="178" pos:column="39">tempTypeUse</name><op:operator pos:line="178" pos:column="50">.</op:operator><name pos:line="178" pos:column="51">ResolveType</name></name><argument_list pos:line="178" pos:column="62">()</argument_list></call><op:operator pos:line="178" pos:column="64">.</op:operator><call><name pos:line="178" pos:column="65">ToList</name><argument_list pos:line="178" pos:column="71">()</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                
                <comment type="line" pos:line="181" pos:column="17">//Handle case of C++ constructor initialization lists. </comment>
                <comment type="line" pos:line="182" pos:column="17">//These will be marked as constructor calls. They can be used to initialize fields, though, in which case the call name will be the field name,</comment>
                <comment type="line" pos:line="183" pos:column="17">//rather than a type name.</comment>
                <if pos:line="184" pos:column="17">if<condition pos:line="184" pos:column="19">(<expr><op:operator pos:line="184" pos:column="20">!</op:operator><call><name><name pos:line="184" pos:column="21">typeDefinitions</name><op:operator pos:line="184" pos:column="36">.</op:operator><name pos:line="184" pos:column="37">Any</name></name><argument_list pos:line="184" pos:column="40">()</argument_list></call> <op:operator pos:line="184" pos:column="43">&amp;&amp;</op:operator> <name pos:line="184" pos:column="46">IsConstructorInitializer</name> <op:operator pos:line="184" pos:column="71">&amp;&amp;</op:operator> <name pos:line="184" pos:column="74">ProgrammingLanguage</name> <op:operator pos:line="184" pos:column="94">==</op:operator> <name><name pos:line="184" pos:column="97">Language</name><op:operator pos:line="184" pos:column="105">.</op:operator><name pos:line="184" pos:column="106">CPlusPlus</name></name></expr>)</condition><then pos:line="184" pos:column="116"> <block pos:line="184" pos:column="117">{
                    <decl_stmt><decl><type><name pos:line="185" pos:column="21">var</name></type> <name pos:line="185" pos:column="25">containingType</name> <init pos:line="185" pos:column="40">= <expr><call><name><name pos:line="185" pos:column="42">ParentStatement</name><op:operator pos:line="185" pos:column="57">.</op:operator><name><name pos:line="185" pos:column="58">GetAncestorsAndSelf</name><argument_list pos:line="185" pos:column="77">&lt;<argument><name pos:line="185" pos:column="78">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="185" pos:column="93">()</argument_list></call><op:operator pos:line="185" pos:column="95">.</op:operator><call><name pos:line="185" pos:column="96">FirstOrDefault</name><argument_list pos:line="185" pos:column="110">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="186" pos:column="21">if<condition pos:line="186" pos:column="23">(<expr><name pos:line="186" pos:column="24">containingType</name> <op:operator pos:line="186" pos:column="39">!=</op:operator> <name pos:line="186" pos:column="42">null</name></expr>)</condition><then pos:line="186" pos:column="47"> <block pos:line="186" pos:column="48">{
                        <comment type="line" pos:line="187" pos:column="25">//search this type and its parents for a field matching the name of the call</comment>
                        <decl_stmt><decl><type><name pos:line="188" pos:column="25">var</name></type> <name pos:line="188" pos:column="29">matchingField</name> <init pos:line="188" pos:column="43">= <expr><call><name><name pos:line="188" pos:column="45">containingType</name><op:operator pos:line="188" pos:column="59">.</op:operator><name pos:line="188" pos:column="60">GetParentTypesAndSelf</name></name><argument_list pos:line="188" pos:column="81">(<argument><expr><lit:literal type="boolean" pos:line="188" pos:column="82">true</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="188" pos:column="87">.</op:operator><call><name pos:line="188" pos:column="88">SelectMany</name><argument_list pos:line="188" pos:column="98">(<argument><expr><lambda><name pos:line="188" pos:column="99">t</name> <op:operator pos:line="188" pos:column="101">=&gt;</op:operator> <call><name><name pos:line="188" pos:column="104">t</name><op:operator pos:line="188" pos:column="105">.</op:operator><name><name pos:line="188" pos:column="106">GetNamedChildren</name><argument_list pos:line="188" pos:column="122">&lt;<argument><name pos:line="188" pos:column="123">VariableDeclaration</name></argument>&gt;</argument_list></name></name><argument_list pos:line="188" pos:column="143">(<argument><expr><name><name pos:line="188" pos:column="144">this</name><op:operator pos:line="188" pos:column="148">.</op:operator><name pos:line="188" pos:column="149">Name</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="188" pos:column="155">.</op:operator><call><name pos:line="188" pos:column="156">FirstOrDefault</name><argument_list pos:line="188" pos:column="170">()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if pos:line="189" pos:column="25">if<condition pos:line="189" pos:column="27">(<expr><name pos:line="189" pos:column="28">matchingField</name> <op:operator pos:line="189" pos:column="42">!=</op:operator> <name pos:line="189" pos:column="45">null</name></expr>)</condition><then pos:line="189" pos:column="50"> <block pos:line="189" pos:column="51">{
                            <expr_stmt><expr><name pos:line="190" pos:column="29">typeDefinitions</name> <op:operator pos:line="190" pos:column="45">=</op:operator> <call><name><name pos:line="190" pos:column="47">matchingField</name><op:operator pos:line="190" pos:column="60">.</op:operator><name pos:line="190" pos:column="61">VariableType</name><op:operator pos:line="190" pos:column="73">.</op:operator><name pos:line="190" pos:column="74">ResolveType</name></name><argument_list pos:line="190" pos:column="85">()</argument_list></call><op:operator pos:line="190" pos:column="87">.</op:operator><call><name pos:line="190" pos:column="88">ToList</name><argument_list pos:line="190" pos:column="94">()</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></then></if>
                }</block></then></if>

                <decl_stmt><decl><type><name pos:line="195" pos:column="17">var</name></type> <name pos:line="195" pos:column="21">matchingMethods</name> <init pos:line="195" pos:column="37">= <expr><linq><from pos:line="195" pos:column="39">from <expr><name pos:line="195" pos:column="44">typeDefinition</name></expr> <in pos:line="195" pos:column="59">in <expr><name pos:line="195" pos:column="62">typeDefinitions</name></expr></in></from>
                                      <from pos:line="196" pos:column="39">from <expr><name pos:line="196" pos:column="44">method</name></expr> <in pos:line="196" pos:column="51">in <expr><call><name><name pos:line="196" pos:column="54">typeDefinition</name><op:operator pos:line="196" pos:column="68">.</op:operator><name><name pos:line="196" pos:column="69">GetNamedChildren</name><argument_list pos:line="196" pos:column="85">&lt;<argument><name pos:line="196" pos:column="86">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="196" pos:column="103">(<argument><expr><name><name pos:line="196" pos:column="104">typeDefinition</name><op:operator pos:line="196" pos:column="118">.</op:operator><name pos:line="196" pos:column="119">Name</name></name></expr></argument>)</argument_list></call></expr></in></from>
                                      <where pos:line="197" pos:column="39">where <expr><call><name pos:line="197" pos:column="45">SignatureMatches</name><argument_list pos:line="197" pos:column="61">(<argument><expr><name><name pos:line="197" pos:column="62">typeDefinition</name><op:operator pos:line="197" pos:column="76">.</op:operator><name pos:line="197" pos:column="77">Name</name></name></expr></argument>, <argument><expr><name pos:line="197" pos:column="83">method</name></expr></argument>)</argument_list></call></expr></where>
                                      <select pos:line="198" pos:column="39">select <expr><name pos:line="198" pos:column="46">method</name></expr></select></linq></expr></init></decl>;</decl_stmt>
                <return pos:line="199" pos:column="17">return <expr><name pos:line="199" pos:column="24">matchingMethods</name></expr>;</return>
            }</block></then></if>

            <comment type="line" pos:line="202" pos:column="13">//If there's a calling expression, resolve and search under the results</comment>
            <decl_stmt><decl><type><name pos:line="203" pos:column="13">var</name></type> <name pos:line="203" pos:column="17">callingScopes</name> <init pos:line="203" pos:column="31">= <expr><call><name pos:line="203" pos:column="33">GetCallingScope</name><argument_list pos:line="203" pos:column="48">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="204" pos:column="13">if<condition pos:line="204" pos:column="15">(<expr><name pos:line="204" pos:column="16">callingScopes</name> <op:operator pos:line="204" pos:column="30">!=</op:operator> <name pos:line="204" pos:column="33">null</name></expr>)</condition><then pos:line="204" pos:column="38"> <block pos:line="204" pos:column="39">{
                <decl_stmt><decl><type><name><name pos:line="205" pos:column="17">IEnumerable</name><argument_list pos:line="205" pos:column="28">&lt;<argument><name pos:line="205" pos:column="29">INamedEntity</name></argument>&gt;</argument_list></name></type> <name pos:line="205" pos:column="43">matches</name> <init pos:line="205" pos:column="51">= <expr><call><name><name pos:line="205" pos:column="53">Enumerable</name><op:operator pos:line="205" pos:column="63">.</op:operator><name><name pos:line="205" pos:column="64">Empty</name><argument_list pos:line="205" pos:column="69">&lt;<argument><name pos:line="205" pos:column="70">INamedEntity</name></argument>&gt;</argument_list></name></name><argument_list pos:line="205" pos:column="83">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <foreach pos:line="206" pos:column="17">foreach(<init><decl><type><name pos:line="206" pos:column="25">var</name></type> <name pos:line="206" pos:column="29">scope</name> <range pos:line="206" pos:column="35">in <expr><name pos:line="206" pos:column="38">callingScopes</name></expr></range></decl></init>) <block pos:line="206" pos:column="53">{
                    <decl_stmt><decl><type><name pos:line="207" pos:column="21">var</name></type> <name pos:line="207" pos:column="25">localMatches</name> <init pos:line="207" pos:column="38">= <expr><call><name><name pos:line="207" pos:column="40">scope</name><op:operator pos:line="207" pos:column="45">.</op:operator><name><name pos:line="207" pos:column="46">GetNamedChildren</name><argument_list pos:line="207" pos:column="62">&lt;<argument><name pos:line="207" pos:column="63">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="207" pos:column="80">(<argument><expr><name><name pos:line="207" pos:column="81">this</name><op:operator pos:line="207" pos:column="85">.</op:operator><name pos:line="207" pos:column="86">Name</name></name></expr></argument>)</argument_list></call><op:operator pos:line="207" pos:column="91">.</op:operator><call><name pos:line="207" pos:column="92">Where</name><argument_list pos:line="207" pos:column="97">(<argument><expr><name pos:line="207" pos:column="98">SignatureMatches</name></expr></argument>)</argument_list></call><op:operator pos:line="207" pos:column="115">.</op:operator><call><name pos:line="207" pos:column="116">ToList</name><argument_list pos:line="207" pos:column="122">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="208" pos:column="21">var</name></type> <name pos:line="208" pos:column="25">callingType</name> <init pos:line="208" pos:column="37">= <expr><name pos:line="208" pos:column="39">scope</name> <op:operator pos:line="208" pos:column="45">as</op:operator> <name pos:line="208" pos:column="48">TypeDefinition</name></expr></init></decl>;</decl_stmt>
                    <if pos:line="209" pos:column="21">if<condition pos:line="209" pos:column="23">(<expr><op:operator pos:line="209" pos:column="24">!</op:operator><call><name><name pos:line="209" pos:column="25">localMatches</name><op:operator pos:line="209" pos:column="37">.</op:operator><name pos:line="209" pos:column="38">Any</name></name><argument_list pos:line="209" pos:column="41">()</argument_list></call> <op:operator pos:line="209" pos:column="44">&amp;&amp;</op:operator> <name pos:line="209" pos:column="47">callingType</name> <op:operator pos:line="209" pos:column="59">!=</op:operator> <name pos:line="209" pos:column="62">null</name></expr>)</condition><then pos:line="209" pos:column="67"> <block pos:line="209" pos:column="68">{
                        <comment type="line" pos:line="210" pos:column="25">//also search under the base types of the calling scope</comment>
                        <expr_stmt><expr><name pos:line="211" pos:column="25">matches</name> <op:operator pos:line="211" pos:column="33">=</op:operator> <call><name><name pos:line="211" pos:column="35">matches</name><op:operator pos:line="211" pos:column="42">.</op:operator><name pos:line="211" pos:column="43">Concat</name></name><argument_list pos:line="211" pos:column="49">(<argument><expr><call><name><name pos:line="211" pos:column="50">callingType</name><op:operator pos:line="211" pos:column="61">.</op:operator><name><name pos:line="211" pos:column="62">SearchParentTypes</name><argument_list pos:line="211" pos:column="79">&lt;<argument><name pos:line="211" pos:column="80">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="211" pos:column="97">(<argument><expr><name><name pos:line="211" pos:column="98">this</name><op:operator pos:line="211" pos:column="102">.</op:operator><name pos:line="211" pos:column="103">Name</name></name></expr></argument>, <argument><expr><name pos:line="211" pos:column="109">SignatureMatches</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else pos:line="212" pos:column="23">else <block pos:line="212" pos:column="28">{
                        <expr_stmt><expr><name pos:line="213" pos:column="25">matches</name> <op:operator pos:line="213" pos:column="33">=</op:operator> <call><name><name pos:line="213" pos:column="35">matches</name><op:operator pos:line="213" pos:column="42">.</op:operator><name pos:line="213" pos:column="43">Concat</name></name><argument_list pos:line="213" pos:column="49">(<argument><expr><name pos:line="213" pos:column="50">localMatches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></foreach>
                <return pos:line="216" pos:column="17">return <expr><name pos:line="216" pos:column="24">matches</name></expr>;</return>
            }</block></then></if>
            
            <comment type="line" pos:line="219" pos:column="13">//search enclosing scopes and base types for the method</comment>
            <foreach pos:line="220" pos:column="13">foreach(<init><decl><type><name pos:line="220" pos:column="21">var</name></type> <name pos:line="220" pos:column="25">scope</name> <range pos:line="220" pos:column="31">in <expr><call><name><name pos:line="220" pos:column="34">ParentStatement</name><op:operator pos:line="220" pos:column="49">.</op:operator><name pos:line="220" pos:column="50">GetAncestors</name></name><argument_list pos:line="220" pos:column="62">()</argument_list></call></expr></range></decl></init>) <block pos:line="220" pos:column="66">{
                <decl_stmt><decl><type><name pos:line="221" pos:column="17">var</name></type> <name pos:line="221" pos:column="21">matches</name> <init pos:line="221" pos:column="29">= <expr><call><name><name pos:line="221" pos:column="31">scope</name><op:operator pos:line="221" pos:column="36">.</op:operator><name><name pos:line="221" pos:column="37">GetNamedChildren</name><argument_list pos:line="221" pos:column="53">&lt;<argument><name pos:line="221" pos:column="54">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="221" pos:column="71">(<argument><expr><name pos:line="221" pos:column="72">this</name></expr></argument>)</argument_list></call><op:operator pos:line="221" pos:column="77">.</op:operator><call><name pos:line="221" pos:column="78">Where</name><argument_list pos:line="221" pos:column="83">(<argument><expr><name pos:line="221" pos:column="84">SignatureMatches</name></expr></argument>)</argument_list></call><op:operator pos:line="221" pos:column="101">.</op:operator><call><name pos:line="221" pos:column="102">ToList</name><argument_list pos:line="221" pos:column="108">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="222" pos:column="17">if<condition pos:line="222" pos:column="19">(<expr><call><name><name pos:line="222" pos:column="20">matches</name><op:operator pos:line="222" pos:column="27">.</op:operator><name pos:line="222" pos:column="28">Any</name></name><argument_list pos:line="222" pos:column="31">()</argument_list></call></expr>)</condition><then pos:line="222" pos:column="34"> <block pos:line="222" pos:column="35">{
                    <return pos:line="223" pos:column="21">return <expr><name pos:line="223" pos:column="28">matches</name></expr>;</return>
                }</block></then></if>
                <decl_stmt><decl><type><name pos:line="225" pos:column="17">var</name></type> <name pos:line="225" pos:column="21">typeDef</name> <init pos:line="225" pos:column="29">= <expr><name pos:line="225" pos:column="31">scope</name> <op:operator pos:line="225" pos:column="37">as</op:operator> <name pos:line="225" pos:column="40">TypeDefinition</name></expr></init></decl>;</decl_stmt>
                <if pos:line="226" pos:column="17">if<condition pos:line="226" pos:column="19">(<expr><name pos:line="226" pos:column="20">typeDef</name> <op:operator pos:line="226" pos:column="28">!=</op:operator> <name pos:line="226" pos:column="31">null</name></expr>)</condition><then pos:line="226" pos:column="36"> <block pos:line="226" pos:column="37">{
                    <comment type="line" pos:line="227" pos:column="21">//search the base types</comment>
                    <decl_stmt><decl><type><name pos:line="228" pos:column="21">var</name></type> <name pos:line="228" pos:column="25">baseTypeMatches</name> <init pos:line="228" pos:column="41">= <expr><call><name><name pos:line="228" pos:column="43">typeDef</name><op:operator pos:line="228" pos:column="50">.</op:operator><name><name pos:line="228" pos:column="51">SearchParentTypes</name><argument_list pos:line="228" pos:column="68">&lt;<argument><name pos:line="228" pos:column="69">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="228" pos:column="86">(<argument><expr><name><name pos:line="228" pos:column="87">this</name><op:operator pos:line="228" pos:column="91">.</op:operator><name pos:line="228" pos:column="92">Name</name></name></expr></argument>, <argument><expr><name pos:line="228" pos:column="98">SignatureMatches</name></expr></argument>)</argument_list></call><op:operator pos:line="228" pos:column="115">.</op:operator><call><name pos:line="228" pos:column="116">ToList</name><argument_list pos:line="228" pos:column="122">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="229" pos:column="21">if<condition pos:line="229" pos:column="23">(<expr><call><name><name pos:line="229" pos:column="24">baseTypeMatches</name><op:operator pos:line="229" pos:column="39">.</op:operator><name pos:line="229" pos:column="40">Any</name></name><argument_list pos:line="229" pos:column="43">()</argument_list></call></expr>)</condition><then pos:line="229" pos:column="46"> <block pos:line="229" pos:column="47">{
                        <return pos:line="230" pos:column="25">return <expr><name pos:line="230" pos:column="32">baseTypeMatches</name></expr>;</return>
                    }</block></then></if>
                }</block></then></if>
            }</block></foreach>

            <comment type="line" pos:line="235" pos:column="13">//we didn't find it locally, search under imported namespaces</comment>
            <return pos:line="236" pos:column="13">return <expr><op:operator pos:line="236" pos:column="20">(</op:operator><linq><from pos:line="236" pos:column="21">from <expr><name pos:line="236" pos:column="26">import</name></expr> <in pos:line="236" pos:column="33">in <expr><call><name pos:line="236" pos:column="36">GetImports</name><argument_list pos:line="236" pos:column="46">()</argument_list></call></expr></in></from>
                    <from pos:line="237" pos:column="21">from <expr><name pos:line="237" pos:column="26">match</name></expr> <in pos:line="237" pos:column="32">in <expr><call><name><name pos:line="237" pos:column="35">import</name><op:operator pos:line="237" pos:column="41">.</op:operator><name pos:line="237" pos:column="42">ImportedNamespace</name><op:operator pos:line="237" pos:column="59">.</op:operator><name><name pos:line="237" pos:column="60">GetDescendantsAndSelf</name><argument_list pos:line="237" pos:column="81">&lt;<argument><name pos:line="237" pos:column="82">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="237" pos:column="90">()</argument_list></call><op:operator pos:line="237" pos:column="92">.</op:operator><call><name pos:line="237" pos:column="93">Last</name><argument_list pos:line="237" pos:column="97">()</argument_list></call><op:operator pos:line="237" pos:column="99">.</op:operator><call><name pos:line="237" pos:column="100">FindMatches</name><argument_list pos:line="237" pos:column="111">()</argument_list></call><op:operator pos:line="237" pos:column="113">.</op:operator><call><name><name pos:line="237" pos:column="114">OfType</name><argument_list pos:line="237" pos:column="120">&lt;<argument><name pos:line="237" pos:column="121">NamedScope</name></argument>&gt;</argument_list></name><argument_list pos:line="237" pos:column="132">()</argument_list></call></expr></in></from>
                    <from pos:line="238" pos:column="21">from <expr><name pos:line="238" pos:column="26">child</name></expr> <in pos:line="238" pos:column="32">in <expr><call><name><name pos:line="238" pos:column="35">match</name><op:operator pos:line="238" pos:column="40">.</op:operator><name><name pos:line="238" pos:column="41">GetNamedChildren</name><argument_list pos:line="238" pos:column="57">&lt;<argument><name pos:line="238" pos:column="58">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="238" pos:column="75">(<argument><expr><name><name pos:line="238" pos:column="76">this</name><op:operator pos:line="238" pos:column="80">.</op:operator><name pos:line="238" pos:column="81">Name</name></name></expr></argument>)</argument_list></call></expr></in></from>
                    <where pos:line="239" pos:column="21">where <expr><call><name pos:line="239" pos:column="27">SignatureMatches</name><argument_list pos:line="239" pos:column="43">(<argument><expr><name pos:line="239" pos:column="44">child</name></expr></argument>)</argument_list></call></expr></where>
                    <select pos:line="240" pos:column="21">select <expr><name pos:line="240" pos:column="28">child</name></expr></select></linq><op:operator pos:line="240" pos:column="33">)</op:operator></expr>;</return>

        }</block></function>

        <comment type="line" pos:line="244" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="245" pos:column="9">/// Finds all of the matching type definitions for the return type of this method definition</comment>
        <comment type="line" pos:line="246" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="247" pos:column="9">/// &lt;returns&gt;An enumerable of the matching type definitions for this method&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="248" pos:column="9">public</specifier> <specifier pos:line="248" pos:column="16">override</specifier> <name><name pos:line="248" pos:column="25">IEnumerable</name><argument_list pos:line="248" pos:column="36">&lt;<argument><name pos:line="248" pos:column="37">TypeDefinition</name></argument>&gt;</argument_list></name></type> <name pos:line="248" pos:column="53">ResolveType</name><parameter_list pos:line="248" pos:column="64">()</parameter_list> <block pos:line="248" pos:column="67">{
            <decl_stmt><decl><type><name pos:line="249" pos:column="13">var</name></type> <name pos:line="249" pos:column="17">matchingMethods</name> <init pos:line="249" pos:column="33">= <expr><call><name pos:line="249" pos:column="35">FindMatches</name><argument_list pos:line="249" pos:column="46">()</argument_list></call><op:operator pos:line="249" pos:column="48">.</op:operator><call><name><name pos:line="249" pos:column="49">OfType</name><argument_list pos:line="249" pos:column="55">&lt;<argument><name pos:line="249" pos:column="56">MethodDefinition</name></argument>&gt;</argument_list></name><argument_list pos:line="249" pos:column="73">()</argument_list></call><op:operator pos:line="249" pos:column="75">.</op:operator><call><name pos:line="249" pos:column="76">ToList</name><argument_list pos:line="249" pos:column="82">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="250" pos:column="13">if<condition pos:line="250" pos:column="15">(<expr><call><name><name pos:line="250" pos:column="16">matchingMethods</name><op:operator pos:line="250" pos:column="31">.</op:operator><name pos:line="250" pos:column="32">Any</name></name><argument_list pos:line="250" pos:column="35">()</argument_list></call></expr>)</condition><then pos:line="250" pos:column="38"> <block pos:line="250" pos:column="39">{
                <foreach pos:line="251" pos:column="17">foreach(<init><decl><type><name pos:line="251" pos:column="25">var</name></type> <name pos:line="251" pos:column="29">methodDefinition</name> <range pos:line="251" pos:column="46">in <expr><name pos:line="251" pos:column="49">matchingMethods</name></expr></range></decl></init>) <block pos:line="251" pos:column="66">{
                    <decl_stmt><decl><type><name pos:line="252" pos:column="21">var</name></type> <name pos:line="252" pos:column="25">matchingTypes</name> <init pos:line="252" pos:column="39">= <expr><call><name><name pos:line="252" pos:column="41">Enumerable</name><op:operator pos:line="252" pos:column="51">.</op:operator><name><name pos:line="252" pos:column="52">Empty</name><argument_list pos:line="252" pos:column="57">&lt;<argument><name pos:line="252" pos:column="58">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="252" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if pos:line="254" pos:column="21">if<condition pos:line="254" pos:column="23">(<expr><name><name pos:line="254" pos:column="24">methodDefinition</name><op:operator pos:line="254" pos:column="40">.</op:operator><name pos:line="254" pos:column="41">ReturnType</name></name> <op:operator pos:line="254" pos:column="52">!=</op:operator> <name pos:line="254" pos:column="55">null</name></expr>)</condition><then pos:line="254" pos:column="60"> <block pos:line="254" pos:column="61">{
                        <expr_stmt><expr><name pos:line="255" pos:column="25">matchingTypes</name> <op:operator pos:line="255" pos:column="39">=</op:operator> <call><name><name pos:line="255" pos:column="41">methodDefinition</name><op:operator pos:line="255" pos:column="57">.</op:operator><name pos:line="255" pos:column="58">ReturnType</name><op:operator pos:line="255" pos:column="68">.</op:operator><name pos:line="255" pos:column="69">ResolveType</name></name><argument_list pos:line="255" pos:column="80">()</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else pos:line="256" pos:column="23">else <if pos:line="256" pos:column="28">if<condition pos:line="256" pos:column="30">(<expr><name><name pos:line="256" pos:column="31">methodDefinition</name><op:operator pos:line="256" pos:column="47">.</op:operator><name pos:line="256" pos:column="48">IsConstructor</name></name></expr>)</condition><then pos:line="256" pos:column="62"> <block pos:line="256" pos:column="63">{
                        <decl_stmt><decl><type><name pos:line="257" pos:column="25">var</name></type> <name pos:line="257" pos:column="29">methodName</name> <init pos:line="257" pos:column="40">= <expr><name><name pos:line="257" pos:column="42">methodDefinition</name><op:operator pos:line="257" pos:column="58">.</op:operator><name pos:line="257" pos:column="59">Name</name></name></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="257" pos:column="65">//define local var because of Resharper warning about accessing foreach var in closure</comment>
                        <expr_stmt><expr><name pos:line="258" pos:column="25">matchingTypes</name> <op:operator pos:line="258" pos:column="39">=</op:operator> <call><name><name pos:line="258" pos:column="41">methodDefinition</name><op:operator pos:line="258" pos:column="57">.</op:operator><name><name pos:line="258" pos:column="58">GetAncestors</name><argument_list pos:line="258" pos:column="70">&lt;<argument><name pos:line="258" pos:column="71">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="258" pos:column="86">()</argument_list></call><op:operator pos:line="258" pos:column="88">.</op:operator><call><name pos:line="258" pos:column="89">Where</name><argument_list pos:line="258" pos:column="94">(<argument><expr><lambda><name pos:line="258" pos:column="95">td</name> <op:operator pos:line="258" pos:column="98">=&gt;</op:operator> <name><name pos:line="258" pos:column="101">td</name><op:operator pos:line="258" pos:column="103">.</op:operator><name pos:line="258" pos:column="104">Name</name></name> <op:operator pos:line="258" pos:column="109">==</op:operator> <name pos:line="258" pos:column="112">methodName</name></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if></else></if>
                    <foreach pos:line="260" pos:column="21">foreach(<init><decl><type><name pos:line="260" pos:column="29">var</name></type> <name pos:line="260" pos:column="33">result</name> <range pos:line="260" pos:column="40">in <expr><name pos:line="260" pos:column="43">matchingTypes</name></expr></range></decl></init>) <block pos:line="260" pos:column="58">{
                        <return><specifier pos:line="261" pos:column="25">yield</specifier> return <expr><name pos:line="261" pos:column="38">result</name></expr>;</return>
                    }</block></foreach>
                }</block></foreach>
            }</block></then> <else pos:line="264" pos:column="15">else <block pos:line="264" pos:column="20">{
                <comment type="line" pos:line="265" pos:column="17">//no matches</comment>
                <comment type="line" pos:line="266" pos:column="17">//handle case of calls to default (implicit) constructors</comment>
                <if pos:line="267" pos:column="17">if<condition pos:line="267" pos:column="19">(<expr><name pos:line="267" pos:column="20">IsConstructor</name> <op:operator pos:line="267" pos:column="34">&amp;&amp;</op:operator> <name><name pos:line="267" pos:column="37">Arguments</name><op:operator pos:line="267" pos:column="46">.</op:operator><name pos:line="267" pos:column="47">Count</name></name> <op:operator pos:line="267" pos:column="53">==</op:operator> <lit:literal type="number" pos:line="267" pos:column="56">0</lit:literal></expr>)</condition><then pos:line="267" pos:column="58"> <block pos:line="267" pos:column="59">{
                    <decl_stmt><decl><type><name pos:line="268" pos:column="21">var</name></type> <name pos:line="268" pos:column="25">tempType</name> <init pos:line="268" pos:column="34">= <expr><op:operator pos:line="268" pos:column="36">new</op:operator> <call><name pos:line="268" pos:column="40">TypeUse</name><argument_list pos:line="268" pos:column="47">()</argument_list></call> <block pos:line="268" pos:column="50">{
                        <expr><name pos:line="269" pos:column="25">Name</name> <op:operator pos:line="269" pos:column="30">=</op:operator> <name><name pos:line="269" pos:column="32">this</name><op:operator pos:line="269" pos:column="36">.</op:operator><name pos:line="269" pos:column="37">Name</name></name></expr>, 
                        <expr><name pos:line="270" pos:column="25">Location</name> <op:operator pos:line="270" pos:column="34">=</op:operator> <name><name pos:line="270" pos:column="36">this</name><op:operator pos:line="270" pos:column="40">.</op:operator><name pos:line="270" pos:column="41">Location</name></name></expr>,
                        <expr><name pos:line="271" pos:column="25">ParentStatement</name> <op:operator pos:line="271" pos:column="41">=</op:operator> <name><name pos:line="271" pos:column="43">this</name><op:operator pos:line="271" pos:column="47">.</op:operator><name pos:line="271" pos:column="48">ParentStatement</name></name></expr>, 
                        <expr><name pos:line="272" pos:column="25">ProgrammingLanguage</name> <op:operator pos:line="272" pos:column="45">=</op:operator> <name><name pos:line="272" pos:column="47">this</name><op:operator pos:line="272" pos:column="51">.</op:operator><name pos:line="272" pos:column="52">ProgrammingLanguage</name></name></expr>
                    }</block></expr></init></decl>;</decl_stmt>
                    <foreach pos:line="274" pos:column="21">foreach(<init><decl><type><name pos:line="274" pos:column="29">var</name></type> <name pos:line="274" pos:column="33">result</name> <range pos:line="274" pos:column="40">in <expr><call><name><name pos:line="274" pos:column="43">tempType</name><op:operator pos:line="274" pos:column="51">.</op:operator><name pos:line="274" pos:column="52">ResolveType</name></name><argument_list pos:line="274" pos:column="63">()</argument_list></call></expr></range></decl></init>) <block pos:line="274" pos:column="67">{
                        <return><specifier pos:line="275" pos:column="25">yield</specifier> return <expr><name pos:line="275" pos:column="38">result</name></expr>;</return>
                    }</block></foreach>
                }</block></then></if>
            }</block></else></if>


        }</block></function>


        <comment type="line" pos:line="284" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="285" pos:column="9">/// Tests if the signature of the provided method definition matches this method call</comment>
        <comment type="line" pos:line="286" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="287" pos:column="9">/// &lt;param name="definition"&gt;The method definition to test&lt;/param&gt;</comment>
        <comment type="line" pos:line="288" pos:column="9">/// &lt;returns&gt;True if this method call matches the signature of the provided method definition, False otherwise.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="289" pos:column="9">public</specifier> <name pos:line="289" pos:column="16">bool</name></type> <name pos:line="289" pos:column="21">SignatureMatches</name><parameter_list pos:line="289" pos:column="37">(<param><decl><type><name pos:line="289" pos:column="38">MethodDefinition</name></type> <name pos:line="289" pos:column="55">definition</name></decl></param>)</parameter_list> <block pos:line="289" pos:column="67">{
            <return pos:line="290" pos:column="13">return <expr><call><name pos:line="290" pos:column="20">SignatureMatches</name><argument_list pos:line="290" pos:column="36">(<argument><expr><name><name pos:line="290" pos:column="37">this</name><op:operator pos:line="290" pos:column="41">.</op:operator><name pos:line="290" pos:column="42">Name</name></name></expr></argument>, <argument><expr><name pos:line="290" pos:column="48">definition</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="293" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="294" pos:column="9">/// Tests if the signature of the provided method definition matches this method call. The parameter &lt;paramref name="callName"/&gt;</comment>
        <comment type="line" pos:line="295" pos:column="9">/// specifies the name to use for this method call. This is useful for cases where the call is a</comment>
        <comment type="line" pos:line="296" pos:column="9">/// keyword, like "base", "this" or "super". The caller can first translate the keyword to the</comment>
        <comment type="line" pos:line="297" pos:column="9">/// actual method name to match against.</comment>
        <comment type="line" pos:line="298" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="299" pos:column="9">/// &lt;param name="definition"&gt;The method definition to test&lt;/param&gt;</comment>
        <comment type="line" pos:line="300" pos:column="9">/// &lt;param name="callName"&gt;The name to use for the method call.&lt;/param&gt;</comment>
        <comment type="line" pos:line="301" pos:column="9">/// &lt;returns&gt;True if this method call matches the signature of the provided method definition, False otherwise.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="302" pos:column="9">public</specifier> <name pos:line="302" pos:column="16">bool</name></type> <name pos:line="302" pos:column="21">SignatureMatches</name><parameter_list pos:line="302" pos:column="37">(<param><decl><type><name pos:line="302" pos:column="38">string</name></type> <name pos:line="302" pos:column="45">callName</name></decl></param>, <param><decl><type><name pos:line="302" pos:column="55">MethodDefinition</name></type> <name pos:line="302" pos:column="72">definition</name></decl></param>)</parameter_list> <block pos:line="302" pos:column="84">{
            <if pos:line="303" pos:column="13">if<condition pos:line="303" pos:column="15">(<expr><name pos:line="303" pos:column="16">null</name> <op:operator pos:line="303" pos:column="21">==</op:operator> <name pos:line="303" pos:column="24">definition</name></expr>)</condition><then pos:line="303" pos:column="35"> <block pos:line="303" pos:column="36">{
                <return pos:line="304" pos:column="17">return <expr><lit:literal type="boolean" pos:line="304" pos:column="24">false</lit:literal></expr>;</return>
            }</block></then></if>

            <comment type="line" pos:line="307" pos:column="13">//var argumentsMatchParameters = Enumerable.Zip(this.Arguments, definition.Parameters,</comment>
            <comment type="line" pos:line="308" pos:column="13">//                                              (a,p) =&gt; ArgumentMatchesDefinition(a,p));</comment>
            <decl_stmt><decl><type><name pos:line="309" pos:column="13">var</name></type> <name pos:line="309" pos:column="17">numberOfMethodParameters</name> <init pos:line="309" pos:column="42">= <expr><name><name pos:line="309" pos:column="44">definition</name><op:operator pos:line="309" pos:column="54">.</op:operator><name pos:line="309" pos:column="55">Parameters</name><op:operator pos:line="309" pos:column="65">.</op:operator><name pos:line="309" pos:column="66">Count</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="310" pos:column="13">var</name></type> <name pos:line="310" pos:column="17">numberOfMethodParametersWithDefault</name> <init pos:line="310" pos:column="53">= <expr><call><name><name pos:line="310" pos:column="55">definition</name><op:operator pos:line="310" pos:column="65">.</op:operator><name pos:line="310" pos:column="66">Parameters</name><op:operator pos:line="310" pos:column="76">.</op:operator><name pos:line="310" pos:column="77">Count</name></name><argument_list pos:line="310" pos:column="82">(<argument><expr><lambda><name pos:line="310" pos:column="83">p</name> <op:operator pos:line="310" pos:column="85">=&gt;</op:operator> <name><name pos:line="310" pos:column="88">p</name><op:operator pos:line="310" pos:column="89">.</op:operator><name pos:line="310" pos:column="90">Initializer</name></name> <op:operator pos:line="310" pos:column="102">!=</op:operator> <name pos:line="310" pos:column="105">null</name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <return pos:line="312" pos:column="13">return <expr><name><name pos:line="312" pos:column="20">this</name><op:operator pos:line="312" pos:column="24">.</op:operator><name pos:line="312" pos:column="25">IsConstructor</name></name> <op:operator pos:line="312" pos:column="39">==</op:operator> <name><name pos:line="312" pos:column="42">definition</name><op:operator pos:line="312" pos:column="52">.</op:operator><name pos:line="312" pos:column="53">IsConstructor</name> <type:modifier pos:line="312" pos:column="67">&amp;&amp;</type:modifier></name>
                   <name><name pos:line="313" pos:column="20">this</name><op:operator pos:line="313" pos:column="24">.</op:operator><name pos:line="313" pos:column="25">IsDestructor</name></name> <op:operator pos:line="313" pos:column="38">==</op:operator> <name><name pos:line="313" pos:column="41">definition</name><op:operator pos:line="313" pos:column="51">.</op:operator><name pos:line="313" pos:column="52">IsDestructor</name> <type:modifier pos:line="313" pos:column="65">&amp;&amp;</type:modifier></name>
                   <name pos:line="314" pos:column="20">callName</name> <op:operator pos:line="314" pos:column="29">==</op:operator> <name><name pos:line="314" pos:column="32">definition</name><op:operator pos:line="314" pos:column="42">.</op:operator><name pos:line="314" pos:column="43">Name</name> <type:modifier pos:line="314" pos:column="48">&amp;&amp;</type:modifier></name>
                   <name><name pos:line="315" pos:column="20">this</name><op:operator pos:line="315" pos:column="24">.</op:operator><name pos:line="315" pos:column="25">Arguments</name><op:operator pos:line="315" pos:column="34">.</op:operator><name pos:line="315" pos:column="35">Count</name></name> <op:operator pos:line="315" pos:column="41">&gt;=</op:operator> <name pos:line="315" pos:column="44">numberOfMethodParameters</name> <op:operator pos:line="315" pos:column="69">-</op:operator> <name pos:line="315" pos:column="71">numberOfMethodParametersWithDefault</name> <op:operator pos:line="315" pos:column="107">&amp;&amp;</op:operator>
                   <name><name pos:line="316" pos:column="20">this</name><op:operator pos:line="316" pos:column="24">.</op:operator><name pos:line="316" pos:column="25">Arguments</name><op:operator pos:line="316" pos:column="34">.</op:operator><name pos:line="316" pos:column="35">Count</name></name> <op:operator pos:line="316" pos:column="41">&lt;=</op:operator> <name pos:line="316" pos:column="44">numberOfMethodParameters</name></expr>;</return><comment type="line" pos:line="316" pos:column="69">// &amp;&amp;</comment>
                                                                       <comment type="line" pos:line="317" pos:column="72">//argumentsMatchParameters.All(a =&gt; a);</comment>
        }</block></function>

        <comment type="line" pos:line="320" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="321" pos:column="9">/// Instance method for getting &lt;see cref="MethodCall.XmlName"/&gt;</comment>
        <comment type="line" pos:line="322" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="323" pos:column="9">/// &lt;returns&gt;Returns the XML name for MethodCall&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="324" pos:column="9">public</specifier> <specifier pos:line="324" pos:column="16">override</specifier> <name pos:line="324" pos:column="25">string</name></type> <name pos:line="324" pos:column="32">GetXmlName</name><parameter_list pos:line="324" pos:column="42">()</parameter_list> <block pos:line="324" pos:column="45">{ <return pos:line="324" pos:column="47">return <expr><name><name pos:line="324" pos:column="54">MethodCall</name><op:operator pos:line="324" pos:column="64">.</op:operator><name pos:line="324" pos:column="65">XmlName</name></name></expr>;</return> }</block></function>

        <comment type="line" pos:line="326" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="327" pos:column="9">/// Read the XML attributes from the current &lt;paramref name="reader"/&gt; position</comment>
        <comment type="line" pos:line="328" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="329" pos:column="9">/// &lt;param name="reader"&gt;The XML reader&lt;/param&gt;</comment>
        <function><type><specifier pos:line="330" pos:column="9">protected</specifier> <specifier pos:line="330" pos:column="19">override</specifier> <name pos:line="330" pos:column="28">void</name></type> <name pos:line="330" pos:column="33">ReadXmlAttributes</name><parameter_list pos:line="330" pos:column="50">(<param><decl><type><name pos:line="330" pos:column="51">XmlReader</name></type> <name pos:line="330" pos:column="61">reader</name></decl></param>)</parameter_list> <block pos:line="330" pos:column="69">{
            <decl_stmt><decl><type><name pos:line="331" pos:column="13">string</name></type> <name pos:line="331" pos:column="20">attribute</name> <init pos:line="331" pos:column="30">= <expr><call><name><name pos:line="331" pos:column="32">reader</name><op:operator pos:line="331" pos:column="38">.</op:operator><name pos:line="331" pos:column="39">GetAttribute</name></name><argument_list pos:line="331" pos:column="51">(<argument><expr><name pos:line="331" pos:column="52">XmlIsConstructorName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="332" pos:column="13">if<condition pos:line="332" pos:column="15">(<expr><op:operator pos:line="332" pos:column="16">!</op:operator><call><name><name pos:line="332" pos:column="17">String</name><op:operator pos:line="332" pos:column="23">.</op:operator><name pos:line="332" pos:column="24">IsNullOrEmpty</name></name><argument_list pos:line="332" pos:column="37">(<argument><expr><name pos:line="332" pos:column="38">attribute</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="332" pos:column="49"> <block pos:line="332" pos:column="50">{
                <expr_stmt><expr><name pos:line="333" pos:column="17">IsConstructor</name> <op:operator pos:line="333" pos:column="31">=</op:operator> <call><name><name pos:line="333" pos:column="33">XmlConvert</name><op:operator pos:line="333" pos:column="43">.</op:operator><name pos:line="333" pos:column="44">ToBoolean</name></name><argument_list pos:line="333" pos:column="53">(<argument><expr><name pos:line="333" pos:column="54">attribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name pos:line="335" pos:column="13">attribute</name> <op:operator pos:line="335" pos:column="23">=</op:operator> <call><name><name pos:line="335" pos:column="25">reader</name><op:operator pos:line="335" pos:column="31">.</op:operator><name pos:line="335" pos:column="32">GetAttribute</name></name><argument_list pos:line="335" pos:column="44">(<argument><expr><name pos:line="335" pos:column="45">XmlIsDestructorName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if pos:line="336" pos:column="13">if<condition pos:line="336" pos:column="15">(<expr><op:operator pos:line="336" pos:column="16">!</op:operator><call><name><name pos:line="336" pos:column="17">String</name><op:operator pos:line="336" pos:column="23">.</op:operator><name pos:line="336" pos:column="24">IsNullOrEmpty</name></name><argument_list pos:line="336" pos:column="37">(<argument><expr><name pos:line="336" pos:column="38">attribute</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="336" pos:column="49"> <block pos:line="336" pos:column="50">{
                <expr_stmt><expr><name pos:line="337" pos:column="17">IsDestructor</name> <op:operator pos:line="337" pos:column="30">=</op:operator> <call><name><name pos:line="337" pos:column="32">XmlConvert</name><op:operator pos:line="337" pos:column="42">.</op:operator><name pos:line="337" pos:column="43">ToBoolean</name></name><argument_list pos:line="337" pos:column="52">(<argument><expr><name pos:line="337" pos:column="53">attribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name pos:line="339" pos:column="13">attribute</name> <op:operator pos:line="339" pos:column="23">=</op:operator> <call><name><name pos:line="339" pos:column="25">reader</name><op:operator pos:line="339" pos:column="31">.</op:operator><name pos:line="339" pos:column="32">GetAttribute</name></name><argument_list pos:line="339" pos:column="44">(<argument><expr><name pos:line="339" pos:column="45">XmlIsConstructorInitializerName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if pos:line="340" pos:column="13">if<condition pos:line="340" pos:column="15">(<expr><op:operator pos:line="340" pos:column="16">!</op:operator><call><name><name pos:line="340" pos:column="17">String</name><op:operator pos:line="340" pos:column="23">.</op:operator><name pos:line="340" pos:column="24">IsNullOrEmpty</name></name><argument_list pos:line="340" pos:column="37">(<argument><expr><name pos:line="340" pos:column="38">attribute</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="340" pos:column="49"> <block pos:line="340" pos:column="50">{
                <expr_stmt><expr><name pos:line="341" pos:column="17">IsConstructorInitializer</name> <op:operator pos:line="341" pos:column="42">=</op:operator> <call><name><name pos:line="341" pos:column="44">XmlConvert</name><op:operator pos:line="341" pos:column="54">.</op:operator><name pos:line="341" pos:column="55">ToBoolean</name></name><argument_list pos:line="341" pos:column="64">(<argument><expr><name pos:line="341" pos:column="65">attribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name pos:line="343" pos:column="13">base</name><op:operator pos:line="343" pos:column="17">.</op:operator><name pos:line="343" pos:column="18">ReadXmlAttributes</name></name><argument_list pos:line="343" pos:column="35">(<argument><expr><name pos:line="343" pos:column="36">reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="346" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="347" pos:column="9">/// Processes the child of the current reader position into a child of this object.</comment>
        <comment type="line" pos:line="348" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="349" pos:column="9">/// &lt;param name="reader"&gt;The XML reader&lt;/param&gt;</comment>
        <function><type><specifier pos:line="350" pos:column="9">protected</specifier> <specifier pos:line="350" pos:column="19">override</specifier> <name pos:line="350" pos:column="28">void</name></type> <name pos:line="350" pos:column="33">ReadXmlChild</name><parameter_list pos:line="350" pos:column="45">(<param><decl><type><name pos:line="350" pos:column="46">XmlReader</name></type> <name pos:line="350" pos:column="56">reader</name></decl></param>)</parameter_list> <block pos:line="350" pos:column="64">{
            <if pos:line="351" pos:column="13">if<condition pos:line="351" pos:column="15">(<expr><name pos:line="351" pos:column="16">XmlArgumentsName</name> <op:operator pos:line="351" pos:column="33">==</op:operator> <name><name pos:line="351" pos:column="36">reader</name><op:operator pos:line="351" pos:column="42">.</op:operator><name pos:line="351" pos:column="43">Name</name></name></expr>)</condition><then pos:line="351" pos:column="48"> <block pos:line="351" pos:column="49">{
                <expr_stmt><expr><call><name pos:line="352" pos:column="17">AddArguments</name><argument_list pos:line="352" pos:column="29">(<argument><expr><call><name><name pos:line="352" pos:column="30">XmlSerialization</name><op:operator pos:line="352" pos:column="46">.</op:operator><name pos:line="352" pos:column="47">ReadChildExpressions</name></name><argument_list pos:line="352" pos:column="67">(<argument><expr><name pos:line="352" pos:column="68">reader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="353" pos:column="15">else <if pos:line="353" pos:column="20">if<condition pos:line="353" pos:column="22">(<expr><name pos:line="353" pos:column="23">XmlTypeArgumentsName</name> <op:operator pos:line="353" pos:column="44">==</op:operator> <name><name pos:line="353" pos:column="47">reader</name><op:operator pos:line="353" pos:column="53">.</op:operator><name pos:line="353" pos:column="54">Name</name></name></expr>)</condition><then pos:line="353" pos:column="59"> <block pos:line="353" pos:column="60">{
                <expr_stmt><expr><call><name pos:line="354" pos:column="17">AddTypeArguments</name><argument_list pos:line="354" pos:column="33">(<argument><expr><call><name><name pos:line="354" pos:column="34">XmlSerialization</name><op:operator pos:line="354" pos:column="50">.</op:operator><name pos:line="354" pos:column="51">ReadChildExpressions</name></name><argument_list pos:line="354" pos:column="71">(<argument><expr><name pos:line="354" pos:column="72">reader</name></expr></argument>)</argument_list></call><op:operator pos:line="354" pos:column="79">.</op:operator><call><name><name pos:line="354" pos:column="80">Cast</name><argument_list pos:line="354" pos:column="84">&lt;<argument><name pos:line="354" pos:column="85">TypeUse</name></argument>&gt;</argument_list></name><argument_list pos:line="354" pos:column="93">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="355" pos:column="15">else <block pos:line="355" pos:column="20">{
                <expr_stmt><expr><call><name><name pos:line="356" pos:column="17">base</name><op:operator pos:line="356" pos:column="21">.</op:operator><name pos:line="356" pos:column="22">ReadXmlChild</name></name><argument_list pos:line="356" pos:column="34">(<argument><expr><name pos:line="356" pos:column="35">reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if></else></if>
        }</block></function>

        <comment type="line" pos:line="360" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="361" pos:column="9">/// Writes XML attributes from this object to the XML writer</comment>
        <comment type="line" pos:line="362" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="363" pos:column="9">/// &lt;param name="writer"&gt;The XML writer&lt;/param&gt;</comment>
        <function><type><specifier pos:line="364" pos:column="9">protected</specifier> <specifier pos:line="364" pos:column="19">override</specifier> <name pos:line="364" pos:column="28">void</name></type> <name pos:line="364" pos:column="33">WriteXmlAttributes</name><parameter_list pos:line="364" pos:column="51">(<param><decl><type><name pos:line="364" pos:column="52">XmlWriter</name></type> <name pos:line="364" pos:column="62">writer</name></decl></param>)</parameter_list> <block pos:line="364" pos:column="70">{
            <if pos:line="365" pos:column="13">if<condition pos:line="365" pos:column="15">(<expr><name pos:line="365" pos:column="16">IsConstructor</name></expr>)</condition><then pos:line="365" pos:column="30"> <block pos:line="365" pos:column="31">{
                <expr_stmt><expr><call><name><name pos:line="366" pos:column="17">writer</name><op:operator pos:line="366" pos:column="23">.</op:operator><name pos:line="366" pos:column="24">WriteAttributeString</name></name><argument_list pos:line="366" pos:column="44">(<argument><expr><name pos:line="366" pos:column="45">XmlIsConstructorName</name></expr></argument>, <argument><expr><call><name><name pos:line="366" pos:column="67">XmlConvert</name><op:operator pos:line="366" pos:column="77">.</op:operator><name pos:line="366" pos:column="78">ToString</name></name><argument_list pos:line="366" pos:column="86">(<argument><expr><name pos:line="366" pos:column="87">IsConstructor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if pos:line="369" pos:column="13">if<condition pos:line="369" pos:column="15">(<expr><name pos:line="369" pos:column="16">IsDestructor</name></expr>)</condition><then pos:line="369" pos:column="29"> <block pos:line="369" pos:column="30">{
                <expr_stmt><expr><call><name><name pos:line="370" pos:column="17">writer</name><op:operator pos:line="370" pos:column="23">.</op:operator><name pos:line="370" pos:column="24">WriteAttributeString</name></name><argument_list pos:line="370" pos:column="44">(<argument><expr><name pos:line="370" pos:column="45">XmlIsDestructorName</name></expr></argument>, <argument><expr><call><name><name pos:line="370" pos:column="66">XmlConvert</name><op:operator pos:line="370" pos:column="76">.</op:operator><name pos:line="370" pos:column="77">ToString</name></name><argument_list pos:line="370" pos:column="85">(<argument><expr><name pos:line="370" pos:column="86">IsDestructor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if pos:line="372" pos:column="13">if<condition pos:line="372" pos:column="15">(<expr><name pos:line="372" pos:column="16">IsConstructorInitializer</name></expr>)</condition><then pos:line="372" pos:column="41"> <block pos:line="372" pos:column="42">{
                <expr_stmt><expr><call><name><name pos:line="373" pos:column="17">writer</name><op:operator pos:line="373" pos:column="23">.</op:operator><name pos:line="373" pos:column="24">WriteAttributeString</name></name><argument_list pos:line="373" pos:column="44">(<argument><expr><name pos:line="373" pos:column="45">XmlIsConstructorInitializerName</name></expr></argument>, <argument><expr><call><name><name pos:line="373" pos:column="78">XmlConvert</name><op:operator pos:line="373" pos:column="88">.</op:operator><name pos:line="373" pos:column="89">ToString</name></name><argument_list pos:line="373" pos:column="97">(<argument><expr><name pos:line="373" pos:column="98">IsConstructorInitializer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name><name pos:line="376" pos:column="13">base</name><op:operator pos:line="376" pos:column="17">.</op:operator><name pos:line="376" pos:column="18">WriteXmlAttributes</name></name><argument_list pos:line="376" pos:column="36">(<argument><expr><name pos:line="376" pos:column="37">writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="379" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="380" pos:column="9">/// Writes the contents of this object to &lt;paramref name="writer"/&gt;.</comment>
        <comment type="line" pos:line="381" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="382" pos:column="9">/// &lt;param name="writer"&gt;The XML writer to write to&lt;/param&gt;</comment>
        <function><type><specifier pos:line="383" pos:column="9">protected</specifier> <specifier pos:line="383" pos:column="19">override</specifier> <name pos:line="383" pos:column="28">void</name></type> <name pos:line="383" pos:column="33">WriteXmlContents</name><parameter_list pos:line="383" pos:column="49">(<param><decl><type><name pos:line="383" pos:column="50">XmlWriter</name></type> <name pos:line="383" pos:column="60">writer</name></decl></param>)</parameter_list> <block pos:line="383" pos:column="68">{
            <expr_stmt><expr><call><name><name pos:line="384" pos:column="13">base</name><op:operator pos:line="384" pos:column="17">.</op:operator><name pos:line="384" pos:column="18">WriteXmlContents</name></name><argument_list pos:line="384" pos:column="34">(<argument><expr><name pos:line="384" pos:column="35">writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if pos:line="385" pos:column="13">if<condition pos:line="385" pos:column="15">(<expr><name><name pos:line="385" pos:column="16">Arguments</name><op:operator pos:line="385" pos:column="25">.</op:operator><name pos:line="385" pos:column="26">Count</name></name> <op:operator pos:line="385" pos:column="32">&gt;</op:operator> <lit:literal type="number" pos:line="385" pos:column="34">0</lit:literal></expr>)</condition><then pos:line="385" pos:column="36"> <block pos:line="385" pos:column="37">{
                <expr_stmt><expr><call><name><name pos:line="386" pos:column="17">XmlSerialization</name><op:operator pos:line="386" pos:column="33">.</op:operator><name><name pos:line="386" pos:column="34">WriteCollection</name><argument_list pos:line="386" pos:column="49">&lt;<argument><name pos:line="386" pos:column="50">Expression</name></argument>&gt;</argument_list></name></name><argument_list pos:line="386" pos:column="61">(<argument><expr><name pos:line="386" pos:column="62">writer</name></expr></argument>, <argument><expr><name pos:line="386" pos:column="70">XmlArgumentsName</name></expr></argument>, <argument><expr><name pos:line="386" pos:column="88">Arguments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if pos:line="388" pos:column="13">if<condition pos:line="388" pos:column="15">(<expr><name><name pos:line="388" pos:column="16">TypeArguments</name><op:operator pos:line="388" pos:column="29">.</op:operator><name pos:line="388" pos:column="30">Count</name></name> <op:operator pos:line="388" pos:column="36">&gt;</op:operator> <lit:literal type="number" pos:line="388" pos:column="38">0</lit:literal></expr>)</condition><then pos:line="388" pos:column="40"> <block pos:line="388" pos:column="41">{
                <expr_stmt><expr><call><name><name pos:line="389" pos:column="17">XmlSerialization</name><op:operator pos:line="389" pos:column="33">.</op:operator><name><name pos:line="389" pos:column="34">WriteCollection</name><argument_list pos:line="389" pos:column="49">&lt;<argument><name pos:line="389" pos:column="50">TypeUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="389" pos:column="58">(<argument><expr><name pos:line="389" pos:column="59">writer</name></expr></argument>, <argument><expr><name pos:line="389" pos:column="67">XmlTypeArgumentsName</name></expr></argument>, <argument><expr><name pos:line="389" pos:column="89">TypeArguments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="393" pos:column="9">///// &lt;summary&gt;</comment>
        <comment type="line" pos:line="394" pos:column="9">///// Computes the intersection of the matching types for</comment>
        <comment type="line" pos:line="395" pos:column="9">///// &lt;paramref name="argument"/&gt;and</comment>
        <comment type="line" pos:line="396" pos:column="9">///// &lt;paramref name="parameter"/&gt;. It returns true if the intersection has any elements in</comment>
        <comment type="line" pos:line="397" pos:column="9">///// it.</comment>
        <comment type="line" pos:line="398" pos:column="9">///// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="399" pos:column="9">///// &lt;param name="argument"&gt;an argument from see cref="Arguments"/&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="400" pos:column="9">///// &lt;param name="parameter"&gt;a parameter from see</comment>
        <comment type="line" pos:line="401" pos:column="9">///// cref="MethodDefinition.Parameters"/&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="402" pos:column="9">///// &lt;returns&gt;true if the argument and the parameter have a matching type in common; false</comment>
        <comment type="line" pos:line="403" pos:column="9">///// otherwise&lt;/returns&gt;</comment>
        <comment type="line" pos:line="404" pos:column="9">//private bool ArgumentMatchesDefinition(IResolvesToType argument, VariableDeclaration parameter) {</comment>
        <comment type="line" pos:line="405" pos:column="9">//    var possibleArgumentTypes = argument.FindMatchingTypes();</comment>
        <comment type="line" pos:line="406" pos:column="9">//    var possibleParameterTypes = parameter.VariableType.ResolveType();</comment>

        <comment type="line" pos:line="408" pos:column="9">//    return possibleArgumentTypes.Intersect(possibleParameterTypes).Any();</comment>
        <comment type="line" pos:line="409" pos:column="9">//}</comment>
    }</block></class>
}</block></namespace></unit>
