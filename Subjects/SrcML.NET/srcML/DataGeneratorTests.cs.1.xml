<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data.Test\DataGeneratorTests.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2013 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *    Patrick Francis (ABB Group) - implementation and documentation
 *****************************************************************************/</comment>

<using pos:line="13" pos:column="1">using <name pos:line="13" pos:column="7">System</name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Collections</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">Generic</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Linq</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Text</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Threading</name><op:operator pos:line="17" pos:column="23">.</op:operator><name pos:line="17" pos:column="24">Tasks</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">NUnit</name><op:operator pos:line="18" pos:column="12">.</op:operator><name pos:line="18" pos:column="13">Framework</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">System</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">IO</name></name>;</using>

<namespace pos:line="21" pos:column="1">namespace <name><name pos:line="21" pos:column="11">ABB</name><op:operator pos:line="21" pos:column="14">.</op:operator><name pos:line="21" pos:column="15">SrcML</name><op:operator pos:line="21" pos:column="20">.</op:operator><name pos:line="21" pos:column="21">Data</name><op:operator pos:line="21" pos:column="25">.</op:operator><name pos:line="21" pos:column="26">Test</name></name> <block pos:line="21" pos:column="31">{
    <class><attribute pos:line="22" pos:column="5">[<expr><name pos:line="22" pos:column="6">TestFixture</name></expr>]</attribute>
    <attribute pos:line="23" pos:column="5">[<expr><call><name pos:line="23" pos:column="6">Category</name><argument_list pos:line="23" pos:column="14">(<argument><expr><lit:literal type="string" pos:line="23" pos:column="15">"Build"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    class <name pos:line="24" pos:column="11">DataGeneratorTests</name> <block pos:line="24" pos:column="30">{
        <decl_stmt><decl><type><specifier pos:line="25" pos:column="9">public</specifier> <specifier pos:line="25" pos:column="16">const</specifier> <name pos:line="25" pos:column="22">string</name></type> <name pos:line="25" pos:column="29">SOURCE_DIRECTORY</name> <init pos:line="25" pos:column="46">= <expr><lit:literal type="string" pos:line="25" pos:column="48">"datageneratortests"</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="26" pos:column="9">public</specifier> <specifier pos:line="26" pos:column="16">const</specifier> <name pos:line="26" pos:column="22">string</name></type> <name pos:line="26" pos:column="29">OUTPUT_DIRECTORY</name> <init pos:line="26" pos:column="46">= <expr><lit:literal type="string" pos:line="26" pos:column="48">"datagenerator_output"</lit:literal></expr></init></decl>;</decl_stmt>

        <function><type><attribute pos:line="28" pos:column="9">[<expr><name pos:line="28" pos:column="10">TestFixtureSetUp</name></expr>]</attribute>
        <specifier pos:line="29" pos:column="9">public</specifier> <specifier pos:line="29" pos:column="16">static</specifier> <name pos:line="29" pos:column="23">void</name></type> <name pos:line="29" pos:column="28">TestClassSetup</name><parameter_list pos:line="29" pos:column="42">()</parameter_list> <block pos:line="29" pos:column="45">{
            <expr_stmt><expr><call><name pos:line="30" pos:column="13">TestClassCleanup</name><argument_list pos:line="30" pos:column="29">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="31" pos:column="13">Directory</name><op:operator pos:line="31" pos:column="22">.</op:operator><name pos:line="31" pos:column="23">CreateDirectory</name></name><argument_list pos:line="31" pos:column="38">(<argument><expr><name pos:line="31" pos:column="39">SOURCE_DIRECTORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="32" pos:column="13">Directory</name><op:operator pos:line="32" pos:column="22">.</op:operator><name pos:line="32" pos:column="23">CreateDirectory</name></name><argument_list pos:line="32" pos:column="38">(<argument><expr><name pos:line="32" pos:column="39">OUTPUT_DIRECTORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="35" pos:column="9">[<expr><name pos:line="35" pos:column="10">TestFixtureTearDown</name></expr>]</attribute>
        <specifier pos:line="36" pos:column="9">public</specifier> <specifier pos:line="36" pos:column="16">static</specifier> <name pos:line="36" pos:column="23">void</name></type> <name pos:line="36" pos:column="28">TestClassCleanup</name><parameter_list pos:line="36" pos:column="44">()</parameter_list> <block pos:line="36" pos:column="47">{
            <if pos:line="37" pos:column="13">if<condition pos:line="37" pos:column="15">(<expr><call><name><name pos:line="37" pos:column="16">Directory</name><op:operator pos:line="37" pos:column="25">.</op:operator><name pos:line="37" pos:column="26">Exists</name></name><argument_list pos:line="37" pos:column="32">(<argument><expr><name pos:line="37" pos:column="33">SOURCE_DIRECTORY</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="37" pos:column="51"> <block pos:line="37" pos:column="52">{
                <expr_stmt><expr><call><name><name pos:line="38" pos:column="17">Directory</name><op:operator pos:line="38" pos:column="26">.</op:operator><name pos:line="38" pos:column="27">Delete</name></name><argument_list pos:line="38" pos:column="33">(<argument><expr><name pos:line="38" pos:column="34">SOURCE_DIRECTORY</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="38" pos:column="52">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if pos:line="40" pos:column="13">if<condition pos:line="40" pos:column="15">(<expr><call><name><name pos:line="40" pos:column="16">Directory</name><op:operator pos:line="40" pos:column="25">.</op:operator><name pos:line="40" pos:column="26">Exists</name></name><argument_list pos:line="40" pos:column="32">(<argument><expr><name pos:line="40" pos:column="33">OUTPUT_DIRECTORY</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="40" pos:column="51"> <block pos:line="40" pos:column="52">{
                <expr_stmt><expr><call><name><name pos:line="41" pos:column="17">Directory</name><op:operator pos:line="41" pos:column="26">.</op:operator><name pos:line="41" pos:column="27">Delete</name></name><argument_list pos:line="41" pos:column="33">(<argument><expr><name pos:line="41" pos:column="34">OUTPUT_DIRECTORY</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="41" pos:column="52">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><attribute pos:line="45" pos:column="9">[<expr><name pos:line="45" pos:column="10">TearDown</name></expr>]</attribute>
        <specifier pos:line="46" pos:column="9">public</specifier> <name pos:line="46" pos:column="16">void</name></type> <name pos:line="46" pos:column="21">TestSetup</name><parameter_list pos:line="46" pos:column="30">()</parameter_list> <block pos:line="46" pos:column="33">{
            <foreach pos:line="47" pos:column="13">foreach(<init><decl><type><name pos:line="47" pos:column="21">var</name></type> <name pos:line="47" pos:column="25">fileName</name> <range pos:line="47" pos:column="34">in <expr><call><name><name pos:line="47" pos:column="37">Directory</name><op:operator pos:line="47" pos:column="46">.</op:operator><name pos:line="47" pos:column="47">GetFiles</name></name><argument_list pos:line="47" pos:column="55">(<argument><expr><name pos:line="47" pos:column="56">SOURCE_DIRECTORY</name></expr></argument>)</argument_list></call><op:operator pos:line="47" pos:column="73">.</op:operator><call><name pos:line="47" pos:column="74">Concat</name><argument_list pos:line="47" pos:column="80">(<argument><expr><call><name><name pos:line="47" pos:column="81">Directory</name><op:operator pos:line="47" pos:column="90">.</op:operator><name pos:line="47" pos:column="91">GetFiles</name></name><argument_list pos:line="47" pos:column="99">(<argument><expr><name pos:line="47" pos:column="100">OUTPUT_DIRECTORY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></range></decl></init>) <block pos:line="47" pos:column="120">{
                <expr_stmt><expr><call><name><name pos:line="48" pos:column="17">File</name><op:operator pos:line="48" pos:column="21">.</op:operator><name pos:line="48" pos:column="22">Delete</name></name><argument_list pos:line="48" pos:column="28">(<argument><expr><name pos:line="48" pos:column="29">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>

        <function><type><attribute pos:line="52" pos:column="9">[<expr><name pos:line="52" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="53" pos:column="9">public</specifier> <name pos:line="53" pos:column="16">void</name></type> <name pos:line="53" pos:column="21">TestBadEncoding</name><parameter_list pos:line="53" pos:column="36">()</parameter_list> <block pos:line="53" pos:column="39">{
            <decl_stmt><decl><type><name pos:line="54" pos:column="13">string</name></type> <name pos:line="54" pos:column="20">testCode</name> <init pos:line="54" pos:column="29">= <expr><lit:literal type="string" pos:line="54" pos:column="31">@"void Foo()"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="55" pos:column="13">var</name></type> <name pos:line="55" pos:column="17">fileName</name> <init pos:line="55" pos:column="26">= <expr><lit:literal type="string" pos:line="55" pos:column="28">@"BadPath™.cpp"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="56" pos:column="13">var</name></type> <name pos:line="56" pos:column="17">sourceFilePath</name> <init pos:line="56" pos:column="32">= <expr><call><name><name pos:line="56" pos:column="34">Path</name><op:operator pos:line="56" pos:column="38">.</op:operator><name pos:line="56" pos:column="39">Combine</name></name><argument_list pos:line="56" pos:column="46">(<argument><expr><name pos:line="56" pos:column="47">SOURCE_DIRECTORY</name></expr></argument>, <argument><expr><name pos:line="56" pos:column="65">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="57" pos:column="13">var</name></type> <name pos:line="57" pos:column="17">xmlFilePath</name> <init pos:line="57" pos:column="29">= <expr><call><name><name pos:line="57" pos:column="31">Path</name><op:operator pos:line="57" pos:column="35">.</op:operator><name pos:line="57" pos:column="36">Combine</name></name><argument_list pos:line="57" pos:column="43">(<argument><expr><name pos:line="57" pos:column="44">OUTPUT_DIRECTORY</name></expr></argument>, <argument><expr><call><name><name pos:line="57" pos:column="62">Path</name><op:operator pos:line="57" pos:column="66">.</op:operator><name pos:line="57" pos:column="67">ChangeExtension</name></name><argument_list pos:line="57" pos:column="82">(<argument><expr><name pos:line="57" pos:column="83">fileName</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="57" pos:column="93">"xml"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="58" pos:column="13">var</name></type> <name pos:line="58" pos:column="17">dataFilePath</name> <init pos:line="58" pos:column="30">= <expr><call><name><name pos:line="58" pos:column="32">Path</name><op:operator pos:line="58" pos:column="36">.</op:operator><name pos:line="58" pos:column="37">ChangeExtension</name></name><argument_list pos:line="58" pos:column="52">(<argument><expr><name pos:line="58" pos:column="53">xmlFilePath</name></expr></argument>, <argument><expr><name><name pos:line="58" pos:column="66">XmlSerialization</name><op:operator pos:line="58" pos:column="82">.</op:operator><name pos:line="58" pos:column="83">DEFAULT_EXTENSION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="60" pos:column="13">File</name><op:operator pos:line="60" pos:column="17">.</op:operator><name pos:line="60" pos:column="18">WriteAllText</name></name><argument_list pos:line="60" pos:column="30">(<argument><expr><name pos:line="60" pos:column="31">sourceFilePath</name></expr></argument>, <argument><expr><name pos:line="60" pos:column="47">testCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="61" pos:column="13">SrcMLGenerator</name></type> <name pos:line="61" pos:column="28">generator</name> <init pos:line="61" pos:column="38">= <expr><op:operator pos:line="61" pos:column="40">new</op:operator> <call><name pos:line="61" pos:column="44">SrcMLGenerator</name><argument_list pos:line="61" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="61" pos:column="59">"SrcML"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="63" pos:column="13">generator</name><op:operator pos:line="63" pos:column="22">.</op:operator><name pos:line="63" pos:column="23">GenerateSrcMLFromFile</name></name><argument_list pos:line="63" pos:column="44">(<argument><expr><name pos:line="63" pos:column="45">sourceFilePath</name></expr></argument>, <argument><expr><name pos:line="63" pos:column="61">xmlFilePath</name></expr></argument>, <argument><expr><name><name pos:line="63" pos:column="74">Language</name><op:operator pos:line="63" pos:column="82">.</op:operator><name pos:line="63" pos:column="83">C</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="65" pos:column="13">var</name></type> <name pos:line="65" pos:column="17">dataGenerator</name> <init pos:line="65" pos:column="31">= <expr><op:operator pos:line="65" pos:column="33">new</op:operator> <call><name pos:line="65" pos:column="37">DataGenerator</name><argument_list pos:line="65" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="66" pos:column="13">dataGenerator</name><op:operator pos:line="66" pos:column="26">.</op:operator><name pos:line="66" pos:column="27">Generate</name></name><argument_list pos:line="66" pos:column="35">(<argument><expr><name pos:line="66" pos:column="36">xmlFilePath</name></expr></argument>, <argument><expr><name pos:line="66" pos:column="49">dataFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="69" pos:column="9">[<expr><name pos:line="69" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="70" pos:column="9">public</specifier> <name pos:line="70" pos:column="16">void</name></type> <name pos:line="70" pos:column="21">TestMissingSrcMLFile</name><parameter_list pos:line="70" pos:column="41">()</parameter_list> <block pos:line="70" pos:column="44">{
            <decl_stmt><decl><type><name pos:line="71" pos:column="13">var</name></type> <name pos:line="71" pos:column="17">fileName</name> <init pos:line="71" pos:column="26">= <expr><lit:literal type="string" pos:line="71" pos:column="28">"missing.cpp"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="72" pos:column="13">var</name></type> <name pos:line="72" pos:column="17">xmlFilePath</name> <init pos:line="72" pos:column="29">= <expr><call><name><name pos:line="72" pos:column="31">Path</name><op:operator pos:line="72" pos:column="35">.</op:operator><name pos:line="72" pos:column="36">Combine</name></name><argument_list pos:line="72" pos:column="43">(<argument><expr><name pos:line="72" pos:column="44">OUTPUT_DIRECTORY</name></expr></argument>, <argument><expr><call><name><name pos:line="72" pos:column="62">Path</name><op:operator pos:line="72" pos:column="66">.</op:operator><name pos:line="72" pos:column="67">ChangeExtension</name></name><argument_list pos:line="72" pos:column="82">(<argument><expr><name pos:line="72" pos:column="83">fileName</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="72" pos:column="93">"xml"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="73" pos:column="13">var</name></type> <name pos:line="73" pos:column="17">dataFilePath</name> <init pos:line="73" pos:column="30">= <expr><call><name><name pos:line="73" pos:column="32">Path</name><op:operator pos:line="73" pos:column="36">.</op:operator><name pos:line="73" pos:column="37">ChangeExtension</name></name><argument_list pos:line="73" pos:column="52">(<argument><expr><name pos:line="73" pos:column="53">xmlFilePath</name></expr></argument>, <argument><expr><name><name pos:line="73" pos:column="66">XmlSerialization</name><op:operator pos:line="73" pos:column="82">.</op:operator><name pos:line="73" pos:column="83">DEFAULT_EXTENSION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="75" pos:column="13">var</name></type> <name pos:line="75" pos:column="17">dataGenerator</name> <init pos:line="75" pos:column="31">= <expr><op:operator pos:line="75" pos:column="33">new</op:operator> <call><name pos:line="75" pos:column="37">DataGenerator</name><argument_list pos:line="75" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="76" pos:column="13">dataGenerator</name><op:operator pos:line="76" pos:column="26">.</op:operator><name pos:line="76" pos:column="27">Generate</name></name><argument_list pos:line="76" pos:column="35">(<argument><expr><name pos:line="76" pos:column="36">xmlFilePath</name></expr></argument>, <argument><expr><name pos:line="76" pos:column="49">dataFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
