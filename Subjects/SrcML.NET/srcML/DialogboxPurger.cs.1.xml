<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\VisualStudio\ABB.SrcML.VisualStudio.SrcMLService.IntegrationTests\IntegrationTest Library\DialogboxPurger.cs" pos:tabs="8" pos:line="1" pos:column="1">
<namespace pos:line="2" pos:column="1">namespace <name><name pos:line="2" pos:column="11">Microsoft</name><op:operator pos:line="2" pos:column="20">.</op:operator><name pos:line="2" pos:column="21">VsSDK</name><op:operator pos:line="2" pos:column="26">.</op:operator><name pos:line="2" pos:column="27">IntegrationTestLibrary</name></name> <block pos:line="2" pos:column="50">{
    <using pos:line="3" pos:column="5">using <name pos:line="3" pos:column="11">System</name>;</using>
    <using pos:line="4" pos:column="5">using <name><name pos:line="4" pos:column="11">System</name><op:operator pos:line="4" pos:column="17">.</op:operator><name pos:line="4" pos:column="18">Collections</name><op:operator pos:line="4" pos:column="29">.</op:operator><name pos:line="4" pos:column="30">Generic</name></name>;</using>
    <using pos:line="5" pos:column="5">using <name><name pos:line="5" pos:column="11">System</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">Text</name></name>;</using>
    <using pos:line="6" pos:column="5">using <name><name pos:line="6" pos:column="11">System</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">Runtime</name><op:operator pos:line="6" pos:column="25">.</op:operator><name pos:line="6" pos:column="26">InteropServices</name></name>;</using>
    <using pos:line="7" pos:column="5">using <name><name pos:line="7" pos:column="11">System</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">Threading</name></name>;</using>
    <using pos:line="8" pos:column="5">using <name><name pos:line="8" pos:column="11">Microsoft</name><op:operator pos:line="8" pos:column="20">.</op:operator><name pos:line="8" pos:column="21">VisualStudio</name><op:operator pos:line="8" pos:column="33">.</op:operator><name pos:line="8" pos:column="34">Shell</name><op:operator pos:line="8" pos:column="39">.</op:operator><name pos:line="8" pos:column="40">Interop</name></name>;</using>
    <using pos:line="9" pos:column="5">using <name><name pos:line="9" pos:column="11">Microsoft</name><op:operator pos:line="9" pos:column="20">.</op:operator><name pos:line="9" pos:column="21">VisualStudio</name><op:operator pos:line="9" pos:column="33">.</op:operator><name pos:line="9" pos:column="34">Shell</name></name>;</using>

    <comment type="line" pos:line="11" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="12" pos:column="5">/// This class is responsible to close dialog boxes that pop up during different VS Calls</comment>
    <comment type="line" pos:line="13" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="14" pos:column="5">internal</specifier> class <name pos:line="14" pos:column="20">DialogBoxPurger</name> <super pos:line="14" pos:column="36">: <name pos:line="14" pos:column="38">IDisposable</name></super> <block pos:line="14" pos:column="50">{
        <comment type="line" pos:line="15" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="16" pos:column="9">/// The default number of milliseconds to wait for the threads to signal to terminate.</comment>
        <comment type="line" pos:line="17" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="18" pos:column="9">private</specifier> <specifier pos:line="18" pos:column="17">const</specifier> <name pos:line="18" pos:column="23">int</name></type> <name pos:line="18" pos:column="27">DefaultMillisecondsToWait</name> <init pos:line="18" pos:column="53">= <expr><lit:literal type="number" pos:line="18" pos:column="55">3500</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="20" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="21" pos:column="9">/// Object used for synchronization between thread calls.</comment>
        <comment type="line" pos:line="22" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="23" pos:column="9">internal</specifier> <specifier pos:line="23" pos:column="18">static</specifier> <specifier pos:line="23" pos:column="25">volatile</specifier> <name pos:line="23" pos:column="34">object</name></type> <name pos:line="23" pos:column="41">Mutex</name> <init pos:line="23" pos:column="47">= <expr><op:operator pos:line="23" pos:column="49">new</op:operator> <call><name pos:line="23" pos:column="53">object</name><argument_list pos:line="23" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="25" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="26" pos:column="9">/// The IVsUIShell. This cannot be queried on the working thread from the service provider. Must be done in the main thread.!!</comment>
        <comment type="line" pos:line="27" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="28" pos:column="9">private</specifier> <name pos:line="28" pos:column="17">IVsUIShell</name></type> <name pos:line="28" pos:column="28">uiShell</name></decl>;</decl_stmt>

        <comment type="line" pos:line="30" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="31" pos:column="9">/// The button to "press" on the dialog.</comment>
        <comment type="line" pos:line="32" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="33" pos:column="9">private</specifier> <name pos:line="33" pos:column="17">int</name></type> <name pos:line="33" pos:column="21">buttonAction</name></decl>;</decl_stmt>

        <comment type="line" pos:line="35" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="36" pos:column="9">/// Thread signales to the calling thread that it is done.</comment>
        <comment type="line" pos:line="37" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="38" pos:column="9">private</specifier> <name pos:line="38" pos:column="17">bool</name></type> <name pos:line="38" pos:column="22">exitThread</name> <init pos:line="38" pos:column="33">= <expr><lit:literal type="boolean" pos:line="38" pos:column="35">false</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="40" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="41" pos:column="9">/// Calling thread signales to this thread to die.</comment>
        <comment type="line" pos:line="42" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="43" pos:column="9">private</specifier> <name pos:line="43" pos:column="17">AutoResetEvent</name></type> <name pos:line="43" pos:column="32">threadDone</name> <init pos:line="43" pos:column="43">= <expr><op:operator pos:line="43" pos:column="45">new</op:operator> <call><name pos:line="43" pos:column="49">AutoResetEvent</name><argument_list pos:line="43" pos:column="63">(<argument><expr><lit:literal type="boolean" pos:line="43" pos:column="64">false</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="45" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="46" pos:column="9">/// The queued thread started.</comment>
        <comment type="line" pos:line="47" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="48" pos:column="9">private</specifier> <name pos:line="48" pos:column="17">AutoResetEvent</name></type> <name pos:line="48" pos:column="32">threadStarted</name> <init pos:line="48" pos:column="46">= <expr><op:operator pos:line="48" pos:column="48">new</op:operator> <call><name pos:line="48" pos:column="52">AutoResetEvent</name><argument_list pos:line="48" pos:column="66">(<argument><expr><lit:literal type="boolean" pos:line="48" pos:column="67">false</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="50" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="51" pos:column="9">/// The result of the dialogbox closing for all the dialog boxes. That is if there are two of them and one fails this will be false.</comment>
        <comment type="line" pos:line="52" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="53" pos:column="9">private</specifier> <name pos:line="53" pos:column="17">bool</name></type> <name pos:line="53" pos:column="22">dialogBoxCloseResult</name> <init pos:line="53" pos:column="43">= <expr><lit:literal type="boolean" pos:line="53" pos:column="45">false</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="55" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="56" pos:column="9">/// The expected text to see on the dialog box. If set the thread will continue finding the dialog box with this text.</comment>
        <comment type="line" pos:line="57" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="58" pos:column="9">private</specifier> <name pos:line="58" pos:column="17">string</name></type> <name pos:line="58" pos:column="24">expectedDialogBoxText</name> <init pos:line="58" pos:column="46">= <expr><name><name pos:line="58" pos:column="48">String</name><op:operator pos:line="58" pos:column="54">.</op:operator><name pos:line="58" pos:column="55">Empty</name></name></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="60" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="61" pos:column="9">/// The number of the same  dialog boxes to wait for.</comment>
        <comment type="line" pos:line="62" pos:column="9">/// This is for scenarios when two dialog boxes with the same text are popping up.</comment>
        <comment type="line" pos:line="63" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="64" pos:column="9">private</specifier> <name pos:line="64" pos:column="17">int</name></type> <name pos:line="64" pos:column="21">numberOfDialogsToWaitFor</name> <init pos:line="64" pos:column="46">= <expr><lit:literal type="number" pos:line="64" pos:column="48">1</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="66" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="67" pos:column="9">/// Has the object been disposed.</comment>
        <comment type="line" pos:line="68" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="69" pos:column="9">private</specifier> <name pos:line="69" pos:column="17">bool</name></type> <name pos:line="69" pos:column="22">isDisposed</name></decl>;</decl_stmt>

        <comment type="line" pos:line="71" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="72" pos:column="9">/// Overloaded ctor.</comment>
        <comment type="line" pos:line="73" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="74" pos:column="9">/// &lt;param name="buttonAction"&gt;The botton to "press" on the dialog box.&lt;/param&gt;</comment>
        <comment type="line" pos:line="75" pos:column="9">/// &lt;param name="numberOfDialogsToWaitFor"&gt;The number of dialog boxes with the same message to wait for. This is the situation when the same action pops up two of the same dialog boxes&lt;/param&gt;</comment>
        <comment type="line" pos:line="76" pos:column="9">/// &lt;param name="expectedDialogMesssage"&gt;The expected dialog box message to check for.&lt;/param&gt;</comment>
        <constructor><specifier pos:line="77" pos:column="9">internal</specifier> <name pos:line="77" pos:column="18">DialogBoxPurger</name><parameter_list pos:line="77" pos:column="33">(<param><decl><type><name pos:line="77" pos:column="34">int</name></type> <name pos:line="77" pos:column="38">buttonAction</name></decl></param>, <param><decl><type><name pos:line="77" pos:column="52">int</name></type> <name pos:line="77" pos:column="56">numberOfDialogsToWaitFor</name></decl></param>, <param><decl><type><name pos:line="77" pos:column="82">string</name></type> <name pos:line="77" pos:column="89">expectedDialogMesssage</name></decl></param>)</parameter_list> <block pos:line="77" pos:column="113">{
            <expr_stmt><expr><name><name pos:line="78" pos:column="13">this</name><op:operator pos:line="78" pos:column="17">.</op:operator><name pos:line="78" pos:column="18">buttonAction</name></name> <op:operator pos:line="78" pos:column="31">=</op:operator> <name pos:line="78" pos:column="33">buttonAction</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="79" pos:column="13">this</name><op:operator pos:line="79" pos:column="17">.</op:operator><name pos:line="79" pos:column="18">numberOfDialogsToWaitFor</name></name> <op:operator pos:line="79" pos:column="43">=</op:operator> <name pos:line="79" pos:column="45">numberOfDialogsToWaitFor</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="80" pos:column="13">this</name><op:operator pos:line="80" pos:column="17">.</op:operator><name pos:line="80" pos:column="18">expectedDialogBoxText</name></name> <op:operator pos:line="80" pos:column="40">=</op:operator> <name pos:line="80" pos:column="42">expectedDialogMesssage</name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="83" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="84" pos:column="9">/// Overloaded ctor.</comment>
        <comment type="line" pos:line="85" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="86" pos:column="9">/// &lt;param name="buttonAction"&gt;The botton to "press" on the dialog box.&lt;/param&gt;</comment>
        <comment type="line" pos:line="87" pos:column="9">/// &lt;param name="numberOfDialogsToWaitFor"&gt;The number of dialog boxes with the same message to wait for. This is the situation when the same action pops up two of the same dialog boxes&lt;/param&gt;</comment>
        <constructor><specifier pos:line="88" pos:column="9">internal</specifier> <name pos:line="88" pos:column="18">DialogBoxPurger</name><parameter_list pos:line="88" pos:column="33">(<param><decl><type><name pos:line="88" pos:column="34">int</name></type> <name pos:line="88" pos:column="38">buttonAction</name></decl></param>, <param><decl><type><name pos:line="88" pos:column="52">int</name></type> <name pos:line="88" pos:column="56">numberOfDialogsToWaitFor</name></decl></param>)</parameter_list> <block pos:line="88" pos:column="82">{
            <expr_stmt><expr><name><name pos:line="89" pos:column="13">this</name><op:operator pos:line="89" pos:column="17">.</op:operator><name pos:line="89" pos:column="18">buttonAction</name></name> <op:operator pos:line="89" pos:column="31">=</op:operator> <name pos:line="89" pos:column="33">buttonAction</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="90" pos:column="13">this</name><op:operator pos:line="90" pos:column="17">.</op:operator><name pos:line="90" pos:column="18">numberOfDialogsToWaitFor</name></name> <op:operator pos:line="90" pos:column="43">=</op:operator> <name pos:line="90" pos:column="45">numberOfDialogsToWaitFor</name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="93" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="94" pos:column="9">/// Overloaded ctor.</comment>
        <comment type="line" pos:line="95" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="96" pos:column="9">/// &lt;param name="buttonAction"&gt;The botton to "press" on the dialog box.&lt;/param&gt;</comment>
        <comment type="line" pos:line="97" pos:column="9">/// &lt;param name="expectedDialogMesssage"&gt;The expected dialog box message to check for.&lt;/param&gt;</comment>
        <constructor><specifier pos:line="98" pos:column="9">internal</specifier> <name pos:line="98" pos:column="18">DialogBoxPurger</name><parameter_list pos:line="98" pos:column="33">(<param><decl><type><name pos:line="98" pos:column="34">int</name></type> <name pos:line="98" pos:column="38">buttonAction</name></decl></param>, <param><decl><type><name pos:line="98" pos:column="52">string</name></type> <name pos:line="98" pos:column="59">expectedDialogMesssage</name></decl></param>)</parameter_list> <block pos:line="98" pos:column="83">{
            <expr_stmt><expr><name><name pos:line="99" pos:column="13">this</name><op:operator pos:line="99" pos:column="17">.</op:operator><name pos:line="99" pos:column="18">buttonAction</name></name> <op:operator pos:line="99" pos:column="31">=</op:operator> <name pos:line="99" pos:column="33">buttonAction</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="100" pos:column="13">this</name><op:operator pos:line="100" pos:column="17">.</op:operator><name pos:line="100" pos:column="18">expectedDialogBoxText</name></name> <op:operator pos:line="100" pos:column="40">=</op:operator> <name pos:line="100" pos:column="42">expectedDialogMesssage</name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="103" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="104" pos:column="9">/// Overloaded ctor.</comment>
        <comment type="line" pos:line="105" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="106" pos:column="9">/// &lt;param name="buttonAction"&gt;The botton to "press" on the dialog box.&lt;/param&gt;</comment>
        <constructor><specifier pos:line="107" pos:column="9">internal</specifier> <name pos:line="107" pos:column="18">DialogBoxPurger</name><parameter_list pos:line="107" pos:column="33">(<param><decl><type><name pos:line="107" pos:column="34">int</name></type> <name pos:line="107" pos:column="38">buttonAction</name></decl></param>)</parameter_list> <block pos:line="107" pos:column="52">{
            <expr_stmt><expr><name><name pos:line="108" pos:column="13">this</name><op:operator pos:line="108" pos:column="17">.</op:operator><name pos:line="108" pos:column="18">buttonAction</name></name> <op:operator pos:line="108" pos:column="31">=</op:operator> <name pos:line="108" pos:column="33">buttonAction</name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="111" pos:column="9">/// &lt;summary&gt;</comment>
        <cpp:region pos:line="112" pos:column="9">#<cpp:directive pos:line="112" pos:column="10">region</cpp:directive> IDisposable Members</cpp:region>

        <function><type><name pos:line="114" pos:column="9">void</name></type> <name><name pos:line="114" pos:column="14">IDisposable</name><op:operator pos:line="114" pos:column="25">.</op:operator><name pos:line="114" pos:column="26">Dispose</name></name><parameter_list pos:line="114" pos:column="33">()</parameter_list> <block pos:line="114" pos:column="36">{
            <if pos:line="115" pos:column="13">if<condition pos:line="115" pos:column="15">(<expr><name><name pos:line="115" pos:column="16">this</name><op:operator pos:line="115" pos:column="20">.</op:operator><name pos:line="115" pos:column="21">isDisposed</name></name></expr>)</condition><then pos:line="115" pos:column="32"> <block pos:line="115" pos:column="33">{
                <return pos:line="116" pos:column="17">return;</return>
            }</block></then></if>

            <expr_stmt><expr><call><name><name pos:line="119" pos:column="13">this</name><op:operator pos:line="119" pos:column="17">.</op:operator><name pos:line="119" pos:column="18">WaitForDialogThreadToTerminate</name></name><argument_list pos:line="119" pos:column="48">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name pos:line="121" pos:column="13">this</name><op:operator pos:line="121" pos:column="17">.</op:operator><name pos:line="121" pos:column="18">isDisposed</name></name> <op:operator pos:line="121" pos:column="29">=</op:operator> <lit:literal type="boolean" pos:line="121" pos:column="31">true</lit:literal></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="124" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="125" pos:column="9">/// Spawns a thread that will start listening to dialog boxes.</comment>
        <comment type="line" pos:line="126" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="127" pos:column="9">internal</specifier> <name pos:line="127" pos:column="18">void</name></type> <name pos:line="127" pos:column="23">Start</name><parameter_list pos:line="127" pos:column="28">()</parameter_list> <block pos:line="127" pos:column="31">{
            <comment type="line" pos:line="128" pos:column="13">// We ask for the uishell here since we cannot do that on the therad that we will spawn.</comment>
            <decl_stmt><decl><type><name pos:line="129" pos:column="13">IVsUIShell</name></type> <name pos:line="129" pos:column="24">uiShell</name> <init pos:line="129" pos:column="32">= <expr><call><name><name pos:line="129" pos:column="34">Package</name><op:operator pos:line="129" pos:column="41">.</op:operator><name pos:line="129" pos:column="42">GetGlobalService</name></name><argument_list pos:line="129" pos:column="58">(<argument><expr><call><name pos:line="129" pos:column="59">typeof</name><argument_list pos:line="129" pos:column="65">(<argument><expr><name pos:line="129" pos:column="66">SVsUIShell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="129" pos:column="79">as</op:operator> <name pos:line="129" pos:column="82">IVsUIShell</name></expr></init></decl>;</decl_stmt>

            <if pos:line="131" pos:column="13">if<condition pos:line="131" pos:column="15">(<expr><name pos:line="131" pos:column="16">uiShell</name> <op:operator pos:line="131" pos:column="24">==</op:operator> <name pos:line="131" pos:column="27">null</name></expr>)</condition><then pos:line="131" pos:column="32"> <block pos:line="131" pos:column="33">{
                <throw pos:line="132" pos:column="17">throw <expr><op:operator pos:line="132" pos:column="23">new</op:operator> <call><name pos:line="132" pos:column="27">InvalidOperationException</name><argument_list pos:line="132" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="132" pos:column="53">"Could not get the uiShell from the serviceProvider"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <expr_stmt><expr><name><name pos:line="135" pos:column="13">this</name><op:operator pos:line="135" pos:column="17">.</op:operator><name pos:line="135" pos:column="18">uiShell</name></name> <op:operator pos:line="135" pos:column="26">=</op:operator> <name pos:line="135" pos:column="28">uiShell</name></expr>;</expr_stmt>

            <decl_stmt><decl><type><name><name pos:line="137" pos:column="13">System</name><op:operator pos:line="137" pos:column="19">.</op:operator><name pos:line="137" pos:column="20">Threading</name><op:operator pos:line="137" pos:column="29">.</op:operator><name pos:line="137" pos:column="30">Thread</name></name></type> <name pos:line="137" pos:column="37">thread</name> <init pos:line="137" pos:column="44">= <expr><op:operator pos:line="137" pos:column="46">new</op:operator> <call><name><name pos:line="137" pos:column="50">System</name><op:operator pos:line="137" pos:column="56">.</op:operator><name pos:line="137" pos:column="57">Threading</name><op:operator pos:line="137" pos:column="66">.</op:operator><name pos:line="137" pos:column="67">Thread</name></name><argument_list pos:line="137" pos:column="73">(<argument><expr><op:operator pos:line="137" pos:column="74">new</op:operator> <call><name pos:line="137" pos:column="78">ThreadStart</name><argument_list pos:line="137" pos:column="89">(<argument><expr><name><name pos:line="137" pos:column="90">this</name><op:operator pos:line="137" pos:column="94">.</op:operator><name pos:line="137" pos:column="95">HandleDialogBoxes</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="138" pos:column="13">thread</name><op:operator pos:line="138" pos:column="19">.</op:operator><name pos:line="138" pos:column="20">Start</name></name><argument_list pos:line="138" pos:column="25">()</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="140" pos:column="13">// We should never deadlock here, hence do not use the lock. Wait to be sure that the thread started.</comment>
            <expr_stmt><expr><call><name><name pos:line="141" pos:column="13">this</name><op:operator pos:line="141" pos:column="17">.</op:operator><name pos:line="141" pos:column="18">threadStarted</name><op:operator pos:line="141" pos:column="31">.</op:operator><name pos:line="141" pos:column="32">WaitOne</name></name><argument_list pos:line="141" pos:column="39">(<argument><expr><lit:literal type="number" pos:line="141" pos:column="40">3500</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="141" pos:column="46">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="144" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="145" pos:column="9">/// Waits for the dialog box close thread to terminate. If the thread does not signal back within millisecondsToWait that it is shutting down,</comment>
        <comment type="line" pos:line="146" pos:column="9">/// then it will tell to the thread to do it.</comment>
        <comment type="line" pos:line="147" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="148" pos:column="9">internal</specifier> <name pos:line="148" pos:column="18">bool</name></type> <name pos:line="148" pos:column="23">WaitForDialogThreadToTerminate</name><parameter_list pos:line="148" pos:column="53">()</parameter_list> <block pos:line="148" pos:column="56">{
            <return pos:line="149" pos:column="13">return <expr><call><name><name pos:line="149" pos:column="20">this</name><op:operator pos:line="149" pos:column="24">.</op:operator><name pos:line="149" pos:column="25">WaitForDialogThreadToTerminate</name></name><argument_list pos:line="149" pos:column="55">(<argument><expr><name pos:line="149" pos:column="56">DefaultMillisecondsToWait</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="152" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="153" pos:column="9">/// Waits for the dialog box close thread to terminate. If the thread does not signal back within millisecondsToWait that it is shutting down,</comment>
        <comment type="line" pos:line="154" pos:column="9">/// then it will tell to the thread to do it.</comment>
        <comment type="line" pos:line="155" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="156" pos:column="9">/// &lt;param name="millisecondsToWait"&gt;The number milliseconds to wait for until the dialog purger thread is signaled to terminate. This is just for safe precaution that we do not hang. &lt;/param&gt;</comment>
        <comment type="line" pos:line="157" pos:column="9">/// &lt;returns&gt;The result of the dialog boxes closing&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="158" pos:column="9">internal</specifier> <name pos:line="158" pos:column="18">bool</name></type> <name pos:line="158" pos:column="23">WaitForDialogThreadToTerminate</name><parameter_list pos:line="158" pos:column="53">(<param><decl><type><name pos:line="158" pos:column="54">int</name></type> <name pos:line="158" pos:column="58">numberOfMillisecondsToWait</name></decl></param>)</parameter_list> <block pos:line="158" pos:column="86">{
            <decl_stmt><decl><type><name pos:line="159" pos:column="13">bool</name></type> <name pos:line="159" pos:column="18">signaled</name> <init pos:line="159" pos:column="27">= <expr><lit:literal type="boolean" pos:line="159" pos:column="29">false</lit:literal></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="161" pos:column="13">// We give millisecondsToWait sec to bring up and close the dialog box.</comment>
            <expr_stmt><expr><name pos:line="162" pos:column="13">signaled</name> <op:operator pos:line="162" pos:column="22">=</op:operator> <call><name><name pos:line="162" pos:column="24">this</name><op:operator pos:line="162" pos:column="28">.</op:operator><name pos:line="162" pos:column="29">threadDone</name><op:operator pos:line="162" pos:column="39">.</op:operator><name pos:line="162" pos:column="40">WaitOne</name></name><argument_list pos:line="162" pos:column="47">(<argument><expr><name pos:line="162" pos:column="48">numberOfMillisecondsToWait</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="162" pos:column="76">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="164" pos:column="13">// Kill the thread since a timeout occured.</comment>
            <if pos:line="165" pos:column="13">if<condition pos:line="165" pos:column="15">(<expr><op:operator pos:line="165" pos:column="16">!</op:operator><name pos:line="165" pos:column="17">signaled</name></expr>)</condition><then pos:line="165" pos:column="26"> <block pos:line="165" pos:column="27">{
                <lock pos:line="166" pos:column="17">lock(<expr><name pos:line="166" pos:column="22">Mutex</name></expr>) <block pos:line="166" pos:column="29">{
                    <comment type="line" pos:line="167" pos:column="21">// Set the exit thread to true. Next time the thread will kill itselfes if it sees </comment>
                    <expr_stmt><expr><name><name pos:line="168" pos:column="21">this</name><op:operator pos:line="168" pos:column="25">.</op:operator><name pos:line="168" pos:column="26">exitThread</name></name> <op:operator pos:line="168" pos:column="37">=</op:operator> <lit:literal type="boolean" pos:line="168" pos:column="39">true</lit:literal></expr>;</expr_stmt>
                }</block></lock>

                <comment type="line" pos:line="171" pos:column="17">// Wait for the thread to finish. We should never deadlock here.</comment>
                <expr_stmt><expr><call><name><name pos:line="172" pos:column="17">this</name><op:operator pos:line="172" pos:column="21">.</op:operator><name pos:line="172" pos:column="22">threadDone</name><op:operator pos:line="172" pos:column="32">.</op:operator><name pos:line="172" pos:column="33">WaitOne</name></name><argument_list pos:line="172" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <return pos:line="175" pos:column="13">return <expr><name><name pos:line="175" pos:column="20">this</name><op:operator pos:line="175" pos:column="24">.</op:operator><name pos:line="175" pos:column="25">dialogBoxCloseResult</name></name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="178" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="179" pos:column="9">/// This is the thread method. </comment>
        <comment type="line" pos:line="180" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="181" pos:column="9">private</specifier> <name pos:line="181" pos:column="17">void</name></type> <name pos:line="181" pos:column="22">HandleDialogBoxes</name><parameter_list pos:line="181" pos:column="39">()</parameter_list> <block pos:line="181" pos:column="42">{
            <comment type="line" pos:line="182" pos:column="13">// No synchronization numberOfDialogsToWaitFor since it is readonly</comment>
            <decl_stmt><decl><type><name pos:line="183" pos:column="13">IntPtr</name><index pos:line="183" pos:column="19">[]</index></type> <name pos:line="183" pos:column="22">hwnds</name> <init pos:line="183" pos:column="28">= <expr><op:operator pos:line="183" pos:column="30">new</op:operator> <name><name pos:line="183" pos:column="34">IntPtr</name><index pos:line="183" pos:column="40">[<expr><name><name pos:line="183" pos:column="41">this</name><op:operator pos:line="183" pos:column="45">.</op:operator><name pos:line="183" pos:column="46">numberOfDialogsToWaitFor</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="184" pos:column="13">bool</name><index pos:line="184" pos:column="17">[]</index></type> <name pos:line="184" pos:column="20">dialogBoxCloseResults</name> <init pos:line="184" pos:column="42">= <expr><op:operator pos:line="184" pos:column="44">new</op:operator> <name><name pos:line="184" pos:column="48">bool</name><index pos:line="184" pos:column="52">[<expr><name><name pos:line="184" pos:column="53">this</name><op:operator pos:line="184" pos:column="57">.</op:operator><name pos:line="184" pos:column="58">numberOfDialogsToWaitFor</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <try pos:line="186" pos:column="13">try <block pos:line="186" pos:column="17">{
                <comment type="line" pos:line="187" pos:column="17">// Signal that we started</comment>
                <lock pos:line="188" pos:column="17">lock(<expr><name pos:line="188" pos:column="22">Mutex</name></expr>) <block pos:line="188" pos:column="29">{
                    <expr_stmt><expr><call><name><name pos:line="189" pos:column="21">this</name><op:operator pos:line="189" pos:column="25">.</op:operator><name pos:line="189" pos:column="26">threadStarted</name><op:operator pos:line="189" pos:column="39">.</op:operator><name pos:line="189" pos:column="40">Set</name></name><argument_list pos:line="189" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
                }</block></lock>

                <comment type="line" pos:line="192" pos:column="17">// The loop will be exited either if a message is send by the caller thread or if we found the dialog. If a message box text is specified the loop will not exit until the dialog is found.</comment>
                <decl_stmt><decl><type><name pos:line="193" pos:column="17">bool</name></type> <name pos:line="193" pos:column="22">stayInLoop</name> <init pos:line="193" pos:column="33">= <expr><lit:literal type="boolean" pos:line="193" pos:column="35">true</lit:literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="194" pos:column="17">int</name></type> <name pos:line="194" pos:column="21">dialogBoxesToWaitFor</name> <init pos:line="194" pos:column="42">= <expr><lit:literal type="number" pos:line="194" pos:column="44">1</lit:literal></expr></init></decl>;</decl_stmt>

                <while pos:line="196" pos:column="17">while<condition pos:line="196" pos:column="22">(<expr><name pos:line="196" pos:column="23">stayInLoop</name></expr>)</condition> <block pos:line="196" pos:column="35">{
                    <decl_stmt><decl><type><name pos:line="197" pos:column="21">int</name></type> <name pos:line="197" pos:column="25">hwndIndex</name> <init pos:line="197" pos:column="35">= <expr><name pos:line="197" pos:column="37">dialogBoxesToWaitFor</name> <op:operator pos:line="197" pos:column="58">-</op:operator> <lit:literal type="number" pos:line="197" pos:column="60">1</lit:literal></expr></init></decl>;</decl_stmt>

                    <comment type="line" pos:line="199" pos:column="21">// We need to lock since the caller might set context to null.</comment>
                    <lock pos:line="200" pos:column="21">lock(<expr><name pos:line="200" pos:column="26">Mutex</name></expr>) <block pos:line="200" pos:column="33">{
                        <if pos:line="201" pos:column="25">if<condition pos:line="201" pos:column="27">(<expr><name><name pos:line="201" pos:column="28">this</name><op:operator pos:line="201" pos:column="32">.</op:operator><name pos:line="201" pos:column="33">exitThread</name></name></expr>)</condition><then pos:line="201" pos:column="44"> <block pos:line="201" pos:column="45">{
                            <break pos:line="202" pos:column="29">break;</break>
                        }</block></then></if>

                        <comment type="line" pos:line="205" pos:column="25">// We protect the shell too from reentrency.</comment>
                        <expr_stmt><expr><call><name><name pos:line="206" pos:column="25">this</name><op:operator pos:line="206" pos:column="29">.</op:operator><name pos:line="206" pos:column="30">uiShell</name><op:operator pos:line="206" pos:column="37">.</op:operator><name pos:line="206" pos:column="38">GetDialogOwnerHwnd</name></name><argument_list pos:line="206" pos:column="56">(<argument><expr pos:line="206" pos:column="57">out <name><name pos:line="206" pos:column="61">hwnds</name><index pos:line="206" pos:column="66">[<expr><name pos:line="206" pos:column="67">hwndIndex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    }</block></lock>

                    <if pos:line="210" pos:column="21">if<condition pos:line="210" pos:column="23">(<expr><name><name pos:line="210" pos:column="24">hwnds</name><index pos:line="210" pos:column="29">[<expr><name pos:line="210" pos:column="30">hwndIndex</name></expr>]</index></name> <op:operator pos:line="210" pos:column="41">!=</op:operator> <name><name pos:line="210" pos:column="44">IntPtr</name><op:operator pos:line="210" pos:column="50">.</op:operator><name pos:line="210" pos:column="51">Zero</name></name></expr>)</condition><then pos:line="210" pos:column="56"> <block pos:line="210" pos:column="57">{
                        <decl_stmt><decl><type><name pos:line="211" pos:column="25">StringBuilder</name></type> <name pos:line="211" pos:column="39">windowClassName</name> <init pos:line="211" pos:column="55">= <expr><op:operator pos:line="211" pos:column="57">new</op:operator> <call><name pos:line="211" pos:column="61">StringBuilder</name><argument_list pos:line="211" pos:column="74">(<argument><expr><lit:literal type="number" pos:line="211" pos:column="75">256</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name pos:line="212" pos:column="25">NativeMethods</name><op:operator pos:line="212" pos:column="38">.</op:operator><name pos:line="212" pos:column="39">GetClassName</name></name><argument_list pos:line="212" pos:column="51">(<argument><expr><name><name pos:line="212" pos:column="52">hwnds</name><index pos:line="212" pos:column="57">[<expr><name pos:line="212" pos:column="58">hwndIndex</name></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="212" pos:column="70">windowClassName</name></expr></argument>, <argument><expr><name><name pos:line="212" pos:column="87">windowClassName</name><op:operator pos:line="212" pos:column="102">.</op:operator><name pos:line="212" pos:column="103">Capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="line" pos:line="214" pos:column="25">// The #32770 is the class name of a messagebox dialog.</comment>
                        <if pos:line="215" pos:column="25">if<condition pos:line="215" pos:column="27">(<expr><call><name><name pos:line="215" pos:column="28">windowClassName</name><op:operator pos:line="215" pos:column="43">.</op:operator><name pos:line="215" pos:column="44">ToString</name></name><argument_list pos:line="215" pos:column="52">()</argument_list></call><op:operator pos:line="215" pos:column="54">.</op:operator><call><name pos:line="215" pos:column="55">Contains</name><argument_list pos:line="215" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="215" pos:column="64">"#32770"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="215" pos:column="74"> <block pos:line="215" pos:column="75">{
                            <decl_stmt><decl><type><name pos:line="216" pos:column="29">IntPtr</name></type> <name pos:line="216" pos:column="36">unmanagedMemoryLocation</name> <init pos:line="216" pos:column="60">= <expr><name><name pos:line="216" pos:column="62">IntPtr</name><op:operator pos:line="216" pos:column="68">.</op:operator><name pos:line="216" pos:column="69">Zero</name></name></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name pos:line="217" pos:column="29">string</name></type> <name pos:line="217" pos:column="36">dialogBoxText</name> <init pos:line="217" pos:column="50">= <expr><name><name pos:line="217" pos:column="52">String</name><op:operator pos:line="217" pos:column="58">.</op:operator><name pos:line="217" pos:column="59">Empty</name></name></expr></init></decl>;</decl_stmt>
                            <try pos:line="218" pos:column="29">try <block pos:line="218" pos:column="33">{
                                <expr_stmt><expr><name pos:line="219" pos:column="33">unmanagedMemoryLocation</name> <op:operator pos:line="219" pos:column="57">=</op:operator> <call><name><name pos:line="219" pos:column="59">Marshal</name><op:operator pos:line="219" pos:column="66">.</op:operator><name pos:line="219" pos:column="67">AllocHGlobal</name></name><argument_list pos:line="219" pos:column="79">(<argument><expr><lit:literal type="number" pos:line="219" pos:column="80">10</lit:literal> <op:operator pos:line="219" pos:column="83">*</op:operator> <lit:literal type="number" pos:line="219" pos:column="85">1024</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name><name pos:line="220" pos:column="33">NativeMethods</name><op:operator pos:line="220" pos:column="46">.</op:operator><name pos:line="220" pos:column="47">EnumChildWindows</name></name><argument_list pos:line="220" pos:column="63">(<argument><expr><name><name pos:line="220" pos:column="64">hwnds</name><index pos:line="220" pos:column="69">[<expr><name pos:line="220" pos:column="70">hwndIndex</name></expr>]</index></name></expr></argument>, <argument><expr><op:operator pos:line="220" pos:column="82">new</op:operator> <call><name><name pos:line="220" pos:column="86">NativeMethods</name><op:operator pos:line="220" pos:column="99">.</op:operator><name pos:line="220" pos:column="100">CallBack</name></name><argument_list pos:line="220" pos:column="108">(<argument><expr><name pos:line="220" pos:column="109">FindMessageBoxString</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="220" pos:column="132">unmanagedMemoryLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><name pos:line="221" pos:column="33">dialogBoxText</name> <op:operator pos:line="221" pos:column="47">=</op:operator> <call><name><name pos:line="221" pos:column="49">Marshal</name><op:operator pos:line="221" pos:column="56">.</op:operator><name pos:line="221" pos:column="57">PtrToStringUni</name></name><argument_list pos:line="221" pos:column="71">(<argument><expr><name pos:line="221" pos:column="72">unmanagedMemoryLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block> <finally pos:line="222" pos:column="31">finally <block pos:line="222" pos:column="39">{
                                <if pos:line="223" pos:column="33">if<condition pos:line="223" pos:column="35">(<expr><name pos:line="223" pos:column="36">unmanagedMemoryLocation</name> <op:operator pos:line="223" pos:column="60">!=</op:operator> <name><name pos:line="223" pos:column="63">IntPtr</name><op:operator pos:line="223" pos:column="69">.</op:operator><name pos:line="223" pos:column="70">Zero</name></name></expr>)</condition><then pos:line="223" pos:column="75"> <block pos:line="223" pos:column="76">{
                                    <expr_stmt><expr><call><name><name pos:line="224" pos:column="37">Marshal</name><op:operator pos:line="224" pos:column="44">.</op:operator><name pos:line="224" pos:column="45">FreeHGlobal</name></name><argument_list pos:line="224" pos:column="56">(<argument><expr><name pos:line="224" pos:column="57">unmanagedMemoryLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                }</block></then></if>
                            }</block></finally></try>

                            <lock pos:line="228" pos:column="29">lock(<expr><name pos:line="228" pos:column="34">Mutex</name></expr>) <block pos:line="228" pos:column="41">{

                                <comment type="line" pos:line="230" pos:column="33">// Since this is running on the main thread be sure that we close the dialog.</comment>
                                <decl_stmt><decl><type><name pos:line="231" pos:column="33">bool</name></type> <name pos:line="231" pos:column="38">dialogCloseResult</name> <init pos:line="231" pos:column="56">= <expr><lit:literal type="boolean" pos:line="231" pos:column="58">false</lit:literal></expr></init></decl>;</decl_stmt>
                                <if pos:line="232" pos:column="33">if<condition pos:line="232" pos:column="35">(<expr><name><name pos:line="232" pos:column="36">this</name><op:operator pos:line="232" pos:column="40">.</op:operator><name pos:line="232" pos:column="41">buttonAction</name></name> <op:operator pos:line="232" pos:column="54">!=</op:operator> <lit:literal type="number" pos:line="232" pos:column="57">0</lit:literal></expr>)</condition><then pos:line="232" pos:column="59"> <block pos:line="232" pos:column="60">{
                                    <expr_stmt><expr><name pos:line="233" pos:column="37">dialogCloseResult</name> <op:operator pos:line="233" pos:column="55">=</op:operator> <call><name><name pos:line="233" pos:column="57">NativeMethods</name><op:operator pos:line="233" pos:column="70">.</op:operator><name pos:line="233" pos:column="71">EndDialog</name></name><argument_list pos:line="233" pos:column="80">(<argument><expr><name><name pos:line="233" pos:column="81">hwnds</name><index pos:line="233" pos:column="86">[<expr><name pos:line="233" pos:column="87">hwndIndex</name></expr>]</index></name></expr></argument>, <argument><expr><name><name pos:line="233" pos:column="99">this</name><op:operator pos:line="233" pos:column="103">.</op:operator><name pos:line="233" pos:column="104">buttonAction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                }</block></then></if>

                                <comment type="line" pos:line="236" pos:column="33">// Check if we have found the right dialog box.</comment>
                                <if pos:line="237" pos:column="33">if<condition pos:line="237" pos:column="35">(<expr><call><name><name pos:line="237" pos:column="36">String</name><op:operator pos:line="237" pos:column="42">.</op:operator><name pos:line="237" pos:column="43">IsNullOrEmpty</name></name><argument_list pos:line="237" pos:column="56">(<argument><expr><name><name pos:line="237" pos:column="57">this</name><op:operator pos:line="237" pos:column="61">.</op:operator><name pos:line="237" pos:column="62">expectedDialogBoxText</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="237" pos:column="85">||</op:operator> <op:operator pos:line="237" pos:column="88">(</op:operator><op:operator pos:line="237" pos:column="89">!</op:operator><call><name><name pos:line="237" pos:column="90">String</name><op:operator pos:line="237" pos:column="96">.</op:operator><name pos:line="237" pos:column="97">IsNullOrEmpty</name></name><argument_list pos:line="237" pos:column="110">(<argument><expr><name pos:line="237" pos:column="111">dialogBoxText</name></expr></argument>)</argument_list></call> <op:operator pos:line="237" pos:column="126">&amp;&amp;</op:operator> <call><name><name pos:line="237" pos:column="129">String</name><op:operator pos:line="237" pos:column="135">.</op:operator><name pos:line="237" pos:column="136">Compare</name></name><argument_list pos:line="237" pos:column="143">(<argument><expr><name><name pos:line="237" pos:column="144">this</name><op:operator pos:line="237" pos:column="148">.</op:operator><name pos:line="237" pos:column="149">expectedDialogBoxText</name></name></expr></argument>, <argument><expr><call><name><name pos:line="237" pos:column="172">dialogBoxText</name><op:operator pos:line="237" pos:column="185">.</op:operator><name pos:line="237" pos:column="186">Trim</name></name><argument_list pos:line="237" pos:column="190">()</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="237" pos:column="194">StringComparison</name><op:operator pos:line="237" pos:column="210">.</op:operator><name pos:line="237" pos:column="211">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="237" pos:column="230">==</op:operator> <lit:literal type="number" pos:line="237" pos:column="233">0</lit:literal><op:operator pos:line="237" pos:column="234">)</op:operator></expr>)</condition><then pos:line="237" pos:column="236"> <block pos:line="237" pos:column="237">{
                                    <expr_stmt><expr><name><name pos:line="238" pos:column="37">dialogBoxCloseResults</name><index pos:line="238" pos:column="58">[<expr><name pos:line="238" pos:column="59">hwndIndex</name></expr>]</index></name> <op:operator pos:line="238" pos:column="70">=</op:operator> <name pos:line="238" pos:column="72">dialogCloseResult</name></expr>;</expr_stmt>
                                    <if pos:line="239" pos:column="37">if<condition pos:line="239" pos:column="39">(<expr><name pos:line="239" pos:column="40">dialogBoxesToWaitFor</name><op:operator pos:line="239" pos:column="60">++</op:operator> <op:operator pos:line="239" pos:column="63">&gt;=</op:operator> <name><name pos:line="239" pos:column="66">this</name><op:operator pos:line="239" pos:column="70">.</op:operator><name pos:line="239" pos:column="71">numberOfDialogsToWaitFor</name></name></expr>)</condition><then pos:line="239" pos:column="96"> <block pos:line="239" pos:column="97">{
                                        <expr_stmt><expr><name pos:line="240" pos:column="41">stayInLoop</name> <op:operator pos:line="240" pos:column="52">=</op:operator> <lit:literal type="boolean" pos:line="240" pos:column="54">false</lit:literal></expr>;</expr_stmt>
                                    }</block></then></if>
                                }</block></then></if>
                            }</block></lock>
                        }</block></then></if>
                    }</block></then></if>
                }</block></while>
            }</block> <finally pos:line="247" pos:column="15">finally <block pos:line="247" pos:column="23">{
                <comment type="line" pos:line="248" pos:column="17">//Let the main thread run a possible close command.</comment>
                <expr_stmt><expr><call><name><name pos:line="249" pos:column="17">System</name><op:operator pos:line="249" pos:column="23">.</op:operator><name pos:line="249" pos:column="24">Threading</name><op:operator pos:line="249" pos:column="33">.</op:operator><name pos:line="249" pos:column="34">Thread</name><op:operator pos:line="249" pos:column="40">.</op:operator><name pos:line="249" pos:column="41">Sleep</name></name><argument_list pos:line="249" pos:column="46">(<argument><expr><lit:literal type="number" pos:line="249" pos:column="47">2000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <foreach pos:line="251" pos:column="17">foreach(<init><decl><type><name pos:line="251" pos:column="25">IntPtr</name></type> <name pos:line="251" pos:column="32">hwnd</name> <range pos:line="251" pos:column="37">in <expr><name pos:line="251" pos:column="40">hwnds</name></expr></range></decl></init>) <block pos:line="251" pos:column="47">{
                    <comment type="line" pos:line="252" pos:column="21">// At this point the dialog should be closed, if not attempt to close it.</comment>
                    <if pos:line="253" pos:column="21">if<condition pos:line="253" pos:column="23">(<expr><name pos:line="253" pos:column="24">hwnd</name> <op:operator pos:line="253" pos:column="29">!=</op:operator> <name><name pos:line="253" pos:column="32">IntPtr</name><op:operator pos:line="253" pos:column="38">.</op:operator><name pos:line="253" pos:column="39">Zero</name></name></expr>)</condition><then pos:line="253" pos:column="44"> <block pos:line="253" pos:column="45">{
                        <expr_stmt><expr><call><name><name pos:line="254" pos:column="25">NativeMethods</name><op:operator pos:line="254" pos:column="38">.</op:operator><name pos:line="254" pos:column="39">SendMessage</name></name><argument_list pos:line="254" pos:column="50">(<argument><expr><name pos:line="254" pos:column="51">hwnd</name></expr></argument>, <argument><expr><name><name pos:line="254" pos:column="57">NativeMethods</name><op:operator pos:line="254" pos:column="70">.</op:operator><name pos:line="254" pos:column="71">WM_CLOSE</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="254" pos:column="81">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="254" pos:column="84">new</op:operator> <call><name pos:line="254" pos:column="88">IntPtr</name><argument_list pos:line="254" pos:column="94">(<argument><expr><lit:literal type="number" pos:line="254" pos:column="95">0</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></foreach>

                <lock pos:line="258" pos:column="17">lock(<expr><name pos:line="258" pos:column="22">Mutex</name></expr>) <block pos:line="258" pos:column="29">{
                    <comment type="line" pos:line="259" pos:column="21">// Be optimistic.</comment>
                    <expr_stmt><expr><name><name pos:line="260" pos:column="21">this</name><op:operator pos:line="260" pos:column="25">.</op:operator><name pos:line="260" pos:column="26">dialogBoxCloseResult</name></name> <op:operator pos:line="260" pos:column="47">=</op:operator> <lit:literal type="boolean" pos:line="260" pos:column="49">true</lit:literal></expr>;</expr_stmt>

                    <for pos:line="262" pos:column="21">for(<init><decl><type><name pos:line="262" pos:column="25">int</name></type> <name pos:line="262" pos:column="29">i</name> <init pos:line="262" pos:column="31">= <expr><lit:literal type="number" pos:line="262" pos:column="33">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="262" pos:column="36">i</name> <op:operator pos:line="262" pos:column="38">&lt;</op:operator> <name><name pos:line="262" pos:column="40">dialogBoxCloseResults</name><op:operator pos:line="262" pos:column="61">.</op:operator><name pos:line="262" pos:column="62">Length</name></name></expr>;</condition> <incr><expr><name pos:line="262" pos:column="70">i</name><op:operator pos:line="262" pos:column="71">++</op:operator></expr></incr>) <block pos:line="262" pos:column="75">{
                        <if pos:line="263" pos:column="25">if<condition pos:line="263" pos:column="27">(<expr><op:operator pos:line="263" pos:column="28">!</op:operator><name><name pos:line="263" pos:column="29">dialogBoxCloseResults</name><index pos:line="263" pos:column="50">[<expr><name pos:line="263" pos:column="51">i</name></expr>]</index></name></expr>)</condition><then pos:line="263" pos:column="54"> <block pos:line="263" pos:column="55">{
                            <expr_stmt><expr><name><name pos:line="264" pos:column="29">this</name><op:operator pos:line="264" pos:column="33">.</op:operator><name pos:line="264" pos:column="34">dialogBoxCloseResult</name></name> <op:operator pos:line="264" pos:column="55">=</op:operator> <lit:literal type="boolean" pos:line="264" pos:column="57">false</lit:literal></expr>;</expr_stmt>
                            <break pos:line="265" pos:column="29">break;</break>
                        }</block></then></if>
                    }</block></for>

                    <expr_stmt><expr><call><name><name pos:line="269" pos:column="21">this</name><op:operator pos:line="269" pos:column="25">.</op:operator><name pos:line="269" pos:column="26">threadDone</name><op:operator pos:line="269" pos:column="36">.</op:operator><name pos:line="269" pos:column="37">Set</name></name><argument_list pos:line="269" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
                }</block></lock>
            }</block></finally></try>
        }</block></function>

        <comment type="line" pos:line="274" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="275" pos:column="9">/// Finds a messagebox string on a messagebox.</comment>
        <comment type="line" pos:line="276" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="277" pos:column="9">/// &lt;param name="hwnd"&gt;The windows handle of the dialog&lt;/param&gt;</comment>
        <comment type="line" pos:line="278" pos:column="9">/// &lt;param name="unmanagedMemoryLocation"&gt;A pointer to the memorylocation the string will be written to&lt;/param&gt;</comment>
        <comment type="line" pos:line="279" pos:column="9">/// &lt;returns&gt;True if found.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="280" pos:column="9">private</specifier> <specifier pos:line="280" pos:column="17">static</specifier> <name pos:line="280" pos:column="24">bool</name></type> <name pos:line="280" pos:column="29">FindMessageBoxString</name><parameter_list pos:line="280" pos:column="49">(<param><decl><type><name pos:line="280" pos:column="50">IntPtr</name></type> <name pos:line="280" pos:column="57">hwnd</name></decl></param>, <param><decl><type><name pos:line="280" pos:column="63">IntPtr</name></type> <name pos:line="280" pos:column="70">unmanagedMemoryLocation</name></decl></param>)</parameter_list> <block pos:line="280" pos:column="95">{
            <decl_stmt><decl><type><name pos:line="281" pos:column="13">StringBuilder</name></type> <name pos:line="281" pos:column="27">sb</name> <init pos:line="281" pos:column="30">= <expr><op:operator pos:line="281" pos:column="32">new</op:operator> <call><name pos:line="281" pos:column="36">StringBuilder</name><argument_list pos:line="281" pos:column="49">(<argument><expr><lit:literal type="number" pos:line="281" pos:column="50">512</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="282" pos:column="13">NativeMethods</name><op:operator pos:line="282" pos:column="26">.</op:operator><name pos:line="282" pos:column="27">GetClassName</name></name><argument_list pos:line="282" pos:column="39">(<argument><expr><name pos:line="282" pos:column="40">hwnd</name></expr></argument>, <argument><expr><name pos:line="282" pos:column="46">sb</name></expr></argument>, <argument><expr><name><name pos:line="282" pos:column="50">sb</name><op:operator pos:line="282" pos:column="52">.</op:operator><name pos:line="282" pos:column="53">Capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if pos:line="284" pos:column="13">if<condition pos:line="284" pos:column="15">(<expr><call><name><name pos:line="284" pos:column="16">sb</name><op:operator pos:line="284" pos:column="18">.</op:operator><name pos:line="284" pos:column="19">ToString</name></name><argument_list pos:line="284" pos:column="27">()</argument_list></call><op:operator pos:line="284" pos:column="29">.</op:operator><call><name pos:line="284" pos:column="30">ToLower</name><argument_list pos:line="284" pos:column="37">()</argument_list></call><op:operator pos:line="284" pos:column="39">.</op:operator><call><name pos:line="284" pos:column="40">Contains</name><argument_list pos:line="284" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="284" pos:column="49">"static"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="284" pos:column="59"> <block pos:line="284" pos:column="60">{
                <decl_stmt><decl><type><name pos:line="285" pos:column="17">StringBuilder</name></type> <name pos:line="285" pos:column="31">windowText</name> <init pos:line="285" pos:column="42">= <expr><op:operator pos:line="285" pos:column="44">new</op:operator> <call><name pos:line="285" pos:column="48">StringBuilder</name><argument_list pos:line="285" pos:column="61">(<argument><expr><lit:literal type="number" pos:line="285" pos:column="62">2048</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="286" pos:column="17">NativeMethods</name><op:operator pos:line="286" pos:column="30">.</op:operator><name pos:line="286" pos:column="31">GetWindowText</name></name><argument_list pos:line="286" pos:column="44">(<argument><expr><name pos:line="286" pos:column="45">hwnd</name></expr></argument>, <argument><expr><name pos:line="286" pos:column="51">windowText</name></expr></argument>, <argument><expr><name><name pos:line="286" pos:column="63">windowText</name><op:operator pos:line="286" pos:column="73">.</op:operator><name pos:line="286" pos:column="74">Capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if pos:line="288" pos:column="17">if<condition pos:line="288" pos:column="19">(<expr><name><name pos:line="288" pos:column="20">windowText</name><op:operator pos:line="288" pos:column="30">.</op:operator><name pos:line="288" pos:column="31">Length</name></name> <op:operator pos:line="288" pos:column="38">&gt;</op:operator> <lit:literal type="number" pos:line="288" pos:column="40">0</lit:literal></expr>)</condition><then pos:line="288" pos:column="42"> <block pos:line="288" pos:column="43">{
                    <decl_stmt><decl><type><name pos:line="289" pos:column="21">IntPtr</name></type> <name pos:line="289" pos:column="28">stringAsPtr</name> <init pos:line="289" pos:column="40">= <expr><name><name pos:line="289" pos:column="42">IntPtr</name><op:operator pos:line="289" pos:column="48">.</op:operator><name pos:line="289" pos:column="49">Zero</name></name></expr></init></decl>;</decl_stmt>
                    <try pos:line="290" pos:column="21">try <block pos:line="290" pos:column="25">{
                        <expr_stmt><expr><name pos:line="291" pos:column="25">stringAsPtr</name> <op:operator pos:line="291" pos:column="37">=</op:operator> <call><name><name pos:line="291" pos:column="39">Marshal</name><op:operator pos:line="291" pos:column="46">.</op:operator><name pos:line="291" pos:column="47">StringToHGlobalAnsi</name></name><argument_list pos:line="291" pos:column="66">(<argument><expr><call><name><name pos:line="291" pos:column="67">windowText</name><op:operator pos:line="291" pos:column="77">.</op:operator><name pos:line="291" pos:column="78">ToString</name></name><argument_list pos:line="291" pos:column="86">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name pos:line="292" pos:column="25">char</name><index pos:line="292" pos:column="29">[]</index></type> <name pos:line="292" pos:column="32">stringAsArray</name> <init pos:line="292" pos:column="46">= <expr><call><name><name pos:line="292" pos:column="48">windowText</name><op:operator pos:line="292" pos:column="58">.</op:operator><name pos:line="292" pos:column="59">ToString</name></name><argument_list pos:line="292" pos:column="67">()</argument_list></call><op:operator pos:line="292" pos:column="69">.</op:operator><call><name pos:line="292" pos:column="70">ToCharArray</name><argument_list pos:line="292" pos:column="81">()</argument_list></call></expr></init></decl>;</decl_stmt>

                        <comment type="line" pos:line="294" pos:column="25">// Since unicode characters are copied check if we are out of the allocated length.</comment>
                        <comment type="line" pos:line="295" pos:column="25">// If not add the end terminating zero.</comment>
                        <if pos:line="296" pos:column="25">if<condition pos:line="296" pos:column="27">(<expr><op:operator pos:line="296" pos:column="28">(</op:operator><lit:literal type="number" pos:line="296" pos:column="29">2</lit:literal> <op:operator pos:line="296" pos:column="31">*</op:operator> <name><name pos:line="296" pos:column="33">stringAsArray</name><op:operator pos:line="296" pos:column="46">.</op:operator><name pos:line="296" pos:column="47">Length</name></name><op:operator pos:line="296" pos:column="53">)</op:operator> <op:operator pos:line="296" pos:column="55">+</op:operator> <lit:literal type="number" pos:line="296" pos:column="57">1</lit:literal> <op:operator pos:line="296" pos:column="59">&lt;</op:operator> <lit:literal type="number" pos:line="296" pos:column="61">2048</lit:literal></expr>)</condition><then pos:line="296" pos:column="66"> <block pos:line="296" pos:column="67">{
                            <expr_stmt><expr><call><name><name pos:line="297" pos:column="29">Marshal</name><op:operator pos:line="297" pos:column="36">.</op:operator><name pos:line="297" pos:column="37">Copy</name></name><argument_list pos:line="297" pos:column="41">(<argument><expr><name pos:line="297" pos:column="42">stringAsArray</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="297" pos:column="57">0</lit:literal></expr></argument>, <argument><expr><name pos:line="297" pos:column="60">unmanagedMemoryLocation</name></expr></argument>, <argument><expr><name><name pos:line="297" pos:column="85">stringAsArray</name><op:operator pos:line="297" pos:column="98">.</op:operator><name pos:line="297" pos:column="99">Length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name pos:line="298" pos:column="29">Marshal</name><op:operator pos:line="298" pos:column="36">.</op:operator><name pos:line="298" pos:column="37">WriteInt32</name></name><argument_list pos:line="298" pos:column="47">(<argument><expr><name pos:line="298" pos:column="48">unmanagedMemoryLocation</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="298" pos:column="73">2</lit:literal> <op:operator pos:line="298" pos:column="75">*</op:operator> <name><name pos:line="298" pos:column="77">stringAsArray</name><op:operator pos:line="298" pos:column="90">.</op:operator><name pos:line="298" pos:column="91">Length</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="298" pos:column="99">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block> <finally pos:line="300" pos:column="23">finally <block pos:line="300" pos:column="31">{
                        <if pos:line="301" pos:column="25">if<condition pos:line="301" pos:column="27">(<expr><name pos:line="301" pos:column="28">stringAsPtr</name> <op:operator pos:line="301" pos:column="40">!=</op:operator> <name><name pos:line="301" pos:column="43">IntPtr</name><op:operator pos:line="301" pos:column="49">.</op:operator><name pos:line="301" pos:column="50">Zero</name></name></expr>)</condition><then pos:line="301" pos:column="55"> <block pos:line="301" pos:column="56">{
                            <expr_stmt><expr><call><name><name pos:line="302" pos:column="29">Marshal</name><op:operator pos:line="302" pos:column="36">.</op:operator><name pos:line="302" pos:column="37">FreeHGlobal</name></name><argument_list pos:line="302" pos:column="48">(<argument><expr><name pos:line="302" pos:column="49">stringAsPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></finally></try>
                    <return pos:line="305" pos:column="21">return <expr><lit:literal type="boolean" pos:line="305" pos:column="28">false</lit:literal></expr>;</return>
                }</block></then></if>
            }</block></then></if>

            <return pos:line="309" pos:column="13">return <expr><lit:literal type="boolean" pos:line="309" pos:column="20">true</lit:literal></expr>;</return>
        }</block></function>

        <cpp:endregion pos:line="312" pos:column="9">#<cpp:directive pos:line="312" pos:column="10">endregion</cpp:directive></cpp:endregion>
    }</block></class>
}</block></namespace>
</unit>
