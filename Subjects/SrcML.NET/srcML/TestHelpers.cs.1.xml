<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\VisualStudio\ABB.SrcML.VisualStudio.SrcMLService.IntegrationTests\TestHelpers.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">EnvDTE</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">Microsoft</name><op:operator pos:line="2" pos:column="16">.</op:operator><name pos:line="2" pos:column="17">VisualStudio</name><op:operator pos:line="2" pos:column="29">.</op:operator><name pos:line="2" pos:column="30">TestTools</name><op:operator pos:line="2" pos:column="39">.</op:operator><name pos:line="2" pos:column="40">UnitTesting</name></name>;</using>
<using pos:line="3" pos:column="1">using <name pos:line="3" pos:column="7">System</name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Collections</name><op:operator pos:line="4" pos:column="25">.</op:operator><name pos:line="4" pos:column="26">Generic</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">IO</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">Linq</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">System</name><op:operator pos:line="7" pos:column="13">.</op:operator><name pos:line="7" pos:column="14">Text</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">System</name><op:operator pos:line="8" pos:column="13">.</op:operator><name pos:line="8" pos:column="14">Threading</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">System</name><op:operator pos:line="9" pos:column="13">.</op:operator><name pos:line="9" pos:column="14">Threading</name><op:operator pos:line="9" pos:column="23">.</op:operator><name pos:line="9" pos:column="24">Tasks</name></name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">ABB</name><op:operator pos:line="10" pos:column="10">.</op:operator><name pos:line="10" pos:column="11">VisualStudio</name></name>;</using>

<namespace pos:line="12" pos:column="1">namespace <name><name pos:line="12" pos:column="11">ABB</name><op:operator pos:line="12" pos:column="14">.</op:operator><name pos:line="12" pos:column="15">SrcML</name><op:operator pos:line="12" pos:column="20">.</op:operator><name pos:line="12" pos:column="21">VisualStudio</name><op:operator pos:line="12" pos:column="33">.</op:operator><name pos:line="12" pos:column="34">SrcMLService</name><op:operator pos:line="12" pos:column="46">.</op:operator><name pos:line="12" pos:column="47">IntegrationTests</name></name> <block pos:line="12" pos:column="64">{
    <class><attribute pos:line="13" pos:column="5">[<expr><name pos:line="13" pos:column="6">TestClass</name></expr>]</attribute>
    <specifier pos:line="14" pos:column="5">public</specifier> class <name pos:line="14" pos:column="18">TestHelpers</name> <block pos:line="14" pos:column="30">{
        <decl_stmt><decl><type><specifier pos:line="15" pos:column="9">internal</specifier> <specifier pos:line="15" pos:column="18">static</specifier> <name><name pos:line="15" pos:column="25">Scaffold</name><argument_list pos:line="15" pos:column="33">&lt;<argument><name pos:line="15" pos:column="34">ISrcMLGlobalService</name></argument>&gt;</argument_list></name></type> <name pos:line="15" pos:column="55">TestScaffold</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="16" pos:column="9">internal</specifier> <specifier pos:line="16" pos:column="18">static</specifier> <name><name pos:line="16" pos:column="25">Scaffold</name><argument_list pos:line="16" pos:column="33">&lt;<argument><name pos:line="16" pos:column="34">ICursorMonitorService</name></argument>&gt;</argument_list></name></type> <name pos:line="16" pos:column="57">TestScaffoldCM</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="17" pos:column="9">internal</specifier> <specifier pos:line="17" pos:column="18">static</specifier> <name><name pos:line="17" pos:column="25">Scaffold</name><argument_list pos:line="17" pos:column="33">&lt;<argument><name pos:line="17" pos:column="34">IMethodTrackService</name></argument>&gt;</argument_list></name></type> <name pos:line="17" pos:column="55">TestScaffoldMT</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="18" pos:column="9">internal</specifier> <specifier pos:line="18" pos:column="18">static</specifier> <name><name pos:line="18" pos:column="25">Scaffold</name><argument_list pos:line="18" pos:column="33">&lt;<argument><name pos:line="18" pos:column="34">ISrcMLDataService</name></argument>&gt;</argument_list></name></type> <name pos:line="18" pos:column="53">TestScaffoldData</name></decl>;</decl_stmt>

        <function><type><attribute pos:line="20" pos:column="9">[<expr><name pos:line="20" pos:column="10">AssemblyInitialize</name></expr>]</attribute>
        <specifier pos:line="21" pos:column="9">public</specifier> <specifier pos:line="21" pos:column="16">static</specifier> <name pos:line="21" pos:column="23">void</name></type> <name pos:line="21" pos:column="28">AssemblySetup</name><parameter_list pos:line="21" pos:column="41">(<param><decl><type><name pos:line="21" pos:column="42">TestContext</name></type> <name pos:line="21" pos:column="54">testContext</name></decl></param>)</parameter_list> <block pos:line="21" pos:column="67">{
            <expr_stmt><expr><name pos:line="22" pos:column="13">TestScaffold</name> <op:operator pos:line="22" pos:column="26">=</op:operator> <call><name><name><name pos:line="22" pos:column="28">Scaffold</name><argument_list pos:line="22" pos:column="36">&lt;<argument><name pos:line="22" pos:column="37">ISrcMLGlobalService</name></argument>&gt;</argument_list></name><op:operator pos:line="22" pos:column="57">.</op:operator><name pos:line="22" pos:column="58">Setup</name></name><argument_list pos:line="22" pos:column="63">(<argument><expr><op:operator pos:line="22" pos:column="64">new</op:operator> <call><name pos:line="22" pos:column="68">SrcMLServicePackage</name><argument_list pos:line="22" pos:column="87">()</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="22" pos:column="91">typeof</name><argument_list pos:line="22" pos:column="97">(<argument><expr><name pos:line="22" pos:column="98">SSrcMLGlobalService</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="23" pos:column="13">TestScaffoldCM</name> <op:operator pos:line="23" pos:column="28">=</op:operator> <call><name><name><name pos:line="23" pos:column="30">Scaffold</name><argument_list pos:line="23" pos:column="38">&lt;<argument><name pos:line="23" pos:column="39">ICursorMonitorService</name></argument>&gt;</argument_list></name><op:operator pos:line="23" pos:column="61">.</op:operator><name pos:line="23" pos:column="62">Setup</name></name><argument_list pos:line="23" pos:column="67">(<argument><expr><op:operator pos:line="23" pos:column="68">new</op:operator> <call><name pos:line="23" pos:column="72">SrcMLServicePackage</name><argument_list pos:line="23" pos:column="91">()</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="23" pos:column="95">typeof</name><argument_list pos:line="23" pos:column="101">(<argument><expr><name pos:line="23" pos:column="102">SCursorMonitorService</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="24" pos:column="13">TestScaffoldMT</name> <op:operator pos:line="24" pos:column="28">=</op:operator> <call><name><name><name pos:line="24" pos:column="30">Scaffold</name><argument_list pos:line="24" pos:column="38">&lt;<argument><name pos:line="24" pos:column="39">IMethodTrackService</name></argument>&gt;</argument_list></name><op:operator pos:line="24" pos:column="59">.</op:operator><name pos:line="24" pos:column="60">Setup</name></name><argument_list pos:line="24" pos:column="65">(<argument><expr><op:operator pos:line="24" pos:column="66">new</op:operator> <call><name pos:line="24" pos:column="70">SrcMLServicePackage</name><argument_list pos:line="24" pos:column="89">()</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="24" pos:column="93">typeof</name><argument_list pos:line="24" pos:column="99">(<argument><expr><name pos:line="24" pos:column="100">SMethodTrackService</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="25" pos:column="13">TestScaffoldData</name> <op:operator pos:line="25" pos:column="30">=</op:operator> <call><name><name><name pos:line="25" pos:column="32">Scaffold</name><argument_list pos:line="25" pos:column="40">&lt;<argument><name pos:line="25" pos:column="41">ISrcMLDataService</name></argument>&gt;</argument_list></name><op:operator pos:line="25" pos:column="59">.</op:operator><name pos:line="25" pos:column="60">Setup</name></name><argument_list pos:line="25" pos:column="65">(<argument><expr><op:operator pos:line="25" pos:column="66">new</op:operator> <call><name pos:line="25" pos:column="70">SrcMLServicePackage</name><argument_list pos:line="25" pos:column="89">()</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="25" pos:column="93">typeof</name><argument_list pos:line="25" pos:column="99">(<argument><expr><name pos:line="25" pos:column="100">SSrcMLDataService</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="28" pos:column="9">[<expr><name pos:line="28" pos:column="10">AssemblyCleanup</name></expr>]</attribute>
        <specifier pos:line="29" pos:column="9">public</specifier> <specifier pos:line="29" pos:column="16">static</specifier> <name pos:line="29" pos:column="23">void</name></type> <name pos:line="29" pos:column="28">AssemblyCleanup</name><parameter_list pos:line="29" pos:column="43">()</parameter_list> <block pos:line="29" pos:column="46">{
            <expr_stmt><expr><call><name><name pos:line="30" pos:column="13">TestScaffold</name><op:operator pos:line="30" pos:column="25">.</op:operator><name pos:line="30" pos:column="26">Cleanup</name></name><argument_list pos:line="30" pos:column="33">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="31" pos:column="13">TestScaffoldCM</name><op:operator pos:line="31" pos:column="27">.</op:operator><name pos:line="31" pos:column="28">Cleanup</name></name><argument_list pos:line="31" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="32" pos:column="13">TestScaffoldMT</name><op:operator pos:line="32" pos:column="27">.</op:operator><name pos:line="32" pos:column="28">Cleanup</name></name><argument_list pos:line="32" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="33" pos:column="13">TestScaffoldData</name><op:operator pos:line="33" pos:column="29">.</op:operator><name pos:line="33" pos:column="30">Cleanup</name></name><argument_list pos:line="33" pos:column="37">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        
        <function><type><specifier pos:line="37" pos:column="9">internal</specifier> <specifier pos:line="37" pos:column="18">static</specifier> <name pos:line="37" pos:column="25">bool</name></type> <name pos:line="37" pos:column="30">WaitForServiceToFinish</name><parameter_list pos:line="37" pos:column="52">(<param><decl><type><name pos:line="37" pos:column="53">ISrcMLGlobalService</name></type> <name pos:line="37" pos:column="73">service</name></decl></param>, <param><decl><type><name pos:line="37" pos:column="82">int</name></type> <name pos:line="37" pos:column="86">millisecondsTimeout</name></decl></param>)</parameter_list> <block pos:line="37" pos:column="107">{
            <decl_stmt><decl><type><name pos:line="38" pos:column="13">AutoResetEvent</name></type> <name pos:line="38" pos:column="28">monitoringStartedResetEvent</name> <init pos:line="38" pos:column="56">= <expr><op:operator pos:line="38" pos:column="58">new</op:operator> <call><name pos:line="38" pos:column="62">AutoResetEvent</name><argument_list pos:line="38" pos:column="76">(<argument><expr><lit:literal type="boolean" pos:line="38" pos:column="77">false</lit:literal></expr></argument>)</argument_list></call></expr></init><op:operator pos:line="38" pos:column="83">,</op:operator>
                           <name pos:line="39" pos:column="28">updateArchivesStartedResetEvent</name> <init pos:line="39" pos:column="60">= <expr><op:operator pos:line="39" pos:column="62">new</op:operator> <call><name pos:line="39" pos:column="66">AutoResetEvent</name><argument_list pos:line="39" pos:column="80">(<argument><expr><lit:literal type="boolean" pos:line="39" pos:column="81">false</lit:literal></expr></argument>)</argument_list></call></expr></init><op:operator pos:line="39" pos:column="87">,</op:operator>
                           <name pos:line="40" pos:column="28">updateArchivesCompletedResetEvent</name> <init pos:line="40" pos:column="62">= <expr><op:operator pos:line="40" pos:column="64">new</op:operator> <call><name pos:line="40" pos:column="68">AutoResetEvent</name><argument_list pos:line="40" pos:column="82">(<argument><expr><lit:literal type="boolean" pos:line="40" pos:column="83">false</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="42" pos:column="13">EventHandler</name></type> <name pos:line="42" pos:column="26">monitoringStartedEventHandler</name> <init pos:line="42" pos:column="56">= <expr><call><name pos:line="42" pos:column="58">GetEventHandler</name><argument_list pos:line="42" pos:column="73">(<argument><expr><name pos:line="42" pos:column="74">monitoringStartedResetEvent</name></expr></argument>)</argument_list></call></expr></init><op:operator pos:line="42" pos:column="102">,</op:operator>
                         <name pos:line="43" pos:column="26">updateStartedEventHandler</name> <init pos:line="43" pos:column="52">= <expr><call><name pos:line="43" pos:column="54">GetEventHandler</name><argument_list pos:line="43" pos:column="69">(<argument><expr><name pos:line="43" pos:column="70">updateArchivesStartedResetEvent</name></expr></argument>)</argument_list></call></expr></init><op:operator pos:line="43" pos:column="102">,</op:operator>
                         <name pos:line="44" pos:column="26">updateCompleteEventHandler</name> <init pos:line="44" pos:column="53">= <expr><call><name pos:line="44" pos:column="55">GetEventHandler</name><argument_list pos:line="44" pos:column="70">(<argument><expr><name pos:line="44" pos:column="71">updateArchivesCompletedResetEvent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name pos:line="46" pos:column="13">service</name><op:operator pos:line="46" pos:column="20">.</op:operator><name pos:line="46" pos:column="21">MonitoringStarted</name></name> <op:operator pos:line="46" pos:column="39">+=</op:operator> <name pos:line="46" pos:column="42">monitoringStartedEventHandler</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="47" pos:column="13">service</name><op:operator pos:line="47" pos:column="20">.</op:operator><name pos:line="47" pos:column="21">UpdateArchivesStarted</name></name> <op:operator pos:line="47" pos:column="43">+=</op:operator> <name pos:line="47" pos:column="46">updateStartedEventHandler</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="48" pos:column="13">service</name><op:operator pos:line="48" pos:column="20">.</op:operator><name pos:line="48" pos:column="21">UpdateArchivesCompleted</name></name> <op:operator pos:line="48" pos:column="45">+=</op:operator> <name pos:line="48" pos:column="48">updateCompleteEventHandler</name></expr>;</expr_stmt>
            
            <expr_stmt><expr><call><name><name pos:line="50" pos:column="13">service</name><op:operator pos:line="50" pos:column="20">.</op:operator><name pos:line="50" pos:column="21">StartMonitoring</name></name><argument_list pos:line="50" pos:column="36">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="52" pos:column="13">Assert</name><op:operator pos:line="52" pos:column="19">.</op:operator><name pos:line="52" pos:column="20">IsTrue</name></name><argument_list pos:line="52" pos:column="26">(<argument><expr><call><name><name pos:line="52" pos:column="27">updateArchivesStartedResetEvent</name><op:operator pos:line="52" pos:column="58">.</op:operator><name pos:line="52" pos:column="59">WaitOne</name></name><argument_list pos:line="52" pos:column="66">(<argument><expr><name pos:line="52" pos:column="67">millisecondsTimeout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="53" pos:column="13">Assert</name><op:operator pos:line="53" pos:column="19">.</op:operator><name pos:line="53" pos:column="20">IsTrue</name></name><argument_list pos:line="53" pos:column="26">(<argument><expr><call><name><name pos:line="53" pos:column="27">monitoringStartedResetEvent</name><op:operator pos:line="53" pos:column="54">.</op:operator><name pos:line="53" pos:column="55">WaitOne</name></name><argument_list pos:line="53" pos:column="62">(<argument><expr><name pos:line="53" pos:column="63">millisecondsTimeout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="54" pos:column="13">Assert</name><op:operator pos:line="54" pos:column="19">.</op:operator><name pos:line="54" pos:column="20">IsTrue</name></name><argument_list pos:line="54" pos:column="26">(<argument><expr><call><name><name pos:line="54" pos:column="27">updateArchivesCompletedResetEvent</name><op:operator pos:line="54" pos:column="60">.</op:operator><name pos:line="54" pos:column="61">WaitOne</name></name><argument_list pos:line="54" pos:column="68">(<argument><expr><name pos:line="54" pos:column="69">millisecondsTimeout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name pos:line="56" pos:column="13">service</name><op:operator pos:line="56" pos:column="20">.</op:operator><name pos:line="56" pos:column="21">MonitoringStarted</name></name> <op:operator pos:line="56" pos:column="39">-=</op:operator> <name pos:line="56" pos:column="42">monitoringStartedEventHandler</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="57" pos:column="13">service</name><op:operator pos:line="57" pos:column="20">.</op:operator><name pos:line="57" pos:column="21">UpdateArchivesStarted</name></name> <op:operator pos:line="57" pos:column="43">-=</op:operator> <name pos:line="57" pos:column="46">updateStartedEventHandler</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="58" pos:column="13">service</name><op:operator pos:line="58" pos:column="20">.</op:operator><name pos:line="58" pos:column="21">UpdateArchivesCompleted</name></name> <op:operator pos:line="58" pos:column="45">-=</op:operator> <name pos:line="58" pos:column="48">updateCompleteEventHandler</name></expr>;</expr_stmt>

            <return pos:line="60" pos:column="13">return <expr><op:operator pos:line="60" pos:column="20">!</op:operator><name><name pos:line="60" pos:column="21">service</name><op:operator pos:line="60" pos:column="28">.</op:operator><name pos:line="60" pos:column="29">IsUpdating</name></name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="63" pos:column="9">internal</specifier> <specifier pos:line="63" pos:column="18">static</specifier> <name pos:line="63" pos:column="25">bool</name></type> <name pos:line="63" pos:column="30">WaitForServiceToFinish</name><parameter_list pos:line="63" pos:column="52">(<param><decl><type><name pos:line="63" pos:column="53">ISrcMLDataService</name></type> <name pos:line="63" pos:column="71">service</name></decl></param>, <param><decl><type><name pos:line="63" pos:column="80">int</name></type> <name pos:line="63" pos:column="84">millisecondsTimeout</name></decl></param>)</parameter_list>
        <block pos:line="64" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="65" pos:column="13">AutoResetEvent</name></type> <name pos:line="65" pos:column="28">monitoringStartedResetEvent</name> <init pos:line="65" pos:column="56">= <expr><op:operator pos:line="65" pos:column="58">new</op:operator> <call><name pos:line="65" pos:column="62">AutoResetEvent</name><argument_list pos:line="65" pos:column="76">(<argument><expr><lit:literal type="boolean" pos:line="65" pos:column="77">false</lit:literal></expr></argument>)</argument_list></call></expr></init><op:operator pos:line="65" pos:column="83">,</op:operator>
                           <name pos:line="66" pos:column="28">updateStartedResetEvent</name> <init pos:line="66" pos:column="52">= <expr><op:operator pos:line="66" pos:column="54">new</op:operator> <call><name pos:line="66" pos:column="58">AutoResetEvent</name><argument_list pos:line="66" pos:column="72">(<argument><expr><lit:literal type="boolean" pos:line="66" pos:column="73">false</lit:literal></expr></argument>)</argument_list></call></expr></init><op:operator pos:line="66" pos:column="79">,</op:operator>
                           <name pos:line="67" pos:column="28">updateCompletedResetEvent</name> <init pos:line="67" pos:column="54">= <expr><op:operator pos:line="67" pos:column="56">new</op:operator> <call><name pos:line="67" pos:column="60">AutoResetEvent</name><argument_list pos:line="67" pos:column="74">(<argument><expr><lit:literal type="boolean" pos:line="67" pos:column="75">false</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="69" pos:column="13">EventHandler</name></type> <name pos:line="69" pos:column="26">monitoringStartedEventHandler</name> <init pos:line="69" pos:column="56">= <expr><call><name pos:line="69" pos:column="58">GetEventHandler</name><argument_list pos:line="69" pos:column="73">(<argument><expr><name pos:line="69" pos:column="74">monitoringStartedResetEvent</name></expr></argument>)</argument_list></call></expr></init><op:operator pos:line="69" pos:column="102">,</op:operator>
                         <name pos:line="70" pos:column="26">updateStartedEventHandler</name> <init pos:line="70" pos:column="52">= <expr><call><name pos:line="70" pos:column="54">GetEventHandler</name><argument_list pos:line="70" pos:column="69">(<argument><expr><name pos:line="70" pos:column="70">updateStartedResetEvent</name></expr></argument>)</argument_list></call></expr></init><op:operator pos:line="70" pos:column="94">,</op:operator>
                         <name pos:line="71" pos:column="26">updateCompleteEventHandler</name> <init pos:line="71" pos:column="53">= <expr><call><name pos:line="71" pos:column="55">GetEventHandler</name><argument_list pos:line="71" pos:column="70">(<argument><expr><name pos:line="71" pos:column="71">updateCompletedResetEvent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name pos:line="73" pos:column="13">service</name><op:operator pos:line="73" pos:column="20">.</op:operator><name pos:line="73" pos:column="21">MonitoringStarted</name></name> <op:operator pos:line="73" pos:column="39">+=</op:operator> <name pos:line="73" pos:column="42">monitoringStartedEventHandler</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="74" pos:column="13">service</name><op:operator pos:line="74" pos:column="20">.</op:operator><name pos:line="74" pos:column="21">UpdateStarted</name></name> <op:operator pos:line="74" pos:column="35">+=</op:operator> <name pos:line="74" pos:column="38">updateStartedEventHandler</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="75" pos:column="13">service</name><op:operator pos:line="75" pos:column="20">.</op:operator><name pos:line="75" pos:column="21">UpdateCompleted</name></name> <op:operator pos:line="75" pos:column="37">+=</op:operator> <name pos:line="75" pos:column="40">updateCompleteEventHandler</name></expr>;</expr_stmt>
            
            <expr_stmt><expr><call><name><name pos:line="77" pos:column="13">Assert</name><op:operator pos:line="77" pos:column="19">.</op:operator><name pos:line="77" pos:column="20">IsTrue</name></name><argument_list pos:line="77" pos:column="26">(<argument><expr><call><name><name pos:line="77" pos:column="27">updateStartedResetEvent</name><op:operator pos:line="77" pos:column="50">.</op:operator><name pos:line="77" pos:column="51">WaitOne</name></name><argument_list pos:line="77" pos:column="58">(<argument><expr><name pos:line="77" pos:column="59">millisecondsTimeout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="78" pos:column="13">Assert</name><op:operator pos:line="78" pos:column="19">.</op:operator><name pos:line="78" pos:column="20">IsTrue</name></name><argument_list pos:line="78" pos:column="26">(<argument><expr><call><name><name pos:line="78" pos:column="27">monitoringStartedResetEvent</name><op:operator pos:line="78" pos:column="54">.</op:operator><name pos:line="78" pos:column="55">WaitOne</name></name><argument_list pos:line="78" pos:column="62">(<argument><expr><name pos:line="78" pos:column="63">millisecondsTimeout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="79" pos:column="13">Assert</name><op:operator pos:line="79" pos:column="19">.</op:operator><name pos:line="79" pos:column="20">IsTrue</name></name><argument_list pos:line="79" pos:column="26">(<argument><expr><call><name><name pos:line="79" pos:column="27">updateCompletedResetEvent</name><op:operator pos:line="79" pos:column="52">.</op:operator><name pos:line="79" pos:column="53">WaitOne</name></name><argument_list pos:line="79" pos:column="60">(<argument><expr><name pos:line="79" pos:column="61">millisecondsTimeout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name pos:line="81" pos:column="13">service</name><op:operator pos:line="81" pos:column="20">.</op:operator><name pos:line="81" pos:column="21">MonitoringStarted</name></name> <op:operator pos:line="81" pos:column="39">-=</op:operator> <name pos:line="81" pos:column="42">monitoringStartedEventHandler</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="82" pos:column="13">service</name><op:operator pos:line="82" pos:column="20">.</op:operator><name pos:line="82" pos:column="21">UpdateStarted</name></name> <op:operator pos:line="82" pos:column="35">-=</op:operator> <name pos:line="82" pos:column="38">updateStartedEventHandler</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="83" pos:column="13">service</name><op:operator pos:line="83" pos:column="20">.</op:operator><name pos:line="83" pos:column="21">UpdateCompleted</name></name> <op:operator pos:line="83" pos:column="37">-=</op:operator> <name pos:line="83" pos:column="40">updateCompleteEventHandler</name></expr>;</expr_stmt>

            <return pos:line="85" pos:column="13">return <expr><op:operator pos:line="85" pos:column="20">!</op:operator><name><name pos:line="85" pos:column="21">service</name><op:operator pos:line="85" pos:column="28">.</op:operator><name pos:line="85" pos:column="29">IsUpdating</name></name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="88" pos:column="9">internal</specifier> <specifier pos:line="88" pos:column="18">static</specifier> <name pos:line="88" pos:column="25">EventHandler</name></type> <name pos:line="88" pos:column="38">GetEventHandler</name><parameter_list pos:line="88" pos:column="53">(<param><decl><type><name pos:line="88" pos:column="54">AutoResetEvent</name></type> <name pos:line="88" pos:column="69">resetEvent</name></decl></param>)</parameter_list> <block pos:line="88" pos:column="81">{
            <return pos:line="89" pos:column="13">return <expr><lambda><parameter_list pos:line="89" pos:column="20">(<param><decl><name pos:line="89" pos:column="21">o</name></decl></param>, <param><decl><name pos:line="89" pos:column="24">e</name></decl></param>)</parameter_list> <op:operator pos:line="89" pos:column="27">=&gt;</op:operator> <call><name><name pos:line="89" pos:column="30">resetEvent</name><op:operator pos:line="89" pos:column="40">.</op:operator><name pos:line="89" pos:column="41">Set</name></name><argument_list pos:line="89" pos:column="44">()</argument_list></call></lambda></expr>;</return>
        }</block></function>
        <function><type><specifier pos:line="91" pos:column="9">internal</specifier> <specifier pos:line="91" pos:column="18">static</specifier> <name><name pos:line="91" pos:column="25">IEnumerable</name><argument_list pos:line="91" pos:column="36">&lt;<argument><name pos:line="91" pos:column="37">Project</name></argument>&gt;</argument_list></name></type> <name pos:line="91" pos:column="46">GetProjects</name><parameter_list pos:line="91" pos:column="57">(<param><decl><type><name pos:line="91" pos:column="58">Solution</name></type> <name pos:line="91" pos:column="67">solution</name></decl></param>)</parameter_list> <block pos:line="91" pos:column="77">{
            <decl_stmt><decl><type><name pos:line="92" pos:column="13">var</name></type> <name pos:line="92" pos:column="17">projects</name> <init pos:line="92" pos:column="26">= <expr><name><name pos:line="92" pos:column="28">solution</name><op:operator pos:line="92" pos:column="36">.</op:operator><name pos:line="92" pos:column="37">Projects</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="93" pos:column="13">var</name></type> <name pos:line="93" pos:column="17">enumerator</name> <init pos:line="93" pos:column="28">= <expr><call><name><name pos:line="93" pos:column="30">projects</name><op:operator pos:line="93" pos:column="38">.</op:operator><name pos:line="93" pos:column="39">GetEnumerator</name></name><argument_list pos:line="93" pos:column="52">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while pos:line="94" pos:column="13">while<condition pos:line="94" pos:column="18">(<expr><call><name><name pos:line="94" pos:column="19">enumerator</name><op:operator pos:line="94" pos:column="29">.</op:operator><name pos:line="94" pos:column="30">MoveNext</name></name><argument_list pos:line="94" pos:column="38">()</argument_list></call></expr>)</condition> <block pos:line="94" pos:column="42">{
                <decl_stmt><decl><type><name pos:line="95" pos:column="17">Project</name></type> <name pos:line="95" pos:column="25">currentProject</name> <init pos:line="95" pos:column="40">= <expr><name><name pos:line="95" pos:column="42">enumerator</name><op:operator pos:line="95" pos:column="52">.</op:operator><name pos:line="95" pos:column="53">Current</name></name> <op:operator pos:line="95" pos:column="61">as</op:operator> <name pos:line="95" pos:column="64">Project</name></expr></init></decl>;</decl_stmt>
                <if pos:line="96" pos:column="17">if<condition pos:line="96" pos:column="19">(<expr><name pos:line="96" pos:column="20">null</name> <op:operator pos:line="96" pos:column="25">!=</op:operator> <name pos:line="96" pos:column="28">currentProject</name></expr>)</condition><then pos:line="96" pos:column="43"> <block pos:line="96" pos:column="44">{
                    <return><specifier pos:line="97" pos:column="21">yield</specifier> return <expr><name pos:line="97" pos:column="34">currentProject</name></expr>;</return>
                }</block></then></if>
            }</block></while>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
