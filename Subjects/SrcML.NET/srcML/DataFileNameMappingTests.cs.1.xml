<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data.Test\DataFileNameMappingTests.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2014 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - Initial implementation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">NUnit</name><op:operator pos:line="12" pos:column="12">.</op:operator><name pos:line="12" pos:column="13">Framework</name></name>;</using>
<using pos:line="13" pos:column="1">using <name pos:line="13" pos:column="7">System</name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Collections</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">Generic</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">IO</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Linq</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Text</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Threading</name><op:operator pos:line="18" pos:column="23">.</op:operator><name pos:line="18" pos:column="24">Tasks</name></name>;</using>

<namespace pos:line="20" pos:column="1">namespace <name><name pos:line="20" pos:column="11">ABB</name><op:operator pos:line="20" pos:column="14">.</op:operator><name pos:line="20" pos:column="15">SrcML</name><op:operator pos:line="20" pos:column="20">.</op:operator><name pos:line="20" pos:column="21">Data</name><op:operator pos:line="20" pos:column="25">.</op:operator><name pos:line="20" pos:column="26">Test</name></name> <block pos:line="20" pos:column="31">{
    <class><attribute pos:line="21" pos:column="5">[<expr><call><name pos:line="21" pos:column="6">TestFixture</name><argument_list pos:line="21" pos:column="17">(<argument><expr><name pos:line="21" pos:column="18">Category</name><op:operator pos:line="21" pos:column="26">=</op:operator><lit:literal type="string" pos:line="21" pos:column="27">"Build"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="22" pos:column="5">public</specifier> class <name pos:line="22" pos:column="18">DataFileNameMappingTests</name> <block pos:line="22" pos:column="43">{
        <decl_stmt><decl><type><specifier pos:line="23" pos:column="9">public</specifier> <specifier pos:line="23" pos:column="16">const</specifier> <name pos:line="23" pos:column="22">string</name></type> <name pos:line="23" pos:column="29">TEST_DIRECTORY</name> <init pos:line="23" pos:column="44">= <expr><lit:literal type="string" pos:line="23" pos:column="46">"dataMappingTest"</lit:literal></expr></init></decl>;</decl_stmt>
        <function><type><attribute pos:line="24" pos:column="9">[<expr><name pos:line="24" pos:column="10">TestFixtureSetUp</name></expr>]</attribute>
        <specifier pos:line="25" pos:column="9">public</specifier> <name pos:line="25" pos:column="16">void</name></type> <name pos:line="25" pos:column="21">FixtureSetup</name><parameter_list pos:line="25" pos:column="33">()</parameter_list> <block pos:line="25" pos:column="36">{
            <if pos:line="26" pos:column="13">if<condition pos:line="26" pos:column="15">(<expr><op:operator pos:line="26" pos:column="16">!</op:operator><call><name><name pos:line="26" pos:column="17">Directory</name><op:operator pos:line="26" pos:column="26">.</op:operator><name pos:line="26" pos:column="27">Exists</name></name><argument_list pos:line="26" pos:column="33">(<argument><expr><name pos:line="26" pos:column="34">TEST_DIRECTORY</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="26" pos:column="50"> <block pos:line="26" pos:column="51">{
                <expr_stmt><expr><call><name><name pos:line="27" pos:column="17">Directory</name><op:operator pos:line="27" pos:column="26">.</op:operator><name pos:line="27" pos:column="27">CreateDirectory</name></name><argument_list pos:line="27" pos:column="42">(<argument><expr><name pos:line="27" pos:column="43">TEST_DIRECTORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><attribute pos:line="31" pos:column="9">[<expr><name pos:line="31" pos:column="10">TestFixtureTearDown</name></expr>]</attribute>
        <specifier pos:line="32" pos:column="9">public</specifier> <name pos:line="32" pos:column="16">void</name></type> <name pos:line="32" pos:column="21">FixtureTeardown</name><parameter_list pos:line="32" pos:column="36">()</parameter_list> <block pos:line="32" pos:column="39">{
            <if pos:line="33" pos:column="13">if<condition pos:line="33" pos:column="15">(<expr><call><name><name pos:line="33" pos:column="16">Directory</name><op:operator pos:line="33" pos:column="25">.</op:operator><name pos:line="33" pos:column="26">Exists</name></name><argument_list pos:line="33" pos:column="32">(<argument><expr><name pos:line="33" pos:column="33">TEST_DIRECTORY</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="33" pos:column="49"> <block pos:line="33" pos:column="50">{
                <expr_stmt><expr><call><name><name pos:line="34" pos:column="17">Directory</name><op:operator pos:line="34" pos:column="26">.</op:operator><name pos:line="34" pos:column="27">Delete</name></name><argument_list pos:line="34" pos:column="33">(<argument><expr><name pos:line="34" pos:column="34">TEST_DIRECTORY</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="34" pos:column="50">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><attribute pos:line="38" pos:column="9">[<expr><name pos:line="38" pos:column="10">Test</name></expr><op:operator pos:line="38" pos:column="14">,</op:operator>
         <expr><call><name pos:line="39" pos:column="10">TestCase</name><argument_list pos:line="39" pos:column="18">(<argument><expr><lit:literal type="boolean" pos:line="39" pos:column="19">true</lit:literal></expr></argument>)</argument_list></call></expr><op:operator pos:line="39" pos:column="24">,</op:operator>
         <expr><call><name pos:line="40" pos:column="10">TestCase</name><argument_list pos:line="40" pos:column="18">(<argument><expr><lit:literal type="boolean" pos:line="40" pos:column="19">false</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="41" pos:column="9">public</specifier> <name pos:line="41" pos:column="16">void</name></type> <name pos:line="41" pos:column="21">TestDataFileNameMap</name><parameter_list pos:line="41" pos:column="40">(<param><decl><type><name pos:line="41" pos:column="41">bool</name></type> <name pos:line="41" pos:column="46">compressionEnabled</name></decl></param>)</parameter_list> <block pos:line="41" pos:column="66">{
            <decl_stmt><decl><type><name pos:line="42" pos:column="13">var</name></type> <name pos:line="42" pos:column="17">generator</name> <init pos:line="42" pos:column="27">= <expr><op:operator pos:line="42" pos:column="29">new</op:operator> <call><name pos:line="42" pos:column="33">DataGenerator</name><argument_list pos:line="42" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="43" pos:column="13">var</name></type> <name pos:line="43" pos:column="17">mapping</name> <init pos:line="43" pos:column="25">= <expr><op:operator pos:line="43" pos:column="27">new</op:operator> <call><name pos:line="43" pos:column="31">DataFileNameMapping</name><argument_list pos:line="43" pos:column="50">(<argument><expr><name pos:line="43" pos:column="51">TEST_DIRECTORY</name></expr></argument>, <argument><expr><name pos:line="43" pos:column="67">compressionEnabled</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="44" pos:column="13">var</name></type> <name pos:line="44" pos:column="17">sourcePath</name> <init pos:line="44" pos:column="28">= <expr><lit:literal type="string" pos:line="44" pos:column="30">@"..\..\TestInputs\function_def.cpp"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="45" pos:column="13">var</name></type> <name pos:line="45" pos:column="17">srcmlPath</name> <init pos:line="45" pos:column="27">= <expr><lit:literal type="string" pos:line="45" pos:column="29">@"..\..\TestInputs\function_def.xml"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="47" pos:column="13">var</name></type> <name pos:line="47" pos:column="17">mappedPath</name> <init pos:line="47" pos:column="28">= <expr><call><name><name pos:line="47" pos:column="30">mapping</name><op:operator pos:line="47" pos:column="37">.</op:operator><name pos:line="47" pos:column="38">GetTargetPath</name></name><argument_list pos:line="47" pos:column="51">(<argument><expr><name pos:line="47" pos:column="52">sourcePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <decl_stmt><decl><type><name pos:line="49" pos:column="13">var</name></type> <name pos:line="49" pos:column="17">actualExtension</name> <init pos:line="49" pos:column="33">= <expr><call><name><name pos:line="49" pos:column="35">Path</name><op:operator pos:line="49" pos:column="39">.</op:operator><name pos:line="49" pos:column="40">GetExtension</name></name><argument_list pos:line="49" pos:column="52">(<argument><expr><name pos:line="49" pos:column="53">mappedPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="50" pos:column="13">var</name></type> <name pos:line="50" pos:column="17">expectedExtension</name> <init pos:line="50" pos:column="35">= <expr><op:operator pos:line="50" pos:column="37">(</op:operator><name pos:line="50" pos:column="38">compressionEnabled</name> <op:operator pos:line="50" pos:column="57">?</op:operator> <name><name pos:line="50" pos:column="59">XmlSerialization</name><op:operator pos:line="50" pos:column="75">.</op:operator><name pos:line="50" pos:column="76">DEFAULT_COMPRESSED_EXTENSION</name></name> <op:operator pos:line="50" pos:column="105">:</op:operator> <name><name pos:line="50" pos:column="107">XmlSerialization</name><op:operator pos:line="50" pos:column="123">.</op:operator><name pos:line="50" pos:column="124">DEFAULT_EXTENSION</name></name><op:operator pos:line="50" pos:column="141">)</op:operator></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="51" pos:column="13">StringAssert</name><op:operator pos:line="51" pos:column="25">.</op:operator><name pos:line="51" pos:column="26">AreEqualIgnoringCase</name></name><argument_list pos:line="51" pos:column="46">(<argument><expr><name pos:line="51" pos:column="47">expectedExtension</name></expr></argument>, <argument><expr><name pos:line="51" pos:column="66">actualExtension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="53" pos:column="13">generator</name><op:operator pos:line="53" pos:column="22">.</op:operator><name pos:line="53" pos:column="23">Generate</name></name><argument_list pos:line="53" pos:column="31">(<argument><expr><name pos:line="53" pos:column="32">srcmlPath</name></expr></argument>, <argument><expr><name pos:line="53" pos:column="43">mappedPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="54" pos:column="13">Assert</name><op:operator pos:line="54" pos:column="19">.</op:operator><name pos:line="54" pos:column="20">That</name></name><argument_list pos:line="54" pos:column="24">(<argument><expr><call><name><name pos:line="54" pos:column="25">File</name><op:operator pos:line="54" pos:column="29">.</op:operator><name pos:line="54" pos:column="30">Exists</name></name><argument_list pos:line="54" pos:column="36">(<argument><expr><name pos:line="54" pos:column="37">mappedPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="54" pos:column="50">String</name><op:operator pos:line="54" pos:column="56">.</op:operator><name pos:line="54" pos:column="57">Format</name></name><argument_list pos:line="54" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="54" pos:column="64">"Could not generate {0}"</lit:literal></expr></argument>, <argument><expr><name pos:line="54" pos:column="90">mappedPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="56" pos:column="13">var</name></type> <name pos:line="56" pos:column="17">data</name> <init pos:line="56" pos:column="22">= <expr><call><name><name pos:line="56" pos:column="24">XmlSerialization</name><op:operator pos:line="56" pos:column="40">.</op:operator><name pos:line="56" pos:column="41">Load</name></name><argument_list pos:line="56" pos:column="45">(<argument><expr><name pos:line="56" pos:column="46">mappedPath</name></expr></argument>, <argument><expr><name pos:line="56" pos:column="58">compressionEnabled</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="57" pos:column="13">Assert</name><op:operator pos:line="57" pos:column="19">.</op:operator><name pos:line="57" pos:column="20">IsNotNull</name></name><argument_list pos:line="57" pos:column="29">(<argument><expr><name pos:line="57" pos:column="30">data</name></expr></argument>, <argument><expr><call><name><name pos:line="57" pos:column="36">String</name><op:operator pos:line="57" pos:column="42">.</op:operator><name pos:line="57" pos:column="43">Format</name></name><argument_list pos:line="57" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="57" pos:column="50">"Could not load data from {0}. It should {1}be compressed"</lit:literal></expr></argument>, <argument><expr><name pos:line="57" pos:column="110">mappedPath</name></expr></argument>, <argument><expr><name pos:line="57" pos:column="122">compressionEnabled</name> <op:operator pos:line="57" pos:column="141">?</op:operator> <name><name pos:line="57" pos:column="143">String</name><op:operator pos:line="57" pos:column="149">.</op:operator><name pos:line="57" pos:column="150">Empty</name></name> <op:operator pos:line="57" pos:column="156">:</op:operator> <lit:literal type="string" pos:line="57" pos:column="158">"not "</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
