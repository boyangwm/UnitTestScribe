<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data\SourceLocation.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2013 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">System</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Xml</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Xml</name><op:operator pos:line="14" pos:column="17">.</op:operator><name pos:line="14" pos:column="18">Serialization</name></name>;</using>

<namespace pos:line="16" pos:column="1">namespace <name><name pos:line="16" pos:column="11">ABB</name><op:operator pos:line="16" pos:column="14">.</op:operator><name pos:line="16" pos:column="15">SrcML</name><op:operator pos:line="16" pos:column="20">.</op:operator><name pos:line="16" pos:column="21">Data</name></name> <block pos:line="16" pos:column="26">{

    <comment type="line" pos:line="18" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="19" pos:column="5">/// Source locations indicate where in the original source code a &lt;see cref="AbstractProgramElement"&gt;program element&lt;/see&gt; </comment>
    <comment type="line" pos:line="20" pos:column="5">/// is located. It stores the file name, line number, &amp;amp; startingPosition.</comment>
    <comment type="line" pos:line="21" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="22" pos:column="5">public</specifier> class <name pos:line="22" pos:column="18">SourceLocation</name> <super pos:line="22" pos:column="33">: <name pos:line="22" pos:column="35">IXmlElement</name></super> <block pos:line="22" pos:column="47">{
        <comment type="line" pos:line="23" pos:column="9">/// &lt;summary&gt;XML name for serialization&lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="24" pos:column="9">public</specifier> <specifier pos:line="24" pos:column="16">const</specifier> <name pos:line="24" pos:column="22">string</name></type> <name pos:line="24" pos:column="29">XmlName</name> <init pos:line="24" pos:column="37">= <expr><lit:literal type="string" pos:line="24" pos:column="39">"Location"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="26" pos:column="9">/// &lt;summary&gt;XML name for the file attribute&lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="27" pos:column="9">public</specifier> <specifier pos:line="27" pos:column="16">const</specifier> <name pos:line="27" pos:column="22">string</name></type> <name pos:line="27" pos:column="29">XmlFileAttributeName</name> <init pos:line="27" pos:column="50">= <expr><lit:literal type="string" pos:line="27" pos:column="52">"file"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="29" pos:column="9">/// &lt;summary&gt;XML name for the starting line number&lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="30" pos:column="9">public</specifier> <specifier pos:line="30" pos:column="16">const</specifier> <name pos:line="30" pos:column="22">string</name></type> <name pos:line="30" pos:column="29">XmlStartingLineAttributeName</name> <init pos:line="30" pos:column="58">= <expr><lit:literal type="string" pos:line="30" pos:column="60">"sl"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="32" pos:column="9">/// &lt;summary&gt;XML name for the starting column number&lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="33" pos:column="9">public</specifier> <specifier pos:line="33" pos:column="16">const</specifier> <name pos:line="33" pos:column="22">string</name></type> <name pos:line="33" pos:column="29">XmlStartingColumnAttributeName</name> <init pos:line="33" pos:column="60">= <expr><lit:literal type="string" pos:line="33" pos:column="62">"sc"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="35" pos:column="9">/// &lt;summary&gt;XML name for the ending line number&lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="36" pos:column="9">public</specifier> <specifier pos:line="36" pos:column="16">const</specifier> <name pos:line="36" pos:column="22">string</name></type> <name pos:line="36" pos:column="29">XmlEndingLineAttributeName</name> <init pos:line="36" pos:column="56">= <expr><lit:literal type="string" pos:line="36" pos:column="58">"el"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="38" pos:column="9">/// &lt;summary&gt;XML name for the ending column number&lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="39" pos:column="9">public</specifier> <specifier pos:line="39" pos:column="16">const</specifier> <name pos:line="39" pos:column="22">string</name></type> <name pos:line="39" pos:column="29">XmlEndingColumnAttributeName</name> <init pos:line="39" pos:column="58">= <expr><lit:literal type="string" pos:line="39" pos:column="60">"ec"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="41" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="42" pos:column="9">/// Creates a new source location object</comment>
        <comment type="line" pos:line="43" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="44" pos:column="9">/// &lt;param name="fileName"&gt;The file name&lt;/param&gt;</comment>
        <comment type="line" pos:line="45" pos:column="9">/// &lt;param name="startingLineNumber"&gt;The starting line number.&lt;/param&gt;</comment>
        <comment type="line" pos:line="46" pos:column="9">/// &lt;param name="startingColumnNumber"&gt;The starting column within</comment>
        <comment type="line" pos:line="47" pos:column="9">/// &lt;paramref name="startingLineNumber"/&gt;&lt;/param&gt;</comment>
        <constructor><specifier pos:line="48" pos:column="9">public</specifier> <name pos:line="48" pos:column="16">SourceLocation</name><parameter_list pos:line="48" pos:column="30">(<param><decl><type><name pos:line="48" pos:column="31">string</name></type> <name pos:line="48" pos:column="38">fileName</name></decl></param>, <param><decl><type><name pos:line="48" pos:column="48">int</name></type> <name pos:line="48" pos:column="52">startingLineNumber</name></decl></param>, <param><decl><type><name pos:line="48" pos:column="72">int</name></type> <name pos:line="48" pos:column="76">startingColumnNumber</name></decl></param>)</parameter_list>
            <member_list pos:line="49" pos:column="13">: <call><name pos:line="49" pos:column="15">this</name><argument_list pos:line="49" pos:column="19">(<argument><expr><name pos:line="49" pos:column="20">fileName</name></expr></argument>, <argument><expr><name pos:line="49" pos:column="30">startingLineNumber</name></expr></argument>, <argument><expr><name pos:line="49" pos:column="50">startingColumnNumber</name></expr></argument>, <argument><expr><name pos:line="49" pos:column="72">startingLineNumber</name></expr></argument>, <argument><expr><name pos:line="49" pos:column="92">startingColumnNumber</name></expr></argument>)</argument_list></call> </member_list><block pos:line="49" pos:column="114">{ }</block></constructor>

        <comment type="line" pos:line="51" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="52" pos:column="9">/// Creates a new source location object</comment>
        <comment type="line" pos:line="53" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="54" pos:column="9">/// &lt;param name="fileName"&gt;The filename&lt;/param&gt;</comment>
        <comment type="line" pos:line="55" pos:column="9">/// &lt;param name="startingLineNumber"&gt;the starting line number&lt;/param&gt;</comment>
        <comment type="line" pos:line="56" pos:column="9">/// &lt;param name="startingPosition"&gt;The starting position within</comment>
        <comment type="line" pos:line="57" pos:column="9">/// &lt;paramref name="startingLineNumber"/&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="58" pos:column="9">/// &lt;param name="endingLineNumber"&gt;the ending line number&lt;/param&gt;</comment>
        <comment type="line" pos:line="59" pos:column="9">/// &lt;param name="endingPosition"&gt;The ending position with</comment>
        <comment type="line" pos:line="60" pos:column="9">/// &lt;paramref name="endingLineNumber"/&gt;&lt;/param&gt;</comment>
        <constructor><specifier pos:line="61" pos:column="9">public</specifier> <name pos:line="61" pos:column="16">SourceLocation</name><parameter_list pos:line="61" pos:column="30">(<param><decl><type><name pos:line="61" pos:column="31">string</name></type> <name pos:line="61" pos:column="38">fileName</name></decl></param>, <param><decl><type><name pos:line="61" pos:column="48">int</name></type> <name pos:line="61" pos:column="52">startingLineNumber</name></decl></param>, <param><decl><type><name pos:line="61" pos:column="72">int</name></type> <name pos:line="61" pos:column="76">startingPosition</name></decl></param>, <param><decl><type><name pos:line="61" pos:column="94">int</name></type> <name pos:line="61" pos:column="98">endingLineNumber</name></decl></param>, <param><decl><type><name pos:line="61" pos:column="116">int</name></type> <name pos:line="61" pos:column="120">endingPosition</name></decl></param>)</parameter_list> <block pos:line="61" pos:column="136">{
            <expr_stmt><expr><name><name pos:line="62" pos:column="13">this</name><op:operator pos:line="62" pos:column="17">.</op:operator><name pos:line="62" pos:column="18">SourceFileName</name></name> <op:operator pos:line="62" pos:column="33">=</op:operator> <name pos:line="62" pos:column="35">fileName</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="63" pos:column="13">this</name><op:operator pos:line="63" pos:column="17">.</op:operator><name pos:line="63" pos:column="18">StartingLineNumber</name></name> <op:operator pos:line="63" pos:column="37">=</op:operator> <name pos:line="63" pos:column="39">startingLineNumber</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="64" pos:column="13">this</name><op:operator pos:line="64" pos:column="17">.</op:operator><name pos:line="64" pos:column="18">StartingColumnNumber</name></name> <op:operator pos:line="64" pos:column="39">=</op:operator> <name pos:line="64" pos:column="41">startingPosition</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="65" pos:column="13">this</name><op:operator pos:line="65" pos:column="17">.</op:operator><name pos:line="65" pos:column="18">EndingLineNumber</name></name> <op:operator pos:line="65" pos:column="35">=</op:operator> <name pos:line="65" pos:column="37">endingLineNumber</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="66" pos:column="13">this</name><op:operator pos:line="66" pos:column="17">.</op:operator><name pos:line="66" pos:column="18">EndingColumnNumber</name></name> <op:operator pos:line="66" pos:column="37">=</op:operator> <name pos:line="66" pos:column="39">endingPosition</name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="69" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="70" pos:column="9">/// Creates a new empty SourceLocation</comment>
        <comment type="line" pos:line="71" pos:column="9">/// &lt;/summary&gt;</comment>
        <constructor><specifier pos:line="72" pos:column="9">public</specifier> <name pos:line="72" pos:column="16">SourceLocation</name><parameter_list pos:line="72" pos:column="30">()</parameter_list> <block pos:line="72" pos:column="33">{
        }</block></constructor>

        <comment type="line" pos:line="75" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="76" pos:column="9">/// The ending column number for this location -- this is the starting starting position of</comment>
        <comment type="line" pos:line="77" pos:column="9">/// this element's sibling.</comment>
        <comment type="line" pos:line="78" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="79" pos:column="9">public</specifier> <name pos:line="79" pos:column="16">int</name></type> <name pos:line="79" pos:column="20">EndingColumnNumber</name> <block pos:line="79" pos:column="39">{ <function_decl><name pos:line="79" pos:column="41">get</name>;</function_decl> <function_decl><name pos:line="79" pos:column="46">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="81" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="82" pos:column="9">/// The ending line number for this location -- this is the starting line number of this</comment>
        <comment type="line" pos:line="83" pos:column="9">/// element's sibling.</comment>
        <comment type="line" pos:line="84" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="85" pos:column="9">public</specifier> <name pos:line="85" pos:column="16">int</name></type> <name pos:line="85" pos:column="20">EndingLineNumber</name> <block pos:line="85" pos:column="37">{ <function_decl><name pos:line="85" pos:column="39">get</name>;</function_decl> <function_decl><name pos:line="85" pos:column="44">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="87" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="88" pos:column="9">/// The file name for this location</comment>
        <comment type="line" pos:line="89" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="90" pos:column="9">public</specifier> <name pos:line="90" pos:column="16">string</name></type> <name pos:line="90" pos:column="23">SourceFileName</name> <block pos:line="90" pos:column="38">{ <function_decl><name pos:line="90" pos:column="40">get</name>;</function_decl> <function_decl><name pos:line="90" pos:column="45">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="92" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="93" pos:column="9">/// The starting position within the line for this location</comment>
        <comment type="line" pos:line="94" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="95" pos:column="9">public</specifier> <name pos:line="95" pos:column="16">int</name></type> <name pos:line="95" pos:column="20">StartingColumnNumber</name> <block pos:line="95" pos:column="41">{ <function_decl><name pos:line="95" pos:column="43">get</name>;</function_decl> <function_decl><name pos:line="95" pos:column="48">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="97" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="98" pos:column="9">/// The starting line number for this location</comment>
        <comment type="line" pos:line="99" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="100" pos:column="9">public</specifier> <name pos:line="100" pos:column="16">int</name></type> <name pos:line="100" pos:column="20">StartingLineNumber</name> <block pos:line="100" pos:column="39">{ <function_decl><name pos:line="100" pos:column="41">get</name>;</function_decl> <function_decl><name pos:line="100" pos:column="46">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="102" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="103" pos:column="9">/// Determines whether the given source location occurs within this location.</comment>
        <comment type="line" pos:line="104" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="105" pos:column="9">/// &lt;param name="otherLoc"&gt;The SourceLocation to test&lt;/param&gt;</comment>
        <comment type="line" pos:line="106" pos:column="9">/// &lt;returns&gt;True if this location subsumes the given location, False otherwise.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="107" pos:column="9">public</specifier> <specifier pos:line="107" pos:column="16">virtual</specifier> <name pos:line="107" pos:column="24">bool</name></type> <name pos:line="107" pos:column="29">Contains</name><parameter_list pos:line="107" pos:column="37">(<param><decl><type><name pos:line="107" pos:column="38">SourceLocation</name></type> <name pos:line="107" pos:column="53">otherLoc</name></decl></param>)</parameter_list> <block pos:line="107" pos:column="63">{
            <if pos:line="108" pos:column="13">if<condition pos:line="108" pos:column="15">(<expr><name pos:line="108" pos:column="16">otherLoc</name> <op:operator pos:line="108" pos:column="25">==</op:operator> <name pos:line="108" pos:column="28">null</name></expr>)</condition><then pos:line="108" pos:column="33">
                <throw pos:line="109" pos:column="17">throw <expr><op:operator pos:line="109" pos:column="23">new</op:operator> <call><name pos:line="109" pos:column="27">ArgumentNullException</name><argument_list pos:line="109" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="109" pos:column="49">"otherLoc"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <if pos:line="111" pos:column="13">if<condition pos:line="111" pos:column="15">(<expr><call><name><name pos:line="111" pos:column="16">string</name><op:operator pos:line="111" pos:column="22">.</op:operator><name pos:line="111" pos:column="23">Compare</name></name><argument_list pos:line="111" pos:column="30">(<argument><expr><name><name pos:line="111" pos:column="31">this</name><op:operator pos:line="111" pos:column="35">.</op:operator><name pos:line="111" pos:column="36">SourceFileName</name></name></expr></argument>, <argument><expr><name><name pos:line="111" pos:column="52">otherLoc</name><op:operator pos:line="111" pos:column="60">.</op:operator><name pos:line="111" pos:column="61">SourceFileName</name></name></expr></argument>, <argument><expr><name><name pos:line="111" pos:column="77">StringComparison</name><op:operator pos:line="111" pos:column="93">.</op:operator><name pos:line="111" pos:column="94">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="111" pos:column="113">!=</op:operator> <lit:literal type="number" pos:line="111" pos:column="116">0</lit:literal></expr>)</condition><then pos:line="111" pos:column="118"> <block pos:line="111" pos:column="119">{
                <comment type="line" pos:line="112" pos:column="17">//files not equal</comment>
                <return pos:line="113" pos:column="17">return <expr><lit:literal type="boolean" pos:line="113" pos:column="24">false</lit:literal></expr>;</return>
            }</block></then></if>
            <if pos:line="115" pos:column="13">if<condition pos:line="115" pos:column="15">(<expr><name pos:line="115" pos:column="16">EndingLineNumber</name> <op:operator pos:line="115" pos:column="33">&lt;</op:operator> <name><name pos:line="115" pos:column="35">otherLoc</name><op:operator pos:line="115" pos:column="43">.</op:operator><name pos:line="115" pos:column="44">StartingLineNumber</name></name> <op:operator pos:line="115" pos:column="63">||</op:operator>
                <op:operator pos:line="116" pos:column="17">(</op:operator><name pos:line="116" pos:column="18">EndingLineNumber</name> <op:operator pos:line="116" pos:column="35">==</op:operator> <name><name pos:line="116" pos:column="38">otherLoc</name><op:operator pos:line="116" pos:column="46">.</op:operator><name pos:line="116" pos:column="47">StartingLineNumber</name> <type:modifier pos:line="116" pos:column="66">&amp;&amp;</type:modifier></name> <name pos:line="116" pos:column="69">EndingColumnNumber</name> <op:operator pos:line="116" pos:column="88">&lt;=</op:operator> <name><name pos:line="116" pos:column="91">otherLoc</name><op:operator pos:line="116" pos:column="99">.</op:operator><name pos:line="116" pos:column="100">StartingColumnNumber</name></name><op:operator pos:line="116" pos:column="120">)</op:operator></expr>)</condition><then pos:line="116" pos:column="122"> <block pos:line="116" pos:column="123">{
                <comment type="line" pos:line="117" pos:column="17">//otherLoc starts after this location ends</comment>
                <return pos:line="118" pos:column="17">return <expr><lit:literal type="boolean" pos:line="118" pos:column="24">false</lit:literal></expr>;</return>
            }</block></then></if>
            <if pos:line="120" pos:column="13">if<condition pos:line="120" pos:column="15">(<expr><op:operator pos:line="120" pos:column="16">(</op:operator><name pos:line="120" pos:column="17">StartingLineNumber</name> <op:operator pos:line="120" pos:column="36">&lt;</op:operator> <name><name pos:line="120" pos:column="38">otherLoc</name><op:operator pos:line="120" pos:column="46">.</op:operator><name pos:line="120" pos:column="47">StartingLineNumber</name></name> <op:operator pos:line="120" pos:column="66">||</op:operator>
                <op:operator pos:line="121" pos:column="17">(</op:operator><name pos:line="121" pos:column="18">StartingLineNumber</name> <op:operator pos:line="121" pos:column="37">==</op:operator> <name><name pos:line="121" pos:column="40">otherLoc</name><op:operator pos:line="121" pos:column="48">.</op:operator><name pos:line="121" pos:column="49">StartingLineNumber</name> <type:modifier pos:line="121" pos:column="68">&amp;&amp;</type:modifier></name> <name pos:line="121" pos:column="71">StartingColumnNumber</name> <op:operator pos:line="121" pos:column="92">&lt;=</op:operator> <name><name pos:line="121" pos:column="95">otherLoc</name><op:operator pos:line="121" pos:column="103">.</op:operator><name pos:line="121" pos:column="104">StartingColumnNumber</name></name><op:operator pos:line="121" pos:column="124">)</op:operator><op:operator pos:line="121" pos:column="125">)</op:operator>
               <op:operator pos:line="122" pos:column="16">&amp;&amp;</op:operator>
               <op:operator pos:line="123" pos:column="16">(</op:operator><name><name pos:line="123" pos:column="17">otherLoc</name><op:operator pos:line="123" pos:column="25">.</op:operator><name pos:line="123" pos:column="26">EndingLineNumber</name></name> <op:operator pos:line="123" pos:column="43">&lt;</op:operator> <name pos:line="123" pos:column="45">EndingLineNumber</name> <op:operator pos:line="123" pos:column="62">||</op:operator>
                <op:operator pos:line="124" pos:column="17">(</op:operator><name><name pos:line="124" pos:column="18">otherLoc</name><op:operator pos:line="124" pos:column="26">.</op:operator><name pos:line="124" pos:column="27">EndingLineNumber</name></name> <op:operator pos:line="124" pos:column="44">==</op:operator> <name pos:line="124" pos:column="47">EndingLineNumber</name> <op:operator pos:line="124" pos:column="64">&amp;&amp;</op:operator> <name><name pos:line="124" pos:column="67">otherLoc</name><op:operator pos:line="124" pos:column="75">.</op:operator><name pos:line="124" pos:column="76">EndingColumnNumber</name></name> <op:operator pos:line="124" pos:column="95">&lt;=</op:operator> <name pos:line="124" pos:column="98">EndingColumnNumber</name><op:operator pos:line="124" pos:column="116">)</op:operator><op:operator pos:line="124" pos:column="117">)</op:operator></expr>)</condition><then pos:line="124" pos:column="119"> <block pos:line="124" pos:column="120">{
                <return pos:line="125" pos:column="17">return <expr><lit:literal type="boolean" pos:line="125" pos:column="24">true</lit:literal></expr>;</return>
            }</block></then></if>

            <return pos:line="128" pos:column="13">return <expr><lit:literal type="boolean" pos:line="128" pos:column="20">false</lit:literal></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="131" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="132" pos:column="9">/// Returns a string representation of the SourceLocation.</comment>
        <comment type="line" pos:line="133" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="134" pos:column="9">public</specifier> <specifier pos:line="134" pos:column="16">override</specifier> <name pos:line="134" pos:column="25">string</name></type> <name pos:line="134" pos:column="32">ToString</name><parameter_list pos:line="134" pos:column="40">()</parameter_list> <block pos:line="134" pos:column="43">{
            <return pos:line="135" pos:column="13">return <expr><call><name><name pos:line="135" pos:column="20">string</name><op:operator pos:line="135" pos:column="26">.</op:operator><name pos:line="135" pos:column="27">Format</name></name><argument_list pos:line="135" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="135" pos:column="34">"{0}: start({1},{2}) end({3},{4})"</lit:literal></expr></argument>, <argument><expr><name pos:line="135" pos:column="70">SourceFileName</name></expr></argument>, <argument><expr><name pos:line="135" pos:column="86">StartingLineNumber</name></expr></argument>, <argument><expr><name pos:line="135" pos:column="106">StartingColumnNumber</name></expr></argument>, <argument><expr><name pos:line="135" pos:column="128">EndingLineNumber</name></expr></argument>, <argument><expr><name pos:line="135" pos:column="146">EndingColumnNumber</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="138" pos:column="9">/// &lt;summary&gt; Returns the XML schema for this object. &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="139" pos:column="9">public</specifier> <name><name pos:line="139" pos:column="16">System</name><op:operator pos:line="139" pos:column="22">.</op:operator><name pos:line="139" pos:column="23">Xml</name><op:operator pos:line="139" pos:column="26">.</op:operator><name pos:line="139" pos:column="27">Schema</name><op:operator pos:line="139" pos:column="33">.</op:operator><name pos:line="139" pos:column="34">XmlSchema</name></name></type> <name pos:line="139" pos:column="44">GetSchema</name><parameter_list pos:line="139" pos:column="53">()</parameter_list> <block pos:line="139" pos:column="56">{
            <return pos:line="140" pos:column="13">return <expr><name pos:line="140" pos:column="20">null</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="143" pos:column="9">/// &lt;summary&gt; Returns the XML name for this object. &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="144" pos:column="9">public</specifier> <specifier pos:line="144" pos:column="16">virtual</specifier> <name pos:line="144" pos:column="24">string</name></type> <name pos:line="144" pos:column="31">GetXmlName</name><parameter_list pos:line="144" pos:column="41">()</parameter_list> <block pos:line="144" pos:column="44">{ <return pos:line="144" pos:column="46">return <expr><name><name pos:line="144" pos:column="53">SourceLocation</name><op:operator pos:line="144" pos:column="67">.</op:operator><name pos:line="144" pos:column="68">XmlName</name></name></expr>;</return> }</block></function>

        <comment type="line" pos:line="146" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="147" pos:column="9">/// Read the current XML element into this object</comment>
        <comment type="line" pos:line="148" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="149" pos:column="9">/// &lt;param name="reader"&gt;The XML reader&lt;/param&gt;</comment>
        <function><type><specifier pos:line="150" pos:column="9">public</specifier> <name pos:line="150" pos:column="16">void</name></type> <name pos:line="150" pos:column="21">ReadXml</name><parameter_list pos:line="150" pos:column="28">(<param><decl><type><name pos:line="150" pos:column="29">XmlReader</name></type> <name pos:line="150" pos:column="39">reader</name></decl></param>)</parameter_list> <block pos:line="150" pos:column="47">{
            <decl_stmt><decl><type><name pos:line="151" pos:column="13">bool</name></type> <name pos:line="151" pos:column="18">isEmpty</name> <init pos:line="151" pos:column="26">= <expr><name><name pos:line="151" pos:column="28">reader</name><op:operator pos:line="151" pos:column="34">.</op:operator><name pos:line="151" pos:column="35">IsEmptyElement</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name pos:line="153" pos:column="13">ReadXmlAttributes</name><argument_list pos:line="153" pos:column="30">(<argument><expr><name pos:line="153" pos:column="31">reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="154" pos:column="13">reader</name><op:operator pos:line="154" pos:column="19">.</op:operator><name pos:line="154" pos:column="20">ReadStartElement</name></name><argument_list pos:line="154" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
            
            <if pos:line="156" pos:column="13">if<condition pos:line="156" pos:column="15">(<expr><op:operator pos:line="156" pos:column="16">!</op:operator><name pos:line="156" pos:column="17">isEmpty</name></expr>)</condition><then pos:line="156" pos:column="25"> <block pos:line="156" pos:column="26">{
                <expr_stmt><expr><call><name><name pos:line="157" pos:column="17">reader</name><op:operator pos:line="157" pos:column="23">.</op:operator><name pos:line="157" pos:column="24">ReadEndElement</name></name><argument_list pos:line="157" pos:column="38">()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="161" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="162" pos:column="9">/// Read the XML attributes from the current &lt;paramref name="reader"/&gt; position</comment>
        <comment type="line" pos:line="163" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="164" pos:column="9">/// &lt;param name="reader"&gt;The XML reader&lt;/param&gt;</comment>
        <function><type><specifier pos:line="165" pos:column="9">protected</specifier> <specifier pos:line="165" pos:column="19">virtual</specifier> <name pos:line="165" pos:column="27">void</name></type> <name pos:line="165" pos:column="32">ReadXmlAttributes</name><parameter_list pos:line="165" pos:column="49">(<param><decl><type><name pos:line="165" pos:column="50">XmlReader</name></type> <name pos:line="165" pos:column="60">reader</name></decl></param>)</parameter_list> <block pos:line="165" pos:column="68">{
            <decl_stmt><decl><type><name pos:line="166" pos:column="13">string</name></type> <name pos:line="166" pos:column="20">attr</name> <init pos:line="166" pos:column="25">= <expr><call><name><name pos:line="166" pos:column="27">reader</name><op:operator pos:line="166" pos:column="33">.</op:operator><name pos:line="166" pos:column="34">GetAttribute</name></name><argument_list pos:line="166" pos:column="46">(<argument><expr><name pos:line="166" pos:column="47">XmlFileAttributeName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="167" pos:column="13">SourceFileName</name> <op:operator pos:line="167" pos:column="28">=</op:operator> <name pos:line="167" pos:column="30">attr</name></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="169" pos:column="13">attr</name> <op:operator pos:line="169" pos:column="18">=</op:operator> <call><name><name pos:line="169" pos:column="20">reader</name><op:operator pos:line="169" pos:column="26">.</op:operator><name pos:line="169" pos:column="27">GetAttribute</name></name><argument_list pos:line="169" pos:column="39">(<argument><expr><name pos:line="169" pos:column="40">XmlStartingLineAttributeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="170" pos:column="13">StartingLineNumber</name> <op:operator pos:line="170" pos:column="32">=</op:operator> <op:operator pos:line="170" pos:column="34">(</op:operator><call><name><name pos:line="170" pos:column="35">String</name><op:operator pos:line="170" pos:column="41">.</op:operator><name pos:line="170" pos:column="42">IsNullOrEmpty</name></name><argument_list pos:line="170" pos:column="55">(<argument><expr><name pos:line="170" pos:column="56">attr</name></expr></argument>)</argument_list></call> <op:operator pos:line="170" pos:column="62">?</op:operator> <lit:literal type="number" pos:line="170" pos:column="64">1</lit:literal> <op:operator pos:line="170" pos:column="66">:</op:operator> <call><name><name pos:line="170" pos:column="68">Int32</name><op:operator pos:line="170" pos:column="73">.</op:operator><name pos:line="170" pos:column="74">Parse</name></name><argument_list pos:line="170" pos:column="79">(<argument><expr><name pos:line="170" pos:column="80">attr</name></expr></argument>)</argument_list></call><op:operator pos:line="170" pos:column="85">)</op:operator></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="172" pos:column="13">attr</name> <op:operator pos:line="172" pos:column="18">=</op:operator> <call><name><name pos:line="172" pos:column="20">reader</name><op:operator pos:line="172" pos:column="26">.</op:operator><name pos:line="172" pos:column="27">GetAttribute</name></name><argument_list pos:line="172" pos:column="39">(<argument><expr><name pos:line="172" pos:column="40">XmlStartingColumnAttributeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="173" pos:column="13">StartingColumnNumber</name> <op:operator pos:line="173" pos:column="34">=</op:operator> <op:operator pos:line="173" pos:column="36">(</op:operator><call><name><name pos:line="173" pos:column="37">String</name><op:operator pos:line="173" pos:column="43">.</op:operator><name pos:line="173" pos:column="44">IsNullOrEmpty</name></name><argument_list pos:line="173" pos:column="57">(<argument><expr><name pos:line="173" pos:column="58">attr</name></expr></argument>)</argument_list></call> <op:operator pos:line="173" pos:column="64">?</op:operator> <lit:literal type="number" pos:line="173" pos:column="66">1</lit:literal> <op:operator pos:line="173" pos:column="68">:</op:operator> <call><name><name pos:line="173" pos:column="70">Int32</name><op:operator pos:line="173" pos:column="75">.</op:operator><name pos:line="173" pos:column="76">Parse</name></name><argument_list pos:line="173" pos:column="81">(<argument><expr><name pos:line="173" pos:column="82">attr</name></expr></argument>)</argument_list></call><op:operator pos:line="173" pos:column="87">)</op:operator></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="175" pos:column="13">attr</name> <op:operator pos:line="175" pos:column="18">=</op:operator> <call><name><name pos:line="175" pos:column="20">reader</name><op:operator pos:line="175" pos:column="26">.</op:operator><name pos:line="175" pos:column="27">GetAttribute</name></name><argument_list pos:line="175" pos:column="39">(<argument><expr><name pos:line="175" pos:column="40">XmlEndingLineAttributeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="176" pos:column="13">EndingLineNumber</name> <op:operator pos:line="176" pos:column="30">=</op:operator> <op:operator pos:line="176" pos:column="32">(</op:operator><call><name><name pos:line="176" pos:column="33">String</name><op:operator pos:line="176" pos:column="39">.</op:operator><name pos:line="176" pos:column="40">IsNullOrEmpty</name></name><argument_list pos:line="176" pos:column="53">(<argument><expr><name pos:line="176" pos:column="54">attr</name></expr></argument>)</argument_list></call> <op:operator pos:line="176" pos:column="60">?</op:operator> <lit:literal type="number" pos:line="176" pos:column="62">1</lit:literal> <op:operator pos:line="176" pos:column="64">:</op:operator> <call><name><name pos:line="176" pos:column="66">Int32</name><op:operator pos:line="176" pos:column="71">.</op:operator><name pos:line="176" pos:column="72">Parse</name></name><argument_list pos:line="176" pos:column="77">(<argument><expr><name pos:line="176" pos:column="78">attr</name></expr></argument>)</argument_list></call><op:operator pos:line="176" pos:column="83">)</op:operator></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="178" pos:column="13">attr</name> <op:operator pos:line="178" pos:column="18">=</op:operator> <call><name><name pos:line="178" pos:column="20">reader</name><op:operator pos:line="178" pos:column="26">.</op:operator><name pos:line="178" pos:column="27">GetAttribute</name></name><argument_list pos:line="178" pos:column="39">(<argument><expr><name pos:line="178" pos:column="40">XmlEndingColumnAttributeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="179" pos:column="13">EndingColumnNumber</name> <op:operator pos:line="179" pos:column="32">=</op:operator> <op:operator pos:line="179" pos:column="34">(</op:operator><call><name><name pos:line="179" pos:column="35">String</name><op:operator pos:line="179" pos:column="41">.</op:operator><name pos:line="179" pos:column="42">IsNullOrEmpty</name></name><argument_list pos:line="179" pos:column="55">(<argument><expr><name pos:line="179" pos:column="56">attr</name></expr></argument>)</argument_list></call> <op:operator pos:line="179" pos:column="62">?</op:operator> <lit:literal type="number" pos:line="179" pos:column="64">1</lit:literal> <op:operator pos:line="179" pos:column="66">:</op:operator> <call><name><name pos:line="179" pos:column="68">Int32</name><op:operator pos:line="179" pos:column="73">.</op:operator><name pos:line="179" pos:column="74">Parse</name></name><argument_list pos:line="179" pos:column="79">(<argument><expr><name pos:line="179" pos:column="80">attr</name></expr></argument>)</argument_list></call><op:operator pos:line="179" pos:column="85">)</op:operator></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="182" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="183" pos:column="9">/// Writes all of the data to be serialized to &lt;paramref name="writer"/&gt;.</comment>
        <comment type="line" pos:line="184" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="185" pos:column="9">/// &lt;param name="writer"&gt;The XML writer&lt;/param&gt;</comment>
        <function><type><specifier pos:line="186" pos:column="9">public</specifier> <specifier pos:line="186" pos:column="16">virtual</specifier> <name pos:line="186" pos:column="24">void</name></type> <name pos:line="186" pos:column="29">WriteXml</name><parameter_list pos:line="186" pos:column="37">(<param><decl><type><name pos:line="186" pos:column="38">XmlWriter</name></type> <name pos:line="186" pos:column="48">writer</name></decl></param>)</parameter_list> <block pos:line="186" pos:column="56">{
            <expr_stmt><expr><call><name><name pos:line="187" pos:column="13">writer</name><op:operator pos:line="187" pos:column="19">.</op:operator><name pos:line="187" pos:column="20">WriteAttributeString</name></name><argument_list pos:line="187" pos:column="40">(<argument><expr><name pos:line="187" pos:column="41">XmlFileAttributeName</name></expr></argument>, <argument><expr><name pos:line="187" pos:column="63">SourceFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="188" pos:column="13">writer</name><op:operator pos:line="188" pos:column="19">.</op:operator><name pos:line="188" pos:column="20">WriteAttributeString</name></name><argument_list pos:line="188" pos:column="40">(<argument><expr><name pos:line="188" pos:column="41">XmlStartingLineAttributeName</name></expr></argument>, <argument><expr><call><name><name pos:line="188" pos:column="71">StartingLineNumber</name><op:operator pos:line="188" pos:column="89">.</op:operator><name pos:line="188" pos:column="90">ToString</name></name><argument_list pos:line="188" pos:column="98">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="189" pos:column="13">writer</name><op:operator pos:line="189" pos:column="19">.</op:operator><name pos:line="189" pos:column="20">WriteAttributeString</name></name><argument_list pos:line="189" pos:column="40">(<argument><expr><name pos:line="189" pos:column="41">XmlStartingColumnAttributeName</name></expr></argument>, <argument><expr><call><name><name pos:line="189" pos:column="73">StartingColumnNumber</name><op:operator pos:line="189" pos:column="93">.</op:operator><name pos:line="189" pos:column="94">ToString</name></name><argument_list pos:line="189" pos:column="102">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="190" pos:column="13">writer</name><op:operator pos:line="190" pos:column="19">.</op:operator><name pos:line="190" pos:column="20">WriteAttributeString</name></name><argument_list pos:line="190" pos:column="40">(<argument><expr><name pos:line="190" pos:column="41">XmlEndingLineAttributeName</name></expr></argument>, <argument><expr><call><name><name pos:line="190" pos:column="69">EndingLineNumber</name><op:operator pos:line="190" pos:column="85">.</op:operator><name pos:line="190" pos:column="86">ToString</name></name><argument_list pos:line="190" pos:column="94">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="191" pos:column="13">writer</name><op:operator pos:line="191" pos:column="19">.</op:operator><name pos:line="191" pos:column="20">WriteAttributeString</name></name><argument_list pos:line="191" pos:column="40">(<argument><expr><name pos:line="191" pos:column="41">XmlEndingColumnAttributeName</name></expr></argument>, <argument><expr><call><name><name pos:line="191" pos:column="71">EndingColumnNumber</name><op:operator pos:line="191" pos:column="89">.</op:operator><name pos:line="191" pos:column="90">ToString</name></name><argument_list pos:line="191" pos:column="98">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
