<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML\Src2SrcMLRunner2.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">ABB</name><op:operator pos:line="1" pos:column="10">.</op:operator><name pos:line="1" pos:column="11">SrcML</name><op:operator pos:line="1" pos:column="16">.</op:operator><name pos:line="1" pos:column="17">Utilities</name></name>;</using>
<using pos:line="2" pos:column="1">using <name pos:line="2" pos:column="7">System</name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Collections</name><op:operator pos:line="3" pos:column="25">.</op:operator><name pos:line="3" pos:column="26">Generic</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Collections</name><op:operator pos:line="4" pos:column="25">.</op:operator><name pos:line="4" pos:column="26">ObjectModel</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">IO</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">Linq</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">System</name><op:operator pos:line="7" pos:column="13">.</op:operator><name pos:line="7" pos:column="14">Text</name></name>;</using>

<namespace pos:line="9" pos:column="1">namespace <name><name pos:line="9" pos:column="11">ABB</name><op:operator pos:line="9" pos:column="14">.</op:operator><name pos:line="9" pos:column="15">SrcML</name></name> <block pos:line="9" pos:column="21">{
    <comment type="line" pos:line="10" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="11" pos:column="5">/// Simpler version of &lt;see cref="Src2SrcMLRunner"/&gt;. This is a thin wrapper around the src2srcml executable from KSU.</comment>
    <comment type="line" pos:line="12" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="13" pos:column="5">public</specifier> class <name pos:line="13" pos:column="18">Src2SrcMLRunner2</name> <block pos:line="13" pos:column="35">{
        <decl_stmt><decl><type><specifier pos:line="14" pos:column="9">private</specifier> <name pos:line="14" pos:column="17">string</name></type> <name pos:line="14" pos:column="24">appDir</name></decl>;</decl_stmt>

        <comment type="line" pos:line="16" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="17" pos:column="9">/// The src2srcml executable name</comment>
        <comment type="line" pos:line="18" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="19" pos:column="9">public</specifier> <specifier pos:line="19" pos:column="16">const</specifier> <name pos:line="19" pos:column="22">string</name></type> <name pos:line="19" pos:column="29">Src2SrcMLExecutableName</name> <init pos:line="19" pos:column="53">= <expr><lit:literal type="string" pos:line="19" pos:column="55">"src2srcml.exe"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="21" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="22" pos:column="9">/// Constructs a new object with &lt;see cref="ApplicationDirectory"/&gt; set via &lt;see cref="SrcMLHelper.GetSrcMLDefaultDirectory()"/&gt;.</comment>
        <comment type="line" pos:line="23" pos:column="9">/// &lt;/summary&gt;</comment>
        <constructor><specifier pos:line="24" pos:column="9">public</specifier> <name pos:line="24" pos:column="16">Src2SrcMLRunner2</name><parameter_list pos:line="24" pos:column="32">()</parameter_list> <member_list pos:line="24" pos:column="35">: <call><name pos:line="24" pos:column="37">this</name><argument_list pos:line="24" pos:column="41">(<argument><expr><call><name><name pos:line="24" pos:column="42">SrcMLHelper</name><op:operator pos:line="24" pos:column="53">.</op:operator><name pos:line="24" pos:column="54">GetSrcMLDefaultDirectory</name></name><argument_list pos:line="24" pos:column="78">()</argument_list></call></expr></argument>)</argument_list></call> </member_list><block pos:line="24" pos:column="82">{ }</block></constructor>

        <comment type="line" pos:line="26" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="27" pos:column="9">/// Constructs a new object with &lt;see cref="ApplicationDirectory"/&gt; set to &lt;paramref name="applicationDirectory"/&gt;</comment>
        <comment type="line" pos:line="28" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="29" pos:column="9">/// &lt;param name="applicationDirectory"&gt;The directory that contains &lt;see cref="Src2SrcMLExecutableName"&gt;src2srcml.exe&lt;/see&gt;&lt;/param&gt;</comment>
        <constructor><specifier pos:line="30" pos:column="9">public</specifier> <name pos:line="30" pos:column="16">Src2SrcMLRunner2</name><parameter_list pos:line="30" pos:column="32">(<param><decl><type><name pos:line="30" pos:column="33">string</name></type> <name pos:line="30" pos:column="40">applicationDirectory</name></decl></param>)</parameter_list> <block pos:line="30" pos:column="62">{
            <expr_stmt><expr><name><name pos:line="31" pos:column="13">this</name><op:operator pos:line="31" pos:column="17">.</op:operator><name pos:line="31" pos:column="18">ApplicationDirectory</name></name> <op:operator pos:line="31" pos:column="39">=</op:operator> <name pos:line="31" pos:column="41">applicationDirectory</name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="34" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="35" pos:column="9">/// the application directory</comment>
        <comment type="line" pos:line="36" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="37" pos:column="9">public</specifier> <name pos:line="37" pos:column="16">string</name></type> <name pos:line="37" pos:column="23">ApplicationDirectory</name> <block pos:line="37" pos:column="44">{
            <function><name pos:line="38" pos:column="13">get</name> <block pos:line="38" pos:column="17">{ <return pos:line="38" pos:column="19">return <expr><name><name pos:line="38" pos:column="26">this</name><op:operator pos:line="38" pos:column="30">.</op:operator><name pos:line="38" pos:column="31">appDir</name></name></expr>;</return> }</block></function>
            <function><name pos:line="39" pos:column="13">set</name> <block pos:line="39" pos:column="17">{
                <expr_stmt><expr><name pos:line="40" pos:column="17">appDir</name> <op:operator pos:line="40" pos:column="24">=</op:operator> <name pos:line="40" pos:column="26">value</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="41" pos:column="17">ExecutablePath</name> <op:operator pos:line="41" pos:column="32">=</op:operator> <call><name><name pos:line="41" pos:column="34">Path</name><op:operator pos:line="41" pos:column="38">.</op:operator><name pos:line="41" pos:column="39">Combine</name></name><argument_list pos:line="41" pos:column="46">(<argument><expr><name pos:line="41" pos:column="47">appDir</name></expr></argument>, <argument><expr><name pos:line="41" pos:column="55">Src2SrcMLExecutableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="45" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="46" pos:column="9">/// The full path to src2srcml.exe.</comment>
        <comment type="line" pos:line="47" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="48" pos:column="9">public</specifier> <name pos:line="48" pos:column="16">string</name></type> <name pos:line="48" pos:column="23">ExecutablePath</name> <block pos:line="48" pos:column="38">{ <function_decl><name pos:line="48" pos:column="40">get</name>;</function_decl> <function_decl><specifier pos:line="48" pos:column="45">private</specifier> <name pos:line="48" pos:column="53">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="50" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="51" pos:column="9">/// Generates srcML from a file</comment>
        <comment type="line" pos:line="52" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="53" pos:column="9">/// &lt;param name="fileName"&gt;The source file name&lt;/param&gt;</comment>
        <comment type="line" pos:line="54" pos:column="9">/// &lt;param name="xmlFileName"&gt;the output file name&lt;/param&gt;</comment>
        <comment type="line" pos:line="55" pos:column="9">/// &lt;param name="language"&gt;The language to use&lt;/param&gt;</comment>
        <comment type="line" pos:line="56" pos:column="9">/// &lt;param name="namespaceArguments"&gt;additional arguments&lt;/param&gt;</comment>
        <comment type="line" pos:line="57" pos:column="9">/// &lt;param name="extensionMapping"&gt;an extension mapping&lt;/param&gt;</comment>
        <function><type><specifier pos:line="58" pos:column="9">public</specifier> <name pos:line="58" pos:column="16">void</name></type> <name pos:line="58" pos:column="21">GenerateSrcMLFromFile</name><parameter_list pos:line="58" pos:column="42">(<param><decl><type><name pos:line="58" pos:column="43">string</name></type> <name pos:line="58" pos:column="50">fileName</name></decl></param>, <param><decl><type><name pos:line="58" pos:column="60">string</name></type> <name pos:line="58" pos:column="67">xmlFileName</name></decl></param>, <param><decl><type><name pos:line="58" pos:column="80">Language</name></type> <name pos:line="58" pos:column="89">language</name></decl></param>, <param><decl><type><name><name pos:line="58" pos:column="99">Collection</name><argument_list pos:line="58" pos:column="109">&lt;<argument><name pos:line="58" pos:column="110">string</name></argument>&gt;</argument_list></name></type> <name pos:line="58" pos:column="118">namespaceArguments</name></decl></param>, <param><decl><type><name><name pos:line="58" pos:column="138">Dictionary</name><argument_list pos:line="58" pos:column="148">&lt;<argument><name pos:line="58" pos:column="149">string</name></argument>,<argument><name pos:line="58" pos:column="156">Language</name></argument>&gt;</argument_list></name></type> <name pos:line="58" pos:column="166">extensionMapping</name></decl></param>)</parameter_list> <block pos:line="58" pos:column="184">{
            <decl_stmt><decl><type><name><name pos:line="59" pos:column="13">Collection</name><argument_list pos:line="59" pos:column="23">&lt;<argument><name pos:line="59" pos:column="24">string</name></argument>&gt;</argument_list></name></type> <name pos:line="59" pos:column="32">arguments</name> <init pos:line="59" pos:column="42">= <expr><call><name pos:line="59" pos:column="44">GenerateArguments</name><argument_list pos:line="59" pos:column="61">(<argument><expr><name pos:line="59" pos:column="62">xmlFileName</name></expr></argument>, <argument><expr><name pos:line="59" pos:column="75">language</name></expr></argument>, <argument><expr><name pos:line="59" pos:column="85">namespaceArguments</name></expr></argument>, <argument><expr><name pos:line="59" pos:column="105">extensionMapping</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="61" pos:column="13">arguments</name><op:operator pos:line="61" pos:column="22">.</op:operator><name pos:line="61" pos:column="23">Add</name></name><argument_list pos:line="61" pos:column="26">(<argument><expr><call><name pos:line="61" pos:column="27">QuoteFileName</name><argument_list pos:line="61" pos:column="40">(<argument><expr><name pos:line="61" pos:column="41">fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <try pos:line="63" pos:column="13">try <block pos:line="63" pos:column="17">{
                <expr_stmt><expr><call><name pos:line="64" pos:column="17">Run</name><argument_list pos:line="64" pos:column="20">(<argument><expr><name pos:line="64" pos:column="21">arguments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch pos:line="65" pos:column="15">catch<parameter_list pos:line="65" pos:column="20">(<param><decl><type><name pos:line="65" pos:column="21">SrcMLRuntimeException</name></type> <name pos:line="65" pos:column="43">e</name></decl></param>)</parameter_list> <block pos:line="65" pos:column="46">{
                <throw pos:line="66" pos:column="17">throw <expr><op:operator pos:line="66" pos:column="23">new</op:operator> <call><name pos:line="66" pos:column="27">SrcMLException</name><argument_list pos:line="66" pos:column="41">(<argument><expr><name><name pos:line="66" pos:column="42">e</name><op:operator pos:line="66" pos:column="43">.</op:operator><name pos:line="66" pos:column="44">Message</name></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="53">e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></function>

        <comment type="line" pos:line="70" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="71" pos:column="9">/// Generates srcML from a file</comment>
        <comment type="line" pos:line="72" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="73" pos:column="9">/// &lt;param name="fileNames"&gt;An enumerable of filenames&lt;/param&gt;</comment>
        <comment type="line" pos:line="74" pos:column="9">/// &lt;param name="xmlFileName"&gt;the output file name&lt;/param&gt;</comment>
        <comment type="line" pos:line="75" pos:column="9">/// &lt;param name="language"&gt;The language to use&lt;/param&gt;</comment>
        <comment type="line" pos:line="76" pos:column="9">/// &lt;param name="namespaceArguments"&gt;additional arguments&lt;/param&gt;</comment>
        <comment type="line" pos:line="77" pos:column="9">/// &lt;param name="extensionMapping"&gt;an extension mapping&lt;/param&gt;</comment>
        <function><type><specifier pos:line="78" pos:column="9">public</specifier> <name pos:line="78" pos:column="16">void</name></type> <name pos:line="78" pos:column="21">GenerateSrcMLFromFiles</name><parameter_list pos:line="78" pos:column="43">(<param><decl><type><name><name pos:line="78" pos:column="44">IEnumerable</name><argument_list pos:line="78" pos:column="55">&lt;<argument><name pos:line="78" pos:column="56">string</name></argument>&gt;</argument_list></name></type> <name pos:line="78" pos:column="64">fileNames</name></decl></param>, <param><decl><type><name pos:line="78" pos:column="75">string</name></type> <name pos:line="78" pos:column="82">xmlFileName</name></decl></param>, <param><decl><type><name pos:line="78" pos:column="95">Language</name></type> <name pos:line="78" pos:column="104">language</name></decl></param>, <param><decl><type><name><name pos:line="78" pos:column="114">Collection</name><argument_list pos:line="78" pos:column="124">&lt;<argument><name pos:line="78" pos:column="125">string</name></argument>&gt;</argument_list></name></type> <name pos:line="78" pos:column="133">namespaceArguments</name></decl></param>, <param><decl><type><name><name pos:line="78" pos:column="153">Dictionary</name><argument_list pos:line="78" pos:column="163">&lt;<argument><name pos:line="78" pos:column="164">string</name></argument>, <argument><name pos:line="78" pos:column="172">Language</name></argument>&gt;</argument_list></name></type> <name pos:line="78" pos:column="182">extensionMapping</name></decl></param>)</parameter_list> <block pos:line="78" pos:column="200">{
            <decl_stmt><decl><type><name><name pos:line="79" pos:column="13">Collection</name><argument_list pos:line="79" pos:column="23">&lt;<argument><name pos:line="79" pos:column="24">string</name></argument>&gt;</argument_list></name></type> <name pos:line="79" pos:column="32">arguments</name> <init pos:line="79" pos:column="42">= <expr><call><name pos:line="79" pos:column="44">GenerateArguments</name><argument_list pos:line="79" pos:column="61">(<argument><expr><name pos:line="79" pos:column="62">xmlFileName</name></expr></argument>, <argument><expr><name pos:line="79" pos:column="75">language</name></expr></argument>, <argument><expr><name pos:line="79" pos:column="85">namespaceArguments</name></expr></argument>, <argument><expr><name pos:line="79" pos:column="105">extensionMapping</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="81" pos:column="13">var</name></type> <name pos:line="81" pos:column="17">tempFilePath</name> <init pos:line="81" pos:column="30">= <expr><call><name><name pos:line="81" pos:column="32">Path</name><op:operator pos:line="81" pos:column="36">.</op:operator><name pos:line="81" pos:column="37">GetTempFileName</name></name><argument_list pos:line="81" pos:column="52">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <using pos:line="83" pos:column="13">using(<decl><type><name pos:line="83" pos:column="19">StreamWriter</name></type> <name pos:line="83" pos:column="32">writer</name> <init pos:line="83" pos:column="39">= <expr><op:operator pos:line="83" pos:column="41">new</op:operator> <call><name pos:line="83" pos:column="45">StreamWriter</name><argument_list pos:line="83" pos:column="57">(<argument><expr><name pos:line="83" pos:column="58">tempFilePath</name></expr></argument>)</argument_list></call></expr></init></decl>) <block pos:line="83" pos:column="73">{
                <foreach pos:line="84" pos:column="17">foreach(<init><decl><type><name pos:line="84" pos:column="25">var</name></type> <name pos:line="84" pos:column="29">sourceFile</name> <range pos:line="84" pos:column="40">in <expr><name pos:line="84" pos:column="43">fileNames</name></expr></range></decl></init>) <block pos:line="84" pos:column="54">{
                    <expr_stmt><expr><call><name><name pos:line="85" pos:column="21">writer</name><op:operator pos:line="85" pos:column="27">.</op:operator><name pos:line="85" pos:column="28">WriteLine</name></name><argument_list pos:line="85" pos:column="37">(<argument><expr><name pos:line="85" pos:column="38">sourceFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
            }</block></using>

            <expr_stmt><expr><call><name><name pos:line="89" pos:column="13">arguments</name><op:operator pos:line="89" pos:column="22">.</op:operator><name pos:line="89" pos:column="23">Add</name></name><argument_list pos:line="89" pos:column="26">(<argument><expr><call><name><name pos:line="89" pos:column="27">String</name><op:operator pos:line="89" pos:column="33">.</op:operator><name pos:line="89" pos:column="34">Format</name></name><argument_list pos:line="89" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="89" pos:column="41">"--files-from={0}"</lit:literal></expr></argument>, <argument><expr><call><name pos:line="89" pos:column="61">QuoteFileName</name><argument_list pos:line="89" pos:column="74">(<argument><expr><name pos:line="89" pos:column="75">tempFilePath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <try pos:line="91" pos:column="13">try <block pos:line="91" pos:column="17">{
                <expr_stmt><expr><call><name pos:line="92" pos:column="17">Run</name><argument_list pos:line="92" pos:column="20">(<argument><expr><name pos:line="92" pos:column="21">arguments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch pos:line="93" pos:column="15">catch<parameter_list pos:line="93" pos:column="20">(<param><decl><type><name pos:line="93" pos:column="21">SrcMLRuntimeException</name></type> <name pos:line="93" pos:column="43">e</name></decl></param>)</parameter_list> <block pos:line="93" pos:column="46">{
                <throw pos:line="94" pos:column="17">throw <expr><op:operator pos:line="94" pos:column="23">new</op:operator> <call><name pos:line="94" pos:column="27">SrcMLException</name><argument_list pos:line="94" pos:column="41">(<argument><expr><name><name pos:line="94" pos:column="42">e</name><op:operator pos:line="94" pos:column="43">.</op:operator><name pos:line="94" pos:column="44">Message</name></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="53">e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch> <finally pos:line="95" pos:column="15">finally <block pos:line="95" pos:column="23">{
                <expr_stmt><expr><call><name><name pos:line="96" pos:column="17">File</name><op:operator pos:line="96" pos:column="21">.</op:operator><name pos:line="96" pos:column="22">Delete</name></name><argument_list pos:line="96" pos:column="28">(<argument><expr><name pos:line="96" pos:column="29">tempFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>
        }</block></function>

        <comment type="line" pos:line="100" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="101" pos:column="9">/// Generates srcML from the given string of source code</comment>
        <comment type="line" pos:line="102" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="103" pos:column="9">/// &lt;param name="source"&gt;The source code&lt;/param&gt;</comment>
        <comment type="line" pos:line="104" pos:column="9">/// &lt;param name="language"&gt;The language&lt;/param&gt;</comment>
        <comment type="line" pos:line="105" pos:column="9">/// &lt;param name="namespaceArguments"&gt;additional arguments&lt;/param&gt;</comment>
        <comment type="line" pos:line="106" pos:column="9">/// &lt;param name="omitXmlDeclaration"&gt;If true, the XML header is omitted&lt;/param&gt;</comment>
        <comment type="line" pos:line="107" pos:column="9">/// &lt;returns&gt;The srcML&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="108" pos:column="9">public</specifier> <name pos:line="108" pos:column="16">string</name></type> <name pos:line="108" pos:column="23">GenerateSrcMLFromString</name><parameter_list pos:line="108" pos:column="46">(<param><decl><type><name pos:line="108" pos:column="47">string</name></type> <name pos:line="108" pos:column="54">source</name></decl></param>, <param><decl><type><name pos:line="108" pos:column="62">Language</name></type> <name pos:line="108" pos:column="71">language</name></decl></param>, <param><decl><type><name><name pos:line="108" pos:column="81">Collection</name><argument_list pos:line="108" pos:column="91">&lt;<argument><name pos:line="108" pos:column="92">string</name></argument>&gt;</argument_list></name></type> <name pos:line="108" pos:column="100">namespaceArguments</name></decl></param>, <param><decl><type><name pos:line="108" pos:column="120">bool</name></type> <name pos:line="108" pos:column="125">omitXmlDeclaration</name></decl></param>)</parameter_list> <block pos:line="108" pos:column="145">{
            <decl_stmt><decl><type><name pos:line="109" pos:column="13">var</name></type> <name pos:line="109" pos:column="17">arguments</name> <init pos:line="109" pos:column="27">= <expr><call><name pos:line="109" pos:column="29">GenerateArguments</name><argument_list pos:line="109" pos:column="46">(<argument><expr><name pos:line="109" pos:column="47">null</name></expr></argument>, <argument><expr><name pos:line="109" pos:column="53">language</name></expr></argument>, <argument><expr><name pos:line="109" pos:column="63">namespaceArguments</name></expr></argument>, <argument><expr><op:operator pos:line="109" pos:column="83">new</op:operator> <call><name><name pos:line="109" pos:column="87">Dictionary</name><argument_list pos:line="109" pos:column="97">&lt;<argument><name pos:line="109" pos:column="98">string</name></argument>, <argument><name pos:line="109" pos:column="106">Language</name></argument>&gt;</argument_list></name><argument_list pos:line="109" pos:column="115">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if pos:line="111" pos:column="13">if<condition pos:line="111" pos:column="15">(<expr><name pos:line="111" pos:column="16">omitXmlDeclaration</name></expr>)</condition><then pos:line="111" pos:column="35"> <block pos:line="111" pos:column="36">{
                <expr_stmt><expr><call><name><name pos:line="112" pos:column="17">arguments</name><op:operator pos:line="112" pos:column="26">.</op:operator><name pos:line="112" pos:column="27">Add</name></name><argument_list pos:line="112" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="112" pos:column="31">"--no-xml-declaration"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <try pos:line="115" pos:column="13">try <block pos:line="115" pos:column="17">{
                <return pos:line="116" pos:column="17">return <expr><call><name pos:line="116" pos:column="24">Run</name><argument_list pos:line="116" pos:column="27">(<argument><expr><name pos:line="116" pos:column="28">arguments</name></expr></argument>, <argument><expr><name pos:line="116" pos:column="39">source</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block> <catch pos:line="117" pos:column="15">catch<parameter_list pos:line="117" pos:column="20">(<param><decl><type><name pos:line="117" pos:column="21">SrcMLRuntimeException</name></type> <name pos:line="117" pos:column="43">e</name></decl></param>)</parameter_list> <block pos:line="117" pos:column="46">{
                <throw pos:line="118" pos:column="17">throw <expr><op:operator pos:line="118" pos:column="23">new</op:operator> <call><name pos:line="118" pos:column="27">SrcMLException</name><argument_list pos:line="118" pos:column="41">(<argument><expr><name><name pos:line="118" pos:column="42">e</name><op:operator pos:line="118" pos:column="43">.</op:operator><name pos:line="118" pos:column="44">Message</name></name></expr></argument>, <argument><expr><name pos:line="118" pos:column="53">e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></function>

        <comment type="line" pos:line="122" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="123" pos:column="9">/// Runs &lt;see cref="ExecutablePath"/&gt; with the specified arguments</comment>
        <comment type="line" pos:line="124" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="125" pos:column="9">/// &lt;param name="arguments"&gt;the arguments&lt;/param&gt;</comment>
        <function><type><specifier pos:line="126" pos:column="9">private</specifier> <name pos:line="126" pos:column="17">void</name></type> <name pos:line="126" pos:column="22">Run</name><parameter_list pos:line="126" pos:column="25">(<param><decl><type><name><name pos:line="126" pos:column="26">Collection</name><argument_list pos:line="126" pos:column="36">&lt;<argument><name pos:line="126" pos:column="37">string</name></argument>&gt;</argument_list></name></type> <name pos:line="126" pos:column="45">arguments</name></decl></param>)</parameter_list> <block pos:line="126" pos:column="56">{
            <decl_stmt><decl><type><name pos:line="127" pos:column="13">string</name></type> <name pos:line="127" pos:column="20">argumentText</name> <init pos:line="127" pos:column="33">= <expr><call><name><name pos:line="127" pos:column="35">KsuAdapter</name><op:operator pos:line="127" pos:column="45">.</op:operator><name pos:line="127" pos:column="46">MakeArgumentString</name></name><argument_list pos:line="127" pos:column="64">(<argument><expr><name pos:line="127" pos:column="65">arguments</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="128" pos:column="13">KsuAdapter</name><op:operator pos:line="128" pos:column="23">.</op:operator><name pos:line="128" pos:column="24">RunExecutable</name></name><argument_list pos:line="128" pos:column="37">(<argument><expr><name pos:line="128" pos:column="38">ExecutablePath</name></expr></argument>, <argument><expr><name pos:line="128" pos:column="54">argumentText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="131" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="132" pos:column="9">/// Runs &lt;see cref="ExecutablePath"/&gt; with the specified arguments. &lt;paramref name="standardInput"/&gt; is passed in to the process's standard input stream</comment>
        <comment type="line" pos:line="133" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="134" pos:column="9">/// &lt;param name="arguments"&gt;configuration arguments&lt;/param&gt;</comment>
        <comment type="line" pos:line="135" pos:column="9">/// &lt;param name="standardInput"&gt;contents of standard input&lt;/param&gt;</comment>
        <comment type="line" pos:line="136" pos:column="9">/// &lt;returns&gt;contents of standard output&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="137" pos:column="9">private</specifier> <name pos:line="137" pos:column="17">string</name></type> <name pos:line="137" pos:column="24">Run</name><parameter_list pos:line="137" pos:column="27">(<param><decl><type><name><name pos:line="137" pos:column="28">Collection</name><argument_list pos:line="137" pos:column="38">&lt;<argument><name pos:line="137" pos:column="39">string</name></argument>&gt;</argument_list></name></type> <name pos:line="137" pos:column="47">arguments</name></decl></param>, <param><decl><type><name pos:line="137" pos:column="58">string</name></type> <name pos:line="137" pos:column="65">standardInput</name></decl></param>)</parameter_list> <block pos:line="137" pos:column="80">{
            <decl_stmt><decl><type><name pos:line="138" pos:column="13">string</name></type> <name pos:line="138" pos:column="20">argumentText</name> <init pos:line="138" pos:column="33">= <expr><call><name><name pos:line="138" pos:column="35">KsuAdapter</name><op:operator pos:line="138" pos:column="45">.</op:operator><name pos:line="138" pos:column="46">MakeArgumentString</name></name><argument_list pos:line="138" pos:column="64">(<argument><expr><name pos:line="138" pos:column="65">arguments</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="139" pos:column="13">var</name></type> <name pos:line="139" pos:column="17">output</name> <init pos:line="139" pos:column="24">= <expr><call><name><name pos:line="139" pos:column="26">KsuAdapter</name><op:operator pos:line="139" pos:column="36">.</op:operator><name pos:line="139" pos:column="37">RunExecutable</name></name><argument_list pos:line="139" pos:column="50">(<argument><expr><name><name pos:line="139" pos:column="51">this</name><op:operator pos:line="139" pos:column="55">.</op:operator><name pos:line="139" pos:column="56">ExecutablePath</name></name></expr></argument>, <argument><expr><name pos:line="139" pos:column="72">argumentText</name></expr></argument>, <argument><expr><name pos:line="139" pos:column="86">standardInput</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="140" pos:column="13">return <expr><name pos:line="140" pos:column="20">output</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="143" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="144" pos:column="9">/// Generates command line arguments for src2srcml.exe</comment>
        <comment type="line" pos:line="145" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="146" pos:column="9">/// &lt;param name="xmlFileName"&gt;the output file name&lt;/param&gt;</comment>
        <comment type="line" pos:line="147" pos:column="9">/// &lt;param name="language"&gt;The programming language&lt;/param&gt;</comment>
        <comment type="line" pos:line="148" pos:column="9">/// &lt;param name="namespaceArguments"&gt;additional arguments&lt;/param&gt;</comment>
        <comment type="line" pos:line="149" pos:column="9">/// &lt;param name="extensionMapping"&gt;a mapping of file extensions to languages&lt;/param&gt;</comment>
        <comment type="line" pos:line="150" pos:column="9">/// &lt;returns&gt;A collection of command line arguments&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="151" pos:column="9">private</specifier> <specifier pos:line="151" pos:column="17">static</specifier> <name><name pos:line="151" pos:column="24">Collection</name><argument_list pos:line="151" pos:column="34">&lt;<argument><name pos:line="151" pos:column="35">string</name></argument>&gt;</argument_list></name></type> <name pos:line="151" pos:column="43">GenerateArguments</name><parameter_list pos:line="151" pos:column="60">(<param><decl><type><name pos:line="151" pos:column="61">string</name></type> <name pos:line="151" pos:column="68">xmlFileName</name></decl></param>, <param><decl><type><name pos:line="151" pos:column="81">Language</name></type> <name pos:line="151" pos:column="90">language</name></decl></param>, <param><decl><type><name><name pos:line="151" pos:column="100">Collection</name><argument_list pos:line="151" pos:column="110">&lt;<argument><name pos:line="151" pos:column="111">string</name></argument>&gt;</argument_list></name></type> <name pos:line="151" pos:column="119">namespaceArguments</name></decl></param>, <param><decl><type><name><name pos:line="151" pos:column="139">Dictionary</name><argument_list pos:line="151" pos:column="149">&lt;<argument><name pos:line="151" pos:column="150">string</name></argument>, <argument><name pos:line="151" pos:column="158">Language</name></argument>&gt;</argument_list></name></type> <name pos:line="151" pos:column="168">extensionMapping</name></decl></param>)</parameter_list> <block pos:line="151" pos:column="186">{
            <decl_stmt><decl><type><name><name pos:line="152" pos:column="13">Collection</name><argument_list pos:line="152" pos:column="23">&lt;<argument><name pos:line="152" pos:column="24">string</name></argument>&gt;</argument_list></name></type> <name pos:line="152" pos:column="32">arguments</name> <init pos:line="152" pos:column="42">= <expr><op:operator pos:line="152" pos:column="44">new</op:operator> <call><name><name pos:line="152" pos:column="48">Collection</name><argument_list pos:line="152" pos:column="58">&lt;<argument><name pos:line="152" pos:column="59">string</name></argument>&gt;</argument_list></name><argument_list pos:line="152" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if pos:line="154" pos:column="13">if<condition pos:line="154" pos:column="15">(<expr><name pos:line="154" pos:column="16">namespaceArguments</name> <op:operator pos:line="154" pos:column="35">==</op:operator> <name pos:line="154" pos:column="38">null</name></expr>)</condition><then pos:line="154" pos:column="43"> <throw pos:line="154" pos:column="44">throw <expr><op:operator pos:line="154" pos:column="50">new</op:operator> <call><name pos:line="154" pos:column="54">ArgumentNullException</name><argument_list pos:line="154" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="154" pos:column="76">"namespaceArguments"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="155" pos:column="13">if<condition pos:line="155" pos:column="15">(<expr><name pos:line="155" pos:column="16">extensionMapping</name> <op:operator pos:line="155" pos:column="33">==</op:operator> <name pos:line="155" pos:column="36">null</name></expr>)</condition><then pos:line="155" pos:column="41"> <throw pos:line="155" pos:column="42">throw <expr><op:operator pos:line="155" pos:column="48">new</op:operator> <call><name pos:line="155" pos:column="52">ArgumentNullException</name><argument_list pos:line="155" pos:column="73">(<argument><expr><lit:literal type="string" pos:line="155" pos:column="74">"extensionMapping"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <expr_stmt><expr><call><name><name pos:line="157" pos:column="13">arguments</name><op:operator pos:line="157" pos:column="22">.</op:operator><name pos:line="157" pos:column="23">Add</name></name><argument_list pos:line="157" pos:column="26">(<argument><expr><call><name pos:line="157" pos:column="27">MakeLanguageArgument</name><argument_list pos:line="157" pos:column="47">(<argument><expr><name pos:line="157" pos:column="48">language</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <foreach pos:line="159" pos:column="13">foreach(<init><decl><type><name pos:line="159" pos:column="21">var</name></type> <name pos:line="159" pos:column="25">namespaceArgument</name> <range pos:line="159" pos:column="43">in <expr><name pos:line="159" pos:column="46">namespaceArguments</name></expr></range></decl></init>) <block pos:line="159" pos:column="66">{
                <expr_stmt><expr><call><name><name pos:line="160" pos:column="17">arguments</name><op:operator pos:line="160" pos:column="26">.</op:operator><name pos:line="160" pos:column="27">Add</name></name><argument_list pos:line="160" pos:column="30">(<argument><expr><name pos:line="160" pos:column="31">namespaceArgument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>

            <expr_stmt><expr><call><name><name pos:line="163" pos:column="13">arguments</name><op:operator pos:line="163" pos:column="22">.</op:operator><name pos:line="163" pos:column="23">Add</name></name><argument_list pos:line="163" pos:column="26">(<argument><expr><call><name pos:line="163" pos:column="27">MakeExtensionMapArgument</name><argument_list pos:line="163" pos:column="51">(<argument><expr><name pos:line="163" pos:column="52">extensionMapping</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if pos:line="165" pos:column="13">if<condition pos:line="165" pos:column="15">(<expr><op:operator pos:line="165" pos:column="16">!</op:operator><call><name><name pos:line="165" pos:column="17">String</name><op:operator pos:line="165" pos:column="23">.</op:operator><name pos:line="165" pos:column="24">IsNullOrEmpty</name></name><argument_list pos:line="165" pos:column="37">(<argument><expr><name pos:line="165" pos:column="38">xmlFileName</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="165" pos:column="51"> <block pos:line="165" pos:column="52">{
                <expr_stmt><expr><call><name><name pos:line="166" pos:column="17">arguments</name><op:operator pos:line="166" pos:column="26">.</op:operator><name pos:line="166" pos:column="27">Add</name></name><argument_list pos:line="166" pos:column="30">(<argument><expr><call><name pos:line="166" pos:column="31">MakeOutputArgument</name><argument_list pos:line="166" pos:column="49">(<argument><expr><name pos:line="166" pos:column="50">xmlFileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <return pos:line="169" pos:column="13">return <expr><name pos:line="169" pos:column="20">arguments</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="172" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="173" pos:column="9">/// Converts &lt;paramref name="language"/&gt; to &lt;c&gt;--language=LANGUAGE&lt;/c&gt;</comment>
        <comment type="line" pos:line="174" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="175" pos:column="9">/// &lt;param name="language"&gt;The language to use&lt;/param&gt;</comment>
        <comment type="line" pos:line="176" pos:column="9">/// &lt;returns&gt;the language command line parameter&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="177" pos:column="9">private</specifier> <specifier pos:line="177" pos:column="17">static</specifier> <name pos:line="177" pos:column="24">string</name></type> <name pos:line="177" pos:column="31">MakeLanguageArgument</name><parameter_list pos:line="177" pos:column="51">(<param><decl><type><name pos:line="177" pos:column="52">Language</name></type> <name pos:line="177" pos:column="61">language</name></decl></param>)</parameter_list> <block pos:line="177" pos:column="71">{
            <return pos:line="178" pos:column="13">return <expr><op:operator pos:line="178" pos:column="20">(</op:operator><name pos:line="178" pos:column="21">language</name> <op:operator pos:line="178" pos:column="30">==</op:operator> <name><name pos:line="178" pos:column="33">Language</name><op:operator pos:line="178" pos:column="41">.</op:operator><name pos:line="178" pos:column="42">Any</name> <type:modifier pos:line="178" pos:column="46">?</type:modifier></name> <name><name pos:line="178" pos:column="48">String</name><op:operator pos:line="178" pos:column="54">.</op:operator><name pos:line="178" pos:column="55">Empty</name></name> <op:operator pos:line="178" pos:column="61">:</op:operator> <call><name><name pos:line="178" pos:column="63">String</name><op:operator pos:line="178" pos:column="69">.</op:operator><name pos:line="178" pos:column="70">Format</name></name><argument_list pos:line="178" pos:column="76">(<argument><expr><lit:literal type="string" pos:line="178" pos:column="77">"--language={0}"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="178" pos:column="95">KsuAdapter</name><op:operator pos:line="178" pos:column="105">.</op:operator><name pos:line="178" pos:column="106">GetLanguage</name></name><argument_list pos:line="178" pos:column="117">(<argument><expr><name pos:line="178" pos:column="118">language</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="178" pos:column="128">)</op:operator></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="181" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="182" pos:column="9">/// Converts &lt;paramref name="extensionMap"/&gt; to &lt;c&gt;--register-ext EXTENSIONMAP&lt;/c&gt;</comment>
        <comment type="line" pos:line="183" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="184" pos:column="9">/// &lt;param name="extensionMap"&gt;the extension map to use&lt;/param&gt;</comment>
        <comment type="line" pos:line="185" pos:column="9">/// &lt;returns&gt;The extension map command line parameter&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="186" pos:column="9">private</specifier> <specifier pos:line="186" pos:column="17">static</specifier> <name pos:line="186" pos:column="24">string</name></type> <name pos:line="186" pos:column="31">MakeExtensionMapArgument</name><parameter_list pos:line="186" pos:column="55">(<param><decl><type><name><name pos:line="186" pos:column="56">Dictionary</name><argument_list pos:line="186" pos:column="66">&lt;<argument><name pos:line="186" pos:column="67">string</name></argument>, <argument><name pos:line="186" pos:column="75">Language</name></argument>&gt;</argument_list></name></type> <name pos:line="186" pos:column="85">extensionMap</name></decl></param>)</parameter_list> <block pos:line="186" pos:column="99">{
            <return pos:line="187" pos:column="13">return <expr><op:operator pos:line="187" pos:column="20">(</op:operator><name><name pos:line="187" pos:column="21">extensionMap</name><op:operator pos:line="187" pos:column="33">.</op:operator><name pos:line="187" pos:column="34">Count</name></name> <op:operator pos:line="187" pos:column="40">&gt;</op:operator> <lit:literal type="number" pos:line="187" pos:column="42">0</lit:literal> <op:operator pos:line="187" pos:column="44">?</op:operator> <call><name><name pos:line="187" pos:column="46">String</name><op:operator pos:line="187" pos:column="52">.</op:operator><name pos:line="187" pos:column="53">Format</name></name><argument_list pos:line="187" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="187" pos:column="60">"--register-ext {0}"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="187" pos:column="82">KsuAdapter</name><op:operator pos:line="187" pos:column="92">.</op:operator><name pos:line="187" pos:column="93">ConvertMappingToString</name></name><argument_list pos:line="187" pos:column="115">(<argument><expr><name pos:line="187" pos:column="116">extensionMap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="187" pos:column="131">:</op:operator> <name><name pos:line="187" pos:column="133">String</name><op:operator pos:line="187" pos:column="139">.</op:operator><name pos:line="187" pos:column="140">Empty</name></name><op:operator pos:line="187" pos:column="145">)</op:operator></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="190" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="191" pos:column="9">/// Converts &lt;paramref name="xmlFileName"/&gt; to &lt;c&gt;--output="XMLFILENAME"&lt;/c&gt;</comment>
        <comment type="line" pos:line="192" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="193" pos:column="9">/// &lt;param name="xmlFileName"&gt;the xml file name&lt;/param&gt;</comment>
        <comment type="line" pos:line="194" pos:column="9">/// &lt;returns&gt;The output command line parameter&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="195" pos:column="9">private</specifier> <specifier pos:line="195" pos:column="17">static</specifier> <name pos:line="195" pos:column="24">string</name></type> <name pos:line="195" pos:column="31">MakeOutputArgument</name><parameter_list pos:line="195" pos:column="49">(<param><decl><type><name pos:line="195" pos:column="50">string</name></type> <name pos:line="195" pos:column="57">xmlFileName</name></decl></param>)</parameter_list> <block pos:line="195" pos:column="70">{
            <return pos:line="196" pos:column="13">return <expr><call><name><name pos:line="196" pos:column="20">String</name><op:operator pos:line="196" pos:column="26">.</op:operator><name pos:line="196" pos:column="27">Format</name></name><argument_list pos:line="196" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="196" pos:column="34">"--output={0}"</lit:literal></expr></argument>, <argument><expr><call><name pos:line="196" pos:column="50">QuoteFileName</name><argument_list pos:line="196" pos:column="63">(<argument><expr><name pos:line="196" pos:column="64">xmlFileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="199" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="200" pos:column="9">/// Surrounds a &lt;paramref name="fileName"/&gt; with quotation marks</comment>
        <comment type="line" pos:line="201" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="202" pos:column="9">/// &lt;param name="fileName"&gt;The file name&lt;/param&gt;</comment>
        <comment type="line" pos:line="203" pos:column="9">/// &lt;returns&gt;The file name, surrounded with double quotes&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="204" pos:column="9">private</specifier> <specifier pos:line="204" pos:column="17">static</specifier> <name pos:line="204" pos:column="24">string</name></type> <name pos:line="204" pos:column="31">QuoteFileName</name><parameter_list pos:line="204" pos:column="44">(<param><decl><type><name pos:line="204" pos:column="45">string</name></type> <name pos:line="204" pos:column="52">fileName</name></decl></param>)</parameter_list> <block pos:line="204" pos:column="62">{
            <return pos:line="205" pos:column="13">return <expr><call><name><name pos:line="205" pos:column="20">String</name><op:operator pos:line="205" pos:column="26">.</op:operator><name pos:line="205" pos:column="27">Format</name></name><argument_list pos:line="205" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="205" pos:column="34">"\"{0}\""</lit:literal></expr></argument>, <argument><expr><name pos:line="205" pos:column="45">fileName</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
