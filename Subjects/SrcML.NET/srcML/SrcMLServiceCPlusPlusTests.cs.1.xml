<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\VisualStudio\ABB.SrcML.VisualStudio.SrcMLService.IntegrationTests\SrcMLServiceCPlusPlusTests.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">ABB</name><op:operator pos:line="1" pos:column="10">.</op:operator><name pos:line="1" pos:column="11">SrcML</name><op:operator pos:line="1" pos:column="16">.</op:operator><name pos:line="1" pos:column="17">Test</name><op:operator pos:line="1" pos:column="21">.</op:operator><name pos:line="1" pos:column="22">Utilities</name></name>;</using>
<using pos:line="2" pos:column="1">using <name pos:line="2" pos:column="7">EnvDTE</name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Microsoft</name><op:operator pos:line="3" pos:column="16">.</op:operator><name pos:line="3" pos:column="17">VisualStudio</name><op:operator pos:line="3" pos:column="29">.</op:operator><name pos:line="3" pos:column="30">TestTools</name><op:operator pos:line="3" pos:column="39">.</op:operator><name pos:line="3" pos:column="40">UnitTesting</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Microsoft</name><op:operator pos:line="4" pos:column="16">.</op:operator><name pos:line="4" pos:column="17">VSSDK</name><op:operator pos:line="4" pos:column="22">.</op:operator><name pos:line="4" pos:column="23">Tools</name><op:operator pos:line="4" pos:column="28">.</op:operator><name pos:line="4" pos:column="29">VsIdeTesting</name></name>;</using>
<using pos:line="5" pos:column="1">using <name pos:line="5" pos:column="7">System</name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">Collections</name><op:operator pos:line="6" pos:column="25">.</op:operator><name pos:line="6" pos:column="26">Generic</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">System</name><op:operator pos:line="7" pos:column="13">.</op:operator><name pos:line="7" pos:column="14">IO</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">System</name><op:operator pos:line="8" pos:column="13">.</op:operator><name pos:line="8" pos:column="14">Linq</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">System</name><op:operator pos:line="9" pos:column="13">.</op:operator><name pos:line="9" pos:column="14">Text</name></name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">System</name><op:operator pos:line="10" pos:column="13">.</op:operator><name pos:line="10" pos:column="14">Threading</name></name>;</using>
<using pos:line="11" pos:column="1">using <name><name pos:line="11" pos:column="7">System</name><op:operator pos:line="11" pos:column="13">.</op:operator><name pos:line="11" pos:column="14">Threading</name><op:operator pos:line="11" pos:column="23">.</op:operator><name pos:line="11" pos:column="24">Tasks</name></name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">System</name><op:operator pos:line="12" pos:column="13">.</op:operator><name pos:line="12" pos:column="14">Windows</name><op:operator pos:line="12" pos:column="21">.</op:operator><name pos:line="12" pos:column="22">Forms</name></name>;</using>

<namespace pos:line="14" pos:column="1">namespace <name><name pos:line="14" pos:column="11">ABB</name><op:operator pos:line="14" pos:column="14">.</op:operator><name pos:line="14" pos:column="15">SrcML</name><op:operator pos:line="14" pos:column="20">.</op:operator><name pos:line="14" pos:column="21">VisualStudio</name><op:operator pos:line="14" pos:column="33">.</op:operator><name pos:line="14" pos:column="34">SrcMLService</name><op:operator pos:line="14" pos:column="46">.</op:operator><name pos:line="14" pos:column="47">IntegrationTests</name></name> <block pos:line="14" pos:column="64">{

    <class><attribute pos:line="16" pos:column="5">[<expr><name pos:line="16" pos:column="6">TestClass</name></expr>]</attribute>
    <specifier pos:line="17" pos:column="5">public</specifier> class <name pos:line="17" pos:column="18">SrcMLServiceCPlusPlusTests</name> <super pos:line="17" pos:column="45">: <name pos:line="17" pos:column="47">IInvoker</name></super> <block pos:line="17" pos:column="56">{
        <decl_stmt><decl><type><specifier pos:line="18" pos:column="9">private</specifier> <specifier pos:line="18" pos:column="17">const</specifier> <name pos:line="18" pos:column="23">string</name></type> <name pos:line="18" pos:column="30">TestSolutionName</name> <init pos:line="18" pos:column="47">= <expr><lit:literal type="string" pos:line="18" pos:column="49">"TestCPPSolution"</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="19" pos:column="9">private</specifier> <specifier pos:line="19" pos:column="17">static</specifier> <name pos:line="19" pos:column="24">object</name></type> <name pos:line="19" pos:column="31">TestLock</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="20" pos:column="9">private</specifier> <specifier pos:line="20" pos:column="17">static</specifier> <name pos:line="20" pos:column="24">Solution</name></type> <name pos:line="20" pos:column="33">TestSolution</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="21" pos:column="9">private</specifier> <specifier pos:line="21" pos:column="17">static</specifier> <name pos:line="21" pos:column="24">string</name></type> <name pos:line="21" pos:column="31">TestSolutionPath</name> <init pos:line="21" pos:column="48">= <expr><call><name><name pos:line="21" pos:column="50">Path</name><op:operator pos:line="21" pos:column="54">.</op:operator><name pos:line="21" pos:column="55">Combine</name></name><argument_list pos:line="21" pos:column="62">(<argument><expr><name pos:line="21" pos:column="63">TestSolutionName</name></expr></argument>, <argument><expr><name pos:line="21" pos:column="81">TestSolutionName</name> <op:operator pos:line="21" pos:column="98">+</op:operator> <lit:literal type="string" pos:line="21" pos:column="100">".sln"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <function><type><attribute pos:line="23" pos:column="9">[<expr><name pos:line="23" pos:column="10">ClassInitialize</name></expr>]</attribute>
        <specifier pos:line="24" pos:column="9">public</specifier> <specifier pos:line="24" pos:column="16">static</specifier> <name pos:line="24" pos:column="23">void</name></type> <name pos:line="24" pos:column="28">ClassSetup</name><parameter_list pos:line="24" pos:column="38">(<param><decl><type><name pos:line="24" pos:column="39">TestContext</name></type> <name pos:line="24" pos:column="51">testContext</name></decl></param>)</parameter_list> <block pos:line="24" pos:column="64">{
            <comment type="line" pos:line="25" pos:column="13">// Create a local copy of the solution</comment>
            <expr_stmt><expr><call><name><name pos:line="26" pos:column="13">FileUtils</name><op:operator pos:line="26" pos:column="22">.</op:operator><name pos:line="26" pos:column="23">CopyDirectory</name></name><argument_list pos:line="26" pos:column="36">(<argument><expr><call><name><name pos:line="26" pos:column="37">Path</name><op:operator pos:line="26" pos:column="41">.</op:operator><name pos:line="26" pos:column="42">Combine</name></name><argument_list pos:line="26" pos:column="49">(<argument><expr><name><name pos:line="26" pos:column="50">TestConstants</name><op:operator pos:line="26" pos:column="63">.</op:operator><name pos:line="26" pos:column="64">InputFolderPath</name></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="81">TestSolutionName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="26" pos:column="100">TestSolutionName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="27" pos:column="13">TestLock</name> <op:operator pos:line="27" pos:column="22">=</op:operator> <op:operator pos:line="27" pos:column="24">new</op:operator> <call><name pos:line="27" pos:column="28">object</name><argument_list pos:line="27" pos:column="34">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="30" pos:column="9">public</specifier> <name pos:line="30" pos:column="16">void</name></type> <name pos:line="30" pos:column="21">Invoke</name><parameter_list pos:line="30" pos:column="27">(<param><decl><type><name pos:line="30" pos:column="28">MethodInvoker</name></type> <name pos:line="30" pos:column="42">globalSystemWindowsFormsMethodInvoker</name></decl></param>)</parameter_list> <block pos:line="30" pos:column="81">{
            <expr_stmt><expr><call><name><name pos:line="31" pos:column="13">UIThreadInvoker</name><op:operator pos:line="31" pos:column="28">.</op:operator><name pos:line="31" pos:column="29">Invoke</name></name><argument_list pos:line="31" pos:column="35">(<argument><expr><name pos:line="31" pos:column="36">globalSystemWindowsFormsMethodInvoker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="34" pos:column="9">[<expr><name pos:line="34" pos:column="10">TestMethod</name></expr>]</attribute>
        <attribute pos:line="35" pos:column="9">[<expr><call><name pos:line="35" pos:column="10">HostType</name><argument_list pos:line="35" pos:column="18">(<argument><expr><lit:literal type="string" pos:line="35" pos:column="19">"VS IDE"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="36" pos:column="9">public</specifier> <name pos:line="36" pos:column="16">void</name></type> <name pos:line="36" pos:column="21">TestCppFileOperations</name><parameter_list pos:line="36" pos:column="42">()</parameter_list> <block pos:line="36" pos:column="45">{
            <comment type="line" pos:line="37" pos:column="13">// setup</comment>
            <decl_stmt><decl><type><name pos:line="38" pos:column="13">Project</name></type> <name pos:line="38" pos:column="21">project</name> <init pos:line="38" pos:column="29">= <expr><call><name><name pos:line="38" pos:column="31">TestHelpers</name><op:operator pos:line="38" pos:column="42">.</op:operator><name pos:line="38" pos:column="43">GetProjects</name></name><argument_list pos:line="38" pos:column="54">(<argument><expr><name pos:line="38" pos:column="55">TestSolution</name></expr></argument>)</argument_list></call><op:operator pos:line="38" pos:column="68">.</op:operator><call><name pos:line="38" pos:column="69">FirstOrDefault</name><argument_list pos:line="38" pos:column="83">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="39" pos:column="13">Assert</name><op:operator pos:line="39" pos:column="19">.</op:operator><name pos:line="39" pos:column="20">IsNotNull</name></name><argument_list pos:line="39" pos:column="29">(<argument><expr><name pos:line="39" pos:column="30">project</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="39" pos:column="39">"Couldn't get the project"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="40" pos:column="13">var</name></type> <name pos:line="40" pos:column="17">archive</name> <init pos:line="40" pos:column="25">= <expr><name><name pos:line="40" pos:column="27">TestHelpers</name><op:operator pos:line="40" pos:column="38">.</op:operator><name pos:line="40" pos:column="39">TestScaffold</name><op:operator pos:line="40" pos:column="51">.</op:operator><name pos:line="40" pos:column="52">Service</name><op:operator pos:line="40" pos:column="59">.</op:operator><name pos:line="40" pos:column="60">CurrentSrcMLArchive</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="41" pos:column="13">var</name></type> <name pos:line="41" pos:column="17">service</name> <init pos:line="41" pos:column="25">= <expr><name><name pos:line="41" pos:column="27">TestHelpers</name><op:operator pos:line="41" pos:column="38">.</op:operator><name pos:line="41" pos:column="39">TestScaffold</name><op:operator pos:line="41" pos:column="51">.</op:operator><name pos:line="41" pos:column="52">Service</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="42" pos:column="13">int</name></type> <name pos:line="42" pos:column="17">scanInterval</name> <init pos:line="42" pos:column="30">= <expr><lit:literal type="number" pos:line="42" pos:column="32">5</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="43" pos:column="13">int</name></type> <name pos:line="43" pos:column="17">scanIntervalMs</name> <init pos:line="43" pos:column="32">= <expr><name pos:line="43" pos:column="34">scanInterval</name> <op:operator pos:line="43" pos:column="47">*</op:operator> <lit:literal type="number" pos:line="43" pos:column="49">1000</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="44" pos:column="13">service</name><op:operator pos:line="44" pos:column="20">.</op:operator><name pos:line="44" pos:column="21">ScanInterval</name></name> <op:operator pos:line="44" pos:column="34">=</op:operator> <name pos:line="44" pos:column="36">scanInterval</name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="46" pos:column="13">Assert</name><op:operator pos:line="46" pos:column="19">.</op:operator><name pos:line="46" pos:column="20">IsNotNull</name></name><argument_list pos:line="46" pos:column="29">(<argument><expr><name pos:line="46" pos:column="30">archive</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="46" pos:column="39">"Could not get the SrcML Archive"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="48" pos:column="13">AutoResetEvent</name></type> <name pos:line="48" pos:column="28">resetEvent</name> <init pos:line="48" pos:column="39">= <expr><op:operator pos:line="48" pos:column="41">new</op:operator> <call><name pos:line="48" pos:column="45">AutoResetEvent</name><argument_list pos:line="48" pos:column="59">(<argument><expr><lit:literal type="boolean" pos:line="48" pos:column="60">false</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="49" pos:column="13">string</name></type> <name pos:line="49" pos:column="20">expectedFilePath</name> <init pos:line="49" pos:column="37">= <expr><name pos:line="49" pos:column="39">null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="50" pos:column="13">FileEventType</name></type> <name pos:line="50" pos:column="27">expectedEventType</name> <init pos:line="50" pos:column="45">= <expr><name><name pos:line="50" pos:column="47">FileEventType</name><op:operator pos:line="50" pos:column="60">.</op:operator><name pos:line="50" pos:column="61">FileDeleted</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name><name pos:line="52" pos:column="13">EventHandler</name><argument_list pos:line="52" pos:column="25">&lt;<argument><name pos:line="52" pos:column="26">FileEventRaisedArgs</name></argument>&gt;</argument_list></name></type> <name pos:line="52" pos:column="47">action</name> <init pos:line="52" pos:column="54">= <expr><lambda><parameter_list pos:line="52" pos:column="56">(<param><decl><name pos:line="52" pos:column="57">o</name></decl></param>, <param><decl><name pos:line="52" pos:column="60">e</name></decl></param>)</parameter_list> <op:operator pos:line="52" pos:column="63">=&gt;</op:operator> <block pos:line="52" pos:column="66">{
                <lock pos:line="53" pos:column="17">lock(<expr><name pos:line="53" pos:column="22">TestLock</name></expr>) <block pos:line="53" pos:column="32">{
                    <if pos:line="54" pos:column="21">if<condition pos:line="54" pos:column="23">(<expr><call><name><name pos:line="54" pos:column="24">e</name><op:operator pos:line="54" pos:column="25">.</op:operator><name pos:line="54" pos:column="26">FilePath</name><op:operator pos:line="54" pos:column="34">.</op:operator><name pos:line="54" pos:column="35">Equals</name></name><argument_list pos:line="54" pos:column="41">(<argument><expr><name pos:line="54" pos:column="42">expectedFilePath</name></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="60">StringComparison</name><op:operator pos:line="54" pos:column="76">.</op:operator><name pos:line="54" pos:column="77">InvariantCultureIgnoreCase</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="54" pos:column="105">&amp;&amp;</op:operator> <name><name pos:line="54" pos:column="108">e</name><op:operator pos:line="54" pos:column="109">.</op:operator><name pos:line="54" pos:column="110">EventType</name></name> <op:operator pos:line="54" pos:column="120">==</op:operator> <name pos:line="54" pos:column="123">expectedEventType</name></expr>)</condition><then pos:line="54" pos:column="141"> <block pos:line="54" pos:column="142">{
                        <expr_stmt><expr><call><name><name pos:line="55" pos:column="25">resetEvent</name><op:operator pos:line="55" pos:column="35">.</op:operator><name pos:line="55" pos:column="36">Set</name></name><argument_list pos:line="55" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></lock>
            }</block></lambda></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="59" pos:column="13">TestHelpers</name><op:operator pos:line="59" pos:column="24">.</op:operator><name pos:line="59" pos:column="25">TestScaffold</name><op:operator pos:line="59" pos:column="37">.</op:operator><name pos:line="59" pos:column="38">Service</name><op:operator pos:line="59" pos:column="45">.</op:operator><name pos:line="59" pos:column="46">SourceFileChanged</name></name> <op:operator pos:line="59" pos:column="64">+=</op:operator> <name pos:line="59" pos:column="67">action</name></expr>;</expr_stmt>

            <comment type="line" pos:line="61" pos:column="13">// add a file</comment>
            <decl_stmt><decl><type><name pos:line="62" pos:column="13">var</name></type> <name pos:line="62" pos:column="17">fileTemplate</name> <init pos:line="62" pos:column="30">= <expr><call><name><name pos:line="62" pos:column="32">Path</name><op:operator pos:line="62" pos:column="36">.</op:operator><name pos:line="62" pos:column="37">Combine</name></name><argument_list pos:line="62" pos:column="44">(<argument><expr><name><name pos:line="62" pos:column="45">TestConstants</name><op:operator pos:line="62" pos:column="58">.</op:operator><name pos:line="62" pos:column="59">TemplatesFolder</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="62" pos:column="76">"NewCPPClass1.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="63" pos:column="13">expectedFilePath</name> <op:operator pos:line="63" pos:column="30">=</op:operator> <call><name><name pos:line="63" pos:column="32">Path</name><op:operator pos:line="63" pos:column="36">.</op:operator><name pos:line="63" pos:column="37">Combine</name></name><argument_list pos:line="63" pos:column="44">(<argument><expr><call><name><name pos:line="63" pos:column="45">Path</name><op:operator pos:line="63" pos:column="49">.</op:operator><name pos:line="63" pos:column="50">GetDirectoryName</name></name><argument_list pos:line="63" pos:column="66">(<argument><expr><name><name pos:line="63" pos:column="67">project</name><op:operator pos:line="63" pos:column="74">.</op:operator><name pos:line="63" pos:column="75">FullName</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="63" pos:column="86">"NewCPPClass1.cpp"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="64" pos:column="13">expectedEventType</name> <op:operator pos:line="64" pos:column="31">=</op:operator> <name><name pos:line="64" pos:column="33">FileEventType</name><op:operator pos:line="64" pos:column="46">.</op:operator><name pos:line="64" pos:column="47">FileAdded</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="65" pos:column="13">File</name><op:operator pos:line="65" pos:column="17">.</op:operator><name pos:line="65" pos:column="18">Copy</name></name><argument_list pos:line="65" pos:column="22">(<argument><expr><name pos:line="65" pos:column="23">fileTemplate</name></expr></argument>, <argument><expr><name pos:line="65" pos:column="37">expectedFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="66" pos:column="13">var</name></type> <name pos:line="66" pos:column="17">item</name> <init pos:line="66" pos:column="22">= <expr><call><name><name pos:line="66" pos:column="24">project</name><op:operator pos:line="66" pos:column="31">.</op:operator><name pos:line="66" pos:column="32">ProjectItems</name><op:operator pos:line="66" pos:column="44">.</op:operator><name pos:line="66" pos:column="45">AddFromFile</name></name><argument_list pos:line="66" pos:column="56">(<argument><expr><name pos:line="66" pos:column="57">expectedFilePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="67" pos:column="13">Console</name><op:operator pos:line="67" pos:column="20">.</op:operator><name pos:line="67" pos:column="21">WriteLine</name></name><argument_list pos:line="67" pos:column="30">(<argument><expr><name><name pos:line="67" pos:column="31">item</name><op:operator pos:line="67" pos:column="35">.</op:operator><name pos:line="67" pos:column="36">FileNames</name><index pos:line="67" pos:column="45">[<expr><lit:literal type="number" pos:line="67" pos:column="46">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="68" pos:column="13">Console</name><op:operator pos:line="68" pos:column="20">.</op:operator><name pos:line="68" pos:column="21">WriteLine</name></name><argument_list pos:line="68" pos:column="30">(<argument><expr><name pos:line="68" pos:column="31">expectedFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="69" pos:column="13">project</name><op:operator pos:line="69" pos:column="20">.</op:operator><name pos:line="69" pos:column="21">Save</name></name><argument_list pos:line="69" pos:column="25">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="71" pos:column="13">Assert</name><op:operator pos:line="71" pos:column="19">.</op:operator><name pos:line="71" pos:column="20">IsTrue</name></name><argument_list pos:line="71" pos:column="26">(<argument><expr><call><name><name pos:line="71" pos:column="27">resetEvent</name><op:operator pos:line="71" pos:column="37">.</op:operator><name pos:line="71" pos:column="38">WaitOne</name></name><argument_list pos:line="71" pos:column="45">(<argument><expr><name pos:line="71" pos:column="46">scanIntervalMs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="72" pos:column="13">Assert</name><op:operator pos:line="72" pos:column="19">.</op:operator><name pos:line="72" pos:column="20">IsTrue</name></name><argument_list pos:line="72" pos:column="26">(<argument><expr><call><name><name pos:line="72" pos:column="27">archive</name><op:operator pos:line="72" pos:column="34">.</op:operator><name pos:line="72" pos:column="35">ContainsFile</name></name><argument_list pos:line="72" pos:column="47">(<argument><expr><name pos:line="72" pos:column="48">expectedFilePath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="73" pos:column="13">Assert</name><op:operator pos:line="73" pos:column="19">.</op:operator><name pos:line="73" pos:column="20">IsFalse</name></name><argument_list pos:line="73" pos:column="27">(<argument><expr><call><name><name pos:line="73" pos:column="28">archive</name><op:operator pos:line="73" pos:column="35">.</op:operator><name pos:line="73" pos:column="36">IsOutdated</name></name><argument_list pos:line="73" pos:column="46">(<argument><expr><name pos:line="73" pos:column="47">expectedFilePath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="75" pos:column="13">//// rename a file</comment>
            <comment type="line" pos:line="76" pos:column="13">//string oldFilePath = expectedFilePath;</comment>
            <comment type="line" pos:line="77" pos:column="13">//expectedFilePath = Path.Combine(Path.GetDirectoryName(project.FullName), "NewCPPClass2.cpp");</comment>
            <comment type="line" pos:line="78" pos:column="13">//expectedEventType = FileEventType.FileAdded;</comment>
            <comment type="line" pos:line="79" pos:column="13">//item = TestSolution.FindProjectItem(oldFilePath);</comment>
            <comment type="line" pos:line="80" pos:column="13">//item.SaveAs(expectedFilePath);</comment>
            <comment type="line" pos:line="81" pos:column="13">//File.Delete(oldFilePath);</comment>
            <comment type="line" pos:line="82" pos:column="13">//project.Save();</comment>

            <comment type="line" pos:line="84" pos:column="13">//Assert.IsTrue(resetEvent.WaitOne(500));</comment>
            <comment type="line" pos:line="85" pos:column="13">//Assert.IsTrue(archive.ContainsFile(expectedFilePath), "The archive should contain {0}", expectedFilePath);</comment>
            <comment type="line" pos:line="86" pos:column="13">//Assert.IsFalse(archive.ContainsFile(oldFilePath), "the archive should not contain {0}", oldFilePath);</comment>
            <comment type="line" pos:line="87" pos:column="13">//Assert.IsFalse(archive.IsOutdated(expectedFilePath), String.Format("{0} is outdated", expectedFilePath));</comment>

            <comment type="line" pos:line="89" pos:column="13">// delete the file</comment>
            <expr_stmt><expr><name pos:line="90" pos:column="13">expectedEventType</name> <op:operator pos:line="90" pos:column="31">=</op:operator> <name><name pos:line="90" pos:column="33">FileEventType</name><op:operator pos:line="90" pos:column="46">.</op:operator><name pos:line="90" pos:column="47">FileDeleted</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="91" pos:column="13">item</name> <op:operator pos:line="91" pos:column="18">=</op:operator> <call><name><name pos:line="91" pos:column="20">TestSolution</name><op:operator pos:line="91" pos:column="32">.</op:operator><name pos:line="91" pos:column="33">FindProjectItem</name></name><argument_list pos:line="91" pos:column="48">(<argument><expr><name pos:line="91" pos:column="49">expectedFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="92" pos:column="13">item</name><op:operator pos:line="92" pos:column="17">.</op:operator><name pos:line="92" pos:column="18">Delete</name></name><argument_list pos:line="92" pos:column="24">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="93" pos:column="13">project</name><op:operator pos:line="93" pos:column="20">.</op:operator><name pos:line="93" pos:column="21">Save</name></name><argument_list pos:line="93" pos:column="25">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="94" pos:column="13">Assert</name><op:operator pos:line="94" pos:column="19">.</op:operator><name pos:line="94" pos:column="20">IsTrue</name></name><argument_list pos:line="94" pos:column="26">(<argument><expr><call><name><name pos:line="94" pos:column="27">resetEvent</name><op:operator pos:line="94" pos:column="37">.</op:operator><name pos:line="94" pos:column="38">WaitOne</name></name><argument_list pos:line="94" pos:column="45">(<argument><expr><name pos:line="94" pos:column="46">scanIntervalMs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="96" pos:column="13">Assert</name><op:operator pos:line="96" pos:column="19">.</op:operator><name pos:line="96" pos:column="20">IsFalse</name></name><argument_list pos:line="96" pos:column="27">(<argument><expr><call><name><name pos:line="96" pos:column="28">archive</name><op:operator pos:line="96" pos:column="35">.</op:operator><name pos:line="96" pos:column="36">IsOutdated</name></name><argument_list pos:line="96" pos:column="46">(<argument><expr><name pos:line="96" pos:column="47">expectedFilePath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="97" pos:column="13">//Assert.AreEqual(2, archive.FileUnits.Count());</comment>
            <expr_stmt><expr><name><name pos:line="98" pos:column="13">TestHelpers</name><op:operator pos:line="98" pos:column="24">.</op:operator><name pos:line="98" pos:column="25">TestScaffold</name><op:operator pos:line="98" pos:column="37">.</op:operator><name pos:line="98" pos:column="38">Service</name><op:operator pos:line="98" pos:column="45">.</op:operator><name pos:line="98" pos:column="46">SourceFileChanged</name></name> <op:operator pos:line="98" pos:column="64">-=</op:operator> <name pos:line="98" pos:column="67">action</name></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="101" pos:column="9">[<expr><name pos:line="101" pos:column="10">TestMethod</name></expr>]</attribute>
        <attribute pos:line="102" pos:column="9">[<expr><call><name pos:line="102" pos:column="10">HostType</name><argument_list pos:line="102" pos:column="18">(<argument><expr><lit:literal type="string" pos:line="102" pos:column="19">"VS IDE"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="103" pos:column="9">public</specifier> <name pos:line="103" pos:column="16">void</name></type> <name pos:line="103" pos:column="21">TestCppProjectOperations</name><parameter_list pos:line="103" pos:column="45">()</parameter_list> <block pos:line="103" pos:column="48">{
            <decl_stmt><decl><type><name pos:line="104" pos:column="13">var</name></type> <name pos:line="104" pos:column="17">archive</name> <init pos:line="104" pos:column="25">= <expr><name><name pos:line="104" pos:column="27">TestHelpers</name><op:operator pos:line="104" pos:column="38">.</op:operator><name pos:line="104" pos:column="39">TestScaffold</name><op:operator pos:line="104" pos:column="51">.</op:operator><name pos:line="104" pos:column="52">Service</name><op:operator pos:line="104" pos:column="59">.</op:operator><name pos:line="104" pos:column="60">CurrentSrcMLArchive</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="105" pos:column="13">var</name></type> <name pos:line="105" pos:column="17">service</name> <init pos:line="105" pos:column="25">= <expr><name><name pos:line="105" pos:column="27">TestHelpers</name><op:operator pos:line="105" pos:column="38">.</op:operator><name pos:line="105" pos:column="39">TestScaffold</name><op:operator pos:line="105" pos:column="51">.</op:operator><name pos:line="105" pos:column="52">Service</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="106" pos:column="13">int</name></type> <name pos:line="106" pos:column="17">scanInterval</name> <init pos:line="106" pos:column="30">= <expr><lit:literal type="number" pos:line="106" pos:column="32">5</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="107" pos:column="13">int</name></type> <name pos:line="107" pos:column="17">scanIntervalMs</name> <init pos:line="107" pos:column="32">= <expr><name pos:line="107" pos:column="34">scanInterval</name> <op:operator pos:line="107" pos:column="47">*</op:operator> <lit:literal type="number" pos:line="107" pos:column="49">1000</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="108" pos:column="13">service</name><op:operator pos:line="108" pos:column="20">.</op:operator><name pos:line="108" pos:column="21">ScanInterval</name></name> <op:operator pos:line="108" pos:column="34">=</op:operator> <name pos:line="108" pos:column="36">scanInterval</name></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="110" pos:column="13">AutoResetEvent</name></type> <name pos:line="110" pos:column="28">resetEvent</name> <init pos:line="110" pos:column="39">= <expr><op:operator pos:line="110" pos:column="41">new</op:operator> <call><name pos:line="110" pos:column="45">AutoResetEvent</name><argument_list pos:line="110" pos:column="59">(<argument><expr><lit:literal type="boolean" pos:line="110" pos:column="60">false</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="111" pos:column="13">var</name></type> <name pos:line="111" pos:column="17">testProjectName</name> <init pos:line="111" pos:column="33">= <expr><lit:literal type="string" pos:line="111" pos:column="35">"ConsoleApplication1"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="113" pos:column="13">var</name></type> <name pos:line="113" pos:column="17">expectedProjectDirectory</name> <init pos:line="113" pos:column="42">= <expr><call><name><name pos:line="113" pos:column="44">Path</name><op:operator pos:line="113" pos:column="48">.</op:operator><name pos:line="113" pos:column="49">GetFullPath</name></name><argument_list pos:line="113" pos:column="60">(<argument><expr><call><name><name pos:line="113" pos:column="61">Path</name><op:operator pos:line="113" pos:column="65">.</op:operator><name pos:line="113" pos:column="66">Combine</name></name><argument_list pos:line="113" pos:column="73">(<argument><expr><name pos:line="113" pos:column="74">TestSolutionName</name></expr></argument>, <argument><expr><name pos:line="113" pos:column="92">testProjectName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="114" pos:column="13">var</name></type> <name pos:line="114" pos:column="17">expectedEventType</name> <init pos:line="114" pos:column="35">= <expr><name><name pos:line="114" pos:column="37">FileEventType</name><op:operator pos:line="114" pos:column="50">.</op:operator><name pos:line="114" pos:column="51">FileAdded</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name><name pos:line="116" pos:column="13">HashSet</name><argument_list pos:line="116" pos:column="20">&lt;<argument><name pos:line="116" pos:column="21">string</name></argument>&gt;</argument_list></name></type> <name pos:line="116" pos:column="29">expectedFiles</name> <init pos:line="116" pos:column="43">= <expr><op:operator pos:line="116" pos:column="45">new</op:operator> <call><name><name pos:line="116" pos:column="49">HashSet</name><argument_list pos:line="116" pos:column="56">&lt;<argument><name pos:line="116" pos:column="57">string</name></argument>&gt;</argument_list></name><argument_list pos:line="116" pos:column="64">(<argument><expr><name><name pos:line="116" pos:column="65">StringComparer</name><op:operator pos:line="116" pos:column="79">.</op:operator><name pos:line="116" pos:column="80">InvariantCultureIgnoreCase</name></name></expr></argument>)</argument_list></call> <block pos:line="116" pos:column="108">{
                <expr><call><name><name pos:line="117" pos:column="17">Path</name><op:operator pos:line="117" pos:column="21">.</op:operator><name pos:line="117" pos:column="22">Combine</name></name><argument_list pos:line="117" pos:column="29">(<argument><expr><name pos:line="117" pos:column="30">expectedProjectDirectory</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="117" pos:column="56">"ConsoleApplication1.cpp"</lit:literal></expr></argument>)</argument_list></call></expr>,
                <expr><call><name><name pos:line="118" pos:column="17">Path</name><op:operator pos:line="118" pos:column="21">.</op:operator><name pos:line="118" pos:column="22">Combine</name></name><argument_list pos:line="118" pos:column="29">(<argument><expr><name pos:line="118" pos:column="30">expectedProjectDirectory</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="118" pos:column="56">"stdafx.cpp"</lit:literal></expr></argument>)</argument_list></call></expr>,
                <expr><call><name><name pos:line="119" pos:column="17">Path</name><op:operator pos:line="119" pos:column="21">.</op:operator><name pos:line="119" pos:column="22">Combine</name></name><argument_list pos:line="119" pos:column="29">(<argument><expr><name pos:line="119" pos:column="30">expectedProjectDirectory</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="119" pos:column="56">"stdafx.h"</lit:literal></expr></argument>)</argument_list></call></expr>,
                <expr><call><name><name pos:line="120" pos:column="17">Path</name><op:operator pos:line="120" pos:column="21">.</op:operator><name pos:line="120" pos:column="22">Combine</name></name><argument_list pos:line="120" pos:column="29">(<argument><expr><name pos:line="120" pos:column="30">expectedProjectDirectory</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="120" pos:column="56">"targetver.h"</lit:literal></expr></argument>)</argument_list></call></expr>,
            }</block></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name><name pos:line="123" pos:column="13">EventHandler</name><argument_list pos:line="123" pos:column="25">&lt;<argument><name pos:line="123" pos:column="26">FileEventRaisedArgs</name></argument>&gt;</argument_list></name></type> <name pos:line="123" pos:column="47">action</name> <init pos:line="123" pos:column="54">= <expr><lambda><parameter_list pos:line="123" pos:column="56">(<param><decl><name pos:line="123" pos:column="57">o</name></decl></param>, <param><decl><name pos:line="123" pos:column="60">e</name></decl></param>)</parameter_list> <op:operator pos:line="123" pos:column="63">=&gt;</op:operator> <block pos:line="123" pos:column="66">{
                <lock pos:line="124" pos:column="17">lock(<expr><name pos:line="124" pos:column="22">TestLock</name></expr>) <block pos:line="124" pos:column="32">{
                    <if pos:line="125" pos:column="21">if<condition pos:line="125" pos:column="23">(<expr><call><name><name pos:line="125" pos:column="24">expectedFiles</name><op:operator pos:line="125" pos:column="37">.</op:operator><name pos:line="125" pos:column="38">Contains</name></name><argument_list pos:line="125" pos:column="46">(<argument><expr><call><name><name pos:line="125" pos:column="47">Path</name><op:operator pos:line="125" pos:column="51">.</op:operator><name pos:line="125" pos:column="52">GetFullPath</name></name><argument_list pos:line="125" pos:column="63">(<argument><expr><name><name pos:line="125" pos:column="64">e</name><op:operator pos:line="125" pos:column="65">.</op:operator><name pos:line="125" pos:column="66">FilePath</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="125" pos:column="77">&amp;&amp;</op:operator> <name><name pos:line="125" pos:column="80">e</name><op:operator pos:line="125" pos:column="81">.</op:operator><name pos:line="125" pos:column="82">EventType</name></name> <op:operator pos:line="125" pos:column="92">==</op:operator> <name pos:line="125" pos:column="95">expectedEventType</name></expr>)</condition><then pos:line="125" pos:column="113"> <block pos:line="125" pos:column="114">{
                        <expr_stmt><expr><call><name><name pos:line="126" pos:column="25">resetEvent</name><op:operator pos:line="126" pos:column="35">.</op:operator><name pos:line="126" pos:column="36">Set</name></name><argument_list pos:line="126" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></lock>
            }</block></lambda></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="130" pos:column="13">TestHelpers</name><op:operator pos:line="130" pos:column="24">.</op:operator><name pos:line="130" pos:column="25">TestScaffold</name><op:operator pos:line="130" pos:column="37">.</op:operator><name pos:line="130" pos:column="38">Service</name><op:operator pos:line="130" pos:column="45">.</op:operator><name pos:line="130" pos:column="46">SourceFileChanged</name></name> <op:operator pos:line="130" pos:column="64">+=</op:operator> <name pos:line="130" pos:column="67">action</name></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="132" pos:column="13">var</name></type> <name pos:line="132" pos:column="17">projectTemplate</name> <init pos:line="132" pos:column="33">= <expr><call><name><name pos:line="132" pos:column="35">Path</name><op:operator pos:line="132" pos:column="39">.</op:operator><name pos:line="132" pos:column="40">GetFullPath</name></name><argument_list pos:line="132" pos:column="51">(<argument><expr><call><name><name pos:line="132" pos:column="52">Path</name><op:operator pos:line="132" pos:column="56">.</op:operator><name pos:line="132" pos:column="57">Combine</name></name><argument_list pos:line="132" pos:column="64">(<argument><expr><name><name pos:line="132" pos:column="65">TestConstants</name><op:operator pos:line="132" pos:column="78">.</op:operator><name pos:line="132" pos:column="79">TemplatesFolder</name></name></expr></argument>, <argument><expr><name pos:line="132" pos:column="96">testProjectName</name></expr></argument>, <argument><expr><name pos:line="132" pos:column="113">testProjectName</name></expr></argument>, <argument><expr><name pos:line="132" pos:column="130">testProjectName</name> <op:operator pos:line="132" pos:column="146">+</op:operator> <lit:literal type="string" pos:line="132" pos:column="148">".vcxproj"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="134" pos:column="13">// add a new project</comment>
            <decl_stmt><decl><type><name pos:line="135" pos:column="13">var</name></type> <name pos:line="135" pos:column="17">addedProject</name> <init pos:line="135" pos:column="30">= <expr><call><name><name pos:line="135" pos:column="32">TestSolution</name><op:operator pos:line="135" pos:column="44">.</op:operator><name pos:line="135" pos:column="45">AddFromTemplate</name></name><argument_list pos:line="135" pos:column="60">(<argument><expr><name pos:line="135" pos:column="61">projectTemplate</name></expr></argument>, <argument><expr><name pos:line="135" pos:column="78">expectedProjectDirectory</name></expr></argument>, <argument><expr><name pos:line="135" pos:column="104">testProjectName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="136" pos:column="13">addedProject</name><op:operator pos:line="136" pos:column="25">.</op:operator><name pos:line="136" pos:column="26">Save</name></name><argument_list pos:line="136" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="137" pos:column="13">Assert</name><op:operator pos:line="137" pos:column="19">.</op:operator><name pos:line="137" pos:column="20">IsTrue</name></name><argument_list pos:line="137" pos:column="26">(<argument><expr><call><name><name pos:line="137" pos:column="27">resetEvent</name><op:operator pos:line="137" pos:column="37">.</op:operator><name pos:line="137" pos:column="38">WaitOne</name></name><argument_list pos:line="137" pos:column="45">(<argument><expr><name pos:line="137" pos:column="46">scanIntervalMs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="138" pos:column="13">Assert</name><op:operator pos:line="138" pos:column="19">.</op:operator><name pos:line="138" pos:column="20">IsTrue</name></name><argument_list pos:line="138" pos:column="26">(<argument><expr><call><name><name pos:line="138" pos:column="27">resetEvent</name><op:operator pos:line="138" pos:column="37">.</op:operator><name pos:line="138" pos:column="38">WaitOne</name></name><argument_list pos:line="138" pos:column="45">(<argument><expr><name pos:line="138" pos:column="46">scanIntervalMs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="139" pos:column="13">Assert</name><op:operator pos:line="139" pos:column="19">.</op:operator><name pos:line="139" pos:column="20">IsTrue</name></name><argument_list pos:line="139" pos:column="26">(<argument><expr><call><name><name pos:line="139" pos:column="27">resetEvent</name><op:operator pos:line="139" pos:column="37">.</op:operator><name pos:line="139" pos:column="38">WaitOne</name></name><argument_list pos:line="139" pos:column="45">(<argument><expr><name pos:line="139" pos:column="46">scanIntervalMs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="140" pos:column="13">Assert</name><op:operator pos:line="140" pos:column="19">.</op:operator><name pos:line="140" pos:column="20">IsTrue</name></name><argument_list pos:line="140" pos:column="26">(<argument><expr><call><name><name pos:line="140" pos:column="27">resetEvent</name><op:operator pos:line="140" pos:column="37">.</op:operator><name pos:line="140" pos:column="38">WaitOne</name></name><argument_list pos:line="140" pos:column="45">(<argument><expr><name pos:line="140" pos:column="46">scanIntervalMs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <foreach pos:line="142" pos:column="13">foreach(<init><decl><type><name pos:line="142" pos:column="21">var</name></type> <name pos:line="142" pos:column="25">expectedFile</name> <range pos:line="142" pos:column="38">in <expr><name pos:line="142" pos:column="41">expectedFiles</name></expr></range></decl></init>) <block pos:line="142" pos:column="56">{
                <expr_stmt><expr><call><name><name pos:line="143" pos:column="17">Assert</name><op:operator pos:line="143" pos:column="23">.</op:operator><name pos:line="143" pos:column="24">IsTrue</name></name><argument_list pos:line="143" pos:column="30">(<argument><expr><call><name><name pos:line="143" pos:column="31">File</name><op:operator pos:line="143" pos:column="35">.</op:operator><name pos:line="143" pos:column="36">Exists</name></name><argument_list pos:line="143" pos:column="42">(<argument><expr><name pos:line="143" pos:column="43">expectedFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="144" pos:column="17">Assert</name><op:operator pos:line="144" pos:column="23">.</op:operator><name pos:line="144" pos:column="24">IsTrue</name></name><argument_list pos:line="144" pos:column="30">(<argument><expr><call><name><name pos:line="144" pos:column="31">archive</name><op:operator pos:line="144" pos:column="38">.</op:operator><name pos:line="144" pos:column="39">ContainsFile</name></name><argument_list pos:line="144" pos:column="51">(<argument><expr><name pos:line="144" pos:column="52">expectedFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="145" pos:column="17">Assert</name><op:operator pos:line="145" pos:column="23">.</op:operator><name pos:line="145" pos:column="24">IsFalse</name></name><argument_list pos:line="145" pos:column="31">(<argument><expr><call><name><name pos:line="145" pos:column="32">archive</name><op:operator pos:line="145" pos:column="39">.</op:operator><name pos:line="145" pos:column="40">IsOutdated</name></name><argument_list pos:line="145" pos:column="50">(<argument><expr><name pos:line="145" pos:column="51">expectedFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>

            <comment type="line" pos:line="148" pos:column="13">// remove the project</comment>
            <expr_stmt><expr><name pos:line="149" pos:column="13">expectedEventType</name> <op:operator pos:line="149" pos:column="31">=</op:operator> <name><name pos:line="149" pos:column="33">FileEventType</name><op:operator pos:line="149" pos:column="46">.</op:operator><name pos:line="149" pos:column="47">FileDeleted</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="150" pos:column="13">TestSolution</name><op:operator pos:line="150" pos:column="25">.</op:operator><name pos:line="150" pos:column="26">Remove</name></name><argument_list pos:line="150" pos:column="32">(<argument><expr><name pos:line="150" pos:column="33">addedProject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <foreach pos:line="152" pos:column="13">foreach(<init><decl><type><name pos:line="152" pos:column="21">var</name></type> <name pos:line="152" pos:column="25">expectedFile</name> <range pos:line="152" pos:column="38">in <expr><name pos:line="152" pos:column="41">expectedFiles</name></expr></range></decl></init>) <block pos:line="152" pos:column="56">{
                <expr_stmt><expr><call><name><name pos:line="153" pos:column="17">File</name><op:operator pos:line="153" pos:column="21">.</op:operator><name pos:line="153" pos:column="22">Delete</name></name><argument_list pos:line="153" pos:column="28">(<argument><expr><name pos:line="153" pos:column="29">expectedFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="154" pos:column="17">Assert</name><op:operator pos:line="154" pos:column="23">.</op:operator><name pos:line="154" pos:column="24">IsTrue</name></name><argument_list pos:line="154" pos:column="30">(<argument><expr><call><name><name pos:line="154" pos:column="31">resetEvent</name><op:operator pos:line="154" pos:column="41">.</op:operator><name pos:line="154" pos:column="42">WaitOne</name></name><argument_list pos:line="154" pos:column="49">(<argument><expr><name pos:line="154" pos:column="50">scanIntervalMs</name> <op:operator pos:line="154" pos:column="65">*</op:operator> <lit:literal type="number" pos:line="154" pos:column="67">2</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="155" pos:column="17">Assert</name><op:operator pos:line="155" pos:column="23">.</op:operator><name pos:line="155" pos:column="24">IsFalse</name></name><argument_list pos:line="155" pos:column="31">(<argument><expr><call><name><name pos:line="155" pos:column="32">archive</name><op:operator pos:line="155" pos:column="39">.</op:operator><name pos:line="155" pos:column="40">ContainsFile</name></name><argument_list pos:line="155" pos:column="52">(<argument><expr><name pos:line="155" pos:column="53">expectedFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>

            <expr_stmt><expr><name><name pos:line="158" pos:column="13">TestHelpers</name><op:operator pos:line="158" pos:column="24">.</op:operator><name pos:line="158" pos:column="25">TestScaffold</name><op:operator pos:line="158" pos:column="37">.</op:operator><name pos:line="158" pos:column="38">Service</name><op:operator pos:line="158" pos:column="45">.</op:operator><name pos:line="158" pos:column="46">SourceFileChanged</name></name> <op:operator pos:line="158" pos:column="64">-=</op:operator> <name pos:line="158" pos:column="67">action</name></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="161" pos:column="9">[<expr><name pos:line="161" pos:column="10">TestMethod</name></expr>]</attribute>
        <attribute pos:line="162" pos:column="9">[<expr><call><name pos:line="162" pos:column="10">HostType</name><argument_list pos:line="162" pos:column="18">(<argument><expr><lit:literal type="string" pos:line="162" pos:column="19">"VS IDE"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="163" pos:column="9">public</specifier> <name pos:line="163" pos:column="16">void</name></type> <name pos:line="163" pos:column="21">TestCppServiceStartup</name><parameter_list pos:line="163" pos:column="42">()</parameter_list> <block pos:line="163" pos:column="45">{
            <comment type="line" pos:line="164" pos:column="13">//Console.WriteLine(Path.GetFullPath(TestSolutionPath));</comment>
            <comment type="line" pos:line="165" pos:column="13">//Assert.IsTrue(TestHelpers.WaitForServiceToFinish(TestHelpers.TestScaffold.Service, 5000));</comment>
            <decl_stmt><decl><type><name pos:line="166" pos:column="13">var</name></type> <name pos:line="166" pos:column="17">archive</name> <init pos:line="166" pos:column="25">= <expr><name><name pos:line="166" pos:column="27">TestHelpers</name><op:operator pos:line="166" pos:column="38">.</op:operator><name pos:line="166" pos:column="39">TestScaffold</name><op:operator pos:line="166" pos:column="51">.</op:operator><name pos:line="166" pos:column="52">Service</name><op:operator pos:line="166" pos:column="59">.</op:operator><name pos:line="166" pos:column="60">CurrentSrcMLArchive</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="167" pos:column="13">Assert</name><op:operator pos:line="167" pos:column="19">.</op:operator><name pos:line="167" pos:column="20">IsNotNull</name></name><argument_list pos:line="167" pos:column="29">(<argument><expr><name pos:line="167" pos:column="30">archive</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="167" pos:column="39">"Could not get the SrcML Archive"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="168" pos:column="13">Assert</name><op:operator pos:line="168" pos:column="19">.</op:operator><name pos:line="168" pos:column="20">AreEqual</name></name><argument_list pos:line="168" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="168" pos:column="29">4</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="168" pos:column="32">archive</name><op:operator pos:line="168" pos:column="39">.</op:operator><name pos:line="168" pos:column="40">FileUnits</name><op:operator pos:line="168" pos:column="49">.</op:operator><name pos:line="168" pos:column="50">Count</name></name><argument_list pos:line="168" pos:column="55">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="168" pos:column="59">"There should only be four files in the srcML archive"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="171" pos:column="9">[<expr><name pos:line="171" pos:column="10">TestInitialize</name></expr>]</attribute>
        <specifier pos:line="172" pos:column="9">public</specifier> <name pos:line="172" pos:column="16">void</name></type> <name pos:line="172" pos:column="21">Setup</name><parameter_list pos:line="172" pos:column="26">()</parameter_list> <block pos:line="172" pos:column="29">{
            <expr_stmt><expr><name pos:line="173" pos:column="13">TestSolution</name> <op:operator pos:line="173" pos:column="26">=</op:operator> <name><name pos:line="173" pos:column="28">VsIdeTestHostContext</name><op:operator pos:line="173" pos:column="48">.</op:operator><name pos:line="173" pos:column="49">Dte</name><op:operator pos:line="173" pos:column="52">.</op:operator><name pos:line="173" pos:column="53">Solution</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="174" pos:column="13">Assert</name><op:operator pos:line="174" pos:column="19">.</op:operator><name pos:line="174" pos:column="20">IsNotNull</name></name><argument_list pos:line="174" pos:column="29">(<argument><expr><name pos:line="174" pos:column="30">TestSolution</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="174" pos:column="44">"Could not get the solution"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="176" pos:column="13">TestSolution</name><op:operator pos:line="176" pos:column="25">.</op:operator><name pos:line="176" pos:column="26">Open</name></name><argument_list pos:line="176" pos:column="30">(<argument><expr><call><name><name pos:line="176" pos:column="31">Path</name><op:operator pos:line="176" pos:column="35">.</op:operator><name pos:line="176" pos:column="36">GetFullPath</name></name><argument_list pos:line="176" pos:column="47">(<argument><expr><name pos:line="176" pos:column="48">TestSolutionPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="177" pos:column="13">Assert</name><op:operator pos:line="177" pos:column="19">.</op:operator><name pos:line="177" pos:column="20">IsTrue</name></name><argument_list pos:line="177" pos:column="26">(<argument><expr><call><name><name pos:line="177" pos:column="27">TestHelpers</name><op:operator pos:line="177" pos:column="38">.</op:operator><name pos:line="177" pos:column="39">WaitForServiceToFinish</name></name><argument_list pos:line="177" pos:column="61">(<argument><expr><name><name pos:line="177" pos:column="62">TestHelpers</name><op:operator pos:line="177" pos:column="73">.</op:operator><name pos:line="177" pos:column="74">TestScaffold</name><op:operator pos:line="177" pos:column="86">.</op:operator><name pos:line="177" pos:column="87">Service</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="177" pos:column="96">5000</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="180" pos:column="9">[<expr><name pos:line="180" pos:column="10">TestCleanup</name></expr>]</attribute>
        <specifier pos:line="181" pos:column="9">public</specifier> <name pos:line="181" pos:column="16">void</name></type> <name pos:line="181" pos:column="21">Cleanup</name><parameter_list pos:line="181" pos:column="28">()</parameter_list> <block pos:line="181" pos:column="31">{
            <expr_stmt><expr><call><name><name pos:line="182" pos:column="13">TestHelpers</name><op:operator pos:line="182" pos:column="24">.</op:operator><name pos:line="182" pos:column="25">TestScaffold</name><op:operator pos:line="182" pos:column="37">.</op:operator><name pos:line="182" pos:column="38">Service</name><op:operator pos:line="182" pos:column="45">.</op:operator><name pos:line="182" pos:column="46">StopMonitoring</name></name><argument_list pos:line="182" pos:column="60">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="183" pos:column="13">TestSolution</name><op:operator pos:line="183" pos:column="25">.</op:operator><name pos:line="183" pos:column="26">Close</name></name><argument_list pos:line="183" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
