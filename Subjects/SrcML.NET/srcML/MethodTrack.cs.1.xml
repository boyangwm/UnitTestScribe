<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\VisualStudio\ABB.SrcML.VisualStudio.SrcMLService\MethodTrack.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2015 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Xiao Qu (ABB Group) - Initial implementation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">System</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Collections</name><op:operator pos:line="13" pos:column="25">.</op:operator><name pos:line="13" pos:column="26">Generic</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">ComponentModel</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Linq</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">ABB</name><op:operator pos:line="16" pos:column="10">.</op:operator><name pos:line="16" pos:column="11">SrcML</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">ABB</name><op:operator pos:line="17" pos:column="10">.</op:operator><name pos:line="17" pos:column="11">SrcML</name><op:operator pos:line="17" pos:column="16">.</op:operator><name pos:line="17" pos:column="17">Data</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">ABB</name><op:operator pos:line="18" pos:column="10">.</op:operator><name pos:line="18" pos:column="11">SrcML</name><op:operator pos:line="18" pos:column="16">.</op:operator><name pos:line="18" pos:column="17">VisualStudio</name></name>;</using>

<namespace pos:line="20" pos:column="1">namespace <name><name pos:line="20" pos:column="11">ABB</name><op:operator pos:line="20" pos:column="14">.</op:operator><name pos:line="20" pos:column="15">VisualStudio</name></name>
<block pos:line="21" pos:column="1">{
    <comment type="line" pos:line="22" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="23" pos:column="5">/// current cursor position defined by (filename, line number, column number)</comment>
    <comment type="line" pos:line="24" pos:column="5">/// &lt;/summary&gt;</comment>
    <struct><specifier pos:line="25" pos:column="5">public</specifier> struct <name pos:line="25" pos:column="19">CursorPos</name>
    <block pos:line="26" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="27" pos:column="9">public</specifier> <name pos:line="27" pos:column="16">string</name></type> <name pos:line="27" pos:column="23">_file</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="28" pos:column="9">public</specifier> <name pos:line="28" pos:column="16">int</name></type> <name pos:line="28" pos:column="20">_line</name></decl><op:operator pos:line="28" pos:column="25">,</op:operator> <decl><type ref="prev"/><name pos:line="28" pos:column="27">_col</name></decl>;</decl_stmt>

        <comment type="line" pos:line="30" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="31" pos:column="9">/// constructing a cursor position </comment>
        <comment type="line" pos:line="32" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="33" pos:column="9">/// &lt;param name="file"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="34" pos:column="9">/// &lt;param name="line"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="35" pos:column="9">/// &lt;param name="col"&gt;&lt;/param&gt;</comment>
        <constructor><specifier pos:line="36" pos:column="9">public</specifier> <name pos:line="36" pos:column="16">CursorPos</name><parameter_list pos:line="36" pos:column="25">(<param><decl><type><name pos:line="36" pos:column="26">string</name></type> <name pos:line="36" pos:column="33">file</name></decl></param>, <param><decl><type><name pos:line="36" pos:column="39">int</name></type> <name pos:line="36" pos:column="43">line</name></decl></param>, <param><decl><type><name pos:line="36" pos:column="49">int</name></type> <name pos:line="36" pos:column="53">col</name></decl></param>)</parameter_list>
        <block pos:line="37" pos:column="9">{
            <expr_stmt><expr><name pos:line="38" pos:column="13">_file</name> <op:operator pos:line="38" pos:column="19">=</op:operator> <name pos:line="38" pos:column="21">file</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="39" pos:column="13">_line</name> <op:operator pos:line="39" pos:column="19">=</op:operator> <name pos:line="39" pos:column="21">line</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="40" pos:column="13">_col</name> <op:operator pos:line="40" pos:column="18">=</op:operator> <name pos:line="40" pos:column="20">col</name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="43" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="44" pos:column="9">/// set curosr position</comment>
        <comment type="line" pos:line="45" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="46" pos:column="9">/// &lt;param name="file"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="47" pos:column="9">/// &lt;param name="line"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="48" pos:column="9">/// &lt;param name="col"&gt;&lt;/param&gt;</comment>
        <function><type><specifier pos:line="49" pos:column="9">public</specifier> <name pos:line="49" pos:column="16">void</name></type> <name pos:line="49" pos:column="21">SetCursurPos</name><parameter_list pos:line="49" pos:column="33">(<param><decl><type><name pos:line="49" pos:column="34">string</name></type> <name pos:line="49" pos:column="41">file</name></decl></param>, <param><decl><type><name pos:line="49" pos:column="47">int</name></type> <name pos:line="49" pos:column="51">line</name></decl></param>, <param><decl><type><name pos:line="49" pos:column="57">int</name></type> <name pos:line="49" pos:column="61">col</name></decl></param>)</parameter_list>
        <block pos:line="50" pos:column="9">{
            <expr_stmt><expr><name pos:line="51" pos:column="13">_file</name> <op:operator pos:line="51" pos:column="19">=</op:operator> <name pos:line="51" pos:column="21">file</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="52" pos:column="13">_line</name> <op:operator pos:line="52" pos:column="19">=</op:operator> <name pos:line="52" pos:column="21">line</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="53" pos:column="13">_col</name> <op:operator pos:line="53" pos:column="18">=</op:operator> <name pos:line="53" pos:column="20">col</name></expr>;</expr_stmt>
        }</block></function>
    }</block></struct>

    <class pos:line="57" pos:column="5">class <name pos:line="57" pos:column="11">MethodTrack</name><super pos:line="57" pos:column="22">: <name pos:line="57" pos:column="24">IMethodTrackService</name>, <name pos:line="57" pos:column="45">SMethodTrackService</name></super><block pos:line="57" pos:column="64">{
        
        <decl_stmt><decl><type><specifier pos:line="59" pos:column="9">private</specifier> <name pos:line="59" pos:column="17">IServiceProvider</name></type> <name pos:line="59" pos:column="34">_serviceProvider</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="61" pos:column="9">private</specifier> <name pos:line="61" pos:column="17">ISrcMLDataService</name></type> <name pos:line="61" pos:column="35">_dataService</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="63" pos:column="9">private</specifier> <name pos:line="63" pos:column="17">ISrcMLGlobalService</name></type> <name pos:line="63" pos:column="37">_srcmlService</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="65" pos:column="9">private</specifier> <name pos:line="65" pos:column="17">ICursorMonitorService</name></type> <name pos:line="65" pos:column="39">_cursorMonitor</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="67" pos:column="9">public</specifier> <specifier pos:line="67" pos:column="16">event</specifier> <name><name pos:line="67" pos:column="22">EventHandler</name><argument_list pos:line="67" pos:column="34">&lt;<argument><name pos:line="67" pos:column="35">MethodEventRaisedArgs</name></argument>&gt;</argument_list></name></type> <name pos:line="67" pos:column="58">MethodUpdatedEvent</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="69" pos:column="9">private</specifier> <name pos:line="69" pos:column="17">CursorPos</name></type> <name pos:line="69" pos:column="27">_currentCursor</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="70" pos:column="9">private</specifier> <name pos:line="70" pos:column="17">Method</name></type> <name pos:line="70" pos:column="24">_currentMethod</name></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><specifier pos:line="72" pos:column="9">private</specifier> <name><name pos:line="72" pos:column="17">List</name><argument_list pos:line="72" pos:column="21">&lt;<argument><name pos:line="72" pos:column="22">Method</name></argument>&gt;</argument_list></name></type> <name pos:line="72" pos:column="30">_navigatedMethods</name></decl>;</decl_stmt> 
        
        <decl_stmt><decl><type><specifier pos:line="74" pos:column="9">public</specifier> <name pos:line="74" pos:column="16">Method</name></type> <name pos:line="74" pos:column="23">CurrentMethod</name>
        <block pos:line="75" pos:column="9">{
            <function><name pos:line="76" pos:column="13">get</name> <block pos:line="76" pos:column="17">{ <return pos:line="76" pos:column="19">return <expr><name pos:line="76" pos:column="26">_currentMethod</name></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="79" pos:column="9">public</specifier> <name pos:line="79" pos:column="16">int</name></type> <name pos:line="79" pos:column="20">CurrentLineNumber</name>
        <block pos:line="80" pos:column="9">{
            <function><name pos:line="81" pos:column="13">get</name> <block pos:line="81" pos:column="17">{ <return pos:line="81" pos:column="19">return <expr><name><name pos:line="81" pos:column="26">_currentCursor</name><op:operator pos:line="81" pos:column="40">.</op:operator><name pos:line="81" pos:column="41">_line</name></name></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="84" pos:column="9">public</specifier> <name pos:line="84" pos:column="16">int</name></type> <name pos:line="84" pos:column="20">CurrentColumnNumber</name>
        <block pos:line="85" pos:column="9">{
            <function><name pos:line="86" pos:column="13">get</name> <block pos:line="86" pos:column="17">{ <return pos:line="86" pos:column="19">return <expr><name><name pos:line="86" pos:column="26">_currentCursor</name><op:operator pos:line="86" pos:column="40">.</op:operator><name pos:line="86" pos:column="41">_col</name></name></expr>;</return>  }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="89" pos:column="9">public</specifier> <name><name pos:line="89" pos:column="16">List</name><argument_list pos:line="89" pos:column="20">&lt;<argument><name pos:line="89" pos:column="21">Method</name></argument>&gt;</argument_list></name></type> <name pos:line="89" pos:column="29">NavigatedMethods</name>
        <block pos:line="90" pos:column="9">{
            <function><name pos:line="91" pos:column="13">get</name> <block pos:line="91" pos:column="17">{ <return pos:line="91" pos:column="19">return <expr><name pos:line="91" pos:column="26">_navigatedMethods</name></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

       <constructor><specifier pos:line="94" pos:column="8">public</specifier> <name pos:line="94" pos:column="15">MethodTrack</name><parameter_list pos:line="94" pos:column="26">(<param><decl><type><name pos:line="94" pos:column="27">IServiceProvider</name></type> <name pos:line="94" pos:column="44">sp</name></decl></param>)</parameter_list>
       <block pos:line="95" pos:column="8">{
           <expr_stmt><expr><name pos:line="96" pos:column="12">_serviceProvider</name> <op:operator pos:line="96" pos:column="29">=</op:operator> <name pos:line="96" pos:column="31">sp</name></expr>;</expr_stmt>
           <expr_stmt><expr><name pos:line="97" pos:column="12">_dataService</name> <op:operator pos:line="97" pos:column="25">=</op:operator> <call><name><name pos:line="97" pos:column="27">sp</name><op:operator pos:line="97" pos:column="29">.</op:operator><name pos:line="97" pos:column="30">GetService</name></name><argument_list pos:line="97" pos:column="40">(<argument><expr><call><name pos:line="97" pos:column="41">typeof</name><argument_list pos:line="97" pos:column="47">(<argument><expr><name pos:line="97" pos:column="48">SSrcMLDataService</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="97" pos:column="68">as</op:operator> <name pos:line="97" pos:column="71">ISrcMLDataService</name></expr>;</expr_stmt>
           <expr_stmt><expr><name pos:line="98" pos:column="12">_srcmlService</name> <op:operator pos:line="98" pos:column="26">=</op:operator> <call><name><name pos:line="98" pos:column="28">sp</name><op:operator pos:line="98" pos:column="30">.</op:operator><name pos:line="98" pos:column="31">GetService</name></name><argument_list pos:line="98" pos:column="41">(<argument><expr><call><name pos:line="98" pos:column="42">typeof</name><argument_list pos:line="98" pos:column="48">(<argument><expr><name pos:line="98" pos:column="49">SSrcMLGlobalService</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="98" pos:column="71">as</op:operator> <name pos:line="98" pos:column="74">ISrcMLGlobalService</name></expr>;</expr_stmt>
           <expr_stmt><expr><name pos:line="99" pos:column="12">_cursorMonitor</name> <op:operator pos:line="99" pos:column="27">=</op:operator> <call><name><name pos:line="99" pos:column="29">sp</name><op:operator pos:line="99" pos:column="31">.</op:operator><name pos:line="99" pos:column="32">GetService</name></name><argument_list pos:line="99" pos:column="42">(<argument><expr><call><name pos:line="99" pos:column="43">typeof</name><argument_list pos:line="99" pos:column="49">(<argument><expr><name pos:line="99" pos:column="50">SCursorMonitorService</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="99" pos:column="74">as</op:operator> <name pos:line="99" pos:column="77">ICursorMonitorService</name></expr>;</expr_stmt>
           <expr_stmt><expr><name pos:line="100" pos:column="12">_currentMethod</name> <op:operator pos:line="100" pos:column="27">=</op:operator> <op:operator pos:line="100" pos:column="29">new</op:operator> <call><name pos:line="100" pos:column="33">Method</name><argument_list pos:line="100" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><name pos:line="101" pos:column="12">_navigatedMethods</name> <op:operator pos:line="101" pos:column="30">=</op:operator> <op:operator pos:line="101" pos:column="32">new</op:operator> <call><name><name pos:line="101" pos:column="36">List</name><argument_list pos:line="101" pos:column="40">&lt;<argument><name pos:line="101" pos:column="41">Method</name></argument>&gt;</argument_list></name><argument_list pos:line="101" pos:column="48">()</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><name pos:line="102" pos:column="12">_currentCursor</name> <op:operator pos:line="102" pos:column="27">=</op:operator> <op:operator pos:line="102" pos:column="29">new</op:operator> <call><name pos:line="102" pos:column="33">CursorPos</name><argument_list pos:line="102" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="102" pos:column="43">""</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="102" pos:column="47">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="102" pos:column="50">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          
           <if pos:line="104" pos:column="12">if <condition pos:line="104" pos:column="15">(<expr><name pos:line="104" pos:column="16">null</name> <op:operator pos:line="104" pos:column="21">!=</op:operator> <name pos:line="104" pos:column="24">_cursorMonitor</name></expr>)</condition><then pos:line="104" pos:column="39">
               <expr_stmt><expr><name><name pos:line="105" pos:column="16">_cursorMonitor</name><op:operator pos:line="105" pos:column="30">.</op:operator><name pos:line="105" pos:column="31">PropertyChanged</name></name> <op:operator pos:line="105" pos:column="47">+=</op:operator> <name pos:line="105" pos:column="50">OnCursorMoving</name></expr>;</expr_stmt></then></if>
           <if pos:line="106" pos:column="12">if<condition pos:line="106" pos:column="14">(<expr><name pos:line="106" pos:column="15">null</name> <op:operator pos:line="106" pos:column="20">!=</op:operator> <name pos:line="106" pos:column="23">_srcmlService</name></expr>)</condition><then pos:line="106" pos:column="37">
                <expr_stmt><expr><name><name pos:line="107" pos:column="17">_srcmlService</name><op:operator pos:line="107" pos:column="30">.</op:operator><name pos:line="107" pos:column="31">SourceFileChanged</name></name> <op:operator pos:line="107" pos:column="49">+=</op:operator> <name pos:line="107" pos:column="52">OnFileChanged</name></expr>;</expr_stmt></then></if>
        }</block></constructor>

     
       <comment type="line" pos:line="111" pos:column="8">/// &lt;summary&gt;</comment>
       <comment type="line" pos:line="112" pos:column="8">/// Get a method object from (file, line number, column number)</comment>
       <comment type="line" pos:line="113" pos:column="8">/// &lt;/summary&gt;</comment>
       <comment type="line" pos:line="114" pos:column="8">/// &lt;param name="fileName"&gt;&lt;/param&gt;</comment>
       <comment type="line" pos:line="115" pos:column="8">/// &lt;param name="lineNum"&gt;&lt;/param&gt;</comment>
       <comment type="line" pos:line="116" pos:column="8">/// &lt;param name="colNum"&gt;&lt;/param&gt;</comment>
       <comment type="line" pos:line="117" pos:column="8">/// &lt;returns&gt;if the cursor is in a method, return true; otherwise return false&lt;/returns&gt;</comment>
       <function><type><specifier pos:line="118" pos:column="8">private</specifier> <name pos:line="118" pos:column="16">bool</name></type> <name pos:line="118" pos:column="21">GetMethod</name><parameter_list pos:line="118" pos:column="30">(<param><decl><type><name pos:line="118" pos:column="31">string</name></type> <name pos:line="118" pos:column="38">fileName</name></decl></param>, <param><decl><type><name pos:line="118" pos:column="48">int</name></type> <name pos:line="118" pos:column="52">lineNum</name></decl></param>, <param><decl><type><name pos:line="118" pos:column="61">int</name></type> <name pos:line="118" pos:column="65">colNum</name></decl></param>)</parameter_list>
       <block pos:line="119" pos:column="8">{
           <decl_stmt><decl><type><name pos:line="120" pos:column="12">bool</name></type> <name pos:line="120" pos:column="17">isInMethod</name> <init pos:line="120" pos:column="28">= <expr><lit:literal type="boolean" pos:line="120" pos:column="30">false</lit:literal></expr></init></decl>;</decl_stmt>

           <if pos:line="122" pos:column="12">if <condition pos:line="122" pos:column="15">(<expr><name pos:line="122" pos:column="16">null</name> <op:operator pos:line="122" pos:column="21">==</op:operator> <name pos:line="122" pos:column="24">_dataService</name></expr>)</condition><then pos:line="122" pos:column="37">
               <return pos:line="123" pos:column="16">return <expr><lit:literal type="boolean" pos:line="123" pos:column="23">false</lit:literal></expr>;</return></then></if>
             
           <decl_stmt><decl><type><name pos:line="125" pos:column="12">var</name></type> <name pos:line="125" pos:column="16">data</name> <init pos:line="125" pos:column="21">= <expr><call><name><name pos:line="125" pos:column="23">_dataService</name><op:operator pos:line="125" pos:column="35">.</op:operator><name pos:line="125" pos:column="36">CurrentDataArchive</name><op:operator pos:line="125" pos:column="54">.</op:operator><name pos:line="125" pos:column="55">GetData</name></name><argument_list pos:line="125" pos:column="62">(<argument><expr><name pos:line="125" pos:column="63">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
           
           <if pos:line="127" pos:column="12">if <condition pos:line="127" pos:column="15">(<expr><name pos:line="127" pos:column="16">null</name> <op:operator pos:line="127" pos:column="21">!=</op:operator> <name pos:line="127" pos:column="24">data</name></expr>)</condition><then pos:line="127" pos:column="29">
           <block pos:line="128" pos:column="12">{
               <decl_stmt><decl><type><name pos:line="129" pos:column="16">var</name></type> <name pos:line="129" pos:column="20">methods</name> <init pos:line="129" pos:column="28">= <expr><call><name><name pos:line="129" pos:column="30">data</name><op:operator pos:line="129" pos:column="34">.</op:operator><name><name pos:line="129" pos:column="35">GetDescendants</name><argument_list pos:line="129" pos:column="49">&lt;<argument><name pos:line="129" pos:column="50">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="129" pos:column="67">()</argument_list></call></expr></init></decl>;</decl_stmt>
               <foreach pos:line="130" pos:column="16">foreach (<init><decl><type><name pos:line="130" pos:column="25">var</name></type> <name pos:line="130" pos:column="29">methoddef</name> <range pos:line="130" pos:column="39">in <expr><name pos:line="130" pos:column="42">methods</name></expr></range></decl></init>)
               <block pos:line="131" pos:column="16">{
                   <decl_stmt><decl><type><name pos:line="132" pos:column="20">SourceLocation</name></type> <name pos:line="132" pos:column="35">cursorPos</name> <init pos:line="132" pos:column="45">= <expr><op:operator pos:line="132" pos:column="47">new</op:operator> <call><name pos:line="132" pos:column="51">SourceLocation</name><argument_list pos:line="132" pos:column="65">(<argument><expr><name pos:line="132" pos:column="66">fileName</name></expr></argument>, <argument><expr><name pos:line="132" pos:column="76">lineNum</name></expr></argument>, <argument><expr><name pos:line="132" pos:column="85">colNum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                   <if pos:line="133" pos:column="20">if <condition pos:line="133" pos:column="23">(<expr><call><name><name pos:line="133" pos:column="24">methoddef</name><op:operator pos:line="133" pos:column="33">.</op:operator><name pos:line="133" pos:column="34">ContainsLocation</name></name><argument_list pos:line="133" pos:column="50">(<argument><expr><name pos:line="133" pos:column="51">cursorPos</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="133" pos:column="62">
                   <block pos:line="134" pos:column="20">{
                       <expr_stmt><expr><name pos:line="135" pos:column="24">isInMethod</name> <op:operator pos:line="135" pos:column="35">=</op:operator> <lit:literal type="boolean" pos:line="135" pos:column="37">true</lit:literal></expr>;</expr_stmt>
                       <expr_stmt><expr><name pos:line="136" pos:column="24">_currentMethod</name> <op:operator pos:line="136" pos:column="39">=</op:operator> <op:operator pos:line="136" pos:column="41">new</op:operator> <call><name pos:line="136" pos:column="45">Method</name><argument_list pos:line="136" pos:column="51">(<argument><expr><name pos:line="136" pos:column="52">methoddef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                       <break pos:line="137" pos:column="24">break;</break>
                       <comment type="line" pos:line="138" pos:column="24">//assert(outMethod.filePath.equals(fileName))</comment>
                   }</block></then></if>
               }</block></foreach>
           }</block></then></if>

           <return pos:line="143" pos:column="12">return <expr><name pos:line="143" pos:column="19">isInMethod</name></expr>;</return>
       }</block></function>

        <comment type="line" pos:line="146" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="147" pos:column="9">/// Get all methods in a source file</comment>
        <comment type="line" pos:line="148" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="149" pos:column="9">/// &lt;param name="fileName"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="150" pos:column="9">/// &lt;param name="allMethods"&gt;&lt;/param&gt;</comment>
        <function><type><specifier pos:line="151" pos:column="9">private</specifier> <name pos:line="151" pos:column="17">void</name></type> <name pos:line="151" pos:column="22">GetAllMethods</name><parameter_list pos:line="151" pos:column="35">(<param><decl><type><name pos:line="151" pos:column="36">string</name></type> <name pos:line="151" pos:column="43">fileName</name></decl></param>, <param><decl><type><specifier pos:line="151" pos:column="53">out</specifier> <name><name pos:line="151" pos:column="57">List</name><argument_list pos:line="151" pos:column="61">&lt;<argument><name pos:line="151" pos:column="62">Method</name></argument>&gt;</argument_list></name></type> <name pos:line="151" pos:column="70">allMethods</name></decl></param>)</parameter_list>
        <block pos:line="152" pos:column="9">{
            <expr_stmt><expr><name pos:line="153" pos:column="13">allMethods</name> <op:operator pos:line="153" pos:column="24">=</op:operator> <op:operator pos:line="153" pos:column="26">new</op:operator> <call><name><name pos:line="153" pos:column="30">List</name><argument_list pos:line="153" pos:column="34">&lt;<argument><name pos:line="153" pos:column="35">Method</name></argument>&gt;</argument_list></name><argument_list pos:line="153" pos:column="42">()</argument_list></call></expr>;</expr_stmt>

            <if pos:line="155" pos:column="13">if <condition pos:line="155" pos:column="16">(<expr><name pos:line="155" pos:column="17">null</name> <op:operator pos:line="155" pos:column="22">==</op:operator> <name pos:line="155" pos:column="25">_dataService</name></expr>)</condition><then pos:line="155" pos:column="38">
                <return pos:line="156" pos:column="17">return;</return></then></if>

            <decl_stmt><decl><type><name pos:line="158" pos:column="13">var</name></type> <name pos:line="158" pos:column="17">data</name> <init pos:line="158" pos:column="22">= <expr><call><name><name pos:line="158" pos:column="24">_dataService</name><op:operator pos:line="158" pos:column="36">.</op:operator><name pos:line="158" pos:column="37">CurrentDataArchive</name><op:operator pos:line="158" pos:column="55">.</op:operator><name pos:line="158" pos:column="56">GetData</name></name><argument_list pos:line="158" pos:column="63">(<argument><expr><name pos:line="158" pos:column="64">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if pos:line="160" pos:column="13">if <condition pos:line="160" pos:column="16">(<expr><name pos:line="160" pos:column="17">null</name> <op:operator pos:line="160" pos:column="22">!=</op:operator> <name pos:line="160" pos:column="25">data</name></expr>)</condition><then pos:line="160" pos:column="30">
            <block pos:line="161" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="162" pos:column="17">var</name></type> <name pos:line="162" pos:column="21">methods</name> <init pos:line="162" pos:column="29">= <expr><call><name><name pos:line="162" pos:column="31">data</name><op:operator pos:line="162" pos:column="35">.</op:operator><name><name pos:line="162" pos:column="36">GetDescendants</name><argument_list pos:line="162" pos:column="50">&lt;<argument><name pos:line="162" pos:column="51">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="162" pos:column="68">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="163" pos:column="17">allMethods</name><op:operator pos:line="163" pos:column="27">.</op:operator><name pos:line="163" pos:column="28">AddRange</name></name><argument_list pos:line="163" pos:column="36">(<argument><expr><call><name><name pos:line="163" pos:column="37">methods</name><op:operator pos:line="163" pos:column="44">.</op:operator><name pos:line="163" pos:column="45">Select</name></name><argument_list pos:line="163" pos:column="51">(<argument><expr><lambda><name pos:line="163" pos:column="52">methoddef</name> <op:operator pos:line="163" pos:column="62">=&gt;</op:operator> <op:operator pos:line="163" pos:column="65">new</op:operator> <call><name pos:line="163" pos:column="69">Method</name><argument_list pos:line="163" pos:column="75">(<argument><expr><name pos:line="163" pos:column="76">methoddef</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>
        
       <cpp:region pos:line="167" pos:column="8">#<cpp:directive pos:line="167" pos:column="9">region</cpp:directive> cursor moving</cpp:region>
       <function><type><specifier pos:line="168" pos:column="8">internal</specifier> <name pos:line="168" pos:column="17">void</name></type> <name pos:line="168" pos:column="22">OnCursorMoving</name><parameter_list pos:line="168" pos:column="36">(<param><decl><type><name pos:line="168" pos:column="37">object</name></type> <name pos:line="168" pos:column="44">sender</name></decl></param>, <param><decl><type><name pos:line="168" pos:column="52">PropertyChangedEventArgs</name></type> <name pos:line="168" pos:column="77">e</name></decl></param>)</parameter_list>
       <block pos:line="169" pos:column="8">{
           <decl_stmt><decl><type><name pos:line="170" pos:column="12">var</name></type> <name pos:line="170" pos:column="16">cursorMonitor</name> <init pos:line="170" pos:column="30">= <expr><op:operator pos:line="170" pos:column="32">(</op:operator><name pos:line="170" pos:column="33">sender</name> <op:operator pos:line="170" pos:column="40">as</op:operator> <name pos:line="170" pos:column="43">CursorMonitor</name><op:operator pos:line="170" pos:column="56">)</op:operator></expr></init></decl>;</decl_stmt>
           <if pos:line="171" pos:column="12">if <condition pos:line="171" pos:column="15">(<expr><name pos:line="171" pos:column="16">null</name> <op:operator pos:line="171" pos:column="21">!=</op:operator> <name pos:line="171" pos:column="24">cursorMonitor</name></expr>)</condition><then pos:line="171" pos:column="38">
           <block pos:line="172" pos:column="12">{
               <decl_stmt><decl><type><name pos:line="173" pos:column="16">int</name></type> <name pos:line="173" pos:column="20">curLine</name> <init pos:line="173" pos:column="28">= <expr><name><name pos:line="173" pos:column="30">cursorMonitor</name><op:operator pos:line="173" pos:column="43">.</op:operator><name pos:line="173" pos:column="44">CurrentLineNumber</name></name></expr></init></decl>;</decl_stmt>
               <decl_stmt><decl><type><name pos:line="174" pos:column="16">int</name></type> <name pos:line="174" pos:column="20">curColumn</name> <init pos:line="174" pos:column="30">= <expr><name><name pos:line="174" pos:column="32">cursorMonitor</name><op:operator pos:line="174" pos:column="45">.</op:operator><name pos:line="174" pos:column="46">CurrentColumnNumber</name></name></expr></init></decl>;</decl_stmt>
               <decl_stmt><decl><type><name pos:line="175" pos:column="16">string</name></type> <name pos:line="175" pos:column="23">fileName</name> <init pos:line="175" pos:column="32">= <expr><name><name pos:line="175" pos:column="34">cursorMonitor</name><op:operator pos:line="175" pos:column="47">.</op:operator><name pos:line="175" pos:column="48">CurrentFileName</name></name></expr></init></decl>;</decl_stmt>

               <expr_stmt><expr><call><name><name pos:line="177" pos:column="16">_currentCursor</name><op:operator pos:line="177" pos:column="30">.</op:operator><name pos:line="177" pos:column="31">SetCursurPos</name></name><argument_list pos:line="177" pos:column="43">(<argument><expr><name pos:line="177" pos:column="44">fileName</name></expr></argument>, <argument><expr><name pos:line="177" pos:column="54">curLine</name></expr></argument>, <argument><expr><name pos:line="177" pos:column="63">curColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

               <comment type="line" pos:line="179" pos:column="16">//System.Diagnostics.Debugger.Launch(); //for integration test debugging only</comment>
               <decl_stmt><decl><type><name pos:line="180" pos:column="16">bool</name></type> <name pos:line="180" pos:column="21">isMethod</name> <init pos:line="180" pos:column="30">= <expr><call><name pos:line="180" pos:column="32">GetMethod</name><argument_list pos:line="180" pos:column="41">(<argument><expr><name pos:line="180" pos:column="42">fileName</name></expr></argument>, <argument><expr><name pos:line="180" pos:column="52">curLine</name></expr></argument>, <argument><expr><name pos:line="180" pos:column="61">curColumn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
               <if pos:line="181" pos:column="16">if <condition pos:line="181" pos:column="19">(<expr><name pos:line="181" pos:column="20">isMethod</name></expr>)</condition><then pos:line="181" pos:column="29">
               <block pos:line="182" pos:column="16">{
                   <expr_stmt><expr><call><name pos:line="183" pos:column="20">AddMethodToHistoryList</name><argument_list pos:line="183" pos:column="42">(<argument><expr><name pos:line="183" pos:column="43">CurrentMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><call><name pos:line="184" pos:column="20">OnMethodUpdatedEvent</name><argument_list pos:line="184" pos:column="40">(<argument><expr><op:operator pos:line="184" pos:column="41">new</op:operator> <call><name pos:line="184" pos:column="45">MethodEventRaisedArgs</name><argument_list pos:line="184" pos:column="66">(<argument><expr><name pos:line="184" pos:column="67">CurrentMethod</name></expr></argument>, <argument><expr><name pos:line="184" pos:column="82">null</name></expr></argument>, <argument><expr><name pos:line="184" pos:column="88">CurrentLineNumber</name></expr></argument>, <argument><expr><name pos:line="184" pos:column="107">CurrentColumnNumber</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               }</block></then></if>
           }</block></then></if>
       }</block></function>

        <function><type><specifier pos:line="189" pos:column="9">private</specifier> <name pos:line="189" pos:column="17">void</name></type> <name pos:line="189" pos:column="22">AddMethodToHistoryList</name><parameter_list pos:line="189" pos:column="44">(<param><decl><type><name pos:line="189" pos:column="45">Method</name></type> <name pos:line="189" pos:column="52">currentMethod</name></decl></param>)</parameter_list>
        <block pos:line="190" pos:column="9">{
            <if pos:line="191" pos:column="13">if<condition pos:line="191" pos:column="15">(<expr><op:operator pos:line="191" pos:column="16">!</op:operator> <call><name><name pos:line="191" pos:column="18">_navigatedMethods</name><op:operator pos:line="191" pos:column="35">.</op:operator><name pos:line="191" pos:column="36">Contains</name></name><argument_list pos:line="191" pos:column="44">(<argument><expr><name pos:line="191" pos:column="45">_currentMethod</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="191" pos:column="61">
                <expr_stmt><expr><call><name><name pos:line="192" pos:column="17">_navigatedMethods</name><op:operator pos:line="192" pos:column="34">.</op:operator><name pos:line="192" pos:column="35">Add</name></name><argument_list pos:line="192" pos:column="38">(<argument><expr><name pos:line="192" pos:column="39">currentMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></function>

        <cpp:endregion pos:line="195" pos:column="9">#<cpp:directive pos:line="195" pos:column="10">endregion</cpp:directive></cpp:endregion>


       <cpp:region pos:line="198" pos:column="8">#<cpp:directive pos:line="198" pos:column="9">region</cpp:directive> file changed</cpp:region>
       <function><type><specifier pos:line="199" pos:column="8">internal</specifier> <name pos:line="199" pos:column="17">void</name></type> <name pos:line="199" pos:column="22">OnFileChanged</name><parameter_list pos:line="199" pos:column="35">(<param><decl><type><name pos:line="199" pos:column="36">object</name></type> <name pos:line="199" pos:column="43">sender</name></decl></param>, <param><decl><type><name pos:line="199" pos:column="51">FileEventRaisedArgs</name></type> <name pos:line="199" pos:column="71">e</name></decl></param>)</parameter_list>
       <block pos:line="200" pos:column="8">{
           <decl_stmt><decl><type><name pos:line="201" pos:column="12">FileEventType</name></type> <name pos:line="201" pos:column="26">fileEvent</name> <init pos:line="201" pos:column="36">= <expr><name><name pos:line="201" pos:column="38">e</name><op:operator pos:line="201" pos:column="39">.</op:operator><name pos:line="201" pos:column="40">EventType</name></name></expr></init></decl>;</decl_stmt>
           <decl_stmt><decl><type><name pos:line="202" pos:column="12">string</name></type> <name pos:line="202" pos:column="19">oldFilePath</name> <init pos:line="202" pos:column="31">= <expr><name><name pos:line="202" pos:column="33">e</name><op:operator pos:line="202" pos:column="34">.</op:operator><name pos:line="202" pos:column="35">OldFilePath</name></name></expr></init></decl>;</decl_stmt>
           <decl_stmt><decl><type><name pos:line="203" pos:column="12">string</name></type> <name pos:line="203" pos:column="19">newFilePath</name> <init pos:line="203" pos:column="31">= <expr><name><name pos:line="203" pos:column="33">e</name><op:operator pos:line="203" pos:column="34">.</op:operator><name pos:line="203" pos:column="35">FilePath</name></name></expr></init></decl>;</decl_stmt>
           <comment type="line" pos:line="204" pos:column="12">//bool hasSrcML = e.HasSrcML;</comment>

           <switch pos:line="206" pos:column="12">switch <condition pos:line="206" pos:column="19">(<expr><name pos:line="206" pos:column="20">fileEvent</name></expr>)</condition>
           <block pos:line="207" pos:column="12">{
               <case pos:line="208" pos:column="16">case <expr><name><name pos:line="208" pos:column="21">FileEventType</name><op:operator pos:line="208" pos:column="34">.</op:operator><name pos:line="208" pos:column="35">FileAdded</name></name></expr>:
                   <return pos:line="209" pos:column="20">return;</return>
               </case><case pos:line="210" pos:column="16">case <expr><name><name pos:line="210" pos:column="21">FileEventType</name><op:operator pos:line="210" pos:column="34">.</op:operator><name pos:line="210" pos:column="35">FileChanged</name></name></expr>:
                   <expr_stmt><expr><call><name pos:line="211" pos:column="20">ChangeMethodsInChangedFile</name><argument_list pos:line="211" pos:column="46">(<argument><expr><name pos:line="211" pos:column="47">oldFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break pos:line="212" pos:column="20">break;</break>
               </case><case pos:line="213" pos:column="16">case <expr><name><name pos:line="213" pos:column="21">FileEventType</name><op:operator pos:line="213" pos:column="34">.</op:operator><name pos:line="213" pos:column="35">FileDeleted</name></name></expr>: 
                   <expr_stmt><expr><call><name pos:line="214" pos:column="20">DeleteMethodsInDeletedFile</name><argument_list pos:line="214" pos:column="46">(<argument><expr><name pos:line="214" pos:column="47">oldFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break pos:line="215" pos:column="20">break;</break>
               </case><case pos:line="216" pos:column="16">case <expr><name><name pos:line="216" pos:column="21">FileEventType</name><op:operator pos:line="216" pos:column="34">.</op:operator><name pos:line="216" pos:column="35">FileRenamed</name></name></expr>: 
                   <expr_stmt><expr><call><name pos:line="217" pos:column="20">ChangeMethodsInRenamedFile</name><argument_list pos:line="217" pos:column="46">(<argument><expr><name pos:line="217" pos:column="47">oldFilePath</name></expr></argument>, <argument><expr><name pos:line="217" pos:column="60">newFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break pos:line="218" pos:column="20">break;</break>
           </case>}</block></switch>
       }</block></function>

        <function><type><specifier pos:line="222" pos:column="9">private</specifier> <name pos:line="222" pos:column="17">void</name></type> <name pos:line="222" pos:column="22">ChangeMethodsInRenamedFile</name><parameter_list pos:line="222" pos:column="48">(<param><decl><type><name pos:line="222" pos:column="49">string</name></type> <name pos:line="222" pos:column="56">oldFilePath</name></decl></param>, <param><decl><type><name pos:line="222" pos:column="69">string</name></type> <name pos:line="222" pos:column="76">newFilePath</name></decl></param>)</parameter_list>
        <block pos:line="223" pos:column="9">{
            <if pos:line="224" pos:column="13">if<condition pos:line="224" pos:column="15">(<expr><name pos:line="224" pos:column="16">oldFilePath</name> <op:operator pos:line="224" pos:column="28">==</op:operator> <name pos:line="224" pos:column="31">newFilePath</name></expr>)</condition><then pos:line="224" pos:column="43">
                <return pos:line="225" pos:column="17">return;</return></then></if>
            
            <for pos:line="227" pos:column="13">for (<init><decl><type><name pos:line="227" pos:column="18">var</name></type> <name pos:line="227" pos:column="22">i</name><init pos:line="227" pos:column="23">=<expr><lit:literal type="number" pos:line="227" pos:column="24">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="227" pos:column="27">i</name><op:operator pos:line="227" pos:column="28">&lt;</op:operator> <name><name pos:line="227" pos:column="30">_navigatedMethods</name><op:operator pos:line="227" pos:column="47">.</op:operator><name pos:line="227" pos:column="48">Count</name></name></expr>;</condition> <incr><expr><name pos:line="227" pos:column="55">i</name><op:operator pos:line="227" pos:column="56">++</op:operator></expr></incr>)
            <block pos:line="228" pos:column="13">{  
                <if pos:line="229" pos:column="17">if <condition pos:line="229" pos:column="20">(<expr><name><name pos:line="229" pos:column="21">_navigatedMethods</name><index pos:line="229" pos:column="38">[<expr><name pos:line="229" pos:column="39">i</name></expr>]</index></name><op:operator pos:line="229" pos:column="41">.</op:operator><name pos:line="229" pos:column="42">FilePath</name> <op:operator pos:line="229" pos:column="51">==</op:operator> <name pos:line="229" pos:column="54">oldFilePath</name></expr>)</condition><then pos:line="229" pos:column="66">
                <block pos:line="230" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="231" pos:column="21">var</name></type> <name pos:line="231" pos:column="25">oldmethod</name> <init pos:line="231" pos:column="35">= <expr><name><name pos:line="231" pos:column="37">_navigatedMethods</name><index pos:line="231" pos:column="54">[<expr><name pos:line="231" pos:column="55">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name><name pos:line="232" pos:column="21">_navigatedMethods</name><index pos:line="232" pos:column="38">[<expr><name pos:line="232" pos:column="39">i</name></expr>]</index></name><op:operator pos:line="232" pos:column="41">.</op:operator><name pos:line="232" pos:column="42">FilePath</name> <op:operator pos:line="232" pos:column="51">=</op:operator> <name pos:line="232" pos:column="53">newFilePath</name></expr>;</expr_stmt>
                   
                    <decl_stmt><decl><type><name pos:line="234" pos:column="21">var</name></type> <name pos:line="234" pos:column="25">method</name> <init pos:line="234" pos:column="32">= <expr><name><name pos:line="234" pos:column="34">_navigatedMethods</name><index pos:line="234" pos:column="51">[<expr><name pos:line="234" pos:column="52">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name pos:line="235" pos:column="21">OnMethodUpdatedEvent</name><argument_list pos:line="235" pos:column="41">(<argument><expr><op:operator pos:line="235" pos:column="42">new</op:operator> <call><name pos:line="235" pos:column="46">MethodEventRaisedArgs</name><argument_list pos:line="235" pos:column="67">(<argument><expr><name><name pos:line="235" pos:column="68">MethodEventType</name><op:operator pos:line="235" pos:column="83">.</op:operator><name pos:line="235" pos:column="84">MethodChanged</name></name></expr></argument>, <argument><expr><name pos:line="235" pos:column="99">method</name></expr></argument>, <argument><expr><name pos:line="235" pos:column="107">oldmethod</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    
                    <if pos:line="237" pos:column="21">if <condition pos:line="237" pos:column="24">(<expr><call><name><name pos:line="237" pos:column="25">_currentMethod</name><op:operator pos:line="237" pos:column="39">.</op:operator><name pos:line="237" pos:column="40">SignatureEquals</name></name><argument_list pos:line="237" pos:column="55">(<argument><expr><name pos:line="237" pos:column="56">method</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="237" pos:column="64">
                        <expr_stmt><expr><name pos:line="238" pos:column="25">_currentMethod</name> <op:operator pos:line="238" pos:column="40">=</op:operator> <name pos:line="238" pos:column="42">method</name></expr>;</expr_stmt></then></if>
                }</block></then></if>
            }</block></for>
        }</block></function>

        <function><type><specifier pos:line="243" pos:column="9">private</specifier> <name pos:line="243" pos:column="17">void</name></type> <name pos:line="243" pos:column="22">ChangeMethodsInChangedFile</name><parameter_list pos:line="243" pos:column="48">(<param><decl><type><name pos:line="243" pos:column="49">string</name></type> <name pos:line="243" pos:column="56">oldFilePath</name></decl></param>)</parameter_list>
        <block pos:line="244" pos:column="9">{   
            <decl_stmt><decl><type><name><name pos:line="245" pos:column="13">List</name><argument_list pos:line="245" pos:column="17">&lt;<argument><name pos:line="245" pos:column="18">Method</name></argument>&gt;</argument_list></name></type> <name pos:line="245" pos:column="26">allMethods</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="246" pos:column="13">GetAllMethods</name><argument_list pos:line="246" pos:column="26">(<argument><expr><name pos:line="246" pos:column="27">oldFilePath</name></expr></argument>, <argument><expr pos:line="246" pos:column="40">out <name pos:line="246" pos:column="44">allMethods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <for pos:line="248" pos:column="13">for (<init><decl><type><name pos:line="248" pos:column="18">int</name></type> <name pos:line="248" pos:column="22">i</name><init pos:line="248" pos:column="23">=<expr><lit:literal type="number" pos:line="248" pos:column="24">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="248" pos:column="27">i</name> <op:operator pos:line="248" pos:column="29">&lt;</op:operator> <name><name pos:line="248" pos:column="31">_navigatedMethods</name><op:operator pos:line="248" pos:column="48">.</op:operator><name pos:line="248" pos:column="49">Count</name></name></expr>;</condition> <incr><expr><name pos:line="248" pos:column="56">i</name><op:operator pos:line="248" pos:column="57">++</op:operator></expr></incr>)
            <block pos:line="249" pos:column="13">{
                <if pos:line="250" pos:column="17">if <condition pos:line="250" pos:column="20">(<expr><name><name pos:line="250" pos:column="21">_navigatedMethods</name><index pos:line="250" pos:column="38">[<expr><name pos:line="250" pos:column="39">i</name></expr>]</index></name><op:operator pos:line="250" pos:column="41">.</op:operator><name pos:line="250" pos:column="42">FilePath</name> <op:operator pos:line="250" pos:column="51">==</op:operator> <name pos:line="250" pos:column="54">oldFilePath</name></expr>)</condition><then pos:line="250" pos:column="66">
                <block pos:line="251" pos:column="17">{   
                    <decl_stmt><decl><type><name pos:line="252" pos:column="21">var</name></type> <name pos:line="252" pos:column="25">method</name> <init pos:line="252" pos:column="32">= <expr><name><name pos:line="252" pos:column="34">_navigatedMethods</name><index pos:line="252" pos:column="51">[<expr><name pos:line="252" pos:column="52">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="253" pos:column="21">Method</name></type> <name pos:line="253" pos:column="28">newMethod</name></decl>;</decl_stmt>

                    <decl_stmt><decl><type><name pos:line="255" pos:column="21">var</name></type> <name pos:line="255" pos:column="25">updateType</name> <init pos:line="255" pos:column="36">= <expr><call><name pos:line="255" pos:column="38">MethodUpdatedState</name><argument_list pos:line="255" pos:column="56">(<argument><expr><name pos:line="255" pos:column="57">method</name></expr></argument>, <argument><expr><name pos:line="255" pos:column="65">allMethods</name></expr></argument>, <argument><expr pos:line="255" pos:column="77">out <name pos:line="255" pos:column="81">newMethod</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <switch pos:line="256" pos:column="21">switch <condition pos:line="256" pos:column="28">(<expr><name pos:line="256" pos:column="29">updateType</name></expr>)</condition>
                    <block pos:line="257" pos:column="21">{
                        <case pos:line="258" pos:column="25">case <expr><lit:literal type="number" pos:line="258" pos:column="30">0</lit:literal></expr>: <comment type="line" pos:line="258" pos:column="33">// unchanged</comment>
                            <break pos:line="259" pos:column="29">break;</break>
                        </case><case pos:line="260" pos:column="25">case <expr><lit:literal type="number" pos:line="260" pos:column="30">1</lit:literal></expr>: <comment type="line" pos:line="260" pos:column="33">// stays but changed</comment>
                            <expr_stmt><expr><name><name pos:line="261" pos:column="29">_navigatedMethods</name><index pos:line="261" pos:column="46">[<expr><name pos:line="261" pos:column="47">i</name></expr>]</index></name> <op:operator pos:line="261" pos:column="50">=</op:operator> <name pos:line="261" pos:column="52">newMethod</name></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name pos:line="262" pos:column="29">OnMethodUpdatedEvent</name><argument_list pos:line="262" pos:column="49">(<argument><expr><op:operator pos:line="262" pos:column="50">new</op:operator> <call><name pos:line="262" pos:column="54">MethodEventRaisedArgs</name><argument_list pos:line="262" pos:column="75">(<argument><expr><name><name pos:line="262" pos:column="76">MethodEventType</name><op:operator pos:line="262" pos:column="91">.</op:operator><name pos:line="262" pos:column="92">MethodChanged</name></name></expr></argument>, <argument><expr><name pos:line="262" pos:column="107">newMethod</name></expr></argument>, <argument><expr><name pos:line="262" pos:column="118">method</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <if pos:line="263" pos:column="29">if <condition pos:line="263" pos:column="32">(<expr><call><name><name pos:line="263" pos:column="33">_currentMethod</name><op:operator pos:line="263" pos:column="47">.</op:operator><name pos:line="263" pos:column="48">Equals</name></name><argument_list pos:line="263" pos:column="54">(<argument><expr><name pos:line="263" pos:column="55">method</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="263" pos:column="63"> 
                                <expr_stmt><expr><name pos:line="264" pos:column="33">_currentMethod</name> <op:operator pos:line="264" pos:column="48">=</op:operator> <name pos:line="264" pos:column="50">newMethod</name></expr>;</expr_stmt></then></if>
                            <break pos:line="265" pos:column="29">break;</break>
                        </case><case pos:line="266" pos:column="25">case <expr><lit:literal type="number" pos:line="266" pos:column="30">2</lit:literal></expr>: <comment type="line" pos:line="266" pos:column="33">// deleted</comment>
                            <expr_stmt><expr><call><name><name pos:line="267" pos:column="29">_navigatedMethods</name><op:operator pos:line="267" pos:column="46">.</op:operator><name pos:line="267" pos:column="47">RemoveAt</name></name><argument_list pos:line="267" pos:column="55">(<argument><expr><name pos:line="267" pos:column="56">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name pos:line="268" pos:column="29">OnMethodUpdatedEvent</name><argument_list pos:line="268" pos:column="49">(<argument><expr><op:operator pos:line="268" pos:column="50">new</op:operator> <call><name pos:line="268" pos:column="54">MethodEventRaisedArgs</name><argument_list pos:line="268" pos:column="75">(<argument><expr><name><name pos:line="268" pos:column="76">MethodEventType</name><op:operator pos:line="268" pos:column="91">.</op:operator><name pos:line="268" pos:column="92">MethodDeleted</name></name></expr></argument>, <argument><expr><name pos:line="268" pos:column="107">null</name></expr></argument>, <argument><expr><name pos:line="268" pos:column="113">method</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <if pos:line="269" pos:column="29">if <condition pos:line="269" pos:column="32">(<expr><call><name><name pos:line="269" pos:column="33">_currentMethod</name><op:operator pos:line="269" pos:column="47">.</op:operator><name pos:line="269" pos:column="48">Equals</name></name><argument_list pos:line="269" pos:column="54">(<argument><expr><name pos:line="269" pos:column="55">method</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="269" pos:column="63"> 
                                <expr_stmt><expr><name pos:line="270" pos:column="33">_currentMethod</name> <op:operator pos:line="270" pos:column="48">=</op:operator> <op:operator pos:line="270" pos:column="50">new</op:operator> <call><name pos:line="270" pos:column="54">Method</name><argument_list pos:line="270" pos:column="60">()</argument_list></call></expr>;</expr_stmt></then></if> 
                            <break pos:line="271" pos:column="29">break;</break>
                    </case>}</block></switch>
                }</block></then></if>
            }</block></for>
        }</block></function>

        <comment type="line" pos:line="277" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="278" pos:column="9">/// Determine the state of a previously navigated method in the file which it was located at</comment>
        <comment type="line" pos:line="279" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="280" pos:column="9">/// &lt;param name="preNavigatedMethod"&gt;a previously navigated method&lt;/param&gt;</comment>
        <comment type="line" pos:line="281" pos:column="9">/// &lt;param name="newAllMethods"&gt;collection of all methods after a file change (where the previously navigate method wass located)&lt;/param&gt;</comment>
        <comment type="line" pos:line="282" pos:column="9">/// &lt;param name="newMethod"&gt;a new method object is also returned if the function returns 1&lt;/param&gt;</comment>
        <comment type="line" pos:line="283" pos:column="9">/// &lt;returns&gt;0 - unchanged, 1 - still there but changed, 2 - deleted&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="284" pos:column="9">private</specifier> <name pos:line="284" pos:column="17">int</name></type> <name pos:line="284" pos:column="21">MethodUpdatedState</name><parameter_list pos:line="284" pos:column="39">(<param><decl><type><name pos:line="284" pos:column="40">Method</name></type> <name pos:line="284" pos:column="47">preNavigatedMethod</name></decl></param>, <param><decl><type><name><name pos:line="284" pos:column="67">List</name><argument_list pos:line="284" pos:column="71">&lt;<argument><name pos:line="284" pos:column="72">Method</name></argument>&gt;</argument_list></name></type> <name pos:line="284" pos:column="80">newAllMethods</name></decl></param>, <param><decl><type><specifier pos:line="284" pos:column="95">out</specifier> <name pos:line="284" pos:column="99">Method</name></type> <name pos:line="284" pos:column="106">newMethod</name></decl></param>)</parameter_list>
        <block pos:line="285" pos:column="9">{
            <comment type="line" pos:line="286" pos:column="13">//method change: "name", "type" and "prameter type" remain the same but startline number changes</comment>
            <comment type="line" pos:line="287" pos:column="13">//method deletion: no longer find a method with the same (type + name + parameter type)</comment>
            <comment type="line" pos:line="288" pos:column="13">//todo: method rename is a special case might be handled later (it may need a comparision of the method body)</comment>

            <expr_stmt><expr><name pos:line="290" pos:column="13">newMethod</name> <op:operator pos:line="290" pos:column="23">=</op:operator> <op:operator pos:line="290" pos:column="25">new</op:operator> <call><name pos:line="290" pos:column="29">Method</name><argument_list pos:line="290" pos:column="35">()</argument_list></call></expr>;</expr_stmt>

            <foreach pos:line="292" pos:column="13">foreach (<init><decl><type><name pos:line="292" pos:column="22">var</name></type> <name pos:line="292" pos:column="26">method</name> <range pos:line="292" pos:column="33">in <expr><name pos:line="292" pos:column="36">newAllMethods</name></expr></range></decl></init>)
            <block pos:line="293" pos:column="13">{
                <if pos:line="294" pos:column="17">if <condition pos:line="294" pos:column="20">(<expr><call><name><name pos:line="294" pos:column="21">method</name><op:operator pos:line="294" pos:column="27">.</op:operator><name pos:line="294" pos:column="28">SignatureEquals</name></name><argument_list pos:line="294" pos:column="43">(<argument><expr><name pos:line="294" pos:column="44">preNavigatedMethod</name></expr></argument>)</argument_list></call> <op:operator pos:line="294" pos:column="64">&amp;&amp;</op:operator> <name><name pos:line="294" pos:column="67">method</name><op:operator pos:line="294" pos:column="73">.</op:operator><name pos:line="294" pos:column="74">Type</name></name> <op:operator pos:line="294" pos:column="79">==</op:operator> <name><name pos:line="294" pos:column="82">preNavigatedMethod</name><op:operator pos:line="294" pos:column="100">.</op:operator><name pos:line="294" pos:column="101">Type</name></name></expr>)</condition><then pos:line="294" pos:column="106">
                <block pos:line="295" pos:column="17">{
                    <if pos:line="296" pos:column="21">if <condition pos:line="296" pos:column="24">(<expr><call><name><name pos:line="296" pos:column="25">method</name><op:operator pos:line="296" pos:column="31">.</op:operator><name pos:line="296" pos:column="32">Equals</name></name><argument_list pos:line="296" pos:column="38">(<argument><expr><name pos:line="296" pos:column="39">preNavigatedMethod</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="296" pos:column="59"> <comment type="line" pos:line="296" pos:column="60">//StartLineNumber comparison</comment>
                        <return pos:line="297" pos:column="25">return <expr><lit:literal type="number" pos:line="297" pos:column="32">0</lit:literal></expr>;</return></then>
                    <else pos:line="298" pos:column="21">else
                    <block pos:line="299" pos:column="21">{
                        <expr_stmt><expr><name pos:line="300" pos:column="25">newMethod</name> <op:operator pos:line="300" pos:column="35">=</op:operator> <name pos:line="300" pos:column="37">method</name></expr>;</expr_stmt>
                        <return pos:line="301" pos:column="25">return <expr><lit:literal type="number" pos:line="301" pos:column="32">1</lit:literal></expr>;</return>
                    }</block></else></if>
                }</block></then></if>
            }</block></foreach>

            <return pos:line="306" pos:column="13">return <expr><lit:literal type="number" pos:line="306" pos:column="20">2</lit:literal></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="309" pos:column="9">private</specifier> <name pos:line="309" pos:column="17">void</name></type> <name pos:line="309" pos:column="22">DeleteMethodsInDeletedFile</name><parameter_list pos:line="309" pos:column="48">(<param><decl><type><name pos:line="309" pos:column="49">string</name></type> <name pos:line="309" pos:column="56">deletedFilePath</name></decl></param>)</parameter_list>
        <block pos:line="310" pos:column="9">{
            <if pos:line="311" pos:column="13">if <condition pos:line="311" pos:column="16">(<expr><name><name pos:line="311" pos:column="17">_currentMethod</name><op:operator pos:line="311" pos:column="31">.</op:operator><name pos:line="311" pos:column="32">FilePath</name></name> <op:operator pos:line="311" pos:column="41">==</op:operator> <name pos:line="311" pos:column="44">deletedFilePath</name></expr>)</condition><then pos:line="311" pos:column="60">
                <expr_stmt><expr><name pos:line="312" pos:column="17">_currentMethod</name> <op:operator pos:line="312" pos:column="32">=</op:operator> <op:operator pos:line="312" pos:column="34">new</op:operator> <call><name pos:line="312" pos:column="38">Method</name><argument_list pos:line="312" pos:column="44">()</argument_list></call></expr>;</expr_stmt></then></if>

            <foreach pos:line="314" pos:column="13">foreach (<init><decl><type><name pos:line="314" pos:column="22">var</name></type> <name pos:line="314" pos:column="26">method</name> <range pos:line="314" pos:column="33">in <expr><name pos:line="314" pos:column="36">_navigatedMethods</name></expr></range></decl></init>)
            <block pos:line="315" pos:column="13">{
                <if pos:line="316" pos:column="17">if <condition pos:line="316" pos:column="20">(<expr><name><name pos:line="316" pos:column="21">method</name><op:operator pos:line="316" pos:column="27">.</op:operator><name pos:line="316" pos:column="28">FilePath</name></name> <op:operator pos:line="316" pos:column="37">==</op:operator> <name pos:line="316" pos:column="40">deletedFilePath</name></expr>)</condition><then pos:line="316" pos:column="56">
                <block pos:line="317" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="318" pos:column="21">_navigatedMethods</name><op:operator pos:line="318" pos:column="38">.</op:operator><name pos:line="318" pos:column="39">Remove</name></name><argument_list pos:line="318" pos:column="45">(<argument><expr><name pos:line="318" pos:column="46">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="319" pos:column="21">OnMethodUpdatedEvent</name><argument_list pos:line="319" pos:column="41">(<argument><expr><op:operator pos:line="319" pos:column="42">new</op:operator> <call><name pos:line="319" pos:column="46">MethodEventRaisedArgs</name><argument_list pos:line="319" pos:column="67">(<argument><expr><name><name pos:line="319" pos:column="68">MethodEventType</name><op:operator pos:line="319" pos:column="83">.</op:operator><name pos:line="319" pos:column="84">MethodDeleted</name></name></expr></argument>, <argument><expr><name pos:line="319" pos:column="99">null</name></expr></argument>, <argument><expr><name pos:line="319" pos:column="105">method</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></foreach>
        }</block></function>


       <cpp:endregion pos:line="325" pos:column="8">#<cpp:directive pos:line="325" pos:column="9">endregion</cpp:directive></cpp:endregion>

       <comment type="line" pos:line="327" pos:column="8">/// &lt;summary&gt;</comment>
       <comment type="line" pos:line="328" pos:column="8">/// Raises the method updated event</comment>
       <comment type="line" pos:line="329" pos:column="8">/// &lt;/summary&gt;</comment>
       <comment type="line" pos:line="330" pos:column="8">/// &lt;param name="e"&gt;The event arguments&lt;/param&gt;</comment>
       <function><type><specifier pos:line="331" pos:column="8">protected</specifier> <specifier pos:line="331" pos:column="18">virtual</specifier> <name pos:line="331" pos:column="26">void</name></type> <name pos:line="331" pos:column="31">OnMethodUpdatedEvent</name><parameter_list pos:line="331" pos:column="51">(<param><decl><type><name pos:line="331" pos:column="52">MethodEventRaisedArgs</name></type> <name pos:line="331" pos:column="74">e</name></decl></param>)</parameter_list>
       <block pos:line="332" pos:column="8">{
           <decl_stmt><decl><type><name><name pos:line="333" pos:column="12">EventHandler</name><argument_list pos:line="333" pos:column="24">&lt;<argument><name pos:line="333" pos:column="25">MethodEventRaisedArgs</name></argument>&gt;</argument_list></name></type> <name pos:line="333" pos:column="48">handler</name> <init pos:line="333" pos:column="56">= <expr><name pos:line="333" pos:column="58">MethodUpdatedEvent</name></expr></init></decl>;</decl_stmt>
           <if pos:line="334" pos:column="12">if <condition pos:line="334" pos:column="15">(<expr><name pos:line="334" pos:column="16">null</name> <op:operator pos:line="334" pos:column="21">!=</op:operator> <name pos:line="334" pos:column="24">handler</name></expr>)</condition><then pos:line="334" pos:column="32">
           <block pos:line="335" pos:column="12">{
               <expr_stmt><expr><call><name pos:line="336" pos:column="16">handler</name><argument_list pos:line="336" pos:column="23">(<argument><expr><name pos:line="336" pos:column="24">this</name></expr></argument>, <argument><expr><name pos:line="336" pos:column="30">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           }</block></then></if>
       }</block></function>

    }</block></class>
}</block></namespace>
</unit>
