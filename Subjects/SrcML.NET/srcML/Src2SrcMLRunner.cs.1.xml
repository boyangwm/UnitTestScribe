<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML\Src2SrcMLRunner.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2010 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">System</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Collections</name><op:operator pos:line="13" pos:column="25">.</op:operator><name pos:line="13" pos:column="26">Generic</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Linq</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Text</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">ABB</name><op:operator pos:line="16" pos:column="10">.</op:operator><name pos:line="16" pos:column="11">SrcML</name><op:operator pos:line="16" pos:column="16">.</op:operator><name pos:line="16" pos:column="17">Utilities</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Collections</name><op:operator pos:line="17" pos:column="25">.</op:operator><name pos:line="17" pos:column="26">ObjectModel</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">IO</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">System</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">Globalization</name></name>;</using>
<using pos:line="20" pos:column="1">using <name><name pos:line="20" pos:column="7">System</name><op:operator pos:line="20" pos:column="13">.</op:operator><name pos:line="20" pos:column="14">Xml</name><op:operator pos:line="20" pos:column="17">.</op:operator><name pos:line="20" pos:column="18">Linq</name></name>;</using>

<namespace pos:line="22" pos:column="1">namespace <name><name pos:line="22" pos:column="11">ABB</name><op:operator pos:line="22" pos:column="14">.</op:operator><name pos:line="22" pos:column="15">SrcML</name></name> <block pos:line="22" pos:column="21">{
    <comment type="line" pos:line="23" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="24" pos:column="5">/// Utility class for running src2srcml.exe</comment>
    <comment type="line" pos:line="25" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="26" pos:column="5">public</specifier> class <name pos:line="26" pos:column="18">Src2SrcMLRunner</name> <super pos:line="26" pos:column="34">: <name pos:line="26" pos:column="36">SrcMLRunner</name></super> <block pos:line="26" pos:column="48">{

        <comment type="line" pos:line="28" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="29" pos:column="9">/// The src2srcml executable name</comment>
        <comment type="line" pos:line="30" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="31" pos:column="9">public</specifier> <specifier pos:line="31" pos:column="16">const</specifier> <name pos:line="31" pos:column="22">string</name></type> <name pos:line="31" pos:column="29">Src2SrcMLExecutableName</name> <init pos:line="31" pos:column="53">= <expr><lit:literal type="string" pos:line="31" pos:column="55">"src2srcml.exe"</lit:literal></expr></init></decl>;</decl_stmt>

        <cpp:region pos:line="33" pos:column="9">#<cpp:directive pos:line="33" pos:column="10">region</cpp:directive> Constructors</cpp:region>

        <comment type="line" pos:line="35" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="36" pos:column="9">/// Initializes a new instance of the &lt;see cref="Src2SrcMLRunner"/&gt; class.</comment>
        <comment type="line" pos:line="37" pos:column="9">/// &lt;/summary&gt;</comment>
        <constructor><specifier pos:line="38" pos:column="9">public</specifier> <name pos:line="38" pos:column="16">Src2SrcMLRunner</name><parameter_list pos:line="38" pos:column="31">()</parameter_list>
            <member_list pos:line="39" pos:column="13">: <call><name pos:line="39" pos:column="15">this</name><argument_list pos:line="39" pos:column="19">(<argument><expr><call><name><name pos:line="39" pos:column="20">SrcMLHelper</name><op:operator pos:line="39" pos:column="31">.</op:operator><name pos:line="39" pos:column="32">GetSrcMLDefaultDirectory</name></name><argument_list pos:line="39" pos:column="56">()</argument_list></call></expr></argument>)</argument_list></call> </member_list><block pos:line="39" pos:column="60">{}</block></constructor>

        <comment type="line" pos:line="41" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="42" pos:column="9">/// Initializes a new instance of the &lt;see cref="Src2SrcMLRunner"/&gt; class.</comment>
        <comment type="line" pos:line="43" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="44" pos:column="9">/// &lt;param name="applicationDirectory"&gt;The application directory.&lt;/param&gt;</comment>
        <constructor><specifier pos:line="45" pos:column="9">public</specifier> <name pos:line="45" pos:column="16">Src2SrcMLRunner</name><parameter_list pos:line="45" pos:column="31">(<param><decl><type><name pos:line="45" pos:column="32">string</name></type> <name pos:line="45" pos:column="39">applicationDirectory</name></decl></param>)</parameter_list>
            <member_list pos:line="46" pos:column="13">: <call><name pos:line="46" pos:column="15">this</name><argument_list pos:line="46" pos:column="19">(<argument><expr><name pos:line="46" pos:column="20">applicationDirectory</name></expr></argument>, <argument><expr><op:operator pos:line="46" pos:column="42">new</op:operator><index pos:line="46" pos:column="45">[]</index> <block pos:line="46" pos:column="48">{<expr><name><name pos:line="46" pos:column="49">LIT</name><op:operator pos:line="46" pos:column="52">.</op:operator><name pos:line="46" pos:column="53">ArgumentLabel</name></name></expr><op:operator pos:line="46" pos:column="66">,</op:operator> <expr><name><name pos:line="46" pos:column="68">OP</name><op:operator pos:line="46" pos:column="70">.</op:operator><name pos:line="46" pos:column="71">ArgumentLabel</name></name></expr><op:operator pos:line="46" pos:column="84">,</op:operator> <expr><name><name pos:line="46" pos:column="86">TYPE</name><op:operator pos:line="46" pos:column="90">.</op:operator><name pos:line="46" pos:column="91">ArgumentLabel</name></name></expr><op:operator pos:line="46" pos:column="104">,</op:operator> <expr><name><name pos:line="46" pos:column="106">POS</name><op:operator pos:line="46" pos:column="109">.</op:operator><name pos:line="46" pos:column="110">ArgumentLabel</name></name></expr>}</block></expr></argument>)</argument_list></call> </member_list><block pos:line="46" pos:column="126">{}</block></constructor>

        <comment type="line" pos:line="48" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="49" pos:column="9">/// Initializes a new instance of the &lt;see cref="Src2SrcMLRunner"/&gt; class.</comment>
        <comment type="line" pos:line="50" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="51" pos:column="9">/// &lt;param name="applicationDirectory"&gt;The application directory.&lt;/param&gt;</comment>
        <comment type="line" pos:line="52" pos:column="9">/// &lt;param name="namespaceArguments"&gt;The namespace arguments.&lt;/param&gt;</comment>
        <constructor><specifier pos:line="53" pos:column="9">public</specifier> <name pos:line="53" pos:column="16">Src2SrcMLRunner</name><parameter_list pos:line="53" pos:column="31">(<param><decl><type><name pos:line="53" pos:column="32">string</name></type> <name pos:line="53" pos:column="39">applicationDirectory</name></decl></param>, <param><decl><type><name><name pos:line="53" pos:column="61">IEnumerable</name><argument_list pos:line="53" pos:column="72">&lt;<argument><name pos:line="53" pos:column="73">string</name></argument>&gt;</argument_list></name></type> <name pos:line="53" pos:column="81">namespaceArguments</name></decl></param>)</parameter_list>
            <member_list pos:line="54" pos:column="13">: <call><name pos:line="54" pos:column="15">base</name><argument_list pos:line="54" pos:column="19">(<argument><expr><name pos:line="54" pos:column="20">applicationDirectory</name></expr></argument>, <argument><expr><name pos:line="54" pos:column="42">Src2SrcMLExecutableName</name></expr></argument>, <argument><expr><name pos:line="54" pos:column="67">namespaceArguments</name></expr></argument>)</argument_list></call> </member_list><block pos:line="54" pos:column="87">{}</block></constructor>

        <cpp:endregion pos:line="56" pos:column="9">#<cpp:directive pos:line="56" pos:column="10">endregion</cpp:directive></cpp:endregion>

        <cpp:region pos:line="58" pos:column="9">#<cpp:directive pos:line="58" pos:column="10">region</cpp:directive> Directory Conversion</cpp:region>

        <comment type="line" pos:line="60" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="61" pos:column="9">/// Generate a SrcML document from the given path and place it in the XML file.</comment>
        <comment type="line" pos:line="62" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="63" pos:column="9">/// &lt;param name="directoryPath"&gt;the directory path&lt;/param&gt;</comment>
        <comment type="line" pos:line="64" pos:column="9">/// &lt;param name="xmlFileName"&gt;the path of the xml file&lt;/param&gt;</comment>
        <comment type="line" pos:line="65" pos:column="9">/// &lt;returns&gt;A SrcMLFile that points at &lt;paramref name="xmlFileName"/&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="66" pos:column="9">public</specifier> <name pos:line="66" pos:column="16">SrcMLFile</name></type> <name pos:line="66" pos:column="26">GenerateSrcMLFromDirectory</name><parameter_list pos:line="66" pos:column="52">(<param><decl><type><name pos:line="66" pos:column="53">string</name></type> <name pos:line="66" pos:column="60">directoryPath</name></decl></param>, <param><decl><type><name pos:line="66" pos:column="75">string</name></type> <name pos:line="66" pos:column="82">xmlFileName</name></decl></param>)</parameter_list> <block pos:line="66" pos:column="95">{
            <return pos:line="67" pos:column="13">return <expr><call><name pos:line="67" pos:column="20">GenerateSrcMLFromDirectory</name><argument_list pos:line="67" pos:column="46">(<argument><expr><name pos:line="67" pos:column="47">directoryPath</name></expr></argument>, <argument><expr><name pos:line="67" pos:column="62">xmlFileName</name></expr></argument>, <argument><expr><call><name><name pos:line="67" pos:column="75">Enumerable</name><op:operator pos:line="67" pos:column="85">.</op:operator><name><name pos:line="67" pos:column="86">Empty</name><argument_list pos:line="67" pos:column="91">&lt;<argument><name pos:line="67" pos:column="92">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="67" pos:column="99">()</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="67" pos:column="103">Language</name><op:operator pos:line="67" pos:column="111">.</op:operator><name pos:line="67" pos:column="112">Any</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="70" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="71" pos:column="9">/// Generates a SrcML document from the given path and place it in the XML file. The XML document will only contain files classified as &lt;paramref name="languageFilter"/&gt;.</comment>
        <comment type="line" pos:line="72" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="73" pos:column="9">/// &lt;param name="directoryPath"&gt;the directory path&lt;/param&gt;</comment>
        <comment type="line" pos:line="74" pos:column="9">/// &lt;param name="xmlFileName"&gt;the path of the xml file&lt;/param&gt;</comment>
        <comment type="line" pos:line="75" pos:column="9">/// &lt;param name="languageFilter"&gt;the language to filter on&lt;/param&gt;</comment>
        <comment type="line" pos:line="76" pos:column="9">/// &lt;returns&gt;A SrcMLFile that points at &lt;paramref name="xmlFileName"/&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="77" pos:column="9">public</specifier> <name pos:line="77" pos:column="16">SrcMLFile</name></type> <name pos:line="77" pos:column="26">GenerateSrcMLFromDirectory</name><parameter_list pos:line="77" pos:column="52">(<param><decl><type><name pos:line="77" pos:column="53">string</name></type> <name pos:line="77" pos:column="60">directoryPath</name></decl></param>, <param><decl><type><name pos:line="77" pos:column="75">string</name></type> <name pos:line="77" pos:column="82">xmlFileName</name></decl></param>, <param><decl><type><name pos:line="77" pos:column="95">Language</name></type> <name pos:line="77" pos:column="104">languageFilter</name></decl></param>)</parameter_list> <block pos:line="77" pos:column="120">{
            <return pos:line="78" pos:column="13">return <expr><call><name pos:line="78" pos:column="20">GenerateSrcMLFromDirectory</name><argument_list pos:line="78" pos:column="46">(<argument><expr><name pos:line="78" pos:column="47">directoryPath</name></expr></argument>, <argument><expr><name pos:line="78" pos:column="62">xmlFileName</name></expr></argument>, <argument><expr><call><name><name pos:line="78" pos:column="75">Enumerable</name><op:operator pos:line="78" pos:column="85">.</op:operator><name><name pos:line="78" pos:column="86">Empty</name><argument_list pos:line="78" pos:column="91">&lt;<argument><name pos:line="78" pos:column="92">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="78" pos:column="99">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="78" pos:column="103">languageFilter</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="81" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="82" pos:column="9">/// Generates a SrcML document from the given path and place it in the XML file. The XML document will only contain files not present in &lt;paramref name="filesToExclude"/&gt;</comment>
        <comment type="line" pos:line="83" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="84" pos:column="9">/// &lt;param name="directoryPath"&gt;the directory path&lt;/param&gt;</comment>
        <comment type="line" pos:line="85" pos:column="9">/// &lt;param name="xmlFileName"&gt;the path of the xml file&lt;/param&gt;</comment>
        <comment type="line" pos:line="86" pos:column="9">/// &lt;param name="filesToExclude"&gt;A collection of files to exclude from &lt;paramref name="xmlFileName"/&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="87" pos:column="9">/// &lt;returns&gt;A SrcMLFile that points at &lt;paramref name="xmlFileName"/&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="88" pos:column="9">public</specifier> <name pos:line="88" pos:column="16">SrcMLFile</name></type> <name pos:line="88" pos:column="26">GenerateSrcMLFromDirectory</name><parameter_list pos:line="88" pos:column="52">(<param><decl><type><name pos:line="88" pos:column="53">string</name></type> <name pos:line="88" pos:column="60">directoryPath</name></decl></param>, <param><decl><type><name pos:line="88" pos:column="75">string</name></type> <name pos:line="88" pos:column="82">xmlFileName</name></decl></param>, <param><decl><type><name><name pos:line="88" pos:column="95">IEnumerable</name><argument_list pos:line="88" pos:column="106">&lt;<argument><name pos:line="88" pos:column="107">string</name></argument>&gt;</argument_list></name></type> <name pos:line="88" pos:column="115">filesToExclude</name></decl></param>)</parameter_list> <block pos:line="88" pos:column="131">{
            <return pos:line="89" pos:column="13">return <expr><call><name pos:line="89" pos:column="20">GenerateSrcMLFromDirectory</name><argument_list pos:line="89" pos:column="46">(<argument><expr><name pos:line="89" pos:column="47">directoryPath</name></expr></argument>, <argument><expr><name pos:line="89" pos:column="62">xmlFileName</name></expr></argument>, <argument><expr><name pos:line="89" pos:column="75">filesToExclude</name></expr></argument>, <argument><expr><name><name pos:line="89" pos:column="91">Language</name><op:operator pos:line="89" pos:column="99">.</op:operator><name pos:line="89" pos:column="100">Any</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="92" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="93" pos:column="9">/// Generates a SrcML document from the given path and place it in the XML file.</comment>
        <comment type="line" pos:line="94" pos:column="9">/// The output can be controlled by using &lt;paramref name="filesToExclude"/&gt;, and &lt;paramref name="languageFilter"/&gt;</comment>
        <comment type="line" pos:line="95" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="96" pos:column="9">/// &lt;param name="directoryPath"&gt;the directory path&lt;/param&gt;</comment>
        <comment type="line" pos:line="97" pos:column="9">/// &lt;param name="xmlFileName"&gt;the path of the xml file&lt;/param&gt;</comment>
        <comment type="line" pos:line="98" pos:column="9">/// &lt;param name="filesToExclude"&gt;A collection of files to exclude from &lt;paramref name="xmlFileName"/&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="99" pos:column="9">/// &lt;param name="languageFilter"&gt;the language to filter on&lt;/param&gt;</comment>
        <comment type="line" pos:line="100" pos:column="9">/// &lt;returns&gt;A SrcMLFile that points at &lt;paramref name="xmlFileName"/&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="101" pos:column="9">public</specifier> <name pos:line="101" pos:column="16">SrcMLFile</name></type> <name pos:line="101" pos:column="26">GenerateSrcMLFromDirectory</name><parameter_list pos:line="101" pos:column="52">(<param><decl><type><name pos:line="101" pos:column="53">string</name></type> <name pos:line="101" pos:column="60">directoryPath</name></decl></param>, <param><decl><type><name pos:line="101" pos:column="75">string</name></type> <name pos:line="101" pos:column="82">xmlFileName</name></decl></param>, <param><decl><type><name><name pos:line="101" pos:column="95">IEnumerable</name><argument_list pos:line="101" pos:column="106">&lt;<argument><name pos:line="101" pos:column="107">string</name></argument>&gt;</argument_list></name></type> <name pos:line="101" pos:column="115">filesToExclude</name></decl></param>, <param><decl><type><name pos:line="101" pos:column="131">Language</name></type> <name pos:line="101" pos:column="140">languageFilter</name></decl></param>)</parameter_list> <block pos:line="101" pos:column="156">{
            <if pos:line="102" pos:column="13">if<condition pos:line="102" pos:column="15">(<expr><op:operator pos:line="102" pos:column="16">!</op:operator><call><name><name pos:line="102" pos:column="17">Directory</name><op:operator pos:line="102" pos:column="26">.</op:operator><name pos:line="102" pos:column="27">Exists</name></name><argument_list pos:line="102" pos:column="33">(<argument><expr><name pos:line="102" pos:column="34">directoryPath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="102" pos:column="49">
                <throw pos:line="103" pos:column="17">throw <expr><op:operator pos:line="103" pos:column="23">new</op:operator> <call><name pos:line="103" pos:column="27">DirectoryNotFoundException</name><argument_list pos:line="103" pos:column="53">(<argument><expr><call><name><name pos:line="103" pos:column="54">String</name><op:operator pos:line="103" pos:column="60">.</op:operator><name pos:line="103" pos:column="61">Format</name></name><argument_list pos:line="103" pos:column="67">(<argument><expr><name><name pos:line="103" pos:column="68">CultureInfo</name><op:operator pos:line="103" pos:column="79">.</op:operator><name pos:line="103" pos:column="80">CurrentCulture</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="103" pos:column="96">"{0} does not exist."</lit:literal></expr></argument>, <argument><expr><name pos:line="103" pos:column="119">directoryPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name><name pos:line="105" pos:column="13">Collection</name><argument_list pos:line="105" pos:column="23">&lt;<argument><name pos:line="105" pos:column="24">string</name></argument>&gt;</argument_list></name></type> <name pos:line="105" pos:column="32">additionalArguments</name> <init pos:line="105" pos:column="52">= <expr><op:operator pos:line="105" pos:column="54">new</op:operator> <call><name><name pos:line="105" pos:column="58">Collection</name><argument_list pos:line="105" pos:column="68">&lt;<argument><name pos:line="105" pos:column="69">string</name></argument>&gt;</argument_list></name><argument_list pos:line="105" pos:column="76">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="107" pos:column="13">DirectoryInfo</name></type> <name pos:line="107" pos:column="27">dir</name> <init pos:line="107" pos:column="31">= <expr><op:operator pos:line="107" pos:column="33">new</op:operator> <call><name pos:line="107" pos:column="37">DirectoryInfo</name><argument_list pos:line="107" pos:column="50">(<argument><expr><name pos:line="107" pos:column="51">directoryPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="109" pos:column="13">var</name></type> <name pos:line="109" pos:column="17">fileObjectsToExclude</name> <init pos:line="109" pos:column="38">= <expr><linq><from pos:line="109" pos:column="40">from <expr><name pos:line="109" pos:column="45">f</name></expr> <in pos:line="109" pos:column="47">in <expr><name pos:line="109" pos:column="50">filesToExclude</name></expr></in></from>
                                       <select pos:line="110" pos:column="40">select <expr><op:operator pos:line="110" pos:column="47">new</op:operator> <call><name pos:line="110" pos:column="51">FileInfo</name><argument_list pos:line="110" pos:column="59">(<argument><expr><name pos:line="110" pos:column="60">f</name></expr></argument>)</argument_list></call></expr></select></linq></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="112" pos:column="13">var</name></type> <name pos:line="112" pos:column="17">files</name> <init pos:line="112" pos:column="23">= <expr><op:operator pos:line="112" pos:column="25">(</op:operator><linq><from pos:line="112" pos:column="26">from <expr><name pos:line="112" pos:column="31">filePath</name></expr> <in pos:line="112" pos:column="40">in <expr><call><name><name pos:line="112" pos:column="43">dir</name><op:operator pos:line="112" pos:column="46">.</op:operator><name pos:line="112" pos:column="47">GetFiles</name></name><argument_list pos:line="112" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="112" pos:column="56">"*"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="112" pos:column="61">SearchOption</name><op:operator pos:line="112" pos:column="73">.</op:operator><name pos:line="112" pos:column="74">AllDirectories</name></name></expr></argument>)</argument_list></call></expr></in></from>
                         <where pos:line="113" pos:column="26">where <expr><call><name><name pos:line="113" pos:column="32">ExtensionMapping</name><op:operator pos:line="113" pos:column="48">.</op:operator><name pos:line="113" pos:column="49">ContainsKey</name></name><argument_list pos:line="113" pos:column="60">(<argument><expr><name><name pos:line="113" pos:column="61">filePath</name><op:operator pos:line="113" pos:column="69">.</op:operator><name pos:line="113" pos:column="70">Extension</name></name></expr></argument>)</argument_list></call></expr></where>
                         <select pos:line="114" pos:column="26">select <expr><name pos:line="114" pos:column="33">filePath</name></expr></select></linq><op:operator pos:line="114" pos:column="41">)</op:operator><op:operator pos:line="114" pos:column="42">.</op:operator><call><name pos:line="114" pos:column="43">Except</name><argument_list pos:line="114" pos:column="49">(<argument><expr><name pos:line="114" pos:column="50">fileObjectsToExclude</name></expr></argument>, <argument><expr><op:operator pos:line="114" pos:column="72">new</op:operator> <call><name pos:line="114" pos:column="76">FileInfoComparer</name><argument_list pos:line="114" pos:column="92">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name><name pos:line="116" pos:column="13">IEnumerable</name><argument_list pos:line="116" pos:column="24">&lt;<argument><name pos:line="116" pos:column="25">string</name></argument>&gt;</argument_list></name></type> <name pos:line="116" pos:column="33">reducedFileList</name></decl>;</decl_stmt>
            <if pos:line="117" pos:column="13">if<condition pos:line="117" pos:column="15">(<expr><name><name pos:line="117" pos:column="16">Language</name><op:operator pos:line="117" pos:column="24">.</op:operator><name pos:line="117" pos:column="25">Any</name></name> <op:operator pos:line="117" pos:column="29">==</op:operator> <name pos:line="117" pos:column="32">languageFilter</name></expr>)</condition><then pos:line="117" pos:column="47"> <block pos:line="117" pos:column="48">{
                <expr_stmt><expr><name pos:line="118" pos:column="17">reducedFileList</name> <op:operator pos:line="118" pos:column="33">=</op:operator> <linq><from pos:line="118" pos:column="35">from <expr><name pos:line="118" pos:column="40">f</name></expr> <in pos:line="118" pos:column="42">in <expr><name pos:line="118" pos:column="45">files</name></expr></in></from>
                                  <select pos:line="119" pos:column="35">select <expr><name><name pos:line="119" pos:column="42">f</name><op:operator pos:line="119" pos:column="43">.</op:operator><name pos:line="119" pos:column="44">FullName</name></name></expr></select></linq></expr>;</expr_stmt>
            }</block></then> <else pos:line="120" pos:column="15">else <block pos:line="120" pos:column="20">{
                <expr_stmt><expr><call><name><name pos:line="121" pos:column="17">additionalArguments</name><op:operator pos:line="121" pos:column="36">.</op:operator><name pos:line="121" pos:column="37">Add</name></name><argument_list pos:line="121" pos:column="40">(<argument><expr><call><name><name pos:line="121" pos:column="41">String</name><op:operator pos:line="121" pos:column="47">.</op:operator><name pos:line="121" pos:column="48">Format</name></name><argument_list pos:line="121" pos:column="54">(<argument><expr><name><name pos:line="121" pos:column="55">CultureInfo</name><op:operator pos:line="121" pos:column="66">.</op:operator><name pos:line="121" pos:column="67">InvariantCulture</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="121" pos:column="85">"--language={0}"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="121" pos:column="103">KsuAdapter</name><op:operator pos:line="121" pos:column="113">.</op:operator><name pos:line="121" pos:column="114">GetLanguage</name></name><argument_list pos:line="121" pos:column="125">(<argument><expr><name pos:line="121" pos:column="126">languageFilter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="122" pos:column="17">reducedFileList</name> <op:operator pos:line="122" pos:column="33">=</op:operator> <linq><from pos:line="122" pos:column="35">from <expr><name pos:line="122" pos:column="40">f</name></expr> <in pos:line="122" pos:column="42">in <expr><name pos:line="122" pos:column="45">files</name></expr></in></from>
                                  <where pos:line="123" pos:column="35">where <expr><name pos:line="123" pos:column="41">languageFilter</name> <op:operator pos:line="123" pos:column="56">==</op:operator> <name><name pos:line="123" pos:column="59">ExtensionMapping</name><index pos:line="123" pos:column="75">[<expr><name><name pos:line="123" pos:column="76">f</name><op:operator pos:line="123" pos:column="77">.</op:operator><name pos:line="123" pos:column="78">Extension</name></name></expr>]</index></name></expr></where>
                                  <select pos:line="124" pos:column="35">select <expr><name><name pos:line="124" pos:column="42">f</name><op:operator pos:line="124" pos:column="43">.</op:operator><name pos:line="124" pos:column="44">FullName</name></name></expr></select></linq></expr>;</expr_stmt>
            }</block></else></if>

            <expr_stmt><expr><call><name pos:line="127" pos:column="13">Run</name><argument_list pos:line="127" pos:column="16">(<argument><expr><name pos:line="127" pos:column="17">xmlFileName</name></expr></argument>, <argument><expr><name pos:line="127" pos:column="30">additionalArguments</name></expr></argument>, <argument><expr><op:operator pos:line="127" pos:column="51">new</op:operator> <call><name><name pos:line="127" pos:column="55">Collection</name><argument_list pos:line="127" pos:column="65">&lt;<argument><name pos:line="127" pos:column="66">string</name></argument>&gt;</argument_list></name><argument_list pos:line="127" pos:column="73">(<argument><expr><call><name><name pos:line="127" pos:column="74">reducedFileList</name><op:operator pos:line="127" pos:column="89">.</op:operator><name pos:line="127" pos:column="90">ToList</name></name><argument_list pos:line="127" pos:column="96">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:line="129" pos:column="13">return <expr><op:operator pos:line="129" pos:column="20">new</op:operator> <call><name pos:line="129" pos:column="24">SrcMLFile</name><argument_list pos:line="129" pos:column="33">(<argument><expr><name pos:line="129" pos:column="34">xmlFileName</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <cpp:endregion pos:line="132" pos:column="9">#<cpp:directive pos:line="132" pos:column="10">endregion</cpp:directive></cpp:endregion>

        <cpp:region pos:line="134" pos:column="9">#<cpp:directive pos:line="134" pos:column="10">region</cpp:directive> File Conversion</cpp:region>

        <comment type="line" pos:line="136" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="137" pos:column="9">/// Added by JZ on 12/4/2012</comment>
        <comment type="line" pos:line="138" pos:column="9">/// Generate both a SrcML XElement and document from a single source file. The language will be inferred from the extension.</comment>
        <comment type="line" pos:line="139" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="140" pos:column="9">/// &lt;param name="sourceFileName"&gt;path to the source file to convert.&lt;/param&gt;</comment>
        <comment type="line" pos:line="141" pos:column="9">/// &lt;param name="xmlFileName"&gt;The File name to write the resulting XML to.&lt;/param&gt;</comment>
        <comment type="line" pos:line="142" pos:column="9">/// &lt;returns&gt;An XElement representing the source.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="143" pos:column="9">public</specifier> <name pos:line="143" pos:column="16">XElement</name></type> <name pos:line="143" pos:column="25">GenerateSrcMLAndXElementFromFile</name><parameter_list pos:line="143" pos:column="57">(<param><decl><type><name pos:line="143" pos:column="58">string</name></type> <name pos:line="143" pos:column="65">sourceFileName</name></decl></param>, <param><decl><type><name pos:line="143" pos:column="81">string</name></type> <name pos:line="143" pos:column="88">xmlFileName</name></decl></param>)</parameter_list> <block pos:line="143" pos:column="101">{
            <decl_stmt><decl><type><name pos:line="144" pos:column="13">SrcMLFile</name></type> <name pos:line="144" pos:column="23">srcMLFile</name> <init pos:line="144" pos:column="33">= <expr><call><name pos:line="144" pos:column="35">GenerateSrcMLFromFile</name><argument_list pos:line="144" pos:column="56">(<argument><expr><name pos:line="144" pos:column="57">sourceFileName</name></expr></argument>, <argument><expr><name pos:line="144" pos:column="73">xmlFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="145" pos:column="13">//string srcml = srcMLFile.GetXMLString();</comment>
            <return pos:line="146" pos:column="13">return <expr><call><name><name pos:line="146" pos:column="20">srcMLFile</name><op:operator pos:line="146" pos:column="29">.</op:operator><name pos:line="146" pos:column="30">FileUnits</name><op:operator pos:line="146" pos:column="39">.</op:operator><name pos:line="146" pos:column="40">FirstOrDefault</name></name><argument_list pos:line="146" pos:column="54">()</argument_list></call></expr>;</return>
            <comment type="line" pos:line="147" pos:column="13">//if (srcml != String.Empty)</comment>
            <comment type="line" pos:line="148" pos:column="13">//{</comment>
            <comment type="line" pos:line="149" pos:column="13">//    return XElement.Parse(srcml, LoadOptions.PreserveWhitespace);</comment>
            <comment type="line" pos:line="150" pos:column="13">//}</comment>
            <comment type="line" pos:line="151" pos:column="13">//else</comment>
            <comment type="line" pos:line="152" pos:column="13">//{</comment>
            <comment type="line" pos:line="153" pos:column="13">//    return null;</comment>
            <comment type="line" pos:line="154" pos:column="13">//}</comment>
        }</block></function>

        <comment type="line" pos:line="157" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="158" pos:column="9">/// Added by JZ on 12/3/2012</comment>
        <comment type="line" pos:line="159" pos:column="9">/// Generate both a SrcML string and document from a single source file. The language will be inferred from the extension.</comment>
        <comment type="line" pos:line="160" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="161" pos:column="9">/// &lt;param name="sourceFileName"&gt;path to the source file to convert.&lt;/param&gt;</comment>
        <comment type="line" pos:line="162" pos:column="9">/// &lt;param name="xmlFileName"&gt;The File name to write the resulting XML to.&lt;/param&gt;</comment>
        <comment type="line" pos:line="163" pos:column="9">/// &lt;returns&gt;An XML string representing the source.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="164" pos:column="9">public</specifier> <name pos:line="164" pos:column="16">string</name></type> <name pos:line="164" pos:column="23">GenerateSrcMLAndStringFromFile</name><parameter_list pos:line="164" pos:column="53">(<param><decl><type><name pos:line="164" pos:column="54">string</name></type> <name pos:line="164" pos:column="61">sourceFileName</name></decl></param>, <param><decl><type><name pos:line="164" pos:column="77">string</name></type> <name pos:line="164" pos:column="84">xmlFileName</name></decl></param>)</parameter_list> <block pos:line="164" pos:column="97">{
            <decl_stmt><decl><type><name pos:line="165" pos:column="13">SrcMLFile</name></type> <name pos:line="165" pos:column="23">srcMLFile</name> <init pos:line="165" pos:column="33">= <expr><call><name pos:line="165" pos:column="35">GenerateSrcMLFromFile</name><argument_list pos:line="165" pos:column="56">(<argument><expr><name pos:line="165" pos:column="57">sourceFileName</name></expr></argument>, <argument><expr><name pos:line="165" pos:column="73">xmlFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="166" pos:column="13">return <expr><call><name><name pos:line="166" pos:column="20">srcMLFile</name><op:operator pos:line="166" pos:column="29">.</op:operator><name pos:line="166" pos:column="30">GetXMLString</name></name><argument_list pos:line="166" pos:column="42">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="169" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="170" pos:column="9">/// Generate a SrcML document from a single source file. The language will be inferred from the extension.</comment>
        <comment type="line" pos:line="171" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="172" pos:column="9">/// &lt;param name="sourceFileName"&gt;path to the source file to convert.&lt;/param&gt;</comment>
        <comment type="line" pos:line="173" pos:column="9">/// &lt;param name="xmlFileName"&gt;The File name to write the resulting XML to.&lt;/param&gt;</comment>
        <comment type="line" pos:line="174" pos:column="9">/// &lt;returns&gt;A SrcMLFile for &lt;paramref name="xmlFileName"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="175" pos:column="9">public</specifier> <name pos:line="175" pos:column="16">SrcMLFile</name></type> <name pos:line="175" pos:column="26">GenerateSrcMLFromFile</name><parameter_list pos:line="175" pos:column="47">(<param><decl><type><name pos:line="175" pos:column="48">string</name></type> <name pos:line="175" pos:column="55">sourceFileName</name></decl></param>, <param><decl><type><name pos:line="175" pos:column="71">string</name></type> <name pos:line="175" pos:column="78">xmlFileName</name></decl></param>)</parameter_list> <block pos:line="175" pos:column="91">{
            <return pos:line="176" pos:column="13">return <expr><call><name pos:line="176" pos:column="20">GenerateSrcMLFromFile</name><argument_list pos:line="176" pos:column="41">(<argument><expr><name pos:line="176" pos:column="42">sourceFileName</name></expr></argument>, <argument><expr><name pos:line="176" pos:column="58">xmlFileName</name></expr></argument>, <argument><expr><name><name pos:line="176" pos:column="71">Language</name><op:operator pos:line="176" pos:column="79">.</op:operator><name pos:line="176" pos:column="80">Any</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="179" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="180" pos:column="9">/// Generate a SrcML document from a single source file with the specified language.</comment>
        <comment type="line" pos:line="181" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="182" pos:column="9">/// &lt;param name="sourceFileName"&gt;The path to the source file to convert.&lt;/param&gt;</comment>
        <comment type="line" pos:line="183" pos:column="9">/// &lt;param name="xmlFileName"&gt;The file name to write the resulting XML to.&lt;/param&gt;</comment>
        <comment type="line" pos:line="184" pos:column="9">/// &lt;param name="language"&gt;The language to parse the source file as.&lt;/param&gt;</comment>
        <comment type="line" pos:line="185" pos:column="9">/// &lt;returns&gt;A SrcMLFile for &lt;paramref name="xmlFileName"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="186" pos:column="9">public</specifier> <name pos:line="186" pos:column="16">SrcMLFile</name></type> <name pos:line="186" pos:column="26">GenerateSrcMLFromFile</name><parameter_list pos:line="186" pos:column="47">(<param><decl><type><name pos:line="186" pos:column="48">string</name></type> <name pos:line="186" pos:column="55">sourceFileName</name></decl></param>, <param><decl><type><name pos:line="186" pos:column="71">string</name></type> <name pos:line="186" pos:column="78">xmlFileName</name></decl></param>, <param><decl><type><name pos:line="186" pos:column="91">Language</name></type> <name pos:line="186" pos:column="100">language</name></decl></param>)</parameter_list> <block pos:line="186" pos:column="110">{
            <decl_stmt><decl><type><name pos:line="187" pos:column="13">var</name></type> <name pos:line="187" pos:column="17">arguments</name> <init pos:line="187" pos:column="27">= <expr><op:operator pos:line="187" pos:column="29">new</op:operator> <call><name><name pos:line="187" pos:column="33">Collection</name><argument_list pos:line="187" pos:column="43">&lt;<argument><name pos:line="187" pos:column="44">string</name></argument>&gt;</argument_list></name><argument_list pos:line="187" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="188" pos:column="13">if<condition pos:line="188" pos:column="15">(<expr><name pos:line="188" pos:column="16">language</name> <op:operator pos:line="188" pos:column="25">&gt;</op:operator> <name><name pos:line="188" pos:column="27">Language</name><op:operator pos:line="188" pos:column="35">.</op:operator><name pos:line="188" pos:column="36">Any</name></name></expr>)</condition><then pos:line="188" pos:column="40"> <block pos:line="188" pos:column="41">{
                <expr_stmt><expr><call><name><name pos:line="189" pos:column="17">arguments</name><op:operator pos:line="189" pos:column="26">.</op:operator><name pos:line="189" pos:column="27">Add</name></name><argument_list pos:line="189" pos:column="30">(<argument><expr><call><name><name pos:line="189" pos:column="31">String</name><op:operator pos:line="189" pos:column="37">.</op:operator><name pos:line="189" pos:column="38">Format</name></name><argument_list pos:line="189" pos:column="44">(<argument><expr><name><name pos:line="189" pos:column="45">CultureInfo</name><op:operator pos:line="189" pos:column="56">.</op:operator><name pos:line="189" pos:column="57">InvariantCulture</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="189" pos:column="75">"--language={0}"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="189" pos:column="93">KsuAdapter</name><op:operator pos:line="189" pos:column="103">.</op:operator><name pos:line="189" pos:column="104">GetLanguage</name></name><argument_list pos:line="189" pos:column="115">(<argument><expr><name pos:line="189" pos:column="116">language</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name><name pos:line="192" pos:column="13">arguments</name><op:operator pos:line="192" pos:column="22">.</op:operator><name pos:line="192" pos:column="23">Add</name></name><argument_list pos:line="192" pos:column="26">(<argument><expr><call><name><name pos:line="192" pos:column="27">String</name><op:operator pos:line="192" pos:column="33">.</op:operator><name pos:line="192" pos:column="34">Format</name></name><argument_list pos:line="192" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="192" pos:column="41">"\"{0}\""</lit:literal></expr></argument>, <argument><expr><name pos:line="192" pos:column="52">sourceFileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="194" pos:column="13">//Console.WriteLine("sourceFileName = [" + sourceFileName + "]");</comment>
            <comment type="line" pos:line="195" pos:column="13">//Console.WriteLine("xmlFileName = [" + xmlFileName + "]");</comment>
            <expr_stmt><expr><call><name pos:line="196" pos:column="13">Run</name><argument_list pos:line="196" pos:column="16">(<argument><expr><name pos:line="196" pos:column="17">xmlFileName</name></expr></argument>, <argument><expr><name pos:line="196" pos:column="30">arguments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:line="198" pos:column="13">return <expr><op:operator pos:line="198" pos:column="20">new</op:operator> <call><name pos:line="198" pos:column="24">SrcMLFile</name><argument_list pos:line="198" pos:column="33">(<argument><expr><name pos:line="198" pos:column="34">xmlFileName</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="201" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="202" pos:column="9">/// Generates a SrcML document from a collection of source files. The languages will be inferred from the file extensions.</comment>
        <comment type="line" pos:line="203" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="204" pos:column="9">/// &lt;param name="sourceFileNames"&gt;The source files to generate SrcML from.&lt;/param&gt;</comment>
        <comment type="line" pos:line="205" pos:column="9">/// &lt;param name="xmlFileName"&gt;The file name to write the resulting XML to.&lt;/param&gt;</comment>
        <comment type="line" pos:line="206" pos:column="9">/// &lt;returns&gt;A SrcMLFile for &lt;paramref name="xmlFileName"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="207" pos:column="9">public</specifier> <name pos:line="207" pos:column="16">SrcMLFile</name></type> <name pos:line="207" pos:column="26">GenerateSrcMLFromFiles</name><parameter_list pos:line="207" pos:column="48">(<param><decl><type><name><name pos:line="207" pos:column="49">IEnumerable</name><argument_list pos:line="207" pos:column="60">&lt;<argument><name pos:line="207" pos:column="61">string</name></argument>&gt;</argument_list></name></type> <name pos:line="207" pos:column="69">sourceFileNames</name></decl></param>, <param><decl><type><name pos:line="207" pos:column="86">string</name></type> <name pos:line="207" pos:column="93">xmlFileName</name></decl></param>)</parameter_list> <block pos:line="207" pos:column="106">{
            <expr_stmt><expr><call><name pos:line="208" pos:column="13">Run</name><argument_list pos:line="208" pos:column="16">(<argument><expr><name pos:line="208" pos:column="17">xmlFileName</name></expr></argument>, <argument><expr><op:operator pos:line="208" pos:column="30">new</op:operator> <call><name><name pos:line="208" pos:column="34">Collection</name><argument_list pos:line="208" pos:column="44">&lt;<argument><name pos:line="208" pos:column="45">string</name></argument>&gt;</argument_list></name><argument_list pos:line="208" pos:column="52">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="208" pos:column="56">new</op:operator> <call><name><name pos:line="208" pos:column="60">Collection</name><argument_list pos:line="208" pos:column="70">&lt;<argument><name pos:line="208" pos:column="71">string</name></argument>&gt;</argument_list></name><argument_list pos:line="208" pos:column="78">(<argument><expr><call><name><name pos:line="208" pos:column="79">sourceFileNames</name><op:operator pos:line="208" pos:column="94">.</op:operator><name pos:line="208" pos:column="95">ToList</name></name><argument_list pos:line="208" pos:column="101">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="209" pos:column="13">return <expr><op:operator pos:line="209" pos:column="20">new</op:operator> <call><name pos:line="209" pos:column="24">SrcMLFile</name><argument_list pos:line="209" pos:column="33">(<argument><expr><name pos:line="209" pos:column="34">xmlFileName</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="212" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="213" pos:column="9">/// Generates a SrcML document from a collection of source files using the specified language.</comment>
        <comment type="line" pos:line="214" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="215" pos:column="9">/// &lt;param name="sourceFileNames"&gt;The source files to generate SrcML from.&lt;/param&gt;</comment>
        <comment type="line" pos:line="216" pos:column="9">/// &lt;param name="xmlFileName"&gt;The file name to write the resulting XML to.&lt;/param&gt;</comment>
        <comment type="line" pos:line="217" pos:column="9">/// &lt;param name="language"&gt;The language to parse the source files as.&lt;/param&gt;</comment>
        <comment type="line" pos:line="218" pos:column="9">/// &lt;returns&gt;A SrcMLFile for &lt;paramref name="xmlFileName"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="219" pos:column="9">public</specifier> <name pos:line="219" pos:column="16">SrcMLFile</name></type> <name pos:line="219" pos:column="26">GenerateSrcMLFromFiles</name><parameter_list pos:line="219" pos:column="48">(<param><decl><type><name><name pos:line="219" pos:column="49">IEnumerable</name><argument_list pos:line="219" pos:column="60">&lt;<argument><name pos:line="219" pos:column="61">string</name></argument>&gt;</argument_list></name></type> <name pos:line="219" pos:column="69">sourceFileNames</name></decl></param>, <param><decl><type><name pos:line="219" pos:column="86">string</name></type> <name pos:line="219" pos:column="93">xmlFileName</name></decl></param>, <param><decl><type><name pos:line="219" pos:column="106">Language</name></type> <name pos:line="219" pos:column="115">language</name></decl></param>)</parameter_list> <block pos:line="219" pos:column="125">{
            <decl_stmt><decl><type><name pos:line="220" pos:column="13">var</name></type> <name pos:line="220" pos:column="17">additionalArguments</name> <init pos:line="220" pos:column="37">= <expr><op:operator pos:line="220" pos:column="39">new</op:operator> <call><name><name pos:line="220" pos:column="43">Collection</name><argument_list pos:line="220" pos:column="53">&lt;<argument><name pos:line="220" pos:column="54">string</name></argument>&gt;</argument_list></name><argument_list pos:line="220" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="221" pos:column="13">if<condition pos:line="221" pos:column="15">(<expr><name pos:line="221" pos:column="16">language</name> <op:operator pos:line="221" pos:column="25">&gt;</op:operator> <name><name pos:line="221" pos:column="27">Language</name><op:operator pos:line="221" pos:column="35">.</op:operator><name pos:line="221" pos:column="36">Any</name></name></expr>)</condition><then pos:line="221" pos:column="40"> <block pos:line="221" pos:column="41">{
                <expr_stmt><expr><call><name><name pos:line="222" pos:column="17">additionalArguments</name><op:operator pos:line="222" pos:column="36">.</op:operator><name pos:line="222" pos:column="37">Add</name></name><argument_list pos:line="222" pos:column="40">(<argument><expr><call><name><name pos:line="222" pos:column="41">String</name><op:operator pos:line="222" pos:column="47">.</op:operator><name pos:line="222" pos:column="48">Format</name></name><argument_list pos:line="222" pos:column="54">(<argument><expr><name><name pos:line="222" pos:column="55">CultureInfo</name><op:operator pos:line="222" pos:column="66">.</op:operator><name pos:line="222" pos:column="67">InvariantCulture</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="222" pos:column="85">"--language={0}"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="222" pos:column="103">KsuAdapter</name><op:operator pos:line="222" pos:column="113">.</op:operator><name pos:line="222" pos:column="114">GetLanguage</name></name><argument_list pos:line="222" pos:column="125">(<argument><expr><name pos:line="222" pos:column="126">language</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name pos:line="225" pos:column="13">Run</name><argument_list pos:line="225" pos:column="16">(<argument><expr><name pos:line="225" pos:column="17">xmlFileName</name></expr></argument>, <argument><expr><name pos:line="225" pos:column="30">additionalArguments</name></expr></argument>, <argument><expr><op:operator pos:line="225" pos:column="51">new</op:operator> <call><name><name pos:line="225" pos:column="55">Collection</name><argument_list pos:line="225" pos:column="65">&lt;<argument><name pos:line="225" pos:column="66">string</name></argument>&gt;</argument_list></name><argument_list pos:line="225" pos:column="73">(<argument><expr><call><name><name pos:line="225" pos:column="74">sourceFileNames</name><op:operator pos:line="225" pos:column="89">.</op:operator><name pos:line="225" pos:column="90">ToList</name></name><argument_list pos:line="225" pos:column="96">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="226" pos:column="13">return <expr><op:operator pos:line="226" pos:column="20">new</op:operator> <call><name pos:line="226" pos:column="24">SrcMLFile</name><argument_list pos:line="226" pos:column="33">(<argument><expr><name pos:line="226" pos:column="34">xmlFileName</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <cpp:endregion pos:line="229" pos:column="9">#<cpp:directive pos:line="229" pos:column="10">endregion</cpp:directive></cpp:endregion>

        <cpp:region pos:line="231" pos:column="9">#<cpp:directive pos:line="231" pos:column="10">region</cpp:directive> String Conversion</cpp:region>

        <comment type="line" pos:line="233" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="234" pos:column="9">/// Generate SrcML from a given string of source code. The source code will be parsed as C++.</comment>
        <comment type="line" pos:line="235" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="236" pos:column="9">/// &lt;param name="source"&gt;A string containing the source code to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="237" pos:column="9">/// &lt;returns&gt;XML representing the source.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="238" pos:column="9">public</specifier> <name pos:line="238" pos:column="16">string</name></type> <name pos:line="238" pos:column="23">GenerateSrcMLFromString</name><parameter_list pos:line="238" pos:column="46">(<param><decl><type><name pos:line="238" pos:column="47">string</name></type> <name pos:line="238" pos:column="54">source</name></decl></param>)</parameter_list> <block pos:line="238" pos:column="62">{
            <return pos:line="239" pos:column="13">return <expr><call><name pos:line="239" pos:column="20">GenerateSrcMLFromString</name><argument_list pos:line="239" pos:column="43">(<argument><expr><name pos:line="239" pos:column="44">source</name></expr></argument>, <argument><expr><name><name pos:line="239" pos:column="52">Language</name><op:operator pos:line="239" pos:column="60">.</op:operator><name pos:line="239" pos:column="61">CPlusPlus</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="242" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="243" pos:column="9">/// Generate SrcML from a given string of source code.</comment>
        <comment type="line" pos:line="244" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="245" pos:column="9">/// &lt;param name="source"&gt;A string containing the source code to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="246" pos:column="9">/// &lt;param name="language"&gt;The language to parse the string as. Language.Any is not valid.&lt;/param&gt;</comment>
        <comment type="line" pos:line="247" pos:column="9">/// &lt;returns&gt;XML representing the source.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="248" pos:column="9">public</specifier> <name pos:line="248" pos:column="16">string</name></type> <name pos:line="248" pos:column="23">GenerateSrcMLFromString</name><parameter_list pos:line="248" pos:column="46">(<param><decl><type><name pos:line="248" pos:column="47">string</name></type> <name pos:line="248" pos:column="54">source</name></decl></param>, <param><decl><type><name pos:line="248" pos:column="62">Language</name></type> <name pos:line="248" pos:column="71">language</name></decl></param>)</parameter_list> <block pos:line="248" pos:column="81">{
            <if pos:line="249" pos:column="13">if<condition pos:line="249" pos:column="15">(<expr><name pos:line="249" pos:column="16">language</name> <op:operator pos:line="249" pos:column="25">==</op:operator> <name><name pos:line="249" pos:column="28">Language</name><op:operator pos:line="249" pos:column="36">.</op:operator><name pos:line="249" pos:column="37">Any</name></name></expr>)</condition><then pos:line="249" pos:column="41"> <block pos:line="249" pos:column="42">{
                <throw pos:line="250" pos:column="17">throw <expr><op:operator pos:line="250" pos:column="23">new</op:operator> <call><name pos:line="250" pos:column="27">SrcMLException</name><argument_list pos:line="250" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="250" pos:column="42">"Any is not a valid language. Pick an actual language in the enumeration"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <decl_stmt><decl><type><name><name pos:line="253" pos:column="13">Collection</name><argument_list pos:line="253" pos:column="23">&lt;<argument><name pos:line="253" pos:column="24">string</name></argument>&gt;</argument_list></name></type> <name pos:line="253" pos:column="32">arguments</name> <init pos:line="253" pos:column="42">= <expr><op:operator pos:line="253" pos:column="44">new</op:operator> <call><name><name pos:line="253" pos:column="48">Collection</name><argument_list pos:line="253" pos:column="58">&lt;<argument><name pos:line="253" pos:column="59">string</name></argument>&gt;</argument_list></name><argument_list pos:line="253" pos:column="66">(<argument><expr><name><name pos:line="253" pos:column="67">this</name><op:operator pos:line="253" pos:column="71">.</op:operator><name pos:line="253" pos:column="72">NamespaceArguments</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="254" pos:column="13">arguments</name><op:operator pos:line="254" pos:column="22">.</op:operator><name pos:line="254" pos:column="23">Add</name></name><argument_list pos:line="254" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="254" pos:column="27">"--no-xml-declaration"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="255" pos:column="13">arguments</name><op:operator pos:line="255" pos:column="22">.</op:operator><name pos:line="255" pos:column="23">Add</name></name><argument_list pos:line="255" pos:column="26">(<argument><expr><call><name><name pos:line="255" pos:column="27">String</name><op:operator pos:line="255" pos:column="33">.</op:operator><name pos:line="255" pos:column="34">Format</name></name><argument_list pos:line="255" pos:column="40">(<argument><expr><name><name pos:line="255" pos:column="41">CultureInfo</name><op:operator pos:line="255" pos:column="52">.</op:operator><name pos:line="255" pos:column="53">InvariantCulture</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="255" pos:column="71">"--language={0}"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="255" pos:column="89">KsuAdapter</name><op:operator pos:line="255" pos:column="99">.</op:operator><name pos:line="255" pos:column="100">GetLanguage</name></name><argument_list pos:line="255" pos:column="111">(<argument><expr><name pos:line="255" pos:column="112">language</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="257" pos:column="13">var</name></type> <name pos:line="257" pos:column="17">xml</name> <init pos:line="257" pos:column="21">= <expr><call><name pos:line="257" pos:column="23">Run</name><argument_list pos:line="257" pos:column="26">(<argument><expr><name pos:line="257" pos:column="27">arguments</name></expr></argument>, <argument><expr><name pos:line="257" pos:column="38">source</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="258" pos:column="13">return <expr><name pos:line="258" pos:column="20">xml</name></expr>;</return>
        }</block></function>

        <cpp:endregion pos:line="261" pos:column="9">#<cpp:directive pos:line="261" pos:column="10">endregion</cpp:directive></cpp:endregion>
    }</block></class>
}</block></namespace>
</unit>
