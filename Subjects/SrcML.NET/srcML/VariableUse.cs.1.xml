<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data\VariableUse.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2013 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *    Patrick Francis (ABB Group) - API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="13" pos:column="1">using <name pos:line="13" pos:column="7">System</name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Collections</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">Generic</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Linq</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Xml</name></name>;</using>

<namespace pos:line="18" pos:column="1">namespace <name><name pos:line="18" pos:column="11">ABB</name><op:operator pos:line="18" pos:column="14">.</op:operator><name pos:line="18" pos:column="15">SrcML</name><op:operator pos:line="18" pos:column="20">.</op:operator><name pos:line="18" pos:column="21">Data</name></name> <block pos:line="18" pos:column="26">{

    <comment type="line" pos:line="20" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="21" pos:column="5">/// The variable use class represents a use of a variable.</comment>
    <comment type="line" pos:line="22" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="23" pos:column="5">public</specifier> class <name pos:line="23" pos:column="18">VariableUse</name> <super pos:line="23" pos:column="30">: <name pos:line="23" pos:column="32">NameUse</name></super> <block pos:line="23" pos:column="40">{
        <decl_stmt><decl><type><specifier pos:line="24" pos:column="9">private</specifier> <name pos:line="24" pos:column="17">Expression</name></type> <name pos:line="24" pos:column="28">indexExpression</name></decl>;</decl_stmt>
        
        <comment type="line" pos:line="26" pos:column="9">/// &lt;summary&gt; The XML name for VariableUse &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="27" pos:column="9">public</specifier> <specifier pos:line="27" pos:column="16">new</specifier> <specifier pos:line="27" pos:column="20">const</specifier> <name pos:line="27" pos:column="26">string</name></type> <name pos:line="27" pos:column="33">XmlName</name> <init pos:line="27" pos:column="41">= <expr><lit:literal type="string" pos:line="27" pos:column="43">"vu"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="29" pos:column="9">/// &lt;summary&gt; XML Name for &lt;see cref="Index" /&gt; &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="30" pos:column="9">public</specifier> <specifier pos:line="30" pos:column="16">const</specifier> <name pos:line="30" pos:column="22">string</name></type> <name pos:line="30" pos:column="29">XmlIndexName</name> <init pos:line="30" pos:column="42">= <expr><lit:literal type="string" pos:line="30" pos:column="44">"idx"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="32" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="33" pos:column="9">/// The expression supplied as an index to the variable, if any.</comment>
        <comment type="line" pos:line="34" pos:column="9">/// For example, in myVar[17] the index is 17.</comment>
        <comment type="line" pos:line="35" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="36" pos:column="9">public</specifier> <name pos:line="36" pos:column="16">Expression</name></type> <name pos:line="36" pos:column="27">Index</name> <block pos:line="36" pos:column="33">{
            <function><name pos:line="37" pos:column="13">get</name> <block pos:line="37" pos:column="17">{ <return pos:line="37" pos:column="19">return <expr><name pos:line="37" pos:column="26">indexExpression</name></expr>;</return> }</block></function>
            <function><name pos:line="38" pos:column="13">set</name> <block pos:line="38" pos:column="17">{
                <expr_stmt><expr><name pos:line="39" pos:column="17">indexExpression</name> <op:operator pos:line="39" pos:column="33">=</op:operator> <name pos:line="39" pos:column="35">value</name></expr>;</expr_stmt>
                <if pos:line="40" pos:column="17">if<condition pos:line="40" pos:column="19">(<expr><name pos:line="40" pos:column="20">indexExpression</name> <op:operator pos:line="40" pos:column="36">!=</op:operator> <name pos:line="40" pos:column="39">null</name></expr>)</condition><then pos:line="40" pos:column="44"> <block pos:line="40" pos:column="45">{
                    <expr_stmt><expr><name><name pos:line="41" pos:column="21">indexExpression</name><op:operator pos:line="41" pos:column="36">.</op:operator><name pos:line="41" pos:column="37">ParentExpression</name></name> <op:operator pos:line="41" pos:column="54">=</op:operator> <name pos:line="41" pos:column="56">this</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="42" pos:column="21">indexExpression</name><op:operator pos:line="42" pos:column="36">.</op:operator><name pos:line="42" pos:column="37">ParentStatement</name></name> <op:operator pos:line="42" pos:column="53">=</op:operator> <name><name pos:line="42" pos:column="55">this</name><op:operator pos:line="42" pos:column="59">.</op:operator><name pos:line="42" pos:column="60">ParentStatement</name></name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="47" pos:column="9">/// &lt;summary&gt; The statement containing this expression. &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="48" pos:column="9">public</specifier> <specifier pos:line="48" pos:column="16">override</specifier> <name pos:line="48" pos:column="25">Statement</name></type> <name pos:line="48" pos:column="35">ParentStatement</name> <block pos:line="48" pos:column="51">{
            <function><name pos:line="49" pos:column="13">get</name> <block pos:line="49" pos:column="17">{ <return pos:line="49" pos:column="19">return <expr><name><name pos:line="49" pos:column="26">base</name><op:operator pos:line="49" pos:column="30">.</op:operator><name pos:line="49" pos:column="31">ParentStatement</name></name></expr>;</return> }</block></function>
            <function><name pos:line="50" pos:column="13">set</name> <block pos:line="50" pos:column="17">{
                <expr_stmt><expr><name><name pos:line="51" pos:column="17">base</name><op:operator pos:line="51" pos:column="21">.</op:operator><name pos:line="51" pos:column="22">ParentStatement</name></name> <op:operator pos:line="51" pos:column="38">=</op:operator> <name pos:line="51" pos:column="40">value</name></expr>;</expr_stmt>
                <if pos:line="52" pos:column="17">if<condition pos:line="52" pos:column="19">(<expr><name pos:line="52" pos:column="20">Index</name> <op:operator pos:line="52" pos:column="26">!=</op:operator> <name pos:line="52" pos:column="29">null</name></expr>)</condition><then pos:line="52" pos:column="34"> <block pos:line="52" pos:column="35">{ <expr_stmt><expr><name><name pos:line="52" pos:column="37">Index</name><op:operator pos:line="52" pos:column="42">.</op:operator><name pos:line="52" pos:column="43">ParentStatement</name></name> <op:operator pos:line="52" pos:column="59">=</op:operator> <name pos:line="52" pos:column="61">value</name></expr>;</expr_stmt> }</block></then></if>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="56" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="57" pos:column="9">/// Returns the child expressions, including the Index.</comment>
        <comment type="line" pos:line="58" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="59" pos:column="9">protected</specifier> <specifier pos:line="59" pos:column="19">override</specifier> <name><name pos:line="59" pos:column="28">IEnumerable</name><argument_list pos:line="59" pos:column="39">&lt;<argument><name pos:line="59" pos:column="40">AbstractProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="59" pos:column="64">GetChildren</name><parameter_list pos:line="59" pos:column="75">()</parameter_list> <block pos:line="59" pos:column="78">{
            <if pos:line="60" pos:column="13">if<condition pos:line="60" pos:column="15">(<expr><name pos:line="60" pos:column="16">Index</name> <op:operator pos:line="60" pos:column="22">!=</op:operator> <name pos:line="60" pos:column="25">null</name></expr>)</condition><then pos:line="60" pos:column="30"> <block pos:line="60" pos:column="31">{
                <return pos:line="61" pos:column="17">return <expr><call><name><name pos:line="61" pos:column="24">base</name><op:operator pos:line="61" pos:column="28">.</op:operator><name pos:line="61" pos:column="29">GetChildren</name></name><argument_list pos:line="61" pos:column="40">()</argument_list></call><op:operator pos:line="61" pos:column="42">.</op:operator><call><name pos:line="61" pos:column="43">Concat</name><argument_list pos:line="61" pos:column="49">(<argument><expr><call><name><name pos:line="61" pos:column="50">Enumerable</name><op:operator pos:line="61" pos:column="60">.</op:operator><name pos:line="61" pos:column="61">Repeat</name></name><argument_list pos:line="61" pos:column="67">(<argument><expr><name pos:line="61" pos:column="68">Index</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="61" pos:column="75">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then> <else pos:line="62" pos:column="15">else <block pos:line="62" pos:column="20">{
                <return pos:line="63" pos:column="17">return <expr><call><name><name pos:line="63" pos:column="24">base</name><op:operator pos:line="63" pos:column="28">.</op:operator><name pos:line="63" pos:column="29">GetChildren</name></name><argument_list pos:line="63" pos:column="40">()</argument_list></call></expr>;</return>
            }</block></else></if>
        }</block></function>

        <comment type="line" pos:line="67" pos:column="9">/// &lt;summary&gt; Returns a string representation of this object. &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="68" pos:column="9">public</specifier> <specifier pos:line="68" pos:column="16">override</specifier> <name pos:line="68" pos:column="25">string</name></type> <name pos:line="68" pos:column="32">ToString</name><parameter_list pos:line="68" pos:column="40">()</parameter_list> <block pos:line="68" pos:column="43">{
            <if pos:line="69" pos:column="13">if<condition pos:line="69" pos:column="15">(<expr><name pos:line="69" pos:column="16">Index</name> <op:operator pos:line="69" pos:column="22">!=</op:operator> <name pos:line="69" pos:column="25">null</name></expr>)</condition><then pos:line="69" pos:column="30"> <block pos:line="69" pos:column="31">{
                <return pos:line="70" pos:column="17">return <expr><call><name><name pos:line="70" pos:column="24">string</name><op:operator pos:line="70" pos:column="30">.</op:operator><name pos:line="70" pos:column="31">Format</name></name><argument_list pos:line="70" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="70" pos:column="38">"{0}[{1}]"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="70" pos:column="50">base</name><op:operator pos:line="70" pos:column="54">.</op:operator><name pos:line="70" pos:column="55">ToString</name></name><argument_list pos:line="70" pos:column="63">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="70" pos:column="67">Index</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then> <else pos:line="71" pos:column="15">else <block pos:line="71" pos:column="20">{
                <return pos:line="72" pos:column="17">return <expr><call><name><name pos:line="72" pos:column="24">base</name><op:operator pos:line="72" pos:column="28">.</op:operator><name pos:line="72" pos:column="29">ToString</name></name><argument_list pos:line="72" pos:column="37">()</argument_list></call></expr>;</return>
            }</block></else></if>
        }</block></function>
        

        <comment type="line" pos:line="77" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="78" pos:column="9">/// Gets the first result from &lt;see cref="ResolveType"/&gt;</comment>
        <comment type="line" pos:line="79" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="80" pos:column="9">/// &lt;returns&gt;The first matching variable type definition&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="81" pos:column="9">public</specifier> <name pos:line="81" pos:column="16">TypeDefinition</name></type> <name pos:line="81" pos:column="31">FindFirstMatchingType</name><parameter_list pos:line="81" pos:column="52">()</parameter_list> <block pos:line="81" pos:column="55">{
            <return pos:line="82" pos:column="13">return <expr><call><name pos:line="82" pos:column="20">ResolveType</name><argument_list pos:line="82" pos:column="31">()</argument_list></call><op:operator pos:line="82" pos:column="33">.</op:operator><call><name pos:line="82" pos:column="34">FirstOrDefault</name><argument_list pos:line="82" pos:column="48">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="85" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="86" pos:column="9">/// Finds variable declarations that match this name.</comment>
        <comment type="line" pos:line="87" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="88" pos:column="9">/// &lt;returns&gt;An enumerable of possible matches for this variable use.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="89" pos:column="9">public</specifier> <specifier pos:line="89" pos:column="16">override</specifier> <name><name pos:line="89" pos:column="25">IEnumerable</name><argument_list pos:line="89" pos:column="36">&lt;<argument><name pos:line="89" pos:column="37">INamedEntity</name></argument>&gt;</argument_list></name></type> <name pos:line="89" pos:column="51">FindMatches</name><parameter_list pos:line="89" pos:column="62">()</parameter_list> <block pos:line="89" pos:column="65">{
            <if pos:line="90" pos:column="13">if<condition pos:line="90" pos:column="15">(<expr><name pos:line="90" pos:column="16">ParentStatement</name> <op:operator pos:line="90" pos:column="32">==</op:operator> <name pos:line="90" pos:column="35">null</name></expr>)</condition><then pos:line="90" pos:column="40"> <block pos:line="90" pos:column="41">{
                <throw pos:line="91" pos:column="17">throw <expr><op:operator pos:line="91" pos:column="23">new</op:operator> <call><name pos:line="91" pos:column="27">InvalidOperationException</name><argument_list pos:line="91" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="91" pos:column="53">"ParentStatement is null"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <if pos:line="94" pos:column="13">if<condition pos:line="94" pos:column="15">(<expr><name pos:line="94" pos:column="16">Name</name> <op:operator pos:line="94" pos:column="21">==</op:operator> <lit:literal type="string" pos:line="94" pos:column="24">"this"</lit:literal> <op:operator pos:line="94" pos:column="31">&amp;&amp;</op:operator> <name pos:line="94" pos:column="34">ProgrammingLanguage</name> <op:operator pos:line="94" pos:column="54">!=</op:operator> <name><name pos:line="94" pos:column="57">Language</name><op:operator pos:line="94" pos:column="65">.</op:operator><name pos:line="94" pos:column="66">C</name></name></expr>)</condition><then pos:line="94" pos:column="68"> <block pos:line="94" pos:column="69">{
                <comment type="line" pos:line="95" pos:column="17">//return nothing, because we don't have a variable declaration to return</comment>
                <return pos:line="96" pos:column="17">return <expr><call><name><name pos:line="96" pos:column="24">Enumerable</name><op:operator pos:line="96" pos:column="34">.</op:operator><name><name pos:line="96" pos:column="35">Empty</name><argument_list pos:line="96" pos:column="40">&lt;<argument><name pos:line="96" pos:column="41">INamedEntity</name></argument>&gt;</argument_list></name></name><argument_list pos:line="96" pos:column="54">()</argument_list></call></expr>;</return>
            }</block></then></if>

            <comment type="line" pos:line="99" pos:column="13">//If there's a prefix, resolve that and search under results</comment>
            <if pos:line="100" pos:column="13">if<condition pos:line="100" pos:column="15">(<expr><name pos:line="100" pos:column="16">Prefix</name> <op:operator pos:line="100" pos:column="23">!=</op:operator> <name pos:line="100" pos:column="26">null</name></expr>)</condition><then pos:line="100" pos:column="31"> <block pos:line="100" pos:column="32">{
                <return pos:line="101" pos:column="17">return <expr><call><name><name pos:line="101" pos:column="24">Prefix</name><op:operator pos:line="101" pos:column="30">.</op:operator><name pos:line="101" pos:column="31">FindMatches</name></name><argument_list pos:line="101" pos:column="42">()</argument_list></call><op:operator pos:line="101" pos:column="44">.</op:operator><call><name pos:line="101" pos:column="45">SelectMany</name><argument_list pos:line="101" pos:column="55">(<argument><expr><lambda><name pos:line="101" pos:column="56">ns</name> <op:operator pos:line="101" pos:column="59">=&gt;</op:operator> <call><name><name pos:line="101" pos:column="62">ns</name><op:operator pos:line="101" pos:column="64">.</op:operator><name pos:line="101" pos:column="65">GetNamedChildren</name></name><argument_list pos:line="101" pos:column="81">(<argument><expr><name><name pos:line="101" pos:column="82">this</name><op:operator pos:line="101" pos:column="86">.</op:operator><name pos:line="101" pos:column="87">Name</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="101" pos:column="93">.</op:operator><call><name pos:line="101" pos:column="94">Where</name><argument_list pos:line="101" pos:column="99">(<argument><expr><lambda><name pos:line="101" pos:column="100">n</name> <op:operator pos:line="101" pos:column="102">=&gt;</op:operator> <name pos:line="101" pos:column="105">n</name> <op:operator pos:line="101" pos:column="107">is</op:operator> <name pos:line="101" pos:column="110">VariableDeclaration</name> <op:operator pos:line="101" pos:column="130">||</op:operator> <name pos:line="101" pos:column="133">n</name> <op:operator pos:line="101" pos:column="135">is</op:operator> <name pos:line="101" pos:column="138">PropertyDefinition</name></lambda></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>

            <comment type="line" pos:line="104" pos:column="13">//If there's a calling expression, match and search under results</comment>
            <decl_stmt><decl><type><name pos:line="105" pos:column="13">var</name></type> <name pos:line="105" pos:column="17">callingScopes</name> <init pos:line="105" pos:column="31">= <expr><call><name pos:line="105" pos:column="33">GetCallingScope</name><argument_list pos:line="105" pos:column="48">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="106" pos:column="13">if<condition pos:line="106" pos:column="15">(<expr><name pos:line="106" pos:column="16">callingScopes</name> <op:operator pos:line="106" pos:column="30">!=</op:operator> <name pos:line="106" pos:column="33">null</name></expr>)</condition><then pos:line="106" pos:column="38"> <block pos:line="106" pos:column="39">{
                <decl_stmt><decl><type><name><name pos:line="107" pos:column="17">IEnumerable</name><argument_list pos:line="107" pos:column="28">&lt;<argument><name pos:line="107" pos:column="29">INamedEntity</name></argument>&gt;</argument_list></name></type> <name pos:line="107" pos:column="43">matches</name> <init pos:line="107" pos:column="51">= <expr><call><name><name pos:line="107" pos:column="53">Enumerable</name><op:operator pos:line="107" pos:column="63">.</op:operator><name><name pos:line="107" pos:column="64">Empty</name><argument_list pos:line="107" pos:column="69">&lt;<argument><name pos:line="107" pos:column="70">INamedEntity</name></argument>&gt;</argument_list></name></name><argument_list pos:line="107" pos:column="83">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <foreach pos:line="108" pos:column="17">foreach(<init><decl><type><name pos:line="108" pos:column="25">var</name></type> <name pos:line="108" pos:column="29">scope</name> <range pos:line="108" pos:column="35">in <expr><name pos:line="108" pos:column="38">callingScopes</name></expr></range></decl></init>) <block pos:line="108" pos:column="53">{
                    <decl_stmt><decl><type><name pos:line="109" pos:column="21">var</name></type> <name pos:line="109" pos:column="25">localMatches</name> <init pos:line="109" pos:column="38">= <expr><call><name><name pos:line="109" pos:column="40">scope</name><op:operator pos:line="109" pos:column="45">.</op:operator><name pos:line="109" pos:column="46">GetNamedChildren</name></name><argument_list pos:line="109" pos:column="62">(<argument><expr><name><name pos:line="109" pos:column="63">this</name><op:operator pos:line="109" pos:column="67">.</op:operator><name pos:line="109" pos:column="68">Name</name></name></expr></argument>)</argument_list></call><op:operator pos:line="109" pos:column="73">.</op:operator><call><name pos:line="109" pos:column="74">Where</name><argument_list pos:line="109" pos:column="79">(<argument><expr><lambda><name pos:line="109" pos:column="80">n</name> <op:operator pos:line="109" pos:column="82">=&gt;</op:operator> <name pos:line="109" pos:column="85">n</name> <op:operator pos:line="109" pos:column="87">is</op:operator> <name pos:line="109" pos:column="90">VariableDeclaration</name> <op:operator pos:line="109" pos:column="110">||</op:operator> <name pos:line="109" pos:column="113">n</name> <op:operator pos:line="109" pos:column="115">is</op:operator> <name pos:line="109" pos:column="118">PropertyDefinition</name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="109" pos:column="137">.</op:operator><call><name pos:line="109" pos:column="138">ToList</name><argument_list pos:line="109" pos:column="144">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="110" pos:column="21">var</name></type> <name pos:line="110" pos:column="25">callingType</name> <init pos:line="110" pos:column="37">= <expr><name pos:line="110" pos:column="39">scope</name> <op:operator pos:line="110" pos:column="45">as</op:operator> <name pos:line="110" pos:column="48">TypeDefinition</name></expr></init></decl>;</decl_stmt>
                    <if pos:line="111" pos:column="21">if<condition pos:line="111" pos:column="23">(<expr><op:operator pos:line="111" pos:column="24">!</op:operator><call><name><name pos:line="111" pos:column="25">localMatches</name><op:operator pos:line="111" pos:column="37">.</op:operator><name pos:line="111" pos:column="38">Any</name></name><argument_list pos:line="111" pos:column="41">()</argument_list></call> <op:operator pos:line="111" pos:column="44">&amp;&amp;</op:operator> <name pos:line="111" pos:column="47">callingType</name> <op:operator pos:line="111" pos:column="59">!=</op:operator> <name pos:line="111" pos:column="62">null</name></expr>)</condition><then pos:line="111" pos:column="67"> <block pos:line="111" pos:column="68">{
                        <comment type="line" pos:line="112" pos:column="25">//also search under the base types of the calling scope</comment>
                        <expr_stmt><expr><name pos:line="113" pos:column="25">matches</name> <op:operator pos:line="113" pos:column="33">=</op:operator> <call><name><name pos:line="113" pos:column="35">matches</name><op:operator pos:line="113" pos:column="42">.</op:operator><name pos:line="113" pos:column="43">Concat</name></name><argument_list pos:line="113" pos:column="49">(<argument><expr><call><name><name pos:line="113" pos:column="50">callingType</name><op:operator pos:line="113" pos:column="61">.</op:operator><name><name pos:line="113" pos:column="62">SearchParentTypes</name><argument_list pos:line="113" pos:column="79">&lt;<argument><name pos:line="113" pos:column="80">INamedEntity</name></argument>&gt;</argument_list></name></name><argument_list pos:line="113" pos:column="93">(<argument><expr><name><name pos:line="113" pos:column="94">this</name><op:operator pos:line="113" pos:column="98">.</op:operator><name pos:line="113" pos:column="99">Name</name></name></expr></argument>, <argument><expr><lambda><name pos:line="113" pos:column="105">n</name> <op:operator pos:line="113" pos:column="107">=&gt;</op:operator> <name pos:line="113" pos:column="110">n</name> <op:operator pos:line="113" pos:column="112">is</op:operator> <name pos:line="113" pos:column="115">VariableDeclaration</name> <op:operator pos:line="113" pos:column="135">||</op:operator> <name pos:line="113" pos:column="138">n</name> <op:operator pos:line="113" pos:column="140">is</op:operator> <name pos:line="113" pos:column="143">PropertyDefinition</name></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else pos:line="114" pos:column="23">else <block pos:line="114" pos:column="28">{
                        <expr_stmt><expr><name pos:line="115" pos:column="25">matches</name> <op:operator pos:line="115" pos:column="33">=</op:operator> <call><name><name pos:line="115" pos:column="35">matches</name><op:operator pos:line="115" pos:column="42">.</op:operator><name pos:line="115" pos:column="43">Concat</name></name><argument_list pos:line="115" pos:column="49">(<argument><expr><name pos:line="115" pos:column="50">localMatches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></foreach>
                <return pos:line="118" pos:column="17">return <expr><name pos:line="118" pos:column="24">matches</name></expr>;</return>
            }</block></then></if>

            <comment type="line" pos:line="121" pos:column="13">//search enclosing scopes and base types</comment>
            <foreach pos:line="122" pos:column="13">foreach(<init><decl><type><name pos:line="122" pos:column="21">var</name></type> <name pos:line="122" pos:column="25">scope</name> <range pos:line="122" pos:column="31">in <expr><call><name><name pos:line="122" pos:column="34">ParentStatement</name><op:operator pos:line="122" pos:column="49">.</op:operator><name pos:line="122" pos:column="50">GetAncestors</name></name><argument_list pos:line="122" pos:column="62">()</argument_list></call></expr></range></decl></init>) <block pos:line="122" pos:column="66">{
                <decl_stmt><decl><type><name pos:line="123" pos:column="17">var</name></type> <name pos:line="123" pos:column="21">matches</name> <init pos:line="123" pos:column="29">= <expr><call><name><name pos:line="123" pos:column="31">scope</name><op:operator pos:line="123" pos:column="36">.</op:operator><name pos:line="123" pos:column="37">GetNamedChildren</name></name><argument_list pos:line="123" pos:column="53">(<argument><expr><name pos:line="123" pos:column="54">this</name></expr></argument>)</argument_list></call><op:operator pos:line="123" pos:column="59">.</op:operator><call><name pos:line="123" pos:column="60">Where</name><argument_list pos:line="123" pos:column="65">(<argument><expr><lambda><name pos:line="123" pos:column="66">e</name> <op:operator pos:line="123" pos:column="68">=&gt;</op:operator> <name pos:line="123" pos:column="71">e</name> <op:operator pos:line="123" pos:column="73">is</op:operator> <name pos:line="123" pos:column="76">VariableDeclaration</name> <op:operator pos:line="123" pos:column="96">||</op:operator> <name pos:line="123" pos:column="99">e</name> <op:operator pos:line="123" pos:column="101">is</op:operator> <name pos:line="123" pos:column="104">PropertyDefinition</name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="123" pos:column="123">.</op:operator><call><name pos:line="123" pos:column="124">ToList</name><argument_list pos:line="123" pos:column="130">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="124" pos:column="17">if<condition pos:line="124" pos:column="19">(<expr><call><name><name pos:line="124" pos:column="20">matches</name><op:operator pos:line="124" pos:column="27">.</op:operator><name pos:line="124" pos:column="28">Any</name></name><argument_list pos:line="124" pos:column="31">()</argument_list></call></expr>)</condition><then pos:line="124" pos:column="34"> <block pos:line="124" pos:column="35">{
                    <return pos:line="125" pos:column="21">return <expr><name pos:line="125" pos:column="28">matches</name></expr>;</return>
                }</block></then></if>
                <decl_stmt><decl><type><name pos:line="127" pos:column="17">var</name></type> <name pos:line="127" pos:column="21">expMatches</name> <init pos:line="127" pos:column="32">= <expr><op:operator pos:line="127" pos:column="34">(</op:operator><linq><from pos:line="127" pos:column="35">from <expr><name pos:line="127" pos:column="40">decl</name></expr> <in pos:line="127" pos:column="45">in <expr><call><name><name pos:line="127" pos:column="48">scope</name><op:operator pos:line="127" pos:column="53">.</op:operator><name pos:line="127" pos:column="54">GetExpressions</name></name><argument_list pos:line="127" pos:column="68">()</argument_list></call><op:operator pos:line="127" pos:column="70">.</op:operator><call><name pos:line="127" pos:column="71">SelectMany</name><argument_list pos:line="127" pos:column="81">(<argument><expr><lambda><name pos:line="127" pos:column="82">e</name> <op:operator pos:line="127" pos:column="84">=&gt;</op:operator> <call><name><name pos:line="127" pos:column="87">e</name><op:operator pos:line="127" pos:column="88">.</op:operator><name><name pos:line="127" pos:column="89">GetDescendantsAndSelf</name><argument_list pos:line="127" pos:column="110">&lt;<argument><name pos:line="127" pos:column="111">VariableDeclaration</name></argument>&gt;</argument_list></name></name><argument_list pos:line="127" pos:column="131">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></in></from>
                                  <where pos:line="128" pos:column="35">where <expr><name><name pos:line="128" pos:column="41">decl</name><op:operator pos:line="128" pos:column="45">.</op:operator><name pos:line="128" pos:column="46">Name</name></name> <op:operator pos:line="128" pos:column="51">==</op:operator> <name><name pos:line="128" pos:column="54">this</name><op:operator pos:line="128" pos:column="58">.</op:operator><name pos:line="128" pos:column="59">Name</name></name></expr></where>
                                  <select pos:line="129" pos:column="35">select <expr><name pos:line="129" pos:column="42">decl</name></expr></select></linq><op:operator pos:line="129" pos:column="46">)</op:operator><op:operator pos:line="129" pos:column="47">.</op:operator><call><name pos:line="129" pos:column="48">ToList</name><argument_list pos:line="129" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="130" pos:column="17">if<condition pos:line="130" pos:column="19">(<expr><call><name><name pos:line="130" pos:column="20">expMatches</name><op:operator pos:line="130" pos:column="30">.</op:operator><name pos:line="130" pos:column="31">Any</name></name><argument_list pos:line="130" pos:column="34">()</argument_list></call></expr>)</condition><then pos:line="130" pos:column="37"> <block pos:line="130" pos:column="38">{
                    <return pos:line="131" pos:column="21">return <expr><name pos:line="131" pos:column="28">expMatches</name></expr>;</return>
                }</block></then></if>
                <decl_stmt><decl><type><name pos:line="133" pos:column="17">var</name></type> <name pos:line="133" pos:column="21">typeDef</name> <init pos:line="133" pos:column="29">= <expr><name pos:line="133" pos:column="31">scope</name> <op:operator pos:line="133" pos:column="37">as</op:operator> <name pos:line="133" pos:column="40">TypeDefinition</name></expr></init></decl>;</decl_stmt>
                <if pos:line="134" pos:column="17">if<condition pos:line="134" pos:column="19">(<expr><name pos:line="134" pos:column="20">typeDef</name> <op:operator pos:line="134" pos:column="28">!=</op:operator> <name pos:line="134" pos:column="31">null</name></expr>)</condition><then pos:line="134" pos:column="36"> <block pos:line="134" pos:column="37">{
                    <decl_stmt><decl><type><name pos:line="135" pos:column="21">var</name></type> <name pos:line="135" pos:column="25">baseTypeMatches</name> <init pos:line="135" pos:column="41">= <expr><call><name><name pos:line="135" pos:column="43">typeDef</name><op:operator pos:line="135" pos:column="50">.</op:operator><name><name pos:line="135" pos:column="51">SearchParentTypes</name><argument_list pos:line="135" pos:column="68">&lt;<argument><name pos:line="135" pos:column="69">INamedEntity</name></argument>&gt;</argument_list></name></name><argument_list pos:line="135" pos:column="82">(<argument><expr><name><name pos:line="135" pos:column="83">this</name><op:operator pos:line="135" pos:column="87">.</op:operator><name pos:line="135" pos:column="88">Name</name></name></expr></argument>, <argument><expr><lambda><name pos:line="135" pos:column="94">e</name> <op:operator pos:line="135" pos:column="96">=&gt;</op:operator> <name pos:line="135" pos:column="99">e</name> <op:operator pos:line="135" pos:column="101">is</op:operator> <name pos:line="135" pos:column="104">VariableDeclaration</name> <op:operator pos:line="135" pos:column="124">||</op:operator> <name pos:line="135" pos:column="127">e</name> <op:operator pos:line="135" pos:column="129">is</op:operator> <name pos:line="135" pos:column="132">PropertyDefinition</name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="135" pos:column="151">.</op:operator><call><name pos:line="135" pos:column="152">ToList</name><argument_list pos:line="135" pos:column="158">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="136" pos:column="21">if<condition pos:line="136" pos:column="23">(<expr><call><name><name pos:line="136" pos:column="24">baseTypeMatches</name><op:operator pos:line="136" pos:column="39">.</op:operator><name pos:line="136" pos:column="40">Any</name></name><argument_list pos:line="136" pos:column="43">()</argument_list></call></expr>)</condition><then pos:line="136" pos:column="46"> <block pos:line="136" pos:column="47">{
                        <return pos:line="137" pos:column="25">return <expr><name pos:line="137" pos:column="32">baseTypeMatches</name></expr>;</return>
                    }</block></then></if>
                }</block></then></if>
            }</block></foreach>

            <comment type="line" pos:line="142" pos:column="13">//search if there is an alias for this name</comment>
            <foreach pos:line="143" pos:column="13">foreach(<init><decl><type><name pos:line="143" pos:column="21">var</name></type> <name pos:line="143" pos:column="25">alias</name> <range pos:line="143" pos:column="31">in <expr><call><name pos:line="143" pos:column="34">GetAliases</name><argument_list pos:line="143" pos:column="44">()</argument_list></call></expr></range></decl></init>) <block pos:line="143" pos:column="48">{
                <if pos:line="144" pos:column="17">if<condition pos:line="144" pos:column="19">(<expr><name><name pos:line="144" pos:column="20">alias</name><op:operator pos:line="144" pos:column="25">.</op:operator><name pos:line="144" pos:column="26">AliasName</name></name> <op:operator pos:line="144" pos:column="36">==</op:operator> <name><name pos:line="144" pos:column="39">this</name><op:operator pos:line="144" pos:column="43">.</op:operator><name pos:line="144" pos:column="44">Name</name></name></expr>)</condition><then pos:line="144" pos:column="49"> <block pos:line="144" pos:column="50">{
                    <decl_stmt><decl><type><name pos:line="145" pos:column="21">var</name></type> <name pos:line="145" pos:column="25">targetName</name> <init pos:line="145" pos:column="36">= <expr><name><name pos:line="145" pos:column="38">alias</name><op:operator pos:line="145" pos:column="43">.</op:operator><name pos:line="145" pos:column="44">Target</name></name> <op:operator pos:line="145" pos:column="51">as</op:operator> <name pos:line="145" pos:column="54">NameUse</name></expr></init></decl>;</decl_stmt>
                    <if pos:line="146" pos:column="21">if<condition pos:line="146" pos:column="23">(<expr><name pos:line="146" pos:column="24">targetName</name> <op:operator pos:line="146" pos:column="35">==</op:operator> <name pos:line="146" pos:column="38">null</name></expr>)</condition><then pos:line="146" pos:column="43"> <block pos:line="146" pos:column="44">{
                        <comment type="line" pos:line="147" pos:column="25">//Target is not a NameUse, probably an Expression</comment>
                        <expr_stmt><expr><name pos:line="148" pos:column="25">targetName</name> <op:operator pos:line="148" pos:column="36">=</op:operator> <call><name><name pos:line="148" pos:column="38">alias</name><op:operator pos:line="148" pos:column="43">.</op:operator><name pos:line="148" pos:column="44">Target</name><op:operator pos:line="148" pos:column="50">.</op:operator><name><name pos:line="148" pos:column="51">GetDescendantsAndSelf</name><argument_list pos:line="148" pos:column="72">&lt;<argument><name pos:line="148" pos:column="73">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="148" pos:column="81">()</argument_list></call><op:operator pos:line="148" pos:column="83">.</op:operator><call><name pos:line="148" pos:column="84">LastOrDefault</name><argument_list pos:line="148" pos:column="97">()</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <if pos:line="150" pos:column="21">if<condition pos:line="150" pos:column="23">(<expr><name pos:line="150" pos:column="24">targetName</name> <op:operator pos:line="150" pos:column="35">!=</op:operator> <name pos:line="150" pos:column="38">null</name></expr>)</condition><then pos:line="150" pos:column="43"> <block pos:line="150" pos:column="44">{
                        <return pos:line="151" pos:column="25">return <expr><call><name><name pos:line="151" pos:column="32">targetName</name><op:operator pos:line="151" pos:column="42">.</op:operator><name pos:line="151" pos:column="43">FindMatches</name></name><argument_list pos:line="151" pos:column="54">()</argument_list></call></expr>;</return>
                    }</block></then></if>
                }</block></then></if>
            }</block></foreach>

            <comment type="line" pos:line="156" pos:column="13">//we didn't find it locally, search under imported namespaces</comment>
            <return pos:line="157" pos:column="13">return <expr><op:operator pos:line="157" pos:column="20">(</op:operator><linq><from pos:line="157" pos:column="21">from <expr><name pos:line="157" pos:column="26">import</name></expr> <in pos:line="157" pos:column="33">in <expr><call><name pos:line="157" pos:column="36">GetImports</name><argument_list pos:line="157" pos:column="46">()</argument_list></call></expr></in></from>
                    <from pos:line="158" pos:column="21">from <expr><name pos:line="158" pos:column="26">match</name></expr> <in pos:line="158" pos:column="32">in <expr><call><name><name pos:line="158" pos:column="35">import</name><op:operator pos:line="158" pos:column="41">.</op:operator><name pos:line="158" pos:column="42">ImportedNamespace</name><op:operator pos:line="158" pos:column="59">.</op:operator><name><name pos:line="158" pos:column="60">GetDescendantsAndSelf</name><argument_list pos:line="158" pos:column="81">&lt;<argument><name pos:line="158" pos:column="82">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="158" pos:column="90">()</argument_list></call><op:operator pos:line="158" pos:column="92">.</op:operator><call><name pos:line="158" pos:column="93">Last</name><argument_list pos:line="158" pos:column="97">()</argument_list></call><op:operator pos:line="158" pos:column="99">.</op:operator><call><name pos:line="158" pos:column="100">FindMatches</name><argument_list pos:line="158" pos:column="111">()</argument_list></call><op:operator pos:line="158" pos:column="113">.</op:operator><call><name><name pos:line="158" pos:column="114">OfType</name><argument_list pos:line="158" pos:column="120">&lt;<argument><name pos:line="158" pos:column="121">NamedScope</name></argument>&gt;</argument_list></name><argument_list pos:line="158" pos:column="132">()</argument_list></call></expr></in></from>
                    <from pos:line="159" pos:column="21">from <expr><name pos:line="159" pos:column="26">child</name></expr> <in pos:line="159" pos:column="32">in <expr><call><name><name pos:line="159" pos:column="35">match</name><op:operator pos:line="159" pos:column="40">.</op:operator><name pos:line="159" pos:column="41">GetNamedChildren</name></name><argument_list pos:line="159" pos:column="57">(<argument><expr><name><name pos:line="159" pos:column="58">this</name><op:operator pos:line="159" pos:column="62">.</op:operator><name pos:line="159" pos:column="63">Name</name></name></expr></argument>)</argument_list></call></expr></in></from>
                    <where pos:line="160" pos:column="21">where  <expr><name pos:line="160" pos:column="28">child</name> <op:operator pos:line="160" pos:column="34">is</op:operator> <name pos:line="160" pos:column="37">VariableDeclaration</name> <op:operator pos:line="160" pos:column="57">||</op:operator> <name pos:line="160" pos:column="60">child</name> <op:operator pos:line="160" pos:column="66">is</op:operator> <name pos:line="160" pos:column="69">PropertyDefinition</name></expr></where>
                    <select pos:line="161" pos:column="21">select <expr><name pos:line="161" pos:column="28">child</name></expr></select></linq><op:operator pos:line="161" pos:column="33">)</op:operator></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="164" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="165" pos:column="9">/// Finds all of the matching type definitions for all of the variable declarations that</comment>
        <comment type="line" pos:line="166" pos:column="9">/// match this variable use</comment>
        <comment type="line" pos:line="167" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="168" pos:column="9">/// &lt;returns&gt;An enumerable of matching type definitions&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="169" pos:column="9">public</specifier> <specifier pos:line="169" pos:column="16">override</specifier> <name><name pos:line="169" pos:column="25">IEnumerable</name><argument_list pos:line="169" pos:column="36">&lt;<argument><name pos:line="169" pos:column="37">TypeDefinition</name></argument>&gt;</argument_list></name></type> <name pos:line="169" pos:column="53">ResolveType</name><parameter_list pos:line="169" pos:column="64">()</parameter_list> <block pos:line="169" pos:column="67">{

            <decl_stmt><decl><type><name><name pos:line="171" pos:column="13">IEnumerable</name><argument_list pos:line="171" pos:column="24">&lt;<argument><name pos:line="171" pos:column="25">TypeDefinition</name></argument>&gt;</argument_list></name></type> <name pos:line="171" pos:column="41">typeDefinitions</name></decl>;</decl_stmt>
            <if pos:line="172" pos:column="13">if<condition pos:line="172" pos:column="15">(<expr><name><name pos:line="172" pos:column="16">this</name><op:operator pos:line="172" pos:column="20">.</op:operator><name pos:line="172" pos:column="21">Name</name></name> <op:operator pos:line="172" pos:column="26">==</op:operator> <lit:literal type="string" pos:line="172" pos:column="29">"this"</lit:literal> <op:operator pos:line="172" pos:column="36">||</op:operator> 
                <op:operator pos:line="173" pos:column="17">(</op:operator><name><name pos:line="173" pos:column="18">this</name><op:operator pos:line="173" pos:column="22">.</op:operator><name pos:line="173" pos:column="23">Name</name></name> <op:operator pos:line="173" pos:column="28">==</op:operator> <lit:literal type="string" pos:line="173" pos:column="31">"base"</lit:literal> <op:operator pos:line="173" pos:column="38">&amp;&amp;</op:operator> <name><name pos:line="173" pos:column="41">this</name><op:operator pos:line="173" pos:column="45">.</op:operator><name pos:line="173" pos:column="46">ProgrammingLanguage</name></name> <op:operator pos:line="173" pos:column="66">==</op:operator> <name><name pos:line="173" pos:column="69">Language</name><op:operator pos:line="173" pos:column="77">.</op:operator><name pos:line="173" pos:column="78">CSharp</name></name><op:operator pos:line="173" pos:column="84">)</op:operator> <op:operator pos:line="173" pos:column="86">||</op:operator>
                <op:operator pos:line="174" pos:column="17">(</op:operator><name><name pos:line="174" pos:column="18">this</name><op:operator pos:line="174" pos:column="22">.</op:operator><name pos:line="174" pos:column="23">Name</name></name> <op:operator pos:line="174" pos:column="28">==</op:operator> <lit:literal type="string" pos:line="174" pos:column="31">"super"</lit:literal> <op:operator pos:line="174" pos:column="39">&amp;&amp;</op:operator> <name><name pos:line="174" pos:column="42">this</name><op:operator pos:line="174" pos:column="46">.</op:operator><name pos:line="174" pos:column="47">ProgrammingLanguage</name></name> <op:operator pos:line="174" pos:column="67">==</op:operator> <name><name pos:line="174" pos:column="70">Language</name><op:operator pos:line="174" pos:column="78">.</op:operator><name pos:line="174" pos:column="79">Java</name></name><op:operator pos:line="174" pos:column="83">)</op:operator></expr>)</condition><then pos:line="174" pos:column="85"> <block pos:line="174" pos:column="86">{
                <expr_stmt><expr><name pos:line="175" pos:column="17">typeDefinitions</name> <op:operator pos:line="175" pos:column="33">=</op:operator> <call><name><name pos:line="175" pos:column="35">TypeDefinition</name><op:operator pos:line="175" pos:column="49">.</op:operator><name pos:line="175" pos:column="50">GetTypeForKeyword</name></name><argument_list pos:line="175" pos:column="67">(<argument><expr><name pos:line="175" pos:column="68">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="176" pos:column="15">else <block pos:line="176" pos:column="20">{
                <expr_stmt><expr><name pos:line="177" pos:column="17">typeDefinitions</name> <op:operator pos:line="177" pos:column="33">=</op:operator> <linq><from pos:line="177" pos:column="35">from <expr><name pos:line="177" pos:column="40">declaration</name></expr> <in pos:line="177" pos:column="52">in <expr><call><name pos:line="177" pos:column="55">FindMatches</name><argument_list pos:line="177" pos:column="66">()</argument_list></call><op:operator pos:line="177" pos:column="68">.</op:operator><call><name><name pos:line="177" pos:column="69">OfType</name><argument_list pos:line="177" pos:column="75">&lt;<argument><name pos:line="177" pos:column="76">VariableDeclaration</name></argument>&gt;</argument_list></name><argument_list pos:line="177" pos:column="96">()</argument_list></call></expr></in></from>
                                  <where pos:line="178" pos:column="35">where <expr><name><name pos:line="178" pos:column="41">declaration</name><op:operator pos:line="178" pos:column="52">.</op:operator><name pos:line="178" pos:column="53">VariableType</name></name> <op:operator pos:line="178" pos:column="66">!=</op:operator> <name pos:line="178" pos:column="69">null</name></expr></where>
                                  <from pos:line="179" pos:column="35">from <expr><name pos:line="179" pos:column="40">definition</name></expr> <in pos:line="179" pos:column="51">in <expr><call><name><name pos:line="179" pos:column="54">declaration</name><op:operator pos:line="179" pos:column="65">.</op:operator><name pos:line="179" pos:column="66">VariableType</name><op:operator pos:line="179" pos:column="78">.</op:operator><name pos:line="179" pos:column="79">ResolveType</name></name><argument_list pos:line="179" pos:column="90">()</argument_list></call></expr></in></from>
                                  <select pos:line="180" pos:column="35">select <expr><name pos:line="180" pos:column="42">definition</name></expr></select></linq></expr>;</expr_stmt>
            }</block></else></if>

            <comment type="line" pos:line="183" pos:column="13">//TODO: figure out what the type should be when we have an indexer</comment>
            <comment type="line" pos:line="184" pos:column="13">//if(Index != null) {</comment>
                
            <comment type="line" pos:line="186" pos:column="13">//}</comment>

            <return pos:line="188" pos:column="13">return <expr><name pos:line="188" pos:column="20">typeDefinitions</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="191" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="192" pos:column="9">/// Instance method for getting &lt;see cref="VariableUse.XmlName"/&gt;</comment>
        <comment type="line" pos:line="193" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="194" pos:column="9">/// &lt;returns&gt;Returns the XML name for VariableUse&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="195" pos:column="9">public</specifier> <specifier pos:line="195" pos:column="16">override</specifier> <name pos:line="195" pos:column="25">string</name></type> <name pos:line="195" pos:column="32">GetXmlName</name><parameter_list pos:line="195" pos:column="42">()</parameter_list> <block pos:line="195" pos:column="45">{ <return pos:line="195" pos:column="47">return <expr><name><name pos:line="195" pos:column="54">VariableUse</name><op:operator pos:line="195" pos:column="65">.</op:operator><name pos:line="195" pos:column="66">XmlName</name></name></expr>;</return> }</block></function>

        <comment type="line" pos:line="197" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="198" pos:column="9">/// Processes the child of the current reader position into a child of this object.</comment>
        <comment type="line" pos:line="199" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="200" pos:column="9">/// &lt;param name="reader"&gt;The XML reader&lt;/param&gt;</comment>
        <function><type><specifier pos:line="201" pos:column="9">protected</specifier> <specifier pos:line="201" pos:column="19">override</specifier> <name pos:line="201" pos:column="28">void</name></type> <name pos:line="201" pos:column="33">ReadXmlChild</name><parameter_list pos:line="201" pos:column="45">(<param><decl><type><name pos:line="201" pos:column="46">XmlReader</name></type> <name pos:line="201" pos:column="56">reader</name></decl></param>)</parameter_list> <block pos:line="201" pos:column="64">{
            <if pos:line="202" pos:column="13">if<condition pos:line="202" pos:column="15">(<expr><name pos:line="202" pos:column="16">XmlIndexName</name> <op:operator pos:line="202" pos:column="29">==</op:operator> <name><name pos:line="202" pos:column="32">reader</name><op:operator pos:line="202" pos:column="38">.</op:operator><name pos:line="202" pos:column="39">Name</name></name></expr>)</condition><then pos:line="202" pos:column="44"> <block pos:line="202" pos:column="45">{
                <expr_stmt><expr><name pos:line="203" pos:column="17">Index</name> <op:operator pos:line="203" pos:column="23">=</op:operator> <call><name><name pos:line="203" pos:column="25">XmlSerialization</name><op:operator pos:line="203" pos:column="41">.</op:operator><name pos:line="203" pos:column="42">ReadChildExpression</name></name><argument_list pos:line="203" pos:column="61">(<argument><expr><name pos:line="203" pos:column="62">reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="204" pos:column="15">else <block pos:line="204" pos:column="20">{
                <expr_stmt><expr><call><name><name pos:line="205" pos:column="17">base</name><op:operator pos:line="205" pos:column="21">.</op:operator><name pos:line="205" pos:column="22">ReadXmlChild</name></name><argument_list pos:line="205" pos:column="34">(<argument><expr><name pos:line="205" pos:column="35">reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></function>

        <comment type="line" pos:line="209" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="210" pos:column="9">/// Writes the contents of this object to &lt;paramref name="writer"/&gt;.</comment>
        <comment type="line" pos:line="211" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="212" pos:column="9">/// &lt;param name="writer"&gt;The XML writer to write to&lt;/param&gt;</comment>
        <function><type><specifier pos:line="213" pos:column="9">protected</specifier> <specifier pos:line="213" pos:column="19">override</specifier> <name pos:line="213" pos:column="28">void</name></type> <name pos:line="213" pos:column="33">WriteXmlContents</name><parameter_list pos:line="213" pos:column="49">(<param><decl><type><name pos:line="213" pos:column="50">XmlWriter</name></type> <name pos:line="213" pos:column="60">writer</name></decl></param>)</parameter_list> <block pos:line="213" pos:column="68">{
            <if pos:line="214" pos:column="13">if<condition pos:line="214" pos:column="15">(<expr><name pos:line="214" pos:column="16">null</name> <op:operator pos:line="214" pos:column="21">!=</op:operator> <name pos:line="214" pos:column="24">Index</name></expr>)</condition><then pos:line="214" pos:column="30"> <block pos:line="214" pos:column="31">{
                <expr_stmt><expr><call><name><name pos:line="215" pos:column="17">XmlSerialization</name><op:operator pos:line="215" pos:column="33">.</op:operator><name pos:line="215" pos:column="34">WriteElement</name></name><argument_list pos:line="215" pos:column="46">(<argument><expr><name pos:line="215" pos:column="47">writer</name></expr></argument>, <argument><expr><name pos:line="215" pos:column="55">Index</name></expr></argument>, <argument><expr><name pos:line="215" pos:column="62">XmlIndexName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name pos:line="217" pos:column="13">base</name><op:operator pos:line="217" pos:column="17">.</op:operator><name pos:line="217" pos:column="18">WriteXmlContents</name></name><argument_list pos:line="217" pos:column="34">(<argument><expr><name pos:line="217" pos:column="35">writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <comment type="line" pos:line="219" pos:column="9">///// &lt;summary&gt;</comment>
        <comment type="line" pos:line="220" pos:column="9">///// Tests if this variable usage is a match for</comment>
        <comment type="line" pos:line="221" pos:column="9">///// &lt;paramref name="definition"/&gt;&lt;/summary&gt;</comment>
        <comment type="line" pos:line="222" pos:column="9">///// &lt;param name="definition"&gt;The variable declaration to test&lt;/param&gt;</comment>
        <comment type="line" pos:line="223" pos:column="9">///// &lt;returns&gt;true if this matches the variable declaration; false otherwise&lt;/returns&gt;</comment>
        <comment type="line" pos:line="224" pos:column="9">//public bool Matches(VariableDeclaration definition) {</comment>
        <comment type="line" pos:line="225" pos:column="9">//    return definition != null &amp;&amp; definition.Name == this.Name;</comment>
        <comment type="line" pos:line="226" pos:column="9">//}</comment>
    }</block></class>
}</block></namespace></unit>
