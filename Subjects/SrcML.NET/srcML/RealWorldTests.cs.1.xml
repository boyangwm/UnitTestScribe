<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data.Test\RealWorldTests.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2014 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *    Patrick Francis (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">ABB</name><op:operator pos:line="13" pos:column="10">.</op:operator><name pos:line="13" pos:column="11">SrcML</name><op:operator pos:line="13" pos:column="16">.</op:operator><name pos:line="13" pos:column="17">Utilities</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">NUnit</name><op:operator pos:line="14" pos:column="12">.</op:operator><name pos:line="14" pos:column="13">Framework</name></name>;</using>
<using pos:line="15" pos:column="1">using <name pos:line="15" pos:column="7">System</name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Collections</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Collections</name><op:operator pos:line="17" pos:column="25">.</op:operator><name pos:line="17" pos:column="26">Generic</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Diagnostics</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">System</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">IO</name></name>;</using>
<using pos:line="20" pos:column="1">using <name><name pos:line="20" pos:column="7">System</name><op:operator pos:line="20" pos:column="13">.</op:operator><name pos:line="20" pos:column="14">Linq</name></name>;</using>
<using pos:line="21" pos:column="1">using <name><name pos:line="21" pos:column="7">System</name><op:operator pos:line="21" pos:column="13">.</op:operator><name pos:line="21" pos:column="14">Text</name></name>;</using>
<using pos:line="22" pos:column="1">using <name><name pos:line="22" pos:column="7">System</name><op:operator pos:line="22" pos:column="13">.</op:operator><name pos:line="22" pos:column="14">Threading</name></name>;</using>
<using pos:line="23" pos:column="1">using <name><name pos:line="23" pos:column="7">System</name><op:operator pos:line="23" pos:column="13">.</op:operator><name pos:line="23" pos:column="14">Threading</name><op:operator pos:line="23" pos:column="23">.</op:operator><name pos:line="23" pos:column="24">Tasks</name></name>;</using>

<namespace pos:line="25" pos:column="1">namespace <name><name pos:line="25" pos:column="11">ABB</name><op:operator pos:line="25" pos:column="14">.</op:operator><name pos:line="25" pos:column="15">SrcML</name><op:operator pos:line="25" pos:column="20">.</op:operator><name pos:line="25" pos:column="21">Data</name><op:operator pos:line="25" pos:column="25">.</op:operator><name pos:line="25" pos:column="26">Test</name></name> <block pos:line="25" pos:column="31">{
    <class><attribute pos:line="26" pos:column="5">[<expr><name pos:line="26" pos:column="6">TestFixture</name></expr><op:operator pos:line="26" pos:column="17">,</op:operator> <expr><call><name pos:line="26" pos:column="19">Category</name><argument_list pos:line="26" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="26" pos:column="28">"LongRunning"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="27" pos:column="5">public</specifier> class <name pos:line="27" pos:column="18">RealWorldTests</name> <block pos:line="27" pos:column="33">{
        <decl_stmt><decl><type><specifier pos:line="28" pos:column="9">public</specifier> <specifier pos:line="28" pos:column="16">const</specifier> <name pos:line="28" pos:column="22">string</name></type> <name pos:line="28" pos:column="29">MappingFile</name> <init pos:line="28" pos:column="41">= <expr><lit:literal type="string" pos:line="28" pos:column="43">@"..\..\TestInputs\project_mapping.txt"</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="29" pos:column="9">static</specifier> <name><name pos:line="29" pos:column="16">List</name><argument_list pos:line="29" pos:column="20">&lt;<argument><name pos:line="29" pos:column="21">RealWorldTestProject</name></argument>&gt;</argument_list></name></type> <name pos:line="29" pos:column="43">TestProjects</name> <init pos:line="29" pos:column="56">= <expr><call><name pos:line="29" pos:column="58">ReadProjectMap</name><argument_list pos:line="29" pos:column="72">(<argument><expr><name pos:line="29" pos:column="73">MappingFile</name></expr></argument>)</argument_list></call><op:operator pos:line="29" pos:column="85">.</op:operator><call><name pos:line="29" pos:column="86">ToList</name><argument_list pos:line="29" pos:column="92">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <function><type><attribute pos:line="31" pos:column="9">[<expr><name pos:line="31" pos:column="10">Test</name></expr><op:operator pos:line="31" pos:column="14">,</op:operator> <expr><call><name pos:line="31" pos:column="16">TestCaseSource</name><argument_list pos:line="31" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="31" pos:column="31">"TestProjects"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="32" pos:column="9">public</specifier> <name pos:line="32" pos:column="16">void</name></type> <name pos:line="32" pos:column="21">TestCompleteWorkingSet</name><parameter_list pos:line="32" pos:column="43">(<param><decl><type><name pos:line="32" pos:column="44">RealWorldTestProject</name></type> <name pos:line="32" pos:column="65">testData</name></decl></param>)</parameter_list> <block pos:line="32" pos:column="75">{
            <expr_stmt><expr><call><name pos:line="33" pos:column="13">CheckThatProjectExists</name><argument_list pos:line="33" pos:column="35">(<argument><expr><name pos:line="33" pos:column="36">testData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="34" pos:column="13">Console</name><op:operator pos:line="34" pos:column="20">.</op:operator><name pos:line="34" pos:column="21">WriteLine</name></name><argument_list pos:line="34" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="34" pos:column="31">"{0} {1} Project Summary"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="58">testData</name><op:operator pos:line="34" pos:column="66">.</op:operator><name pos:line="34" pos:column="67">ProjectName</name></name></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="80">testData</name><op:operator pos:line="34" pos:column="88">.</op:operator><name pos:line="34" pos:column="89">Version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="35" pos:column="13">Console</name><op:operator pos:line="35" pos:column="20">.</op:operator><name pos:line="35" pos:column="21">WriteLine</name></name><argument_list pos:line="35" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="35" pos:column="31">"============================"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <using pos:line="36" pos:column="13">using(<decl><type><name pos:line="36" pos:column="19">var</name></type> <name pos:line="36" pos:column="23">project</name> <init pos:line="36" pos:column="31">= <expr><op:operator pos:line="36" pos:column="33">new</op:operator> <call><name><name pos:line="36" pos:column="37">DataProject</name><argument_list pos:line="36" pos:column="48">&lt;<argument><name pos:line="36" pos:column="49">CompleteWorkingSet</name></argument>&gt;</argument_list></name><argument_list pos:line="36" pos:column="68">(<argument><expr><name><name pos:line="36" pos:column="69">testData</name><op:operator pos:line="36" pos:column="77">.</op:operator><name pos:line="36" pos:column="78">DataDirectory</name></name></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="93">testData</name><op:operator pos:line="36" pos:column="101">.</op:operator><name pos:line="36" pos:column="102">FullPath</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="36" pos:column="112">"SrcML"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>) <block pos:line="36" pos:column="122">{
                <decl_stmt><decl><type><name pos:line="37" pos:column="17">string</name></type> <name pos:line="37" pos:column="24">unknownLogPath</name> <init pos:line="37" pos:column="39">= <expr><call><name><name pos:line="37" pos:column="41">Path</name><op:operator pos:line="37" pos:column="45">.</op:operator><name pos:line="37" pos:column="46">Combine</name></name><argument_list pos:line="37" pos:column="53">(<argument><expr><name><name pos:line="37" pos:column="54">project</name><op:operator pos:line="37" pos:column="61">.</op:operator><name pos:line="37" pos:column="62">StoragePath</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="37" pos:column="75">"unknown.log"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="38" pos:column="17">DateTime</name></type> <name pos:line="38" pos:column="26">start</name> <init pos:line="38" pos:column="32">= <expr><name><name pos:line="38" pos:column="34">DateTime</name><op:operator pos:line="38" pos:column="42">.</op:operator><name pos:line="38" pos:column="43">Now</name></name></expr></init><op:operator pos:line="38" pos:column="46">,</op:operator> <name pos:line="38" pos:column="48">end</name></decl>;</decl_stmt>

                <using pos:line="40" pos:column="17">using(<decl><type><name pos:line="40" pos:column="23">var</name></type> <name pos:line="40" pos:column="27">unknownLog</name> <init pos:line="40" pos:column="38">= <expr><op:operator pos:line="40" pos:column="40">new</op:operator> <call><name pos:line="40" pos:column="44">StreamWriter</name><argument_list pos:line="40" pos:column="56">(<argument><expr><name pos:line="40" pos:column="57">unknownLogPath</name></expr></argument>)</argument_list></call></expr></init></decl>) <block pos:line="40" pos:column="74">{
                    <expr_stmt><expr><name><name pos:line="41" pos:column="21">project</name><op:operator pos:line="41" pos:column="28">.</op:operator><name pos:line="41" pos:column="29">UnknownLog</name></name> <op:operator pos:line="41" pos:column="40">=</op:operator> <name pos:line="41" pos:column="42">unknownLog</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="42" pos:column="21">project</name><op:operator pos:line="42" pos:column="28">.</op:operator><name pos:line="42" pos:column="29">UpdateAsync</name></name><argument_list pos:line="42" pos:column="40">()</argument_list></call><op:operator pos:line="42" pos:column="42">.</op:operator><call><name pos:line="42" pos:column="43">Wait</name><argument_list pos:line="42" pos:column="47">()</argument_list></call></expr>;</expr_stmt>
                }</block></using>
                <expr_stmt><expr><name pos:line="44" pos:column="17">end</name> <op:operator pos:line="44" pos:column="21">=</op:operator> <name><name pos:line="44" pos:column="23">DateTime</name><op:operator pos:line="44" pos:column="31">.</op:operator><name pos:line="44" pos:column="32">Now</name></name></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name pos:line="46" pos:column="17">Console</name><op:operator pos:line="46" pos:column="24">.</op:operator><name pos:line="46" pos:column="25">WriteLine</name></name><argument_list pos:line="46" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="46" pos:column="35">"{0} to initialize complete working set"</lit:literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="77">end</name> <op:operator pos:line="46" pos:column="81">-</op:operator> <name pos:line="46" pos:column="83">start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="48" pos:column="17">NamespaceDefinition</name></type> <name pos:line="48" pos:column="37">globalNamespace</name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="49" pos:column="17">Assert</name><op:operator pos:line="49" pos:column="23">.</op:operator><name pos:line="49" pos:column="24">That</name></name><argument_list pos:line="49" pos:column="28">(<argument><expr><call><name><name pos:line="49" pos:column="29">project</name><op:operator pos:line="49" pos:column="36">.</op:operator><name pos:line="49" pos:column="37">WorkingSet</name><op:operator pos:line="49" pos:column="47">.</op:operator><name pos:line="49" pos:column="48">TryObtainReadLock</name></name><argument_list pos:line="49" pos:column="65">(<argument><expr><lit:literal type="number" pos:line="49" pos:column="66">5000</lit:literal></expr></argument>, <argument><expr pos:line="49" pos:column="72">out <name pos:line="49" pos:column="76">globalNamespace</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <try pos:line="51" pos:column="17">try <block pos:line="51" pos:column="21">{
                    <expr_stmt><expr><call><name><name pos:line="52" pos:column="21">Console</name><op:operator pos:line="52" pos:column="28">.</op:operator><name pos:line="52" pos:column="29">WriteLine</name></name><argument_list pos:line="52" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="52" pos:column="39">"{0,10:N0} files"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="52" pos:column="58">project</name><op:operator pos:line="52" pos:column="65">.</op:operator><name pos:line="52" pos:column="66">Data</name><op:operator pos:line="52" pos:column="70">.</op:operator><name pos:line="52" pos:column="71">GetFiles</name></name><argument_list pos:line="52" pos:column="79">()</argument_list></call><op:operator pos:line="52" pos:column="81">.</op:operator><call><name pos:line="52" pos:column="82">Count</name><argument_list pos:line="52" pos:column="87">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="53" pos:column="21">Console</name><op:operator pos:line="53" pos:column="28">.</op:operator><name pos:line="53" pos:column="29">WriteLine</name></name><argument_list pos:line="53" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="53" pos:column="39">"{0,10:N0} namespaces"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="53" pos:column="63">globalNamespace</name><op:operator pos:line="53" pos:column="78">.</op:operator><name><name pos:line="53" pos:column="79">GetDescendants</name><argument_list pos:line="53" pos:column="93">&lt;<argument><name pos:line="53" pos:column="94">NamespaceDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="53" pos:column="114">()</argument_list></call><op:operator pos:line="53" pos:column="116">.</op:operator><call><name pos:line="53" pos:column="117">Count</name><argument_list pos:line="53" pos:column="122">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="54" pos:column="21">Console</name><op:operator pos:line="54" pos:column="28">.</op:operator><name pos:line="54" pos:column="29">WriteLine</name></name><argument_list pos:line="54" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="54" pos:column="39">"{0,10:N0} types"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="54" pos:column="58">globalNamespace</name><op:operator pos:line="54" pos:column="73">.</op:operator><name><name pos:line="54" pos:column="74">GetDescendants</name><argument_list pos:line="54" pos:column="88">&lt;<argument><name pos:line="54" pos:column="89">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="54" pos:column="104">()</argument_list></call><op:operator pos:line="54" pos:column="106">.</op:operator><call><name pos:line="54" pos:column="107">Count</name><argument_list pos:line="54" pos:column="112">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="55" pos:column="21">Console</name><op:operator pos:line="55" pos:column="28">.</op:operator><name pos:line="55" pos:column="29">WriteLine</name></name><argument_list pos:line="55" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="55" pos:column="39">"{0,10:N0} methods"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="55" pos:column="60">globalNamespace</name><op:operator pos:line="55" pos:column="75">.</op:operator><name><name pos:line="55" pos:column="76">GetDescendants</name><argument_list pos:line="55" pos:column="90">&lt;<argument><name pos:line="55" pos:column="91">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="55" pos:column="108">()</argument_list></call><op:operator pos:line="55" pos:column="110">.</op:operator><call><name pos:line="55" pos:column="111">Count</name><argument_list pos:line="55" pos:column="116">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <decl_stmt><decl><type><name pos:line="57" pos:column="21">var</name></type> <name pos:line="57" pos:column="25">methodCalls</name> <init pos:line="57" pos:column="37">= <expr><linq><from pos:line="57" pos:column="39">from <expr><name pos:line="57" pos:column="44">statement</name></expr> <in pos:line="57" pos:column="54">in <expr><call><name><name pos:line="57" pos:column="57">globalNamespace</name><op:operator pos:line="57" pos:column="72">.</op:operator><name pos:line="57" pos:column="73">GetDescendantsAndSelf</name></name><argument_list pos:line="57" pos:column="94">()</argument_list></call></expr></in></from>
                                      <from pos:line="58" pos:column="39">from <expr><name pos:line="58" pos:column="44">expression</name></expr> <in pos:line="58" pos:column="55">in <expr><call><name><name pos:line="58" pos:column="58">statement</name><op:operator pos:line="58" pos:column="67">.</op:operator><name pos:line="58" pos:column="68">GetExpressions</name></name><argument_list pos:line="58" pos:column="82">()</argument_list></call></expr></in></from>
                                      <from pos:line="59" pos:column="39">from <expr><name pos:line="59" pos:column="44">call</name></expr> <in pos:line="59" pos:column="49">in <expr><call><name><name pos:line="59" pos:column="52">expression</name><op:operator pos:line="59" pos:column="62">.</op:operator><name><name pos:line="59" pos:column="63">GetDescendantsAndSelf</name><argument_list pos:line="59" pos:column="84">&lt;<argument><name pos:line="59" pos:column="85">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="59" pos:column="96">()</argument_list></call></expr></in></from>
                                      <select pos:line="60" pos:column="39">select <expr><name pos:line="60" pos:column="46">call</name></expr></select></linq></expr></init></decl>;</decl_stmt>
                    
                    <decl_stmt><decl><type><name pos:line="62" pos:column="21">int</name></type> <name pos:line="62" pos:column="25">numMethodCalls</name> <init pos:line="62" pos:column="40">= <expr><lit:literal type="number" pos:line="62" pos:column="42">0</lit:literal></expr></init><op:operator pos:line="62" pos:column="43">,</op:operator> <name pos:line="62" pos:column="45">numMatchedMethodCalls</name> <init pos:line="62" pos:column="67">= <expr><lit:literal type="number" pos:line="62" pos:column="69">0</lit:literal></expr></init><op:operator pos:line="62" pos:column="70">,</op:operator> <name pos:line="62" pos:column="72">numMissedMethodCalls</name> <init pos:line="62" pos:column="93">= <expr><lit:literal type="number" pos:line="62" pos:column="95">0</lit:literal></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="63" pos:column="21">Stopwatch</name></type> <name pos:line="63" pos:column="31">sw</name> <init pos:line="63" pos:column="34">= <expr><op:operator pos:line="63" pos:column="36">new</op:operator> <call><name pos:line="63" pos:column="40">Stopwatch</name><argument_list pos:line="63" pos:column="49">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="64" pos:column="21">TimeSpan</name></type> <name pos:line="64" pos:column="30">elapsed</name> <init pos:line="64" pos:column="38">= <expr><op:operator pos:line="64" pos:column="40">new</op:operator> <call><name pos:line="64" pos:column="44">TimeSpan</name><argument_list pos:line="64" pos:column="52">(<argument><expr><lit:literal type="number" pos:line="64" pos:column="53">0</lit:literal></expr></argument>)</argument_list></call></expr></init><op:operator pos:line="64" pos:column="55">,</op:operator>
                             <name pos:line="65" pos:column="30">matchedElapsed</name> <init pos:line="65" pos:column="45">= <expr><op:operator pos:line="65" pos:column="47">new</op:operator> <call><name pos:line="65" pos:column="51">TimeSpan</name><argument_list pos:line="65" pos:column="59">(<argument><expr><lit:literal type="number" pos:line="65" pos:column="60">0</lit:literal></expr></argument>)</argument_list></call></expr></init><op:operator pos:line="65" pos:column="62">,</op:operator>
                             <name pos:line="66" pos:column="30">missedElapsed</name> <init pos:line="66" pos:column="44">= <expr><op:operator pos:line="66" pos:column="46">new</op:operator> <call><name pos:line="66" pos:column="50">TimeSpan</name><argument_list pos:line="66" pos:column="58">(<argument><expr><lit:literal type="number" pos:line="66" pos:column="59">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <using pos:line="68" pos:column="21">using(<decl><type><name pos:line="68" pos:column="27">var</name></type> <name pos:line="68" pos:column="31">callLog</name> <init pos:line="68" pos:column="39">= <expr><op:operator pos:line="68" pos:column="41">new</op:operator> <call><name pos:line="68" pos:column="45">StreamWriter</name><argument_list pos:line="68" pos:column="57">(<argument><expr><call><name><name pos:line="68" pos:column="58">Path</name><op:operator pos:line="68" pos:column="62">.</op:operator><name pos:line="68" pos:column="63">Combine</name></name><argument_list pos:line="68" pos:column="70">(<argument><expr><name><name pos:line="68" pos:column="71">testData</name><op:operator pos:line="68" pos:column="79">.</op:operator><name pos:line="68" pos:column="80">DataDirectory</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="68" pos:column="95">"call_log.csv"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="68" pos:column="112">false</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>) <block pos:line="68" pos:column="120">{

                        <expr_stmt><expr><call><name><name pos:line="70" pos:column="25">callLog</name><op:operator pos:line="70" pos:column="32">.</op:operator><name pos:line="70" pos:column="33">WriteLine</name></name><argument_list pos:line="70" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="70" pos:column="43">"Location,Call Name,Successful,Time"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <foreach pos:line="71" pos:column="25">foreach(<init><decl><type><name pos:line="71" pos:column="33">var</name></type> <name pos:line="71" pos:column="37">call</name> <range pos:line="71" pos:column="42">in <expr><name pos:line="71" pos:column="45">methodCalls</name></expr></range></decl></init>) <block pos:line="71" pos:column="58">{
                            <decl_stmt><decl><type><name pos:line="72" pos:column="29">INamedEntity</name></type> <name pos:line="72" pos:column="42">match</name> <init pos:line="72" pos:column="48">= <expr><name pos:line="72" pos:column="50">null</name></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><call><name><name pos:line="73" pos:column="29">sw</name><op:operator pos:line="73" pos:column="31">.</op:operator><name pos:line="73" pos:column="32">Restart</name></name><argument_list pos:line="73" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
                            <try pos:line="74" pos:column="29">try <block pos:line="74" pos:column="33">{
                                <expr_stmt><expr><name pos:line="75" pos:column="33">match</name> <op:operator pos:line="75" pos:column="39">=</op:operator> <call><name><name pos:line="75" pos:column="41">call</name><op:operator pos:line="75" pos:column="45">.</op:operator><name pos:line="75" pos:column="46">FindMatches</name></name><argument_list pos:line="75" pos:column="57">()</argument_list></call><op:operator pos:line="75" pos:column="59">.</op:operator><call><name pos:line="75" pos:column="60">FirstOrDefault</name><argument_list pos:line="75" pos:column="74">()</argument_list></call></expr>;</expr_stmt>
                            }</block> <catch pos:line="76" pos:column="31">catch<parameter_list pos:line="76" pos:column="36">(<param><decl><type><name pos:line="76" pos:column="37">Exception</name></type> <name pos:line="76" pos:column="47">e</name></decl></param>)</parameter_list> <block pos:line="76" pos:column="50">{
                                <expr_stmt><expr><call><name><name pos:line="77" pos:column="33">project</name><op:operator pos:line="77" pos:column="40">.</op:operator><name pos:line="77" pos:column="41">ErrorLog</name><op:operator pos:line="77" pos:column="49">.</op:operator><name pos:line="77" pos:column="50">WriteLine</name></name><argument_list pos:line="77" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="77" pos:column="60">"{0}:{1}:{2}: Call Exception {3}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="77" pos:column="95">call</name><op:operator pos:line="77" pos:column="99">.</op:operator><name pos:line="77" pos:column="100">Location</name><op:operator pos:line="77" pos:column="108">.</op:operator><name pos:line="77" pos:column="109">SourceFileName</name></name></expr></argument>, <argument><expr><name><name pos:line="77" pos:column="125">call</name><op:operator pos:line="77" pos:column="129">.</op:operator><name pos:line="77" pos:column="130">Location</name><op:operator pos:line="77" pos:column="138">.</op:operator><name pos:line="77" pos:column="139">StartingLineNumber</name></name></expr></argument>, <argument><expr><name><name pos:line="77" pos:column="159">call</name><op:operator pos:line="77" pos:column="163">.</op:operator><name pos:line="77" pos:column="164">Location</name><op:operator pos:line="77" pos:column="172">.</op:operator><name pos:line="77" pos:column="173">StartingColumnNumber</name></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="195">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></catch></try>
                            <expr_stmt><expr><call><name><name pos:line="79" pos:column="29">sw</name><op:operator pos:line="79" pos:column="31">.</op:operator><name pos:line="79" pos:column="32">Stop</name></name><argument_list pos:line="79" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name pos:line="80" pos:column="29">numMethodCalls</name><op:operator pos:line="80" pos:column="43">++</op:operator></expr>;</expr_stmt>
                            <if pos:line="81" pos:column="29">if<condition pos:line="81" pos:column="31">(<expr><name pos:line="81" pos:column="32">null</name> <op:operator pos:line="81" pos:column="37">!=</op:operator> <name pos:line="81" pos:column="40">match</name></expr>)</condition><then pos:line="81" pos:column="46"> <block pos:line="81" pos:column="47">{
                                <expr_stmt><expr><name pos:line="82" pos:column="33">numMatchedMethodCalls</name><op:operator pos:line="82" pos:column="54">++</op:operator></expr>;</expr_stmt>
                                <expr_stmt><expr><name pos:line="83" pos:column="33">matchedElapsed</name> <op:operator pos:line="83" pos:column="48">+=</op:operator> <name><name pos:line="83" pos:column="51">sw</name><op:operator pos:line="83" pos:column="53">.</op:operator><name pos:line="83" pos:column="54">Elapsed</name></name></expr>;</expr_stmt>
                            }</block></then> <else pos:line="84" pos:column="31">else <block pos:line="84" pos:column="36">{
                                <expr_stmt><expr><name pos:line="85" pos:column="33">numMissedMethodCalls</name><op:operator pos:line="85" pos:column="53">++</op:operator></expr>;</expr_stmt>
                                <expr_stmt><expr><name pos:line="86" pos:column="33">missedElapsed</name> <op:operator pos:line="86" pos:column="47">+=</op:operator> <name><name pos:line="86" pos:column="50">sw</name><op:operator pos:line="86" pos:column="52">.</op:operator><name pos:line="86" pos:column="53">Elapsed</name></name></expr>;</expr_stmt>
                            }</block></else></if>
                            <expr_stmt><expr><call><name><name pos:line="88" pos:column="29">callLog</name><op:operator pos:line="88" pos:column="36">.</op:operator><name pos:line="88" pos:column="37">WriteLine</name></name><argument_list pos:line="88" pos:column="46">(<argument><expr><call><name><name pos:line="88" pos:column="47">String</name><op:operator pos:line="88" pos:column="53">.</op:operator><name pos:line="88" pos:column="54">Join</name></name><argument_list pos:line="88" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="88" pos:column="59">","</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="88" pos:column="64">String</name><op:operator pos:line="88" pos:column="70">.</op:operator><name pos:line="88" pos:column="71">Join</name></name><argument_list pos:line="88" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="88" pos:column="76">":"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="88" pos:column="81">call</name><op:operator pos:line="88" pos:column="85">.</op:operator><name pos:line="88" pos:column="86">Location</name><op:operator pos:line="88" pos:column="94">.</op:operator><name pos:line="88" pos:column="95">SourceFileName</name></name></expr></argument>, <argument><expr><name><name pos:line="88" pos:column="111">call</name><op:operator pos:line="88" pos:column="115">.</op:operator><name pos:line="88" pos:column="116">Location</name><op:operator pos:line="88" pos:column="124">.</op:operator><name pos:line="88" pos:column="125">StartingLineNumber</name></name></expr></argument>, <argument><expr><name><name pos:line="88" pos:column="145">call</name><op:operator pos:line="88" pos:column="149">.</op:operator><name pos:line="88" pos:column="150">Location</name><op:operator pos:line="88" pos:column="158">.</op:operator><name pos:line="88" pos:column="159">StartingColumnNumber</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="88" pos:column="182">call</name><op:operator pos:line="88" pos:column="186">.</op:operator><name pos:line="88" pos:column="187">Name</name></name></expr></argument>, <argument><expr><op:operator pos:line="88" pos:column="193">(</op:operator><name pos:line="88" pos:column="194">match</name> <op:operator pos:line="88" pos:column="200">==</op:operator> <name pos:line="88" pos:column="203">null</name> <op:operator pos:line="88" pos:column="208">?</op:operator> <lit:literal type="string" pos:line="88" pos:column="210">"0"</lit:literal> <op:operator pos:line="88" pos:column="214">:</op:operator> <lit:literal type="string" pos:line="88" pos:column="216">"1"</lit:literal><op:operator pos:line="88" pos:column="219">)</op:operator></expr></argument>, <argument><expr><name><name pos:line="88" pos:column="222">sw</name><op:operator pos:line="88" pos:column="224">.</op:operator><name pos:line="88" pos:column="225">ElapsedMilliseconds</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name pos:line="89" pos:column="29">elapsed</name> <op:operator pos:line="89" pos:column="37">+=</op:operator> <name><name pos:line="89" pos:column="40">sw</name><op:operator pos:line="89" pos:column="42">.</op:operator><name pos:line="89" pos:column="43">Elapsed</name></name></expr>;</expr_stmt>
                        }</block></foreach>
                    }</block></using>
                    <expr_stmt><expr><call><name><name pos:line="92" pos:column="21">Console</name><op:operator pos:line="92" pos:column="28">.</op:operator><name pos:line="92" pos:column="29">WriteLine</name></name><argument_list pos:line="92" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="92" pos:column="39">"{0,10:N0} method calls"</lit:literal></expr></argument>, <argument><expr><name pos:line="92" pos:column="65">numMethodCalls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="93" pos:column="21">Console</name><op:operator pos:line="93" pos:column="28">.</op:operator><name pos:line="93" pos:column="29">WriteLine</name></name><argument_list pos:line="93" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="93" pos:column="39">"{0,10:P2} of method calls matched"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="93" pos:column="76">(</op:operator><name pos:line="93" pos:column="77">float</name><op:operator pos:line="93" pos:column="82">)</op:operator> <name pos:line="93" pos:column="84">numMatchedMethodCalls</name> <op:operator pos:line="93" pos:column="106">/</op:operator> <name pos:line="93" pos:column="108">numMethodCalls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="94" pos:column="21">Console</name><op:operator pos:line="94" pos:column="28">.</op:operator><name pos:line="94" pos:column="29">WriteLine</name></name><argument_list pos:line="94" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="94" pos:column="39">"{0,10:N2} matches / millisecond ({1,7:N0} ms elapsed)"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="94" pos:column="96">(</op:operator><op:operator pos:line="94" pos:column="97">(</op:operator><name pos:line="94" pos:column="98">float</name><op:operator pos:line="94" pos:column="103">)</op:operator> <name pos:line="94" pos:column="105">numMethodCalls</name><op:operator pos:line="94" pos:column="119">)</op:operator> <op:operator pos:line="94" pos:column="121">/</op:operator> <name><name pos:line="94" pos:column="123">elapsed</name><op:operator pos:line="94" pos:column="130">.</op:operator><name pos:line="94" pos:column="131">TotalMilliseconds</name></name></expr></argument>, <argument><expr><name><name pos:line="94" pos:column="150">elapsed</name><op:operator pos:line="94" pos:column="157">.</op:operator><name pos:line="94" pos:column="158">TotalMilliseconds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="95" pos:column="21">Console</name><op:operator pos:line="95" pos:column="28">.</op:operator><name pos:line="95" pos:column="29">WriteLine</name></name><argument_list pos:line="95" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="95" pos:column="39">"{0,7:N3} ms / match"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="95" pos:column="62">(</op:operator><name pos:line="95" pos:column="63">float</name><op:operator pos:line="95" pos:column="68">)</op:operator> <name><name pos:line="95" pos:column="70">matchedElapsed</name><op:operator pos:line="95" pos:column="84">.</op:operator><name pos:line="95" pos:column="85">TotalMilliseconds</name></name> <op:operator pos:line="95" pos:column="103">/</op:operator> <name pos:line="95" pos:column="105">numMatchedMethodCalls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="96" pos:column="21">Console</name><op:operator pos:line="96" pos:column="28">.</op:operator><name pos:line="96" pos:column="29">WriteLine</name></name><argument_list pos:line="96" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="96" pos:column="39">"{0,7:N3} ms / miss"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="96" pos:column="61">(</op:operator><name pos:line="96" pos:column="62">float</name><op:operator pos:line="96" pos:column="67">)</op:operator> <name><name pos:line="96" pos:column="69">missedElapsed</name><op:operator pos:line="96" pos:column="82">.</op:operator><name pos:line="96" pos:column="83">TotalMilliseconds</name></name> <op:operator pos:line="96" pos:column="101">/</op:operator> <name pos:line="96" pos:column="103">numMissedMethodCalls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <finally pos:line="97" pos:column="19">finally <block pos:line="97" pos:column="27">{
                    <expr_stmt><expr><call><name><name pos:line="98" pos:column="21">project</name><op:operator pos:line="98" pos:column="28">.</op:operator><name pos:line="98" pos:column="29">WorkingSet</name><op:operator pos:line="98" pos:column="39">.</op:operator><name pos:line="98" pos:column="40">ReleaseReadLock</name></name><argument_list pos:line="98" pos:column="55">()</argument_list></call></expr>;</expr_stmt>
                }</block></finally></try>
            }</block></using>
        }</block></function>

        <function><type><attribute pos:line="103" pos:column="9">[<expr><name pos:line="103" pos:column="10">Test</name></expr><op:operator pos:line="103" pos:column="14">,</op:operator> <expr><call><name pos:line="103" pos:column="16">TestCaseSource</name><argument_list pos:line="103" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="103" pos:column="31">"TestProjects"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="104" pos:column="9">public</specifier> <name pos:line="104" pos:column="16">void</name></type> <name pos:line="104" pos:column="21">TestSerialization</name><parameter_list pos:line="104" pos:column="38">(<param><decl><type><name pos:line="104" pos:column="39">RealWorldTestProject</name></type> <name pos:line="104" pos:column="60">testData</name></decl></param>)</parameter_list> <block pos:line="104" pos:column="70">{
            <using pos:line="105" pos:column="13">using(<decl><type><name pos:line="105" pos:column="19">var</name></type> <name pos:line="105" pos:column="23">project</name> <init pos:line="105" pos:column="31">= <expr><op:operator pos:line="105" pos:column="33">new</op:operator> <call><name><name pos:line="105" pos:column="37">DataProject</name><argument_list pos:line="105" pos:column="48">&lt;<argument><name pos:line="105" pos:column="49">NullWorkingSet</name></argument>&gt;</argument_list></name><argument_list pos:line="105" pos:column="64">(<argument><expr><name><name pos:line="105" pos:column="65">testData</name><op:operator pos:line="105" pos:column="73">.</op:operator><name pos:line="105" pos:column="74">DataDirectory</name></name></expr></argument>, <argument><expr><name><name pos:line="105" pos:column="89">testData</name><op:operator pos:line="105" pos:column="97">.</op:operator><name pos:line="105" pos:column="98">FullPath</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="105" pos:column="108">"SrcML"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>) <block pos:line="105" pos:column="118">{
                <decl_stmt><decl><type><name pos:line="106" pos:column="17">string</name></type> <name pos:line="106" pos:column="24">unknownLogPath</name> <init pos:line="106" pos:column="39">= <expr><call><name><name pos:line="106" pos:column="41">Path</name><op:operator pos:line="106" pos:column="45">.</op:operator><name pos:line="106" pos:column="46">Combine</name></name><argument_list pos:line="106" pos:column="53">(<argument><expr><name><name pos:line="106" pos:column="54">project</name><op:operator pos:line="106" pos:column="61">.</op:operator><name pos:line="106" pos:column="62">StoragePath</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="106" pos:column="75">"unknown.log"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <using pos:line="108" pos:column="17">using(<decl><type><name pos:line="108" pos:column="23">var</name></type> <name pos:line="108" pos:column="27">unknownLog</name> <init pos:line="108" pos:column="38">= <expr><op:operator pos:line="108" pos:column="40">new</op:operator> <call><name pos:line="108" pos:column="44">StreamWriter</name><argument_list pos:line="108" pos:column="56">(<argument><expr><name pos:line="108" pos:column="57">unknownLogPath</name></expr></argument>)</argument_list></call></expr></init></decl>) <block pos:line="108" pos:column="74">{
                    <expr_stmt><expr><name><name pos:line="109" pos:column="21">project</name><op:operator pos:line="109" pos:column="28">.</op:operator><name pos:line="109" pos:column="29">UnknownLog</name></name> <op:operator pos:line="109" pos:column="40">=</op:operator> <name pos:line="109" pos:column="42">unknownLog</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="110" pos:column="21">project</name><op:operator pos:line="110" pos:column="28">.</op:operator><name pos:line="110" pos:column="29">UpdateAsync</name></name><argument_list pos:line="110" pos:column="40">()</argument_list></call><op:operator pos:line="110" pos:column="42">.</op:operator><call><name pos:line="110" pos:column="43">Wait</name><argument_list pos:line="110" pos:column="47">()</argument_list></call></expr>;</expr_stmt>

                    <decl_stmt><decl><type><name pos:line="112" pos:column="21">long</name></type> <name pos:line="112" pos:column="26">count</name> <init pos:line="112" pos:column="32">= <expr><lit:literal type="number" pos:line="112" pos:column="34">0</lit:literal></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="113" pos:column="21">TextWriter</name></type> <name pos:line="113" pos:column="32">output</name> <init pos:line="113" pos:column="39">= <expr><call><name><name pos:line="113" pos:column="41">StreamWriter</name><op:operator pos:line="113" pos:column="53">.</op:operator><name pos:line="113" pos:column="54">Synchronized</name></name><argument_list pos:line="113" pos:column="66">(<argument><expr><name><name pos:line="113" pos:column="67">Console</name><op:operator pos:line="113" pos:column="74">.</op:operator><name pos:line="113" pos:column="75">Out</name></name></expr></argument>)</argument_list></call></expr></init><op:operator pos:line="113" pos:column="79">,</op:operator>
                                 <name pos:line="114" pos:column="34">error</name> <init pos:line="114" pos:column="40">= <expr><call><name><name pos:line="114" pos:column="42">StreamWriter</name><op:operator pos:line="114" pos:column="54">.</op:operator><name pos:line="114" pos:column="55">Synchronized</name></name><argument_list pos:line="114" pos:column="67">(<argument><expr><name><name pos:line="114" pos:column="68">Console</name><op:operator pos:line="114" pos:column="75">.</op:operator><name pos:line="114" pos:column="76">Error</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt><decl><type><name pos:line="116" pos:column="21">long</name></type> <name pos:line="116" pos:column="26">parseElapsed</name> <init pos:line="116" pos:column="39">= <expr><lit:literal type="number" pos:line="116" pos:column="41">0</lit:literal></expr></init><op:operator pos:line="116" pos:column="42">,</op:operator> <name pos:line="116" pos:column="44">deserializedElapsed</name> <init pos:line="116" pos:column="64">= <expr><lit:literal type="number" pos:line="116" pos:column="66">0</lit:literal></expr></init><op:operator pos:line="116" pos:column="67">,</op:operator> <name pos:line="116" pos:column="69">compareElapsed</name> <init pos:line="116" pos:column="84">= <expr><lit:literal type="number" pos:line="116" pos:column="86">0</lit:literal></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="117" pos:column="21">output</name><op:operator pos:line="117" pos:column="27">.</op:operator><name pos:line="117" pos:column="28">WriteLine</name></name><argument_list pos:line="117" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="117" pos:column="38">"{0,-12} {1,-12} {2,-12} {3,-12}"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="117" pos:column="73">"# Files"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="117" pos:column="84">"Parse"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="117" pos:column="93">"Deserialize"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="117" pos:column="108">"Comparison"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="118" pos:column="21">Parallel</name><op:operator pos:line="118" pos:column="29">.</op:operator><name pos:line="118" pos:column="30">ForEach</name></name><argument_list pos:line="118" pos:column="37">(<argument><expr><call><name><name pos:line="118" pos:column="38">project</name><op:operator pos:line="118" pos:column="45">.</op:operator><name pos:line="118" pos:column="46">Data</name><op:operator pos:line="118" pos:column="50">.</op:operator><name pos:line="118" pos:column="51">GetFiles</name></name><argument_list pos:line="118" pos:column="59">()</argument_list></call></expr></argument>, <argument><expr><lambda><parameter_list pos:line="118" pos:column="63">(<param><decl><name pos:line="118" pos:column="64">sourcePath</name></decl></param>)</parameter_list> <op:operator pos:line="118" pos:column="76">=&gt;</op:operator> <block pos:line="118" pos:column="79">{
                        <decl_stmt><decl><type><name pos:line="119" pos:column="25">DateTime</name></type> <name pos:line="119" pos:column="34">start</name></decl><op:operator pos:line="119" pos:column="39">,</op:operator> <decl><type ref="prev"/><name pos:line="119" pos:column="41">end</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name pos:line="120" pos:column="25">NamespaceDefinition</name></type> <name pos:line="120" pos:column="45">data</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name pos:line="121" pos:column="25">NamespaceDefinition</name></type> <name pos:line="121" pos:column="45">serializedData</name></decl>;</decl_stmt>
                        <try pos:line="122" pos:column="25">try <block pos:line="122" pos:column="29">{
                            <expr_stmt><expr><name pos:line="123" pos:column="29">start</name> <op:operator pos:line="123" pos:column="35">=</op:operator> <name><name pos:line="123" pos:column="37">DateTime</name><op:operator pos:line="123" pos:column="45">.</op:operator><name pos:line="123" pos:column="46">Now</name></name></expr>;</expr_stmt>
                            <decl_stmt><decl><type><name pos:line="124" pos:column="29">var</name></type> <name pos:line="124" pos:column="33">fileUnit</name> <init pos:line="124" pos:column="42">= <expr><call><name><name pos:line="124" pos:column="44">project</name><op:operator pos:line="124" pos:column="51">.</op:operator><name pos:line="124" pos:column="52">SourceArchive</name><op:operator pos:line="124" pos:column="65">.</op:operator><name pos:line="124" pos:column="66">GetXElementForSourceFile</name></name><argument_list pos:line="124" pos:column="90">(<argument><expr><name pos:line="124" pos:column="91">sourcePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><name pos:line="125" pos:column="29">data</name> <op:operator pos:line="125" pos:column="34">=</op:operator> <call><name><name pos:line="125" pos:column="36">project</name><op:operator pos:line="125" pos:column="43">.</op:operator><name pos:line="125" pos:column="44">Data</name><op:operator pos:line="125" pos:column="48">.</op:operator><name pos:line="125" pos:column="49">Generator</name><op:operator pos:line="125" pos:column="58">.</op:operator><name pos:line="125" pos:column="59">Parse</name></name><argument_list pos:line="125" pos:column="64">(<argument><expr><name pos:line="125" pos:column="65">fileUnit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name pos:line="126" pos:column="29">end</name> <op:operator pos:line="126" pos:column="33">=</op:operator> <name><name pos:line="126" pos:column="35">DateTime</name><op:operator pos:line="126" pos:column="43">.</op:operator><name pos:line="126" pos:column="44">Now</name></name></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name pos:line="127" pos:column="29">Interlocked</name><op:operator pos:line="127" pos:column="40">.</op:operator><name pos:line="127" pos:column="41">Add</name></name><argument_list pos:line="127" pos:column="44">(<argument><expr pos:line="127" pos:column="45">ref <name pos:line="127" pos:column="49">parseElapsed</name></expr></argument>, <argument><expr><op:operator pos:line="127" pos:column="63">(</op:operator><name pos:line="127" pos:column="64">end</name> <op:operator pos:line="127" pos:column="68">-</op:operator> <name pos:line="127" pos:column="70">start</name><op:operator pos:line="127" pos:column="75">)</op:operator><op:operator pos:line="127" pos:column="76">.</op:operator><name pos:line="127" pos:column="77">Ticks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block> <catch pos:line="128" pos:column="27">catch<parameter_list pos:line="128" pos:column="32">(<param><decl><type><name pos:line="128" pos:column="33">Exception</name></type> <name pos:line="128" pos:column="43">ex</name></decl></param>)</parameter_list> <block pos:line="128" pos:column="47">{
                            <expr_stmt><expr><call><name><name pos:line="129" pos:column="29">Console</name><op:operator pos:line="129" pos:column="36">.</op:operator><name pos:line="129" pos:column="37">Error</name><op:operator pos:line="129" pos:column="42">.</op:operator><name pos:line="129" pos:column="43">WriteLine</name></name><argument_list pos:line="129" pos:column="52">(<argument><expr><name pos:line="129" pos:column="53">ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name pos:line="130" pos:column="29">data</name> <op:operator pos:line="130" pos:column="34">=</op:operator> <name pos:line="130" pos:column="36">null</name></expr>;</expr_stmt>
                        }</block></catch></try>

                        <try pos:line="133" pos:column="25">try <block pos:line="133" pos:column="29">{
                            <expr_stmt><expr><name pos:line="134" pos:column="29">start</name> <op:operator pos:line="134" pos:column="35">=</op:operator> <name><name pos:line="134" pos:column="37">DateTime</name><op:operator pos:line="134" pos:column="45">.</op:operator><name pos:line="134" pos:column="46">Now</name></name></expr>;</expr_stmt>
                            <expr_stmt><expr><name pos:line="135" pos:column="29">serializedData</name> <op:operator pos:line="135" pos:column="44">=</op:operator> <call><name><name pos:line="135" pos:column="46">project</name><op:operator pos:line="135" pos:column="53">.</op:operator><name pos:line="135" pos:column="54">Data</name><op:operator pos:line="135" pos:column="58">.</op:operator><name pos:line="135" pos:column="59">GetData</name></name><argument_list pos:line="135" pos:column="66">(<argument><expr><name pos:line="135" pos:column="67">sourcePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name pos:line="136" pos:column="29">end</name> <op:operator pos:line="136" pos:column="33">=</op:operator> <name><name pos:line="136" pos:column="35">DateTime</name><op:operator pos:line="136" pos:column="43">.</op:operator><name pos:line="136" pos:column="44">Now</name></name></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name pos:line="137" pos:column="29">Interlocked</name><op:operator pos:line="137" pos:column="40">.</op:operator><name pos:line="137" pos:column="41">Add</name></name><argument_list pos:line="137" pos:column="44">(<argument><expr pos:line="137" pos:column="45">ref <name pos:line="137" pos:column="49">deserializedElapsed</name></expr></argument>, <argument><expr><op:operator pos:line="137" pos:column="70">(</op:operator><name pos:line="137" pos:column="71">end</name> <op:operator pos:line="137" pos:column="75">-</op:operator> <name pos:line="137" pos:column="77">start</name><op:operator pos:line="137" pos:column="82">)</op:operator><op:operator pos:line="137" pos:column="83">.</op:operator><name pos:line="137" pos:column="84">Ticks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block> <catch pos:line="138" pos:column="27">catch<parameter_list pos:line="138" pos:column="32">(<param><decl><type><name pos:line="138" pos:column="33">Exception</name></type> <name pos:line="138" pos:column="43">ex</name></decl></param>)</parameter_list> <block pos:line="138" pos:column="47">{
                            <expr_stmt><expr><call><name><name pos:line="139" pos:column="29">error</name><op:operator pos:line="139" pos:column="34">.</op:operator><name pos:line="139" pos:column="35">WriteLine</name></name><argument_list pos:line="139" pos:column="44">(<argument><expr><name pos:line="139" pos:column="45">ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name pos:line="140" pos:column="29">serializedData</name> <op:operator pos:line="140" pos:column="44">=</op:operator> <name pos:line="140" pos:column="46">null</name></expr>;</expr_stmt>
                        }</block></catch></try>

                        <expr_stmt><expr><call><name><name pos:line="143" pos:column="25">Assert</name><op:operator pos:line="143" pos:column="31">.</op:operator><name pos:line="143" pos:column="32">IsNotNull</name></name><argument_list pos:line="143" pos:column="41">(<argument><expr><name pos:line="143" pos:column="42">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="144" pos:column="25">Assert</name><op:operator pos:line="144" pos:column="31">.</op:operator><name pos:line="144" pos:column="32">IsNotNull</name></name><argument_list pos:line="144" pos:column="41">(<argument><expr><name pos:line="144" pos:column="42">serializedData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="145" pos:column="25">start</name> <op:operator pos:line="145" pos:column="31">=</op:operator> <name><name pos:line="145" pos:column="33">DateTime</name><op:operator pos:line="145" pos:column="41">.</op:operator><name pos:line="145" pos:column="42">Now</name></name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="146" pos:column="25">DataAssert</name><op:operator pos:line="146" pos:column="35">.</op:operator><name pos:line="146" pos:column="36">StatementsAreEqual</name></name><argument_list pos:line="146" pos:column="54">(<argument><expr><name pos:line="146" pos:column="55">data</name></expr></argument>, <argument><expr><name pos:line="146" pos:column="61">serializedData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="147" pos:column="25">end</name> <op:operator pos:line="147" pos:column="29">=</op:operator> <name><name pos:line="147" pos:column="31">DateTime</name><op:operator pos:line="147" pos:column="39">.</op:operator><name pos:line="147" pos:column="40">Now</name></name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="148" pos:column="25">Interlocked</name><op:operator pos:line="148" pos:column="36">.</op:operator><name pos:line="148" pos:column="37">Add</name></name><argument_list pos:line="148" pos:column="40">(<argument><expr pos:line="148" pos:column="41">ref <name pos:line="148" pos:column="45">compareElapsed</name></expr></argument>, <argument><expr><op:operator pos:line="148" pos:column="61">(</op:operator><name pos:line="148" pos:column="62">end</name> <op:operator pos:line="148" pos:column="66">-</op:operator> <name pos:line="148" pos:column="68">start</name><op:operator pos:line="148" pos:column="73">)</op:operator><op:operator pos:line="148" pos:column="74">.</op:operator><name pos:line="148" pos:column="75">Ticks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if pos:line="150" pos:column="25">if<condition pos:line="150" pos:column="27">(<expr><call><name><name pos:line="150" pos:column="28">Interlocked</name><op:operator pos:line="150" pos:column="39">.</op:operator><name pos:line="150" pos:column="40">Increment</name></name><argument_list pos:line="150" pos:column="49">(<argument><expr pos:line="150" pos:column="50">ref <name pos:line="150" pos:column="54">count</name></expr></argument>)</argument_list></call> <op:operator pos:line="150" pos:column="61">%</op:operator> <lit:literal type="number" pos:line="150" pos:column="63">25</lit:literal> <op:operator pos:line="150" pos:column="66">==</op:operator> <lit:literal type="number" pos:line="150" pos:column="69">0</lit:literal></expr>)</condition><then pos:line="150" pos:column="71"> <block pos:line="150" pos:column="72">{
                            <expr_stmt><expr><call><name><name pos:line="151" pos:column="29">output</name><op:operator pos:line="151" pos:column="35">.</op:operator><name pos:line="151" pos:column="36">WriteLine</name></name><argument_list pos:line="151" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="151" pos:column="46">"{0,12:N0} {1,12:ss\\.fff} {2,12:ss\\.fff} {3,12:ss\\.fff}"</lit:literal></expr></argument>, <argument><expr><name pos:line="151" pos:column="107">count</name></expr></argument>,
                                    <argument><expr><op:operator pos:line="152" pos:column="37">new</op:operator> <call><name pos:line="152" pos:column="41">TimeSpan</name><argument_list pos:line="152" pos:column="49">(<argument><expr><name pos:line="152" pos:column="50">parseElapsed</name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><op:operator pos:line="153" pos:column="37">new</op:operator> <call><name pos:line="153" pos:column="41">TimeSpan</name><argument_list pos:line="153" pos:column="49">(<argument><expr><name pos:line="153" pos:column="50">deserializedElapsed</name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><op:operator pos:line="154" pos:column="37">new</op:operator> <call><name pos:line="154" pos:column="41">TimeSpan</name><argument_list pos:line="154" pos:column="49">(<argument><expr><name pos:line="154" pos:column="50">compareElapsed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    
                    <expr_stmt><expr><call><name><name pos:line="158" pos:column="21">Console</name><op:operator pos:line="158" pos:column="28">.</op:operator><name pos:line="158" pos:column="29">WriteLine</name></name><argument_list pos:line="158" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="158" pos:column="39">"Project: {0} {1}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="158" pos:column="59">testData</name><op:operator pos:line="158" pos:column="67">.</op:operator><name pos:line="158" pos:column="68">ProjectName</name></name></expr></argument>, <argument><expr><name><name pos:line="158" pos:column="81">testData</name><op:operator pos:line="158" pos:column="89">.</op:operator><name pos:line="158" pos:column="90">Version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="159" pos:column="21">Console</name><op:operator pos:line="159" pos:column="28">.</op:operator><name pos:line="159" pos:column="29">WriteLine</name></name><argument_list pos:line="159" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="159" pos:column="39">"{0,-15} {1,11:N0}"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="159" pos:column="60">"# Files"</lit:literal></expr></argument>, <argument><expr><name pos:line="159" pos:column="71">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="160" pos:column="21">Console</name><op:operator pos:line="160" pos:column="28">.</op:operator><name pos:line="160" pos:column="29">WriteLine</name></name><argument_list pos:line="160" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="160" pos:column="39">"{0,-15} {1:g}"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="160" pos:column="56">"Parsing"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="160" pos:column="67">new</op:operator> <call><name pos:line="160" pos:column="71">TimeSpan</name><argument_list pos:line="160" pos:column="79">(<argument><expr><name pos:line="160" pos:column="80">parseElapsed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="161" pos:column="21">Console</name><op:operator pos:line="161" pos:column="28">.</op:operator><name pos:line="161" pos:column="29">WriteLine</name></name><argument_list pos:line="161" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="161" pos:column="39">"{0,-15} {1:g}"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="161" pos:column="56">"Deserializing"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="161" pos:column="73">new</op:operator> <call><name pos:line="161" pos:column="77">TimeSpan</name><argument_list pos:line="161" pos:column="85">(<argument><expr><name pos:line="161" pos:column="86">deserializedElapsed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="162" pos:column="21">Console</name><op:operator pos:line="162" pos:column="28">.</op:operator><name pos:line="162" pos:column="29">WriteLine</name></name><argument_list pos:line="162" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="162" pos:column="39">"{0,-15} {1:g}"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="162" pos:column="56">"Comparing"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="162" pos:column="69">new</op:operator> <call><name pos:line="162" pos:column="73">TimeSpan</name><argument_list pos:line="162" pos:column="81">(<argument><expr><name pos:line="162" pos:column="82">compareElapsed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="163" pos:column="21">Console</name><op:operator pos:line="163" pos:column="28">.</op:operator><name pos:line="163" pos:column="29">WriteLine</name></name><argument_list pos:line="163" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="163" pos:column="39">"{0,-15} {1:g}"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="163" pos:column="56">"Total"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="163" pos:column="65">new</op:operator> <call><name pos:line="163" pos:column="69">TimeSpan</name><argument_list pos:line="163" pos:column="77">(<argument><expr><name pos:line="163" pos:column="78">parseElapsed</name> <op:operator pos:line="163" pos:column="91">+</op:operator> <name pos:line="163" pos:column="93">deserializedElapsed</name> <op:operator pos:line="163" pos:column="113">+</op:operator> <name pos:line="163" pos:column="115">compareElapsed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></using>
            }</block></using>
        }</block></function>

        <function><type><attribute pos:line="168" pos:column="9">[<expr><name pos:line="168" pos:column="10">Test</name></expr><op:operator pos:line="168" pos:column="14">,</op:operator> <expr><call><name pos:line="168" pos:column="16">TestCaseSource</name><argument_list pos:line="168" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="168" pos:column="31">"TestProjects"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="169" pos:column="9">public</specifier> <name pos:line="169" pos:column="16">void</name></type> <name pos:line="169" pos:column="21">TestCompleteWorkingSet_SingleCore</name><parameter_list pos:line="169" pos:column="54">(<param><decl><type><name pos:line="169" pos:column="55">RealWorldTestProject</name></type> <name pos:line="169" pos:column="76">testData</name></decl></param>)</parameter_list> <block pos:line="169" pos:column="86">{
            <expr_stmt><expr><call><name pos:line="170" pos:column="13">CheckThatProjectExists</name><argument_list pos:line="170" pos:column="35">(<argument><expr><name pos:line="170" pos:column="36">testData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="171" pos:column="13">Console</name><op:operator pos:line="171" pos:column="20">.</op:operator><name pos:line="171" pos:column="21">WriteLine</name></name><argument_list pos:line="171" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="171" pos:column="31">"{0} {1} Project Summary"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="171" pos:column="58">testData</name><op:operator pos:line="171" pos:column="66">.</op:operator><name pos:line="171" pos:column="67">ProjectName</name></name></expr></argument>, <argument><expr><name><name pos:line="171" pos:column="80">testData</name><op:operator pos:line="171" pos:column="88">.</op:operator><name pos:line="171" pos:column="89">Version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="172" pos:column="13">Console</name><op:operator pos:line="172" pos:column="20">.</op:operator><name pos:line="172" pos:column="21">WriteLine</name></name><argument_list pos:line="172" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="172" pos:column="31">"============================"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <using pos:line="173" pos:column="13">using(<decl><type><name pos:line="173" pos:column="19">var</name></type> <name pos:line="173" pos:column="23">project</name> <init pos:line="173" pos:column="31">= <expr><op:operator pos:line="173" pos:column="33">new</op:operator> <call><name><name pos:line="173" pos:column="37">DataProject</name><argument_list pos:line="173" pos:column="48">&lt;<argument><name pos:line="173" pos:column="49">CompleteWorkingSet</name></argument>&gt;</argument_list></name><argument_list pos:line="173" pos:column="68">(<argument><expr><op:operator pos:line="173" pos:column="69">new</op:operator> <call><name pos:line="173" pos:column="73">LimitedConcurrencyLevelTaskScheduler</name><argument_list pos:line="173" pos:column="109">(<argument><expr><lit:literal type="number" pos:line="173" pos:column="110">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="173" pos:column="114">new</op:operator> <call><name pos:line="173" pos:column="118">FileSystemFolderMonitor</name><argument_list pos:line="173" pos:column="141">(<argument><expr><name><name pos:line="173" pos:column="142">testData</name><op:operator pos:line="173" pos:column="150">.</op:operator><name pos:line="173" pos:column="151">FullPath</name></name></expr></argument>, <argument><expr><name><name pos:line="173" pos:column="161">testData</name><op:operator pos:line="173" pos:column="169">.</op:operator><name pos:line="173" pos:column="170">DataDirectory</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="173" pos:column="186">new</op:operator> <call><name pos:line="173" pos:column="190">SrcMLGenerator</name><argument_list pos:line="173" pos:column="204">(<argument><expr><lit:literal type="string" pos:line="173" pos:column="205">"SrcML"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>) <block pos:line="173" pos:column="216">{
                <decl_stmt><decl><type><name pos:line="174" pos:column="17">string</name></type> <name pos:line="174" pos:column="24">unknownLogPath</name> <init pos:line="174" pos:column="39">= <expr><call><name><name pos:line="174" pos:column="41">Path</name><op:operator pos:line="174" pos:column="45">.</op:operator><name pos:line="174" pos:column="46">Combine</name></name><argument_list pos:line="174" pos:column="53">(<argument><expr><name><name pos:line="174" pos:column="54">project</name><op:operator pos:line="174" pos:column="61">.</op:operator><name pos:line="174" pos:column="62">StoragePath</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="174" pos:column="75">"unknown.log"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="175" pos:column="17">DateTime</name></type> <name pos:line="175" pos:column="26">start</name> <init pos:line="175" pos:column="32">= <expr><name><name pos:line="175" pos:column="34">DateTime</name><op:operator pos:line="175" pos:column="42">.</op:operator><name pos:line="175" pos:column="43">Now</name></name></expr></init><op:operator pos:line="175" pos:column="46">,</op:operator> <name pos:line="175" pos:column="48">end</name></decl>;</decl_stmt>
                <using pos:line="176" pos:column="17">using(<decl><type><name pos:line="176" pos:column="23">var</name></type> <name pos:line="176" pos:column="27">unknownLog</name> <init pos:line="176" pos:column="38">= <expr><op:operator pos:line="176" pos:column="40">new</op:operator> <call><name pos:line="176" pos:column="44">StreamWriter</name><argument_list pos:line="176" pos:column="56">(<argument><expr><name pos:line="176" pos:column="57">unknownLogPath</name></expr></argument>)</argument_list></call></expr></init></decl>) <block pos:line="176" pos:column="74">{
                    <expr_stmt><expr><name><name pos:line="177" pos:column="21">project</name><op:operator pos:line="177" pos:column="28">.</op:operator><name pos:line="177" pos:column="29">UnknownLog</name></name> <op:operator pos:line="177" pos:column="40">=</op:operator> <name pos:line="177" pos:column="42">unknownLog</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="178" pos:column="21">project</name><op:operator pos:line="178" pos:column="28">.</op:operator><name pos:line="178" pos:column="29">UpdateAsync</name></name><argument_list pos:line="178" pos:column="40">()</argument_list></call><op:operator pos:line="178" pos:column="42">.</op:operator><call><name pos:line="178" pos:column="43">Wait</name><argument_list pos:line="178" pos:column="47">()</argument_list></call></expr>;</expr_stmt>
                }</block></using>
                <expr_stmt><expr><name pos:line="180" pos:column="17">end</name> <op:operator pos:line="180" pos:column="21">=</op:operator> <name><name pos:line="180" pos:column="23">DateTime</name><op:operator pos:line="180" pos:column="31">.</op:operator><name pos:line="180" pos:column="32">Now</name></name></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="182" pos:column="17">NamespaceDefinition</name></type> <name pos:line="182" pos:column="37">globalScope</name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="183" pos:column="17">Assert</name><op:operator pos:line="183" pos:column="23">.</op:operator><name pos:line="183" pos:column="24">That</name></name><argument_list pos:line="183" pos:column="28">(<argument><expr><call><name><name pos:line="183" pos:column="29">project</name><op:operator pos:line="183" pos:column="36">.</op:operator><name pos:line="183" pos:column="37">WorkingSet</name><op:operator pos:line="183" pos:column="47">.</op:operator><name pos:line="183" pos:column="48">TryObtainReadLock</name></name><argument_list pos:line="183" pos:column="65">(<argument><expr><lit:literal type="number" pos:line="183" pos:column="66">5000</lit:literal></expr></argument>, <argument><expr pos:line="183" pos:column="72">out <name pos:line="183" pos:column="76">globalScope</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="184" pos:column="17">Assert</name><op:operator pos:line="184" pos:column="23">.</op:operator><name pos:line="184" pos:column="24">IsNotNull</name></name><argument_list pos:line="184" pos:column="33">(<argument><expr><name pos:line="184" pos:column="34">globalScope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></using>
        }</block></function>

        <function><type><specifier pos:line="188" pos:column="9">private</specifier> <specifier pos:line="188" pos:column="17">static</specifier> <name><name pos:line="188" pos:column="24">IEnumerable</name><argument_list pos:line="188" pos:column="35">&lt;<argument><name pos:line="188" pos:column="36">RealWorldTestProject</name></argument>&gt;</argument_list></name></type> <name pos:line="188" pos:column="58">ReadProjectMap</name><parameter_list pos:line="188" pos:column="72">(<param><decl><type><name pos:line="188" pos:column="73">string</name></type> <name pos:line="188" pos:column="80">fileName</name></decl></param>)</parameter_list> <block pos:line="188" pos:column="90">{
            <if pos:line="189" pos:column="13">if<condition pos:line="189" pos:column="15">(<expr><call><name><name pos:line="189" pos:column="16">File</name><op:operator pos:line="189" pos:column="20">.</op:operator><name pos:line="189" pos:column="21">Exists</name></name><argument_list pos:line="189" pos:column="27">(<argument><expr><name pos:line="189" pos:column="28">fileName</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="189" pos:column="38"> <block pos:line="189" pos:column="39">{
                <decl_stmt><decl><type><name pos:line="190" pos:column="17">var</name></type> <name pos:line="190" pos:column="21">projects</name> <init pos:line="190" pos:column="30">= <expr><linq><from pos:line="190" pos:column="32">from <expr><name pos:line="190" pos:column="37">line</name></expr> <in pos:line="190" pos:column="42">in <expr><call><name><name pos:line="190" pos:column="45">File</name><op:operator pos:line="190" pos:column="49">.</op:operator><name pos:line="190" pos:column="50">ReadAllLines</name></name><argument_list pos:line="190" pos:column="62">(<argument><expr><name pos:line="190" pos:column="63">fileName</name></expr></argument>)</argument_list></call></expr></in></from>
                               <where pos:line="191" pos:column="32">where <expr><op:operator pos:line="191" pos:column="38">!</op:operator><call><name><name pos:line="191" pos:column="39">line</name><op:operator pos:line="191" pos:column="43">.</op:operator><name pos:line="191" pos:column="44">StartsWith</name></name><argument_list pos:line="191" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="191" pos:column="55">"#"</lit:literal></expr></argument>)</argument_list></call></expr></where>
                               <let pos:line="192" pos:column="32">let <expr><name pos:line="192" pos:column="36">parts</name> <op:operator pos:line="192" pos:column="42">=</op:operator> <call><name><name pos:line="192" pos:column="44">line</name><op:operator pos:line="192" pos:column="48">.</op:operator><name pos:line="192" pos:column="49">Split</name></name><argument_list pos:line="192" pos:column="54">(<argument><expr><lit:literal type="char" pos:line="192" pos:column="55">','</lit:literal></expr></argument>)</argument_list></call></expr></let>
                               <where pos:line="193" pos:column="32">where <expr><lit:literal type="number" pos:line="193" pos:column="38">4</lit:literal> <op:operator pos:line="193" pos:column="40">==</op:operator> <name><name pos:line="193" pos:column="43">parts</name><op:operator pos:line="193" pos:column="48">.</op:operator><name pos:line="193" pos:column="49">Length</name></name></expr></where>
                               <let pos:line="194" pos:column="32">let <expr><name pos:line="194" pos:column="36">projectName</name> <op:operator pos:line="194" pos:column="48">=</op:operator> <name><name pos:line="194" pos:column="50">parts</name><index pos:line="194" pos:column="55">[<expr><lit:literal type="number" pos:line="194" pos:column="56">0</lit:literal></expr>]</index></name></expr></let>
                               <let pos:line="195" pos:column="32">let <expr><name pos:line="195" pos:column="36">projectVersion</name> <op:operator pos:line="195" pos:column="51">=</op:operator> <name><name pos:line="195" pos:column="53">parts</name><index pos:line="195" pos:column="58">[<expr><lit:literal type="number" pos:line="195" pos:column="59">1</lit:literal></expr>]</index></name></expr></let>
                               <let pos:line="196" pos:column="32">let <expr><name pos:line="196" pos:column="36">projectLanguage</name>
                               <op:operator pos:line="197" pos:column="32">=</op:operator> <call><name><name pos:line="197" pos:column="34">SrcMLElement</name><op:operator pos:line="197" pos:column="46">.</op:operator><name pos:line="197" pos:column="47">GetLanguageFromString</name></name><argument_list pos:line="197" pos:column="68">(<argument><expr><name><name pos:line="197" pos:column="69">parts</name><index pos:line="197" pos:column="74">[<expr><lit:literal type="number" pos:line="197" pos:column="75">2</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></let>
                               <let pos:line="198" pos:column="32">let <expr><name pos:line="198" pos:column="36">rootDirectory</name> <op:operator pos:line="198" pos:column="50">=</op:operator> <name><name pos:line="198" pos:column="52">parts</name><index pos:line="198" pos:column="57">[<expr><lit:literal type="number" pos:line="198" pos:column="58">3</lit:literal></expr>]</index></name></expr></let>
                               <select pos:line="199" pos:column="32">select <expr><op:operator pos:line="199" pos:column="39">new</op:operator> <call><name pos:line="199" pos:column="43">RealWorldTestProject</name><argument_list pos:line="199" pos:column="63">(<argument><expr><name pos:line="199" pos:column="64">projectName</name></expr></argument>, <argument><expr><name pos:line="199" pos:column="77">projectVersion</name></expr></argument>, <argument><expr><name pos:line="199" pos:column="93">projectLanguage</name></expr></argument>, <argument><expr><name pos:line="199" pos:column="110">rootDirectory</name></expr></argument>)</argument_list></call></expr></select></linq></expr></init></decl>;</decl_stmt>
                <return pos:line="200" pos:column="17">return <expr><name pos:line="200" pos:column="24">projects</name></expr>;</return>
            }</block></then></if>
            <return pos:line="202" pos:column="13">return <expr><call><name><name pos:line="202" pos:column="20">Enumerable</name><op:operator pos:line="202" pos:column="30">.</op:operator><name><name pos:line="202" pos:column="31">Empty</name><argument_list pos:line="202" pos:column="36">&lt;<argument><name pos:line="202" pos:column="37">RealWorldTestProject</name></argument>&gt;</argument_list></name></name><argument_list pos:line="202" pos:column="58">()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="205" pos:column="9">private</specifier> <specifier pos:line="205" pos:column="17">static</specifier> <name pos:line="205" pos:column="24">void</name></type> <name pos:line="205" pos:column="29">CheckThatProjectExists</name><parameter_list pos:line="205" pos:column="51">(<param><decl><type><name pos:line="205" pos:column="52">RealWorldTestProject</name></type> <name pos:line="205" pos:column="73">project</name></decl></param>)</parameter_list> <block pos:line="205" pos:column="82">{
            <if pos:line="206" pos:column="13">if<condition pos:line="206" pos:column="15">(<expr><op:operator pos:line="206" pos:column="16">!</op:operator><call><name><name pos:line="206" pos:column="17">Directory</name><op:operator pos:line="206" pos:column="26">.</op:operator><name pos:line="206" pos:column="27">Exists</name></name><argument_list pos:line="206" pos:column="33">(<argument><expr><name><name pos:line="206" pos:column="34">project</name><op:operator pos:line="206" pos:column="41">.</op:operator><name pos:line="206" pos:column="42">FullPath</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="206" pos:column="52"> <block pos:line="206" pos:column="53">{
                <expr_stmt><expr><call><name><name pos:line="207" pos:column="17">Assert</name><op:operator pos:line="207" pos:column="23">.</op:operator><name pos:line="207" pos:column="24">Ignore</name></name><argument_list pos:line="207" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="207" pos:column="31">"Project directory for {0} {1} does not exist ({2})"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="207" pos:column="85">project</name><op:operator pos:line="207" pos:column="92">.</op:operator><name pos:line="207" pos:column="93">ProjectName</name></name></expr></argument>, <argument><expr><name><name pos:line="207" pos:column="106">project</name><op:operator pos:line="207" pos:column="113">.</op:operator><name pos:line="207" pos:column="114">Version</name></name></expr></argument>, <argument><expr><name><name pos:line="207" pos:column="123">project</name><op:operator pos:line="207" pos:column="130">.</op:operator><name pos:line="207" pos:column="131">FullPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <class><specifier pos:line="211" pos:column="9">public</specifier> class <name pos:line="211" pos:column="22">RealWorldTestProject</name> <block pos:line="211" pos:column="43">{
            
            <decl_stmt><decl><type><specifier pos:line="213" pos:column="13">public</specifier> <name pos:line="213" pos:column="20">string</name></type> <name pos:line="213" pos:column="27">FullPath</name> <block pos:line="213" pos:column="36">{ <function_decl><name pos:line="213" pos:column="38">get</name>;</function_decl> <function_decl><name pos:line="213" pos:column="43">set</name>;</function_decl> }</block></decl></decl_stmt>

            <decl_stmt><decl><type><specifier pos:line="215" pos:column="13">public</specifier> <name pos:line="215" pos:column="20">Language</name></type> <name pos:line="215" pos:column="29">PrimaryLanguage</name> <block pos:line="215" pos:column="45">{ <function_decl><name pos:line="215" pos:column="47">get</name>;</function_decl> <function_decl><name pos:line="215" pos:column="52">set</name>;</function_decl> }</block></decl></decl_stmt>

            <decl_stmt><decl><type><specifier pos:line="217" pos:column="13">public</specifier> <name pos:line="217" pos:column="20">string</name></type> <name pos:line="217" pos:column="27">ProjectName</name> <block pos:line="217" pos:column="39">{ <function_decl><name pos:line="217" pos:column="41">get</name>;</function_decl> <function_decl><name pos:line="217" pos:column="46">set</name>;</function_decl> }</block></decl></decl_stmt>

            <decl_stmt><decl><type><specifier pos:line="219" pos:column="13">public</specifier> <name pos:line="219" pos:column="20">string</name></type> <name pos:line="219" pos:column="27">DataDirectory</name> <block pos:line="219" pos:column="41">{ <function><name pos:line="219" pos:column="43">get</name> <block pos:line="219" pos:column="47">{ <return pos:line="219" pos:column="49">return <expr><call><name><name pos:line="219" pos:column="56">String</name><op:operator pos:line="219" pos:column="62">.</op:operator><name pos:line="219" pos:column="63">Format</name></name><argument_list pos:line="219" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="219" pos:column="70">"{0}_{1}"</lit:literal></expr></argument>, <argument><expr><name pos:line="219" pos:column="81">ProjectName</name></expr></argument>, <argument><expr><name pos:line="219" pos:column="94">Version</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function> }</block></decl></decl_stmt>

            <decl_stmt><decl><type><specifier pos:line="221" pos:column="13">public</specifier> <name pos:line="221" pos:column="20">string</name></type> <name pos:line="221" pos:column="27">Version</name> <block pos:line="221" pos:column="35">{ <function_decl><name pos:line="221" pos:column="37">get</name>;</function_decl> <function_decl><name pos:line="221" pos:column="42">set</name>;</function_decl> }</block></decl></decl_stmt>

            <constructor><specifier pos:line="223" pos:column="13">public</specifier> <name pos:line="223" pos:column="20">RealWorldTestProject</name><parameter_list pos:line="223" pos:column="40">(<param><decl><type><name pos:line="223" pos:column="41">string</name></type> <name pos:line="223" pos:column="48">projectName</name></decl></param>, <param><decl><type><name pos:line="223" pos:column="61">string</name></type> <name pos:line="223" pos:column="68">projectVersion</name></decl></param>, <param><decl><type><name pos:line="223" pos:column="84">Language</name></type> <name pos:line="223" pos:column="93">language</name></decl></param>, <param><decl><type><name pos:line="223" pos:column="103">string</name></type> <name pos:line="223" pos:column="110">rootDirectory</name></decl></param>)</parameter_list> <block pos:line="223" pos:column="125">{
                <expr_stmt><expr><name pos:line="224" pos:column="17">ProjectName</name> <op:operator pos:line="224" pos:column="29">=</op:operator> <name pos:line="224" pos:column="31">projectName</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="225" pos:column="17">Version</name> <op:operator pos:line="225" pos:column="25">=</op:operator> <name pos:line="225" pos:column="27">projectVersion</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="226" pos:column="17">FullPath</name> <op:operator pos:line="226" pos:column="26">=</op:operator> <call><name><name pos:line="226" pos:column="28">Path</name><op:operator pos:line="226" pos:column="32">.</op:operator><name pos:line="226" pos:column="33">GetFullPath</name></name><argument_list pos:line="226" pos:column="44">(<argument><expr><name pos:line="226" pos:column="45">rootDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="227" pos:column="17">PrimaryLanguage</name> <op:operator pos:line="227" pos:column="33">=</op:operator> <name pos:line="227" pos:column="35">language</name></expr>;</expr_stmt>
            }</block></constructor>

            <function><type><specifier pos:line="230" pos:column="13">public</specifier> <specifier pos:line="230" pos:column="20">override</specifier> <name pos:line="230" pos:column="29">string</name></type> <name pos:line="230" pos:column="36">ToString</name><parameter_list pos:line="230" pos:column="44">()</parameter_list> <block pos:line="230" pos:column="47">{
                <return pos:line="231" pos:column="17">return <expr><call><name><name pos:line="231" pos:column="24">String</name><op:operator pos:line="231" pos:column="30">.</op:operator><name pos:line="231" pos:column="31">Format</name></name><argument_list pos:line="231" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="231" pos:column="38">"{0} {1}"</lit:literal></expr></argument>, <argument><expr><name pos:line="231" pos:column="49">ProjectName</name></expr></argument>, <argument><expr><name pos:line="231" pos:column="62">Version</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class>
    }</block></class>
}</block></namespace>
</unit>
