<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Test\SrcMLGeneratorTests.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2010 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">System</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">IO</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Text</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Collections</name><op:operator pos:line="15" pos:column="25">.</op:operator><name pos:line="15" pos:column="26">Generic</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Linq</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">NUnit</name><op:operator pos:line="17" pos:column="12">.</op:operator><name pos:line="17" pos:column="13">Framework</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">ABB</name><op:operator pos:line="18" pos:column="10">.</op:operator><name pos:line="18" pos:column="11">SrcML</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">System</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">Xml</name><op:operator pos:line="19" pos:column="17">.</op:operator><name pos:line="19" pos:column="18">Linq</name></name>;</using>
<using pos:line="20" pos:column="1">using <name><name pos:line="20" pos:column="7">ABB</name><op:operator pos:line="20" pos:column="10">.</op:operator><name pos:line="20" pos:column="11">SrcML</name><op:operator pos:line="20" pos:column="16">.</op:operator><name pos:line="20" pos:column="17">Utilities</name></name>;</using>

<namespace pos:line="22" pos:column="1">namespace <name><name pos:line="22" pos:column="11">ABB</name><op:operator pos:line="22" pos:column="14">.</op:operator><name pos:line="22" pos:column="15">SrcML</name><op:operator pos:line="22" pos:column="20">.</op:operator><name pos:line="22" pos:column="21">Test</name></name> <block pos:line="22" pos:column="26">{
    <class><attribute pos:line="23" pos:column="5">[<expr><name pos:line="23" pos:column="6">TestFixture</name></expr>]</attribute>
    <attribute pos:line="24" pos:column="5">[<expr><call><name pos:line="24" pos:column="6">Category</name><argument_list pos:line="24" pos:column="14">(<argument><expr><lit:literal type="string" pos:line="24" pos:column="15">"Build"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="25" pos:column="5">public</specifier> class <name pos:line="25" pos:column="18">SrcMLGeneratorTests</name> <block pos:line="25" pos:column="38">{
        <decl_stmt><decl><type><specifier pos:line="26" pos:column="9">private</specifier> <name pos:line="26" pos:column="17">SrcMLGenerator</name></type> <name pos:line="26" pos:column="32">generator</name></decl>;</decl_stmt>
        
        <function><type><attribute pos:line="28" pos:column="9">[<expr><name pos:line="28" pos:column="10">TestFixtureSetUp</name></expr>]</attribute>
        <specifier pos:line="29" pos:column="9">public</specifier> <specifier pos:line="29" pos:column="16">static</specifier> <name pos:line="29" pos:column="23">void</name></type> <name pos:line="29" pos:column="28">FixtureInitialize</name><parameter_list pos:line="29" pos:column="45">()</parameter_list> <block pos:line="29" pos:column="48">{
            <expr_stmt><expr><call><name><name pos:line="30" pos:column="13">Directory</name><op:operator pos:line="30" pos:column="22">.</op:operator><name pos:line="30" pos:column="23">CreateDirectory</name></name><argument_list pos:line="30" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="30" pos:column="39">"srcmltest"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="31" pos:column="13">Directory</name><op:operator pos:line="31" pos:column="22">.</op:operator><name pos:line="31" pos:column="23">CreateDirectory</name></name><argument_list pos:line="31" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="31" pos:column="39">"srcml_xml"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="32" pos:column="13">File</name><op:operator pos:line="32" pos:column="17">.</op:operator><name pos:line="32" pos:column="18">WriteAllText</name></name><argument_list pos:line="32" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="32" pos:column="31">"srcmltest\\foo.c"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="32" pos:column="51">String</name><op:operator pos:line="32" pos:column="57">.</op:operator><name pos:line="32" pos:column="58">Format</name></name><argument_list pos:line="32" pos:column="64">(<argument><expr><lit:literal type="string" pos:line="32" pos:column="65">@"int foo() {{{0}printf(""hello world!"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="115">Environment</name><op:operator pos:line="32" pos:column="126">.</op:operator><name pos:line="32" pos:column="127">NewLine</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="34" pos:column="13">File</name><op:operator pos:line="34" pos:column="17">.</op:operator><name pos:line="34" pos:column="18">WriteAllText</name></name><argument_list pos:line="34" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="34" pos:column="31">"srcmltest\\bar.c"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="34" pos:column="51">String</name><op:operator pos:line="34" pos:column="57">.</op:operator><name pos:line="34" pos:column="58">Format</name></name><argument_list pos:line="34" pos:column="64">(<argument><expr><lit:literal type="string" pos:line="34" pos:column="65">@"int bar() {{{0}    printf(""goodbye, world!"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="122">Environment</name><op:operator pos:line="34" pos:column="133">.</op:operator><name pos:line="34" pos:column="134">NewLine</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="36" pos:column="13">File</name><op:operator pos:line="36" pos:column="17">.</op:operator><name pos:line="36" pos:column="18">WriteAllText</name></name><argument_list pos:line="36" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="36" pos:column="31">"srcmltest\\CSHARP.cs"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="36" pos:column="55">@"using System.Collections.Generic;
using System.Linq;
using System.Xml;
using System.Xml.Linq;
using System.Xml.XPath;
using ABB.SrcML;

namespace LoggingTransformation
{
    public class FunctionEntryLogTransform : ITransform
    {
        public IEnumerable&lt;XElement&gt; Query(XElement element)
        {
            var functions = from method in element.Descendants(SRC.method)
                                select method;
            return functions;
        }

        public XElement Transform(XElement element)
        {
            var first = element.Element(SRC.Block).Elements().First();
            var functionName = element.Element(SRC.Name).Value;
            first.AddBeforeSelf(new XElement(SRC.ExpressionStatement, string.Format(""LOG_FUNCTION_ENTRY(\""{0}\"");\n\t"", functionName)));

            return element;
        }
    }
}
"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="65" pos:column="13">File</name><op:operator pos:line="65" pos:column="17">.</op:operator><name pos:line="65" pos:column="18">WriteAllText</name></name><argument_list pos:line="65" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="65" pos:column="31">"srcmltest\\File with spaces.cpp"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="65" pos:column="66">String</name><op:operator pos:line="65" pos:column="72">.</op:operator><name pos:line="65" pos:column="73">Format</name></name><argument_list pos:line="65" pos:column="79">(<argument><expr><lit:literal type="string" pos:line="65" pos:column="80">@"int foo() {{{0}    printf(""hello world!"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="65" pos:column="134">Environment</name><op:operator pos:line="65" pos:column="145">.</op:operator><name pos:line="65" pos:column="146">NewLine</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="67" pos:column="13">Directory</name><op:operator pos:line="67" pos:column="22">.</op:operator><name pos:line="67" pos:column="23">CreateDirectory</name></name><argument_list pos:line="67" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="67" pos:column="39">"badPathTest"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="68" pos:column="13">Directory</name><op:operator pos:line="68" pos:column="22">.</op:operator><name pos:line="68" pos:column="23">CreateDirectory</name></name><argument_list pos:line="68" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="68" pos:column="39">"badPathTest\\BadPath™"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="69" pos:column="13">File</name><op:operator pos:line="69" pos:column="17">.</op:operator><name pos:line="69" pos:column="18">WriteAllText</name></name><argument_list pos:line="69" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="69" pos:column="31">"badPathTest\\BadPath™\\badPathTest.c"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="69" pos:column="73">String</name><op:operator pos:line="69" pos:column="79">.</op:operator><name pos:line="69" pos:column="80">Format</name></name><argument_list pos:line="69" pos:column="86">(<argument><expr><lit:literal type="string" pos:line="69" pos:column="87">@"int foo() {{{0}printf(""hello world!"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="69" pos:column="137">Environment</name><op:operator pos:line="69" pos:column="148">.</op:operator><name pos:line="69" pos:column="149">NewLine</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="70" pos:column="13">File</name><op:operator pos:line="70" pos:column="17">.</op:operator><name pos:line="70" pos:column="18">WriteAllText</name></name><argument_list pos:line="70" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="70" pos:column="31">"badPathTest\\fooBody.c"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="70" pos:column="57">String</name><op:operator pos:line="70" pos:column="63">.</op:operator><name pos:line="70" pos:column="64">Format</name></name><argument_list pos:line="70" pos:column="70">(<argument><expr><lit:literal type="string" pos:line="70" pos:column="71">@"int foo() {{{0}printf(""hello world!™"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="70" pos:column="124">Environment</name><op:operator pos:line="70" pos:column="135">.</op:operator><name pos:line="70" pos:column="136">NewLine</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="73" pos:column="9">[<expr><name pos:line="73" pos:column="10">TestFixtureTearDown</name></expr>]</attribute>
        <specifier pos:line="74" pos:column="9">public</specifier> <specifier pos:line="74" pos:column="16">static</specifier> <name pos:line="74" pos:column="23">void</name></type> <name pos:line="74" pos:column="28">FixtureCleanup</name><parameter_list pos:line="74" pos:column="42">()</parameter_list> <block pos:line="74" pos:column="45">{
            <expr_stmt><expr><call><name><name pos:line="75" pos:column="13">Directory</name><op:operator pos:line="75" pos:column="22">.</op:operator><name pos:line="75" pos:column="23">Delete</name></name><argument_list pos:line="75" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="75" pos:column="30">"srcmltest"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="75" pos:column="43">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="76" pos:column="13">Directory</name><op:operator pos:line="76" pos:column="22">.</op:operator><name pos:line="76" pos:column="23">Delete</name></name><argument_list pos:line="76" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="76" pos:column="30">"srcml_xml"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="76" pos:column="43">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="77" pos:column="13">Directory</name><op:operator pos:line="77" pos:column="22">.</op:operator><name pos:line="77" pos:column="23">Delete</name></name><argument_list pos:line="77" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="77" pos:column="30">"badPathTest"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="77" pos:column="45">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="80" pos:column="9">[<expr><name pos:line="80" pos:column="10">SetUp</name></expr>]</attribute>
        <specifier pos:line="81" pos:column="9">public</specifier> <name pos:line="81" pos:column="16">void</name></type> <name pos:line="81" pos:column="21">TestSetup</name><parameter_list pos:line="81" pos:column="30">()</parameter_list> <block pos:line="81" pos:column="33">{
            <expr_stmt><expr><name pos:line="82" pos:column="13">generator</name> <op:operator pos:line="82" pos:column="23">=</op:operator> <op:operator pos:line="82" pos:column="25">new</op:operator> <call><name pos:line="82" pos:column="29">SrcMLGenerator</name><argument_list pos:line="82" pos:column="43">(<argument><expr><name><name pos:line="82" pos:column="44">TestConstants</name><op:operator pos:line="82" pos:column="57">.</op:operator><name pos:line="82" pos:column="58">SrcmlPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="85" pos:column="9">[<expr><name pos:line="85" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="86" pos:column="9">public</specifier> <name pos:line="86" pos:column="16">void</name></type> <name pos:line="86" pos:column="21">DifferentLanguageTest</name><parameter_list pos:line="86" pos:column="42">()</parameter_list> <block pos:line="86" pos:column="45">{
            <expr_stmt><expr><call><name><name pos:line="87" pos:column="13">generator</name><op:operator pos:line="87" pos:column="22">.</op:operator><name pos:line="87" pos:column="23">GenerateSrcMLFromFile</name></name><argument_list pos:line="87" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="87" pos:column="45">"srcmltest\\CSHARP.cs"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="87" pos:column="69">"srcml_xml\\differentlanguage_java.xml"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="87" pos:column="110">Language</name><op:operator pos:line="87" pos:column="118">.</op:operator><name pos:line="87" pos:column="119">Java</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="88" pos:column="13">var</name></type> <name pos:line="88" pos:column="17">doc</name> <init pos:line="88" pos:column="21">= <expr><op:operator pos:line="88" pos:column="23">new</op:operator> <call><name pos:line="88" pos:column="27">SrcMLFile</name><argument_list pos:line="88" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="88" pos:column="37">"srcml_xml\\differentlanguage_java.xml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="89" pos:column="13">Assert</name><op:operator pos:line="89" pos:column="19">.</op:operator><name pos:line="89" pos:column="20">IsNotNull</name></name><argument_list pos:line="89" pos:column="29">(<argument><expr><name pos:line="89" pos:column="30">doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="92" pos:column="9">[<expr><name pos:line="92" pos:column="10">Test</name></expr><op:operator pos:line="92" pos:column="14">,</op:operator> <expr><call><name pos:line="92" pos:column="16">Category</name><argument_list pos:line="92" pos:column="24">(<argument><expr><lit:literal type="string" pos:line="92" pos:column="25">"SrcMLUpdate"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="93" pos:column="9">public</specifier> <name pos:line="93" pos:column="16">void</name></type> <name pos:line="93" pos:column="21">TestStrangeEncodings</name><parameter_list pos:line="93" pos:column="41">(<param><decl><type><attribute pos:line="93" pos:column="42">[<expr><call><name pos:line="93" pos:column="43">Values</name><argument_list pos:line="93" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="93" pos:column="50">@"badPathTest\BadPath™\badPathTest.c"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="93" pos:column="91">@"srcmltest\fooBody.c"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute> <name pos:line="93" pos:column="116">string</name></type> <name pos:line="93" pos:column="123">sourceFileName</name></decl></param>)</parameter_list> <block pos:line="93" pos:column="139">{
            <decl_stmt><decl><type><name pos:line="94" pos:column="13">var</name></type> <name pos:line="94" pos:column="17">xmlFileName</name> <init pos:line="94" pos:column="29">= <expr><call><name><name pos:line="94" pos:column="31">Path</name><op:operator pos:line="94" pos:column="35">.</op:operator><name pos:line="94" pos:column="36">Combine</name></name><argument_list pos:line="94" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="94" pos:column="44">"srcml_xml"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="94" pos:column="57">Path</name><op:operator pos:line="94" pos:column="61">.</op:operator><name pos:line="94" pos:column="62">GetFileName</name></name><argument_list pos:line="94" pos:column="73">(<argument><expr><call><name><name pos:line="94" pos:column="74">Path</name><op:operator pos:line="94" pos:column="78">.</op:operator><name pos:line="94" pos:column="79">ChangeExtension</name></name><argument_list pos:line="94" pos:column="94">(<argument><expr><name pos:line="94" pos:column="95">sourceFileName</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="94" pos:column="111">".xml"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="95" pos:column="13">generator</name><op:operator pos:line="95" pos:column="22">.</op:operator><name pos:line="95" pos:column="23">GenerateSrcMLFromFile</name></name><argument_list pos:line="95" pos:column="44">(<argument><expr><name pos:line="95" pos:column="45">sourceFileName</name></expr></argument>, <argument><expr><name pos:line="95" pos:column="61">xmlFileName</name></expr></argument>, <argument><expr><name><name pos:line="95" pos:column="74">Language</name><op:operator pos:line="95" pos:column="82">.</op:operator><name pos:line="95" pos:column="83">C</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="96" pos:column="13">var</name></type> <name pos:line="96" pos:column="17">doc</name> <init pos:line="96" pos:column="21">= <expr><op:operator pos:line="96" pos:column="23">new</op:operator> <call><name pos:line="96" pos:column="27">SrcMLFile</name><argument_list pos:line="96" pos:column="36">(<argument><expr><name pos:line="96" pos:column="37">xmlFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="97" pos:column="13">Assert</name><op:operator pos:line="97" pos:column="19">.</op:operator><name pos:line="97" pos:column="20">IsNotNull</name></name><argument_list pos:line="97" pos:column="29">(<argument><expr><name pos:line="97" pos:column="30">doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="100" pos:column="9">[<expr><name pos:line="100" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="101" pos:column="9">public</specifier> <name pos:line="101" pos:column="16">void</name></type> <name pos:line="101" pos:column="21">SrcMLFromStringTest</name><parameter_list pos:line="101" pos:column="40">()</parameter_list> <block pos:line="101" pos:column="43">{
            <decl_stmt><decl><type><name pos:line="102" pos:column="13">string</name></type> <name pos:line="102" pos:column="20">sourceCode</name> <init pos:line="102" pos:column="31">= <expr><lit:literal type="string" pos:line="102" pos:column="33">@"int foo() {
printf(""hello world!"");
}"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="105" pos:column="13">string</name></type> <name pos:line="105" pos:column="20">xml</name> <init pos:line="105" pos:column="24">= <expr><call><name><name pos:line="105" pos:column="26">generator</name><op:operator pos:line="105" pos:column="35">.</op:operator><name pos:line="105" pos:column="36">GenerateSrcMLFromString</name></name><argument_list pos:line="105" pos:column="59">(<argument><expr><name pos:line="105" pos:column="60">sourceCode</name></expr></argument>, <argument><expr><name><name pos:line="105" pos:column="72">Language</name><op:operator pos:line="105" pos:column="80">.</op:operator><name pos:line="105" pos:column="81">C</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="107" pos:column="13">XElement</name></type> <name pos:line="107" pos:column="22">element</name> <init pos:line="107" pos:column="30">= <expr><call><name><name pos:line="107" pos:column="32">XElement</name><op:operator pos:line="107" pos:column="40">.</op:operator><name pos:line="107" pos:column="41">Parse</name></name><argument_list pos:line="107" pos:column="46">(<argument><expr><name pos:line="107" pos:column="47">xml</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="109" pos:column="13">Assert</name><op:operator pos:line="109" pos:column="19">.</op:operator><name pos:line="109" pos:column="20">IsNotNull</name></name><argument_list pos:line="109" pos:column="29">(<argument><expr><name pos:line="109" pos:column="30">element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="112" pos:column="9">[<expr><name pos:line="112" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="113" pos:column="9">public</specifier> <name pos:line="113" pos:column="16">void</name></type> <name pos:line="113" pos:column="21">InvalidLanguageTest</name><parameter_list pos:line="113" pos:column="40">()</parameter_list> <block pos:line="113" pos:column="43">{
            <expr_stmt><expr><call><name><name pos:line="114" pos:column="13">generator</name><op:operator pos:line="114" pos:column="22">.</op:operator><name pos:line="114" pos:column="23">GenerateSrcMLFromFile</name></name><argument_list pos:line="114" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="114" pos:column="45">"srcmltest\\foo.c"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="114" pos:column="65">"srcml_xml\\invalidlanguage_java.xml"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="114" pos:column="104">Language</name><op:operator pos:line="114" pos:column="112">.</op:operator><name pos:line="114" pos:column="113">Java</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="115" pos:column="13">var</name></type> <name pos:line="115" pos:column="17">doc</name> <init pos:line="115" pos:column="21">= <expr><op:operator pos:line="115" pos:column="23">new</op:operator> <call><name pos:line="115" pos:column="27">SrcMLFile</name><argument_list pos:line="115" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="115" pos:column="37">"srcml_xml\\invalidlanguage_java.xml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="116" pos:column="13">Assert</name><op:operator pos:line="116" pos:column="19">.</op:operator><name pos:line="116" pos:column="20">IsNotNull</name></name><argument_list pos:line="116" pos:column="29">(<argument><expr><name pos:line="116" pos:column="30">doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="118" pos:column="13">doc</name> <op:operator pos:line="118" pos:column="17">=</op:operator> <name pos:line="118" pos:column="19">null</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="119" pos:column="13">generator</name><op:operator pos:line="119" pos:column="22">.</op:operator><name pos:line="119" pos:column="23">GenerateSrcMLFromFile</name></name><argument_list pos:line="119" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="119" pos:column="45">"srcmltest\\foo.c"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="119" pos:column="65">"srcml_xml\\invalidlanguage_cpp.xml"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="119" pos:column="103">Language</name><op:operator pos:line="119" pos:column="111">.</op:operator><name pos:line="119" pos:column="112">CPlusPlus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="120" pos:column="13">doc</name> <op:operator pos:line="120" pos:column="17">=</op:operator> <op:operator pos:line="120" pos:column="19">new</op:operator> <call><name pos:line="120" pos:column="23">SrcMLFile</name><argument_list pos:line="120" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="120" pos:column="33">"srcml_xml\\invalidlanguage_cpp.xml"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="121" pos:column="13">Assert</name><op:operator pos:line="121" pos:column="19">.</op:operator><name pos:line="121" pos:column="20">IsNotNull</name></name><argument_list pos:line="121" pos:column="29">(<argument><expr><name pos:line="121" pos:column="30">doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="123" pos:column="13">doc</name> <op:operator pos:line="123" pos:column="17">=</op:operator> <name pos:line="123" pos:column="19">null</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="124" pos:column="13">generator</name><op:operator pos:line="124" pos:column="22">.</op:operator><name pos:line="124" pos:column="23">GenerateSrcMLFromFile</name></name><argument_list pos:line="124" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="124" pos:column="45">"srcmltest\\foo.c"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="124" pos:column="65">"srcml_xml\\invalidlanguage_c.xml"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="124" pos:column="101">Language</name><op:operator pos:line="124" pos:column="109">.</op:operator><name pos:line="124" pos:column="110">C</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="125" pos:column="13">doc</name> <op:operator pos:line="125" pos:column="17">=</op:operator> <op:operator pos:line="125" pos:column="19">new</op:operator> <call><name pos:line="125" pos:column="23">SrcMLFile</name><argument_list pos:line="125" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="125" pos:column="33">"srcml_xml\\invalidlanguage_c.xml"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="127" pos:column="13">Assert</name><op:operator pos:line="127" pos:column="19">.</op:operator><name pos:line="127" pos:column="20">IsNotNull</name></name><argument_list pos:line="127" pos:column="29">(<argument><expr><name pos:line="127" pos:column="30">doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="130" pos:column="9">[<expr><name pos:line="130" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="131" pos:column="9">public</specifier> <name pos:line="131" pos:column="16">void</name></type> <name pos:line="131" pos:column="21">SingleFileTest</name><parameter_list pos:line="131" pos:column="35">()</parameter_list> <block pos:line="131" pos:column="38">{
            <expr_stmt><expr><call><name><name pos:line="132" pos:column="13">generator</name><op:operator pos:line="132" pos:column="22">.</op:operator><name pos:line="132" pos:column="23">GenerateSrcMLFromFile</name></name><argument_list pos:line="132" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="132" pos:column="45">"srcmltest\\foo.c"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="132" pos:column="65">"srcml_xml\\singlefile.xml"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="133" pos:column="13">var</name></type> <name pos:line="133" pos:column="17">unit</name> <init pos:line="133" pos:column="22">= <expr><call><name><name pos:line="133" pos:column="24">SrcMLElement</name><op:operator pos:line="133" pos:column="36">.</op:operator><name pos:line="133" pos:column="37">Load</name></name><argument_list pos:line="133" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="133" pos:column="42">"srcml_xml\\singlefile.xml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="134" pos:column="13">Assert</name><op:operator pos:line="134" pos:column="19">.</op:operator><name pos:line="134" pos:column="20">IsNotNull</name></name><argument_list pos:line="134" pos:column="29">(<argument><expr><name pos:line="134" pos:column="30">unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="135" pos:column="13">Assert</name><op:operator pos:line="135" pos:column="19">.</op:operator><name pos:line="135" pos:column="20">AreEqual</name></name><argument_list pos:line="135" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="135" pos:column="29">"srcmltest\\foo.c"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="135" pos:column="49">unit</name><op:operator pos:line="135" pos:column="53">.</op:operator><name pos:line="135" pos:column="54">Attribute</name></name><argument_list pos:line="135" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="135" pos:column="64">"filename"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="135" pos:column="75">.</op:operator><name pos:line="135" pos:column="76">Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="138" pos:column="9">[<expr><name pos:line="138" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="139" pos:column="9">public</specifier> <name pos:line="139" pos:column="16">void</name></type> <name pos:line="139" pos:column="21">MultipleFilesTest</name><parameter_list pos:line="139" pos:column="38">()</parameter_list> <block pos:line="139" pos:column="41">{
            <decl_stmt><decl><type><name pos:line="140" pos:column="13">var</name></type> <name pos:line="140" pos:column="17">doc</name> <init pos:line="140" pos:column="21">= <expr><call><name><name pos:line="140" pos:column="23">generator</name><op:operator pos:line="140" pos:column="32">.</op:operator><name pos:line="140" pos:column="33">GenerateSrcMLFileFromFiles</name></name><argument_list pos:line="140" pos:column="59">(<argument><expr><op:operator pos:line="140" pos:column="60">new</op:operator> <name><name pos:line="140" pos:column="64">string</name><index pos:line="140" pos:column="70">[]</index></name> <block pos:line="140" pos:column="73">{ <expr><lit:literal type="string" pos:line="140" pos:column="75">"srcmltest\\foo.c"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="140" pos:column="95">"srcmltest\\bar.c"</lit:literal></expr> }</block></expr></argument>, <argument><expr><lit:literal type="string" pos:line="140" pos:column="117">"srcml_xml\\multiplefile.xml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="142" pos:column="13">Assert</name><op:operator pos:line="142" pos:column="19">.</op:operator><name pos:line="142" pos:column="20">IsNotNull</name></name><argument_list pos:line="142" pos:column="29">(<argument><expr><name pos:line="142" pos:column="30">doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="143" pos:column="13">var</name></type> <name pos:line="143" pos:column="17">files</name> <init pos:line="143" pos:column="23">= <expr><call><name><name pos:line="143" pos:column="25">doc</name><op:operator pos:line="143" pos:column="28">.</op:operator><name pos:line="143" pos:column="29">FileUnits</name><op:operator pos:line="143" pos:column="38">.</op:operator><name pos:line="143" pos:column="39">ToList</name></name><argument_list pos:line="143" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="144" pos:column="13">Assert</name><op:operator pos:line="144" pos:column="19">.</op:operator><name pos:line="144" pos:column="20">AreEqual</name></name><argument_list pos:line="144" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="144" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="144" pos:column="32">files</name><op:operator pos:line="144" pos:column="37">.</op:operator><name pos:line="144" pos:column="38">Count</name></name><argument_list pos:line="144" pos:column="43">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="145" pos:column="13">Assert</name><op:operator pos:line="145" pos:column="19">.</op:operator><name pos:line="145" pos:column="20">AreEqual</name></name><argument_list pos:line="145" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="145" pos:column="29">"srcmltest\\foo.c"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="145" pos:column="49">files</name><index pos:line="145" pos:column="54">[<expr><lit:literal type="number" pos:line="145" pos:column="55">0</lit:literal></expr>]</index></name><op:operator pos:line="145" pos:column="57">.</op:operator><call><name pos:line="145" pos:column="58">Attribute</name><argument_list pos:line="145" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="145" pos:column="68">"filename"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="145" pos:column="79">.</op:operator><name pos:line="145" pos:column="80">Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="146" pos:column="13">Assert</name><op:operator pos:line="146" pos:column="19">.</op:operator><name pos:line="146" pos:column="20">AreEqual</name></name><argument_list pos:line="146" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="146" pos:column="29">"srcmltest\\bar.c"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="146" pos:column="49">files</name><index pos:line="146" pos:column="54">[<expr><lit:literal type="number" pos:line="146" pos:column="55">1</lit:literal></expr>]</index></name><op:operator pos:line="146" pos:column="57">.</op:operator><call><name pos:line="146" pos:column="58">Attribute</name><argument_list pos:line="146" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="146" pos:column="68">"filename"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="146" pos:column="79">.</op:operator><name pos:line="146" pos:column="80">Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="149" pos:column="9">[<expr><name pos:line="149" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="150" pos:column="9">public</specifier> <name pos:line="150" pos:column="16">void</name></type> <name pos:line="150" pos:column="21">MultipleFilesTest_DifferentDirectories</name><parameter_list pos:line="150" pos:column="59">()</parameter_list> <block pos:line="150" pos:column="62">{
            <decl_stmt><decl><type><name pos:line="151" pos:column="13">var</name></type> <name pos:line="151" pos:column="17">doc</name> <init pos:line="151" pos:column="21">= <expr><call><name><name pos:line="151" pos:column="23">generator</name><op:operator pos:line="151" pos:column="32">.</op:operator><name pos:line="151" pos:column="33">GenerateSrcMLFileFromFiles</name></name><argument_list pos:line="151" pos:column="59">(<argument><expr><op:operator pos:line="151" pos:column="60">new</op:operator> <name><name pos:line="151" pos:column="64">string</name><index pos:line="151" pos:column="70">[]</index></name> <block pos:line="151" pos:column="73">{ <expr><lit:literal type="string" pos:line="151" pos:column="75">"srcmltest\\foo.c"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="151" pos:column="95">"srcmltest\\bar.c"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="151" pos:column="115">"..\\..\\TestInputs\\baz.cpp"</lit:literal></expr> }</block></expr></argument>, <argument><expr><lit:literal type="string" pos:line="151" pos:column="148">"srcml_xml\\multiplefile.xml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="153" pos:column="13">Assert</name><op:operator pos:line="153" pos:column="19">.</op:operator><name pos:line="153" pos:column="20">IsNotNull</name></name><argument_list pos:line="153" pos:column="29">(<argument><expr><name pos:line="153" pos:column="30">doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="154" pos:column="13">var</name></type> <name pos:line="154" pos:column="17">files</name> <init pos:line="154" pos:column="23">= <expr><call><name><name pos:line="154" pos:column="25">doc</name><op:operator pos:line="154" pos:column="28">.</op:operator><name pos:line="154" pos:column="29">FileUnits</name><op:operator pos:line="154" pos:column="38">.</op:operator><name pos:line="154" pos:column="39">ToList</name></name><argument_list pos:line="154" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="155" pos:column="13">Assert</name><op:operator pos:line="155" pos:column="19">.</op:operator><name pos:line="155" pos:column="20">AreEqual</name></name><argument_list pos:line="155" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="155" pos:column="29">3</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="155" pos:column="32">files</name><op:operator pos:line="155" pos:column="37">.</op:operator><name pos:line="155" pos:column="38">Count</name></name><argument_list pos:line="155" pos:column="43">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="156" pos:column="13">Assert</name><op:operator pos:line="156" pos:column="19">.</op:operator><name pos:line="156" pos:column="20">AreEqual</name></name><argument_list pos:line="156" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="156" pos:column="29">"srcmltest\\foo.c"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="156" pos:column="49">files</name><index pos:line="156" pos:column="54">[<expr><lit:literal type="number" pos:line="156" pos:column="55">0</lit:literal></expr>]</index></name><op:operator pos:line="156" pos:column="57">.</op:operator><call><name pos:line="156" pos:column="58">Attribute</name><argument_list pos:line="156" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="156" pos:column="68">"filename"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="156" pos:column="79">.</op:operator><name pos:line="156" pos:column="80">Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="157" pos:column="13">Assert</name><op:operator pos:line="157" pos:column="19">.</op:operator><name pos:line="157" pos:column="20">AreEqual</name></name><argument_list pos:line="157" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="157" pos:column="29">"srcmltest\\bar.c"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="157" pos:column="49">files</name><index pos:line="157" pos:column="54">[<expr><lit:literal type="number" pos:line="157" pos:column="55">1</lit:literal></expr>]</index></name><op:operator pos:line="157" pos:column="57">.</op:operator><call><name pos:line="157" pos:column="58">Attribute</name><argument_list pos:line="157" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="157" pos:column="68">"filename"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="157" pos:column="79">.</op:operator><name pos:line="157" pos:column="80">Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="158" pos:column="13">Assert</name><op:operator pos:line="158" pos:column="19">.</op:operator><name pos:line="158" pos:column="20">AreEqual</name></name><argument_list pos:line="158" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="158" pos:column="29">"TestInputs\\baz.cpp"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="158" pos:column="52">files</name><index pos:line="158" pos:column="57">[<expr><lit:literal type="number" pos:line="158" pos:column="58">2</lit:literal></expr>]</index></name><op:operator pos:line="158" pos:column="60">.</op:operator><call><name pos:line="158" pos:column="61">Attribute</name><argument_list pos:line="158" pos:column="70">(<argument><expr><lit:literal type="string" pos:line="158" pos:column="71">"filename"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="158" pos:column="82">.</op:operator><name pos:line="158" pos:column="83">Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="161" pos:column="9">[<expr><name pos:line="161" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="162" pos:column="9">public</specifier> <name pos:line="162" pos:column="16">void</name></type> <name pos:line="162" pos:column="21">MultipleFilesTest_Language</name><parameter_list pos:line="162" pos:column="47">()</parameter_list> <block pos:line="162" pos:column="50">{
            <expr_stmt><expr><call><name><name pos:line="163" pos:column="13">generator</name><op:operator pos:line="163" pos:column="22">.</op:operator><name pos:line="163" pos:column="23">GenerateSrcMLFromFiles</name></name><argument_list pos:line="163" pos:column="45">(<argument><expr><op:operator pos:line="163" pos:column="46">new</op:operator> <name><name pos:line="163" pos:column="50">string</name><index pos:line="163" pos:column="56">[]</index></name> <block pos:line="163" pos:column="59">{ <expr><lit:literal type="string" pos:line="163" pos:column="61">"srcmltest\\foo.c"</lit:literal></expr><op:operator pos:line="163" pos:column="79">,</op:operator> <expr><lit:literal type="string" pos:line="163" pos:column="81">"srcmltest\\bar.c"</lit:literal></expr> }</block></expr></argument>, <argument><expr><lit:literal type="string" pos:line="163" pos:column="103">"srcml_xml\\multiplefile.xml"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="163" pos:column="134">Language</name><op:operator pos:line="163" pos:column="142">.</op:operator><name pos:line="163" pos:column="143">CPlusPlus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="164" pos:column="13">var</name></type> <name pos:line="164" pos:column="17">doc</name> <init pos:line="164" pos:column="21">= <expr><op:operator pos:line="164" pos:column="23">new</op:operator> <call><name pos:line="164" pos:column="27">SrcMLFile</name><argument_list pos:line="164" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="164" pos:column="37">"srcml_xml\\multiplefile.xml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="166" pos:column="13">Assert</name><op:operator pos:line="166" pos:column="19">.</op:operator><name pos:line="166" pos:column="20">IsNotNull</name></name><argument_list pos:line="166" pos:column="29">(<argument><expr><name pos:line="166" pos:column="30">doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="167" pos:column="13">var</name></type> <name pos:line="167" pos:column="17">files</name> <init pos:line="167" pos:column="23">= <expr><call><name><name pos:line="167" pos:column="25">doc</name><op:operator pos:line="167" pos:column="28">.</op:operator><name pos:line="167" pos:column="29">FileUnits</name><op:operator pos:line="167" pos:column="38">.</op:operator><name pos:line="167" pos:column="39">ToList</name></name><argument_list pos:line="167" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="168" pos:column="13">Assert</name><op:operator pos:line="168" pos:column="19">.</op:operator><name pos:line="168" pos:column="20">AreEqual</name></name><argument_list pos:line="168" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="168" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="168" pos:column="32">files</name><op:operator pos:line="168" pos:column="37">.</op:operator><name pos:line="168" pos:column="38">Count</name></name><argument_list pos:line="168" pos:column="43">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="169" pos:column="13">Assert</name><op:operator pos:line="169" pos:column="19">.</op:operator><name pos:line="169" pos:column="20">AreEqual</name></name><argument_list pos:line="169" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="169" pos:column="29">"srcmltest\\foo.c"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="169" pos:column="49">files</name><index pos:line="169" pos:column="54">[<expr><lit:literal type="number" pos:line="169" pos:column="55">0</lit:literal></expr>]</index></name><op:operator pos:line="169" pos:column="57">.</op:operator><call><name pos:line="169" pos:column="58">Attribute</name><argument_list pos:line="169" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="169" pos:column="68">"filename"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="169" pos:column="79">.</op:operator><name pos:line="169" pos:column="80">Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="170" pos:column="13">Assert</name><op:operator pos:line="170" pos:column="19">.</op:operator><name pos:line="170" pos:column="20">AreEqual</name></name><argument_list pos:line="170" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="170" pos:column="29">"C++"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="170" pos:column="36">files</name><index pos:line="170" pos:column="41">[<expr><lit:literal type="number" pos:line="170" pos:column="42">0</lit:literal></expr>]</index></name><op:operator pos:line="170" pos:column="44">.</op:operator><call><name pos:line="170" pos:column="45">Attribute</name><argument_list pos:line="170" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="170" pos:column="55">"language"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="170" pos:column="66">.</op:operator><name pos:line="170" pos:column="67">Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="171" pos:column="13">Assert</name><op:operator pos:line="171" pos:column="19">.</op:operator><name pos:line="171" pos:column="20">AreEqual</name></name><argument_list pos:line="171" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="171" pos:column="29">"srcmltest\\bar.c"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="171" pos:column="49">files</name><index pos:line="171" pos:column="54">[<expr><lit:literal type="number" pos:line="171" pos:column="55">1</lit:literal></expr>]</index></name><op:operator pos:line="171" pos:column="57">.</op:operator><call><name pos:line="171" pos:column="58">Attribute</name><argument_list pos:line="171" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="171" pos:column="68">"filename"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="171" pos:column="79">.</op:operator><name pos:line="171" pos:column="80">Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="172" pos:column="13">Assert</name><op:operator pos:line="172" pos:column="19">.</op:operator><name pos:line="172" pos:column="20">AreEqual</name></name><argument_list pos:line="172" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="172" pos:column="29">"C++"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="172" pos:column="36">files</name><index pos:line="172" pos:column="41">[<expr><lit:literal type="number" pos:line="172" pos:column="42">1</lit:literal></expr>]</index></name><op:operator pos:line="172" pos:column="44">.</op:operator><call><name pos:line="172" pos:column="45">Attribute</name><argument_list pos:line="172" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="172" pos:column="55">"language"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="172" pos:column="66">.</op:operator><name pos:line="172" pos:column="67">Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="175" pos:column="9">[<expr><name pos:line="175" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="176" pos:column="9">public</specifier> <name pos:line="176" pos:column="16">void</name></type> <name pos:line="176" pos:column="21">ExclusionFilterTest</name><parameter_list pos:line="176" pos:column="40">()</parameter_list> <block pos:line="176" pos:column="43">{
            <decl_stmt><decl><type><name pos:line="177" pos:column="13">var</name></type> <name pos:line="177" pos:column="17">exclusionList</name> <init pos:line="177" pos:column="31">= <expr><op:operator pos:line="177" pos:column="33">new</op:operator> <call><name><name pos:line="177" pos:column="37">List</name><argument_list pos:line="177" pos:column="41">&lt;<argument><name pos:line="177" pos:column="42">string</name></argument>&gt;</argument_list></name><argument_list pos:line="177" pos:column="49">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="178" pos:column="13">exclusionList</name><op:operator pos:line="178" pos:column="26">.</op:operator><name pos:line="178" pos:column="27">Add</name></name><argument_list pos:line="178" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="178" pos:column="31">"srcmltest\\bar.c"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="179" pos:column="13">exclusionList</name><op:operator pos:line="179" pos:column="26">.</op:operator><name pos:line="179" pos:column="27">Add</name></name><argument_list pos:line="179" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="179" pos:column="31">"srcmltest\\BadPath™\\badPathTest.c"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="180" pos:column="13">exclusionList</name><op:operator pos:line="180" pos:column="26">.</op:operator><name pos:line="180" pos:column="27">Add</name></name><argument_list pos:line="180" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="180" pos:column="31">"srcmltest\\fooBody.c"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="182" pos:column="13">var</name></type> <name pos:line="182" pos:column="17">doc</name> <init pos:line="182" pos:column="21">= <expr><call><name><name pos:line="182" pos:column="23">generator</name><op:operator pos:line="182" pos:column="32">.</op:operator><name pos:line="182" pos:column="33">GenerateSrcMLFileFromDirectory</name></name><argument_list pos:line="182" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="182" pos:column="64">"srcmltest"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="182" pos:column="77">"srcml_xml\\exclusionfilter.xml"</lit:literal></expr></argument>, <argument><expr><name pos:line="182" pos:column="111">exclusionList</name></expr></argument>, <argument><expr><name><name pos:line="182" pos:column="126">Language</name><op:operator pos:line="182" pos:column="134">.</op:operator><name pos:line="182" pos:column="135">C</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="184" pos:column="13">var</name></type> <name pos:line="184" pos:column="17">numFileUnits</name> <init pos:line="184" pos:column="30">= <expr><call><name><name pos:line="184" pos:column="32">doc</name><op:operator pos:line="184" pos:column="35">.</op:operator><name pos:line="184" pos:column="36">FileUnits</name><op:operator pos:line="184" pos:column="45">.</op:operator><name pos:line="184" pos:column="46">Count</name></name><argument_list pos:line="184" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="185" pos:column="13">string</name></type> <name pos:line="185" pos:column="20">firstSourceFile</name> <init pos:line="185" pos:column="36">= <expr><name pos:line="185" pos:column="38">null</name></expr></init></decl>;</decl_stmt>
            <if pos:line="186" pos:column="13">if<condition pos:line="186" pos:column="15">(<expr><name pos:line="186" pos:column="16">numFileUnits</name> <op:operator pos:line="186" pos:column="29">&gt;</op:operator> <lit:literal type="number" pos:line="186" pos:column="31">0</lit:literal></expr>)</condition><then pos:line="186" pos:column="33"> <block pos:line="186" pos:column="34">{
                <expr_stmt><expr><name pos:line="187" pos:column="17">firstSourceFile</name> <op:operator pos:line="187" pos:column="33">=</op:operator> <call><name><name pos:line="187" pos:column="35">doc</name><op:operator pos:line="187" pos:column="38">.</op:operator><name pos:line="187" pos:column="39">FileUnits</name><op:operator pos:line="187" pos:column="48">.</op:operator><name pos:line="187" pos:column="49">First</name></name><argument_list pos:line="187" pos:column="54">()</argument_list></call><op:operator pos:line="187" pos:column="56">.</op:operator><call><name pos:line="187" pos:column="57">Attribute</name><argument_list pos:line="187" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="187" pos:column="67">"filename"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="187" pos:column="78">.</op:operator><name pos:line="187" pos:column="79">Value</name></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name><name pos:line="190" pos:column="13">Assert</name><op:operator pos:line="190" pos:column="19">.</op:operator><name pos:line="190" pos:column="20">AreEqual</name></name><argument_list pos:line="190" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="190" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name pos:line="190" pos:column="32">numFileUnits</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="190" pos:column="46">"test.xml should have only one file in it"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="191" pos:column="13">Assert</name><op:operator pos:line="191" pos:column="19">.</op:operator><name pos:line="191" pos:column="20">AreEqual</name></name><argument_list pos:line="191" pos:column="28">(<argument><expr><call><name><name pos:line="191" pos:column="29">Path</name><op:operator pos:line="191" pos:column="33">.</op:operator><name pos:line="191" pos:column="34">GetFullPath</name></name><argument_list pos:line="191" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="191" pos:column="46">"srcmltest\\foo.c"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="191" pos:column="67">firstSourceFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="194" pos:column="9">[<expr><name pos:line="194" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="195" pos:column="9">public</specifier> <name pos:line="195" pos:column="16">void</name></type> <name pos:line="195" pos:column="21">EmptyOutputFileTest</name><parameter_list pos:line="195" pos:column="40">()</parameter_list> <block pos:line="195" pos:column="43">{
            <expr_stmt><expr><call><name><name pos:line="196" pos:column="13">File</name><op:operator pos:line="196" pos:column="17">.</op:operator><name pos:line="196" pos:column="18">WriteAllText</name></name><argument_list pos:line="196" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="196" pos:column="31">"srcml_xml\\emptyFile.xml"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="196" pos:column="59">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="197" pos:column="13">Assert</name><op:operator pos:line="197" pos:column="19">.</op:operator><name pos:line="197" pos:column="20">IsTrue</name></name><argument_list pos:line="197" pos:column="26">(<argument><expr><call><name><name pos:line="197" pos:column="27">File</name><op:operator pos:line="197" pos:column="31">.</op:operator><name pos:line="197" pos:column="32">Exists</name></name><argument_list pos:line="197" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="197" pos:column="39">"srcml_xml\\emptyFile.xml"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="199" pos:column="13">generator</name><op:operator pos:line="199" pos:column="22">.</op:operator><name pos:line="199" pos:column="23">GenerateSrcMLFromFile</name></name><argument_list pos:line="199" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="199" pos:column="45">"srcmltest\\foo.c"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="199" pos:column="65">"srcml_xml\\emptyFile.xml"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="200" pos:column="13">var</name></type> <name pos:line="200" pos:column="17">doc</name> <init pos:line="200" pos:column="21">= <expr><op:operator pos:line="200" pos:column="23">new</op:operator> <call><name pos:line="200" pos:column="27">SrcMLFile</name><argument_list pos:line="200" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="200" pos:column="37">"srcml_xml\\emptyFile.xml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="201" pos:column="13">Assert</name><op:operator pos:line="201" pos:column="19">.</op:operator><name pos:line="201" pos:column="20">IsNotNull</name></name><argument_list pos:line="201" pos:column="29">(<argument><expr><name pos:line="201" pos:column="30">doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="202" pos:column="13">Assert</name><op:operator pos:line="202" pos:column="19">.</op:operator><name pos:line="202" pos:column="20">AreEqual</name></name><argument_list pos:line="202" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="202" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="202" pos:column="32">doc</name><op:operator pos:line="202" pos:column="35">.</op:operator><name pos:line="202" pos:column="36">FileUnits</name><op:operator pos:line="202" pos:column="45">.</op:operator><name pos:line="202" pos:column="46">Count</name></name><argument_list pos:line="202" pos:column="51">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="205" pos:column="9">[<expr><name pos:line="205" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="206" pos:column="9">public</specifier> <name pos:line="206" pos:column="16">void</name></type> <name pos:line="206" pos:column="21">InputWithSpacesTest</name><parameter_list pos:line="206" pos:column="40">()</parameter_list> <block pos:line="206" pos:column="43">{
            <expr_stmt><expr><call><name><name pos:line="207" pos:column="13">generator</name><op:operator pos:line="207" pos:column="22">.</op:operator><name pos:line="207" pos:column="23">GenerateSrcMLFromFile</name></name><argument_list pos:line="207" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="207" pos:column="45">"srcmltest\\File with spaces.cpp"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="207" pos:column="80">"srcml_xml\\input_with_spaces.xml"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="208" pos:column="13">var</name></type> <name pos:line="208" pos:column="17">doc</name> <init pos:line="208" pos:column="21">= <expr><op:operator pos:line="208" pos:column="23">new</op:operator> <call><name pos:line="208" pos:column="27">SrcMLFile</name><argument_list pos:line="208" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="208" pos:column="37">"srcml_xml\\input_with_spaces.xml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="209" pos:column="13">Assert</name><op:operator pos:line="209" pos:column="19">.</op:operator><name pos:line="209" pos:column="20">IsNotNull</name></name><argument_list pos:line="209" pos:column="29">(<argument><expr><name pos:line="209" pos:column="30">doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="210" pos:column="13">Assert</name><op:operator pos:line="210" pos:column="19">.</op:operator><name pos:line="210" pos:column="20">AreEqual</name></name><argument_list pos:line="210" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="210" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="210" pos:column="32">doc</name><op:operator pos:line="210" pos:column="35">.</op:operator><name pos:line="210" pos:column="36">FileUnits</name><op:operator pos:line="210" pos:column="45">.</op:operator><name pos:line="210" pos:column="46">Count</name></name><argument_list pos:line="210" pos:column="51">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="213" pos:column="9">//[Test]</comment>
        <comment type="line" pos:line="214" pos:column="9">//[ExpectedException(typeof(SrcMLException))]</comment>
        <comment type="line" pos:line="215" pos:column="9">//public void TestGenerateSrcMLFromFile_UnRegisteredExtension() {</comment>
        <comment type="line" pos:line="216" pos:column="9">//    //The default src2srcml can't parse c#, so this should fail</comment>
        <comment type="line" pos:line="217" pos:column="9">//    generator.NonDefaultExecutables.Clear();</comment>
        <comment type="line" pos:line="218" pos:column="9">//    generator.GenerateSrcMLFromFile(@"srcmltest\CSHARP.csx", @"srcml_xml\CSHARP.xml");</comment>
        <comment type="line" pos:line="219" pos:column="9">//}</comment>

        <function><type><attribute pos:line="221" pos:column="9">[<expr><name pos:line="221" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="222" pos:column="9">public</specifier> <name pos:line="222" pos:column="16">void</name></type> <name pos:line="222" pos:column="21">TestGenerateSrcMLFromFile_NonDefaultExtension</name><parameter_list pos:line="222" pos:column="66">()</parameter_list> <block pos:line="222" pos:column="69">{
            <expr_stmt><expr><call><name><name pos:line="223" pos:column="13">generator</name><op:operator pos:line="223" pos:column="22">.</op:operator><name pos:line="223" pos:column="23">GenerateSrcMLFromFile</name></name><argument_list pos:line="223" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="223" pos:column="45">@"srcmltest\CSHARP.cs"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="223" pos:column="69">@"srcml_xml\CSHARP.xml"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="224" pos:column="13">var</name></type> <name pos:line="224" pos:column="17">doc</name> <init pos:line="224" pos:column="21">= <expr><op:operator pos:line="224" pos:column="23">new</op:operator> <call><name pos:line="224" pos:column="27">SrcMLFile</name><argument_list pos:line="224" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="224" pos:column="37">@"srcml_xml\CSHARP.xml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="225" pos:column="13">Assert</name><op:operator pos:line="225" pos:column="19">.</op:operator><name pos:line="225" pos:column="20">IsNotNull</name></name><argument_list pos:line="225" pos:column="29">(<argument><expr><name pos:line="225" pos:column="30">doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="226" pos:column="13">Assert</name><op:operator pos:line="226" pos:column="19">.</op:operator><name pos:line="226" pos:column="20">AreEqual</name></name><argument_list pos:line="226" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="226" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="226" pos:column="32">doc</name><op:operator pos:line="226" pos:column="35">.</op:operator><name pos:line="226" pos:column="36">FileUnits</name><op:operator pos:line="226" pos:column="45">.</op:operator><name pos:line="226" pos:column="46">Count</name></name><argument_list pos:line="226" pos:column="51">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="229" pos:column="9">[<expr><name pos:line="229" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="230" pos:column="9">public</specifier> <name pos:line="230" pos:column="16">void</name></type> <name pos:line="230" pos:column="21">TestGenerateSrcMLFromFiles_NonDefaultExtension</name><parameter_list pos:line="230" pos:column="67">()</parameter_list> <block pos:line="230" pos:column="70">{
            <decl_stmt><decl><type><name pos:line="231" pos:column="13">var</name></type> <name pos:line="231" pos:column="17">doc</name> <init pos:line="231" pos:column="21">= <expr><call><name><name pos:line="231" pos:column="23">generator</name><op:operator pos:line="231" pos:column="32">.</op:operator><name pos:line="231" pos:column="33">GenerateSrcMLFileFromFiles</name></name><argument_list pos:line="231" pos:column="59">(<argument><expr><op:operator pos:line="231" pos:column="60">new</op:operator><index pos:line="231" pos:column="63">[]</index> <block pos:line="231" pos:column="66">{<expr><lit:literal type="string" pos:line="231" pos:column="67">@"srcmltest\File with spaces.cpp"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="231" pos:column="102">@"srcmltest\CSHARP.cs"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="231" pos:column="126">@"srcmltest\foo.c"</lit:literal></expr>}</block></expr></argument>, <argument><expr><lit:literal type="string" pos:line="231" pos:column="147">@"srcml_xml\multiple_files_csharp.xml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="232" pos:column="13">Assert</name><op:operator pos:line="232" pos:column="19">.</op:operator><name pos:line="232" pos:column="20">IsNotNull</name></name><argument_list pos:line="232" pos:column="29">(<argument><expr><name pos:line="232" pos:column="30">doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="233" pos:column="13">Assert</name><op:operator pos:line="233" pos:column="19">.</op:operator><name pos:line="233" pos:column="20">AreEqual</name></name><argument_list pos:line="233" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="233" pos:column="29">3</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="233" pos:column="32">doc</name><op:operator pos:line="233" pos:column="35">.</op:operator><name pos:line="233" pos:column="36">FileUnits</name><op:operator pos:line="233" pos:column="45">.</op:operator><name pos:line="233" pos:column="46">Count</name></name><argument_list pos:line="233" pos:column="51">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="236" pos:column="9">//[Test]</comment>
        <comment type="line" pos:line="237" pos:column="9">//[ExpectedException(typeof(InvalidOperationException))]</comment>
        <comment type="line" pos:line="238" pos:column="9">//public void TestRegisterExecutable_Duplicate() {</comment>
        <comment type="line" pos:line="239" pos:column="9">//    generator.RegisterExecutable(Path.Combine(TestConstants.SrcmlPath, "csharp"), new[] {Language.CSharp});</comment>
        <comment type="line" pos:line="240" pos:column="9">//}</comment>

        <comment type="line" pos:line="242" pos:column="9">//[Test]</comment>
        <comment type="line" pos:line="243" pos:column="9">//public void TestSupportedLanguages() {</comment>
        <comment type="line" pos:line="244" pos:column="9">//    var langs = generator.SupportedLanguages.ToList();</comment>
        <comment type="line" pos:line="245" pos:column="9">//    Assert.AreEqual(5, langs.Count);</comment>
        <comment type="line" pos:line="246" pos:column="9">//    Assert.IsTrue(langs.Contains(Language.C));</comment>
        <comment type="line" pos:line="247" pos:column="9">//    Assert.IsTrue(langs.Contains(Language.CPlusPlus));</comment>
        <comment type="line" pos:line="248" pos:column="9">//    Assert.IsTrue(langs.Contains(Language.CSharp));</comment>
        <comment type="line" pos:line="249" pos:column="9">//    Assert.IsTrue(langs.Contains(Language.Java));</comment>
        <comment type="line" pos:line="250" pos:column="9">//    Assert.IsTrue(langs.Contains(Language.AspectJ));</comment>

        <comment type="line" pos:line="252" pos:column="9">//    generator.NonDefaultExecutables.Clear();</comment>
        <comment type="line" pos:line="253" pos:column="9">//    langs = generator.SupportedLanguages.ToList();</comment>
        <comment type="line" pos:line="254" pos:column="9">//    Assert.AreEqual(4, langs.Count);</comment>
        <comment type="line" pos:line="255" pos:column="9">//    Assert.IsFalse(langs.Contains(Language.CSharp));</comment>
        <comment type="line" pos:line="256" pos:column="9">//}</comment>
    }</block></class>
}</block></namespace>
</unit>
