<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data.Test\JavaCodeParserTests.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2013 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *    Patrick Francis (ABB Group) - API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">ABB</name><op:operator pos:line="13" pos:column="10">.</op:operator><name pos:line="13" pos:column="11">SrcML</name><op:operator pos:line="13" pos:column="16">.</op:operator><name pos:line="13" pos:column="17">Test</name><op:operator pos:line="13" pos:column="21">.</op:operator><name pos:line="13" pos:column="22">Utilities</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">NUnit</name><op:operator pos:line="14" pos:column="12">.</op:operator><name pos:line="14" pos:column="13">Framework</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Linq</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Xml</name><op:operator pos:line="16" pos:column="17">.</op:operator><name pos:line="16" pos:column="18">Linq</name></name>;</using>

<namespace pos:line="18" pos:column="1">namespace <name><name pos:line="18" pos:column="11">ABB</name><op:operator pos:line="18" pos:column="14">.</op:operator><name pos:line="18" pos:column="15">SrcML</name><op:operator pos:line="18" pos:column="20">.</op:operator><name pos:line="18" pos:column="21">Data</name><op:operator pos:line="18" pos:column="25">.</op:operator><name pos:line="18" pos:column="26">Test</name></name> <block pos:line="18" pos:column="31">{

    <class><attribute pos:line="20" pos:column="5">[<expr><name pos:line="20" pos:column="6">TestFixture</name></expr>]</attribute>
    <attribute pos:line="21" pos:column="5">[<expr><call><name pos:line="21" pos:column="6">Category</name><argument_list pos:line="21" pos:column="14">(<argument><expr><lit:literal type="string" pos:line="21" pos:column="15">"Build"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="22" pos:column="5">internal</specifier> class <name pos:line="22" pos:column="20">JavaCodeParserTests</name> <block pos:line="22" pos:column="40">{
        <decl_stmt><decl><type><specifier pos:line="23" pos:column="9">private</specifier> <name pos:line="23" pos:column="17">AbstractCodeParser</name></type> <name pos:line="23" pos:column="36">codeParser</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="24" pos:column="9">private</specifier> <name pos:line="24" pos:column="17">SrcMLFileUnitSetup</name></type> <name pos:line="24" pos:column="36">fileSetup</name></decl>;</decl_stmt>

        <function><type><attribute pos:line="26" pos:column="9">[<expr><name pos:line="26" pos:column="10">TestFixtureSetUp</name></expr>]</attribute>
        <specifier pos:line="27" pos:column="9">public</specifier> <name pos:line="27" pos:column="16">void</name></type> <name pos:line="27" pos:column="21">ClassSetup</name><parameter_list pos:line="27" pos:column="31">()</parameter_list> <block pos:line="27" pos:column="34">{
            <expr_stmt><expr><name pos:line="28" pos:column="13">codeParser</name> <op:operator pos:line="28" pos:column="24">=</op:operator> <op:operator pos:line="28" pos:column="26">new</op:operator> <call><name pos:line="28" pos:column="30">JavaCodeParser</name><argument_list pos:line="28" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="29" pos:column="13">fileSetup</name> <op:operator pos:line="29" pos:column="23">=</op:operator> <op:operator pos:line="29" pos:column="25">new</op:operator> <call><name pos:line="29" pos:column="29">SrcMLFileUnitSetup</name><argument_list pos:line="29" pos:column="47">(<argument><expr><name><name pos:line="29" pos:column="48">Language</name><op:operator pos:line="29" pos:column="56">.</op:operator><name pos:line="29" pos:column="57">Java</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="32" pos:column="9">[<expr><name pos:line="32" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="33" pos:column="9">public</specifier> <name pos:line="33" pos:column="16">void</name></type> <name pos:line="33" pos:column="21">TestCreateAliasesForFiles_ImportClass</name><parameter_list pos:line="33" pos:column="58">()</parameter_list> <block pos:line="33" pos:column="61">{
            <comment type="line" pos:line="34" pos:column="13">//import x.y.z;</comment>
            <decl_stmt><decl><type><name pos:line="35" pos:column="13">string</name></type> <name pos:line="35" pos:column="20">xml</name> <init pos:line="35" pos:column="24">= <expr><lit:literal type="string" pos:line="35" pos:column="26">@"&lt;import&gt;import &lt;name&gt;&lt;name&gt;x&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;y&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;z&lt;/name&gt;&lt;/name&gt;;&lt;/import&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="36" pos:column="13">XElement</name></type> <name pos:line="36" pos:column="22">xmlElement</name> <init pos:line="36" pos:column="33">= <expr><call><name><name pos:line="36" pos:column="35">fileSetup</name><op:operator pos:line="36" pos:column="44">.</op:operator><name pos:line="36" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="36" pos:column="69">(<argument><expr><name pos:line="36" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="36" pos:column="75">"A.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="38" pos:column="13">var</name></type> <name pos:line="38" pos:column="17">globalScope</name> <init pos:line="38" pos:column="29">= <expr><call><name><name pos:line="38" pos:column="31">codeParser</name><op:operator pos:line="38" pos:column="41">.</op:operator><name pos:line="38" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="38" pos:column="55">(<argument><expr><name pos:line="38" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="39" pos:column="13">Assert</name><op:operator pos:line="39" pos:column="19">.</op:operator><name pos:line="39" pos:column="20">AreEqual</name></name><argument_list pos:line="39" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="39" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="32">globalScope</name><op:operator pos:line="39" pos:column="43">.</op:operator><name pos:line="39" pos:column="44">ChildStatements</name><op:operator pos:line="39" pos:column="59">.</op:operator><name pos:line="39" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="41" pos:column="13">var</name></type> <name pos:line="41" pos:column="17">actual</name> <init pos:line="41" pos:column="24">= <expr><name><name pos:line="41" pos:column="26">globalScope</name><op:operator pos:line="41" pos:column="37">.</op:operator><name pos:line="41" pos:column="38">ChildStatements</name><index pos:line="41" pos:column="53">[<expr><lit:literal type="number" pos:line="41" pos:column="54">0</lit:literal></expr>]</index></name> <op:operator pos:line="41" pos:column="57">as</op:operator> <name pos:line="41" pos:column="60">AliasStatement</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="42" pos:column="13">Assert</name><op:operator pos:line="42" pos:column="19">.</op:operator><name pos:line="42" pos:column="20">IsNotNull</name></name><argument_list pos:line="42" pos:column="29">(<argument><expr><name pos:line="42" pos:column="30">actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="43" pos:column="13">Assert</name><op:operator pos:line="43" pos:column="19">.</op:operator><name pos:line="43" pos:column="20">AreEqual</name></name><argument_list pos:line="43" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="43" pos:column="29">"z"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="43" pos:column="34">actual</name><op:operator pos:line="43" pos:column="40">.</op:operator><name pos:line="43" pos:column="41">AliasName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="44" pos:column="13">Assert</name><op:operator pos:line="44" pos:column="19">.</op:operator><name pos:line="44" pos:column="20">AreEqual</name></name><argument_list pos:line="44" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="44" pos:column="29">"x . y . z"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="44" pos:column="42">actual</name><op:operator pos:line="44" pos:column="48">.</op:operator><name pos:line="44" pos:column="49">Target</name><op:operator pos:line="44" pos:column="55">.</op:operator><name pos:line="44" pos:column="56">ToString</name></name><argument_list pos:line="44" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="47" pos:column="9">[<expr><name pos:line="47" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="48" pos:column="9">public</specifier> <name pos:line="48" pos:column="16">void</name></type> <name pos:line="48" pos:column="21">TestCreateAliasesForFiles_ImportNamespace</name><parameter_list pos:line="48" pos:column="62">()</parameter_list> <block pos:line="48" pos:column="65">{
            <comment type="line" pos:line="49" pos:column="13">// import x . /*test */ y  /*test */ . z .* /*test*/;</comment>
            <decl_stmt><decl><type><name pos:line="50" pos:column="13">string</name></type> <name pos:line="50" pos:column="20">xml</name> <init pos:line="50" pos:column="24">= <expr><lit:literal type="string" pos:line="50" pos:column="26">@"&lt;import&gt;import &lt;name&gt;&lt;name&gt;x&lt;/name&gt; &lt;op:operator&gt;.&lt;/op:operator&gt; &lt;comment type=""block&gt;/*test */&lt;/comment&gt; &lt;name&gt;y&lt;/name&gt;  &lt;comment type=""block&gt;/*test */&lt;/comment&gt; &lt;op:operator&gt;.&lt;/op:operator&gt; &lt;name&gt;z&lt;/name&gt;&lt;/name&gt; .* &lt;comment type=""block&gt;/*test*/&lt;/comment&gt;;&lt;/import&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="51" pos:column="13">XElement</name></type> <name pos:line="51" pos:column="22">xmlElement</name> <init pos:line="51" pos:column="33">= <expr><call><name><name pos:line="51" pos:column="35">fileSetup</name><op:operator pos:line="51" pos:column="44">.</op:operator><name pos:line="51" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="51" pos:column="69">(<argument><expr><name pos:line="51" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="51" pos:column="75">"A.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="53" pos:column="13">var</name></type> <name pos:line="53" pos:column="17">globalScope</name> <init pos:line="53" pos:column="29">= <expr><call><name><name pos:line="53" pos:column="31">codeParser</name><op:operator pos:line="53" pos:column="41">.</op:operator><name pos:line="53" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="53" pos:column="55">(<argument><expr><name pos:line="53" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="54" pos:column="13">Assert</name><op:operator pos:line="54" pos:column="19">.</op:operator><name pos:line="54" pos:column="20">AreEqual</name></name><argument_list pos:line="54" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="54" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="32">globalScope</name><op:operator pos:line="54" pos:column="43">.</op:operator><name pos:line="54" pos:column="44">ChildStatements</name><op:operator pos:line="54" pos:column="59">.</op:operator><name pos:line="54" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="56" pos:column="13">var</name></type> <name pos:line="56" pos:column="17">actual</name> <init pos:line="56" pos:column="24">= <expr><name><name pos:line="56" pos:column="26">globalScope</name><op:operator pos:line="56" pos:column="37">.</op:operator><name pos:line="56" pos:column="38">ChildStatements</name><index pos:line="56" pos:column="53">[<expr><lit:literal type="number" pos:line="56" pos:column="54">0</lit:literal></expr>]</index></name> <op:operator pos:line="56" pos:column="57">as</op:operator> <name pos:line="56" pos:column="60">ImportStatement</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="57" pos:column="13">Assert</name><op:operator pos:line="57" pos:column="19">.</op:operator><name pos:line="57" pos:column="20">IsNotNull</name></name><argument_list pos:line="57" pos:column="29">(<argument><expr><name pos:line="57" pos:column="30">actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="58" pos:column="13">Assert</name><op:operator pos:line="58" pos:column="19">.</op:operator><name pos:line="58" pos:column="20">AreEqual</name></name><argument_list pos:line="58" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="58" pos:column="29">"x . y . z"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="58" pos:column="42">actual</name><op:operator pos:line="58" pos:column="48">.</op:operator><name pos:line="58" pos:column="49">ImportedNamespace</name><op:operator pos:line="58" pos:column="66">.</op:operator><name pos:line="58" pos:column="67">ToString</name></name><argument_list pos:line="58" pos:column="75">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="61" pos:column="9">[<expr><name pos:line="61" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="62" pos:column="9">public</specifier> <name pos:line="62" pos:column="16">void</name></type> <name pos:line="62" pos:column="21">TestCreateTypeDefinition_ClassInPackage</name><parameter_list pos:line="62" pos:column="60">()</parameter_list> <block pos:line="62" pos:column="63">{
            <comment type="line" pos:line="63" pos:column="13">//package A.B.C;</comment>
            <comment type="line" pos:line="64" pos:column="13">//public class D { }</comment>
            <decl_stmt><decl><type><name pos:line="65" pos:column="13">string</name></type> <name pos:line="65" pos:column="20">xml</name> <init pos:line="65" pos:column="24">= <expr><lit:literal type="string" pos:line="65" pos:column="26">@"&lt;package&gt;package &lt;name&gt;&lt;name&gt;A&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;B&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;C&lt;/name&gt;&lt;/name&gt;;&lt;/package&gt;
&lt;class&gt;&lt;specifier&gt;public&lt;/specifier&gt; class &lt;name&gt;D&lt;/name&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="67" pos:column="13">XElement</name></type> <name pos:line="67" pos:column="22">xmlElement</name> <init pos:line="67" pos:column="33">= <expr><call><name><name pos:line="67" pos:column="35">fileSetup</name><op:operator pos:line="67" pos:column="44">.</op:operator><name pos:line="67" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="67" pos:column="69">(<argument><expr><name pos:line="67" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="67" pos:column="75">"D.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="69" pos:column="13">var</name></type> <name pos:line="69" pos:column="17">globalScope</name> <init pos:line="69" pos:column="29">= <expr><call><name><name pos:line="69" pos:column="31">codeParser</name><op:operator pos:line="69" pos:column="41">.</op:operator><name pos:line="69" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="69" pos:column="55">(<argument><expr><name pos:line="69" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="70" pos:column="13">Assert</name><op:operator pos:line="70" pos:column="19">.</op:operator><name pos:line="70" pos:column="20">IsTrue</name></name><argument_list pos:line="70" pos:column="26">(<argument><expr><name><name pos:line="70" pos:column="27">globalScope</name><op:operator pos:line="70" pos:column="38">.</op:operator><name pos:line="70" pos:column="39">IsGlobal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="71" pos:column="13">Assert</name><op:operator pos:line="71" pos:column="19">.</op:operator><name pos:line="71" pos:column="20">AreEqual</name></name><argument_list pos:line="71" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="71" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="71" pos:column="32">globalScope</name><op:operator pos:line="71" pos:column="43">.</op:operator><name pos:line="71" pos:column="44">ChildStatements</name><op:operator pos:line="71" pos:column="59">.</op:operator><name pos:line="71" pos:column="60">Count</name></name><argument_list pos:line="71" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="73" pos:column="13">var</name></type> <name pos:line="73" pos:column="17">packageA</name> <init pos:line="73" pos:column="26">= <expr><call><name><name pos:line="73" pos:column="28">globalScope</name><op:operator pos:line="73" pos:column="39">.</op:operator><name pos:line="73" pos:column="40">ChildStatements</name><op:operator pos:line="73" pos:column="55">.</op:operator><name pos:line="73" pos:column="56">First</name></name><argument_list pos:line="73" pos:column="61">()</argument_list></call> <op:operator pos:line="73" pos:column="64">as</op:operator> <name pos:line="73" pos:column="67">NamespaceDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="74" pos:column="13">Assert</name><op:operator pos:line="74" pos:column="19">.</op:operator><name pos:line="74" pos:column="20">IsNotNull</name></name><argument_list pos:line="74" pos:column="29">(<argument><expr><name pos:line="74" pos:column="30">packageA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="75" pos:column="13">Assert</name><op:operator pos:line="75" pos:column="19">.</op:operator><name pos:line="75" pos:column="20">AreEqual</name></name><argument_list pos:line="75" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="75" pos:column="29">"A"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="75" pos:column="34">packageA</name><op:operator pos:line="75" pos:column="42">.</op:operator><name pos:line="75" pos:column="43">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="76" pos:column="13">Assert</name><op:operator pos:line="76" pos:column="19">.</op:operator><name pos:line="76" pos:column="20">IsFalse</name></name><argument_list pos:line="76" pos:column="27">(<argument><expr><name><name pos:line="76" pos:column="28">packageA</name><op:operator pos:line="76" pos:column="36">.</op:operator><name pos:line="76" pos:column="37">IsGlobal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="77" pos:column="13">Assert</name><op:operator pos:line="77" pos:column="19">.</op:operator><name pos:line="77" pos:column="20">AreEqual</name></name><argument_list pos:line="77" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="77" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="77" pos:column="32">packageA</name><op:operator pos:line="77" pos:column="40">.</op:operator><name pos:line="77" pos:column="41">ChildStatements</name><op:operator pos:line="77" pos:column="56">.</op:operator><name pos:line="77" pos:column="57">Count</name></name><argument_list pos:line="77" pos:column="62">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="79" pos:column="13">var</name></type> <name pos:line="79" pos:column="17">packageAB</name> <init pos:line="79" pos:column="27">= <expr><call><name><name pos:line="79" pos:column="29">packageA</name><op:operator pos:line="79" pos:column="37">.</op:operator><name pos:line="79" pos:column="38">ChildStatements</name><op:operator pos:line="79" pos:column="53">.</op:operator><name pos:line="79" pos:column="54">First</name></name><argument_list pos:line="79" pos:column="59">()</argument_list></call> <op:operator pos:line="79" pos:column="62">as</op:operator> <name pos:line="79" pos:column="65">NamespaceDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="80" pos:column="13">Assert</name><op:operator pos:line="80" pos:column="19">.</op:operator><name pos:line="80" pos:column="20">IsNotNull</name></name><argument_list pos:line="80" pos:column="29">(<argument><expr><name pos:line="80" pos:column="30">packageAB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="81" pos:column="13">Assert</name><op:operator pos:line="81" pos:column="19">.</op:operator><name pos:line="81" pos:column="20">AreEqual</name></name><argument_list pos:line="81" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="81" pos:column="29">"B"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="81" pos:column="34">packageAB</name><op:operator pos:line="81" pos:column="43">.</op:operator><name pos:line="81" pos:column="44">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="82" pos:column="13">Assert</name><op:operator pos:line="82" pos:column="19">.</op:operator><name pos:line="82" pos:column="20">IsFalse</name></name><argument_list pos:line="82" pos:column="27">(<argument><expr><name><name pos:line="82" pos:column="28">packageAB</name><op:operator pos:line="82" pos:column="37">.</op:operator><name pos:line="82" pos:column="38">IsGlobal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="83" pos:column="13">Assert</name><op:operator pos:line="83" pos:column="19">.</op:operator><name pos:line="83" pos:column="20">AreEqual</name></name><argument_list pos:line="83" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="83" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="83" pos:column="32">packageAB</name><op:operator pos:line="83" pos:column="41">.</op:operator><name pos:line="83" pos:column="42">ChildStatements</name><op:operator pos:line="83" pos:column="57">.</op:operator><name pos:line="83" pos:column="58">Count</name></name><argument_list pos:line="83" pos:column="63">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="85" pos:column="13">var</name></type> <name pos:line="85" pos:column="17">packageABC</name> <init pos:line="85" pos:column="28">= <expr><call><name><name pos:line="85" pos:column="30">packageAB</name><op:operator pos:line="85" pos:column="39">.</op:operator><name pos:line="85" pos:column="40">ChildStatements</name><op:operator pos:line="85" pos:column="55">.</op:operator><name pos:line="85" pos:column="56">First</name></name><argument_list pos:line="85" pos:column="61">()</argument_list></call> <op:operator pos:line="85" pos:column="64">as</op:operator> <name pos:line="85" pos:column="67">NamespaceDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="86" pos:column="13">Assert</name><op:operator pos:line="86" pos:column="19">.</op:operator><name pos:line="86" pos:column="20">IsNotNull</name></name><argument_list pos:line="86" pos:column="29">(<argument><expr><name pos:line="86" pos:column="30">packageABC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="87" pos:column="13">Assert</name><op:operator pos:line="87" pos:column="19">.</op:operator><name pos:line="87" pos:column="20">AreEqual</name></name><argument_list pos:line="87" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="87" pos:column="29">"C"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="87" pos:column="34">packageABC</name><op:operator pos:line="87" pos:column="44">.</op:operator><name pos:line="87" pos:column="45">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="88" pos:column="13">Assert</name><op:operator pos:line="88" pos:column="19">.</op:operator><name pos:line="88" pos:column="20">IsFalse</name></name><argument_list pos:line="88" pos:column="27">(<argument><expr><name><name pos:line="88" pos:column="28">packageABC</name><op:operator pos:line="88" pos:column="38">.</op:operator><name pos:line="88" pos:column="39">IsGlobal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="89" pos:column="13">Assert</name><op:operator pos:line="89" pos:column="19">.</op:operator><name pos:line="89" pos:column="20">AreEqual</name></name><argument_list pos:line="89" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="89" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="89" pos:column="32">packageABC</name><op:operator pos:line="89" pos:column="42">.</op:operator><name pos:line="89" pos:column="43">ChildStatements</name><op:operator pos:line="89" pos:column="58">.</op:operator><name pos:line="89" pos:column="59">Count</name></name><argument_list pos:line="89" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="91" pos:column="13">var</name></type> <name pos:line="91" pos:column="17">typeD</name> <init pos:line="91" pos:column="23">= <expr><call><name><name pos:line="91" pos:column="25">packageABC</name><op:operator pos:line="91" pos:column="35">.</op:operator><name pos:line="91" pos:column="36">ChildStatements</name><op:operator pos:line="91" pos:column="51">.</op:operator><name pos:line="91" pos:column="52">First</name></name><argument_list pos:line="91" pos:column="57">()</argument_list></call> <op:operator pos:line="91" pos:column="60">as</op:operator> <name pos:line="91" pos:column="63">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="92" pos:column="13">Assert</name><op:operator pos:line="92" pos:column="19">.</op:operator><name pos:line="92" pos:column="20">IsNotNull</name></name><argument_list pos:line="92" pos:column="29">(<argument><expr><name pos:line="92" pos:column="30">typeD</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="92" pos:column="37">"Type D is not a type definition"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="93" pos:column="13">Assert</name><op:operator pos:line="93" pos:column="19">.</op:operator><name pos:line="93" pos:column="20">AreEqual</name></name><argument_list pos:line="93" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="93" pos:column="29">"D"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="93" pos:column="34">typeD</name><op:operator pos:line="93" pos:column="39">.</op:operator><name pos:line="93" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="96" pos:column="9">[<expr><name pos:line="96" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="97" pos:column="9">public</specifier> <name pos:line="97" pos:column="16">void</name></type> <name pos:line="97" pos:column="21">TestCreateTypeDefinitions_Class</name><parameter_list pos:line="97" pos:column="52">()</parameter_list> <block pos:line="97" pos:column="55">{
            <comment type="line" pos:line="98" pos:column="13">// class A { }</comment>
            <decl_stmt><decl><type><name pos:line="99" pos:column="13">string</name></type> <name pos:line="99" pos:column="20">xml</name> <init pos:line="99" pos:column="24">= <expr><lit:literal type="string" pos:line="99" pos:column="26">@"&lt;class&gt;class &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="101" pos:column="13">XElement</name></type> <name pos:line="101" pos:column="22">xmlElement</name> <init pos:line="101" pos:column="33">= <expr><call><name><name pos:line="101" pos:column="35">fileSetup</name><op:operator pos:line="101" pos:column="44">.</op:operator><name pos:line="101" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="101" pos:column="69">(<argument><expr><name pos:line="101" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="101" pos:column="75">"A.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="103" pos:column="13">var</name></type> <name pos:line="103" pos:column="17">globalScope</name> <init pos:line="103" pos:column="29">= <expr><call><name><name pos:line="103" pos:column="31">codeParser</name><op:operator pos:line="103" pos:column="41">.</op:operator><name pos:line="103" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="103" pos:column="55">(<argument><expr><name pos:line="103" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="104" pos:column="13">Assert</name><op:operator pos:line="104" pos:column="19">.</op:operator><name pos:line="104" pos:column="20">IsTrue</name></name><argument_list pos:line="104" pos:column="26">(<argument><expr><name><name pos:line="104" pos:column="27">globalScope</name><op:operator pos:line="104" pos:column="38">.</op:operator><name pos:line="104" pos:column="39">IsGlobal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="106" pos:column="13">var</name></type> <name pos:line="106" pos:column="17">actual</name> <init pos:line="106" pos:column="24">= <expr><call><name><name pos:line="106" pos:column="26">globalScope</name><op:operator pos:line="106" pos:column="37">.</op:operator><name pos:line="106" pos:column="38">ChildStatements</name><op:operator pos:line="106" pos:column="53">.</op:operator><name pos:line="106" pos:column="54">First</name></name><argument_list pos:line="106" pos:column="59">()</argument_list></call> <op:operator pos:line="106" pos:column="62">as</op:operator> <name pos:line="106" pos:column="65">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="107" pos:column="13">Assert</name><op:operator pos:line="107" pos:column="19">.</op:operator><name pos:line="107" pos:column="20">IsNotNull</name></name><argument_list pos:line="107" pos:column="29">(<argument><expr><name pos:line="107" pos:column="30">actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="108" pos:column="13">Assert</name><op:operator pos:line="108" pos:column="19">.</op:operator><name pos:line="108" pos:column="20">AreEqual</name></name><argument_list pos:line="108" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="108" pos:column="29">"A"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="108" pos:column="34">actual</name><op:operator pos:line="108" pos:column="40">.</op:operator><name pos:line="108" pos:column="41">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="109" pos:column="13">Assert</name><op:operator pos:line="109" pos:column="19">.</op:operator><name pos:line="109" pos:column="20">AreEqual</name></name><argument_list pos:line="109" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="109" pos:column="29">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="109" pos:column="32">actual</name><op:operator pos:line="109" pos:column="38">.</op:operator><name pos:line="109" pos:column="39">ChildStatements</name><op:operator pos:line="109" pos:column="54">.</op:operator><name pos:line="109" pos:column="55">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="112" pos:column="9">[<expr><name pos:line="112" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="113" pos:column="9">public</specifier> <name pos:line="113" pos:column="16">void</name></type> <name pos:line="113" pos:column="21">TestCreateTypeDefinitions_ClassInFunction</name><parameter_list pos:line="113" pos:column="62">()</parameter_list> <block pos:line="113" pos:column="65">{
            <comment type="line" pos:line="114" pos:column="13">// class A { int foo() { class B { } } }</comment>
            <decl_stmt><decl><type><name pos:line="115" pos:column="13">string</name></type> <name pos:line="115" pos:column="20">xml</name> <init pos:line="115" pos:column="24">= <expr><lit:literal type="string" pos:line="115" pos:column="26">@"&lt;class&gt;class &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{
	&lt;function&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;foo&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{
		&lt;class&gt;class &lt;name&gt;B&lt;/name&gt; &lt;block&gt;{
		}&lt;/block&gt;&lt;/class&gt;
}&lt;/block&gt;&lt;/function&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="122" pos:column="13">XElement</name></type> <name pos:line="122" pos:column="22">xmlElement</name> <init pos:line="122" pos:column="33">= <expr><call><name><name pos:line="122" pos:column="35">fileSetup</name><op:operator pos:line="122" pos:column="44">.</op:operator><name pos:line="122" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="122" pos:column="69">(<argument><expr><name pos:line="122" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="122" pos:column="75">"A.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="124" pos:column="13">var</name></type> <name pos:line="124" pos:column="17">globalScope</name> <init pos:line="124" pos:column="29">= <expr><call><name><name pos:line="124" pos:column="31">codeParser</name><op:operator pos:line="124" pos:column="41">.</op:operator><name pos:line="124" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="124" pos:column="55">(<argument><expr><name pos:line="124" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="126" pos:column="13">var</name></type> <name pos:line="126" pos:column="17">typeA</name> <init pos:line="126" pos:column="23">= <expr><call><name><name pos:line="126" pos:column="25">globalScope</name><op:operator pos:line="126" pos:column="36">.</op:operator><name pos:line="126" pos:column="37">ChildStatements</name><op:operator pos:line="126" pos:column="52">.</op:operator><name pos:line="126" pos:column="53">First</name></name><argument_list pos:line="126" pos:column="58">()</argument_list></call> <op:operator pos:line="126" pos:column="61">as</op:operator> <name pos:line="126" pos:column="64">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="127" pos:column="13">var</name></type> <name pos:line="127" pos:column="17">fooMethod</name> <init pos:line="127" pos:column="27">= <expr><call><name><name pos:line="127" pos:column="29">typeA</name><op:operator pos:line="127" pos:column="34">.</op:operator><name pos:line="127" pos:column="35">ChildStatements</name><op:operator pos:line="127" pos:column="50">.</op:operator><name pos:line="127" pos:column="51">First</name></name><argument_list pos:line="127" pos:column="56">()</argument_list></call> <op:operator pos:line="127" pos:column="59">as</op:operator> <name pos:line="127" pos:column="62">MethodDefinition</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="128" pos:column="13">var</name></type> <name pos:line="128" pos:column="17">typeB</name> <init pos:line="128" pos:column="23">= <expr><call><name><name pos:line="128" pos:column="25">fooMethod</name><op:operator pos:line="128" pos:column="34">.</op:operator><name pos:line="128" pos:column="35">ChildStatements</name><op:operator pos:line="128" pos:column="50">.</op:operator><name pos:line="128" pos:column="51">First</name></name><argument_list pos:line="128" pos:column="56">()</argument_list></call> <op:operator pos:line="128" pos:column="59">as</op:operator> <name pos:line="128" pos:column="62">TypeDefinition</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="130" pos:column="13">Assert</name><op:operator pos:line="130" pos:column="19">.</op:operator><name pos:line="130" pos:column="20">AreEqual</name></name><argument_list pos:line="130" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="130" pos:column="29">"A"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="130" pos:column="34">typeA</name><op:operator pos:line="130" pos:column="39">.</op:operator><name pos:line="130" pos:column="40">GetFullName</name></name><argument_list pos:line="130" pos:column="51">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="131" pos:column="13">Assert</name><op:operator pos:line="131" pos:column="19">.</op:operator><name pos:line="131" pos:column="20">AreSame</name></name><argument_list pos:line="131" pos:column="27">(<argument><expr><name pos:line="131" pos:column="28">typeA</name></expr></argument>, <argument><expr><name><name pos:line="131" pos:column="35">fooMethod</name><op:operator pos:line="131" pos:column="44">.</op:operator><name pos:line="131" pos:column="45">ParentStatement</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="132" pos:column="13">Assert</name><op:operator pos:line="132" pos:column="19">.</op:operator><name pos:line="132" pos:column="20">AreEqual</name></name><argument_list pos:line="132" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="132" pos:column="29">"A.foo"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="132" pos:column="38">fooMethod</name><op:operator pos:line="132" pos:column="47">.</op:operator><name pos:line="132" pos:column="48">GetFullName</name></name><argument_list pos:line="132" pos:column="59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="133" pos:column="13">Assert</name><op:operator pos:line="133" pos:column="19">.</op:operator><name pos:line="133" pos:column="20">AreSame</name></name><argument_list pos:line="133" pos:column="27">(<argument><expr><name pos:line="133" pos:column="28">fooMethod</name></expr></argument>, <argument><expr><name><name pos:line="133" pos:column="39">typeB</name><op:operator pos:line="133" pos:column="44">.</op:operator><name pos:line="133" pos:column="45">ParentStatement</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="134" pos:column="13">Assert</name><op:operator pos:line="134" pos:column="19">.</op:operator><name pos:line="134" pos:column="20">AreEqual</name></name><argument_list pos:line="134" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="134" pos:column="29">"A.foo.B"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="134" pos:column="40">typeB</name><op:operator pos:line="134" pos:column="45">.</op:operator><name pos:line="134" pos:column="46">GetFullName</name></name><argument_list pos:line="134" pos:column="57">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="137" pos:column="9">[<expr><name pos:line="137" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="138" pos:column="9">public</specifier> <name pos:line="138" pos:column="16">void</name></type> <name pos:line="138" pos:column="21">TestCreateTypeDefinitions_ClassWithExtendsAndImplements</name><parameter_list pos:line="138" pos:column="76">()</parameter_list> <block pos:line="138" pos:column="79">{
            <comment type="line" pos:line="139" pos:column="13">//Foo.java</comment>
            <comment type="line" pos:line="140" pos:column="13">//public class Foo extends xyzzy implements A, B, C {</comment>
            <comment type="line" pos:line="141" pos:column="13">//    public int bar;</comment>
            <comment type="line" pos:line="142" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="143" pos:column="13">string</name></type> <name pos:line="143" pos:column="20">xml</name> <init pos:line="143" pos:column="24">= <expr><lit:literal type="string" pos:line="143" pos:column="26">@"&lt;class&gt;&lt;specifier&gt;public&lt;/specifier&gt; class &lt;name&gt;Foo&lt;/name&gt; &lt;super&gt;&lt;extends&gt;extends &lt;name&gt;xyzzy&lt;/name&gt;&lt;/extends&gt; &lt;implements&gt;implements &lt;name&gt;A&lt;/name&gt;, &lt;name&gt;B&lt;/name&gt;, &lt;name&gt;C&lt;/name&gt;&lt;/implements&gt;&lt;/super&gt; &lt;block&gt;{
    &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;bar&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="147" pos:column="13">XElement</name></type> <name pos:line="147" pos:column="22">xmlElement</name> <init pos:line="147" pos:column="33">= <expr><call><name><name pos:line="147" pos:column="35">fileSetup</name><op:operator pos:line="147" pos:column="44">.</op:operator><name pos:line="147" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="147" pos:column="69">(<argument><expr><name pos:line="147" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="147" pos:column="75">"Foo.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="149" pos:column="13">var</name></type> <name pos:line="149" pos:column="17">actual</name> <init pos:line="149" pos:column="24">= <expr><call><name><name pos:line="149" pos:column="26">codeParser</name><op:operator pos:line="149" pos:column="36">.</op:operator><name pos:line="149" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="149" pos:column="50">(<argument><expr><name pos:line="149" pos:column="51">xmlElement</name></expr></argument>)</argument_list></call><op:operator pos:line="149" pos:column="62">.</op:operator><call><name><name pos:line="149" pos:column="63">ChildStatements</name><op:operator pos:line="149" pos:column="78">.</op:operator><name pos:line="149" pos:column="79">First</name></name><argument_list pos:line="149" pos:column="84">()</argument_list></call> <op:operator pos:line="149" pos:column="87">as</op:operator> <name pos:line="149" pos:column="90">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="150" pos:column="13">Assert</name><op:operator pos:line="150" pos:column="19">.</op:operator><name pos:line="150" pos:column="20">IsNotNull</name></name><argument_list pos:line="150" pos:column="29">(<argument><expr><name pos:line="150" pos:column="30">actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="151" pos:column="13">var</name></type> <name pos:line="151" pos:column="17">globalNamespace</name> <init pos:line="151" pos:column="33">= <expr><name><name pos:line="151" pos:column="35">actual</name><op:operator pos:line="151" pos:column="41">.</op:operator><name pos:line="151" pos:column="42">ParentStatement</name></name> <op:operator pos:line="151" pos:column="58">as</op:operator> <name pos:line="151" pos:column="61">NamespaceDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="152" pos:column="13">Assert</name><op:operator pos:line="152" pos:column="19">.</op:operator><name pos:line="152" pos:column="20">IsNotNull</name></name><argument_list pos:line="152" pos:column="29">(<argument><expr><name pos:line="152" pos:column="30">globalNamespace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="153" pos:column="13">Assert</name><op:operator pos:line="153" pos:column="19">.</op:operator><name pos:line="153" pos:column="20">AreEqual</name></name><argument_list pos:line="153" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="153" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="153" pos:column="36">actual</name><op:operator pos:line="153" pos:column="42">.</op:operator><name pos:line="153" pos:column="43">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="154" pos:column="13">Assert</name><op:operator pos:line="154" pos:column="19">.</op:operator><name pos:line="154" pos:column="20">AreEqual</name></name><argument_list pos:line="154" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="154" pos:column="29">4</lit:literal></expr></argument>, <argument><expr><name><name pos:line="154" pos:column="32">actual</name><op:operator pos:line="154" pos:column="38">.</op:operator><name pos:line="154" pos:column="39">ParentTypeNames</name><op:operator pos:line="154" pos:column="54">.</op:operator><name pos:line="154" pos:column="55">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="155" pos:column="13">Assert</name><op:operator pos:line="155" pos:column="19">.</op:operator><name pos:line="155" pos:column="20">That</name></name><argument_list pos:line="155" pos:column="24">(<argument><expr><name><name pos:line="155" pos:column="25">globalNamespace</name><op:operator pos:line="155" pos:column="40">.</op:operator><name pos:line="155" pos:column="41">IsGlobal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="157" pos:column="13">var</name></type> <name pos:line="157" pos:column="17">parentNames</name> <init pos:line="157" pos:column="29">= <expr><linq><from pos:line="157" pos:column="31">from <expr><name pos:line="157" pos:column="36">parent</name></expr> <in pos:line="157" pos:column="43">in <expr><name><name pos:line="157" pos:column="46">actual</name><op:operator pos:line="157" pos:column="52">.</op:operator><name pos:line="157" pos:column="53">ParentTypeNames</name></name></expr></in></from>
                              <select pos:line="158" pos:column="31">select <expr><name><name pos:line="158" pos:column="38">parent</name><op:operator pos:line="158" pos:column="44">.</op:operator><name pos:line="158" pos:column="45">Name</name></name></expr></select></linq></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="160" pos:column="13">var</name></type> <name pos:line="160" pos:column="17">tests</name> <init pos:line="160" pos:column="23">= <expr><call><name><name pos:line="160" pos:column="25">Enumerable</name><op:operator pos:line="160" pos:column="35">.</op:operator><name><name pos:line="160" pos:column="36">Zip</name><argument_list pos:line="160" pos:column="39">&lt;<argument><name pos:line="160" pos:column="40">string</name></argument>, <argument><name pos:line="160" pos:column="48">string</name></argument>, <argument><name pos:line="160" pos:column="56">bool</name></argument>&gt;</argument_list></name></name><argument_list pos:line="160" pos:column="61">(<argument><expr><op:operator pos:line="160" pos:column="62">new</op:operator><index pos:line="160" pos:column="65">[]</index> <block pos:line="160" pos:column="68">{ <expr><lit:literal type="string" pos:line="160" pos:column="70">"xyzzy"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="160" pos:column="79">"A"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="160" pos:column="84">"B"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="160" pos:column="89">"C"</lit:literal></expr> }</block></expr></argument>, <argument><expr><name pos:line="160" pos:column="96">parentNames</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="160" pos:column="109">(<param><decl><name pos:line="160" pos:column="110">e</name></decl></param>, <param><decl><name pos:line="160" pos:column="113">a</name></decl></param>)</parameter_list> <op:operator pos:line="160" pos:column="116">=&gt;</op:operator> <name pos:line="160" pos:column="119">e</name> <op:operator pos:line="160" pos:column="121">==</op:operator> <name pos:line="160" pos:column="124">a</name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="161" pos:column="13">foreach(<init><decl><type><name pos:line="161" pos:column="21">var</name></type> <name pos:line="161" pos:column="25">test</name> <range pos:line="161" pos:column="30">in <expr><name pos:line="161" pos:column="33">tests</name></expr></range></decl></init>) <block pos:line="161" pos:column="40">{
                <expr_stmt><expr><call><name><name pos:line="162" pos:column="17">Assert</name><op:operator pos:line="162" pos:column="23">.</op:operator><name pos:line="162" pos:column="24">That</name></name><argument_list pos:line="162" pos:column="28">(<argument><expr><name pos:line="162" pos:column="29">test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>

        <function><type><attribute pos:line="166" pos:column="9">[<expr><name pos:line="166" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="167" pos:column="9">public</specifier> <name pos:line="167" pos:column="16">void</name></type> <name pos:line="167" pos:column="21">TestCreateTypeDefinitions_ClassWithInnerClass</name><parameter_list pos:line="167" pos:column="66">()</parameter_list> <block pos:line="167" pos:column="69">{
            <comment type="line" pos:line="168" pos:column="13">// class A { class B { } }</comment>
            <decl_stmt><decl><type><name pos:line="169" pos:column="13">string</name></type> <name pos:line="169" pos:column="20">xml</name> <init pos:line="169" pos:column="24">= <expr><lit:literal type="string" pos:line="169" pos:column="26">@"&lt;class&gt;class &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{
	&lt;class&gt;class &lt;name&gt;B&lt;/name&gt; &lt;block&gt;{
	}&lt;/block&gt;&lt;/class&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="174" pos:column="13">XElement</name></type> <name pos:line="174" pos:column="22">xmlElement</name> <init pos:line="174" pos:column="33">= <expr><call><name><name pos:line="174" pos:column="35">fileSetup</name><op:operator pos:line="174" pos:column="44">.</op:operator><name pos:line="174" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="174" pos:column="69">(<argument><expr><name pos:line="174" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="174" pos:column="75">"A.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="176" pos:column="13">var</name></type> <name pos:line="176" pos:column="17">globalScope</name> <init pos:line="176" pos:column="29">= <expr><call><name><name pos:line="176" pos:column="31">codeParser</name><op:operator pos:line="176" pos:column="41">.</op:operator><name pos:line="176" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="176" pos:column="55">(<argument><expr><name pos:line="176" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="178" pos:column="13">var</name></type> <name pos:line="178" pos:column="17">typeA</name> <init pos:line="178" pos:column="23">= <expr><call><name><name pos:line="178" pos:column="25">globalScope</name><op:operator pos:line="178" pos:column="36">.</op:operator><name pos:line="178" pos:column="37">ChildStatements</name><op:operator pos:line="178" pos:column="52">.</op:operator><name pos:line="178" pos:column="53">First</name></name><argument_list pos:line="178" pos:column="58">()</argument_list></call> <op:operator pos:line="178" pos:column="61">as</op:operator> <name pos:line="178" pos:column="64">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="179" pos:column="13">var</name></type> <name pos:line="179" pos:column="17">typeB</name> <init pos:line="179" pos:column="23">= <expr><call><name><name pos:line="179" pos:column="25">typeA</name><op:operator pos:line="179" pos:column="30">.</op:operator><name pos:line="179" pos:column="31">ChildStatements</name><op:operator pos:line="179" pos:column="46">.</op:operator><name pos:line="179" pos:column="47">First</name></name><argument_list pos:line="179" pos:column="52">()</argument_list></call> <op:operator pos:line="179" pos:column="55">as</op:operator> <name pos:line="179" pos:column="58">TypeDefinition</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="181" pos:column="13">Assert</name><op:operator pos:line="181" pos:column="19">.</op:operator><name pos:line="181" pos:column="20">AreSame</name></name><argument_list pos:line="181" pos:column="27">(<argument><expr><name pos:line="181" pos:column="28">typeA</name></expr></argument>, <argument><expr><name><name pos:line="181" pos:column="35">typeB</name><op:operator pos:line="181" pos:column="40">.</op:operator><name pos:line="181" pos:column="41">ParentStatement</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="182" pos:column="13">Assert</name><op:operator pos:line="182" pos:column="19">.</op:operator><name pos:line="182" pos:column="20">AreEqual</name></name><argument_list pos:line="182" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="182" pos:column="29">"A"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="182" pos:column="34">typeA</name><op:operator pos:line="182" pos:column="39">.</op:operator><name pos:line="182" pos:column="40">GetFullName</name></name><argument_list pos:line="182" pos:column="51">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="183" pos:column="13">Assert</name><op:operator pos:line="183" pos:column="19">.</op:operator><name pos:line="183" pos:column="20">AreEqual</name></name><argument_list pos:line="183" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="183" pos:column="29">"A.B"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="183" pos:column="36">typeB</name><op:operator pos:line="183" pos:column="41">.</op:operator><name pos:line="183" pos:column="42">GetFullName</name></name><argument_list pos:line="183" pos:column="53">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="186" pos:column="9">[<expr><name pos:line="186" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="187" pos:column="9">public</specifier> <name pos:line="187" pos:column="16">void</name></type> <name pos:line="187" pos:column="21">TestCreateTypeDefinitions_ClassWithParents</name><parameter_list pos:line="187" pos:column="63">()</parameter_list> <block pos:line="187" pos:column="66">{
            <comment type="line" pos:line="188" pos:column="13">// class A implements B,C,D { }</comment>
            <decl_stmt><decl><type><name pos:line="189" pos:column="13">string</name></type> <name pos:line="189" pos:column="20">xml</name> <init pos:line="189" pos:column="24">= <expr><lit:literal type="string" pos:line="189" pos:column="26">@"&lt;class&gt;class &lt;name&gt;A&lt;/name&gt; &lt;super&gt;&lt;implements&gt;implements &lt;name&gt;B&lt;/name&gt;,&lt;name&gt;C&lt;/name&gt;,&lt;name&gt;D&lt;/name&gt;&lt;/implements&gt;&lt;/super&gt; &lt;block&gt;{
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="192" pos:column="13">XElement</name></type> <name pos:line="192" pos:column="22">xmlElement</name> <init pos:line="192" pos:column="33">= <expr><call><name><name pos:line="192" pos:column="35">fileSetup</name><op:operator pos:line="192" pos:column="44">.</op:operator><name pos:line="192" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="192" pos:column="69">(<argument><expr><name pos:line="192" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="192" pos:column="75">"A.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="194" pos:column="13">var</name></type> <name pos:line="194" pos:column="17">actual</name> <init pos:line="194" pos:column="24">= <expr><call><name><name pos:line="194" pos:column="26">codeParser</name><op:operator pos:line="194" pos:column="36">.</op:operator><name pos:line="194" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="194" pos:column="50">(<argument><expr><name pos:line="194" pos:column="51">xmlElement</name></expr></argument>)</argument_list></call><op:operator pos:line="194" pos:column="62">.</op:operator><call><name><name pos:line="194" pos:column="63">ChildStatements</name><op:operator pos:line="194" pos:column="78">.</op:operator><name pos:line="194" pos:column="79">First</name></name><argument_list pos:line="194" pos:column="84">()</argument_list></call> <op:operator pos:line="194" pos:column="87">as</op:operator> <name pos:line="194" pos:column="90">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="195" pos:column="13">var</name></type> <name pos:line="195" pos:column="17">globalNamespace</name> <init pos:line="195" pos:column="33">= <expr><name><name pos:line="195" pos:column="35">actual</name><op:operator pos:line="195" pos:column="41">.</op:operator><name pos:line="195" pos:column="42">ParentStatement</name></name> <op:operator pos:line="195" pos:column="58">as</op:operator> <name pos:line="195" pos:column="61">NamespaceDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="196" pos:column="13">Assert</name><op:operator pos:line="196" pos:column="19">.</op:operator><name pos:line="196" pos:column="20">AreEqual</name></name><argument_list pos:line="196" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="196" pos:column="29">"A"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="196" pos:column="34">actual</name><op:operator pos:line="196" pos:column="40">.</op:operator><name pos:line="196" pos:column="41">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="197" pos:column="13">Assert</name><op:operator pos:line="197" pos:column="19">.</op:operator><name pos:line="197" pos:column="20">AreEqual</name></name><argument_list pos:line="197" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="197" pos:column="29">3</lit:literal></expr></argument>, <argument><expr><name><name pos:line="197" pos:column="32">actual</name><op:operator pos:line="197" pos:column="38">.</op:operator><name pos:line="197" pos:column="39">ParentTypeNames</name><op:operator pos:line="197" pos:column="54">.</op:operator><name pos:line="197" pos:column="55">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="198" pos:column="13">Assert</name><op:operator pos:line="198" pos:column="19">.</op:operator><name pos:line="198" pos:column="20">That</name></name><argument_list pos:line="198" pos:column="24">(<argument><expr><name><name pos:line="198" pos:column="25">globalNamespace</name><op:operator pos:line="198" pos:column="40">.</op:operator><name pos:line="198" pos:column="41">IsGlobal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="200" pos:column="13">var</name></type> <name pos:line="200" pos:column="17">parentNames</name> <init pos:line="200" pos:column="29">= <expr><linq><from pos:line="200" pos:column="31">from <expr><name pos:line="200" pos:column="36">parent</name></expr> <in pos:line="200" pos:column="43">in <expr><name><name pos:line="200" pos:column="46">actual</name><op:operator pos:line="200" pos:column="52">.</op:operator><name pos:line="200" pos:column="53">ParentTypeNames</name></name></expr></in></from>
                              <select pos:line="201" pos:column="31">select <expr><name><name pos:line="201" pos:column="38">parent</name><op:operator pos:line="201" pos:column="44">.</op:operator><name pos:line="201" pos:column="45">Name</name></name></expr></select></linq></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="203" pos:column="13">var</name></type> <name pos:line="203" pos:column="17">tests</name> <init pos:line="203" pos:column="23">= <expr><call><name><name pos:line="203" pos:column="25">Enumerable</name><op:operator pos:line="203" pos:column="35">.</op:operator><name><name pos:line="203" pos:column="36">Zip</name><argument_list pos:line="203" pos:column="39">&lt;<argument><name pos:line="203" pos:column="40">string</name></argument>, <argument><name pos:line="203" pos:column="48">string</name></argument>, <argument><name pos:line="203" pos:column="56">bool</name></argument>&gt;</argument_list></name></name><argument_list pos:line="203" pos:column="61">(<argument><expr><op:operator pos:line="203" pos:column="62">new</op:operator><index pos:line="203" pos:column="65">[]</index> <block pos:line="203" pos:column="68">{ <expr><lit:literal type="string" pos:line="203" pos:column="70">"B"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="203" pos:column="75">"C"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="203" pos:column="80">"D"</lit:literal></expr> }</block></expr></argument>, <argument><expr><name pos:line="203" pos:column="87">parentNames</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="203" pos:column="100">(<param><decl><name pos:line="203" pos:column="101">e</name></decl></param>, <param><decl><name pos:line="203" pos:column="104">a</name></decl></param>)</parameter_list> <op:operator pos:line="203" pos:column="107">=&gt;</op:operator> <name pos:line="203" pos:column="110">e</name> <op:operator pos:line="203" pos:column="112">==</op:operator> <name pos:line="203" pos:column="115">a</name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="204" pos:column="13">foreach(<init><decl><type><name pos:line="204" pos:column="21">var</name></type> <name pos:line="204" pos:column="25">test</name> <range pos:line="204" pos:column="30">in <expr><name pos:line="204" pos:column="33">tests</name></expr></range></decl></init>) <block pos:line="204" pos:column="40">{
                <expr_stmt><expr><call><name><name pos:line="205" pos:column="17">Assert</name><op:operator pos:line="205" pos:column="23">.</op:operator><name pos:line="205" pos:column="24">That</name></name><argument_list pos:line="205" pos:column="28">(<argument><expr><name pos:line="205" pos:column="29">test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>

        <function><type><attribute pos:line="209" pos:column="9">[<expr><name pos:line="209" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="210" pos:column="9">public</specifier> <name pos:line="210" pos:column="16">void</name></type> <name pos:line="210" pos:column="21">TestCreateTypeDefinitions_ClassWithQualifiedParent</name><parameter_list pos:line="210" pos:column="71">()</parameter_list> <block pos:line="210" pos:column="74">{
            <comment type="line" pos:line="211" pos:column="13">// class D implements A.B.C { }</comment>
            <decl_stmt><decl><type><name pos:line="212" pos:column="13">string</name></type> <name pos:line="212" pos:column="20">xml</name> <init pos:line="212" pos:column="24">= <expr><lit:literal type="string" pos:line="212" pos:column="26">@"&lt;class&gt;class &lt;name&gt;D&lt;/name&gt; &lt;super&gt;&lt;implements&gt;implements &lt;name&gt;&lt;name&gt;A&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;B&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;C&lt;/name&gt;&lt;/name&gt;&lt;/implements&gt;&lt;/super&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="214" pos:column="13">XElement</name></type> <name pos:line="214" pos:column="22">xmlElement</name> <init pos:line="214" pos:column="33">= <expr><call><name><name pos:line="214" pos:column="35">fileSetup</name><op:operator pos:line="214" pos:column="44">.</op:operator><name pos:line="214" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="214" pos:column="69">(<argument><expr><name pos:line="214" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="214" pos:column="75">"D.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="216" pos:column="13">var</name></type> <name pos:line="216" pos:column="17">actual</name> <init pos:line="216" pos:column="24">= <expr><call><name><name pos:line="216" pos:column="26">codeParser</name><op:operator pos:line="216" pos:column="36">.</op:operator><name pos:line="216" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="216" pos:column="50">(<argument><expr><name pos:line="216" pos:column="51">xmlElement</name></expr></argument>)</argument_list></call><op:operator pos:line="216" pos:column="62">.</op:operator><call><name><name pos:line="216" pos:column="63">ChildStatements</name><op:operator pos:line="216" pos:column="78">.</op:operator><name pos:line="216" pos:column="79">First</name></name><argument_list pos:line="216" pos:column="84">()</argument_list></call> <op:operator pos:line="216" pos:column="87">as</op:operator> <name pos:line="216" pos:column="90">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="217" pos:column="13">var</name></type> <name pos:line="217" pos:column="17">globalNamespace</name> <init pos:line="217" pos:column="33">= <expr><name><name pos:line="217" pos:column="35">actual</name><op:operator pos:line="217" pos:column="41">.</op:operator><name pos:line="217" pos:column="42">ParentStatement</name></name> <op:operator pos:line="217" pos:column="58">as</op:operator> <name pos:line="217" pos:column="61">NamespaceDefinition</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="219" pos:column="13">Assert</name><op:operator pos:line="219" pos:column="19">.</op:operator><name pos:line="219" pos:column="20">AreEqual</name></name><argument_list pos:line="219" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="219" pos:column="29">"D"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="219" pos:column="34">actual</name><op:operator pos:line="219" pos:column="40">.</op:operator><name pos:line="219" pos:column="41">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="220" pos:column="13">Assert</name><op:operator pos:line="220" pos:column="19">.</op:operator><name pos:line="220" pos:column="20">AreEqual</name></name><argument_list pos:line="220" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="220" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="220" pos:column="32">actual</name><op:operator pos:line="220" pos:column="38">.</op:operator><name pos:line="220" pos:column="39">ParentTypeNames</name><op:operator pos:line="220" pos:column="54">.</op:operator><name pos:line="220" pos:column="55">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="221" pos:column="13">Assert</name><op:operator pos:line="221" pos:column="19">.</op:operator><name pos:line="221" pos:column="20">That</name></name><argument_list pos:line="221" pos:column="24">(<argument><expr><name><name pos:line="221" pos:column="25">globalNamespace</name><op:operator pos:line="221" pos:column="40">.</op:operator><name pos:line="221" pos:column="41">IsGlobal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="223" pos:column="13">var</name></type> <name pos:line="223" pos:column="17">parent</name> <init pos:line="223" pos:column="24">= <expr><call><name><name pos:line="223" pos:column="26">actual</name><op:operator pos:line="223" pos:column="32">.</op:operator><name pos:line="223" pos:column="33">ParentTypeNames</name><op:operator pos:line="223" pos:column="48">.</op:operator><name pos:line="223" pos:column="49">First</name></name><argument_list pos:line="223" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="225" pos:column="13">Assert</name><op:operator pos:line="225" pos:column="19">.</op:operator><name pos:line="225" pos:column="20">AreEqual</name></name><argument_list pos:line="225" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="225" pos:column="29">"C"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="225" pos:column="34">parent</name><op:operator pos:line="225" pos:column="40">.</op:operator><name pos:line="225" pos:column="41">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <decl_stmt><decl><type><name pos:line="227" pos:column="13">var</name></type> <name pos:line="227" pos:column="17">prefixNames</name> <init pos:line="227" pos:column="29">= <expr><call><name><name pos:line="227" pos:column="31">parent</name><op:operator pos:line="227" pos:column="37">.</op:operator><name pos:line="227" pos:column="38">Prefix</name><op:operator pos:line="227" pos:column="44">.</op:operator><name pos:line="227" pos:column="45">Names</name><op:operator pos:line="227" pos:column="50">.</op:operator><name pos:line="227" pos:column="51">ToList</name></name><argument_list pos:line="227" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="228" pos:column="13">Assert</name><op:operator pos:line="228" pos:column="19">.</op:operator><name pos:line="228" pos:column="20">AreEqual</name></name><argument_list pos:line="228" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="228" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="228" pos:column="32">prefixNames</name><op:operator pos:line="228" pos:column="43">.</op:operator><name pos:line="228" pos:column="44">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="229" pos:column="13">Assert</name><op:operator pos:line="229" pos:column="19">.</op:operator><name pos:line="229" pos:column="20">AreEqual</name></name><argument_list pos:line="229" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="229" pos:column="29">"A"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="229" pos:column="34">prefixNames</name><index pos:line="229" pos:column="45">[<expr><lit:literal type="number" pos:line="229" pos:column="46">0</lit:literal></expr>]</index></name><op:operator pos:line="229" pos:column="48">.</op:operator><name pos:line="229" pos:column="49">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="230" pos:column="13">Assert</name><op:operator pos:line="230" pos:column="19">.</op:operator><name pos:line="230" pos:column="20">AreEqual</name></name><argument_list pos:line="230" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="230" pos:column="29">"B"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="230" pos:column="34">prefixNames</name><index pos:line="230" pos:column="45">[<expr><lit:literal type="number" pos:line="230" pos:column="46">1</lit:literal></expr>]</index></name><op:operator pos:line="230" pos:column="48">.</op:operator><name pos:line="230" pos:column="49">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="233" pos:column="9">[<expr><name pos:line="233" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="234" pos:column="9">public</specifier> <name pos:line="234" pos:column="16">void</name></type> <name pos:line="234" pos:column="21">TestCreateTypeDefinitions_ClassWithSuperClass</name><parameter_list pos:line="234" pos:column="66">()</parameter_list> <block pos:line="234" pos:column="69">{
            <comment type="line" pos:line="235" pos:column="13">//Foo.java</comment>
            <comment type="line" pos:line="236" pos:column="13">//public class Foo extends xyzzy {</comment>
            <comment type="line" pos:line="237" pos:column="13">//    public int bar;</comment>
            <comment type="line" pos:line="238" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="239" pos:column="13">string</name></type> <name pos:line="239" pos:column="20">xml</name> <init pos:line="239" pos:column="24">= <expr><lit:literal type="string" pos:line="239" pos:column="26">@"&lt;class&gt;&lt;specifier&gt;public&lt;/specifier&gt; class &lt;name&gt;Foo&lt;/name&gt; &lt;super&gt;&lt;extends&gt;extends &lt;name&gt;xyzzy&lt;/name&gt;&lt;/extends&gt;&lt;/super&gt; &lt;block&gt;{
    &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;bar&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="242" pos:column="13">XElement</name></type> <name pos:line="242" pos:column="22">xmlElement</name> <init pos:line="242" pos:column="33">= <expr><call><name><name pos:line="242" pos:column="35">fileSetup</name><op:operator pos:line="242" pos:column="44">.</op:operator><name pos:line="242" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="242" pos:column="69">(<argument><expr><name pos:line="242" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="242" pos:column="75">"Foo.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="244" pos:column="13">var</name></type> <name pos:line="244" pos:column="17">actual</name> <init pos:line="244" pos:column="24">= <expr><call><name><name pos:line="244" pos:column="26">codeParser</name><op:operator pos:line="244" pos:column="36">.</op:operator><name pos:line="244" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="244" pos:column="50">(<argument><expr><name pos:line="244" pos:column="51">xmlElement</name></expr></argument>)</argument_list></call><op:operator pos:line="244" pos:column="62">.</op:operator><call><name><name pos:line="244" pos:column="63">ChildStatements</name><op:operator pos:line="244" pos:column="78">.</op:operator><name pos:line="244" pos:column="79">First</name></name><argument_list pos:line="244" pos:column="84">()</argument_list></call> <op:operator pos:line="244" pos:column="87">as</op:operator> <name pos:line="244" pos:column="90">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="245" pos:column="13">Assert</name><op:operator pos:line="245" pos:column="19">.</op:operator><name pos:line="245" pos:column="20">IsNotNull</name></name><argument_list pos:line="245" pos:column="29">(<argument><expr><name pos:line="245" pos:column="30">actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="246" pos:column="13">Assert</name><op:operator pos:line="246" pos:column="19">.</op:operator><name pos:line="246" pos:column="20">AreEqual</name></name><argument_list pos:line="246" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="246" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="246" pos:column="36">actual</name><op:operator pos:line="246" pos:column="42">.</op:operator><name pos:line="246" pos:column="43">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="247" pos:column="13">Assert</name><op:operator pos:line="247" pos:column="19">.</op:operator><name pos:line="247" pos:column="20">AreEqual</name></name><argument_list pos:line="247" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="247" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="247" pos:column="32">actual</name><op:operator pos:line="247" pos:column="38">.</op:operator><name pos:line="247" pos:column="39">ParentTypeNames</name><op:operator pos:line="247" pos:column="54">.</op:operator><name pos:line="247" pos:column="55">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="248" pos:column="13">Assert</name><op:operator pos:line="248" pos:column="19">.</op:operator><name pos:line="248" pos:column="20">AreEqual</name></name><argument_list pos:line="248" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="248" pos:column="29">"xyzzy"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="248" pos:column="38">actual</name><op:operator pos:line="248" pos:column="44">.</op:operator><name pos:line="248" pos:column="45">ParentTypeNames</name><op:operator pos:line="248" pos:column="60">.</op:operator><name pos:line="248" pos:column="61">First</name></name><argument_list pos:line="248" pos:column="66">()</argument_list></call><op:operator pos:line="248" pos:column="68">.</op:operator><name pos:line="248" pos:column="69">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="249" pos:column="13">var</name></type> <name pos:line="249" pos:column="17">globalNamespace</name> <init pos:line="249" pos:column="33">= <expr><name><name pos:line="249" pos:column="35">actual</name><op:operator pos:line="249" pos:column="41">.</op:operator><name pos:line="249" pos:column="42">ParentStatement</name></name> <op:operator pos:line="249" pos:column="58">as</op:operator> <name pos:line="249" pos:column="61">NamespaceDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="250" pos:column="13">Assert</name><op:operator pos:line="250" pos:column="19">.</op:operator><name pos:line="250" pos:column="20">IsNotNull</name></name><argument_list pos:line="250" pos:column="29">(<argument><expr><name pos:line="250" pos:column="30">globalNamespace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="251" pos:column="13">Assert</name><op:operator pos:line="251" pos:column="19">.</op:operator><name pos:line="251" pos:column="20">That</name></name><argument_list pos:line="251" pos:column="24">(<argument><expr><name><name pos:line="251" pos:column="25">globalNamespace</name><op:operator pos:line="251" pos:column="40">.</op:operator><name pos:line="251" pos:column="41">IsGlobal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="254" pos:column="9">[<expr><name pos:line="254" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="255" pos:column="9">public</specifier> <name pos:line="255" pos:column="16">void</name></type> <name pos:line="255" pos:column="21">TestCreateTypeDefinitions_InnerClassWithNamespace</name><parameter_list pos:line="255" pos:column="70">()</parameter_list> <block pos:line="255" pos:column="73">{
            <comment type="line" pos:line="256" pos:column="13">// package A; class B { class C { } }</comment>
            <decl_stmt><decl><type><name pos:line="257" pos:column="13">string</name></type> <name pos:line="257" pos:column="20">xml</name> <init pos:line="257" pos:column="24">= <expr><lit:literal type="string" pos:line="257" pos:column="26">@"&lt;package&gt;package &lt;name&gt;A&lt;/name&gt;;&lt;/package&gt;
&lt;class&gt;class &lt;name&gt;B&lt;/name&gt; &lt;block&gt;{
	&lt;class&gt;class &lt;name&gt;C&lt;/name&gt; &lt;block&gt;{
	}&lt;/block&gt;&lt;/class&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="263" pos:column="13">XElement</name></type> <name pos:line="263" pos:column="22">xmlElement</name> <init pos:line="263" pos:column="33">= <expr><call><name><name pos:line="263" pos:column="35">fileSetup</name><op:operator pos:line="263" pos:column="44">.</op:operator><name pos:line="263" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="263" pos:column="69">(<argument><expr><name pos:line="263" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="263" pos:column="75">"B.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="264" pos:column="13">var</name></type> <name pos:line="264" pos:column="17">globalScope</name> <init pos:line="264" pos:column="29">= <expr><call><name><name pos:line="264" pos:column="31">codeParser</name><op:operator pos:line="264" pos:column="41">.</op:operator><name pos:line="264" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="264" pos:column="55">(<argument><expr><name pos:line="264" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="266" pos:column="13">var</name></type> <name pos:line="266" pos:column="17">typeDefinitions</name> <init pos:line="266" pos:column="33">= <expr><call><name><name pos:line="266" pos:column="35">globalScope</name><op:operator pos:line="266" pos:column="46">.</op:operator><name><name pos:line="266" pos:column="47">GetDescendants</name><argument_list pos:line="266" pos:column="61">&lt;<argument><name pos:line="266" pos:column="62">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="266" pos:column="77">()</argument_list></call><op:operator pos:line="266" pos:column="79">.</op:operator><call><name pos:line="266" pos:column="80">ToList</name><argument_list pos:line="266" pos:column="86">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="267" pos:column="13">Assert</name><op:operator pos:line="267" pos:column="19">.</op:operator><name pos:line="267" pos:column="20">AreEqual</name></name><argument_list pos:line="267" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="267" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="267" pos:column="32">typeDefinitions</name><op:operator pos:line="267" pos:column="47">.</op:operator><name pos:line="267" pos:column="48">Count</name></name><argument_list pos:line="267" pos:column="53">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="269" pos:column="13">var</name></type> <name pos:line="269" pos:column="17">outer</name> <init pos:line="269" pos:column="23">= <expr><call><name><name pos:line="269" pos:column="25">typeDefinitions</name><op:operator pos:line="269" pos:column="40">.</op:operator><name pos:line="269" pos:column="41">First</name></name><argument_list pos:line="269" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="270" pos:column="13">var</name></type> <name pos:line="270" pos:column="17">inner</name> <init pos:line="270" pos:column="23">= <expr><call><name><name pos:line="270" pos:column="25">typeDefinitions</name><op:operator pos:line="270" pos:column="40">.</op:operator><name pos:line="270" pos:column="41">Last</name></name><argument_list pos:line="270" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="272" pos:column="13">Assert</name><op:operator pos:line="272" pos:column="19">.</op:operator><name pos:line="272" pos:column="20">AreEqual</name></name><argument_list pos:line="272" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="272" pos:column="29">"B"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="272" pos:column="34">outer</name><op:operator pos:line="272" pos:column="39">.</op:operator><name pos:line="272" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="273" pos:column="13">Assert</name><op:operator pos:line="273" pos:column="19">.</op:operator><name pos:line="273" pos:column="20">AreEqual</name></name><argument_list pos:line="273" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="273" pos:column="29">"A"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="273" pos:column="34">outer</name><op:operator pos:line="273" pos:column="39">.</op:operator><name><name pos:line="273" pos:column="40">GetAncestors</name><argument_list pos:line="273" pos:column="52">&lt;<argument><name pos:line="273" pos:column="53">NamespaceDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="273" pos:column="73">()</argument_list></call><op:operator pos:line="273" pos:column="75">.</op:operator><call><name pos:line="273" pos:column="76">First</name><argument_list pos:line="273" pos:column="81">()</argument_list></call><op:operator pos:line="273" pos:column="83">.</op:operator><call><name pos:line="273" pos:column="84">GetFullName</name><argument_list pos:line="273" pos:column="95">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="274" pos:column="13">Assert</name><op:operator pos:line="274" pos:column="19">.</op:operator><name pos:line="274" pos:column="20">AreEqual</name></name><argument_list pos:line="274" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="274" pos:column="29">"A.B"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="274" pos:column="36">outer</name><op:operator pos:line="274" pos:column="41">.</op:operator><name pos:line="274" pos:column="42">GetFullName</name></name><argument_list pos:line="274" pos:column="53">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="276" pos:column="13">Assert</name><op:operator pos:line="276" pos:column="19">.</op:operator><name pos:line="276" pos:column="20">AreEqual</name></name><argument_list pos:line="276" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="276" pos:column="29">"C"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="276" pos:column="34">inner</name><op:operator pos:line="276" pos:column="39">.</op:operator><name pos:line="276" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="277" pos:column="13">Assert</name><op:operator pos:line="277" pos:column="19">.</op:operator><name pos:line="277" pos:column="20">AreEqual</name></name><argument_list pos:line="277" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="277" pos:column="29">"A"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="277" pos:column="34">inner</name><op:operator pos:line="277" pos:column="39">.</op:operator><name><name pos:line="277" pos:column="40">GetAncestors</name><argument_list pos:line="277" pos:column="52">&lt;<argument><name pos:line="277" pos:column="53">NamespaceDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="277" pos:column="73">()</argument_list></call><op:operator pos:line="277" pos:column="75">.</op:operator><call><name pos:line="277" pos:column="76">First</name><argument_list pos:line="277" pos:column="81">()</argument_list></call><op:operator pos:line="277" pos:column="83">.</op:operator><call><name pos:line="277" pos:column="84">GetFullName</name><argument_list pos:line="277" pos:column="95">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="278" pos:column="13">Assert</name><op:operator pos:line="278" pos:column="19">.</op:operator><name pos:line="278" pos:column="20">AreEqual</name></name><argument_list pos:line="278" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="278" pos:column="29">"A.B.C"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="278" pos:column="38">inner</name><op:operator pos:line="278" pos:column="43">.</op:operator><name pos:line="278" pos:column="44">GetFullName</name></name><argument_list pos:line="278" pos:column="55">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="281" pos:column="9">[<expr><name pos:line="281" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="282" pos:column="9">public</specifier> <name pos:line="282" pos:column="16">void</name></type> <name pos:line="282" pos:column="21">TestCreateTypeDefinitions_Interface</name><parameter_list pos:line="282" pos:column="56">()</parameter_list> <block pos:line="282" pos:column="59">{
            <comment type="line" pos:line="283" pos:column="13">// interface A { }</comment>
            <decl_stmt><decl><type><name pos:line="284" pos:column="13">string</name></type> <name pos:line="284" pos:column="20">xml</name> <init pos:line="284" pos:column="24">= <expr><lit:literal type="string" pos:line="284" pos:column="26">@"&lt;class type=""interface&gt;interface &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="287" pos:column="13">XElement</name></type> <name pos:line="287" pos:column="22">xmlElement</name> <init pos:line="287" pos:column="33">= <expr><call><name><name pos:line="287" pos:column="35">fileSetup</name><op:operator pos:line="287" pos:column="44">.</op:operator><name pos:line="287" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="287" pos:column="69">(<argument><expr><name pos:line="287" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="287" pos:column="75">"A.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="289" pos:column="13">var</name></type> <name pos:line="289" pos:column="17">actual</name> <init pos:line="289" pos:column="24">= <expr><call><name><name pos:line="289" pos:column="26">codeParser</name><op:operator pos:line="289" pos:column="36">.</op:operator><name pos:line="289" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="289" pos:column="50">(<argument><expr><name pos:line="289" pos:column="51">xmlElement</name></expr></argument>)</argument_list></call><op:operator pos:line="289" pos:column="62">.</op:operator><call><name><name pos:line="289" pos:column="63">ChildStatements</name><op:operator pos:line="289" pos:column="78">.</op:operator><name pos:line="289" pos:column="79">First</name></name><argument_list pos:line="289" pos:column="84">()</argument_list></call> <op:operator pos:line="289" pos:column="87">as</op:operator> <name pos:line="289" pos:column="90">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="290" pos:column="13">var</name></type> <name pos:line="290" pos:column="17">globalNamespace</name> <init pos:line="290" pos:column="33">= <expr><name><name pos:line="290" pos:column="35">actual</name><op:operator pos:line="290" pos:column="41">.</op:operator><name pos:line="290" pos:column="42">ParentStatement</name></name> <op:operator pos:line="290" pos:column="58">as</op:operator> <name pos:line="290" pos:column="61">NamespaceDefinition</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="292" pos:column="13">Assert</name><op:operator pos:line="292" pos:column="19">.</op:operator><name pos:line="292" pos:column="20">AreEqual</name></name><argument_list pos:line="292" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="292" pos:column="29">"A"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="292" pos:column="34">actual</name><op:operator pos:line="292" pos:column="40">.</op:operator><name pos:line="292" pos:column="41">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="293" pos:column="13">Assert</name><op:operator pos:line="293" pos:column="19">.</op:operator><name pos:line="293" pos:column="20">AreEqual</name></name><argument_list pos:line="293" pos:column="28">(<argument><expr><name><name pos:line="293" pos:column="29">TypeKind</name><op:operator pos:line="293" pos:column="37">.</op:operator><name pos:line="293" pos:column="38">Interface</name></name></expr></argument>, <argument><expr><name><name pos:line="293" pos:column="49">actual</name><op:operator pos:line="293" pos:column="55">.</op:operator><name pos:line="293" pos:column="56">Kind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="294" pos:column="13">Assert</name><op:operator pos:line="294" pos:column="19">.</op:operator><name pos:line="294" pos:column="20">That</name></name><argument_list pos:line="294" pos:column="24">(<argument><expr><name><name pos:line="294" pos:column="25">globalNamespace</name><op:operator pos:line="294" pos:column="40">.</op:operator><name pos:line="294" pos:column="41">IsGlobal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="297" pos:column="9">[<expr><name pos:line="297" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="298" pos:column="9">public</specifier> <name pos:line="298" pos:column="16">void</name></type> <name pos:line="298" pos:column="21">TestFieldCreation</name><parameter_list pos:line="298" pos:column="38">()</parameter_list> <block pos:line="298" pos:column="41">{
            <comment type="line" pos:line="299" pos:column="13">// # A.java class A { int B; }</comment>
            <decl_stmt><decl><type><name pos:line="300" pos:column="13">string</name></type> <name pos:line="300" pos:column="20">xml</name> <init pos:line="300" pos:column="24">= <expr><lit:literal type="string" pos:line="300" pos:column="26">@"&lt;class&gt;class &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{
    &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;B&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="304" pos:column="13">var</name></type> <name pos:line="304" pos:column="17">xmlElement</name> <init pos:line="304" pos:column="28">= <expr><call><name><name pos:line="304" pos:column="30">fileSetup</name><op:operator pos:line="304" pos:column="39">.</op:operator><name pos:line="304" pos:column="40">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="304" pos:column="64">(<argument><expr><name pos:line="304" pos:column="65">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="304" pos:column="70">"A.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="306" pos:column="13">var</name></type> <name pos:line="306" pos:column="17">globalScope</name> <init pos:line="306" pos:column="29">= <expr><call><name><name pos:line="306" pos:column="31">codeParser</name><op:operator pos:line="306" pos:column="41">.</op:operator><name pos:line="306" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="306" pos:column="55">(<argument><expr><name pos:line="306" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="308" pos:column="13">var</name></type> <name pos:line="308" pos:column="17">typeA</name> <init pos:line="308" pos:column="23">= <expr><call><name><name pos:line="308" pos:column="25">globalScope</name><op:operator pos:line="308" pos:column="36">.</op:operator><name pos:line="308" pos:column="37">ChildStatements</name><op:operator pos:line="308" pos:column="52">.</op:operator><name pos:line="308" pos:column="53">First</name></name><argument_list pos:line="308" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="309" pos:column="13">Assert</name><op:operator pos:line="309" pos:column="19">.</op:operator><name pos:line="309" pos:column="20">AreEqual</name></name><argument_list pos:line="309" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="309" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="309" pos:column="32">typeA</name><op:operator pos:line="309" pos:column="37">.</op:operator><name pos:line="309" pos:column="38">ChildStatements</name><op:operator pos:line="309" pos:column="53">.</op:operator><name pos:line="309" pos:column="54">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="311" pos:column="13">var</name></type> <name pos:line="311" pos:column="17">fieldB</name> <init pos:line="311" pos:column="24">= <expr><call><name><name pos:line="311" pos:column="26">typeA</name><op:operator pos:line="311" pos:column="31">.</op:operator><name pos:line="311" pos:column="32">ChildStatements</name><op:operator pos:line="311" pos:column="47">.</op:operator><name pos:line="311" pos:column="48">First</name></name><argument_list pos:line="311" pos:column="53">()</argument_list></call><op:operator pos:line="311" pos:column="55">.</op:operator><name pos:line="311" pos:column="56">Content</name> <op:operator pos:line="311" pos:column="64">as</op:operator> <name pos:line="311" pos:column="67">VariableDeclaration</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="312" pos:column="13">Assert</name><op:operator pos:line="312" pos:column="19">.</op:operator><name pos:line="312" pos:column="20">IsNotNull</name></name><argument_list pos:line="312" pos:column="29">(<argument><expr><name pos:line="312" pos:column="30">fieldB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="313" pos:column="13">Assert</name><op:operator pos:line="313" pos:column="19">.</op:operator><name pos:line="313" pos:column="20">AreEqual</name></name><argument_list pos:line="313" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="313" pos:column="29">"B"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="313" pos:column="34">fieldB</name><op:operator pos:line="313" pos:column="40">.</op:operator><name pos:line="313" pos:column="41">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="314" pos:column="13">Assert</name><op:operator pos:line="314" pos:column="19">.</op:operator><name pos:line="314" pos:column="20">AreEqual</name></name><argument_list pos:line="314" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="314" pos:column="29">"int"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="314" pos:column="36">fieldB</name><op:operator pos:line="314" pos:column="42">.</op:operator><name pos:line="314" pos:column="43">VariableType</name><op:operator pos:line="314" pos:column="55">.</op:operator><name pos:line="314" pos:column="56">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="315" pos:column="13">Assert</name><op:operator pos:line="315" pos:column="19">.</op:operator><name pos:line="315" pos:column="20">AreEqual</name></name><argument_list pos:line="315" pos:column="28">(<argument><expr><name><name pos:line="315" pos:column="29">AccessModifier</name><op:operator pos:line="315" pos:column="43">.</op:operator><name pos:line="315" pos:column="44">None</name></name></expr></argument>, <argument><expr><name><name pos:line="315" pos:column="50">fieldB</name><op:operator pos:line="315" pos:column="56">.</op:operator><name pos:line="315" pos:column="57">Accessibility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="318" pos:column="9">[<expr><name pos:line="318" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="319" pos:column="9">public</specifier> <name pos:line="319" pos:column="16">void</name></type> <name pos:line="319" pos:column="21">TestGetAccessModifierForMethod_None</name><parameter_list pos:line="319" pos:column="56">()</parameter_list> <block pos:line="319" pos:column="59">{
            <comment type="line" pos:line="320" pos:column="13">//public class Foo {</comment>
            <comment type="line" pos:line="321" pos:column="13">//    bool Bar() { return true; }</comment>
            <comment type="line" pos:line="322" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="323" pos:column="13">string</name></type> <name pos:line="323" pos:column="20">xml</name> <init pos:line="323" pos:column="24">= <expr><lit:literal type="string" pos:line="323" pos:column="26">@"&lt;class&gt;&lt;specifier&gt;public&lt;/specifier&gt; class &lt;name&gt;Foo&lt;/name&gt; &lt;block&gt;{
    &lt;function&gt;&lt;type&gt;&lt;name&gt;bool&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Bar&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;return&gt;return &lt;expr&gt;&lt;name&gt;true&lt;/name&gt;&lt;/expr&gt;;&lt;/return&gt; }&lt;/block&gt;&lt;/function&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="326" pos:column="13">var</name></type> <name pos:line="326" pos:column="17">unit</name> <init pos:line="326" pos:column="22">= <expr><call><name><name pos:line="326" pos:column="24">fileSetup</name><op:operator pos:line="326" pos:column="33">.</op:operator><name pos:line="326" pos:column="34">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="326" pos:column="58">(<argument><expr><name pos:line="326" pos:column="59">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="326" pos:column="64">"Foo.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="328" pos:column="13">var</name></type> <name pos:line="328" pos:column="17">globalScope</name> <init pos:line="328" pos:column="29">= <expr><call><name><name pos:line="328" pos:column="31">codeParser</name><op:operator pos:line="328" pos:column="41">.</op:operator><name pos:line="328" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="328" pos:column="55">(<argument><expr><name pos:line="328" pos:column="56">unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="329" pos:column="13">var</name></type> <name pos:line="329" pos:column="17">method</name> <init pos:line="329" pos:column="24">= <expr><call><name><name pos:line="329" pos:column="26">globalScope</name><op:operator pos:line="329" pos:column="37">.</op:operator><name><name pos:line="329" pos:column="38">GetDescendants</name><argument_list pos:line="329" pos:column="52">&lt;<argument><name pos:line="329" pos:column="53">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="329" pos:column="70">()</argument_list></call><op:operator pos:line="329" pos:column="72">.</op:operator><call><name pos:line="329" pos:column="73">First</name><argument_list pos:line="329" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="331" pos:column="13">Assert</name><op:operator pos:line="331" pos:column="19">.</op:operator><name pos:line="331" pos:column="20">AreEqual</name></name><argument_list pos:line="331" pos:column="28">(<argument><expr><name><name pos:line="331" pos:column="29">AccessModifier</name><op:operator pos:line="331" pos:column="43">.</op:operator><name pos:line="331" pos:column="44">None</name></name></expr></argument>, <argument><expr><name><name pos:line="331" pos:column="50">method</name><op:operator pos:line="331" pos:column="56">.</op:operator><name pos:line="331" pos:column="57">Accessibility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="334" pos:column="9">[<expr><name pos:line="334" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="335" pos:column="9">public</specifier> <name pos:line="335" pos:column="16">void</name></type> <name pos:line="335" pos:column="21">TestGetAccessModifierForMethod_Normal</name><parameter_list pos:line="335" pos:column="58">()</parameter_list> <block pos:line="335" pos:column="61">{
            <comment type="line" pos:line="336" pos:column="13">//public class Foo {</comment>
            <comment type="line" pos:line="337" pos:column="13">//    public bool Bar() { return true; }</comment>
            <comment type="line" pos:line="338" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="339" pos:column="13">string</name></type> <name pos:line="339" pos:column="20">xml</name> <init pos:line="339" pos:column="24">= <expr><lit:literal type="string" pos:line="339" pos:column="26">@"&lt;class&gt;&lt;specifier&gt;public&lt;/specifier&gt; class &lt;name&gt;Foo&lt;/name&gt; &lt;block&gt;{
    &lt;function&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;bool&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Bar&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;return&gt;return &lt;expr&gt;&lt;name&gt;true&lt;/name&gt;&lt;/expr&gt;;&lt;/return&gt; }&lt;/block&gt;&lt;/function&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="342" pos:column="13">var</name></type> <name pos:line="342" pos:column="17">unit</name> <init pos:line="342" pos:column="22">= <expr><call><name><name pos:line="342" pos:column="24">fileSetup</name><op:operator pos:line="342" pos:column="33">.</op:operator><name pos:line="342" pos:column="34">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="342" pos:column="58">(<argument><expr><name pos:line="342" pos:column="59">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="342" pos:column="64">"Foo.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="344" pos:column="13">var</name></type> <name pos:line="344" pos:column="17">globalScope</name> <init pos:line="344" pos:column="29">= <expr><call><name><name pos:line="344" pos:column="31">codeParser</name><op:operator pos:line="344" pos:column="41">.</op:operator><name pos:line="344" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="344" pos:column="55">(<argument><expr><name pos:line="344" pos:column="56">unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="345" pos:column="13">var</name></type> <name pos:line="345" pos:column="17">method</name> <init pos:line="345" pos:column="24">= <expr><call><name><name pos:line="345" pos:column="26">globalScope</name><op:operator pos:line="345" pos:column="37">.</op:operator><name><name pos:line="345" pos:column="38">GetDescendants</name><argument_list pos:line="345" pos:column="52">&lt;<argument><name pos:line="345" pos:column="53">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="345" pos:column="70">()</argument_list></call><op:operator pos:line="345" pos:column="72">.</op:operator><call><name pos:line="345" pos:column="73">First</name><argument_list pos:line="345" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="347" pos:column="13">Assert</name><op:operator pos:line="347" pos:column="19">.</op:operator><name pos:line="347" pos:column="20">AreEqual</name></name><argument_list pos:line="347" pos:column="28">(<argument><expr><name><name pos:line="347" pos:column="29">AccessModifier</name><op:operator pos:line="347" pos:column="43">.</op:operator><name pos:line="347" pos:column="44">Public</name></name></expr></argument>, <argument><expr><name><name pos:line="347" pos:column="52">method</name><op:operator pos:line="347" pos:column="58">.</op:operator><name pos:line="347" pos:column="59">Accessibility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="350" pos:column="9">[<expr><name pos:line="350" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="351" pos:column="9">public</specifier> <name pos:line="351" pos:column="16">void</name></type> <name pos:line="351" pos:column="21">TestGetAccessModifierForMethod_Static</name><parameter_list pos:line="351" pos:column="58">()</parameter_list> <block pos:line="351" pos:column="61">{
            <comment type="line" pos:line="352" pos:column="13">//public class Foo {</comment>
            <comment type="line" pos:line="353" pos:column="13">//    static public bool Bar() { return true; }</comment>
            <comment type="line" pos:line="354" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="355" pos:column="13">string</name></type> <name pos:line="355" pos:column="20">xml</name> <init pos:line="355" pos:column="24">= <expr><lit:literal type="string" pos:line="355" pos:column="26">@"&lt;class&gt;&lt;specifier&gt;public&lt;/specifier&gt; class &lt;name&gt;Foo&lt;/name&gt; &lt;block&gt;{
    &lt;function&gt;&lt;type&gt;&lt;specifier&gt;static&lt;/specifier&gt; &lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;bool&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Bar&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;return&gt;return &lt;expr&gt;&lt;name&gt;true&lt;/name&gt;&lt;/expr&gt;;&lt;/return&gt; }&lt;/block&gt;&lt;/function&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="358" pos:column="13">var</name></type> <name pos:line="358" pos:column="17">unit</name> <init pos:line="358" pos:column="22">= <expr><call><name><name pos:line="358" pos:column="24">fileSetup</name><op:operator pos:line="358" pos:column="33">.</op:operator><name pos:line="358" pos:column="34">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="358" pos:column="58">(<argument><expr><name pos:line="358" pos:column="59">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="358" pos:column="64">"Foo.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="360" pos:column="13">var</name></type> <name pos:line="360" pos:column="17">globalScope</name> <init pos:line="360" pos:column="29">= <expr><call><name><name pos:line="360" pos:column="31">codeParser</name><op:operator pos:line="360" pos:column="41">.</op:operator><name pos:line="360" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="360" pos:column="55">(<argument><expr><name pos:line="360" pos:column="56">unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="361" pos:column="13">var</name></type> <name pos:line="361" pos:column="17">method</name> <init pos:line="361" pos:column="24">= <expr><call><name><name pos:line="361" pos:column="26">globalScope</name><op:operator pos:line="361" pos:column="37">.</op:operator><name><name pos:line="361" pos:column="38">GetDescendants</name><argument_list pos:line="361" pos:column="52">&lt;<argument><name pos:line="361" pos:column="53">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="361" pos:column="70">()</argument_list></call><op:operator pos:line="361" pos:column="72">.</op:operator><call><name pos:line="361" pos:column="73">First</name><argument_list pos:line="361" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="363" pos:column="13">Assert</name><op:operator pos:line="363" pos:column="19">.</op:operator><name pos:line="363" pos:column="20">AreEqual</name></name><argument_list pos:line="363" pos:column="28">(<argument><expr><name><name pos:line="363" pos:column="29">AccessModifier</name><op:operator pos:line="363" pos:column="43">.</op:operator><name pos:line="363" pos:column="44">Public</name></name></expr></argument>, <argument><expr><name><name pos:line="363" pos:column="52">method</name><op:operator pos:line="363" pos:column="58">.</op:operator><name pos:line="363" pos:column="59">Accessibility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="366" pos:column="9">[<expr><name pos:line="366" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="367" pos:column="9">public</specifier> <name pos:line="367" pos:column="16">void</name></type> <name pos:line="367" pos:column="21">TestGetAccessModifierForType_None</name><parameter_list pos:line="367" pos:column="54">()</parameter_list> <block pos:line="367" pos:column="57">{
            <comment type="line" pos:line="368" pos:column="13">//class Foo {}</comment>
            <decl_stmt><decl><type><name pos:line="369" pos:column="13">string</name></type> <name pos:line="369" pos:column="20">xml</name> <init pos:line="369" pos:column="24">= <expr><lit:literal type="string" pos:line="369" pos:column="26">@"&lt;class&gt;class &lt;name&gt;Foo&lt;/name&gt; &lt;block&gt;{}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="370" pos:column="13">var</name></type> <name pos:line="370" pos:column="17">unit</name> <init pos:line="370" pos:column="22">= <expr><call><name><name pos:line="370" pos:column="24">fileSetup</name><op:operator pos:line="370" pos:column="33">.</op:operator><name pos:line="370" pos:column="34">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="370" pos:column="58">(<argument><expr><name pos:line="370" pos:column="59">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="370" pos:column="64">"Foo.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="372" pos:column="13">var</name></type> <name pos:line="372" pos:column="17">globalScope</name> <init pos:line="372" pos:column="29">= <expr><call><name><name pos:line="372" pos:column="31">codeParser</name><op:operator pos:line="372" pos:column="41">.</op:operator><name pos:line="372" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="372" pos:column="55">(<argument><expr><name pos:line="372" pos:column="56">unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="373" pos:column="13">var</name></type> <name pos:line="373" pos:column="17">type</name> <init pos:line="373" pos:column="22">= <expr><call><name><name pos:line="373" pos:column="24">globalScope</name><op:operator pos:line="373" pos:column="35">.</op:operator><name><name pos:line="373" pos:column="36">GetDescendants</name><argument_list pos:line="373" pos:column="50">&lt;<argument><name pos:line="373" pos:column="51">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="373" pos:column="66">()</argument_list></call><op:operator pos:line="373" pos:column="68">.</op:operator><call><name pos:line="373" pos:column="69">First</name><argument_list pos:line="373" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="375" pos:column="13">Assert</name><op:operator pos:line="375" pos:column="19">.</op:operator><name pos:line="375" pos:column="20">AreEqual</name></name><argument_list pos:line="375" pos:column="28">(<argument><expr><name><name pos:line="375" pos:column="29">AccessModifier</name><op:operator pos:line="375" pos:column="43">.</op:operator><name pos:line="375" pos:column="44">None</name></name></expr></argument>, <argument><expr><name><name pos:line="375" pos:column="50">type</name><op:operator pos:line="375" pos:column="54">.</op:operator><name pos:line="375" pos:column="55">Accessibility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="378" pos:column="9">[<expr><name pos:line="378" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="379" pos:column="9">public</specifier> <name pos:line="379" pos:column="16">void</name></type> <name pos:line="379" pos:column="21">TestGetAccessModifierForType_Normal</name><parameter_list pos:line="379" pos:column="56">()</parameter_list> <block pos:line="379" pos:column="59">{
            <comment type="line" pos:line="380" pos:column="13">//public class Foo {}</comment>
            <decl_stmt><decl><type><name pos:line="381" pos:column="13">string</name></type> <name pos:line="381" pos:column="20">xml</name> <init pos:line="381" pos:column="24">= <expr><lit:literal type="string" pos:line="381" pos:column="26">@"&lt;class&gt;&lt;specifier&gt;public&lt;/specifier&gt; class &lt;name&gt;Foo&lt;/name&gt; &lt;block&gt;{}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="382" pos:column="13">var</name></type> <name pos:line="382" pos:column="17">unit</name> <init pos:line="382" pos:column="22">= <expr><call><name><name pos:line="382" pos:column="24">fileSetup</name><op:operator pos:line="382" pos:column="33">.</op:operator><name pos:line="382" pos:column="34">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="382" pos:column="58">(<argument><expr><name pos:line="382" pos:column="59">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="382" pos:column="64">"Foo.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="384" pos:column="13">var</name></type> <name pos:line="384" pos:column="17">globalScope</name> <init pos:line="384" pos:column="29">= <expr><call><name><name pos:line="384" pos:column="31">codeParser</name><op:operator pos:line="384" pos:column="41">.</op:operator><name pos:line="384" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="384" pos:column="55">(<argument><expr><name pos:line="384" pos:column="56">unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="385" pos:column="13">var</name></type> <name pos:line="385" pos:column="17">type</name> <init pos:line="385" pos:column="22">= <expr><call><name><name pos:line="385" pos:column="24">globalScope</name><op:operator pos:line="385" pos:column="35">.</op:operator><name><name pos:line="385" pos:column="36">GetDescendants</name><argument_list pos:line="385" pos:column="50">&lt;<argument><name pos:line="385" pos:column="51">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="385" pos:column="66">()</argument_list></call><op:operator pos:line="385" pos:column="68">.</op:operator><call><name pos:line="385" pos:column="69">First</name><argument_list pos:line="385" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="387" pos:column="13">Assert</name><op:operator pos:line="387" pos:column="19">.</op:operator><name pos:line="387" pos:column="20">AreEqual</name></name><argument_list pos:line="387" pos:column="28">(<argument><expr><name><name pos:line="387" pos:column="29">AccessModifier</name><op:operator pos:line="387" pos:column="43">.</op:operator><name pos:line="387" pos:column="44">Public</name></name></expr></argument>, <argument><expr><name><name pos:line="387" pos:column="52">type</name><op:operator pos:line="387" pos:column="56">.</op:operator><name pos:line="387" pos:column="57">Accessibility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="390" pos:column="9">[<expr><name pos:line="390" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="391" pos:column="9">public</specifier> <name pos:line="391" pos:column="16">void</name></type> <name pos:line="391" pos:column="21">TestGetAccessModifierForType_Static</name><parameter_list pos:line="391" pos:column="56">()</parameter_list> <block pos:line="391" pos:column="59">{
            <comment type="line" pos:line="392" pos:column="13">//static public class Foo {}</comment>
            <decl_stmt><decl><type><name pos:line="393" pos:column="13">string</name></type> <name pos:line="393" pos:column="20">xml</name> <init pos:line="393" pos:column="24">= <expr><lit:literal type="string" pos:line="393" pos:column="26">@"&lt;class&gt;&lt;specifier&gt;static&lt;/specifier&gt; &lt;specifier&gt;public&lt;/specifier&gt; class &lt;name&gt;Foo&lt;/name&gt; &lt;block&gt;{}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="394" pos:column="13">var</name></type> <name pos:line="394" pos:column="17">unit</name> <init pos:line="394" pos:column="22">= <expr><call><name><name pos:line="394" pos:column="24">fileSetup</name><op:operator pos:line="394" pos:column="33">.</op:operator><name pos:line="394" pos:column="34">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="394" pos:column="58">(<argument><expr><name pos:line="394" pos:column="59">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="394" pos:column="64">"Foo.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="396" pos:column="13">var</name></type> <name pos:line="396" pos:column="17">globalScope</name> <init pos:line="396" pos:column="29">= <expr><call><name><name pos:line="396" pos:column="31">codeParser</name><op:operator pos:line="396" pos:column="41">.</op:operator><name pos:line="396" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="396" pos:column="55">(<argument><expr><name pos:line="396" pos:column="56">unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="397" pos:column="13">var</name></type> <name pos:line="397" pos:column="17">type</name> <init pos:line="397" pos:column="22">= <expr><call><name><name pos:line="397" pos:column="24">globalScope</name><op:operator pos:line="397" pos:column="35">.</op:operator><name><name pos:line="397" pos:column="36">GetDescendants</name><argument_list pos:line="397" pos:column="50">&lt;<argument><name pos:line="397" pos:column="51">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="397" pos:column="66">()</argument_list></call><op:operator pos:line="397" pos:column="68">.</op:operator><call><name pos:line="397" pos:column="69">First</name><argument_list pos:line="397" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="399" pos:column="13">Assert</name><op:operator pos:line="399" pos:column="19">.</op:operator><name pos:line="399" pos:column="20">AreEqual</name></name><argument_list pos:line="399" pos:column="28">(<argument><expr><name><name pos:line="399" pos:column="29">AccessModifier</name><op:operator pos:line="399" pos:column="43">.</op:operator><name pos:line="399" pos:column="44">Public</name></name></expr></argument>, <argument><expr><name><name pos:line="399" pos:column="52">type</name><op:operator pos:line="399" pos:column="56">.</op:operator><name pos:line="399" pos:column="57">Accessibility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>



        <function><type><attribute pos:line="404" pos:column="9">[<expr><name pos:line="404" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="405" pos:column="9">public</specifier> <name pos:line="405" pos:column="16">void</name></type> <name pos:line="405" pos:column="21">TestMethodCallCreation_WithConflictingMethodNames</name><parameter_list pos:line="405" pos:column="70">()</parameter_list> <block pos:line="405" pos:column="73">{
            <comment type="line" pos:line="406" pos:column="13">//# A.java</comment>
            <comment type="line" pos:line="407" pos:column="13">//class A {</comment>
            <comment type="line" pos:line="408" pos:column="13">//    B b;</comment>
            <comment type="line" pos:line="409" pos:column="13">//    boolean Contains() { b.Contains(); }</comment>
            <comment type="line" pos:line="410" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="411" pos:column="13">string</name></type> <name pos:line="411" pos:column="20">a_xml</name> <init pos:line="411" pos:column="26">= <expr><lit:literal type="string" pos:line="411" pos:column="28">@"&lt;class&gt;class &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{
    &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;B&lt;/name&gt;&lt;/type&gt; &lt;name&gt;b&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
    &lt;function&gt;&lt;type&gt;&lt;name&gt;boolean&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Contains&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;&lt;name&gt;b&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;Contains&lt;/name&gt;&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt; }&lt;/block&gt;&lt;/function&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="416" pos:column="13">//class B {</comment>
            <comment type="line" pos:line="417" pos:column="13">//    boolean Contains() { return true; }</comment>
            <comment type="line" pos:line="418" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="419" pos:column="13">string</name></type> <name pos:line="419" pos:column="20">b_xml</name> <init pos:line="419" pos:column="26">= <expr><lit:literal type="string" pos:line="419" pos:column="28">@"&lt;class&gt;class &lt;name&gt;B&lt;/name&gt; &lt;block&gt;{
    &lt;function&gt;&lt;type&gt;&lt;name&gt;boolean&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Contains&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;return&gt;return &lt;expr&gt;&lt;lit:literal type=""boolean&gt;true&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt; }&lt;/block&gt;&lt;/function&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="423" pos:column="13">var</name></type> <name pos:line="423" pos:column="17">fileUnitA</name> <init pos:line="423" pos:column="27">= <expr><call><name><name pos:line="423" pos:column="29">fileSetup</name><op:operator pos:line="423" pos:column="38">.</op:operator><name pos:line="423" pos:column="39">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="423" pos:column="63">(<argument><expr><name pos:line="423" pos:column="64">a_xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="423" pos:column="71">"A.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="424" pos:column="13">var</name></type> <name pos:line="424" pos:column="17">fileUnitB</name> <init pos:line="424" pos:column="27">= <expr><call><name><name pos:line="424" pos:column="29">fileSetup</name><op:operator pos:line="424" pos:column="38">.</op:operator><name pos:line="424" pos:column="39">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="424" pos:column="63">(<argument><expr><name pos:line="424" pos:column="64">b_xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="424" pos:column="71">"B.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="426" pos:column="13">var</name></type> <name pos:line="426" pos:column="17">scopeForA</name> <init pos:line="426" pos:column="27">= <expr><call><name><name pos:line="426" pos:column="29">codeParser</name><op:operator pos:line="426" pos:column="39">.</op:operator><name pos:line="426" pos:column="40">ParseFileUnit</name></name><argument_list pos:line="426" pos:column="53">(<argument><expr><name pos:line="426" pos:column="54">fileUnitA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="427" pos:column="13">var</name></type> <name pos:line="427" pos:column="17">scopeForB</name> <init pos:line="427" pos:column="27">= <expr><call><name><name pos:line="427" pos:column="29">codeParser</name><op:operator pos:line="427" pos:column="39">.</op:operator><name pos:line="427" pos:column="40">ParseFileUnit</name></name><argument_list pos:line="427" pos:column="53">(<argument><expr><name pos:line="427" pos:column="54">fileUnitB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="428" pos:column="13">var</name></type> <name pos:line="428" pos:column="17">globalScope</name> <init pos:line="428" pos:column="29">= <expr><call><name><name pos:line="428" pos:column="31">scopeForA</name><op:operator pos:line="428" pos:column="40">.</op:operator><name pos:line="428" pos:column="41">Merge</name></name><argument_list pos:line="428" pos:column="46">(<argument><expr><name pos:line="428" pos:column="47">scopeForB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="430" pos:column="13">var</name></type> <name pos:line="430" pos:column="17">containsMethods</name> <init pos:line="430" pos:column="33">= <expr><call><name><name pos:line="430" pos:column="35">globalScope</name><op:operator pos:line="430" pos:column="46">.</op:operator><name><name pos:line="430" pos:column="47">GetDescendants</name><argument_list pos:line="430" pos:column="61">&lt;<argument><name pos:line="430" pos:column="62">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="430" pos:column="79">()</argument_list></call><op:operator pos:line="430" pos:column="81">.</op:operator><call><name pos:line="430" pos:column="82">Where</name><argument_list pos:line="430" pos:column="87">(<argument><expr><lambda><name pos:line="430" pos:column="88">m</name> <op:operator pos:line="430" pos:column="90">=&gt;</op:operator> <name><name pos:line="430" pos:column="93">m</name><op:operator pos:line="430" pos:column="94">.</op:operator><name pos:line="430" pos:column="95">Name</name></name> <op:operator pos:line="430" pos:column="100">==</op:operator> <lit:literal type="string" pos:line="430" pos:column="103">"Contains"</lit:literal></lambda></expr></argument>)</argument_list></call><op:operator pos:line="430" pos:column="114">.</op:operator><call><name pos:line="430" pos:column="115">ToList</name><argument_list pos:line="430" pos:column="121">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="432" pos:column="13">var</name></type> <name pos:line="432" pos:column="17">aDotContains</name> <init pos:line="432" pos:column="30">= <expr><call><name><name pos:line="432" pos:column="32">containsMethods</name><op:operator pos:line="432" pos:column="47">.</op:operator><name pos:line="432" pos:column="48">FirstOrDefault</name></name><argument_list pos:line="432" pos:column="62">(<argument><expr><lambda><name pos:line="432" pos:column="63">m</name> <op:operator pos:line="432" pos:column="65">=&gt;</op:operator> <call><name><name pos:line="432" pos:column="68">m</name><op:operator pos:line="432" pos:column="69">.</op:operator><name><name pos:line="432" pos:column="70">GetAncestors</name><argument_list pos:line="432" pos:column="82">&lt;<argument><name pos:line="432" pos:column="83">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="432" pos:column="98">()</argument_list></call><op:operator pos:line="432" pos:column="100">.</op:operator><call><name pos:line="432" pos:column="101">FirstOrDefault</name><argument_list pos:line="432" pos:column="115">()</argument_list></call><op:operator pos:line="432" pos:column="117">.</op:operator><name pos:line="432" pos:column="118">Name</name> <op:operator pos:line="432" pos:column="123">==</op:operator> <lit:literal type="string" pos:line="432" pos:column="126">"A"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="433" pos:column="13">Assert</name><op:operator pos:line="433" pos:column="19">.</op:operator><name pos:line="433" pos:column="20">IsNotNull</name></name><argument_list pos:line="433" pos:column="29">(<argument><expr><name pos:line="433" pos:column="30">aDotContains</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="434" pos:column="13">var</name></type> <name pos:line="434" pos:column="17">bDotContains</name> <init pos:line="434" pos:column="30">= <expr><call><name><name pos:line="434" pos:column="32">containsMethods</name><op:operator pos:line="434" pos:column="47">.</op:operator><name pos:line="434" pos:column="48">FirstOrDefault</name></name><argument_list pos:line="434" pos:column="62">(<argument><expr><lambda><name pos:line="434" pos:column="63">m</name> <op:operator pos:line="434" pos:column="65">=&gt;</op:operator> <call><name><name pos:line="434" pos:column="68">m</name><op:operator pos:line="434" pos:column="69">.</op:operator><name><name pos:line="434" pos:column="70">GetAncestors</name><argument_list pos:line="434" pos:column="82">&lt;<argument><name pos:line="434" pos:column="83">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="434" pos:column="98">()</argument_list></call><op:operator pos:line="434" pos:column="100">.</op:operator><call><name pos:line="434" pos:column="101">FirstOrDefault</name><argument_list pos:line="434" pos:column="115">()</argument_list></call><op:operator pos:line="434" pos:column="117">.</op:operator><name pos:line="434" pos:column="118">Name</name> <op:operator pos:line="434" pos:column="123">==</op:operator> <lit:literal type="string" pos:line="434" pos:column="126">"B"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="435" pos:column="13">Assert</name><op:operator pos:line="435" pos:column="19">.</op:operator><name pos:line="435" pos:column="20">IsNotNull</name></name><argument_list pos:line="435" pos:column="29">(<argument><expr><name pos:line="435" pos:column="30">bDotContains</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="436" pos:column="13">Assert</name><op:operator pos:line="436" pos:column="19">.</op:operator><name pos:line="436" pos:column="20">AreEqual</name></name><argument_list pos:line="436" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="436" pos:column="29">"A.Contains"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="436" pos:column="43">aDotContains</name><op:operator pos:line="436" pos:column="55">.</op:operator><name pos:line="436" pos:column="56">GetFullName</name></name><argument_list pos:line="436" pos:column="67">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="437" pos:column="13">Assert</name><op:operator pos:line="437" pos:column="19">.</op:operator><name pos:line="437" pos:column="20">AreEqual</name></name><argument_list pos:line="437" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="437" pos:column="29">"B.Contains"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="437" pos:column="43">bDotContains</name><op:operator pos:line="437" pos:column="55">.</op:operator><name pos:line="437" pos:column="56">GetFullName</name></name><argument_list pos:line="437" pos:column="67">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="439" pos:column="13">Assert</name><op:operator pos:line="439" pos:column="19">.</op:operator><name pos:line="439" pos:column="20">AreEqual</name></name><argument_list pos:line="439" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="439" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="439" pos:column="32">aDotContains</name><op:operator pos:line="439" pos:column="44">.</op:operator><name pos:line="439" pos:column="45">ChildStatements</name><op:operator pos:line="439" pos:column="60">.</op:operator><name pos:line="439" pos:column="61">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="440" pos:column="13">var</name></type> <name pos:line="440" pos:column="17">containsCall</name> <init pos:line="440" pos:column="30">= <expr><name><name pos:line="440" pos:column="32">aDotContains</name><op:operator pos:line="440" pos:column="44">.</op:operator><name pos:line="440" pos:column="45">ChildStatements</name><index pos:line="440" pos:column="60">[<expr><lit:literal type="number" pos:line="440" pos:column="61">0</lit:literal></expr>]</index></name><op:operator pos:line="440" pos:column="63">.</op:operator><call><name><name pos:line="440" pos:column="64">Content</name><op:operator pos:line="440" pos:column="71">.</op:operator><name><name pos:line="440" pos:column="72">GetDescendantsAndSelf</name><argument_list pos:line="440" pos:column="93">&lt;<argument><name pos:line="440" pos:column="94">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="440" pos:column="105">()</argument_list></call><op:operator pos:line="440" pos:column="107">.</op:operator><call><name pos:line="440" pos:column="108">FirstOrDefault</name><argument_list pos:line="440" pos:column="122">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="441" pos:column="13">Assert</name><op:operator pos:line="441" pos:column="19">.</op:operator><name pos:line="441" pos:column="20">IsNotNull</name></name><argument_list pos:line="441" pos:column="29">(<argument><expr><name pos:line="441" pos:column="30">containsCall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="442" pos:column="13">Assert</name><op:operator pos:line="442" pos:column="19">.</op:operator><name pos:line="442" pos:column="20">AreSame</name></name><argument_list pos:line="442" pos:column="27">(<argument><expr><name pos:line="442" pos:column="28">bDotContains</name></expr></argument>, <argument><expr><call><name><name pos:line="442" pos:column="42">containsCall</name><op:operator pos:line="442" pos:column="54">.</op:operator><name pos:line="442" pos:column="55">FindMatches</name></name><argument_list pos:line="442" pos:column="66">()</argument_list></call><op:operator pos:line="442" pos:column="68">.</op:operator><call><name pos:line="442" pos:column="69">First</name><argument_list pos:line="442" pos:column="74">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="443" pos:column="13">Assert</name><op:operator pos:line="443" pos:column="19">.</op:operator><name pos:line="443" pos:column="20">AreNotSame</name></name><argument_list pos:line="443" pos:column="30">(<argument><expr><name pos:line="443" pos:column="31">aDotContains</name></expr></argument>, <argument><expr><call><name><name pos:line="443" pos:column="45">containsCall</name><op:operator pos:line="443" pos:column="57">.</op:operator><name pos:line="443" pos:column="58">FindMatches</name></name><argument_list pos:line="443" pos:column="69">()</argument_list></call><op:operator pos:line="443" pos:column="71">.</op:operator><call><name pos:line="443" pos:column="72">First</name><argument_list pos:line="443" pos:column="77">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="446" pos:column="9">[<expr><name pos:line="446" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="447" pos:column="9">public</specifier> <name pos:line="447" pos:column="16">void</name></type> <name pos:line="447" pos:column="21">TestMethodCallCreation_WithThisKeyword</name><parameter_list pos:line="447" pos:column="59">()</parameter_list> <block pos:line="447" pos:column="62">{
            <comment type="line" pos:line="448" pos:column="13">//class A {</comment>
            <comment type="line" pos:line="449" pos:column="13">//    void Bar() { }</comment>
            <comment type="line" pos:line="450" pos:column="13">//    class B {</comment>
            <comment type="line" pos:line="451" pos:column="13">//        int a;</comment>
            <comment type="line" pos:line="452" pos:column="13">//        void Foo() { this.Bar(); }</comment>
            <comment type="line" pos:line="453" pos:column="13">//        void Bar() { return this.a; }</comment>
            <comment type="line" pos:line="454" pos:column="13">//    }</comment>
            <comment type="line" pos:line="455" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="456" pos:column="13">string</name></type> <name pos:line="456" pos:column="20">a_xml</name> <init pos:line="456" pos:column="26">= <expr><lit:literal type="string" pos:line="456" pos:column="28">@"&lt;class&gt;class &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{
    &lt;function&gt;&lt;type&gt;&lt;name&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Bar&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/function&gt;
    &lt;class&gt;class &lt;name&gt;B&lt;/name&gt; &lt;block&gt;{
        &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;a&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
        &lt;function&gt;&lt;type&gt;&lt;name&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;&lt;name&gt;this&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;Bar&lt;/name&gt;&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt; }&lt;/block&gt;&lt;/function&gt;
        &lt;function&gt;&lt;type&gt;&lt;name&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Bar&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;return&gt;return &lt;expr&gt;&lt;name&gt;this&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;a&lt;/name&gt;&lt;/expr&gt;;&lt;/return&gt; }&lt;/block&gt;&lt;/function&gt;
    }&lt;/block&gt;&lt;/class&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="465" pos:column="13">var</name></type> <name pos:line="465" pos:column="17">fileUnit</name> <init pos:line="465" pos:column="26">= <expr><call><name><name pos:line="465" pos:column="28">fileSetup</name><op:operator pos:line="465" pos:column="37">.</op:operator><name pos:line="465" pos:column="38">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="465" pos:column="62">(<argument><expr><name pos:line="465" pos:column="63">a_xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="465" pos:column="70">"A.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="466" pos:column="13">var</name></type> <name pos:line="466" pos:column="17">globalScope</name> <init pos:line="466" pos:column="29">= <expr><call><name><name pos:line="466" pos:column="31">codeParser</name><op:operator pos:line="466" pos:column="41">.</op:operator><name pos:line="466" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="466" pos:column="55">(<argument><expr><name pos:line="466" pos:column="56">fileUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="468" pos:column="13">var</name></type> <name pos:line="468" pos:column="17">aDotBar</name> <init pos:line="468" pos:column="25">= <expr><call><name><name pos:line="468" pos:column="27">globalScope</name><op:operator pos:line="468" pos:column="38">.</op:operator><name><name pos:line="468" pos:column="39">GetDescendants</name><argument_list pos:line="468" pos:column="53">&lt;<argument><name pos:line="468" pos:column="54">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="468" pos:column="71">()</argument_list></call><op:operator pos:line="468" pos:column="73">.</op:operator><call><name pos:line="468" pos:column="74">FirstOrDefault</name><argument_list pos:line="468" pos:column="88">(<argument><expr><lambda><name pos:line="468" pos:column="89">m</name> <op:operator pos:line="468" pos:column="91">=&gt;</op:operator> <name><name pos:line="468" pos:column="94">m</name><op:operator pos:line="468" pos:column="95">.</op:operator><name pos:line="468" pos:column="96">Name</name></name> <op:operator pos:line="468" pos:column="101">==</op:operator> <lit:literal type="string" pos:line="468" pos:column="104">"Bar"</lit:literal> <op:operator pos:line="468" pos:column="110">&amp;&amp;</op:operator> <op:operator pos:line="468" pos:column="113">(</op:operator><op:operator pos:line="468" pos:column="114">(</op:operator><name pos:line="468" pos:column="115">TypeDefinition</name><op:operator pos:line="468" pos:column="129">)</op:operator><name><name pos:line="468" pos:column="130">m</name><op:operator pos:line="468" pos:column="131">.</op:operator><name pos:line="468" pos:column="132">ParentStatement</name></name><op:operator pos:line="468" pos:column="147">)</op:operator><op:operator pos:line="468" pos:column="148">.</op:operator><name pos:line="468" pos:column="149">Name</name> <op:operator pos:line="468" pos:column="154">==</op:operator> <lit:literal type="string" pos:line="468" pos:column="157">"A"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="469" pos:column="13">Assert</name><op:operator pos:line="469" pos:column="19">.</op:operator><name pos:line="469" pos:column="20">IsNotNull</name></name><argument_list pos:line="469" pos:column="29">(<argument><expr><name pos:line="469" pos:column="30">aDotBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="470" pos:column="13">var</name></type> <name pos:line="470" pos:column="17">aDotBDotFoo</name> <init pos:line="470" pos:column="29">= <expr><call><name><name pos:line="470" pos:column="31">globalScope</name><op:operator pos:line="470" pos:column="42">.</op:operator><name><name pos:line="470" pos:column="43">GetDescendants</name><argument_list pos:line="470" pos:column="57">&lt;<argument><name pos:line="470" pos:column="58">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="470" pos:column="75">()</argument_list></call><op:operator pos:line="470" pos:column="77">.</op:operator><call><name pos:line="470" pos:column="78">FirstOrDefault</name><argument_list pos:line="470" pos:column="92">(<argument><expr><lambda><name pos:line="470" pos:column="93">m</name> <op:operator pos:line="470" pos:column="95">=&gt;</op:operator> <name><name pos:line="470" pos:column="98">m</name><op:operator pos:line="470" pos:column="99">.</op:operator><name pos:line="470" pos:column="100">Name</name></name> <op:operator pos:line="470" pos:column="105">==</op:operator> <lit:literal type="string" pos:line="470" pos:column="108">"Foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="471" pos:column="13">Assert</name><op:operator pos:line="471" pos:column="19">.</op:operator><name pos:line="471" pos:column="20">IsNotNull</name></name><argument_list pos:line="471" pos:column="29">(<argument><expr><name pos:line="471" pos:column="30">aDotBDotFoo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="472" pos:column="13">var</name></type> <name pos:line="472" pos:column="17">aDotBDotBar</name> <init pos:line="472" pos:column="29">= <expr><call><name><name pos:line="472" pos:column="31">globalScope</name><op:operator pos:line="472" pos:column="42">.</op:operator><name><name pos:line="472" pos:column="43">GetDescendants</name><argument_list pos:line="472" pos:column="57">&lt;<argument><name pos:line="472" pos:column="58">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="472" pos:column="75">()</argument_list></call><op:operator pos:line="472" pos:column="77">.</op:operator><call><name pos:line="472" pos:column="78">FirstOrDefault</name><argument_list pos:line="472" pos:column="92">(<argument><expr><lambda><name pos:line="472" pos:column="93">m</name> <op:operator pos:line="472" pos:column="95">=&gt;</op:operator> <name><name pos:line="472" pos:column="98">m</name><op:operator pos:line="472" pos:column="99">.</op:operator><name pos:line="472" pos:column="100">Name</name></name> <op:operator pos:line="472" pos:column="105">==</op:operator> <lit:literal type="string" pos:line="472" pos:column="108">"Bar"</lit:literal> <op:operator pos:line="472" pos:column="114">&amp;&amp;</op:operator> <op:operator pos:line="472" pos:column="117">(</op:operator><op:operator pos:line="472" pos:column="118">(</op:operator><name pos:line="472" pos:column="119">TypeDefinition</name><op:operator pos:line="472" pos:column="133">)</op:operator><name><name pos:line="472" pos:column="134">m</name><op:operator pos:line="472" pos:column="135">.</op:operator><name pos:line="472" pos:column="136">ParentStatement</name></name><op:operator pos:line="472" pos:column="151">)</op:operator><op:operator pos:line="472" pos:column="152">.</op:operator><name pos:line="472" pos:column="153">Name</name> <op:operator pos:line="472" pos:column="158">==</op:operator> <lit:literal type="string" pos:line="472" pos:column="161">"B"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="473" pos:column="13">Assert</name><op:operator pos:line="473" pos:column="19">.</op:operator><name pos:line="473" pos:column="20">IsNotNull</name></name><argument_list pos:line="473" pos:column="29">(<argument><expr><name pos:line="473" pos:column="30">aDotBDotBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="475" pos:column="13">Assert</name><op:operator pos:line="475" pos:column="19">.</op:operator><name pos:line="475" pos:column="20">AreEqual</name></name><argument_list pos:line="475" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="475" pos:column="29">"A.Bar"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="475" pos:column="38">aDotBar</name><op:operator pos:line="475" pos:column="45">.</op:operator><name pos:line="475" pos:column="46">GetFullName</name></name><argument_list pos:line="475" pos:column="57">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="476" pos:column="13">Assert</name><op:operator pos:line="476" pos:column="19">.</op:operator><name pos:line="476" pos:column="20">AreEqual</name></name><argument_list pos:line="476" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="476" pos:column="29">"A.B.Foo"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="476" pos:column="40">aDotBDotFoo</name><op:operator pos:line="476" pos:column="51">.</op:operator><name pos:line="476" pos:column="52">GetFullName</name></name><argument_list pos:line="476" pos:column="63">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="477" pos:column="13">Assert</name><op:operator pos:line="477" pos:column="19">.</op:operator><name pos:line="477" pos:column="20">AreEqual</name></name><argument_list pos:line="477" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="477" pos:column="29">"A.B.Bar"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="477" pos:column="40">aDotBDotBar</name><op:operator pos:line="477" pos:column="51">.</op:operator><name pos:line="477" pos:column="52">GetFullName</name></name><argument_list pos:line="477" pos:column="63">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="479" pos:column="13">Assert</name><op:operator pos:line="479" pos:column="19">.</op:operator><name pos:line="479" pos:column="20">AreEqual</name></name><argument_list pos:line="479" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="479" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="479" pos:column="32">aDotBDotFoo</name><op:operator pos:line="479" pos:column="43">.</op:operator><name pos:line="479" pos:column="44">ChildStatements</name><op:operator pos:line="479" pos:column="59">.</op:operator><name pos:line="479" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="480" pos:column="13">var</name></type> <name pos:line="480" pos:column="17">barCall</name> <init pos:line="480" pos:column="25">= <expr><name><name pos:line="480" pos:column="27">aDotBDotFoo</name><op:operator pos:line="480" pos:column="38">.</op:operator><name pos:line="480" pos:column="39">ChildStatements</name><index pos:line="480" pos:column="54">[<expr><lit:literal type="number" pos:line="480" pos:column="55">0</lit:literal></expr>]</index></name><op:operator pos:line="480" pos:column="57">.</op:operator><call><name><name pos:line="480" pos:column="58">Content</name><op:operator pos:line="480" pos:column="65">.</op:operator><name><name pos:line="480" pos:column="66">GetDescendantsAndSelf</name><argument_list pos:line="480" pos:column="87">&lt;<argument><name pos:line="480" pos:column="88">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="480" pos:column="99">()</argument_list></call><op:operator pos:line="480" pos:column="101">.</op:operator><call><name pos:line="480" pos:column="102">FirstOrDefault</name><argument_list pos:line="480" pos:column="116">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="481" pos:column="13">Assert</name><op:operator pos:line="481" pos:column="19">.</op:operator><name pos:line="481" pos:column="20">IsNotNull</name></name><argument_list pos:line="481" pos:column="29">(<argument><expr><name pos:line="481" pos:column="30">barCall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="482" pos:column="13">var</name></type> <name pos:line="482" pos:column="17">matches</name> <init pos:line="482" pos:column="25">= <expr><call><name><name pos:line="482" pos:column="27">barCall</name><op:operator pos:line="482" pos:column="34">.</op:operator><name pos:line="482" pos:column="35">FindMatches</name></name><argument_list pos:line="482" pos:column="46">()</argument_list></call><op:operator pos:line="482" pos:column="48">.</op:operator><call><name pos:line="482" pos:column="49">ToList</name><argument_list pos:line="482" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="483" pos:column="13">Assert</name><op:operator pos:line="483" pos:column="19">.</op:operator><name pos:line="483" pos:column="20">AreEqual</name></name><argument_list pos:line="483" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="483" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="483" pos:column="32">matches</name><op:operator pos:line="483" pos:column="39">.</op:operator><name pos:line="483" pos:column="40">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="484" pos:column="13">Assert</name><op:operator pos:line="484" pos:column="19">.</op:operator><name pos:line="484" pos:column="20">AreSame</name></name><argument_list pos:line="484" pos:column="27">(<argument><expr><name pos:line="484" pos:column="28">aDotBDotBar</name></expr></argument>, <argument><expr><call><name><name pos:line="484" pos:column="41">matches</name><op:operator pos:line="484" pos:column="48">.</op:operator><name pos:line="484" pos:column="49">First</name></name><argument_list pos:line="484" pos:column="54">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="487" pos:column="9">[<expr><name pos:line="487" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="488" pos:column="9">public</specifier> <name pos:line="488" pos:column="16">void</name></type> <name pos:line="488" pos:column="21">TestMethodCallCreation_WithSuperKeyword</name><parameter_list pos:line="488" pos:column="60">()</parameter_list> <block pos:line="488" pos:column="63">{
            <comment type="line" pos:line="489" pos:column="13">//class B {</comment>
            <comment type="line" pos:line="490" pos:column="13">//  public void Foo() { } </comment>
            <comment type="line" pos:line="491" pos:column="13">//}</comment>
            <comment type="line" pos:line="492" pos:column="13">//class C extends B { </comment>
            <comment type="line" pos:line="493" pos:column="13">//  public void Foo() { }</comment>
            <comment type="line" pos:line="494" pos:column="13">//  public void Bar() { </comment>
            <comment type="line" pos:line="495" pos:column="13">//    super.Foo(); </comment>
            <comment type="line" pos:line="496" pos:column="13">//  }</comment>
            <comment type="line" pos:line="497" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="498" pos:column="13">string</name></type> <name pos:line="498" pos:column="20">xml</name> <init pos:line="498" pos:column="24">= <expr><lit:literal type="string" pos:line="498" pos:column="26">@"&lt;class&gt;class &lt;name&gt;B&lt;/name&gt; &lt;block&gt;{
  &lt;function&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/function&gt; 
}&lt;/block&gt;&lt;/class&gt;
&lt;class&gt;class &lt;name&gt;C&lt;/name&gt; &lt;super&gt;&lt;extends&gt;extends &lt;name&gt;B&lt;/name&gt;&lt;/extends&gt;&lt;/super&gt; &lt;block&gt;{ 
  &lt;function&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/function&gt;
  &lt;function&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Bar&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ 
    &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;&lt;name&gt;super&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt; 
  }&lt;/block&gt;&lt;/function&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="507" pos:column="13">var</name></type> <name pos:line="507" pos:column="17">xmlElement</name> <init pos:line="507" pos:column="28">= <expr><call><name><name pos:line="507" pos:column="30">fileSetup</name><op:operator pos:line="507" pos:column="39">.</op:operator><name pos:line="507" pos:column="40">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="507" pos:column="64">(<argument><expr><name pos:line="507" pos:column="65">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="507" pos:column="70">"A.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="509" pos:column="13">var</name></type> <name pos:line="509" pos:column="17">globalScope</name> <init pos:line="509" pos:column="29">= <expr><call><name><name pos:line="509" pos:column="31">codeParser</name><op:operator pos:line="509" pos:column="41">.</op:operator><name pos:line="509" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="509" pos:column="55">(<argument><expr><name pos:line="509" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="510" pos:column="13">Assert</name><op:operator pos:line="510" pos:column="19">.</op:operator><name pos:line="510" pos:column="20">AreEqual</name></name><argument_list pos:line="510" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="510" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="510" pos:column="32">globalScope</name><op:operator pos:line="510" pos:column="43">.</op:operator><name pos:line="510" pos:column="44">ChildStatements</name><op:operator pos:line="510" pos:column="59">.</op:operator><name pos:line="510" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="512" pos:column="13">var</name></type> <name pos:line="512" pos:column="17">fooMethods</name> <init pos:line="512" pos:column="28">= <expr><call><name><name pos:line="512" pos:column="30">globalScope</name><op:operator pos:line="512" pos:column="41">.</op:operator><name><name pos:line="512" pos:column="42">GetDescendants</name><argument_list pos:line="512" pos:column="56">&lt;<argument><name pos:line="512" pos:column="57">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="512" pos:column="74">()</argument_list></call><op:operator pos:line="512" pos:column="76">.</op:operator><call><name pos:line="512" pos:column="77">ToList</name><argument_list pos:line="512" pos:column="83">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="514" pos:column="13">var</name></type> <name pos:line="514" pos:column="17">bDotFoo</name> <init pos:line="514" pos:column="25">= <expr><call><name><name pos:line="514" pos:column="27">fooMethods</name><op:operator pos:line="514" pos:column="37">.</op:operator><name pos:line="514" pos:column="38">FirstOrDefault</name></name><argument_list pos:line="514" pos:column="52">(<argument><expr><lambda><name pos:line="514" pos:column="53">m</name> <op:operator pos:line="514" pos:column="55">=&gt;</op:operator> <call><name><name pos:line="514" pos:column="58">m</name><op:operator pos:line="514" pos:column="59">.</op:operator><name><name pos:line="514" pos:column="60">GetAncestors</name><argument_list pos:line="514" pos:column="72">&lt;<argument><name pos:line="514" pos:column="73">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="514" pos:column="88">()</argument_list></call><op:operator pos:line="514" pos:column="90">.</op:operator><call><name pos:line="514" pos:column="91">FirstOrDefault</name><argument_list pos:line="514" pos:column="105">()</argument_list></call><op:operator pos:line="514" pos:column="107">.</op:operator><name pos:line="514" pos:column="108">Name</name> <op:operator pos:line="514" pos:column="113">==</op:operator> <lit:literal type="string" pos:line="514" pos:column="116">"B"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="515" pos:column="13">Assert</name><op:operator pos:line="515" pos:column="19">.</op:operator><name pos:line="515" pos:column="20">IsNotNull</name></name><argument_list pos:line="515" pos:column="29">(<argument><expr><name pos:line="515" pos:column="30">bDotFoo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="516" pos:column="13">var</name></type> <name pos:line="516" pos:column="17">cDotFoo</name> <init pos:line="516" pos:column="25">= <expr><call><name><name pos:line="516" pos:column="27">fooMethods</name><op:operator pos:line="516" pos:column="37">.</op:operator><name pos:line="516" pos:column="38">FirstOrDefault</name></name><argument_list pos:line="516" pos:column="52">(<argument><expr><lambda><name pos:line="516" pos:column="53">m</name> <op:operator pos:line="516" pos:column="55">=&gt;</op:operator> <call><name><name pos:line="516" pos:column="58">m</name><op:operator pos:line="516" pos:column="59">.</op:operator><name><name pos:line="516" pos:column="60">GetAncestors</name><argument_list pos:line="516" pos:column="72">&lt;<argument><name pos:line="516" pos:column="73">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="516" pos:column="88">()</argument_list></call><op:operator pos:line="516" pos:column="90">.</op:operator><call><name pos:line="516" pos:column="91">FirstOrDefault</name><argument_list pos:line="516" pos:column="105">()</argument_list></call><op:operator pos:line="516" pos:column="107">.</op:operator><name pos:line="516" pos:column="108">Name</name> <op:operator pos:line="516" pos:column="113">==</op:operator> <lit:literal type="string" pos:line="516" pos:column="116">"C"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="517" pos:column="13">Assert</name><op:operator pos:line="517" pos:column="19">.</op:operator><name pos:line="517" pos:column="20">IsNotNull</name></name><argument_list pos:line="517" pos:column="29">(<argument><expr><name pos:line="517" pos:column="30">cDotFoo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="519" pos:column="13">var</name></type> <name pos:line="519" pos:column="17">bar</name> <init pos:line="519" pos:column="21">= <expr><call><name><name pos:line="519" pos:column="23">globalScope</name><op:operator pos:line="519" pos:column="34">.</op:operator><name><name pos:line="519" pos:column="35">GetDescendants</name><argument_list pos:line="519" pos:column="49">&lt;<argument><name pos:line="519" pos:column="50">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="519" pos:column="67">()</argument_list></call><op:operator pos:line="519" pos:column="69">.</op:operator><call><name pos:line="519" pos:column="70">FirstOrDefault</name><argument_list pos:line="519" pos:column="84">(<argument><expr><lambda><name pos:line="519" pos:column="85">md</name> <op:operator pos:line="519" pos:column="88">=&gt;</op:operator> <name><name pos:line="519" pos:column="91">md</name><op:operator pos:line="519" pos:column="93">.</op:operator><name pos:line="519" pos:column="94">Name</name></name> <op:operator pos:line="519" pos:column="99">==</op:operator> <lit:literal type="string" pos:line="519" pos:column="102">"Bar"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="520" pos:column="13">Assert</name><op:operator pos:line="520" pos:column="19">.</op:operator><name pos:line="520" pos:column="20">IsNotNull</name></name><argument_list pos:line="520" pos:column="29">(<argument><expr><name pos:line="520" pos:column="30">bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="521" pos:column="13">Assert</name><op:operator pos:line="521" pos:column="19">.</op:operator><name pos:line="521" pos:column="20">AreEqual</name></name><argument_list pos:line="521" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="521" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="521" pos:column="32">bar</name><op:operator pos:line="521" pos:column="35">.</op:operator><name pos:line="521" pos:column="36">ChildStatements</name><op:operator pos:line="521" pos:column="51">.</op:operator><name pos:line="521" pos:column="52">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="522" pos:column="13">var</name></type> <name pos:line="522" pos:column="17">methodCall</name> <init pos:line="522" pos:column="28">= <expr><name><name pos:line="522" pos:column="30">bar</name><op:operator pos:line="522" pos:column="33">.</op:operator><name pos:line="522" pos:column="34">ChildStatements</name><index pos:line="522" pos:column="49">[<expr><lit:literal type="number" pos:line="522" pos:column="50">0</lit:literal></expr>]</index></name><op:operator pos:line="522" pos:column="52">.</op:operator><call><name><name pos:line="522" pos:column="53">Content</name><op:operator pos:line="522" pos:column="60">.</op:operator><name><name pos:line="522" pos:column="61">GetDescendantsAndSelf</name><argument_list pos:line="522" pos:column="82">&lt;<argument><name pos:line="522" pos:column="83">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="522" pos:column="94">()</argument_list></call><op:operator pos:line="522" pos:column="96">.</op:operator><call><name pos:line="522" pos:column="97">FirstOrDefault</name><argument_list pos:line="522" pos:column="111">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="523" pos:column="13">Assert</name><op:operator pos:line="523" pos:column="19">.</op:operator><name pos:line="523" pos:column="20">IsNotNull</name></name><argument_list pos:line="523" pos:column="29">(<argument><expr><name pos:line="523" pos:column="30">methodCall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="524" pos:column="13">Assert</name><op:operator pos:line="524" pos:column="19">.</op:operator><name pos:line="524" pos:column="20">AreSame</name></name><argument_list pos:line="524" pos:column="27">(<argument><expr><name pos:line="524" pos:column="28">bDotFoo</name></expr></argument>, <argument><expr><call><name><name pos:line="524" pos:column="37">methodCall</name><op:operator pos:line="524" pos:column="47">.</op:operator><name pos:line="524" pos:column="48">FindMatches</name></name><argument_list pos:line="524" pos:column="59">()</argument_list></call><op:operator pos:line="524" pos:column="61">.</op:operator><call><name pos:line="524" pos:column="62">FirstOrDefault</name><argument_list pos:line="524" pos:column="76">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="527" pos:column="9">[<expr><name pos:line="527" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="528" pos:column="9">public</specifier> <name pos:line="528" pos:column="16">void</name></type> <name pos:line="528" pos:column="21">TestMethodCallCreation_SuperConstructor</name><parameter_list pos:line="528" pos:column="60">()</parameter_list> <block pos:line="528" pos:column="63">{
            <comment type="line" pos:line="529" pos:column="13">//class B {</comment>
            <comment type="line" pos:line="530" pos:column="13">//  public B(int num) { }</comment>
            <comment type="line" pos:line="531" pos:column="13">//}</comment>
            <comment type="line" pos:line="532" pos:column="13">//class C extends B { </comment>
            <comment type="line" pos:line="533" pos:column="13">//  public C() {</comment>
            <comment type="line" pos:line="534" pos:column="13">//    super(17);</comment>
            <comment type="line" pos:line="535" pos:column="13">//  }</comment>
            <comment type="line" pos:line="536" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="537" pos:column="13">string</name></type> <name pos:line="537" pos:column="20">xml</name> <init pos:line="537" pos:column="24">= <expr><lit:literal type="string" pos:line="537" pos:column="26">@"&lt;class&gt;class &lt;name&gt;B&lt;/name&gt; &lt;block&gt;{
  &lt;constructor&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;B&lt;/name&gt;&lt;parameter_list&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;num&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/constructor&gt;
}&lt;/block&gt;&lt;/class&gt;
&lt;class&gt;class &lt;name&gt;C&lt;/name&gt; &lt;super&gt;&lt;extends&gt;extends &lt;name&gt;B&lt;/name&gt;&lt;/extends&gt;&lt;/super&gt; &lt;block&gt;{ 
  &lt;constructor&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;C&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{
    &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;super&lt;/name&gt;&lt;argument_list&gt;(&lt;argument&gt;&lt;expr&gt;&lt;lit:literal type=""number&gt;17&lt;/lit:literal&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
  }&lt;/block&gt;&lt;/constructor&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="545" pos:column="13">var</name></type> <name pos:line="545" pos:column="17">xmlElement</name> <init pos:line="545" pos:column="28">= <expr><call><name><name pos:line="545" pos:column="30">fileSetup</name><op:operator pos:line="545" pos:column="39">.</op:operator><name pos:line="545" pos:column="40">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="545" pos:column="64">(<argument><expr><name pos:line="545" pos:column="65">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="545" pos:column="70">"A.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="547" pos:column="13">var</name></type> <name pos:line="547" pos:column="17">globalScope</name> <init pos:line="547" pos:column="29">= <expr><call><name><name pos:line="547" pos:column="31">codeParser</name><op:operator pos:line="547" pos:column="41">.</op:operator><name pos:line="547" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="547" pos:column="55">(<argument><expr><name pos:line="547" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="548" pos:column="13">Assert</name><op:operator pos:line="548" pos:column="19">.</op:operator><name pos:line="548" pos:column="20">AreEqual</name></name><argument_list pos:line="548" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="548" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="548" pos:column="32">globalScope</name><op:operator pos:line="548" pos:column="43">.</op:operator><name pos:line="548" pos:column="44">ChildStatements</name><op:operator pos:line="548" pos:column="59">.</op:operator><name pos:line="548" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="550" pos:column="13">var</name></type> <name pos:line="550" pos:column="17">bConstructor</name> <init pos:line="550" pos:column="30">= <expr><call><name><name pos:line="550" pos:column="32">globalScope</name><op:operator pos:line="550" pos:column="43">.</op:operator><name><name pos:line="550" pos:column="44">GetDescendants</name><argument_list pos:line="550" pos:column="58">&lt;<argument><name pos:line="550" pos:column="59">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="550" pos:column="76">()</argument_list></call><op:operator pos:line="550" pos:column="78">.</op:operator><call><name pos:line="550" pos:column="79">FirstOrDefault</name><argument_list pos:line="550" pos:column="93">(<argument><expr><lambda><name pos:line="550" pos:column="94">m</name> <op:operator pos:line="550" pos:column="96">=&gt;</op:operator> <name><name pos:line="550" pos:column="99">m</name><op:operator pos:line="550" pos:column="100">.</op:operator><name pos:line="550" pos:column="101">Name</name></name> <op:operator pos:line="550" pos:column="106">==</op:operator> <lit:literal type="string" pos:line="550" pos:column="109">"B"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="551" pos:column="13">Assert</name><op:operator pos:line="551" pos:column="19">.</op:operator><name pos:line="551" pos:column="20">IsNotNull</name></name><argument_list pos:line="551" pos:column="29">(<argument><expr><name pos:line="551" pos:column="30">bConstructor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="552" pos:column="13">var</name></type> <name pos:line="552" pos:column="17">cConstructor</name> <init pos:line="552" pos:column="30">= <expr><call><name><name pos:line="552" pos:column="32">globalScope</name><op:operator pos:line="552" pos:column="43">.</op:operator><name><name pos:line="552" pos:column="44">GetDescendants</name><argument_list pos:line="552" pos:column="58">&lt;<argument><name pos:line="552" pos:column="59">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="552" pos:column="76">()</argument_list></call><op:operator pos:line="552" pos:column="78">.</op:operator><call><name pos:line="552" pos:column="79">FirstOrDefault</name><argument_list pos:line="552" pos:column="93">(<argument><expr><lambda><name pos:line="552" pos:column="94">m</name> <op:operator pos:line="552" pos:column="96">=&gt;</op:operator> <name><name pos:line="552" pos:column="99">m</name><op:operator pos:line="552" pos:column="100">.</op:operator><name pos:line="552" pos:column="101">Name</name></name> <op:operator pos:line="552" pos:column="106">==</op:operator> <lit:literal type="string" pos:line="552" pos:column="109">"C"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="553" pos:column="13">Assert</name><op:operator pos:line="553" pos:column="19">.</op:operator><name pos:line="553" pos:column="20">IsNotNull</name></name><argument_list pos:line="553" pos:column="29">(<argument><expr><name pos:line="553" pos:column="30">cConstructor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <expr_stmt><expr><call><name><name pos:line="555" pos:column="13">Assert</name><op:operator pos:line="555" pos:column="19">.</op:operator><name pos:line="555" pos:column="20">AreEqual</name></name><argument_list pos:line="555" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="555" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="555" pos:column="32">cConstructor</name><op:operator pos:line="555" pos:column="44">.</op:operator><name pos:line="555" pos:column="45">ChildStatements</name><op:operator pos:line="555" pos:column="60">.</op:operator><name pos:line="555" pos:column="61">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="556" pos:column="13">var</name></type> <name pos:line="556" pos:column="17">superCall</name> <init pos:line="556" pos:column="27">= <expr><name><name pos:line="556" pos:column="29">cConstructor</name><op:operator pos:line="556" pos:column="41">.</op:operator><name pos:line="556" pos:column="42">ChildStatements</name><index pos:line="556" pos:column="57">[<expr><lit:literal type="number" pos:line="556" pos:column="58">0</lit:literal></expr>]</index></name><op:operator pos:line="556" pos:column="60">.</op:operator><call><name><name pos:line="556" pos:column="61">Content</name><op:operator pos:line="556" pos:column="68">.</op:operator><name><name pos:line="556" pos:column="69">GetDescendantsAndSelf</name><argument_list pos:line="556" pos:column="90">&lt;<argument><name pos:line="556" pos:column="91">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="556" pos:column="102">()</argument_list></call><op:operator pos:line="556" pos:column="104">.</op:operator><call><name pos:line="556" pos:column="105">FirstOrDefault</name><argument_list pos:line="556" pos:column="119">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="557" pos:column="13">Assert</name><op:operator pos:line="557" pos:column="19">.</op:operator><name pos:line="557" pos:column="20">IsNotNull</name></name><argument_list pos:line="557" pos:column="29">(<argument><expr><name pos:line="557" pos:column="30">superCall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="558" pos:column="13">Assert</name><op:operator pos:line="558" pos:column="19">.</op:operator><name pos:line="558" pos:column="20">IsTrue</name></name><argument_list pos:line="558" pos:column="26">(<argument><expr><name><name pos:line="558" pos:column="27">superCall</name><op:operator pos:line="558" pos:column="36">.</op:operator><name pos:line="558" pos:column="37">IsConstructor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="559" pos:column="13">Assert</name><op:operator pos:line="559" pos:column="19">.</op:operator><name pos:line="559" pos:column="20">AreSame</name></name><argument_list pos:line="559" pos:column="27">(<argument><expr><name pos:line="559" pos:column="28">bConstructor</name></expr></argument>, <argument><expr><call><name><name pos:line="559" pos:column="42">superCall</name><op:operator pos:line="559" pos:column="51">.</op:operator><name pos:line="559" pos:column="52">FindMatches</name></name><argument_list pos:line="559" pos:column="63">()</argument_list></call><op:operator pos:line="559" pos:column="65">.</op:operator><call><name pos:line="559" pos:column="66">FirstOrDefault</name><argument_list pos:line="559" pos:column="80">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="562" pos:column="9">[<expr><name pos:line="562" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="563" pos:column="9">public</specifier> <name pos:line="563" pos:column="16">void</name></type> <name pos:line="563" pos:column="21">TestMethodCallCreation_ConstructorFromOtherNamespace</name><parameter_list pos:line="563" pos:column="73">()</parameter_list> <block pos:line="563" pos:column="76">{
            <comment type="line" pos:line="564" pos:column="13">//package A.B;</comment>
            <comment type="line" pos:line="565" pos:column="13">//class C {</comment>
            <comment type="line" pos:line="566" pos:column="13">//	public C() { }</comment>
            <comment type="line" pos:line="567" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="568" pos:column="13">string</name></type> <name pos:line="568" pos:column="20">c_xml</name> <init pos:line="568" pos:column="26">= <expr><lit:literal type="string" pos:line="568" pos:column="28">@"&lt;package&gt;package &lt;name&gt;A&lt;/name&gt;.&lt;name&gt;B&lt;/name&gt;;&lt;/package&gt;
&lt;class&gt;class &lt;name&gt;C&lt;/name&gt; &lt;block&gt;{
	&lt;constructor&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;C&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/constructor&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="573" pos:column="13">//package A.D;</comment>
            <comment type="line" pos:line="574" pos:column="13">//import A.B.*;</comment>
            <comment type="line" pos:line="575" pos:column="13">//class E {</comment>
            <comment type="line" pos:line="576" pos:column="13">//	public void main() {</comment>
            <comment type="line" pos:line="577" pos:column="13">//		C c = new C();</comment>
            <comment type="line" pos:line="578" pos:column="13">//	}</comment>
            <comment type="line" pos:line="579" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="580" pos:column="13">string</name></type> <name pos:line="580" pos:column="20">e_xml</name> <init pos:line="580" pos:column="26">= <expr><lit:literal type="string" pos:line="580" pos:column="28">@"&lt;package&gt;package &lt;name&gt;A&lt;/name&gt;.&lt;name&gt;D&lt;/name&gt;;&lt;/package&gt;
&lt;import&gt;import &lt;name&gt;A&lt;/name&gt;.&lt;name&gt;B&lt;/name&gt;.*;&lt;/import&gt;
&lt;class&gt;class &lt;name&gt;E&lt;/name&gt; &lt;block&gt;{
	&lt;function&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;name&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name&gt;main&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{
		&lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;C&lt;/name&gt;&lt;/type&gt; &lt;name&gt;c&lt;/name&gt; =&lt;init&gt; &lt;expr&gt;&lt;op:operator&gt;new&lt;/op:operator&gt; &lt;call&gt;&lt;name&gt;C&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;&lt;/init&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
	}&lt;/block&gt;&lt;/function&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="588" pos:column="13">var</name></type> <name pos:line="588" pos:column="17">cUnit</name> <init pos:line="588" pos:column="23">= <expr><call><name><name pos:line="588" pos:column="25">fileSetup</name><op:operator pos:line="588" pos:column="34">.</op:operator><name pos:line="588" pos:column="35">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="588" pos:column="59">(<argument><expr><name pos:line="588" pos:column="60">c_xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="588" pos:column="67">"C.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="589" pos:column="13">var</name></type> <name pos:line="589" pos:column="17">eUnit</name> <init pos:line="589" pos:column="23">= <expr><call><name><name pos:line="589" pos:column="25">fileSetup</name><op:operator pos:line="589" pos:column="34">.</op:operator><name pos:line="589" pos:column="35">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="589" pos:column="59">(<argument><expr><name pos:line="589" pos:column="60">e_xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="589" pos:column="67">"E.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="591" pos:column="13">var</name></type> <name pos:line="591" pos:column="17">cScope</name> <init pos:line="591" pos:column="24">= <expr><call><name><name pos:line="591" pos:column="26">codeParser</name><op:operator pos:line="591" pos:column="36">.</op:operator><name pos:line="591" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="591" pos:column="50">(<argument><expr><name pos:line="591" pos:column="51">cUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="592" pos:column="13">var</name></type> <name pos:line="592" pos:column="17">eScope</name> <init pos:line="592" pos:column="24">= <expr><call><name><name pos:line="592" pos:column="26">codeParser</name><op:operator pos:line="592" pos:column="36">.</op:operator><name pos:line="592" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="592" pos:column="50">(<argument><expr><name pos:line="592" pos:column="51">eUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="594" pos:column="13">var</name></type> <name pos:line="594" pos:column="17">globalScope</name> <init pos:line="594" pos:column="29">= <expr><call><name><name pos:line="594" pos:column="31">cScope</name><op:operator pos:line="594" pos:column="37">.</op:operator><name pos:line="594" pos:column="38">Merge</name></name><argument_list pos:line="594" pos:column="43">(<argument><expr><name pos:line="594" pos:column="44">eScope</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="596" pos:column="13">var</name></type> <name pos:line="596" pos:column="17">typeC</name> <init pos:line="596" pos:column="23">= <expr><op:operator pos:line="596" pos:column="25">(</op:operator><linq><from pos:line="596" pos:column="26">from <expr><name pos:line="596" pos:column="31">typeDefinition</name></expr> <in pos:line="596" pos:column="46">in <expr><call><name><name pos:line="596" pos:column="49">globalScope</name><op:operator pos:line="596" pos:column="60">.</op:operator><name><name pos:line="596" pos:column="61">GetDescendantsAndSelf</name><argument_list pos:line="596" pos:column="82">&lt;<argument><name pos:line="596" pos:column="83">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="596" pos:column="98">()</argument_list></call></expr></in></from>
                         <where pos:line="597" pos:column="26">where <expr><name><name pos:line="597" pos:column="32">typeDefinition</name><op:operator pos:line="597" pos:column="46">.</op:operator><name pos:line="597" pos:column="47">Name</name></name> <op:operator pos:line="597" pos:column="52">==</op:operator> <lit:literal type="string" pos:line="597" pos:column="55">"C"</lit:literal></expr></where>
                         <select pos:line="598" pos:column="26">select <expr><name pos:line="598" pos:column="33">typeDefinition</name></expr></select></linq><op:operator pos:line="598" pos:column="47">)</op:operator><op:operator pos:line="598" pos:column="48">.</op:operator><call><name pos:line="598" pos:column="49">First</name><argument_list pos:line="598" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="600" pos:column="13">var</name></type> <name pos:line="600" pos:column="17">typeE</name> <init pos:line="600" pos:column="23">= <expr><op:operator pos:line="600" pos:column="25">(</op:operator><linq><from pos:line="600" pos:column="26">from <expr><name pos:line="600" pos:column="31">typeDefinition</name></expr> <in pos:line="600" pos:column="46">in <expr><call><name><name pos:line="600" pos:column="49">globalScope</name><op:operator pos:line="600" pos:column="60">.</op:operator><name><name pos:line="600" pos:column="61">GetDescendantsAndSelf</name><argument_list pos:line="600" pos:column="82">&lt;<argument><name pos:line="600" pos:column="83">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="600" pos:column="98">()</argument_list></call></expr></in></from>
                         <where pos:line="601" pos:column="26">where <expr><name><name pos:line="601" pos:column="32">typeDefinition</name><op:operator pos:line="601" pos:column="46">.</op:operator><name pos:line="601" pos:column="47">Name</name></name> <op:operator pos:line="601" pos:column="52">==</op:operator> <lit:literal type="string" pos:line="601" pos:column="55">"E"</lit:literal></expr></where>
                         <select pos:line="602" pos:column="26">select <expr><name pos:line="602" pos:column="33">typeDefinition</name></expr></select></linq><op:operator pos:line="602" pos:column="47">)</op:operator><op:operator pos:line="602" pos:column="48">.</op:operator><call><name pos:line="602" pos:column="49">First</name><argument_list pos:line="602" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="604" pos:column="13">Assert</name><op:operator pos:line="604" pos:column="19">.</op:operator><name pos:line="604" pos:column="20">IsNotNull</name></name><argument_list pos:line="604" pos:column="29">(<argument><expr><name pos:line="604" pos:column="30">typeC</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="604" pos:column="37">"Could not find class C"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="605" pos:column="13">Assert</name><op:operator pos:line="605" pos:column="19">.</op:operator><name pos:line="605" pos:column="20">IsNotNull</name></name><argument_list pos:line="605" pos:column="29">(<argument><expr><name pos:line="605" pos:column="30">typeE</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="605" pos:column="37">"Could not find class E"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="607" pos:column="13">var</name></type> <name pos:line="607" pos:column="17">constructorForC</name> <init pos:line="607" pos:column="33">= <expr><call><name><name pos:line="607" pos:column="35">typeC</name><op:operator pos:line="607" pos:column="40">.</op:operator><name pos:line="607" pos:column="41">ChildStatements</name><op:operator pos:line="607" pos:column="56">.</op:operator><name><name pos:line="607" pos:column="57">OfType</name><argument_list pos:line="607" pos:column="63">&lt;<argument><name pos:line="607" pos:column="64">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="607" pos:column="81">()</argument_list></call><op:operator pos:line="607" pos:column="83">.</op:operator><call><name pos:line="607" pos:column="84">FirstOrDefault</name><argument_list pos:line="607" pos:column="98">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="609" pos:column="13">Assert</name><op:operator pos:line="609" pos:column="19">.</op:operator><name pos:line="609" pos:column="20">IsNotNull</name></name><argument_list pos:line="609" pos:column="29">(<argument><expr><name pos:line="609" pos:column="30">constructorForC</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="609" pos:column="47">"C has no methods"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="610" pos:column="13">Assert</name><op:operator pos:line="610" pos:column="19">.</op:operator><name pos:line="610" pos:column="20">AreEqual</name></name><argument_list pos:line="610" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="610" pos:column="29">"C"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="610" pos:column="34">constructorForC</name><op:operator pos:line="610" pos:column="49">.</op:operator><name pos:line="610" pos:column="50">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="611" pos:column="13">Assert</name><op:operator pos:line="611" pos:column="19">.</op:operator><name pos:line="611" pos:column="20">That</name></name><argument_list pos:line="611" pos:column="24">(<argument><expr><name><name pos:line="611" pos:column="25">constructorForC</name><op:operator pos:line="611" pos:column="40">.</op:operator><name pos:line="611" pos:column="41">IsConstructor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="613" pos:column="13">var</name></type> <name pos:line="613" pos:column="17">eDotMain</name> <init pos:line="613" pos:column="26">= <expr><call><name><name pos:line="613" pos:column="28">typeE</name><op:operator pos:line="613" pos:column="33">.</op:operator><name><name pos:line="613" pos:column="34">GetNamedChildren</name><argument_list pos:line="613" pos:column="50">&lt;<argument><name pos:line="613" pos:column="51">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="613" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="613" pos:column="69">"main"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="613" pos:column="76">.</op:operator><call><name pos:line="613" pos:column="77">FirstOrDefault</name><argument_list pos:line="613" pos:column="91">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="615" pos:column="13">Assert</name><op:operator pos:line="615" pos:column="19">.</op:operator><name pos:line="615" pos:column="20">IsNotNull</name></name><argument_list pos:line="615" pos:column="29">(<argument><expr><name pos:line="615" pos:column="30">eDotMain</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="615" pos:column="40">"could not find main method in E"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="616" pos:column="13">Assert</name><op:operator pos:line="616" pos:column="19">.</op:operator><name pos:line="616" pos:column="20">AreEqual</name></name><argument_list pos:line="616" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="616" pos:column="29">"main"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="616" pos:column="37">eDotMain</name><op:operator pos:line="616" pos:column="45">.</op:operator><name pos:line="616" pos:column="46">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="618" pos:column="13">var</name></type> <name pos:line="618" pos:column="17">callToC</name> <init pos:line="618" pos:column="25">= <expr><op:operator pos:line="618" pos:column="27">(</op:operator><linq><from pos:line="618" pos:column="28">from <expr><name pos:line="618" pos:column="33">stmt</name></expr> <in pos:line="618" pos:column="38">in <expr><call><name><name pos:line="618" pos:column="41">eDotMain</name><op:operator pos:line="618" pos:column="49">.</op:operator><name pos:line="618" pos:column="50">GetDescendants</name></name><argument_list pos:line="618" pos:column="64">()</argument_list></call></expr></in></from>
                           <from pos:line="619" pos:column="28">from <expr><name pos:line="619" pos:column="33">expr</name></expr> <in pos:line="619" pos:column="38">in <expr><call><name><name pos:line="619" pos:column="41">stmt</name><op:operator pos:line="619" pos:column="45">.</op:operator><name pos:line="619" pos:column="46">GetExpressions</name></name><argument_list pos:line="619" pos:column="60">()</argument_list></call></expr></in></from>
                           <from pos:line="620" pos:column="28">from <expr><name pos:line="620" pos:column="33">call</name></expr> <in pos:line="620" pos:column="38">in <expr><call><name><name pos:line="620" pos:column="41">expr</name><op:operator pos:line="620" pos:column="45">.</op:operator><name><name pos:line="620" pos:column="46">GetDescendantsAndSelf</name><argument_list pos:line="620" pos:column="67">&lt;<argument><name pos:line="620" pos:column="68">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="620" pos:column="79">()</argument_list></call></expr></in></from>
                           <select pos:line="621" pos:column="28">select <expr><name pos:line="621" pos:column="35">call</name></expr></select></linq><op:operator pos:line="621" pos:column="39">)</op:operator><op:operator pos:line="621" pos:column="40">.</op:operator><call><name pos:line="621" pos:column="41">FirstOrDefault</name><argument_list pos:line="621" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="622" pos:column="13">Assert</name><op:operator pos:line="622" pos:column="19">.</op:operator><name pos:line="622" pos:column="20">IsNotNull</name></name><argument_list pos:line="622" pos:column="29">(<argument><expr><name pos:line="622" pos:column="30">callToC</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="622" pos:column="39">"main contains no calls"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="623" pos:column="13">Assert</name><op:operator pos:line="623" pos:column="19">.</op:operator><name pos:line="623" pos:column="20">AreEqual</name></name><argument_list pos:line="623" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="623" pos:column="29">"C"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="623" pos:column="34">callToC</name><op:operator pos:line="623" pos:column="41">.</op:operator><name pos:line="623" pos:column="42">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="624" pos:column="13">Assert</name><op:operator pos:line="624" pos:column="19">.</op:operator><name pos:line="624" pos:column="20">That</name></name><argument_list pos:line="624" pos:column="24">(<argument><expr><name><name pos:line="624" pos:column="25">callToC</name><op:operator pos:line="624" pos:column="32">.</op:operator><name pos:line="624" pos:column="33">IsConstructor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="626" pos:column="13">Assert</name><op:operator pos:line="626" pos:column="19">.</op:operator><name pos:line="626" pos:column="20">AreEqual</name></name><argument_list pos:line="626" pos:column="28">(<argument><expr><name pos:line="626" pos:column="29">constructorForC</name></expr></argument>, <argument><expr><call><name><name pos:line="626" pos:column="46">callToC</name><op:operator pos:line="626" pos:column="53">.</op:operator><name pos:line="626" pos:column="54">FindMatches</name></name><argument_list pos:line="626" pos:column="65">()</argument_list></call><op:operator pos:line="626" pos:column="67">.</op:operator><call><name pos:line="626" pos:column="68">FirstOrDefault</name><argument_list pos:line="626" pos:column="82">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        
        <function><type><attribute pos:line="629" pos:column="9">[<expr><name pos:line="629" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="630" pos:column="9">public</specifier> <name pos:line="630" pos:column="16">void</name></type> <name pos:line="630" pos:column="21">TestVariablesWithSpecifiers</name><parameter_list pos:line="630" pos:column="48">()</parameter_list> <block pos:line="630" pos:column="51">{
            <comment type="line" pos:line="631" pos:column="13">//public static int A;</comment>
            <comment type="line" pos:line="632" pos:column="13">//public final int B;</comment>
            <comment type="line" pos:line="633" pos:column="13">//private static final Foo C;</comment>
            <decl_stmt><decl><type><name pos:line="634" pos:column="13">string</name></type> <name pos:line="634" pos:column="20">testXml</name> <init pos:line="634" pos:column="28">= <expr><lit:literal type="string" pos:line="634" pos:column="30">@"&lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;specifier&gt;static&lt;/specifier&gt; &lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;A&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
&lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;specifier&gt;public&lt;/specifier&gt; &lt;specifier&gt;final&lt;/specifier&gt; &lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;B&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
&lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;specifier&gt;private&lt;/specifier&gt; &lt;specifier&gt;static&lt;/specifier&gt; &lt;specifier&gt;final&lt;/specifier&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;/type&gt; &lt;name&gt;C&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="637" pos:column="13">var</name></type> <name pos:line="637" pos:column="17">testUnit</name> <init pos:line="637" pos:column="26">= <expr><call><name><name pos:line="637" pos:column="28">fileSetup</name><op:operator pos:line="637" pos:column="37">.</op:operator><name pos:line="637" pos:column="38">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="637" pos:column="62">(<argument><expr><name pos:line="637" pos:column="63">testXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="637" pos:column="72">"test.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="639" pos:column="13">var</name></type> <name pos:line="639" pos:column="17">globalScope</name> <init pos:line="639" pos:column="29">= <expr><call><name><name pos:line="639" pos:column="31">codeParser</name><op:operator pos:line="639" pos:column="41">.</op:operator><name pos:line="639" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="639" pos:column="55">(<argument><expr><name pos:line="639" pos:column="56">testUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="640" pos:column="13">Assert</name><op:operator pos:line="640" pos:column="19">.</op:operator><name pos:line="640" pos:column="20">AreEqual</name></name><argument_list pos:line="640" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="640" pos:column="29">3</lit:literal></expr></argument>, <argument><expr><name><name pos:line="640" pos:column="32">globalScope</name><op:operator pos:line="640" pos:column="43">.</op:operator><name pos:line="640" pos:column="44">ChildStatements</name><op:operator pos:line="640" pos:column="59">.</op:operator><name pos:line="640" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="642" pos:column="13">var</name></type> <name pos:line="642" pos:column="17">declA</name> <init pos:line="642" pos:column="23">= <expr><name><name pos:line="642" pos:column="25">globalScope</name><op:operator pos:line="642" pos:column="36">.</op:operator><name pos:line="642" pos:column="37">ChildStatements</name><index pos:line="642" pos:column="52">[<expr><lit:literal type="number" pos:line="642" pos:column="53">0</lit:literal></expr>]</index></name><op:operator pos:line="642" pos:column="55">.</op:operator><name pos:line="642" pos:column="56">Content</name> <op:operator pos:line="642" pos:column="64">as</op:operator> <name pos:line="642" pos:column="67">VariableDeclaration</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="643" pos:column="13">Assert</name><op:operator pos:line="643" pos:column="19">.</op:operator><name pos:line="643" pos:column="20">IsNotNull</name></name><argument_list pos:line="643" pos:column="29">(<argument><expr><name pos:line="643" pos:column="30">declA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="644" pos:column="13">Assert</name><op:operator pos:line="644" pos:column="19">.</op:operator><name pos:line="644" pos:column="20">AreEqual</name></name><argument_list pos:line="644" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="644" pos:column="29">"A"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="644" pos:column="34">declA</name><op:operator pos:line="644" pos:column="39">.</op:operator><name pos:line="644" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="645" pos:column="13">Assert</name><op:operator pos:line="645" pos:column="19">.</op:operator><name pos:line="645" pos:column="20">AreEqual</name></name><argument_list pos:line="645" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="645" pos:column="29">"int"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="645" pos:column="36">declA</name><op:operator pos:line="645" pos:column="41">.</op:operator><name pos:line="645" pos:column="42">VariableType</name><op:operator pos:line="645" pos:column="54">.</op:operator><name pos:line="645" pos:column="55">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="646" pos:column="13">Assert</name><op:operator pos:line="646" pos:column="19">.</op:operator><name pos:line="646" pos:column="20">AreEqual</name></name><argument_list pos:line="646" pos:column="28">(<argument><expr><name><name pos:line="646" pos:column="29">AccessModifier</name><op:operator pos:line="646" pos:column="43">.</op:operator><name pos:line="646" pos:column="44">Public</name></name></expr></argument>, <argument><expr><name><name pos:line="646" pos:column="52">declA</name><op:operator pos:line="646" pos:column="57">.</op:operator><name pos:line="646" pos:column="58">Accessibility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="648" pos:column="13">var</name></type> <name pos:line="648" pos:column="17">declB</name> <init pos:line="648" pos:column="23">= <expr><name><name pos:line="648" pos:column="25">globalScope</name><op:operator pos:line="648" pos:column="36">.</op:operator><name pos:line="648" pos:column="37">ChildStatements</name><index pos:line="648" pos:column="52">[<expr><lit:literal type="number" pos:line="648" pos:column="53">1</lit:literal></expr>]</index></name><op:operator pos:line="648" pos:column="55">.</op:operator><name pos:line="648" pos:column="56">Content</name> <op:operator pos:line="648" pos:column="64">as</op:operator> <name pos:line="648" pos:column="67">VariableDeclaration</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="649" pos:column="13">Assert</name><op:operator pos:line="649" pos:column="19">.</op:operator><name pos:line="649" pos:column="20">IsNotNull</name></name><argument_list pos:line="649" pos:column="29">(<argument><expr><name pos:line="649" pos:column="30">declB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="650" pos:column="13">Assert</name><op:operator pos:line="650" pos:column="19">.</op:operator><name pos:line="650" pos:column="20">AreEqual</name></name><argument_list pos:line="650" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="650" pos:column="29">"B"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="650" pos:column="34">declB</name><op:operator pos:line="650" pos:column="39">.</op:operator><name pos:line="650" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="651" pos:column="13">Assert</name><op:operator pos:line="651" pos:column="19">.</op:operator><name pos:line="651" pos:column="20">AreEqual</name></name><argument_list pos:line="651" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="651" pos:column="29">"int"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="651" pos:column="36">declB</name><op:operator pos:line="651" pos:column="41">.</op:operator><name pos:line="651" pos:column="42">VariableType</name><op:operator pos:line="651" pos:column="54">.</op:operator><name pos:line="651" pos:column="55">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="652" pos:column="13">Assert</name><op:operator pos:line="652" pos:column="19">.</op:operator><name pos:line="652" pos:column="20">AreEqual</name></name><argument_list pos:line="652" pos:column="28">(<argument><expr><name><name pos:line="652" pos:column="29">AccessModifier</name><op:operator pos:line="652" pos:column="43">.</op:operator><name pos:line="652" pos:column="44">Public</name></name></expr></argument>, <argument><expr><name><name pos:line="652" pos:column="52">declB</name><op:operator pos:line="652" pos:column="57">.</op:operator><name pos:line="652" pos:column="58">Accessibility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="654" pos:column="13">var</name></type> <name pos:line="654" pos:column="17">declC</name> <init pos:line="654" pos:column="23">= <expr><name><name pos:line="654" pos:column="25">globalScope</name><op:operator pos:line="654" pos:column="36">.</op:operator><name pos:line="654" pos:column="37">ChildStatements</name><index pos:line="654" pos:column="52">[<expr><lit:literal type="number" pos:line="654" pos:column="53">2</lit:literal></expr>]</index></name><op:operator pos:line="654" pos:column="55">.</op:operator><name pos:line="654" pos:column="56">Content</name> <op:operator pos:line="654" pos:column="64">as</op:operator> <name pos:line="654" pos:column="67">VariableDeclaration</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="655" pos:column="13">Assert</name><op:operator pos:line="655" pos:column="19">.</op:operator><name pos:line="655" pos:column="20">IsNotNull</name></name><argument_list pos:line="655" pos:column="29">(<argument><expr><name pos:line="655" pos:column="30">declC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="656" pos:column="13">Assert</name><op:operator pos:line="656" pos:column="19">.</op:operator><name pos:line="656" pos:column="20">AreEqual</name></name><argument_list pos:line="656" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="656" pos:column="29">"C"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="656" pos:column="34">declC</name><op:operator pos:line="656" pos:column="39">.</op:operator><name pos:line="656" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="657" pos:column="13">Assert</name><op:operator pos:line="657" pos:column="19">.</op:operator><name pos:line="657" pos:column="20">AreEqual</name></name><argument_list pos:line="657" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="657" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="657" pos:column="36">declC</name><op:operator pos:line="657" pos:column="41">.</op:operator><name pos:line="657" pos:column="42">VariableType</name><op:operator pos:line="657" pos:column="54">.</op:operator><name pos:line="657" pos:column="55">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="658" pos:column="13">Assert</name><op:operator pos:line="658" pos:column="19">.</op:operator><name pos:line="658" pos:column="20">AreEqual</name></name><argument_list pos:line="658" pos:column="28">(<argument><expr><name><name pos:line="658" pos:column="29">AccessModifier</name><op:operator pos:line="658" pos:column="43">.</op:operator><name pos:line="658" pos:column="44">Private</name></name></expr></argument>, <argument><expr><name><name pos:line="658" pos:column="53">declC</name><op:operator pos:line="658" pos:column="58">.</op:operator><name pos:line="658" pos:column="59">Accessibility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="661" pos:column="9">[<expr><name pos:line="661" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="662" pos:column="9">public</specifier> <name pos:line="662" pos:column="16">void</name></type> <name pos:line="662" pos:column="21">TestImport_NameResolution</name><parameter_list pos:line="662" pos:column="46">()</parameter_list> <block pos:line="662" pos:column="49">{
            <comment type="line" pos:line="663" pos:column="13">//A.java</comment>
            <comment type="line" pos:line="664" pos:column="13">//import Foo.Bar.*;</comment>
            <comment type="line" pos:line="665" pos:column="13">//package A;</comment>
            <comment type="line" pos:line="666" pos:column="13">//public class Robot {</comment>
            <comment type="line" pos:line="667" pos:column="13">//  public Baz GetThingy() { return new Baz(); }</comment>
            <comment type="line" pos:line="668" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="669" pos:column="13">string</name></type> <name pos:line="669" pos:column="20">xmlA</name> <init pos:line="669" pos:column="25">= <expr><lit:literal type="string" pos:line="669" pos:column="27">@"&lt;import pos:line=""1"" pos:column="&gt;import &lt;name&gt;&lt;name pos:line=""1"" pos:column="&gt;Foo&lt;/name&gt;&lt;op:operator pos:line=""1"" pos:column=""&gt;.&lt;/op:operator&gt;&lt;name pos:line=""1"" pos:column=""&gt;Bar&lt;/name&gt;&lt;/name&gt;.*;&lt;/import&gt;
&lt;package pos:line=""2"" pos:column="&gt;package &lt;name pos:line=""2"" pos:column="&gt;A&lt;/name&gt;;&lt;/package&gt;
&lt;class&gt;&lt;specifier pos:line=""3"" pos:column="&gt;public&lt;/specifier&gt; class &lt;name pos:line=""3"" pos:column=""&gt;Robot&lt;/name&gt; &lt;block pos:line=""3"" pos:column=""&gt;{
  &lt;function&gt;&lt;type&gt;&lt;specifier pos:line=""4"" pos:column="&gt;public&lt;/specifier&gt; &lt;name pos:line=""4"" pos:column=""&gt;Baz&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""4"" pos:column=""&gt;GetThingy&lt;/name&gt;&lt;parameter_list pos:line=""4"" pos:column=""&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""4"" pos:column=""&gt;{ &lt;return pos:line=""4"" pos:column=""&gt;return &lt;expr&gt;&lt;op:operator pos:line=""4"" pos:column=""&gt;new&lt;/op:operator&gt; &lt;call&gt;&lt;name pos:line=""4"" pos:column=""&gt;Baz&lt;/name&gt;&lt;argument_list pos:line=""4"" pos:column=""&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/return&gt; }&lt;/block&gt;&lt;/function&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="674" pos:column="13">XElement</name></type> <name pos:line="674" pos:column="22">xmlElementA</name> <init pos:line="674" pos:column="34">= <expr><call><name><name pos:line="674" pos:column="36">fileSetup</name><op:operator pos:line="674" pos:column="45">.</op:operator><name pos:line="674" pos:column="46">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="674" pos:column="70">(<argument><expr><name pos:line="674" pos:column="71">xmlA</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="674" pos:column="77">"A.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="675" pos:column="13">//B.java</comment>
            <comment type="line" pos:line="676" pos:column="13">//package Foo.Bar;</comment>
            <comment type="line" pos:line="677" pos:column="13">//public class Baz {</comment>
            <comment type="line" pos:line="678" pos:column="13">//  public Baz() { }</comment>
            <comment type="line" pos:line="679" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="680" pos:column="13">string</name></type> <name pos:line="680" pos:column="20">xmlB</name> <init pos:line="680" pos:column="25">= <expr><lit:literal type="string" pos:line="680" pos:column="27">@"&lt;package pos:line=""1"" pos:column="&gt;package &lt;name&gt;&lt;name pos:line=""1"" pos:column="&gt;Foo&lt;/name&gt;&lt;op:operator pos:line=""1"" pos:column=""&gt;.&lt;/op:operator&gt;&lt;name pos:line=""1"" pos:column=""&gt;Bar&lt;/name&gt;&lt;/name&gt;;&lt;/package&gt;
&lt;class&gt;&lt;specifier pos:line=""2"" pos:column="&gt;public&lt;/specifier&gt; class &lt;name pos:line=""2"" pos:column=""&gt;Baz&lt;/name&gt; &lt;block pos:line=""2"" pos:column=""&gt;{
  &lt;constructor&gt;&lt;specifier pos:line=""3"" pos:column="&gt;public&lt;/specifier&gt; &lt;name pos:line=""3"" pos:column=""&gt;Baz&lt;/name&gt;&lt;parameter_list pos:line=""3"" pos:column=""&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""3"" pos:column=""&gt;{ }&lt;/block&gt;&lt;/constructor&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="684" pos:column="13">XElement</name></type> <name pos:line="684" pos:column="22">xmlElementB</name> <init pos:line="684" pos:column="34">= <expr><call><name><name pos:line="684" pos:column="36">fileSetup</name><op:operator pos:line="684" pos:column="45">.</op:operator><name pos:line="684" pos:column="46">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="684" pos:column="70">(<argument><expr><name pos:line="684" pos:column="71">xmlB</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="684" pos:column="77">"B.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <decl_stmt><decl><type><name pos:line="686" pos:column="13">var</name></type> <name pos:line="686" pos:column="17">scopeA</name> <init pos:line="686" pos:column="24">= <expr><call><name><name pos:line="686" pos:column="26">codeParser</name><op:operator pos:line="686" pos:column="36">.</op:operator><name pos:line="686" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="686" pos:column="50">(<argument><expr><name pos:line="686" pos:column="51">xmlElementA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="687" pos:column="13">var</name></type> <name pos:line="687" pos:column="17">scopeB</name> <init pos:line="687" pos:column="24">= <expr><call><name><name pos:line="687" pos:column="26">codeParser</name><op:operator pos:line="687" pos:column="36">.</op:operator><name pos:line="687" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="687" pos:column="50">(<argument><expr><name pos:line="687" pos:column="51">xmlElementB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="688" pos:column="13">var</name></type> <name pos:line="688" pos:column="17">globalScope</name> <init pos:line="688" pos:column="29">= <expr><call><name><name pos:line="688" pos:column="31">scopeA</name><op:operator pos:line="688" pos:column="37">.</op:operator><name pos:line="688" pos:column="38">Merge</name></name><argument_list pos:line="688" pos:column="43">(<argument><expr><name pos:line="688" pos:column="44">scopeB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="689" pos:column="13">Assert</name><op:operator pos:line="689" pos:column="19">.</op:operator><name pos:line="689" pos:column="20">AreEqual</name></name><argument_list pos:line="689" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="689" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="689" pos:column="32">globalScope</name><op:operator pos:line="689" pos:column="43">.</op:operator><name pos:line="689" pos:column="44">ChildStatements</name><op:operator pos:line="689" pos:column="59">.</op:operator><name pos:line="689" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="691" pos:column="13">var</name></type> <name pos:line="691" pos:column="17">baz</name> <init pos:line="691" pos:column="21">= <expr><call><name><name pos:line="691" pos:column="23">globalScope</name><op:operator pos:line="691" pos:column="34">.</op:operator><name><name pos:line="691" pos:column="35">GetDescendants</name><argument_list pos:line="691" pos:column="49">&lt;<argument><name pos:line="691" pos:column="50">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="691" pos:column="65">()</argument_list></call><op:operator pos:line="691" pos:column="67">.</op:operator><call><name pos:line="691" pos:column="68">FirstOrDefault</name><argument_list pos:line="691" pos:column="82">(<argument><expr><lambda><name pos:line="691" pos:column="83">t</name> <op:operator pos:line="691" pos:column="85">=&gt;</op:operator> <name><name pos:line="691" pos:column="88">t</name><op:operator pos:line="691" pos:column="89">.</op:operator><name pos:line="691" pos:column="90">Name</name></name> <op:operator pos:line="691" pos:column="95">==</op:operator> <lit:literal type="string" pos:line="691" pos:column="98">"Baz"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="692" pos:column="13">Assert</name><op:operator pos:line="692" pos:column="19">.</op:operator><name pos:line="692" pos:column="20">IsNotNull</name></name><argument_list pos:line="692" pos:column="29">(<argument><expr><name pos:line="692" pos:column="30">baz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="694" pos:column="13">var</name></type> <name pos:line="694" pos:column="17">thingy</name> <init pos:line="694" pos:column="24">= <expr><call><name><name pos:line="694" pos:column="26">globalScope</name><op:operator pos:line="694" pos:column="37">.</op:operator><name><name pos:line="694" pos:column="38">GetDescendants</name><argument_list pos:line="694" pos:column="52">&lt;<argument><name pos:line="694" pos:column="53">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="694" pos:column="70">()</argument_list></call><op:operator pos:line="694" pos:column="72">.</op:operator><call><name pos:line="694" pos:column="73">FirstOrDefault</name><argument_list pos:line="694" pos:column="87">(<argument><expr><lambda><name pos:line="694" pos:column="88">m</name> <op:operator pos:line="694" pos:column="90">=&gt;</op:operator> <name><name pos:line="694" pos:column="93">m</name><op:operator pos:line="694" pos:column="94">.</op:operator><name pos:line="694" pos:column="95">Name</name></name> <op:operator pos:line="694" pos:column="100">==</op:operator> <lit:literal type="string" pos:line="694" pos:column="103">"GetThingy"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="695" pos:column="13">Assert</name><op:operator pos:line="695" pos:column="19">.</op:operator><name pos:line="695" pos:column="20">IsNotNull</name></name><argument_list pos:line="695" pos:column="29">(<argument><expr><name pos:line="695" pos:column="30">thingy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="696" pos:column="13">var</name></type> <name pos:line="696" pos:column="17">thingyTypes</name> <init pos:line="696" pos:column="29">= <expr><call><name><name pos:line="696" pos:column="31">thingy</name><op:operator pos:line="696" pos:column="37">.</op:operator><name pos:line="696" pos:column="38">ReturnType</name><op:operator pos:line="696" pos:column="48">.</op:operator><name pos:line="696" pos:column="49">FindMatches</name></name><argument_list pos:line="696" pos:column="60">()</argument_list></call><op:operator pos:line="696" pos:column="62">.</op:operator><call><name pos:line="696" pos:column="63">ToList</name><argument_list pos:line="696" pos:column="69">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="697" pos:column="13">Assert</name><op:operator pos:line="697" pos:column="19">.</op:operator><name pos:line="697" pos:column="20">AreEqual</name></name><argument_list pos:line="697" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="697" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="697" pos:column="32">thingyTypes</name><op:operator pos:line="697" pos:column="43">.</op:operator><name pos:line="697" pos:column="44">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="698" pos:column="13">Assert</name><op:operator pos:line="698" pos:column="19">.</op:operator><name pos:line="698" pos:column="20">AreSame</name></name><argument_list pos:line="698" pos:column="27">(<argument><expr><name pos:line="698" pos:column="28">baz</name></expr></argument>, <argument><expr><name><name pos:line="698" pos:column="33">thingyTypes</name><index pos:line="698" pos:column="44">[<expr><lit:literal type="number" pos:line="698" pos:column="45">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="700" pos:column="13">var</name></type> <name pos:line="700" pos:column="17">bazDef</name> <init pos:line="700" pos:column="24">= <expr><call><name><name pos:line="700" pos:column="26">baz</name><op:operator pos:line="700" pos:column="29">.</op:operator><name><name pos:line="700" pos:column="30">GetNamedChildren</name><argument_list pos:line="700" pos:column="46">&lt;<argument><name pos:line="700" pos:column="47">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="700" pos:column="64">(<argument><expr><lit:literal type="string" pos:line="700" pos:column="65">"Baz"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="700" pos:column="71">.</op:operator><call><name pos:line="700" pos:column="72">First</name><argument_list pos:line="700" pos:column="77">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="701" pos:column="13">var</name></type> <name pos:line="701" pos:column="17">bazCall</name> <init pos:line="701" pos:column="25">= <expr><name><name pos:line="701" pos:column="27">thingy</name><op:operator pos:line="701" pos:column="33">.</op:operator><name pos:line="701" pos:column="34">ChildStatements</name><index pos:line="701" pos:column="49">[<expr><lit:literal type="number" pos:line="701" pos:column="50">0</lit:literal></expr>]</index></name><op:operator pos:line="701" pos:column="52">.</op:operator><call><name><name pos:line="701" pos:column="53">Content</name><op:operator pos:line="701" pos:column="60">.</op:operator><name><name pos:line="701" pos:column="61">GetDescendantsAndSelf</name><argument_list pos:line="701" pos:column="82">&lt;<argument><name pos:line="701" pos:column="83">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="701" pos:column="94">()</argument_list></call><op:operator pos:line="701" pos:column="96">.</op:operator><call><name pos:line="701" pos:column="97">FirstOrDefault</name><argument_list pos:line="701" pos:column="111">(<argument><expr><lambda><name pos:line="701" pos:column="112">mc</name> <op:operator pos:line="701" pos:column="115">=&gt;</op:operator> <name><name pos:line="701" pos:column="118">mc</name><op:operator pos:line="701" pos:column="120">.</op:operator><name pos:line="701" pos:column="121">Name</name></name> <op:operator pos:line="701" pos:column="126">==</op:operator> <lit:literal type="string" pos:line="701" pos:column="129">"Baz"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="702" pos:column="13">Assert</name><op:operator pos:line="702" pos:column="19">.</op:operator><name pos:line="702" pos:column="20">IsNotNull</name></name><argument_list pos:line="702" pos:column="29">(<argument><expr><name pos:line="702" pos:column="30">bazCall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="703" pos:column="13">Assert</name><op:operator pos:line="703" pos:column="19">.</op:operator><name pos:line="703" pos:column="20">AreSame</name></name><argument_list pos:line="703" pos:column="27">(<argument><expr><name pos:line="703" pos:column="28">bazDef</name></expr></argument>, <argument><expr><call><name><name pos:line="703" pos:column="36">bazCall</name><op:operator pos:line="703" pos:column="43">.</op:operator><name pos:line="703" pos:column="44">FindMatches</name></name><argument_list pos:line="703" pos:column="55">()</argument_list></call><op:operator pos:line="703" pos:column="57">.</op:operator><call><name pos:line="703" pos:column="58">FirstOrDefault</name><argument_list pos:line="703" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="706" pos:column="9">[<expr><name pos:line="706" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="707" pos:column="9">public</specifier> <name pos:line="707" pos:column="16">void</name></type> <name pos:line="707" pos:column="21">TestAlias_NameResolution</name><parameter_list pos:line="707" pos:column="45">()</parameter_list> <block pos:line="707" pos:column="48">{
            <comment type="line" pos:line="708" pos:column="13">//A.java</comment>
            <comment type="line" pos:line="709" pos:column="13">//package Foo.Bar;</comment>
            <comment type="line" pos:line="710" pos:column="13">//public class Baz {</comment>
            <comment type="line" pos:line="711" pos:column="13">//  public static void DoTheThing() { };</comment>
            <comment type="line" pos:line="712" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="713" pos:column="13">string</name></type> <name pos:line="713" pos:column="20">xmlA</name> <init pos:line="713" pos:column="25">= <expr><lit:literal type="string" pos:line="713" pos:column="27">@"&lt;package pos:line=""1"" pos:column="&gt;package &lt;name&gt;&lt;name pos:line=""1"" pos:column="&gt;Foo&lt;/name&gt;&lt;op:operator pos:line=""1"" pos:column=""&gt;.&lt;/op:operator&gt;&lt;name pos:line=""1"" pos:column=""&gt;Bar&lt;/name&gt;&lt;/name&gt;;&lt;/package&gt;
&lt;class&gt;&lt;specifier pos:line=""2"" pos:column="&gt;public&lt;/specifier&gt; class &lt;name pos:line=""2"" pos:column=""&gt;Baz&lt;/name&gt; &lt;block pos:line=""2"" pos:column=""&gt;{
  &lt;function&gt;&lt;type&gt;&lt;specifier pos:line=""3"" pos:column="&gt;public&lt;/specifier&gt; &lt;specifier pos:line=""3"" pos:column=""&gt;static&lt;/specifier&gt; &lt;name pos:line=""3"" pos:column=""&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""3"" pos:column=""&gt;DoTheThing&lt;/name&gt;&lt;parameter_list pos:line=""3"" pos:column=""&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""3"" pos:column=""&gt;{ }&lt;/block&gt;&lt;/function&gt;&lt;empty_stmt pos:line=""3"" pos:column=""&gt;;&lt;/empty_stmt&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="717" pos:column="13">XElement</name></type> <name pos:line="717" pos:column="22">xmlElementA</name> <init pos:line="717" pos:column="34">= <expr><call><name><name pos:line="717" pos:column="36">fileSetup</name><op:operator pos:line="717" pos:column="45">.</op:operator><name pos:line="717" pos:column="46">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="717" pos:column="70">(<argument><expr><name pos:line="717" pos:column="71">xmlA</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="717" pos:column="77">"A.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="718" pos:column="13">//B.java</comment>
            <comment type="line" pos:line="719" pos:column="13">//import Foo.Bar.Baz;</comment>
            <comment type="line" pos:line="720" pos:column="13">//package A;</comment>
            <comment type="line" pos:line="721" pos:column="13">//public class B {</comment>
            <comment type="line" pos:line="722" pos:column="13">//  public B() {</comment>
            <comment type="line" pos:line="723" pos:column="13">//    Baz.DoTheThing();</comment>
            <comment type="line" pos:line="724" pos:column="13">//  }</comment>
            <comment type="line" pos:line="725" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="726" pos:column="13">string</name></type> <name pos:line="726" pos:column="20">xmlB</name> <init pos:line="726" pos:column="25">= <expr><lit:literal type="string" pos:line="726" pos:column="27">@"&lt;import pos:line=""1"" pos:column="&gt;import &lt;name&gt;&lt;name pos:line=""1"" pos:column="&gt;Foo&lt;/name&gt;&lt;op:operator pos:line=""1"" pos:column=""&gt;.&lt;/op:operator&gt;&lt;name pos:line=""1"" pos:column=""&gt;Bar&lt;/name&gt;&lt;op:operator pos:line=""1"" pos:column=""&gt;.&lt;/op:operator&gt;&lt;name pos:line=""1"" pos:column=""&gt;Baz&lt;/name&gt;&lt;/name&gt;;&lt;/import&gt;
&lt;package pos:line=""2"" pos:column="&gt;package &lt;name pos:line=""2"" pos:column="&gt;A&lt;/name&gt;;&lt;/package&gt;
&lt;class&gt;&lt;specifier pos:line=""3"" pos:column="&gt;public&lt;/specifier&gt; class &lt;name pos:line=""3"" pos:column=""&gt;B&lt;/name&gt; &lt;block pos:line=""3"" pos:column=""&gt;{
  &lt;constructor&gt;&lt;specifier pos:line=""4"" pos:column="&gt;public&lt;/specifier&gt; &lt;name pos:line=""4"" pos:column=""&gt;B&lt;/name&gt;&lt;parameter_list pos:line=""4"" pos:column=""&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""4"" pos:column=""&gt;{
    &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;&lt;name pos:line=""5"" pos:column="&gt;Baz&lt;/name&gt;&lt;op:operator pos:line=""5"" pos:column="&gt;.&lt;/op:operator&gt;&lt;name pos:line=""5"" pos:column="&gt;DoTheThing&lt;/name&gt;&lt;/name&gt;&lt;argument_list pos:line=""5"" pos:column=""&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
  }&lt;/block&gt;&lt;/constructor&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="733" pos:column="13">XElement</name></type> <name pos:line="733" pos:column="22">xmlElementB</name> <init pos:line="733" pos:column="34">= <expr><call><name><name pos:line="733" pos:column="36">fileSetup</name><op:operator pos:line="733" pos:column="45">.</op:operator><name pos:line="733" pos:column="46">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="733" pos:column="70">(<argument><expr><name pos:line="733" pos:column="71">xmlB</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="733" pos:column="77">"B.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <decl_stmt><decl><type><name pos:line="735" pos:column="13">var</name></type> <name pos:line="735" pos:column="17">scopeA</name> <init pos:line="735" pos:column="24">= <expr><call><name><name pos:line="735" pos:column="26">codeParser</name><op:operator pos:line="735" pos:column="36">.</op:operator><name pos:line="735" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="735" pos:column="50">(<argument><expr><name pos:line="735" pos:column="51">xmlElementA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="736" pos:column="13">var</name></type> <name pos:line="736" pos:column="17">scopeB</name> <init pos:line="736" pos:column="24">= <expr><call><name><name pos:line="736" pos:column="26">codeParser</name><op:operator pos:line="736" pos:column="36">.</op:operator><name pos:line="736" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="736" pos:column="50">(<argument><expr><name pos:line="736" pos:column="51">xmlElementB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="737" pos:column="13">var</name></type> <name pos:line="737" pos:column="17">globalScope</name> <init pos:line="737" pos:column="29">= <expr><call><name><name pos:line="737" pos:column="31">scopeA</name><op:operator pos:line="737" pos:column="37">.</op:operator><name pos:line="737" pos:column="38">Merge</name></name><argument_list pos:line="737" pos:column="43">(<argument><expr><name pos:line="737" pos:column="44">scopeB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="738" pos:column="13">Assert</name><op:operator pos:line="738" pos:column="19">.</op:operator><name pos:line="738" pos:column="20">AreEqual</name></name><argument_list pos:line="738" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="738" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="738" pos:column="32">globalScope</name><op:operator pos:line="738" pos:column="43">.</op:operator><name pos:line="738" pos:column="44">ChildStatements</name><op:operator pos:line="738" pos:column="59">.</op:operator><name pos:line="738" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="740" pos:column="13">var</name></type> <name pos:line="740" pos:column="17">thingDef</name> <init pos:line="740" pos:column="26">= <expr><call><name><name pos:line="740" pos:column="28">globalScope</name><op:operator pos:line="740" pos:column="39">.</op:operator><name><name pos:line="740" pos:column="40">GetDescendants</name><argument_list pos:line="740" pos:column="54">&lt;<argument><name pos:line="740" pos:column="55">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="740" pos:column="72">()</argument_list></call><op:operator pos:line="740" pos:column="74">.</op:operator><call><name pos:line="740" pos:column="75">FirstOrDefault</name><argument_list pos:line="740" pos:column="89">(<argument><expr><lambda><name pos:line="740" pos:column="90">md</name> <op:operator pos:line="740" pos:column="93">=&gt;</op:operator> <name><name pos:line="740" pos:column="96">md</name><op:operator pos:line="740" pos:column="98">.</op:operator><name pos:line="740" pos:column="99">Name</name></name> <op:operator pos:line="740" pos:column="104">==</op:operator> <lit:literal type="string" pos:line="740" pos:column="107">"DoTheThing"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="741" pos:column="13">Assert</name><op:operator pos:line="741" pos:column="19">.</op:operator><name pos:line="741" pos:column="20">IsNotNull</name></name><argument_list pos:line="741" pos:column="29">(<argument><expr><name pos:line="741" pos:column="30">thingDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="742" pos:column="13">Assert</name><op:operator pos:line="742" pos:column="19">.</op:operator><name pos:line="742" pos:column="20">AreEqual</name></name><argument_list pos:line="742" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="742" pos:column="29">"Baz"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="742" pos:column="36">(</op:operator><op:operator pos:line="742" pos:column="37">(</op:operator><name pos:line="742" pos:column="38">TypeDefinition</name><op:operator pos:line="742" pos:column="52">)</op:operator><name><name pos:line="742" pos:column="53">thingDef</name><op:operator pos:line="742" pos:column="61">.</op:operator><name pos:line="742" pos:column="62">ParentStatement</name></name><op:operator pos:line="742" pos:column="77">)</op:operator><op:operator pos:line="742" pos:column="78">.</op:operator><name pos:line="742" pos:column="79">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="744" pos:column="13">var</name></type> <name pos:line="744" pos:column="17">bDef</name> <init pos:line="744" pos:column="22">= <expr><call><name><name pos:line="744" pos:column="24">globalScope</name><op:operator pos:line="744" pos:column="35">.</op:operator><name><name pos:line="744" pos:column="36">GetDescendants</name><argument_list pos:line="744" pos:column="50">&lt;<argument><name pos:line="744" pos:column="51">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="744" pos:column="68">()</argument_list></call><op:operator pos:line="744" pos:column="70">.</op:operator><call><name pos:line="744" pos:column="71">FirstOrDefault</name><argument_list pos:line="744" pos:column="85">(<argument><expr><lambda><name pos:line="744" pos:column="86">md</name> <op:operator pos:line="744" pos:column="89">=&gt;</op:operator> <name><name pos:line="744" pos:column="92">md</name><op:operator pos:line="744" pos:column="94">.</op:operator><name pos:line="744" pos:column="95">Name</name></name> <op:operator pos:line="744" pos:column="100">==</op:operator> <lit:literal type="string" pos:line="744" pos:column="103">"B"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="745" pos:column="13">Assert</name><op:operator pos:line="745" pos:column="19">.</op:operator><name pos:line="745" pos:column="20">IsNotNull</name></name><argument_list pos:line="745" pos:column="29">(<argument><expr><name pos:line="745" pos:column="30">bDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="746" pos:column="13">Assert</name><op:operator pos:line="746" pos:column="19">.</op:operator><name pos:line="746" pos:column="20">AreEqual</name></name><argument_list pos:line="746" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="746" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="746" pos:column="32">bDef</name><op:operator pos:line="746" pos:column="36">.</op:operator><name pos:line="746" pos:column="37">ChildStatements</name><op:operator pos:line="746" pos:column="52">.</op:operator><name pos:line="746" pos:column="53">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="747" pos:column="13">var</name></type> <name pos:line="747" pos:column="17">thingCall</name> <init pos:line="747" pos:column="27">= <expr><name><name pos:line="747" pos:column="29">bDef</name><op:operator pos:line="747" pos:column="33">.</op:operator><name pos:line="747" pos:column="34">ChildStatements</name><index pos:line="747" pos:column="49">[<expr><lit:literal type="number" pos:line="747" pos:column="50">0</lit:literal></expr>]</index></name><op:operator pos:line="747" pos:column="52">.</op:operator><call><name><name pos:line="747" pos:column="53">Content</name><op:operator pos:line="747" pos:column="60">.</op:operator><name><name pos:line="747" pos:column="61">GetDescendantsAndSelf</name><argument_list pos:line="747" pos:column="82">&lt;<argument><name pos:line="747" pos:column="83">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="747" pos:column="94">()</argument_list></call><op:operator pos:line="747" pos:column="96">.</op:operator><call><name pos:line="747" pos:column="97">FirstOrDefault</name><argument_list pos:line="747" pos:column="111">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="748" pos:column="13">Assert</name><op:operator pos:line="748" pos:column="19">.</op:operator><name pos:line="748" pos:column="20">IsNotNull</name></name><argument_list pos:line="748" pos:column="29">(<argument><expr><name pos:line="748" pos:column="30">thingCall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="749" pos:column="13">Assert</name><op:operator pos:line="749" pos:column="19">.</op:operator><name pos:line="749" pos:column="20">AreSame</name></name><argument_list pos:line="749" pos:column="27">(<argument><expr><name pos:line="749" pos:column="28">thingDef</name></expr></argument>, <argument><expr><call><name><name pos:line="749" pos:column="38">thingCall</name><op:operator pos:line="749" pos:column="47">.</op:operator><name pos:line="749" pos:column="48">FindMatches</name></name><argument_list pos:line="749" pos:column="59">()</argument_list></call><op:operator pos:line="749" pos:column="61">.</op:operator><call><name pos:line="749" pos:column="62">First</name><argument_list pos:line="749" pos:column="67">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="752" pos:column="9">[<expr><name pos:line="752" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="753" pos:column="9">public</specifier> <name pos:line="753" pos:column="16">void</name></type> <name pos:line="753" pos:column="21">BasicParentTest_Java</name><parameter_list pos:line="753" pos:column="41">()</parameter_list> <block pos:line="753" pos:column="44">{
            <comment type="line" pos:line="754" pos:column="13">// # A.java class A implements B { }</comment>
            <decl_stmt><decl><type><name pos:line="755" pos:column="13">string</name></type> <name pos:line="755" pos:column="20">a_xml</name> <init pos:line="755" pos:column="26">= <expr><lit:literal type="string" pos:line="755" pos:column="28">@"&lt;class&gt;class &lt;name&gt;A&lt;/name&gt; &lt;super&gt;&lt;implements&gt;implements &lt;name&gt;B&lt;/name&gt;&lt;/implements&gt;&lt;/super&gt; &lt;block&gt;{
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="757" pos:column="13">// # B.java class B { }</comment>
            <decl_stmt><decl><type><name pos:line="758" pos:column="13">string</name></type> <name pos:line="758" pos:column="20">b_xml</name> <init pos:line="758" pos:column="26">= <expr><lit:literal type="string" pos:line="758" pos:column="28">@"&lt;class&gt;class &lt;name&gt;B&lt;/name&gt; &lt;block&gt;{
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="761" pos:column="13">// # C.java class C { A a; }</comment>
            <decl_stmt><decl><type><name pos:line="762" pos:column="13">string</name></type> <name pos:line="762" pos:column="20">c_xml</name> <init pos:line="762" pos:column="26">= <expr><lit:literal type="string" pos:line="762" pos:column="28">@"&lt;class&gt;class &lt;name&gt;C&lt;/name&gt; &lt;block&gt;{
	&lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;A&lt;/name&gt;&lt;/type&gt; &lt;name&gt;a&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="766" pos:column="13">var</name></type> <name pos:line="766" pos:column="17">fileUnitA</name> <init pos:line="766" pos:column="27">= <expr><call><name><name pos:line="766" pos:column="29">fileSetup</name><op:operator pos:line="766" pos:column="38">.</op:operator><name pos:line="766" pos:column="39">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="766" pos:column="63">(<argument><expr><name pos:line="766" pos:column="64">a_xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="766" pos:column="71">"A.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="767" pos:column="13">var</name></type> <name pos:line="767" pos:column="17">fileUnitB</name> <init pos:line="767" pos:column="27">= <expr><call><name><name pos:line="767" pos:column="29">fileSetup</name><op:operator pos:line="767" pos:column="38">.</op:operator><name pos:line="767" pos:column="39">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="767" pos:column="63">(<argument><expr><name pos:line="767" pos:column="64">b_xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="767" pos:column="71">"B.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="768" pos:column="13">var</name></type> <name pos:line="768" pos:column="17">fileUnitC</name> <init pos:line="768" pos:column="27">= <expr><call><name><name pos:line="768" pos:column="29">fileSetup</name><op:operator pos:line="768" pos:column="38">.</op:operator><name pos:line="768" pos:column="39">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="768" pos:column="63">(<argument><expr><name pos:line="768" pos:column="64">c_xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="768" pos:column="71">"C.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="770" pos:column="13">var</name></type> <name pos:line="770" pos:column="17">globalScope</name> <init pos:line="770" pos:column="29">= <expr><call><name><name pos:line="770" pos:column="31">codeParser</name><op:operator pos:line="770" pos:column="41">.</op:operator><name pos:line="770" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="770" pos:column="55">(<argument><expr><name pos:line="770" pos:column="56">fileUnitA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="771" pos:column="13">globalScope</name> <op:operator pos:line="771" pos:column="25">=</op:operator> <call><name><name pos:line="771" pos:column="27">globalScope</name><op:operator pos:line="771" pos:column="38">.</op:operator><name pos:line="771" pos:column="39">Merge</name></name><argument_list pos:line="771" pos:column="44">(<argument><expr><call><name><name pos:line="771" pos:column="45">codeParser</name><op:operator pos:line="771" pos:column="55">.</op:operator><name pos:line="771" pos:column="56">ParseFileUnit</name></name><argument_list pos:line="771" pos:column="69">(<argument><expr><name pos:line="771" pos:column="70">fileUnitB</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="772" pos:column="13">globalScope</name> <op:operator pos:line="772" pos:column="25">=</op:operator> <call><name><name pos:line="772" pos:column="27">globalScope</name><op:operator pos:line="772" pos:column="38">.</op:operator><name pos:line="772" pos:column="39">Merge</name></name><argument_list pos:line="772" pos:column="44">(<argument><expr><call><name><name pos:line="772" pos:column="45">codeParser</name><op:operator pos:line="772" pos:column="55">.</op:operator><name pos:line="772" pos:column="56">ParseFileUnit</name></name><argument_list pos:line="772" pos:column="69">(<argument><expr><name pos:line="772" pos:column="70">fileUnitC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="774" pos:column="13">Assert</name><op:operator pos:line="774" pos:column="19">.</op:operator><name pos:line="774" pos:column="20">AreEqual</name></name><argument_list pos:line="774" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="774" pos:column="29">3</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="774" pos:column="32">globalScope</name><op:operator pos:line="774" pos:column="43">.</op:operator><name pos:line="774" pos:column="44">ChildStatements</name><op:operator pos:line="774" pos:column="59">.</op:operator><name pos:line="774" pos:column="60">Count</name></name><argument_list pos:line="774" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="776" pos:column="13">var</name></type> <name pos:line="776" pos:column="17">typeDefinitions</name> <init pos:line="776" pos:column="33">= <expr><call><name><name pos:line="776" pos:column="35">globalScope</name><op:operator pos:line="776" pos:column="46">.</op:operator><name><name pos:line="776" pos:column="47">GetDescendants</name><argument_list pos:line="776" pos:column="61">&lt;<argument><name pos:line="776" pos:column="62">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="776" pos:column="77">()</argument_list></call><op:operator pos:line="776" pos:column="79">.</op:operator><call><name pos:line="776" pos:column="80">OrderBy</name><argument_list pos:line="776" pos:column="87">(<argument><expr><lambda><name pos:line="776" pos:column="88">t</name> <op:operator pos:line="776" pos:column="90">=&gt;</op:operator> <name><name pos:line="776" pos:column="93">t</name><op:operator pos:line="776" pos:column="94">.</op:operator><name pos:line="776" pos:column="95">Name</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="776" pos:column="100">.</op:operator><call><name pos:line="776" pos:column="101">ToList</name><argument_list pos:line="776" pos:column="107">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="778" pos:column="13">var</name></type> <name pos:line="778" pos:column="17">typeA</name> <init pos:line="778" pos:column="23">= <expr><name><name pos:line="778" pos:column="25">typeDefinitions</name><index pos:line="778" pos:column="40">[<expr><lit:literal type="number" pos:line="778" pos:column="41">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="779" pos:column="13">var</name></type> <name pos:line="779" pos:column="17">typeB</name> <init pos:line="779" pos:column="23">= <expr><name><name pos:line="779" pos:column="25">typeDefinitions</name><index pos:line="779" pos:column="40">[<expr><lit:literal type="number" pos:line="779" pos:column="41">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="780" pos:column="13">var</name></type> <name pos:line="780" pos:column="17">typeC</name> <init pos:line="780" pos:column="23">= <expr><name><name pos:line="780" pos:column="25">typeDefinitions</name><index pos:line="780" pos:column="40">[<expr><lit:literal type="number" pos:line="780" pos:column="41">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="782" pos:column="13">Assert</name><op:operator pos:line="782" pos:column="19">.</op:operator><name pos:line="782" pos:column="20">AreEqual</name></name><argument_list pos:line="782" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="782" pos:column="29">"B"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="782" pos:column="34">typeB</name><op:operator pos:line="782" pos:column="39">.</op:operator><name pos:line="782" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="784" pos:column="13">var</name></type> <name pos:line="784" pos:column="17">cDotA</name> <init pos:line="784" pos:column="23">= <expr><op:operator pos:line="784" pos:column="25">(</op:operator><linq><from pos:line="784" pos:column="26">from <expr><name pos:line="784" pos:column="31">stmt</name></expr> <in pos:line="784" pos:column="36">in <expr><call><name><name pos:line="784" pos:column="39">typeC</name><op:operator pos:line="784" pos:column="44">.</op:operator><name pos:line="784" pos:column="45">GetDescendants</name></name><argument_list pos:line="784" pos:column="59">()</argument_list></call></expr></in></from>
                         <from pos:line="785" pos:column="26">from <expr><name pos:line="785" pos:column="31">decl</name></expr> <in pos:line="785" pos:column="36">in <expr><call><name><name pos:line="785" pos:column="39">stmt</name><op:operator pos:line="785" pos:column="43">.</op:operator><name pos:line="785" pos:column="44">GetExpressions</name></name><argument_list pos:line="785" pos:column="58">()</argument_list></call><op:operator pos:line="785" pos:column="60">.</op:operator><call><name><name pos:line="785" pos:column="61">OfType</name><argument_list pos:line="785" pos:column="67">&lt;<argument><name pos:line="785" pos:column="68">VariableDeclaration</name></argument>&gt;</argument_list></name><argument_list pos:line="785" pos:column="88">()</argument_list></call></expr></in></from>
                         <select pos:line="786" pos:column="26">select <expr><name pos:line="786" pos:column="33">decl</name></expr></select></linq><op:operator pos:line="786" pos:column="37">)</op:operator><op:operator pos:line="786" pos:column="38">.</op:operator><call><name pos:line="786" pos:column="39">FirstOrDefault</name><argument_list pos:line="786" pos:column="53">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="787" pos:column="13">var</name></type> <name pos:line="787" pos:column="17">parentOfA</name> <init pos:line="787" pos:column="27">= <expr><call><name><name pos:line="787" pos:column="29">typeA</name><op:operator pos:line="787" pos:column="34">.</op:operator><name pos:line="787" pos:column="35">ParentTypeNames</name><op:operator pos:line="787" pos:column="50">.</op:operator><name pos:line="787" pos:column="51">FirstOrDefault</name></name><argument_list pos:line="787" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="788" pos:column="13">Assert</name><op:operator pos:line="788" pos:column="19">.</op:operator><name pos:line="788" pos:column="20">That</name></name><argument_list pos:line="788" pos:column="24">(<argument><expr><call><name><name pos:line="788" pos:column="25">cDotA</name><op:operator pos:line="788" pos:column="30">.</op:operator><name pos:line="788" pos:column="31">VariableType</name><op:operator pos:line="788" pos:column="43">.</op:operator><name pos:line="788" pos:column="44">FindMatches</name></name><argument_list pos:line="788" pos:column="55">()</argument_list></call><op:operator pos:line="788" pos:column="57">.</op:operator><call><name pos:line="788" pos:column="58">FirstOrDefault</name><argument_list pos:line="788" pos:column="72">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="788" pos:column="76">Is</name><op:operator pos:line="788" pos:column="78">.</op:operator><name pos:line="788" pos:column="79">SameAs</name></name><argument_list pos:line="788" pos:column="85">(<argument><expr><name pos:line="788" pos:column="86">typeA</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="789" pos:column="13">Assert</name><op:operator pos:line="789" pos:column="19">.</op:operator><name pos:line="789" pos:column="20">That</name></name><argument_list pos:line="789" pos:column="24">(<argument><expr><call><name><name pos:line="789" pos:column="25">parentOfA</name><op:operator pos:line="789" pos:column="34">.</op:operator><name pos:line="789" pos:column="35">FindMatches</name></name><argument_list pos:line="789" pos:column="46">()</argument_list></call><op:operator pos:line="789" pos:column="48">.</op:operator><call><name pos:line="789" pos:column="49">FirstOrDefault</name><argument_list pos:line="789" pos:column="63">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="789" pos:column="67">Is</name><op:operator pos:line="789" pos:column="69">.</op:operator><name pos:line="789" pos:column="70">SameAs</name></name><argument_list pos:line="789" pos:column="76">(<argument><expr><name pos:line="789" pos:column="77">typeB</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="792" pos:column="9">[<expr><name pos:line="792" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="793" pos:column="9">public</specifier> <name pos:line="793" pos:column="16">void</name></type> <name pos:line="793" pos:column="21">TestTypeUseForOtherNamespace</name><parameter_list pos:line="793" pos:column="49">()</parameter_list> <block pos:line="793" pos:column="52">{
            <comment type="line" pos:line="794" pos:column="13">//package A.B;</comment>
            <comment type="line" pos:line="795" pos:column="13">//class C {</comment>
            <comment type="line" pos:line="796" pos:column="13">//    int Foo();</comment>
            <comment type="line" pos:line="797" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="798" pos:column="13">string</name></type> <name pos:line="798" pos:column="20">c_xml</name> <init pos:line="798" pos:column="26">= <expr><lit:literal type="string" pos:line="798" pos:column="28">@"&lt;package pos:line=""1"" pos:column="&gt;package &lt;name&gt;&lt;name pos:line=""1"" pos:column="&gt;A&lt;/name&gt;&lt;op:operator pos:line=""1"" pos:column=""&gt;.&lt;/op:operator&gt;&lt;name pos:line=""1"" pos:column=""&gt;B&lt;/name&gt;&lt;/name&gt;;&lt;/package&gt;
&lt;class pos:line=""2"" pos:column="&gt;class &lt;name pos:line=""2"" pos:column="&gt;C&lt;/name&gt; &lt;block pos:line=""2"" pos:column="&gt;{
    &lt;function_decl&gt;&lt;type&gt;&lt;name pos:line=""3"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""3"" pos:column="&gt;Foo&lt;/name&gt;&lt;parameter_list pos:line=""3"" pos:column=""&gt;()&lt;/parameter_list&gt;;&lt;/function_decl&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="803" pos:column="13">//package D;</comment>
            <comment type="line" pos:line="804" pos:column="13">//import A.B.*;</comment>
            <comment type="line" pos:line="805" pos:column="13">//class E {</comment>
            <comment type="line" pos:line="806" pos:column="13">//    public static void main() {</comment>
            <comment type="line" pos:line="807" pos:column="13">//        C c = new C();</comment>
            <comment type="line" pos:line="808" pos:column="13">//        c.Foo();</comment>
            <comment type="line" pos:line="809" pos:column="13">//    }</comment>
            <comment type="line" pos:line="810" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="811" pos:column="13">string</name></type> <name pos:line="811" pos:column="20">e_xml</name> <init pos:line="811" pos:column="26">= <expr><lit:literal type="string" pos:line="811" pos:column="28">@"&lt;package pos:line=""1"" pos:column="&gt;package &lt;name pos:line=""1"" pos:column="&gt;D&lt;/name&gt;;&lt;/package&gt;
&lt;import pos:line=""2"" pos:column="&gt;import &lt;name&gt;&lt;name pos:line=""2"" pos:column="&gt;A&lt;/name&gt;&lt;op:operator pos:line=""2"" pos:column="&gt;.&lt;/op:operator&gt;&lt;name pos:line=""2"" pos:column=""&gt;B&lt;/name&gt;&lt;/name&gt;.*;&lt;/import&gt;
&lt;class pos:line=""3"" pos:column="&gt;class &lt;name pos:line=""3"" pos:column="&gt;E&lt;/name&gt; &lt;block pos:line=""3"" pos:column="&gt;{
    &lt;function&gt;&lt;type&gt;&lt;specifier pos:line=""4"" pos:column="&gt;public&lt;/specifier&gt; &lt;specifier pos:line=""4"" pos:column=""&gt;static&lt;/specifier&gt; &lt;name pos:line=""4"" pos:column=""&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""4"" pos:column=""&gt;main&lt;/name&gt;&lt;parameter_list pos:line=""4"" pos:column=""&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""4"" pos:column=""&gt;{
        &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""5"" pos:column="&gt;C&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""5"" pos:column=""&gt;c&lt;/name&gt; &lt;init pos:line=""5"" pos:column=""&gt;= &lt;expr&gt;&lt;op:operator pos:line=""5"" pos:column=""&gt;new&lt;/op:operator&gt; &lt;call&gt;&lt;name pos:line=""5"" pos:column=""&gt;C&lt;/name&gt;&lt;argument_list pos:line=""5"" pos:column=""&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;&lt;/init&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
        &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;&lt;name pos:line=""6"" pos:column="&gt;c&lt;/name&gt;&lt;op:operator pos:line=""6"" pos:column=""&gt;.&lt;/op:operator&gt;&lt;name pos:line=""6"" pos:column=""&gt;Foo&lt;/name&gt;&lt;/name&gt;&lt;argument_list pos:line=""6"" pos:column=""&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
    }&lt;/block&gt;&lt;/function&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="820" pos:column="13">var</name></type> <name pos:line="820" pos:column="17">cUnit</name> <init pos:line="820" pos:column="23">= <expr><call><name><name pos:line="820" pos:column="25">fileSetup</name><op:operator pos:line="820" pos:column="34">.</op:operator><name pos:line="820" pos:column="35">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="820" pos:column="59">(<argument><expr><name pos:line="820" pos:column="60">c_xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="820" pos:column="67">"C.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="821" pos:column="13">var</name></type> <name pos:line="821" pos:column="17">eUnit</name> <init pos:line="821" pos:column="23">= <expr><call><name><name pos:line="821" pos:column="25">fileSetup</name><op:operator pos:line="821" pos:column="34">.</op:operator><name pos:line="821" pos:column="35">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="821" pos:column="59">(<argument><expr><name pos:line="821" pos:column="60">e_xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="821" pos:column="67">"E.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="823" pos:column="13">var</name></type> <name pos:line="823" pos:column="17">globalScope</name> <init pos:line="823" pos:column="29">= <expr><call><name><name pos:line="823" pos:column="31">codeParser</name><op:operator pos:line="823" pos:column="41">.</op:operator><name pos:line="823" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="823" pos:column="55">(<argument><expr><name pos:line="823" pos:column="56">cUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="824" pos:column="13">globalScope</name> <op:operator pos:line="824" pos:column="25">=</op:operator> <call><name><name pos:line="824" pos:column="27">globalScope</name><op:operator pos:line="824" pos:column="38">.</op:operator><name pos:line="824" pos:column="39">Merge</name></name><argument_list pos:line="824" pos:column="44">(<argument><expr><call><name><name pos:line="824" pos:column="45">codeParser</name><op:operator pos:line="824" pos:column="55">.</op:operator><name pos:line="824" pos:column="56">ParseFileUnit</name></name><argument_list pos:line="824" pos:column="69">(<argument><expr><name pos:line="824" pos:column="70">eUnit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="826" pos:column="13">var</name></type> <name pos:line="826" pos:column="17">typeC</name> <init pos:line="826" pos:column="23">= <expr><call><name><name pos:line="826" pos:column="25">globalScope</name><op:operator pos:line="826" pos:column="36">.</op:operator><name><name pos:line="826" pos:column="37">GetDescendants</name><argument_list pos:line="826" pos:column="51">&lt;<argument><name pos:line="826" pos:column="52">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="826" pos:column="67">()</argument_list></call><op:operator pos:line="826" pos:column="69">.</op:operator><call><name pos:line="826" pos:column="70">Where</name><argument_list pos:line="826" pos:column="75">(<argument><expr><lambda><name pos:line="826" pos:column="76">t</name> <op:operator pos:line="826" pos:column="78">=&gt;</op:operator> <name><name pos:line="826" pos:column="81">t</name><op:operator pos:line="826" pos:column="82">.</op:operator><name pos:line="826" pos:column="83">Name</name></name> <op:operator pos:line="826" pos:column="88">==</op:operator> <lit:literal type="string" pos:line="826" pos:column="91">"C"</lit:literal></lambda></expr></argument>)</argument_list></call><op:operator pos:line="826" pos:column="95">.</op:operator><call><name pos:line="826" pos:column="96">FirstOrDefault</name><argument_list pos:line="826" pos:column="110">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="827" pos:column="13">var</name></type> <name pos:line="827" pos:column="17">typeE</name> <init pos:line="827" pos:column="23">= <expr><call><name><name pos:line="827" pos:column="25">globalScope</name><op:operator pos:line="827" pos:column="36">.</op:operator><name><name pos:line="827" pos:column="37">GetDescendants</name><argument_list pos:line="827" pos:column="51">&lt;<argument><name pos:line="827" pos:column="52">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="827" pos:column="67">()</argument_list></call><op:operator pos:line="827" pos:column="69">.</op:operator><call><name pos:line="827" pos:column="70">Where</name><argument_list pos:line="827" pos:column="75">(<argument><expr><lambda><name pos:line="827" pos:column="76">t</name> <op:operator pos:line="827" pos:column="78">=&gt;</op:operator> <name><name pos:line="827" pos:column="81">t</name><op:operator pos:line="827" pos:column="82">.</op:operator><name pos:line="827" pos:column="83">Name</name></name> <op:operator pos:line="827" pos:column="88">==</op:operator> <lit:literal type="string" pos:line="827" pos:column="91">"E"</lit:literal></lambda></expr></argument>)</argument_list></call><op:operator pos:line="827" pos:column="95">.</op:operator><call><name pos:line="827" pos:column="96">FirstOrDefault</name><argument_list pos:line="827" pos:column="110">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="829" pos:column="13">var</name></type> <name pos:line="829" pos:column="17">mainMethod</name> <init pos:line="829" pos:column="28">= <expr><call><name><name pos:line="829" pos:column="30">typeE</name><op:operator pos:line="829" pos:column="35">.</op:operator><name><name pos:line="829" pos:column="36">GetNamedChildren</name><argument_list pos:line="829" pos:column="52">&lt;<argument><name pos:line="829" pos:column="53">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="829" pos:column="70">(<argument><expr><lit:literal type="string" pos:line="829" pos:column="71">"main"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="829" pos:column="78">.</op:operator><call><name pos:line="829" pos:column="79">FirstOrDefault</name><argument_list pos:line="829" pos:column="93">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="830" pos:column="13">Assert</name><op:operator pos:line="830" pos:column="19">.</op:operator><name pos:line="830" pos:column="20">AreEqual</name></name><argument_list pos:line="830" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="830" pos:column="29">"main"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="830" pos:column="37">mainMethod</name><op:operator pos:line="830" pos:column="47">.</op:operator><name pos:line="830" pos:column="48">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="832" pos:column="13">var</name></type> <name pos:line="832" pos:column="17">fooMethod</name> <init pos:line="832" pos:column="27">= <expr><call><name><name pos:line="832" pos:column="29">typeC</name><op:operator pos:line="832" pos:column="34">.</op:operator><name pos:line="832" pos:column="35">ChildStatements</name><op:operator pos:line="832" pos:column="50">.</op:operator><name><name pos:line="832" pos:column="51">OfType</name><argument_list pos:line="832" pos:column="57">&lt;<argument><name pos:line="832" pos:column="58">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="832" pos:column="75">()</argument_list></call><op:operator pos:line="832" pos:column="77">.</op:operator><call><name pos:line="832" pos:column="78">FirstOrDefault</name><argument_list pos:line="832" pos:column="92">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="833" pos:column="13">Assert</name><op:operator pos:line="833" pos:column="19">.</op:operator><name pos:line="833" pos:column="20">IsNotNull</name></name><argument_list pos:line="833" pos:column="29">(<argument><expr><name pos:line="833" pos:column="30">fooMethod</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="833" pos:column="41">"no method foo found"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="834" pos:column="13">Assert</name><op:operator pos:line="834" pos:column="19">.</op:operator><name pos:line="834" pos:column="20">AreEqual</name></name><argument_list pos:line="834" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="834" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="834" pos:column="36">fooMethod</name><op:operator pos:line="834" pos:column="45">.</op:operator><name pos:line="834" pos:column="46">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="836" pos:column="13">var</name></type> <name pos:line="836" pos:column="17">cDeclaration</name> <init pos:line="836" pos:column="30">= <expr><call><name><name pos:line="836" pos:column="32">mainMethod</name><op:operator pos:line="836" pos:column="42">.</op:operator><name><name pos:line="836" pos:column="43">FindExpressions</name><argument_list pos:line="836" pos:column="58">&lt;<argument><name pos:line="836" pos:column="59">VariableDeclaration</name></argument>&gt;</argument_list></name></name><argument_list pos:line="836" pos:column="79">(<argument><expr><lit:literal type="boolean" pos:line="836" pos:column="80">true</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="836" pos:column="85">.</op:operator><call><name pos:line="836" pos:column="86">FirstOrDefault</name><argument_list pos:line="836" pos:column="100">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="837" pos:column="13">Assert</name><op:operator pos:line="837" pos:column="19">.</op:operator><name pos:line="837" pos:column="20">IsNotNull</name></name><argument_list pos:line="837" pos:column="29">(<argument><expr><name pos:line="837" pos:column="30">cDeclaration</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="837" pos:column="44">"No declaration found"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="838" pos:column="13">Assert</name><op:operator pos:line="838" pos:column="19">.</op:operator><name pos:line="838" pos:column="20">AreSame</name></name><argument_list pos:line="838" pos:column="27">(<argument><expr><name pos:line="838" pos:column="28">typeC</name></expr></argument>, <argument><expr><call><name><name pos:line="838" pos:column="35">cDeclaration</name><op:operator pos:line="838" pos:column="47">.</op:operator><name pos:line="838" pos:column="48">VariableType</name><op:operator pos:line="838" pos:column="60">.</op:operator><name pos:line="838" pos:column="61">ResolveType</name></name><argument_list pos:line="838" pos:column="72">()</argument_list></call><op:operator pos:line="838" pos:column="74">.</op:operator><call><name pos:line="838" pos:column="75">FirstOrDefault</name><argument_list pos:line="838" pos:column="89">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="840" pos:column="13">var</name></type> <name pos:line="840" pos:column="17">callToCConstructor</name> <init pos:line="840" pos:column="36">= <expr><call><name><name pos:line="840" pos:column="38">mainMethod</name><op:operator pos:line="840" pos:column="48">.</op:operator><name><name pos:line="840" pos:column="49">FindExpressions</name><argument_list pos:line="840" pos:column="64">&lt;<argument><name pos:line="840" pos:column="65">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="840" pos:column="76">(<argument><expr><lit:literal type="boolean" pos:line="840" pos:column="77">true</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="840" pos:column="82">.</op:operator><call><name pos:line="840" pos:column="83">First</name><argument_list pos:line="840" pos:column="88">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="841" pos:column="13">var</name></type> <name pos:line="841" pos:column="17">callToFoo</name> <init pos:line="841" pos:column="27">= <expr><call><name><name pos:line="841" pos:column="29">mainMethod</name><op:operator pos:line="841" pos:column="39">.</op:operator><name><name pos:line="841" pos:column="40">FindExpressions</name><argument_list pos:line="841" pos:column="55">&lt;<argument><name pos:line="841" pos:column="56">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="841" pos:column="67">(<argument><expr><lit:literal type="boolean" pos:line="841" pos:column="68">true</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="841" pos:column="73">.</op:operator><call><name pos:line="841" pos:column="74">Last</name><argument_list pos:line="841" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="843" pos:column="13">Assert</name><op:operator pos:line="843" pos:column="19">.</op:operator><name pos:line="843" pos:column="20">AreEqual</name></name><argument_list pos:line="843" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="843" pos:column="29">"C"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="843" pos:column="34">callToCConstructor</name><op:operator pos:line="843" pos:column="52">.</op:operator><name pos:line="843" pos:column="53">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="844" pos:column="13">Assert</name><op:operator pos:line="844" pos:column="19">.</op:operator><name pos:line="844" pos:column="20">That</name></name><argument_list pos:line="844" pos:column="24">(<argument><expr><name><name pos:line="844" pos:column="25">callToCConstructor</name><op:operator pos:line="844" pos:column="43">.</op:operator><name pos:line="844" pos:column="44">IsConstructor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="845" pos:column="13">Assert</name><op:operator pos:line="845" pos:column="19">.</op:operator><name pos:line="845" pos:column="20">IsNull</name></name><argument_list pos:line="845" pos:column="26">(<argument><expr><call><name><name pos:line="845" pos:column="27">callToCConstructor</name><op:operator pos:line="845" pos:column="45">.</op:operator><name pos:line="845" pos:column="46">FindMatches</name></name><argument_list pos:line="845" pos:column="57">()</argument_list></call><op:operator pos:line="845" pos:column="59">.</op:operator><call><name pos:line="845" pos:column="60">FirstOrDefault</name><argument_list pos:line="845" pos:column="74">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="847" pos:column="13">Assert</name><op:operator pos:line="847" pos:column="19">.</op:operator><name pos:line="847" pos:column="20">AreEqual</name></name><argument_list pos:line="847" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="847" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="847" pos:column="36">callToFoo</name><op:operator pos:line="847" pos:column="45">.</op:operator><name pos:line="847" pos:column="46">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="848" pos:column="13">Assert</name><op:operator pos:line="848" pos:column="19">.</op:operator><name pos:line="848" pos:column="20">AreSame</name></name><argument_list pos:line="848" pos:column="27">(<argument><expr><name pos:line="848" pos:column="28">fooMethod</name></expr></argument>, <argument><expr><call><name><name pos:line="848" pos:column="39">callToFoo</name><op:operator pos:line="848" pos:column="48">.</op:operator><name pos:line="848" pos:column="49">FindMatches</name></name><argument_list pos:line="848" pos:column="60">()</argument_list></call><op:operator pos:line="848" pos:column="62">.</op:operator><call><name pos:line="848" pos:column="63">FirstOrDefault</name><argument_list pos:line="848" pos:column="77">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
