<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML\Utilities\VisualStudioProjectReader.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2010 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">System</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Collections</name><op:operator pos:line="13" pos:column="25">.</op:operator><name pos:line="13" pos:column="26">Generic</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Linq</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Xml</name><op:operator pos:line="15" pos:column="17">.</op:operator><name pos:line="15" pos:column="18">Linq</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">IO</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Globalization</name></name>;</using>

<namespace pos:line="19" pos:column="1">namespace <name><name pos:line="19" pos:column="11">ABB</name><op:operator pos:line="19" pos:column="14">.</op:operator><name pos:line="19" pos:column="15">SrcML</name><op:operator pos:line="19" pos:column="20">.</op:operator><name pos:line="19" pos:column="21">Utilities</name></name>
<block pos:line="20" pos:column="1">{
    <comment type="line" pos:line="21" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="22" pos:column="5">/// Reader class for reading Visual Studo project files</comment>
    <comment type="line" pos:line="23" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="24" pos:column="5">public</specifier> <specifier pos:line="24" pos:column="12">sealed</specifier> class <name pos:line="24" pos:column="25">VisualStudioProjectReader</name>
    <block pos:line="25" pos:column="5">{
        <function_decl><type><specifier pos:line="26" pos:column="9">private</specifier> <specifier pos:line="26" pos:column="17">delegate</specifier> <name pos:line="26" pos:column="26">string</name><index pos:line="26" pos:column="32">[]</index></type> <name pos:line="26" pos:column="35">readDelegate</name><parameter_list pos:line="26" pos:column="47">(<param><decl><type><name pos:line="26" pos:column="48">string</name></type> <name pos:line="26" pos:column="55">filename</name></decl></param>)</parameter_list>;</function_decl>
        <decl_stmt><decl><type><specifier pos:line="27" pos:column="9">private</specifier> <specifier pos:line="27" pos:column="17">readonly</specifier> <specifier pos:line="27" pos:column="26">static</specifier> <name><name pos:line="27" pos:column="33">Dictionary</name><argument_list pos:line="27" pos:column="43">&lt;<argument><name pos:line="27" pos:column="44">string</name></argument>, <argument><name pos:line="27" pos:column="52">readDelegate</name></argument>&gt;</argument_list></name></type> <name pos:line="27" pos:column="66">mapping</name> <init pos:line="27" pos:column="74">= <expr><op:operator pos:line="27" pos:column="76">new</op:operator> <call><name><name pos:line="27" pos:column="80">Dictionary</name><argument_list pos:line="27" pos:column="90">&lt;<argument><name pos:line="27" pos:column="91">string</name></argument>, <argument><name pos:line="27" pos:column="99">readDelegate</name></argument>&gt;</argument_list></name><argument_list pos:line="27" pos:column="112">()</argument_list></call>
        <block pos:line="28" pos:column="9">{
            <expr><block pos:line="29" pos:column="13">{ <expr><lit:literal type="string" pos:line="29" pos:column="15">".vcproj"</lit:literal></expr>, <expr><name pos:line="29" pos:column="26">ReadVCProject</name></expr> }</block></expr>,
            <expr><block pos:line="30" pos:column="13">{ <expr><lit:literal type="string" pos:line="30" pos:column="15">".csproj"</lit:literal></expr>, <expr><name pos:line="30" pos:column="26">ReadCSProject</name></expr> }</block></expr>
        }</block></expr></init></decl>;</decl_stmt>

        <constructor><specifier pos:line="33" pos:column="9">private</specifier> <name pos:line="33" pos:column="17">VisualStudioProjectReader</name><parameter_list pos:line="33" pos:column="42">()</parameter_list>
        <block pos:line="34" pos:column="9">{

        }</block></constructor>

        <comment type="line" pos:line="38" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="39" pos:column="9">/// read the source files from the given Visual Studio project</comment>
        <comment type="line" pos:line="40" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="41" pos:column="9">/// &lt;param name="fileName"&gt;the filename for the Visual Studio project&lt;/param&gt;</comment>
        <comment type="line" pos:line="42" pos:column="9">/// &lt;returns&gt;an array of source files&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="43" pos:column="9">public</specifier> <specifier pos:line="43" pos:column="16">static</specifier> <name pos:line="43" pos:column="23">string</name><index pos:line="43" pos:column="29">[]</index></type> <name pos:line="43" pos:column="32">ReadProjectFile</name><parameter_list pos:line="43" pos:column="47">(<param><decl><type><name pos:line="43" pos:column="48">string</name></type> <name pos:line="43" pos:column="55">fileName</name></decl></param>)</parameter_list>
        <block pos:line="44" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="45" pos:column="13">string</name></type> <name pos:line="45" pos:column="20">ext</name> <init pos:line="45" pos:column="24">= <expr><call><name><name pos:line="45" pos:column="26">Path</name><op:operator pos:line="45" pos:column="30">.</op:operator><name pos:line="45" pos:column="31">GetExtension</name></name><argument_list pos:line="45" pos:column="43">(<argument><expr><name pos:line="45" pos:column="44">fileName</name></expr></argument>)</argument_list></call><op:operator pos:line="45" pos:column="53">.</op:operator><call><name pos:line="45" pos:column="54">ToUpperInvariant</name><argument_list pos:line="45" pos:column="70">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="46" pos:column="13">return <expr><name><name pos:line="46" pos:column="20">mapping</name><index pos:line="46" pos:column="27">[<expr><name pos:line="46" pos:column="28">ext</name></expr>]</index></name><op:operator pos:line="46" pos:column="32">(</op:operator><name pos:line="46" pos:column="33">fileName</name><op:operator pos:line="46" pos:column="41">)</op:operator></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="49" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="50" pos:column="9">/// Parse a C# project file</comment>
        <comment type="line" pos:line="51" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="52" pos:column="9">/// &lt;param name="fileName"&gt;the path to the C# project file&lt;/param&gt;</comment>
        <comment type="line" pos:line="53" pos:column="9">/// &lt;returns&gt;an array of source files&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="54" pos:column="9">public</specifier> <specifier pos:line="54" pos:column="16">static</specifier> <name pos:line="54" pos:column="23">string</name><index pos:line="54" pos:column="29">[]</index></type> <name pos:line="54" pos:column="32">ReadCSProject</name><parameter_list pos:line="54" pos:column="45">(<param><decl><type><name pos:line="54" pos:column="46">string</name></type> <name pos:line="54" pos:column="53">fileName</name></decl></param>)</parameter_list>
        <block pos:line="55" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="56" pos:column="13">XDocument</name></type> <name pos:line="56" pos:column="23">doc</name> <init pos:line="56" pos:column="27">= <expr><call><name><name pos:line="56" pos:column="29">XDocument</name><op:operator pos:line="56" pos:column="38">.</op:operator><name pos:line="56" pos:column="39">Load</name></name><argument_list pos:line="56" pos:column="43">(<argument><expr><name pos:line="56" pos:column="44">fileName</name></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="54">LoadOptions</name><op:operator pos:line="56" pos:column="65">.</op:operator><name pos:line="56" pos:column="66">None</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="57" pos:column="13">IEnumerable</name><argument_list pos:line="57" pos:column="24">&lt;<argument><name pos:line="57" pos:column="25">string</name></argument>&gt;</argument_list></name></type> <name pos:line="57" pos:column="33">sourcefiles</name> <init pos:line="57" pos:column="45">= <expr><linq><from pos:line="57" pos:column="47">from <expr><name pos:line="57" pos:column="52">srcfile</name></expr> <in pos:line="57" pos:column="60">in <expr><call><name><name pos:line="57" pos:column="63">doc</name><op:operator pos:line="57" pos:column="66">.</op:operator><name pos:line="57" pos:column="67">Root</name><op:operator pos:line="57" pos:column="71">.</op:operator><name pos:line="57" pos:column="72">Descendants</name></name><argument_list pos:line="57" pos:column="83">(<argument><expr><op:operator pos:line="57" pos:column="84">(</op:operator><name pos:line="57" pos:column="85">XNamespace</name><op:operator pos:line="57" pos:column="95">)</op:operator><lit:literal type="string" pos:line="57" pos:column="96">"http://schemas.microsoft.com/developer/msbuild/2003"</lit:literal> <op:operator pos:line="57" pos:column="150">+</op:operator> <lit:literal type="string" pos:line="57" pos:column="152">"Compile"</lit:literal></expr></argument>)</argument_list></call></expr></in></from>
                                              <select pos:line="58" pos:column="47">select <expr><op:operator pos:line="58" pos:column="54">(</op:operator><name pos:line="58" pos:column="55">string</name><op:operator pos:line="58" pos:column="61">)</op:operator><call><name><name pos:line="58" pos:column="62">srcfile</name><op:operator pos:line="58" pos:column="69">.</op:operator><name pos:line="58" pos:column="70">Attribute</name></name><argument_list pos:line="58" pos:column="79">(<argument><expr><lit:literal type="string" pos:line="58" pos:column="80">"Include"</lit:literal></expr></argument>)</argument_list></call></expr></select></linq></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="60" pos:column="13">string</name></type> <name pos:line="60" pos:column="20">dir</name> <init pos:line="60" pos:column="24">= <expr><call><name><name pos:line="60" pos:column="26">Path</name><op:operator pos:line="60" pos:column="30">.</op:operator><name pos:line="60" pos:column="31">GetDirectoryName</name></name><argument_list pos:line="60" pos:column="47">(<argument><expr><name pos:line="60" pos:column="48">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="61" pos:column="13">string</name><index pos:line="61" pos:column="19">[]</index></type> <name pos:line="61" pos:column="22">results</name> <init pos:line="61" pos:column="30">= <expr><call><name><name pos:line="61" pos:column="32">sourcefiles</name><op:operator pos:line="61" pos:column="43">.</op:operator><name><name pos:line="61" pos:column="44">ToArray</name><argument_list pos:line="61" pos:column="51">&lt;<argument><name pos:line="61" pos:column="52">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="61" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <for pos:line="63" pos:column="13">for (<init><decl><type><name pos:line="63" pos:column="18">int</name></type> <name pos:line="63" pos:column="22">i</name> <init pos:line="63" pos:column="24">= <expr><lit:literal type="number" pos:line="63" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="63" pos:column="29">i</name> <op:operator pos:line="63" pos:column="31">&lt;</op:operator> <name><name pos:line="63" pos:column="33">results</name><op:operator pos:line="63" pos:column="40">.</op:operator><name pos:line="63" pos:column="41">Length</name></name></expr>;</condition> <incr><expr><name pos:line="63" pos:column="49">i</name><op:operator pos:line="63" pos:column="50">++</op:operator></expr></incr>)
            <block pos:line="64" pos:column="13">{
                <if pos:line="65" pos:column="17">if <condition pos:line="65" pos:column="20">(<expr><op:operator pos:line="65" pos:column="21">!</op:operator><call><name><name pos:line="65" pos:column="22">Path</name><op:operator pos:line="65" pos:column="26">.</op:operator><name pos:line="65" pos:column="27">IsPathRooted</name></name><argument_list pos:line="65" pos:column="39">(<argument><expr><name><name pos:line="65" pos:column="40">results</name><index pos:line="65" pos:column="47">[<expr><name pos:line="65" pos:column="48">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="65" pos:column="52">
                    <expr_stmt><expr><name><name pos:line="66" pos:column="21">results</name><index pos:line="66" pos:column="28">[<expr><name pos:line="66" pos:column="29">i</name></expr>]</index></name> <op:operator pos:line="66" pos:column="32">=</op:operator> <call><name><name pos:line="66" pos:column="34">Path</name><op:operator pos:line="66" pos:column="38">.</op:operator><name pos:line="66" pos:column="39">Combine</name></name><argument_list pos:line="66" pos:column="46">(<argument><expr><name pos:line="66" pos:column="47">dir</name></expr></argument>, <argument><expr><name><name pos:line="66" pos:column="52">results</name><index pos:line="66" pos:column="59">[<expr><name pos:line="66" pos:column="60">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></for>
            <return pos:line="68" pos:column="13">return <expr><name pos:line="68" pos:column="20">results</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="71" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="72" pos:column="9">/// Parse a Visual C++ projecct file</comment>
        <comment type="line" pos:line="73" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="74" pos:column="9">/// &lt;param name="fileName"&gt;the path to the VC++ project file&lt;/param&gt;</comment>
        <comment type="line" pos:line="75" pos:column="9">/// &lt;returns&gt;an array of source files&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="76" pos:column="9">public</specifier> <specifier pos:line="76" pos:column="16">static</specifier> <name pos:line="76" pos:column="23">string</name><index pos:line="76" pos:column="29">[]</index></type> <name pos:line="76" pos:column="32">ReadVCProject</name><parameter_list pos:line="76" pos:column="45">(<param><decl><type><name pos:line="76" pos:column="46">string</name></type> <name pos:line="76" pos:column="53">fileName</name></decl></param>)</parameter_list>
        <block pos:line="77" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="78" pos:column="13">XDocument</name></type> <name pos:line="78" pos:column="23">doc</name> <init pos:line="78" pos:column="27">= <expr><call><name><name pos:line="78" pos:column="29">XDocument</name><op:operator pos:line="78" pos:column="38">.</op:operator><name pos:line="78" pos:column="39">Load</name></name><argument_list pos:line="78" pos:column="43">(<argument><expr><name pos:line="78" pos:column="44">fileName</name></expr></argument>, <argument><expr><name><name pos:line="78" pos:column="54">LoadOptions</name><op:operator pos:line="78" pos:column="65">.</op:operator><name pos:line="78" pos:column="66">None</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="79" pos:column="13">IEnumerable</name><argument_list pos:line="79" pos:column="24">&lt;<argument><name pos:line="79" pos:column="25">string</name></argument>&gt;</argument_list></name></type> <name pos:line="79" pos:column="33">sourcefiles</name> <init pos:line="79" pos:column="45">= <expr><linq><from pos:line="79" pos:column="47">from <expr><name pos:line="79" pos:column="52">srcfile</name></expr> <in pos:line="79" pos:column="60">in <expr><call><name><name pos:line="79" pos:column="63">doc</name><op:operator pos:line="79" pos:column="66">.</op:operator><name pos:line="79" pos:column="67">Root</name><op:operator pos:line="79" pos:column="71">.</op:operator><name pos:line="79" pos:column="72">Descendants</name></name><argument_list pos:line="79" pos:column="83">(<argument><expr><lit:literal type="string" pos:line="79" pos:column="84">"File"</lit:literal></expr></argument>)</argument_list></call></expr></in></from>
                                              <where pos:line="80" pos:column="47">where <expr><op:operator pos:line="80" pos:column="53">(</op:operator><op:operator pos:line="80" pos:column="54">(</op:operator><name pos:line="80" pos:column="55">string</name><op:operator pos:line="80" pos:column="61">)</op:operator><call><name><name pos:line="80" pos:column="62">srcfile</name><op:operator pos:line="80" pos:column="69">.</op:operator><name pos:line="80" pos:column="70">Parent</name><op:operator pos:line="80" pos:column="76">.</op:operator><name pos:line="80" pos:column="77">Attribute</name></name><argument_list pos:line="80" pos:column="86">(<argument><expr><lit:literal type="string" pos:line="80" pos:column="87">"Name"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="80" pos:column="95">==</op:operator> <lit:literal type="string" pos:line="80" pos:column="98">"Source Files"</lit:literal> <op:operator pos:line="80" pos:column="113">||</op:operator> 
                                                     <op:operator pos:line="81" pos:column="54">(</op:operator><name pos:line="81" pos:column="55">string</name><op:operator pos:line="81" pos:column="61">)</op:operator><call><name><name pos:line="81" pos:column="62">srcfile</name><op:operator pos:line="81" pos:column="69">.</op:operator><name pos:line="81" pos:column="70">Parent</name><op:operator pos:line="81" pos:column="76">.</op:operator><name pos:line="81" pos:column="77">Attribute</name></name><argument_list pos:line="81" pos:column="86">(<argument><expr><lit:literal type="string" pos:line="81" pos:column="87">"Name"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="81" pos:column="95">==</op:operator> <lit:literal type="string" pos:line="81" pos:column="98">"Header Files"</lit:literal><op:operator pos:line="81" pos:column="112">)</op:operator></expr></where>
                                              <select pos:line="82" pos:column="47">select <expr><op:operator pos:line="82" pos:column="54">(</op:operator><name pos:line="82" pos:column="55">string</name><op:operator pos:line="82" pos:column="61">)</op:operator><call><name><name pos:line="82" pos:column="62">srcfile</name><op:operator pos:line="82" pos:column="69">.</op:operator><name pos:line="82" pos:column="70">Attribute</name></name><argument_list pos:line="82" pos:column="79">(<argument><expr><lit:literal type="string" pos:line="82" pos:column="80">"RelativePath"</lit:literal></expr></argument>)</argument_list></call></expr></select></linq></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="84" pos:column="13">string</name></type> <name pos:line="84" pos:column="20">dir</name> <init pos:line="84" pos:column="24">= <expr><call><name><name pos:line="84" pos:column="26">Path</name><op:operator pos:line="84" pos:column="30">.</op:operator><name pos:line="84" pos:column="31">GetDirectoryName</name></name><argument_list pos:line="84" pos:column="47">(<argument><expr><name pos:line="84" pos:column="48">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="85" pos:column="13">string</name><index pos:line="85" pos:column="19">[]</index></type> <name pos:line="85" pos:column="22">results</name> <init pos:line="85" pos:column="30">= <expr><call><name><name pos:line="85" pos:column="32">sourcefiles</name><op:operator pos:line="85" pos:column="43">.</op:operator><name><name pos:line="85" pos:column="44">ToArray</name><argument_list pos:line="85" pos:column="51">&lt;<argument><name pos:line="85" pos:column="52">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="85" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <for pos:line="87" pos:column="13">for (<init><decl><type><name pos:line="87" pos:column="18">int</name></type> <name pos:line="87" pos:column="22">i</name> <init pos:line="87" pos:column="24">= <expr><lit:literal type="number" pos:line="87" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="87" pos:column="29">i</name> <op:operator pos:line="87" pos:column="31">&lt;</op:operator> <name><name pos:line="87" pos:column="33">results</name><op:operator pos:line="87" pos:column="40">.</op:operator><name pos:line="87" pos:column="41">Length</name></name></expr>;</condition> <incr><expr><name pos:line="87" pos:column="49">i</name><op:operator pos:line="87" pos:column="50">++</op:operator></expr></incr>)
            <block pos:line="88" pos:column="13">{
                <if pos:line="89" pos:column="17">if <condition pos:line="89" pos:column="20">(<expr><op:operator pos:line="89" pos:column="21">!</op:operator><call><name><name pos:line="89" pos:column="22">Path</name><op:operator pos:line="89" pos:column="26">.</op:operator><name pos:line="89" pos:column="27">IsPathRooted</name></name><argument_list pos:line="89" pos:column="39">(<argument><expr><name><name pos:line="89" pos:column="40">results</name><index pos:line="89" pos:column="47">[<expr><name pos:line="89" pos:column="48">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="89" pos:column="52">
                    <expr_stmt><expr><name><name pos:line="90" pos:column="21">results</name><index pos:line="90" pos:column="28">[<expr><name pos:line="90" pos:column="29">i</name></expr>]</index></name> <op:operator pos:line="90" pos:column="32">=</op:operator> <call><name><name pos:line="90" pos:column="34">Path</name><op:operator pos:line="90" pos:column="38">.</op:operator><name pos:line="90" pos:column="39">Combine</name></name><argument_list pos:line="90" pos:column="46">(<argument><expr><name pos:line="90" pos:column="47">dir</name></expr></argument>, <argument><expr><name><name pos:line="90" pos:column="52">results</name><index pos:line="90" pos:column="59">[<expr><name pos:line="90" pos:column="60">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></for>
            <return pos:line="92" pos:column="13">return <expr><name pos:line="92" pos:column="20">results</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
