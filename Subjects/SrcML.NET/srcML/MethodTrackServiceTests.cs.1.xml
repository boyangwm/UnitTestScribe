<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\VisualStudio\ABB.SrcML.VisualStudio.SrcMLService.IntegrationTests\MethodTrackServiceTests.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">ComponentModel</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">IO</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Linq</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">Threading</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">System</name><op:operator pos:line="7" pos:column="13">.</op:operator><name pos:line="7" pos:column="14">Windows</name><op:operator pos:line="7" pos:column="21">.</op:operator><name pos:line="7" pos:column="22">Forms</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">ABB</name><op:operator pos:line="8" pos:column="10">.</op:operator><name pos:line="8" pos:column="11">SrcML</name><op:operator pos:line="8" pos:column="16">.</op:operator><name pos:line="8" pos:column="17">Test</name><op:operator pos:line="8" pos:column="21">.</op:operator><name pos:line="8" pos:column="22">Utilities</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">ABB</name><op:operator pos:line="9" pos:column="10">.</op:operator><name pos:line="9" pos:column="11">VisualStudio</name></name>;</using>
<using pos:line="10" pos:column="1">using <name pos:line="10" pos:column="7">EnvDTE</name>;</using>
<using pos:line="11" pos:column="1">using <name><name pos:line="11" pos:column="7">Microsoft</name><op:operator pos:line="11" pos:column="16">.</op:operator><name pos:line="11" pos:column="17">VisualStudio</name><op:operator pos:line="11" pos:column="29">.</op:operator><name pos:line="11" pos:column="30">TestTools</name><op:operator pos:line="11" pos:column="39">.</op:operator><name pos:line="11" pos:column="40">UnitTesting</name></name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">Microsoft</name><op:operator pos:line="12" pos:column="16">.</op:operator><name pos:line="12" pos:column="17">VSSDK</name><op:operator pos:line="12" pos:column="22">.</op:operator><name pos:line="12" pos:column="23">Tools</name><op:operator pos:line="12" pos:column="28">.</op:operator><name pos:line="12" pos:column="29">VsIdeTesting</name></name>;</using>
<using pos:line="13" pos:column="1">using <name pos:line="13" pos:column="7">Thread</name> <init pos:line="13" pos:column="14">= <expr><name><name pos:line="13" pos:column="16">System</name><op:operator pos:line="13" pos:column="22">.</op:operator><name pos:line="13" pos:column="23">Threading</name><op:operator pos:line="13" pos:column="32">.</op:operator><name pos:line="13" pos:column="33">Thread</name></name></expr></init>;</using>

<namespace pos:line="15" pos:column="1">namespace <name><name pos:line="15" pos:column="11">ABB</name><op:operator pos:line="15" pos:column="14">.</op:operator><name pos:line="15" pos:column="15">SrcML</name><op:operator pos:line="15" pos:column="20">.</op:operator><name pos:line="15" pos:column="21">VisualStudio</name><op:operator pos:line="15" pos:column="33">.</op:operator><name pos:line="15" pos:column="34">SrcMLService</name><op:operator pos:line="15" pos:column="46">.</op:operator><name pos:line="15" pos:column="47">IntegrationTests</name></name> <block pos:line="15" pos:column="64">{

    <class><attribute pos:line="17" pos:column="5">[<expr><name pos:line="17" pos:column="6">TestClass</name></expr>]</attribute>
    <specifier pos:line="18" pos:column="5">public</specifier> class <name pos:line="18" pos:column="18">MethodTrackServiceTests</name> <super pos:line="18" pos:column="42">: <name pos:line="18" pos:column="44">IInvoker</name></super> <block pos:line="18" pos:column="53">{
        <decl_stmt><decl><type><specifier pos:line="19" pos:column="9">private</specifier> <specifier pos:line="19" pos:column="17">const</specifier> <name pos:line="19" pos:column="23">string</name></type> <name pos:line="19" pos:column="30">TestSolutionName</name> <init pos:line="19" pos:column="47">= <expr><lit:literal type="string" pos:line="19" pos:column="49">"TestMethodTrackingSolution"</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="20" pos:column="9">private</specifier> <specifier pos:line="20" pos:column="17">static</specifier> <name pos:line="20" pos:column="24">object</name></type> <name pos:line="20" pos:column="31">TestLock</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="21" pos:column="9">private</specifier> <specifier pos:line="21" pos:column="17">static</specifier> <name pos:line="21" pos:column="24">Solution</name></type> <name pos:line="21" pos:column="33">TestSolution</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="22" pos:column="9">private</specifier> <specifier pos:line="22" pos:column="17">static</specifier> <name pos:line="22" pos:column="24">string</name></type> <name pos:line="22" pos:column="31">TestSolutionPath</name> <init pos:line="22" pos:column="48">= <expr><call><name><name pos:line="22" pos:column="50">Path</name><op:operator pos:line="22" pos:column="54">.</op:operator><name pos:line="22" pos:column="55">Combine</name></name><argument_list pos:line="22" pos:column="62">(<argument><expr><name pos:line="22" pos:column="63">TestSolutionName</name></expr></argument>, <argument><expr><name pos:line="22" pos:column="81">TestSolutionName</name> <op:operator pos:line="22" pos:column="98">+</op:operator> <lit:literal type="string" pos:line="22" pos:column="100">".sln"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="23" pos:column="9">private</specifier> <specifier pos:line="23" pos:column="17">static</specifier> <name pos:line="23" pos:column="24">DTE</name></type> <name pos:line="23" pos:column="28">testDTE</name></decl>;</decl_stmt>

        <function><type><attribute pos:line="25" pos:column="9">[<expr><name pos:line="25" pos:column="10">ClassInitialize</name></expr>]</attribute>
        <specifier pos:line="26" pos:column="9">public</specifier> <specifier pos:line="26" pos:column="16">static</specifier> <name pos:line="26" pos:column="23">void</name></type> <name pos:line="26" pos:column="28">ClassSetup</name><parameter_list pos:line="26" pos:column="38">(<param><decl><type><name pos:line="26" pos:column="39">TestContext</name></type> <name pos:line="26" pos:column="51">testContext</name></decl></param>)</parameter_list> <block pos:line="26" pos:column="64">{
            <comment type="line" pos:line="27" pos:column="13">// Create a local copy of the solution</comment>
            <expr_stmt><expr><call><name><name pos:line="28" pos:column="13">FileUtils</name><op:operator pos:line="28" pos:column="22">.</op:operator><name pos:line="28" pos:column="23">CopyDirectory</name></name><argument_list pos:line="28" pos:column="36">(<argument><expr><call><name><name pos:line="28" pos:column="37">Path</name><op:operator pos:line="28" pos:column="41">.</op:operator><name pos:line="28" pos:column="42">Combine</name></name><argument_list pos:line="28" pos:column="49">(<argument><expr><name><name pos:line="28" pos:column="50">TestConstants</name><op:operator pos:line="28" pos:column="63">.</op:operator><name pos:line="28" pos:column="64">InputFolderPath</name></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="81">TestSolutionName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="28" pos:column="100">TestSolutionName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="29" pos:column="13">TestLock</name> <op:operator pos:line="29" pos:column="22">=</op:operator> <op:operator pos:line="29" pos:column="24">new</op:operator> <call><name pos:line="29" pos:column="28">object</name><argument_list pos:line="29" pos:column="34">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="32" pos:column="9">public</specifier> <name pos:line="32" pos:column="16">void</name></type> <name pos:line="32" pos:column="21">Invoke</name><parameter_list pos:line="32" pos:column="27">(<param><decl><type><name pos:line="32" pos:column="28">MethodInvoker</name></type> <name pos:line="32" pos:column="42">globalSystemWindowsFormsMethodInvoker</name></decl></param>)</parameter_list> <block pos:line="32" pos:column="81">{
            <expr_stmt><expr><call><name><name pos:line="33" pos:column="13">UIThreadInvoker</name><op:operator pos:line="33" pos:column="28">.</op:operator><name pos:line="33" pos:column="29">Invoke</name></name><argument_list pos:line="33" pos:column="35">(<argument><expr><name pos:line="33" pos:column="36">globalSystemWindowsFormsMethodInvoker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="36" pos:column="9">[<expr><name pos:line="36" pos:column="10">TestMethod</name></expr>]</attribute>
        <attribute pos:line="37" pos:column="9">[<expr><call><name pos:line="37" pos:column="10">HostType</name><argument_list pos:line="37" pos:column="18">(<argument><expr><lit:literal type="string" pos:line="37" pos:column="19">"VS IDE"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="38" pos:column="9">public</specifier> <name pos:line="38" pos:column="16">void</name></type> <name pos:line="38" pos:column="21">TestCursorMonitoring</name><parameter_list pos:line="38" pos:column="41">()</parameter_list>
        <block pos:line="39" pos:column="9">{
            <comment type="line" pos:line="40" pos:column="13">// setup</comment>
            <decl_stmt><decl><type><name pos:line="41" pos:column="13">Project</name></type> <name pos:line="41" pos:column="21">project</name> <init pos:line="41" pos:column="29">= <expr><call><name><name pos:line="41" pos:column="31">TestHelpers</name><op:operator pos:line="41" pos:column="42">.</op:operator><name pos:line="41" pos:column="43">GetProjects</name></name><argument_list pos:line="41" pos:column="54">(<argument><expr><name pos:line="41" pos:column="55">TestSolution</name></expr></argument>)</argument_list></call><op:operator pos:line="41" pos:column="68">.</op:operator><call><name pos:line="41" pos:column="69">FirstOrDefault</name><argument_list pos:line="41" pos:column="83">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="42" pos:column="13">Assert</name><op:operator pos:line="42" pos:column="19">.</op:operator><name pos:line="42" pos:column="20">IsNotNull</name></name><argument_list pos:line="42" pos:column="29">(<argument><expr><name pos:line="42" pos:column="30">project</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="42" pos:column="39">"Couldn't get the project"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <decl_stmt><decl><type><name pos:line="44" pos:column="13">var</name></type> <name pos:line="44" pos:column="17">CMservice</name> <init pos:line="44" pos:column="27">= <expr><name><name pos:line="44" pos:column="29">TestHelpers</name><op:operator pos:line="44" pos:column="40">.</op:operator><name pos:line="44" pos:column="41">TestScaffoldCM</name><op:operator pos:line="44" pos:column="55">.</op:operator><name pos:line="44" pos:column="56">Service</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="46" pos:column="13">AutoResetEvent</name></type> <name pos:line="46" pos:column="28">resetEvent</name> <init pos:line="46" pos:column="39">= <expr><op:operator pos:line="46" pos:column="41">new</op:operator> <call><name pos:line="46" pos:column="45">AutoResetEvent</name><argument_list pos:line="46" pos:column="59">(<argument><expr><lit:literal type="boolean" pos:line="46" pos:column="60">false</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="48" pos:column="13">PropertyChangedEventHandler</name></type> <name pos:line="48" pos:column="41">action</name> <init pos:line="48" pos:column="48">= <expr><lambda><parameter_list pos:line="48" pos:column="50">(<param><decl><name pos:line="48" pos:column="51">o</name></decl></param>, <param><decl><name pos:line="48" pos:column="54">e</name></decl></param>)</parameter_list> <op:operator pos:line="48" pos:column="57">=&gt;</op:operator>
            <block pos:line="49" pos:column="13">{
                <lock pos:line="50" pos:column="17">lock (<expr><name pos:line="50" pos:column="23">TestLock</name></expr>)
                <block pos:line="51" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="52" pos:column="21">resetEvent</name><op:operator pos:line="52" pos:column="31">.</op:operator><name pos:line="52" pos:column="32">Set</name></name><argument_list pos:line="52" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
                }</block></lock>
            }</block></lambda></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="55" pos:column="13">TestHelpers</name><op:operator pos:line="55" pos:column="24">.</op:operator><name pos:line="55" pos:column="25">TestScaffoldCM</name><op:operator pos:line="55" pos:column="39">.</op:operator><name pos:line="55" pos:column="40">Service</name><op:operator pos:line="55" pos:column="47">.</op:operator><name pos:line="55" pos:column="48">PropertyChanged</name></name> <op:operator pos:line="55" pos:column="64">+=</op:operator> <name pos:line="55" pos:column="67">action</name></expr>;</expr_stmt>

            <comment type="line" pos:line="57" pos:column="13">// open a file (Class1.cs) </comment>
            <decl_stmt><decl><type><name pos:line="58" pos:column="13">string</name></type> <name pos:line="58" pos:column="20">filePath</name> <init pos:line="58" pos:column="29">= <expr><call><name><name pos:line="58" pos:column="31">Path</name><op:operator pos:line="58" pos:column="35">.</op:operator><name pos:line="58" pos:column="36">Combine</name></name><argument_list pos:line="58" pos:column="43">(<argument><expr><call><name><name pos:line="58" pos:column="44">Path</name><op:operator pos:line="58" pos:column="48">.</op:operator><name pos:line="58" pos:column="49">GetDirectoryName</name></name><argument_list pos:line="58" pos:column="65">(<argument><expr><name><name pos:line="58" pos:column="66">project</name><op:operator pos:line="58" pos:column="73">.</op:operator><name pos:line="58" pos:column="74">FullName</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="58" pos:column="85">"Class1.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="59" pos:column="13">var</name></type> <name pos:line="59" pos:column="17">window</name> <init pos:line="59" pos:column="24">= <expr><call><name><name pos:line="59" pos:column="26">testDTE</name><op:operator pos:line="59" pos:column="33">.</op:operator><name pos:line="59" pos:column="34">ItemOperations</name><op:operator pos:line="59" pos:column="48">.</op:operator><name pos:line="59" pos:column="49">OpenFile</name></name><argument_list pos:line="59" pos:column="57">(<argument><expr><name pos:line="59" pos:column="58">filePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="60" pos:column="13">Assert</name><op:operator pos:line="60" pos:column="19">.</op:operator><name pos:line="60" pos:column="20">AreEqual</name></name><argument_list pos:line="60" pos:column="28">(<argument><expr><name><name pos:line="60" pos:column="29">window</name><op:operator pos:line="60" pos:column="35">.</op:operator><name pos:line="60" pos:column="36">Kind</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="60" pos:column="42">"Document"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="61" pos:column="13">var</name></type> <name pos:line="61" pos:column="17">document</name> <init pos:line="61" pos:column="26">= <expr><name><name pos:line="61" pos:column="28">window</name><op:operator pos:line="61" pos:column="34">.</op:operator><name pos:line="61" pos:column="35">Document</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="62" pos:column="13">Assert</name><op:operator pos:line="62" pos:column="19">.</op:operator><name pos:line="62" pos:column="20">AreEqual</name></name><argument_list pos:line="62" pos:column="28">(<argument><expr><name><name pos:line="62" pos:column="29">document</name><op:operator pos:line="62" pos:column="37">.</op:operator><name pos:line="62" pos:column="38">Name</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="62" pos:column="44">"Class1.cs"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="63" pos:column="13">window</name><op:operator pos:line="63" pos:column="19">.</op:operator><name pos:line="63" pos:column="20">Activate</name></name><argument_list pos:line="63" pos:column="28">()</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="65" pos:column="13">// move cursor to line 15</comment>
            <expr_stmt><expr><call><name><name pos:line="66" pos:column="13">testDTE</name><op:operator pos:line="66" pos:column="20">.</op:operator><name pos:line="66" pos:column="21">ExecuteCommand</name></name><argument_list pos:line="66" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="66" pos:column="36">"Edit.Goto"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="66" pos:column="49">"15"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="67" pos:column="13">Assert</name><op:operator pos:line="67" pos:column="19">.</op:operator><name pos:line="67" pos:column="20">AreEqual</name></name><argument_list pos:line="67" pos:column="28">(<argument><expr><name><name pos:line="67" pos:column="29">CMservice</name><op:operator pos:line="67" pos:column="38">.</op:operator><name pos:line="67" pos:column="39">CurrentLineNumber</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="67" pos:column="58">15</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <expr_stmt><expr><name><name pos:line="69" pos:column="13">TestHelpers</name><op:operator pos:line="69" pos:column="24">.</op:operator><name pos:line="69" pos:column="25">TestScaffoldCM</name><op:operator pos:line="69" pos:column="39">.</op:operator><name pos:line="69" pos:column="40">Service</name><op:operator pos:line="69" pos:column="47">.</op:operator><name pos:line="69" pos:column="48">PropertyChanged</name></name> <op:operator pos:line="69" pos:column="64">-=</op:operator> <name pos:line="69" pos:column="67">action</name></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="72" pos:column="9">[<expr><name pos:line="72" pos:column="10">TestMethod</name></expr>]</attribute>
        <attribute pos:line="73" pos:column="9">[<expr><call><name pos:line="73" pos:column="10">HostType</name><argument_list pos:line="73" pos:column="18">(<argument><expr><lit:literal type="string" pos:line="73" pos:column="19">"VS IDE"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="74" pos:column="9">public</specifier> <name pos:line="74" pos:column="16">void</name></type> <name pos:line="74" pos:column="21">TestMethodTrackingsOnCursorMoving</name><parameter_list pos:line="74" pos:column="54">()</parameter_list>
        <block pos:line="75" pos:column="9">{
            <comment type="line" pos:line="76" pos:column="13">// setup</comment>
            <decl_stmt><decl><type><name pos:line="77" pos:column="13">Project</name></type> <name pos:line="77" pos:column="21">project</name> <init pos:line="77" pos:column="29">= <expr><call><name><name pos:line="77" pos:column="31">TestHelpers</name><op:operator pos:line="77" pos:column="42">.</op:operator><name pos:line="77" pos:column="43">GetProjects</name></name><argument_list pos:line="77" pos:column="54">(<argument><expr><name pos:line="77" pos:column="55">TestSolution</name></expr></argument>)</argument_list></call><op:operator pos:line="77" pos:column="68">.</op:operator><call><name pos:line="77" pos:column="69">FirstOrDefault</name><argument_list pos:line="77" pos:column="83">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="78" pos:column="13">Assert</name><op:operator pos:line="78" pos:column="19">.</op:operator><name pos:line="78" pos:column="20">IsNotNull</name></name><argument_list pos:line="78" pos:column="29">(<argument><expr><name pos:line="78" pos:column="30">project</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="78" pos:column="39">"Couldn't get the project"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="79" pos:column="13">var</name></type> <name pos:line="79" pos:column="17">archive</name> <init pos:line="79" pos:column="25">= <expr><name><name pos:line="79" pos:column="27">TestHelpers</name><op:operator pos:line="79" pos:column="38">.</op:operator><name pos:line="79" pos:column="39">TestScaffold</name><op:operator pos:line="79" pos:column="51">.</op:operator><name pos:line="79" pos:column="52">Service</name><op:operator pos:line="79" pos:column="59">.</op:operator><name pos:line="79" pos:column="60">CurrentSrcMLArchive</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="80" pos:column="13">var</name></type> <name pos:line="80" pos:column="17">dataarchive</name> <init pos:line="80" pos:column="29">= <expr><name><name pos:line="80" pos:column="31">TestHelpers</name><op:operator pos:line="80" pos:column="42">.</op:operator><name pos:line="80" pos:column="43">TestScaffoldData</name><op:operator pos:line="80" pos:column="59">.</op:operator><name pos:line="80" pos:column="60">Service</name><op:operator pos:line="80" pos:column="67">.</op:operator><name pos:line="80" pos:column="68">CurrentDataArchive</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="81" pos:column="13">var</name></type> <name pos:line="81" pos:column="17">MTservice</name> <init pos:line="81" pos:column="27">= <expr><name><name pos:line="81" pos:column="29">TestHelpers</name><op:operator pos:line="81" pos:column="40">.</op:operator><name pos:line="81" pos:column="41">TestScaffoldMT</name><op:operator pos:line="81" pos:column="55">.</op:operator><name pos:line="81" pos:column="56">Service</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="83" pos:column="13">Assert</name><op:operator pos:line="83" pos:column="19">.</op:operator><name pos:line="83" pos:column="20">IsNotNull</name></name><argument_list pos:line="83" pos:column="29">(<argument><expr><name pos:line="83" pos:column="30">archive</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="83" pos:column="39">"Could not get the SrcML Archive"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="84" pos:column="13">Assert</name><op:operator pos:line="84" pos:column="19">.</op:operator><name pos:line="84" pos:column="20">IsNotNull</name></name><argument_list pos:line="84" pos:column="29">(<argument><expr><name pos:line="84" pos:column="30">dataarchive</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="84" pos:column="43">"Could not get the Data Archive"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="86" pos:column="13">AutoResetEvent</name></type> <name pos:line="86" pos:column="28">resetEvent</name> <init pos:line="86" pos:column="39">= <expr><op:operator pos:line="86" pos:column="41">new</op:operator> <call><name pos:line="86" pos:column="45">AutoResetEvent</name><argument_list pos:line="86" pos:column="59">(<argument><expr><lit:literal type="boolean" pos:line="86" pos:column="60">false</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="87" pos:column="13">MethodEventType</name></type> <name pos:line="87" pos:column="29">expectedEventType</name> <init pos:line="87" pos:column="47">= <expr><name><name pos:line="87" pos:column="49">MethodEventType</name><op:operator pos:line="87" pos:column="64">.</op:operator><name pos:line="87" pos:column="65">PositionChanged</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name><name pos:line="89" pos:column="13">EventHandler</name><argument_list pos:line="89" pos:column="25">&lt;<argument><name pos:line="89" pos:column="26">MethodEventRaisedArgs</name></argument>&gt;</argument_list></name></type> <name pos:line="89" pos:column="49">action</name> <init pos:line="89" pos:column="56">= <expr><lambda><parameter_list pos:line="89" pos:column="58">(<param><decl><name pos:line="89" pos:column="59">o</name></decl></param>, <param><decl><name pos:line="89" pos:column="62">e</name></decl></param>)</parameter_list> <op:operator pos:line="89" pos:column="65">=&gt;</op:operator>
            <block pos:line="90" pos:column="13">{
                <lock pos:line="91" pos:column="17">lock(<expr><name pos:line="91" pos:column="22">TestLock</name></expr>) <block pos:line="91" pos:column="32">{
                    <if pos:line="92" pos:column="21">if<condition pos:line="92" pos:column="23">(<expr><name><name pos:line="92" pos:column="24">e</name><op:operator pos:line="92" pos:column="25">.</op:operator><name pos:line="92" pos:column="26">EventType</name></name> <op:operator pos:line="92" pos:column="36">==</op:operator> <name pos:line="92" pos:column="39">expectedEventType</name></expr>)</condition><then pos:line="92" pos:column="57"> 
                    <block pos:line="93" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="94" pos:column="25">resetEvent</name><op:operator pos:line="94" pos:column="35">.</op:operator><name pos:line="94" pos:column="36">Set</name></name><argument_list pos:line="94" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></lock>
            }</block></lambda></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="98" pos:column="13">TestHelpers</name><op:operator pos:line="98" pos:column="24">.</op:operator><name pos:line="98" pos:column="25">TestScaffoldMT</name><op:operator pos:line="98" pos:column="39">.</op:operator><name pos:line="98" pos:column="40">Service</name><op:operator pos:line="98" pos:column="47">.</op:operator><name pos:line="98" pos:column="48">MethodUpdatedEvent</name></name> <op:operator pos:line="98" pos:column="67">+=</op:operator> <name pos:line="98" pos:column="70">action</name></expr>;</expr_stmt> 

            <comment type="line" pos:line="100" pos:column="13">// open a file (Class1.cs) </comment>
            <decl_stmt><decl><type><name pos:line="101" pos:column="13">string</name></type> <name pos:line="101" pos:column="20">FilePath</name> <init pos:line="101" pos:column="29">= <expr><call><name><name pos:line="101" pos:column="31">Path</name><op:operator pos:line="101" pos:column="35">.</op:operator><name pos:line="101" pos:column="36">Combine</name></name><argument_list pos:line="101" pos:column="43">(<argument><expr><call><name><name pos:line="101" pos:column="44">Path</name><op:operator pos:line="101" pos:column="48">.</op:operator><name pos:line="101" pos:column="49">GetDirectoryName</name></name><argument_list pos:line="101" pos:column="65">(<argument><expr><name><name pos:line="101" pos:column="66">project</name><op:operator pos:line="101" pos:column="73">.</op:operator><name pos:line="101" pos:column="74">FullName</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="101" pos:column="85">"Class1.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="102" pos:column="13">var</name></type> <name pos:line="102" pos:column="17">window</name> <init pos:line="102" pos:column="24">= <expr><call><name><name pos:line="102" pos:column="26">testDTE</name><op:operator pos:line="102" pos:column="33">.</op:operator><name pos:line="102" pos:column="34">ItemOperations</name><op:operator pos:line="102" pos:column="48">.</op:operator><name pos:line="102" pos:column="49">OpenFile</name></name><argument_list pos:line="102" pos:column="57">(<argument><expr><name pos:line="102" pos:column="58">FilePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="103" pos:column="13">Assert</name><op:operator pos:line="103" pos:column="19">.</op:operator><name pos:line="103" pos:column="20">AreEqual</name></name><argument_list pos:line="103" pos:column="28">(<argument><expr><name><name pos:line="103" pos:column="29">window</name><op:operator pos:line="103" pos:column="35">.</op:operator><name pos:line="103" pos:column="36">Kind</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="103" pos:column="42">"Document"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="104" pos:column="13">var</name></type> <name pos:line="104" pos:column="17">document</name> <init pos:line="104" pos:column="26">= <expr><name><name pos:line="104" pos:column="28">window</name><op:operator pos:line="104" pos:column="34">.</op:operator><name pos:line="104" pos:column="35">Document</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="105" pos:column="13">Assert</name><op:operator pos:line="105" pos:column="19">.</op:operator><name pos:line="105" pos:column="20">AreEqual</name></name><argument_list pos:line="105" pos:column="28">(<argument><expr><name><name pos:line="105" pos:column="29">document</name><op:operator pos:line="105" pos:column="37">.</op:operator><name pos:line="105" pos:column="38">Name</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="105" pos:column="44">"Class1.cs"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="106" pos:column="13">window</name><op:operator pos:line="106" pos:column="19">.</op:operator><name pos:line="106" pos:column="20">Activate</name></name><argument_list pos:line="106" pos:column="28">()</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="108" pos:column="13">// move cursor to (15,x) which is in method "member1"</comment>
            <expr_stmt><expr><call><name><name pos:line="109" pos:column="13">testDTE</name><op:operator pos:line="109" pos:column="20">.</op:operator><name pos:line="109" pos:column="21">ExecuteCommand</name></name><argument_list pos:line="109" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="109" pos:column="36">"Edit.Goto"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="109" pos:column="49">"15"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="110" pos:column="13">Assert</name><op:operator pos:line="110" pos:column="19">.</op:operator><name pos:line="110" pos:column="20">AreEqual</name></name><argument_list pos:line="110" pos:column="28">(<argument><expr><name><name pos:line="110" pos:column="29">MTservice</name><op:operator pos:line="110" pos:column="38">.</op:operator><name pos:line="110" pos:column="39">CurrentLineNumber</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="110" pos:column="58">15</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="111" pos:column="13">Assert</name><op:operator pos:line="111" pos:column="19">.</op:operator><name pos:line="111" pos:column="20">AreEqual</name></name><argument_list pos:line="111" pos:column="28">(<argument><expr><name><name pos:line="111" pos:column="29">MTservice</name><op:operator pos:line="111" pos:column="38">.</op:operator><name pos:line="111" pos:column="39">CurrentMethod</name><op:operator pos:line="111" pos:column="52">.</op:operator><name pos:line="111" pos:column="53">Name</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="111" pos:column="59">"member1"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="112" pos:column="13">Assert</name><op:operator pos:line="112" pos:column="19">.</op:operator><name pos:line="112" pos:column="20">AreEqual</name></name><argument_list pos:line="112" pos:column="28">(<argument><expr><name><name pos:line="112" pos:column="29">MTservice</name><op:operator pos:line="112" pos:column="38">.</op:operator><name pos:line="112" pos:column="39">CurrentMethod</name><op:operator pos:line="112" pos:column="52">.</op:operator><name pos:line="112" pos:column="53">StartLineNumber</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="112" pos:column="70">13</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="113" pos:column="13">Console</name><op:operator pos:line="113" pos:column="20">.</op:operator><name pos:line="113" pos:column="21">WriteLine</name></name><argument_list pos:line="113" pos:column="30">(<argument><expr><name><name pos:line="113" pos:column="31">MTservice</name><op:operator pos:line="113" pos:column="40">.</op:operator><name pos:line="113" pos:column="41">CurrentMethod</name><op:operator pos:line="113" pos:column="54">.</op:operator><name pos:line="113" pos:column="55">NameSpace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="114" pos:column="13">Console</name><op:operator pos:line="114" pos:column="20">.</op:operator><name pos:line="114" pos:column="21">WriteLine</name></name><argument_list pos:line="114" pos:column="30">(<argument><expr><name><name pos:line="114" pos:column="31">MTservice</name><op:operator pos:line="114" pos:column="40">.</op:operator><name pos:line="114" pos:column="41">CurrentMethod</name><op:operator pos:line="114" pos:column="54">.</op:operator><name pos:line="114" pos:column="55">Type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name pos:line="115" pos:column="13">List</name><argument_list pos:line="115" pos:column="17">&lt;<argument><name pos:line="115" pos:column="18">string</name></argument>&gt;</argument_list></name></type> <name pos:line="115" pos:column="26">paranames</name> <init pos:line="115" pos:column="36">= <expr><op:operator pos:line="115" pos:column="38">new</op:operator> <name><name pos:line="115" pos:column="42">List</name><argument_list pos:line="115" pos:column="46">&lt;<argument><name pos:line="115" pos:column="47">string</name></argument>&gt;</argument_list></name> <block pos:line="115" pos:column="55">{<expr><lit:literal type="string" pos:line="115" pos:column="56">"x"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="115" pos:column="61">"y"</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="116" pos:column="13">Assert</name><op:operator pos:line="116" pos:column="19">.</op:operator><name pos:line="116" pos:column="20">AreEqual</name></name><argument_list pos:line="116" pos:column="28">(<argument><expr><name><name pos:line="116" pos:column="29">MTservice</name><op:operator pos:line="116" pos:column="38">.</op:operator><name pos:line="116" pos:column="39">CurrentMethod</name><op:operator pos:line="116" pos:column="52">.</op:operator><name pos:line="116" pos:column="53">ParameterNames</name><op:operator pos:line="116" pos:column="67">.</op:operator><name pos:line="116" pos:column="68">Count</name></name></expr></argument>, <argument><expr><name><name pos:line="116" pos:column="75">paranames</name><op:operator pos:line="116" pos:column="84">.</op:operator><name pos:line="116" pos:column="85">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for pos:line="117" pos:column="13">for (<init><decl><type><name pos:line="117" pos:column="18">int</name></type> <name pos:line="117" pos:column="22">i</name> <init pos:line="117" pos:column="24">= <expr><lit:literal type="number" pos:line="117" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="117" pos:column="29">i</name> <op:operator pos:line="117" pos:column="31">&lt;</op:operator> <name><name pos:line="117" pos:column="33">paranames</name><op:operator pos:line="117" pos:column="42">.</op:operator><name pos:line="117" pos:column="43">Count</name></name></expr>;</condition> <incr><expr><name pos:line="117" pos:column="50">i</name><op:operator pos:line="117" pos:column="51">++</op:operator></expr></incr>)
                <expr_stmt><expr><call><name><name pos:line="118" pos:column="17">Assert</name><op:operator pos:line="118" pos:column="23">.</op:operator><name pos:line="118" pos:column="24">AreEqual</name></name><argument_list pos:line="118" pos:column="32">(<argument><expr><name><name pos:line="118" pos:column="33">MTservice</name><op:operator pos:line="118" pos:column="42">.</op:operator><name pos:line="118" pos:column="43">CurrentMethod</name><op:operator pos:line="118" pos:column="56">.</op:operator><name pos:line="118" pos:column="57">ParameterNames</name><index pos:line="118" pos:column="71">[<expr><name pos:line="118" pos:column="72">i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name pos:line="118" pos:column="76">paranames</name><index pos:line="118" pos:column="85">[<expr><name pos:line="118" pos:column="86">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
            <decl_stmt><decl><type><name><name pos:line="119" pos:column="13">List</name><argument_list pos:line="119" pos:column="17">&lt;<argument><name pos:line="119" pos:column="18">string</name></argument>&gt;</argument_list></name></type> <name pos:line="119" pos:column="26">paratypes</name> <init pos:line="119" pos:column="36">= <expr><op:operator pos:line="119" pos:column="38">new</op:operator> <name><name pos:line="119" pos:column="42">List</name><argument_list pos:line="119" pos:column="46">&lt;<argument><name pos:line="119" pos:column="47">string</name></argument>&gt;</argument_list></name> <block pos:line="119" pos:column="55">{<expr><lit:literal type="string" pos:line="119" pos:column="56">"int"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="119" pos:column="63">"string"</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="120" pos:column="13">Assert</name><op:operator pos:line="120" pos:column="19">.</op:operator><name pos:line="120" pos:column="20">AreEqual</name></name><argument_list pos:line="120" pos:column="28">(<argument><expr><name><name pos:line="120" pos:column="29">MTservice</name><op:operator pos:line="120" pos:column="38">.</op:operator><name pos:line="120" pos:column="39">CurrentMethod</name><op:operator pos:line="120" pos:column="52">.</op:operator><name pos:line="120" pos:column="53">ParameterTypes</name><op:operator pos:line="120" pos:column="67">.</op:operator><name pos:line="120" pos:column="68">Count</name></name></expr></argument>, <argument><expr><name><name pos:line="120" pos:column="75">paratypes</name><op:operator pos:line="120" pos:column="84">.</op:operator><name pos:line="120" pos:column="85">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for pos:line="121" pos:column="13">for (<init><decl><type><name pos:line="121" pos:column="18">int</name></type> <name pos:line="121" pos:column="22">i</name> <init pos:line="121" pos:column="24">= <expr><lit:literal type="number" pos:line="121" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="121" pos:column="29">i</name> <op:operator pos:line="121" pos:column="31">&lt;</op:operator> <name><name pos:line="121" pos:column="33">paratypes</name><op:operator pos:line="121" pos:column="42">.</op:operator><name pos:line="121" pos:column="43">Count</name></name></expr>;</condition> <incr><expr><name pos:line="121" pos:column="50">i</name><op:operator pos:line="121" pos:column="51">++</op:operator></expr></incr>)
                <expr_stmt><expr><call><name><name pos:line="122" pos:column="17">Assert</name><op:operator pos:line="122" pos:column="23">.</op:operator><name pos:line="122" pos:column="24">AreEqual</name></name><argument_list pos:line="122" pos:column="32">(<argument><expr><name><name pos:line="122" pos:column="33">MTservice</name><op:operator pos:line="122" pos:column="42">.</op:operator><name pos:line="122" pos:column="43">CurrentMethod</name><op:operator pos:line="122" pos:column="56">.</op:operator><name pos:line="122" pos:column="57">ParameterTypes</name><index pos:line="122" pos:column="71">[<expr><name pos:line="122" pos:column="72">i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name pos:line="122" pos:column="76">paratypes</name><index pos:line="122" pos:column="85">[<expr><name pos:line="122" pos:column="86">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

                <expr_stmt><expr><name><name pos:line="124" pos:column="17">TestHelpers</name><op:operator pos:line="124" pos:column="28">.</op:operator><name pos:line="124" pos:column="29">TestScaffoldMT</name><op:operator pos:line="124" pos:column="43">.</op:operator><name pos:line="124" pos:column="44">Service</name><op:operator pos:line="124" pos:column="51">.</op:operator><name pos:line="124" pos:column="52">MethodUpdatedEvent</name></name> <op:operator pos:line="124" pos:column="71">-=</op:operator> <name pos:line="124" pos:column="74">action</name></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="127" pos:column="9">[<expr><name pos:line="127" pos:column="10">TestMethod</name></expr>]</attribute>
        <attribute pos:line="128" pos:column="9">[<expr><call><name pos:line="128" pos:column="10">HostType</name><argument_list pos:line="128" pos:column="18">(<argument><expr><lit:literal type="string" pos:line="128" pos:column="19">"VS IDE"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="129" pos:column="9">public</specifier> <name pos:line="129" pos:column="16">void</name></type> <name pos:line="129" pos:column="21">TestNavHistoryListInMethodTracking</name><parameter_list pos:line="129" pos:column="55">()</parameter_list>
        <block pos:line="130" pos:column="9">{
            <comment type="line" pos:line="131" pos:column="13">// setup</comment>
            <decl_stmt><decl><type><name pos:line="132" pos:column="13">Project</name></type> <name pos:line="132" pos:column="21">project</name> <init pos:line="132" pos:column="29">= <expr><call><name><name pos:line="132" pos:column="31">TestHelpers</name><op:operator pos:line="132" pos:column="42">.</op:operator><name pos:line="132" pos:column="43">GetProjects</name></name><argument_list pos:line="132" pos:column="54">(<argument><expr><name pos:line="132" pos:column="55">TestSolution</name></expr></argument>)</argument_list></call><op:operator pos:line="132" pos:column="68">.</op:operator><call><name pos:line="132" pos:column="69">FirstOrDefault</name><argument_list pos:line="132" pos:column="83">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="133" pos:column="13">Assert</name><op:operator pos:line="133" pos:column="19">.</op:operator><name pos:line="133" pos:column="20">IsNotNull</name></name><argument_list pos:line="133" pos:column="29">(<argument><expr><name pos:line="133" pos:column="30">project</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="133" pos:column="39">"Couldn't get the project"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="134" pos:column="13">var</name></type> <name pos:line="134" pos:column="17">archive</name> <init pos:line="134" pos:column="25">= <expr><name><name pos:line="134" pos:column="27">TestHelpers</name><op:operator pos:line="134" pos:column="38">.</op:operator><name pos:line="134" pos:column="39">TestScaffold</name><op:operator pos:line="134" pos:column="51">.</op:operator><name pos:line="134" pos:column="52">Service</name><op:operator pos:line="134" pos:column="59">.</op:operator><name pos:line="134" pos:column="60">CurrentSrcMLArchive</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="135" pos:column="13">var</name></type> <name pos:line="135" pos:column="17">dataarchive</name> <init pos:line="135" pos:column="29">= <expr><name><name pos:line="135" pos:column="31">TestHelpers</name><op:operator pos:line="135" pos:column="42">.</op:operator><name pos:line="135" pos:column="43">TestScaffoldData</name><op:operator pos:line="135" pos:column="59">.</op:operator><name pos:line="135" pos:column="60">Service</name><op:operator pos:line="135" pos:column="67">.</op:operator><name pos:line="135" pos:column="68">CurrentDataArchive</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="136" pos:column="13">var</name></type> <name pos:line="136" pos:column="17">MTservice</name> <init pos:line="136" pos:column="27">= <expr><name><name pos:line="136" pos:column="29">TestHelpers</name><op:operator pos:line="136" pos:column="40">.</op:operator><name pos:line="136" pos:column="41">TestScaffoldMT</name><op:operator pos:line="136" pos:column="55">.</op:operator><name pos:line="136" pos:column="56">Service</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="138" pos:column="13">Assert</name><op:operator pos:line="138" pos:column="19">.</op:operator><name pos:line="138" pos:column="20">IsNotNull</name></name><argument_list pos:line="138" pos:column="29">(<argument><expr><name pos:line="138" pos:column="30">archive</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="138" pos:column="39">"Could not get the SrcML Archive"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="139" pos:column="13">Assert</name><op:operator pos:line="139" pos:column="19">.</op:operator><name pos:line="139" pos:column="20">IsNotNull</name></name><argument_list pos:line="139" pos:column="29">(<argument><expr><name pos:line="139" pos:column="30">dataarchive</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="139" pos:column="43">"Could not get the Data Archive"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="141" pos:column="13">AutoResetEvent</name></type> <name pos:line="141" pos:column="28">resetEvent</name> <init pos:line="141" pos:column="39">= <expr><op:operator pos:line="141" pos:column="41">new</op:operator> <call><name pos:line="141" pos:column="45">AutoResetEvent</name><argument_list pos:line="141" pos:column="59">(<argument><expr><lit:literal type="boolean" pos:line="141" pos:column="60">false</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="142" pos:column="13">MethodEventType</name></type> <name pos:line="142" pos:column="29">expectedEventType</name> <init pos:line="142" pos:column="47">= <expr><name><name pos:line="142" pos:column="49">MethodEventType</name><op:operator pos:line="142" pos:column="64">.</op:operator><name pos:line="142" pos:column="65">PositionChanged</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name><name pos:line="144" pos:column="13">EventHandler</name><argument_list pos:line="144" pos:column="25">&lt;<argument><name pos:line="144" pos:column="26">MethodEventRaisedArgs</name></argument>&gt;</argument_list></name></type> <name pos:line="144" pos:column="49">action</name> <init pos:line="144" pos:column="56">= <expr><lambda><parameter_list pos:line="144" pos:column="58">(<param><decl><name pos:line="144" pos:column="59">o</name></decl></param>, <param><decl><name pos:line="144" pos:column="62">e</name></decl></param>)</parameter_list> <op:operator pos:line="144" pos:column="65">=&gt;</op:operator>
            <block pos:line="145" pos:column="13">{
                <lock pos:line="146" pos:column="17">lock (<expr><name pos:line="146" pos:column="23">TestLock</name></expr>)
                <block pos:line="147" pos:column="17">{
                    <if pos:line="148" pos:column="21">if <condition pos:line="148" pos:column="24">(<expr><name><name pos:line="148" pos:column="25">e</name><op:operator pos:line="148" pos:column="26">.</op:operator><name pos:line="148" pos:column="27">EventType</name></name> <op:operator pos:line="148" pos:column="37">==</op:operator> <name pos:line="148" pos:column="40">expectedEventType</name></expr>)</condition><then pos:line="148" pos:column="58">
                    <block pos:line="149" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="150" pos:column="25">resetEvent</name><op:operator pos:line="150" pos:column="35">.</op:operator><name pos:line="150" pos:column="36">Set</name></name><argument_list pos:line="150" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></lock>
            }</block></lambda></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="154" pos:column="13">TestHelpers</name><op:operator pos:line="154" pos:column="24">.</op:operator><name pos:line="154" pos:column="25">TestScaffoldMT</name><op:operator pos:line="154" pos:column="39">.</op:operator><name pos:line="154" pos:column="40">Service</name><op:operator pos:line="154" pos:column="47">.</op:operator><name pos:line="154" pos:column="48">MethodUpdatedEvent</name></name> <op:operator pos:line="154" pos:column="67">+=</op:operator> <name pos:line="154" pos:column="70">action</name></expr>;</expr_stmt>

            <comment type="line" pos:line="156" pos:column="13">// open a file (Class1.cs) </comment>
            <decl_stmt><decl><type><name pos:line="157" pos:column="13">string</name></type> <name pos:line="157" pos:column="20">FilePath</name> <init pos:line="157" pos:column="29">= <expr><call><name><name pos:line="157" pos:column="31">Path</name><op:operator pos:line="157" pos:column="35">.</op:operator><name pos:line="157" pos:column="36">Combine</name></name><argument_list pos:line="157" pos:column="43">(<argument><expr><call><name><name pos:line="157" pos:column="44">Path</name><op:operator pos:line="157" pos:column="48">.</op:operator><name pos:line="157" pos:column="49">GetDirectoryName</name></name><argument_list pos:line="157" pos:column="65">(<argument><expr><name><name pos:line="157" pos:column="66">project</name><op:operator pos:line="157" pos:column="73">.</op:operator><name pos:line="157" pos:column="74">FullName</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="157" pos:column="85">"Class1.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="158" pos:column="13">var</name></type> <name pos:line="158" pos:column="17">window</name> <init pos:line="158" pos:column="24">= <expr><call><name><name pos:line="158" pos:column="26">testDTE</name><op:operator pos:line="158" pos:column="33">.</op:operator><name pos:line="158" pos:column="34">ItemOperations</name><op:operator pos:line="158" pos:column="48">.</op:operator><name pos:line="158" pos:column="49">OpenFile</name></name><argument_list pos:line="158" pos:column="57">(<argument><expr><name pos:line="158" pos:column="58">FilePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="159" pos:column="13">window</name><op:operator pos:line="159" pos:column="19">.</op:operator><name pos:line="159" pos:column="20">Activate</name></name><argument_list pos:line="159" pos:column="28">()</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="161" pos:column="13">// move cursor to (15,x) which is in method "member1"</comment>
            <expr_stmt><expr><call><name><name pos:line="162" pos:column="13">testDTE</name><op:operator pos:line="162" pos:column="20">.</op:operator><name pos:line="162" pos:column="21">ExecuteCommand</name></name><argument_list pos:line="162" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="162" pos:column="36">"Edit.Goto"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="162" pos:column="49">"15"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="163" pos:column="13">Assert</name><op:operator pos:line="163" pos:column="19">.</op:operator><name pos:line="163" pos:column="20">AreEqual</name></name><argument_list pos:line="163" pos:column="28">(<argument><expr><name><name pos:line="163" pos:column="29">MTservice</name><op:operator pos:line="163" pos:column="38">.</op:operator><name pos:line="163" pos:column="39">NavigatedMethods</name><op:operator pos:line="163" pos:column="55">.</op:operator><name pos:line="163" pos:column="56">Count</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="163" pos:column="63">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="164" pos:column="13">Assert</name><op:operator pos:line="164" pos:column="19">.</op:operator><name pos:line="164" pos:column="20">AreEqual</name></name><argument_list pos:line="164" pos:column="28">(<argument><expr><name><name pos:line="164" pos:column="29">MTservice</name><op:operator pos:line="164" pos:column="38">.</op:operator><name pos:line="164" pos:column="39">NavigatedMethods</name><index pos:line="164" pos:column="55">[<expr><lit:literal type="number" pos:line="164" pos:column="56">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name><name pos:line="164" pos:column="60">MTservice</name><op:operator pos:line="164" pos:column="69">.</op:operator><name pos:line="164" pos:column="70">CurrentMethod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="166" pos:column="13">// move cursor to (16,x) which is still in method "member1"</comment>
            <expr_stmt><expr><call><name><name pos:line="167" pos:column="13">testDTE</name><op:operator pos:line="167" pos:column="20">.</op:operator><name pos:line="167" pos:column="21">ExecuteCommand</name></name><argument_list pos:line="167" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="167" pos:column="36">"Edit.Goto"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="167" pos:column="49">"16"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="168" pos:column="13">Assert</name><op:operator pos:line="168" pos:column="19">.</op:operator><name pos:line="168" pos:column="20">AreEqual</name></name><argument_list pos:line="168" pos:column="28">(<argument><expr><name><name pos:line="168" pos:column="29">MTservice</name><op:operator pos:line="168" pos:column="38">.</op:operator><name pos:line="168" pos:column="39">NavigatedMethods</name><op:operator pos:line="168" pos:column="55">.</op:operator><name pos:line="168" pos:column="56">Count</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="168" pos:column="63">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="169" pos:column="13">Assert</name><op:operator pos:line="169" pos:column="19">.</op:operator><name pos:line="169" pos:column="20">AreEqual</name></name><argument_list pos:line="169" pos:column="28">(<argument><expr><name><name pos:line="169" pos:column="29">MTservice</name><op:operator pos:line="169" pos:column="38">.</op:operator><name pos:line="169" pos:column="39">NavigatedMethods</name><index pos:line="169" pos:column="55">[<expr><lit:literal type="number" pos:line="169" pos:column="56">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name><name pos:line="169" pos:column="60">MTservice</name><op:operator pos:line="169" pos:column="69">.</op:operator><name pos:line="169" pos:column="70">CurrentMethod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="170" pos:column="13">var</name></type> <name pos:line="170" pos:column="17">oldMethod</name> <init pos:line="170" pos:column="27">= <expr><name><name pos:line="170" pos:column="29">MTservice</name><op:operator pos:line="170" pos:column="38">.</op:operator><name pos:line="170" pos:column="39">CurrentMethod</name></name></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="172" pos:column="13">// move cursor to (22,x) which is in method "member2"</comment>
            <expr_stmt><expr><call><name><name pos:line="173" pos:column="13">testDTE</name><op:operator pos:line="173" pos:column="20">.</op:operator><name pos:line="173" pos:column="21">ExecuteCommand</name></name><argument_list pos:line="173" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="173" pos:column="36">"Edit.Goto"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="173" pos:column="49">"22"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="174" pos:column="13">Assert</name><op:operator pos:line="174" pos:column="19">.</op:operator><name pos:line="174" pos:column="20">AreEqual</name></name><argument_list pos:line="174" pos:column="28">(<argument><expr><name><name pos:line="174" pos:column="29">MTservice</name><op:operator pos:line="174" pos:column="38">.</op:operator><name pos:line="174" pos:column="39">CurrentMethod</name><op:operator pos:line="174" pos:column="52">.</op:operator><name pos:line="174" pos:column="53">Name</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="174" pos:column="59">"member2"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="175" pos:column="13">Assert</name><op:operator pos:line="175" pos:column="19">.</op:operator><name pos:line="175" pos:column="20">AreEqual</name></name><argument_list pos:line="175" pos:column="28">(<argument><expr><name><name pos:line="175" pos:column="29">MTservice</name><op:operator pos:line="175" pos:column="38">.</op:operator><name pos:line="175" pos:column="39">CurrentMethod</name><op:operator pos:line="175" pos:column="52">.</op:operator><name pos:line="175" pos:column="53">StartLineNumber</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="175" pos:column="70">20</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="176" pos:column="13">Assert</name><op:operator pos:line="176" pos:column="19">.</op:operator><name pos:line="176" pos:column="20">AreEqual</name></name><argument_list pos:line="176" pos:column="28">(<argument><expr><name><name pos:line="176" pos:column="29">MTservice</name><op:operator pos:line="176" pos:column="38">.</op:operator><name pos:line="176" pos:column="39">CurrentMethod</name><op:operator pos:line="176" pos:column="52">.</op:operator><name pos:line="176" pos:column="53">ParameterNames</name><op:operator pos:line="176" pos:column="67">.</op:operator><name pos:line="176" pos:column="68">Count</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="176" pos:column="75">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="177" pos:column="13">Assert</name><op:operator pos:line="177" pos:column="19">.</op:operator><name pos:line="177" pos:column="20">AreEqual</name></name><argument_list pos:line="177" pos:column="28">(<argument><expr><name><name pos:line="177" pos:column="29">MTservice</name><op:operator pos:line="177" pos:column="38">.</op:operator><name pos:line="177" pos:column="39">NavigatedMethods</name><op:operator pos:line="177" pos:column="55">.</op:operator><name pos:line="177" pos:column="56">Count</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="177" pos:column="63">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="178" pos:column="13">Assert</name><op:operator pos:line="178" pos:column="19">.</op:operator><name pos:line="178" pos:column="20">AreEqual</name></name><argument_list pos:line="178" pos:column="28">(<argument><expr><name><name pos:line="178" pos:column="29">MTservice</name><op:operator pos:line="178" pos:column="38">.</op:operator><name pos:line="178" pos:column="39">NavigatedMethods</name><index pos:line="178" pos:column="55">[<expr><lit:literal type="number" pos:line="178" pos:column="56">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="178" pos:column="60">oldMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="179" pos:column="13">Assert</name><op:operator pos:line="179" pos:column="19">.</op:operator><name pos:line="179" pos:column="20">AreEqual</name></name><argument_list pos:line="179" pos:column="28">(<argument><expr><name><name pos:line="179" pos:column="29">MTservice</name><op:operator pos:line="179" pos:column="38">.</op:operator><name pos:line="179" pos:column="39">NavigatedMethods</name><index pos:line="179" pos:column="55">[<expr><lit:literal type="number" pos:line="179" pos:column="56">1</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name><name pos:line="179" pos:column="60">MTservice</name><op:operator pos:line="179" pos:column="69">.</op:operator><name pos:line="179" pos:column="70">CurrentMethod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name pos:line="181" pos:column="13">TestHelpers</name><op:operator pos:line="181" pos:column="24">.</op:operator><name pos:line="181" pos:column="25">TestScaffoldMT</name><op:operator pos:line="181" pos:column="39">.</op:operator><name pos:line="181" pos:column="40">Service</name><op:operator pos:line="181" pos:column="47">.</op:operator><name pos:line="181" pos:column="48">MethodUpdatedEvent</name></name> <op:operator pos:line="181" pos:column="67">-=</op:operator> <name pos:line="181" pos:column="70">action</name></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="184" pos:column="9">[<expr><name pos:line="184" pos:column="10">TestMethod</name></expr>]</attribute>
        <attribute pos:line="185" pos:column="9">[<expr><call><name pos:line="185" pos:column="10">HostType</name><argument_list pos:line="185" pos:column="18">(<argument><expr><lit:literal type="string" pos:line="185" pos:column="19">"VS IDE"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="186" pos:column="9">public</specifier> <name pos:line="186" pos:column="16">void</name></type> <name pos:line="186" pos:column="21">TestMethodTrackingsOnFileDelete</name><parameter_list pos:line="186" pos:column="52">()</parameter_list>
        <block pos:line="187" pos:column="9">{
            <comment type="line" pos:line="188" pos:column="13">// setup</comment>
            <decl_stmt><decl><type><name pos:line="189" pos:column="13">Project</name></type> <name pos:line="189" pos:column="21">project</name> <init pos:line="189" pos:column="29">= <expr><call><name><name pos:line="189" pos:column="31">TestHelpers</name><op:operator pos:line="189" pos:column="42">.</op:operator><name pos:line="189" pos:column="43">GetProjects</name></name><argument_list pos:line="189" pos:column="54">(<argument><expr><name pos:line="189" pos:column="55">TestSolution</name></expr></argument>)</argument_list></call><op:operator pos:line="189" pos:column="68">.</op:operator><call><name pos:line="189" pos:column="69">FirstOrDefault</name><argument_list pos:line="189" pos:column="83">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="190" pos:column="13">Assert</name><op:operator pos:line="190" pos:column="19">.</op:operator><name pos:line="190" pos:column="20">IsNotNull</name></name><argument_list pos:line="190" pos:column="29">(<argument><expr><name pos:line="190" pos:column="30">project</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="190" pos:column="39">"Couldn't get the project"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="191" pos:column="13">var</name></type> <name pos:line="191" pos:column="17">service</name> <init pos:line="191" pos:column="25">= <expr><name><name pos:line="191" pos:column="27">TestHelpers</name><op:operator pos:line="191" pos:column="38">.</op:operator><name pos:line="191" pos:column="39">TestScaffold</name><op:operator pos:line="191" pos:column="51">.</op:operator><name pos:line="191" pos:column="52">Service</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="192" pos:column="13">var</name></type> <name pos:line="192" pos:column="17">archive</name> <init pos:line="192" pos:column="25">= <expr><name><name pos:line="192" pos:column="27">TestHelpers</name><op:operator pos:line="192" pos:column="38">.</op:operator><name pos:line="192" pos:column="39">TestScaffold</name><op:operator pos:line="192" pos:column="51">.</op:operator><name pos:line="192" pos:column="52">Service</name><op:operator pos:line="192" pos:column="59">.</op:operator><name pos:line="192" pos:column="60">CurrentSrcMLArchive</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="193" pos:column="13">var</name></type> <name pos:line="193" pos:column="17">dataarchive</name> <init pos:line="193" pos:column="29">= <expr><name><name pos:line="193" pos:column="31">TestHelpers</name><op:operator pos:line="193" pos:column="42">.</op:operator><name pos:line="193" pos:column="43">TestScaffoldData</name><op:operator pos:line="193" pos:column="59">.</op:operator><name pos:line="193" pos:column="60">Service</name><op:operator pos:line="193" pos:column="67">.</op:operator><name pos:line="193" pos:column="68">CurrentDataArchive</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="194" pos:column="13">var</name></type> <name pos:line="194" pos:column="17">MTservice</name> <init pos:line="194" pos:column="27">= <expr><name><name pos:line="194" pos:column="29">TestHelpers</name><op:operator pos:line="194" pos:column="40">.</op:operator><name pos:line="194" pos:column="41">TestScaffoldMT</name><op:operator pos:line="194" pos:column="55">.</op:operator><name pos:line="194" pos:column="56">Service</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="196" pos:column="13">Assert</name><op:operator pos:line="196" pos:column="19">.</op:operator><name pos:line="196" pos:column="20">IsNotNull</name></name><argument_list pos:line="196" pos:column="29">(<argument><expr><name pos:line="196" pos:column="30">archive</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="196" pos:column="39">"Could not get the SrcML Archive"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="197" pos:column="13">Assert</name><op:operator pos:line="197" pos:column="19">.</op:operator><name pos:line="197" pos:column="20">IsNotNull</name></name><argument_list pos:line="197" pos:column="29">(<argument><expr><name pos:line="197" pos:column="30">dataarchive</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="197" pos:column="43">"Could not get the Data Archive"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="199" pos:column="13">int</name></type> <name pos:line="199" pos:column="17">scanInterval</name> <init pos:line="199" pos:column="30">= <expr><lit:literal type="number" pos:line="199" pos:column="32">5</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="200" pos:column="13">int</name></type> <name pos:line="200" pos:column="17">scanIntervalMs</name> <init pos:line="200" pos:column="32">= <expr><name pos:line="200" pos:column="34">scanInterval</name> <op:operator pos:line="200" pos:column="47">*</op:operator> <lit:literal type="number" pos:line="200" pos:column="49">1000</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="201" pos:column="13">service</name><op:operator pos:line="201" pos:column="20">.</op:operator><name pos:line="201" pos:column="21">ScanInterval</name></name> <op:operator pos:line="201" pos:column="34">=</op:operator> <name pos:line="201" pos:column="36">scanInterval</name></expr>;</expr_stmt> <comment type="line" pos:line="201" pos:column="50">//this is important for file change operation</comment>
            
            <decl_stmt><decl><type><name pos:line="203" pos:column="13">AutoResetEvent</name></type> <name pos:line="203" pos:column="28">resetEvent</name> <init pos:line="203" pos:column="39">= <expr><op:operator pos:line="203" pos:column="41">new</op:operator> <call><name pos:line="203" pos:column="45">AutoResetEvent</name><argument_list pos:line="203" pos:column="59">(<argument><expr><lit:literal type="boolean" pos:line="203" pos:column="60">false</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="204" pos:column="13">MethodEventType</name></type> <name pos:line="204" pos:column="29">expectedEventType</name> <init pos:line="204" pos:column="47">= <expr><name><name pos:line="204" pos:column="49">MethodEventType</name><op:operator pos:line="204" pos:column="64">.</op:operator><name pos:line="204" pos:column="65">MethodDeleted</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="205" pos:column="13">EventHandler</name><argument_list pos:line="205" pos:column="25">&lt;<argument><name pos:line="205" pos:column="26">MethodEventRaisedArgs</name></argument>&gt;</argument_list></name></type> <name pos:line="205" pos:column="49">action</name> <init pos:line="205" pos:column="56">= <expr><lambda><parameter_list pos:line="205" pos:column="58">(<param><decl><name pos:line="205" pos:column="59">o</name></decl></param>, <param><decl><name pos:line="205" pos:column="62">e</name></decl></param>)</parameter_list> <op:operator pos:line="205" pos:column="65">=&gt;</op:operator>
            <block pos:line="206" pos:column="13">{
                <comment type="line" pos:line="207" pos:column="17">//Console.WriteLine(e.EventType.ToString());</comment>
                
                <lock pos:line="209" pos:column="17">lock (<expr><name pos:line="209" pos:column="23">TestLock</name></expr>)
                <block pos:line="210" pos:column="17">{
                    <if pos:line="211" pos:column="21">if <condition pos:line="211" pos:column="24">(<expr><name><name pos:line="211" pos:column="25">e</name><op:operator pos:line="211" pos:column="26">.</op:operator><name pos:line="211" pos:column="27">EventType</name></name> <op:operator pos:line="211" pos:column="37">==</op:operator> <name pos:line="211" pos:column="40">expectedEventType</name></expr>)</condition><then pos:line="211" pos:column="58">
                    <block pos:line="212" pos:column="21">{   
                        <expr_stmt><expr><call><name><name pos:line="213" pos:column="25">resetEvent</name><op:operator pos:line="213" pos:column="35">.</op:operator><name pos:line="213" pos:column="36">Set</name></name><argument_list pos:line="213" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></lock>
            }</block></lambda></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="217" pos:column="13">TestHelpers</name><op:operator pos:line="217" pos:column="24">.</op:operator><name pos:line="217" pos:column="25">TestScaffoldMT</name><op:operator pos:line="217" pos:column="39">.</op:operator><name pos:line="217" pos:column="40">Service</name><op:operator pos:line="217" pos:column="47">.</op:operator><name pos:line="217" pos:column="48">MethodUpdatedEvent</name></name> <op:operator pos:line="217" pos:column="67">+=</op:operator> <name pos:line="217" pos:column="70">action</name></expr>;</expr_stmt>

            <comment type="line" pos:line="219" pos:column="13">// open a file (Class1.cs) </comment>
            <decl_stmt><decl><type><name pos:line="220" pos:column="13">string</name></type> <name pos:line="220" pos:column="20">FilePath</name> <init pos:line="220" pos:column="29">= <expr><call><name><name pos:line="220" pos:column="31">Path</name><op:operator pos:line="220" pos:column="35">.</op:operator><name pos:line="220" pos:column="36">Combine</name></name><argument_list pos:line="220" pos:column="43">(<argument><expr><call><name><name pos:line="220" pos:column="44">Path</name><op:operator pos:line="220" pos:column="48">.</op:operator><name pos:line="220" pos:column="49">GetDirectoryName</name></name><argument_list pos:line="220" pos:column="65">(<argument><expr><name><name pos:line="220" pos:column="66">project</name><op:operator pos:line="220" pos:column="73">.</op:operator><name pos:line="220" pos:column="74">FullName</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="220" pos:column="85">"Class1.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="221" pos:column="13">var</name></type> <name pos:line="221" pos:column="17">window</name> <init pos:line="221" pos:column="24">= <expr><call><name><name pos:line="221" pos:column="26">testDTE</name><op:operator pos:line="221" pos:column="33">.</op:operator><name pos:line="221" pos:column="34">ItemOperations</name><op:operator pos:line="221" pos:column="48">.</op:operator><name pos:line="221" pos:column="49">OpenFile</name></name><argument_list pos:line="221" pos:column="57">(<argument><expr><name pos:line="221" pos:column="58">FilePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="222" pos:column="13">window</name><op:operator pos:line="222" pos:column="19">.</op:operator><name pos:line="222" pos:column="20">Activate</name></name><argument_list pos:line="222" pos:column="28">()</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="224" pos:column="13">// move cursor to (15,x) which is in method "member1"</comment>
            <expr_stmt><expr><call><name><name pos:line="225" pos:column="13">testDTE</name><op:operator pos:line="225" pos:column="20">.</op:operator><name pos:line="225" pos:column="21">ExecuteCommand</name></name><argument_list pos:line="225" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="225" pos:column="36">"Edit.Goto"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="225" pos:column="49">"15"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="226" pos:column="13">var</name></type> <name pos:line="226" pos:column="17">navigatedMethod1</name> <init pos:line="226" pos:column="34">= <expr><name><name pos:line="226" pos:column="36">MTservice</name><op:operator pos:line="226" pos:column="45">.</op:operator><name pos:line="226" pos:column="46">CurrentMethod</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="227" pos:column="13">window</name><op:operator pos:line="227" pos:column="19">.</op:operator><name pos:line="227" pos:column="20">Close</name></name><argument_list pos:line="227" pos:column="25">()</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="229" pos:column="13">// add a file</comment>
            <decl_stmt><decl><type><name pos:line="230" pos:column="13">var</name></type> <name pos:line="230" pos:column="17">fileTemplate</name> <init pos:line="230" pos:column="30">= <expr><call><name><name pos:line="230" pos:column="32">Path</name><op:operator pos:line="230" pos:column="36">.</op:operator><name pos:line="230" pos:column="37">Combine</name></name><argument_list pos:line="230" pos:column="44">(<argument><expr><name><name pos:line="230" pos:column="45">TestConstants</name><op:operator pos:line="230" pos:column="58">.</op:operator><name pos:line="230" pos:column="59">TemplatesFolder</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="230" pos:column="76">"NewCSharpClass2.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="231" pos:column="13">var</name></type> <name pos:line="231" pos:column="17">newFilePath</name> <init pos:line="231" pos:column="29">= <expr><call><name><name pos:line="231" pos:column="31">Path</name><op:operator pos:line="231" pos:column="35">.</op:operator><name pos:line="231" pos:column="36">Combine</name></name><argument_list pos:line="231" pos:column="43">(<argument><expr><call><name><name pos:line="231" pos:column="44">Path</name><op:operator pos:line="231" pos:column="48">.</op:operator><name pos:line="231" pos:column="49">GetDirectoryName</name></name><argument_list pos:line="231" pos:column="65">(<argument><expr><name><name pos:line="231" pos:column="66">project</name><op:operator pos:line="231" pos:column="73">.</op:operator><name pos:line="231" pos:column="74">FullName</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="231" pos:column="85">"NewCSharpClass2.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="232" pos:column="13">var</name></type> <name pos:line="232" pos:column="17">item</name> <init pos:line="232" pos:column="22">= <expr><call><name><name pos:line="232" pos:column="24">project</name><op:operator pos:line="232" pos:column="31">.</op:operator><name pos:line="232" pos:column="32">ProjectItems</name><op:operator pos:line="232" pos:column="44">.</op:operator><name pos:line="232" pos:column="45">AddFromFileCopy</name></name><argument_list pos:line="232" pos:column="60">(<argument><expr><name pos:line="232" pos:column="61">fileTemplate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="233" pos:column="13">project</name><op:operator pos:line="233" pos:column="20">.</op:operator><name pos:line="233" pos:column="21">Save</name></name><argument_list pos:line="233" pos:column="25">()</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="235" pos:column="13">//SrcMLService scans every 5 seconds, archive is not yet updated unless wait for 5 seconds </comment>
            <expr_stmt><expr><call><name><name pos:line="236" pos:column="13">Thread</name><op:operator pos:line="236" pos:column="19">.</op:operator><name pos:line="236" pos:column="20">Sleep</name></name><argument_list pos:line="236" pos:column="25">(<argument><expr><name pos:line="236" pos:column="26">scanIntervalMs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="238" pos:column="13">Assert</name><op:operator pos:line="238" pos:column="19">.</op:operator><name pos:line="238" pos:column="20">IsTrue</name></name><argument_list pos:line="238" pos:column="26">(<argument><expr><call><name><name pos:line="238" pos:column="27">archive</name><op:operator pos:line="238" pos:column="34">.</op:operator><name pos:line="238" pos:column="35">ContainsFile</name></name><argument_list pos:line="238" pos:column="47">(<argument><expr><name pos:line="238" pos:column="48">newFilePath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="239" pos:column="13">Assert</name><op:operator pos:line="239" pos:column="19">.</op:operator><name pos:line="239" pos:column="20">IsTrue</name></name><argument_list pos:line="239" pos:column="26">(<argument><expr><call><name><name pos:line="239" pos:column="27">dataarchive</name><op:operator pos:line="239" pos:column="38">.</op:operator><name pos:line="239" pos:column="39">ContainsFile</name></name><argument_list pos:line="239" pos:column="51">(<argument><expr><name pos:line="239" pos:column="52">newFilePath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <comment type="line" pos:line="241" pos:column="13">//open added file</comment>
            <expr_stmt><expr><name pos:line="242" pos:column="13">window</name> <op:operator pos:line="242" pos:column="20">=</op:operator> <call><name><name pos:line="242" pos:column="22">testDTE</name><op:operator pos:line="242" pos:column="29">.</op:operator><name pos:line="242" pos:column="30">ItemOperations</name><op:operator pos:line="242" pos:column="44">.</op:operator><name pos:line="242" pos:column="45">OpenFile</name></name><argument_list pos:line="242" pos:column="53">(<argument><expr><name pos:line="242" pos:column="54">newFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="243" pos:column="13">window</name><op:operator pos:line="243" pos:column="19">.</op:operator><name pos:line="243" pos:column="20">Activate</name></name><argument_list pos:line="243" pos:column="28">()</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="245" pos:column="13">// move cursor to (13,x) which is in method "foo"</comment>
            <expr_stmt><expr><name pos:line="246" pos:column="13">expectedEventType</name> <op:operator pos:line="246" pos:column="31">=</op:operator> <name><name pos:line="246" pos:column="33">MethodEventType</name><op:operator pos:line="246" pos:column="48">.</op:operator><name pos:line="246" pos:column="49">PositionChanged</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="247" pos:column="13">testDTE</name><op:operator pos:line="247" pos:column="20">.</op:operator><name pos:line="247" pos:column="21">ExecuteCommand</name></name><argument_list pos:line="247" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="247" pos:column="36">"Edit.Goto"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="247" pos:column="49">"13"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="248" pos:column="13">var</name></type> <name pos:line="248" pos:column="17">navigatedMethod2</name> <init pos:line="248" pos:column="34">= <expr><name><name pos:line="248" pos:column="36">MTservice</name><op:operator pos:line="248" pos:column="45">.</op:operator><name pos:line="248" pos:column="46">CurrentMethod</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="250" pos:column="13">Assert</name><op:operator pos:line="250" pos:column="19">.</op:operator><name pos:line="250" pos:column="20">IsTrue</name></name><argument_list pos:line="250" pos:column="26">(<argument><expr><call><name><name pos:line="250" pos:column="27">resetEvent</name><op:operator pos:line="250" pos:column="37">.</op:operator><name pos:line="250" pos:column="38">WaitOne</name></name><argument_list pos:line="250" pos:column="45">(<argument><expr><name pos:line="250" pos:column="46">scanIntervalMs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="251" pos:column="13">Assert</name><op:operator pos:line="251" pos:column="19">.</op:operator><name pos:line="251" pos:column="20">AreEqual</name></name><argument_list pos:line="251" pos:column="28">(<argument><expr><name><name pos:line="251" pos:column="29">navigatedMethod2</name><op:operator pos:line="251" pos:column="45">.</op:operator><name pos:line="251" pos:column="46">Name</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="251" pos:column="52">"foo"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="252" pos:column="13">Assert</name><op:operator pos:line="252" pos:column="19">.</op:operator><name pos:line="252" pos:column="20">AreEqual</name></name><argument_list pos:line="252" pos:column="28">(<argument><expr><name><name pos:line="252" pos:column="29">navigatedMethod2</name><op:operator pos:line="252" pos:column="45">.</op:operator><name pos:line="252" pos:column="46">StartLineNumber</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="252" pos:column="63">11</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="253" pos:column="13">Assert</name><op:operator pos:line="253" pos:column="19">.</op:operator><name pos:line="253" pos:column="20">AreEqual</name></name><argument_list pos:line="253" pos:column="28">(<argument><expr><name><name pos:line="253" pos:column="29">navigatedMethod2</name><op:operator pos:line="253" pos:column="45">.</op:operator><name pos:line="253" pos:column="46">ParameterNames</name><op:operator pos:line="253" pos:column="60">.</op:operator><name pos:line="253" pos:column="61">Count</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="253" pos:column="68">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="255" pos:column="13">Assert</name><op:operator pos:line="255" pos:column="19">.</op:operator><name pos:line="255" pos:column="20">AreEqual</name></name><argument_list pos:line="255" pos:column="28">(<argument><expr><name><name pos:line="255" pos:column="29">MTservice</name><op:operator pos:line="255" pos:column="38">.</op:operator><name pos:line="255" pos:column="39">NavigatedMethods</name><op:operator pos:line="255" pos:column="55">.</op:operator><name pos:line="255" pos:column="56">Count</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="255" pos:column="63">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="256" pos:column="13">Assert</name><op:operator pos:line="256" pos:column="19">.</op:operator><name pos:line="256" pos:column="20">AreEqual</name></name><argument_list pos:line="256" pos:column="28">(<argument><expr><name><name pos:line="256" pos:column="29">MTservice</name><op:operator pos:line="256" pos:column="38">.</op:operator><name pos:line="256" pos:column="39">NavigatedMethods</name><index pos:line="256" pos:column="55">[<expr><lit:literal type="number" pos:line="256" pos:column="56">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="256" pos:column="60">navigatedMethod1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="257" pos:column="13">Assert</name><op:operator pos:line="257" pos:column="19">.</op:operator><name pos:line="257" pos:column="20">AreEqual</name></name><argument_list pos:line="257" pos:column="28">(<argument><expr><name><name pos:line="257" pos:column="29">MTservice</name><op:operator pos:line="257" pos:column="38">.</op:operator><name pos:line="257" pos:column="39">NavigatedMethods</name><index pos:line="257" pos:column="55">[<expr><lit:literal type="number" pos:line="257" pos:column="56">1</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="257" pos:column="60">navigatedMethod2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="259" pos:column="13">// delete the file</comment>
            <expr_stmt><expr><name pos:line="260" pos:column="13">item</name> <op:operator pos:line="260" pos:column="18">=</op:operator> <call><name><name pos:line="260" pos:column="20">TestSolution</name><op:operator pos:line="260" pos:column="32">.</op:operator><name pos:line="260" pos:column="33">FindProjectItem</name></name><argument_list pos:line="260" pos:column="48">(<argument><expr><name pos:line="260" pos:column="49">newFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="261" pos:column="13">expectedEventType</name> <op:operator pos:line="261" pos:column="31">=</op:operator> <name><name pos:line="261" pos:column="33">MethodEventType</name><op:operator pos:line="261" pos:column="48">.</op:operator><name pos:line="261" pos:column="49">MethodDeleted</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="262" pos:column="13">item</name><op:operator pos:line="262" pos:column="17">.</op:operator><name pos:line="262" pos:column="18">Delete</name></name><argument_list pos:line="262" pos:column="24">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="263" pos:column="13">project</name><op:operator pos:line="263" pos:column="20">.</op:operator><name pos:line="263" pos:column="21">Save</name></name><argument_list pos:line="263" pos:column="25">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="265" pos:column="13">Assert</name><op:operator pos:line="265" pos:column="19">.</op:operator><name pos:line="265" pos:column="20">IsTrue</name></name><argument_list pos:line="265" pos:column="26">(<argument><expr><call><name><name pos:line="265" pos:column="27">resetEvent</name><op:operator pos:line="265" pos:column="37">.</op:operator><name pos:line="265" pos:column="38">WaitOne</name></name><argument_list pos:line="265" pos:column="45">(<argument><expr><name pos:line="265" pos:column="46">scanIntervalMs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="266" pos:column="13">Assert</name><op:operator pos:line="266" pos:column="19">.</op:operator><name pos:line="266" pos:column="20">AreEqual</name></name><argument_list pos:line="266" pos:column="28">(<argument><expr><name><name pos:line="266" pos:column="29">MTservice</name><op:operator pos:line="266" pos:column="38">.</op:operator><name pos:line="266" pos:column="39">NavigatedMethods</name><op:operator pos:line="266" pos:column="55">.</op:operator><name pos:line="266" pos:column="56">Count</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="266" pos:column="63">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="267" pos:column="13">Assert</name><op:operator pos:line="267" pos:column="19">.</op:operator><name pos:line="267" pos:column="20">AreEqual</name></name><argument_list pos:line="267" pos:column="28">(<argument><expr><name><name pos:line="267" pos:column="29">MTservice</name><op:operator pos:line="267" pos:column="38">.</op:operator><name pos:line="267" pos:column="39">NavigatedMethods</name><index pos:line="267" pos:column="55">[<expr><lit:literal type="number" pos:line="267" pos:column="56">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="267" pos:column="60">navigatedMethod1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <comment type="line" pos:line="269" pos:column="13">//since the file (containing navigatedMethoed2) was delected, this field should be reset</comment>
            <expr_stmt><expr><call><name><name pos:line="270" pos:column="13">Assert</name><op:operator pos:line="270" pos:column="19">.</op:operator><name pos:line="270" pos:column="20">AreEqual</name></name><argument_list pos:line="270" pos:column="28">(<argument><expr><name><name pos:line="270" pos:column="29">MTservice</name><op:operator pos:line="270" pos:column="38">.</op:operator><name pos:line="270" pos:column="39">CurrentMethod</name><op:operator pos:line="270" pos:column="52">.</op:operator><name pos:line="270" pos:column="53">Name</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="270" pos:column="59">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
             
            <expr_stmt><expr><name><name pos:line="272" pos:column="13">TestHelpers</name><op:operator pos:line="272" pos:column="24">.</op:operator><name pos:line="272" pos:column="25">TestScaffoldMT</name><op:operator pos:line="272" pos:column="39">.</op:operator><name pos:line="272" pos:column="40">Service</name><op:operator pos:line="272" pos:column="47">.</op:operator><name pos:line="272" pos:column="48">MethodUpdatedEvent</name></name> <op:operator pos:line="272" pos:column="67">-=</op:operator> <name pos:line="272" pos:column="70">action</name></expr>;</expr_stmt>
        }</block></function>


        <function><type><attribute pos:line="276" pos:column="9">[<expr><name pos:line="276" pos:column="10">TestMethod</name></expr>]</attribute>
        <attribute pos:line="277" pos:column="9">[<expr><call><name pos:line="277" pos:column="10">HostType</name><argument_list pos:line="277" pos:column="18">(<argument><expr><lit:literal type="string" pos:line="277" pos:column="19">"VS IDE"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="278" pos:column="9">public</specifier> <name pos:line="278" pos:column="16">void</name></type> <name pos:line="278" pos:column="21">TestMethodTrackingsOnFileChange</name><parameter_list pos:line="278" pos:column="52">()</parameter_list>
        <block pos:line="279" pos:column="9">{
            <comment type="line" pos:line="280" pos:column="13">// setup</comment>
            <decl_stmt><decl><type><name pos:line="281" pos:column="13">Project</name></type> <name pos:line="281" pos:column="21">project</name> <init pos:line="281" pos:column="29">= <expr><call><name><name pos:line="281" pos:column="31">TestHelpers</name><op:operator pos:line="281" pos:column="42">.</op:operator><name pos:line="281" pos:column="43">GetProjects</name></name><argument_list pos:line="281" pos:column="54">(<argument><expr><name pos:line="281" pos:column="55">TestSolution</name></expr></argument>)</argument_list></call><op:operator pos:line="281" pos:column="68">.</op:operator><call><name pos:line="281" pos:column="69">FirstOrDefault</name><argument_list pos:line="281" pos:column="83">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="282" pos:column="13">Assert</name><op:operator pos:line="282" pos:column="19">.</op:operator><name pos:line="282" pos:column="20">IsNotNull</name></name><argument_list pos:line="282" pos:column="29">(<argument><expr><name pos:line="282" pos:column="30">project</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="282" pos:column="39">"Couldn't get the project"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="283" pos:column="13">var</name></type> <name pos:line="283" pos:column="17">service</name> <init pos:line="283" pos:column="25">= <expr><name><name pos:line="283" pos:column="27">TestHelpers</name><op:operator pos:line="283" pos:column="38">.</op:operator><name pos:line="283" pos:column="39">TestScaffold</name><op:operator pos:line="283" pos:column="51">.</op:operator><name pos:line="283" pos:column="52">Service</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="284" pos:column="13">var</name></type> <name pos:line="284" pos:column="17">archive</name> <init pos:line="284" pos:column="25">= <expr><name><name pos:line="284" pos:column="27">TestHelpers</name><op:operator pos:line="284" pos:column="38">.</op:operator><name pos:line="284" pos:column="39">TestScaffold</name><op:operator pos:line="284" pos:column="51">.</op:operator><name pos:line="284" pos:column="52">Service</name><op:operator pos:line="284" pos:column="59">.</op:operator><name pos:line="284" pos:column="60">CurrentSrcMLArchive</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="285" pos:column="13">var</name></type> <name pos:line="285" pos:column="17">dataarchive</name> <init pos:line="285" pos:column="29">= <expr><name><name pos:line="285" pos:column="31">TestHelpers</name><op:operator pos:line="285" pos:column="42">.</op:operator><name pos:line="285" pos:column="43">TestScaffoldData</name><op:operator pos:line="285" pos:column="59">.</op:operator><name pos:line="285" pos:column="60">Service</name><op:operator pos:line="285" pos:column="67">.</op:operator><name pos:line="285" pos:column="68">CurrentDataArchive</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="286" pos:column="13">var</name></type> <name pos:line="286" pos:column="17">MTservice</name> <init pos:line="286" pos:column="27">= <expr><name><name pos:line="286" pos:column="29">TestHelpers</name><op:operator pos:line="286" pos:column="40">.</op:operator><name pos:line="286" pos:column="41">TestScaffoldMT</name><op:operator pos:line="286" pos:column="55">.</op:operator><name pos:line="286" pos:column="56">Service</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="288" pos:column="13">Assert</name><op:operator pos:line="288" pos:column="19">.</op:operator><name pos:line="288" pos:column="20">IsNotNull</name></name><argument_list pos:line="288" pos:column="29">(<argument><expr><name pos:line="288" pos:column="30">archive</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="288" pos:column="39">"Could not get the SrcML Archive"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="289" pos:column="13">Assert</name><op:operator pos:line="289" pos:column="19">.</op:operator><name pos:line="289" pos:column="20">IsNotNull</name></name><argument_list pos:line="289" pos:column="29">(<argument><expr><name pos:line="289" pos:column="30">dataarchive</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="289" pos:column="43">"Could not get the Data Archive"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="291" pos:column="13">int</name></type> <name pos:line="291" pos:column="17">scanInterval</name> <init pos:line="291" pos:column="30">= <expr><lit:literal type="number" pos:line="291" pos:column="32">5</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="292" pos:column="13">int</name></type> <name pos:line="292" pos:column="17">scanIntervalMs</name> <init pos:line="292" pos:column="32">= <expr><name pos:line="292" pos:column="34">scanInterval</name> <op:operator pos:line="292" pos:column="47">*</op:operator> <lit:literal type="number" pos:line="292" pos:column="49">1000</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="293" pos:column="13">service</name><op:operator pos:line="293" pos:column="20">.</op:operator><name pos:line="293" pos:column="21">ScanInterval</name></name> <op:operator pos:line="293" pos:column="34">=</op:operator> <name pos:line="293" pos:column="36">scanInterval</name></expr>;</expr_stmt> <comment type="line" pos:line="293" pos:column="50">//this is important for file change operation</comment>

            <decl_stmt><decl><type><name pos:line="295" pos:column="13">AutoResetEvent</name></type> <name pos:line="295" pos:column="28">resetEvent</name> <init pos:line="295" pos:column="39">= <expr><op:operator pos:line="295" pos:column="41">new</op:operator> <call><name pos:line="295" pos:column="45">AutoResetEvent</name><argument_list pos:line="295" pos:column="59">(<argument><expr><lit:literal type="boolean" pos:line="295" pos:column="60">false</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="296" pos:column="13">MethodEventType</name></type> <name pos:line="296" pos:column="29">expectedEventType</name> <init pos:line="296" pos:column="47">= <expr><name><name pos:line="296" pos:column="49">MethodEventType</name><op:operator pos:line="296" pos:column="64">.</op:operator><name pos:line="296" pos:column="65">MethodDeleted</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="297" pos:column="13">EventHandler</name><argument_list pos:line="297" pos:column="25">&lt;<argument><name pos:line="297" pos:column="26">MethodEventRaisedArgs</name></argument>&gt;</argument_list></name></type> <name pos:line="297" pos:column="49">action</name> <init pos:line="297" pos:column="56">= <expr><lambda><parameter_list pos:line="297" pos:column="58">(<param><decl><name pos:line="297" pos:column="59">o</name></decl></param>, <param><decl><name pos:line="297" pos:column="62">e</name></decl></param>)</parameter_list> <op:operator pos:line="297" pos:column="65">=&gt;</op:operator>
            <block pos:line="298" pos:column="13">{
                <lock pos:line="299" pos:column="17">lock (<expr><name pos:line="299" pos:column="23">TestLock</name></expr>)
                <block pos:line="300" pos:column="17">{
                    <if pos:line="301" pos:column="21">if <condition pos:line="301" pos:column="24">(<expr><name><name pos:line="301" pos:column="25">e</name><op:operator pos:line="301" pos:column="26">.</op:operator><name pos:line="301" pos:column="27">EventType</name></name> <op:operator pos:line="301" pos:column="37">==</op:operator> <name pos:line="301" pos:column="40">expectedEventType</name></expr>)</condition><then pos:line="301" pos:column="58">
                    <block pos:line="302" pos:column="21">{   
                        <expr_stmt><expr><call><name><name pos:line="303" pos:column="25">resetEvent</name><op:operator pos:line="303" pos:column="35">.</op:operator><name pos:line="303" pos:column="36">Set</name></name><argument_list pos:line="303" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></lock>
            }</block></lambda></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="307" pos:column="13">TestHelpers</name><op:operator pos:line="307" pos:column="24">.</op:operator><name pos:line="307" pos:column="25">TestScaffoldMT</name><op:operator pos:line="307" pos:column="39">.</op:operator><name pos:line="307" pos:column="40">Service</name><op:operator pos:line="307" pos:column="47">.</op:operator><name pos:line="307" pos:column="48">MethodUpdatedEvent</name></name> <op:operator pos:line="307" pos:column="67">+=</op:operator> <name pos:line="307" pos:column="70">action</name></expr>;</expr_stmt>

            <comment type="line" pos:line="309" pos:column="13">// open a file (Class1.cs) </comment>
            <decl_stmt><decl><type><name pos:line="310" pos:column="13">string</name></type> <name pos:line="310" pos:column="20">FilePath</name> <init pos:line="310" pos:column="29">= <expr><call><name><name pos:line="310" pos:column="31">Path</name><op:operator pos:line="310" pos:column="35">.</op:operator><name pos:line="310" pos:column="36">Combine</name></name><argument_list pos:line="310" pos:column="43">(<argument><expr><call><name><name pos:line="310" pos:column="44">Path</name><op:operator pos:line="310" pos:column="48">.</op:operator><name pos:line="310" pos:column="49">GetDirectoryName</name></name><argument_list pos:line="310" pos:column="65">(<argument><expr><name><name pos:line="310" pos:column="66">project</name><op:operator pos:line="310" pos:column="73">.</op:operator><name pos:line="310" pos:column="74">FullName</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="310" pos:column="85">"Class1.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="311" pos:column="13">var</name></type> <name pos:line="311" pos:column="17">window</name> <init pos:line="311" pos:column="24">= <expr><call><name><name pos:line="311" pos:column="26">testDTE</name><op:operator pos:line="311" pos:column="33">.</op:operator><name pos:line="311" pos:column="34">ItemOperations</name><op:operator pos:line="311" pos:column="48">.</op:operator><name pos:line="311" pos:column="49">OpenFile</name></name><argument_list pos:line="311" pos:column="57">(<argument><expr><name pos:line="311" pos:column="58">FilePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="312" pos:column="13">window</name><op:operator pos:line="312" pos:column="19">.</op:operator><name pos:line="312" pos:column="20">Activate</name></name><argument_list pos:line="312" pos:column="28">()</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="314" pos:column="13">// move cursor to (15,x) which is in method "member1"</comment>
            <expr_stmt><expr><name pos:line="315" pos:column="13">expectedEventType</name> <op:operator pos:line="315" pos:column="31">=</op:operator> <name><name pos:line="315" pos:column="33">MethodEventType</name><op:operator pos:line="315" pos:column="48">.</op:operator><name pos:line="315" pos:column="49">PositionChanged</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="316" pos:column="13">testDTE</name><op:operator pos:line="316" pos:column="20">.</op:operator><name pos:line="316" pos:column="21">ExecuteCommand</name></name><argument_list pos:line="316" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="316" pos:column="36">"Edit.Goto"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="316" pos:column="49">"15"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="317" pos:column="13">var</name></type> <name pos:line="317" pos:column="17">navigatedMethod1</name> <init pos:line="317" pos:column="34">= <expr><name><name pos:line="317" pos:column="36">MTservice</name><op:operator pos:line="317" pos:column="45">.</op:operator><name pos:line="317" pos:column="46">CurrentMethod</name></name></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="319" pos:column="13">//move cursor to (22,x) which is in method "member2"</comment>
            <expr_stmt><expr><name pos:line="320" pos:column="13">expectedEventType</name> <op:operator pos:line="320" pos:column="31">=</op:operator> <name><name pos:line="320" pos:column="33">MethodEventType</name><op:operator pos:line="320" pos:column="48">.</op:operator><name pos:line="320" pos:column="49">PositionChanged</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="321" pos:column="13">testDTE</name><op:operator pos:line="321" pos:column="20">.</op:operator><name pos:line="321" pos:column="21">ExecuteCommand</name></name><argument_list pos:line="321" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="321" pos:column="36">"Edit.Goto"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="321" pos:column="49">"22"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="322" pos:column="13">var</name></type> <name pos:line="322" pos:column="17">navigatedMethod2</name> <init pos:line="322" pos:column="34">= <expr><name><name pos:line="322" pos:column="36">MTservice</name><op:operator pos:line="322" pos:column="45">.</op:operator><name pos:line="322" pos:column="46">CurrentMethod</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="323" pos:column="13">window</name><op:operator pos:line="323" pos:column="19">.</op:operator><name pos:line="323" pos:column="20">Close</name></name><argument_list pos:line="323" pos:column="25">()</argument_list></call></expr>;</expr_stmt>
           
            <comment type="line" pos:line="325" pos:column="13">// replace the current file with another one --- simulate the "file change"</comment>
            <comment type="line" pos:line="326" pos:column="13">// Startline of "member1" is changed from 13 to 15</comment>
            <comment type="line" pos:line="327" pos:column="13">// method "member2" is commented out (deleted)</comment>
            <decl_stmt><decl><type><name pos:line="328" pos:column="13">var</name></type> <name pos:line="328" pos:column="17">fileTemplate</name> <init pos:line="328" pos:column="30">= <expr><call><name><name pos:line="328" pos:column="32">Path</name><op:operator pos:line="328" pos:column="36">.</op:operator><name pos:line="328" pos:column="37">Combine</name></name><argument_list pos:line="328" pos:column="44">(<argument><expr><name><name pos:line="328" pos:column="45">TestConstants</name><op:operator pos:line="328" pos:column="58">.</op:operator><name pos:line="328" pos:column="59">TemplatesFolder</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="328" pos:column="76">"Class1Changed.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="329" pos:column="13">var</name></type> <name pos:line="329" pos:column="17">newFilePath</name> <init pos:line="329" pos:column="29">= <expr><call><name><name pos:line="329" pos:column="31">Path</name><op:operator pos:line="329" pos:column="35">.</op:operator><name pos:line="329" pos:column="36">Combine</name></name><argument_list pos:line="329" pos:column="43">(<argument><expr><call><name><name pos:line="329" pos:column="44">Path</name><op:operator pos:line="329" pos:column="48">.</op:operator><name pos:line="329" pos:column="49">GetDirectoryName</name></name><argument_list pos:line="329" pos:column="65">(<argument><expr><name><name pos:line="329" pos:column="66">project</name><op:operator pos:line="329" pos:column="73">.</op:operator><name pos:line="329" pos:column="74">FullName</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="329" pos:column="85">"Class1.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="330" pos:column="13">File</name><op:operator pos:line="330" pos:column="17">.</op:operator><name pos:line="330" pos:column="18">Copy</name></name><argument_list pos:line="330" pos:column="22">(<argument><expr><name pos:line="330" pos:column="23">fileTemplate</name></expr></argument>, <argument><expr><name pos:line="330" pos:column="37">newFilePath</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="330" pos:column="50">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="331" pos:column="13">window</name> <op:operator pos:line="331" pos:column="20">=</op:operator> <call><name><name pos:line="331" pos:column="22">testDTE</name><op:operator pos:line="331" pos:column="29">.</op:operator><name pos:line="331" pos:column="30">ItemOperations</name><op:operator pos:line="331" pos:column="44">.</op:operator><name pos:line="331" pos:column="45">OpenFile</name></name><argument_list pos:line="331" pos:column="53">(<argument><expr><name pos:line="331" pos:column="54">newFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="332" pos:column="13">window</name><op:operator pos:line="332" pos:column="19">.</op:operator><name pos:line="332" pos:column="20">Activate</name></name><argument_list pos:line="332" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="333" pos:column="13">testDTE</name><op:operator pos:line="333" pos:column="20">.</op:operator><name pos:line="333" pos:column="21">ExecuteCommand</name></name><argument_list pos:line="333" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="333" pos:column="36">"EDIT.SelectAll"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="334" pos:column="13">testDTE</name><op:operator pos:line="334" pos:column="20">.</op:operator><name pos:line="334" pos:column="21">ExecuteCommand</name></name><argument_list pos:line="334" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="334" pos:column="36">"EDIT.Cut"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="335" pos:column="13">testDTE</name><op:operator pos:line="335" pos:column="20">.</op:operator><name pos:line="335" pos:column="21">ExecuteCommand</name></name><argument_list pos:line="335" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="335" pos:column="36">"Edit.Paste"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="336" pos:column="13">project</name><op:operator pos:line="336" pos:column="20">.</op:operator><name pos:line="336" pos:column="21">Save</name></name><argument_list pos:line="336" pos:column="25">()</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="338" pos:column="13">//method change (of member1) is raised first because it was navigated first</comment>
            <expr_stmt><expr><name pos:line="339" pos:column="13">expectedEventType</name> <op:operator pos:line="339" pos:column="31">=</op:operator> <name><name pos:line="339" pos:column="33">MethodEventType</name><op:operator pos:line="339" pos:column="48">.</op:operator><name pos:line="339" pos:column="49">MethodChanged</name></name></expr>;</expr_stmt> 
            <expr_stmt><expr><call><name><name pos:line="340" pos:column="13">Assert</name><op:operator pos:line="340" pos:column="19">.</op:operator><name pos:line="340" pos:column="20">IsTrue</name></name><argument_list pos:line="340" pos:column="26">(<argument><expr><call><name><name pos:line="340" pos:column="27">resetEvent</name><op:operator pos:line="340" pos:column="37">.</op:operator><name pos:line="340" pos:column="38">WaitOne</name></name><argument_list pos:line="340" pos:column="45">(<argument><expr><name pos:line="340" pos:column="46">scanIntervalMs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="342" pos:column="13">//method (of member2) is deleted</comment>
            <expr_stmt><expr><name pos:line="343" pos:column="13">expectedEventType</name> <op:operator pos:line="343" pos:column="31">=</op:operator> <name><name pos:line="343" pos:column="33">MethodEventType</name><op:operator pos:line="343" pos:column="48">.</op:operator><name pos:line="343" pos:column="49">MethodDeleted</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="344" pos:column="13">Assert</name><op:operator pos:line="344" pos:column="19">.</op:operator><name pos:line="344" pos:column="20">IsTrue</name></name><argument_list pos:line="344" pos:column="26">(<argument><expr><call><name><name pos:line="344" pos:column="27">resetEvent</name><op:operator pos:line="344" pos:column="37">.</op:operator><name pos:line="344" pos:column="38">WaitOne</name></name><argument_list pos:line="344" pos:column="45">(<argument><expr><name pos:line="344" pos:column="46">scanIntervalMs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <expr_stmt><expr><call><name><name pos:line="346" pos:column="13">Assert</name><op:operator pos:line="346" pos:column="19">.</op:operator><name pos:line="346" pos:column="20">AreEqual</name></name><argument_list pos:line="346" pos:column="28">(<argument><expr><name><name pos:line="346" pos:column="29">MTservice</name><op:operator pos:line="346" pos:column="38">.</op:operator><name pos:line="346" pos:column="39">NavigatedMethods</name><op:operator pos:line="346" pos:column="55">.</op:operator><name pos:line="346" pos:column="56">Count</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="346" pos:column="63">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="347" pos:column="13">Assert</name><op:operator pos:line="347" pos:column="19">.</op:operator><name pos:line="347" pos:column="20">IsTrue</name></name><argument_list pos:line="347" pos:column="26">(<argument><expr><name><name pos:line="347" pos:column="27">MTservice</name><op:operator pos:line="347" pos:column="36">.</op:operator><name pos:line="347" pos:column="37">NavigatedMethods</name><index pos:line="347" pos:column="53">[<expr><lit:literal type="number" pos:line="347" pos:column="54">0</lit:literal></expr>]</index></name><op:operator pos:line="347" pos:column="56">.</op:operator><call><name pos:line="347" pos:column="57">SignatureEquals</name><argument_list pos:line="347" pos:column="72">(<argument><expr><name pos:line="347" pos:column="73">navigatedMethod1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="348" pos:column="13">Assert</name><op:operator pos:line="348" pos:column="19">.</op:operator><name pos:line="348" pos:column="20">AreEqual</name></name><argument_list pos:line="348" pos:column="28">(<argument><expr><name><name pos:line="348" pos:column="29">MTservice</name><op:operator pos:line="348" pos:column="38">.</op:operator><name pos:line="348" pos:column="39">NavigatedMethods</name><index pos:line="348" pos:column="55">[<expr><lit:literal type="number" pos:line="348" pos:column="56">0</lit:literal></expr>]</index></name><op:operator pos:line="348" pos:column="58">.</op:operator><name pos:line="348" pos:column="59">StartLineNumber</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="348" pos:column="76">15</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name pos:line="350" pos:column="13">TestHelpers</name><op:operator pos:line="350" pos:column="24">.</op:operator><name pos:line="350" pos:column="25">TestScaffoldMT</name><op:operator pos:line="350" pos:column="39">.</op:operator><name pos:line="350" pos:column="40">Service</name><op:operator pos:line="350" pos:column="47">.</op:operator><name pos:line="350" pos:column="48">MethodUpdatedEvent</name></name> <op:operator pos:line="350" pos:column="67">-=</op:operator> <name pos:line="350" pos:column="70">action</name></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="353" pos:column="9">[<expr><name pos:line="353" pos:column="10">TestMethod</name></expr>]</attribute>
        <attribute pos:line="354" pos:column="9">[<expr><call><name pos:line="354" pos:column="10">HostType</name><argument_list pos:line="354" pos:column="18">(<argument><expr><lit:literal type="string" pos:line="354" pos:column="19">"VS IDE"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="355" pos:column="9">public</specifier> <name pos:line="355" pos:column="16">void</name></type> <name pos:line="355" pos:column="21">TestDataServiceStartup</name><parameter_list pos:line="355" pos:column="43">()</parameter_list>
        <block pos:line="356" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="357" pos:column="13">var</name></type> <name pos:line="357" pos:column="17">archive</name> <init pos:line="357" pos:column="25">= <expr><name><name pos:line="357" pos:column="27">TestHelpers</name><op:operator pos:line="357" pos:column="38">.</op:operator><name pos:line="357" pos:column="39">TestScaffold</name><op:operator pos:line="357" pos:column="51">.</op:operator><name pos:line="357" pos:column="52">Service</name><op:operator pos:line="357" pos:column="59">.</op:operator><name pos:line="357" pos:column="60">CurrentSrcMLArchive</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="358" pos:column="13">Assert</name><op:operator pos:line="358" pos:column="19">.</op:operator><name pos:line="358" pos:column="20">IsNotNull</name></name><argument_list pos:line="358" pos:column="29">(<argument><expr><name pos:line="358" pos:column="30">archive</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="358" pos:column="39">"Could not get the Srcml Archive"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="359" pos:column="13">var</name></type> <name pos:line="359" pos:column="17">storagepath</name> <init pos:line="359" pos:column="29">= <expr><name><name pos:line="359" pos:column="31">TestHelpers</name><op:operator pos:line="359" pos:column="42">.</op:operator><name pos:line="359" pos:column="43">TestScaffold</name><op:operator pos:line="359" pos:column="55">.</op:operator><name pos:line="359" pos:column="56">Service</name><op:operator pos:line="359" pos:column="63">.</op:operator><name pos:line="359" pos:column="64">CurrentMonitor</name><op:operator pos:line="359" pos:column="78">.</op:operator><name pos:line="359" pos:column="79">MonitorStoragePath</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="360" pos:column="13">Assert</name><op:operator pos:line="360" pos:column="19">.</op:operator><name pos:line="360" pos:column="20">AreNotEqual</name></name><argument_list pos:line="360" pos:column="31">(<argument><expr><name pos:line="360" pos:column="32">storagepath</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="360" pos:column="45">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="361" pos:column="13">Console</name><op:operator pos:line="361" pos:column="20">.</op:operator><name pos:line="361" pos:column="21">WriteLine</name></name><argument_list pos:line="361" pos:column="30">(<argument><expr><name pos:line="361" pos:column="31">storagepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            
            <decl_stmt><decl><type><name pos:line="364" pos:column="13">var</name></type> <name pos:line="364" pos:column="17">dataarchive</name> <init pos:line="364" pos:column="29">= <expr><name><name pos:line="364" pos:column="31">TestHelpers</name><op:operator pos:line="364" pos:column="42">.</op:operator><name pos:line="364" pos:column="43">TestScaffoldData</name><op:operator pos:line="364" pos:column="59">.</op:operator><name pos:line="364" pos:column="60">Service</name><op:operator pos:line="364" pos:column="67">.</op:operator><name pos:line="364" pos:column="68">CurrentDataArchive</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="365" pos:column="13">Assert</name><op:operator pos:line="365" pos:column="19">.</op:operator><name pos:line="365" pos:column="20">IsNotNull</name></name><argument_list pos:line="365" pos:column="29">(<argument><expr><name pos:line="365" pos:column="30">dataarchive</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="365" pos:column="43">"Could not get the Data Archive"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
            
            <decl_stmt><decl><type><name pos:line="367" pos:column="13">var</name></type> <name pos:line="367" pos:column="17">workingset</name> <init pos:line="367" pos:column="28">= <expr><name><name pos:line="367" pos:column="30">TestHelpers</name><op:operator pos:line="367" pos:column="41">.</op:operator><name pos:line="367" pos:column="42">TestScaffoldData</name><op:operator pos:line="367" pos:column="58">.</op:operator><name pos:line="367" pos:column="59">Service</name><op:operator pos:line="367" pos:column="66">.</op:operator><name pos:line="367" pos:column="67">CurrentWorkingSet</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="368" pos:column="13">Assert</name><op:operator pos:line="368" pos:column="19">.</op:operator><name pos:line="368" pos:column="20">IsNotNull</name></name><argument_list pos:line="368" pos:column="29">(<argument><expr><name pos:line="368" pos:column="30">workingset</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="368" pos:column="42">"Could not get the Workingset"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                       
        }</block></function>

        <function><type><attribute pos:line="371" pos:column="9">[<expr><name pos:line="371" pos:column="10">TestMethod</name></expr>]</attribute>
        <attribute pos:line="372" pos:column="9">[<expr><call><name pos:line="372" pos:column="10">HostType</name><argument_list pos:line="372" pos:column="18">(<argument><expr><lit:literal type="string" pos:line="372" pos:column="19">"VS IDE"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="373" pos:column="9">public</specifier> <name pos:line="373" pos:column="16">void</name></type> <name pos:line="373" pos:column="21">TestMtServiceStartup</name><parameter_list pos:line="373" pos:column="41">()</parameter_list> <block pos:line="373" pos:column="44">{
            <decl_stmt><decl><type><name pos:line="374" pos:column="13">var</name></type> <name pos:line="374" pos:column="17">method</name> <init pos:line="374" pos:column="24">= <expr><name><name pos:line="374" pos:column="26">TestHelpers</name><op:operator pos:line="374" pos:column="37">.</op:operator><name pos:line="374" pos:column="38">TestScaffoldMT</name><op:operator pos:line="374" pos:column="52">.</op:operator><name pos:line="374" pos:column="53">Service</name><op:operator pos:line="374" pos:column="60">.</op:operator><name pos:line="374" pos:column="61">CurrentMethod</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="375" pos:column="13">int</name></type> <name pos:line="375" pos:column="17">line</name> <init pos:line="375" pos:column="22">= <expr><name><name pos:line="375" pos:column="24">TestHelpers</name><op:operator pos:line="375" pos:column="35">.</op:operator><name pos:line="375" pos:column="36">TestScaffoldMT</name><op:operator pos:line="375" pos:column="50">.</op:operator><name pos:line="375" pos:column="51">Service</name><op:operator pos:line="375" pos:column="58">.</op:operator><name pos:line="375" pos:column="59">CurrentLineNumber</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="376" pos:column="13">int</name></type> <name pos:line="376" pos:column="17">column</name> <init pos:line="376" pos:column="24">= <expr><name><name pos:line="376" pos:column="26">TestHelpers</name><op:operator pos:line="376" pos:column="37">.</op:operator><name pos:line="376" pos:column="38">TestScaffoldMT</name><op:operator pos:line="376" pos:column="52">.</op:operator><name pos:line="376" pos:column="53">Service</name><op:operator pos:line="376" pos:column="60">.</op:operator><name pos:line="376" pos:column="61">CurrentColumnNumber</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="377" pos:column="13">Assert</name><op:operator pos:line="377" pos:column="19">.</op:operator><name pos:line="377" pos:column="20">IsNotNull</name></name><argument_list pos:line="377" pos:column="29">(<argument><expr><name pos:line="377" pos:column="30">method</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="377" pos:column="38">"Could not get the current file"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="378" pos:column="13">Assert</name><op:operator pos:line="378" pos:column="19">.</op:operator><name pos:line="378" pos:column="20">AreEqual</name></name><argument_list pos:line="378" pos:column="28">(<argument><expr><name pos:line="378" pos:column="29">line</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="378" pos:column="35">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="379" pos:column="13">Assert</name><op:operator pos:line="379" pos:column="19">.</op:operator><name pos:line="379" pos:column="20">AreEqual</name></name><argument_list pos:line="379" pos:column="28">(<argument><expr><name pos:line="379" pos:column="29">column</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="379" pos:column="37">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="382" pos:column="9">[<expr><name pos:line="382" pos:column="10">TestInitialize</name></expr>]</attribute>
        <specifier pos:line="383" pos:column="9">public</specifier> <name pos:line="383" pos:column="16">void</name></type> <name pos:line="383" pos:column="21">TestSetup</name><parameter_list pos:line="383" pos:column="30">()</parameter_list> <block pos:line="383" pos:column="33">{
            <expr_stmt><expr><name pos:line="384" pos:column="13">testDTE</name> <op:operator pos:line="384" pos:column="21">=</op:operator> <name><name pos:line="384" pos:column="23">VsIdeTestHostContext</name><op:operator pos:line="384" pos:column="43">.</op:operator><name pos:line="384" pos:column="44">Dte</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="385" pos:column="13">TestSolution</name> <op:operator pos:line="385" pos:column="26">=</op:operator> <name><name pos:line="385" pos:column="28">testDTE</name><op:operator pos:line="385" pos:column="35">.</op:operator><name pos:line="385" pos:column="36">Solution</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="386" pos:column="13">Assert</name><op:operator pos:line="386" pos:column="19">.</op:operator><name pos:line="386" pos:column="20">IsNotNull</name></name><argument_list pos:line="386" pos:column="29">(<argument><expr><name pos:line="386" pos:column="30">TestSolution</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="386" pos:column="44">"Could not get the solution"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="388" pos:column="13">TestSolution</name><op:operator pos:line="388" pos:column="25">.</op:operator><name pos:line="388" pos:column="26">Open</name></name><argument_list pos:line="388" pos:column="30">(<argument><expr><call><name><name pos:line="388" pos:column="31">Path</name><op:operator pos:line="388" pos:column="35">.</op:operator><name pos:line="388" pos:column="36">GetFullPath</name></name><argument_list pos:line="388" pos:column="47">(<argument><expr><name pos:line="388" pos:column="48">TestSolutionPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="389" pos:column="13">Assert</name><op:operator pos:line="389" pos:column="19">.</op:operator><name pos:line="389" pos:column="20">IsTrue</name></name><argument_list pos:line="389" pos:column="26">(<argument><expr><call><name><name pos:line="389" pos:column="27">TestHelpers</name><op:operator pos:line="389" pos:column="38">.</op:operator><name pos:line="389" pos:column="39">WaitForServiceToFinish</name></name><argument_list pos:line="389" pos:column="61">(<argument><expr><name><name pos:line="389" pos:column="62">TestHelpers</name><op:operator pos:line="389" pos:column="73">.</op:operator><name pos:line="389" pos:column="74">TestScaffold</name><op:operator pos:line="389" pos:column="86">.</op:operator><name pos:line="389" pos:column="87">Service</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="389" pos:column="96">5000</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="390" pos:column="13">//System.Diagnostics.Debugger.Launch(); // workaround for Wait DataService to finish - click "No"</comment>
            <expr_stmt><expr><call><name><name pos:line="391" pos:column="13">Assert</name><op:operator pos:line="391" pos:column="19">.</op:operator><name pos:line="391" pos:column="20">IsTrue</name></name><argument_list pos:line="391" pos:column="26">(<argument><expr><call><name><name pos:line="391" pos:column="27">TestHelpers</name><op:operator pos:line="391" pos:column="38">.</op:operator><name pos:line="391" pos:column="39">WaitForServiceToFinish</name></name><argument_list pos:line="391" pos:column="61">(<argument><expr><name><name pos:line="391" pos:column="62">TestHelpers</name><op:operator pos:line="391" pos:column="73">.</op:operator><name pos:line="391" pos:column="74">TestScaffoldData</name><op:operator pos:line="391" pos:column="90">.</op:operator><name pos:line="391" pos:column="91">Service</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="391" pos:column="100">5000</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="394" pos:column="9">[<expr><name pos:line="394" pos:column="10">TestCleanup</name></expr>]</attribute>
        <specifier pos:line="395" pos:column="9">public</specifier> <name pos:line="395" pos:column="16">void</name></type> <name pos:line="395" pos:column="21">TestCleanup</name><parameter_list pos:line="395" pos:column="32">()</parameter_list> <block pos:line="395" pos:column="35">{
            <expr_stmt><expr><call><name><name pos:line="396" pos:column="13">TestHelpers</name><op:operator pos:line="396" pos:column="24">.</op:operator><name pos:line="396" pos:column="25">TestScaffold</name><op:operator pos:line="396" pos:column="37">.</op:operator><name pos:line="396" pos:column="38">Service</name><op:operator pos:line="396" pos:column="45">.</op:operator><name pos:line="396" pos:column="46">StopMonitoring</name></name><argument_list pos:line="396" pos:column="60">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="397" pos:column="13">TestSolution</name><op:operator pos:line="397" pos:column="25">.</op:operator><name pos:line="397" pos:column="26">Close</name></name><argument_list pos:line="397" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="398" pos:column="13">//TestSolution = null;</comment>
            <comment type="line" pos:line="399" pos:column="13">// TestScaffold.Cleanup();</comment>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
