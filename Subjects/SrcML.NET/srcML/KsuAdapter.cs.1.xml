<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML\Utilities\KsuAdapter.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2010 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">System</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Collections</name><op:operator pos:line="13" pos:column="25">.</op:operator><name pos:line="13" pos:column="26">Generic</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Linq</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Text</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Diagnostics</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">IO</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Collections</name><op:operator pos:line="18" pos:column="25">.</op:operator><name pos:line="18" pos:column="26">ObjectModel</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">System</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">Globalization</name></name>;</using>
<using pos:line="20" pos:column="1">using <name><name pos:line="20" pos:column="7">System</name><op:operator pos:line="20" pos:column="13">.</op:operator><name pos:line="20" pos:column="14">Security</name></name>;</using>
<using pos:line="21" pos:column="1">using <name><name pos:line="21" pos:column="7">System</name><op:operator pos:line="21" pos:column="13">.</op:operator><name pos:line="21" pos:column="14">Security</name><op:operator pos:line="21" pos:column="22">.</op:operator><name pos:line="21" pos:column="23">Permissions</name></name>;</using>

<namespace pos:line="23" pos:column="1">namespace <name><name pos:line="23" pos:column="11">ABB</name><op:operator pos:line="23" pos:column="14">.</op:operator><name pos:line="23" pos:column="15">SrcML</name><op:operator pos:line="23" pos:column="20">.</op:operator><name pos:line="23" pos:column="21">Utilities</name></name>
<block pos:line="24" pos:column="1">{
    <comment type="line" pos:line="25" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="26" pos:column="5">/// Collection of functions for working with the Kent State SrcML executables</comment>
    <comment type="line" pos:line="27" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="28" pos:column="5">public</specifier> <specifier pos:line="28" pos:column="12">static</specifier> class <name pos:line="28" pos:column="25">KsuAdapter</name>
    <block pos:line="29" pos:column="5">{
        <comment type="line" pos:line="30" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="31" pos:column="9">/// Combine the strings into a space seperated list that can be passed to a Process.</comment>
        <comment type="line" pos:line="32" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="33" pos:column="9">/// &lt;param name="arguments"&gt;the arguments to be combined&lt;/param&gt;</comment>
        <comment type="line" pos:line="34" pos:column="9">/// &lt;returns&gt;the arguments combined into a string, separated by spaces&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="35" pos:column="9">public</specifier> <specifier pos:line="35" pos:column="16">static</specifier> <name pos:line="35" pos:column="23">string</name></type> <name pos:line="35" pos:column="30">MakeArgumentString</name><parameter_list pos:line="35" pos:column="48">(<param><decl><type><name><name pos:line="35" pos:column="49">Collection</name><argument_list pos:line="35" pos:column="59">&lt;<argument><name pos:line="35" pos:column="60">string</name></argument>&gt;</argument_list></name></type> <name pos:line="35" pos:column="68">arguments</name></decl></param>)</parameter_list>
        <block pos:line="36" pos:column="9">{
            <return pos:line="37" pos:column="13">return <expr><call><name><name pos:line="37" pos:column="20">String</name><op:operator pos:line="37" pos:column="26">.</op:operator><name pos:line="37" pos:column="27">Join</name></name><argument_list pos:line="37" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="37" pos:column="32">" "</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="37" pos:column="37">arguments</name><op:operator pos:line="37" pos:column="46">.</op:operator><name pos:line="37" pos:column="47">ToArray</name></name><argument_list pos:line="37" pos:column="54">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="40" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="41" pos:column="9">/// Get the string representation of the Language enumeration</comment>
        <comment type="line" pos:line="42" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="43" pos:column="9">/// &lt;param name="language"&gt;a Language value&lt;/param&gt;</comment>
        <comment type="line" pos:line="44" pos:column="9">/// &lt;returns&gt;The string representation of language&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="45" pos:column="9">public</specifier> <specifier pos:line="45" pos:column="16">static</specifier> <name pos:line="45" pos:column="23">string</name></type> <name pos:line="45" pos:column="30">GetLanguage</name><parameter_list pos:line="45" pos:column="41">(<param><decl><type><name pos:line="45" pos:column="42">Language</name></type> <name pos:line="45" pos:column="51">language</name></decl></param>)</parameter_list>
        <block pos:line="46" pos:column="9">{
            <switch pos:line="47" pos:column="13">switch <condition pos:line="47" pos:column="20">(<expr><name pos:line="47" pos:column="21">language</name></expr>)</condition>
            <block pos:line="48" pos:column="13">{
                <case pos:line="49" pos:column="17">case <expr><name><name pos:line="49" pos:column="22">Language</name><op:operator pos:line="49" pos:column="30">.</op:operator><name pos:line="49" pos:column="31">Any</name></name></expr>:
                    <return pos:line="50" pos:column="21">return <expr><lit:literal type="string" pos:line="50" pos:column="28">"Any"</lit:literal></expr>;</return>
                </case><case pos:line="51" pos:column="17">case <expr><name><name pos:line="51" pos:column="22">Language</name><op:operator pos:line="51" pos:column="30">.</op:operator><name pos:line="51" pos:column="31">CPlusPlus</name></name></expr>:
                    <return pos:line="52" pos:column="21">return <expr><lit:literal type="string" pos:line="52" pos:column="28">"C++"</lit:literal></expr>;</return>
                </case><case pos:line="53" pos:column="17">case <expr><name><name pos:line="53" pos:column="22">Language</name><op:operator pos:line="53" pos:column="30">.</op:operator><name pos:line="53" pos:column="31">C</name></name></expr>:
                    <return pos:line="54" pos:column="21">return <expr><lit:literal type="string" pos:line="54" pos:column="28">"C"</lit:literal></expr>;</return>
                </case><case pos:line="55" pos:column="17">case <expr><name><name pos:line="55" pos:column="22">Language</name><op:operator pos:line="55" pos:column="30">.</op:operator><name pos:line="55" pos:column="31">Java</name></name></expr>:
                    <return pos:line="56" pos:column="21">return <expr><lit:literal type="string" pos:line="56" pos:column="28">"Java"</lit:literal></expr>;</return>
                </case><case pos:line="57" pos:column="17">case <expr><name><name pos:line="57" pos:column="22">Language</name><op:operator pos:line="57" pos:column="30">.</op:operator><name pos:line="57" pos:column="31">AspectJ</name></name></expr>:
                    <return pos:line="58" pos:column="21">return <expr><lit:literal type="string" pos:line="58" pos:column="28">"AspectJ"</lit:literal></expr>;</return>
                </case><case pos:line="59" pos:column="17">case <expr><name><name pos:line="59" pos:column="22">Language</name><op:operator pos:line="59" pos:column="30">.</op:operator><name pos:line="59" pos:column="31">CSharp</name></name></expr>:
                    <return pos:line="60" pos:column="21">return <expr><lit:literal type="string" pos:line="60" pos:column="28">"C#"</lit:literal></expr>;</return>
                </case><default pos:line="61" pos:column="17">default:
                    <throw pos:line="62" pos:column="21">throw <expr><op:operator pos:line="62" pos:column="27">new</op:operator> <call><name pos:line="62" pos:column="31">SrcMLException</name><argument_list pos:line="62" pos:column="45">(<argument><expr><call><name><name pos:line="62" pos:column="46">String</name><op:operator pos:line="62" pos:column="52">.</op:operator><name pos:line="62" pos:column="53">Format</name></name><argument_list pos:line="62" pos:column="59">(<argument><expr><name><name pos:line="62" pos:column="60">CultureInfo</name><op:operator pos:line="62" pos:column="71">.</op:operator><name pos:line="62" pos:column="72">CurrentCulture</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="62" pos:column="88">"This value needs to be added to the set of languages"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </default>}</block></switch>
        }</block></function>

        <comment type="line" pos:line="66" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="67" pos:column="9">/// Converts an extension mapping dictionary to a string that can be passed to src2srcml.exe.</comment>
        <comment type="line" pos:line="68" pos:column="9">/// If the extensions begin with a dot, these are stripped to conform with src2srcml.exe's input format.</comment>
        <comment type="line" pos:line="69" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="70" pos:column="9">/// &lt;param name="extensionMapping"&gt;An extension mapping dictionary&lt;/param&gt;</comment>
        <comment type="line" pos:line="71" pos:column="9">/// &lt;returns&gt;A comma separated list of mappings of the form ("EXT=LANG").&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="72" pos:column="9">public</specifier> <specifier pos:line="72" pos:column="16">static</specifier> <name pos:line="72" pos:column="23">string</name></type> <name pos:line="72" pos:column="30">ConvertMappingToString</name><parameter_list pos:line="72" pos:column="52">(<param><decl><type><name><name pos:line="72" pos:column="53">IDictionary</name><argument_list pos:line="72" pos:column="64">&lt;<argument><name pos:line="72" pos:column="65">string</name></argument>, <argument><name pos:line="72" pos:column="73">Language</name></argument>&gt;</argument_list></name></type> <name pos:line="72" pos:column="83">extensionMapping</name></decl></param>)</parameter_list> <block pos:line="72" pos:column="101">{
            <decl_stmt><decl><type><name pos:line="73" pos:column="13">var</name></type> <name pos:line="73" pos:column="17">mapping</name> <init pos:line="73" pos:column="25">= <expr><linq><from pos:line="73" pos:column="27">from <expr><name pos:line="73" pos:column="32">kvp</name></expr> <in pos:line="73" pos:column="36">in <expr><name pos:line="73" pos:column="39">extensionMapping</name></expr></in></from>
                          <select pos:line="74" pos:column="27">select <expr><call><name><name pos:line="74" pos:column="34">String</name><op:operator pos:line="74" pos:column="40">.</op:operator><name pos:line="74" pos:column="41">Format</name></name><argument_list pos:line="74" pos:column="47">(<argument><expr><name><name pos:line="74" pos:column="48">CultureInfo</name><op:operator pos:line="74" pos:column="59">.</op:operator><name pos:line="74" pos:column="60">InvariantCulture</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="74" pos:column="78">"{0}={1}"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="74" pos:column="89">kvp</name><op:operator pos:line="74" pos:column="92">.</op:operator><name pos:line="74" pos:column="93">Key</name><op:operator pos:line="74" pos:column="96">.</op:operator><name pos:line="74" pos:column="97">TrimStart</name></name><argument_list pos:line="74" pos:column="106">(<argument><expr><op:operator pos:line="74" pos:column="107">new</op:operator><index pos:line="74" pos:column="110">[]</index> <block pos:line="74" pos:column="113">{<expr><lit:literal type="char" pos:line="74" pos:column="114">'.'</lit:literal></expr>}</block></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="74" pos:column="121">KsuAdapter</name><op:operator pos:line="74" pos:column="131">.</op:operator><name pos:line="74" pos:column="132">GetLanguage</name></name><argument_list pos:line="74" pos:column="143">(<argument><expr><name><name pos:line="74" pos:column="144">kvp</name><op:operator pos:line="74" pos:column="147">.</op:operator><name pos:line="74" pos:column="148">Value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></select></linq></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="75" pos:column="13">var</name></type> <name pos:line="75" pos:column="17">result</name> <init pos:line="75" pos:column="24">= <expr><call><name><name pos:line="75" pos:column="26">String</name><op:operator pos:line="75" pos:column="32">.</op:operator><name pos:line="75" pos:column="33">Join</name></name><argument_list pos:line="75" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="75" pos:column="38">","</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="75" pos:column="43">mapping</name><op:operator pos:line="75" pos:column="50">.</op:operator><name pos:line="75" pos:column="51">ToArray</name></name><argument_list pos:line="75" pos:column="58">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="76" pos:column="13">return <expr><name pos:line="76" pos:column="20">result</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="79" pos:column="9">internal</specifier> <specifier pos:line="79" pos:column="18">static</specifier> <name pos:line="79" pos:column="25">string</name></type> <name pos:line="79" pos:column="32">GetKsuExtension</name><parameter_list pos:line="79" pos:column="47">(<param><decl><type><name pos:line="79" pos:column="48">string</name></type> <name pos:line="79" pos:column="55">filePath</name></decl></param>)</parameter_list>
        <block pos:line="80" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="81" pos:column="13">var</name></type> <name pos:line="81" pos:column="17">extension</name> <init pos:line="81" pos:column="27">= <expr><call><name><name pos:line="81" pos:column="29">Path</name><op:operator pos:line="81" pos:column="33">.</op:operator><name pos:line="81" pos:column="34">GetExtension</name></name><argument_list pos:line="81" pos:column="46">(<argument><expr><name pos:line="81" pos:column="47">filePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if pos:line="83" pos:column="13">if <condition pos:line="83" pos:column="16">(<expr><name><name pos:line="83" pos:column="17">extension</name><op:operator pos:line="83" pos:column="26">.</op:operator><name pos:line="83" pos:column="27">Length</name></name> <op:operator pos:line="83" pos:column="34">&lt;</op:operator> <lit:literal type="number" pos:line="83" pos:column="36">1</lit:literal></expr>)</condition><then pos:line="83" pos:column="38">
                <return pos:line="84" pos:column="17">return <expr><name pos:line="84" pos:column="24">extension</name></expr>;</return></then></if>
            <return pos:line="85" pos:column="13">return <expr><call><name><name pos:line="85" pos:column="20">extension</name><op:operator pos:line="85" pos:column="29">.</op:operator><name pos:line="85" pos:column="30">Substring</name></name><argument_list pos:line="85" pos:column="39">(<argument><expr><lit:literal type="number" pos:line="85" pos:column="40">1</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="88" pos:column="9">internal</specifier> <specifier pos:line="88" pos:column="18">static</specifier> <name pos:line="88" pos:column="25">string</name></type> <name pos:line="88" pos:column="32">GetKsuExtension</name><parameter_list pos:line="88" pos:column="47">(<param><decl><type><name pos:line="88" pos:column="48">FileInfo</name></type> <name pos:line="88" pos:column="57">fileInfo</name></decl></param>)</parameter_list>
        <block pos:line="89" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="90" pos:column="13">var</name></type> <name pos:line="90" pos:column="17">extension</name> <init pos:line="90" pos:column="27">= <expr><name><name pos:line="90" pos:column="29">fileInfo</name><op:operator pos:line="90" pos:column="37">.</op:operator><name pos:line="90" pos:column="38">Extension</name></name></expr></init></decl>;</decl_stmt>

            <if pos:line="92" pos:column="13">if <condition pos:line="92" pos:column="16">(<expr><name><name pos:line="92" pos:column="17">extension</name><op:operator pos:line="92" pos:column="26">.</op:operator><name pos:line="92" pos:column="27">Length</name></name> <op:operator pos:line="92" pos:column="34">&lt;</op:operator> <lit:literal type="number" pos:line="92" pos:column="36">1</lit:literal></expr>)</condition><then pos:line="92" pos:column="38">
                <return pos:line="93" pos:column="17">return <expr><name pos:line="93" pos:column="24">extension</name></expr>;</return></then></if>

            <return pos:line="95" pos:column="13">return <expr><call><name><name pos:line="95" pos:column="20">extension</name><op:operator pos:line="95" pos:column="29">.</op:operator><name pos:line="95" pos:column="30">Substring</name></name><argument_list pos:line="95" pos:column="39">(<argument><expr><lit:literal type="number" pos:line="95" pos:column="40">1</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><attribute pos:line="98" pos:column="9">[<expr><name pos:line="98" pos:column="10">SecurityCritical</name></expr>]</attribute>
        <attribute pos:line="99" pos:column="9">[<expr><call><name pos:line="99" pos:column="10">SecurityPermission</name><argument_list pos:line="99" pos:column="28">(<argument><expr><name><name pos:line="99" pos:column="29">SecurityAction</name><op:operator pos:line="99" pos:column="43">.</op:operator><name pos:line="99" pos:column="44">Demand</name></name></expr></argument>, <argument><expr><name pos:line="99" pos:column="52">Unrestricted</name><op:operator pos:line="99" pos:column="64">=</op:operator><lit:literal type="boolean" pos:line="99" pos:column="65">true</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="100" pos:column="9">internal</specifier> <specifier pos:line="100" pos:column="18">static</specifier> <name pos:line="100" pos:column="25">void</name></type> <name pos:line="100" pos:column="30">RunExecutable</name><parameter_list pos:line="100" pos:column="43">(<param><decl><type><name pos:line="100" pos:column="44">string</name></type> <name pos:line="100" pos:column="51">executableFileName</name></decl></param>, <param><decl><type><name pos:line="100" pos:column="71">string</name></type> <name pos:line="100" pos:column="78">arguments</name></decl></param>)</parameter_list>
        <block pos:line="101" pos:column="9">{
            <using pos:line="102" pos:column="13">using(<expr><op:operator pos:line="102" pos:column="19">new</op:operator> <call><name pos:line="102" pos:column="23">ErrorModeContext</name><argument_list pos:line="102" pos:column="39">(<argument><expr><name><name pos:line="102" pos:column="40">ErrorModes</name><op:operator pos:line="102" pos:column="50">.</op:operator><name pos:line="102" pos:column="51">FailCriticalErrors</name></name> <op:operator pos:line="102" pos:column="70">|</op:operator> <name><name pos:line="102" pos:column="72">ErrorModes</name><op:operator pos:line="102" pos:column="82">.</op:operator><name pos:line="102" pos:column="83">NoGpFaultErrorBox</name></name></expr></argument>)</argument_list></call></expr>) <block pos:line="102" pos:column="103">{
                <using pos:line="103" pos:column="17">using(<decl><type><name pos:line="103" pos:column="23">Process</name></type> <name pos:line="103" pos:column="31">p</name> <init pos:line="103" pos:column="33">= <expr><op:operator pos:line="103" pos:column="35">new</op:operator> <call><name pos:line="103" pos:column="39">Process</name><argument_list pos:line="103" pos:column="46">()</argument_list></call></expr></init></decl>) <block pos:line="103" pos:column="50">{
                    <expr_stmt><expr><name><name pos:line="104" pos:column="21">p</name><op:operator pos:line="104" pos:column="22">.</op:operator><name pos:line="104" pos:column="23">StartInfo</name><op:operator pos:line="104" pos:column="32">.</op:operator><name pos:line="104" pos:column="33">FileName</name></name> <op:operator pos:line="104" pos:column="42">=</op:operator> <name pos:line="104" pos:column="44">executableFileName</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="105" pos:column="21">p</name><op:operator pos:line="105" pos:column="22">.</op:operator><name pos:line="105" pos:column="23">StartInfo</name><op:operator pos:line="105" pos:column="32">.</op:operator><name pos:line="105" pos:column="33">Arguments</name></name> <op:operator pos:line="105" pos:column="43">=</op:operator> <name pos:line="105" pos:column="45">arguments</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="106" pos:column="21">p</name><op:operator pos:line="106" pos:column="22">.</op:operator><name pos:line="106" pos:column="23">StartInfo</name><op:operator pos:line="106" pos:column="32">.</op:operator><name pos:line="106" pos:column="33">CreateNoWindow</name></name> <op:operator pos:line="106" pos:column="48">=</op:operator> <lit:literal type="boolean" pos:line="106" pos:column="50">true</lit:literal></expr>;</expr_stmt>

                    <expr_stmt><expr><name><name pos:line="108" pos:column="21">p</name><op:operator pos:line="108" pos:column="22">.</op:operator><name pos:line="108" pos:column="23">StartInfo</name><op:operator pos:line="108" pos:column="32">.</op:operator><name pos:line="108" pos:column="33">UseShellExecute</name></name> <op:operator pos:line="108" pos:column="49">=</op:operator> <lit:literal type="boolean" pos:line="108" pos:column="51">false</lit:literal></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name><name pos:line="110" pos:column="21">p</name><op:operator pos:line="110" pos:column="22">.</op:operator><name pos:line="110" pos:column="23">Start</name></name><argument_list pos:line="110" pos:column="28">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name><name pos:line="112" pos:column="21">p</name><op:operator pos:line="112" pos:column="22">.</op:operator><name pos:line="112" pos:column="23">WaitForExit</name></name><argument_list pos:line="112" pos:column="34">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="113" pos:column="21">RaiseExceptionOnError</name><argument_list pos:line="113" pos:column="42">(<argument><expr><name pos:line="113" pos:column="43">executableFileName</name></expr></argument>, <argument><expr><name pos:line="113" pos:column="63">arguments</name></expr></argument>, <argument><expr><op:operator pos:line="113" pos:column="74">(</op:operator><name pos:line="113" pos:column="75">ExecutableReturnValue</name><op:operator pos:line="113" pos:column="96">)</op:operator> <name><name pos:line="113" pos:column="98">p</name><op:operator pos:line="113" pos:column="99">.</op:operator><name pos:line="113" pos:column="100">ExitCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></using>
            }</block></using>
        }</block></function>
        
        <function><type><attribute pos:line="118" pos:column="9">[<expr><name pos:line="118" pos:column="10">SecurityCritical</name></expr>]</attribute>
        <attribute pos:line="119" pos:column="9">[<expr><call><name pos:line="119" pos:column="10">SecurityPermission</name><argument_list pos:line="119" pos:column="28">(<argument><expr><name><name pos:line="119" pos:column="29">SecurityAction</name><op:operator pos:line="119" pos:column="43">.</op:operator><name pos:line="119" pos:column="44">Demand</name></name></expr></argument>, <argument><expr><name pos:line="119" pos:column="52">Unrestricted</name> <op:operator pos:line="119" pos:column="65">=</op:operator> <lit:literal type="boolean" pos:line="119" pos:column="67">true</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="120" pos:column="9">internal</specifier> <specifier pos:line="120" pos:column="18">static</specifier> <name pos:line="120" pos:column="25">string</name></type> <name pos:line="120" pos:column="32">RunExecutable</name><parameter_list pos:line="120" pos:column="45">(<param><decl><type><name pos:line="120" pos:column="46">string</name></type> <name pos:line="120" pos:column="53">executableFileName</name></decl></param>, <param><decl><type><name pos:line="120" pos:column="73">string</name></type> <name pos:line="120" pos:column="80">arguments</name></decl></param>, <param><decl><type><name pos:line="120" pos:column="91">string</name></type> <name pos:line="120" pos:column="98">standardInput</name></decl></param>)</parameter_list>
        <block pos:line="121" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="122" pos:column="13">string</name></type> <name pos:line="122" pos:column="20">output</name></decl>;</decl_stmt>
            
            <using pos:line="124" pos:column="13">using(<expr><op:operator pos:line="124" pos:column="19">new</op:operator> <call><name pos:line="124" pos:column="23">ErrorModeContext</name><argument_list pos:line="124" pos:column="39">(<argument><expr><name><name pos:line="124" pos:column="40">ErrorModes</name><op:operator pos:line="124" pos:column="50">.</op:operator><name pos:line="124" pos:column="51">FailCriticalErrors</name></name> <op:operator pos:line="124" pos:column="70">|</op:operator> <name><name pos:line="124" pos:column="72">ErrorModes</name><op:operator pos:line="124" pos:column="82">.</op:operator><name pos:line="124" pos:column="83">NoGpFaultErrorBox</name></name></expr></argument>)</argument_list></call></expr>) <block pos:line="124" pos:column="103">{
                <using pos:line="125" pos:column="17">using (<decl><type><name pos:line="125" pos:column="24">Process</name></type> <name pos:line="125" pos:column="32">p</name> <init pos:line="125" pos:column="34">= <expr><op:operator pos:line="125" pos:column="36">new</op:operator> <call><name pos:line="125" pos:column="40">Process</name><argument_list pos:line="125" pos:column="47">()</argument_list></call></expr></init></decl>)
                <block pos:line="126" pos:column="17">{
                    <expr_stmt><expr><name><name pos:line="127" pos:column="21">p</name><op:operator pos:line="127" pos:column="22">.</op:operator><name pos:line="127" pos:column="23">StartInfo</name><op:operator pos:line="127" pos:column="32">.</op:operator><name pos:line="127" pos:column="33">FileName</name></name> <op:operator pos:line="127" pos:column="42">=</op:operator> <name pos:line="127" pos:column="44">executableFileName</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="128" pos:column="21">p</name><op:operator pos:line="128" pos:column="22">.</op:operator><name pos:line="128" pos:column="23">StartInfo</name><op:operator pos:line="128" pos:column="32">.</op:operator><name pos:line="128" pos:column="33">Arguments</name></name> <op:operator pos:line="128" pos:column="43">=</op:operator> <name pos:line="128" pos:column="45">arguments</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="129" pos:column="21">p</name><op:operator pos:line="129" pos:column="22">.</op:operator><name pos:line="129" pos:column="23">StartInfo</name><op:operator pos:line="129" pos:column="32">.</op:operator><name pos:line="129" pos:column="33">CreateNoWindow</name></name> <op:operator pos:line="129" pos:column="48">=</op:operator> <lit:literal type="boolean" pos:line="129" pos:column="50">true</lit:literal></expr>;</expr_stmt>

                    <expr_stmt><expr><name><name pos:line="131" pos:column="21">p</name><op:operator pos:line="131" pos:column="22">.</op:operator><name pos:line="131" pos:column="23">StartInfo</name><op:operator pos:line="131" pos:column="32">.</op:operator><name pos:line="131" pos:column="33">UseShellExecute</name></name> <op:operator pos:line="131" pos:column="49">=</op:operator> <lit:literal type="boolean" pos:line="131" pos:column="51">false</lit:literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="132" pos:column="21">p</name><op:operator pos:line="132" pos:column="22">.</op:operator><name pos:line="132" pos:column="23">StartInfo</name><op:operator pos:line="132" pos:column="32">.</op:operator><name pos:line="132" pos:column="33">RedirectStandardInput</name></name> <op:operator pos:line="132" pos:column="55">=</op:operator> <lit:literal type="boolean" pos:line="132" pos:column="57">true</lit:literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="133" pos:column="21">p</name><op:operator pos:line="133" pos:column="22">.</op:operator><name pos:line="133" pos:column="23">StartInfo</name><op:operator pos:line="133" pos:column="32">.</op:operator><name pos:line="133" pos:column="33">RedirectStandardOutput</name></name> <op:operator pos:line="133" pos:column="56">=</op:operator> <lit:literal type="boolean" pos:line="133" pos:column="58">true</lit:literal></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name><name pos:line="135" pos:column="21">p</name><op:operator pos:line="135" pos:column="22">.</op:operator><name pos:line="135" pos:column="23">Start</name></name><argument_list pos:line="135" pos:column="28">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name><name pos:line="137" pos:column="21">p</name><op:operator pos:line="137" pos:column="22">.</op:operator><name pos:line="137" pos:column="23">StandardInput</name><op:operator pos:line="137" pos:column="36">.</op:operator><name pos:line="137" pos:column="37">Write</name></name><argument_list pos:line="137" pos:column="42">(<argument><expr><name pos:line="137" pos:column="43">standardInput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="138" pos:column="21">p</name><op:operator pos:line="138" pos:column="22">.</op:operator><name pos:line="138" pos:column="23">StandardInput</name><op:operator pos:line="138" pos:column="36">.</op:operator><name pos:line="138" pos:column="37">Close</name></name><argument_list pos:line="138" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="139" pos:column="21">output</name> <op:operator pos:line="139" pos:column="28">=</op:operator> <call><name><name pos:line="139" pos:column="30">p</name><op:operator pos:line="139" pos:column="31">.</op:operator><name pos:line="139" pos:column="32">StandardOutput</name><op:operator pos:line="139" pos:column="46">.</op:operator><name pos:line="139" pos:column="47">ReadToEnd</name></name><argument_list pos:line="139" pos:column="56">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name><name pos:line="141" pos:column="21">p</name><op:operator pos:line="141" pos:column="22">.</op:operator><name pos:line="141" pos:column="23">WaitForExit</name></name><argument_list pos:line="141" pos:column="34">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="142" pos:column="21">RaiseExceptionOnError</name><argument_list pos:line="142" pos:column="42">(<argument><expr><name pos:line="142" pos:column="43">executableFileName</name></expr></argument>, <argument><expr><name pos:line="142" pos:column="63">arguments</name></expr></argument>, <argument><expr><op:operator pos:line="142" pos:column="74">(</op:operator><name pos:line="142" pos:column="75">ExecutableReturnValue</name><op:operator pos:line="142" pos:column="96">)</op:operator><name><name pos:line="142" pos:column="97">p</name><op:operator pos:line="142" pos:column="98">.</op:operator><name pos:line="142" pos:column="99">ExitCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></using>
            }</block></using>
            <return pos:line="145" pos:column="13">return <expr><name pos:line="145" pos:column="20">output</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="148" pos:column="9">internal</specifier> <specifier pos:line="148" pos:column="18">static</specifier> <name pos:line="148" pos:column="25">void</name></type> <name pos:line="148" pos:column="30">RaiseExceptionOnError</name><parameter_list pos:line="148" pos:column="51">(<param><decl><type><name pos:line="148" pos:column="52">string</name></type> <name pos:line="148" pos:column="59">pathToExecutable</name></decl></param>, <param><decl><type><name pos:line="148" pos:column="77">string</name></type> <name pos:line="148" pos:column="84">arguments</name></decl></param>, <param><decl><type><name pos:line="148" pos:column="95">ExecutableReturnValue</name></type> <name pos:line="148" pos:column="117">value</name></decl></param>)</parameter_list>
        <block pos:line="149" pos:column="9">{
            <if pos:line="150" pos:column="13">if <condition pos:line="150" pos:column="16">(<expr><name><name pos:line="150" pos:column="17">ExecutableReturnValue</name><op:operator pos:line="150" pos:column="38">.</op:operator><name pos:line="150" pos:column="39">Normal</name></name> <op:operator pos:line="150" pos:column="46">!=</op:operator> <name pos:line="150" pos:column="49">value</name></expr>)</condition><then pos:line="150" pos:column="55">
                <throw pos:line="151" pos:column="17">throw <expr><op:operator pos:line="151" pos:column="23">new</op:operator> <call><name pos:line="151" pos:column="27">SrcMLRuntimeException</name><argument_list pos:line="151" pos:column="48">(<argument><expr><name pos:line="151" pos:column="49">pathToExecutable</name></expr></argument>, <argument><expr><name pos:line="151" pos:column="67">arguments</name></expr></argument>, <argument><expr><name pos:line="151" pos:column="78">value</name></expr></argument>)</argument_list></call></expr>;</throw></then></if>
        }</block></function>

        <function><type><specifier pos:line="154" pos:column="9">internal</specifier> <specifier pos:line="154" pos:column="18">static</specifier> <name pos:line="154" pos:column="25">string</name></type> <name pos:line="154" pos:column="32">GetErrorMessageFromReturnCode</name><parameter_list pos:line="154" pos:column="61">(<param><decl><type><name pos:line="154" pos:column="62">ExecutableReturnValue</name></type> <name pos:line="154" pos:column="84">value</name></decl></param>)</parameter_list>
        <block pos:line="155" pos:column="9">{
            <switch pos:line="156" pos:column="13">switch <condition pos:line="156" pos:column="20">(<expr><name pos:line="156" pos:column="21">value</name></expr>)</condition>
            <block pos:line="157" pos:column="13">{
                <case pos:line="158" pos:column="17">case <expr><name><name pos:line="158" pos:column="22">ExecutableReturnValue</name><op:operator pos:line="158" pos:column="43">.</op:operator><name pos:line="158" pos:column="44">Normal</name></name></expr>:
                    <return pos:line="159" pos:column="21">return <expr><lit:literal type="string" pos:line="159" pos:column="28">"Normal"</lit:literal></expr>;</return>
                </case><case pos:line="160" pos:column="17">case <expr><name><name pos:line="160" pos:column="22">ExecutableReturnValue</name><op:operator pos:line="160" pos:column="43">.</op:operator><name pos:line="160" pos:column="44">Error</name></name></expr>:
                    <return pos:line="161" pos:column="21">return <expr><lit:literal type="string" pos:line="161" pos:column="28">"Unspecified Error"</lit:literal></expr>;</return>
                </case><case pos:line="162" pos:column="17">case <expr><name><name pos:line="162" pos:column="22">ExecutableReturnValue</name><op:operator pos:line="162" pos:column="43">.</op:operator><name pos:line="162" pos:column="44">ProblemWithInputFile</name></name></expr>:
                    <return pos:line="163" pos:column="21">return <expr><lit:literal type="string" pos:line="163" pos:column="28">"Problem with input file"</lit:literal></expr>;</return>
                </case><case pos:line="164" pos:column="17">case <expr><name><name pos:line="164" pos:column="22">ExecutableReturnValue</name><op:operator pos:line="164" pos:column="43">.</op:operator><name pos:line="164" pos:column="44">UnknownOption</name></name></expr>:
                    <return pos:line="165" pos:column="21">return <expr><lit:literal type="string" pos:line="165" pos:column="28">"Unknown option"</lit:literal></expr>;</return>
                </case><case pos:line="166" pos:column="17">case <expr><name><name pos:line="166" pos:column="22">ExecutableReturnValue</name><op:operator pos:line="166" pos:column="43">.</op:operator><name pos:line="166" pos:column="44">UnknownEncoding</name></name></expr>:
                    <return pos:line="167" pos:column="21">return <expr><lit:literal type="string" pos:line="167" pos:column="28">"Unknown encoding"</lit:literal></expr>;</return>
                </case><case pos:line="168" pos:column="17">case <expr><name><name pos:line="168" pos:column="22">ExecutableReturnValue</name><op:operator pos:line="168" pos:column="43">.</op:operator><name pos:line="168" pos:column="44">InvalidLanguage</name></name></expr>:
                    <return pos:line="169" pos:column="21">return <expr><lit:literal type="string" pos:line="169" pos:column="28">"Invalid languageFilter"</lit:literal></expr>;</return>
                </case><case pos:line="170" pos:column="17">case <expr><name><name pos:line="170" pos:column="22">ExecutableReturnValue</name><op:operator pos:line="170" pos:column="43">.</op:operator><name pos:line="170" pos:column="44">LanguageOptionSpecifiedButValueMissing</name></name></expr>:
                    <return pos:line="171" pos:column="21">return <expr><lit:literal type="string" pos:line="171" pos:column="28">"Language option specified, but value missing"</lit:literal></expr>;</return>
                </case><case pos:line="172" pos:column="17">case <expr><name><name pos:line="172" pos:column="22">ExecutableReturnValue</name><op:operator pos:line="172" pos:column="43">.</op:operator><name pos:line="172" pos:column="44">FilenameOptionSpecifiedButValueMissing</name></name></expr>:
                    <return pos:line="173" pos:column="21">return <expr><lit:literal type="string" pos:line="173" pos:column="28">"Filename option specified, but value missing"</lit:literal></expr>;</return>
                </case><case pos:line="174" pos:column="17">case <expr><name><name pos:line="174" pos:column="22">ExecutableReturnValue</name><op:operator pos:line="174" pos:column="43">.</op:operator><name pos:line="174" pos:column="44">DirectoryOptionSpecifiedButValueMissing</name></name></expr>:
                    <return pos:line="175" pos:column="21">return <expr><lit:literal type="string" pos:line="175" pos:column="28">"Directory option specified, but value missing"</lit:literal></expr>;</return>
                </case><case pos:line="176" pos:column="17">case <expr><name><name pos:line="176" pos:column="22">ExecutableReturnValue</name><op:operator pos:line="176" pos:column="43">.</op:operator><name pos:line="176" pos:column="44">VersionOptionSpecifiedButValueMissing</name></name></expr>:
                    <return pos:line="177" pos:column="21">return <expr><lit:literal type="string" pos:line="177" pos:column="28">"Version option specified, but value missing"</lit:literal></expr>;</return>
                </case><case pos:line="178" pos:column="17">case <expr><name><name pos:line="178" pos:column="22">ExecutableReturnValue</name><op:operator pos:line="178" pos:column="43">.</op:operator><name pos:line="178" pos:column="44">TextEncodingOptionSpecifiedButValueMissing</name></name></expr>:
                    <return pos:line="179" pos:column="21">return <expr><lit:literal type="string" pos:line="179" pos:column="28">"Text encoding option specified, but value missing"</lit:literal></expr>;</return>
                </case><case pos:line="180" pos:column="17">case <expr><name><name pos:line="180" pos:column="22">ExecutableReturnValue</name><op:operator pos:line="180" pos:column="43">.</op:operator><name pos:line="180" pos:column="44">XmlEncodingOptionSpecifiedButValueMissing</name></name></expr>:
                    <return pos:line="181" pos:column="21">return <expr><lit:literal type="string" pos:line="181" pos:column="28">"XML encoding option specified, but value missing"</lit:literal></expr>;</return>
                </case><case pos:line="182" pos:column="17">case <expr><name><name pos:line="182" pos:column="22">ExecutableReturnValue</name><op:operator pos:line="182" pos:column="43">.</op:operator><name pos:line="182" pos:column="44">UnitOptionSpecifiedButValueMissing</name></name></expr>:
                    <return pos:line="183" pos:column="21">return <expr><lit:literal type="string" pos:line="183" pos:column="28">"Unit option specified, but value missing"</lit:literal></expr>;</return>
                </case><case pos:line="184" pos:column="17">case <expr><name><name pos:line="184" pos:column="22">ExecutableReturnValue</name><op:operator pos:line="184" pos:column="43">.</op:operator><name pos:line="184" pos:column="44">UnitOptionValueIsNotValid</name></name></expr>:
                    <return pos:line="185" pos:column="21">return <expr><lit:literal type="string" pos:line="185" pos:column="28">"Unit option value is not valid"</lit:literal></expr>;</return>
                </case><case pos:line="186" pos:column="17">case <expr><name><name pos:line="186" pos:column="22">ExecutableReturnValue</name><op:operator pos:line="186" pos:column="43">.</op:operator><name pos:line="186" pos:column="44">InvalidCombinationOfOptions</name></name></expr>:
                    <return pos:line="187" pos:column="21">return <expr><lit:literal type="string" pos:line="187" pos:column="28">"Invalid combination of options"</lit:literal></expr>;</return>
                </case><case pos:line="188" pos:column="17">case <expr><name><name pos:line="188" pos:column="22">ExecutableReturnValue</name><op:operator pos:line="188" pos:column="43">.</op:operator><name pos:line="188" pos:column="44">IncompleteOutputDueToTermination</name></name></expr>:
                    <return pos:line="189" pos:column="21">return <expr><lit:literal type="string" pos:line="189" pos:column="28">"Incomplete output due to termination"</lit:literal></expr>;</return>
                </case><default pos:line="190" pos:column="17">default:
                    <return pos:line="191" pos:column="21">return <expr><lit:literal type="string" pos:line="191" pos:column="28">"Unknown error code. Please report."</lit:literal></expr>;</return>
            </default>}</block></switch>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
