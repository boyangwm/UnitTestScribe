<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data\Statement.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2014 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Patrick Francis (ABB Group) - initial API, implementation, &amp; documentation
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="13" pos:column="1">using <name pos:line="13" pos:column="7">System</name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Collections</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">Generic</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Collections</name><op:operator pos:line="15" pos:column="25">.</op:operator><name pos:line="15" pos:column="26">ObjectModel</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Collections</name><op:operator pos:line="16" pos:column="25">.</op:operator><name pos:line="16" pos:column="26">Specialized</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Linq</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Text</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">System</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">Xml</name></name>;</using>
<using pos:line="20" pos:column="1">using <name><name pos:line="20" pos:column="7">System</name><op:operator pos:line="20" pos:column="13">.</op:operator><name pos:line="20" pos:column="14">Xml</name><op:operator pos:line="20" pos:column="17">.</op:operator><name pos:line="20" pos:column="18">Linq</name></name>;</using>
<using pos:line="21" pos:column="1">using <name><name pos:line="21" pos:column="7">System</name><op:operator pos:line="21" pos:column="13">.</op:operator><name pos:line="21" pos:column="14">Xml</name><op:operator pos:line="21" pos:column="17">.</op:operator><name pos:line="21" pos:column="18">Serialization</name></name>;</using>

<namespace pos:line="23" pos:column="1">namespace <name><name pos:line="23" pos:column="11">ABB</name><op:operator pos:line="23" pos:column="14">.</op:operator><name pos:line="23" pos:column="15">SrcML</name><op:operator pos:line="23" pos:column="20">.</op:operator><name pos:line="23" pos:column="21">Data</name></name> <block pos:line="23" pos:column="26">{
    <comment type="line" pos:line="24" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="25" pos:column="5">/// Represents a statement in a program.</comment>
    <comment type="line" pos:line="26" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="27" pos:column="5">public</specifier> class <name pos:line="27" pos:column="18">Statement</name> <super pos:line="27" pos:column="28">: <name pos:line="27" pos:column="30">AbstractProgramElement</name></super> <block pos:line="27" pos:column="53">{
        <decl_stmt><decl><type><specifier pos:line="28" pos:column="9">private</specifier> <name pos:line="28" pos:column="17">Expression</name></type> <name pos:line="28" pos:column="28">contentExpression</name></decl>;</decl_stmt>
        
        <comment type="line" pos:line="30" pos:column="9">/// &lt;summary&gt; Internal list of this statement's children. &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="31" pos:column="9">protected</specifier> <name><name pos:line="31" pos:column="19">List</name><argument_list pos:line="31" pos:column="23">&lt;<argument><name pos:line="31" pos:column="24">Statement</name></argument>&gt;</argument_list></name></type> <name pos:line="31" pos:column="35">ChildStatementsList</name></decl>;</decl_stmt>
        
        <comment type="line" pos:line="33" pos:column="9">/// &lt;summary&gt; Internal list of this statements locations. &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="34" pos:column="9">protected</specifier> <name><name pos:line="34" pos:column="19">List</name><argument_list pos:line="34" pos:column="23">&lt;<argument><name pos:line="34" pos:column="24">SrcMLLocation</name></argument>&gt;</argument_list></name></type> <name pos:line="34" pos:column="39">LocationList</name></decl>;</decl_stmt>

        <comment type="line" pos:line="36" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="37" pos:column="9">/// A collection of the AliasStatement and ImportStatements in the children of this statement.</comment>
        <comment type="line" pos:line="38" pos:column="9">/// These aliases/imports are stored in reverse document order.</comment>
        <comment type="line" pos:line="39" pos:column="9">/// The dictionary key is the file name.</comment>
        <comment type="line" pos:line="40" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="41" pos:column="9">protected</specifier> <name><name pos:line="41" pos:column="19">Dictionary</name><argument_list pos:line="41" pos:column="29">&lt;<argument><name pos:line="41" pos:column="30">string</name></argument>, <argument><name><name pos:line="41" pos:column="38">SortedSet</name><argument_list pos:line="41" pos:column="47">&lt;<argument><name pos:line="41" pos:column="48">Statement</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="41" pos:column="60">AliasMap</name></decl>;</decl_stmt>
        
        <comment type="line" pos:line="43" pos:column="9">/// &lt;summary&gt;XML name for the &lt;see cref="ChildStatements"/&gt; property&lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="44" pos:column="9">public</specifier> <specifier pos:line="44" pos:column="16">const</specifier> <name pos:line="44" pos:column="22">string</name></type> <name pos:line="44" pos:column="29">XmlChildrenName</name> <init pos:line="44" pos:column="45">= <expr><lit:literal type="string" pos:line="44" pos:column="47">"ChildStatements"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="46" pos:column="9">/// &lt;summary&gt;XML name for the &lt;see cref="Content"/&gt; property&lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="47" pos:column="9">public</specifier> <specifier pos:line="47" pos:column="16">const</specifier> <name pos:line="47" pos:column="22">string</name></type> <name pos:line="47" pos:column="29">XmlContentName</name> <init pos:line="47" pos:column="44">= <expr><lit:literal type="string" pos:line="47" pos:column="46">"Content"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="49" pos:column="9">/// &lt;summary&gt;XML name for the &lt;see cref="Locations"/&gt; property&lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="50" pos:column="9">public</specifier> <specifier pos:line="50" pos:column="16">const</specifier> <name pos:line="50" pos:column="22">string</name></type> <name pos:line="50" pos:column="29">XmlLocationsName</name> <init pos:line="50" pos:column="46">= <expr><lit:literal type="string" pos:line="50" pos:column="48">"Locations"</lit:literal></expr></init></decl>;</decl_stmt>
        
        <comment type="line" pos:line="52" pos:column="9">/// &lt;summary&gt;XML name for serialization&lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="53" pos:column="9">public</specifier> <specifier pos:line="53" pos:column="16">const</specifier> <name pos:line="53" pos:column="22">string</name></type> <name pos:line="53" pos:column="29">XmlName</name> <init pos:line="53" pos:column="37">= <expr><lit:literal type="string" pos:line="53" pos:column="39">"Statement"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="55" pos:column="9">/// &lt;summary&gt;Creates a new empty Statement.&lt;/summary&gt;</comment>
        <constructor><specifier pos:line="56" pos:column="9">public</specifier> <name pos:line="56" pos:column="16">Statement</name><parameter_list pos:line="56" pos:column="25">()</parameter_list> <block pos:line="56" pos:column="28">{
            <expr_stmt><expr><name pos:line="57" pos:column="13">ChildStatementsList</name> <op:operator pos:line="57" pos:column="33">=</op:operator> <op:operator pos:line="57" pos:column="35">new</op:operator> <call><name><name pos:line="57" pos:column="39">List</name><argument_list pos:line="57" pos:column="43">&lt;<argument><name pos:line="57" pos:column="44">Statement</name></argument>&gt;</argument_list></name><argument_list pos:line="57" pos:column="54">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="58" pos:column="13">ChildStatements</name> <op:operator pos:line="58" pos:column="29">=</op:operator> <op:operator pos:line="58" pos:column="31">new</op:operator> <call><name><name pos:line="58" pos:column="35">ReadOnlyCollection</name><argument_list pos:line="58" pos:column="53">&lt;<argument><name pos:line="58" pos:column="54">Statement</name></argument>&gt;</argument_list></name><argument_list pos:line="58" pos:column="64">(<argument><expr><name pos:line="58" pos:column="65">ChildStatementsList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="59" pos:column="13">LocationList</name> <op:operator pos:line="59" pos:column="26">=</op:operator> <op:operator pos:line="59" pos:column="28">new</op:operator> <call><name><name pos:line="59" pos:column="32">List</name><argument_list pos:line="59" pos:column="36">&lt;<argument><name pos:line="59" pos:column="37">SrcMLLocation</name></argument>&gt;</argument_list></name><argument_list pos:line="59" pos:column="51">(<argument><expr><lit:literal type="number" pos:line="59" pos:column="52">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="60" pos:column="13">Locations</name> <op:operator pos:line="60" pos:column="23">=</op:operator> <op:operator pos:line="60" pos:column="25">new</op:operator> <call><name><name pos:line="60" pos:column="29">ReadOnlyCollection</name><argument_list pos:line="60" pos:column="47">&lt;<argument><name pos:line="60" pos:column="48">SrcMLLocation</name></argument>&gt;</argument_list></name><argument_list pos:line="60" pos:column="62">(<argument><expr><name pos:line="60" pos:column="63">LocationList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="61" pos:column="13">AliasMap</name> <op:operator pos:line="61" pos:column="22">=</op:operator> <op:operator pos:line="61" pos:column="24">new</op:operator> <call><name><name pos:line="61" pos:column="28">Dictionary</name><argument_list pos:line="61" pos:column="38">&lt;<argument><name pos:line="61" pos:column="39">string</name></argument>, <argument><name><name pos:line="61" pos:column="47">SortedSet</name><argument_list pos:line="61" pos:column="56">&lt;<argument><name pos:line="61" pos:column="57">Statement</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list pos:line="61" pos:column="68">(<argument><expr><name><name pos:line="61" pos:column="69">StringComparer</name><op:operator pos:line="61" pos:column="83">.</op:operator><name pos:line="61" pos:column="84">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>
        
        <comment type="line" pos:line="64" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="65" pos:column="9">/// The statements that are nested below this one. </comment>
        <comment type="line" pos:line="66" pos:column="9">/// For example, the members of a class are children of the class statement, or the statements in an if-block are children of the if-statement.</comment>
        <comment type="line" pos:line="67" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="68" pos:column="9">public</specifier> <name><name pos:line="68" pos:column="16">ReadOnlyCollection</name><argument_list pos:line="68" pos:column="34">&lt;<argument><name pos:line="68" pos:column="35">Statement</name></argument>&gt;</argument_list></name></type> <name pos:line="68" pos:column="46">ChildStatements</name> <block pos:line="68" pos:column="62">{ <function_decl><name pos:line="68" pos:column="64">get</name>;</function_decl> <function_decl><specifier pos:line="68" pos:column="69">private</specifier> <name pos:line="68" pos:column="77">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="70" pos:column="9">/// &lt;summary&gt;The statement that this statement is a child of.&lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="71" pos:column="9">public</specifier> <name pos:line="71" pos:column="16">Statement</name></type> <name pos:line="71" pos:column="26">ParentStatement</name> <block pos:line="71" pos:column="42">{ <function_decl><name pos:line="71" pos:column="44">get</name>;</function_decl> <function_decl><name pos:line="71" pos:column="49">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="73" pos:column="9">/// &lt;summary&gt;The expression, if any, contained within the statement.&lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="74" pos:column="9">public</specifier> <name pos:line="74" pos:column="16">Expression</name></type> <name pos:line="74" pos:column="27">Content</name> <block pos:line="74" pos:column="35">{
            <function><name pos:line="75" pos:column="13">get</name> <block pos:line="75" pos:column="17">{ <return pos:line="75" pos:column="19">return <expr><name pos:line="75" pos:column="26">contentExpression</name></expr>;</return> }</block></function>
            <function><name pos:line="76" pos:column="13">set</name> <block pos:line="76" pos:column="17">{
                <expr_stmt><expr><name pos:line="77" pos:column="17">contentExpression</name> <op:operator pos:line="77" pos:column="35">=</op:operator> <name pos:line="77" pos:column="37">value</name></expr>;</expr_stmt>
                <if pos:line="78" pos:column="17">if<condition pos:line="78" pos:column="19">(<expr><name pos:line="78" pos:column="20">contentExpression</name> <op:operator pos:line="78" pos:column="38">!=</op:operator> <name pos:line="78" pos:column="41">null</name></expr>)</condition><then pos:line="78" pos:column="46"> <block pos:line="78" pos:column="47">{
                    <expr_stmt><expr><name><name pos:line="79" pos:column="21">contentExpression</name><op:operator pos:line="79" pos:column="38">.</op:operator><name pos:line="79" pos:column="39">ParentStatement</name></name> <op:operator pos:line="79" pos:column="55">=</op:operator> <name pos:line="79" pos:column="57">this</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="84" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="85" pos:column="9">/// The locations in the code where this statement is defined. </comment>
        <comment type="line" pos:line="86" pos:column="9">/// There may be multiple locations in the case of, for example, a method definition that has separate prototype and definition statements.</comment>
        <comment type="line" pos:line="87" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="88" pos:column="9">public</specifier> <name><name pos:line="88" pos:column="16">ReadOnlyCollection</name><argument_list pos:line="88" pos:column="34">&lt;<argument><name pos:line="88" pos:column="35">SrcMLLocation</name></argument>&gt;</argument_list></name></type> <name pos:line="88" pos:column="50">Locations</name> <block pos:line="88" pos:column="60">{ <function_decl><name pos:line="88" pos:column="62">get</name>;</function_decl> <function_decl><specifier pos:line="88" pos:column="67">private</specifier> <name pos:line="88" pos:column="75">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="90" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="91" pos:column="9">/// The first non-reference location for the Statement.</comment>
        <comment type="line" pos:line="92" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="93" pos:column="9">public</specifier> <name pos:line="93" pos:column="16">SrcMLLocation</name></type> <name pos:line="93" pos:column="30">PrimaryLocation</name> <block pos:line="93" pos:column="46">{
            <function><name pos:line="94" pos:column="13">get</name> <block pos:line="94" pos:column="17">{
                <decl_stmt><decl><type><name pos:line="95" pos:column="17">var</name></type> <name pos:line="95" pos:column="21">definitionLoc</name> <init pos:line="95" pos:column="35">= <expr><call><name><name pos:line="95" pos:column="37">LocationList</name><op:operator pos:line="95" pos:column="49">.</op:operator><name pos:line="95" pos:column="50">FirstOrDefault</name></name><argument_list pos:line="95" pos:column="64">(<argument><expr><lambda><name pos:line="95" pos:column="65">l</name> <op:operator pos:line="95" pos:column="67">=&gt;</op:operator> <op:operator pos:line="95" pos:column="70">!</op:operator><name><name pos:line="95" pos:column="71">l</name><op:operator pos:line="95" pos:column="72">.</op:operator><name pos:line="95" pos:column="73">IsReference</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="96" pos:column="17">if<condition pos:line="96" pos:column="19">(<expr><name pos:line="96" pos:column="20">definitionLoc</name> <op:operator pos:line="96" pos:column="34">!=</op:operator> <name pos:line="96" pos:column="37">null</name></expr>)</condition><then pos:line="96" pos:column="42"> <block pos:line="96" pos:column="43">{
                    <return pos:line="97" pos:column="21">return <expr><name pos:line="97" pos:column="28">definitionLoc</name></expr>;</return>
                }</block></then></if>
                <return pos:line="99" pos:column="17">return <expr><call><name><name pos:line="99" pos:column="24">LocationList</name><op:operator pos:line="99" pos:column="36">.</op:operator><name pos:line="99" pos:column="37">FirstOrDefault</name></name><argument_list pos:line="99" pos:column="51">()</argument_list></call></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="103" pos:column="9">protected</specifier> <specifier pos:line="103" pos:column="19">virtual</specifier> <name pos:line="103" pos:column="27">bool</name></type> <name pos:line="103" pos:column="32">ToBeDeleted</name> <block pos:line="103" pos:column="44">{ <function><name pos:line="103" pos:column="46">get</name> <block pos:line="103" pos:column="50">{ <return pos:line="103" pos:column="52">return <expr><lit:literal type="number" pos:line="103" pos:column="59">0</lit:literal> <op:operator pos:line="103" pos:column="61">==</op:operator> <name><name pos:line="103" pos:column="64">Locations</name><op:operator pos:line="103" pos:column="73">.</op:operator><name pos:line="103" pos:column="74">Count</name></name></expr>;</return> }</block></function> }</block></decl></decl_stmt>
        <comment type="line" pos:line="104" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="105" pos:column="9">/// Adds the given Statement to the ChildStatements collection. Nothing will be done if &lt;paramref name="child"/&gt; is null.</comment>
        <comment type="line" pos:line="106" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="107" pos:column="9">/// &lt;param name="child"&gt;The Statement to add.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="108" pos:column="9">public</specifier> <specifier pos:line="108" pos:column="16">virtual</specifier> <name pos:line="108" pos:column="24">void</name></type> <name pos:line="108" pos:column="29">AddChildStatement</name><parameter_list pos:line="108" pos:column="46">(<param><decl><type><name pos:line="108" pos:column="47">Statement</name></type> <name pos:line="108" pos:column="57">child</name></decl></param>)</parameter_list> <block pos:line="108" pos:column="64">{
            <if pos:line="109" pos:column="13">if<condition pos:line="109" pos:column="15">(<expr><name pos:line="109" pos:column="16">null</name> <op:operator pos:line="109" pos:column="21">==</op:operator> <name pos:line="109" pos:column="24">child</name></expr>)</condition><then pos:line="109" pos:column="30"> <block pos:line="109" pos:column="31">{ <return pos:line="109" pos:column="33">return;</return> }</block></then></if>

            <expr_stmt><expr><name><name pos:line="111" pos:column="13">child</name><op:operator pos:line="111" pos:column="18">.</op:operator><name pos:line="111" pos:column="19">ParentStatement</name></name> <op:operator pos:line="111" pos:column="35">=</op:operator> <name pos:line="111" pos:column="37">this</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="112" pos:column="13">ChildStatementsList</name><op:operator pos:line="112" pos:column="32">.</op:operator><name pos:line="112" pos:column="33">Add</name></name><argument_list pos:line="112" pos:column="36">(<argument><expr><name pos:line="112" pos:column="37">child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if pos:line="113" pos:column="13">if<condition pos:line="113" pos:column="15">(<expr><name pos:line="113" pos:column="16">child</name> <op:operator pos:line="113" pos:column="22">is</op:operator> <name pos:line="113" pos:column="25">AliasStatement</name> <op:operator pos:line="113" pos:column="40">||</op:operator> <name pos:line="113" pos:column="43">child</name> <op:operator pos:line="113" pos:column="49">is</op:operator> <name pos:line="113" pos:column="52">ImportStatement</name></expr>)</condition><then pos:line="113" pos:column="68"> <block pos:line="113" pos:column="69">{
                <expr_stmt><expr><call><name pos:line="114" pos:column="17">AddAliasStatement</name><argument_list pos:line="114" pos:column="34">(<argument><expr><name pos:line="114" pos:column="35">child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="118" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="119" pos:column="9">/// Adds the given Statements to the ChildStatements collection.</comment>
        <comment type="line" pos:line="120" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="121" pos:column="9">/// &lt;param name="children"&gt;The Statements to add.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="122" pos:column="9">public</specifier> <name pos:line="122" pos:column="16">void</name></type> <name pos:line="122" pos:column="21">AddChildStatements</name><parameter_list pos:line="122" pos:column="39">(<param><decl><type><name><name pos:line="122" pos:column="40">IEnumerable</name><argument_list pos:line="122" pos:column="51">&lt;<argument><name pos:line="122" pos:column="52">Statement</name></argument>&gt;</argument_list></name></type> <name pos:line="122" pos:column="63">children</name></decl></param>)</parameter_list> <block pos:line="122" pos:column="73">{
            <foreach pos:line="123" pos:column="13">foreach(<init><decl><type><name pos:line="123" pos:column="21">var</name></type> <name pos:line="123" pos:column="25">child</name> <range pos:line="123" pos:column="31">in <expr><name pos:line="123" pos:column="34">children</name></expr></range></decl></init>) <block pos:line="123" pos:column="44">{
                <expr_stmt><expr><call><name pos:line="124" pos:column="17">AddChildStatement</name><argument_list pos:line="124" pos:column="34">(<argument><expr><name pos:line="124" pos:column="35">child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>

        <comment type="line" pos:line="128" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="129" pos:column="9">/// Add the given SrcMLLocation to the Locations collection.</comment>
        <comment type="line" pos:line="130" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="131" pos:column="9">/// &lt;param name="location"&gt;The location to add.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="132" pos:column="9">public</specifier> <specifier pos:line="132" pos:column="16">virtual</specifier> <name pos:line="132" pos:column="24">void</name></type> <name pos:line="132" pos:column="29">AddLocation</name><parameter_list pos:line="132" pos:column="40">(<param><decl><type><name pos:line="132" pos:column="41">SrcMLLocation</name></type> <name pos:line="132" pos:column="55">location</name></decl></param>)</parameter_list> <block pos:line="132" pos:column="65">{
            <expr_stmt><expr><call><name><name pos:line="133" pos:column="13">LocationList</name><op:operator pos:line="133" pos:column="25">.</op:operator><name pos:line="133" pos:column="26">Add</name></name><argument_list pos:line="133" pos:column="29">(<argument><expr><name pos:line="133" pos:column="30">location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="136" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="137" pos:column="9">/// Add the given SrcMLLocations to the Locations collection</comment>
        <comment type="line" pos:line="138" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="139" pos:column="9">/// &lt;param name="locations"&gt;The locations to add&lt;/param&gt;</comment>
        <function><type><specifier pos:line="140" pos:column="9">public</specifier> <specifier pos:line="140" pos:column="16">virtual</specifier> <name pos:line="140" pos:column="24">void</name></type> <name pos:line="140" pos:column="29">AddLocations</name><parameter_list pos:line="140" pos:column="41">(<param><decl><type><name><name pos:line="140" pos:column="42">IEnumerable</name><argument_list pos:line="140" pos:column="53">&lt;<argument><name pos:line="140" pos:column="54">SrcMLLocation</name></argument>&gt;</argument_list></name></type> <name pos:line="140" pos:column="69">locations</name></decl></param>)</parameter_list> <block pos:line="140" pos:column="80">{
            <expr_stmt><expr><call><name><name pos:line="141" pos:column="13">LocationList</name><op:operator pos:line="141" pos:column="25">.</op:operator><name pos:line="141" pos:column="26">AddRange</name></name><argument_list pos:line="141" pos:column="34">(<argument><expr><name pos:line="141" pos:column="35">locations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="144" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="145" pos:column="9">/// Finds all of the expressions in this statement of type &lt;typeparamref name="TExpression"/&gt;. This method searches all of the child</comment>
        <comment type="line" pos:line="146" pos:column="9">/// expressions and their descendants.</comment>
        <comment type="line" pos:line="147" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="148" pos:column="9">/// &lt;typeparam name="TExpression"&gt;The expression type to search for&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="149" pos:column="9">/// &lt;returns&gt;All expressions in this statement of type &lt;typeparamref name="TExpression"/&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="150" pos:column="9">public</specifier> <name><name pos:line="150" pos:column="16">IEnumerable</name><argument_list pos:line="150" pos:column="27">&lt;<argument><name pos:line="150" pos:column="28">TExpression</name></argument>&gt;</argument_list></name></type> <name><name pos:line="150" pos:column="41">FindExpressions</name><argument_list pos:line="150" pos:column="56">&lt;<argument><name pos:line="150" pos:column="57">TExpression</name></argument>&gt;</argument_list></name><parameter_list pos:line="150" pos:column="69">()</parameter_list> <where pos:line="150" pos:column="72">where <name pos:line="150" pos:column="78">TExpression</name> : <name pos:line="150" pos:column="92">Expression</name></where> <block pos:line="150" pos:column="103">{
            <return pos:line="151" pos:column="13">return <expr><call><name><name pos:line="151" pos:column="20">FindExpressions</name><argument_list pos:line="151" pos:column="35">&lt;<argument><name pos:line="151" pos:column="36">TExpression</name></argument>&gt;</argument_list></name><argument_list pos:line="151" pos:column="48">(<argument><expr><lit:literal type="boolean" pos:line="151" pos:column="49">false</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="154" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="155" pos:column="9">/// Finds all of the expressions in this statement of type &lt;typeparamref name="TExpression"/&gt;. This method searches all of the child</comment>
        <comment type="line" pos:line="156" pos:column="9">/// expressions and their descendants.</comment>
        <comment type="line" pos:line="157" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="158" pos:column="9">/// &lt;typeparam name="TExpression"&gt;The expression type to search for&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="159" pos:column="9">/// &lt;param name="searchDescendantStatements"&gt;If true, this will also return expressions from all of the descendant statements&lt;/param&gt;</comment>
        <comment type="line" pos:line="160" pos:column="9">/// &lt;returns&gt;All expressions rooted at this statement of type &lt;typeparamref name="TExpression"/&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="161" pos:column="9">public</specifier> <name><name pos:line="161" pos:column="16">IEnumerable</name><argument_list pos:line="161" pos:column="27">&lt;<argument><name pos:line="161" pos:column="28">TExpression</name></argument>&gt;</argument_list></name></type> <name><name pos:line="161" pos:column="41">FindExpressions</name><argument_list pos:line="161" pos:column="56">&lt;<argument><name pos:line="161" pos:column="57">TExpression</name></argument>&gt;</argument_list></name><parameter_list pos:line="161" pos:column="69">(<param><decl><type><name pos:line="161" pos:column="70">bool</name></type> <name pos:line="161" pos:column="75">searchDescendantStatements</name></decl></param>)</parameter_list> <where pos:line="161" pos:column="103">where <name pos:line="161" pos:column="109">TExpression</name> : <name pos:line="161" pos:column="123">Expression</name></where> <block pos:line="161" pos:column="134">{
            <decl_stmt><decl><type><name><name pos:line="162" pos:column="13">IEnumerable</name><argument_list pos:line="162" pos:column="24">&lt;<argument><name pos:line="162" pos:column="25">TExpression</name></argument>&gt;</argument_list></name></type> <name pos:line="162" pos:column="38">results</name></decl>;</decl_stmt>
            <if pos:line="163" pos:column="13">if<condition pos:line="163" pos:column="15">(<expr><name pos:line="163" pos:column="16">searchDescendantStatements</name></expr>)</condition><then pos:line="163" pos:column="43"> <block pos:line="163" pos:column="44">{
                <expr_stmt><expr><name pos:line="164" pos:column="17">results</name> <op:operator pos:line="164" pos:column="25">=</op:operator> <linq><from pos:line="164" pos:column="27">from <expr><name pos:line="164" pos:column="32">statement</name></expr> <in pos:line="164" pos:column="42">in <expr><call><name pos:line="164" pos:column="45">GetDescendantsAndSelf</name><argument_list pos:line="164" pos:column="66">()</argument_list></call></expr></in></from>
                          <from pos:line="165" pos:column="27">from <expr><name pos:line="165" pos:column="32">expr</name></expr> <in pos:line="165" pos:column="37">in <expr><call><name><name pos:line="165" pos:column="40">statement</name><op:operator pos:line="165" pos:column="49">.</op:operator><name><name pos:line="165" pos:column="50">FindExpressions</name><argument_list pos:line="165" pos:column="65">&lt;<argument><name pos:line="165" pos:column="66">TExpression</name></argument>&gt;</argument_list></name></name><argument_list pos:line="165" pos:column="78">(<argument><expr><lit:literal type="boolean" pos:line="165" pos:column="79">false</lit:literal></expr></argument>)</argument_list></call></expr></in></from>
                          <select pos:line="166" pos:column="27">select <expr><name pos:line="166" pos:column="34">expr</name></expr></select></linq></expr>;</expr_stmt>
            }</block></then> <else pos:line="167" pos:column="15">else <block pos:line="167" pos:column="20">{
                <expr_stmt><expr><name pos:line="168" pos:column="17">results</name> <op:operator pos:line="168" pos:column="25">=</op:operator> <linq><from pos:line="168" pos:column="27">from <expr><name pos:line="168" pos:column="32">content</name></expr> <in pos:line="168" pos:column="40">in <expr><call><name pos:line="168" pos:column="43">GetExpressions</name><argument_list pos:line="168" pos:column="57">()</argument_list></call></expr></in></from>
                          <from pos:line="169" pos:column="27">from <expr><name pos:line="169" pos:column="32">expr</name></expr> <in pos:line="169" pos:column="37">in <expr><call><name><name pos:line="169" pos:column="40">content</name><op:operator pos:line="169" pos:column="47">.</op:operator><name><name pos:line="169" pos:column="48">GetDescendantsAndSelf</name><argument_list pos:line="169" pos:column="69">&lt;<argument><name pos:line="169" pos:column="70">TExpression</name></argument>&gt;</argument_list></name></name><argument_list pos:line="169" pos:column="82">()</argument_list></call></expr></in></from>
                          <select pos:line="170" pos:column="27">select <expr><name pos:line="170" pos:column="34">expr</name></expr></select></linq></expr>;</expr_stmt>
            }</block></else></if>
            
            <return pos:line="173" pos:column="13">return <expr><name pos:line="173" pos:column="20">results</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="176" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="177" pos:column="9">/// Returns the parent statement.</comment>
        <comment type="line" pos:line="178" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="179" pos:column="9">protected</specifier> <specifier pos:line="179" pos:column="19">override</specifier> <name pos:line="179" pos:column="28">AbstractProgramElement</name></type> <name pos:line="179" pos:column="51">GetParent</name><parameter_list pos:line="179" pos:column="60">()</parameter_list> <block pos:line="179" pos:column="63">{
            <return pos:line="180" pos:column="13">return <expr><name pos:line="180" pos:column="20">ParentStatement</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="183" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="184" pos:column="9">/// Returns the child statements.</comment>
        <comment type="line" pos:line="185" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="186" pos:column="9">protected</specifier> <specifier pos:line="186" pos:column="19">override</specifier> <name><name pos:line="186" pos:column="28">IEnumerable</name><argument_list pos:line="186" pos:column="39">&lt;<argument><name pos:line="186" pos:column="40">AbstractProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="186" pos:column="64">GetChildren</name><parameter_list pos:line="186" pos:column="75">()</parameter_list> <block pos:line="186" pos:column="78">{
            <return pos:line="187" pos:column="13">return <expr><name pos:line="187" pos:column="20">ChildStatementsList</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="190" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="191" pos:column="9">/// Gets all of the parents of this statement</comment>
        <comment type="line" pos:line="192" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="193" pos:column="9">/// &lt;returns&gt;The parents of this statement&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="194" pos:column="9">public</specifier> <specifier pos:line="194" pos:column="16">new</specifier> <name><name pos:line="194" pos:column="20">IEnumerable</name><argument_list pos:line="194" pos:column="31">&lt;<argument><name pos:line="194" pos:column="32">Statement</name></argument>&gt;</argument_list></name></type> <name pos:line="194" pos:column="43">GetAncestors</name><parameter_list pos:line="194" pos:column="55">()</parameter_list> <block pos:line="194" pos:column="58">{
            <return pos:line="195" pos:column="13">return <expr><call><name><name pos:line="195" pos:column="20">base</name><op:operator pos:line="195" pos:column="24">.</op:operator><name pos:line="195" pos:column="25">GetAncestors</name></name><argument_list pos:line="195" pos:column="37">()</argument_list></call><op:operator pos:line="195" pos:column="39">.</op:operator><call><name><name pos:line="195" pos:column="40">Cast</name><argument_list pos:line="195" pos:column="44">&lt;<argument><name pos:line="195" pos:column="45">Statement</name></argument>&gt;</argument_list></name><argument_list pos:line="195" pos:column="55">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="198" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="199" pos:column="9">/// Gets all of parents of this statement as well as this statement.</comment>
        <comment type="line" pos:line="200" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="201" pos:column="9">/// &lt;returns&gt;This statement followed by its parents&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="202" pos:column="9">public</specifier> <specifier pos:line="202" pos:column="16">new</specifier> <name><name pos:line="202" pos:column="20">IEnumerable</name><argument_list pos:line="202" pos:column="31">&lt;<argument><name pos:line="202" pos:column="32">Statement</name></argument>&gt;</argument_list></name></type> <name pos:line="202" pos:column="43">GetAncestorsAndSelf</name><parameter_list pos:line="202" pos:column="62">()</parameter_list> <block pos:line="202" pos:column="65">{
            <return pos:line="203" pos:column="13">return <expr><call><name><name pos:line="203" pos:column="20">base</name><op:operator pos:line="203" pos:column="24">.</op:operator><name pos:line="203" pos:column="25">GetAncestorsAndSelf</name></name><argument_list pos:line="203" pos:column="44">()</argument_list></call><op:operator pos:line="203" pos:column="46">.</op:operator><call><name><name pos:line="203" pos:column="47">Cast</name><argument_list pos:line="203" pos:column="51">&lt;<argument><name pos:line="203" pos:column="52">Statement</name></argument>&gt;</argument_list></name><argument_list pos:line="203" pos:column="62">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="206" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="207" pos:column="9">/// Gets all of the descendant statements of this statement. This is every statement that is rooted at this statement.</comment>
        <comment type="line" pos:line="208" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="209" pos:column="9">/// &lt;returns&gt;The descendants of this statement&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="210" pos:column="9">public</specifier> <specifier pos:line="210" pos:column="16">new</specifier> <name><name pos:line="210" pos:column="20">IEnumerable</name><argument_list pos:line="210" pos:column="31">&lt;<argument><name pos:line="210" pos:column="32">Statement</name></argument>&gt;</argument_list></name></type> <name pos:line="210" pos:column="43">GetDescendants</name><parameter_list pos:line="210" pos:column="57">()</parameter_list> <block pos:line="210" pos:column="60">{
            <return pos:line="211" pos:column="13">return <expr><call><name><name pos:line="211" pos:column="20">base</name><op:operator pos:line="211" pos:column="24">.</op:operator><name pos:line="211" pos:column="25">GetDescendants</name></name><argument_list pos:line="211" pos:column="39">()</argument_list></call><op:operator pos:line="211" pos:column="41">.</op:operator><call><name><name pos:line="211" pos:column="42">Cast</name><argument_list pos:line="211" pos:column="46">&lt;<argument><name pos:line="211" pos:column="47">Statement</name></argument>&gt;</argument_list></name><argument_list pos:line="211" pos:column="57">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="214" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="215" pos:column="9">/// Gets all of the descendants of this statement as well as the statement itself.</comment>
        <comment type="line" pos:line="216" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="217" pos:column="9">/// &lt;returns&gt;This statement, followed by all of its descendants&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="218" pos:column="9">public</specifier> <specifier pos:line="218" pos:column="16">new</specifier> <name><name pos:line="218" pos:column="20">IEnumerable</name><argument_list pos:line="218" pos:column="31">&lt;<argument><name pos:line="218" pos:column="32">Statement</name></argument>&gt;</argument_list></name></type> <name pos:line="218" pos:column="43">GetDescendantsAndSelf</name><parameter_list pos:line="218" pos:column="64">()</parameter_list> <block pos:line="218" pos:column="67">{
            <return pos:line="219" pos:column="13">return <expr><call><name><name pos:line="219" pos:column="20">base</name><op:operator pos:line="219" pos:column="24">.</op:operator><name pos:line="219" pos:column="25">GetDescendantsAndSelf</name></name><argument_list pos:line="219" pos:column="46">()</argument_list></call><op:operator pos:line="219" pos:column="48">.</op:operator><call><name><name pos:line="219" pos:column="49">Cast</name><argument_list pos:line="219" pos:column="53">&lt;<argument><name pos:line="219" pos:column="54">Statement</name></argument>&gt;</argument_list></name><argument_list pos:line="219" pos:column="64">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="222" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="223" pos:column="9">/// Returns the siblings of this statement (i.e. the children of its parent) that occur before this statement.</comment>
        <comment type="line" pos:line="224" pos:column="9">/// The siblings are returned in document order.</comment>
        <comment type="line" pos:line="225" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="226" pos:column="9">/// &lt;exception cref="InvalidOperationException"&gt;This statement is not a child of its parent.&lt;/exception&gt;</comment>
        <function><type><specifier pos:line="227" pos:column="9">public</specifier> <specifier pos:line="227" pos:column="16">new</specifier> <name><name pos:line="227" pos:column="20">IEnumerable</name><argument_list pos:line="227" pos:column="31">&lt;<argument><name pos:line="227" pos:column="32">Statement</name></argument>&gt;</argument_list></name></type> <name pos:line="227" pos:column="43">GetSiblingsBeforeSelf</name><parameter_list pos:line="227" pos:column="64">()</parameter_list> <block pos:line="227" pos:column="67">{
            <return pos:line="228" pos:column="13">return <expr><call><name><name pos:line="228" pos:column="20">base</name><op:operator pos:line="228" pos:column="24">.</op:operator><name pos:line="228" pos:column="25">GetSiblingsBeforeSelf</name></name><argument_list pos:line="228" pos:column="46">()</argument_list></call><op:operator pos:line="228" pos:column="48">.</op:operator><call><name><name pos:line="228" pos:column="49">Cast</name><argument_list pos:line="228" pos:column="53">&lt;<argument><name pos:line="228" pos:column="54">Statement</name></argument>&gt;</argument_list></name><argument_list pos:line="228" pos:column="64">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="231" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="232" pos:column="9">/// Returns the siblings of this statement (i.e. the children of its parent) that occur after this statement.</comment>
        <comment type="line" pos:line="233" pos:column="9">/// The siblings are returned in document order.</comment>
        <comment type="line" pos:line="234" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="235" pos:column="9">/// &lt;exception cref="InvalidOperationException"&gt;This statement is not a child of its parent.&lt;/exception&gt;</comment>
        <function><type><specifier pos:line="236" pos:column="9">public</specifier> <specifier pos:line="236" pos:column="16">new</specifier> <name><name pos:line="236" pos:column="20">IEnumerable</name><argument_list pos:line="236" pos:column="31">&lt;<argument><name pos:line="236" pos:column="32">Statement</name></argument>&gt;</argument_list></name></type> <name pos:line="236" pos:column="43">GetSiblingsAfterSelf</name><parameter_list pos:line="236" pos:column="63">()</parameter_list> <block pos:line="236" pos:column="66">{
            <return pos:line="237" pos:column="13">return <expr><call><name><name pos:line="237" pos:column="20">base</name><op:operator pos:line="237" pos:column="24">.</op:operator><name pos:line="237" pos:column="25">GetSiblingsAfterSelf</name></name><argument_list pos:line="237" pos:column="45">()</argument_list></call><op:operator pos:line="237" pos:column="47">.</op:operator><call><name><name pos:line="237" pos:column="48">Cast</name><argument_list pos:line="237" pos:column="52">&lt;<argument><name pos:line="237" pos:column="53">Statement</name></argument>&gt;</argument_list></name><argument_list pos:line="237" pos:column="63">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="240" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="241" pos:column="9">/// Returns all the expressions within this statement.</comment>
        <comment type="line" pos:line="242" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="243" pos:column="9">public</specifier> <specifier pos:line="243" pos:column="16">virtual</specifier> <name><name pos:line="243" pos:column="24">IEnumerable</name><argument_list pos:line="243" pos:column="35">&lt;<argument><name pos:line="243" pos:column="36">Expression</name></argument>&gt;</argument_list></name></type> <name pos:line="243" pos:column="48">GetExpressions</name><parameter_list pos:line="243" pos:column="62">()</parameter_list> <block pos:line="243" pos:column="65">{
            <if pos:line="244" pos:column="13">if<condition pos:line="244" pos:column="15">(<expr><name pos:line="244" pos:column="16">Content</name> <op:operator pos:line="244" pos:column="24">!=</op:operator> <name pos:line="244" pos:column="27">null</name></expr>)</condition><then pos:line="244" pos:column="32"> <block pos:line="244" pos:column="33">{
                <return><specifier pos:line="245" pos:column="17">yield</specifier> return <expr><name pos:line="245" pos:column="30">Content</name></expr>;</return>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="249" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="250" pos:column="9">/// Returns the children of this statement that have the given name.</comment>
        <comment type="line" pos:line="251" pos:column="9">/// This method searches only the immediate children, and not further descendants.</comment>
        <comment type="line" pos:line="252" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="253" pos:column="9">/// &lt;param name="name"&gt;The name to search for.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="254" pos:column="9">public</specifier> <name><name pos:line="254" pos:column="16">IEnumerable</name><argument_list pos:line="254" pos:column="27">&lt;<argument><name pos:line="254" pos:column="28">INamedEntity</name></argument>&gt;</argument_list></name></type> <name pos:line="254" pos:column="42">GetNamedChildren</name><parameter_list pos:line="254" pos:column="58">(<param><decl><type><name pos:line="254" pos:column="59">string</name></type> <name pos:line="254" pos:column="66">name</name></decl></param>)</parameter_list> <block pos:line="254" pos:column="72">{
            <return pos:line="255" pos:column="13">return <expr><call><name><name pos:line="255" pos:column="20">GetNamedChildren</name><argument_list pos:line="255" pos:column="36">&lt;<argument><name pos:line="255" pos:column="37">INamedEntity</name></argument>&gt;</argument_list></name><argument_list pos:line="255" pos:column="50">(<argument><expr><name pos:line="255" pos:column="51">name</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="255" pos:column="57">true</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="258" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="259" pos:column="9">/// Returns the children of this statement that have the same name as the given &lt;paramref name="use"/&gt;.</comment>
        <comment type="line" pos:line="260" pos:column="9">/// This method searches only the immediate children, and not further descendants.</comment>
        <comment type="line" pos:line="261" pos:column="9">/// If the &lt;paramref name="use"/&gt; occurs within this statement, this method will return only the children</comment>
        <comment type="line" pos:line="262" pos:column="9">/// that occur prior to that use.</comment>
        <comment type="line" pos:line="263" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="264" pos:column="9">/// &lt;param name="use"&gt;The use containing the name to search for.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="265" pos:column="9">public</specifier> <name><name pos:line="265" pos:column="16">IEnumerable</name><argument_list pos:line="265" pos:column="27">&lt;<argument><name pos:line="265" pos:column="28">INamedEntity</name></argument>&gt;</argument_list></name></type> <name pos:line="265" pos:column="42">GetNamedChildren</name><parameter_list pos:line="265" pos:column="58">(<param><decl><type><name pos:line="265" pos:column="59">NameUse</name></type> <name pos:line="265" pos:column="67">use</name></decl></param>)</parameter_list> <block pos:line="265" pos:column="72">{
            <return pos:line="266" pos:column="13">return <expr><call><name><name pos:line="266" pos:column="20">GetNamedChildren</name><argument_list pos:line="266" pos:column="36">&lt;<argument><name pos:line="266" pos:column="37">INamedEntity</name></argument>&gt;</argument_list></name><argument_list pos:line="266" pos:column="50">(<argument><expr><name pos:line="266" pos:column="51">use</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="266" pos:column="56">true</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="269" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="270" pos:column="9">/// Returns the children of this statement that have the given name, and the given type.</comment>
        <comment type="line" pos:line="271" pos:column="9">/// This method searches only the immediate children, and not further descendants.</comment>
        <comment type="line" pos:line="272" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="273" pos:column="9">/// &lt;typeparam name="T"&gt;The type of children to return.&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="274" pos:column="9">/// &lt;param name="name"&gt;The name to search for.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="275" pos:column="9">public</specifier> <name><name pos:line="275" pos:column="16">IEnumerable</name><argument_list pos:line="275" pos:column="27">&lt;<argument><name pos:line="275" pos:column="28">T</name></argument>&gt;</argument_list></name></type> <name><name pos:line="275" pos:column="31">GetNamedChildren</name><argument_list pos:line="275" pos:column="47">&lt;<argument><name pos:line="275" pos:column="48">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="275" pos:column="50">(<param><decl><type><name pos:line="275" pos:column="51">string</name></type> <name pos:line="275" pos:column="58">name</name></decl></param>)</parameter_list> <where pos:line="275" pos:column="64">where <name pos:line="275" pos:column="70">T</name> : <name pos:line="275" pos:column="74">INamedEntity</name></where> <block pos:line="275" pos:column="87">{
            <decl_stmt><decl><type><name pos:line="276" pos:column="13">bool</name></type> <name pos:line="276" pos:column="18">searchDeclarations</name> <init pos:line="276" pos:column="37">= <expr><call><name pos:line="276" pos:column="39">typeof</name><argument_list pos:line="276" pos:column="45">(<argument><expr><name pos:line="276" pos:column="46">T</name></expr></argument>)</argument_list></call><op:operator pos:line="276" pos:column="48">.</op:operator><name pos:line="276" pos:column="49">IsInterface</name> <op:operator pos:line="276" pos:column="61">||</op:operator> <call><name pos:line="276" pos:column="64">typeof</name><argument_list pos:line="276" pos:column="70">(<argument><expr><name pos:line="276" pos:column="71">T</name></expr></argument>)</argument_list></call><op:operator pos:line="276" pos:column="73">.</op:operator><call><name pos:line="276" pos:column="74">IsSubclassOf</name><argument_list pos:line="276" pos:column="86">(<argument><expr><call><name pos:line="276" pos:column="87">typeof</name><argument_list pos:line="276" pos:column="93">(<argument><expr><name pos:line="276" pos:column="94">Expression</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="277" pos:column="13">return <expr><call><name><name pos:line="277" pos:column="20">GetNamedChildren</name><argument_list pos:line="277" pos:column="36">&lt;<argument><name pos:line="277" pos:column="37">T</name></argument>&gt;</argument_list></name><argument_list pos:line="277" pos:column="39">(<argument><expr><name pos:line="277" pos:column="40">name</name></expr></argument>, <argument><expr><name pos:line="277" pos:column="46">searchDeclarations</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="280" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="281" pos:column="9">/// Returns the children of this statement that have the same name as the given &lt;paramref name="use"/&gt;, and the given type.</comment>
        <comment type="line" pos:line="282" pos:column="9">/// This method searches only the immediate children, and not further descendants.</comment>
        <comment type="line" pos:line="283" pos:column="9">/// If the &lt;paramref name="use"/&gt; occurs within this statement, this method will return only the children</comment>
        <comment type="line" pos:line="284" pos:column="9">/// that occur prior to that use.</comment>
        <comment type="line" pos:line="285" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="286" pos:column="9">/// &lt;typeparam name="T"&gt;The type of children to return.&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="287" pos:column="9">/// &lt;param name="use"&gt;The use containing the name to search for.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="288" pos:column="9">public</specifier> <name><name pos:line="288" pos:column="16">IEnumerable</name><argument_list pos:line="288" pos:column="27">&lt;<argument><name pos:line="288" pos:column="28">T</name></argument>&gt;</argument_list></name></type> <name><name pos:line="288" pos:column="31">GetNamedChildren</name><argument_list pos:line="288" pos:column="47">&lt;<argument><name pos:line="288" pos:column="48">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="288" pos:column="50">(<param><decl><type><name pos:line="288" pos:column="51">NameUse</name></type> <name pos:line="288" pos:column="59">use</name></decl></param>)</parameter_list> <where pos:line="288" pos:column="64">where <name pos:line="288" pos:column="70">T</name> : <name pos:line="288" pos:column="74">INamedEntity</name></where> <block pos:line="288" pos:column="87">{
            <decl_stmt><decl><type><name pos:line="289" pos:column="13">bool</name></type> <name pos:line="289" pos:column="18">searchDeclarations</name> <init pos:line="289" pos:column="37">= <expr><call><name pos:line="289" pos:column="39">typeof</name><argument_list pos:line="289" pos:column="45">(<argument><expr><name pos:line="289" pos:column="46">T</name></expr></argument>)</argument_list></call><op:operator pos:line="289" pos:column="48">.</op:operator><name pos:line="289" pos:column="49">IsInterface</name> <op:operator pos:line="289" pos:column="61">||</op:operator> <call><name pos:line="289" pos:column="64">typeof</name><argument_list pos:line="289" pos:column="70">(<argument><expr><name pos:line="289" pos:column="71">T</name></expr></argument>)</argument_list></call><op:operator pos:line="289" pos:column="73">.</op:operator><call><name pos:line="289" pos:column="74">IsSubclassOf</name><argument_list pos:line="289" pos:column="86">(<argument><expr><call><name pos:line="289" pos:column="87">typeof</name><argument_list pos:line="289" pos:column="93">(<argument><expr><name pos:line="289" pos:column="94">Expression</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="290" pos:column="13">return <expr><call><name><name pos:line="290" pos:column="20">GetNamedChildren</name><argument_list pos:line="290" pos:column="36">&lt;<argument><name pos:line="290" pos:column="37">T</name></argument>&gt;</argument_list></name><argument_list pos:line="290" pos:column="39">(<argument><expr><name pos:line="290" pos:column="40">use</name></expr></argument>, <argument><expr><name pos:line="290" pos:column="45">searchDeclarations</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="293" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="294" pos:column="9">/// Returns the children of this statement that have the given name, and the given type.</comment>
        <comment type="line" pos:line="295" pos:column="9">/// This method searches only the immediate children, and not further descendants.</comment>
        <comment type="line" pos:line="296" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="297" pos:column="9">/// &lt;typeparam name="T"&gt;The type of children to return.&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="298" pos:column="9">/// &lt;param name="name"&gt;The name to search for.&lt;/param&gt;</comment>
        <comment type="line" pos:line="299" pos:column="9">/// &lt;param name="searchDeclarations"&gt;Whether to search the child DeclarationStatements for named entities.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="300" pos:column="9">public</specifier> <specifier pos:line="300" pos:column="16">virtual</specifier> <name><name pos:line="300" pos:column="24">IEnumerable</name><argument_list pos:line="300" pos:column="35">&lt;<argument><name pos:line="300" pos:column="36">T</name></argument>&gt;</argument_list></name></type> <name><name pos:line="300" pos:column="39">GetNamedChildren</name><argument_list pos:line="300" pos:column="55">&lt;<argument><name pos:line="300" pos:column="56">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="300" pos:column="58">(<param><decl><type><name pos:line="300" pos:column="59">string</name></type> <name pos:line="300" pos:column="66">name</name></decl></param>, <param><decl><type><name pos:line="300" pos:column="72">bool</name></type> <name pos:line="300" pos:column="77">searchDeclarations</name></decl></param>)</parameter_list> <where pos:line="300" pos:column="97">where <name pos:line="300" pos:column="103">T</name> : <name pos:line="300" pos:column="107">INamedEntity</name></where> <block pos:line="300" pos:column="120">{
            <decl_stmt><decl><type><name pos:line="301" pos:column="13">var</name></type> <name pos:line="301" pos:column="17">scopes</name> <init pos:line="301" pos:column="24">= <expr><call><name pos:line="301" pos:column="26">GetChildren</name><argument_list pos:line="301" pos:column="37">()</argument_list></call><op:operator pos:line="301" pos:column="39">.</op:operator><call><name><name pos:line="301" pos:column="40">OfType</name><argument_list pos:line="301" pos:column="46">&lt;<argument><name pos:line="301" pos:column="47">T</name></argument>&gt;</argument_list></name><argument_list pos:line="301" pos:column="49">()</argument_list></call><op:operator pos:line="301" pos:column="51">.</op:operator><call><name pos:line="301" pos:column="52">Where</name><argument_list pos:line="301" pos:column="57">(<argument><expr><lambda><name pos:line="301" pos:column="58">ns</name> <op:operator pos:line="301" pos:column="61">=&gt;</op:operator> <call><name><name pos:line="301" pos:column="64">string</name><op:operator pos:line="301" pos:column="70">.</op:operator><name pos:line="301" pos:column="71">Equals</name></name><argument_list pos:line="301" pos:column="77">(<argument><expr><name><name pos:line="301" pos:column="78">ns</name><op:operator pos:line="301" pos:column="80">.</op:operator><name pos:line="301" pos:column="81">Name</name></name></expr></argument>, <argument><expr><name pos:line="301" pos:column="87">name</name></expr></argument>, <argument><expr><name><name pos:line="301" pos:column="93">StringComparison</name><op:operator pos:line="301" pos:column="109">.</op:operator><name pos:line="301" pos:column="110">Ordinal</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="302" pos:column="13">if<condition pos:line="302" pos:column="15">(<expr><op:operator pos:line="302" pos:column="16">!</op:operator><name pos:line="302" pos:column="17">searchDeclarations</name></expr>)</condition><then pos:line="302" pos:column="36"> <block pos:line="302" pos:column="37">{ <return pos:line="302" pos:column="39">return <expr><name pos:line="302" pos:column="46">scopes</name></expr>;</return> }</block></then></if>

            <decl_stmt><decl><type><name pos:line="304" pos:column="13">var</name></type> <name pos:line="304" pos:column="17">decls</name> <init pos:line="304" pos:column="23">= <expr><linq><from pos:line="304" pos:column="25">from <expr><name pos:line="304" pos:column="30">declStmt</name></expr> <in pos:line="304" pos:column="39">in <expr><call><name pos:line="304" pos:column="42">GetChildren</name><argument_list pos:line="304" pos:column="53">()</argument_list></call><op:operator pos:line="304" pos:column="55">.</op:operator><call><name><name pos:line="304" pos:column="56">OfType</name><argument_list pos:line="304" pos:column="62">&lt;<argument><name pos:line="304" pos:column="63">DeclarationStatement</name></argument>&gt;</argument_list></name><argument_list pos:line="304" pos:column="84">()</argument_list></call></expr></in></from>
                        <from pos:line="305" pos:column="25">from <expr><name pos:line="305" pos:column="30">decl</name></expr> <in pos:line="305" pos:column="35">in <expr><call><name><name pos:line="305" pos:column="38">declStmt</name><op:operator pos:line="305" pos:column="46">.</op:operator><name pos:line="305" pos:column="47">GetDeclarations</name></name><argument_list pos:line="305" pos:column="62">()</argument_list></call><op:operator pos:line="305" pos:column="64">.</op:operator><call><name><name pos:line="305" pos:column="65">OfType</name><argument_list pos:line="305" pos:column="71">&lt;<argument><name pos:line="305" pos:column="72">T</name></argument>&gt;</argument_list></name><argument_list pos:line="305" pos:column="74">()</argument_list></call></expr></in></from>
                        <where pos:line="306" pos:column="25">where <expr><call><name><name pos:line="306" pos:column="31">string</name><op:operator pos:line="306" pos:column="37">.</op:operator><name pos:line="306" pos:column="38">Equals</name></name><argument_list pos:line="306" pos:column="44">(<argument><expr><name><name pos:line="306" pos:column="45">decl</name><op:operator pos:line="306" pos:column="49">.</op:operator><name pos:line="306" pos:column="50">Name</name></name></expr></argument>, <argument><expr><name pos:line="306" pos:column="56">name</name></expr></argument>, <argument><expr><name><name pos:line="306" pos:column="62">StringComparison</name><op:operator pos:line="306" pos:column="78">.</op:operator><name pos:line="306" pos:column="79">Ordinal</name></name></expr></argument>)</argument_list></call></expr></where>
                        <select pos:line="307" pos:column="25">select <expr><name pos:line="307" pos:column="32">decl</name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <return pos:line="308" pos:column="13">return <expr><call><name><name pos:line="308" pos:column="20">scopes</name><op:operator pos:line="308" pos:column="26">.</op:operator><name pos:line="308" pos:column="27">Concat</name></name><argument_list pos:line="308" pos:column="33">(<argument><expr><name pos:line="308" pos:column="34">decls</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="311" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="312" pos:column="9">/// Returns the children of this statement that have the same name as the given &lt;paramref name="use"/&gt;, and the given type.</comment>
        <comment type="line" pos:line="313" pos:column="9">/// This method searches only the immediate children, and not further descendants.</comment>
        <comment type="line" pos:line="314" pos:column="9">/// If the &lt;paramref name="use"/&gt; occurs within this statement, this method will return only the children</comment>
        <comment type="line" pos:line="315" pos:column="9">/// that occur prior to that use.</comment>
        <comment type="line" pos:line="316" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="317" pos:column="9">/// &lt;typeparam name="T"&gt;The type of children to return.&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="318" pos:column="9">/// &lt;param name="use"&gt;The use containing the name to search for.&lt;/param&gt;</comment>
        <comment type="line" pos:line="319" pos:column="9">/// &lt;param name="searchDeclarations"&gt;Whether to search the child DeclarationStatements for named entities.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="320" pos:column="9">public</specifier> <specifier pos:line="320" pos:column="16">virtual</specifier> <name><name pos:line="320" pos:column="24">IEnumerable</name><argument_list pos:line="320" pos:column="35">&lt;<argument><name pos:line="320" pos:column="36">T</name></argument>&gt;</argument_list></name></type> <name><name pos:line="320" pos:column="39">GetNamedChildren</name><argument_list pos:line="320" pos:column="55">&lt;<argument><name pos:line="320" pos:column="56">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="320" pos:column="58">(<param><decl><type><name pos:line="320" pos:column="59">NameUse</name></type> <name pos:line="320" pos:column="67">use</name></decl></param>, <param><decl><type><name pos:line="320" pos:column="72">bool</name></type> <name pos:line="320" pos:column="77">searchDeclarations</name></decl></param>)</parameter_list> <where pos:line="320" pos:column="97">where <name pos:line="320" pos:column="103">T</name> : <name pos:line="320" pos:column="107">INamedEntity</name></where> <block pos:line="320" pos:column="120">{
            <if pos:line="321" pos:column="13">if<condition pos:line="321" pos:column="15">(<expr><name pos:line="321" pos:column="16">use</name> <op:operator pos:line="321" pos:column="20">==</op:operator> <name pos:line="321" pos:column="23">null</name></expr>)</condition><then pos:line="321" pos:column="28"> <block pos:line="321" pos:column="29">{ <throw pos:line="321" pos:column="31">throw <expr><op:operator pos:line="321" pos:column="37">new</op:operator> <call><name pos:line="321" pos:column="41">ArgumentNullException</name><argument_list pos:line="321" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="321" pos:column="63">"use"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>
            <comment type="line" pos:line="322" pos:column="13">//location comparison is only valid if the use occurs within this statement (or its children)</comment>
            <decl_stmt><decl><type><name pos:line="323" pos:column="13">bool</name></type> <name pos:line="323" pos:column="18">filterLocation</name> <init pos:line="323" pos:column="33">= <expr><call><name><name pos:line="323" pos:column="35">PrimaryLocation</name><op:operator pos:line="323" pos:column="50">.</op:operator><name pos:line="323" pos:column="51">Contains</name></name><argument_list pos:line="323" pos:column="59">(<argument><expr><name><name pos:line="323" pos:column="60">use</name><op:operator pos:line="323" pos:column="63">.</op:operator><name pos:line="323" pos:column="64">Location</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="324" pos:column="13">if<condition pos:line="324" pos:column="15">(<expr><name pos:line="324" pos:column="16">filterLocation</name></expr>)</condition><then pos:line="324" pos:column="31"> <block pos:line="324" pos:column="32">{
                <decl_stmt><decl><type><name pos:line="325" pos:column="17">var</name></type> <name pos:line="325" pos:column="21">scopes</name> <init pos:line="325" pos:column="28">= <expr><call><name pos:line="325" pos:column="30">GetChildren</name><argument_list pos:line="325" pos:column="41">()</argument_list></call><op:operator pos:line="325" pos:column="43">.</op:operator><call><name><name pos:line="325" pos:column="44">OfType</name><argument_list pos:line="325" pos:column="50">&lt;<argument><name pos:line="325" pos:column="51">T</name></argument>&gt;</argument_list></name><argument_list pos:line="325" pos:column="53">()</argument_list></call><op:operator pos:line="325" pos:column="55">.</op:operator><call><name pos:line="325" pos:column="56">Where</name><argument_list pos:line="325" pos:column="61">(<argument><expr><lambda><name pos:line="325" pos:column="62">ns</name> <op:operator pos:line="325" pos:column="65">=&gt;</op:operator> <call><name><name pos:line="325" pos:column="68">string</name><op:operator pos:line="325" pos:column="74">.</op:operator><name pos:line="325" pos:column="75">Equals</name></name><argument_list pos:line="325" pos:column="81">(<argument><expr><name><name pos:line="325" pos:column="82">ns</name><op:operator pos:line="325" pos:column="84">.</op:operator><name pos:line="325" pos:column="85">Name</name></name></expr></argument>, <argument><expr><name><name pos:line="325" pos:column="91">use</name><op:operator pos:line="325" pos:column="94">.</op:operator><name pos:line="325" pos:column="95">Name</name></name></expr></argument>, <argument><expr><name><name pos:line="325" pos:column="101">StringComparison</name><op:operator pos:line="325" pos:column="117">.</op:operator><name pos:line="325" pos:column="118">Ordinal</name></name></expr></argument>)</argument_list></call>
                                                                   <op:operator pos:line="326" pos:column="68">&amp;&amp;</op:operator> <call><name><name pos:line="326" pos:column="71">PositionComparer</name><op:operator pos:line="326" pos:column="87">.</op:operator><name pos:line="326" pos:column="88">CompareLocation</name></name><argument_list pos:line="326" pos:column="103">(<argument><expr><name pos:line="326" pos:column="104">PrimaryLocation</name></expr></argument>, <argument><expr><name><name pos:line="326" pos:column="121">use</name><op:operator pos:line="326" pos:column="124">.</op:operator><name pos:line="326" pos:column="125">Location</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="326" pos:column="135">&lt;</op:operator> <lit:literal type="number" pos:line="326" pos:column="137">0</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="327" pos:column="17">if<condition pos:line="327" pos:column="19">(<expr><op:operator pos:line="327" pos:column="20">!</op:operator><name pos:line="327" pos:column="21">searchDeclarations</name></expr>)</condition><then pos:line="327" pos:column="40"> <block pos:line="327" pos:column="41">{ <return pos:line="327" pos:column="43">return <expr><name pos:line="327" pos:column="50">scopes</name></expr>;</return> }</block></then></if>

                <comment type="line" pos:line="329" pos:column="17">//this will return the var decls in document order</comment>
                <decl_stmt><decl><type><name pos:line="330" pos:column="17">var</name></type> <name pos:line="330" pos:column="21">decls</name> <init pos:line="330" pos:column="27">= <expr><linq><from pos:line="330" pos:column="29">from <expr><name pos:line="330" pos:column="34">declStmt</name></expr> <in pos:line="330" pos:column="43">in <expr><call><name pos:line="330" pos:column="46">GetChildren</name><argument_list pos:line="330" pos:column="57">()</argument_list></call><op:operator pos:line="330" pos:column="59">.</op:operator><call><name><name pos:line="330" pos:column="60">OfType</name><argument_list pos:line="330" pos:column="66">&lt;<argument><name pos:line="330" pos:column="67">DeclarationStatement</name></argument>&gt;</argument_list></name><argument_list pos:line="330" pos:column="88">()</argument_list></call></expr></in></from>
                            <where pos:line="331" pos:column="29">where <expr><call><name><name pos:line="331" pos:column="35">PositionComparer</name><op:operator pos:line="331" pos:column="51">.</op:operator><name pos:line="331" pos:column="52">CompareLocation</name></name><argument_list pos:line="331" pos:column="67">(<argument><expr><name><name pos:line="331" pos:column="68">declStmt</name><op:operator pos:line="331" pos:column="76">.</op:operator><name pos:line="331" pos:column="77">PrimaryLocation</name></name></expr></argument>, <argument><expr><name><name pos:line="331" pos:column="94">use</name><op:operator pos:line="331" pos:column="97">.</op:operator><name pos:line="331" pos:column="98">Location</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="331" pos:column="108">&lt;</op:operator> <lit:literal type="number" pos:line="331" pos:column="110">0</lit:literal></expr></where>
                            <from pos:line="332" pos:column="29">from <expr><name pos:line="332" pos:column="34">decl</name></expr> <in pos:line="332" pos:column="39">in <expr><call><name><name pos:line="332" pos:column="42">declStmt</name><op:operator pos:line="332" pos:column="50">.</op:operator><name pos:line="332" pos:column="51">GetDeclarations</name></name><argument_list pos:line="332" pos:column="66">()</argument_list></call><op:operator pos:line="332" pos:column="68">.</op:operator><call><name><name pos:line="332" pos:column="69">OfType</name><argument_list pos:line="332" pos:column="75">&lt;<argument><name pos:line="332" pos:column="76">T</name></argument>&gt;</argument_list></name><argument_list pos:line="332" pos:column="78">()</argument_list></call></expr></in></from>
                            <where pos:line="333" pos:column="29">where <expr><call><name><name pos:line="333" pos:column="35">string</name><op:operator pos:line="333" pos:column="41">.</op:operator><name pos:line="333" pos:column="42">Equals</name></name><argument_list pos:line="333" pos:column="48">(<argument><expr><name><name pos:line="333" pos:column="49">decl</name><op:operator pos:line="333" pos:column="53">.</op:operator><name pos:line="333" pos:column="54">Name</name></name></expr></argument>, <argument><expr><name><name pos:line="333" pos:column="60">use</name><op:operator pos:line="333" pos:column="63">.</op:operator><name pos:line="333" pos:column="64">Name</name></name></expr></argument>, <argument><expr><name><name pos:line="333" pos:column="70">StringComparison</name><op:operator pos:line="333" pos:column="86">.</op:operator><name pos:line="333" pos:column="87">Ordinal</name></name></expr></argument>)</argument_list></call></expr></where>
                            <select pos:line="334" pos:column="29">select <expr><name pos:line="334" pos:column="36">decl</name></expr></select></linq></expr></init></decl>;</decl_stmt>
                <return pos:line="335" pos:column="17">return <expr><call><name><name pos:line="335" pos:column="24">scopes</name><op:operator pos:line="335" pos:column="30">.</op:operator><name pos:line="335" pos:column="31">Concat</name></name><argument_list pos:line="335" pos:column="37">(<argument><expr><name pos:line="335" pos:column="38">decls</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then> <else pos:line="336" pos:column="15">else <block pos:line="336" pos:column="20">{
                <return pos:line="337" pos:column="17">return <expr><call><name><name pos:line="337" pos:column="24">GetNamedChildren</name><argument_list pos:line="337" pos:column="40">&lt;<argument><name pos:line="337" pos:column="41">T</name></argument>&gt;</argument_list></name><argument_list pos:line="337" pos:column="43">(<argument><expr><name><name pos:line="337" pos:column="44">use</name><op:operator pos:line="337" pos:column="47">.</op:operator><name pos:line="337" pos:column="48">Name</name></name></expr></argument>, <argument><expr><name pos:line="337" pos:column="54">searchDeclarations</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></else></if>
        }</block></function>

        <function><type><specifier pos:line="341" pos:column="9">public</specifier> <specifier pos:line="341" pos:column="16">virtual</specifier> <name pos:line="341" pos:column="24">bool</name></type> <name pos:line="341" pos:column="29">CanBeMergedWith</name><parameter_list pos:line="341" pos:column="44">(<param><decl><type><name pos:line="341" pos:column="45">Statement</name></type> <name pos:line="341" pos:column="55">otherStatement</name></decl></param>)</parameter_list> <block pos:line="341" pos:column="71">{
            <return pos:line="342" pos:column="13">return <expr><call><name><name pos:line="342" pos:column="20">this</name><op:operator pos:line="342" pos:column="24">.</op:operator><name pos:line="342" pos:column="25">ComputeMergeId</name></name><argument_list pos:line="342" pos:column="39">()</argument_list></call> <op:operator pos:line="342" pos:column="42">==</op:operator> <call><name><name pos:line="342" pos:column="45">otherStatement</name><op:operator pos:line="342" pos:column="59">.</op:operator><name pos:line="342" pos:column="60">ComputeMergeId</name></name><argument_list pos:line="342" pos:column="74">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="345" pos:column="9">/// &lt;summary&gt; Clears the &lt;see cref="ChildStatements"/&gt; collection. &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="346" pos:column="9">protected</specifier> <name pos:line="346" pos:column="19">void</name></type> <name pos:line="346" pos:column="24">ClearChildren</name><parameter_list pos:line="346" pos:column="37">()</parameter_list> <block pos:line="346" pos:column="40">{
            <expr_stmt><expr><call><name><name pos:line="347" pos:column="13">ChildStatementsList</name><op:operator pos:line="347" pos:column="32">.</op:operator><name pos:line="347" pos:column="33">Clear</name></name><argument_list pos:line="347" pos:column="38">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="350" pos:column="9">protected</specifier> <specifier pos:line="350" pos:column="19">virtual</specifier> <name pos:line="350" pos:column="27">string</name></type> <name pos:line="350" pos:column="34">ComputeMergeId</name><parameter_list pos:line="350" pos:column="48">()</parameter_list> <block pos:line="350" pos:column="51">{
            <return pos:line="351" pos:column="13">return <expr><call><name><name pos:line="351" pos:column="20">this</name><op:operator pos:line="351" pos:column="24">.</op:operator><name pos:line="351" pos:column="25">GetHashCode</name></name><argument_list pos:line="351" pos:column="36">()</argument_list></call><op:operator pos:line="351" pos:column="38">.</op:operator><call><name pos:line="351" pos:column="39">ToString</name><argument_list pos:line="351" pos:column="47">()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="354" pos:column="9">public</specifier> <specifier pos:line="354" pos:column="16">virtual</specifier> <name pos:line="354" pos:column="24">Statement</name></type> <name pos:line="354" pos:column="34">Merge</name><parameter_list pos:line="354" pos:column="39">(<param><decl><type><name pos:line="354" pos:column="40">Statement</name></type> <name pos:line="354" pos:column="50">otherStatement</name></decl></param>)</parameter_list> <block pos:line="354" pos:column="66">{
            <if pos:line="355" pos:column="13">if<condition pos:line="355" pos:column="15">(<expr><name pos:line="355" pos:column="16">null</name> <op:operator pos:line="355" pos:column="21">==</op:operator> <name pos:line="355" pos:column="24">otherStatement</name></expr>)</condition><then pos:line="355" pos:column="39"> <block pos:line="355" pos:column="40">{
                <throw pos:line="356" pos:column="17">throw <expr><op:operator pos:line="356" pos:column="23">new</op:operator> <call><name pos:line="356" pos:column="27">ArgumentNullException</name><argument_list pos:line="356" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="356" pos:column="49">"otherStatement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <return pos:line="358" pos:column="13">return <expr><call><name><name pos:line="358" pos:column="20">Merge</name><argument_list pos:line="358" pos:column="25">&lt;<argument><name pos:line="358" pos:column="26">Statement</name></argument>&gt;</argument_list></name><argument_list pos:line="358" pos:column="36">(<argument><expr><name pos:line="358" pos:column="37">this</name></expr></argument>, <argument><expr><name pos:line="358" pos:column="43">otherStatement</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="361" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="362" pos:column="9">/// Removes &lt;paramref name="child"/&gt; from &lt;see cref="ChildStatements"/&gt;.</comment>
        <comment type="line" pos:line="363" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="364" pos:column="9">/// &lt;param name="child"&gt;The child statement to remove.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="365" pos:column="9">public</specifier> <specifier pos:line="365" pos:column="16">virtual</specifier> <name pos:line="365" pos:column="24">void</name></type> <name pos:line="365" pos:column="29">RemoveChild</name><parameter_list pos:line="365" pos:column="40">(<param><decl><type><name pos:line="365" pos:column="41">Statement</name></type> <name pos:line="365" pos:column="51">child</name></decl></param>)</parameter_list> <block pos:line="365" pos:column="58">{
            <expr_stmt><expr><call><name><name pos:line="366" pos:column="13">ChildStatementsList</name><op:operator pos:line="366" pos:column="32">.</op:operator><name pos:line="366" pos:column="33">Remove</name></name><argument_list pos:line="366" pos:column="39">(<argument><expr><name pos:line="366" pos:column="40">child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="369" pos:column="9">public</specifier> <specifier pos:line="369" pos:column="16">virtual</specifier> <name pos:line="369" pos:column="24">void</name></type> <name pos:line="369" pos:column="29">RemoveFile</name><parameter_list pos:line="369" pos:column="39">(<param><decl><type><name pos:line="369" pos:column="40">string</name></type> <name pos:line="369" pos:column="47">fileName</name></decl></param>)</parameter_list> <block pos:line="369" pos:column="57">{
            <expr_stmt><expr><call><name pos:line="370" pos:column="13">RemoveLocations</name><argument_list pos:line="370" pos:column="28">(<argument><expr><name pos:line="370" pos:column="29">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name pos:line="372" pos:column="13">RemoveFileFromChildren</name><argument_list pos:line="372" pos:column="35">(<argument><expr><name pos:line="372" pos:column="36">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if pos:line="374" pos:column="13">if<condition pos:line="374" pos:column="15">(<expr><name pos:line="374" pos:column="16">ToBeDeleted</name></expr>)</condition><then pos:line="374" pos:column="28"> <block pos:line="374" pos:column="29">{
                <expr_stmt><expr><name pos:line="375" pos:column="17">ParentStatement</name> <op:operator pos:line="375" pos:column="33">=</op:operator> <name pos:line="375" pos:column="35">null</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="379" pos:column="9">protected</specifier> <specifier pos:line="379" pos:column="19">static</specifier> <name pos:line="379" pos:column="26">T</name></type> <name><name pos:line="379" pos:column="28">Merge</name><argument_list pos:line="379" pos:column="33">&lt;<argument><name pos:line="379" pos:column="34">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="379" pos:column="36">(<param><decl><type><name pos:line="379" pos:column="37">T</name></type> <name pos:line="379" pos:column="39">firstStatement</name></decl></param>, <param><decl><type><name pos:line="379" pos:column="55">T</name></type> <name pos:line="379" pos:column="57">secondStatement</name></decl></param>)</parameter_list> <where pos:line="379" pos:column="74">where <name pos:line="379" pos:column="80">T</name> : <name pos:line="379" pos:column="84">Statement</name>, new()</where> <block pos:line="379" pos:column="101">{
            <decl_stmt><decl><type><name pos:line="380" pos:column="13">T</name></type> <name pos:line="380" pos:column="15">combinedStatement</name> <init pos:line="380" pos:column="33">= <expr><op:operator pos:line="380" pos:column="35">new</op:operator> <call><name pos:line="380" pos:column="39">T</name><argument_list pos:line="380" pos:column="40">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="381" pos:column="13">combinedStatement</name><op:operator pos:line="381" pos:column="30">.</op:operator><name pos:line="381" pos:column="31">ProgrammingLanguage</name></name> <op:operator pos:line="381" pos:column="51">=</op:operator> <name><name pos:line="381" pos:column="53">firstStatement</name><op:operator pos:line="381" pos:column="67">.</op:operator><name pos:line="381" pos:column="68">ProgrammingLanguage</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="382" pos:column="13">combinedStatement</name><op:operator pos:line="382" pos:column="30">.</op:operator><name pos:line="382" pos:column="31">AddLocations</name></name><argument_list pos:line="382" pos:column="43">(<argument><expr><call><name><name pos:line="382" pos:column="44">firstStatement</name><op:operator pos:line="382" pos:column="58">.</op:operator><name pos:line="382" pos:column="59">LocationList</name><op:operator pos:line="382" pos:column="71">.</op:operator><name pos:line="382" pos:column="72">Concat</name></name><argument_list pos:line="382" pos:column="78">(<argument><expr><name><name pos:line="382" pos:column="79">secondStatement</name><op:operator pos:line="382" pos:column="94">.</op:operator><name pos:line="382" pos:column="95">LocationList</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="383" pos:column="13">combinedStatement</name><op:operator pos:line="383" pos:column="30">.</op:operator><name pos:line="383" pos:column="31">AddChildStatements</name></name><argument_list pos:line="383" pos:column="49">(<argument><expr><call><name><name pos:line="383" pos:column="50">firstStatement</name><op:operator pos:line="383" pos:column="64">.</op:operator><name pos:line="383" pos:column="65">ChildStatements</name><op:operator pos:line="383" pos:column="80">.</op:operator><name pos:line="383" pos:column="81">Concat</name></name><argument_list pos:line="383" pos:column="87">(<argument><expr><name><name pos:line="383" pos:column="88">secondStatement</name><op:operator pos:line="383" pos:column="103">.</op:operator><name pos:line="383" pos:column="104">ChildStatements</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="384" pos:column="13">combinedStatement</name><op:operator pos:line="384" pos:column="30">.</op:operator><name pos:line="384" pos:column="31">RestructureChildren</name></name><argument_list pos:line="384" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
            <return pos:line="385" pos:column="13">return <expr><name pos:line="385" pos:column="20">combinedStatement</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="388" pos:column="9">protected</specifier> <name pos:line="388" pos:column="19">void</name></type> <name pos:line="388" pos:column="24">RemoveLocations</name><parameter_list pos:line="388" pos:column="39">(<param><decl><type><name pos:line="388" pos:column="40">string</name></type> <name pos:line="388" pos:column="47">fileName</name></decl></param>)</parameter_list> <block pos:line="388" pos:column="57">{
            <for pos:line="389" pos:column="13">for(<init><decl><type><name pos:line="389" pos:column="17">int</name></type> <name pos:line="389" pos:column="21">i</name> <init pos:line="389" pos:column="23">= <expr><name><name pos:line="389" pos:column="25">LocationList</name><op:operator pos:line="389" pos:column="37">.</op:operator><name pos:line="389" pos:column="38">Count</name></name> <op:operator pos:line="389" pos:column="44">-</op:operator> <lit:literal type="number" pos:line="389" pos:column="46">1</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="389" pos:column="49">i</name> <op:operator pos:line="389" pos:column="51">&gt;=</op:operator> <lit:literal type="number" pos:line="389" pos:column="54">0</lit:literal></expr>;</condition> <incr><expr><name pos:line="389" pos:column="57">i</name><op:operator pos:line="389" pos:column="58">--</op:operator></expr></incr>) <block pos:line="389" pos:column="62">{
                <if pos:line="390" pos:column="17">if<condition pos:line="390" pos:column="19">(<expr><call><name><name pos:line="390" pos:column="20">fileName</name><op:operator pos:line="390" pos:column="28">.</op:operator><name pos:line="390" pos:column="29">Equals</name></name><argument_list pos:line="390" pos:column="35">(<argument><expr><name><name pos:line="390" pos:column="36">LocationList</name><index pos:line="390" pos:column="48">[<expr><name pos:line="390" pos:column="49">i</name></expr>]</index></name><op:operator pos:line="390" pos:column="51">.</op:operator><name pos:line="390" pos:column="52">SourceFileName</name></expr></argument>, <argument><expr><name><name pos:line="390" pos:column="68">StringComparison</name><op:operator pos:line="390" pos:column="84">.</op:operator><name pos:line="390" pos:column="85">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="390" pos:column="104"> <block pos:line="390" pos:column="105">{
                    <expr_stmt><expr><call><name><name pos:line="391" pos:column="21">LocationList</name><op:operator pos:line="391" pos:column="33">.</op:operator><name pos:line="391" pos:column="34">RemoveAt</name></name><argument_list pos:line="391" pos:column="42">(<argument><expr><name pos:line="391" pos:column="43">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
        }</block></function>

        <function><type><specifier pos:line="396" pos:column="9">protected</specifier> <name pos:line="396" pos:column="19">void</name></type> <name pos:line="396" pos:column="24">RemoveFileFromChildren</name><parameter_list pos:line="396" pos:column="46">(<param><decl><type><name pos:line="396" pos:column="47">string</name></type> <name pos:line="396" pos:column="54">fileName</name></decl></param>)</parameter_list> <block pos:line="396" pos:column="64">{
            <for pos:line="397" pos:column="13">for(<init><decl><type><name pos:line="397" pos:column="17">int</name></type> <name pos:line="397" pos:column="21">i</name> <init pos:line="397" pos:column="23">= <expr><name><name pos:line="397" pos:column="25">ChildStatements</name><op:operator pos:line="397" pos:column="40">.</op:operator><name pos:line="397" pos:column="41">Count</name></name> <op:operator pos:line="397" pos:column="47">-</op:operator> <lit:literal type="number" pos:line="397" pos:column="49">1</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="397" pos:column="52">i</name> <op:operator pos:line="397" pos:column="54">&gt;=</op:operator> <lit:literal type="number" pos:line="397" pos:column="57">0</lit:literal></expr>;</condition> <incr><expr><name pos:line="397" pos:column="60">i</name><op:operator pos:line="397" pos:column="61">--</op:operator></expr></incr>) <block pos:line="397" pos:column="65">{
                <expr_stmt><expr><name><name pos:line="398" pos:column="17">ChildStatements</name><index pos:line="398" pos:column="32">[<expr><name pos:line="398" pos:column="33">i</name></expr>]</index></name><op:operator pos:line="398" pos:column="35">.</op:operator><call><name pos:line="398" pos:column="36">RemoveFile</name><argument_list pos:line="398" pos:column="46">(<argument><expr><name pos:line="398" pos:column="47">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="399" pos:column="17">if<condition pos:line="399" pos:column="19">(<expr><name><name pos:line="399" pos:column="20">ChildStatements</name><index pos:line="399" pos:column="35">[<expr><name pos:line="399" pos:column="36">i</name></expr>]</index></name><op:operator pos:line="399" pos:column="38">.</op:operator><name pos:line="399" pos:column="39">ToBeDeleted</name></expr>)</condition><then pos:line="399" pos:column="51"> <block pos:line="399" pos:column="52">{
                    <expr_stmt><expr><call><name><name pos:line="400" pos:column="21">ChildStatementsList</name><op:operator pos:line="400" pos:column="40">.</op:operator><name pos:line="400" pos:column="41">RemoveAt</name></name><argument_list pos:line="400" pos:column="49">(<argument><expr><name pos:line="400" pos:column="50">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
        }</block></function>
        <function><type><specifier pos:line="404" pos:column="9">protected</specifier> <specifier pos:line="404" pos:column="19">virtual</specifier> <name pos:line="404" pos:column="27">void</name></type> <name pos:line="404" pos:column="32">RestructureChildren</name><parameter_list pos:line="404" pos:column="51">()</parameter_list> <block pos:line="404" pos:column="54">{
            <decl_stmt><decl><type><name pos:line="405" pos:column="13">var</name></type> <name pos:line="405" pos:column="17">restructuredChildren</name> <init pos:line="405" pos:column="38">= <expr><call><name pos:line="405" pos:column="40">RestructureChildren</name><argument_list pos:line="405" pos:column="59">(<argument><expr><name pos:line="405" pos:column="60">ChildStatements</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="406" pos:column="13">ClearChildren</name><argument_list pos:line="406" pos:column="26">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="407" pos:column="13">AddChildStatements</name><argument_list pos:line="407" pos:column="31">(<argument><expr><name pos:line="407" pos:column="32">restructuredChildren</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="410" pos:column="9">protected</specifier> <specifier pos:line="410" pos:column="19">static</specifier> <name><name pos:line="410" pos:column="26">List</name><argument_list pos:line="410" pos:column="30">&lt;<argument><name pos:line="410" pos:column="31">Statement</name></argument>&gt;</argument_list></name></type> <name pos:line="410" pos:column="42">RestructureChildren</name><parameter_list pos:line="410" pos:column="61">(<param><decl><type><name><name pos:line="410" pos:column="62">IEnumerable</name><argument_list pos:line="410" pos:column="73">&lt;<argument><name pos:line="410" pos:column="74">Statement</name></argument>&gt;</argument_list></name></type> <name pos:line="410" pos:column="85">childStatements</name></decl></param>)</parameter_list> <block pos:line="410" pos:column="102">{
            <decl_stmt><decl><type><name pos:line="411" pos:column="13">OrderedDictionary</name></type> <name pos:line="411" pos:column="31">childStatementMap</name> <init pos:line="411" pos:column="49">= <expr><op:operator pos:line="411" pos:column="51">new</op:operator> <call><name pos:line="411" pos:column="55">OrderedDictionary</name><argument_list pos:line="411" pos:column="72">(<argument><expr><name><name pos:line="411" pos:column="73">StringComparer</name><op:operator pos:line="411" pos:column="87">.</op:operator><name pos:line="411" pos:column="88">Ordinal</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="412" pos:column="13">foreach(<init><decl><type><name pos:line="412" pos:column="21">var</name></type> <name pos:line="412" pos:column="25">child</name> <range pos:line="412" pos:column="31">in <expr><name pos:line="412" pos:column="34">childStatements</name></expr></range></decl></init>) <block pos:line="412" pos:column="51">{
                <decl_stmt><decl><type><name pos:line="413" pos:column="17">string</name></type> <name pos:line="413" pos:column="24">mergeId</name> <init pos:line="413" pos:column="32">= <expr><call><name><name pos:line="413" pos:column="34">child</name><op:operator pos:line="413" pos:column="39">.</op:operator><name pos:line="413" pos:column="40">ComputeMergeId</name></name><argument_list pos:line="413" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="414" pos:column="17">Statement</name></type> <name pos:line="414" pos:column="27">mergedChild</name></decl>;</decl_stmt>
                <if pos:line="415" pos:column="17">if<condition pos:line="415" pos:column="19">(<expr><call><name><name pos:line="415" pos:column="20">childStatementMap</name><op:operator pos:line="415" pos:column="37">.</op:operator><name pos:line="415" pos:column="38">Contains</name></name><argument_list pos:line="415" pos:column="46">(<argument><expr><name pos:line="415" pos:column="47">mergeId</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="415" pos:column="56"> <block pos:line="415" pos:column="57">{
                    <expr_stmt><expr><name pos:line="416" pos:column="21">mergedChild</name> <op:operator pos:line="416" pos:column="33">=</op:operator> <name><name pos:line="416" pos:column="35">childStatementMap</name><index pos:line="416" pos:column="52">[<expr><name pos:line="416" pos:column="53">mergeId</name></expr>]</index></name> <op:operator pos:line="416" pos:column="62">as</op:operator> <name pos:line="416" pos:column="65">Statement</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="417" pos:column="21">childStatementMap</name><index pos:line="417" pos:column="38">[<expr><name pos:line="417" pos:column="39">mergeId</name></expr>]</index></name> <op:operator pos:line="417" pos:column="48">=</op:operator> <call><name><name pos:line="417" pos:column="50">mergedChild</name><op:operator pos:line="417" pos:column="61">.</op:operator><name pos:line="417" pos:column="62">Merge</name></name><argument_list pos:line="417" pos:column="67">(<argument><expr><name pos:line="417" pos:column="68">child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="418" pos:column="19">else <block pos:line="418" pos:column="24">{
                    <expr_stmt><expr><name><name pos:line="419" pos:column="21">childStatementMap</name><index pos:line="419" pos:column="38">[<expr><name pos:line="419" pos:column="39">mergeId</name></expr>]</index></name> <op:operator pos:line="419" pos:column="48">=</op:operator> <name pos:line="419" pos:column="50">child</name></expr>;</expr_stmt>
                }</block></else></if>
            }</block></foreach>
            <return pos:line="422" pos:column="13">return <expr><op:operator pos:line="422" pos:column="20">new</op:operator> <call><name><name pos:line="422" pos:column="24">List</name><argument_list pos:line="422" pos:column="28">&lt;<argument><name pos:line="422" pos:column="29">Statement</name></argument>&gt;</argument_list></name><argument_list pos:line="422" pos:column="39">(<argument><expr><call><name><name pos:line="422" pos:column="40">childStatementMap</name><op:operator pos:line="422" pos:column="57">.</op:operator><name pos:line="422" pos:column="58">Values</name><op:operator pos:line="422" pos:column="64">.</op:operator><name><name pos:line="422" pos:column="65">OfType</name><argument_list pos:line="422" pos:column="71">&lt;<argument><name pos:line="422" pos:column="72">Statement</name></argument>&gt;</argument_list></name></name><argument_list pos:line="422" pos:column="82">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="425" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="426" pos:column="9">/// Processes the child of the current reader position into a child of this object.</comment>
        <comment type="line" pos:line="427" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="428" pos:column="9">/// &lt;param name="reader"&gt;The XML reader&lt;/param&gt;</comment>
        <function><type><specifier pos:line="429" pos:column="9">protected</specifier> <specifier pos:line="429" pos:column="19">override</specifier> <name pos:line="429" pos:column="28">void</name></type> <name pos:line="429" pos:column="33">ReadXmlChild</name><parameter_list pos:line="429" pos:column="45">(<param><decl><type><name pos:line="429" pos:column="46">XmlReader</name></type> <name pos:line="429" pos:column="56">reader</name></decl></param>)</parameter_list> <block pos:line="429" pos:column="64">{
            <if pos:line="430" pos:column="13">if<condition pos:line="430" pos:column="15">(<expr><name pos:line="430" pos:column="16">XmlChildrenName</name> <op:operator pos:line="430" pos:column="32">==</op:operator> <name><name pos:line="430" pos:column="35">reader</name><op:operator pos:line="430" pos:column="41">.</op:operator><name pos:line="430" pos:column="42">Name</name></name></expr>)</condition><then pos:line="430" pos:column="47"> <block pos:line="430" pos:column="48">{
                <expr_stmt><expr><call><name pos:line="431" pos:column="17">AddChildStatements</name><argument_list pos:line="431" pos:column="35">(<argument><expr><call><name><name pos:line="431" pos:column="36">XmlSerialization</name><op:operator pos:line="431" pos:column="52">.</op:operator><name pos:line="431" pos:column="53">ReadChildStatements</name></name><argument_list pos:line="431" pos:column="72">(<argument><expr><name pos:line="431" pos:column="73">reader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="432" pos:column="15">else <if pos:line="432" pos:column="20">if<condition pos:line="432" pos:column="22">(<expr><name pos:line="432" pos:column="23">XmlLocationsName</name> <op:operator pos:line="432" pos:column="40">==</op:operator> <name><name pos:line="432" pos:column="43">reader</name><op:operator pos:line="432" pos:column="49">.</op:operator><name pos:line="432" pos:column="50">Name</name></name></expr>)</condition><then pos:line="432" pos:column="55"> <block pos:line="432" pos:column="56">{
                <expr_stmt><expr><call><name pos:line="433" pos:column="17">AddLocations</name><argument_list pos:line="433" pos:column="29">(<argument><expr><call><name><name pos:line="433" pos:column="30">XmlSerialization</name><op:operator pos:line="433" pos:column="46">.</op:operator><name pos:line="433" pos:column="47">ReadChildSrcMLLocations</name></name><argument_list pos:line="433" pos:column="70">(<argument><expr><name pos:line="433" pos:column="71">reader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="434" pos:column="15">else <if pos:line="434" pos:column="20">if<condition pos:line="434" pos:column="22">(<expr><name pos:line="434" pos:column="23">XmlContentName</name> <op:operator pos:line="434" pos:column="38">==</op:operator> <name><name pos:line="434" pos:column="41">reader</name><op:operator pos:line="434" pos:column="47">.</op:operator><name pos:line="434" pos:column="48">Name</name></name></expr>)</condition><then pos:line="434" pos:column="53"> <block pos:line="434" pos:column="54">{
                <expr_stmt><expr><name pos:line="435" pos:column="17">Content</name> <op:operator pos:line="435" pos:column="25">=</op:operator> <call><name><name pos:line="435" pos:column="27">XmlSerialization</name><op:operator pos:line="435" pos:column="43">.</op:operator><name pos:line="435" pos:column="44">ReadChildExpression</name></name><argument_list pos:line="435" pos:column="63">(<argument><expr><name pos:line="435" pos:column="64">reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if></else></if>
        }</block></function>

        <comment type="line" pos:line="439" pos:column="9">/// &lt;summary&gt; Returns the XML name for this program element. &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="440" pos:column="9">public</specifier> <specifier pos:line="440" pos:column="16">override</specifier> <name pos:line="440" pos:column="25">string</name></type> <name pos:line="440" pos:column="32">GetXmlName</name><parameter_list pos:line="440" pos:column="42">()</parameter_list> <block pos:line="440" pos:column="45">{ <return pos:line="440" pos:column="47">return <expr><name><name pos:line="440" pos:column="54">Statement</name><op:operator pos:line="440" pos:column="63">.</op:operator><name pos:line="440" pos:column="64">XmlName</name></name></expr>;</return> }</block></function>

        <comment type="line" pos:line="442" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="443" pos:column="9">/// Writes the contents of this object to &lt;paramref name="writer"/&gt;.</comment>
        <comment type="line" pos:line="444" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="445" pos:column="9">/// &lt;param name="writer"&gt;The XML writer to write to&lt;/param&gt;</comment>
        <function><type><specifier pos:line="446" pos:column="9">protected</specifier> <specifier pos:line="446" pos:column="19">override</specifier> <name pos:line="446" pos:column="28">void</name></type> <name pos:line="446" pos:column="33">WriteXmlContents</name><parameter_list pos:line="446" pos:column="49">(<param><decl><type><name pos:line="446" pos:column="50">XmlWriter</name></type> <name pos:line="446" pos:column="60">writer</name></decl></param>)</parameter_list> <block pos:line="446" pos:column="68">{
            <expr_stmt><expr><call><name><name pos:line="447" pos:column="13">XmlSerialization</name><op:operator pos:line="447" pos:column="29">.</op:operator><name><name pos:line="447" pos:column="30">WriteCollection</name><argument_list pos:line="447" pos:column="45">&lt;<argument><name pos:line="447" pos:column="46">SrcMLLocation</name></argument>&gt;</argument_list></name></name><argument_list pos:line="447" pos:column="60">(<argument><expr><name pos:line="447" pos:column="61">writer</name></expr></argument>, <argument><expr><name pos:line="447" pos:column="69">XmlLocationsName</name></expr></argument>, <argument><expr><name pos:line="447" pos:column="87">Locations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <expr_stmt><expr><call><name><name pos:line="449" pos:column="13">XmlSerialization</name><op:operator pos:line="449" pos:column="29">.</op:operator><name><name pos:line="449" pos:column="30">WriteCollection</name><argument_list pos:line="449" pos:column="45">&lt;<argument><name pos:line="449" pos:column="46">Statement</name></argument>&gt;</argument_list></name></name><argument_list pos:line="449" pos:column="56">(<argument><expr><name pos:line="449" pos:column="57">writer</name></expr></argument>, <argument><expr><name pos:line="449" pos:column="65">XmlChildrenName</name></expr></argument>, <argument><expr><name pos:line="449" pos:column="82">ChildStatements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if pos:line="451" pos:column="13">if<condition pos:line="451" pos:column="15">(<expr><name pos:line="451" pos:column="16">null</name> <op:operator pos:line="451" pos:column="21">!=</op:operator> <name pos:line="451" pos:column="24">Content</name></expr>)</condition><then pos:line="451" pos:column="32"> <block pos:line="451" pos:column="33">{
                <expr_stmt><expr><call><name><name pos:line="452" pos:column="17">XmlSerialization</name><op:operator pos:line="452" pos:column="33">.</op:operator><name pos:line="452" pos:column="34">WriteElement</name></name><argument_list pos:line="452" pos:column="46">(<argument><expr><name pos:line="452" pos:column="47">writer</name></expr></argument>, <argument><expr><name pos:line="452" pos:column="55">Content</name></expr></argument>, <argument><expr><name pos:line="452" pos:column="64">XmlContentName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="456" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="457" pos:column="9">/// Returns the children of this statement that are file specific and occur prior to the given location (and in the same file).</comment>
        <comment type="line" pos:line="458" pos:column="9">/// File specific statements may include items such as ImportStatements or AliasStatements.</comment>
        <comment type="line" pos:line="459" pos:column="9">/// The returned statements are sorted in reverse document order.</comment>
        <comment type="line" pos:line="460" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="461" pos:column="9">/// &lt;param name="loc"&gt;The location to find the file specific statements for.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="462" pos:column="9">public</specifier> <name><name pos:line="462" pos:column="16">IEnumerable</name><argument_list pos:line="462" pos:column="27">&lt;<argument><name pos:line="462" pos:column="28">Statement</name></argument>&gt;</argument_list></name></type> <name pos:line="462" pos:column="39">GetFileSpecificStatements</name><parameter_list pos:line="462" pos:column="64">(<param><decl><type><name pos:line="462" pos:column="65">SourceLocation</name></type> <name pos:line="462" pos:column="80">loc</name></decl></param>)</parameter_list> <block pos:line="462" pos:column="85">{
            <decl_stmt><decl><type><name><name pos:line="463" pos:column="13">SortedSet</name><argument_list pos:line="463" pos:column="22">&lt;<argument><name pos:line="463" pos:column="23">Statement</name></argument>&gt;</argument_list></name></type> <name pos:line="463" pos:column="34">allList</name></decl>;</decl_stmt>
            <if pos:line="464" pos:column="13">if<condition pos:line="464" pos:column="15">(<expr><op:operator pos:line="464" pos:column="16">!</op:operator><call><name><name pos:line="464" pos:column="17">AliasMap</name><op:operator pos:line="464" pos:column="25">.</op:operator><name pos:line="464" pos:column="26">TryGetValue</name></name><argument_list pos:line="464" pos:column="37">(<argument><expr><name><name pos:line="464" pos:column="38">loc</name><op:operator pos:line="464" pos:column="41">.</op:operator><name pos:line="464" pos:column="42">SourceFileName</name></name></expr></argument>, <argument><expr pos:line="464" pos:column="58">out <name pos:line="464" pos:column="62">allList</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="464" pos:column="71"> <block pos:line="464" pos:column="72">{ <return pos:line="464" pos:column="74">return <expr><call><name><name pos:line="464" pos:column="81">Enumerable</name><op:operator pos:line="464" pos:column="91">.</op:operator><name><name pos:line="464" pos:column="92">Empty</name><argument_list pos:line="464" pos:column="97">&lt;<argument><name pos:line="464" pos:column="98">ImportStatement</name></argument>&gt;</argument_list></name></name><argument_list pos:line="464" pos:column="114">()</argument_list></call></expr>;</return> }</block></then></if>
            <if pos:line="465" pos:column="13">if<condition pos:line="465" pos:column="15">(<expr><name pos:line="465" pos:column="16">allList</name> <op:operator pos:line="465" pos:column="24">==</op:operator> <name pos:line="465" pos:column="27">null</name></expr>)</condition><then pos:line="465" pos:column="32"> <block pos:line="465" pos:column="33">{ <return pos:line="465" pos:column="35">return <expr><call><name><name pos:line="465" pos:column="42">Enumerable</name><op:operator pos:line="465" pos:column="52">.</op:operator><name><name pos:line="465" pos:column="53">Empty</name><argument_list pos:line="465" pos:column="58">&lt;<argument><name pos:line="465" pos:column="59">ImportStatement</name></argument>&gt;</argument_list></name></name><argument_list pos:line="465" pos:column="75">()</argument_list></call></expr>;</return> }</block></then></if>

            <return pos:line="467" pos:column="13">return <expr><call><name><name pos:line="467" pos:column="20">allList</name><op:operator pos:line="467" pos:column="27">.</op:operator><name pos:line="467" pos:column="28">SkipWhile</name></name><argument_list pos:line="467" pos:column="37">(<argument><expr><lambda><name pos:line="467" pos:column="38">s</name> <op:operator pos:line="467" pos:column="40">=&gt;</op:operator> <call><name><name pos:line="467" pos:column="43">ReversePositionComparer</name><op:operator pos:line="467" pos:column="66">.</op:operator><name pos:line="467" pos:column="67">CompareLocation</name></name><argument_list pos:line="467" pos:column="82">(<argument><expr><name><name pos:line="467" pos:column="83">s</name><op:operator pos:line="467" pos:column="84">.</op:operator><name pos:line="467" pos:column="85">PrimaryLocation</name></name></expr></argument>, <argument><expr><name pos:line="467" pos:column="102">loc</name></expr></argument>)</argument_list></call> <op:operator pos:line="467" pos:column="107">&lt;=</op:operator> <lit:literal type="number" pos:line="467" pos:column="110">0</lit:literal></lambda></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="470" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="471" pos:column="9">/// Returns the innermost statement that surrounds the given source location.</comment>
        <comment type="line" pos:line="472" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="473" pos:column="9">/// &lt;param name="loc"&gt;The source location to search for.&lt;/param&gt;</comment>
        <comment type="line" pos:line="474" pos:column="9">/// &lt;returns&gt;The lowest child of this statement that surrounds the given location, or null if it cannot be found.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="475" pos:column="9">public</specifier> <name pos:line="475" pos:column="16">Statement</name></type> <name pos:line="475" pos:column="26">GetStatementForLocation</name><parameter_list pos:line="475" pos:column="49">(<param><decl><type><name pos:line="475" pos:column="50">SourceLocation</name></type> <name pos:line="475" pos:column="65">loc</name></decl></param>)</parameter_list> <block pos:line="475" pos:column="70">{
            <comment type="line" pos:line="476" pos:column="13">//first search in children</comment>
            <decl_stmt><decl><type><name pos:line="477" pos:column="13">var</name></type> <name pos:line="477" pos:column="17">foundStmt</name> <init pos:line="477" pos:column="27">= <expr><call><name pos:line="477" pos:column="29">GetChildren</name><argument_list pos:line="477" pos:column="40">()</argument_list></call><op:operator pos:line="477" pos:column="42">.</op:operator><call><name><name pos:line="477" pos:column="43">Cast</name><argument_list pos:line="477" pos:column="47">&lt;<argument><name pos:line="477" pos:column="48">Statement</name></argument>&gt;</argument_list></name><argument_list pos:line="477" pos:column="58">()</argument_list></call><op:operator pos:line="477" pos:column="60">.</op:operator><call><name pos:line="477" pos:column="61">Select</name><argument_list pos:line="477" pos:column="67">(<argument><expr><lambda><name pos:line="477" pos:column="68">s</name> <op:operator pos:line="477" pos:column="70">=&gt;</op:operator> <call><name><name pos:line="477" pos:column="73">s</name><op:operator pos:line="477" pos:column="74">.</op:operator><name pos:line="477" pos:column="75">GetStatementForLocation</name></name><argument_list pos:line="477" pos:column="98">(<argument><expr><name pos:line="477" pos:column="99">loc</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="477" pos:column="104">.</op:operator><call><name pos:line="477" pos:column="105">FirstOrDefault</name><argument_list pos:line="477" pos:column="119">(<argument><expr><lambda><name pos:line="477" pos:column="120">s</name> <op:operator pos:line="477" pos:column="122">=&gt;</op:operator> <name pos:line="477" pos:column="125">s</name> <op:operator pos:line="477" pos:column="127">!=</op:operator> <name pos:line="477" pos:column="130">null</name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="478" pos:column="13">//if loc not found, check ourselves</comment>
            <if pos:line="479" pos:column="13">if<condition pos:line="479" pos:column="15">(<expr><name pos:line="479" pos:column="16">foundStmt</name> <op:operator pos:line="479" pos:column="26">==</op:operator> <name pos:line="479" pos:column="29">null</name> <op:operator pos:line="479" pos:column="34">&amp;&amp;</op:operator> <call><name><name pos:line="479" pos:column="37">this</name><op:operator pos:line="479" pos:column="41">.</op:operator><name pos:line="479" pos:column="42">ContainsLocation</name></name><argument_list pos:line="479" pos:column="58">(<argument><expr><name pos:line="479" pos:column="59">loc</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="479" pos:column="64"> <block pos:line="479" pos:column="65">{
                <expr_stmt><expr><name pos:line="480" pos:column="17">foundStmt</name> <op:operator pos:line="480" pos:column="27">=</op:operator> <name pos:line="480" pos:column="29">this</name></expr>;</expr_stmt>
            }</block></then></if>
            <return pos:line="482" pos:column="13">return <expr><name pos:line="482" pos:column="20">foundStmt</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="485" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="486" pos:column="9">/// Returns the innermost statement that surrounds the given source location.</comment>
        <comment type="line" pos:line="487" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="488" pos:column="9">/// &lt;param name="xpath"&gt;The xpath to search for.&lt;/param&gt;</comment>
        <comment type="line" pos:line="489" pos:column="9">/// &lt;returns&gt;The lowest child of this statement that contains the given xpath, or null if it cannot be found.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="490" pos:column="9">public</specifier> <name pos:line="490" pos:column="16">Statement</name></type> <name pos:line="490" pos:column="26">GetStatementForLocation</name><parameter_list pos:line="490" pos:column="49">(<param><decl><type><name pos:line="490" pos:column="50">string</name></type> <name pos:line="490" pos:column="57">xpath</name></decl></param>)</parameter_list> <block pos:line="490" pos:column="64">{
            <comment type="line" pos:line="491" pos:column="13">//first search in children</comment>
            <decl_stmt><decl><type><name pos:line="492" pos:column="13">var</name></type> <name pos:line="492" pos:column="17">foundStmt</name> <init pos:line="492" pos:column="27">= <expr><call><name pos:line="492" pos:column="29">GetChildren</name><argument_list pos:line="492" pos:column="40">()</argument_list></call><op:operator pos:line="492" pos:column="42">.</op:operator><call><name><name pos:line="492" pos:column="43">Cast</name><argument_list pos:line="492" pos:column="47">&lt;<argument><name pos:line="492" pos:column="48">Statement</name></argument>&gt;</argument_list></name><argument_list pos:line="492" pos:column="58">()</argument_list></call><op:operator pos:line="492" pos:column="60">.</op:operator><call><name pos:line="492" pos:column="61">Select</name><argument_list pos:line="492" pos:column="67">(<argument><expr><lambda><name pos:line="492" pos:column="68">s</name> <op:operator pos:line="492" pos:column="70">=&gt;</op:operator> <call><name><name pos:line="492" pos:column="73">s</name><op:operator pos:line="492" pos:column="74">.</op:operator><name pos:line="492" pos:column="75">GetStatementForLocation</name></name><argument_list pos:line="492" pos:column="98">(<argument><expr><name pos:line="492" pos:column="99">xpath</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="492" pos:column="106">.</op:operator><call><name pos:line="492" pos:column="107">FirstOrDefault</name><argument_list pos:line="492" pos:column="121">(<argument><expr><lambda><name pos:line="492" pos:column="122">s</name> <op:operator pos:line="492" pos:column="124">=&gt;</op:operator> <name pos:line="492" pos:column="127">s</name> <op:operator pos:line="492" pos:column="129">!=</op:operator> <name pos:line="492" pos:column="132">null</name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="493" pos:column="13">//if loc not found, check ourselves</comment>
            <if pos:line="494" pos:column="13">if<condition pos:line="494" pos:column="15">(<expr><name pos:line="494" pos:column="16">foundStmt</name> <op:operator pos:line="494" pos:column="26">==</op:operator> <name pos:line="494" pos:column="29">null</name> <op:operator pos:line="494" pos:column="34">&amp;&amp;</op:operator> <call><name><name pos:line="494" pos:column="37">this</name><op:operator pos:line="494" pos:column="41">.</op:operator><name pos:line="494" pos:column="42">ContainsLocation</name></name><argument_list pos:line="494" pos:column="58">(<argument><expr><name pos:line="494" pos:column="59">xpath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="494" pos:column="66"> <block pos:line="494" pos:column="67">{
                <expr_stmt><expr><name pos:line="495" pos:column="17">foundStmt</name> <op:operator pos:line="495" pos:column="27">=</op:operator> <name pos:line="495" pos:column="29">this</name></expr>;</expr_stmt>
            }</block></then></if>
            <return pos:line="497" pos:column="13">return <expr><name pos:line="497" pos:column="20">foundStmt</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="500" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="501" pos:column="9">/// Returns true if this statement surrounds the given source location.</comment>
        <comment type="line" pos:line="502" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="503" pos:column="9">/// &lt;param name="loc"&gt;The source location to look for.&lt;/param&gt;</comment>
        <comment type="line" pos:line="504" pos:column="9">/// &lt;returns&gt;True if this is a container for the given location, False otherwise.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="505" pos:column="9">public</specifier> <specifier pos:line="505" pos:column="16">virtual</specifier> <name pos:line="505" pos:column="24">bool</name></type> <name pos:line="505" pos:column="29">ContainsLocation</name><parameter_list pos:line="505" pos:column="45">(<param><decl><type><name pos:line="505" pos:column="46">SourceLocation</name></type> <name pos:line="505" pos:column="61">loc</name></decl></param>)</parameter_list> <block pos:line="505" pos:column="66">{
            <return pos:line="506" pos:column="13">return <expr><call><name><name pos:line="506" pos:column="20">Locations</name><op:operator pos:line="506" pos:column="29">.</op:operator><name pos:line="506" pos:column="30">Any</name></name><argument_list pos:line="506" pos:column="33">(<argument><expr><lambda><name pos:line="506" pos:column="34">l</name> <op:operator pos:line="506" pos:column="36">=&gt;</op:operator> <call><name><name pos:line="506" pos:column="39">l</name><op:operator pos:line="506" pos:column="40">.</op:operator><name pos:line="506" pos:column="41">Contains</name></name><argument_list pos:line="506" pos:column="49">(<argument><expr><name pos:line="506" pos:column="50">loc</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="509" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="510" pos:column="9">/// Returns true if this statement contains the given XElement. A statement</comment>
        <comment type="line" pos:line="511" pos:column="9">/// contains an element if &lt;see cref="SrcMLLocation.XPath"/&gt; is a prefix for the XPath for</comment>
        <comment type="line" pos:line="512" pos:column="9">/// &lt;paramref name="element"/&gt;.</comment>
        <comment type="line" pos:line="513" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="514" pos:column="9">/// &lt;param name="element"&gt;The element to look for&lt;/param&gt;</comment>
        <comment type="line" pos:line="515" pos:column="9">/// &lt;returns&gt;true if this statement contains &lt;paramref name="element"/&gt;. False otherwise.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="516" pos:column="9">public</specifier> <name pos:line="516" pos:column="16">bool</name></type> <name pos:line="516" pos:column="21">ContainsLocation</name><parameter_list pos:line="516" pos:column="37">(<param><decl><type><name pos:line="516" pos:column="38">XElement</name></type> <name pos:line="516" pos:column="47">element</name></decl></param>)</parameter_list> <block pos:line="516" pos:column="56">{
            <return pos:line="517" pos:column="13">return <expr><call><name pos:line="517" pos:column="20">ContainsLocation</name><argument_list pos:line="517" pos:column="36">(<argument><expr><call><name><name pos:line="517" pos:column="37">element</name><op:operator pos:line="517" pos:column="44">.</op:operator><name pos:line="517" pos:column="45">GetXPath</name></name><argument_list pos:line="517" pos:column="53">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="520" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="521" pos:column="9">/// Returns true if this statement contains the given XPath. A statement contains</comment>
        <comment type="line" pos:line="522" pos:column="9">/// an xpath if &lt;see cref="SrcMLLocation.XPath"/&gt; is a prefix for &lt;paramref name="xpath"/&gt;</comment>
        <comment type="line" pos:line="523" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="524" pos:column="9">/// &lt;param name="xpath"&gt;The xpath to look for.&lt;/param&gt;</comment>
        <comment type="line" pos:line="525" pos:column="9">/// &lt;returns&gt;True if this statement contains the given xpath. False, otherwise.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="526" pos:column="9">public</specifier> <specifier pos:line="526" pos:column="16">virtual</specifier> <name pos:line="526" pos:column="24">bool</name></type> <name pos:line="526" pos:column="29">ContainsLocation</name><parameter_list pos:line="526" pos:column="45">(<param><decl><type><name pos:line="526" pos:column="46">string</name></type> <name pos:line="526" pos:column="53">xpath</name></decl></param>)</parameter_list> <block pos:line="526" pos:column="60">{
            <return pos:line="527" pos:column="13">return <expr><call><name><name pos:line="527" pos:column="20">Locations</name><op:operator pos:line="527" pos:column="29">.</op:operator><name pos:line="527" pos:column="30">Any</name></name><argument_list pos:line="527" pos:column="33">(<argument><expr><lambda><name pos:line="527" pos:column="34">l</name> <op:operator pos:line="527" pos:column="36">=&gt;</op:operator> <call><name><name pos:line="527" pos:column="39">xpath</name><op:operator pos:line="527" pos:column="44">.</op:operator><name pos:line="527" pos:column="45">StartsWith</name></name><argument_list pos:line="527" pos:column="55">(<argument><expr><name><name pos:line="527" pos:column="56">l</name><op:operator pos:line="527" pos:column="57">.</op:operator><name pos:line="527" pos:column="58">XPath</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="530" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="531" pos:column="9">/// Returns a string representation of this statement.</comment>
        <comment type="line" pos:line="532" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="533" pos:column="9">public</specifier> <specifier pos:line="533" pos:column="16">override</specifier> <name pos:line="533" pos:column="25">string</name></type> <name pos:line="533" pos:column="32">ToString</name><parameter_list pos:line="533" pos:column="40">()</parameter_list> <block pos:line="533" pos:column="43">{
            <return pos:line="534" pos:column="13">return <expr><call><name><name pos:line="534" pos:column="20">string</name><op:operator pos:line="534" pos:column="26">.</op:operator><name pos:line="534" pos:column="27">Format</name></name><argument_list pos:line="534" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="534" pos:column="34">"{0};"</lit:literal></expr></argument>, <argument><expr><name pos:line="534" pos:column="42">Content</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <cpp:region pos:line="537" pos:column="9">#<cpp:directive pos:line="537" pos:column="10">region</cpp:directive> Private Methods</cpp:region>
        <function><type><specifier pos:line="538" pos:column="9">private</specifier> <name pos:line="538" pos:column="17">void</name></type> <name pos:line="538" pos:column="22">AddAliasStatement</name><parameter_list pos:line="538" pos:column="39">(<param><decl><type><name pos:line="538" pos:column="40">Statement</name></type> <name pos:line="538" pos:column="50">child</name></decl></param>)</parameter_list> <block pos:line="538" pos:column="57">{
            <decl_stmt><decl><type><name pos:line="539" pos:column="13">var</name></type> <name pos:line="539" pos:column="17">loc</name> <init pos:line="539" pos:column="21">= <expr><name><name pos:line="539" pos:column="23">child</name><op:operator pos:line="539" pos:column="28">.</op:operator><name pos:line="539" pos:column="29">PrimaryLocation</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="540" pos:column="13">SortedSet</name><argument_list pos:line="540" pos:column="22">&lt;<argument><name pos:line="540" pos:column="23">Statement</name></argument>&gt;</argument_list></name></type> <name pos:line="540" pos:column="34">aliasList</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="541" pos:column="13">AliasMap</name><op:operator pos:line="541" pos:column="21">.</op:operator><name pos:line="541" pos:column="22">TryGetValue</name></name><argument_list pos:line="541" pos:column="33">(<argument><expr><name><name pos:line="541" pos:column="34">loc</name><op:operator pos:line="541" pos:column="37">.</op:operator><name pos:line="541" pos:column="38">SourceFileName</name></name></expr></argument>, <argument><expr pos:line="541" pos:column="54">out <name pos:line="541" pos:column="58">aliasList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if pos:line="542" pos:column="13">if<condition pos:line="542" pos:column="15">(<expr><name pos:line="542" pos:column="16">aliasList</name> <op:operator pos:line="542" pos:column="26">==</op:operator> <name pos:line="542" pos:column="29">null</name></expr>)</condition><then pos:line="542" pos:column="34"> <block pos:line="542" pos:column="35">{
                <expr_stmt><expr><name pos:line="543" pos:column="17">aliasList</name> <op:operator pos:line="543" pos:column="27">=</op:operator> <op:operator pos:line="543" pos:column="29">new</op:operator> <call><name><name pos:line="543" pos:column="33">SortedSet</name><argument_list pos:line="543" pos:column="42">&lt;<argument><name pos:line="543" pos:column="43">Statement</name></argument>&gt;</argument_list></name><argument_list pos:line="543" pos:column="53">(<argument><expr><op:operator pos:line="543" pos:column="54">new</op:operator> <call><name pos:line="543" pos:column="58">ReversePositionComparer</name><argument_list pos:line="543" pos:column="81">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="544" pos:column="17">AliasMap</name><index pos:line="544" pos:column="25">[<expr><name><name pos:line="544" pos:column="26">loc</name><op:operator pos:line="544" pos:column="29">.</op:operator><name pos:line="544" pos:column="30">SourceFileName</name></name></expr>]</index></name> <op:operator pos:line="544" pos:column="46">=</op:operator> <name pos:line="544" pos:column="48">aliasList</name></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name><name pos:line="547" pos:column="13">aliasList</name><op:operator pos:line="547" pos:column="22">.</op:operator><name pos:line="547" pos:column="23">Add</name></name><argument_list pos:line="547" pos:column="26">(<argument><expr><name pos:line="547" pos:column="27">child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <cpp:endregion pos:line="550" pos:column="9">#<cpp:directive pos:line="550" pos:column="10">endregion</cpp:directive> Private methods</cpp:endregion>

        <comment type="line" pos:line="552" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="553" pos:column="9">/// Sorts Statements based on their starting line/column, in document order.</comment>
        <comment type="line" pos:line="554" pos:column="9">/// The file names are ignored.</comment>
        <comment type="line" pos:line="555" pos:column="9">/// &lt;/summary&gt;</comment>
        <class><specifier pos:line="556" pos:column="9">protected</specifier> class <name pos:line="556" pos:column="25">PositionComparer</name> <super pos:line="556" pos:column="42">: <name><name pos:line="556" pos:column="44">Comparer</name><argument_list pos:line="556" pos:column="52">&lt;<argument><name pos:line="556" pos:column="53">Statement</name></argument>&gt;</argument_list></name></super> <block pos:line="556" pos:column="64">{

            <comment type="line" pos:line="558" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="559" pos:column="13">/// Returns a negative number if x comes before y, 0 if they are equal, or a positive number if x comes after y.</comment>
            <comment type="line" pos:line="560" pos:column="13">/// &lt;/summary&gt;</comment>
            <function><type><specifier pos:line="561" pos:column="13">public</specifier> <specifier pos:line="561" pos:column="20">override</specifier> <name pos:line="561" pos:column="29">int</name></type> <name pos:line="561" pos:column="33">Compare</name><parameter_list pos:line="561" pos:column="40">(<param><decl><type><name pos:line="561" pos:column="41">Statement</name></type> <name pos:line="561" pos:column="51">x</name></decl></param>, <param><decl><type><name pos:line="561" pos:column="54">Statement</name></type> <name pos:line="561" pos:column="64">y</name></decl></param>)</parameter_list> <block pos:line="561" pos:column="67">{
                <if pos:line="562" pos:column="17">if<condition pos:line="562" pos:column="19">(<expr><call><name><name pos:line="562" pos:column="20">object</name><op:operator pos:line="562" pos:column="26">.</op:operator><name pos:line="562" pos:column="27">Equals</name></name><argument_list pos:line="562" pos:column="33">(<argument><expr><name pos:line="562" pos:column="34">x</name></expr></argument>, <argument><expr><name pos:line="562" pos:column="37">y</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="562" pos:column="40"> <block pos:line="562" pos:column="41">{ <return pos:line="562" pos:column="43">return <expr><lit:literal type="number" pos:line="562" pos:column="50">0</lit:literal></expr>;</return> }</block></then></if>
                <if pos:line="563" pos:column="17">if<condition pos:line="563" pos:column="19">(<expr><name pos:line="563" pos:column="20">x</name> <op:operator pos:line="563" pos:column="22">==</op:operator> <name pos:line="563" pos:column="25">null</name></expr>)</condition><then pos:line="563" pos:column="30"> <block pos:line="563" pos:column="31">{ <return pos:line="563" pos:column="33">return <expr><lit:literal type="number" pos:line="563" pos:column="40">1</lit:literal></expr>;</return> }</block></then></if>
                <if pos:line="564" pos:column="17">if<condition pos:line="564" pos:column="19">(<expr><name pos:line="564" pos:column="20">y</name> <op:operator pos:line="564" pos:column="22">==</op:operator> <name pos:line="564" pos:column="25">null</name></expr>)</condition><then pos:line="564" pos:column="30"> <block pos:line="564" pos:column="31">{ <return pos:line="564" pos:column="33">return <expr><op:operator pos:line="564" pos:column="40">-</op:operator><lit:literal type="number" pos:line="564" pos:column="41">1</lit:literal></expr>;</return> }</block></then></if>

                <return pos:line="566" pos:column="17">return <expr><call><name pos:line="566" pos:column="24">CompareLocation</name><argument_list pos:line="566" pos:column="39">(<argument><expr><name><name pos:line="566" pos:column="40">x</name><op:operator pos:line="566" pos:column="41">.</op:operator><name pos:line="566" pos:column="42">PrimaryLocation</name></name></expr></argument>, <argument><expr><name><name pos:line="566" pos:column="59">y</name><op:operator pos:line="566" pos:column="60">.</op:operator><name pos:line="566" pos:column="61">PrimaryLocation</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <comment type="line" pos:line="569" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="570" pos:column="13">/// Returns a negative number if x comes before y, 0 if they are equal, or a positive number if x comes after y.</comment>
            <comment type="line" pos:line="571" pos:column="13">/// &lt;/summary&gt;</comment>
            <function><type><specifier pos:line="572" pos:column="13">public</specifier> <specifier pos:line="572" pos:column="20">static</specifier> <name pos:line="572" pos:column="27">int</name></type> <name pos:line="572" pos:column="31">CompareLocation</name><parameter_list pos:line="572" pos:column="46">(<param><decl><type><name pos:line="572" pos:column="47">SourceLocation</name></type> <name pos:line="572" pos:column="62">x</name></decl></param>, <param><decl><type><name pos:line="572" pos:column="65">SourceLocation</name></type> <name pos:line="572" pos:column="80">y</name></decl></param>)</parameter_list> <block pos:line="572" pos:column="83">{
                <if pos:line="573" pos:column="17">if<condition pos:line="573" pos:column="19">(<expr><call><name><name pos:line="573" pos:column="20">object</name><op:operator pos:line="573" pos:column="26">.</op:operator><name pos:line="573" pos:column="27">Equals</name></name><argument_list pos:line="573" pos:column="33">(<argument><expr><name pos:line="573" pos:column="34">x</name></expr></argument>, <argument><expr><name pos:line="573" pos:column="37">y</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="573" pos:column="40"> <block pos:line="573" pos:column="41">{ <return pos:line="573" pos:column="43">return <expr><lit:literal type="number" pos:line="573" pos:column="50">0</lit:literal></expr>;</return> }</block></then></if>
                <if pos:line="574" pos:column="17">if<condition pos:line="574" pos:column="19">(<expr><name pos:line="574" pos:column="20">x</name> <op:operator pos:line="574" pos:column="22">==</op:operator> <name pos:line="574" pos:column="25">null</name></expr>)</condition><then pos:line="574" pos:column="30"> <block pos:line="574" pos:column="31">{ <return pos:line="574" pos:column="33">return <expr><lit:literal type="number" pos:line="574" pos:column="40">1</lit:literal></expr>;</return> }</block></then></if>
                <if pos:line="575" pos:column="17">if<condition pos:line="575" pos:column="19">(<expr><name pos:line="575" pos:column="20">y</name> <op:operator pos:line="575" pos:column="22">==</op:operator> <name pos:line="575" pos:column="25">null</name></expr>)</condition><then pos:line="575" pos:column="30"> <block pos:line="575" pos:column="31">{ <return pos:line="575" pos:column="33">return <expr><op:operator pos:line="575" pos:column="40">-</op:operator><lit:literal type="number" pos:line="575" pos:column="41">1</lit:literal></expr>;</return> }</block></then></if>
                <if pos:line="576" pos:column="17">if<condition pos:line="576" pos:column="19">(<expr><name><name pos:line="576" pos:column="20">x</name><op:operator pos:line="576" pos:column="21">.</op:operator><name pos:line="576" pos:column="22">StartingLineNumber</name></name> <op:operator pos:line="576" pos:column="41">&lt;</op:operator> <name><name pos:line="576" pos:column="43">y</name><op:operator pos:line="576" pos:column="44">.</op:operator><name pos:line="576" pos:column="45">StartingLineNumber</name></name> <op:operator pos:line="576" pos:column="64">||</op:operator>
                   <op:operator pos:line="577" pos:column="20">(</op:operator><name><name pos:line="577" pos:column="21">x</name><op:operator pos:line="577" pos:column="22">.</op:operator><name pos:line="577" pos:column="23">StartingLineNumber</name></name> <op:operator pos:line="577" pos:column="42">==</op:operator> <name><name pos:line="577" pos:column="45">y</name><op:operator pos:line="577" pos:column="46">.</op:operator><name pos:line="577" pos:column="47">StartingLineNumber</name> <type:modifier pos:line="577" pos:column="66">&amp;&amp;</type:modifier></name> <name><name pos:line="577" pos:column="69">x</name><op:operator pos:line="577" pos:column="70">.</op:operator><name pos:line="577" pos:column="71">StartingColumnNumber</name></name> <op:operator pos:line="577" pos:column="92">&lt;</op:operator> <name><name pos:line="577" pos:column="94">y</name><op:operator pos:line="577" pos:column="95">.</op:operator><name pos:line="577" pos:column="96">StartingColumnNumber</name></name><op:operator pos:line="577" pos:column="116">)</op:operator></expr>)</condition><then pos:line="577" pos:column="118"> <block pos:line="577" pos:column="119">{
                    <return pos:line="578" pos:column="21">return <expr><op:operator pos:line="578" pos:column="28">-</op:operator><lit:literal type="number" pos:line="578" pos:column="29">1</lit:literal></expr>;</return>
                }</block></then></if>
                <if pos:line="580" pos:column="17">if<condition pos:line="580" pos:column="19">(<expr><name><name pos:line="580" pos:column="20">x</name><op:operator pos:line="580" pos:column="21">.</op:operator><name pos:line="580" pos:column="22">StartingLineNumber</name></name> <op:operator pos:line="580" pos:column="41">==</op:operator> <name><name pos:line="580" pos:column="44">y</name><op:operator pos:line="580" pos:column="45">.</op:operator><name pos:line="580" pos:column="46">StartingLineNumber</name> <type:modifier pos:line="580" pos:column="65">&amp;&amp;</type:modifier></name>
                   <name><name pos:line="581" pos:column="20">x</name><op:operator pos:line="581" pos:column="21">.</op:operator><name pos:line="581" pos:column="22">StartingColumnNumber</name></name> <op:operator pos:line="581" pos:column="43">==</op:operator> <name><name pos:line="581" pos:column="46">y</name><op:operator pos:line="581" pos:column="47">.</op:operator><name pos:line="581" pos:column="48">StartingColumnNumber</name></name></expr>)</condition><then pos:line="581" pos:column="69"> <block pos:line="581" pos:column="70">{
                    <return pos:line="582" pos:column="21">return <expr><lit:literal type="number" pos:line="582" pos:column="28">0</lit:literal></expr>;</return>
                }</block></then></if>
                <return pos:line="584" pos:column="17">return <expr><lit:literal type="number" pos:line="584" pos:column="24">1</lit:literal></expr>;</return>
            }</block></function>
        }</block></class>

        <comment type="line" pos:line="588" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="589" pos:column="9">/// Sorts Statements based on their starting line/column, in reverse document order.</comment>
        <comment type="line" pos:line="590" pos:column="9">/// The file names are ignored.</comment>
        <comment type="line" pos:line="591" pos:column="9">/// &lt;/summary&gt;</comment>
        <class><specifier pos:line="592" pos:column="9">protected</specifier> class <name pos:line="592" pos:column="25">ReversePositionComparer</name> <super pos:line="592" pos:column="49">: <name><name pos:line="592" pos:column="51">Comparer</name><argument_list pos:line="592" pos:column="59">&lt;<argument><name pos:line="592" pos:column="60">Statement</name></argument>&gt;</argument_list></name></super> <block pos:line="592" pos:column="71">{

            <comment type="line" pos:line="594" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="595" pos:column="13">/// Returns a negative number if x comes before y, 0 if they are equal, or a positive number if x comes after y.</comment>
            <comment type="line" pos:line="596" pos:column="13">/// &lt;/summary&gt;</comment>
            <function><type><specifier pos:line="597" pos:column="13">public</specifier> <specifier pos:line="597" pos:column="20">override</specifier> <name pos:line="597" pos:column="29">int</name></type> <name pos:line="597" pos:column="33">Compare</name><parameter_list pos:line="597" pos:column="40">(<param><decl><type><name pos:line="597" pos:column="41">Statement</name></type> <name pos:line="597" pos:column="51">x</name></decl></param>, <param><decl><type><name pos:line="597" pos:column="54">Statement</name></type> <name pos:line="597" pos:column="64">y</name></decl></param>)</parameter_list> <block pos:line="597" pos:column="67">{
                <if pos:line="598" pos:column="17">if<condition pos:line="598" pos:column="19">(<expr><call><name><name pos:line="598" pos:column="20">object</name><op:operator pos:line="598" pos:column="26">.</op:operator><name pos:line="598" pos:column="27">Equals</name></name><argument_list pos:line="598" pos:column="33">(<argument><expr><name pos:line="598" pos:column="34">x</name></expr></argument>, <argument><expr><name pos:line="598" pos:column="37">y</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="598" pos:column="40"> <block pos:line="598" pos:column="41">{ <return pos:line="598" pos:column="43">return <expr><lit:literal type="number" pos:line="598" pos:column="50">0</lit:literal></expr>;</return> }</block></then></if>
                <if pos:line="599" pos:column="17">if<condition pos:line="599" pos:column="19">(<expr><name pos:line="599" pos:column="20">x</name> <op:operator pos:line="599" pos:column="22">==</op:operator> <name pos:line="599" pos:column="25">null</name></expr>)</condition><then pos:line="599" pos:column="30"> <block pos:line="599" pos:column="31">{ <return pos:line="599" pos:column="33">return <expr><lit:literal type="number" pos:line="599" pos:column="40">1</lit:literal></expr>;</return> }</block></then></if>
                <if pos:line="600" pos:column="17">if<condition pos:line="600" pos:column="19">(<expr><name pos:line="600" pos:column="20">y</name> <op:operator pos:line="600" pos:column="22">==</op:operator> <name pos:line="600" pos:column="25">null</name></expr>)</condition><then pos:line="600" pos:column="30"> <block pos:line="600" pos:column="31">{ <return pos:line="600" pos:column="33">return <expr><op:operator pos:line="600" pos:column="40">-</op:operator><lit:literal type="number" pos:line="600" pos:column="41">1</lit:literal></expr>;</return> }</block></then></if>

                <return pos:line="602" pos:column="17">return <expr><call><name pos:line="602" pos:column="24">CompareLocation</name><argument_list pos:line="602" pos:column="39">(<argument><expr><name><name pos:line="602" pos:column="40">x</name><op:operator pos:line="602" pos:column="41">.</op:operator><name pos:line="602" pos:column="42">PrimaryLocation</name></name></expr></argument>, <argument><expr><name><name pos:line="602" pos:column="59">y</name><op:operator pos:line="602" pos:column="60">.</op:operator><name pos:line="602" pos:column="61">PrimaryLocation</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <comment type="line" pos:line="605" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="606" pos:column="13">/// Returns a negative number if x comes before y, 0 if they are equal, or a positive number if x comes after y.</comment>
            <comment type="line" pos:line="607" pos:column="13">/// &lt;/summary&gt;</comment>
            <function><type><specifier pos:line="608" pos:column="13">public</specifier> <specifier pos:line="608" pos:column="20">static</specifier> <name pos:line="608" pos:column="27">int</name></type> <name pos:line="608" pos:column="31">CompareLocation</name><parameter_list pos:line="608" pos:column="46">(<param><decl><type><name pos:line="608" pos:column="47">SourceLocation</name></type> <name pos:line="608" pos:column="62">x</name></decl></param>, <param><decl><type><name pos:line="608" pos:column="65">SourceLocation</name></type> <name pos:line="608" pos:column="80">y</name></decl></param>)</parameter_list> <block pos:line="608" pos:column="83">{
                <if pos:line="609" pos:column="17">if<condition pos:line="609" pos:column="19">(<expr><call><name><name pos:line="609" pos:column="20">object</name><op:operator pos:line="609" pos:column="26">.</op:operator><name pos:line="609" pos:column="27">Equals</name></name><argument_list pos:line="609" pos:column="33">(<argument><expr><name pos:line="609" pos:column="34">x</name></expr></argument>, <argument><expr><name pos:line="609" pos:column="37">y</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="609" pos:column="40"> <block pos:line="609" pos:column="41">{ <return pos:line="609" pos:column="43">return <expr><lit:literal type="number" pos:line="609" pos:column="50">0</lit:literal></expr>;</return> }</block></then></if>
                <if pos:line="610" pos:column="17">if<condition pos:line="610" pos:column="19">(<expr><name pos:line="610" pos:column="20">x</name> <op:operator pos:line="610" pos:column="22">==</op:operator> <name pos:line="610" pos:column="25">null</name></expr>)</condition><then pos:line="610" pos:column="30"> <block pos:line="610" pos:column="31">{ <return pos:line="610" pos:column="33">return <expr><lit:literal type="number" pos:line="610" pos:column="40">1</lit:literal></expr>;</return> }</block></then></if>
                <if pos:line="611" pos:column="17">if<condition pos:line="611" pos:column="19">(<expr><name pos:line="611" pos:column="20">y</name> <op:operator pos:line="611" pos:column="22">==</op:operator> <name pos:line="611" pos:column="25">null</name></expr>)</condition><then pos:line="611" pos:column="30"> <block pos:line="611" pos:column="31">{ <return pos:line="611" pos:column="33">return <expr><op:operator pos:line="611" pos:column="40">-</op:operator><lit:literal type="number" pos:line="611" pos:column="41">1</lit:literal></expr>;</return> }</block></then></if>
                <if pos:line="612" pos:column="17">if<condition pos:line="612" pos:column="19">(<expr><name><name pos:line="612" pos:column="20">x</name><op:operator pos:line="612" pos:column="21">.</op:operator><name pos:line="612" pos:column="22">StartingLineNumber</name></name> <op:operator pos:line="612" pos:column="41">&lt;</op:operator> <name><name pos:line="612" pos:column="43">y</name><op:operator pos:line="612" pos:column="44">.</op:operator><name pos:line="612" pos:column="45">StartingLineNumber</name></name> <op:operator pos:line="612" pos:column="64">||</op:operator>
                   <op:operator pos:line="613" pos:column="20">(</op:operator><name><name pos:line="613" pos:column="21">x</name><op:operator pos:line="613" pos:column="22">.</op:operator><name pos:line="613" pos:column="23">StartingLineNumber</name></name> <op:operator pos:line="613" pos:column="42">==</op:operator> <name><name pos:line="613" pos:column="45">y</name><op:operator pos:line="613" pos:column="46">.</op:operator><name pos:line="613" pos:column="47">StartingLineNumber</name> <type:modifier pos:line="613" pos:column="66">&amp;&amp;</type:modifier></name> <name><name pos:line="613" pos:column="69">x</name><op:operator pos:line="613" pos:column="70">.</op:operator><name pos:line="613" pos:column="71">StartingColumnNumber</name></name> <op:operator pos:line="613" pos:column="92">&lt;</op:operator> <name><name pos:line="613" pos:column="94">y</name><op:operator pos:line="613" pos:column="95">.</op:operator><name pos:line="613" pos:column="96">StartingColumnNumber</name></name><op:operator pos:line="613" pos:column="116">)</op:operator></expr>)</condition><then pos:line="613" pos:column="118"> <block pos:line="613" pos:column="119">{
                    <return pos:line="614" pos:column="21">return <expr><lit:literal type="number" pos:line="614" pos:column="28">1</lit:literal></expr>;</return>
                }</block></then></if>
                <if pos:line="616" pos:column="17">if<condition pos:line="616" pos:column="19">(<expr><name><name pos:line="616" pos:column="20">x</name><op:operator pos:line="616" pos:column="21">.</op:operator><name pos:line="616" pos:column="22">StartingLineNumber</name></name> <op:operator pos:line="616" pos:column="41">==</op:operator> <name><name pos:line="616" pos:column="44">y</name><op:operator pos:line="616" pos:column="45">.</op:operator><name pos:line="616" pos:column="46">StartingLineNumber</name> <type:modifier pos:line="616" pos:column="65">&amp;&amp;</type:modifier></name>
                   <name><name pos:line="617" pos:column="20">x</name><op:operator pos:line="617" pos:column="21">.</op:operator><name pos:line="617" pos:column="22">StartingColumnNumber</name></name> <op:operator pos:line="617" pos:column="43">==</op:operator> <name><name pos:line="617" pos:column="46">y</name><op:operator pos:line="617" pos:column="47">.</op:operator><name pos:line="617" pos:column="48">StartingColumnNumber</name></name></expr>)</condition><then pos:line="617" pos:column="69"> <block pos:line="617" pos:column="70">{
                    <return pos:line="618" pos:column="21">return <expr><lit:literal type="number" pos:line="618" pos:column="28">0</lit:literal></expr>;</return>
                }</block></then></if>
                <return pos:line="620" pos:column="17">return <expr><op:operator pos:line="620" pos:column="24">-</op:operator><lit:literal type="number" pos:line="620" pos:column="25">1</lit:literal></expr>;</return>
            }</block></function>
        }</block></class>
    }</block></class>
}</block></namespace>
</unit>
