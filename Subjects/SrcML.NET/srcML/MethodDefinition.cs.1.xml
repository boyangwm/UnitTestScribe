<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data\MethodDefinition.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2013 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *    Patrick Francis (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">ABB</name><op:operator pos:line="13" pos:column="10">.</op:operator><name pos:line="13" pos:column="11">SrcML</name><op:operator pos:line="13" pos:column="16">.</op:operator><name pos:line="13" pos:column="17">Utilities</name></name>;</using>
<using pos:line="14" pos:column="1">using <name pos:line="14" pos:column="7">System</name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Collections</name><op:operator pos:line="15" pos:column="25">.</op:operator><name pos:line="15" pos:column="26">Generic</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Collections</name><op:operator pos:line="16" pos:column="25">.</op:operator><name pos:line="16" pos:column="26">ObjectModel</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Diagnostics</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Linq</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">System</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">Text</name></name>;</using>
<using pos:line="20" pos:column="1">using <name><name pos:line="20" pos:column="7">System</name><op:operator pos:line="20" pos:column="13">.</op:operator><name pos:line="20" pos:column="14">Xml</name></name>;</using>

<namespace pos:line="22" pos:column="1">namespace <name><name pos:line="22" pos:column="11">ABB</name><op:operator pos:line="22" pos:column="14">.</op:operator><name pos:line="22" pos:column="15">SrcML</name><op:operator pos:line="22" pos:column="20">.</op:operator><name pos:line="22" pos:column="21">Data</name></name> <block pos:line="22" pos:column="26">{
    <comment type="line" pos:line="23" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="24" pos:column="5">/// Represents a method definition in a program.</comment>
    <comment type="line" pos:line="25" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="26" pos:column="5">public</specifier> class <name pos:line="26" pos:column="18">MethodDefinition</name> <super pos:line="26" pos:column="35">: <name pos:line="26" pos:column="37">NamedScope</name></super> <block pos:line="26" pos:column="48">{
        <decl_stmt><decl><type><specifier pos:line="27" pos:column="9">private</specifier> <name><name pos:line="27" pos:column="17">List</name><argument_list pos:line="27" pos:column="21">&lt;<argument><name pos:line="27" pos:column="22">VariableDeclaration</name></argument>&gt;</argument_list></name></type> <name pos:line="27" pos:column="43">parameterList</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="28" pos:column="9">private</specifier> <name><name pos:line="28" pos:column="17">List</name><argument_list pos:line="28" pos:column="21">&lt;<argument><name pos:line="28" pos:column="22">MethodCall</name></argument>&gt;</argument_list></name></type> <name pos:line="28" pos:column="34">initializerList</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="29" pos:column="9">private</specifier> <name><name pos:line="29" pos:column="17">Dictionary</name><argument_list pos:line="29" pos:column="27">&lt;<argument><name pos:line="29" pos:column="28">string</name></argument>, <argument><name pos:line="29" pos:column="36">TypeUse</name></argument>&gt;</argument_list></name></type> <name pos:line="29" pos:column="45">_returnTypeMap</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="30" pos:column="9">private</specifier> <name><name pos:line="30" pos:column="17">Dictionary</name><argument_list pos:line="30" pos:column="27">&lt;<argument><name pos:line="30" pos:column="28">string</name></argument>, <argument><name><name pos:line="30" pos:column="36">List</name><argument_list pos:line="30" pos:column="40">&lt;<argument><name pos:line="30" pos:column="41">VariableDeclaration</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="30" pos:column="63">_parameterMap</name></decl>;</decl_stmt>

        <comment type="line" pos:line="32" pos:column="9">/// &lt;summary&gt; The XML name for MethodDefinition &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="33" pos:column="9">public</specifier> <specifier pos:line="33" pos:column="16">new</specifier> <specifier pos:line="33" pos:column="20">const</specifier> <name pos:line="33" pos:column="26">string</name></type> <name pos:line="33" pos:column="33">XmlName</name> <init pos:line="33" pos:column="41">= <expr><lit:literal type="string" pos:line="33" pos:column="43">"Method"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="35" pos:column="9">/// &lt;summary&gt; XML Name for &lt;see cref="ConstructorInitializers"/&gt;&lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="36" pos:column="9">public</specifier> <specifier pos:line="36" pos:column="16">const</specifier> <name pos:line="36" pos:column="22">string</name></type> <name pos:line="36" pos:column="29">XmlConstructorInitializersName</name> <init pos:line="36" pos:column="60">= <expr><lit:literal type="string" pos:line="36" pos:column="62">"ConstructorInitializers"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="38" pos:column="9">/// &lt;summary&gt; XML Name for &lt;see cref="IsConstructor" /&gt; &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="39" pos:column="9">public</specifier> <specifier pos:line="39" pos:column="16">const</specifier> <name pos:line="39" pos:column="22">string</name></type> <name pos:line="39" pos:column="29">XmlIsConstructorName</name> <init pos:line="39" pos:column="50">= <expr><lit:literal type="string" pos:line="39" pos:column="52">"IsConstructor"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="41" pos:column="9">/// &lt;summary&gt; XML Name for &lt;see cref="IsDestructor" /&gt; &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="42" pos:column="9">public</specifier> <specifier pos:line="42" pos:column="16">const</specifier> <name pos:line="42" pos:column="22">string</name></type> <name pos:line="42" pos:column="29">XmlIsDestructorName</name> <init pos:line="42" pos:column="49">= <expr><lit:literal type="string" pos:line="42" pos:column="51">"IsDestructor"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="44" pos:column="9">/// &lt;summary&gt; XML Name for &lt;see cref="IsPartial" /&gt; &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="45" pos:column="9">public</specifier> <specifier pos:line="45" pos:column="16">const</specifier> <name pos:line="45" pos:column="22">string</name></type> <name pos:line="45" pos:column="29">XmlIsPartialName</name> <init pos:line="45" pos:column="46">= <expr><lit:literal type="string" pos:line="45" pos:column="48">"IsPartial"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="47" pos:column="9">/// &lt;summary&gt; XML Name for &lt;see cref="Parameters" /&gt; &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="48" pos:column="9">public</specifier> <specifier pos:line="48" pos:column="16">const</specifier> <name pos:line="48" pos:column="22">string</name></type> <name pos:line="48" pos:column="29">XmlParametersName</name> <init pos:line="48" pos:column="47">= <expr><lit:literal type="string" pos:line="48" pos:column="49">"Parameters"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="50" pos:column="9">/// &lt;summary&gt; XML Name for &lt;see cref="ReturnType" /&gt; &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="51" pos:column="9">public</specifier> <specifier pos:line="51" pos:column="16">const</specifier> <name pos:line="51" pos:column="22">string</name></type> <name pos:line="51" pos:column="29">XmlReturnTypeName</name> <init pos:line="51" pos:column="47">= <expr><lit:literal type="string" pos:line="51" pos:column="49">"ReturnType"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="53" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="54" pos:column="9">/// Creates a new method definition object</comment>
        <comment type="line" pos:line="55" pos:column="9">/// &lt;/summary&gt;</comment>
        <constructor><specifier pos:line="56" pos:column="9">public</specifier> <name pos:line="56" pos:column="16">MethodDefinition</name><parameter_list pos:line="56" pos:column="32">()</parameter_list>
            <member_list pos:line="57" pos:column="13">: <call><name pos:line="57" pos:column="15">base</name><argument_list pos:line="57" pos:column="19">()</argument_list></call> </member_list><block pos:line="57" pos:column="22">{
            <expr_stmt><expr><name pos:line="58" pos:column="13">_returnTypeMap</name> <op:operator pos:line="58" pos:column="28">=</op:operator> <op:operator pos:line="58" pos:column="30">new</op:operator> <call><name><name pos:line="58" pos:column="34">Dictionary</name><argument_list pos:line="58" pos:column="44">&lt;<argument><name pos:line="58" pos:column="45">string</name></argument>, <argument><name pos:line="58" pos:column="53">TypeUse</name></argument>&gt;</argument_list></name><argument_list pos:line="58" pos:column="61">(<argument><expr><name><name pos:line="58" pos:column="62">StringComparer</name><op:operator pos:line="58" pos:column="76">.</op:operator><name pos:line="58" pos:column="77">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="59" pos:column="13">_parameterMap</name> <op:operator pos:line="59" pos:column="27">=</op:operator> <op:operator pos:line="59" pos:column="29">new</op:operator> <call><name><name pos:line="59" pos:column="33">Dictionary</name><argument_list pos:line="59" pos:column="43">&lt;<argument><name pos:line="59" pos:column="44">string</name></argument>, <argument><name><name pos:line="59" pos:column="52">List</name><argument_list pos:line="59" pos:column="56">&lt;<argument><name pos:line="59" pos:column="57">VariableDeclaration</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list pos:line="59" pos:column="78">(<argument><expr><name><name pos:line="59" pos:column="79">StringComparer</name><op:operator pos:line="59" pos:column="93">.</op:operator><name pos:line="59" pos:column="94">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="61" pos:column="13">parameterList</name> <op:operator pos:line="61" pos:column="27">=</op:operator> <op:operator pos:line="61" pos:column="29">new</op:operator> <call><name><name pos:line="61" pos:column="33">List</name><argument_list pos:line="61" pos:column="37">&lt;<argument><name pos:line="61" pos:column="38">VariableDeclaration</name></argument>&gt;</argument_list></name><argument_list pos:line="61" pos:column="58">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="62" pos:column="13">Parameters</name> <op:operator pos:line="62" pos:column="24">=</op:operator> <op:operator pos:line="62" pos:column="26">new</op:operator> <call><name><name pos:line="62" pos:column="30">ReadOnlyCollection</name><argument_list pos:line="62" pos:column="48">&lt;<argument><name pos:line="62" pos:column="49">VariableDeclaration</name></argument>&gt;</argument_list></name><argument_list pos:line="62" pos:column="69">(<argument><expr><name pos:line="62" pos:column="70">parameterList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="64" pos:column="13">initializerList</name> <op:operator pos:line="64" pos:column="29">=</op:operator> <op:operator pos:line="64" pos:column="31">new</op:operator> <call><name><name pos:line="64" pos:column="35">List</name><argument_list pos:line="64" pos:column="39">&lt;<argument><name pos:line="64" pos:column="40">MethodCall</name></argument>&gt;</argument_list></name><argument_list pos:line="64" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="65" pos:column="13">ConstructorInitializers</name> <op:operator pos:line="65" pos:column="37">=</op:operator> <op:operator pos:line="65" pos:column="39">new</op:operator> <call><name><name pos:line="65" pos:column="43">ReadOnlyCollection</name><argument_list pos:line="65" pos:column="61">&lt;<argument><name pos:line="65" pos:column="62">MethodCall</name></argument>&gt;</argument_list></name><argument_list pos:line="65" pos:column="73">(<argument><expr><name pos:line="65" pos:column="74">initializerList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="68" pos:column="9">/// &lt;summary&gt; Indicates whether this method is a constructor. &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="69" pos:column="9">public</specifier> <name pos:line="69" pos:column="16">bool</name></type> <name pos:line="69" pos:column="21">IsConstructor</name> <block pos:line="69" pos:column="35">{ <function_decl><name pos:line="69" pos:column="37">get</name>;</function_decl> <function_decl><name pos:line="69" pos:column="42">set</name>;</function_decl> }</block></decl></decl_stmt>
        
        <comment type="line" pos:line="71" pos:column="9">/// &lt;summary&gt; Indicates whether this method is a destructor. &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="72" pos:column="9">public</specifier> <name pos:line="72" pos:column="16">bool</name></type> <name pos:line="72" pos:column="21">IsDestructor</name> <block pos:line="72" pos:column="34">{ <function_decl><name pos:line="72" pos:column="36">get</name>;</function_decl> <function_decl><name pos:line="72" pos:column="41">set</name>;</function_decl> }</block></decl></decl_stmt>
        
        <comment type="line" pos:line="74" pos:column="9">/// &lt;summary&gt; Indicates whether this is a partial method. &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="75" pos:column="9">public</specifier> <name pos:line="75" pos:column="16">bool</name></type> <name pos:line="75" pos:column="21">IsPartial</name> <block pos:line="75" pos:column="31">{ <function_decl><name pos:line="75" pos:column="33">get</name>;</function_decl> <function_decl><name pos:line="75" pos:column="38">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="77" pos:column="9">/// &lt;summary&gt; The parameters to the method. &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="78" pos:column="9">public</specifier> <name><name pos:line="78" pos:column="16">ReadOnlyCollection</name><argument_list pos:line="78" pos:column="34">&lt;<argument><name pos:line="78" pos:column="35">VariableDeclaration</name></argument>&gt;</argument_list></name></type> <name pos:line="78" pos:column="56">Parameters</name> <block pos:line="78" pos:column="67">{ <function_decl><name pos:line="78" pos:column="69">get</name>;</function_decl> <function_decl><specifier pos:line="78" pos:column="74">private</specifier> <name pos:line="78" pos:column="82">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="80" pos:column="9">/// &lt;summary&gt; The list of initialization calls appearing in a constructor. This is only applicable to C++ and C#. &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="81" pos:column="9">public</specifier> <name><name pos:line="81" pos:column="16">ReadOnlyCollection</name><argument_list pos:line="81" pos:column="34">&lt;<argument><name pos:line="81" pos:column="35">MethodCall</name></argument>&gt;</argument_list></name></type> <name pos:line="81" pos:column="47">ConstructorInitializers</name> <block pos:line="81" pos:column="71">{ <function_decl><name pos:line="81" pos:column="73">get</name>;</function_decl> <function_decl><specifier pos:line="81" pos:column="78">private</specifier> <name pos:line="81" pos:column="86">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="83" pos:column="9">/// &lt;summary&gt; The return type of the method. &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="84" pos:column="9">public</specifier> <name pos:line="84" pos:column="16">TypeUse</name></type> <name pos:line="84" pos:column="24">ReturnType</name> <block pos:line="84" pos:column="35">{
            <function><name pos:line="85" pos:column="13">get</name> <block pos:line="85" pos:column="17">{
                <if pos:line="86" pos:column="17">if<condition pos:line="86" pos:column="19">(<expr><name><name pos:line="86" pos:column="20">_returnTypeMap</name><op:operator pos:line="86" pos:column="34">.</op:operator><name pos:line="86" pos:column="35">Count</name></name> <op:operator pos:line="86" pos:column="41">&gt;</op:operator> <lit:literal type="number" pos:line="86" pos:column="43">0</lit:literal></expr>)</condition><then pos:line="86" pos:column="45"> <block pos:line="86" pos:column="46">{
                    <return pos:line="87" pos:column="21">return <expr><call><name><name pos:line="87" pos:column="28">_returnTypeMap</name><op:operator pos:line="87" pos:column="42">.</op:operator><name pos:line="87" pos:column="43">First</name></name><argument_list pos:line="87" pos:column="48">()</argument_list></call><op:operator pos:line="87" pos:column="50">.</op:operator><name pos:line="87" pos:column="51">Value</name></expr>;</return>
                }</block></then></if>
                <return pos:line="89" pos:column="17">return <expr><name pos:line="89" pos:column="24">null</name></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="93" pos:column="9">//TODO: record other keywords besides access modifiers? for example, static</comment>

        <comment type="line" pos:line="95" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="96" pos:column="9">/// Adds set of method parameters to this method. If the &lt;paramref name="parameters"/&gt; have a different set of</comment>
        <comment type="line" pos:line="97" pos:column="9">/// type name values than &lt;see cref="Parameters"/&gt;, then the current list is cleared</comment>
        <comment type="line" pos:line="98" pos:column="9">/// and &lt;paramref name="parameters"/&gt; is used. If the variable type names match, then &lt;paramref name="parameters"/&gt;</comment>
        <comment type="line" pos:line="99" pos:column="9">/// only matches if it has extra information (such as variable names or initializers).</comment>
        <comment type="line" pos:line="100" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="101" pos:column="9">/// &lt;param name="parameters"&gt;The collection of method parameters to add&lt;/param&gt;</comment>
        <function><type><specifier pos:line="102" pos:column="9">public</specifier> <name pos:line="102" pos:column="16">void</name></type> <name pos:line="102" pos:column="21">AddMethodParameters</name><parameter_list pos:line="102" pos:column="40">(<param><decl><type><name><name pos:line="102" pos:column="41">List</name><argument_list pos:line="102" pos:column="45">&lt;<argument><name pos:line="102" pos:column="46">VariableDeclaration</name></argument>&gt;</argument_list></name></type> <name pos:line="102" pos:column="67">parameters</name></decl></param>)</parameter_list> <block pos:line="102" pos:column="79">{
            <if pos:line="103" pos:column="13">if<condition pos:line="103" pos:column="15">(<expr><name pos:line="103" pos:column="16">parameters</name> <op:operator pos:line="103" pos:column="27">==</op:operator> <name pos:line="103" pos:column="30">null</name></expr>)</condition><then pos:line="103" pos:column="35"> <block pos:line="103" pos:column="36">{ <throw pos:line="103" pos:column="38">throw <expr><op:operator pos:line="103" pos:column="44">new</op:operator> <call><name pos:line="103" pos:column="48">ArgumentNullException</name><argument_list pos:line="103" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="103" pos:column="70">"parameters"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>

            <if pos:line="105" pos:column="13">if<condition pos:line="105" pos:column="15">(<expr><name><name pos:line="105" pos:column="16">parameters</name><op:operator pos:line="105" pos:column="26">.</op:operator><name pos:line="105" pos:column="27">Count</name></name> <op:operator pos:line="105" pos:column="33">&gt;</op:operator> <lit:literal type="number" pos:line="105" pos:column="35">0</lit:literal></expr>)</condition><then pos:line="105" pos:column="37"> <block pos:line="105" pos:column="38">{
                <if pos:line="106" pos:column="17">if<condition pos:line="106" pos:column="19">(<expr><name><name pos:line="106" pos:column="20">parameterList</name><op:operator pos:line="106" pos:column="33">.</op:operator><name pos:line="106" pos:column="34">Count</name></name> <op:operator pos:line="106" pos:column="40">&gt;</op:operator> <lit:literal type="number" pos:line="106" pos:column="42">0</lit:literal> <op:operator pos:line="106" pos:column="44">&amp;&amp;</op:operator> <call><name pos:line="106" pos:column="47">GetParameterFingerprint</name><argument_list pos:line="106" pos:column="70">(<argument><expr><name pos:line="106" pos:column="71">parameterList</name></expr></argument>)</argument_list></call> <op:operator pos:line="106" pos:column="86">!=</op:operator> <call><name pos:line="106" pos:column="89">GetParameterFingerprint</name><argument_list pos:line="106" pos:column="112">(<argument><expr><name pos:line="106" pos:column="113">parameters</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="106" pos:column="125"> <block pos:line="106" pos:column="126">{
                    <expr_stmt><expr><call><name><name pos:line="107" pos:column="21">_parameterMap</name><op:operator pos:line="107" pos:column="34">.</op:operator><name pos:line="107" pos:column="35">Clear</name></name><argument_list pos:line="107" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <foreach pos:line="110" pos:column="17">foreach(<init><decl><type><name pos:line="110" pos:column="25">var</name></type> <name pos:line="110" pos:column="29">param</name> <range pos:line="110" pos:column="35">in <expr><name pos:line="110" pos:column="38">parameters</name></expr></range></decl></init>) <block pos:line="110" pos:column="50">{
                    <if pos:line="111" pos:column="21">if<condition pos:line="111" pos:column="23">(<expr><name pos:line="111" pos:column="24">param</name> <op:operator pos:line="111" pos:column="30">!=</op:operator> <name pos:line="111" pos:column="33">null</name></expr>)</condition><then pos:line="111" pos:column="38"> <block pos:line="111" pos:column="39">{
                        <expr_stmt><expr><name><name pos:line="112" pos:column="25">param</name><op:operator pos:line="112" pos:column="30">.</op:operator><name pos:line="112" pos:column="31">ParentStatement</name></name> <op:operator pos:line="112" pos:column="47">=</op:operator> <name pos:line="112" pos:column="49">this</name></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></foreach>
                <expr_stmt><expr><name><name pos:line="115" pos:column="17">_parameterMap</name><index pos:line="115" pos:column="30">[<expr><name><name pos:line="115" pos:column="31">parameters</name><index pos:line="115" pos:column="41">[<expr><lit:literal type="number" pos:line="115" pos:column="42">0</lit:literal></expr>]</index></name><op:operator pos:line="115" pos:column="44">.</op:operator><call><name><name pos:line="115" pos:column="45">Location</name><op:operator pos:line="115" pos:column="53">.</op:operator><name pos:line="115" pos:column="54">ToString</name></name><argument_list pos:line="115" pos:column="62">()</argument_list></call></expr>]</index></name> <op:operator pos:line="115" pos:column="66">=</op:operator> <name pos:line="115" pos:column="68">parameters</name></expr>;</expr_stmt>

                <if pos:line="117" pos:column="17">if<condition pos:line="117" pos:column="19">(<expr><name><name pos:line="117" pos:column="20">parameterList</name><op:operator pos:line="117" pos:column="33">.</op:operator><name pos:line="117" pos:column="34">Count</name></name> <op:operator pos:line="117" pos:column="40">==</op:operator> <lit:literal type="number" pos:line="117" pos:column="43">0</lit:literal> <op:operator pos:line="117" pos:column="45">||</op:operator> <call><name pos:line="117" pos:column="48">ComputeParameterInfoScore</name><argument_list pos:line="117" pos:column="73">(<argument><expr><name pos:line="117" pos:column="74">parameterList</name></expr></argument>)</argument_list></call> <op:operator pos:line="117" pos:column="89">&lt;</op:operator> <call><name pos:line="117" pos:column="91">ComputeParameterInfoScore</name><argument_list pos:line="117" pos:column="116">(<argument><expr><name pos:line="117" pos:column="117">parameters</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="117" pos:column="129"> <block pos:line="117" pos:column="130">{
                    <expr_stmt><expr><call><name><name pos:line="118" pos:column="21">parameterList</name><op:operator pos:line="118" pos:column="34">.</op:operator><name pos:line="118" pos:column="35">Clear</name></name><argument_list pos:line="118" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="119" pos:column="21">parameterList</name><op:operator pos:line="119" pos:column="34">.</op:operator><name pos:line="119" pos:column="35">AddRange</name></name><argument_list pos:line="119" pos:column="43">(<argument><expr><name pos:line="119" pos:column="44">parameters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="124" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="125" pos:column="9">/// Adds a return type to the internal return type collection. If the &lt;paramref name="returnType"/&gt; has a different</comment>
        <comment type="line" pos:line="126" pos:column="9">/// type name than this object, then the map is cleared and &lt;paramref name="returnType" /&gt; is the</comment>
        <comment type="line" pos:line="127" pos:column="9">/// sole return type for this method.</comment>
        <comment type="line" pos:line="128" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="129" pos:column="9">/// &lt;param name="returnType"&gt;The return type object to add&lt;/param&gt;</comment>
        <function><type><specifier pos:line="130" pos:column="9">public</specifier> <name pos:line="130" pos:column="16">void</name></type> <name pos:line="130" pos:column="21">AddReturnType</name><parameter_list pos:line="130" pos:column="34">(<param><decl><type><name pos:line="130" pos:column="35">TypeUse</name></type> <name pos:line="130" pos:column="43">returnType</name></decl></param>)</parameter_list> <block pos:line="130" pos:column="55">{
            <if pos:line="131" pos:column="13">if<condition pos:line="131" pos:column="15">(<expr><name pos:line="131" pos:column="16">returnType</name> <op:operator pos:line="131" pos:column="27">==</op:operator> <name pos:line="131" pos:column="30">null</name></expr>)</condition><then pos:line="131" pos:column="35"> <block pos:line="131" pos:column="36">{ <throw pos:line="131" pos:column="38">throw <expr><op:operator pos:line="131" pos:column="44">new</op:operator> <call><name pos:line="131" pos:column="48">ArgumentNullException</name><argument_list pos:line="131" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="131" pos:column="70">"returnType"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>

            <if pos:line="133" pos:column="13">if<condition pos:line="133" pos:column="15">(<expr><name pos:line="133" pos:column="16">null</name> <op:operator pos:line="133" pos:column="21">!=</op:operator> <name pos:line="133" pos:column="24">ReturnType</name> <op:operator pos:line="133" pos:column="35">&amp;&amp;</op:operator> <name><name pos:line="133" pos:column="38">this</name><op:operator pos:line="133" pos:column="42">.</op:operator><name pos:line="133" pos:column="43">ReturnType</name><op:operator pos:line="133" pos:column="53">.</op:operator><name pos:line="133" pos:column="54">Name</name></name> <op:operator pos:line="133" pos:column="59">!=</op:operator> <name><name pos:line="133" pos:column="62">returnType</name><op:operator pos:line="133" pos:column="72">.</op:operator><name pos:line="133" pos:column="73">Name</name></name></expr>)</condition><then pos:line="133" pos:column="78"> <block pos:line="133" pos:column="79">{
                <expr_stmt><expr><call><name><name pos:line="134" pos:column="17">_returnTypeMap</name><op:operator pos:line="134" pos:column="31">.</op:operator><name pos:line="134" pos:column="32">Clear</name></name><argument_list pos:line="134" pos:column="37">()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name><name pos:line="136" pos:column="13">returnType</name><op:operator pos:line="136" pos:column="23">.</op:operator><name pos:line="136" pos:column="24">ParentStatement</name></name> <op:operator pos:line="136" pos:column="40">=</op:operator> <name pos:line="136" pos:column="42">this</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="137" pos:column="13">_returnTypeMap</name><index pos:line="137" pos:column="27">[<expr><call><name><name pos:line="137" pos:column="28">returnType</name><op:operator pos:line="137" pos:column="38">.</op:operator><name pos:line="137" pos:column="39">Location</name><op:operator pos:line="137" pos:column="47">.</op:operator><name pos:line="137" pos:column="48">ToString</name></name><argument_list pos:line="137" pos:column="56">()</argument_list></call></expr>]</index></name> <op:operator pos:line="137" pos:column="60">=</op:operator> <name pos:line="137" pos:column="62">returnType</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="140" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="141" pos:column="9">/// Adds the given initializer call to the ConstructorInitializers collection.</comment>
        <comment type="line" pos:line="142" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="143" pos:column="9">/// &lt;param name="initializerCall"&gt;The initializer to add.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="144" pos:column="9">public</specifier> <name pos:line="144" pos:column="16">void</name></type> <name pos:line="144" pos:column="21">AddInitializer</name><parameter_list pos:line="144" pos:column="35">(<param><decl><type><name pos:line="144" pos:column="36">MethodCall</name></type> <name pos:line="144" pos:column="47">initializerCall</name></decl></param>)</parameter_list> <block pos:line="144" pos:column="64">{
            <if pos:line="145" pos:column="13">if<condition pos:line="145" pos:column="15">(<expr><name pos:line="145" pos:column="16">initializerCall</name> <op:operator pos:line="145" pos:column="32">==</op:operator> <name pos:line="145" pos:column="35">null</name></expr>)</condition><then pos:line="145" pos:column="40"> <block pos:line="145" pos:column="41">{ <throw pos:line="145" pos:column="43">throw <expr><op:operator pos:line="145" pos:column="49">new</op:operator> <call><name pos:line="145" pos:column="53">ArgumentNullException</name><argument_list pos:line="145" pos:column="74">(<argument><expr><lit:literal type="string" pos:line="145" pos:column="75">"initializerCall"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>
            <expr_stmt><expr><name><name pos:line="146" pos:column="13">initializerCall</name><op:operator pos:line="146" pos:column="28">.</op:operator><name pos:line="146" pos:column="29">ParentStatement</name></name> <op:operator pos:line="146" pos:column="45">=</op:operator> <name pos:line="146" pos:column="47">this</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="147" pos:column="13">initializerCall</name><op:operator pos:line="147" pos:column="28">.</op:operator><name pos:line="147" pos:column="29">IsConstructorInitializer</name></name> <op:operator pos:line="147" pos:column="54">=</op:operator> <lit:literal type="boolean" pos:line="147" pos:column="56">true</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="148" pos:column="13">initializerList</name><op:operator pos:line="148" pos:column="28">.</op:operator><name pos:line="148" pos:column="29">Add</name></name><argument_list pos:line="148" pos:column="32">(<argument><expr><name pos:line="148" pos:column="33">initializerCall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="151" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="152" pos:column="9">/// Adds the given initializer calls to the ConstructorInitializers collection.</comment>
        <comment type="line" pos:line="153" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="154" pos:column="9">/// &lt;param name="initializerCalls"&gt;The initializers to add.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="155" pos:column="9">public</specifier> <name pos:line="155" pos:column="16">void</name></type> <name pos:line="155" pos:column="21">AddInitializers</name><parameter_list pos:line="155" pos:column="36">(<param><decl><type><name><name pos:line="155" pos:column="37">IEnumerable</name><argument_list pos:line="155" pos:column="48">&lt;<argument><name pos:line="155" pos:column="49">MethodCall</name></argument>&gt;</argument_list></name></type> <name pos:line="155" pos:column="61">initializerCalls</name></decl></param>)</parameter_list> <block pos:line="155" pos:column="79">{
            <foreach pos:line="156" pos:column="13">foreach(<init><decl><type><name pos:line="156" pos:column="21">var</name></type> <name pos:line="156" pos:column="25">call</name> <range pos:line="156" pos:column="30">in <expr><name pos:line="156" pos:column="33">initializerCalls</name></expr></range></decl></init>) <block pos:line="156" pos:column="51">{
                <expr_stmt><expr><call><name pos:line="157" pos:column="17">AddInitializer</name><argument_list pos:line="157" pos:column="31">(<argument><expr><name pos:line="157" pos:column="32">call</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>

        <comment type="line" pos:line="161" pos:column="9">//TODO: create method ResolveReturnType that will match the return type, and handle determining the constructor return type</comment>

        <comment type="line" pos:line="163" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="164" pos:column="9">/// Instance method for getting &lt;see cref="MethodDefinition.XmlName"/&gt;</comment>
        <comment type="line" pos:line="165" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="166" pos:column="9">/// &lt;returns&gt;Returns the XML name for MethodDefinition&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="167" pos:column="9">public</specifier> <specifier pos:line="167" pos:column="16">override</specifier> <name pos:line="167" pos:column="25">string</name></type> <name pos:line="167" pos:column="32">GetXmlName</name><parameter_list pos:line="167" pos:column="42">()</parameter_list> <block pos:line="167" pos:column="45">{ <return pos:line="167" pos:column="47">return <expr><name><name pos:line="167" pos:column="54">MethodDefinition</name><op:operator pos:line="167" pos:column="70">.</op:operator><name pos:line="167" pos:column="71">XmlName</name></name></expr>;</return> }</block></function>

        <comment type="line" pos:line="169" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="170" pos:column="9">/// Returns all the expressions within this statement.</comment>
        <comment type="line" pos:line="171" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="172" pos:column="9">public</specifier> <specifier pos:line="172" pos:column="16">override</specifier> <name><name pos:line="172" pos:column="25">IEnumerable</name><argument_list pos:line="172" pos:column="36">&lt;<argument><name pos:line="172" pos:column="37">Expression</name></argument>&gt;</argument_list></name></type> <name pos:line="172" pos:column="49">GetExpressions</name><parameter_list pos:line="172" pos:column="63">()</parameter_list>
        <block pos:line="173" pos:column="9">{
            <if pos:line="174" pos:column="13">if<condition pos:line="174" pos:column="15">(<expr><name pos:line="174" pos:column="16">ReturnType</name> <op:operator pos:line="174" pos:column="27">!=</op:operator> <name pos:line="174" pos:column="30">null</name></expr>)</condition><then pos:line="174" pos:column="35"> <block pos:line="174" pos:column="36">{
                <return><specifier pos:line="175" pos:column="17">yield</specifier> return <expr><name pos:line="175" pos:column="30">ReturnType</name></expr>;</return>
            }</block></then></if>
            <if pos:line="177" pos:column="13">if<condition pos:line="177" pos:column="15">(<expr><name pos:line="177" pos:column="16">Prefix</name> <op:operator pos:line="177" pos:column="23">!=</op:operator> <name pos:line="177" pos:column="26">null</name></expr>)</condition><then pos:line="177" pos:column="31"> <block pos:line="177" pos:column="32">{
                <return><specifier pos:line="178" pos:column="17">yield</specifier> return <expr><name pos:line="178" pos:column="30">Prefix</name></expr>;</return>
            }</block></then></if>
            <comment type="line" pos:line="180" pos:column="13">//TODO: add type parameters, once they exist</comment>
            <foreach pos:line="181" pos:column="13">foreach(<init><decl><type><name pos:line="181" pos:column="21">var</name></type> <name pos:line="181" pos:column="25">param</name> <range pos:line="181" pos:column="31">in <expr><name pos:line="181" pos:column="34">Parameters</name></expr></range></decl></init>) <block pos:line="181" pos:column="46">{
                <return><specifier pos:line="182" pos:column="17">yield</specifier> return <expr><name pos:line="182" pos:column="30">param</name></expr>;</return>
            }</block></foreach>
            <foreach pos:line="184" pos:column="13">foreach(<init><decl><type><name pos:line="184" pos:column="21">var</name></type> <name pos:line="184" pos:column="25">init</name> <range pos:line="184" pos:column="30">in <expr><name pos:line="184" pos:column="33">ConstructorInitializers</name></expr></range></decl></init>) <block pos:line="184" pos:column="58">{
                <return><specifier pos:line="185" pos:column="17">yield</specifier> return <expr><name pos:line="185" pos:column="30">init</name></expr>;</return>
            }</block></foreach>
        }</block></function>

        <function><type><specifier pos:line="189" pos:column="9">public</specifier> <specifier pos:line="189" pos:column="16">override</specifier> <name pos:line="189" pos:column="25">Statement</name></type> <name pos:line="189" pos:column="35">Merge</name><parameter_list pos:line="189" pos:column="40">(<param><decl><type><name pos:line="189" pos:column="41">Statement</name></type> <name pos:line="189" pos:column="51">otherStatement</name></decl></param>)</parameter_list> <block pos:line="189" pos:column="67">{
            <return pos:line="190" pos:column="13">return <expr><call><name><name pos:line="190" pos:column="20">this</name><op:operator pos:line="190" pos:column="24">.</op:operator><name pos:line="190" pos:column="25">Merge</name></name><argument_list pos:line="190" pos:column="30">(<argument><expr><name pos:line="190" pos:column="31">otherStatement</name> <op:operator pos:line="190" pos:column="46">as</op:operator> <name pos:line="190" pos:column="49">MethodDefinition</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="193" pos:column="9">public</specifier> <name pos:line="193" pos:column="16">MethodDefinition</name></type> <name pos:line="193" pos:column="33">Merge</name><parameter_list pos:line="193" pos:column="38">(<param><decl><type><name pos:line="193" pos:column="39">MethodDefinition</name></type> <name pos:line="193" pos:column="56">otherMethod</name></decl></param>)</parameter_list> <block pos:line="193" pos:column="69">{
            <if pos:line="194" pos:column="13">if<condition pos:line="194" pos:column="15">(<expr><name pos:line="194" pos:column="16">null</name> <op:operator pos:line="194" pos:column="21">==</op:operator> <name pos:line="194" pos:column="24">otherMethod</name></expr>)</condition><then pos:line="194" pos:column="36"> <block pos:line="194" pos:column="37">{
                <throw pos:line="195" pos:column="17">throw <expr><op:operator pos:line="195" pos:column="23">new</op:operator> <call><name pos:line="195" pos:column="27">ArgumentNullException</name><argument_list pos:line="195" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="195" pos:column="49">"otherMethod"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="198" pos:column="13">MethodDefinition</name></type> <name pos:line="198" pos:column="30">combinedMethod</name> <init pos:line="198" pos:column="45">= <expr><call><name><name pos:line="198" pos:column="47">Merge</name><argument_list pos:line="198" pos:column="52">&lt;<argument><name pos:line="198" pos:column="53">MethodDefinition</name></argument>&gt;</argument_list></name><argument_list pos:line="198" pos:column="70">(<argument><expr><name pos:line="198" pos:column="71">this</name></expr></argument>, <argument><expr><name pos:line="198" pos:column="77">otherMethod</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <expr_stmt><expr><name><name pos:line="200" pos:column="13">combinedMethod</name><op:operator pos:line="200" pos:column="27">.</op:operator><name pos:line="200" pos:column="28">IsPartial</name></name> <op:operator pos:line="200" pos:column="38">=</op:operator> <name><name pos:line="200" pos:column="40">this</name><op:operator pos:line="200" pos:column="44">.</op:operator><name pos:line="200" pos:column="45">IsPartial</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="201" pos:column="13">combinedMethod</name><op:operator pos:line="201" pos:column="27">.</op:operator><name pos:line="201" pos:column="28">IsConstructor</name></name> <op:operator pos:line="201" pos:column="42">=</op:operator> <name><name pos:line="201" pos:column="44">this</name><op:operator pos:line="201" pos:column="48">.</op:operator><name pos:line="201" pos:column="49">IsConstructor</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="202" pos:column="13">combinedMethod</name><op:operator pos:line="202" pos:column="27">.</op:operator><name pos:line="202" pos:column="28">IsDestructor</name></name> <op:operator pos:line="202" pos:column="41">=</op:operator> <name><name pos:line="202" pos:column="43">this</name><op:operator pos:line="202" pos:column="47">.</op:operator><name pos:line="202" pos:column="48">IsDestructor</name></name></expr>;</expr_stmt>

            <foreach pos:line="204" pos:column="13">foreach(<init><decl><type><name pos:line="204" pos:column="21">var</name></type> <name pos:line="204" pos:column="25">returnType</name> <range pos:line="204" pos:column="36">in <expr><call><name><name pos:line="204" pos:column="39">this</name><op:operator pos:line="204" pos:column="43">.</op:operator><name pos:line="204" pos:column="44">_returnTypeMap</name><op:operator pos:line="204" pos:column="58">.</op:operator><name pos:line="204" pos:column="59">Values</name><op:operator pos:line="204" pos:column="65">.</op:operator><name pos:line="204" pos:column="66">Concat</name></name><argument_list pos:line="204" pos:column="72">(<argument><expr><name><name pos:line="204" pos:column="73">otherMethod</name><op:operator pos:line="204" pos:column="84">.</op:operator><name pos:line="204" pos:column="85">_returnTypeMap</name><op:operator pos:line="204" pos:column="99">.</op:operator><name pos:line="204" pos:column="100">Values</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>) <block pos:line="204" pos:column="109">{
                <expr_stmt><expr><call><name><name pos:line="205" pos:column="17">combinedMethod</name><op:operator pos:line="205" pos:column="31">.</op:operator><name pos:line="205" pos:column="32">AddReturnType</name></name><argument_list pos:line="205" pos:column="45">(<argument><expr><name pos:line="205" pos:column="46">returnType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
            <foreach pos:line="207" pos:column="13">foreach(<init><decl><type><name pos:line="207" pos:column="21">var</name></type> <name pos:line="207" pos:column="25">parameterList</name> <range pos:line="207" pos:column="39">in <expr><call><name><name pos:line="207" pos:column="42">this</name><op:operator pos:line="207" pos:column="46">.</op:operator><name pos:line="207" pos:column="47">_parameterMap</name><op:operator pos:line="207" pos:column="60">.</op:operator><name pos:line="207" pos:column="61">Values</name><op:operator pos:line="207" pos:column="67">.</op:operator><name pos:line="207" pos:column="68">Concat</name></name><argument_list pos:line="207" pos:column="74">(<argument><expr><name><name pos:line="207" pos:column="75">otherMethod</name><op:operator pos:line="207" pos:column="86">.</op:operator><name pos:line="207" pos:column="87">_parameterMap</name><op:operator pos:line="207" pos:column="100">.</op:operator><name pos:line="207" pos:column="101">Values</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>) <block pos:line="207" pos:column="110">{
                <expr_stmt><expr><call><name><name pos:line="208" pos:column="17">combinedMethod</name><op:operator pos:line="208" pos:column="31">.</op:operator><name pos:line="208" pos:column="32">AddMethodParameters</name></name><argument_list pos:line="208" pos:column="51">(<argument><expr><name pos:line="208" pos:column="52">parameterList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
            
            <return pos:line="211" pos:column="13">return <expr><name pos:line="211" pos:column="20">combinedMethod</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="214" pos:column="9">public</specifier> <specifier pos:line="214" pos:column="16">override</specifier> <name pos:line="214" pos:column="25">void</name></type> <name pos:line="214" pos:column="30">RemoveFile</name><parameter_list pos:line="214" pos:column="40">(<param><decl><type><name pos:line="214" pos:column="41">string</name></type> <name pos:line="214" pos:column="48">fileName</name></decl></param>)</parameter_list> <block pos:line="214" pos:column="58">{
            <decl_stmt><decl><type><name pos:line="215" pos:column="13">var</name></type> <name pos:line="215" pos:column="17">returnTypeLocations</name> <init pos:line="215" pos:column="37">= <expr><op:operator pos:line="215" pos:column="39">(</op:operator><linq><from pos:line="215" pos:column="40">from <expr><name pos:line="215" pos:column="45">key</name></expr> <in pos:line="215" pos:column="49">in <expr><name><name pos:line="215" pos:column="52">_returnTypeMap</name><op:operator pos:line="215" pos:column="66">.</op:operator><name pos:line="215" pos:column="67">Keys</name></name></expr></in></from>
                                       <where pos:line="216" pos:column="40">where <expr><call><name><name pos:line="216" pos:column="46">key</name><op:operator pos:line="216" pos:column="49">.</op:operator><name pos:line="216" pos:column="50">StartsWith</name></name><argument_list pos:line="216" pos:column="60">(<argument><expr><name pos:line="216" pos:column="61">fileName</name></expr></argument>, <argument><expr><name><name pos:line="216" pos:column="71">StringComparison</name><op:operator pos:line="216" pos:column="87">.</op:operator><name pos:line="216" pos:column="88">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call></expr></where>
                                       <select pos:line="217" pos:column="40">select <expr><name pos:line="217" pos:column="47">key</name></expr></select></linq><op:operator pos:line="217" pos:column="50">)</op:operator><op:operator pos:line="217" pos:column="51">.</op:operator><call><name pos:line="217" pos:column="52">ToList</name><argument_list pos:line="217" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="218" pos:column="13">foreach(<init><decl><type><name pos:line="218" pos:column="21">var</name></type> <name pos:line="218" pos:column="25">key</name> <range pos:line="218" pos:column="29">in <expr><name pos:line="218" pos:column="32">returnTypeLocations</name></expr></range></decl></init>) <block pos:line="218" pos:column="53">{
                <expr_stmt><expr><call><name><name pos:line="219" pos:column="17">_returnTypeMap</name><op:operator pos:line="219" pos:column="31">.</op:operator><name pos:line="219" pos:column="32">Remove</name></name><argument_list pos:line="219" pos:column="38">(<argument><expr><name pos:line="219" pos:column="39">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>

            <decl_stmt><decl><type><name pos:line="222" pos:column="13">var</name></type> <name pos:line="222" pos:column="17">parameterListLocations</name> <init pos:line="222" pos:column="40">= <expr><op:operator pos:line="222" pos:column="42">(</op:operator><linq><from pos:line="222" pos:column="43">from <expr><name pos:line="222" pos:column="48">key</name></expr> <in pos:line="222" pos:column="52">in <expr><name><name pos:line="222" pos:column="55">_parameterMap</name><op:operator pos:line="222" pos:column="68">.</op:operator><name pos:line="222" pos:column="69">Keys</name></name></expr></in></from>
                                          <where pos:line="223" pos:column="43">where <expr><call><name><name pos:line="223" pos:column="49">key</name><op:operator pos:line="223" pos:column="52">.</op:operator><name pos:line="223" pos:column="53">StartsWith</name></name><argument_list pos:line="223" pos:column="63">(<argument><expr><name pos:line="223" pos:column="64">fileName</name></expr></argument>, <argument><expr><name><name pos:line="223" pos:column="74">StringComparison</name><op:operator pos:line="223" pos:column="90">.</op:operator><name pos:line="223" pos:column="91">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call></expr></where>
                                          <select pos:line="224" pos:column="43">select <expr><name pos:line="224" pos:column="50">key</name></expr></select></linq><op:operator pos:line="224" pos:column="53">)</op:operator><op:operator pos:line="224" pos:column="54">.</op:operator><call><name pos:line="224" pos:column="55">ToList</name><argument_list pos:line="224" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <foreach pos:line="226" pos:column="13">foreach(<init><decl><type><name pos:line="226" pos:column="21">var</name></type> <name pos:line="226" pos:column="25">key</name> <range pos:line="226" pos:column="29">in <expr><name pos:line="226" pos:column="32">parameterListLocations</name></expr></range></decl></init>) <block pos:line="226" pos:column="56">{
                <expr_stmt><expr><call><name><name pos:line="227" pos:column="17">_parameterMap</name><op:operator pos:line="227" pos:column="30">.</op:operator><name pos:line="227" pos:column="31">Remove</name></name><argument_list pos:line="227" pos:column="37">(<argument><expr><name pos:line="227" pos:column="38">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
            <expr_stmt><expr><call><name><name pos:line="229" pos:column="13">parameterList</name><op:operator pos:line="229" pos:column="26">.</op:operator><name pos:line="229" pos:column="27">Clear</name></name><argument_list pos:line="229" pos:column="32">()</argument_list></call></expr>;</expr_stmt>
            <if pos:line="230" pos:column="13">if<condition pos:line="230" pos:column="15">(<expr><name><name pos:line="230" pos:column="16">_parameterMap</name><op:operator pos:line="230" pos:column="29">.</op:operator><name pos:line="230" pos:column="30">Count</name></name> <op:operator pos:line="230" pos:column="36">&gt;</op:operator> <lit:literal type="number" pos:line="230" pos:column="38">0</lit:literal></expr>)</condition><then pos:line="230" pos:column="40"> <block pos:line="230" pos:column="41">{
                <decl_stmt><decl><type><name pos:line="231" pos:column="17">var</name></type> <name pos:line="231" pos:column="21">bestParameterList</name> <init pos:line="231" pos:column="39">= <expr><op:operator pos:line="231" pos:column="41">(</op:operator><linq><from pos:line="231" pos:column="42">from <expr><name pos:line="231" pos:column="47">plist</name></expr> <in pos:line="231" pos:column="53">in <expr><name><name pos:line="231" pos:column="56">_parameterMap</name><op:operator pos:line="231" pos:column="69">.</op:operator><name pos:line="231" pos:column="70">Values</name></name></expr></in></from>
                                         <orderby pos:line="232" pos:column="42">orderby <expr><call><name pos:line="232" pos:column="50">ComputeParameterInfoScore</name><argument_list pos:line="232" pos:column="75">(<argument><expr><name pos:line="232" pos:column="76">plist</name></expr></argument>)</argument_list></call></expr> <name pos:line="232" pos:column="83">descending</name></orderby>
                                         <select pos:line="233" pos:column="42">select <expr><name pos:line="233" pos:column="49">plist</name></expr></select></linq><op:operator pos:line="233" pos:column="54">)</op:operator><op:operator pos:line="233" pos:column="55">.</op:operator><call><name pos:line="233" pos:column="56">First</name><argument_list pos:line="233" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="234" pos:column="17">parameterList</name><op:operator pos:line="234" pos:column="30">.</op:operator><name pos:line="234" pos:column="31">AddRange</name></name><argument_list pos:line="234" pos:column="39">(<argument><expr><name pos:line="234" pos:column="40">bestParameterList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            
            <expr_stmt><expr><call><name><name pos:line="237" pos:column="13">base</name><op:operator pos:line="237" pos:column="17">.</op:operator><name pos:line="237" pos:column="18">RemoveFile</name></name><argument_list pos:line="237" pos:column="28">(<argument><expr><name pos:line="237" pos:column="29">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <function><type><specifier pos:line="239" pos:column="9">protected</specifier> <specifier pos:line="239" pos:column="19">override</specifier> <name pos:line="239" pos:column="28">string</name></type> <name pos:line="239" pos:column="35">ComputeMergeId</name><parameter_list pos:line="239" pos:column="49">()</parameter_list> <block pos:line="239" pos:column="52">{
            <if pos:line="240" pos:column="13">if<condition pos:line="240" pos:column="15">(<expr><op:operator pos:line="240" pos:column="16">!</op:operator><name pos:line="240" pos:column="17">PrefixIsResolved</name> <op:operator pos:line="240" pos:column="34">||</op:operator> <name><name pos:line="240" pos:column="37">Language</name><op:operator pos:line="240" pos:column="45">.</op:operator><name pos:line="240" pos:column="46">Java</name></name> <op:operator pos:line="240" pos:column="51">==</op:operator> <name pos:line="240" pos:column="54">ProgrammingLanguage</name> <op:operator pos:line="240" pos:column="74">||</op:operator> <name><name pos:line="240" pos:column="77">Language</name><op:operator pos:line="240" pos:column="85">.</op:operator><name pos:line="240" pos:column="86">CSharp</name></name> <op:operator pos:line="240" pos:column="93">==</op:operator> <name pos:line="240" pos:column="96">ProgrammingLanguage</name> <op:operator pos:line="240" pos:column="116">&amp;&amp;</op:operator> <op:operator pos:line="240" pos:column="119">!</op:operator><name pos:line="240" pos:column="120">IsPartial</name></expr>)</condition><then pos:line="240" pos:column="130"> <block pos:line="240" pos:column="131">{
                <return pos:line="241" pos:column="17">return <expr><call><name><name pos:line="241" pos:column="24">base</name><op:operator pos:line="241" pos:column="28">.</op:operator><name pos:line="241" pos:column="29">ComputeMergeId</name></name><argument_list pos:line="241" pos:column="43">()</argument_list></call></expr>;</return>
            }</block></then></if>
            <decl_stmt><decl><type><name pos:line="243" pos:column="13">char</name></type> <name pos:line="243" pos:column="18">methodType</name> <init pos:line="243" pos:column="29">= <expr><lit:literal type="char" pos:line="243" pos:column="31">'M'</lit:literal></expr></init></decl>;</decl_stmt>
            <if pos:line="244" pos:column="13">if<condition pos:line="244" pos:column="15">(<expr><name pos:line="244" pos:column="16">IsConstructor</name></expr>)</condition><then pos:line="244" pos:column="30"> <block pos:line="244" pos:column="31">{
                <expr_stmt><expr><name pos:line="245" pos:column="17">methodType</name> <op:operator pos:line="245" pos:column="28">=</op:operator> <lit:literal type="char" pos:line="245" pos:column="30">'C'</lit:literal></expr>;</expr_stmt>
            }</block></then> <else pos:line="246" pos:column="15">else <if pos:line="246" pos:column="20">if<condition pos:line="246" pos:column="22">(<expr><name pos:line="246" pos:column="23">IsDestructor</name></expr>)</condition><then pos:line="246" pos:column="36"> <block pos:line="246" pos:column="37">{
                <expr_stmt><expr><name pos:line="247" pos:column="17">methodType</name> <op:operator pos:line="247" pos:column="28">=</op:operator> <lit:literal type="char" pos:line="247" pos:column="30">'D'</lit:literal></expr>;</expr_stmt>
            }</block></then></if></else></if>

            <decl_stmt><decl><type><name pos:line="250" pos:column="13">var</name></type> <name pos:line="250" pos:column="17">parameterTypes</name> <init pos:line="250" pos:column="32">= <expr><linq><from pos:line="250" pos:column="34">from <expr><name pos:line="250" pos:column="39">parameter</name></expr> <in pos:line="250" pos:column="49">in <expr><name pos:line="250" pos:column="52">Parameters</name></expr></in></from>
                                 <select pos:line="251" pos:column="34">select <expr><name><name pos:line="251" pos:column="41">parameter</name><op:operator pos:line="251" pos:column="50">.</op:operator><name pos:line="251" pos:column="51">VariableType</name></name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="252" pos:column="13">string</name></type> <name pos:line="252" pos:column="20">id</name> <init pos:line="252" pos:column="23">= <expr><call><name><name pos:line="252" pos:column="25">String</name><op:operator pos:line="252" pos:column="31">.</op:operator><name pos:line="252" pos:column="32">Format</name></name><argument_list pos:line="252" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="252" pos:column="39">"{0}:M{1}:{2}:{3}"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="252" pos:column="59">KsuAdapter</name><op:operator pos:line="252" pos:column="69">.</op:operator><name pos:line="252" pos:column="70">GetLanguage</name></name><argument_list pos:line="252" pos:column="81">(<argument><expr><name pos:line="252" pos:column="82">ProgrammingLanguage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="252" pos:column="104">methodType</name></expr></argument>, <argument><expr><name><name pos:line="252" pos:column="116">this</name><op:operator pos:line="252" pos:column="120">.</op:operator><name pos:line="252" pos:column="121">Name</name></name></expr></argument>, <argument><expr><call><name><name pos:line="252" pos:column="127">String</name><op:operator pos:line="252" pos:column="133">.</op:operator><name pos:line="252" pos:column="134">Join</name></name><argument_list pos:line="252" pos:column="138">(<argument><expr><lit:literal type="string" pos:line="252" pos:column="139">","</lit:literal></expr></argument>, <argument><expr><name pos:line="252" pos:column="144">parameterTypes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <return pos:line="254" pos:column="13">return <expr><name pos:line="254" pos:column="20">id</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="257" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="258" pos:column="9">/// Read the XML attributes from the current &lt;paramref name="reader"/&gt; position</comment>
        <comment type="line" pos:line="259" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="260" pos:column="9">/// &lt;param name="reader"&gt;The XML reader&lt;/param&gt;</comment>
        <function><type><specifier pos:line="261" pos:column="9">protected</specifier> <specifier pos:line="261" pos:column="19">override</specifier> <name pos:line="261" pos:column="28">void</name></type> <name pos:line="261" pos:column="33">ReadXmlAttributes</name><parameter_list pos:line="261" pos:column="50">(<param><decl><type><name pos:line="261" pos:column="51">XmlReader</name></type> <name pos:line="261" pos:column="61">reader</name></decl></param>)</parameter_list> <block pos:line="261" pos:column="69">{
            <decl_stmt><decl><type><name pos:line="262" pos:column="13">string</name></type> <name pos:line="262" pos:column="20">attribute</name> <init pos:line="262" pos:column="30">= <expr><call><name><name pos:line="262" pos:column="32">reader</name><op:operator pos:line="262" pos:column="38">.</op:operator><name pos:line="262" pos:column="39">GetAttribute</name></name><argument_list pos:line="262" pos:column="51">(<argument><expr><name pos:line="262" pos:column="52">XmlIsConstructorName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="263" pos:column="13">if<condition pos:line="263" pos:column="15">(<expr><name pos:line="263" pos:column="16">null</name> <op:operator pos:line="263" pos:column="21">!=</op:operator> <name pos:line="263" pos:column="24">attribute</name></expr>)</condition><then pos:line="263" pos:column="34"> <block pos:line="263" pos:column="35">{
                <expr_stmt><expr><name pos:line="264" pos:column="17">IsConstructor</name> <op:operator pos:line="264" pos:column="31">=</op:operator> <call><name><name pos:line="264" pos:column="33">XmlConvert</name><op:operator pos:line="264" pos:column="43">.</op:operator><name pos:line="264" pos:column="44">ToBoolean</name></name><argument_list pos:line="264" pos:column="53">(<argument><expr><name pos:line="264" pos:column="54">attribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name pos:line="266" pos:column="13">attribute</name> <op:operator pos:line="266" pos:column="23">=</op:operator> <call><name><name pos:line="266" pos:column="25">reader</name><op:operator pos:line="266" pos:column="31">.</op:operator><name pos:line="266" pos:column="32">GetAttribute</name></name><argument_list pos:line="266" pos:column="44">(<argument><expr><name pos:line="266" pos:column="45">XmlIsDestructorName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if pos:line="267" pos:column="13">if<condition pos:line="267" pos:column="15">(<expr><name pos:line="267" pos:column="16">null</name> <op:operator pos:line="267" pos:column="21">!=</op:operator> <name pos:line="267" pos:column="24">attribute</name></expr>)</condition><then pos:line="267" pos:column="34"> <block pos:line="267" pos:column="35">{
                <expr_stmt><expr><name pos:line="268" pos:column="17">IsDestructor</name> <op:operator pos:line="268" pos:column="30">=</op:operator> <call><name><name pos:line="268" pos:column="32">XmlConvert</name><op:operator pos:line="268" pos:column="42">.</op:operator><name pos:line="268" pos:column="43">ToBoolean</name></name><argument_list pos:line="268" pos:column="52">(<argument><expr><name pos:line="268" pos:column="53">attribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name pos:line="270" pos:column="13">attribute</name> <op:operator pos:line="270" pos:column="23">=</op:operator> <call><name><name pos:line="270" pos:column="25">reader</name><op:operator pos:line="270" pos:column="31">.</op:operator><name pos:line="270" pos:column="32">GetAttribute</name></name><argument_list pos:line="270" pos:column="44">(<argument><expr><name pos:line="270" pos:column="45">XmlIsPartialName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if pos:line="271" pos:column="13">if<condition pos:line="271" pos:column="15">(<expr><name pos:line="271" pos:column="16">null</name> <op:operator pos:line="271" pos:column="21">!=</op:operator> <name pos:line="271" pos:column="24">attribute</name></expr>)</condition><then pos:line="271" pos:column="34"> <block pos:line="271" pos:column="35">{
                <expr_stmt><expr><name pos:line="272" pos:column="17">IsPartial</name> <op:operator pos:line="272" pos:column="27">=</op:operator> <call><name><name pos:line="272" pos:column="29">XmlConvert</name><op:operator pos:line="272" pos:column="39">.</op:operator><name pos:line="272" pos:column="40">ToBoolean</name></name><argument_list pos:line="272" pos:column="49">(<argument><expr><name pos:line="272" pos:column="50">attribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name pos:line="274" pos:column="13">base</name><op:operator pos:line="274" pos:column="17">.</op:operator><name pos:line="274" pos:column="18">ReadXmlAttributes</name></name><argument_list pos:line="274" pos:column="35">(<argument><expr><name pos:line="274" pos:column="36">reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="277" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="278" pos:column="9">/// Processes the child of the current reader position into a child of this object.</comment>
        <comment type="line" pos:line="279" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="280" pos:column="9">/// &lt;param name="reader"&gt;The XML reader&lt;/param&gt;</comment>
        <function><type><specifier pos:line="281" pos:column="9">protected</specifier> <specifier pos:line="281" pos:column="19">override</specifier> <name pos:line="281" pos:column="28">void</name></type> <name pos:line="281" pos:column="33">ReadXmlChild</name><parameter_list pos:line="281" pos:column="45">(<param><decl><type><name pos:line="281" pos:column="46">XmlReader</name></type> <name pos:line="281" pos:column="56">reader</name></decl></param>)</parameter_list> <block pos:line="281" pos:column="64">{
            <if pos:line="282" pos:column="13">if<condition pos:line="282" pos:column="15">(<expr><name pos:line="282" pos:column="16">XmlParametersName</name> <op:operator pos:line="282" pos:column="34">==</op:operator> <name><name pos:line="282" pos:column="37">reader</name><op:operator pos:line="282" pos:column="43">.</op:operator><name pos:line="282" pos:column="44">Name</name></name></expr>)</condition><then pos:line="282" pos:column="49"> <block pos:line="282" pos:column="50">{
                <expr_stmt><expr><call><name pos:line="283" pos:column="17">AddMethodParameters</name><argument_list pos:line="283" pos:column="36">(<argument><expr><call><name><name pos:line="283" pos:column="37">XmlSerialization</name><op:operator pos:line="283" pos:column="53">.</op:operator><name pos:line="283" pos:column="54">ReadChildExpressions</name></name><argument_list pos:line="283" pos:column="74">(<argument><expr><name pos:line="283" pos:column="75">reader</name></expr></argument>)</argument_list></call><op:operator pos:line="283" pos:column="82">.</op:operator><call><name><name pos:line="283" pos:column="83">Cast</name><argument_list pos:line="283" pos:column="87">&lt;<argument><name pos:line="283" pos:column="88">VariableDeclaration</name></argument>&gt;</argument_list></name><argument_list pos:line="283" pos:column="108">()</argument_list></call><op:operator pos:line="283" pos:column="110">.</op:operator><call><name pos:line="283" pos:column="111">ToList</name><argument_list pos:line="283" pos:column="117">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="284" pos:column="15">else <if pos:line="284" pos:column="20">if<condition pos:line="284" pos:column="22">(<expr><name pos:line="284" pos:column="23">XmlReturnTypeName</name> <op:operator pos:line="284" pos:column="41">==</op:operator> <name><name pos:line="284" pos:column="44">reader</name><op:operator pos:line="284" pos:column="50">.</op:operator><name pos:line="284" pos:column="51">Name</name></name></expr>)</condition><then pos:line="284" pos:column="56"> <block pos:line="284" pos:column="57">{
                <expr_stmt><expr><call><name pos:line="285" pos:column="17">AddReturnType</name><argument_list pos:line="285" pos:column="30">(<argument><expr><call><name><name pos:line="285" pos:column="31">XmlSerialization</name><op:operator pos:line="285" pos:column="47">.</op:operator><name pos:line="285" pos:column="48">ReadChildExpression</name></name><argument_list pos:line="285" pos:column="67">(<argument><expr><name pos:line="285" pos:column="68">reader</name></expr></argument>)</argument_list></call> <op:operator pos:line="285" pos:column="76">as</op:operator> <name pos:line="285" pos:column="79">TypeUse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="286" pos:column="15">else <if pos:line="286" pos:column="20">if<condition pos:line="286" pos:column="22">(<expr><name pos:line="286" pos:column="23">XmlConstructorInitializersName</name> <op:operator pos:line="286" pos:column="54">==</op:operator> <name><name pos:line="286" pos:column="57">reader</name><op:operator pos:line="286" pos:column="63">.</op:operator><name pos:line="286" pos:column="64">Name</name></name></expr>)</condition><then pos:line="286" pos:column="69"> <block pos:line="286" pos:column="70">{
                <expr_stmt><expr><call><name pos:line="287" pos:column="17">AddInitializers</name><argument_list pos:line="287" pos:column="32">(<argument><expr><call><name><name pos:line="287" pos:column="33">XmlSerialization</name><op:operator pos:line="287" pos:column="49">.</op:operator><name pos:line="287" pos:column="50">ReadChildExpressions</name></name><argument_list pos:line="287" pos:column="70">(<argument><expr><name pos:line="287" pos:column="71">reader</name></expr></argument>)</argument_list></call><op:operator pos:line="287" pos:column="78">.</op:operator><call><name><name pos:line="287" pos:column="79">Cast</name><argument_list pos:line="287" pos:column="83">&lt;<argument><name pos:line="287" pos:column="84">MethodCall</name></argument>&gt;</argument_list></name><argument_list pos:line="287" pos:column="95">()</argument_list></call><op:operator pos:line="287" pos:column="97">.</op:operator><call><name pos:line="287" pos:column="98">ToList</name><argument_list pos:line="287" pos:column="104">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="288" pos:column="15">else <block pos:line="288" pos:column="20">{
                <expr_stmt><expr><call><name><name pos:line="289" pos:column="17">base</name><op:operator pos:line="289" pos:column="21">.</op:operator><name pos:line="289" pos:column="22">ReadXmlChild</name></name><argument_list pos:line="289" pos:column="34">(<argument><expr><name pos:line="289" pos:column="35">reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if></else></if></else></if>
        }</block></function>

        <comment type="line" pos:line="293" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="294" pos:column="9">/// Writes XML attributes from this object to the XML writer</comment>
        <comment type="line" pos:line="295" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="296" pos:column="9">/// &lt;param name="writer"&gt;The XML writer&lt;/param&gt;</comment>
        <function><type><specifier pos:line="297" pos:column="9">protected</specifier> <specifier pos:line="297" pos:column="19">override</specifier> <name pos:line="297" pos:column="28">void</name></type> <name pos:line="297" pos:column="33">WriteXmlAttributes</name><parameter_list pos:line="297" pos:column="51">(<param><decl><type><name pos:line="297" pos:column="52">XmlWriter</name></type> <name pos:line="297" pos:column="62">writer</name></decl></param>)</parameter_list> <block pos:line="297" pos:column="70">{
            <if pos:line="298" pos:column="13">if<condition pos:line="298" pos:column="15">(<expr><name pos:line="298" pos:column="16">IsConstructor</name></expr>)</condition><then pos:line="298" pos:column="30"> <block pos:line="298" pos:column="31">{
                <expr_stmt><expr><call><name><name pos:line="299" pos:column="17">writer</name><op:operator pos:line="299" pos:column="23">.</op:operator><name pos:line="299" pos:column="24">WriteAttributeString</name></name><argument_list pos:line="299" pos:column="44">(<argument><expr><name pos:line="299" pos:column="45">XmlIsConstructorName</name></expr></argument>, <argument><expr><call><name><name pos:line="299" pos:column="67">XmlConvert</name><op:operator pos:line="299" pos:column="77">.</op:operator><name pos:line="299" pos:column="78">ToString</name></name><argument_list pos:line="299" pos:column="86">(<argument><expr><name pos:line="299" pos:column="87">IsConstructor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if pos:line="301" pos:column="13">if<condition pos:line="301" pos:column="15">(<expr><name pos:line="301" pos:column="16">IsDestructor</name></expr>)</condition><then pos:line="301" pos:column="29"> <block pos:line="301" pos:column="30">{
                <expr_stmt><expr><call><name><name pos:line="302" pos:column="17">writer</name><op:operator pos:line="302" pos:column="23">.</op:operator><name pos:line="302" pos:column="24">WriteAttributeString</name></name><argument_list pos:line="302" pos:column="44">(<argument><expr><name pos:line="302" pos:column="45">XmlIsDestructorName</name></expr></argument>, <argument><expr><call><name><name pos:line="302" pos:column="66">XmlConvert</name><op:operator pos:line="302" pos:column="76">.</op:operator><name pos:line="302" pos:column="77">ToString</name></name><argument_list pos:line="302" pos:column="85">(<argument><expr><name pos:line="302" pos:column="86">IsDestructor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if pos:line="304" pos:column="13">if<condition pos:line="304" pos:column="15">(<expr><name pos:line="304" pos:column="16">IsPartial</name></expr>)</condition><then pos:line="304" pos:column="26"> <block pos:line="304" pos:column="27">{
                <expr_stmt><expr><call><name><name pos:line="305" pos:column="17">writer</name><op:operator pos:line="305" pos:column="23">.</op:operator><name pos:line="305" pos:column="24">WriteAttributeString</name></name><argument_list pos:line="305" pos:column="44">(<argument><expr><name pos:line="305" pos:column="45">XmlIsPartialName</name></expr></argument>, <argument><expr><call><name><name pos:line="305" pos:column="63">XmlConvert</name><op:operator pos:line="305" pos:column="73">.</op:operator><name pos:line="305" pos:column="74">ToString</name></name><argument_list pos:line="305" pos:column="82">(<argument><expr><name pos:line="305" pos:column="83">IsPartial</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name pos:line="307" pos:column="13">base</name><op:operator pos:line="307" pos:column="17">.</op:operator><name pos:line="307" pos:column="18">WriteXmlAttributes</name></name><argument_list pos:line="307" pos:column="36">(<argument><expr><name pos:line="307" pos:column="37">writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="310" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="311" pos:column="9">/// Writes the contents of this object to &lt;paramref name="writer"/&gt;.</comment>
        <comment type="line" pos:line="312" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="313" pos:column="9">/// &lt;param name="writer"&gt;The XML writer to write to&lt;/param&gt;</comment>
        <function><type><specifier pos:line="314" pos:column="9">protected</specifier> <specifier pos:line="314" pos:column="19">override</specifier> <name pos:line="314" pos:column="28">void</name></type> <name pos:line="314" pos:column="33">WriteXmlContents</name><parameter_list pos:line="314" pos:column="49">(<param><decl><type><name pos:line="314" pos:column="50">XmlWriter</name></type> <name pos:line="314" pos:column="60">writer</name></decl></param>)</parameter_list> <block pos:line="314" pos:column="68">{
            <if pos:line="315" pos:column="13">if<condition pos:line="315" pos:column="15">(<expr><name pos:line="315" pos:column="16">null</name> <op:operator pos:line="315" pos:column="21">!=</op:operator> <name pos:line="315" pos:column="24">Parameters</name></expr>)</condition><then pos:line="315" pos:column="35"> <block pos:line="315" pos:column="36">{
                <expr_stmt><expr><call><name><name pos:line="316" pos:column="17">XmlSerialization</name><op:operator pos:line="316" pos:column="33">.</op:operator><name><name pos:line="316" pos:column="34">WriteCollection</name><argument_list pos:line="316" pos:column="49">&lt;<argument><name pos:line="316" pos:column="50">VariableDeclaration</name></argument>&gt;</argument_list></name></name><argument_list pos:line="316" pos:column="70">(<argument><expr><name pos:line="316" pos:column="71">writer</name></expr></argument>, <argument><expr><name pos:line="316" pos:column="79">XmlParametersName</name></expr></argument>, <argument><expr><name pos:line="316" pos:column="98">Parameters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if pos:line="318" pos:column="13">if<condition pos:line="318" pos:column="15">(<expr><name pos:line="318" pos:column="16">null</name> <op:operator pos:line="318" pos:column="21">!=</op:operator> <name pos:line="318" pos:column="24">ConstructorInitializers</name></expr>)</condition><then pos:line="318" pos:column="48"> <block pos:line="318" pos:column="49">{
                <expr_stmt><expr><call><name><name pos:line="319" pos:column="17">XmlSerialization</name><op:operator pos:line="319" pos:column="33">.</op:operator><name><name pos:line="319" pos:column="34">WriteCollection</name><argument_list pos:line="319" pos:column="49">&lt;<argument><name pos:line="319" pos:column="50">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="319" pos:column="61">(<argument><expr><name pos:line="319" pos:column="62">writer</name></expr></argument>, <argument><expr><name pos:line="319" pos:column="70">XmlConstructorInitializersName</name></expr></argument>, <argument><expr><name pos:line="319" pos:column="102">ConstructorInitializers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if pos:line="321" pos:column="13">if<condition pos:line="321" pos:column="15">(<expr><name pos:line="321" pos:column="16">null</name> <op:operator pos:line="321" pos:column="21">!=</op:operator> <name pos:line="321" pos:column="24">ReturnType</name></expr>)</condition><then pos:line="321" pos:column="35"> <block pos:line="321" pos:column="36">{
                <expr_stmt><expr><call><name><name pos:line="322" pos:column="17">XmlSerialization</name><op:operator pos:line="322" pos:column="33">.</op:operator><name pos:line="322" pos:column="34">WriteElement</name></name><argument_list pos:line="322" pos:column="46">(<argument><expr><name pos:line="322" pos:column="47">writer</name></expr></argument>, <argument><expr><name pos:line="322" pos:column="55">ReturnType</name></expr></argument>, <argument><expr><name pos:line="322" pos:column="67">XmlReturnTypeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name pos:line="324" pos:column="13">base</name><op:operator pos:line="324" pos:column="17">.</op:operator><name pos:line="324" pos:column="18">WriteXmlContents</name></name><argument_list pos:line="324" pos:column="34">(<argument><expr><name pos:line="324" pos:column="35">writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="327" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="328" pos:column="9">/// Returns the children of this MethodDefinition that have the same name as the given &lt;paramref name="use"/&gt;, and the given type.</comment>
        <comment type="line" pos:line="329" pos:column="9">/// This method searches only the immediate children, and not further descendants.</comment>
        <comment type="line" pos:line="330" pos:column="9">/// If the &lt;paramref name="use"/&gt; occurs within this MethodDefinition, only the children that occur prior to that use will be returned.</comment>
        <comment type="line" pos:line="331" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="332" pos:column="9">/// &lt;typeparam name="T"&gt;The type of children to return.&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="333" pos:column="9">/// &lt;param name="use"&gt;The use containing the name to search for.&lt;/param&gt;</comment>
        <comment type="line" pos:line="334" pos:column="9">/// &lt;param name="searchDeclarations"&gt;Whether to search the child DeclarationStatements for named entities.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="335" pos:column="9">public</specifier> <specifier pos:line="335" pos:column="16">override</specifier> <name><name pos:line="335" pos:column="25">IEnumerable</name><argument_list pos:line="335" pos:column="36">&lt;<argument><name pos:line="335" pos:column="37">T</name></argument>&gt;</argument_list></name></type> <name><name pos:line="335" pos:column="40">GetNamedChildren</name><argument_list pos:line="335" pos:column="56">&lt;<argument><name pos:line="335" pos:column="57">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="335" pos:column="59">(<param><decl><type><name pos:line="335" pos:column="60">NameUse</name></type> <name pos:line="335" pos:column="68">use</name></decl></param>, <param><decl><type><name pos:line="335" pos:column="73">bool</name></type> <name pos:line="335" pos:column="78">searchDeclarations</name></decl></param>)</parameter_list> <block pos:line="335" pos:column="98">{
            <comment type="line" pos:line="336" pos:column="13">//location comparison is only valid if the use occurs within this method (or its children)</comment>
            <decl_stmt><decl><type><name pos:line="337" pos:column="13">var</name></type> <name pos:line="337" pos:column="17">filterLocation</name> <init pos:line="337" pos:column="32">= <expr><call><name><name pos:line="337" pos:column="34">PrimaryLocation</name><op:operator pos:line="337" pos:column="49">.</op:operator><name pos:line="337" pos:column="50">Contains</name></name><argument_list pos:line="337" pos:column="58">(<argument><expr><name><name pos:line="337" pos:column="59">use</name><op:operator pos:line="337" pos:column="62">.</op:operator><name pos:line="337" pos:column="63">Location</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="338" pos:column="13">if<condition pos:line="338" pos:column="15">(<expr><name pos:line="338" pos:column="16">filterLocation</name></expr>)</condition><then pos:line="338" pos:column="31"> <block pos:line="338" pos:column="32">{
                <decl_stmt><decl><type><name pos:line="339" pos:column="17">var</name></type> <name pos:line="339" pos:column="21">scopes</name> <init pos:line="339" pos:column="28">= <expr><call><name pos:line="339" pos:column="30">GetChildren</name><argument_list pos:line="339" pos:column="41">()</argument_list></call><op:operator pos:line="339" pos:column="43">.</op:operator><call><name><name pos:line="339" pos:column="44">OfType</name><argument_list pos:line="339" pos:column="50">&lt;<argument><name pos:line="339" pos:column="51">T</name></argument>&gt;</argument_list></name><argument_list pos:line="339" pos:column="53">()</argument_list></call><op:operator pos:line="339" pos:column="55">.</op:operator><call><name pos:line="339" pos:column="56">Where</name><argument_list pos:line="339" pos:column="61">(<argument><expr><lambda><name pos:line="339" pos:column="62">ns</name> <op:operator pos:line="339" pos:column="65">=&gt;</op:operator> <name><name pos:line="339" pos:column="68">ns</name><op:operator pos:line="339" pos:column="70">.</op:operator><name pos:line="339" pos:column="71">Name</name></name> <op:operator pos:line="339" pos:column="76">==</op:operator> <name><name pos:line="339" pos:column="79">use</name><op:operator pos:line="339" pos:column="82">.</op:operator><name pos:line="339" pos:column="83">Name</name> <type:modifier pos:line="339" pos:column="88">&amp;&amp;</type:modifier></name> <call><name><name pos:line="339" pos:column="91">PositionComparer</name><op:operator pos:line="339" pos:column="107">.</op:operator><name pos:line="339" pos:column="108">CompareLocation</name></name><argument_list pos:line="339" pos:column="123">(<argument><expr><name pos:line="339" pos:column="124">PrimaryLocation</name></expr></argument>, <argument><expr><name><name pos:line="339" pos:column="141">use</name><op:operator pos:line="339" pos:column="144">.</op:operator><name pos:line="339" pos:column="145">Location</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="339" pos:column="155">&lt;</op:operator> <lit:literal type="number" pos:line="339" pos:column="157">0</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="340" pos:column="17">if<condition pos:line="340" pos:column="19">(<expr><op:operator pos:line="340" pos:column="20">!</op:operator><name pos:line="340" pos:column="21">searchDeclarations</name></expr>)</condition><then pos:line="340" pos:column="40"> <block pos:line="340" pos:column="41">{ <return pos:line="340" pos:column="43">return <expr><name pos:line="340" pos:column="50">scopes</name></expr>;</return> }</block></then></if>

                <comment type="line" pos:line="342" pos:column="17">//this will return the var decls in document order</comment>
                <decl_stmt><decl><type><name pos:line="343" pos:column="17">var</name></type> <name pos:line="343" pos:column="21">decls</name> <init pos:line="343" pos:column="27">= <expr><linq><from pos:line="343" pos:column="29">from <expr><name pos:line="343" pos:column="34">declStmt</name></expr> <in pos:line="343" pos:column="43">in <expr><call><name pos:line="343" pos:column="46">GetChildren</name><argument_list pos:line="343" pos:column="57">()</argument_list></call><op:operator pos:line="343" pos:column="59">.</op:operator><call><name><name pos:line="343" pos:column="60">OfType</name><argument_list pos:line="343" pos:column="66">&lt;<argument><name pos:line="343" pos:column="67">DeclarationStatement</name></argument>&gt;</argument_list></name><argument_list pos:line="343" pos:column="88">()</argument_list></call></expr></in></from>
                            <where pos:line="344" pos:column="29">where <expr><call><name><name pos:line="344" pos:column="35">PositionComparer</name><op:operator pos:line="344" pos:column="51">.</op:operator><name pos:line="344" pos:column="52">CompareLocation</name></name><argument_list pos:line="344" pos:column="67">(<argument><expr><name><name pos:line="344" pos:column="68">declStmt</name><op:operator pos:line="344" pos:column="76">.</op:operator><name pos:line="344" pos:column="77">PrimaryLocation</name></name></expr></argument>, <argument><expr><name><name pos:line="344" pos:column="94">use</name><op:operator pos:line="344" pos:column="97">.</op:operator><name pos:line="344" pos:column="98">Location</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="344" pos:column="108">&lt;</op:operator> <lit:literal type="number" pos:line="344" pos:column="110">0</lit:literal></expr></where>
                            <from pos:line="345" pos:column="29">from <expr><name pos:line="345" pos:column="34">decl</name></expr> <in pos:line="345" pos:column="39">in <expr><call><name><name pos:line="345" pos:column="42">declStmt</name><op:operator pos:line="345" pos:column="50">.</op:operator><name pos:line="345" pos:column="51">GetDeclarations</name></name><argument_list pos:line="345" pos:column="66">()</argument_list></call><op:operator pos:line="345" pos:column="68">.</op:operator><call><name><name pos:line="345" pos:column="69">OfType</name><argument_list pos:line="345" pos:column="75">&lt;<argument><name pos:line="345" pos:column="76">T</name></argument>&gt;</argument_list></name><argument_list pos:line="345" pos:column="78">()</argument_list></call></expr></in></from>
                            <where pos:line="346" pos:column="29">where <expr><name><name pos:line="346" pos:column="35">decl</name><op:operator pos:line="346" pos:column="39">.</op:operator><name pos:line="346" pos:column="40">Name</name></name> <op:operator pos:line="346" pos:column="45">==</op:operator> <name><name pos:line="346" pos:column="48">use</name><op:operator pos:line="346" pos:column="51">.</op:operator><name pos:line="346" pos:column="52">Name</name></name></expr></where>
                            <select pos:line="347" pos:column="29">select <expr><name pos:line="347" pos:column="36">decl</name></expr></select></linq></expr></init></decl>;</decl_stmt>
                <return pos:line="348" pos:column="17">return <expr><call><name><name pos:line="348" pos:column="24">scopes</name><op:operator pos:line="348" pos:column="30">.</op:operator><name pos:line="348" pos:column="31">Concat</name></name><argument_list pos:line="348" pos:column="37">(<argument><expr><name pos:line="348" pos:column="38">decls</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then> <else pos:line="349" pos:column="15">else <block pos:line="349" pos:column="20">{
                <return pos:line="350" pos:column="17">return <expr><call><name><name pos:line="350" pos:column="24">GetNamedChildren</name><argument_list pos:line="350" pos:column="40">&lt;<argument><name pos:line="350" pos:column="41">T</name></argument>&gt;</argument_list></name><argument_list pos:line="350" pos:column="43">(<argument><expr><name><name pos:line="350" pos:column="44">use</name><op:operator pos:line="350" pos:column="47">.</op:operator><name pos:line="350" pos:column="48">Name</name></name></expr></argument>, <argument><expr><name pos:line="350" pos:column="54">searchDeclarations</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></else></if>
        }</block></function>

        <comment type="line" pos:line="354" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="355" pos:column="9">/// Finds the method calls that resolve to this MethodDefinition.</comment>
        <comment type="line" pos:line="356" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="357" pos:column="9">public</specifier> <name><name pos:line="357" pos:column="16">IEnumerable</name><argument_list pos:line="357" pos:column="27">&lt;<argument><name pos:line="357" pos:column="28">MethodCall</name></argument>&gt;</argument_list></name></type> <name pos:line="357" pos:column="40">GetCallsToSelf</name><parameter_list pos:line="357" pos:column="54">()</parameter_list> <block pos:line="357" pos:column="57">{
            <decl_stmt><decl><type><name pos:line="358" pos:column="13">var</name></type> <name pos:line="358" pos:column="17">globalScope</name> <init pos:line="358" pos:column="29">= <expr><call><name><name pos:line="358" pos:column="31">GetAncestors</name><argument_list pos:line="358" pos:column="43">&lt;<argument><name pos:line="358" pos:column="44">NamespaceDefinition</name></argument>&gt;</argument_list></name><argument_list pos:line="358" pos:column="64">()</argument_list></call><op:operator pos:line="358" pos:column="66">.</op:operator><call><name pos:line="358" pos:column="67">FirstOrDefault</name><argument_list pos:line="358" pos:column="81">(<argument><expr><lambda><name pos:line="358" pos:column="82">n</name> <op:operator pos:line="358" pos:column="84">=&gt;</op:operator> <name><name pos:line="358" pos:column="87">n</name><op:operator pos:line="358" pos:column="88">.</op:operator><name pos:line="358" pos:column="89">IsGlobal</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="359" pos:column="13">if<condition pos:line="359" pos:column="15">(<expr><name pos:line="359" pos:column="16">null</name> <op:operator pos:line="359" pos:column="21">==</op:operator> <name pos:line="359" pos:column="24">globalScope</name></expr>)</condition><then pos:line="359" pos:column="36"> <block pos:line="359" pos:column="37">{
                <throw pos:line="360" pos:column="17">throw <expr><op:operator pos:line="360" pos:column="23">new</op:operator> <call><name pos:line="360" pos:column="27">StatementDetachedException</name><argument_list pos:line="360" pos:column="53">(<argument><expr><name pos:line="360" pos:column="54">this</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <return pos:line="363" pos:column="13">return <expr><call><name pos:line="363" pos:column="20">GetCallsToSelf</name><argument_list pos:line="363" pos:column="34">(<argument><expr><name pos:line="363" pos:column="35">globalScope</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="366" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="367" pos:column="9">/// Finds the method calls that resolve to this MethodDefintion.</comment>
        <comment type="line" pos:line="368" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="369" pos:column="9">/// &lt;param name="rootScope"&gt;The Statement to search below for method calls.&lt;/param&gt;</comment>
        <comment type="line" pos:line="370" pos:column="9">/// &lt;returns&gt;An enumerable of MethodCalls located at/below &lt;paramref name="rootScope"/&gt; that resolve to this MethodDefinition.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="371" pos:column="9">public</specifier> <name><name pos:line="371" pos:column="16">IEnumerable</name><argument_list pos:line="371" pos:column="27">&lt;<argument><name pos:line="371" pos:column="28">MethodCall</name></argument>&gt;</argument_list></name></type> <name pos:line="371" pos:column="40">GetCallsToSelf</name><parameter_list pos:line="371" pos:column="54">(<param><decl><type><name pos:line="371" pos:column="55">Statement</name></type> <name pos:line="371" pos:column="65">rootScope</name></decl></param>)</parameter_list> <block pos:line="371" pos:column="76">{
            <if pos:line="372" pos:column="13">if<condition pos:line="372" pos:column="15">(<expr><name pos:line="372" pos:column="16">null</name> <op:operator pos:line="372" pos:column="21">==</op:operator> <name pos:line="372" pos:column="24">rootScope</name></expr>)</condition><then pos:line="372" pos:column="34"> <block pos:line="372" pos:column="35">{ <throw pos:line="372" pos:column="37">throw <expr><op:operator pos:line="372" pos:column="43">new</op:operator> <call><name pos:line="372" pos:column="47">ArgumentNullException</name><argument_list pos:line="372" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="372" pos:column="69">"rootScope"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>
            
            <return pos:line="374" pos:column="13">return <expr><call><name><name pos:line="374" pos:column="20">rootScope</name><op:operator pos:line="374" pos:column="29">.</op:operator><name pos:line="374" pos:column="30">GetCallsTo</name></name><argument_list pos:line="374" pos:column="40">(<argument><expr><name pos:line="374" pos:column="41">this</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="374" pos:column="47">true</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="377" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="378" pos:column="9">/// Returns a string representation of this statement.</comment>
        <comment type="line" pos:line="379" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="380" pos:column="9">public</specifier> <specifier pos:line="380" pos:column="16">override</specifier> <name pos:line="380" pos:column="25">string</name></type> <name pos:line="380" pos:column="32">ToString</name><parameter_list pos:line="380" pos:column="40">()</parameter_list> <block pos:line="380" pos:column="43">{
            <decl_stmt><decl><type><name pos:line="381" pos:column="13">var</name></type> <name pos:line="381" pos:column="17">signature</name> <init pos:line="381" pos:column="27">= <expr><op:operator pos:line="381" pos:column="29">new</op:operator> <call><name pos:line="381" pos:column="33">StringBuilder</name><argument_list pos:line="381" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="382" pos:column="13">if<condition pos:line="382" pos:column="15">(<expr><name pos:line="382" pos:column="16">Accessibility</name> <op:operator pos:line="382" pos:column="30">!=</op:operator> <name><name pos:line="382" pos:column="33">AccessModifier</name><op:operator pos:line="382" pos:column="47">.</op:operator><name pos:line="382" pos:column="48">None</name></name></expr>)</condition><then pos:line="382" pos:column="53"> <block pos:line="382" pos:column="54">{ <expr_stmt><expr><call><name><name pos:line="382" pos:column="56">signature</name><op:operator pos:line="382" pos:column="65">.</op:operator><name pos:line="382" pos:column="66">AppendFormat</name></name><argument_list pos:line="382" pos:column="78">(<argument><expr><lit:literal type="string" pos:line="382" pos:column="79">"{0} "</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="382" pos:column="87">Accessibility</name><op:operator pos:line="382" pos:column="100">.</op:operator><name pos:line="382" pos:column="101">ToKeywordString</name></name><argument_list pos:line="382" pos:column="116">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></then></if>
            <if pos:line="383" pos:column="13">if<condition pos:line="383" pos:column="15">(<expr><name pos:line="383" pos:column="16">IsPartial</name></expr>)</condition><then pos:line="383" pos:column="26"> <block pos:line="383" pos:column="27">{ <expr_stmt><expr><call><name><name pos:line="383" pos:column="29">signature</name><op:operator pos:line="383" pos:column="38">.</op:operator><name pos:line="383" pos:column="39">Append</name></name><argument_list pos:line="383" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="383" pos:column="46">"partial "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></then></if>
            <if pos:line="384" pos:column="13">if<condition pos:line="384" pos:column="15">(<expr><name pos:line="384" pos:column="16">ReturnType</name> <op:operator pos:line="384" pos:column="27">!=</op:operator> <name pos:line="384" pos:column="30">null</name></expr>)</condition><then pos:line="384" pos:column="35"> <block pos:line="384" pos:column="36">{ <expr_stmt><expr><call><name><name pos:line="384" pos:column="38">signature</name><op:operator pos:line="384" pos:column="47">.</op:operator><name pos:line="384" pos:column="48">AppendFormat</name></name><argument_list pos:line="384" pos:column="60">(<argument><expr><lit:literal type="string" pos:line="384" pos:column="61">"{0} "</lit:literal></expr></argument>, <argument><expr><name pos:line="384" pos:column="69">ReturnType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></then></if>
            <if pos:line="385" pos:column="13">if<condition pos:line="385" pos:column="15">(<expr><name pos:line="385" pos:column="16">IsDestructor</name></expr>)</condition><then pos:line="385" pos:column="29"> <block pos:line="385" pos:column="30">{ <expr_stmt><expr><call><name><name pos:line="385" pos:column="32">signature</name><op:operator pos:line="385" pos:column="41">.</op:operator><name pos:line="385" pos:column="42">Append</name></name><argument_list pos:line="385" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="385" pos:column="49">"~"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></then></if>
            <expr_stmt><expr><call><name><name pos:line="386" pos:column="13">signature</name><op:operator pos:line="386" pos:column="22">.</op:operator><name pos:line="386" pos:column="23">Append</name></name><argument_list pos:line="386" pos:column="29">(<argument><expr><name pos:line="386" pos:column="30">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="387" pos:column="13">var</name></type> <name pos:line="387" pos:column="17">paramsString</name> <init pos:line="387" pos:column="30">= <expr><call><name><name pos:line="387" pos:column="32">string</name><op:operator pos:line="387" pos:column="38">.</op:operator><name pos:line="387" pos:column="39">Join</name></name><argument_list pos:line="387" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="387" pos:column="44">", "</lit:literal></expr></argument>, <argument><expr><name pos:line="387" pos:column="50">Parameters</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="388" pos:column="13">signature</name><op:operator pos:line="388" pos:column="22">.</op:operator><name pos:line="388" pos:column="23">AppendFormat</name></name><argument_list pos:line="388" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="388" pos:column="36">"({0})"</lit:literal></expr></argument>, <argument><expr><name pos:line="388" pos:column="45">paramsString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="389" pos:column="13">var</name></type> <name pos:line="389" pos:column="17">initString</name> <init pos:line="389" pos:column="28">= <expr><call><name><name pos:line="389" pos:column="30">string</name><op:operator pos:line="389" pos:column="36">.</op:operator><name pos:line="389" pos:column="37">Join</name></name><argument_list pos:line="389" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="389" pos:column="42">", "</lit:literal></expr></argument>, <argument><expr><name pos:line="389" pos:column="48">ConstructorInitializers</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="390" pos:column="13">if<condition pos:line="390" pos:column="15">(<expr><op:operator pos:line="390" pos:column="16">!</op:operator><call><name><name pos:line="390" pos:column="17">string</name><op:operator pos:line="390" pos:column="23">.</op:operator><name pos:line="390" pos:column="24">IsNullOrEmpty</name></name><argument_list pos:line="390" pos:column="37">(<argument><expr><name pos:line="390" pos:column="38">initString</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="390" pos:column="50"> <block pos:line="390" pos:column="51">{
                <expr_stmt><expr><call><name><name pos:line="391" pos:column="17">signature</name><op:operator pos:line="391" pos:column="26">.</op:operator><name pos:line="391" pos:column="27">AppendFormat</name></name><argument_list pos:line="391" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="391" pos:column="40">" : {0}"</lit:literal></expr></argument>, <argument><expr><name pos:line="391" pos:column="50">initString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <return pos:line="393" pos:column="13">return <expr><call><name><name pos:line="393" pos:column="20">signature</name><op:operator pos:line="393" pos:column="29">.</op:operator><name pos:line="393" pos:column="30">ToString</name></name><argument_list pos:line="393" pos:column="38">()</argument_list></call></expr>;</return>
        }</block></function>

        <cpp:region pos:line="396" pos:column="9">#<cpp:directive pos:line="396" pos:column="10">region</cpp:directive> Private Methods</cpp:region>
        <function><type><specifier pos:line="397" pos:column="9">private</specifier> <specifier pos:line="397" pos:column="17">static</specifier> <name pos:line="397" pos:column="24">string</name></type> <name pos:line="397" pos:column="31">GetParameterFingerprint</name><parameter_list pos:line="397" pos:column="54">(<param><decl><type><name><name pos:line="397" pos:column="55">ICollection</name><argument_list pos:line="397" pos:column="66">&lt;<argument><name pos:line="397" pos:column="67">VariableDeclaration</name></argument>&gt;</argument_list></name></type> <name pos:line="397" pos:column="88">parameters</name></decl></param>)</parameter_list> <block pos:line="397" pos:column="100">{
            <decl_stmt><decl><type><name pos:line="398" pos:column="13">var</name></type> <name pos:line="398" pos:column="17">parameterTypes</name> <init pos:line="398" pos:column="32">= <expr><linq><from pos:line="398" pos:column="34">from <expr><name pos:line="398" pos:column="39">p</name></expr> <in pos:line="398" pos:column="41">in <expr><name pos:line="398" pos:column="44">parameters</name></expr></in></from> <select pos:line="398" pos:column="55">select <expr><name><name pos:line="398" pos:column="62">p</name><op:operator pos:line="398" pos:column="63">.</op:operator><name pos:line="398" pos:column="64">VariableType</name><op:operator pos:line="398" pos:column="76">.</op:operator><name pos:line="398" pos:column="77">Name</name></name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <return pos:line="399" pos:column="13">return <expr><call><name><name pos:line="399" pos:column="20">String</name><op:operator pos:line="399" pos:column="26">.</op:operator><name pos:line="399" pos:column="27">Join</name></name><argument_list pos:line="399" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="399" pos:column="32">","</lit:literal></expr></argument>, <argument><expr><name pos:line="399" pos:column="37">parameterTypes</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="402" pos:column="9">private</specifier> <specifier pos:line="402" pos:column="17">static</specifier> <name pos:line="402" pos:column="24">int</name></type> <name pos:line="402" pos:column="28">ComputeParameterInfoScore</name><parameter_list pos:line="402" pos:column="53">(<param><decl><type><name><name pos:line="402" pos:column="54">ICollection</name><argument_list pos:line="402" pos:column="65">&lt;<argument><name pos:line="402" pos:column="66">VariableDeclaration</name></argument>&gt;</argument_list></name></type> <name pos:line="402" pos:column="87">parameters</name></decl></param>)</parameter_list> <block pos:line="402" pos:column="99">{
            <decl_stmt><decl><type><name pos:line="403" pos:column="13">int</name></type> <name pos:line="403" pos:column="17">score</name> <init pos:line="403" pos:column="23">= <expr><lit:literal type="number" pos:line="403" pos:column="25">0</lit:literal></expr></init></decl>;</decl_stmt>
            <if pos:line="404" pos:column="13">if<condition pos:line="404" pos:column="15">(<expr><call><name><name pos:line="404" pos:column="16">parameters</name><op:operator pos:line="404" pos:column="26">.</op:operator><name pos:line="404" pos:column="27">All</name></name><argument_list pos:line="404" pos:column="30">(<argument><expr><lambda><name pos:line="404" pos:column="31">p</name> <op:operator pos:line="404" pos:column="33">=&gt;</op:operator> <op:operator pos:line="404" pos:column="36">!</op:operator><call><name><name pos:line="404" pos:column="37">String</name><op:operator pos:line="404" pos:column="43">.</op:operator><name pos:line="404" pos:column="44">IsNullOrEmpty</name></name><argument_list pos:line="404" pos:column="57">(<argument><expr><name><name pos:line="404" pos:column="58">p</name><op:operator pos:line="404" pos:column="59">.</op:operator><name pos:line="404" pos:column="60">Name</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="404" pos:column="67"> <block pos:line="404" pos:column="68">{
                <expr_stmt><expr><op:operator pos:line="405" pos:column="17">++</op:operator><name pos:line="405" pos:column="19">score</name></expr>;</expr_stmt>
            }</block></then></if>
            <if pos:line="407" pos:column="13">if<condition pos:line="407" pos:column="15">(<expr><call><name><name pos:line="407" pos:column="16">parameters</name><op:operator pos:line="407" pos:column="26">.</op:operator><name pos:line="407" pos:column="27">Any</name></name><argument_list pos:line="407" pos:column="30">(<argument><expr><lambda><name pos:line="407" pos:column="31">p</name> <op:operator pos:line="407" pos:column="33">=&gt;</op:operator> <name pos:line="407" pos:column="36">null</name> <op:operator pos:line="407" pos:column="41">!=</op:operator> <name><name pos:line="407" pos:column="44">p</name><op:operator pos:line="407" pos:column="45">.</op:operator><name pos:line="407" pos:column="46">Initializer</name></name></lambda></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="407" pos:column="59"> <block pos:line="407" pos:column="60">{
                <expr_stmt><expr><op:operator pos:line="408" pos:column="17">++</op:operator><name pos:line="408" pos:column="19">score</name></expr>;</expr_stmt>
            }</block></then></if>

            <return pos:line="411" pos:column="13">return <expr><name pos:line="411" pos:column="20">score</name></expr>;</return>
        }</block></function>
        <cpp:endregion pos:line="413" pos:column="9">#<cpp:directive pos:line="413" pos:column="10">endregion</cpp:directive> Private Methods</cpp:endregion>
    }</block></class>

    

    <comment type="line" pos:line="418" pos:column="5">//    internal class MethodDebugView {</comment>
    <comment type="line" pos:line="419" pos:column="5">//        private IMethodDefinition method;</comment>

    <comment type="line" pos:line="421" pos:column="5">//        public MethodDebugView(IMethodDefinition method) {</comment>
    <comment type="line" pos:line="422" pos:column="5">//            this.method = method;</comment>
    <comment type="line" pos:line="423" pos:column="5">//        }</comment>

    <comment type="line" pos:line="425" pos:column="5">//        [DebuggerBrowsable(DebuggerBrowsableState.RootHidden)]</comment>
    <comment type="line" pos:line="426" pos:column="5">//        public IScope[] ChildScopes {</comment>
    <comment type="line" pos:line="427" pos:column="5">//            get { return this.method.ChildScopes.ToArray(); }</comment>
    <comment type="line" pos:line="428" pos:column="5">//        }</comment>

    <comment type="line" pos:line="430" pos:column="5">//        [DebuggerBrowsable(DebuggerBrowsableState.Collapsed)]</comment>
    <comment type="line" pos:line="431" pos:column="5">//        public IMethodCall[] MethodCalls { get { return this.method.MethodCalls.ToArray(); } }</comment>

    <comment type="line" pos:line="433" pos:column="5">//        [DebuggerBrowsable(DebuggerBrowsableState.Collapsed)]</comment>
    <comment type="line" pos:line="434" pos:column="5">//        public IParameterDeclaration[] Parameters { get { return method.Parameters.ToArray(); } }</comment>

    <comment type="line" pos:line="436" pos:column="5">//        [DebuggerBrowsable(DebuggerBrowsableState.Collapsed)]</comment>
    <comment type="line" pos:line="437" pos:column="5">//        public IVariableDeclaration[] Variables { get { return this.method.DeclaredVariables.ToArray(); } }</comment>

    <comment type="line" pos:line="439" pos:column="5">//        public override string ToString() {</comment>
    <comment type="line" pos:line="440" pos:column="5">//            return method.ToString();</comment>
    <comment type="line" pos:line="441" pos:column="5">//        }</comment>
    <comment type="line" pos:line="442" pos:column="5">//    }</comment>
    <comment type="line" pos:line="443" pos:column="5">//}</comment>
}</block></namespace></unit>
