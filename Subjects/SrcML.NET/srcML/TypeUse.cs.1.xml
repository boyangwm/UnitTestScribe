<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data\TypeUse.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2013 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *    Patrick Francis (ABB Group) - API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="13" pos:column="1">using <name pos:line="13" pos:column="7">System</name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Collections</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">Generic</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Collections</name><op:operator pos:line="15" pos:column="25">.</op:operator><name pos:line="15" pos:column="26">ObjectModel</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Linq</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Text</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Xml</name></name>;</using>

<namespace pos:line="20" pos:column="1">namespace <name><name pos:line="20" pos:column="11">ABB</name><op:operator pos:line="20" pos:column="14">.</op:operator><name pos:line="20" pos:column="15">SrcML</name><op:operator pos:line="20" pos:column="20">.</op:operator><name pos:line="20" pos:column="21">Data</name></name> <block pos:line="20" pos:column="26">{

    <comment type="line" pos:line="22" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="23" pos:column="5">/// Represents a use of a type. It is used in declarations and inheritance specifications, among other places.</comment>
    <comment type="line" pos:line="24" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="25" pos:column="5">public</specifier> class <name pos:line="25" pos:column="18">TypeUse</name> <super pos:line="25" pos:column="26">: <name pos:line="25" pos:column="28">NameUse</name></super> <block pos:line="25" pos:column="36">{
        <decl_stmt><decl><type><specifier pos:line="26" pos:column="9">private</specifier> <name><name pos:line="26" pos:column="17">List</name><argument_list pos:line="26" pos:column="21">&lt;<argument><name pos:line="26" pos:column="22">TypeUse</name></argument>&gt;</argument_list></name></type> <name pos:line="26" pos:column="31">typeParameterList</name></decl>;</decl_stmt>

        <comment type="line" pos:line="28" pos:column="9">/// &lt;summary&gt; The XML name for TypeUse &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="29" pos:column="9">public</specifier> <specifier pos:line="29" pos:column="16">new</specifier> <specifier pos:line="29" pos:column="20">const</specifier> <name pos:line="29" pos:column="26">string</name></type> <name pos:line="29" pos:column="33">XmlName</name> <init pos:line="29" pos:column="41">= <expr><lit:literal type="string" pos:line="29" pos:column="43">"tu"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="31" pos:column="9">/// &lt;summary&gt; XML Name for &lt;see cref="TypeParameters" /&gt; &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="32" pos:column="9">public</specifier> <specifier pos:line="32" pos:column="16">const</specifier> <name pos:line="32" pos:column="22">string</name></type> <name pos:line="32" pos:column="29">XmlTypeParametersName</name> <init pos:line="32" pos:column="51">= <expr><lit:literal type="string" pos:line="32" pos:column="53">"TypeParameters"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="34" pos:column="9">/// &lt;summary&gt; Create a new type use object. &lt;/summary&gt;</comment>
        <constructor><specifier pos:line="35" pos:column="9">public</specifier> <name pos:line="35" pos:column="16">TypeUse</name><parameter_list pos:line="35" pos:column="23">()</parameter_list> <block pos:line="35" pos:column="26">{
            <expr_stmt><expr><name pos:line="36" pos:column="13">Name</name> <op:operator pos:line="36" pos:column="18">=</op:operator> <name><name pos:line="36" pos:column="20">String</name><op:operator pos:line="36" pos:column="26">.</op:operator><name pos:line="36" pos:column="27">Empty</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="37" pos:column="13">typeParameterList</name> <op:operator pos:line="37" pos:column="31">=</op:operator> <op:operator pos:line="37" pos:column="33">new</op:operator> <call><name><name pos:line="37" pos:column="37">List</name><argument_list pos:line="37" pos:column="41">&lt;<argument><name pos:line="37" pos:column="42">TypeUse</name></argument>&gt;</argument_list></name><argument_list pos:line="37" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="38" pos:column="13">TypeParameters</name> <op:operator pos:line="38" pos:column="28">=</op:operator> <op:operator pos:line="38" pos:column="30">new</op:operator> <call><name><name pos:line="38" pos:column="34">ReadOnlyCollection</name><argument_list pos:line="38" pos:column="52">&lt;<argument><name pos:line="38" pos:column="53">TypeUse</name></argument>&gt;</argument_list></name><argument_list pos:line="38" pos:column="61">(<argument><expr><name><name pos:line="38" pos:column="62">this</name><op:operator pos:line="38" pos:column="66">.</op:operator><name pos:line="38" pos:column="67">typeParameterList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        
        <comment type="line" pos:line="42" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="43" pos:column="9">/// Returns true if &lt;see cref="TypeParameters"/&gt; has any elements</comment>
        <comment type="line" pos:line="44" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="45" pos:column="9">public</specifier> <name pos:line="45" pos:column="16">bool</name></type> <name pos:line="45" pos:column="21">IsGeneric</name> <block pos:line="45" pos:column="31">{ <function><name pos:line="45" pos:column="33">get</name> <block pos:line="45" pos:column="37">{ <return pos:line="45" pos:column="39">return <expr><name><name pos:line="45" pos:column="46">typeParameterList</name><op:operator pos:line="45" pos:column="63">.</op:operator><name pos:line="45" pos:column="64">Count</name></name> <op:operator pos:line="45" pos:column="70">&gt;</op:operator> <lit:literal type="number" pos:line="45" pos:column="72">0</lit:literal></expr>;</return> }</block></function> }</block></decl></decl_stmt>

        <comment type="line" pos:line="47" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="48" pos:column="9">/// Parameters for the type use (indicates that this is a generic type use)</comment>
        <comment type="line" pos:line="49" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="50" pos:column="9">public</specifier> <name><name pos:line="50" pos:column="16">ReadOnlyCollection</name><argument_list pos:line="50" pos:column="34">&lt;<argument><name pos:line="50" pos:column="35">TypeUse</name></argument>&gt;</argument_list></name></type> <name pos:line="50" pos:column="44">TypeParameters</name> <block pos:line="50" pos:column="59">{ <function_decl><name pos:line="50" pos:column="61">get</name>;</function_decl> <function_decl><specifier pos:line="50" pos:column="66">private</specifier> <name pos:line="50" pos:column="74">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="52" pos:column="9">/// &lt;summary&gt; The statement containing this expression. &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="53" pos:column="9">public</specifier> <specifier pos:line="53" pos:column="16">override</specifier> <name pos:line="53" pos:column="25">Statement</name></type> <name pos:line="53" pos:column="35">ParentStatement</name> <block pos:line="53" pos:column="51">{
            <function><name pos:line="54" pos:column="13">get</name> <block pos:line="54" pos:column="17">{ <return pos:line="54" pos:column="19">return <expr><name><name pos:line="54" pos:column="26">base</name><op:operator pos:line="54" pos:column="30">.</op:operator><name pos:line="54" pos:column="31">ParentStatement</name></name></expr>;</return> }</block></function>
            <function><name pos:line="55" pos:column="13">set</name> <block pos:line="55" pos:column="17">{
                <expr_stmt><expr><name><name pos:line="56" pos:column="17">base</name><op:operator pos:line="56" pos:column="21">.</op:operator><name pos:line="56" pos:column="22">ParentStatement</name></name> <op:operator pos:line="56" pos:column="38">=</op:operator> <name pos:line="56" pos:column="40">value</name></expr>;</expr_stmt>
                <foreach pos:line="57" pos:column="17">foreach(<init><decl><type><name pos:line="57" pos:column="25">var</name></type> <name pos:line="57" pos:column="29">param</name> <range pos:line="57" pos:column="35">in <expr><name pos:line="57" pos:column="38">TypeParameters</name></expr></range></decl></init>) <block pos:line="57" pos:column="54">{ <expr_stmt><expr><name><name pos:line="57" pos:column="56">param</name><op:operator pos:line="57" pos:column="61">.</op:operator><name pos:line="57" pos:column="62">ParentStatement</name></name> <op:operator pos:line="57" pos:column="78">=</op:operator> <name pos:line="57" pos:column="80">value</name></expr>;</expr_stmt> }</block></foreach>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="61" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="62" pos:column="9">/// Adds a generic type parameter to this type use</comment>
        <comment type="line" pos:line="63" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="64" pos:column="9">/// &lt;param name="typeParameter"&gt;The type parameter to add&lt;/param&gt;</comment>
        <function><type><specifier pos:line="65" pos:column="9">public</specifier> <name pos:line="65" pos:column="16">void</name></type> <name pos:line="65" pos:column="21">AddTypeParameter</name><parameter_list pos:line="65" pos:column="37">(<param><decl><type><name pos:line="65" pos:column="38">TypeUse</name></type> <name pos:line="65" pos:column="46">typeParameter</name></decl></param>)</parameter_list> <block pos:line="65" pos:column="61">{
            <if pos:line="66" pos:column="13">if<condition pos:line="66" pos:column="15">(<expr><name pos:line="66" pos:column="16">typeParameter</name> <op:operator pos:line="66" pos:column="30">==</op:operator> <name pos:line="66" pos:column="33">null</name></expr>)</condition><then pos:line="66" pos:column="38"> <block pos:line="66" pos:column="39">{ <throw pos:line="66" pos:column="41">throw <expr><op:operator pos:line="66" pos:column="47">new</op:operator> <call><name pos:line="66" pos:column="51">ArgumentNullException</name><argument_list pos:line="66" pos:column="72">(<argument><expr><lit:literal type="string" pos:line="66" pos:column="73">"typeParameter"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>
            <expr_stmt><expr><name><name pos:line="67" pos:column="13">typeParameter</name><op:operator pos:line="67" pos:column="26">.</op:operator><name pos:line="67" pos:column="27">ParentExpression</name></name> <op:operator pos:line="67" pos:column="44">=</op:operator> <name pos:line="67" pos:column="46">this</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="68" pos:column="13">typeParameter</name><op:operator pos:line="68" pos:column="26">.</op:operator><name pos:line="68" pos:column="27">ParentStatement</name></name> <op:operator pos:line="68" pos:column="43">=</op:operator> <name><name pos:line="68" pos:column="45">this</name><op:operator pos:line="68" pos:column="49">.</op:operator><name pos:line="68" pos:column="50">ParentStatement</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="69" pos:column="13">typeParameterList</name><op:operator pos:line="69" pos:column="30">.</op:operator><name pos:line="69" pos:column="31">Add</name></name><argument_list pos:line="69" pos:column="34">(<argument><expr><name pos:line="69" pos:column="35">typeParameter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="72" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="73" pos:column="9">/// Adds all of the given type parameters to this type use element</comment>
        <comment type="line" pos:line="74" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="75" pos:column="9">/// &lt;param name="typeParameters"&gt;An enumerable of type use elements to add&lt;/param&gt;</comment>
        <function><type><specifier pos:line="76" pos:column="9">public</specifier> <name pos:line="76" pos:column="16">void</name></type> <name pos:line="76" pos:column="21">AddTypeParameters</name><parameter_list pos:line="76" pos:column="38">(<param><decl><type><name><name pos:line="76" pos:column="39">IEnumerable</name><argument_list pos:line="76" pos:column="50">&lt;<argument><name pos:line="76" pos:column="51">TypeUse</name></argument>&gt;</argument_list></name></type> <name pos:line="76" pos:column="60">typeParameters</name></decl></param>)</parameter_list> <block pos:line="76" pos:column="76">{
            <expr_stmt><expr><call><name><name pos:line="77" pos:column="13">typeParameterList</name><op:operator pos:line="77" pos:column="30">.</op:operator><name pos:line="77" pos:column="31">AddRange</name></name><argument_list pos:line="77" pos:column="39">(<argument><expr><name pos:line="77" pos:column="40">typeParameters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="80" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="81" pos:column="9">/// Returns the child expressions, including the TypeParameters.</comment>
        <comment type="line" pos:line="82" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="83" pos:column="9">protected</specifier> <specifier pos:line="83" pos:column="19">override</specifier> <name><name pos:line="83" pos:column="28">IEnumerable</name><argument_list pos:line="83" pos:column="39">&lt;<argument><name pos:line="83" pos:column="40">AbstractProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="83" pos:column="64">GetChildren</name><parameter_list pos:line="83" pos:column="75">()</parameter_list> <block pos:line="83" pos:column="78">{
            <return pos:line="84" pos:column="13">return <expr><call><name><name pos:line="84" pos:column="20">TypeParameters</name><op:operator pos:line="84" pos:column="34">.</op:operator><name pos:line="84" pos:column="35">Concat</name></name><argument_list pos:line="84" pos:column="41">(<argument><expr><call><name><name pos:line="84" pos:column="42">base</name><op:operator pos:line="84" pos:column="46">.</op:operator><name pos:line="84" pos:column="47">GetChildren</name></name><argument_list pos:line="84" pos:column="58">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="87" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="88" pos:column="9">/// Finds all of the matches for this type</comment>
        <comment type="line" pos:line="89" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="90" pos:column="9">/// &lt;returns&gt;All of the type definitions that match this type use&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="91" pos:column="9">public</specifier> <specifier pos:line="91" pos:column="16">override</specifier> <name><name pos:line="91" pos:column="25">IEnumerable</name><argument_list pos:line="91" pos:column="36">&lt;<argument><name pos:line="91" pos:column="37">TypeDefinition</name></argument>&gt;</argument_list></name></type> <name pos:line="91" pos:column="53">ResolveType</name><parameter_list pos:line="91" pos:column="64">()</parameter_list> <block pos:line="91" pos:column="67">{
            <if pos:line="92" pos:column="13">if<condition pos:line="92" pos:column="15">(<expr><name pos:line="92" pos:column="16">ParentStatement</name> <op:operator pos:line="92" pos:column="32">==</op:operator> <name pos:line="92" pos:column="35">null</name></expr>)</condition><then pos:line="92" pos:column="40"> <block pos:line="92" pos:column="41">{
                <throw pos:line="93" pos:column="17">throw <expr><op:operator pos:line="93" pos:column="23">new</op:operator> <call><name pos:line="93" pos:column="27">InvalidOperationException</name><argument_list pos:line="93" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="93" pos:column="53">"ParentStatement is null"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <comment type="line" pos:line="96" pos:column="13">// if this is a built-in type, then just return that </comment>
            <comment type="line" pos:line="97" pos:column="13">// otherwise, go hunting for matching types</comment>
            <if pos:line="98" pos:column="13">if<condition pos:line="98" pos:column="15">(<expr><call><name><name pos:line="98" pos:column="16">BuiltInTypeFactory</name><op:operator pos:line="98" pos:column="34">.</op:operator><name pos:line="98" pos:column="35">IsBuiltIn</name></name><argument_list pos:line="98" pos:column="44">(<argument><expr><name pos:line="98" pos:column="45">this</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="98" pos:column="51"> <block pos:line="98" pos:column="52">{
                <return pos:line="99" pos:column="17">return <expr><call><name><name pos:line="99" pos:column="24">Enumerable</name><op:operator pos:line="99" pos:column="34">.</op:operator><name pos:line="99" pos:column="35">Repeat</name></name><argument_list pos:line="99" pos:column="41">(<argument><expr><call><name><name pos:line="99" pos:column="42">BuiltInTypeFactory</name><op:operator pos:line="99" pos:column="60">.</op:operator><name pos:line="99" pos:column="61">GetBuiltIn</name></name><argument_list pos:line="99" pos:column="71">(<argument><expr><name pos:line="99" pos:column="72">this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="99" pos:column="79">1</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>

            <comment type="line" pos:line="102" pos:column="13">//If there's a prefix, resolve that and search under results</comment>
            <if pos:line="103" pos:column="13">if<condition pos:line="103" pos:column="15">(<expr><name pos:line="103" pos:column="16">Prefix</name> <op:operator pos:line="103" pos:column="23">!=</op:operator> <name pos:line="103" pos:column="26">null</name></expr>)</condition><then pos:line="103" pos:column="31"> <block pos:line="103" pos:column="32">{
                <return pos:line="104" pos:column="17">return <expr><call><name><name pos:line="104" pos:column="24">Prefix</name><op:operator pos:line="104" pos:column="30">.</op:operator><name pos:line="104" pos:column="31">FindMatches</name></name><argument_list pos:line="104" pos:column="42">()</argument_list></call><op:operator pos:line="104" pos:column="44">.</op:operator><call><name pos:line="104" pos:column="45">SelectMany</name><argument_list pos:line="104" pos:column="55">(<argument><expr><lambda><name pos:line="104" pos:column="56">ns</name> <op:operator pos:line="104" pos:column="59">=&gt;</op:operator> <call><name><name pos:line="104" pos:column="62">ns</name><op:operator pos:line="104" pos:column="64">.</op:operator><name><name pos:line="104" pos:column="65">GetNamedChildren</name><argument_list pos:line="104" pos:column="81">&lt;<argument><name pos:line="104" pos:column="82">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="104" pos:column="97">(<argument><expr><name><name pos:line="104" pos:column="98">this</name><op:operator pos:line="104" pos:column="102">.</op:operator><name pos:line="104" pos:column="103">Name</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>

            <comment type="line" pos:line="107" pos:column="13">//If there's a calling expression, match and search under results</comment>
            <decl_stmt><decl><type><name pos:line="108" pos:column="13">var</name></type> <name pos:line="108" pos:column="17">callingScopes</name> <init pos:line="108" pos:column="31">= <expr><call><name pos:line="108" pos:column="33">GetCallingScope</name><argument_list pos:line="108" pos:column="48">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="109" pos:column="13">if<condition pos:line="109" pos:column="15">(<expr><name pos:line="109" pos:column="16">callingScopes</name> <op:operator pos:line="109" pos:column="30">!=</op:operator> <name pos:line="109" pos:column="33">null</name></expr>)</condition><then pos:line="109" pos:column="38"> <block pos:line="109" pos:column="39">{
                <decl_stmt><decl><type><name><name pos:line="110" pos:column="17">IEnumerable</name><argument_list pos:line="110" pos:column="28">&lt;<argument><name pos:line="110" pos:column="29">TypeDefinition</name></argument>&gt;</argument_list></name></type> <name pos:line="110" pos:column="45">matches</name> <init pos:line="110" pos:column="53">= <expr><call><name><name pos:line="110" pos:column="55">Enumerable</name><op:operator pos:line="110" pos:column="65">.</op:operator><name><name pos:line="110" pos:column="66">Empty</name><argument_list pos:line="110" pos:column="71">&lt;<argument><name pos:line="110" pos:column="72">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="110" pos:column="87">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <foreach pos:line="111" pos:column="17">foreach(<init><decl><type><name pos:line="111" pos:column="25">var</name></type> <name pos:line="111" pos:column="29">scope</name> <range pos:line="111" pos:column="35">in <expr><name pos:line="111" pos:column="38">callingScopes</name></expr></range></decl></init>) <block pos:line="111" pos:column="53">{
                    <decl_stmt><decl><type><name pos:line="112" pos:column="21">var</name></type> <name pos:line="112" pos:column="25">localMatches</name> <init pos:line="112" pos:column="38">= <expr><call><name><name pos:line="112" pos:column="40">scope</name><op:operator pos:line="112" pos:column="45">.</op:operator><name><name pos:line="112" pos:column="46">GetNamedChildren</name><argument_list pos:line="112" pos:column="62">&lt;<argument><name pos:line="112" pos:column="63">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="112" pos:column="78">(<argument><expr><name><name pos:line="112" pos:column="79">this</name><op:operator pos:line="112" pos:column="83">.</op:operator><name pos:line="112" pos:column="84">Name</name></name></expr></argument>)</argument_list></call><op:operator pos:line="112" pos:column="89">.</op:operator><call><name pos:line="112" pos:column="90">ToList</name><argument_list pos:line="112" pos:column="96">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="113" pos:column="21">var</name></type> <name pos:line="113" pos:column="25">callingType</name> <init pos:line="113" pos:column="37">= <expr><name pos:line="113" pos:column="39">scope</name> <op:operator pos:line="113" pos:column="45">as</op:operator> <name pos:line="113" pos:column="48">TypeDefinition</name></expr></init></decl>;</decl_stmt>
                    <if pos:line="114" pos:column="21">if<condition pos:line="114" pos:column="23">(<expr><op:operator pos:line="114" pos:column="24">!</op:operator><call><name><name pos:line="114" pos:column="25">localMatches</name><op:operator pos:line="114" pos:column="37">.</op:operator><name pos:line="114" pos:column="38">Any</name></name><argument_list pos:line="114" pos:column="41">()</argument_list></call> <op:operator pos:line="114" pos:column="44">&amp;&amp;</op:operator> <name pos:line="114" pos:column="47">callingType</name> <op:operator pos:line="114" pos:column="59">!=</op:operator> <name pos:line="114" pos:column="62">null</name></expr>)</condition><then pos:line="114" pos:column="67"> <block pos:line="114" pos:column="68">{
                        <comment type="line" pos:line="115" pos:column="25">//also search under the base types of the calling scope</comment>
                        <expr_stmt><expr><name pos:line="116" pos:column="25">matches</name> <op:operator pos:line="116" pos:column="33">=</op:operator> <call><name><name pos:line="116" pos:column="35">matches</name><op:operator pos:line="116" pos:column="42">.</op:operator><name pos:line="116" pos:column="43">Concat</name></name><argument_list pos:line="116" pos:column="49">(<argument><expr><call><name><name pos:line="116" pos:column="50">callingType</name><op:operator pos:line="116" pos:column="61">.</op:operator><name><name pos:line="116" pos:column="62">SearchParentTypes</name><argument_list pos:line="116" pos:column="79">&lt;<argument><name pos:line="116" pos:column="80">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="116" pos:column="95">(<argument><expr><name><name pos:line="116" pos:column="96">this</name><op:operator pos:line="116" pos:column="100">.</op:operator><name pos:line="116" pos:column="101">Name</name></name></expr></argument>, <argument><expr><lambda><name pos:line="116" pos:column="107">e</name> <op:operator pos:line="116" pos:column="109">=&gt;</op:operator> <lit:literal type="boolean" pos:line="116" pos:column="112">true</lit:literal></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else pos:line="117" pos:column="23">else <block pos:line="117" pos:column="28">{
                        <expr_stmt><expr><name pos:line="118" pos:column="25">matches</name> <op:operator pos:line="118" pos:column="33">=</op:operator> <call><name><name pos:line="118" pos:column="35">matches</name><op:operator pos:line="118" pos:column="42">.</op:operator><name pos:line="118" pos:column="43">Concat</name></name><argument_list pos:line="118" pos:column="49">(<argument><expr><name pos:line="118" pos:column="50">localMatches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></foreach>
                <return pos:line="121" pos:column="17">return <expr><name pos:line="121" pos:column="24">matches</name></expr>;</return>
            }</block></then></if>

            <comment type="line" pos:line="124" pos:column="13">//handle C# var keyword</comment>
            <if pos:line="125" pos:column="13">if<condition pos:line="125" pos:column="15">(<expr><name pos:line="125" pos:column="16">Name</name> <op:operator pos:line="125" pos:column="21">==</op:operator> <lit:literal type="string" pos:line="125" pos:column="24">"var"</lit:literal> <op:operator pos:line="125" pos:column="30">&amp;&amp;</op:operator> <name pos:line="125" pos:column="33">ProgrammingLanguage</name> <op:operator pos:line="125" pos:column="53">==</op:operator> <name><name pos:line="125" pos:column="56">Language</name><op:operator pos:line="125" pos:column="64">.</op:operator><name pos:line="125" pos:column="65">CSharp</name></name></expr>)</condition><then pos:line="125" pos:column="72"> <block pos:line="125" pos:column="73">{
                <decl_stmt><decl><type><name pos:line="126" pos:column="17">var</name></type> <name pos:line="126" pos:column="21">varDecl</name> <init pos:line="126" pos:column="29">= <expr><name pos:line="126" pos:column="31">ParentExpression</name> <op:operator pos:line="126" pos:column="48">as</op:operator> <name pos:line="126" pos:column="51">VariableDeclaration</name></expr></init></decl>;</decl_stmt>
                <if pos:line="127" pos:column="17">if<condition pos:line="127" pos:column="19">(<expr><name pos:line="127" pos:column="20">varDecl</name> <op:operator pos:line="127" pos:column="28">!=</op:operator> <name pos:line="127" pos:column="31">null</name></expr>)</condition><then pos:line="127" pos:column="36"> <block pos:line="127" pos:column="37">{
                    <if pos:line="128" pos:column="21">if<condition pos:line="128" pos:column="23">(<expr><name><name pos:line="128" pos:column="24">varDecl</name><op:operator pos:line="128" pos:column="31">.</op:operator><name pos:line="128" pos:column="32">Initializer</name></name> <op:operator pos:line="128" pos:column="44">!=</op:operator> <name pos:line="128" pos:column="47">null</name></expr>)</condition><then pos:line="128" pos:column="52"> <block pos:line="128" pos:column="53">{
                        <return pos:line="129" pos:column="25">return <expr><call><name><name pos:line="129" pos:column="32">varDecl</name><op:operator pos:line="129" pos:column="39">.</op:operator><name pos:line="129" pos:column="40">Initializer</name><op:operator pos:line="129" pos:column="51">.</op:operator><name pos:line="129" pos:column="52">ResolveType</name></name><argument_list pos:line="129" pos:column="63">()</argument_list></call></expr>;</return>
                    }</block></then></if>
                    <if pos:line="131" pos:column="21">if<condition pos:line="131" pos:column="23">(<expr><name><name pos:line="131" pos:column="24">varDecl</name><op:operator pos:line="131" pos:column="31">.</op:operator><name pos:line="131" pos:column="32">Range</name></name> <op:operator pos:line="131" pos:column="38">!=</op:operator> <name pos:line="131" pos:column="41">null</name></expr>)</condition><then pos:line="131" pos:column="46"> <block pos:line="131" pos:column="47">{
                        <comment type="line" pos:line="132" pos:column="25">//TODO: update to determine type of items within the collection and return that</comment>
                        <return pos:line="133" pos:column="25">return <expr><call><name><name pos:line="133" pos:column="32">varDecl</name><op:operator pos:line="133" pos:column="39">.</op:operator><name pos:line="133" pos:column="40">Range</name><op:operator pos:line="133" pos:column="45">.</op:operator><name pos:line="133" pos:column="46">ResolveType</name></name><argument_list pos:line="133" pos:column="57">()</argument_list></call></expr>;</return>
                    }</block></then></if>
                    <return pos:line="135" pos:column="21">return <expr><call><name><name pos:line="135" pos:column="28">Enumerable</name><op:operator pos:line="135" pos:column="38">.</op:operator><name><name pos:line="135" pos:column="39">Empty</name><argument_list pos:line="135" pos:column="44">&lt;<argument><name pos:line="135" pos:column="45">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="135" pos:column="60">()</argument_list></call></expr>;</return>
                }</block></then></if>
            }</block></then></if>

            <comment type="line" pos:line="139" pos:column="13">//search enclosing scopes and base types</comment>
            <foreach pos:line="140" pos:column="13">foreach(<init><decl><type><name pos:line="140" pos:column="21">var</name></type> <name pos:line="140" pos:column="25">scope</name> <range pos:line="140" pos:column="31">in <expr><call><name><name pos:line="140" pos:column="34">ParentStatement</name><op:operator pos:line="140" pos:column="49">.</op:operator><name><name pos:line="140" pos:column="50">GetAncestors</name><argument_list pos:line="140" pos:column="62">&lt;<argument><name pos:line="140" pos:column="63">NamedScope</name></argument>&gt;</argument_list></name></name><argument_list pos:line="140" pos:column="74">()</argument_list></call></expr></range></decl></init>) <block pos:line="140" pos:column="78">{
                <decl_stmt><decl><type><name pos:line="141" pos:column="17">var</name></type> <name pos:line="141" pos:column="21">matches</name> <init pos:line="141" pos:column="29">= <expr><call><name><name pos:line="141" pos:column="31">scope</name><op:operator pos:line="141" pos:column="36">.</op:operator><name><name pos:line="141" pos:column="37">GetNamedChildren</name><argument_list pos:line="141" pos:column="53">&lt;<argument><name pos:line="141" pos:column="54">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="141" pos:column="69">(<argument><expr><name pos:line="141" pos:column="70">this</name></expr></argument>)</argument_list></call><op:operator pos:line="141" pos:column="75">.</op:operator><call><name pos:line="141" pos:column="76">Where</name><argument_list pos:line="141" pos:column="81">(<argument><expr><name pos:line="141" pos:column="82">SignatureMatches</name></expr></argument>)</argument_list></call><op:operator pos:line="141" pos:column="99">.</op:operator><call><name pos:line="141" pos:column="100">ToList</name><argument_list pos:line="141" pos:column="106">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="142" pos:column="17">if<condition pos:line="142" pos:column="19">(<expr><call><name><name pos:line="142" pos:column="20">matches</name><op:operator pos:line="142" pos:column="27">.</op:operator><name pos:line="142" pos:column="28">Any</name></name><argument_list pos:line="142" pos:column="31">()</argument_list></call></expr>)</condition><then pos:line="142" pos:column="34"> <block pos:line="142" pos:column="35">{
                    <return pos:line="143" pos:column="21">return <expr><name pos:line="143" pos:column="28">matches</name></expr>;</return>
                }</block></then></if>
                <decl_stmt><decl><type><name pos:line="145" pos:column="17">var</name></type> <name pos:line="145" pos:column="21">typeDef</name> <init pos:line="145" pos:column="29">= <expr><name pos:line="145" pos:column="31">scope</name> <op:operator pos:line="145" pos:column="37">as</op:operator> <name pos:line="145" pos:column="40">TypeDefinition</name></expr></init></decl>;</decl_stmt>
                <if pos:line="146" pos:column="17">if<condition pos:line="146" pos:column="19">(<expr><name pos:line="146" pos:column="20">typeDef</name> <op:operator pos:line="146" pos:column="28">!=</op:operator> <name pos:line="146" pos:column="31">null</name></expr>)</condition><then pos:line="146" pos:column="36"> <block pos:line="146" pos:column="37">{
                    <decl_stmt><decl><type><name pos:line="147" pos:column="21">var</name></type> <name pos:line="147" pos:column="25">baseTypeMatches</name> <init pos:line="147" pos:column="41">= <expr><call><name><name pos:line="147" pos:column="43">typeDef</name><op:operator pos:line="147" pos:column="50">.</op:operator><name><name pos:line="147" pos:column="51">SearchParentTypes</name><argument_list pos:line="147" pos:column="68">&lt;<argument><name pos:line="147" pos:column="69">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="147" pos:column="84">(<argument><expr><name><name pos:line="147" pos:column="85">this</name><op:operator pos:line="147" pos:column="89">.</op:operator><name pos:line="147" pos:column="90">Name</name></name></expr></argument>, <argument><expr><name pos:line="147" pos:column="96">SignatureMatches</name></expr></argument>)</argument_list></call><op:operator pos:line="147" pos:column="113">.</op:operator><call><name pos:line="147" pos:column="114">ToList</name><argument_list pos:line="147" pos:column="120">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="148" pos:column="21">if<condition pos:line="148" pos:column="23">(<expr><call><name><name pos:line="148" pos:column="24">baseTypeMatches</name><op:operator pos:line="148" pos:column="39">.</op:operator><name pos:line="148" pos:column="40">Any</name></name><argument_list pos:line="148" pos:column="43">()</argument_list></call></expr>)</condition><then pos:line="148" pos:column="46"> <block pos:line="148" pos:column="47">{
                        <return pos:line="149" pos:column="25">return <expr><name pos:line="149" pos:column="32">baseTypeMatches</name></expr>;</return>
                    }</block></then></if>
                }</block></then></if>
            }</block></foreach>

            <comment type="line" pos:line="154" pos:column="13">//search if there is an alias for this name</comment>
            <foreach pos:line="155" pos:column="13">foreach(<init><decl><type><name pos:line="155" pos:column="21">var</name></type> <name pos:line="155" pos:column="25">alias</name> <range pos:line="155" pos:column="31">in <expr><call><name pos:line="155" pos:column="34">GetAliases</name><argument_list pos:line="155" pos:column="44">()</argument_list></call></expr></range></decl></init>) <block pos:line="155" pos:column="48">{
                <if pos:line="156" pos:column="17">if<condition pos:line="156" pos:column="19">(<expr><name><name pos:line="156" pos:column="20">alias</name><op:operator pos:line="156" pos:column="25">.</op:operator><name pos:line="156" pos:column="26">AliasName</name></name> <op:operator pos:line="156" pos:column="36">==</op:operator> <name><name pos:line="156" pos:column="39">this</name><op:operator pos:line="156" pos:column="43">.</op:operator><name pos:line="156" pos:column="44">Name</name></name></expr>)</condition><then pos:line="156" pos:column="49"> <block pos:line="156" pos:column="50">{
                    <decl_stmt><decl><type><name pos:line="157" pos:column="21">var</name></type> <name pos:line="157" pos:column="25">targetName</name> <init pos:line="157" pos:column="36">= <expr><name><name pos:line="157" pos:column="38">alias</name><op:operator pos:line="157" pos:column="43">.</op:operator><name pos:line="157" pos:column="44">Target</name></name> <op:operator pos:line="157" pos:column="51">as</op:operator> <name pos:line="157" pos:column="54">NameUse</name></expr></init></decl>;</decl_stmt>
                    <if pos:line="158" pos:column="21">if<condition pos:line="158" pos:column="23">(<expr><name pos:line="158" pos:column="24">targetName</name> <op:operator pos:line="158" pos:column="35">==</op:operator> <name pos:line="158" pos:column="38">null</name></expr>)</condition><then pos:line="158" pos:column="43"> <block pos:line="158" pos:column="44">{
                        <comment type="line" pos:line="159" pos:column="25">//Target is not a NameUse, probably an Expression</comment>
                        <expr_stmt><expr><name pos:line="160" pos:column="25">targetName</name> <op:operator pos:line="160" pos:column="36">=</op:operator> <call><name><name pos:line="160" pos:column="38">alias</name><op:operator pos:line="160" pos:column="43">.</op:operator><name pos:line="160" pos:column="44">Target</name><op:operator pos:line="160" pos:column="50">.</op:operator><name><name pos:line="160" pos:column="51">GetDescendantsAndSelf</name><argument_list pos:line="160" pos:column="72">&lt;<argument><name pos:line="160" pos:column="73">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="160" pos:column="81">()</argument_list></call><op:operator pos:line="160" pos:column="83">.</op:operator><call><name pos:line="160" pos:column="84">LastOrDefault</name><argument_list pos:line="160" pos:column="97">()</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <if pos:line="162" pos:column="21">if<condition pos:line="162" pos:column="23">(<expr><name pos:line="162" pos:column="24">targetName</name> <op:operator pos:line="162" pos:column="35">!=</op:operator> <name pos:line="162" pos:column="38">null</name></expr>)</condition><then pos:line="162" pos:column="43"> <block pos:line="162" pos:column="44">{
                        <return pos:line="163" pos:column="25">return <expr><call><name><name pos:line="163" pos:column="32">targetName</name><op:operator pos:line="163" pos:column="42">.</op:operator><name pos:line="163" pos:column="43">FindMatches</name></name><argument_list pos:line="163" pos:column="54">()</argument_list></call><op:operator pos:line="163" pos:column="56">.</op:operator><call><name><name pos:line="163" pos:column="57">OfType</name><argument_list pos:line="163" pos:column="63">&lt;<argument><name pos:line="163" pos:column="64">TypeDefinition</name></argument>&gt;</argument_list></name><argument_list pos:line="163" pos:column="79">()</argument_list></call></expr>;</return>
                    }</block></then></if>
                }</block></then></if>
            }</block></foreach>

            <comment type="line" pos:line="168" pos:column="13">//we didn't find it locally, search under imported namespaces</comment>
            <return pos:line="169" pos:column="13">return <expr><op:operator pos:line="169" pos:column="20">(</op:operator><linq><from pos:line="169" pos:column="21">from <expr><name pos:line="169" pos:column="26">import</name></expr> <in pos:line="169" pos:column="33">in <expr><call><name pos:line="169" pos:column="36">GetImports</name><argument_list pos:line="169" pos:column="46">()</argument_list></call></expr></in></from>
                    <from pos:line="170" pos:column="21">from <expr><name pos:line="170" pos:column="26">match</name></expr> <in pos:line="170" pos:column="32">in <expr><call><name><name pos:line="170" pos:column="35">import</name><op:operator pos:line="170" pos:column="41">.</op:operator><name pos:line="170" pos:column="42">ImportedNamespace</name><op:operator pos:line="170" pos:column="59">.</op:operator><name><name pos:line="170" pos:column="60">GetDescendantsAndSelf</name><argument_list pos:line="170" pos:column="81">&lt;<argument><name pos:line="170" pos:column="82">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="170" pos:column="90">()</argument_list></call><op:operator pos:line="170" pos:column="92">.</op:operator><call><name pos:line="170" pos:column="93">Last</name><argument_list pos:line="170" pos:column="97">()</argument_list></call><op:operator pos:line="170" pos:column="99">.</op:operator><call><name pos:line="170" pos:column="100">FindMatches</name><argument_list pos:line="170" pos:column="111">()</argument_list></call><op:operator pos:line="170" pos:column="113">.</op:operator><call><name><name pos:line="170" pos:column="114">OfType</name><argument_list pos:line="170" pos:column="120">&lt;<argument><name pos:line="170" pos:column="121">NamedScope</name></argument>&gt;</argument_list></name><argument_list pos:line="170" pos:column="132">()</argument_list></call></expr></in></from>
                    <from pos:line="171" pos:column="21">from <expr><name pos:line="171" pos:column="26">child</name></expr> <in pos:line="171" pos:column="32">in <expr><call><name><name pos:line="171" pos:column="35">match</name><op:operator pos:line="171" pos:column="40">.</op:operator><name><name pos:line="171" pos:column="41">GetNamedChildren</name><argument_list pos:line="171" pos:column="57">&lt;<argument><name pos:line="171" pos:column="58">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="171" pos:column="73">(<argument><expr><name><name pos:line="171" pos:column="74">this</name><op:operator pos:line="171" pos:column="78">.</op:operator><name pos:line="171" pos:column="79">Name</name></name></expr></argument>)</argument_list></call></expr></in></from>
                    <select pos:line="172" pos:column="21">select <expr><name pos:line="172" pos:column="28">child</name></expr></select></linq><op:operator pos:line="172" pos:column="33">)</op:operator></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="175" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="176" pos:column="9">/// Finds TypeDefinitions that match this use.</comment>
        <comment type="line" pos:line="177" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="178" pos:column="9">public</specifier> <specifier pos:line="178" pos:column="16">override</specifier> <name><name pos:line="178" pos:column="25">IEnumerable</name><argument_list pos:line="178" pos:column="36">&lt;<argument><name pos:line="178" pos:column="37">INamedEntity</name></argument>&gt;</argument_list></name></type> <name pos:line="178" pos:column="51">FindMatches</name><parameter_list pos:line="178" pos:column="62">()</parameter_list> <block pos:line="178" pos:column="65">{
            <return pos:line="179" pos:column="13">return <expr><call><name pos:line="179" pos:column="20">ResolveType</name><argument_list pos:line="179" pos:column="31">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="182" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="183" pos:column="9">/// Tests if this type use matches the signature for the given &lt;paramref name="definition"/&gt;.</comment>
        <comment type="line" pos:line="184" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="185" pos:column="9">/// &lt;param name="definition"&gt;the definition to compare to&lt;/param&gt;</comment>
        <comment type="line" pos:line="186" pos:column="9">/// &lt;returns&gt;true if the signatures match; false otherwise&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="187" pos:column="9">public</specifier> <name pos:line="187" pos:column="16">bool</name></type> <name pos:line="187" pos:column="21">SignatureMatches</name><parameter_list pos:line="187" pos:column="37">(<param><decl><type><name pos:line="187" pos:column="38">TypeDefinition</name></type> <name pos:line="187" pos:column="53">definition</name></decl></param>)</parameter_list> <block pos:line="187" pos:column="65">{
            <comment type="line" pos:line="188" pos:column="13">//TODO: add checking for type arguments</comment>
            <return pos:line="189" pos:column="13">return <expr><name pos:line="189" pos:column="20">definition</name> <op:operator pos:line="189" pos:column="31">!=</op:operator> <name pos:line="189" pos:column="34">null</name> <op:operator pos:line="189" pos:column="39">&amp;&amp;</op:operator> <name><name pos:line="189" pos:column="42">definition</name><op:operator pos:line="189" pos:column="52">.</op:operator><name pos:line="189" pos:column="53">Name</name></name> <op:operator pos:line="189" pos:column="58">==</op:operator> <name><name pos:line="189" pos:column="61">this</name><op:operator pos:line="189" pos:column="65">.</op:operator><name pos:line="189" pos:column="66">Name</name></name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="192" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="193" pos:column="9">/// Instance method for getting &lt;see cref="TypeUse.XmlName"/&gt;</comment>
        <comment type="line" pos:line="194" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="195" pos:column="9">/// &lt;returns&gt;Returns the XML name for TypeUse&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="196" pos:column="9">public</specifier> <specifier pos:line="196" pos:column="16">override</specifier> <name pos:line="196" pos:column="25">string</name></type> <name pos:line="196" pos:column="32">GetXmlName</name><parameter_list pos:line="196" pos:column="42">()</parameter_list> <block pos:line="196" pos:column="45">{ <return pos:line="196" pos:column="47">return <expr><name><name pos:line="196" pos:column="54">TypeUse</name><op:operator pos:line="196" pos:column="61">.</op:operator><name pos:line="196" pos:column="62">XmlName</name></name></expr>;</return> }</block></function>

        <comment type="line" pos:line="198" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="199" pos:column="9">/// Returns a string representation of this object.</comment>
        <comment type="line" pos:line="200" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="201" pos:column="9">public</specifier> <specifier pos:line="201" pos:column="16">override</specifier> <name pos:line="201" pos:column="25">string</name></type> <name pos:line="201" pos:column="32">ToString</name><parameter_list pos:line="201" pos:column="40">()</parameter_list> <block pos:line="201" pos:column="43">{
            <decl_stmt><decl><type><name pos:line="202" pos:column="13">var</name></type> <name pos:line="202" pos:column="17">sb</name> <init pos:line="202" pos:column="20">= <expr><op:operator pos:line="202" pos:column="22">new</op:operator> <call><name pos:line="202" pos:column="26">StringBuilder</name><argument_list pos:line="202" pos:column="39">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="203" pos:column="13">if<condition pos:line="203" pos:column="15">(<expr><name pos:line="203" pos:column="16">Prefix</name> <op:operator pos:line="203" pos:column="23">!=</op:operator> <name pos:line="203" pos:column="26">null</name></expr>)</condition><then pos:line="203" pos:column="31"> <block pos:line="203" pos:column="32">{
                <expr_stmt><expr><call><name><name pos:line="204" pos:column="17">sb</name><op:operator pos:line="204" pos:column="19">.</op:operator><name pos:line="204" pos:column="20">Append</name></name><argument_list pos:line="204" pos:column="26">(<argument><expr><name pos:line="204" pos:column="27">Prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line" pos:line="205" pos:column="17">//sb.Append('.');</comment>
            }</block></then></if>

            <expr_stmt><expr><call><name><name pos:line="208" pos:column="13">sb</name><op:operator pos:line="208" pos:column="15">.</op:operator><name pos:line="208" pos:column="16">Append</name></name><argument_list pos:line="208" pos:column="22">(<argument><expr><name pos:line="208" pos:column="23">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if pos:line="210" pos:column="13">if<condition pos:line="210" pos:column="15">(<expr><name pos:line="210" pos:column="16">IsGeneric</name></expr>)</condition><then pos:line="210" pos:column="26"> <block pos:line="210" pos:column="27">{
                <expr_stmt><expr><call><name><name pos:line="211" pos:column="17">sb</name><op:operator pos:line="211" pos:column="19">.</op:operator><name pos:line="211" pos:column="20">AppendFormat</name></name><argument_list pos:line="211" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="211" pos:column="33">"&lt;{0}&gt;"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="211" pos:column="42">String</name><op:operator pos:line="211" pos:column="48">.</op:operator><name pos:line="211" pos:column="49">Join</name></name><argument_list pos:line="211" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="211" pos:column="54">","</lit:literal></expr></argument>, <argument><expr><name pos:line="211" pos:column="59">TypeParameters</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <return pos:line="213" pos:column="13">return <expr><call><name><name pos:line="213" pos:column="20">sb</name><op:operator pos:line="213" pos:column="22">.</op:operator><name pos:line="213" pos:column="23">ToString</name></name><argument_list pos:line="213" pos:column="31">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="216" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="217" pos:column="9">/// Processes the child of the current reader position into a child of this object.</comment>
        <comment type="line" pos:line="218" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="219" pos:column="9">/// &lt;param name="reader"&gt;The XML reader&lt;/param&gt;</comment>
        <function><type><specifier pos:line="220" pos:column="9">protected</specifier> <specifier pos:line="220" pos:column="19">override</specifier> <name pos:line="220" pos:column="28">void</name></type> <name pos:line="220" pos:column="33">ReadXmlChild</name><parameter_list pos:line="220" pos:column="45">(<param><decl><type><name pos:line="220" pos:column="46">XmlReader</name></type> <name pos:line="220" pos:column="56">reader</name></decl></param>)</parameter_list> <block pos:line="220" pos:column="64">{
            <if pos:line="221" pos:column="13">if<condition pos:line="221" pos:column="15">(<expr><name pos:line="221" pos:column="16">XmlTypeParametersName</name> <op:operator pos:line="221" pos:column="38">==</op:operator> <name><name pos:line="221" pos:column="41">reader</name><op:operator pos:line="221" pos:column="47">.</op:operator><name pos:line="221" pos:column="48">Name</name></name></expr>)</condition><then pos:line="221" pos:column="53"> <block pos:line="221" pos:column="54">{
                <expr_stmt><expr><call><name pos:line="222" pos:column="17">AddTypeParameters</name><argument_list pos:line="222" pos:column="34">(<argument><expr><call><name><name pos:line="222" pos:column="35">XmlSerialization</name><op:operator pos:line="222" pos:column="51">.</op:operator><name pos:line="222" pos:column="52">ReadChildExpressions</name></name><argument_list pos:line="222" pos:column="72">(<argument><expr><name pos:line="222" pos:column="73">reader</name></expr></argument>)</argument_list></call><op:operator pos:line="222" pos:column="80">.</op:operator><call><name><name pos:line="222" pos:column="81">Cast</name><argument_list pos:line="222" pos:column="85">&lt;<argument><name pos:line="222" pos:column="86">TypeUse</name></argument>&gt;</argument_list></name><argument_list pos:line="222" pos:column="94">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="223" pos:column="15">else <block pos:line="223" pos:column="20">{
                <expr_stmt><expr><call><name><name pos:line="224" pos:column="17">base</name><op:operator pos:line="224" pos:column="21">.</op:operator><name pos:line="224" pos:column="22">ReadXmlChild</name></name><argument_list pos:line="224" pos:column="34">(<argument><expr><name pos:line="224" pos:column="35">reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></function>

        <comment type="line" pos:line="228" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="229" pos:column="9">/// Writes the contents of this object to &lt;paramref name="writer"/&gt;.</comment>
        <comment type="line" pos:line="230" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="231" pos:column="9">/// &lt;param name="writer"&gt;The XML writer to write to&lt;/param&gt;</comment>
        <function><type><specifier pos:line="232" pos:column="9">protected</specifier> <specifier pos:line="232" pos:column="19">override</specifier> <name pos:line="232" pos:column="28">void</name></type> <name pos:line="232" pos:column="33">WriteXmlContents</name><parameter_list pos:line="232" pos:column="49">(<param><decl><type><name pos:line="232" pos:column="50">XmlWriter</name></type> <name pos:line="232" pos:column="60">writer</name></decl></param>)</parameter_list> <block pos:line="232" pos:column="68">{
            <if pos:line="233" pos:column="13">if<condition pos:line="233" pos:column="15">(<expr><name><name pos:line="233" pos:column="16">TypeParameters</name><op:operator pos:line="233" pos:column="30">.</op:operator><name pos:line="233" pos:column="31">Count</name></name> <op:operator pos:line="233" pos:column="37">&gt;</op:operator> <lit:literal type="number" pos:line="233" pos:column="39">0</lit:literal></expr>)</condition><then pos:line="233" pos:column="41"> <block pos:line="233" pos:column="42">{
                <expr_stmt><expr><call><name><name pos:line="234" pos:column="17">XmlSerialization</name><op:operator pos:line="234" pos:column="33">.</op:operator><name><name pos:line="234" pos:column="34">WriteCollection</name><argument_list pos:line="234" pos:column="49">&lt;<argument><name pos:line="234" pos:column="50">TypeUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="234" pos:column="58">(<argument><expr><name pos:line="234" pos:column="59">writer</name></expr></argument>, <argument><expr><name pos:line="234" pos:column="67">XmlTypeParametersName</name></expr></argument>, <argument><expr><name pos:line="234" pos:column="90">TypeParameters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name pos:line="236" pos:column="13">base</name><op:operator pos:line="236" pos:column="17">.</op:operator><name pos:line="236" pos:column="18">WriteXmlContents</name></name><argument_list pos:line="236" pos:column="34">(<argument><expr><name pos:line="236" pos:column="35">writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
