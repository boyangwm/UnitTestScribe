<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data\ParseException.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2013 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">System</name>;</using>

<namespace pos:line="14" pos:column="1">namespace <name><name pos:line="14" pos:column="11">ABB</name><op:operator pos:line="14" pos:column="14">.</op:operator><name pos:line="14" pos:column="15">SrcML</name><op:operator pos:line="14" pos:column="20">.</op:operator><name pos:line="14" pos:column="21">Data</name></name> <block pos:line="14" pos:column="26">{

    <comment type="line" pos:line="16" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="17" pos:column="5">/// Represents an error from an &lt;see cref="AbstractCodeParser"/&gt;. The various parser functions are</comment>
    <comment type="line" pos:line="18" pos:column="5">/// caught by &lt;see cref="AbstractCodeParser.ParseFileUnit(System.Xml.Linq.XElement)"/&gt; and rethrown as</comment>
    <comment type="line" pos:line="19" pos:column="5">/// a ParseException.</comment>
    <comment type="line" pos:line="20" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="21" pos:column="5">public</specifier> class <name pos:line="21" pos:column="18">ParseException</name> <super pos:line="21" pos:column="33">: <name pos:line="21" pos:column="35">Exception</name></super> <block pos:line="21" pos:column="45">{

        <comment type="line" pos:line="23" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="24" pos:column="9">/// Constructs a new ParseException</comment>
        <comment type="line" pos:line="25" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="26" pos:column="9">/// &lt;param name="fileName"&gt;The file name&lt;/param&gt;</comment>
        <comment type="line" pos:line="27" pos:column="9">/// &lt;param name="lineNumber"&gt;The line number&lt;/param&gt;</comment>
        <comment type="line" pos:line="28" pos:column="9">/// &lt;param name="columnNumber"&gt;The column number&lt;/param&gt;</comment>
        <comment type="line" pos:line="29" pos:column="9">/// &lt;param name="parser"&gt;The parser object&lt;/param&gt;</comment>
        <comment type="line" pos:line="30" pos:column="9">/// &lt;param name="message"&gt;Description of the exception&lt;/param&gt;</comment>
        <comment type="line" pos:line="31" pos:column="9">/// &lt;param name="innerException"&gt;The exception being rethrown&lt;/param&gt;</comment>
        <constructor><specifier pos:line="32" pos:column="9">public</specifier> <name pos:line="32" pos:column="16">ParseException</name><parameter_list pos:line="32" pos:column="30">(<param><decl><type><name pos:line="32" pos:column="31">string</name></type> <name pos:line="32" pos:column="38">fileName</name></decl></param>, <param><decl><type><name pos:line="32" pos:column="48">int</name></type> <name pos:line="32" pos:column="52">lineNumber</name></decl></param>, <param><decl><type><name pos:line="32" pos:column="64">int</name></type> <name pos:line="32" pos:column="68">columnNumber</name></decl></param>, <param><decl><type><name pos:line="32" pos:column="82">AbstractCodeParser</name></type> <name pos:line="32" pos:column="101">parser</name></decl></param>, <param><decl><type><name pos:line="32" pos:column="109">string</name></type> <name pos:line="32" pos:column="116">message</name></decl></param>, <param><decl><type><name pos:line="32" pos:column="125">Exception</name></type> <name pos:line="32" pos:column="135">innerException</name></decl></param>)</parameter_list>
            <member_list pos:line="33" pos:column="13">: <call><name pos:line="33" pos:column="15">base</name><argument_list pos:line="33" pos:column="19">(<argument><expr><name pos:line="33" pos:column="20">message</name></expr></argument>, <argument><expr><name pos:line="33" pos:column="29">innerException</name></expr></argument>)</argument_list></call> </member_list><block pos:line="33" pos:column="45">{
            <expr_stmt><expr><name><name pos:line="34" pos:column="13">this</name><op:operator pos:line="34" pos:column="17">.</op:operator><name pos:line="34" pos:column="18">FileName</name></name> <op:operator pos:line="34" pos:column="27">=</op:operator> <name pos:line="34" pos:column="29">fileName</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="35" pos:column="13">this</name><op:operator pos:line="35" pos:column="17">.</op:operator><name pos:line="35" pos:column="18">LineNumber</name></name> <op:operator pos:line="35" pos:column="29">=</op:operator> <name pos:line="35" pos:column="31">lineNumber</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="36" pos:column="13">this</name><op:operator pos:line="36" pos:column="17">.</op:operator><name pos:line="36" pos:column="18">ColumnNumber</name></name> <op:operator pos:line="36" pos:column="31">=</op:operator> <name pos:line="36" pos:column="33">columnNumber</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="37" pos:column="13">this</name><op:operator pos:line="37" pos:column="17">.</op:operator><name pos:line="37" pos:column="18">Parser</name></name> <op:operator pos:line="37" pos:column="25">=</op:operator> <name pos:line="37" pos:column="27">parser</name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="40" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="41" pos:column="9">/// Constructs a new ParseException</comment>
        <comment type="line" pos:line="42" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="43" pos:column="9">/// &lt;param name="fileName"&gt;The file name&lt;/param&gt;</comment>
        <comment type="line" pos:line="44" pos:column="9">/// &lt;param name="parser"&gt;The parser object&lt;/param&gt;</comment>
        <comment type="line" pos:line="45" pos:column="9">/// &lt;param name="message"&gt;Description of the exception&lt;/param&gt;</comment>
        <constructor><specifier pos:line="46" pos:column="9">public</specifier> <name pos:line="46" pos:column="16">ParseException</name><parameter_list pos:line="46" pos:column="30">(<param><decl><type><name pos:line="46" pos:column="31">string</name></type> <name pos:line="46" pos:column="38">fileName</name></decl></param>, <param><decl><type><name pos:line="46" pos:column="48">AbstractCodeParser</name></type> <name pos:line="46" pos:column="67">parser</name></decl></param>, <param><decl><type><name pos:line="46" pos:column="75">string</name></type> <name pos:line="46" pos:column="82">message</name></decl></param>)</parameter_list>
            <member_list pos:line="47" pos:column="13">: <call><name pos:line="47" pos:column="15">base</name><argument_list pos:line="47" pos:column="19">(<argument><expr><name pos:line="47" pos:column="20">message</name></expr></argument>)</argument_list></call> </member_list><block pos:line="47" pos:column="29">{
            <expr_stmt><expr><name><name pos:line="48" pos:column="13">this</name><op:operator pos:line="48" pos:column="17">.</op:operator><name pos:line="48" pos:column="18">FileName</name></name> <op:operator pos:line="48" pos:column="27">=</op:operator> <name pos:line="48" pos:column="29">fileName</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="49" pos:column="13">this</name><op:operator pos:line="49" pos:column="17">.</op:operator><name pos:line="49" pos:column="18">Parser</name></name> <op:operator pos:line="49" pos:column="25">=</op:operator> <name pos:line="49" pos:column="27">parser</name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="52" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="53" pos:column="9">/// Constructs an exception object with a default message.</comment>
        <comment type="line" pos:line="54" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="55" pos:column="9">/// &lt;param name="fileName"&gt;The file name&lt;/param&gt;</comment>
        <comment type="line" pos:line="56" pos:column="9">/// &lt;param name="parser"&gt;The parser object&lt;/param&gt;</comment>
        <constructor><specifier pos:line="57" pos:column="9">public</specifier> <name pos:line="57" pos:column="16">ParseException</name><parameter_list pos:line="57" pos:column="30">(<param><decl><type><name pos:line="57" pos:column="31">string</name></type> <name pos:line="57" pos:column="38">fileName</name></decl></param>, <param><decl><type><name pos:line="57" pos:column="48">AbstractCodeParser</name></type> <name pos:line="57" pos:column="67">parser</name></decl></param>)</parameter_list>
            <member_list pos:line="58" pos:column="13">: <call><name pos:line="58" pos:column="15">base</name><argument_list pos:line="58" pos:column="19">(<argument><expr><call><name><name pos:line="58" pos:column="20">String</name><op:operator pos:line="58" pos:column="26">.</op:operator><name pos:line="58" pos:column="27">Format</name></name><argument_list pos:line="58" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="58" pos:column="34">"Error parsing {0} with the {1} parser"</lit:literal></expr></argument>, <argument><expr><name pos:line="58" pos:column="75">fileName</name></expr></argument>, <argument><expr><name><name pos:line="58" pos:column="85">parser</name><op:operator pos:line="58" pos:column="91">.</op:operator><name pos:line="58" pos:column="92">ParserLanguage</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> </member_list><block pos:line="58" pos:column="109">{
            <expr_stmt><expr><name><name pos:line="59" pos:column="13">this</name><op:operator pos:line="59" pos:column="17">.</op:operator><name pos:line="59" pos:column="18">FileName</name></name> <op:operator pos:line="59" pos:column="27">=</op:operator> <name pos:line="59" pos:column="29">fileName</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="60" pos:column="13">this</name><op:operator pos:line="60" pos:column="17">.</op:operator><name pos:line="60" pos:column="18">Parser</name></name> <op:operator pos:line="60" pos:column="25">=</op:operator> <name pos:line="60" pos:column="27">parser</name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="63" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="64" pos:column="9">/// The column number that caused the exception</comment>
        <comment type="line" pos:line="65" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="66" pos:column="9">public</specifier> <name pos:line="66" pos:column="16">int</name></type> <name pos:line="66" pos:column="20">ColumnNumber</name> <block pos:line="66" pos:column="33">{ <function_decl><name pos:line="66" pos:column="35">get</name>;</function_decl> <function_decl><specifier pos:line="66" pos:column="40">protected</specifier> <name pos:line="66" pos:column="50">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="68" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="69" pos:column="9">/// The file name that caused the exception</comment>
        <comment type="line" pos:line="70" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="71" pos:column="9">public</specifier> <name pos:line="71" pos:column="16">string</name></type> <name pos:line="71" pos:column="23">FileName</name> <block pos:line="71" pos:column="32">{ <function_decl><name pos:line="71" pos:column="34">get</name>;</function_decl> <function_decl><specifier pos:line="71" pos:column="39">protected</specifier> <name pos:line="71" pos:column="49">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="73" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="74" pos:column="9">/// The line number that caused the exception</comment>
        <comment type="line" pos:line="75" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="76" pos:column="9">public</specifier> <name pos:line="76" pos:column="16">int</name></type> <name pos:line="76" pos:column="20">LineNumber</name> <block pos:line="76" pos:column="31">{ <function_decl><name pos:line="76" pos:column="33">get</name>;</function_decl> <function_decl><specifier pos:line="76" pos:column="38">protected</specifier> <name pos:line="76" pos:column="48">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="78" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="79" pos:column="9">/// The parser object that threw the exception</comment>
        <comment type="line" pos:line="80" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="81" pos:column="9">public</specifier> <name pos:line="81" pos:column="16">AbstractCodeParser</name></type> <name pos:line="81" pos:column="35">Parser</name> <block pos:line="81" pos:column="42">{ <function_decl><name pos:line="81" pos:column="44">get</name>;</function_decl> <function_decl><specifier pos:line="81" pos:column="49">protected</specifier> <name pos:line="81" pos:column="59">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="83" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="84" pos:column="9">/// A string representation of the exception. Includes the file name, line and column numbers, and the exception message.</comment>
        <comment type="line" pos:line="85" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="86" pos:column="9">public</specifier> <specifier pos:line="86" pos:column="16">override</specifier> <name pos:line="86" pos:column="25">string</name></type> <name pos:line="86" pos:column="32">ToString</name><parameter_list pos:line="86" pos:column="40">()</parameter_list> <block pos:line="86" pos:column="43">{
            <return pos:line="87" pos:column="13">return <expr><call><name><name pos:line="87" pos:column="20">string</name><op:operator pos:line="87" pos:column="26">.</op:operator><name pos:line="87" pos:column="27">Format</name></name><argument_list pos:line="87" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="87" pos:column="34">"Error parsing {0} ({1},{2}):{3}{4}"</lit:literal></expr></argument>, <argument><expr><name pos:line="87" pos:column="72">FileName</name></expr></argument>, <argument><expr><name pos:line="87" pos:column="82">LineNumber</name></expr></argument>, <argument><expr><name pos:line="87" pos:column="94">ColumnNumber</name></expr></argument>, <argument><expr><name><name pos:line="87" pos:column="108">Environment</name><op:operator pos:line="87" pos:column="119">.</op:operator><name pos:line="87" pos:column="120">NewLine</name></name></expr></argument>, <argument><expr><call><name><name pos:line="87" pos:column="129">base</name><op:operator pos:line="87" pos:column="133">.</op:operator><name pos:line="87" pos:column="134">ToString</name></name><argument_list pos:line="87" pos:column="142">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
