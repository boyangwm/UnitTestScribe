<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data.Test\CPlusPlusCodeParserTests.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2013 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *    Patrick Francis (ABB Group) - implementation and documentation
 *****************************************************************************/</comment>

<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">ABB</name><op:operator pos:line="13" pos:column="10">.</op:operator><name pos:line="13" pos:column="11">SrcML</name><op:operator pos:line="13" pos:column="16">.</op:operator><name pos:line="13" pos:column="17">Test</name><op:operator pos:line="13" pos:column="21">.</op:operator><name pos:line="13" pos:column="22">Utilities</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">NUnit</name><op:operator pos:line="14" pos:column="12">.</op:operator><name pos:line="14" pos:column="13">Framework</name></name>;</using>
<using pos:line="15" pos:column="1">using <name pos:line="15" pos:column="7">System</name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Linq</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Xml</name><op:operator pos:line="17" pos:column="17">.</op:operator><name pos:line="17" pos:column="18">Linq</name></name>;</using>

<namespace pos:line="19" pos:column="1">namespace <name><name pos:line="19" pos:column="11">ABB</name><op:operator pos:line="19" pos:column="14">.</op:operator><name pos:line="19" pos:column="15">SrcML</name><op:operator pos:line="19" pos:column="20">.</op:operator><name pos:line="19" pos:column="21">Data</name><op:operator pos:line="19" pos:column="25">.</op:operator><name pos:line="19" pos:column="26">Test</name></name> <block pos:line="19" pos:column="31">{

    <class><attribute pos:line="21" pos:column="5">[<expr><name pos:line="21" pos:column="6">TestFixture</name></expr>]</attribute>
    <attribute pos:line="22" pos:column="5">[<expr><call><name pos:line="22" pos:column="6">Category</name><argument_list pos:line="22" pos:column="14">(<argument><expr><lit:literal type="string" pos:line="22" pos:column="15">"Build"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="23" pos:column="5">public</specifier> class <name pos:line="23" pos:column="18">CPlusPlusCodeParserTests</name> <block pos:line="23" pos:column="43">{
        <decl_stmt><decl><type><specifier pos:line="24" pos:column="9">private</specifier> <name pos:line="24" pos:column="17">AbstractCodeParser</name></type> <name pos:line="24" pos:column="36">codeParser</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="25" pos:column="9">private</specifier> <name pos:line="25" pos:column="17">SrcMLFileUnitSetup</name></type> <name pos:line="25" pos:column="36">fileSetup</name></decl>;</decl_stmt>

        <function><type><attribute pos:line="27" pos:column="9">[<expr><name pos:line="27" pos:column="10">TestFixtureSetUp</name></expr>]</attribute>
        <specifier pos:line="28" pos:column="9">public</specifier> <name pos:line="28" pos:column="16">void</name></type> <name pos:line="28" pos:column="21">ClassSetup</name><parameter_list pos:line="28" pos:column="31">()</parameter_list> <block pos:line="28" pos:column="34">{
            <expr_stmt><expr><name pos:line="29" pos:column="13">codeParser</name> <op:operator pos:line="29" pos:column="24">=</op:operator> <op:operator pos:line="29" pos:column="26">new</op:operator> <call><name pos:line="29" pos:column="30">CPlusPlusCodeParser</name><argument_list pos:line="29" pos:column="49">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="30" pos:column="13">fileSetup</name> <op:operator pos:line="30" pos:column="23">=</op:operator> <op:operator pos:line="30" pos:column="25">new</op:operator> <call><name pos:line="30" pos:column="29">SrcMLFileUnitSetup</name><argument_list pos:line="30" pos:column="47">(<argument><expr><name><name pos:line="30" pos:column="48">Language</name><op:operator pos:line="30" pos:column="56">.</op:operator><name pos:line="30" pos:column="57">CPlusPlus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="33" pos:column="9">[<expr><name pos:line="33" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="34" pos:column="9">public</specifier> <name pos:line="34" pos:column="16">void</name></type> <name pos:line="34" pos:column="21">TestCreateTypeDefinitions_Class</name><parameter_list pos:line="34" pos:column="52">()</parameter_list> <block pos:line="34" pos:column="55">{
            <comment type="line" pos:line="35" pos:column="13">// class A { };</comment>
            <decl_stmt><decl><type><name pos:line="36" pos:column="13">string</name></type> <name pos:line="36" pos:column="20">xml</name> <init pos:line="36" pos:column="24">= <expr><lit:literal type="string" pos:line="36" pos:column="26">@"&lt;class&gt;class &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{&lt;private type=""default&gt; &lt;/private&gt;}&lt;/block&gt;;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="37" pos:column="13">XElement</name></type> <name pos:line="37" pos:column="22">xmlElement</name> <init pos:line="37" pos:column="33">= <expr><call><name><name pos:line="37" pos:column="35">fileSetup</name><op:operator pos:line="37" pos:column="44">.</op:operator><name pos:line="37" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="37" pos:column="69">(<argument><expr><name pos:line="37" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="37" pos:column="75">"A.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="39" pos:column="13">var</name></type> <name pos:line="39" pos:column="17">globalScope</name> <init pos:line="39" pos:column="29">= <expr><call><name><name pos:line="39" pos:column="31">codeParser</name><op:operator pos:line="39" pos:column="41">.</op:operator><name pos:line="39" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="39" pos:column="55">(<argument><expr><name pos:line="39" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="40" pos:column="13">var</name></type> <name pos:line="40" pos:column="17">actual</name> <init pos:line="40" pos:column="24">= <expr><call><name><name pos:line="40" pos:column="26">globalScope</name><op:operator pos:line="40" pos:column="37">.</op:operator><name pos:line="40" pos:column="38">ChildStatements</name><op:operator pos:line="40" pos:column="53">.</op:operator><name pos:line="40" pos:column="54">First</name></name><argument_list pos:line="40" pos:column="59">()</argument_list></call> <op:operator pos:line="40" pos:column="62">as</op:operator> <name pos:line="40" pos:column="65">TypeDefinition</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="42" pos:column="13">Assert</name><op:operator pos:line="42" pos:column="19">.</op:operator><name pos:line="42" pos:column="20">IsNotNull</name></name><argument_list pos:line="42" pos:column="29">(<argument><expr><name pos:line="42" pos:column="30">actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="43" pos:column="13">Assert</name><op:operator pos:line="43" pos:column="19">.</op:operator><name pos:line="43" pos:column="20">AreEqual</name></name><argument_list pos:line="43" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="43" pos:column="29">"A"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="43" pos:column="34">actual</name><op:operator pos:line="43" pos:column="40">.</op:operator><name pos:line="43" pos:column="41">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="44" pos:column="13">Assert</name><op:operator pos:line="44" pos:column="19">.</op:operator><name pos:line="44" pos:column="20">AreEqual</name></name><argument_list pos:line="44" pos:column="28">(<argument><expr><name><name pos:line="44" pos:column="29">TypeKind</name><op:operator pos:line="44" pos:column="37">.</op:operator><name pos:line="44" pos:column="38">Class</name></name></expr></argument>, <argument><expr><name><name pos:line="44" pos:column="45">actual</name><op:operator pos:line="44" pos:column="51">.</op:operator><name pos:line="44" pos:column="52">Kind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="45" pos:column="13">Assert</name><op:operator pos:line="45" pos:column="19">.</op:operator><name pos:line="45" pos:column="20">That</name></name><argument_list pos:line="45" pos:column="24">(<argument><expr><name><name pos:line="45" pos:column="25">globalScope</name><op:operator pos:line="45" pos:column="36">.</op:operator><name pos:line="45" pos:column="37">IsGlobal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="46" pos:column="13">Assert</name><op:operator pos:line="46" pos:column="19">.</op:operator><name pos:line="46" pos:column="20">AreSame</name></name><argument_list pos:line="46" pos:column="27">(<argument><expr><name pos:line="46" pos:column="28">globalScope</name></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="41">actual</name><op:operator pos:line="46" pos:column="47">.</op:operator><name pos:line="46" pos:column="48">ParentStatement</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="49" pos:column="9">[<expr><name pos:line="49" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="50" pos:column="9">public</specifier> <name pos:line="50" pos:column="16">void</name></type> <name pos:line="50" pos:column="21">TestCreateTypeDefinitions_ClassDeclaration</name><parameter_list pos:line="50" pos:column="63">()</parameter_list> <block pos:line="50" pos:column="66">{
            <comment type="line" pos:line="51" pos:column="13">//class A;</comment>
            <decl_stmt><decl><type><name pos:line="52" pos:column="13">string</name></type> <name pos:line="52" pos:column="20">xml</name> <init pos:line="52" pos:column="24">= <expr><lit:literal type="string" pos:line="52" pos:column="26">@"&lt;class_decl&gt;class &lt;name&gt;A&lt;/name&gt;;&lt;/class_decl&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="53" pos:column="13">XElement</name></type> <name pos:line="53" pos:column="22">xmlElement</name> <init pos:line="53" pos:column="33">= <expr><call><name><name pos:line="53" pos:column="35">fileSetup</name><op:operator pos:line="53" pos:column="44">.</op:operator><name pos:line="53" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="53" pos:column="69">(<argument><expr><name pos:line="53" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="53" pos:column="75">"A.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="55" pos:column="13">var</name></type> <name pos:line="55" pos:column="17">globalScope</name> <init pos:line="55" pos:column="29">= <expr><call><name><name pos:line="55" pos:column="31">codeParser</name><op:operator pos:line="55" pos:column="41">.</op:operator><name pos:line="55" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="55" pos:column="55">(<argument><expr><name pos:line="55" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="56" pos:column="13">var</name></type> <name pos:line="56" pos:column="17">actual</name> <init pos:line="56" pos:column="24">= <expr><call><name><name pos:line="56" pos:column="26">globalScope</name><op:operator pos:line="56" pos:column="37">.</op:operator><name pos:line="56" pos:column="38">ChildStatements</name><op:operator pos:line="56" pos:column="53">.</op:operator><name pos:line="56" pos:column="54">First</name></name><argument_list pos:line="56" pos:column="59">()</argument_list></call> <op:operator pos:line="56" pos:column="62">as</op:operator> <name pos:line="56" pos:column="65">TypeDefinition</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="58" pos:column="13">Assert</name><op:operator pos:line="58" pos:column="19">.</op:operator><name pos:line="58" pos:column="20">IsNotNull</name></name><argument_list pos:line="58" pos:column="29">(<argument><expr><name pos:line="58" pos:column="30">actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="59" pos:column="13">Assert</name><op:operator pos:line="59" pos:column="19">.</op:operator><name pos:line="59" pos:column="20">AreEqual</name></name><argument_list pos:line="59" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="59" pos:column="29">"A"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="59" pos:column="34">actual</name><op:operator pos:line="59" pos:column="40">.</op:operator><name pos:line="59" pos:column="41">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="60" pos:column="13">Assert</name><op:operator pos:line="60" pos:column="19">.</op:operator><name pos:line="60" pos:column="20">AreEqual</name></name><argument_list pos:line="60" pos:column="28">(<argument><expr><name><name pos:line="60" pos:column="29">TypeKind</name><op:operator pos:line="60" pos:column="37">.</op:operator><name pos:line="60" pos:column="38">Class</name></name></expr></argument>, <argument><expr><name><name pos:line="60" pos:column="45">actual</name><op:operator pos:line="60" pos:column="51">.</op:operator><name pos:line="60" pos:column="52">Kind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="61" pos:column="13">Assert</name><op:operator pos:line="61" pos:column="19">.</op:operator><name pos:line="61" pos:column="20">That</name></name><argument_list pos:line="61" pos:column="24">(<argument><expr><name><name pos:line="61" pos:column="25">globalScope</name><op:operator pos:line="61" pos:column="36">.</op:operator><name pos:line="61" pos:column="37">IsGlobal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="62" pos:column="13">Assert</name><op:operator pos:line="62" pos:column="19">.</op:operator><name pos:line="62" pos:column="20">AreSame</name></name><argument_list pos:line="62" pos:column="27">(<argument><expr><name pos:line="62" pos:column="28">globalScope</name></expr></argument>, <argument><expr><name><name pos:line="62" pos:column="41">actual</name><op:operator pos:line="62" pos:column="47">.</op:operator><name pos:line="62" pos:column="48">ParentStatement</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="65" pos:column="9">[<expr><name pos:line="65" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="66" pos:column="9">public</specifier> <name pos:line="66" pos:column="16">void</name></type> <name pos:line="66" pos:column="21">TestClassWithDeclaredVariable</name><parameter_list pos:line="66" pos:column="50">()</parameter_list> <block pos:line="66" pos:column="53">{
            <comment type="line" pos:line="67" pos:column="13">//class A {</comment>
            <comment type="line" pos:line="68" pos:column="13">//    int a;</comment>
            <comment type="line" pos:line="69" pos:column="13">//};</comment>
            <decl_stmt><decl><type><name pos:line="70" pos:column="13">string</name></type> <name pos:line="70" pos:column="20">xml</name> <init pos:line="70" pos:column="24">= <expr><lit:literal type="string" pos:line="70" pos:column="26">@"&lt;class&gt;class &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{&lt;private type=""default&gt;
    &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;a&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
&lt;/private&gt;}&lt;/block&gt;;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="74" pos:column="13">var</name></type> <name pos:line="74" pos:column="17">globalScope</name> <init pos:line="74" pos:column="29">= <expr><call><name><name pos:line="74" pos:column="31">codeParser</name><op:operator pos:line="74" pos:column="41">.</op:operator><name pos:line="74" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="74" pos:column="55">(<argument><expr><call><name><name pos:line="74" pos:column="56">fileSetup</name><op:operator pos:line="74" pos:column="65">.</op:operator><name pos:line="74" pos:column="66">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="74" pos:column="90">(<argument><expr><name pos:line="74" pos:column="91">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="74" pos:column="96">"A.h"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="75" pos:column="13">Assert</name><op:operator pos:line="75" pos:column="19">.</op:operator><name pos:line="75" pos:column="20">IsTrue</name></name><argument_list pos:line="75" pos:column="26">(<argument><expr><name><name pos:line="75" pos:column="27">globalScope</name><op:operator pos:line="75" pos:column="38">.</op:operator><name pos:line="75" pos:column="39">IsGlobal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="77" pos:column="13">var</name></type> <name pos:line="77" pos:column="17">classA</name> <init pos:line="77" pos:column="24">= <expr><call><name><name pos:line="77" pos:column="26">globalScope</name><op:operator pos:line="77" pos:column="37">.</op:operator><name pos:line="77" pos:column="38">ChildStatements</name><op:operator pos:line="77" pos:column="53">.</op:operator><name pos:line="77" pos:column="54">First</name></name><argument_list pos:line="77" pos:column="59">()</argument_list></call> <op:operator pos:line="77" pos:column="62">as</op:operator> <name pos:line="77" pos:column="65">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="78" pos:column="13">Assert</name><op:operator pos:line="78" pos:column="19">.</op:operator><name pos:line="78" pos:column="20">IsNotNull</name></name><argument_list pos:line="78" pos:column="29">(<argument><expr><name pos:line="78" pos:column="30">classA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="79" pos:column="13">Assert</name><op:operator pos:line="79" pos:column="19">.</op:operator><name pos:line="79" pos:column="20">AreEqual</name></name><argument_list pos:line="79" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="79" pos:column="29">"A"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="79" pos:column="34">classA</name><op:operator pos:line="79" pos:column="40">.</op:operator><name pos:line="79" pos:column="41">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="80" pos:column="13">Assert</name><op:operator pos:line="80" pos:column="19">.</op:operator><name pos:line="80" pos:column="20">AreEqual</name></name><argument_list pos:line="80" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="80" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="80" pos:column="32">classA</name><op:operator pos:line="80" pos:column="38">.</op:operator><name pos:line="80" pos:column="39">ChildStatements</name><op:operator pos:line="80" pos:column="54">.</op:operator><name pos:line="80" pos:column="55">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="82" pos:column="13">var</name></type> <name pos:line="82" pos:column="17">fieldStmt</name> <init pos:line="82" pos:column="27">= <expr><call><name><name pos:line="82" pos:column="29">classA</name><op:operator pos:line="82" pos:column="35">.</op:operator><name pos:line="82" pos:column="36">ChildStatements</name><op:operator pos:line="82" pos:column="51">.</op:operator><name pos:line="82" pos:column="52">First</name></name><argument_list pos:line="82" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="83" pos:column="13">Assert</name><op:operator pos:line="83" pos:column="19">.</op:operator><name pos:line="83" pos:column="20">IsNotNull</name></name><argument_list pos:line="83" pos:column="29">(<argument><expr><name pos:line="83" pos:column="30">fieldStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="84" pos:column="13">var</name></type> <name pos:line="84" pos:column="17">field</name> <init pos:line="84" pos:column="23">= <expr><name><name pos:line="84" pos:column="25">fieldStmt</name><op:operator pos:line="84" pos:column="34">.</op:operator><name pos:line="84" pos:column="35">Content</name></name> <op:operator pos:line="84" pos:column="43">as</op:operator> <name pos:line="84" pos:column="46">VariableDeclaration</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="85" pos:column="13">Assert</name><op:operator pos:line="85" pos:column="19">.</op:operator><name pos:line="85" pos:column="20">IsNotNull</name></name><argument_list pos:line="85" pos:column="29">(<argument><expr><name pos:line="85" pos:column="30">field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="86" pos:column="13">Assert</name><op:operator pos:line="86" pos:column="19">.</op:operator><name pos:line="86" pos:column="20">AreEqual</name></name><argument_list pos:line="86" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="86" pos:column="29">"a"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="86" pos:column="34">field</name><op:operator pos:line="86" pos:column="39">.</op:operator><name pos:line="86" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="87" pos:column="13">Assert</name><op:operator pos:line="87" pos:column="19">.</op:operator><name pos:line="87" pos:column="20">AreEqual</name></name><argument_list pos:line="87" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="87" pos:column="29">"int"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="87" pos:column="36">field</name><op:operator pos:line="87" pos:column="41">.</op:operator><name pos:line="87" pos:column="42">VariableType</name><op:operator pos:line="87" pos:column="54">.</op:operator><name pos:line="87" pos:column="55">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        

        <function><type><attribute pos:line="92" pos:column="9">[<expr><name pos:line="92" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="93" pos:column="9">public</specifier> <name pos:line="93" pos:column="16">void</name></type> <name pos:line="93" pos:column="21">TestFreeStandingBlock</name><parameter_list pos:line="93" pos:column="42">()</parameter_list> <block pos:line="93" pos:column="45">{
            <comment type="line" pos:line="94" pos:column="13">//{</comment>
            <comment type="line" pos:line="95" pos:column="13">//	int foo = 42;</comment>
            <comment type="line" pos:line="96" pos:column="13">//	MethodCall(foo);</comment>
            <comment type="line" pos:line="97" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="98" pos:column="13">string</name></type> <name pos:line="98" pos:column="20">xml</name> <init pos:line="98" pos:column="24">= <expr><lit:literal type="string" pos:line="98" pos:column="26">@"&lt;block&gt;{
	&lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;foo&lt;/name&gt; =&lt;init&gt; &lt;expr&gt;&lt;lit:literal type=""number&gt;42&lt;/lit:literal&gt;&lt;/expr&gt;&lt;/init&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
	&lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;MethodCall&lt;/name&gt;&lt;argument_list&gt;(&lt;argument&gt;&lt;expr&gt;&lt;name&gt;foo&lt;/name&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
}&lt;/block&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="102" pos:column="13">XElement</name></type> <name pos:line="102" pos:column="22">xmlElement</name> <init pos:line="102" pos:column="33">= <expr><call><name><name pos:line="102" pos:column="35">fileSetup</name><op:operator pos:line="102" pos:column="44">.</op:operator><name pos:line="102" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="102" pos:column="69">(<argument><expr><name pos:line="102" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="102" pos:column="75">"A.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="104" pos:column="13">var</name></type> <name pos:line="104" pos:column="17">globalScope</name> <init pos:line="104" pos:column="29">= <expr><call><name><name pos:line="104" pos:column="31">codeParser</name><op:operator pos:line="104" pos:column="41">.</op:operator><name pos:line="104" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="104" pos:column="55">(<argument><expr><name pos:line="104" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="105" pos:column="13">var</name></type> <name pos:line="105" pos:column="17">firstChild</name> <init pos:line="105" pos:column="28">= <expr><call><name><name pos:line="105" pos:column="30">globalScope</name><op:operator pos:line="105" pos:column="41">.</op:operator><name pos:line="105" pos:column="42">ChildStatements</name><op:operator pos:line="105" pos:column="57">.</op:operator><name pos:line="105" pos:column="58">First</name></name><argument_list pos:line="105" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="107" pos:column="13">Assert</name><op:operator pos:line="107" pos:column="19">.</op:operator><name><name pos:line="107" pos:column="20">IsInstanceOf</name><argument_list pos:line="107" pos:column="32">&lt;<argument><name pos:line="107" pos:column="33">BlockStatement</name></argument>&gt;</argument_list></name></name><argument_list pos:line="107" pos:column="48">(<argument><expr><name pos:line="107" pos:column="49">firstChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <decl_stmt><decl><type><name pos:line="109" pos:column="13">var</name></type> <name pos:line="109" pos:column="17">actual</name> <init pos:line="109" pos:column="24">= <expr><name pos:line="109" pos:column="26">firstChild</name> <op:operator pos:line="109" pos:column="37">as</op:operator> <name pos:line="109" pos:column="40">BlockStatement</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="110" pos:column="13">Assert</name><op:operator pos:line="110" pos:column="19">.</op:operator><name pos:line="110" pos:column="20">IsNull</name></name><argument_list pos:line="110" pos:column="26">(<argument><expr><name><name pos:line="110" pos:column="27">actual</name><op:operator pos:line="110" pos:column="33">.</op:operator><name pos:line="110" pos:column="34">Content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="111" pos:column="13">Assert</name><op:operator pos:line="111" pos:column="19">.</op:operator><name pos:line="111" pos:column="20">AreEqual</name></name><argument_list pos:line="111" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="111" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="111" pos:column="32">actual</name><op:operator pos:line="111" pos:column="38">.</op:operator><name pos:line="111" pos:column="39">ChildStatements</name><op:operator pos:line="111" pos:column="54">.</op:operator><name pos:line="111" pos:column="55">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="112" pos:column="13">Assert</name><op:operator pos:line="112" pos:column="19">.</op:operator><name pos:line="112" pos:column="20">That</name></name><argument_list pos:line="112" pos:column="24">(<argument><expr><name><name pos:line="112" pos:column="25">globalScope</name><op:operator pos:line="112" pos:column="36">.</op:operator><name pos:line="112" pos:column="37">IsGlobal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="113" pos:column="13">Assert</name><op:operator pos:line="113" pos:column="19">.</op:operator><name pos:line="113" pos:column="20">AreSame</name></name><argument_list pos:line="113" pos:column="27">(<argument><expr><name pos:line="113" pos:column="28">globalScope</name></expr></argument>, <argument><expr><name><name pos:line="113" pos:column="41">actual</name><op:operator pos:line="113" pos:column="47">.</op:operator><name pos:line="113" pos:column="48">ParentStatement</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="116" pos:column="9">[<expr><name pos:line="116" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="117" pos:column="9">public</specifier> <name pos:line="117" pos:column="16">void</name></type> <name pos:line="117" pos:column="21">TestExternStatement_Single</name><parameter_list pos:line="117" pos:column="47">()</parameter_list> <block pos:line="117" pos:column="50">{
            <comment type="line" pos:line="118" pos:column="13">//extern "C" int MyGlobalVar;</comment>
            <decl_stmt><decl><type><name pos:line="119" pos:column="13">string</name></type> <name pos:line="119" pos:column="20">xml</name> <init pos:line="119" pos:column="24">= <expr><lit:literal type="string" pos:line="119" pos:column="26">@"&lt;extern&gt;extern &lt;lit:literal type=""string&gt;""C&lt;/lit:literal&gt; &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;MyGlobalVar&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;&lt;/extern&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="120" pos:column="13">XElement</name></type> <name pos:line="120" pos:column="22">xmlElement</name> <init pos:line="120" pos:column="33">= <expr><call><name><name pos:line="120" pos:column="35">fileSetup</name><op:operator pos:line="120" pos:column="44">.</op:operator><name pos:line="120" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="120" pos:column="69">(<argument><expr><name pos:line="120" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="120" pos:column="75">"A.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="122" pos:column="13">var</name></type> <name pos:line="122" pos:column="17">globalScope</name> <init pos:line="122" pos:column="29">= <expr><call><name><name pos:line="122" pos:column="31">codeParser</name><op:operator pos:line="122" pos:column="41">.</op:operator><name pos:line="122" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="122" pos:column="55">(<argument><expr><name pos:line="122" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="123" pos:column="13">var</name></type> <name pos:line="123" pos:column="17">actual</name> <init pos:line="123" pos:column="24">= <expr><call><name><name pos:line="123" pos:column="26">globalScope</name><op:operator pos:line="123" pos:column="37">.</op:operator><name pos:line="123" pos:column="38">ChildStatements</name><op:operator pos:line="123" pos:column="53">.</op:operator><name pos:line="123" pos:column="54">First</name></name><argument_list pos:line="123" pos:column="59">()</argument_list></call> <op:operator pos:line="123" pos:column="62">as</op:operator> <name pos:line="123" pos:column="65">ExternStatement</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="125" pos:column="13">Assert</name><op:operator pos:line="125" pos:column="19">.</op:operator><name pos:line="125" pos:column="20">IsNotNull</name></name><argument_list pos:line="125" pos:column="29">(<argument><expr><name pos:line="125" pos:column="30">actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="126" pos:column="13">Assert</name><op:operator pos:line="126" pos:column="19">.</op:operator><name pos:line="126" pos:column="20">AreEqual</name></name><argument_list pos:line="126" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="126" pos:column="29">"\"C\""</lit:literal></expr></argument>, <argument><expr><name><name pos:line="126" pos:column="38">actual</name><op:operator pos:line="126" pos:column="44">.</op:operator><name pos:line="126" pos:column="45">LinkageType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="127" pos:column="13">Assert</name><op:operator pos:line="127" pos:column="19">.</op:operator><name pos:line="127" pos:column="20">AreEqual</name></name><argument_list pos:line="127" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="127" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="127" pos:column="32">actual</name><op:operator pos:line="127" pos:column="38">.</op:operator><name pos:line="127" pos:column="39">ChildStatements</name><op:operator pos:line="127" pos:column="54">.</op:operator><name pos:line="127" pos:column="55">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
        }</block></function>

        <function><type><attribute pos:line="131" pos:column="9">[<expr><name pos:line="131" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="132" pos:column="9">public</specifier> <name pos:line="132" pos:column="16">void</name></type> <name pos:line="132" pos:column="21">TestExternStatement_Block</name><parameter_list pos:line="132" pos:column="46">()</parameter_list> <block pos:line="132" pos:column="49">{
            <comment type="line" pos:line="133" pos:column="13">//extern "C" {</comment>
            <comment type="line" pos:line="134" pos:column="13">//  int globalVar1;</comment>
            <comment type="line" pos:line="135" pos:column="13">//  int globalVar2;</comment>
            <comment type="line" pos:line="136" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="137" pos:column="13">string</name></type> <name pos:line="137" pos:column="20">xml</name> <init pos:line="137" pos:column="24">= <expr><lit:literal type="string" pos:line="137" pos:column="26">@"&lt;extern&gt;extern &lt;lit:literal type=""string&gt;""C&lt;/lit:literal&gt; &lt;block&gt;{
  &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;globalVar1&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
  &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;globalVar2&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
}&lt;/block&gt;&lt;/extern&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="141" pos:column="13">XElement</name></type> <name pos:line="141" pos:column="22">xmlElement</name> <init pos:line="141" pos:column="33">= <expr><call><name><name pos:line="141" pos:column="35">fileSetup</name><op:operator pos:line="141" pos:column="44">.</op:operator><name pos:line="141" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="141" pos:column="69">(<argument><expr><name pos:line="141" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="141" pos:column="75">"A.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="143" pos:column="13">var</name></type> <name pos:line="143" pos:column="17">globalScope</name> <init pos:line="143" pos:column="29">= <expr><call><name><name pos:line="143" pos:column="31">codeParser</name><op:operator pos:line="143" pos:column="41">.</op:operator><name pos:line="143" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="143" pos:column="55">(<argument><expr><name pos:line="143" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="144" pos:column="13">var</name></type> <name pos:line="144" pos:column="17">actual</name> <init pos:line="144" pos:column="24">= <expr><call><name><name pos:line="144" pos:column="26">globalScope</name><op:operator pos:line="144" pos:column="37">.</op:operator><name pos:line="144" pos:column="38">ChildStatements</name><op:operator pos:line="144" pos:column="53">.</op:operator><name pos:line="144" pos:column="54">First</name></name><argument_list pos:line="144" pos:column="59">()</argument_list></call> <op:operator pos:line="144" pos:column="62">as</op:operator> <name pos:line="144" pos:column="65">ExternStatement</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="146" pos:column="13">Assert</name><op:operator pos:line="146" pos:column="19">.</op:operator><name pos:line="146" pos:column="20">IsNotNull</name></name><argument_list pos:line="146" pos:column="29">(<argument><expr><name pos:line="146" pos:column="30">actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="147" pos:column="13">Assert</name><op:operator pos:line="147" pos:column="19">.</op:operator><name pos:line="147" pos:column="20">AreEqual</name></name><argument_list pos:line="147" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="147" pos:column="29">"\"C\""</lit:literal></expr></argument>, <argument><expr><name><name pos:line="147" pos:column="38">actual</name><op:operator pos:line="147" pos:column="44">.</op:operator><name pos:line="147" pos:column="45">LinkageType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="148" pos:column="13">Assert</name><op:operator pos:line="148" pos:column="19">.</op:operator><name pos:line="148" pos:column="20">AreEqual</name></name><argument_list pos:line="148" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="148" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="148" pos:column="32">actual</name><op:operator pos:line="148" pos:column="38">.</op:operator><name pos:line="148" pos:column="39">ChildStatements</name><op:operator pos:line="148" pos:column="54">.</op:operator><name pos:line="148" pos:column="55">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
        }</block></function>

        <function><type><attribute pos:line="152" pos:column="9">[<expr><name pos:line="152" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="153" pos:column="9">public</specifier> <name pos:line="153" pos:column="16">void</name></type> <name pos:line="153" pos:column="21">TestConstructor_CallToSelf</name><parameter_list pos:line="153" pos:column="47">()</parameter_list> <block pos:line="153" pos:column="50">{
            <comment type="line" pos:line="154" pos:column="13">// test.h </comment>
            <comment type="line" pos:line="155" pos:column="13">//class MyClass {</comment>
            <comment type="line" pos:line="156" pos:column="13">//public:</comment>
            <comment type="line" pos:line="157" pos:column="13">//   MyClass() : MyClass(0) { } </comment>
            <comment type="line" pos:line="158" pos:column="13">//   MyClass(int foo) { } </comment>
            <comment type="line" pos:line="159" pos:column="13">//};</comment>
            <decl_stmt><decl><type><name pos:line="160" pos:column="13">string</name></type> <name pos:line="160" pos:column="20">xml</name> <init pos:line="160" pos:column="24">= <expr><lit:literal type="string" pos:line="160" pos:column="26">@"&lt;class pos:line=""1"" pos:column="&gt;class &lt;name pos:line=""1"" pos:column="&gt;MyClass&lt;/name&gt; &lt;block pos:line=""1"" pos:column=""&gt;{&lt;private type=""default"" pos:line=""1"" pos:column=&gt;
&lt;/private&gt;&lt;public pos:line=""2"" pos:column="&gt;public:
   &lt;constructor&gt;&lt;name pos:line=""3"" pos:column="&gt;MyClass&lt;/name&gt;&lt;parameter_list pos:line=""3"" pos:column=""&gt;()&lt;/parameter_list&gt; &lt;member_list pos:line=""3"" pos:column=""&gt;: &lt;call&gt;&lt;name pos:line=""3"" pos:column=""&gt;MyClass&lt;/name&gt;&lt;argument_list pos:line=""3"" pos:column=""&gt;(&lt;argument&gt;&lt;expr&gt;&lt;lit:literal type=""number"" pos:line=""3"" pos:column=&gt;0&lt;/lit:literal&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt; &lt;/member_list&gt;&lt;block pos:line=""3"" pos:column=""&gt;{ }&lt;/block&gt;&lt;/constructor&gt; 
   &lt;constructor&gt;&lt;name pos:line=""4"" pos:column="&gt;MyClass&lt;/name&gt;&lt;parameter_list pos:line=""4"" pos:column=""&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""4"" pos:column=""&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""4"" pos:column=""&gt;foo&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt; &lt;block pos:line=""4"" pos:column=""&gt;{ }&lt;/block&gt;&lt;/constructor&gt; 
&lt;/public&gt;}&lt;/block&gt;;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="165" pos:column="13">var</name></type> <name pos:line="165" pos:column="17">unit</name> <init pos:line="165" pos:column="22">= <expr><call><name><name pos:line="165" pos:column="24">fileSetup</name><op:operator pos:line="165" pos:column="33">.</op:operator><name pos:line="165" pos:column="34">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="165" pos:column="58">(<argument><expr><name pos:line="165" pos:column="59">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="165" pos:column="64">"test.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="166" pos:column="13">var</name></type> <name pos:line="166" pos:column="17">globalScope</name> <init pos:line="166" pos:column="29">= <expr><call><name><name pos:line="166" pos:column="31">codeParser</name><op:operator pos:line="166" pos:column="41">.</op:operator><name pos:line="166" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="166" pos:column="55">(<argument><expr><name pos:line="166" pos:column="56">unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="168" pos:column="13">var</name></type> <name pos:line="168" pos:column="17">constructors</name> <init pos:line="168" pos:column="30">= <expr><call><name><name pos:line="168" pos:column="32">globalScope</name><op:operator pos:line="168" pos:column="43">.</op:operator><name><name pos:line="168" pos:column="44">GetDescendants</name><argument_list pos:line="168" pos:column="58">&lt;<argument><name pos:line="168" pos:column="59">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="168" pos:column="76">()</argument_list></call><op:operator pos:line="168" pos:column="78">.</op:operator><call><name pos:line="168" pos:column="79">ToList</name><argument_list pos:line="168" pos:column="85">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="169" pos:column="13">var</name></type> <name pos:line="169" pos:column="17">defaultConstructor</name> <init pos:line="169" pos:column="36">= <expr><call><name><name pos:line="169" pos:column="38">constructors</name><op:operator pos:line="169" pos:column="50">.</op:operator><name pos:line="169" pos:column="51">FirstOrDefault</name></name><argument_list pos:line="169" pos:column="65">(<argument><expr><lambda><name pos:line="169" pos:column="66">method</name> <op:operator pos:line="169" pos:column="73">=&gt;</op:operator> <name><name pos:line="169" pos:column="76">method</name><op:operator pos:line="169" pos:column="82">.</op:operator><name pos:line="169" pos:column="83">Parameters</name><op:operator pos:line="169" pos:column="93">.</op:operator><name pos:line="169" pos:column="94">Count</name></name> <op:operator pos:line="169" pos:column="100">==</op:operator> <lit:literal type="number" pos:line="169" pos:column="103">0</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="170" pos:column="13">var</name></type> <name pos:line="170" pos:column="17">calledConstructor</name> <init pos:line="170" pos:column="35">= <expr><call><name><name pos:line="170" pos:column="37">constructors</name><op:operator pos:line="170" pos:column="49">.</op:operator><name pos:line="170" pos:column="50">FirstOrDefault</name></name><argument_list pos:line="170" pos:column="64">(<argument><expr><lambda><name pos:line="170" pos:column="65">method</name> <op:operator pos:line="170" pos:column="72">=&gt;</op:operator> <name><name pos:line="170" pos:column="75">method</name><op:operator pos:line="170" pos:column="81">.</op:operator><name pos:line="170" pos:column="82">Parameters</name><op:operator pos:line="170" pos:column="92">.</op:operator><name pos:line="170" pos:column="93">Count</name></name> <op:operator pos:line="170" pos:column="99">==</op:operator> <lit:literal type="number" pos:line="170" pos:column="102">1</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="172" pos:column="13">Assert</name><op:operator pos:line="172" pos:column="19">.</op:operator><name pos:line="172" pos:column="20">IsNotNull</name></name><argument_list pos:line="172" pos:column="29">(<argument><expr><name pos:line="172" pos:column="30">defaultConstructor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="173" pos:column="13">Assert</name><op:operator pos:line="173" pos:column="19">.</op:operator><name pos:line="173" pos:column="20">IsNotNull</name></name><argument_list pos:line="173" pos:column="29">(<argument><expr><name pos:line="173" pos:column="30">calledConstructor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="174" pos:column="13">Assert</name><op:operator pos:line="174" pos:column="19">.</op:operator><name pos:line="174" pos:column="20">AreEqual</name></name><argument_list pos:line="174" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="174" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="174" pos:column="32">defaultConstructor</name><op:operator pos:line="174" pos:column="50">.</op:operator><name pos:line="174" pos:column="51">ConstructorInitializers</name><op:operator pos:line="174" pos:column="74">.</op:operator><name pos:line="174" pos:column="75">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="176" pos:column="13">var</name></type> <name pos:line="176" pos:column="17">constructorCall</name> <init pos:line="176" pos:column="33">= <expr><name><name pos:line="176" pos:column="35">defaultConstructor</name><op:operator pos:line="176" pos:column="53">.</op:operator><name pos:line="176" pos:column="54">ConstructorInitializers</name><index pos:line="176" pos:column="77">[<expr><lit:literal type="number" pos:line="176" pos:column="78">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="177" pos:column="13">Assert</name><op:operator pos:line="177" pos:column="19">.</op:operator><name pos:line="177" pos:column="20">IsNotNull</name></name><argument_list pos:line="177" pos:column="29">(<argument><expr><name pos:line="177" pos:column="30">constructorCall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="178" pos:column="13">Assert</name><op:operator pos:line="178" pos:column="19">.</op:operator><name pos:line="178" pos:column="20">That</name></name><argument_list pos:line="178" pos:column="24">(<argument><expr><name><name pos:line="178" pos:column="25">constructorCall</name><op:operator pos:line="178" pos:column="40">.</op:operator><name pos:line="178" pos:column="41">IsConstructor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="179" pos:column="13">Assert</name><op:operator pos:line="179" pos:column="19">.</op:operator><name pos:line="179" pos:column="20">That</name></name><argument_list pos:line="179" pos:column="24">(<argument><expr><name><name pos:line="179" pos:column="25">constructorCall</name><op:operator pos:line="179" pos:column="40">.</op:operator><name pos:line="179" pos:column="41">IsConstructorInitializer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="180" pos:column="13">Assert</name><op:operator pos:line="180" pos:column="19">.</op:operator><name pos:line="180" pos:column="20">AreSame</name></name><argument_list pos:line="180" pos:column="27">(<argument><expr><name pos:line="180" pos:column="28">calledConstructor</name></expr></argument>, <argument><expr><call><name><name pos:line="180" pos:column="47">constructorCall</name><op:operator pos:line="180" pos:column="62">.</op:operator><name pos:line="180" pos:column="63">FindMatches</name></name><argument_list pos:line="180" pos:column="74">()</argument_list></call><op:operator pos:line="180" pos:column="76">.</op:operator><call><name pos:line="180" pos:column="77">FirstOrDefault</name><argument_list pos:line="180" pos:column="91">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="183" pos:column="9">[<expr><name pos:line="183" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="184" pos:column="9">public</specifier> <name pos:line="184" pos:column="16">void</name></type> <name pos:line="184" pos:column="21">TestConstructor_CallToSuperClass</name><parameter_list pos:line="184" pos:column="53">()</parameter_list> <block pos:line="184" pos:column="56">{
            <comment type="line" pos:line="185" pos:column="13">// test.h </comment>
            <comment type="line" pos:line="186" pos:column="13">// class SuperClass {</comment>
            <comment type="line" pos:line="187" pos:column="13">// public:</comment>
            <comment type="line" pos:line="188" pos:column="13">// SuperClass(int foo) { } }; </comment>
            <comment type="line" pos:line="189" pos:column="13">// class SubClass : public SuperClass {</comment>
            <comment type="line" pos:line="190" pos:column="13">// public:</comment>
            <comment type="line" pos:line="191" pos:column="13">// SubClass(int foo) : SuperClass(foo) { } };</comment>
            <decl_stmt><decl><type><name pos:line="192" pos:column="13">string</name></type> <name pos:line="192" pos:column="20">xml</name> <init pos:line="192" pos:column="24">= <expr><lit:literal type="string" pos:line="192" pos:column="26">@"&lt;class pos:line=""1"" pos:column="&gt;class &lt;name pos:line=""1"" pos:column="&gt;SuperClass&lt;/name&gt; &lt;block pos:line=""1"" pos:column=""&gt;{&lt;private type=""default"" pos:line=""1"" pos:column=&gt;
&lt;/private&gt;&lt;public pos:line=""2"" pos:column="&gt;public:
&lt;constructor&gt;&lt;name pos:line=""3"" pos:column="&gt;SuperClass&lt;/name&gt;&lt;parameter_list pos:line=""3"" pos:column=""&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""3"" pos:column=""&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""3"" pos:column=""&gt;foo&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt; &lt;block pos:line=""3"" pos:column=""&gt;{ }&lt;/block&gt;&lt;/constructor&gt; &lt;/public&gt;}&lt;/block&gt;;&lt;/class&gt; 
&lt;class pos:line=""4"" pos:column="&gt;class &lt;name pos:line=""4"" pos:column="&gt;SubClass&lt;/name&gt; &lt;super pos:line=""4"" pos:column=""&gt;: &lt;specifier pos:line=""4"" pos:column=""&gt;public&lt;/specifier&gt; &lt;name pos:line=""4"" pos:column=""&gt;SuperClass&lt;/name&gt;&lt;/super&gt; &lt;block pos:line=""4"" pos:column=""&gt;{&lt;private type=""default"" pos:line=""4"" pos:column=&gt;
&lt;/private&gt;&lt;public pos:line=""5"" pos:column="&gt;public:
&lt;constructor&gt;&lt;name pos:line=""6"" pos:column="&gt;SubClass&lt;/name&gt;&lt;parameter_list pos:line=""6"" pos:column="&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""6"" pos:column=""&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""6"" pos:column=""&gt;foo&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt; &lt;member_list pos:line=""6"" pos:column=""&gt;: &lt;call&gt;&lt;name pos:line=""6"" pos:column=""&gt;SuperClass&lt;/name&gt;&lt;argument_list pos:line=""6"" pos:column=""&gt;(&lt;argument&gt;&lt;expr&gt;&lt;name pos:line=""6"" pos:column=""&gt;foo&lt;/name&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt; &lt;/member_list&gt;&lt;block pos:line=""6"" pos:column=""&gt;{ }&lt;/block&gt;&lt;/constructor&gt; &lt;/public&gt;}&lt;/block&gt;;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="198" pos:column="13">var</name></type> <name pos:line="198" pos:column="17">unit</name> <init pos:line="198" pos:column="22">= <expr><call><name><name pos:line="198" pos:column="24">fileSetup</name><op:operator pos:line="198" pos:column="33">.</op:operator><name pos:line="198" pos:column="34">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="198" pos:column="58">(<argument><expr><name pos:line="198" pos:column="59">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="198" pos:column="64">"test.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="199" pos:column="13">var</name></type> <name pos:line="199" pos:column="17">globalScope</name> <init pos:line="199" pos:column="29">= <expr><call><name><name pos:line="199" pos:column="31">codeParser</name><op:operator pos:line="199" pos:column="41">.</op:operator><name pos:line="199" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="199" pos:column="55">(<argument><expr><name pos:line="199" pos:column="56">unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="201" pos:column="13">var</name></type> <name pos:line="201" pos:column="17">calledConstructor</name> <init pos:line="201" pos:column="35">= <expr><call><name><name pos:line="201" pos:column="37">globalScope</name><op:operator pos:line="201" pos:column="48">.</op:operator><name><name pos:line="201" pos:column="49">GetDescendants</name><argument_list pos:line="201" pos:column="63">&lt;<argument><name pos:line="201" pos:column="64">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="201" pos:column="81">()</argument_list></call><op:operator pos:line="201" pos:column="83">.</op:operator><call><name pos:line="201" pos:column="84">First</name><argument_list pos:line="201" pos:column="89">(<argument><expr><lambda><name pos:line="201" pos:column="90">m</name> <op:operator pos:line="201" pos:column="92">=&gt;</op:operator> <name><name pos:line="201" pos:column="95">m</name><op:operator pos:line="201" pos:column="96">.</op:operator><name pos:line="201" pos:column="97">Name</name></name> <op:operator pos:line="201" pos:column="102">==</op:operator> <lit:literal type="string" pos:line="201" pos:column="105">"SuperClass"</lit:literal> <op:operator pos:line="201" pos:column="118">&amp;&amp;</op:operator> <name><name pos:line="201" pos:column="121">m</name><op:operator pos:line="201" pos:column="122">.</op:operator><name pos:line="201" pos:column="123">IsConstructor</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="202" pos:column="13">var</name></type> <name pos:line="202" pos:column="17">subClassConstructor</name> <init pos:line="202" pos:column="37">= <expr><call><name><name pos:line="202" pos:column="39">globalScope</name><op:operator pos:line="202" pos:column="50">.</op:operator><name><name pos:line="202" pos:column="51">GetDescendants</name><argument_list pos:line="202" pos:column="65">&lt;<argument><name pos:line="202" pos:column="66">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="202" pos:column="83">()</argument_list></call><op:operator pos:line="202" pos:column="85">.</op:operator><call><name pos:line="202" pos:column="86">First</name><argument_list pos:line="202" pos:column="91">(<argument><expr><lambda><name pos:line="202" pos:column="92">m</name> <op:operator pos:line="202" pos:column="94">=&gt;</op:operator> <name><name pos:line="202" pos:column="97">m</name><op:operator pos:line="202" pos:column="98">.</op:operator><name pos:line="202" pos:column="99">Name</name></name> <op:operator pos:line="202" pos:column="104">==</op:operator> <lit:literal type="string" pos:line="202" pos:column="107">"SubClass"</lit:literal> <op:operator pos:line="202" pos:column="118">&amp;&amp;</op:operator> <name><name pos:line="202" pos:column="121">m</name><op:operator pos:line="202" pos:column="122">.</op:operator><name pos:line="202" pos:column="123">IsConstructor</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="203" pos:column="13">Assert</name><op:operator pos:line="203" pos:column="19">.</op:operator><name pos:line="203" pos:column="20">IsNotNull</name></name><argument_list pos:line="203" pos:column="29">(<argument><expr><name pos:line="203" pos:column="30">subClassConstructor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="204" pos:column="13">Assert</name><op:operator pos:line="204" pos:column="19">.</op:operator><name pos:line="204" pos:column="20">IsNotNull</name></name><argument_list pos:line="204" pos:column="29">(<argument><expr><name pos:line="204" pos:column="30">calledConstructor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="205" pos:column="13">Assert</name><op:operator pos:line="205" pos:column="19">.</op:operator><name pos:line="205" pos:column="20">AreEqual</name></name><argument_list pos:line="205" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="205" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="205" pos:column="32">subClassConstructor</name><op:operator pos:line="205" pos:column="51">.</op:operator><name pos:line="205" pos:column="52">ConstructorInitializers</name><op:operator pos:line="205" pos:column="75">.</op:operator><name pos:line="205" pos:column="76">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="207" pos:column="13">var</name></type> <name pos:line="207" pos:column="17">constructorCall</name> <init pos:line="207" pos:column="33">= <expr><name><name pos:line="207" pos:column="35">subClassConstructor</name><op:operator pos:line="207" pos:column="54">.</op:operator><name pos:line="207" pos:column="55">ConstructorInitializers</name><index pos:line="207" pos:column="78">[<expr><lit:literal type="number" pos:line="207" pos:column="79">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="208" pos:column="13">Assert</name><op:operator pos:line="208" pos:column="19">.</op:operator><name pos:line="208" pos:column="20">IsNotNull</name></name><argument_list pos:line="208" pos:column="29">(<argument><expr><name pos:line="208" pos:column="30">constructorCall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="209" pos:column="13">Assert</name><op:operator pos:line="209" pos:column="19">.</op:operator><name pos:line="209" pos:column="20">That</name></name><argument_list pos:line="209" pos:column="24">(<argument><expr><name><name pos:line="209" pos:column="25">constructorCall</name><op:operator pos:line="209" pos:column="40">.</op:operator><name pos:line="209" pos:column="41">IsConstructor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="210" pos:column="13">Assert</name><op:operator pos:line="210" pos:column="19">.</op:operator><name pos:line="210" pos:column="20">That</name></name><argument_list pos:line="210" pos:column="24">(<argument><expr><name><name pos:line="210" pos:column="25">constructorCall</name><op:operator pos:line="210" pos:column="40">.</op:operator><name pos:line="210" pos:column="41">IsConstructorInitializer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="211" pos:column="13">Assert</name><op:operator pos:line="211" pos:column="19">.</op:operator><name pos:line="211" pos:column="20">AreSame</name></name><argument_list pos:line="211" pos:column="27">(<argument><expr><name pos:line="211" pos:column="28">calledConstructor</name></expr></argument>, <argument><expr><call><name><name pos:line="211" pos:column="47">constructorCall</name><op:operator pos:line="211" pos:column="62">.</op:operator><name pos:line="211" pos:column="63">FindMatches</name></name><argument_list pos:line="211" pos:column="74">()</argument_list></call><op:operator pos:line="211" pos:column="76">.</op:operator><call><name pos:line="211" pos:column="77">FirstOrDefault</name><argument_list pos:line="211" pos:column="91">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="214" pos:column="9">[<expr><name pos:line="214" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="215" pos:column="9">public</specifier> <name pos:line="215" pos:column="16">void</name></type> <name pos:line="215" pos:column="21">TestConstructor_InitializeBuiltinTypeField</name><parameter_list pos:line="215" pos:column="63">()</parameter_list> <block pos:line="215" pos:column="66">{
            <comment type="line" pos:line="216" pos:column="13">//test.h</comment>
            <comment type="line" pos:line="217" pos:column="13">//class Quux</comment>
            <comment type="line" pos:line="218" pos:column="13">//{</comment>
            <comment type="line" pos:line="219" pos:column="13">//    int _my_int;</comment>
            <comment type="line" pos:line="220" pos:column="13">//public:</comment>
            <comment type="line" pos:line="221" pos:column="13">//    Quux() : _my_int(5) {  }</comment>
            <comment type="line" pos:line="222" pos:column="13">//};</comment>
            <decl_stmt><decl><type><name pos:line="223" pos:column="13">string</name></type> <name pos:line="223" pos:column="20">xml</name> <init pos:line="223" pos:column="24">= <expr><lit:literal type="string" pos:line="223" pos:column="26">@"&lt;class pos:line=""1"" pos:column="&gt;class &lt;name pos:line=""1"" pos:column="&gt;Quux&lt;/name&gt;
&lt;block pos:line=""2"" pos:column="&gt;{&lt;private type=""default"" pos:line=""2"" pos:column&gt;
    &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""3"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""3"" pos:column="&gt;_my_int&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
&lt;/private&gt;&lt;public pos:line=""4"" pos:column="&gt;public:
    &lt;constructor&gt;&lt;name pos:line=""5"" pos:column="&gt;Quux&lt;/name&gt;&lt;parameter_list pos:line=""5"" pos:column="&gt;()&lt;/parameter_list&gt; &lt;member_list pos:line=""5"" pos:column=""&gt;: &lt;call&gt;&lt;name pos:line=""5"" pos:column=""&gt;_my_int&lt;/name&gt;&lt;argument_list pos:line=""5"" pos:column=""&gt;(&lt;argument&gt;&lt;expr&gt;&lt;lit:literal type=""number"" pos:line=""5"" pos:column=&gt;5&lt;/lit:literal&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt; &lt;/member_list&gt;&lt;block pos:line=""5"" pos:column=""&gt;{  }&lt;/block&gt;&lt;/constructor&gt;
&lt;/public&gt;}&lt;/block&gt;;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="229" pos:column="13">XElement</name></type> <name pos:line="229" pos:column="22">xmlElement</name> <init pos:line="229" pos:column="33">= <expr><call><name><name pos:line="229" pos:column="35">fileSetup</name><op:operator pos:line="229" pos:column="44">.</op:operator><name pos:line="229" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="229" pos:column="69">(<argument><expr><name pos:line="229" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="229" pos:column="75">"test.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="230" pos:column="13">var</name></type> <name pos:line="230" pos:column="17">globalScope</name> <init pos:line="230" pos:column="29">= <expr><call><name><name pos:line="230" pos:column="31">codeParser</name><op:operator pos:line="230" pos:column="41">.</op:operator><name pos:line="230" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="230" pos:column="55">(<argument><expr><name pos:line="230" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="232" pos:column="13">var</name></type> <name pos:line="232" pos:column="17">quux</name> <init pos:line="232" pos:column="22">= <expr><call><name><name pos:line="232" pos:column="24">globalScope</name><op:operator pos:line="232" pos:column="35">.</op:operator><name><name pos:line="232" pos:column="36">GetNamedChildren</name><argument_list pos:line="232" pos:column="52">&lt;<argument><name pos:line="232" pos:column="53">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="232" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="232" pos:column="69">"Quux"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="232" pos:column="76">.</op:operator><call><name pos:line="232" pos:column="77">First</name><argument_list pos:line="232" pos:column="82">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="233" pos:column="13">var</name></type> <name pos:line="233" pos:column="17">field</name> <init pos:line="233" pos:column="23">= <expr><call><name><name pos:line="233" pos:column="25">quux</name><op:operator pos:line="233" pos:column="29">.</op:operator><name><name pos:line="233" pos:column="30">GetNamedChildren</name><argument_list pos:line="233" pos:column="46">&lt;<argument><name pos:line="233" pos:column="47">VariableDeclaration</name></argument>&gt;</argument_list></name></name><argument_list pos:line="233" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="233" pos:column="68">"_my_int"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="233" pos:column="78">.</op:operator><call><name pos:line="233" pos:column="79">First</name><argument_list pos:line="233" pos:column="84">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="234" pos:column="13">var</name></type> <name pos:line="234" pos:column="17">fieldType</name> <init pos:line="234" pos:column="27">= <expr><call><name><name pos:line="234" pos:column="29">field</name><op:operator pos:line="234" pos:column="34">.</op:operator><name pos:line="234" pos:column="35">VariableType</name><op:operator pos:line="234" pos:column="47">.</op:operator><name pos:line="234" pos:column="48">ResolveType</name></name><argument_list pos:line="234" pos:column="59">()</argument_list></call><op:operator pos:line="234" pos:column="61">.</op:operator><call><name pos:line="234" pos:column="62">FirstOrDefault</name><argument_list pos:line="234" pos:column="76">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="235" pos:column="13">Assert</name><op:operator pos:line="235" pos:column="19">.</op:operator><name pos:line="235" pos:column="20">IsNotNull</name></name><argument_list pos:line="235" pos:column="29">(<argument><expr><name pos:line="235" pos:column="30">fieldType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="237" pos:column="13">var</name></type> <name pos:line="237" pos:column="17">constructor</name> <init pos:line="237" pos:column="29">= <expr><call><name><name pos:line="237" pos:column="31">quux</name><op:operator pos:line="237" pos:column="35">.</op:operator><name><name pos:line="237" pos:column="36">GetNamedChildren</name><argument_list pos:line="237" pos:column="52">&lt;<argument><name pos:line="237" pos:column="53">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="237" pos:column="70">(<argument><expr><lit:literal type="string" pos:line="237" pos:column="71">"Quux"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="237" pos:column="78">.</op:operator><call><name pos:line="237" pos:column="79">First</name><argument_list pos:line="237" pos:column="84">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="238" pos:column="13">Assert</name><op:operator pos:line="238" pos:column="19">.</op:operator><name pos:line="238" pos:column="20">AreEqual</name></name><argument_list pos:line="238" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="238" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="238" pos:column="32">constructor</name><op:operator pos:line="238" pos:column="43">.</op:operator><name pos:line="238" pos:column="44">ConstructorInitializers</name><op:operator pos:line="238" pos:column="67">.</op:operator><name pos:line="238" pos:column="68">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="239" pos:column="13">var</name></type> <name pos:line="239" pos:column="17">fieldCall</name> <init pos:line="239" pos:column="27">= <expr><name><name pos:line="239" pos:column="29">constructor</name><op:operator pos:line="239" pos:column="40">.</op:operator><name pos:line="239" pos:column="41">ConstructorInitializers</name><index pos:line="239" pos:column="64">[<expr><lit:literal type="number" pos:line="239" pos:column="65">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="240" pos:column="13">Assert</name><op:operator pos:line="240" pos:column="19">.</op:operator><name pos:line="240" pos:column="20">IsNotNull</name></name><argument_list pos:line="240" pos:column="29">(<argument><expr><name pos:line="240" pos:column="30">fieldCall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="241" pos:column="13">Assert</name><op:operator pos:line="241" pos:column="19">.</op:operator><name pos:line="241" pos:column="20">That</name></name><argument_list pos:line="241" pos:column="24">(<argument><expr><name><name pos:line="241" pos:column="25">fieldCall</name><op:operator pos:line="241" pos:column="34">.</op:operator><name pos:line="241" pos:column="35">IsConstructor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="242" pos:column="13">Assert</name><op:operator pos:line="242" pos:column="19">.</op:operator><name pos:line="242" pos:column="20">That</name></name><argument_list pos:line="242" pos:column="24">(<argument><expr><name><name pos:line="242" pos:column="25">fieldCall</name><op:operator pos:line="242" pos:column="34">.</op:operator><name pos:line="242" pos:column="35">IsConstructorInitializer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="243" pos:column="13">Assert</name><op:operator pos:line="243" pos:column="19">.</op:operator><name pos:line="243" pos:column="20">IsEmpty</name></name><argument_list pos:line="243" pos:column="27">(<argument><expr><call><name><name pos:line="243" pos:column="28">fieldCall</name><op:operator pos:line="243" pos:column="37">.</op:operator><name pos:line="243" pos:column="38">FindMatches</name></name><argument_list pos:line="243" pos:column="49">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="246" pos:column="9">[<expr><name pos:line="246" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="247" pos:column="9">public</specifier> <name pos:line="247" pos:column="16">void</name></type> <name pos:line="247" pos:column="21">TestConstructor_InitializeField</name><parameter_list pos:line="247" pos:column="52">()</parameter_list> <block pos:line="247" pos:column="55">{
            <comment type="line" pos:line="248" pos:column="13">//test.h</comment>
            <comment type="line" pos:line="249" pos:column="13">//class Foo</comment>
            <comment type="line" pos:line="250" pos:column="13">//{</comment>
            <comment type="line" pos:line="251" pos:column="13">//public:</comment>
            <comment type="line" pos:line="252" pos:column="13">//    Foo(int a) { }</comment>
            <comment type="line" pos:line="253" pos:column="13">//};</comment>
            <comment type="line" pos:line="254" pos:column="13">//class Bar</comment>
            <comment type="line" pos:line="255" pos:column="13">//{</comment>
            <comment type="line" pos:line="256" pos:column="13">//    Foo baz;</comment>
            <comment type="line" pos:line="257" pos:column="13">//public:</comment>
            <comment type="line" pos:line="258" pos:column="13">//    Bar() : baz(42) { }</comment>
            <comment type="line" pos:line="259" pos:column="13">//};</comment>
            <decl_stmt><decl><type><name pos:line="260" pos:column="13">string</name></type> <name pos:line="260" pos:column="20">xml</name> <init pos:line="260" pos:column="24">= <expr><lit:literal type="string" pos:line="260" pos:column="26">@"&lt;class pos:line=""1"" pos:column="&gt;class &lt;name pos:line=""1"" pos:column="&gt;Foo&lt;/name&gt;
&lt;block pos:line=""2"" pos:column="&gt;{&lt;private type=""default"" pos:line=""2"" pos:column&gt;
&lt;/private&gt;&lt;public pos:line=""3"" pos:column="&gt;public:
    &lt;constructor&gt;&lt;name pos:line=""4"" pos:column="&gt;Foo&lt;/name&gt;&lt;parameter_list pos:line=""4"" pos:column="&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""4"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""4"" pos:column=""&gt;a&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt; &lt;block pos:line=""4"" pos:column=""&gt;{ }&lt;/block&gt;&lt;/constructor&gt;
&lt;/public&gt;}&lt;/block&gt;;&lt;/class&gt;
&lt;class pos:line=""6"" pos:column="&gt;class &lt;name pos:line=""6"" pos:column="&gt;Bar&lt;/name&gt;
&lt;block pos:line=""7"" pos:column="&gt;{&lt;private type=""default"" pos:line=""7"" pos:column&gt;
    &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""8"" pos:column="&gt;Foo&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""8"" pos:column="&gt;baz&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
&lt;/private&gt;&lt;public pos:line=""9"" pos:column="&gt;public:
    &lt;constructor&gt;&lt;name pos:line=""10"" pos:column="&gt;Bar&lt;/name&gt;&lt;parameter_list pos:line=""10"" pos:column="&gt;()&lt;/parameter_list&gt; &lt;member_list pos:line=""10"" pos:column=""&gt;: &lt;call&gt;&lt;name pos:line=""10"" pos:column=""&gt;baz&lt;/name&gt;&lt;argument_list pos:line=""10"" pos:column=""&gt;(&lt;argument&gt;&lt;expr&gt;&lt;lit:literal type=""number"" pos:line=""10"" pos:column=&gt;42&lt;/lit:literal&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt; &lt;/member_list&gt;&lt;block pos:line=""10"" pos:column=""&gt;{ }&lt;/block&gt;&lt;/constructor&gt;
&lt;/public&gt;}&lt;/block&gt;;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="271" pos:column="13">XElement</name></type> <name pos:line="271" pos:column="22">xmlElement</name> <init pos:line="271" pos:column="33">= <expr><call><name><name pos:line="271" pos:column="35">fileSetup</name><op:operator pos:line="271" pos:column="44">.</op:operator><name pos:line="271" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="271" pos:column="69">(<argument><expr><name pos:line="271" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="271" pos:column="75">"test.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="272" pos:column="13">var</name></type> <name pos:line="272" pos:column="17">globalScope</name> <init pos:line="272" pos:column="29">= <expr><call><name><name pos:line="272" pos:column="31">codeParser</name><op:operator pos:line="272" pos:column="41">.</op:operator><name pos:line="272" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="272" pos:column="55">(<argument><expr><name pos:line="272" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="274" pos:column="13">var</name></type> <name pos:line="274" pos:column="17">fooConstructor</name> <init pos:line="274" pos:column="32">= <expr><call><name><name pos:line="274" pos:column="34">globalScope</name><op:operator pos:line="274" pos:column="45">.</op:operator><name><name pos:line="274" pos:column="46">GetDescendants</name><argument_list pos:line="274" pos:column="60">&lt;<argument><name pos:line="274" pos:column="61">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="274" pos:column="78">()</argument_list></call><op:operator pos:line="274" pos:column="80">.</op:operator><call><name pos:line="274" pos:column="81">First</name><argument_list pos:line="274" pos:column="86">(<argument><expr><lambda><name pos:line="274" pos:column="87">m</name> <op:operator pos:line="274" pos:column="89">=&gt;</op:operator> <name><name pos:line="274" pos:column="92">m</name><op:operator pos:line="274" pos:column="93">.</op:operator><name pos:line="274" pos:column="94">Name</name></name> <op:operator pos:line="274" pos:column="99">==</op:operator> <lit:literal type="string" pos:line="274" pos:column="102">"Foo"</lit:literal> <op:operator pos:line="274" pos:column="108">&amp;&amp;</op:operator> <name><name pos:line="274" pos:column="111">m</name><op:operator pos:line="274" pos:column="112">.</op:operator><name pos:line="274" pos:column="113">IsConstructor</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="275" pos:column="13">var</name></type> <name pos:line="275" pos:column="17">barConstructor</name> <init pos:line="275" pos:column="32">= <expr><call><name><name pos:line="275" pos:column="34">globalScope</name><op:operator pos:line="275" pos:column="45">.</op:operator><name><name pos:line="275" pos:column="46">GetDescendants</name><argument_list pos:line="275" pos:column="60">&lt;<argument><name pos:line="275" pos:column="61">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="275" pos:column="78">()</argument_list></call><op:operator pos:line="275" pos:column="80">.</op:operator><call><name pos:line="275" pos:column="81">First</name><argument_list pos:line="275" pos:column="86">(<argument><expr><lambda><name pos:line="275" pos:column="87">m</name> <op:operator pos:line="275" pos:column="89">=&gt;</op:operator> <name><name pos:line="275" pos:column="92">m</name><op:operator pos:line="275" pos:column="93">.</op:operator><name pos:line="275" pos:column="94">Name</name></name> <op:operator pos:line="275" pos:column="99">==</op:operator> <lit:literal type="string" pos:line="275" pos:column="102">"Bar"</lit:literal> <op:operator pos:line="275" pos:column="108">&amp;&amp;</op:operator> <name><name pos:line="275" pos:column="111">m</name><op:operator pos:line="275" pos:column="112">.</op:operator><name pos:line="275" pos:column="113">IsConstructor</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="276" pos:column="13">Assert</name><op:operator pos:line="276" pos:column="19">.</op:operator><name pos:line="276" pos:column="20">AreEqual</name></name><argument_list pos:line="276" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="276" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="276" pos:column="32">barConstructor</name><op:operator pos:line="276" pos:column="46">.</op:operator><name pos:line="276" pos:column="47">ConstructorInitializers</name><op:operator pos:line="276" pos:column="70">.</op:operator><name pos:line="276" pos:column="71">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="277" pos:column="13">var</name></type> <name pos:line="277" pos:column="17">fieldCall</name> <init pos:line="277" pos:column="27">= <expr><name><name pos:line="277" pos:column="29">barConstructor</name><op:operator pos:line="277" pos:column="43">.</op:operator><name pos:line="277" pos:column="44">ConstructorInitializers</name><index pos:line="277" pos:column="67">[<expr><lit:literal type="number" pos:line="277" pos:column="68">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="278" pos:column="13">Assert</name><op:operator pos:line="278" pos:column="19">.</op:operator><name pos:line="278" pos:column="20">IsNotNull</name></name><argument_list pos:line="278" pos:column="29">(<argument><expr><name pos:line="278" pos:column="30">fieldCall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="279" pos:column="13">Assert</name><op:operator pos:line="279" pos:column="19">.</op:operator><name pos:line="279" pos:column="20">That</name></name><argument_list pos:line="279" pos:column="24">(<argument><expr><name><name pos:line="279" pos:column="25">fieldCall</name><op:operator pos:line="279" pos:column="34">.</op:operator><name pos:line="279" pos:column="35">IsConstructor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="280" pos:column="13">Assert</name><op:operator pos:line="280" pos:column="19">.</op:operator><name pos:line="280" pos:column="20">That</name></name><argument_list pos:line="280" pos:column="24">(<argument><expr><name><name pos:line="280" pos:column="25">fieldCall</name><op:operator pos:line="280" pos:column="34">.</op:operator><name pos:line="280" pos:column="35">IsConstructorInitializer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="281" pos:column="13">Assert</name><op:operator pos:line="281" pos:column="19">.</op:operator><name pos:line="281" pos:column="20">AreSame</name></name><argument_list pos:line="281" pos:column="27">(<argument><expr><name pos:line="281" pos:column="28">fooConstructor</name></expr></argument>, <argument><expr><call><name><name pos:line="281" pos:column="44">fieldCall</name><op:operator pos:line="281" pos:column="53">.</op:operator><name pos:line="281" pos:column="54">FindMatches</name></name><argument_list pos:line="281" pos:column="65">()</argument_list></call><op:operator pos:line="281" pos:column="67">.</op:operator><call><name pos:line="281" pos:column="68">FirstOrDefault</name><argument_list pos:line="281" pos:column="82">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="284" pos:column="9">[<expr><name pos:line="284" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="285" pos:column="9">public</specifier> <name pos:line="285" pos:column="16">void</name></type> <name pos:line="285" pos:column="21">TestCreateAliasesForFiles_ImportClass</name><parameter_list pos:line="285" pos:column="58">()</parameter_list> <block pos:line="285" pos:column="61">{
            <comment type="line" pos:line="286" pos:column="13">// using A::Foo;</comment>
            <decl_stmt><decl><type><name pos:line="287" pos:column="13">string</name></type> <name pos:line="287" pos:column="20">xml</name> <init pos:line="287" pos:column="24">= <expr><lit:literal type="string" pos:line="287" pos:column="26">@"&lt;using&gt;using &lt;name&gt;&lt;name&gt;A&lt;/name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;/name&gt;;&lt;/using&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="289" pos:column="13">XElement</name></type> <name pos:line="289" pos:column="22">xmlElement</name> <init pos:line="289" pos:column="33">= <expr><call><name><name pos:line="289" pos:column="35">fileSetup</name><op:operator pos:line="289" pos:column="44">.</op:operator><name pos:line="289" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="289" pos:column="69">(<argument><expr><name pos:line="289" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="289" pos:column="75">"A.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="290" pos:column="13">var</name></type> <name pos:line="290" pos:column="17">globalScope</name> <init pos:line="290" pos:column="29">= <expr><call><name><name pos:line="290" pos:column="31">codeParser</name><op:operator pos:line="290" pos:column="41">.</op:operator><name pos:line="290" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="290" pos:column="55">(<argument><expr><name pos:line="290" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="292" pos:column="13">Assert</name><op:operator pos:line="292" pos:column="19">.</op:operator><name pos:line="292" pos:column="20">AreEqual</name></name><argument_list pos:line="292" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="292" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="292" pos:column="32">globalScope</name><op:operator pos:line="292" pos:column="43">.</op:operator><name pos:line="292" pos:column="44">ChildStatements</name><op:operator pos:line="292" pos:column="59">.</op:operator><name pos:line="292" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="293" pos:column="13">var</name></type> <name pos:line="293" pos:column="17">actual</name> <init pos:line="293" pos:column="24">= <expr><name><name pos:line="293" pos:column="26">globalScope</name><op:operator pos:line="293" pos:column="37">.</op:operator><name pos:line="293" pos:column="38">ChildStatements</name><index pos:line="293" pos:column="53">[<expr><lit:literal type="number" pos:line="293" pos:column="54">0</lit:literal></expr>]</index></name> <op:operator pos:line="293" pos:column="57">as</op:operator> <name pos:line="293" pos:column="60">AliasStatement</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="294" pos:column="13">Assert</name><op:operator pos:line="294" pos:column="19">.</op:operator><name pos:line="294" pos:column="20">IsNotNull</name></name><argument_list pos:line="294" pos:column="29">(<argument><expr><name pos:line="294" pos:column="30">actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="295" pos:column="13">Assert</name><op:operator pos:line="295" pos:column="19">.</op:operator><name pos:line="295" pos:column="20">AreEqual</name></name><argument_list pos:line="295" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="295" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="295" pos:column="36">actual</name><op:operator pos:line="295" pos:column="42">.</op:operator><name pos:line="295" pos:column="43">AliasName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="296" pos:column="13">Assert</name><op:operator pos:line="296" pos:column="19">.</op:operator><name pos:line="296" pos:column="20">AreEqual</name></name><argument_list pos:line="296" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="296" pos:column="29">"A::Foo"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="296" pos:column="39">actual</name><op:operator pos:line="296" pos:column="45">.</op:operator><name pos:line="296" pos:column="46">Target</name><op:operator pos:line="296" pos:column="52">.</op:operator><name pos:line="296" pos:column="53">ToString</name></name><argument_list pos:line="296" pos:column="61">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></function>

        <function><type><attribute pos:line="300" pos:column="9">[<expr><name pos:line="300" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="301" pos:column="9">public</specifier> <name pos:line="301" pos:column="16">void</name></type> <name pos:line="301" pos:column="21">TestCreateAliasesForFiles_ImportNamespace</name><parameter_list pos:line="301" pos:column="62">()</parameter_list> <block pos:line="301" pos:column="65">{
            <comment type="line" pos:line="302" pos:column="13">// using namespace x::y::z;</comment>
            <decl_stmt><decl><type><name pos:line="303" pos:column="13">string</name></type> <name pos:line="303" pos:column="20">xml</name> <init pos:line="303" pos:column="24">= <expr><lit:literal type="string" pos:line="303" pos:column="26">@"&lt;using&gt;using namespace &lt;name&gt;&lt;name&gt;x&lt;/name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;&lt;name&gt;y&lt;/name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;&lt;name&gt;z&lt;/name&gt;&lt;/name&gt;;&lt;/using&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="305" pos:column="13">XElement</name></type> <name pos:line="305" pos:column="22">xmlElement</name> <init pos:line="305" pos:column="33">= <expr><call><name><name pos:line="305" pos:column="35">fileSetup</name><op:operator pos:line="305" pos:column="44">.</op:operator><name pos:line="305" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="305" pos:column="69">(<argument><expr><name pos:line="305" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="305" pos:column="75">"A.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="306" pos:column="13">var</name></type> <name pos:line="306" pos:column="17">globalScope</name> <init pos:line="306" pos:column="29">= <expr><call><name><name pos:line="306" pos:column="31">codeParser</name><op:operator pos:line="306" pos:column="41">.</op:operator><name pos:line="306" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="306" pos:column="55">(<argument><expr><name pos:line="306" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="308" pos:column="13">Assert</name><op:operator pos:line="308" pos:column="19">.</op:operator><name pos:line="308" pos:column="20">AreEqual</name></name><argument_list pos:line="308" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="308" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="308" pos:column="32">globalScope</name><op:operator pos:line="308" pos:column="43">.</op:operator><name pos:line="308" pos:column="44">ChildStatements</name><op:operator pos:line="308" pos:column="59">.</op:operator><name pos:line="308" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="309" pos:column="13">var</name></type> <name pos:line="309" pos:column="17">actual</name> <init pos:line="309" pos:column="24">= <expr><name><name pos:line="309" pos:column="26">globalScope</name><op:operator pos:line="309" pos:column="37">.</op:operator><name pos:line="309" pos:column="38">ChildStatements</name><index pos:line="309" pos:column="53">[<expr><lit:literal type="number" pos:line="309" pos:column="54">0</lit:literal></expr>]</index></name> <op:operator pos:line="309" pos:column="57">as</op:operator> <name pos:line="309" pos:column="60">ImportStatement</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="310" pos:column="13">Assert</name><op:operator pos:line="310" pos:column="19">.</op:operator><name pos:line="310" pos:column="20">IsNotNull</name></name><argument_list pos:line="310" pos:column="29">(<argument><expr><name pos:line="310" pos:column="30">actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="311" pos:column="13">Assert</name><op:operator pos:line="311" pos:column="19">.</op:operator><name pos:line="311" pos:column="20">AreEqual</name></name><argument_list pos:line="311" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="311" pos:column="29">"x :: y :: z"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="311" pos:column="44">actual</name><op:operator pos:line="311" pos:column="50">.</op:operator><name pos:line="311" pos:column="51">ImportedNamespace</name><op:operator pos:line="311" pos:column="68">.</op:operator><name pos:line="311" pos:column="69">ToString</name></name><argument_list pos:line="311" pos:column="77">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="314" pos:column="9">[<expr><name pos:line="314" pos:column="10">Test</name></expr>]</attribute>
        <attribute pos:line="315" pos:column="9">[<expr><call><name pos:line="315" pos:column="10">Category</name><argument_list pos:line="315" pos:column="18">(<argument><expr><lit:literal type="string" pos:line="315" pos:column="19">"SrcMLUpdate"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="316" pos:column="9">public</specifier> <name pos:line="316" pos:column="16">void</name></type> <name pos:line="316" pos:column="21">TestCreateAliasesForFiles_TypeAlias</name><parameter_list pos:line="316" pos:column="56">()</parameter_list> <block pos:line="316" pos:column="59">{
            <comment type="line" pos:line="317" pos:column="13">// using x = foo::bar::baz;</comment>
            <decl_stmt><decl><type><name pos:line="318" pos:column="13">string</name></type> <name pos:line="318" pos:column="20">xml</name> <init pos:line="318" pos:column="24">= <expr><lit:literal type="string" pos:line="318" pos:column="26">@"&lt;using&gt;using &lt;name&gt;x&lt;/name&gt; = &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;&lt;name&gt;foo&lt;/name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;&lt;name&gt;bar&lt;/name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;&lt;name&gt;baz&lt;/name&gt;&lt;/name&gt;&lt;/type&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;&lt;/using&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="320" pos:column="13">XElement</name></type> <name pos:line="320" pos:column="22">xmlElement</name> <init pos:line="320" pos:column="33">= <expr><call><name><name pos:line="320" pos:column="35">fileSetup</name><op:operator pos:line="320" pos:column="44">.</op:operator><name pos:line="320" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="320" pos:column="69">(<argument><expr><name pos:line="320" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="320" pos:column="75">"A.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="321" pos:column="13">var</name></type> <name pos:line="321" pos:column="17">globalScope</name> <init pos:line="321" pos:column="29">= <expr><call><name><name pos:line="321" pos:column="31">codeParser</name><op:operator pos:line="321" pos:column="41">.</op:operator><name pos:line="321" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="321" pos:column="55">(<argument><expr><name pos:line="321" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="323" pos:column="13">Assert</name><op:operator pos:line="323" pos:column="19">.</op:operator><name pos:line="323" pos:column="20">AreEqual</name></name><argument_list pos:line="323" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="323" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="323" pos:column="32">globalScope</name><op:operator pos:line="323" pos:column="43">.</op:operator><name pos:line="323" pos:column="44">ChildStatements</name><op:operator pos:line="323" pos:column="59">.</op:operator><name pos:line="323" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="324" pos:column="13">var</name></type> <name pos:line="324" pos:column="17">actual</name> <init pos:line="324" pos:column="24">= <expr><name><name pos:line="324" pos:column="26">globalScope</name><op:operator pos:line="324" pos:column="37">.</op:operator><name pos:line="324" pos:column="38">ChildStatements</name><index pos:line="324" pos:column="53">[<expr><lit:literal type="number" pos:line="324" pos:column="54">0</lit:literal></expr>]</index></name> <op:operator pos:line="324" pos:column="57">as</op:operator> <name pos:line="324" pos:column="60">AliasStatement</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="325" pos:column="13">Assert</name><op:operator pos:line="325" pos:column="19">.</op:operator><name pos:line="325" pos:column="20">IsNotNull</name></name><argument_list pos:line="325" pos:column="29">(<argument><expr><name pos:line="325" pos:column="30">actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="326" pos:column="13">Assert</name><op:operator pos:line="326" pos:column="19">.</op:operator><name pos:line="326" pos:column="20">AreEqual</name></name><argument_list pos:line="326" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="326" pos:column="29">"x"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="326" pos:column="34">actual</name><op:operator pos:line="326" pos:column="40">.</op:operator><name pos:line="326" pos:column="41">AliasName</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="326" pos:column="52">"TODO fix once srcml is updated"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="327" pos:column="13">Assert</name><op:operator pos:line="327" pos:column="19">.</op:operator><name pos:line="327" pos:column="20">AreEqual</name></name><argument_list pos:line="327" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="327" pos:column="29">"foo::bar::baz"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="327" pos:column="46">actual</name><op:operator pos:line="327" pos:column="52">.</op:operator><name pos:line="327" pos:column="53">Target</name><op:operator pos:line="327" pos:column="59">.</op:operator><name pos:line="327" pos:column="60">ToString</name></name><argument_list pos:line="327" pos:column="68">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="330" pos:column="9">[<expr><name pos:line="330" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="331" pos:column="9">public</specifier> <name pos:line="331" pos:column="16">void</name></type> <name pos:line="331" pos:column="21">TestGetImports</name><parameter_list pos:line="331" pos:column="35">()</parameter_list> <block pos:line="331" pos:column="38">{
            <comment type="line" pos:line="332" pos:column="13">//A.cpp</comment>
            <comment type="line" pos:line="333" pos:column="13">//namespace x {</comment>
            <comment type="line" pos:line="334" pos:column="13">//  namespace y {</comment>
            <comment type="line" pos:line="335" pos:column="13">//    namespace z {}</comment>
            <comment type="line" pos:line="336" pos:column="13">//  }</comment>
            <comment type="line" pos:line="337" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="338" pos:column="13">string</name></type> <name pos:line="338" pos:column="20">xmlA</name> <init pos:line="338" pos:column="25">= <expr><lit:literal type="string" pos:line="338" pos:column="27">@"&lt;namespace pos:line=""1"" pos:column="&gt;namespace &lt;name pos:line=""1"" pos:column=""&gt;x&lt;/name&gt; &lt;block pos:line=""1"" pos:column=""&gt;{
  &lt;namespace pos:line=""2"" pos:column="&gt;namespace &lt;name pos:line=""2"" pos:column=""&gt;y&lt;/name&gt; &lt;block pos:line=""2"" pos:column=""&gt;{
    &lt;namespace pos:line=""3"" pos:column="&gt;namespace &lt;name pos:line=""3"" pos:column=""&gt;z&lt;/name&gt; &lt;block pos:line=""3"" pos:column=""&gt;{}&lt;/block&gt;&lt;/namespace&gt;
  }&lt;/block&gt;&lt;/namespace&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="343" pos:column="13">XElement</name></type> <name pos:line="343" pos:column="22">xmlElementA</name> <init pos:line="343" pos:column="34">= <expr><call><name><name pos:line="343" pos:column="36">fileSetup</name><op:operator pos:line="343" pos:column="45">.</op:operator><name pos:line="343" pos:column="46">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="343" pos:column="70">(<argument><expr><name pos:line="343" pos:column="71">xmlA</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="343" pos:column="77">"A.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="344" pos:column="13">//B.cpp</comment>
            <comment type="line" pos:line="345" pos:column="13">//using namespace x::y::z;</comment>
            <comment type="line" pos:line="346" pos:column="13">//foo = 17;</comment>
            <decl_stmt><decl><type><name pos:line="347" pos:column="13">string</name></type> <name pos:line="347" pos:column="20">xmlB</name> <init pos:line="347" pos:column="25">= <expr><lit:literal type="string" pos:line="347" pos:column="27">@"&lt;using pos:line=""1"" pos:column="&gt;using namespace &lt;name&gt;&lt;name pos:line=""1"" pos:column=""&gt;x&lt;/name&gt;&lt;op:operator pos:line=""1"" pos:column=""&gt;::&lt;/op:operator&gt;&lt;name pos:line=""1"" pos:column=""&gt;y&lt;/name&gt;&lt;op:operator pos:line=""1"" pos:column=""&gt;::&lt;/op:operator&gt;&lt;name pos:line=""1"" pos:column=""&gt;z&lt;/name&gt;&lt;/name&gt;;&lt;/using&gt;
&lt;expr_stmt&gt;&lt;expr&gt;&lt;name pos:line=""2"" pos:column="&gt;foo&lt;/name&gt; &lt;op:operator pos:line=""2"" pos:column="&gt;=&lt;/op:operator&gt; &lt;lit:literal type=""number"" pos:line=""2"" pos:column&gt;17&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="349" pos:column="13">XElement</name></type> <name pos:line="349" pos:column="22">xmlElementB</name> <init pos:line="349" pos:column="34">= <expr><call><name><name pos:line="349" pos:column="36">fileSetup</name><op:operator pos:line="349" pos:column="45">.</op:operator><name pos:line="349" pos:column="46">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="349" pos:column="70">(<argument><expr><name pos:line="349" pos:column="71">xmlB</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="349" pos:column="77">"B.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="351" pos:column="13">var</name></type> <name pos:line="351" pos:column="17">scopeA</name> <init pos:line="351" pos:column="24">= <expr><call><name><name pos:line="351" pos:column="26">codeParser</name><op:operator pos:line="351" pos:column="36">.</op:operator><name pos:line="351" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="351" pos:column="50">(<argument><expr><name pos:line="351" pos:column="51">xmlElementA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="352" pos:column="13">var</name></type> <name pos:line="352" pos:column="17">scopeB</name> <init pos:line="352" pos:column="24">= <expr><call><name><name pos:line="352" pos:column="26">codeParser</name><op:operator pos:line="352" pos:column="36">.</op:operator><name pos:line="352" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="352" pos:column="50">(<argument><expr><name pos:line="352" pos:column="51">xmlElementB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="353" pos:column="13">var</name></type> <name pos:line="353" pos:column="17">globalScope</name> <init pos:line="353" pos:column="29">= <expr><call><name><name pos:line="353" pos:column="31">scopeA</name><op:operator pos:line="353" pos:column="37">.</op:operator><name pos:line="353" pos:column="38">Merge</name></name><argument_list pos:line="353" pos:column="43">(<argument><expr><name pos:line="353" pos:column="44">scopeB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="354" pos:column="13">Assert</name><op:operator pos:line="354" pos:column="19">.</op:operator><name pos:line="354" pos:column="20">AreEqual</name></name><argument_list pos:line="354" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="354" pos:column="29">3</lit:literal></expr></argument>, <argument><expr><name><name pos:line="354" pos:column="32">globalScope</name><op:operator pos:line="354" pos:column="43">.</op:operator><name pos:line="354" pos:column="44">ChildStatements</name><op:operator pos:line="354" pos:column="59">.</op:operator><name pos:line="354" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="355" pos:column="13">var</name></type> <name pos:line="355" pos:column="17">foo</name> <init pos:line="355" pos:column="21">= <expr><name><name pos:line="355" pos:column="23">globalScope</name><op:operator pos:line="355" pos:column="34">.</op:operator><name pos:line="355" pos:column="35">ChildStatements</name><index pos:line="355" pos:column="50">[<expr><lit:literal type="number" pos:line="355" pos:column="51">2</lit:literal></expr>]</index></name><op:operator pos:line="355" pos:column="53">.</op:operator><call><name><name pos:line="355" pos:column="54">Content</name><op:operator pos:line="355" pos:column="61">.</op:operator><name><name pos:line="355" pos:column="62">GetDescendantsAndSelf</name><argument_list pos:line="355" pos:column="83">&lt;<argument><name pos:line="355" pos:column="84">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="355" pos:column="92">()</argument_list></call><op:operator pos:line="355" pos:column="94">.</op:operator><call><name pos:line="355" pos:column="95">FirstOrDefault</name><argument_list pos:line="355" pos:column="109">(<argument><expr><lambda><name pos:line="355" pos:column="110">n</name> <op:operator pos:line="355" pos:column="112">=&gt;</op:operator> <name><name pos:line="355" pos:column="115">n</name><op:operator pos:line="355" pos:column="116">.</op:operator><name pos:line="355" pos:column="117">Name</name></name> <op:operator pos:line="355" pos:column="122">==</op:operator> <lit:literal type="string" pos:line="355" pos:column="125">"foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="356" pos:column="13">Assert</name><op:operator pos:line="356" pos:column="19">.</op:operator><name pos:line="356" pos:column="20">IsNotNull</name></name><argument_list pos:line="356" pos:column="29">(<argument><expr><name pos:line="356" pos:column="30">foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="357" pos:column="13">var</name></type> <name pos:line="357" pos:column="17">imports</name> <init pos:line="357" pos:column="25">= <expr><call><name><name pos:line="357" pos:column="27">foo</name><op:operator pos:line="357" pos:column="30">.</op:operator><name pos:line="357" pos:column="31">GetImports</name></name><argument_list pos:line="357" pos:column="41">()</argument_list></call><op:operator pos:line="357" pos:column="43">.</op:operator><call><name pos:line="357" pos:column="44">ToList</name><argument_list pos:line="357" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="358" pos:column="13">Assert</name><op:operator pos:line="358" pos:column="19">.</op:operator><name pos:line="358" pos:column="20">AreEqual</name></name><argument_list pos:line="358" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="358" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="358" pos:column="32">imports</name><op:operator pos:line="358" pos:column="39">.</op:operator><name pos:line="358" pos:column="40">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="359" pos:column="13">Assert</name><op:operator pos:line="359" pos:column="19">.</op:operator><name pos:line="359" pos:column="20">AreEqual</name></name><argument_list pos:line="359" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="359" pos:column="29">"x :: y :: z"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="359" pos:column="44">imports</name><index pos:line="359" pos:column="51">[<expr><lit:literal type="number" pos:line="359" pos:column="52">0</lit:literal></expr>]</index></name><op:operator pos:line="359" pos:column="54">.</op:operator><call><name><name pos:line="359" pos:column="55">ImportedNamespace</name><op:operator pos:line="359" pos:column="72">.</op:operator><name pos:line="359" pos:column="73">ToString</name></name><argument_list pos:line="359" pos:column="81">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="361" pos:column="13">var</name></type> <name pos:line="361" pos:column="17">zDef</name> <init pos:line="361" pos:column="22">= <expr><call><name><name pos:line="361" pos:column="24">globalScope</name><op:operator pos:line="361" pos:column="35">.</op:operator><name><name pos:line="361" pos:column="36">GetDescendants</name><argument_list pos:line="361" pos:column="50">&lt;<argument><name pos:line="361" pos:column="51">NamespaceDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="361" pos:column="71">()</argument_list></call><op:operator pos:line="361" pos:column="73">.</op:operator><call><name pos:line="361" pos:column="74">FirstOrDefault</name><argument_list pos:line="361" pos:column="88">(<argument><expr><lambda><name pos:line="361" pos:column="89">ns</name> <op:operator pos:line="361" pos:column="92">=&gt;</op:operator> <name><name pos:line="361" pos:column="95">ns</name><op:operator pos:line="361" pos:column="97">.</op:operator><name pos:line="361" pos:column="98">Name</name></name> <op:operator pos:line="361" pos:column="103">==</op:operator> <lit:literal type="string" pos:line="361" pos:column="106">"z"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="362" pos:column="13">Assert</name><op:operator pos:line="362" pos:column="19">.</op:operator><name pos:line="362" pos:column="20">IsNotNull</name></name><argument_list pos:line="362" pos:column="29">(<argument><expr><name pos:line="362" pos:column="30">zDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="363" pos:column="13">var</name></type> <name pos:line="363" pos:column="17">zUse</name> <init pos:line="363" pos:column="22">= <expr><name><name pos:line="363" pos:column="24">imports</name><index pos:line="363" pos:column="31">[<expr><lit:literal type="number" pos:line="363" pos:column="32">0</lit:literal></expr>]</index></name><op:operator pos:line="363" pos:column="34">.</op:operator><call><name><name pos:line="363" pos:column="35">ImportedNamespace</name><op:operator pos:line="363" pos:column="52">.</op:operator><name><name pos:line="363" pos:column="53">GetDescendantsAndSelf</name><argument_list pos:line="363" pos:column="74">&lt;<argument><name pos:line="363" pos:column="75">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="363" pos:column="83">()</argument_list></call><op:operator pos:line="363" pos:column="85">.</op:operator><call><name pos:line="363" pos:column="86">First</name><argument_list pos:line="363" pos:column="91">(<argument><expr><lambda><name pos:line="363" pos:column="92">n</name> <op:operator pos:line="363" pos:column="94">=&gt;</op:operator> <name><name pos:line="363" pos:column="97">n</name><op:operator pos:line="363" pos:column="98">.</op:operator><name pos:line="363" pos:column="99">Name</name></name> <op:operator pos:line="363" pos:column="104">==</op:operator> <lit:literal type="string" pos:line="363" pos:column="107">"z"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="364" pos:column="13">Assert</name><op:operator pos:line="364" pos:column="19">.</op:operator><name pos:line="364" pos:column="20">AreSame</name></name><argument_list pos:line="364" pos:column="27">(<argument><expr><name pos:line="364" pos:column="28">zDef</name></expr></argument>, <argument><expr><call><name><name pos:line="364" pos:column="34">zUse</name><op:operator pos:line="364" pos:column="38">.</op:operator><name pos:line="364" pos:column="39">FindMatches</name></name><argument_list pos:line="364" pos:column="50">()</argument_list></call><op:operator pos:line="364" pos:column="52">.</op:operator><call><name pos:line="364" pos:column="53">FirstOrDefault</name><argument_list pos:line="364" pos:column="67">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="367" pos:column="9">[<expr><name pos:line="367" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="368" pos:column="9">public</specifier> <name pos:line="368" pos:column="16">void</name></type> <name pos:line="368" pos:column="21">TestGetImports_NestedImportNamespace</name><parameter_list pos:line="368" pos:column="57">()</parameter_list> <block pos:line="368" pos:column="60">{
            <comment type="line" pos:line="369" pos:column="13">//using namespace x::y::z;</comment>
            <comment type="line" pos:line="370" pos:column="13">//if(bar) {</comment>
            <comment type="line" pos:line="371" pos:column="13">//  using namespace std;</comment>
            <comment type="line" pos:line="372" pos:column="13">//  foo = 17;</comment>
            <comment type="line" pos:line="373" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="374" pos:column="13">string</name></type> <name pos:line="374" pos:column="20">xml</name> <init pos:line="374" pos:column="24">= <expr><lit:literal type="string" pos:line="374" pos:column="26">@"&lt;using pos:line=""1"" pos:column="&gt;using namespace &lt;name&gt;&lt;name pos:line=""1"" pos:column=""&gt;x&lt;/name&gt;&lt;op:operator pos:line=""1"" pos:column=""&gt;::&lt;/op:operator&gt;&lt;name pos:line=""1"" pos:column=""&gt;y&lt;/name&gt;&lt;op:operator pos:line=""1"" pos:column=""&gt;::&lt;/op:operator&gt;&lt;name pos:line=""1"" pos:column=""&gt;z&lt;/name&gt;&lt;/name&gt;;&lt;/using&gt;
&lt;if pos:line=""2"" pos:column="&gt;if&lt;condition pos:line=""2"" pos:column="&gt;(&lt;expr&gt;&lt;name pos:line=""2"" pos:column="&gt;bar&lt;/name&gt;&lt;/expr&gt;)&lt;/condition&gt;&lt;then pos:line=""2"" pos:column="&gt; &lt;block pos:line=""2"" pos:column="&gt;{
  &lt;using pos:line=""3"" pos:column="&gt;using namespace &lt;name pos:line=""3"" pos:column=""&gt;std&lt;/name&gt;;&lt;/using&gt;
  &lt;expr_stmt&gt;&lt;expr&gt;&lt;name pos:line=""4"" pos:column="&gt;foo&lt;/name&gt; &lt;op:operator pos:line=""4"" pos:column="&gt;=&lt;/op:operator&gt; &lt;lit:literal type=""number"" pos:line=""4"" pos:column&gt;17&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
}&lt;/block&gt;&lt;/then&gt;&lt;/if&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="379" pos:column="13">XElement</name></type> <name pos:line="379" pos:column="22">xmlElement</name> <init pos:line="379" pos:column="33">= <expr><call><name><name pos:line="379" pos:column="35">fileSetup</name><op:operator pos:line="379" pos:column="44">.</op:operator><name pos:line="379" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="379" pos:column="69">(<argument><expr><name pos:line="379" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="379" pos:column="75">"A.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <decl_stmt><decl><type><name pos:line="381" pos:column="13">var</name></type> <name pos:line="381" pos:column="17">globalScope</name> <init pos:line="381" pos:column="29">= <expr><call><name><name pos:line="381" pos:column="31">codeParser</name><op:operator pos:line="381" pos:column="41">.</op:operator><name pos:line="381" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="381" pos:column="55">(<argument><expr><name pos:line="381" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="382" pos:column="13">var</name></type> <name pos:line="382" pos:column="17">foo</name> <init pos:line="382" pos:column="21">= <expr><name><name pos:line="382" pos:column="23">globalScope</name><op:operator pos:line="382" pos:column="34">.</op:operator><name pos:line="382" pos:column="35">ChildStatements</name><index pos:line="382" pos:column="50">[<expr><lit:literal type="number" pos:line="382" pos:column="51">1</lit:literal></expr>]</index></name><op:operator pos:line="382" pos:column="53">.</op:operator><name><name pos:line="382" pos:column="54">ChildStatements</name><index pos:line="382" pos:column="69">[<expr><lit:literal type="number" pos:line="382" pos:column="70">1</lit:literal></expr>]</index></name><op:operator pos:line="382" pos:column="72">.</op:operator><call><name><name pos:line="382" pos:column="73">Content</name><op:operator pos:line="382" pos:column="80">.</op:operator><name><name pos:line="382" pos:column="81">GetDescendantsAndSelf</name><argument_list pos:line="382" pos:column="102">&lt;<argument><name pos:line="382" pos:column="103">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="382" pos:column="111">()</argument_list></call><op:operator pos:line="382" pos:column="113">.</op:operator><call><name pos:line="382" pos:column="114">FirstOrDefault</name><argument_list pos:line="382" pos:column="128">(<argument><expr><lambda><name pos:line="382" pos:column="129">n</name> <op:operator pos:line="382" pos:column="131">=&gt;</op:operator> <name><name pos:line="382" pos:column="134">n</name><op:operator pos:line="382" pos:column="135">.</op:operator><name pos:line="382" pos:column="136">Name</name></name> <op:operator pos:line="382" pos:column="141">==</op:operator> <lit:literal type="string" pos:line="382" pos:column="144">"foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="383" pos:column="13">Assert</name><op:operator pos:line="383" pos:column="19">.</op:operator><name pos:line="383" pos:column="20">IsNotNull</name></name><argument_list pos:line="383" pos:column="29">(<argument><expr><name pos:line="383" pos:column="30">foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="384" pos:column="13">var</name></type> <name pos:line="384" pos:column="17">imports</name> <init pos:line="384" pos:column="25">= <expr><call><name><name pos:line="384" pos:column="27">foo</name><op:operator pos:line="384" pos:column="30">.</op:operator><name pos:line="384" pos:column="31">GetImports</name></name><argument_list pos:line="384" pos:column="41">()</argument_list></call><op:operator pos:line="384" pos:column="43">.</op:operator><call><name pos:line="384" pos:column="44">ToList</name><argument_list pos:line="384" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="385" pos:column="13">Assert</name><op:operator pos:line="385" pos:column="19">.</op:operator><name pos:line="385" pos:column="20">AreEqual</name></name><argument_list pos:line="385" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="385" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="385" pos:column="32">imports</name><op:operator pos:line="385" pos:column="39">.</op:operator><name pos:line="385" pos:column="40">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="386" pos:column="13">Assert</name><op:operator pos:line="386" pos:column="19">.</op:operator><name pos:line="386" pos:column="20">AreEqual</name></name><argument_list pos:line="386" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="386" pos:column="29">"std"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="386" pos:column="36">imports</name><index pos:line="386" pos:column="43">[<expr><lit:literal type="number" pos:line="386" pos:column="44">0</lit:literal></expr>]</index></name><op:operator pos:line="386" pos:column="46">.</op:operator><call><name><name pos:line="386" pos:column="47">ImportedNamespace</name><op:operator pos:line="386" pos:column="64">.</op:operator><name pos:line="386" pos:column="65">ToString</name></name><argument_list pos:line="386" pos:column="73">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="387" pos:column="13">Assert</name><op:operator pos:line="387" pos:column="19">.</op:operator><name pos:line="387" pos:column="20">AreEqual</name></name><argument_list pos:line="387" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="387" pos:column="29">"x :: y :: z"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="387" pos:column="44">imports</name><index pos:line="387" pos:column="51">[<expr><lit:literal type="number" pos:line="387" pos:column="52">1</lit:literal></expr>]</index></name><op:operator pos:line="387" pos:column="54">.</op:operator><call><name><name pos:line="387" pos:column="55">ImportedNamespace</name><op:operator pos:line="387" pos:column="72">.</op:operator><name pos:line="387" pos:column="73">ToString</name></name><argument_list pos:line="387" pos:column="81">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="390" pos:column="9">[<expr><name pos:line="390" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="391" pos:column="9">public</specifier> <name pos:line="391" pos:column="16">void</name></type> <name pos:line="391" pos:column="21">TestGetAliases_NestedImportClass</name><parameter_list pos:line="391" pos:column="53">()</parameter_list> <block pos:line="391" pos:column="56">{
            <comment type="line" pos:line="392" pos:column="13">//A.cpp</comment>
            <comment type="line" pos:line="393" pos:column="13">//namespace B {</comment>
            <comment type="line" pos:line="394" pos:column="13">//  class Bar {}</comment>
            <comment type="line" pos:line="395" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="396" pos:column="13">string</name></type> <name pos:line="396" pos:column="20">xmlA</name> <init pos:line="396" pos:column="25">= <expr><lit:literal type="string" pos:line="396" pos:column="27">@"&lt;namespace pos:line=""1"" pos:column="&gt;namespace &lt;name pos:line=""1"" pos:column=""&gt;B&lt;/name&gt; &lt;block pos:line=""1"" pos:column=""&gt;{
  &lt;class pos:line=""2"" pos:column="&gt;class &lt;name pos:line=""2"" pos:column="&gt;Bar&lt;/name&gt; &lt;block pos:line=""2"" pos:column=""&gt;{&lt;private type=""default"&gt;}&lt;/block&gt;
&lt;decl/&gt;&lt;/class&gt;}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="399" pos:column="13">XElement</name></type> <name pos:line="399" pos:column="22">xmlElementA</name> <init pos:line="399" pos:column="34">= <expr><call><name><name pos:line="399" pos:column="36">fileSetup</name><op:operator pos:line="399" pos:column="45">.</op:operator><name pos:line="399" pos:column="46">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="399" pos:column="70">(<argument><expr><name pos:line="399" pos:column="71">xmlA</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="399" pos:column="77">"A.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="400" pos:column="13">//B.cpp</comment>
            <comment type="line" pos:line="401" pos:column="13">//using namespace x::y::z;</comment>
            <comment type="line" pos:line="402" pos:column="13">//if(bar) {</comment>
            <comment type="line" pos:line="403" pos:column="13">//  using B::Bar;</comment>
            <comment type="line" pos:line="404" pos:column="13">//  foo = 17;</comment>
            <comment type="line" pos:line="405" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="406" pos:column="13">string</name></type> <name pos:line="406" pos:column="20">xmlB</name> <init pos:line="406" pos:column="25">= <expr><lit:literal type="string" pos:line="406" pos:column="27">@"&lt;using pos:line=""1"" pos:column="&gt;using namespace &lt;name&gt;&lt;name pos:line=""1"" pos:column=""&gt;x&lt;/name&gt;&lt;op:operator pos:line=""1"" pos:column=""&gt;::&lt;/op:operator&gt;&lt;name pos:line=""1"" pos:column=""&gt;y&lt;/name&gt;&lt;op:operator pos:line=""1"" pos:column=""&gt;::&lt;/op:operator&gt;&lt;name pos:line=""1"" pos:column=""&gt;z&lt;/name&gt;&lt;/name&gt;;&lt;/using&gt;
&lt;if pos:line=""2"" pos:column="&gt;if&lt;condition pos:line=""2"" pos:column="&gt;(&lt;expr&gt;&lt;name pos:line=""2"" pos:column="&gt;bar&lt;/name&gt;&lt;/expr&gt;)&lt;/condition&gt;&lt;then pos:line=""2"" pos:column="&gt; &lt;block pos:line=""2"" pos:column="&gt;{
  &lt;using pos:line=""3"" pos:column="&gt;using &lt;name&gt;&lt;name pos:line=""3"" pos:column="&gt;B&lt;/name&gt;&lt;op:operator pos:line=""3"" pos:column=""&gt;::&lt;/op:operator&gt;&lt;name pos:line=""3"" pos:column=""&gt;Bar&lt;/name&gt;&lt;/name&gt;;&lt;/using&gt;
  &lt;expr_stmt&gt;&lt;expr&gt;&lt;name pos:line=""4"" pos:column="&gt;foo&lt;/name&gt; &lt;op:operator pos:line=""4"" pos:column="&gt;=&lt;/op:operator&gt; &lt;lit:literal type=""number"" pos:line=""4"" pos:column&gt;17&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
}&lt;/block&gt;&lt;/then&gt;&lt;/if&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="411" pos:column="13">XElement</name></type> <name pos:line="411" pos:column="22">xmlElementB</name> <init pos:line="411" pos:column="34">= <expr><call><name><name pos:line="411" pos:column="36">fileSetup</name><op:operator pos:line="411" pos:column="45">.</op:operator><name pos:line="411" pos:column="46">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="411" pos:column="70">(<argument><expr><name pos:line="411" pos:column="71">xmlB</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="411" pos:column="77">"B.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <decl_stmt><decl><type><name pos:line="413" pos:column="13">var</name></type> <name pos:line="413" pos:column="17">scopeA</name> <init pos:line="413" pos:column="24">= <expr><call><name><name pos:line="413" pos:column="26">codeParser</name><op:operator pos:line="413" pos:column="36">.</op:operator><name pos:line="413" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="413" pos:column="50">(<argument><expr><name pos:line="413" pos:column="51">xmlElementA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="414" pos:column="13">var</name></type> <name pos:line="414" pos:column="17">scopeB</name> <init pos:line="414" pos:column="24">= <expr><call><name><name pos:line="414" pos:column="26">codeParser</name><op:operator pos:line="414" pos:column="36">.</op:operator><name pos:line="414" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="414" pos:column="50">(<argument><expr><name pos:line="414" pos:column="51">xmlElementB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="415" pos:column="13">var</name></type> <name pos:line="415" pos:column="17">globalScope</name> <init pos:line="415" pos:column="29">= <expr><call><name><name pos:line="415" pos:column="31">scopeA</name><op:operator pos:line="415" pos:column="37">.</op:operator><name pos:line="415" pos:column="38">Merge</name></name><argument_list pos:line="415" pos:column="43">(<argument><expr><name pos:line="415" pos:column="44">scopeB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="416" pos:column="13">var</name></type> <name pos:line="416" pos:column="17">foo</name> <init pos:line="416" pos:column="21">= <expr><name><name pos:line="416" pos:column="23">globalScope</name><op:operator pos:line="416" pos:column="34">.</op:operator><name pos:line="416" pos:column="35">ChildStatements</name><index pos:line="416" pos:column="50">[<expr><lit:literal type="number" pos:line="416" pos:column="51">2</lit:literal></expr>]</index></name><op:operator pos:line="416" pos:column="53">.</op:operator><name><name pos:line="416" pos:column="54">ChildStatements</name><index pos:line="416" pos:column="69">[<expr><lit:literal type="number" pos:line="416" pos:column="70">1</lit:literal></expr>]</index></name><op:operator pos:line="416" pos:column="72">.</op:operator><call><name><name pos:line="416" pos:column="73">Content</name><op:operator pos:line="416" pos:column="80">.</op:operator><name><name pos:line="416" pos:column="81">GetDescendantsAndSelf</name><argument_list pos:line="416" pos:column="102">&lt;<argument><name pos:line="416" pos:column="103">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="416" pos:column="111">()</argument_list></call><op:operator pos:line="416" pos:column="113">.</op:operator><call><name pos:line="416" pos:column="114">FirstOrDefault</name><argument_list pos:line="416" pos:column="128">(<argument><expr><lambda><name pos:line="416" pos:column="129">n</name> <op:operator pos:line="416" pos:column="131">=&gt;</op:operator> <name><name pos:line="416" pos:column="134">n</name><op:operator pos:line="416" pos:column="135">.</op:operator><name pos:line="416" pos:column="136">Name</name></name> <op:operator pos:line="416" pos:column="141">==</op:operator> <lit:literal type="string" pos:line="416" pos:column="144">"foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="417" pos:column="13">Assert</name><op:operator pos:line="417" pos:column="19">.</op:operator><name pos:line="417" pos:column="20">IsNotNull</name></name><argument_list pos:line="417" pos:column="29">(<argument><expr><name pos:line="417" pos:column="30">foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="418" pos:column="13">var</name></type> <name pos:line="418" pos:column="17">aliases</name> <init pos:line="418" pos:column="25">= <expr><call><name><name pos:line="418" pos:column="27">foo</name><op:operator pos:line="418" pos:column="30">.</op:operator><name pos:line="418" pos:column="31">GetAliases</name></name><argument_list pos:line="418" pos:column="41">()</argument_list></call><op:operator pos:line="418" pos:column="43">.</op:operator><call><name pos:line="418" pos:column="44">ToList</name><argument_list pos:line="418" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="419" pos:column="13">Assert</name><op:operator pos:line="419" pos:column="19">.</op:operator><name pos:line="419" pos:column="20">AreEqual</name></name><argument_list pos:line="419" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="419" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="419" pos:column="32">aliases</name><op:operator pos:line="419" pos:column="39">.</op:operator><name pos:line="419" pos:column="40">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="420" pos:column="13">Assert</name><op:operator pos:line="420" pos:column="19">.</op:operator><name pos:line="420" pos:column="20">AreEqual</name></name><argument_list pos:line="420" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="420" pos:column="29">"B::Bar"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="420" pos:column="39">aliases</name><index pos:line="420" pos:column="46">[<expr><lit:literal type="number" pos:line="420" pos:column="47">0</lit:literal></expr>]</index></name><op:operator pos:line="420" pos:column="49">.</op:operator><call><name><name pos:line="420" pos:column="50">Target</name><op:operator pos:line="420" pos:column="56">.</op:operator><name pos:line="420" pos:column="57">ToString</name></name><argument_list pos:line="420" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="421" pos:column="13">Assert</name><op:operator pos:line="421" pos:column="19">.</op:operator><name pos:line="421" pos:column="20">AreEqual</name></name><argument_list pos:line="421" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="421" pos:column="29">"Bar"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="421" pos:column="36">aliases</name><index pos:line="421" pos:column="43">[<expr><lit:literal type="number" pos:line="421" pos:column="44">0</lit:literal></expr>]</index></name><op:operator pos:line="421" pos:column="46">.</op:operator><name pos:line="421" pos:column="47">AliasName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="422" pos:column="13">var</name></type> <name pos:line="422" pos:column="17">imports</name> <init pos:line="422" pos:column="25">= <expr><call><name><name pos:line="422" pos:column="27">foo</name><op:operator pos:line="422" pos:column="30">.</op:operator><name pos:line="422" pos:column="31">GetImports</name></name><argument_list pos:line="422" pos:column="41">()</argument_list></call><op:operator pos:line="422" pos:column="43">.</op:operator><call><name pos:line="422" pos:column="44">ToList</name><argument_list pos:line="422" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="423" pos:column="13">Assert</name><op:operator pos:line="423" pos:column="19">.</op:operator><name pos:line="423" pos:column="20">AreEqual</name></name><argument_list pos:line="423" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="423" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="423" pos:column="32">imports</name><op:operator pos:line="423" pos:column="39">.</op:operator><name pos:line="423" pos:column="40">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="424" pos:column="13">Assert</name><op:operator pos:line="424" pos:column="19">.</op:operator><name pos:line="424" pos:column="20">AreEqual</name></name><argument_list pos:line="424" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="424" pos:column="29">"x :: y :: z"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="424" pos:column="44">imports</name><index pos:line="424" pos:column="51">[<expr><lit:literal type="number" pos:line="424" pos:column="52">0</lit:literal></expr>]</index></name><op:operator pos:line="424" pos:column="54">.</op:operator><call><name><name pos:line="424" pos:column="55">ImportedNamespace</name><op:operator pos:line="424" pos:column="72">.</op:operator><name pos:line="424" pos:column="73">ToString</name></name><argument_list pos:line="424" pos:column="81">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="426" pos:column="13">var</name></type> <name pos:line="426" pos:column="17">barDef</name> <init pos:line="426" pos:column="24">= <expr><call><name><name pos:line="426" pos:column="26">globalScope</name><op:operator pos:line="426" pos:column="37">.</op:operator><name><name pos:line="426" pos:column="38">GetDescendants</name><argument_list pos:line="426" pos:column="52">&lt;<argument><name pos:line="426" pos:column="53">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="426" pos:column="68">()</argument_list></call><op:operator pos:line="426" pos:column="70">.</op:operator><call><name pos:line="426" pos:column="71">FirstOrDefault</name><argument_list pos:line="426" pos:column="85">(<argument><expr><lambda><name pos:line="426" pos:column="86">ns</name> <op:operator pos:line="426" pos:column="89">=&gt;</op:operator> <name><name pos:line="426" pos:column="92">ns</name><op:operator pos:line="426" pos:column="94">.</op:operator><name pos:line="426" pos:column="95">Name</name></name> <op:operator pos:line="426" pos:column="100">==</op:operator> <lit:literal type="string" pos:line="426" pos:column="103">"Bar"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="427" pos:column="13">Assert</name><op:operator pos:line="427" pos:column="19">.</op:operator><name pos:line="427" pos:column="20">IsNotNull</name></name><argument_list pos:line="427" pos:column="29">(<argument><expr><name pos:line="427" pos:column="30">barDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="428" pos:column="13">var</name></type> <name pos:line="428" pos:column="17">barUse</name> <init pos:line="428" pos:column="24">= <expr><name><name pos:line="428" pos:column="26">aliases</name><index pos:line="428" pos:column="33">[<expr><lit:literal type="number" pos:line="428" pos:column="34">0</lit:literal></expr>]</index></name><op:operator pos:line="428" pos:column="36">.</op:operator><call><name><name pos:line="428" pos:column="37">Target</name><op:operator pos:line="428" pos:column="43">.</op:operator><name><name pos:line="428" pos:column="44">GetDescendantsAndSelf</name><argument_list pos:line="428" pos:column="65">&lt;<argument><name pos:line="428" pos:column="66">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="428" pos:column="74">()</argument_list></call><op:operator pos:line="428" pos:column="76">.</op:operator><call><name pos:line="428" pos:column="77">First</name><argument_list pos:line="428" pos:column="82">(<argument><expr><lambda><name pos:line="428" pos:column="83">n</name> <op:operator pos:line="428" pos:column="85">=&gt;</op:operator> <name><name pos:line="428" pos:column="88">n</name><op:operator pos:line="428" pos:column="89">.</op:operator><name pos:line="428" pos:column="90">Name</name></name> <op:operator pos:line="428" pos:column="95">==</op:operator> <lit:literal type="string" pos:line="428" pos:column="98">"Bar"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="429" pos:column="13">Assert</name><op:operator pos:line="429" pos:column="19">.</op:operator><name pos:line="429" pos:column="20">AreSame</name></name><argument_list pos:line="429" pos:column="27">(<argument><expr><name pos:line="429" pos:column="28">barDef</name></expr></argument>, <argument><expr><call><name><name pos:line="429" pos:column="36">barUse</name><op:operator pos:line="429" pos:column="42">.</op:operator><name pos:line="429" pos:column="43">FindMatches</name></name><argument_list pos:line="429" pos:column="54">()</argument_list></call><op:operator pos:line="429" pos:column="56">.</op:operator><call><name pos:line="429" pos:column="57">FirstOrDefault</name><argument_list pos:line="429" pos:column="71">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="432" pos:column="9">[<expr><name pos:line="432" pos:column="10">Test</name></expr>]</attribute>
        <attribute pos:line="433" pos:column="9">[<expr><call><name pos:line="433" pos:column="10">Category</name><argument_list pos:line="433" pos:column="18">(<argument><expr><lit:literal type="string" pos:line="433" pos:column="19">"SrcMLUpdate"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="434" pos:column="9">public</specifier> <name pos:line="434" pos:column="16">void</name></type> <name pos:line="434" pos:column="21">TestGetAliases_NestedTypeAlias</name><parameter_list pos:line="434" pos:column="51">()</parameter_list> <block pos:line="434" pos:column="54">{
            <comment type="line" pos:line="435" pos:column="13">//using namespace x::y::z;</comment>
            <comment type="line" pos:line="436" pos:column="13">//if(bar) {</comment>
            <comment type="line" pos:line="437" pos:column="13">//  using x = foo::bar::baz;</comment>
            <comment type="line" pos:line="438" pos:column="13">//  foo = 17;</comment>
            <comment type="line" pos:line="439" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="440" pos:column="13">string</name></type> <name pos:line="440" pos:column="20">xml</name> <init pos:line="440" pos:column="24">= <expr><lit:literal type="string" pos:line="440" pos:column="26">@"&lt;using pos:line=""1"" pos:column="&gt;using namespace &lt;name&gt;&lt;name pos:line=""1"" pos:column=""&gt;x&lt;/name&gt;&lt;op:operator pos:line=""1"" pos:column=""&gt;::&lt;/op:operator&gt;&lt;name pos:line=""1"" pos:column=""&gt;y&lt;/name&gt;&lt;op:operator pos:line=""1"" pos:column=""&gt;::&lt;/op:operator&gt;&lt;name pos:line=""1"" pos:column=""&gt;z&lt;/name&gt;&lt;/name&gt;;&lt;/using&gt;
&lt;if pos:line=""2"" pos:column="&gt;if&lt;condition pos:line=""2"" pos:column="&gt;(&lt;expr&gt;&lt;name pos:line=""2"" pos:column="&gt;bar&lt;/name&gt;&lt;/expr&gt;)&lt;/condition&gt;&lt;then pos:line=""2"" pos:column="&gt; &lt;block pos:line=""2"" pos:column="&gt;{
  &lt;using pos:line=""3"" pos:column="&gt;using &lt;name pos:line=""3"" pos:column="&gt;x&lt;/name&gt; = &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;&lt;name pos:line=""3"" pos:column=""&gt;foo&lt;/name&gt;&lt;op:operator pos:line=""3"" pos:column=""&gt;::&lt;/op:operator&gt;&lt;name pos:line=""3"" pos:column=""&gt;bar&lt;/name&gt;&lt;op:operator pos:line=""3"" pos:column=""&gt;::&lt;/op:operator&gt;&lt;name pos:line=""3"" pos:column=""&gt;baz&lt;/name&gt;&lt;/name&gt;&lt;/type&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;&lt;/using&gt;
  &lt;expr_stmt&gt;&lt;expr&gt;&lt;name pos:line=""4"" pos:column="&gt;foo&lt;/name&gt; &lt;op:operator pos:line=""4"" pos:column="&gt;=&lt;/op:operator&gt; &lt;lit:literal type=""number"" pos:line=""4"" pos:column&gt;17&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
}&lt;/block&gt;&lt;/then&gt;&lt;/if&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="445" pos:column="13">XElement</name></type> <name pos:line="445" pos:column="22">xmlElement</name> <init pos:line="445" pos:column="33">= <expr><call><name><name pos:line="445" pos:column="35">fileSetup</name><op:operator pos:line="445" pos:column="44">.</op:operator><name pos:line="445" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="445" pos:column="69">(<argument><expr><name pos:line="445" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="445" pos:column="75">"A.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <decl_stmt><decl><type><name pos:line="447" pos:column="13">var</name></type> <name pos:line="447" pos:column="17">globalScope</name> <init pos:line="447" pos:column="29">= <expr><call><name><name pos:line="447" pos:column="31">codeParser</name><op:operator pos:line="447" pos:column="41">.</op:operator><name pos:line="447" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="447" pos:column="55">(<argument><expr><name pos:line="447" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="448" pos:column="13">var</name></type> <name pos:line="448" pos:column="17">foo</name> <init pos:line="448" pos:column="21">= <expr><name><name pos:line="448" pos:column="23">globalScope</name><op:operator pos:line="448" pos:column="34">.</op:operator><name pos:line="448" pos:column="35">ChildStatements</name><index pos:line="448" pos:column="50">[<expr><lit:literal type="number" pos:line="448" pos:column="51">1</lit:literal></expr>]</index></name><op:operator pos:line="448" pos:column="53">.</op:operator><name><name pos:line="448" pos:column="54">ChildStatements</name><index pos:line="448" pos:column="69">[<expr><lit:literal type="number" pos:line="448" pos:column="70">1</lit:literal></expr>]</index></name><op:operator pos:line="448" pos:column="72">.</op:operator><call><name><name pos:line="448" pos:column="73">Content</name><op:operator pos:line="448" pos:column="80">.</op:operator><name><name pos:line="448" pos:column="81">GetDescendantsAndSelf</name><argument_list pos:line="448" pos:column="102">&lt;<argument><name pos:line="448" pos:column="103">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="448" pos:column="111">()</argument_list></call><op:operator pos:line="448" pos:column="113">.</op:operator><call><name pos:line="448" pos:column="114">FirstOrDefault</name><argument_list pos:line="448" pos:column="128">(<argument><expr><lambda><name pos:line="448" pos:column="129">n</name> <op:operator pos:line="448" pos:column="131">=&gt;</op:operator> <name><name pos:line="448" pos:column="134">n</name><op:operator pos:line="448" pos:column="135">.</op:operator><name pos:line="448" pos:column="136">Name</name></name> <op:operator pos:line="448" pos:column="141">==</op:operator> <lit:literal type="string" pos:line="448" pos:column="144">"foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="449" pos:column="13">Assert</name><op:operator pos:line="449" pos:column="19">.</op:operator><name pos:line="449" pos:column="20">IsNotNull</name></name><argument_list pos:line="449" pos:column="29">(<argument><expr><name pos:line="449" pos:column="30">foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="450" pos:column="13">var</name></type> <name pos:line="450" pos:column="17">aliases</name> <init pos:line="450" pos:column="25">= <expr><call><name><name pos:line="450" pos:column="27">foo</name><op:operator pos:line="450" pos:column="30">.</op:operator><name pos:line="450" pos:column="31">GetAliases</name></name><argument_list pos:line="450" pos:column="41">()</argument_list></call><op:operator pos:line="450" pos:column="43">.</op:operator><call><name pos:line="450" pos:column="44">ToList</name><argument_list pos:line="450" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="451" pos:column="13">Assert</name><op:operator pos:line="451" pos:column="19">.</op:operator><name pos:line="451" pos:column="20">AreEqual</name></name><argument_list pos:line="451" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="451" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="451" pos:column="32">aliases</name><op:operator pos:line="451" pos:column="39">.</op:operator><name pos:line="451" pos:column="40">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="452" pos:column="13">Assert</name><op:operator pos:line="452" pos:column="19">.</op:operator><name pos:line="452" pos:column="20">AreEqual</name></name><argument_list pos:line="452" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="452" pos:column="29">"foo :: bar :: baz"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="452" pos:column="50">aliases</name><index pos:line="452" pos:column="57">[<expr><lit:literal type="number" pos:line="452" pos:column="58">0</lit:literal></expr>]</index></name><op:operator pos:line="452" pos:column="60">.</op:operator><call><name><name pos:line="452" pos:column="61">Target</name><op:operator pos:line="452" pos:column="67">.</op:operator><name pos:line="452" pos:column="68">ToString</name></name><argument_list pos:line="452" pos:column="76">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="453" pos:column="13">Assert</name><op:operator pos:line="453" pos:column="19">.</op:operator><name pos:line="453" pos:column="20">AreEqual</name></name><argument_list pos:line="453" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="453" pos:column="29">"x"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="453" pos:column="34">aliases</name><index pos:line="453" pos:column="41">[<expr><lit:literal type="number" pos:line="453" pos:column="42">0</lit:literal></expr>]</index></name><op:operator pos:line="453" pos:column="44">.</op:operator><name pos:line="453" pos:column="45">AliasName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="454" pos:column="13">var</name></type> <name pos:line="454" pos:column="17">imports</name> <init pos:line="454" pos:column="25">= <expr><call><name><name pos:line="454" pos:column="27">foo</name><op:operator pos:line="454" pos:column="30">.</op:operator><name pos:line="454" pos:column="31">GetImports</name></name><argument_list pos:line="454" pos:column="41">()</argument_list></call><op:operator pos:line="454" pos:column="43">.</op:operator><call><name pos:line="454" pos:column="44">ToList</name><argument_list pos:line="454" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="455" pos:column="13">Assert</name><op:operator pos:line="455" pos:column="19">.</op:operator><name pos:line="455" pos:column="20">AreEqual</name></name><argument_list pos:line="455" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="455" pos:column="29">"x :: y :: z"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="455" pos:column="44">imports</name><index pos:line="455" pos:column="51">[<expr><lit:literal type="number" pos:line="455" pos:column="52">0</lit:literal></expr>]</index></name><op:operator pos:line="455" pos:column="54">.</op:operator><call><name><name pos:line="455" pos:column="55">ImportedNamespace</name><op:operator pos:line="455" pos:column="72">.</op:operator><name pos:line="455" pos:column="73">ToString</name></name><argument_list pos:line="455" pos:column="81">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="458" pos:column="9">[<expr><name pos:line="458" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="459" pos:column="9">public</specifier> <name pos:line="459" pos:column="16">void</name></type> <name pos:line="459" pos:column="21">TestImport_NameResolution</name><parameter_list pos:line="459" pos:column="46">()</parameter_list> <block pos:line="459" pos:column="49">{
            <comment type="line" pos:line="460" pos:column="13">//A.cpp</comment>
            <comment type="line" pos:line="461" pos:column="13">//using namespace Foo::Bar;</comment>
            <comment type="line" pos:line="462" pos:column="13">//</comment>
            <comment type="line" pos:line="463" pos:column="13">//namespace A {</comment>
            <comment type="line" pos:line="464" pos:column="13">//  class Robot {</comment>
            <comment type="line" pos:line="465" pos:column="13">//  public: </comment>
            <comment type="line" pos:line="466" pos:column="13">//    Baz GetThingy() { </comment>
            <comment type="line" pos:line="467" pos:column="13">//      Baz* b = new Baz();</comment>
            <comment type="line" pos:line="468" pos:column="13">//      return *b;</comment>
            <comment type="line" pos:line="469" pos:column="13">//    }</comment>
            <comment type="line" pos:line="470" pos:column="13">//  }</comment>
            <comment type="line" pos:line="471" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="472" pos:column="13">string</name></type> <name pos:line="472" pos:column="20">xmlA</name> <init pos:line="472" pos:column="25">= <expr><lit:literal type="string" pos:line="472" pos:column="27">@"&lt;using pos:line=""1"" pos:column="&gt;using namespace &lt;name&gt;&lt;name pos:line=""1"" pos:column=""&gt;Foo&lt;/name&gt;&lt;op:operator pos:line=""1"" pos:column=""&gt;::&lt;/op:operator&gt;&lt;name pos:line=""1"" pos:column=""&gt;Bar&lt;/name&gt;&lt;/name&gt;;&lt;/using&gt;

&lt;namespace pos:line=""3"" pos:column="&gt;namespace &lt;name pos:line=""3"" pos:column=""&gt;A&lt;/name&gt; &lt;block pos:line=""3"" pos:column=""&gt;{
  &lt;class pos:line=""4"" pos:column="&gt;class &lt;name pos:line=""4"" pos:column="&gt;Robot&lt;/name&gt; &lt;block pos:line=""4"" pos:column=""&gt;{&lt;private type=""default"" pos:line=""4"" pos:column=&gt;
  &lt;/private&gt;&lt;public pos:line=""5"" pos:column="&gt;public: 
    &lt;function&gt;&lt;type&gt;&lt;name pos:line=""6"" pos:column="&gt;Baz&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""6"" pos:column="&gt;GetThingy&lt;/name&gt;&lt;parameter_list pos:line=""6"" pos:column=""&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""6"" pos:column=""&gt;{ 
      &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""7"" pos:column="&gt;Baz&lt;/name&gt;&lt;type:modifier pos:line=""7"" pos:column=""&gt;*&lt;/type:modifier&gt;&lt;/type&gt; &lt;name pos:line=""7"" pos:column=""&gt;b&lt;/name&gt; &lt;init pos:line=""7"" pos:column=""&gt;= &lt;expr&gt;&lt;op:operator pos:line=""7"" pos:column=""&gt;new&lt;/op:operator&gt; &lt;call&gt;&lt;name pos:line=""7"" pos:column=""&gt;Baz&lt;/name&gt;&lt;argument_list pos:line=""7"" pos:column=""&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;&lt;/init&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
      &lt;return pos:line=""8"" pos:column="&gt;return &lt;expr&gt;&lt;op:operator pos:line=""8"" pos:column=""&gt;*&lt;/op:operator&gt;&lt;name pos:line=""8"" pos:column=""&gt;b&lt;/name&gt;&lt;/expr&gt;;&lt;/return&gt;
    }&lt;/block&gt;&lt;/function&gt;
  &lt;/public&gt;}&lt;/block&gt;
&lt;decl/&gt;&lt;/class&gt;}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="483" pos:column="13">XElement</name></type> <name pos:line="483" pos:column="22">xmlElementA</name> <init pos:line="483" pos:column="34">= <expr><call><name><name pos:line="483" pos:column="36">fileSetup</name><op:operator pos:line="483" pos:column="45">.</op:operator><name pos:line="483" pos:column="46">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="483" pos:column="70">(<argument><expr><name pos:line="483" pos:column="71">xmlA</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="483" pos:column="77">"A.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="484" pos:column="13">//B.cpp</comment>
            <comment type="line" pos:line="485" pos:column="13">//namespace Foo {</comment>
            <comment type="line" pos:line="486" pos:column="13">//  namespace Bar {</comment>
            <comment type="line" pos:line="487" pos:column="13">//    class Baz {</comment>
            <comment type="line" pos:line="488" pos:column="13">//    public:</comment>
            <comment type="line" pos:line="489" pos:column="13">//      Baz() { }</comment>
            <comment type="line" pos:line="490" pos:column="13">//  }</comment>
            <comment type="line" pos:line="491" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="492" pos:column="13">string</name></type> <name pos:line="492" pos:column="20">xmlB</name> <init pos:line="492" pos:column="25">= <expr><lit:literal type="string" pos:line="492" pos:column="27">@"&lt;namespace pos:line=""1"" pos:column="&gt;namespace &lt;name pos:line=""1"" pos:column=""&gt;Foo&lt;/name&gt; &lt;block pos:line=""1"" pos:column=""&gt;{
  &lt;namespace pos:line=""2"" pos:column="&gt;namespace &lt;name pos:line=""2"" pos:column=""&gt;Bar&lt;/name&gt; &lt;block pos:line=""2"" pos:column=""&gt;{
    &lt;class pos:line=""3"" pos:column="&gt;class &lt;name pos:line=""3"" pos:column=""&gt;Baz&lt;/name&gt; &lt;block pos:line=""3"" pos:column=""&gt;{&lt;private type=""default"" pos:line=""3"" pos:column=&gt;
    &lt;/private&gt;&lt;public pos:line=""4"" pos:column="&gt;public:
      &lt;constructor&gt;&lt;name pos:line=""5"" pos:column="&gt;Baz&lt;/name&gt;&lt;parameter_list pos:line=""5"" pos:column=""&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""5"" pos:column=""&gt;{ }&lt;/block&gt;&lt;/constructor&gt;
  &lt;/public&gt;}&lt;/block&gt;
&lt;decl/&gt;&lt;/class&gt;}&lt;/block&gt;&lt;/namespace&gt;&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="499" pos:column="13">XElement</name></type> <name pos:line="499" pos:column="22">xmlElementB</name> <init pos:line="499" pos:column="34">= <expr><call><name><name pos:line="499" pos:column="36">fileSetup</name><op:operator pos:line="499" pos:column="45">.</op:operator><name pos:line="499" pos:column="46">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="499" pos:column="70">(<argument><expr><name pos:line="499" pos:column="71">xmlB</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="499" pos:column="77">"B.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <decl_stmt><decl><type><name pos:line="501" pos:column="13">var</name></type> <name pos:line="501" pos:column="17">scopeA</name> <init pos:line="501" pos:column="24">= <expr><call><name><name pos:line="501" pos:column="26">codeParser</name><op:operator pos:line="501" pos:column="36">.</op:operator><name pos:line="501" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="501" pos:column="50">(<argument><expr><name pos:line="501" pos:column="51">xmlElementA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="502" pos:column="13">var</name></type> <name pos:line="502" pos:column="17">scopeB</name> <init pos:line="502" pos:column="24">= <expr><call><name><name pos:line="502" pos:column="26">codeParser</name><op:operator pos:line="502" pos:column="36">.</op:operator><name pos:line="502" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="502" pos:column="50">(<argument><expr><name pos:line="502" pos:column="51">xmlElementB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="503" pos:column="13">var</name></type> <name pos:line="503" pos:column="17">globalScope</name> <init pos:line="503" pos:column="29">= <expr><call><name><name pos:line="503" pos:column="31">scopeA</name><op:operator pos:line="503" pos:column="37">.</op:operator><name pos:line="503" pos:column="38">Merge</name></name><argument_list pos:line="503" pos:column="43">(<argument><expr><name pos:line="503" pos:column="44">scopeB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="504" pos:column="13">Assert</name><op:operator pos:line="504" pos:column="19">.</op:operator><name pos:line="504" pos:column="20">AreEqual</name></name><argument_list pos:line="504" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="504" pos:column="29">3</lit:literal></expr></argument>, <argument><expr><name><name pos:line="504" pos:column="32">globalScope</name><op:operator pos:line="504" pos:column="43">.</op:operator><name pos:line="504" pos:column="44">ChildStatements</name><op:operator pos:line="504" pos:column="59">.</op:operator><name pos:line="504" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="506" pos:column="13">var</name></type> <name pos:line="506" pos:column="17">baz</name> <init pos:line="506" pos:column="21">= <expr><call><name><name pos:line="506" pos:column="23">globalScope</name><op:operator pos:line="506" pos:column="34">.</op:operator><name><name pos:line="506" pos:column="35">GetDescendants</name><argument_list pos:line="506" pos:column="49">&lt;<argument><name pos:line="506" pos:column="50">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="506" pos:column="65">()</argument_list></call><op:operator pos:line="506" pos:column="67">.</op:operator><call><name pos:line="506" pos:column="68">FirstOrDefault</name><argument_list pos:line="506" pos:column="82">(<argument><expr><lambda><name pos:line="506" pos:column="83">t</name> <op:operator pos:line="506" pos:column="85">=&gt;</op:operator> <name><name pos:line="506" pos:column="88">t</name><op:operator pos:line="506" pos:column="89">.</op:operator><name pos:line="506" pos:column="90">Name</name></name> <op:operator pos:line="506" pos:column="95">==</op:operator> <lit:literal type="string" pos:line="506" pos:column="98">"Baz"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="507" pos:column="13">Assert</name><op:operator pos:line="507" pos:column="19">.</op:operator><name pos:line="507" pos:column="20">IsNotNull</name></name><argument_list pos:line="507" pos:column="29">(<argument><expr><name pos:line="507" pos:column="30">baz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="509" pos:column="13">var</name></type> <name pos:line="509" pos:column="17">thingy</name> <init pos:line="509" pos:column="24">= <expr><call><name><name pos:line="509" pos:column="26">globalScope</name><op:operator pos:line="509" pos:column="37">.</op:operator><name><name pos:line="509" pos:column="38">GetDescendants</name><argument_list pos:line="509" pos:column="52">&lt;<argument><name pos:line="509" pos:column="53">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="509" pos:column="70">()</argument_list></call><op:operator pos:line="509" pos:column="72">.</op:operator><call><name pos:line="509" pos:column="73">FirstOrDefault</name><argument_list pos:line="509" pos:column="87">(<argument><expr><lambda><name pos:line="509" pos:column="88">m</name> <op:operator pos:line="509" pos:column="90">=&gt;</op:operator> <name><name pos:line="509" pos:column="93">m</name><op:operator pos:line="509" pos:column="94">.</op:operator><name pos:line="509" pos:column="95">Name</name></name> <op:operator pos:line="509" pos:column="100">==</op:operator> <lit:literal type="string" pos:line="509" pos:column="103">"GetThingy"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="510" pos:column="13">Assert</name><op:operator pos:line="510" pos:column="19">.</op:operator><name pos:line="510" pos:column="20">IsNotNull</name></name><argument_list pos:line="510" pos:column="29">(<argument><expr><name pos:line="510" pos:column="30">thingy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="511" pos:column="13">var</name></type> <name pos:line="511" pos:column="17">thingyTypes</name> <init pos:line="511" pos:column="29">= <expr><call><name><name pos:line="511" pos:column="31">thingy</name><op:operator pos:line="511" pos:column="37">.</op:operator><name pos:line="511" pos:column="38">ReturnType</name><op:operator pos:line="511" pos:column="48">.</op:operator><name pos:line="511" pos:column="49">FindMatches</name></name><argument_list pos:line="511" pos:column="60">()</argument_list></call><op:operator pos:line="511" pos:column="62">.</op:operator><call><name pos:line="511" pos:column="63">ToList</name><argument_list pos:line="511" pos:column="69">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="512" pos:column="13">Assert</name><op:operator pos:line="512" pos:column="19">.</op:operator><name pos:line="512" pos:column="20">AreEqual</name></name><argument_list pos:line="512" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="512" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="512" pos:column="32">thingyTypes</name><op:operator pos:line="512" pos:column="43">.</op:operator><name pos:line="512" pos:column="44">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="513" pos:column="13">Assert</name><op:operator pos:line="513" pos:column="19">.</op:operator><name pos:line="513" pos:column="20">AreSame</name></name><argument_list pos:line="513" pos:column="27">(<argument><expr><name pos:line="513" pos:column="28">baz</name></expr></argument>, <argument><expr><name><name pos:line="513" pos:column="33">thingyTypes</name><index pos:line="513" pos:column="44">[<expr><lit:literal type="number" pos:line="513" pos:column="45">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="515" pos:column="13">var</name></type> <name pos:line="515" pos:column="17">bazDef</name> <init pos:line="515" pos:column="24">= <expr><call><name><name pos:line="515" pos:column="26">baz</name><op:operator pos:line="515" pos:column="29">.</op:operator><name><name pos:line="515" pos:column="30">GetNamedChildren</name><argument_list pos:line="515" pos:column="46">&lt;<argument><name pos:line="515" pos:column="47">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="515" pos:column="64">(<argument><expr><lit:literal type="string" pos:line="515" pos:column="65">"Baz"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="515" pos:column="71">.</op:operator><call><name pos:line="515" pos:column="72">First</name><argument_list pos:line="515" pos:column="77">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="516" pos:column="13">var</name></type> <name pos:line="516" pos:column="17">bazCall</name> <init pos:line="516" pos:column="25">= <expr><name><name pos:line="516" pos:column="27">thingy</name><op:operator pos:line="516" pos:column="33">.</op:operator><name pos:line="516" pos:column="34">ChildStatements</name><index pos:line="516" pos:column="49">[<expr><lit:literal type="number" pos:line="516" pos:column="50">0</lit:literal></expr>]</index></name><op:operator pos:line="516" pos:column="52">.</op:operator><call><name><name pos:line="516" pos:column="53">Content</name><op:operator pos:line="516" pos:column="60">.</op:operator><name><name pos:line="516" pos:column="61">GetDescendantsAndSelf</name><argument_list pos:line="516" pos:column="82">&lt;<argument><name pos:line="516" pos:column="83">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="516" pos:column="94">()</argument_list></call><op:operator pos:line="516" pos:column="96">.</op:operator><call><name pos:line="516" pos:column="97">FirstOrDefault</name><argument_list pos:line="516" pos:column="111">(<argument><expr><lambda><name pos:line="516" pos:column="112">mc</name> <op:operator pos:line="516" pos:column="115">=&gt;</op:operator> <name><name pos:line="516" pos:column="118">mc</name><op:operator pos:line="516" pos:column="120">.</op:operator><name pos:line="516" pos:column="121">Name</name></name> <op:operator pos:line="516" pos:column="126">==</op:operator> <lit:literal type="string" pos:line="516" pos:column="129">"Baz"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="517" pos:column="13">Assert</name><op:operator pos:line="517" pos:column="19">.</op:operator><name pos:line="517" pos:column="20">IsNotNull</name></name><argument_list pos:line="517" pos:column="29">(<argument><expr><name pos:line="517" pos:column="30">bazCall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="518" pos:column="13">Assert</name><op:operator pos:line="518" pos:column="19">.</op:operator><name pos:line="518" pos:column="20">AreSame</name></name><argument_list pos:line="518" pos:column="27">(<argument><expr><name pos:line="518" pos:column="28">bazDef</name></expr></argument>, <argument><expr><call><name><name pos:line="518" pos:column="36">bazCall</name><op:operator pos:line="518" pos:column="43">.</op:operator><name pos:line="518" pos:column="44">FindMatches</name></name><argument_list pos:line="518" pos:column="55">()</argument_list></call><op:operator pos:line="518" pos:column="57">.</op:operator><call><name pos:line="518" pos:column="58">FirstOrDefault</name><argument_list pos:line="518" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="521" pos:column="9">[<expr><name pos:line="521" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="522" pos:column="9">public</specifier> <name pos:line="522" pos:column="16">void</name></type> <name pos:line="522" pos:column="21">TestAlias_NameResolution_ImportType</name><parameter_list pos:line="522" pos:column="56">()</parameter_list> <block pos:line="522" pos:column="59">{
            <comment type="line" pos:line="523" pos:column="13">//A.cpp</comment>
            <comment type="line" pos:line="524" pos:column="13">//namespace Foo {</comment>
            <comment type="line" pos:line="525" pos:column="13">//  namespace Bar {</comment>
            <comment type="line" pos:line="526" pos:column="13">//    class Baz {</comment>
            <comment type="line" pos:line="527" pos:column="13">//    public:</comment>
            <comment type="line" pos:line="528" pos:column="13">//      static void DoTheThing() { }</comment>
            <comment type="line" pos:line="529" pos:column="13">//  }</comment>
            <comment type="line" pos:line="530" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="531" pos:column="13">string</name></type> <name pos:line="531" pos:column="20">xmlA</name> <init pos:line="531" pos:column="25">= <expr><lit:literal type="string" pos:line="531" pos:column="27">@"&lt;namespace pos:line=""1"" pos:column="&gt;namespace &lt;name pos:line=""1"" pos:column=""&gt;Foo&lt;/name&gt; &lt;block pos:line=""1"" pos:column=""&gt;{
  &lt;namespace pos:line=""2"" pos:column="&gt;namespace &lt;name pos:line=""2"" pos:column=""&gt;Bar&lt;/name&gt; &lt;block pos:line=""2"" pos:column=""&gt;{
    &lt;class pos:line=""3"" pos:column="&gt;class &lt;name pos:line=""3"" pos:column=""&gt;Baz&lt;/name&gt; &lt;block pos:line=""3"" pos:column=""&gt;{&lt;private type=""default"" pos:line=""3"" pos:column=&gt;
    &lt;/private&gt;&lt;public pos:line=""4"" pos:column="&gt;public:
      &lt;function&gt;&lt;type&gt;&lt;specifier pos:line=""5"" pos:column="&gt;static&lt;/specifier&gt; &lt;name pos:line=""5"" pos:column=""&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""5"" pos:column=""&gt;DoTheThing&lt;/name&gt;&lt;parameter_list pos:line=""5"" pos:column=""&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""5"" pos:column=""&gt;{ }&lt;/block&gt;&lt;/function&gt;
  &lt;/public&gt;}&lt;/block&gt;
&lt;decl/&gt;&lt;/class&gt;}&lt;/block&gt;&lt;/namespace&gt;&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="538" pos:column="13">XElement</name></type> <name pos:line="538" pos:column="22">xmlElementA</name> <init pos:line="538" pos:column="34">= <expr><call><name><name pos:line="538" pos:column="36">fileSetup</name><op:operator pos:line="538" pos:column="45">.</op:operator><name pos:line="538" pos:column="46">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="538" pos:column="70">(<argument><expr><name pos:line="538" pos:column="71">xmlA</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="538" pos:column="77">"A.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="539" pos:column="13">//B.cpp</comment>
            <comment type="line" pos:line="540" pos:column="13">//using Foo::Bar::Baz;</comment>
            <comment type="line" pos:line="541" pos:column="13">//namespace A {</comment>
            <comment type="line" pos:line="542" pos:column="13">//  class B {</comment>
            <comment type="line" pos:line="543" pos:column="13">//  public:</comment>
            <comment type="line" pos:line="544" pos:column="13">//    B() {</comment>
            <comment type="line" pos:line="545" pos:column="13">//      Baz::DoTheThing();</comment>
            <comment type="line" pos:line="546" pos:column="13">//    }</comment>
            <comment type="line" pos:line="547" pos:column="13">//  }</comment>
            <comment type="line" pos:line="548" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="549" pos:column="13">string</name></type> <name pos:line="549" pos:column="20">xmlB</name> <init pos:line="549" pos:column="25">= <expr><lit:literal type="string" pos:line="549" pos:column="27">@"&lt;using pos:line=""1"" pos:column="&gt;using &lt;name&gt;&lt;name pos:line=""1"" pos:column="&gt;Foo&lt;/name&gt;&lt;op:operator pos:line=""1"" pos:column=""&gt;::&lt;/op:operator&gt;&lt;name pos:line=""1"" pos:column=""&gt;Bar&lt;/name&gt;&lt;op:operator pos:line=""1"" pos:column=""&gt;::&lt;/op:operator&gt;&lt;name pos:line=""1"" pos:column=""&gt;Baz&lt;/name&gt;&lt;/name&gt;;&lt;/using&gt;
&lt;namespace pos:line=""2"" pos:column="&gt;namespace &lt;name pos:line=""2"" pos:column=""&gt;A&lt;/name&gt; &lt;block pos:line=""2"" pos:column=""&gt;{
  &lt;class pos:line=""3"" pos:column="&gt;class &lt;name pos:line=""3"" pos:column="&gt;B&lt;/name&gt; &lt;block pos:line=""3"" pos:column=""&gt;{&lt;private type=""default"" pos:line=""3"" pos:column=&gt;
  &lt;/private&gt;&lt;public pos:line=""4"" pos:column="&gt;public:
    &lt;constructor&gt;&lt;name pos:line=""5"" pos:column="&gt;B&lt;/name&gt;&lt;parameter_list pos:line=""5"" pos:column="&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""5"" pos:column="&gt;{
      &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;&lt;name pos:line=""6"" pos:column="&gt;Baz&lt;/name&gt;&lt;op:operator pos:line=""6"" pos:column=""&gt;::&lt;/op:operator&gt;&lt;name pos:line=""6"" pos:column=""&gt;DoTheThing&lt;/name&gt;&lt;/name&gt;&lt;argument_list pos:line=""6"" pos:column=""&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
    }&lt;/block&gt;&lt;/constructor&gt;
  &lt;/public&gt;}&lt;/block&gt;
&lt;decl/&gt;&lt;/class&gt;}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="558" pos:column="13">XElement</name></type> <name pos:line="558" pos:column="22">xmlElementB</name> <init pos:line="558" pos:column="34">= <expr><call><name><name pos:line="558" pos:column="36">fileSetup</name><op:operator pos:line="558" pos:column="45">.</op:operator><name pos:line="558" pos:column="46">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="558" pos:column="70">(<argument><expr><name pos:line="558" pos:column="71">xmlB</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="558" pos:column="77">"B.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <decl_stmt><decl><type><name pos:line="560" pos:column="13">var</name></type> <name pos:line="560" pos:column="17">scopeA</name> <init pos:line="560" pos:column="24">= <expr><call><name><name pos:line="560" pos:column="26">codeParser</name><op:operator pos:line="560" pos:column="36">.</op:operator><name pos:line="560" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="560" pos:column="50">(<argument><expr><name pos:line="560" pos:column="51">xmlElementA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="561" pos:column="13">var</name></type> <name pos:line="561" pos:column="17">scopeB</name> <init pos:line="561" pos:column="24">= <expr><call><name><name pos:line="561" pos:column="26">codeParser</name><op:operator pos:line="561" pos:column="36">.</op:operator><name pos:line="561" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="561" pos:column="50">(<argument><expr><name pos:line="561" pos:column="51">xmlElementB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="562" pos:column="13">var</name></type> <name pos:line="562" pos:column="17">globalScope</name> <init pos:line="562" pos:column="29">= <expr><call><name><name pos:line="562" pos:column="31">scopeA</name><op:operator pos:line="562" pos:column="37">.</op:operator><name pos:line="562" pos:column="38">Merge</name></name><argument_list pos:line="562" pos:column="43">(<argument><expr><name pos:line="562" pos:column="44">scopeB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="563" pos:column="13">Assert</name><op:operator pos:line="563" pos:column="19">.</op:operator><name pos:line="563" pos:column="20">AreEqual</name></name><argument_list pos:line="563" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="563" pos:column="29">3</lit:literal></expr></argument>, <argument><expr><name><name pos:line="563" pos:column="32">globalScope</name><op:operator pos:line="563" pos:column="43">.</op:operator><name pos:line="563" pos:column="44">ChildStatements</name><op:operator pos:line="563" pos:column="59">.</op:operator><name pos:line="563" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="565" pos:column="13">var</name></type> <name pos:line="565" pos:column="17">thingDef</name> <init pos:line="565" pos:column="26">= <expr><call><name><name pos:line="565" pos:column="28">globalScope</name><op:operator pos:line="565" pos:column="39">.</op:operator><name><name pos:line="565" pos:column="40">GetDescendants</name><argument_list pos:line="565" pos:column="54">&lt;<argument><name pos:line="565" pos:column="55">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="565" pos:column="72">()</argument_list></call><op:operator pos:line="565" pos:column="74">.</op:operator><call><name pos:line="565" pos:column="75">FirstOrDefault</name><argument_list pos:line="565" pos:column="89">(<argument><expr><lambda><name pos:line="565" pos:column="90">md</name> <op:operator pos:line="565" pos:column="93">=&gt;</op:operator> <name><name pos:line="565" pos:column="96">md</name><op:operator pos:line="565" pos:column="98">.</op:operator><name pos:line="565" pos:column="99">Name</name></name> <op:operator pos:line="565" pos:column="104">==</op:operator> <lit:literal type="string" pos:line="565" pos:column="107">"DoTheThing"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="566" pos:column="13">Assert</name><op:operator pos:line="566" pos:column="19">.</op:operator><name pos:line="566" pos:column="20">IsNotNull</name></name><argument_list pos:line="566" pos:column="29">(<argument><expr><name pos:line="566" pos:column="30">thingDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="567" pos:column="13">Assert</name><op:operator pos:line="567" pos:column="19">.</op:operator><name pos:line="567" pos:column="20">AreEqual</name></name><argument_list pos:line="567" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="567" pos:column="29">"Baz"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="567" pos:column="36">(</op:operator><op:operator pos:line="567" pos:column="37">(</op:operator><name pos:line="567" pos:column="38">TypeDefinition</name><op:operator pos:line="567" pos:column="52">)</op:operator><name><name pos:line="567" pos:column="53">thingDef</name><op:operator pos:line="567" pos:column="61">.</op:operator><name pos:line="567" pos:column="62">ParentStatement</name></name><op:operator pos:line="567" pos:column="77">)</op:operator><op:operator pos:line="567" pos:column="78">.</op:operator><name pos:line="567" pos:column="79">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="569" pos:column="13">var</name></type> <name pos:line="569" pos:column="17">bDef</name> <init pos:line="569" pos:column="22">= <expr><call><name><name pos:line="569" pos:column="24">globalScope</name><op:operator pos:line="569" pos:column="35">.</op:operator><name><name pos:line="569" pos:column="36">GetDescendants</name><argument_list pos:line="569" pos:column="50">&lt;<argument><name pos:line="569" pos:column="51">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="569" pos:column="68">()</argument_list></call><op:operator pos:line="569" pos:column="70">.</op:operator><call><name pos:line="569" pos:column="71">FirstOrDefault</name><argument_list pos:line="569" pos:column="85">(<argument><expr><lambda><name pos:line="569" pos:column="86">md</name> <op:operator pos:line="569" pos:column="89">=&gt;</op:operator> <name><name pos:line="569" pos:column="92">md</name><op:operator pos:line="569" pos:column="94">.</op:operator><name pos:line="569" pos:column="95">Name</name></name> <op:operator pos:line="569" pos:column="100">==</op:operator> <lit:literal type="string" pos:line="569" pos:column="103">"B"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="570" pos:column="13">Assert</name><op:operator pos:line="570" pos:column="19">.</op:operator><name pos:line="570" pos:column="20">IsNotNull</name></name><argument_list pos:line="570" pos:column="29">(<argument><expr><name pos:line="570" pos:column="30">bDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="571" pos:column="13">Assert</name><op:operator pos:line="571" pos:column="19">.</op:operator><name pos:line="571" pos:column="20">AreEqual</name></name><argument_list pos:line="571" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="571" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="571" pos:column="32">bDef</name><op:operator pos:line="571" pos:column="36">.</op:operator><name pos:line="571" pos:column="37">ChildStatements</name><op:operator pos:line="571" pos:column="52">.</op:operator><name pos:line="571" pos:column="53">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="572" pos:column="13">var</name></type> <name pos:line="572" pos:column="17">thingCall</name> <init pos:line="572" pos:column="27">= <expr><name><name pos:line="572" pos:column="29">bDef</name><op:operator pos:line="572" pos:column="33">.</op:operator><name pos:line="572" pos:column="34">ChildStatements</name><index pos:line="572" pos:column="49">[<expr><lit:literal type="number" pos:line="572" pos:column="50">0</lit:literal></expr>]</index></name><op:operator pos:line="572" pos:column="52">.</op:operator><call><name><name pos:line="572" pos:column="53">Content</name><op:operator pos:line="572" pos:column="60">.</op:operator><name><name pos:line="572" pos:column="61">GetDescendantsAndSelf</name><argument_list pos:line="572" pos:column="82">&lt;<argument><name pos:line="572" pos:column="83">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="572" pos:column="94">()</argument_list></call><op:operator pos:line="572" pos:column="96">.</op:operator><call><name pos:line="572" pos:column="97">FirstOrDefault</name><argument_list pos:line="572" pos:column="111">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="573" pos:column="13">Assert</name><op:operator pos:line="573" pos:column="19">.</op:operator><name pos:line="573" pos:column="20">IsNotNull</name></name><argument_list pos:line="573" pos:column="29">(<argument><expr><name pos:line="573" pos:column="30">thingCall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="574" pos:column="13">Assert</name><op:operator pos:line="574" pos:column="19">.</op:operator><name pos:line="574" pos:column="20">AreSame</name></name><argument_list pos:line="574" pos:column="27">(<argument><expr><name pos:line="574" pos:column="28">thingDef</name></expr></argument>, <argument><expr><call><name><name pos:line="574" pos:column="38">thingCall</name><op:operator pos:line="574" pos:column="47">.</op:operator><name pos:line="574" pos:column="48">FindMatches</name></name><argument_list pos:line="574" pos:column="59">()</argument_list></call><op:operator pos:line="574" pos:column="61">.</op:operator><call><name pos:line="574" pos:column="62">First</name><argument_list pos:line="574" pos:column="67">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="577" pos:column="9">[<expr><name pos:line="577" pos:column="10">Test</name></expr>]</attribute>
        <attribute pos:line="578" pos:column="9">[<expr><call><name pos:line="578" pos:column="10">Category</name><argument_list pos:line="578" pos:column="18">(<argument><expr><lit:literal type="string" pos:line="578" pos:column="19">"SrcMLUpdate"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="579" pos:column="9">public</specifier> <name pos:line="579" pos:column="16">void</name></type> <name pos:line="579" pos:column="21">TestAlias_NameResolution_TypeAlias</name><parameter_list pos:line="579" pos:column="55">()</parameter_list> <block pos:line="579" pos:column="58">{
            <comment type="line" pos:line="580" pos:column="13">//A.cpp</comment>
            <comment type="line" pos:line="581" pos:column="13">//namespace Foo {</comment>
            <comment type="line" pos:line="582" pos:column="13">//  namespace Bar {</comment>
            <comment type="line" pos:line="583" pos:column="13">//    class Baz {</comment>
            <comment type="line" pos:line="584" pos:column="13">//    public:</comment>
            <comment type="line" pos:line="585" pos:column="13">//      static void DoTheThing() { }</comment>
            <comment type="line" pos:line="586" pos:column="13">//  }</comment>
            <comment type="line" pos:line="587" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="588" pos:column="13">string</name></type> <name pos:line="588" pos:column="20">xmlA</name> <init pos:line="588" pos:column="25">= <expr><lit:literal type="string" pos:line="588" pos:column="27">@"&lt;namespace pos:line=""1"" pos:column="&gt;namespace &lt;name pos:line=""1"" pos:column=""&gt;Foo&lt;/name&gt; &lt;block pos:line=""1"" pos:column=""&gt;{
  &lt;namespace pos:line=""2"" pos:column="&gt;namespace &lt;name pos:line=""2"" pos:column=""&gt;Bar&lt;/name&gt; &lt;block pos:line=""2"" pos:column=""&gt;{
    &lt;class pos:line=""3"" pos:column="&gt;class &lt;name pos:line=""3"" pos:column=""&gt;Baz&lt;/name&gt; &lt;block pos:line=""3"" pos:column=""&gt;{&lt;private type=""default"" pos:line=""3"" pos:column=&gt;
    &lt;/private&gt;&lt;public pos:line=""4"" pos:column="&gt;public:
      &lt;function&gt;&lt;type&gt;&lt;specifier pos:line=""5"" pos:column="&gt;static&lt;/specifier&gt; &lt;name pos:line=""5"" pos:column=""&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""5"" pos:column=""&gt;DoTheThing&lt;/name&gt;&lt;parameter_list pos:line=""5"" pos:column=""&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""5"" pos:column=""&gt;{ }&lt;/block&gt;&lt;/function&gt;
  &lt;/public&gt;}&lt;/block&gt;
&lt;decl/&gt;&lt;/class&gt;}&lt;/block&gt;&lt;/namespace&gt;&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="595" pos:column="13">XElement</name></type> <name pos:line="595" pos:column="22">xmlElementA</name> <init pos:line="595" pos:column="34">= <expr><call><name><name pos:line="595" pos:column="36">fileSetup</name><op:operator pos:line="595" pos:column="45">.</op:operator><name pos:line="595" pos:column="46">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="595" pos:column="70">(<argument><expr><name pos:line="595" pos:column="71">xmlA</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="595" pos:column="77">"A.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="596" pos:column="13">//B.cpp</comment>
            <comment type="line" pos:line="597" pos:column="13">//using X = Foo::Bar::Baz;</comment>
            <comment type="line" pos:line="598" pos:column="13">//namespace A {</comment>
            <comment type="line" pos:line="599" pos:column="13">//  class B {</comment>
            <comment type="line" pos:line="600" pos:column="13">//  public:</comment>
            <comment type="line" pos:line="601" pos:column="13">//    B() {</comment>
            <comment type="line" pos:line="602" pos:column="13">//      X::DoTheThing();</comment>
            <comment type="line" pos:line="603" pos:column="13">//    }</comment>
            <comment type="line" pos:line="604" pos:column="13">//  }</comment>
            <comment type="line" pos:line="605" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="606" pos:column="13">string</name></type> <name pos:line="606" pos:column="20">xmlB</name> <init pos:line="606" pos:column="25">= <expr><lit:literal type="string" pos:line="606" pos:column="27">@"&lt;using pos:line=""1"" pos:column="&gt;using &lt;name pos:line=""1"" pos:column="&gt;X&lt;/name&gt; = &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;&lt;name pos:line=""1"" pos:column=""&gt;Foo&lt;/name&gt;&lt;op:operator pos:line=""1"" pos:column=""&gt;::&lt;/op:operator&gt;&lt;name pos:line=""1"" pos:column=""&gt;Bar&lt;/name&gt;&lt;op:operator pos:line=""1"" pos:column=""&gt;::&lt;/op:operator&gt;&lt;name pos:line=""1"" pos:column=""&gt;Baz&lt;/name&gt;&lt;/name&gt;&lt;/type&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;&lt;/using&gt;
&lt;namespace pos:line=""2"" pos:column="&gt;namespace &lt;name pos:line=""2"" pos:column=""&gt;A&lt;/name&gt; &lt;block pos:line=""2"" pos:column=""&gt;{
  &lt;class pos:line=""3"" pos:column="&gt;class &lt;name pos:line=""3"" pos:column="&gt;B&lt;/name&gt; &lt;block pos:line=""3"" pos:column=""&gt;{&lt;private type=""default"" pos:line=""3"" pos:column=&gt;
  &lt;/private&gt;&lt;public pos:line=""4"" pos:column="&gt;public:
    &lt;constructor&gt;&lt;name pos:line=""5"" pos:column="&gt;B&lt;/name&gt;&lt;parameter_list pos:line=""5"" pos:column="&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""5"" pos:column="&gt;{
      &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;&lt;name pos:line=""6"" pos:column="&gt;X&lt;/name&gt;&lt;op:operator pos:line=""6"" pos:column="&gt;::&lt;/op:operator&gt;&lt;name pos:line=""6"" pos:column=""&gt;DoTheThing&lt;/name&gt;&lt;/name&gt;&lt;argument_list pos:line=""6"" pos:column=""&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
    }&lt;/block&gt;&lt;/constructor&gt;
  &lt;/public&gt;}&lt;/block&gt;
&lt;decl/&gt;&lt;/class&gt;}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="615" pos:column="13">XElement</name></type> <name pos:line="615" pos:column="22">xmlElementB</name> <init pos:line="615" pos:column="34">= <expr><call><name><name pos:line="615" pos:column="36">fileSetup</name><op:operator pos:line="615" pos:column="45">.</op:operator><name pos:line="615" pos:column="46">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="615" pos:column="70">(<argument><expr><name pos:line="615" pos:column="71">xmlB</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="615" pos:column="77">"B.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <decl_stmt><decl><type><name pos:line="617" pos:column="13">var</name></type> <name pos:line="617" pos:column="17">scopeA</name> <init pos:line="617" pos:column="24">= <expr><call><name><name pos:line="617" pos:column="26">codeParser</name><op:operator pos:line="617" pos:column="36">.</op:operator><name pos:line="617" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="617" pos:column="50">(<argument><expr><name pos:line="617" pos:column="51">xmlElementA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="618" pos:column="13">var</name></type> <name pos:line="618" pos:column="17">scopeB</name> <init pos:line="618" pos:column="24">= <expr><call><name><name pos:line="618" pos:column="26">codeParser</name><op:operator pos:line="618" pos:column="36">.</op:operator><name pos:line="618" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="618" pos:column="50">(<argument><expr><name pos:line="618" pos:column="51">xmlElementB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="619" pos:column="13">var</name></type> <name pos:line="619" pos:column="17">globalScope</name> <init pos:line="619" pos:column="29">= <expr><call><name><name pos:line="619" pos:column="31">scopeA</name><op:operator pos:line="619" pos:column="37">.</op:operator><name pos:line="619" pos:column="38">Merge</name></name><argument_list pos:line="619" pos:column="43">(<argument><expr><name pos:line="619" pos:column="44">scopeB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="620" pos:column="13">Assert</name><op:operator pos:line="620" pos:column="19">.</op:operator><name pos:line="620" pos:column="20">AreEqual</name></name><argument_list pos:line="620" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="620" pos:column="29">3</lit:literal></expr></argument>, <argument><expr><name><name pos:line="620" pos:column="32">globalScope</name><op:operator pos:line="620" pos:column="43">.</op:operator><name pos:line="620" pos:column="44">ChildStatements</name><op:operator pos:line="620" pos:column="59">.</op:operator><name pos:line="620" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="622" pos:column="13">var</name></type> <name pos:line="622" pos:column="17">thingDef</name> <init pos:line="622" pos:column="26">= <expr><call><name><name pos:line="622" pos:column="28">globalScope</name><op:operator pos:line="622" pos:column="39">.</op:operator><name><name pos:line="622" pos:column="40">GetDescendants</name><argument_list pos:line="622" pos:column="54">&lt;<argument><name pos:line="622" pos:column="55">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="622" pos:column="72">()</argument_list></call><op:operator pos:line="622" pos:column="74">.</op:operator><call><name pos:line="622" pos:column="75">FirstOrDefault</name><argument_list pos:line="622" pos:column="89">(<argument><expr><lambda><name pos:line="622" pos:column="90">md</name> <op:operator pos:line="622" pos:column="93">=&gt;</op:operator> <name><name pos:line="622" pos:column="96">md</name><op:operator pos:line="622" pos:column="98">.</op:operator><name pos:line="622" pos:column="99">Name</name></name> <op:operator pos:line="622" pos:column="104">==</op:operator> <lit:literal type="string" pos:line="622" pos:column="107">"DoTheThing"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="623" pos:column="13">Assert</name><op:operator pos:line="623" pos:column="19">.</op:operator><name pos:line="623" pos:column="20">IsNotNull</name></name><argument_list pos:line="623" pos:column="29">(<argument><expr><name pos:line="623" pos:column="30">thingDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="624" pos:column="13">Assert</name><op:operator pos:line="624" pos:column="19">.</op:operator><name pos:line="624" pos:column="20">AreEqual</name></name><argument_list pos:line="624" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="624" pos:column="29">"Baz"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="624" pos:column="36">(</op:operator><op:operator pos:line="624" pos:column="37">(</op:operator><name pos:line="624" pos:column="38">TypeDefinition</name><op:operator pos:line="624" pos:column="52">)</op:operator><name><name pos:line="624" pos:column="53">thingDef</name><op:operator pos:line="624" pos:column="61">.</op:operator><name pos:line="624" pos:column="62">ParentStatement</name></name><op:operator pos:line="624" pos:column="77">)</op:operator><op:operator pos:line="624" pos:column="78">.</op:operator><name pos:line="624" pos:column="79">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="626" pos:column="13">var</name></type> <name pos:line="626" pos:column="17">bDef</name> <init pos:line="626" pos:column="22">= <expr><call><name><name pos:line="626" pos:column="24">globalScope</name><op:operator pos:line="626" pos:column="35">.</op:operator><name><name pos:line="626" pos:column="36">GetDescendants</name><argument_list pos:line="626" pos:column="50">&lt;<argument><name pos:line="626" pos:column="51">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="626" pos:column="68">()</argument_list></call><op:operator pos:line="626" pos:column="70">.</op:operator><call><name pos:line="626" pos:column="71">FirstOrDefault</name><argument_list pos:line="626" pos:column="85">(<argument><expr><lambda><name pos:line="626" pos:column="86">md</name> <op:operator pos:line="626" pos:column="89">=&gt;</op:operator> <name><name pos:line="626" pos:column="92">md</name><op:operator pos:line="626" pos:column="94">.</op:operator><name pos:line="626" pos:column="95">Name</name></name> <op:operator pos:line="626" pos:column="100">==</op:operator> <lit:literal type="string" pos:line="626" pos:column="103">"B"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="627" pos:column="13">Assert</name><op:operator pos:line="627" pos:column="19">.</op:operator><name pos:line="627" pos:column="20">IsNotNull</name></name><argument_list pos:line="627" pos:column="29">(<argument><expr><name pos:line="627" pos:column="30">bDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="628" pos:column="13">Assert</name><op:operator pos:line="628" pos:column="19">.</op:operator><name pos:line="628" pos:column="20">AreEqual</name></name><argument_list pos:line="628" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="628" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="628" pos:column="32">bDef</name><op:operator pos:line="628" pos:column="36">.</op:operator><name pos:line="628" pos:column="37">ChildStatements</name><op:operator pos:line="628" pos:column="52">.</op:operator><name pos:line="628" pos:column="53">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="629" pos:column="13">var</name></type> <name pos:line="629" pos:column="17">thingCall</name> <init pos:line="629" pos:column="27">= <expr><name><name pos:line="629" pos:column="29">bDef</name><op:operator pos:line="629" pos:column="33">.</op:operator><name pos:line="629" pos:column="34">ChildStatements</name><index pos:line="629" pos:column="49">[<expr><lit:literal type="number" pos:line="629" pos:column="50">0</lit:literal></expr>]</index></name><op:operator pos:line="629" pos:column="52">.</op:operator><call><name><name pos:line="629" pos:column="53">Content</name><op:operator pos:line="629" pos:column="60">.</op:operator><name><name pos:line="629" pos:column="61">GetDescendantsAndSelf</name><argument_list pos:line="629" pos:column="82">&lt;<argument><name pos:line="629" pos:column="83">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="629" pos:column="94">()</argument_list></call><op:operator pos:line="629" pos:column="96">.</op:operator><call><name pos:line="629" pos:column="97">FirstOrDefault</name><argument_list pos:line="629" pos:column="111">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="630" pos:column="13">Assert</name><op:operator pos:line="630" pos:column="19">.</op:operator><name pos:line="630" pos:column="20">IsNotNull</name></name><argument_list pos:line="630" pos:column="29">(<argument><expr><name pos:line="630" pos:column="30">thingCall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="631" pos:column="13">Assert</name><op:operator pos:line="631" pos:column="19">.</op:operator><name pos:line="631" pos:column="20">AreSame</name></name><argument_list pos:line="631" pos:column="27">(<argument><expr><name pos:line="631" pos:column="28">thingDef</name></expr></argument>, <argument><expr><call><name><name pos:line="631" pos:column="38">thingCall</name><op:operator pos:line="631" pos:column="47">.</op:operator><name pos:line="631" pos:column="48">FindMatches</name></name><argument_list pos:line="631" pos:column="59">()</argument_list></call><op:operator pos:line="631" pos:column="61">.</op:operator><call><name pos:line="631" pos:column="62">First</name><argument_list pos:line="631" pos:column="67">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="634" pos:column="9">[<expr><name pos:line="634" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="635" pos:column="9">public</specifier> <name pos:line="635" pos:column="16">void</name></type> <name pos:line="635" pos:column="21">TestCreateTypeDefinition_ClassInNamespace</name><parameter_list pos:line="635" pos:column="62">()</parameter_list> <block pos:line="635" pos:column="65">{
            <comment type="line" pos:line="636" pos:column="13">// namespace A { class B { }; }</comment>
            <decl_stmt><decl><type><name pos:line="637" pos:column="13">string</name></type> <name pos:line="637" pos:column="20">xml</name> <init pos:line="637" pos:column="24">= <expr><lit:literal type="string" pos:line="637" pos:column="26">@"&lt;namespace&gt;namespace &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{
    &lt;class&gt;class &lt;name&gt;B&lt;/name&gt; &lt;block&gt;{&lt;private type=""default&gt;
    &lt;/private&gt;}&lt;/block&gt;;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="642" pos:column="13">XElement</name></type> <name pos:line="642" pos:column="22">xmlElement</name> <init pos:line="642" pos:column="33">= <expr><call><name><name pos:line="642" pos:column="35">fileSetup</name><op:operator pos:line="642" pos:column="44">.</op:operator><name pos:line="642" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="642" pos:column="69">(<argument><expr><name pos:line="642" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="642" pos:column="75">"B.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="644" pos:column="13">var</name></type> <name pos:line="644" pos:column="17">globalScope</name> <init pos:line="644" pos:column="29">= <expr><call><name><name pos:line="644" pos:column="31">codeParser</name><op:operator pos:line="644" pos:column="41">.</op:operator><name pos:line="644" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="644" pos:column="55">(<argument><expr><name pos:line="644" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="645" pos:column="13">var</name></type> <name pos:line="645" pos:column="17">namespaceA</name> <init pos:line="645" pos:column="28">= <expr><call><name><name pos:line="645" pos:column="30">globalScope</name><op:operator pos:line="645" pos:column="41">.</op:operator><name pos:line="645" pos:column="42">ChildStatements</name><op:operator pos:line="645" pos:column="57">.</op:operator><name pos:line="645" pos:column="58">First</name></name><argument_list pos:line="645" pos:column="63">()</argument_list></call> <op:operator pos:line="645" pos:column="66">as</op:operator> <name pos:line="645" pos:column="69">NamespaceDefinition</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="646" pos:column="13">var</name></type> <name pos:line="646" pos:column="17">typeB</name> <init pos:line="646" pos:column="23">= <expr><call><name><name pos:line="646" pos:column="25">namespaceA</name><op:operator pos:line="646" pos:column="35">.</op:operator><name pos:line="646" pos:column="36">ChildStatements</name><op:operator pos:line="646" pos:column="51">.</op:operator><name pos:line="646" pos:column="52">First</name></name><argument_list pos:line="646" pos:column="57">()</argument_list></call> <op:operator pos:line="646" pos:column="60">as</op:operator> <name pos:line="646" pos:column="63">TypeDefinition</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="648" pos:column="13">Assert</name><op:operator pos:line="648" pos:column="19">.</op:operator><name pos:line="648" pos:column="20">AreEqual</name></name><argument_list pos:line="648" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="648" pos:column="29">"A"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="648" pos:column="34">namespaceA</name><op:operator pos:line="648" pos:column="44">.</op:operator><name pos:line="648" pos:column="45">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="649" pos:column="13">Assert</name><op:operator pos:line="649" pos:column="19">.</op:operator><name pos:line="649" pos:column="20">IsFalse</name></name><argument_list pos:line="649" pos:column="27">(<argument><expr><name><name pos:line="649" pos:column="28">namespaceA</name><op:operator pos:line="649" pos:column="38">.</op:operator><name pos:line="649" pos:column="39">IsGlobal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="651" pos:column="13">Assert</name><op:operator pos:line="651" pos:column="19">.</op:operator><name pos:line="651" pos:column="20">AreEqual</name></name><argument_list pos:line="651" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="651" pos:column="29">"B"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="651" pos:column="34">typeB</name><op:operator pos:line="651" pos:column="39">.</op:operator><name pos:line="651" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="654" pos:column="9">[<expr><name pos:line="654" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="655" pos:column="9">public</specifier> <name pos:line="655" pos:column="16">void</name></type> <name pos:line="655" pos:column="21">TestCreateTypeDefinition_ClassWithMethodDeclaration</name><parameter_list pos:line="655" pos:column="72">()</parameter_list> <block pos:line="655" pos:column="75">{
            <comment type="line" pos:line="656" pos:column="13">// class A {</comment>
            <comment type="line" pos:line="657" pos:column="13">// public:</comment>
            <comment type="line" pos:line="658" pos:column="13">// int foo(int a); };</comment>
            <decl_stmt><decl><type><name pos:line="659" pos:column="13">string</name></type> <name pos:line="659" pos:column="20">xml</name> <init pos:line="659" pos:column="24">= <expr><lit:literal type="string" pos:line="659" pos:column="26">@"&lt;class&gt;class &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{&lt;private type=""default&gt;
&lt;/private&gt;&lt;public&gt;public:
    &lt;function_decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;foo&lt;/name&gt;&lt;parameter_list&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;a&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt;;&lt;/function_decl&gt;
&lt;/public&gt;}&lt;/block&gt;;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="664" pos:column="13">XElement</name></type> <name pos:line="664" pos:column="22">xmlElement</name> <init pos:line="664" pos:column="33">= <expr><call><name><name pos:line="664" pos:column="35">fileSetup</name><op:operator pos:line="664" pos:column="44">.</op:operator><name pos:line="664" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="664" pos:column="69">(<argument><expr><name pos:line="664" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="664" pos:column="75">"A.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="666" pos:column="13">var</name></type> <name pos:line="666" pos:column="17">globalScope</name> <init pos:line="666" pos:column="29">= <expr><call><name><name pos:line="666" pos:column="31">codeParser</name><op:operator pos:line="666" pos:column="41">.</op:operator><name pos:line="666" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="666" pos:column="55">(<argument><expr><name pos:line="666" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="668" pos:column="13">var</name></type> <name pos:line="668" pos:column="17">typeA</name> <init pos:line="668" pos:column="23">= <expr><call><name><name pos:line="668" pos:column="25">globalScope</name><op:operator pos:line="668" pos:column="36">.</op:operator><name pos:line="668" pos:column="37">ChildStatements</name><op:operator pos:line="668" pos:column="52">.</op:operator><name pos:line="668" pos:column="53">First</name></name><argument_list pos:line="668" pos:column="58">()</argument_list></call> <op:operator pos:line="668" pos:column="61">as</op:operator> <name pos:line="668" pos:column="64">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="669" pos:column="13">Assert</name><op:operator pos:line="669" pos:column="19">.</op:operator><name pos:line="669" pos:column="20">AreEqual</name></name><argument_list pos:line="669" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="669" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="669" pos:column="32">typeA</name><op:operator pos:line="669" pos:column="37">.</op:operator><name pos:line="669" pos:column="38">ChildStatements</name><op:operator pos:line="669" pos:column="53">.</op:operator><name pos:line="669" pos:column="54">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="670" pos:column="13">var</name></type> <name pos:line="670" pos:column="17">methodFoo</name> <init pos:line="670" pos:column="27">= <expr><call><name><name pos:line="670" pos:column="29">typeA</name><op:operator pos:line="670" pos:column="34">.</op:operator><name pos:line="670" pos:column="35">ChildStatements</name><op:operator pos:line="670" pos:column="50">.</op:operator><name pos:line="670" pos:column="51">First</name></name><argument_list pos:line="670" pos:column="56">()</argument_list></call> <op:operator pos:line="670" pos:column="59">as</op:operator> <name pos:line="670" pos:column="62">MethodDefinition</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="672" pos:column="13">Assert</name><op:operator pos:line="672" pos:column="19">.</op:operator><name pos:line="672" pos:column="20">AreEqual</name></name><argument_list pos:line="672" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="672" pos:column="29">"A"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="672" pos:column="34">typeA</name><op:operator pos:line="672" pos:column="39">.</op:operator><name pos:line="672" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="673" pos:column="13">Assert</name><op:operator pos:line="673" pos:column="19">.</op:operator><name pos:line="673" pos:column="20">AreEqual</name></name><argument_list pos:line="673" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="673" pos:column="29">"foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="673" pos:column="36">methodFoo</name><op:operator pos:line="673" pos:column="45">.</op:operator><name pos:line="673" pos:column="46">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="675" pos:column="13">Assert</name><op:operator pos:line="675" pos:column="19">.</op:operator><name pos:line="675" pos:column="20">AreEqual</name></name><argument_list pos:line="675" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="675" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="675" pos:column="32">methodFoo</name><op:operator pos:line="675" pos:column="41">.</op:operator><name pos:line="675" pos:column="42">Parameters</name><op:operator pos:line="675" pos:column="52">.</op:operator><name pos:line="675" pos:column="53">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="678" pos:column="9">[<expr><name pos:line="678" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="679" pos:column="9">public</specifier> <name pos:line="679" pos:column="16">void</name></type> <name pos:line="679" pos:column="21">TestCreateTypeDefinition_StaticMethod</name><parameter_list pos:line="679" pos:column="58">()</parameter_list> <block pos:line="679" pos:column="61">{
            <comment type="line" pos:line="680" pos:column="13">//class Example {</comment>
            <comment type="line" pos:line="681" pos:column="13">//public:</comment>
            <comment type="line" pos:line="682" pos:column="13">//    static int Example::Foo(int bar) { return bar+1; }</comment>
            <comment type="line" pos:line="683" pos:column="13">//};</comment>
            <decl_stmt><decl><type><name pos:line="684" pos:column="13">string</name></type> <name pos:line="684" pos:column="20">xml</name> <init pos:line="684" pos:column="24">= <expr><lit:literal type="string" pos:line="684" pos:column="26">@"&lt;class&gt;class &lt;name&gt;Example&lt;/name&gt; &lt;block&gt;{&lt;private type=""default&gt;
&lt;/private&gt;&lt;public&gt;public:
    &lt;function&gt;&lt;type&gt;&lt;name&gt;static&lt;/name&gt; &lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;&lt;name&gt;Example&lt;/name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;/name&gt;&lt;parameter_list&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;bar&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt; &lt;block&gt;{ &lt;return&gt;return &lt;expr&gt;&lt;name&gt;bar&lt;/name&gt;&lt;op:operator&gt;+&lt;/op:operator&gt;&lt;lit:literal type=""number&gt;1&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt; }&lt;/block&gt;&lt;/function&gt;
&lt;/public&gt;}&lt;/block&gt;;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="688" pos:column="13">var</name></type> <name pos:line="688" pos:column="17">fileUnit</name> <init pos:line="688" pos:column="26">= <expr><call><name><name pos:line="688" pos:column="28">fileSetup</name><op:operator pos:line="688" pos:column="37">.</op:operator><name pos:line="688" pos:column="38">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="688" pos:column="62">(<argument><expr><name pos:line="688" pos:column="63">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="688" pos:column="68">"static_method.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="689" pos:column="13">var</name></type> <name pos:line="689" pos:column="17">globalScope</name> <init pos:line="689" pos:column="29">= <expr><call><name><name pos:line="689" pos:column="31">codeParser</name><op:operator pos:line="689" pos:column="41">.</op:operator><name pos:line="689" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="689" pos:column="55">(<argument><expr><name pos:line="689" pos:column="56">fileUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="691" pos:column="13">var</name></type> <name pos:line="691" pos:column="17">example</name> <init pos:line="691" pos:column="25">= <expr><call><name><name pos:line="691" pos:column="27">globalScope</name><op:operator pos:line="691" pos:column="38">.</op:operator><name pos:line="691" pos:column="39">ChildStatements</name><op:operator pos:line="691" pos:column="54">.</op:operator><name><name pos:line="691" pos:column="55">OfType</name><argument_list pos:line="691" pos:column="61">&lt;<argument><name pos:line="691" pos:column="62">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="691" pos:column="77">()</argument_list></call><op:operator pos:line="691" pos:column="79">.</op:operator><call><name pos:line="691" pos:column="80">FirstOrDefault</name><argument_list pos:line="691" pos:column="94">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="692" pos:column="13">Assert</name><op:operator pos:line="692" pos:column="19">.</op:operator><name pos:line="692" pos:column="20">IsNotNull</name></name><argument_list pos:line="692" pos:column="29">(<argument><expr><name pos:line="692" pos:column="30">example</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="693" pos:column="13">Assert</name><op:operator pos:line="693" pos:column="19">.</op:operator><name pos:line="693" pos:column="20">AreEqual</name></name><argument_list pos:line="693" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="693" pos:column="29">"Example"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="693" pos:column="40">example</name><op:operator pos:line="693" pos:column="47">.</op:operator><name pos:line="693" pos:column="48">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="694" pos:column="13">Assert</name><op:operator pos:line="694" pos:column="19">.</op:operator><name pos:line="694" pos:column="20">AreEqual</name></name><argument_list pos:line="694" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="694" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="694" pos:column="32">example</name><op:operator pos:line="694" pos:column="39">.</op:operator><name pos:line="694" pos:column="40">ChildStatements</name><op:operator pos:line="694" pos:column="55">.</op:operator><name pos:line="694" pos:column="56">Count</name></name><argument_list pos:line="694" pos:column="61">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="695" pos:column="13">var</name></type> <name pos:line="695" pos:column="17">foo</name> <init pos:line="695" pos:column="21">= <expr><call><name><name pos:line="695" pos:column="23">example</name><op:operator pos:line="695" pos:column="30">.</op:operator><name pos:line="695" pos:column="31">ChildStatements</name><op:operator pos:line="695" pos:column="46">.</op:operator><name><name pos:line="695" pos:column="47">OfType</name><argument_list pos:line="695" pos:column="53">&lt;<argument><name pos:line="695" pos:column="54">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="695" pos:column="71">()</argument_list></call><op:operator pos:line="695" pos:column="73">.</op:operator><call><name pos:line="695" pos:column="74">FirstOrDefault</name><argument_list pos:line="695" pos:column="88">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="696" pos:column="13">Assert</name><op:operator pos:line="696" pos:column="19">.</op:operator><name pos:line="696" pos:column="20">IsNotNull</name></name><argument_list pos:line="696" pos:column="29">(<argument><expr><name pos:line="696" pos:column="30">foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="697" pos:column="13">Assert</name><op:operator pos:line="697" pos:column="19">.</op:operator><name pos:line="697" pos:column="20">AreEqual</name></name><argument_list pos:line="697" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="697" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="697" pos:column="36">foo</name><op:operator pos:line="697" pos:column="39">.</op:operator><name pos:line="697" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>


        <function><type><attribute pos:line="701" pos:column="9">[<expr><name pos:line="701" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="702" pos:column="9">public</specifier> <name pos:line="702" pos:column="16">void</name></type> <name pos:line="702" pos:column="21">TestCreateTypeDefinitions_ClassInFunction</name><parameter_list pos:line="702" pos:column="62">()</parameter_list> <block pos:line="702" pos:column="65">{
            <comment type="line" pos:line="703" pos:column="13">// int main() { class A { }; }</comment>
            <decl_stmt><decl><type><name pos:line="704" pos:column="13">string</name></type> <name pos:line="704" pos:column="20">xml</name> <init pos:line="704" pos:column="24">= <expr><lit:literal type="string" pos:line="704" pos:column="26">@"&lt;function&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;main&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{
    &lt;class&gt;class &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{&lt;private type=""default&gt;
    &lt;/private&gt;}&lt;/block&gt;;&lt;/class&gt;
}&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="709" pos:column="13">XElement</name></type> <name pos:line="709" pos:column="22">xmlElement</name> <init pos:line="709" pos:column="33">= <expr><call><name><name pos:line="709" pos:column="35">fileSetup</name><op:operator pos:line="709" pos:column="44">.</op:operator><name pos:line="709" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="709" pos:column="69">(<argument><expr><name pos:line="709" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="709" pos:column="75">"main.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="710" pos:column="13">var</name></type> <name pos:line="710" pos:column="17">mainMethod</name> <init pos:line="710" pos:column="28">= <expr><call><name><name pos:line="710" pos:column="30">codeParser</name><op:operator pos:line="710" pos:column="40">.</op:operator><name pos:line="710" pos:column="41">ParseFileUnit</name></name><argument_list pos:line="710" pos:column="54">(<argument><expr><name pos:line="710" pos:column="55">xmlElement</name></expr></argument>)</argument_list></call><op:operator pos:line="710" pos:column="66">.</op:operator><call><name><name pos:line="710" pos:column="67">ChildStatements</name><op:operator pos:line="710" pos:column="82">.</op:operator><name pos:line="710" pos:column="83">First</name></name><argument_list pos:line="710" pos:column="88">()</argument_list></call> <op:operator pos:line="710" pos:column="91">as</op:operator> <name pos:line="710" pos:column="94">MethodDefinition</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="712" pos:column="13">Assert</name><op:operator pos:line="712" pos:column="19">.</op:operator><name pos:line="712" pos:column="20">AreEqual</name></name><argument_list pos:line="712" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="712" pos:column="29">"main"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="712" pos:column="37">mainMethod</name><op:operator pos:line="712" pos:column="47">.</op:operator><name pos:line="712" pos:column="48">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="714" pos:column="13">var</name></type> <name pos:line="714" pos:column="17">typeA</name> <init pos:line="714" pos:column="23">= <expr><call><name><name pos:line="714" pos:column="25">mainMethod</name><op:operator pos:line="714" pos:column="35">.</op:operator><name pos:line="714" pos:column="36">ChildStatements</name><op:operator pos:line="714" pos:column="51">.</op:operator><name pos:line="714" pos:column="52">First</name></name><argument_list pos:line="714" pos:column="57">()</argument_list></call> <op:operator pos:line="714" pos:column="60">as</op:operator> <name pos:line="714" pos:column="63">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="715" pos:column="13">Assert</name><op:operator pos:line="715" pos:column="19">.</op:operator><name pos:line="715" pos:column="20">AreEqual</name></name><argument_list pos:line="715" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="715" pos:column="29">"A"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="715" pos:column="34">typeA</name><op:operator pos:line="715" pos:column="39">.</op:operator><name pos:line="715" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="716" pos:column="13">Assert</name><op:operator pos:line="716" pos:column="19">.</op:operator><name pos:line="716" pos:column="20">AreEqual</name></name><argument_list pos:line="716" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="716" pos:column="29">"main.A"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="716" pos:column="39">typeA</name><op:operator pos:line="716" pos:column="44">.</op:operator><name pos:line="716" pos:column="45">GetFullName</name></name><argument_list pos:line="716" pos:column="56">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="717" pos:column="13">Assert</name><op:operator pos:line="717" pos:column="19">.</op:operator><name pos:line="717" pos:column="20">AreEqual</name></name><argument_list pos:line="717" pos:column="28">(<argument><expr><name><name pos:line="717" pos:column="29">string</name><op:operator pos:line="717" pos:column="35">.</op:operator><name pos:line="717" pos:column="36">Empty</name></name></expr></argument>, <argument><expr><call><name><name pos:line="717" pos:column="43">typeA</name><op:operator pos:line="717" pos:column="48">.</op:operator><name><name pos:line="717" pos:column="49">GetAncestors</name><argument_list pos:line="717" pos:column="61">&lt;<argument><name pos:line="717" pos:column="62">NamespaceDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="717" pos:column="82">()</argument_list></call><op:operator pos:line="717" pos:column="84">.</op:operator><call><name pos:line="717" pos:column="85">First</name><argument_list pos:line="717" pos:column="90">()</argument_list></call><op:operator pos:line="717" pos:column="92">.</op:operator><call><name pos:line="717" pos:column="93">GetFullName</name><argument_list pos:line="717" pos:column="104">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="720" pos:column="9">[<expr><name pos:line="720" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="721" pos:column="9">public</specifier> <name pos:line="721" pos:column="16">void</name></type> <name pos:line="721" pos:column="21">TestCreateTypeDefinitions_ClassWithInnerClass</name><parameter_list pos:line="721" pos:column="66">()</parameter_list> <block pos:line="721" pos:column="69">{
            <comment type="line" pos:line="722" pos:column="13">// class A { class B { }; };</comment>
            <decl_stmt><decl><type><name pos:line="723" pos:column="13">string</name></type> <name pos:line="723" pos:column="20">xml</name> <init pos:line="723" pos:column="24">= <expr><lit:literal type="string" pos:line="723" pos:column="26">@"&lt;class&gt;class &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{&lt;private type=""default&gt;
    &lt;class&gt;class &lt;name&gt;B&lt;/name&gt; &lt;block&gt;{&lt;private type=""default&gt;
    &lt;/private&gt;}&lt;/block&gt;;&lt;/class&gt;
&lt;/private&gt;}&lt;/block&gt;;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="728" pos:column="13">XElement</name></type> <name pos:line="728" pos:column="22">xmlElement</name> <init pos:line="728" pos:column="33">= <expr><call><name><name pos:line="728" pos:column="35">fileSetup</name><op:operator pos:line="728" pos:column="44">.</op:operator><name pos:line="728" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="728" pos:column="69">(<argument><expr><name pos:line="728" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="728" pos:column="75">"A.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="729" pos:column="13">var</name></type> <name pos:line="729" pos:column="17">globalScope</name> <init pos:line="729" pos:column="29">= <expr><call><name><name pos:line="729" pos:column="31">codeParser</name><op:operator pos:line="729" pos:column="41">.</op:operator><name pos:line="729" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="729" pos:column="55">(<argument><expr><name pos:line="729" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="731" pos:column="13">var</name></type> <name pos:line="731" pos:column="17">typeA</name> <init pos:line="731" pos:column="23">= <expr><call><name><name pos:line="731" pos:column="25">globalScope</name><op:operator pos:line="731" pos:column="36">.</op:operator><name pos:line="731" pos:column="37">ChildStatements</name><op:operator pos:line="731" pos:column="52">.</op:operator><name pos:line="731" pos:column="53">First</name></name><argument_list pos:line="731" pos:column="58">()</argument_list></call> <op:operator pos:line="731" pos:column="61">as</op:operator> <name pos:line="731" pos:column="64">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="732" pos:column="13">var</name></type> <name pos:line="732" pos:column="17">typeB</name> <init pos:line="732" pos:column="23">= <expr><call><name><name pos:line="732" pos:column="25">typeA</name><op:operator pos:line="732" pos:column="30">.</op:operator><name pos:line="732" pos:column="31">ChildStatements</name><op:operator pos:line="732" pos:column="46">.</op:operator><name pos:line="732" pos:column="47">First</name></name><argument_list pos:line="732" pos:column="52">()</argument_list></call> <op:operator pos:line="732" pos:column="55">as</op:operator> <name pos:line="732" pos:column="58">TypeDefinition</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="734" pos:column="13">Assert</name><op:operator pos:line="734" pos:column="19">.</op:operator><name pos:line="734" pos:column="20">AreSame</name></name><argument_list pos:line="734" pos:column="27">(<argument><expr><name pos:line="734" pos:column="28">typeA</name></expr></argument>, <argument><expr><name><name pos:line="734" pos:column="35">typeB</name><op:operator pos:line="734" pos:column="40">.</op:operator><name pos:line="734" pos:column="41">ParentStatement</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="735" pos:column="13">Assert</name><op:operator pos:line="735" pos:column="19">.</op:operator><name pos:line="735" pos:column="20">AreEqual</name></name><argument_list pos:line="735" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="735" pos:column="29">"A"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="735" pos:column="34">typeA</name><op:operator pos:line="735" pos:column="39">.</op:operator><name pos:line="735" pos:column="40">GetFullName</name></name><argument_list pos:line="735" pos:column="51">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="737" pos:column="13">Assert</name><op:operator pos:line="737" pos:column="19">.</op:operator><name pos:line="737" pos:column="20">AreEqual</name></name><argument_list pos:line="737" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="737" pos:column="29">"A.B"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="737" pos:column="36">typeB</name><op:operator pos:line="737" pos:column="41">.</op:operator><name pos:line="737" pos:column="42">GetFullName</name></name><argument_list pos:line="737" pos:column="53">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="740" pos:column="9">[<expr><name pos:line="740" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="741" pos:column="9">public</specifier> <name pos:line="741" pos:column="16">void</name></type> <name pos:line="741" pos:column="21">TestCreateTypeDefinitions_ClassWithParents</name><parameter_list pos:line="741" pos:column="63">()</parameter_list> <block pos:line="741" pos:column="66">{
            <comment type="line" pos:line="742" pos:column="13">// class A : B,C,D { };</comment>
            <decl_stmt><decl><type><name pos:line="743" pos:column="13">string</name></type> <name pos:line="743" pos:column="20">xml</name> <init pos:line="743" pos:column="24">= <expr><lit:literal type="string" pos:line="743" pos:column="26">@"&lt;class&gt;class &lt;name&gt;A&lt;/name&gt; &lt;super&gt;: &lt;name&gt;B&lt;/name&gt;,&lt;name&gt;C&lt;/name&gt;,&lt;name&gt;D&lt;/name&gt;&lt;/super&gt; &lt;block&gt;{&lt;private type=""default&gt;
&lt;/private&gt;}&lt;/block&gt;;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="746" pos:column="13">XElement</name></type> <name pos:line="746" pos:column="22">xmlElement</name> <init pos:line="746" pos:column="33">= <expr><call><name><name pos:line="746" pos:column="35">fileSetup</name><op:operator pos:line="746" pos:column="44">.</op:operator><name pos:line="746" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="746" pos:column="69">(<argument><expr><name pos:line="746" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="746" pos:column="75">"A.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="747" pos:column="13">var</name></type> <name pos:line="747" pos:column="17">globalScope</name> <init pos:line="747" pos:column="29">= <expr><call><name><name pos:line="747" pos:column="31">codeParser</name><op:operator pos:line="747" pos:column="41">.</op:operator><name pos:line="747" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="747" pos:column="55">(<argument><expr><name pos:line="747" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="748" pos:column="13">var</name></type> <name pos:line="748" pos:column="17">actual</name> <init pos:line="748" pos:column="24">= <expr><call><name><name pos:line="748" pos:column="26">globalScope</name><op:operator pos:line="748" pos:column="37">.</op:operator><name pos:line="748" pos:column="38">ChildStatements</name><op:operator pos:line="748" pos:column="53">.</op:operator><name pos:line="748" pos:column="54">First</name></name><argument_list pos:line="748" pos:column="59">()</argument_list></call> <op:operator pos:line="748" pos:column="62">as</op:operator> <name pos:line="748" pos:column="65">TypeDefinition</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="750" pos:column="13">Assert</name><op:operator pos:line="750" pos:column="19">.</op:operator><name pos:line="750" pos:column="20">AreEqual</name></name><argument_list pos:line="750" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="750" pos:column="29">"A"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="750" pos:column="34">actual</name><op:operator pos:line="750" pos:column="40">.</op:operator><name pos:line="750" pos:column="41">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="751" pos:column="13">Assert</name><op:operator pos:line="751" pos:column="19">.</op:operator><name pos:line="751" pos:column="20">AreEqual</name></name><argument_list pos:line="751" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="751" pos:column="29">3</lit:literal></expr></argument>, <argument><expr><name><name pos:line="751" pos:column="32">actual</name><op:operator pos:line="751" pos:column="38">.</op:operator><name pos:line="751" pos:column="39">ParentTypeNames</name><op:operator pos:line="751" pos:column="54">.</op:operator><name pos:line="751" pos:column="55">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="752" pos:column="13">Assert</name><op:operator pos:line="752" pos:column="19">.</op:operator><name pos:line="752" pos:column="20">That</name></name><argument_list pos:line="752" pos:column="24">(<argument><expr><name><name pos:line="752" pos:column="25">globalScope</name><op:operator pos:line="752" pos:column="36">.</op:operator><name pos:line="752" pos:column="37">IsGlobal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="753" pos:column="13">Assert</name><op:operator pos:line="753" pos:column="19">.</op:operator><name pos:line="753" pos:column="20">AreSame</name></name><argument_list pos:line="753" pos:column="27">(<argument><expr><name pos:line="753" pos:column="28">globalScope</name></expr></argument>, <argument><expr><name><name pos:line="753" pos:column="41">actual</name><op:operator pos:line="753" pos:column="47">.</op:operator><name pos:line="753" pos:column="48">ParentStatement</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="755" pos:column="13">var</name></type> <name pos:line="755" pos:column="17">parentNames</name> <init pos:line="755" pos:column="29">= <expr><linq><from pos:line="755" pos:column="31">from <expr><name pos:line="755" pos:column="36">parent</name></expr> <in pos:line="755" pos:column="43">in <expr><name><name pos:line="755" pos:column="46">actual</name><op:operator pos:line="755" pos:column="52">.</op:operator><name pos:line="755" pos:column="53">ParentTypeNames</name></name></expr></in></from>
                              <select pos:line="756" pos:column="31">select <expr><name><name pos:line="756" pos:column="38">parent</name><op:operator pos:line="756" pos:column="44">.</op:operator><name pos:line="756" pos:column="45">Name</name></name></expr></select></linq></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="758" pos:column="13">var</name></type> <name pos:line="758" pos:column="17">tests</name> <init pos:line="758" pos:column="23">= <expr><call><name><name pos:line="758" pos:column="25">Enumerable</name><op:operator pos:line="758" pos:column="35">.</op:operator><name><name pos:line="758" pos:column="36">Zip</name><argument_list pos:line="758" pos:column="39">&lt;<argument><name pos:line="758" pos:column="40">string</name></argument>, <argument><name pos:line="758" pos:column="48">string</name></argument>, <argument><name pos:line="758" pos:column="56">bool</name></argument>&gt;</argument_list></name></name><argument_list pos:line="758" pos:column="61">(<argument><expr><op:operator pos:line="758" pos:column="62">new</op:operator><index pos:line="758" pos:column="65">[]</index> <block pos:line="758" pos:column="68">{ <expr><lit:literal type="string" pos:line="758" pos:column="70">"B"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="758" pos:column="75">"C"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="758" pos:column="80">"D"</lit:literal></expr> }</block></expr></argument>, <argument><expr><name pos:line="758" pos:column="87">parentNames</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="758" pos:column="100">(<param><decl><name pos:line="758" pos:column="101">e</name></decl></param>, <param><decl><name pos:line="758" pos:column="104">a</name></decl></param>)</parameter_list> <op:operator pos:line="758" pos:column="107">=&gt;</op:operator> <name pos:line="758" pos:column="110">e</name> <op:operator pos:line="758" pos:column="112">==</op:operator> <name pos:line="758" pos:column="115">a</name></lambda></expr></argument>
                )</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="760" pos:column="13">foreach(<init><decl><type><name pos:line="760" pos:column="21">var</name></type> <name pos:line="760" pos:column="25">parentMatchesExpected</name> <range pos:line="760" pos:column="47">in <expr><name pos:line="760" pos:column="50">tests</name></expr></range></decl></init>) <block pos:line="760" pos:column="57">{
                <expr_stmt><expr><call><name><name pos:line="761" pos:column="17">Assert</name><op:operator pos:line="761" pos:column="23">.</op:operator><name pos:line="761" pos:column="24">That</name></name><argument_list pos:line="761" pos:column="28">(<argument><expr><name pos:line="761" pos:column="29">parentMatchesExpected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>

        <function><type><attribute pos:line="765" pos:column="9">[<expr><name pos:line="765" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="766" pos:column="9">public</specifier> <name pos:line="766" pos:column="16">void</name></type> <name pos:line="766" pos:column="21">TestCreateTypeDefinitions_ClassWithQualifiedParent</name><parameter_list pos:line="766" pos:column="71">()</parameter_list> <block pos:line="766" pos:column="74">{
            <comment type="line" pos:line="767" pos:column="13">// class D : A::B::C { }</comment>
            <decl_stmt><decl><type><name pos:line="768" pos:column="13">string</name></type> <name pos:line="768" pos:column="20">xml</name> <init pos:line="768" pos:column="24">= <expr><lit:literal type="string" pos:line="768" pos:column="26">@"&lt;class&gt;class &lt;name&gt;D&lt;/name&gt; &lt;super&gt;: &lt;name&gt;&lt;name&gt;A&lt;/name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;&lt;name&gt;B&lt;/name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;&lt;name&gt;C&lt;/name&gt;&lt;/name&gt;&lt;/super&gt; &lt;block&gt;{&lt;private type=""default&gt;
&lt;/private&gt;}&lt;/block&gt;;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="771" pos:column="13">XElement</name></type> <name pos:line="771" pos:column="22">xmlElement</name> <init pos:line="771" pos:column="33">= <expr><call><name><name pos:line="771" pos:column="35">fileSetup</name><op:operator pos:line="771" pos:column="44">.</op:operator><name pos:line="771" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="771" pos:column="69">(<argument><expr><name pos:line="771" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="771" pos:column="75">"D.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="772" pos:column="13">var</name></type> <name pos:line="772" pos:column="17">actual</name> <init pos:line="772" pos:column="24">= <expr><call><name><name pos:line="772" pos:column="26">codeParser</name><op:operator pos:line="772" pos:column="36">.</op:operator><name pos:line="772" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="772" pos:column="50">(<argument><expr><name pos:line="772" pos:column="51">xmlElement</name></expr></argument>)</argument_list></call><op:operator pos:line="772" pos:column="62">.</op:operator><call><name><name pos:line="772" pos:column="63">ChildStatements</name><op:operator pos:line="772" pos:column="78">.</op:operator><name pos:line="772" pos:column="79">First</name></name><argument_list pos:line="772" pos:column="84">()</argument_list></call> <op:operator pos:line="772" pos:column="87">as</op:operator> <name pos:line="772" pos:column="90">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="773" pos:column="13">var</name></type> <name pos:line="773" pos:column="17">globalNamespace</name> <init pos:line="773" pos:column="33">= <expr><name><name pos:line="773" pos:column="35">actual</name><op:operator pos:line="773" pos:column="41">.</op:operator><name pos:line="773" pos:column="42">ParentStatement</name></name> <op:operator pos:line="773" pos:column="58">as</op:operator> <name pos:line="773" pos:column="61">NamespaceDefinition</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="775" pos:column="13">Assert</name><op:operator pos:line="775" pos:column="19">.</op:operator><name pos:line="775" pos:column="20">AreEqual</name></name><argument_list pos:line="775" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="775" pos:column="29">"D"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="775" pos:column="34">actual</name><op:operator pos:line="775" pos:column="40">.</op:operator><name pos:line="775" pos:column="41">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="776" pos:column="13">Assert</name><op:operator pos:line="776" pos:column="19">.</op:operator><name pos:line="776" pos:column="20">AreEqual</name></name><argument_list pos:line="776" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="776" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="776" pos:column="32">actual</name><op:operator pos:line="776" pos:column="38">.</op:operator><name pos:line="776" pos:column="39">ParentTypeNames</name><op:operator pos:line="776" pos:column="54">.</op:operator><name pos:line="776" pos:column="55">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="777" pos:column="13">Assert</name><op:operator pos:line="777" pos:column="19">.</op:operator><name pos:line="777" pos:column="20">That</name></name><argument_list pos:line="777" pos:column="24">(<argument><expr><name><name pos:line="777" pos:column="25">globalNamespace</name><op:operator pos:line="777" pos:column="40">.</op:operator><name pos:line="777" pos:column="41">IsGlobal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="779" pos:column="13">var</name></type> <name pos:line="779" pos:column="17">parent</name> <init pos:line="779" pos:column="24">= <expr><call><name><name pos:line="779" pos:column="26">actual</name><op:operator pos:line="779" pos:column="32">.</op:operator><name pos:line="779" pos:column="33">ParentTypeNames</name><op:operator pos:line="779" pos:column="48">.</op:operator><name pos:line="779" pos:column="49">First</name></name><argument_list pos:line="779" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="781" pos:column="13">Assert</name><op:operator pos:line="781" pos:column="19">.</op:operator><name pos:line="781" pos:column="20">AreEqual</name></name><argument_list pos:line="781" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="781" pos:column="29">"C"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="781" pos:column="34">parent</name><op:operator pos:line="781" pos:column="40">.</op:operator><name pos:line="781" pos:column="41">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="783" pos:column="13">var</name></type> <name pos:line="783" pos:column="17">prefixNames</name> <init pos:line="783" pos:column="29">= <expr><call><name><name pos:line="783" pos:column="31">parent</name><op:operator pos:line="783" pos:column="37">.</op:operator><name pos:line="783" pos:column="38">Prefix</name><op:operator pos:line="783" pos:column="44">.</op:operator><name pos:line="783" pos:column="45">Names</name><op:operator pos:line="783" pos:column="50">.</op:operator><name pos:line="783" pos:column="51">ToList</name></name><argument_list pos:line="783" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="784" pos:column="13">Assert</name><op:operator pos:line="784" pos:column="19">.</op:operator><name pos:line="784" pos:column="20">AreEqual</name></name><argument_list pos:line="784" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="784" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="784" pos:column="32">prefixNames</name><op:operator pos:line="784" pos:column="43">.</op:operator><name pos:line="784" pos:column="44">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="785" pos:column="13">Assert</name><op:operator pos:line="785" pos:column="19">.</op:operator><name pos:line="785" pos:column="20">AreEqual</name></name><argument_list pos:line="785" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="785" pos:column="29">"A"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="785" pos:column="34">prefixNames</name><index pos:line="785" pos:column="45">[<expr><lit:literal type="number" pos:line="785" pos:column="46">0</lit:literal></expr>]</index></name><op:operator pos:line="785" pos:column="48">.</op:operator><name pos:line="785" pos:column="49">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="786" pos:column="13">Assert</name><op:operator pos:line="786" pos:column="19">.</op:operator><name pos:line="786" pos:column="20">AreEqual</name></name><argument_list pos:line="786" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="786" pos:column="29">"B"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="786" pos:column="34">prefixNames</name><index pos:line="786" pos:column="45">[<expr><lit:literal type="number" pos:line="786" pos:column="46">1</lit:literal></expr>]</index></name><op:operator pos:line="786" pos:column="48">.</op:operator><name pos:line="786" pos:column="49">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></function>

        <function><type><attribute pos:line="790" pos:column="9">[<expr><name pos:line="790" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="791" pos:column="9">public</specifier> <name pos:line="791" pos:column="16">void</name></type> <name pos:line="791" pos:column="21">TestCreateTypeDefinitions_InnerClassWithNamespace</name><parameter_list pos:line="791" pos:column="70">()</parameter_list> <block pos:line="791" pos:column="73">{
            <comment type="line" pos:line="792" pos:column="13">// namespace A { class B { class C { }; }; }</comment>
            <decl_stmt><decl><type><name pos:line="793" pos:column="13">string</name></type> <name pos:line="793" pos:column="20">xml</name> <init pos:line="793" pos:column="24">= <expr><lit:literal type="string" pos:line="793" pos:column="26">@"&lt;namespace&gt;namespace &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{
    &lt;class&gt;class &lt;name&gt;B&lt;/name&gt; &lt;block&gt;{&lt;private type=""default&gt;
        &lt;class&gt;class &lt;name&gt;C&lt;/name&gt; &lt;block&gt;{&lt;private type=""default&gt;
        &lt;/private&gt;}&lt;/block&gt;;&lt;/class&gt;
    &lt;/private&gt;}&lt;/block&gt;;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="800" pos:column="13">XElement</name></type> <name pos:line="800" pos:column="22">xmlElement</name> <init pos:line="800" pos:column="33">= <expr><call><name><name pos:line="800" pos:column="35">fileSetup</name><op:operator pos:line="800" pos:column="44">.</op:operator><name pos:line="800" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="800" pos:column="69">(<argument><expr><name pos:line="800" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="800" pos:column="75">"A.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="801" pos:column="13">var</name></type> <name pos:line="801" pos:column="17">globalScope</name> <init pos:line="801" pos:column="29">= <expr><call><name><name pos:line="801" pos:column="31">codeParser</name><op:operator pos:line="801" pos:column="41">.</op:operator><name pos:line="801" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="801" pos:column="55">(<argument><expr><name pos:line="801" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="803" pos:column="13">var</name></type> <name pos:line="803" pos:column="17">typeDefinitions</name> <init pos:line="803" pos:column="33">= <expr><call><name><name pos:line="803" pos:column="35">globalScope</name><op:operator pos:line="803" pos:column="46">.</op:operator><name><name pos:line="803" pos:column="47">GetDescendants</name><argument_list pos:line="803" pos:column="61">&lt;<argument><name pos:line="803" pos:column="62">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="803" pos:column="77">()</argument_list></call><op:operator pos:line="803" pos:column="79">.</op:operator><call><name pos:line="803" pos:column="80">ToList</name><argument_list pos:line="803" pos:column="86">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="804" pos:column="13">Assert</name><op:operator pos:line="804" pos:column="19">.</op:operator><name pos:line="804" pos:column="20">AreEqual</name></name><argument_list pos:line="804" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="804" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="804" pos:column="32">typeDefinitions</name><op:operator pos:line="804" pos:column="47">.</op:operator><name pos:line="804" pos:column="48">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="806" pos:column="13">var</name></type> <name pos:line="806" pos:column="17">outer</name> <init pos:line="806" pos:column="23">= <expr><call><name><name pos:line="806" pos:column="25">typeDefinitions</name><op:operator pos:line="806" pos:column="40">.</op:operator><name pos:line="806" pos:column="41">First</name></name><argument_list pos:line="806" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="807" pos:column="13">var</name></type> <name pos:line="807" pos:column="17">inner</name> <init pos:line="807" pos:column="23">= <expr><call><name><name pos:line="807" pos:column="25">typeDefinitions</name><op:operator pos:line="807" pos:column="40">.</op:operator><name pos:line="807" pos:column="41">Last</name></name><argument_list pos:line="807" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="809" pos:column="13">Assert</name><op:operator pos:line="809" pos:column="19">.</op:operator><name pos:line="809" pos:column="20">AreEqual</name></name><argument_list pos:line="809" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="809" pos:column="29">"B"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="809" pos:column="34">outer</name><op:operator pos:line="809" pos:column="39">.</op:operator><name pos:line="809" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="810" pos:column="13">Assert</name><op:operator pos:line="810" pos:column="19">.</op:operator><name pos:line="810" pos:column="20">AreEqual</name></name><argument_list pos:line="810" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="810" pos:column="29">"A"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="810" pos:column="34">outer</name><op:operator pos:line="810" pos:column="39">.</op:operator><name><name pos:line="810" pos:column="40">GetAncestors</name><argument_list pos:line="810" pos:column="52">&lt;<argument><name pos:line="810" pos:column="53">NamespaceDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="810" pos:column="73">()</argument_list></call><op:operator pos:line="810" pos:column="75">.</op:operator><call><name pos:line="810" pos:column="76">First</name><argument_list pos:line="810" pos:column="81">()</argument_list></call><op:operator pos:line="810" pos:column="83">.</op:operator><call><name pos:line="810" pos:column="84">GetFullName</name><argument_list pos:line="810" pos:column="95">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="811" pos:column="13">Assert</name><op:operator pos:line="811" pos:column="19">.</op:operator><name pos:line="811" pos:column="20">AreEqual</name></name><argument_list pos:line="811" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="811" pos:column="29">"A.B"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="811" pos:column="36">outer</name><op:operator pos:line="811" pos:column="41">.</op:operator><name pos:line="811" pos:column="42">GetFullName</name></name><argument_list pos:line="811" pos:column="53">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="813" pos:column="13">Assert</name><op:operator pos:line="813" pos:column="19">.</op:operator><name pos:line="813" pos:column="20">AreEqual</name></name><argument_list pos:line="813" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="813" pos:column="29">"C"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="813" pos:column="34">inner</name><op:operator pos:line="813" pos:column="39">.</op:operator><name pos:line="813" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="814" pos:column="13">Assert</name><op:operator pos:line="814" pos:column="19">.</op:operator><name pos:line="814" pos:column="20">AreEqual</name></name><argument_list pos:line="814" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="814" pos:column="29">"A"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="814" pos:column="34">inner</name><op:operator pos:line="814" pos:column="39">.</op:operator><name><name pos:line="814" pos:column="40">GetAncestors</name><argument_list pos:line="814" pos:column="52">&lt;<argument><name pos:line="814" pos:column="53">NamespaceDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="814" pos:column="73">()</argument_list></call><op:operator pos:line="814" pos:column="75">.</op:operator><call><name pos:line="814" pos:column="76">First</name><argument_list pos:line="814" pos:column="81">()</argument_list></call><op:operator pos:line="814" pos:column="83">.</op:operator><call><name pos:line="814" pos:column="84">GetFullName</name><argument_list pos:line="814" pos:column="95">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="815" pos:column="13">Assert</name><op:operator pos:line="815" pos:column="19">.</op:operator><name pos:line="815" pos:column="20">AreEqual</name></name><argument_list pos:line="815" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="815" pos:column="29">"A.B.C"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="815" pos:column="38">inner</name><op:operator pos:line="815" pos:column="43">.</op:operator><name pos:line="815" pos:column="44">GetFullName</name></name><argument_list pos:line="815" pos:column="55">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="818" pos:column="9">[<expr><name pos:line="818" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="819" pos:column="9">public</specifier> <name pos:line="819" pos:column="16">void</name></type> <name pos:line="819" pos:column="21">TestCreateTypeDefinitions_Struct</name><parameter_list pos:line="819" pos:column="53">()</parameter_list> <block pos:line="819" pos:column="56">{
            <comment type="line" pos:line="820" pos:column="13">// struct A { };</comment>
            <decl_stmt><decl><type><name pos:line="821" pos:column="13">string</name></type> <name pos:line="821" pos:column="20">xml</name> <init pos:line="821" pos:column="24">= <expr><lit:literal type="string" pos:line="821" pos:column="26">@"&lt;struct&gt;struct &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{&lt;public type=""default&gt;
&lt;/public&gt;}&lt;/block&gt;;&lt;/struct&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="824" pos:column="13">XElement</name></type> <name pos:line="824" pos:column="22">xmlElement</name> <init pos:line="824" pos:column="33">= <expr><call><name><name pos:line="824" pos:column="35">fileSetup</name><op:operator pos:line="824" pos:column="44">.</op:operator><name pos:line="824" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="824" pos:column="69">(<argument><expr><name pos:line="824" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="824" pos:column="75">"A.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="825" pos:column="13">var</name></type> <name pos:line="825" pos:column="17">actual</name> <init pos:line="825" pos:column="24">= <expr><call><name><name pos:line="825" pos:column="26">codeParser</name><op:operator pos:line="825" pos:column="36">.</op:operator><name pos:line="825" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="825" pos:column="50">(<argument><expr><name pos:line="825" pos:column="51">xmlElement</name></expr></argument>)</argument_list></call><op:operator pos:line="825" pos:column="62">.</op:operator><call><name><name pos:line="825" pos:column="63">ChildStatements</name><op:operator pos:line="825" pos:column="78">.</op:operator><name pos:line="825" pos:column="79">First</name></name><argument_list pos:line="825" pos:column="84">()</argument_list></call> <op:operator pos:line="825" pos:column="87">as</op:operator> <name pos:line="825" pos:column="90">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="826" pos:column="13">var</name></type> <name pos:line="826" pos:column="17">globalNamespace</name> <init pos:line="826" pos:column="33">= <expr><name><name pos:line="826" pos:column="35">actual</name><op:operator pos:line="826" pos:column="41">.</op:operator><name pos:line="826" pos:column="42">ParentStatement</name></name> <op:operator pos:line="826" pos:column="58">as</op:operator> <name pos:line="826" pos:column="61">NamespaceDefinition</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="828" pos:column="13">Assert</name><op:operator pos:line="828" pos:column="19">.</op:operator><name pos:line="828" pos:column="20">AreEqual</name></name><argument_list pos:line="828" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="828" pos:column="29">"A"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="828" pos:column="34">actual</name><op:operator pos:line="828" pos:column="40">.</op:operator><name pos:line="828" pos:column="41">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="829" pos:column="13">Assert</name><op:operator pos:line="829" pos:column="19">.</op:operator><name pos:line="829" pos:column="20">AreEqual</name></name><argument_list pos:line="829" pos:column="28">(<argument><expr><name><name pos:line="829" pos:column="29">TypeKind</name><op:operator pos:line="829" pos:column="37">.</op:operator><name pos:line="829" pos:column="38">Struct</name></name></expr></argument>, <argument><expr><name><name pos:line="829" pos:column="46">actual</name><op:operator pos:line="829" pos:column="52">.</op:operator><name pos:line="829" pos:column="53">Kind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="830" pos:column="13">Assert</name><op:operator pos:line="830" pos:column="19">.</op:operator><name pos:line="830" pos:column="20">That</name></name><argument_list pos:line="830" pos:column="24">(<argument><expr><name><name pos:line="830" pos:column="25">globalNamespace</name><op:operator pos:line="830" pos:column="40">.</op:operator><name pos:line="830" pos:column="41">IsGlobal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="833" pos:column="9">[<expr><name pos:line="833" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="834" pos:column="9">public</specifier> <name pos:line="834" pos:column="16">void</name></type> <name pos:line="834" pos:column="21">TestCreateTypeDefinitions_Union</name><parameter_list pos:line="834" pos:column="52">()</parameter_list> <block pos:line="834" pos:column="55">{
            <comment type="line" pos:line="835" pos:column="13">// union A { int a; char b;</comment>
            <comment type="line" pos:line="836" pos:column="13">//};</comment>
            <decl_stmt><decl><type><name pos:line="837" pos:column="13">string</name></type> <name pos:line="837" pos:column="20">xml</name> <init pos:line="837" pos:column="24">= <expr><lit:literal type="string" pos:line="837" pos:column="26">@"&lt;union&gt;union &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{&lt;public type=""default&gt;
    &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;a&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
    &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;char&lt;/name&gt;&lt;/type&gt; &lt;name&gt;b&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
&lt;/public&gt;}&lt;/block&gt;;&lt;/union&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="842" pos:column="13">XElement</name></type> <name pos:line="842" pos:column="22">xmlElement</name> <init pos:line="842" pos:column="33">= <expr><call><name><name pos:line="842" pos:column="35">fileSetup</name><op:operator pos:line="842" pos:column="44">.</op:operator><name pos:line="842" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="842" pos:column="69">(<argument><expr><name pos:line="842" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="842" pos:column="75">"A.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="843" pos:column="13">var</name></type> <name pos:line="843" pos:column="17">actual</name> <init pos:line="843" pos:column="24">= <expr><call><name><name pos:line="843" pos:column="26">codeParser</name><op:operator pos:line="843" pos:column="36">.</op:operator><name pos:line="843" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="843" pos:column="50">(<argument><expr><name pos:line="843" pos:column="51">xmlElement</name></expr></argument>)</argument_list></call><op:operator pos:line="843" pos:column="62">.</op:operator><call><name><name pos:line="843" pos:column="63">ChildStatements</name><op:operator pos:line="843" pos:column="78">.</op:operator><name pos:line="843" pos:column="79">First</name></name><argument_list pos:line="843" pos:column="84">()</argument_list></call> <op:operator pos:line="843" pos:column="87">as</op:operator> <name pos:line="843" pos:column="90">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="844" pos:column="13">var</name></type> <name pos:line="844" pos:column="17">globalNamespace</name> <init pos:line="844" pos:column="33">= <expr><name><name pos:line="844" pos:column="35">actual</name><op:operator pos:line="844" pos:column="41">.</op:operator><name pos:line="844" pos:column="42">ParentStatement</name></name> <op:operator pos:line="844" pos:column="58">as</op:operator> <name pos:line="844" pos:column="61">NamespaceDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="845" pos:column="13">Assert</name><op:operator pos:line="845" pos:column="19">.</op:operator><name pos:line="845" pos:column="20">AreEqual</name></name><argument_list pos:line="845" pos:column="28">(<argument><expr><name><name pos:line="845" pos:column="29">TypeKind</name><op:operator pos:line="845" pos:column="37">.</op:operator><name pos:line="845" pos:column="38">Union</name></name></expr></argument>, <argument><expr><name><name pos:line="845" pos:column="45">actual</name><op:operator pos:line="845" pos:column="51">.</op:operator><name pos:line="845" pos:column="52">Kind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="846" pos:column="13">Assert</name><op:operator pos:line="846" pos:column="19">.</op:operator><name pos:line="846" pos:column="20">That</name></name><argument_list pos:line="846" pos:column="24">(<argument><expr><name><name pos:line="846" pos:column="25">globalNamespace</name><op:operator pos:line="846" pos:column="40">.</op:operator><name pos:line="846" pos:column="41">IsGlobal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="849" pos:column="9">[<expr><name pos:line="849" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="850" pos:column="9">public</specifier> <name pos:line="850" pos:column="16">void</name></type> <name pos:line="850" pos:column="21">TestGenericVariableDeclaration</name><parameter_list pos:line="850" pos:column="51">()</parameter_list> <block pos:line="850" pos:column="54">{
            <comment type="line" pos:line="851" pos:column="13">//vector&lt;int&gt; a;</comment>
            <decl_stmt><decl><type><name pos:line="852" pos:column="13">string</name></type> <name pos:line="852" pos:column="20">xml</name> <init pos:line="852" pos:column="24">= <expr><lit:literal type="string" pos:line="852" pos:column="26">@"&lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;&lt;name&gt;vector&lt;/name&gt;&lt;argument_list&gt;&amp;lt;&lt;argument&gt;&lt;name&gt;int&lt;/name&gt;&lt;/argument&gt;&amp;gt;&lt;/argument_list&gt;&lt;/name&gt;&lt;/type&gt; &lt;name&gt;a&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="854" pos:column="13">var</name></type> <name pos:line="854" pos:column="17">testUnit</name> <init pos:line="854" pos:column="26">= <expr><call><name><name pos:line="854" pos:column="28">fileSetup</name><op:operator pos:line="854" pos:column="37">.</op:operator><name pos:line="854" pos:column="38">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="854" pos:column="62">(<argument><expr><name pos:line="854" pos:column="63">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="854" pos:column="68">"test.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="856" pos:column="13">var</name></type> <name pos:line="856" pos:column="17">testScope</name> <init pos:line="856" pos:column="27">= <expr><call><name><name pos:line="856" pos:column="29">codeParser</name><op:operator pos:line="856" pos:column="39">.</op:operator><name pos:line="856" pos:column="40">ParseFileUnit</name></name><argument_list pos:line="856" pos:column="53">(<argument><expr><name pos:line="856" pos:column="54">testUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="858" pos:column="13">var</name></type> <name pos:line="858" pos:column="17">testDeclaration</name> <init pos:line="858" pos:column="33">= <expr><call><name><name pos:line="858" pos:column="35">testScope</name><op:operator pos:line="858" pos:column="44">.</op:operator><name pos:line="858" pos:column="45">ChildStatements</name><op:operator pos:line="858" pos:column="60">.</op:operator><name pos:line="858" pos:column="61">First</name></name><argument_list pos:line="858" pos:column="66">()</argument_list></call><op:operator pos:line="858" pos:column="68">.</op:operator><name pos:line="858" pos:column="69">Content</name> <op:operator pos:line="858" pos:column="77">as</op:operator> <name pos:line="858" pos:column="80">VariableDeclaration</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="859" pos:column="13">Assert</name><op:operator pos:line="859" pos:column="19">.</op:operator><name pos:line="859" pos:column="20">IsNotNull</name></name><argument_list pos:line="859" pos:column="29">(<argument><expr><name pos:line="859" pos:column="30">testDeclaration</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="859" pos:column="47">"could not find the test declaration"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="860" pos:column="13">Assert</name><op:operator pos:line="860" pos:column="19">.</op:operator><name pos:line="860" pos:column="20">AreEqual</name></name><argument_list pos:line="860" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="860" pos:column="29">"a"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="860" pos:column="34">testDeclaration</name><op:operator pos:line="860" pos:column="49">.</op:operator><name pos:line="860" pos:column="50">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="861" pos:column="13">Assert</name><op:operator pos:line="861" pos:column="19">.</op:operator><name pos:line="861" pos:column="20">AreEqual</name></name><argument_list pos:line="861" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="861" pos:column="29">"vector"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="861" pos:column="39">testDeclaration</name><op:operator pos:line="861" pos:column="54">.</op:operator><name pos:line="861" pos:column="55">VariableType</name><op:operator pos:line="861" pos:column="67">.</op:operator><name pos:line="861" pos:column="68">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="862" pos:column="13">Assert</name><op:operator pos:line="862" pos:column="19">.</op:operator><name pos:line="862" pos:column="20">That</name></name><argument_list pos:line="862" pos:column="24">(<argument><expr><name><name pos:line="862" pos:column="25">testDeclaration</name><op:operator pos:line="862" pos:column="40">.</op:operator><name pos:line="862" pos:column="41">VariableType</name><op:operator pos:line="862" pos:column="53">.</op:operator><name pos:line="862" pos:column="54">IsGeneric</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="863" pos:column="13">Assert</name><op:operator pos:line="863" pos:column="19">.</op:operator><name pos:line="863" pos:column="20">AreEqual</name></name><argument_list pos:line="863" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="863" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="863" pos:column="32">testDeclaration</name><op:operator pos:line="863" pos:column="47">.</op:operator><name pos:line="863" pos:column="48">VariableType</name><op:operator pos:line="863" pos:column="60">.</op:operator><name pos:line="863" pos:column="61">TypeParameters</name><op:operator pos:line="863" pos:column="75">.</op:operator><name pos:line="863" pos:column="76">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="864" pos:column="13">Assert</name><op:operator pos:line="864" pos:column="19">.</op:operator><name pos:line="864" pos:column="20">AreEqual</name></name><argument_list pos:line="864" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="864" pos:column="29">"int"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="864" pos:column="36">testDeclaration</name><op:operator pos:line="864" pos:column="51">.</op:operator><name pos:line="864" pos:column="52">VariableType</name><op:operator pos:line="864" pos:column="64">.</op:operator><name pos:line="864" pos:column="65">TypeParameters</name><op:operator pos:line="864" pos:column="79">.</op:operator><name pos:line="864" pos:column="80">First</name></name><argument_list pos:line="864" pos:column="85">()</argument_list></call><op:operator pos:line="864" pos:column="87">.</op:operator><name pos:line="864" pos:column="88">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="867" pos:column="9">[<expr><name pos:line="867" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="868" pos:column="9">public</specifier> <name pos:line="868" pos:column="16">void</name></type> <name pos:line="868" pos:column="21">TestGenericVariableDeclarationWithPrefix</name><parameter_list pos:line="868" pos:column="61">()</parameter_list> <block pos:line="868" pos:column="64">{
            <comment type="line" pos:line="869" pos:column="13">//std::vector&lt;int&gt; a;</comment>
            <decl_stmt><decl><type><name pos:line="870" pos:column="13">string</name></type> <name pos:line="870" pos:column="20">xml</name> <init pos:line="870" pos:column="24">= <expr><lit:literal type="string" pos:line="870" pos:column="26">@"&lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;&lt;name&gt;std&lt;/name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;&lt;name&gt;&lt;name&gt;vector&lt;/name&gt;&lt;argument_list&gt;&amp;lt;&lt;argument&gt;&lt;name&gt;int&lt;/name&gt;&lt;/argument&gt;&amp;gt;&lt;/argument_list&gt;&lt;/name&gt;&lt;/name&gt;&lt;/type&gt; &lt;name&gt;a&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="872" pos:column="13">var</name></type> <name pos:line="872" pos:column="17">testUnit</name> <init pos:line="872" pos:column="26">= <expr><call><name><name pos:line="872" pos:column="28">fileSetup</name><op:operator pos:line="872" pos:column="37">.</op:operator><name pos:line="872" pos:column="38">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="872" pos:column="62">(<argument><expr><name pos:line="872" pos:column="63">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="872" pos:column="68">"test.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="874" pos:column="13">var</name></type> <name pos:line="874" pos:column="17">testScope</name> <init pos:line="874" pos:column="27">= <expr><call><name><name pos:line="874" pos:column="29">codeParser</name><op:operator pos:line="874" pos:column="39">.</op:operator><name pos:line="874" pos:column="40">ParseFileUnit</name></name><argument_list pos:line="874" pos:column="53">(<argument><expr><name pos:line="874" pos:column="54">testUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="876" pos:column="13">var</name></type> <name pos:line="876" pos:column="17">testDeclaration</name> <init pos:line="876" pos:column="33">= <expr><call><name><name pos:line="876" pos:column="35">testScope</name><op:operator pos:line="876" pos:column="44">.</op:operator><name pos:line="876" pos:column="45">ChildStatements</name><op:operator pos:line="876" pos:column="60">.</op:operator><name pos:line="876" pos:column="61">First</name></name><argument_list pos:line="876" pos:column="66">()</argument_list></call><op:operator pos:line="876" pos:column="68">.</op:operator><name pos:line="876" pos:column="69">Content</name> <op:operator pos:line="876" pos:column="77">as</op:operator> <name pos:line="876" pos:column="80">VariableDeclaration</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="877" pos:column="13">Assert</name><op:operator pos:line="877" pos:column="19">.</op:operator><name pos:line="877" pos:column="20">IsNotNull</name></name><argument_list pos:line="877" pos:column="29">(<argument><expr><name pos:line="877" pos:column="30">testDeclaration</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="877" pos:column="47">"could not find the test declaration"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="878" pos:column="13">Assert</name><op:operator pos:line="878" pos:column="19">.</op:operator><name pos:line="878" pos:column="20">AreEqual</name></name><argument_list pos:line="878" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="878" pos:column="29">"a"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="878" pos:column="34">testDeclaration</name><op:operator pos:line="878" pos:column="49">.</op:operator><name pos:line="878" pos:column="50">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="879" pos:column="13">Assert</name><op:operator pos:line="879" pos:column="19">.</op:operator><name pos:line="879" pos:column="20">AreEqual</name></name><argument_list pos:line="879" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="879" pos:column="29">"vector"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="879" pos:column="39">testDeclaration</name><op:operator pos:line="879" pos:column="54">.</op:operator><name pos:line="879" pos:column="55">VariableType</name><op:operator pos:line="879" pos:column="67">.</op:operator><name pos:line="879" pos:column="68">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="880" pos:column="13">Assert</name><op:operator pos:line="880" pos:column="19">.</op:operator><name pos:line="880" pos:column="20">AreEqual</name></name><argument_list pos:line="880" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="880" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="880" pos:column="32">testDeclaration</name><op:operator pos:line="880" pos:column="47">.</op:operator><name pos:line="880" pos:column="48">VariableType</name><op:operator pos:line="880" pos:column="60">.</op:operator><name pos:line="880" pos:column="61">Prefix</name><op:operator pos:line="880" pos:column="67">.</op:operator><name pos:line="880" pos:column="68">Names</name><op:operator pos:line="880" pos:column="73">.</op:operator><name pos:line="880" pos:column="74">Count</name></name><argument_list pos:line="880" pos:column="79">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="881" pos:column="13">Assert</name><op:operator pos:line="881" pos:column="19">.</op:operator><name pos:line="881" pos:column="20">AreEqual</name></name><argument_list pos:line="881" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="881" pos:column="29">"std"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="881" pos:column="36">testDeclaration</name><op:operator pos:line="881" pos:column="51">.</op:operator><name pos:line="881" pos:column="52">VariableType</name><op:operator pos:line="881" pos:column="64">.</op:operator><name pos:line="881" pos:column="65">Prefix</name><op:operator pos:line="881" pos:column="71">.</op:operator><name pos:line="881" pos:column="72">Names</name><op:operator pos:line="881" pos:column="77">.</op:operator><name pos:line="881" pos:column="78">First</name></name><argument_list pos:line="881" pos:column="83">()</argument_list></call><op:operator pos:line="881" pos:column="85">.</op:operator><name pos:line="881" pos:column="86">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="882" pos:column="13">Assert</name><op:operator pos:line="882" pos:column="19">.</op:operator><name pos:line="882" pos:column="20">That</name></name><argument_list pos:line="882" pos:column="24">(<argument><expr><name><name pos:line="882" pos:column="25">testDeclaration</name><op:operator pos:line="882" pos:column="40">.</op:operator><name pos:line="882" pos:column="41">VariableType</name><op:operator pos:line="882" pos:column="53">.</op:operator><name pos:line="882" pos:column="54">IsGeneric</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="883" pos:column="13">Assert</name><op:operator pos:line="883" pos:column="19">.</op:operator><name pos:line="883" pos:column="20">AreEqual</name></name><argument_list pos:line="883" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="883" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="883" pos:column="32">testDeclaration</name><op:operator pos:line="883" pos:column="47">.</op:operator><name pos:line="883" pos:column="48">VariableType</name><op:operator pos:line="883" pos:column="60">.</op:operator><name pos:line="883" pos:column="61">TypeParameters</name><op:operator pos:line="883" pos:column="75">.</op:operator><name pos:line="883" pos:column="76">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="884" pos:column="13">Assert</name><op:operator pos:line="884" pos:column="19">.</op:operator><name pos:line="884" pos:column="20">AreEqual</name></name><argument_list pos:line="884" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="884" pos:column="29">"int"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="884" pos:column="36">testDeclaration</name><op:operator pos:line="884" pos:column="51">.</op:operator><name pos:line="884" pos:column="52">VariableType</name><op:operator pos:line="884" pos:column="64">.</op:operator><name pos:line="884" pos:column="65">TypeParameters</name><op:operator pos:line="884" pos:column="79">.</op:operator><name pos:line="884" pos:column="80">First</name></name><argument_list pos:line="884" pos:column="85">()</argument_list></call><op:operator pos:line="884" pos:column="87">.</op:operator><name pos:line="884" pos:column="88">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="887" pos:column="9">[<expr><name pos:line="887" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="888" pos:column="9">public</specifier> <name pos:line="888" pos:column="16">void</name></type> <name pos:line="888" pos:column="21">TestMethodCallCreation_LengthyCallingExpression</name><parameter_list pos:line="888" pos:column="68">()</parameter_list> <block pos:line="888" pos:column="71">{
            <comment type="line" pos:line="889" pos:column="13">//a-&gt;b.Foo();</comment>
            <decl_stmt><decl><type><name pos:line="890" pos:column="13">string</name></type> <name pos:line="890" pos:column="20">xml</name> <init pos:line="890" pos:column="24">= <expr><lit:literal type="string" pos:line="890" pos:column="26">@"&lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;&lt;name&gt;a&lt;/name&gt;&lt;op:operator&gt;-&amp;gt;&lt;/op:operator&gt;&lt;name&gt;b&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="891" pos:column="13">var</name></type> <name pos:line="891" pos:column="17">testUnit</name> <init pos:line="891" pos:column="26">= <expr><call><name><name pos:line="891" pos:column="28">fileSetup</name><op:operator pos:line="891" pos:column="37">.</op:operator><name pos:line="891" pos:column="38">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="891" pos:column="62">(<argument><expr><name pos:line="891" pos:column="63">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="891" pos:column="68">"test.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="893" pos:column="13">var</name></type> <name pos:line="893" pos:column="17">globalScope</name> <init pos:line="893" pos:column="29">= <expr><call><name><name pos:line="893" pos:column="31">codeParser</name><op:operator pos:line="893" pos:column="41">.</op:operator><name pos:line="893" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="893" pos:column="55">(<argument><expr><name pos:line="893" pos:column="56">testUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="894" pos:column="13">Assert</name><op:operator pos:line="894" pos:column="19">.</op:operator><name pos:line="894" pos:column="20">AreEqual</name></name><argument_list pos:line="894" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="894" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="894" pos:column="32">globalScope</name><op:operator pos:line="894" pos:column="43">.</op:operator><name pos:line="894" pos:column="44">ChildStatements</name><op:operator pos:line="894" pos:column="59">.</op:operator><name pos:line="894" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="896" pos:column="13">var</name></type> <name pos:line="896" pos:column="17">exp</name> <init pos:line="896" pos:column="21">= <expr><name><name pos:line="896" pos:column="23">globalScope</name><op:operator pos:line="896" pos:column="34">.</op:operator><name pos:line="896" pos:column="35">ChildStatements</name><index pos:line="896" pos:column="50">[<expr><lit:literal type="number" pos:line="896" pos:column="51">0</lit:literal></expr>]</index></name><op:operator pos:line="896" pos:column="53">.</op:operator><name pos:line="896" pos:column="54">Content</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="897" pos:column="13">Assert</name><op:operator pos:line="897" pos:column="19">.</op:operator><name pos:line="897" pos:column="20">IsNotNull</name></name><argument_list pos:line="897" pos:column="29">(<argument><expr><name pos:line="897" pos:column="30">exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="898" pos:column="13">Assert</name><op:operator pos:line="898" pos:column="19">.</op:operator><name pos:line="898" pos:column="20">AreEqual</name></name><argument_list pos:line="898" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="898" pos:column="29">5</lit:literal></expr></argument>, <argument><expr><name><name pos:line="898" pos:column="32">exp</name><op:operator pos:line="898" pos:column="35">.</op:operator><name pos:line="898" pos:column="36">Components</name><op:operator pos:line="898" pos:column="46">.</op:operator><name pos:line="898" pos:column="47">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="899" pos:column="13">var</name></type> <name pos:line="899" pos:column="17">a</name> <init pos:line="899" pos:column="19">= <expr><name><name pos:line="899" pos:column="21">exp</name><op:operator pos:line="899" pos:column="24">.</op:operator><name pos:line="899" pos:column="25">Components</name><index pos:line="899" pos:column="35">[<expr><lit:literal type="number" pos:line="899" pos:column="36">0</lit:literal></expr>]</index></name> <op:operator pos:line="899" pos:column="39">as</op:operator> <name pos:line="899" pos:column="42">NameUse</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="900" pos:column="13">Assert</name><op:operator pos:line="900" pos:column="19">.</op:operator><name pos:line="900" pos:column="20">IsNotNull</name></name><argument_list pos:line="900" pos:column="29">(<argument><expr><name pos:line="900" pos:column="30">a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="901" pos:column="13">Assert</name><op:operator pos:line="901" pos:column="19">.</op:operator><name pos:line="901" pos:column="20">AreEqual</name></name><argument_list pos:line="901" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="901" pos:column="29">"a"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="901" pos:column="34">a</name><op:operator pos:line="901" pos:column="35">.</op:operator><name pos:line="901" pos:column="36">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="902" pos:column="13">var</name></type> <name pos:line="902" pos:column="17">arrow</name> <init pos:line="902" pos:column="23">= <expr><name><name pos:line="902" pos:column="25">exp</name><op:operator pos:line="902" pos:column="28">.</op:operator><name pos:line="902" pos:column="29">Components</name><index pos:line="902" pos:column="39">[<expr><lit:literal type="number" pos:line="902" pos:column="40">1</lit:literal></expr>]</index></name> <op:operator pos:line="902" pos:column="43">as</op:operator> <name pos:line="902" pos:column="46">OperatorUse</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="903" pos:column="13">Assert</name><op:operator pos:line="903" pos:column="19">.</op:operator><name pos:line="903" pos:column="20">IsNotNull</name></name><argument_list pos:line="903" pos:column="29">(<argument><expr><name pos:line="903" pos:column="30">arrow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="904" pos:column="13">Assert</name><op:operator pos:line="904" pos:column="19">.</op:operator><name pos:line="904" pos:column="20">AreEqual</name></name><argument_list pos:line="904" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="904" pos:column="29">"-&gt;"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="904" pos:column="35">arrow</name><op:operator pos:line="904" pos:column="40">.</op:operator><name pos:line="904" pos:column="41">Text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="905" pos:column="13">var</name></type> <name pos:line="905" pos:column="17">b</name> <init pos:line="905" pos:column="19">= <expr><name><name pos:line="905" pos:column="21">exp</name><op:operator pos:line="905" pos:column="24">.</op:operator><name pos:line="905" pos:column="25">Components</name><index pos:line="905" pos:column="35">[<expr><lit:literal type="number" pos:line="905" pos:column="36">2</lit:literal></expr>]</index></name> <op:operator pos:line="905" pos:column="39">as</op:operator> <name pos:line="905" pos:column="42">NameUse</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="906" pos:column="13">Assert</name><op:operator pos:line="906" pos:column="19">.</op:operator><name pos:line="906" pos:column="20">IsNotNull</name></name><argument_list pos:line="906" pos:column="29">(<argument><expr><name pos:line="906" pos:column="30">b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="907" pos:column="13">Assert</name><op:operator pos:line="907" pos:column="19">.</op:operator><name pos:line="907" pos:column="20">AreEqual</name></name><argument_list pos:line="907" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="907" pos:column="29">"b"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="907" pos:column="34">b</name><op:operator pos:line="907" pos:column="35">.</op:operator><name pos:line="907" pos:column="36">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="908" pos:column="13">var</name></type> <name pos:line="908" pos:column="17">dot</name> <init pos:line="908" pos:column="21">= <expr><name><name pos:line="908" pos:column="23">exp</name><op:operator pos:line="908" pos:column="26">.</op:operator><name pos:line="908" pos:column="27">Components</name><index pos:line="908" pos:column="37">[<expr><lit:literal type="number" pos:line="908" pos:column="38">3</lit:literal></expr>]</index></name> <op:operator pos:line="908" pos:column="41">as</op:operator> <name pos:line="908" pos:column="44">OperatorUse</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="909" pos:column="13">Assert</name><op:operator pos:line="909" pos:column="19">.</op:operator><name pos:line="909" pos:column="20">IsNotNull</name></name><argument_list pos:line="909" pos:column="29">(<argument><expr><name pos:line="909" pos:column="30">dot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="910" pos:column="13">Assert</name><op:operator pos:line="910" pos:column="19">.</op:operator><name pos:line="910" pos:column="20">AreEqual</name></name><argument_list pos:line="910" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="910" pos:column="29">"."</lit:literal></expr></argument>, <argument><expr><name><name pos:line="910" pos:column="34">dot</name><op:operator pos:line="910" pos:column="37">.</op:operator><name pos:line="910" pos:column="38">Text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="911" pos:column="13">var</name></type> <name pos:line="911" pos:column="17">foo</name> <init pos:line="911" pos:column="21">= <expr><name><name pos:line="911" pos:column="23">exp</name><op:operator pos:line="911" pos:column="26">.</op:operator><name pos:line="911" pos:column="27">Components</name><index pos:line="911" pos:column="37">[<expr><lit:literal type="number" pos:line="911" pos:column="38">4</lit:literal></expr>]</index></name> <op:operator pos:line="911" pos:column="41">as</op:operator> <name pos:line="911" pos:column="44">MethodCall</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="912" pos:column="13">Assert</name><op:operator pos:line="912" pos:column="19">.</op:operator><name pos:line="912" pos:column="20">IsNotNull</name></name><argument_list pos:line="912" pos:column="29">(<argument><expr><name pos:line="912" pos:column="30">foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="913" pos:column="13">Assert</name><op:operator pos:line="913" pos:column="19">.</op:operator><name pos:line="913" pos:column="20">AreEqual</name></name><argument_list pos:line="913" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="913" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="913" pos:column="36">foo</name><op:operator pos:line="913" pos:column="39">.</op:operator><name pos:line="913" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="914" pos:column="13">Assert</name><op:operator pos:line="914" pos:column="19">.</op:operator><name pos:line="914" pos:column="20">AreEqual</name></name><argument_list pos:line="914" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="914" pos:column="29">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="914" pos:column="32">foo</name><op:operator pos:line="914" pos:column="35">.</op:operator><name pos:line="914" pos:column="36">Arguments</name><op:operator pos:line="914" pos:column="45">.</op:operator><name pos:line="914" pos:column="46">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="915" pos:column="13">Assert</name><op:operator pos:line="915" pos:column="19">.</op:operator><name pos:line="915" pos:column="20">AreEqual</name></name><argument_list pos:line="915" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="915" pos:column="29">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="915" pos:column="32">foo</name><op:operator pos:line="915" pos:column="35">.</op:operator><name pos:line="915" pos:column="36">TypeArguments</name><op:operator pos:line="915" pos:column="49">.</op:operator><name pos:line="915" pos:column="50">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="918" pos:column="9">[<expr><name pos:line="918" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="919" pos:column="9">public</specifier> <name pos:line="919" pos:column="16">void</name></type> <name pos:line="919" pos:column="21">TestMergeWithUsing</name><parameter_list pos:line="919" pos:column="39">()</parameter_list> <block pos:line="919" pos:column="42">{
            <comment type="line" pos:line="920" pos:column="13">// namespace A { class B { void Foo(); }; }</comment>
            <decl_stmt><decl><type><name pos:line="921" pos:column="13">string</name></type> <name pos:line="921" pos:column="20">headerXml</name> <init pos:line="921" pos:column="30">= <expr><lit:literal type="string" pos:line="921" pos:column="32">@"&lt;namespace pos:line=""1"" pos:column="&gt;namespace &lt;name pos:line=""1"" pos:column=""&gt;A&lt;/name&gt; &lt;block pos:line=""1"" pos:column=""&gt;{ &lt;class pos:line=""1"" pos:column=""&gt;class &lt;name pos:line=""1"" pos:column=""&gt;B&lt;/name&gt; &lt;block pos:line=""1"" pos:column=""&gt;{&lt;private type=""default"" pos:line=""1"" pos:column=&gt; &lt;function_decl&gt;&lt;type&gt;&lt;name pos:line=""1"" pos:column=""&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""1"" pos:column=""&gt;Foo&lt;/name&gt;&lt;parameter_list pos:line=""1"" pos:column=""&gt;()&lt;/parameter_list&gt;;&lt;/function_decl&gt; &lt;/private&gt;}&lt;/block&gt;;&lt;/class&gt; }&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="923" pos:column="13">//using namespace A;</comment>
            <comment type="line" pos:line="924" pos:column="13">//</comment>
            <comment type="line" pos:line="925" pos:column="13">//void B::Foo() { }</comment>
            <decl_stmt><decl><type><name pos:line="926" pos:column="13">string</name></type> <name pos:line="926" pos:column="20">implementationXml</name> <init pos:line="926" pos:column="38">= <expr><lit:literal type="string" pos:line="926" pos:column="40">@"&lt;using pos:line=""1"" pos:column="&gt;using namespace &lt;name pos:line=""1"" pos:column=""&gt;A&lt;/name&gt;;&lt;/using&gt;

&lt;function&gt;&lt;type&gt;&lt;name pos:line=""3"" pos:column="&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name&gt;&lt;name pos:line=""3"" pos:column="&gt;B&lt;/name&gt;&lt;op:operator pos:line=""3"" pos:column="&gt;::&lt;/op:operator&gt;&lt;name pos:line=""3"" pos:column="&gt;Foo&lt;/name&gt;&lt;/name&gt;&lt;parameter_list pos:line=""3"" pos:column=""&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""3"" pos:column=""&gt;{ }&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            
            <decl_stmt><decl><type><name pos:line="930" pos:column="13">var</name></type> <name pos:line="930" pos:column="17">headerScope</name> <init pos:line="930" pos:column="29">= <expr><call><name><name pos:line="930" pos:column="31">codeParser</name><op:operator pos:line="930" pos:column="41">.</op:operator><name pos:line="930" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="930" pos:column="55">(<argument><expr><call><name><name pos:line="930" pos:column="56">fileSetup</name><op:operator pos:line="930" pos:column="65">.</op:operator><name pos:line="930" pos:column="66">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="930" pos:column="90">(<argument><expr><name pos:line="930" pos:column="91">headerXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="930" pos:column="102">"A.h"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="931" pos:column="13">var</name></type> <name pos:line="931" pos:column="17">implementationScope</name> <init pos:line="931" pos:column="37">= <expr><call><name><name pos:line="931" pos:column="39">codeParser</name><op:operator pos:line="931" pos:column="49">.</op:operator><name pos:line="931" pos:column="50">ParseFileUnit</name></name><argument_list pos:line="931" pos:column="63">(<argument><expr><call><name><name pos:line="931" pos:column="64">fileSetup</name><op:operator pos:line="931" pos:column="73">.</op:operator><name pos:line="931" pos:column="74">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="931" pos:column="98">(<argument><expr><name pos:line="931" pos:column="99">implementationXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="931" pos:column="118">"A.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="933" pos:column="13">var</name></type> <name pos:line="933" pos:column="17">globalScope</name> <init pos:line="933" pos:column="29">= <expr><call><name><name pos:line="933" pos:column="31">headerScope</name><op:operator pos:line="933" pos:column="42">.</op:operator><name pos:line="933" pos:column="43">Merge</name></name><argument_list pos:line="933" pos:column="48">(<argument><expr><name pos:line="933" pos:column="49">implementationScope</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="934" pos:column="13">Assert</name><op:operator pos:line="934" pos:column="19">.</op:operator><name pos:line="934" pos:column="20">AreEqual</name></name><argument_list pos:line="934" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="934" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="934" pos:column="32">globalScope</name><op:operator pos:line="934" pos:column="43">.</op:operator><name pos:line="934" pos:column="44">ChildStatements</name><op:operator pos:line="934" pos:column="59">.</op:operator><name><name pos:line="934" pos:column="60">OfType</name><argument_list pos:line="934" pos:column="66">&lt;<argument><name pos:line="934" pos:column="67">NamedScope</name></argument>&gt;</argument_list></name></name><argument_list pos:line="934" pos:column="78">()</argument_list></call><op:operator pos:line="934" pos:column="80">.</op:operator><call><name pos:line="934" pos:column="81">Count</name><argument_list pos:line="934" pos:column="86">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="936" pos:column="13">var</name></type> <name pos:line="936" pos:column="17">namespaceA</name> <init pos:line="936" pos:column="28">= <expr><call><name><name pos:line="936" pos:column="30">globalScope</name><op:operator pos:line="936" pos:column="41">.</op:operator><name><name pos:line="936" pos:column="42">GetDescendants</name><argument_list pos:line="936" pos:column="56">&lt;<argument><name pos:line="936" pos:column="57">NamespaceDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="936" pos:column="77">()</argument_list></call><op:operator pos:line="936" pos:column="79">.</op:operator><call><name pos:line="936" pos:column="80">FirstOrDefault</name><argument_list pos:line="936" pos:column="94">(<argument><expr><lambda><name pos:line="936" pos:column="95">n</name> <op:operator pos:line="936" pos:column="97">=&gt;</op:operator> <name><name pos:line="936" pos:column="100">n</name><op:operator pos:line="936" pos:column="101">.</op:operator><name pos:line="936" pos:column="102">Name</name></name> <op:operator pos:line="936" pos:column="107">==</op:operator> <lit:literal type="string" pos:line="936" pos:column="110">"A"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="937" pos:column="13">Assert</name><op:operator pos:line="937" pos:column="19">.</op:operator><name pos:line="937" pos:column="20">IsNotNull</name></name><argument_list pos:line="937" pos:column="29">(<argument><expr><name pos:line="937" pos:column="30">namespaceA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="938" pos:column="13">Assert</name><op:operator pos:line="938" pos:column="19">.</op:operator><name pos:line="938" pos:column="20">AreEqual</name></name><argument_list pos:line="938" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="938" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="938" pos:column="32">namespaceA</name><op:operator pos:line="938" pos:column="42">.</op:operator><name pos:line="938" pos:column="43">ChildStatements</name><op:operator pos:line="938" pos:column="58">.</op:operator><name pos:line="938" pos:column="59">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="940" pos:column="13">var</name></type> <name pos:line="940" pos:column="17">typeB</name> <init pos:line="940" pos:column="23">= <expr><call><name><name pos:line="940" pos:column="25">namespaceA</name><op:operator pos:line="940" pos:column="35">.</op:operator><name><name pos:line="940" pos:column="36">GetDescendants</name><argument_list pos:line="940" pos:column="50">&lt;<argument><name pos:line="940" pos:column="51">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="940" pos:column="66">()</argument_list></call><op:operator pos:line="940" pos:column="68">.</op:operator><call><name pos:line="940" pos:column="69">FirstOrDefault</name><argument_list pos:line="940" pos:column="83">(<argument><expr><lambda><name pos:line="940" pos:column="84">t</name> <op:operator pos:line="940" pos:column="86">=&gt;</op:operator> <name><name pos:line="940" pos:column="89">t</name><op:operator pos:line="940" pos:column="90">.</op:operator><name pos:line="940" pos:column="91">Name</name></name> <op:operator pos:line="940" pos:column="96">==</op:operator> <lit:literal type="string" pos:line="940" pos:column="99">"B"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="941" pos:column="13">Assert</name><op:operator pos:line="941" pos:column="19">.</op:operator><name pos:line="941" pos:column="20">IsNotNull</name></name><argument_list pos:line="941" pos:column="29">(<argument><expr><name pos:line="941" pos:column="30">typeB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="942" pos:column="13">Assert</name><op:operator pos:line="942" pos:column="19">.</op:operator><name pos:line="942" pos:column="20">AreEqual</name></name><argument_list pos:line="942" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="942" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="942" pos:column="32">typeB</name><op:operator pos:line="942" pos:column="37">.</op:operator><name pos:line="942" pos:column="38">ChildStatements</name><op:operator pos:line="942" pos:column="53">.</op:operator><name pos:line="942" pos:column="54">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="944" pos:column="13">var</name></type> <name pos:line="944" pos:column="17">methodFoo</name> <init pos:line="944" pos:column="27">= <expr><call><name><name pos:line="944" pos:column="29">typeB</name><op:operator pos:line="944" pos:column="34">.</op:operator><name><name pos:line="944" pos:column="35">GetNamedChildren</name><argument_list pos:line="944" pos:column="51">&lt;<argument><name pos:line="944" pos:column="52">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="944" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="944" pos:column="70">"Foo"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="944" pos:column="76">.</op:operator><call><name pos:line="944" pos:column="77">FirstOrDefault</name><argument_list pos:line="944" pos:column="91">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="945" pos:column="13">Assert</name><op:operator pos:line="945" pos:column="19">.</op:operator><name pos:line="945" pos:column="20">IsNotNull</name></name><argument_list pos:line="945" pos:column="29">(<argument><expr><name pos:line="945" pos:column="30">methodFoo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="946" pos:column="13">Assert</name><op:operator pos:line="946" pos:column="19">.</op:operator><name pos:line="946" pos:column="20">AreEqual</name></name><argument_list pos:line="946" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="946" pos:column="29">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="946" pos:column="32">methodFoo</name><op:operator pos:line="946" pos:column="41">.</op:operator><name pos:line="946" pos:column="42">ChildStatements</name><op:operator pos:line="946" pos:column="57">.</op:operator><name pos:line="946" pos:column="58">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="947" pos:column="13">Assert</name><op:operator pos:line="947" pos:column="19">.</op:operator><name pos:line="947" pos:column="20">AreEqual</name></name><argument_list pos:line="947" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="947" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="947" pos:column="32">methodFoo</name><op:operator pos:line="947" pos:column="41">.</op:operator><name pos:line="947" pos:column="42">Locations</name><op:operator pos:line="947" pos:column="51">.</op:operator><name pos:line="947" pos:column="52">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="949" pos:column="13">headerScope</name> <op:operator pos:line="949" pos:column="25">=</op:operator> <call><name><name pos:line="949" pos:column="27">codeParser</name><op:operator pos:line="949" pos:column="37">.</op:operator><name pos:line="949" pos:column="38">ParseFileUnit</name></name><argument_list pos:line="949" pos:column="51">(<argument><expr><call><name><name pos:line="949" pos:column="52">fileSetup</name><op:operator pos:line="949" pos:column="61">.</op:operator><name pos:line="949" pos:column="62">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="949" pos:column="86">(<argument><expr><name pos:line="949" pos:column="87">headerXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="949" pos:column="98">"A.h"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="950" pos:column="13">implementationScope</name> <op:operator pos:line="950" pos:column="33">=</op:operator> <call><name><name pos:line="950" pos:column="35">codeParser</name><op:operator pos:line="950" pos:column="45">.</op:operator><name pos:line="950" pos:column="46">ParseFileUnit</name></name><argument_list pos:line="950" pos:column="59">(<argument><expr><call><name><name pos:line="950" pos:column="60">fileSetup</name><op:operator pos:line="950" pos:column="69">.</op:operator><name pos:line="950" pos:column="70">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="950" pos:column="94">(<argument><expr><name pos:line="950" pos:column="95">implementationXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="950" pos:column="114">"A.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="952" pos:column="13">var</name></type> <name pos:line="952" pos:column="17">globalScope_implementationFirst</name> <init pos:line="952" pos:column="49">= <expr><call><name><name pos:line="952" pos:column="51">implementationScope</name><op:operator pos:line="952" pos:column="70">.</op:operator><name pos:line="952" pos:column="71">Merge</name></name><argument_list pos:line="952" pos:column="76">(<argument><expr><name pos:line="952" pos:column="77">headerScope</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name pos:line="954" pos:column="13">namespaceA</name> <op:operator pos:line="954" pos:column="24">=</op:operator> <call><name><name pos:line="954" pos:column="26">globalScope_implementationFirst</name><op:operator pos:line="954" pos:column="57">.</op:operator><name><name pos:line="954" pos:column="58">GetDescendants</name><argument_list pos:line="954" pos:column="72">&lt;<argument><name pos:line="954" pos:column="73">NamespaceDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="954" pos:column="93">()</argument_list></call><op:operator pos:line="954" pos:column="95">.</op:operator><call><name pos:line="954" pos:column="96">FirstOrDefault</name><argument_list pos:line="954" pos:column="110">(<argument><expr><lambda><name pos:line="954" pos:column="111">n</name> <op:operator pos:line="954" pos:column="113">=&gt;</op:operator> <name><name pos:line="954" pos:column="116">n</name><op:operator pos:line="954" pos:column="117">.</op:operator><name pos:line="954" pos:column="118">Name</name></name> <op:operator pos:line="954" pos:column="123">==</op:operator> <lit:literal type="string" pos:line="954" pos:column="126">"A"</lit:literal></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="955" pos:column="13">Assert</name><op:operator pos:line="955" pos:column="19">.</op:operator><name pos:line="955" pos:column="20">IsNotNull</name></name><argument_list pos:line="955" pos:column="29">(<argument><expr><name pos:line="955" pos:column="30">namespaceA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="956" pos:column="13">Assert</name><op:operator pos:line="956" pos:column="19">.</op:operator><name pos:line="956" pos:column="20">AreEqual</name></name><argument_list pos:line="956" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="956" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="956" pos:column="32">namespaceA</name><op:operator pos:line="956" pos:column="42">.</op:operator><name pos:line="956" pos:column="43">ChildStatements</name><op:operator pos:line="956" pos:column="58">.</op:operator><name pos:line="956" pos:column="59">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="958" pos:column="13">typeB</name> <op:operator pos:line="958" pos:column="19">=</op:operator> <call><name><name pos:line="958" pos:column="21">namespaceA</name><op:operator pos:line="958" pos:column="31">.</op:operator><name><name pos:line="958" pos:column="32">GetDescendants</name><argument_list pos:line="958" pos:column="46">&lt;<argument><name pos:line="958" pos:column="47">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="958" pos:column="62">()</argument_list></call><op:operator pos:line="958" pos:column="64">.</op:operator><call><name pos:line="958" pos:column="65">FirstOrDefault</name><argument_list pos:line="958" pos:column="79">(<argument><expr><lambda><name pos:line="958" pos:column="80">t</name> <op:operator pos:line="958" pos:column="82">=&gt;</op:operator> <name><name pos:line="958" pos:column="85">t</name><op:operator pos:line="958" pos:column="86">.</op:operator><name pos:line="958" pos:column="87">Name</name></name> <op:operator pos:line="958" pos:column="92">==</op:operator> <lit:literal type="string" pos:line="958" pos:column="95">"B"</lit:literal></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="959" pos:column="13">Assert</name><op:operator pos:line="959" pos:column="19">.</op:operator><name pos:line="959" pos:column="20">IsNotNull</name></name><argument_list pos:line="959" pos:column="29">(<argument><expr><name pos:line="959" pos:column="30">typeB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="960" pos:column="13">Assert</name><op:operator pos:line="960" pos:column="19">.</op:operator><name pos:line="960" pos:column="20">AreEqual</name></name><argument_list pos:line="960" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="960" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="960" pos:column="32">typeB</name><op:operator pos:line="960" pos:column="37">.</op:operator><name pos:line="960" pos:column="38">ChildStatements</name><op:operator pos:line="960" pos:column="53">.</op:operator><name pos:line="960" pos:column="54">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="962" pos:column="13">methodFoo</name> <op:operator pos:line="962" pos:column="23">=</op:operator> <call><name><name pos:line="962" pos:column="25">typeB</name><op:operator pos:line="962" pos:column="30">.</op:operator><name><name pos:line="962" pos:column="31">GetNamedChildren</name><argument_list pos:line="962" pos:column="47">&lt;<argument><name pos:line="962" pos:column="48">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="962" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="962" pos:column="66">"Foo"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="962" pos:column="72">.</op:operator><call><name pos:line="962" pos:column="73">FirstOrDefault</name><argument_list pos:line="962" pos:column="87">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="963" pos:column="13">Assert</name><op:operator pos:line="963" pos:column="19">.</op:operator><name pos:line="963" pos:column="20">IsNotNull</name></name><argument_list pos:line="963" pos:column="29">(<argument><expr><name pos:line="963" pos:column="30">methodFoo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="964" pos:column="13">Assert</name><op:operator pos:line="964" pos:column="19">.</op:operator><name pos:line="964" pos:column="20">AreEqual</name></name><argument_list pos:line="964" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="964" pos:column="29">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="964" pos:column="32">methodFoo</name><op:operator pos:line="964" pos:column="41">.</op:operator><name pos:line="964" pos:column="42">ChildStatements</name><op:operator pos:line="964" pos:column="57">.</op:operator><name pos:line="964" pos:column="58">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="965" pos:column="13">Assert</name><op:operator pos:line="965" pos:column="19">.</op:operator><name pos:line="965" pos:column="20">AreEqual</name></name><argument_list pos:line="965" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="965" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="965" pos:column="32">methodFoo</name><op:operator pos:line="965" pos:column="41">.</op:operator><name pos:line="965" pos:column="42">Locations</name><op:operator pos:line="965" pos:column="51">.</op:operator><name pos:line="965" pos:column="52">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="968" pos:column="9">[<expr><name pos:line="968" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="969" pos:column="9">public</specifier> <name pos:line="969" pos:column="16">void</name></type> <name pos:line="969" pos:column="21">TestMethodCallCreation_WithConflictingMethodNames</name><parameter_list pos:line="969" pos:column="70">()</parameter_list> <block pos:line="969" pos:column="73">{
            <comment type="line" pos:line="970" pos:column="13">//# A.h</comment>
            <comment type="line" pos:line="971" pos:column="13">//class A {</comment>
            <comment type="line" pos:line="972" pos:column="13">//    B b;</comment>
            <comment type="line" pos:line="973" pos:column="13">//public:</comment>
            <comment type="line" pos:line="974" pos:column="13">//    bool Contains() { b.Contains(); }</comment>
            <comment type="line" pos:line="975" pos:column="13">//};</comment>
            <decl_stmt><decl><type><name pos:line="976" pos:column="13">string</name></type> <name pos:line="976" pos:column="20">a_xml</name> <init pos:line="976" pos:column="26">= <expr><lit:literal type="string" pos:line="976" pos:column="28">@"&lt;class&gt;class &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{&lt;private type=""default&gt;
    &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;B&lt;/name&gt;&lt;/type&gt; &lt;name&gt;b&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
&lt;/private&gt;&lt;public&gt;public:
    &lt;function&gt;&lt;type&gt;&lt;name&gt;bool&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Contains&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;expr_stmt&gt;&lt;expr&gt;&lt;name&gt;b&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;call&gt;&lt;name&gt;Contains&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt; }&lt;/block&gt;&lt;/function&gt;
&lt;/public&gt;}&lt;/block&gt;;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="982" pos:column="13">//# B.h</comment>
            <comment type="line" pos:line="983" pos:column="13">//class B {</comment>
            <comment type="line" pos:line="984" pos:column="13">//public:</comment>
            <comment type="line" pos:line="985" pos:column="13">//    bool Contains() { return true; }</comment>
            <comment type="line" pos:line="986" pos:column="13">//};</comment>
            <decl_stmt><decl><type><name pos:line="987" pos:column="13">string</name></type> <name pos:line="987" pos:column="20">b_xml</name> <init pos:line="987" pos:column="26">= <expr><lit:literal type="string" pos:line="987" pos:column="28">@"&lt;class&gt;class &lt;name&gt;B&lt;/name&gt; &lt;block&gt;{&lt;private type=""default&gt;
&lt;/private&gt;&lt;public&gt;public:
    &lt;function&gt;&lt;type&gt;&lt;name&gt;bool&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Contains&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;return&gt;return &lt;expr&gt;&lt;lit:literal type=""boolean&gt;true&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt; }&lt;/block&gt;&lt;/function&gt;
&lt;/public&gt;}&lt;/block&gt;;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="992" pos:column="13">var</name></type> <name pos:line="992" pos:column="17">fileUnitA</name> <init pos:line="992" pos:column="27">= <expr><call><name><name pos:line="992" pos:column="29">fileSetup</name><op:operator pos:line="992" pos:column="38">.</op:operator><name pos:line="992" pos:column="39">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="992" pos:column="63">(<argument><expr><name pos:line="992" pos:column="64">a_xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="992" pos:column="71">"A.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="993" pos:column="13">var</name></type> <name pos:line="993" pos:column="17">fileUnitB</name> <init pos:line="993" pos:column="27">= <expr><call><name><name pos:line="993" pos:column="29">fileSetup</name><op:operator pos:line="993" pos:column="38">.</op:operator><name pos:line="993" pos:column="39">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="993" pos:column="63">(<argument><expr><name pos:line="993" pos:column="64">b_xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="993" pos:column="71">"B.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="995" pos:column="13">var</name></type> <name pos:line="995" pos:column="17">scopeForA</name> <init pos:line="995" pos:column="27">= <expr><call><name><name pos:line="995" pos:column="29">codeParser</name><op:operator pos:line="995" pos:column="39">.</op:operator><name pos:line="995" pos:column="40">ParseFileUnit</name></name><argument_list pos:line="995" pos:column="53">(<argument><expr><name pos:line="995" pos:column="54">fileUnitA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="996" pos:column="13">var</name></type> <name pos:line="996" pos:column="17">scopeForB</name> <init pos:line="996" pos:column="27">= <expr><call><name><name pos:line="996" pos:column="29">codeParser</name><op:operator pos:line="996" pos:column="39">.</op:operator><name pos:line="996" pos:column="40">ParseFileUnit</name></name><argument_list pos:line="996" pos:column="53">(<argument><expr><name pos:line="996" pos:column="54">fileUnitB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="997" pos:column="13">var</name></type> <name pos:line="997" pos:column="17">globalScope</name> <init pos:line="997" pos:column="29">= <expr><call><name><name pos:line="997" pos:column="31">scopeForA</name><op:operator pos:line="997" pos:column="40">.</op:operator><name pos:line="997" pos:column="41">Merge</name></name><argument_list pos:line="997" pos:column="46">(<argument><expr><name pos:line="997" pos:column="47">scopeForB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="998" pos:column="13">Assert</name><op:operator pos:line="998" pos:column="19">.</op:operator><name pos:line="998" pos:column="20">AreEqual</name></name><argument_list pos:line="998" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="998" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="998" pos:column="32">globalScope</name><op:operator pos:line="998" pos:column="43">.</op:operator><name pos:line="998" pos:column="44">ChildStatements</name><op:operator pos:line="998" pos:column="59">.</op:operator><name pos:line="998" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1000" pos:column="13">var</name></type> <name pos:line="1000" pos:column="17">classA</name> <init pos:line="1000" pos:column="24">= <expr><call><name><name pos:line="1000" pos:column="26">globalScope</name><op:operator pos:line="1000" pos:column="37">.</op:operator><name><name pos:line="1000" pos:column="38">GetDescendants</name><argument_list pos:line="1000" pos:column="52">&lt;<argument><name pos:line="1000" pos:column="53">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1000" pos:column="68">()</argument_list></call><op:operator pos:line="1000" pos:column="70">.</op:operator><call><name pos:line="1000" pos:column="71">FirstOrDefault</name><argument_list pos:line="1000" pos:column="85">(<argument><expr><lambda><name pos:line="1000" pos:column="86">t</name> <op:operator pos:line="1000" pos:column="88">=&gt;</op:operator> <name><name pos:line="1000" pos:column="91">t</name><op:operator pos:line="1000" pos:column="92">.</op:operator><name pos:line="1000" pos:column="93">Name</name></name> <op:operator pos:line="1000" pos:column="98">==</op:operator> <lit:literal type="string" pos:line="1000" pos:column="101">"A"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1001" pos:column="13">Assert</name><op:operator pos:line="1001" pos:column="19">.</op:operator><name pos:line="1001" pos:column="20">IsNotNull</name></name><argument_list pos:line="1001" pos:column="29">(<argument><expr><name pos:line="1001" pos:column="30">classA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1002" pos:column="13">var</name></type> <name pos:line="1002" pos:column="17">classB</name> <init pos:line="1002" pos:column="24">= <expr><call><name><name pos:line="1002" pos:column="26">globalScope</name><op:operator pos:line="1002" pos:column="37">.</op:operator><name><name pos:line="1002" pos:column="38">GetDescendants</name><argument_list pos:line="1002" pos:column="52">&lt;<argument><name pos:line="1002" pos:column="53">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1002" pos:column="68">()</argument_list></call><op:operator pos:line="1002" pos:column="70">.</op:operator><call><name pos:line="1002" pos:column="71">FirstOrDefault</name><argument_list pos:line="1002" pos:column="85">(<argument><expr><lambda><name pos:line="1002" pos:column="86">t</name> <op:operator pos:line="1002" pos:column="88">=&gt;</op:operator> <name><name pos:line="1002" pos:column="91">t</name><op:operator pos:line="1002" pos:column="92">.</op:operator><name pos:line="1002" pos:column="93">Name</name></name> <op:operator pos:line="1002" pos:column="98">==</op:operator> <lit:literal type="string" pos:line="1002" pos:column="101">"B"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1003" pos:column="13">Assert</name><op:operator pos:line="1003" pos:column="19">.</op:operator><name pos:line="1003" pos:column="20">IsNotNull</name></name><argument_list pos:line="1003" pos:column="29">(<argument><expr><name pos:line="1003" pos:column="30">classB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1005" pos:column="13">var</name></type> <name pos:line="1005" pos:column="17">aDotContains</name> <init pos:line="1005" pos:column="30">= <expr><call><name><name pos:line="1005" pos:column="32">classA</name><op:operator pos:line="1005" pos:column="38">.</op:operator><name><name pos:line="1005" pos:column="39">GetNamedChildren</name><argument_list pos:line="1005" pos:column="55">&lt;<argument><name pos:line="1005" pos:column="56">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1005" pos:column="73">(<argument><expr><lit:literal type="string" pos:line="1005" pos:column="74">"Contains"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1005" pos:column="85">.</op:operator><call><name pos:line="1005" pos:column="86">FirstOrDefault</name><argument_list pos:line="1005" pos:column="100">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1006" pos:column="13">Assert</name><op:operator pos:line="1006" pos:column="19">.</op:operator><name pos:line="1006" pos:column="20">IsNotNull</name></name><argument_list pos:line="1006" pos:column="29">(<argument><expr><name pos:line="1006" pos:column="30">aDotContains</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1007" pos:column="13">var</name></type> <name pos:line="1007" pos:column="17">bDotContains</name> <init pos:line="1007" pos:column="30">= <expr><call><name><name pos:line="1007" pos:column="32">classB</name><op:operator pos:line="1007" pos:column="38">.</op:operator><name><name pos:line="1007" pos:column="39">GetNamedChildren</name><argument_list pos:line="1007" pos:column="55">&lt;<argument><name pos:line="1007" pos:column="56">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1007" pos:column="73">(<argument><expr><lit:literal type="string" pos:line="1007" pos:column="74">"Contains"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1007" pos:column="85">.</op:operator><call><name pos:line="1007" pos:column="86">FirstOrDefault</name><argument_list pos:line="1007" pos:column="100">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1008" pos:column="13">Assert</name><op:operator pos:line="1008" pos:column="19">.</op:operator><name pos:line="1008" pos:column="20">IsNotNull</name></name><argument_list pos:line="1008" pos:column="29">(<argument><expr><name pos:line="1008" pos:column="30">bDotContains</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="1010" pos:column="13">Assert</name><op:operator pos:line="1010" pos:column="19">.</op:operator><name pos:line="1010" pos:column="20">AreEqual</name></name><argument_list pos:line="1010" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1010" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1010" pos:column="32">aDotContains</name><op:operator pos:line="1010" pos:column="44">.</op:operator><name pos:line="1010" pos:column="45">ChildStatements</name><op:operator pos:line="1010" pos:column="60">.</op:operator><name pos:line="1010" pos:column="61">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1011" pos:column="13">var</name></type> <name pos:line="1011" pos:column="17">methodCall</name> <init pos:line="1011" pos:column="28">= <expr><name><name pos:line="1011" pos:column="30">aDotContains</name><op:operator pos:line="1011" pos:column="42">.</op:operator><name pos:line="1011" pos:column="43">ChildStatements</name><index pos:line="1011" pos:column="58">[<expr><lit:literal type="number" pos:line="1011" pos:column="59">0</lit:literal></expr>]</index></name><op:operator pos:line="1011" pos:column="61">.</op:operator><call><name><name pos:line="1011" pos:column="62">Content</name><op:operator pos:line="1011" pos:column="69">.</op:operator><name><name pos:line="1011" pos:column="70">GetDescendantsAndSelf</name><argument_list pos:line="1011" pos:column="91">&lt;<argument><name pos:line="1011" pos:column="92">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1011" pos:column="103">()</argument_list></call><op:operator pos:line="1011" pos:column="105">.</op:operator><call><name pos:line="1011" pos:column="106">FirstOrDefault</name><argument_list pos:line="1011" pos:column="120">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1012" pos:column="13">Assert</name><op:operator pos:line="1012" pos:column="19">.</op:operator><name pos:line="1012" pos:column="20">IsNotNull</name></name><argument_list pos:line="1012" pos:column="29">(<argument><expr><name pos:line="1012" pos:column="30">methodCall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="1014" pos:column="13">Assert</name><op:operator pos:line="1014" pos:column="19">.</op:operator><name pos:line="1014" pos:column="20">AreSame</name></name><argument_list pos:line="1014" pos:column="27">(<argument><expr><name pos:line="1014" pos:column="28">bDotContains</name></expr></argument>, <argument><expr><call><name><name pos:line="1014" pos:column="42">methodCall</name><op:operator pos:line="1014" pos:column="52">.</op:operator><name pos:line="1014" pos:column="53">FindMatches</name></name><argument_list pos:line="1014" pos:column="64">()</argument_list></call><op:operator pos:line="1014" pos:column="66">.</op:operator><call><name pos:line="1014" pos:column="67">FirstOrDefault</name><argument_list pos:line="1014" pos:column="81">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1015" pos:column="13">Assert</name><op:operator pos:line="1015" pos:column="19">.</op:operator><name pos:line="1015" pos:column="20">AreNotSame</name></name><argument_list pos:line="1015" pos:column="30">(<argument><expr><name pos:line="1015" pos:column="31">aDotContains</name></expr></argument>, <argument><expr><call><name><name pos:line="1015" pos:column="45">methodCall</name><op:operator pos:line="1015" pos:column="55">.</op:operator><name pos:line="1015" pos:column="56">FindMatches</name></name><argument_list pos:line="1015" pos:column="67">()</argument_list></call><op:operator pos:line="1015" pos:column="69">.</op:operator><call><name pos:line="1015" pos:column="70">FirstOrDefault</name><argument_list pos:line="1015" pos:column="84">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1018" pos:column="9">[<expr><name pos:line="1018" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1019" pos:column="9">public</specifier> <name pos:line="1019" pos:column="16">void</name></type> <name pos:line="1019" pos:column="21">TestMethodCallCreation_WithThisKeyword</name><parameter_list pos:line="1019" pos:column="59">()</parameter_list> <block pos:line="1019" pos:column="62">{
            <comment type="line" pos:line="1020" pos:column="13">//class A {</comment>
            <comment type="line" pos:line="1021" pos:column="13">//    void Bar() { }</comment>
            <comment type="line" pos:line="1022" pos:column="13">//    class B {</comment>
            <comment type="line" pos:line="1023" pos:column="13">//        int a;</comment>
            <comment type="line" pos:line="1024" pos:column="13">//        void Foo() { this-&gt;Bar(); }</comment>
            <comment type="line" pos:line="1025" pos:column="13">//        void Bar() { return this-&gt;a; }</comment>
            <comment type="line" pos:line="1026" pos:column="13">//    };</comment>
            <comment type="line" pos:line="1027" pos:column="13">//};</comment>
            <decl_stmt><decl><type><name pos:line="1028" pos:column="13">string</name></type> <name pos:line="1028" pos:column="20">a_xml</name> <init pos:line="1028" pos:column="26">= <expr><lit:literal type="string" pos:line="1028" pos:column="28">@"&lt;class&gt;class &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{&lt;private type=""default&gt;
    &lt;function&gt;&lt;type&gt;&lt;name&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Bar&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/function&gt;
    &lt;class&gt;class &lt;name&gt;B&lt;/name&gt; &lt;block&gt;{&lt;private type=""default&gt;
        &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;a&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
        &lt;function&gt;&lt;type&gt;&lt;name&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;return&gt;return &lt;expr&gt;&lt;name&gt;this&lt;/name&gt;&lt;op:operator&gt;-&amp;gt;&lt;/op:operator&gt;&lt;call&gt;&lt;name&gt;Bar&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/return&gt; }&lt;/block&gt;&lt;/function&gt;
        &lt;function&gt;&lt;type&gt;&lt;name&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Bar&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ &lt;return&gt;return &lt;expr&gt;&lt;name&gt;this&lt;/name&gt;&lt;op:operator&gt;-&amp;gt;&lt;/op:operator&gt;&lt;name&gt;a&lt;/name&gt;&lt;/expr&gt;;&lt;/return&gt; }&lt;/block&gt;&lt;/function&gt;
    &lt;/private&gt;}&lt;/block&gt;;&lt;/class&gt;
&lt;/private&gt;}&lt;/block&gt;;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1036" pos:column="13">var</name></type> <name pos:line="1036" pos:column="17">fileUnit</name> <init pos:line="1036" pos:column="26">= <expr><call><name><name pos:line="1036" pos:column="28">fileSetup</name><op:operator pos:line="1036" pos:column="37">.</op:operator><name pos:line="1036" pos:column="38">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1036" pos:column="62">(<argument><expr><name pos:line="1036" pos:column="63">a_xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1036" pos:column="70">"A.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1037" pos:column="13">var</name></type> <name pos:line="1037" pos:column="17">globalScope</name> <init pos:line="1037" pos:column="29">= <expr><call><name><name pos:line="1037" pos:column="31">codeParser</name><op:operator pos:line="1037" pos:column="41">.</op:operator><name pos:line="1037" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="1037" pos:column="55">(<argument><expr><name pos:line="1037" pos:column="56">fileUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1039" pos:column="13">var</name></type> <name pos:line="1039" pos:column="17">aDotBar</name> <init pos:line="1039" pos:column="25">= <expr><call><name><name pos:line="1039" pos:column="27">globalScope</name><op:operator pos:line="1039" pos:column="38">.</op:operator><name><name pos:line="1039" pos:column="39">GetNamedChildren</name><argument_list pos:line="1039" pos:column="55">&lt;<argument><name pos:line="1039" pos:column="56">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1039" pos:column="71">(<argument><expr><lit:literal type="string" pos:line="1039" pos:column="72">"A"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1039" pos:column="76">.</op:operator><call><name pos:line="1039" pos:column="77">First</name><argument_list pos:line="1039" pos:column="82">()</argument_list></call><op:operator pos:line="1039" pos:column="84">.</op:operator><call><name><name pos:line="1039" pos:column="85">GetNamedChildren</name><argument_list pos:line="1039" pos:column="101">&lt;<argument><name pos:line="1039" pos:column="102">MethodDefinition</name></argument>&gt;</argument_list></name><argument_list pos:line="1039" pos:column="119">(<argument><expr><lit:literal type="string" pos:line="1039" pos:column="120">"Bar"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1039" pos:column="126">.</op:operator><call><name pos:line="1039" pos:column="127">FirstOrDefault</name><argument_list pos:line="1039" pos:column="141">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1040" pos:column="13">Assert</name><op:operator pos:line="1040" pos:column="19">.</op:operator><name pos:line="1040" pos:column="20">IsNotNull</name></name><argument_list pos:line="1040" pos:column="29">(<argument><expr><name pos:line="1040" pos:column="30">aDotBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1041" pos:column="13">var</name></type> <name pos:line="1041" pos:column="17">classB</name> <init pos:line="1041" pos:column="24">= <expr><call><name><name pos:line="1041" pos:column="26">globalScope</name><op:operator pos:line="1041" pos:column="37">.</op:operator><name><name pos:line="1041" pos:column="38">GetDescendants</name><argument_list pos:line="1041" pos:column="52">&lt;<argument><name pos:line="1041" pos:column="53">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1041" pos:column="68">()</argument_list></call><op:operator pos:line="1041" pos:column="70">.</op:operator><call><name pos:line="1041" pos:column="71">FirstOrDefault</name><argument_list pos:line="1041" pos:column="85">(<argument><expr><lambda><name pos:line="1041" pos:column="86">t</name> <op:operator pos:line="1041" pos:column="88">=&gt;</op:operator> <name><name pos:line="1041" pos:column="91">t</name><op:operator pos:line="1041" pos:column="92">.</op:operator><name pos:line="1041" pos:column="93">Name</name></name> <op:operator pos:line="1041" pos:column="98">==</op:operator> <lit:literal type="string" pos:line="1041" pos:column="101">"B"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1042" pos:column="13">Assert</name><op:operator pos:line="1042" pos:column="19">.</op:operator><name pos:line="1042" pos:column="20">IsNotNull</name></name><argument_list pos:line="1042" pos:column="29">(<argument><expr><name pos:line="1042" pos:column="30">classB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1043" pos:column="13">var</name></type> <name pos:line="1043" pos:column="17">aDotBDotFoo</name> <init pos:line="1043" pos:column="29">= <expr><call><name><name pos:line="1043" pos:column="31">classB</name><op:operator pos:line="1043" pos:column="37">.</op:operator><name><name pos:line="1043" pos:column="38">GetNamedChildren</name><argument_list pos:line="1043" pos:column="54">&lt;<argument><name pos:line="1043" pos:column="55">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1043" pos:column="72">(<argument><expr><lit:literal type="string" pos:line="1043" pos:column="73">"Foo"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1043" pos:column="79">.</op:operator><call><name pos:line="1043" pos:column="80">FirstOrDefault</name><argument_list pos:line="1043" pos:column="94">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1044" pos:column="13">Assert</name><op:operator pos:line="1044" pos:column="19">.</op:operator><name pos:line="1044" pos:column="20">IsNotNull</name></name><argument_list pos:line="1044" pos:column="29">(<argument><expr><name pos:line="1044" pos:column="30">aDotBDotFoo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1045" pos:column="13">var</name></type> <name pos:line="1045" pos:column="17">aDotBDotBar</name> <init pos:line="1045" pos:column="29">= <expr><call><name><name pos:line="1045" pos:column="31">classB</name><op:operator pos:line="1045" pos:column="37">.</op:operator><name><name pos:line="1045" pos:column="38">GetNamedChildren</name><argument_list pos:line="1045" pos:column="54">&lt;<argument><name pos:line="1045" pos:column="55">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1045" pos:column="72">(<argument><expr><lit:literal type="string" pos:line="1045" pos:column="73">"Bar"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1045" pos:column="79">.</op:operator><call><name pos:line="1045" pos:column="80">FirstOrDefault</name><argument_list pos:line="1045" pos:column="94">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1046" pos:column="13">Assert</name><op:operator pos:line="1046" pos:column="19">.</op:operator><name pos:line="1046" pos:column="20">IsNotNull</name></name><argument_list pos:line="1046" pos:column="29">(<argument><expr><name pos:line="1046" pos:column="30">aDotBDotBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="1048" pos:column="13">Assert</name><op:operator pos:line="1048" pos:column="19">.</op:operator><name pos:line="1048" pos:column="20">AreEqual</name></name><argument_list pos:line="1048" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1048" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1048" pos:column="32">aDotBDotFoo</name><op:operator pos:line="1048" pos:column="43">.</op:operator><name pos:line="1048" pos:column="44">ChildStatements</name><op:operator pos:line="1048" pos:column="59">.</op:operator><name pos:line="1048" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1049" pos:column="13">var</name></type> <name pos:line="1049" pos:column="17">barCall</name> <init pos:line="1049" pos:column="25">= <expr><name><name pos:line="1049" pos:column="27">aDotBDotFoo</name><op:operator pos:line="1049" pos:column="38">.</op:operator><name pos:line="1049" pos:column="39">ChildStatements</name><index pos:line="1049" pos:column="54">[<expr><lit:literal type="number" pos:line="1049" pos:column="55">0</lit:literal></expr>]</index></name><op:operator pos:line="1049" pos:column="57">.</op:operator><call><name><name pos:line="1049" pos:column="58">Content</name><op:operator pos:line="1049" pos:column="65">.</op:operator><name><name pos:line="1049" pos:column="66">GetDescendantsAndSelf</name><argument_list pos:line="1049" pos:column="87">&lt;<argument><name pos:line="1049" pos:column="88">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1049" pos:column="99">()</argument_list></call><op:operator pos:line="1049" pos:column="101">.</op:operator><call><name pos:line="1049" pos:column="102">FirstOrDefault</name><argument_list pos:line="1049" pos:column="116">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1050" pos:column="13">Assert</name><op:operator pos:line="1050" pos:column="19">.</op:operator><name pos:line="1050" pos:column="20">IsNotNull</name></name><argument_list pos:line="1050" pos:column="29">(<argument><expr><name pos:line="1050" pos:column="30">barCall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1051" pos:column="13">Assert</name><op:operator pos:line="1051" pos:column="19">.</op:operator><name pos:line="1051" pos:column="20">AreSame</name></name><argument_list pos:line="1051" pos:column="27">(<argument><expr><name pos:line="1051" pos:column="28">aDotBDotBar</name></expr></argument>, <argument><expr><call><name><name pos:line="1051" pos:column="41">barCall</name><op:operator pos:line="1051" pos:column="48">.</op:operator><name pos:line="1051" pos:column="49">FindMatches</name></name><argument_list pos:line="1051" pos:column="60">()</argument_list></call><op:operator pos:line="1051" pos:column="62">.</op:operator><call><name pos:line="1051" pos:column="63">FirstOrDefault</name><argument_list pos:line="1051" pos:column="77">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1052" pos:column="13">Assert</name><op:operator pos:line="1052" pos:column="19">.</op:operator><name pos:line="1052" pos:column="20">AreNotSame</name></name><argument_list pos:line="1052" pos:column="30">(<argument><expr><name pos:line="1052" pos:column="31">aDotBar</name></expr></argument>, <argument><expr><call><name><name pos:line="1052" pos:column="40">barCall</name><op:operator pos:line="1052" pos:column="47">.</op:operator><name pos:line="1052" pos:column="48">FindMatches</name></name><argument_list pos:line="1052" pos:column="59">()</argument_list></call><op:operator pos:line="1052" pos:column="61">.</op:operator><call><name pos:line="1052" pos:column="62">FirstOrDefault</name><argument_list pos:line="1052" pos:column="76">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1055" pos:column="9">[<expr><name pos:line="1055" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1056" pos:column="9">public</specifier> <name pos:line="1056" pos:column="16">void</name></type> <name pos:line="1056" pos:column="21">TestMethodCallCreation_GlobalFunction</name><parameter_list pos:line="1056" pos:column="58">()</parameter_list> <block pos:line="1056" pos:column="61">{
            <comment type="line" pos:line="1057" pos:column="13">//void foo(int a) { printf(a); }</comment>
            <comment type="line" pos:line="1058" pos:column="13">//int main() {</comment>
            <comment type="line" pos:line="1059" pos:column="13">//    foo(5);</comment>
            <comment type="line" pos:line="1060" pos:column="13">//    return 0;</comment>
            <comment type="line" pos:line="1061" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="1062" pos:column="13">string</name></type> <name pos:line="1062" pos:column="20">xml</name> <init pos:line="1062" pos:column="24">= <expr><lit:literal type="string" pos:line="1062" pos:column="26">@"&lt;function&gt;&lt;type&gt;&lt;name pos:line=""1"" pos:column="&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""1"" pos:column="&gt;foo&lt;/name&gt;&lt;parameter_list pos:line=""1"" pos:column="&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""1"" pos:column=""&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""1"" pos:column=""&gt;a&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt; &lt;block pos:line=""1"" pos:column=""&gt;{ &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name pos:line=""1"" pos:column=""&gt;printf&lt;/name&gt;&lt;argument_list pos:line=""1"" pos:column=""&gt;(&lt;argument&gt;&lt;expr&gt;&lt;name pos:line=""1"" pos:column=""&gt;a&lt;/name&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt; }&lt;/block&gt;&lt;/function&gt;
&lt;function&gt;&lt;type&gt;&lt;name pos:line=""2"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""2"" pos:column="&gt;main&lt;/name&gt;&lt;parameter_list pos:line=""2"" pos:column="&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""2"" pos:column=""&gt;{
    &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name pos:line=""3"" pos:column="&gt;foo&lt;/name&gt;&lt;argument_list pos:line=""3"" pos:column="&gt;(&lt;argument&gt;&lt;expr&gt;&lt;lit:literal type=""number"" pos:line=""3"" pos:column&gt;5&lt;/lit:literal&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
    &lt;return pos:line=""4"" pos:column="&gt;return &lt;expr&gt;&lt;lit:literal type=""number"" pos:line=""4"" pos:column=&gt;0&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt;
}&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1068" pos:column="13">var</name></type> <name pos:line="1068" pos:column="17">unit</name> <init pos:line="1068" pos:column="22">= <expr><call><name><name pos:line="1068" pos:column="24">fileSetup</name><op:operator pos:line="1068" pos:column="33">.</op:operator><name pos:line="1068" pos:column="34">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1068" pos:column="58">(<argument><expr><name pos:line="1068" pos:column="59">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1068" pos:column="64">"test.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1069" pos:column="13">var</name></type> <name pos:line="1069" pos:column="17">globalScope</name> <init pos:line="1069" pos:column="29">= <expr><call><name><name pos:line="1069" pos:column="31">codeParser</name><op:operator pos:line="1069" pos:column="41">.</op:operator><name pos:line="1069" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="1069" pos:column="55">(<argument><expr><name pos:line="1069" pos:column="56">unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1070" pos:column="13">Assert</name><op:operator pos:line="1070" pos:column="19">.</op:operator><name pos:line="1070" pos:column="20">AreEqual</name></name><argument_list pos:line="1070" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1070" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1070" pos:column="32">globalScope</name><op:operator pos:line="1070" pos:column="43">.</op:operator><name pos:line="1070" pos:column="44">ChildStatements</name><op:operator pos:line="1070" pos:column="59">.</op:operator><name pos:line="1070" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1072" pos:column="13">var</name></type> <name pos:line="1072" pos:column="17">fooMethod</name> <init pos:line="1072" pos:column="27">= <expr><call><name><name pos:line="1072" pos:column="29">globalScope</name><op:operator pos:line="1072" pos:column="40">.</op:operator><name><name pos:line="1072" pos:column="41">GetNamedChildren</name><argument_list pos:line="1072" pos:column="57">&lt;<argument><name pos:line="1072" pos:column="58">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1072" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="1072" pos:column="76">"foo"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1072" pos:column="82">.</op:operator><call><name pos:line="1072" pos:column="83">FirstOrDefault</name><argument_list pos:line="1072" pos:column="97">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1073" pos:column="13">var</name></type> <name pos:line="1073" pos:column="17">mainMethod</name> <init pos:line="1073" pos:column="28">= <expr><call><name><name pos:line="1073" pos:column="30">globalScope</name><op:operator pos:line="1073" pos:column="41">.</op:operator><name><name pos:line="1073" pos:column="42">GetNamedChildren</name><argument_list pos:line="1073" pos:column="58">&lt;<argument><name pos:line="1073" pos:column="59">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1073" pos:column="76">(<argument><expr><lit:literal type="string" pos:line="1073" pos:column="77">"main"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1073" pos:column="84">.</op:operator><call><name pos:line="1073" pos:column="85">FirstOrDefault</name><argument_list pos:line="1073" pos:column="99">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="1075" pos:column="13">Assert</name><op:operator pos:line="1075" pos:column="19">.</op:operator><name pos:line="1075" pos:column="20">IsNotNull</name></name><argument_list pos:line="1075" pos:column="29">(<argument><expr><name pos:line="1075" pos:column="30">fooMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1076" pos:column="13">Assert</name><op:operator pos:line="1076" pos:column="19">.</op:operator><name pos:line="1076" pos:column="20">IsNotNull</name></name><argument_list pos:line="1076" pos:column="29">(<argument><expr><name pos:line="1076" pos:column="30">mainMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="1077" pos:column="13">//Assert.AreEqual(2, mainMethod.MethodCalls.Count());</comment>

            <expr_stmt><expr><call><name><name pos:line="1079" pos:column="13">Assert</name><op:operator pos:line="1079" pos:column="19">.</op:operator><name pos:line="1079" pos:column="20">AreEqual</name></name><argument_list pos:line="1079" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1079" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1079" pos:column="32">mainMethod</name><op:operator pos:line="1079" pos:column="42">.</op:operator><name pos:line="1079" pos:column="43">ChildStatements</name><op:operator pos:line="1079" pos:column="58">.</op:operator><name pos:line="1079" pos:column="59">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1081" pos:column="13">var</name></type> <name pos:line="1081" pos:column="17">fiveCall</name> <init pos:line="1081" pos:column="26">= <expr><name><name pos:line="1081" pos:column="28">mainMethod</name><op:operator pos:line="1081" pos:column="38">.</op:operator><name pos:line="1081" pos:column="39">ChildStatements</name><index pos:line="1081" pos:column="54">[<expr><lit:literal type="number" pos:line="1081" pos:column="55">0</lit:literal></expr>]</index></name><op:operator pos:line="1081" pos:column="57">.</op:operator><call><name><name pos:line="1081" pos:column="58">Content</name><op:operator pos:line="1081" pos:column="65">.</op:operator><name><name pos:line="1081" pos:column="66">GetDescendantsAndSelf</name><argument_list pos:line="1081" pos:column="87">&lt;<argument><name pos:line="1081" pos:column="88">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1081" pos:column="99">()</argument_list></call><op:operator pos:line="1081" pos:column="101">.</op:operator><call><name pos:line="1081" pos:column="102">FirstOrDefault</name><argument_list pos:line="1081" pos:column="116">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1082" pos:column="13">Assert</name><op:operator pos:line="1082" pos:column="19">.</op:operator><name pos:line="1082" pos:column="20">IsNotNull</name></name><argument_list pos:line="1082" pos:column="29">(<argument><expr><name pos:line="1082" pos:column="30">fiveCall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1083" pos:column="13">var</name></type> <name pos:line="1083" pos:column="17">matches</name> <init pos:line="1083" pos:column="25">= <expr><call><name><name pos:line="1083" pos:column="27">fiveCall</name><op:operator pos:line="1083" pos:column="35">.</op:operator><name pos:line="1083" pos:column="36">FindMatches</name></name><argument_list pos:line="1083" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1084" pos:column="13">Assert</name><op:operator pos:line="1084" pos:column="19">.</op:operator><name pos:line="1084" pos:column="20">AreSame</name></name><argument_list pos:line="1084" pos:column="27">(<argument><expr><name pos:line="1084" pos:column="28">fooMethod</name></expr></argument>, <argument><expr><call><name><name pos:line="1084" pos:column="39">matches</name><op:operator pos:line="1084" pos:column="46">.</op:operator><name pos:line="1084" pos:column="47">FirstOrDefault</name></name><argument_list pos:line="1084" pos:column="61">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1087" pos:column="9">[<expr><name pos:line="1087" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1088" pos:column="9">public</specifier> <name pos:line="1088" pos:column="16">void</name></type> <name pos:line="1088" pos:column="21">TestMethodCallCreation_CallGlobalNamespace</name><parameter_list pos:line="1088" pos:column="63">()</parameter_list> <block pos:line="1088" pos:column="66">{
            <comment type="line" pos:line="1089" pos:column="13">//void Foo() {</comment>
            <comment type="line" pos:line="1090" pos:column="13">//    std::cout&lt;&lt;"global::Foo"&lt;&lt;std::endl;</comment>
            <comment type="line" pos:line="1091" pos:column="13">//}</comment>
            <comment type="line" pos:line="1092" pos:column="13">//namespace A</comment>
            <comment type="line" pos:line="1093" pos:column="13">//{</comment>
            <comment type="line" pos:line="1094" pos:column="13">//    void Foo() {</comment>
            <comment type="line" pos:line="1095" pos:column="13">//        std::cout&lt;&lt;"A::Foo"&lt;&lt;std::endl;</comment>
            <comment type="line" pos:line="1096" pos:column="13">//    }</comment>
            <comment type="line" pos:line="1097" pos:column="13">//    void print()</comment>
            <comment type="line" pos:line="1098" pos:column="13">//    {</comment>
            <comment type="line" pos:line="1099" pos:column="13">//         Foo();</comment>
            <comment type="line" pos:line="1100" pos:column="13">//         ::Foo();</comment>
            <comment type="line" pos:line="1101" pos:column="13">//    }</comment>
            <comment type="line" pos:line="1102" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="1103" pos:column="13">string</name></type> <name pos:line="1103" pos:column="20">xml</name> <init pos:line="1103" pos:column="24">= <expr><lit:literal type="string" pos:line="1103" pos:column="26">@"&lt;function&gt;&lt;type&gt;&lt;name&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{
    &lt;expr_stmt&gt;&lt;expr&gt;&lt;name&gt;&lt;name&gt;std&lt;/name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;&lt;name&gt;cout&lt;/name&gt;&lt;/name&gt;&lt;op:operator&gt;&amp;lt;&amp;lt;&lt;/op:operator&gt;&lt;lit:literal type=""string&gt;""global::Foo&lt;/lit:literal&gt;&lt;op:operator&gt;&amp;lt;&amp;lt;&lt;/op:operator&gt;&lt;name&gt;&lt;name&gt;std&lt;/name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;&lt;name&gt;endl&lt;/name&gt;&lt;/name&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
}&lt;/block&gt;&lt;/function&gt;
&lt;namespace&gt;namespace &lt;name&gt;A&lt;/name&gt;
&lt;block&gt;{
    &lt;function&gt;&lt;type&gt;&lt;name&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{
        &lt;expr_stmt&gt;&lt;expr&gt;&lt;name&gt;&lt;name&gt;std&lt;/name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;&lt;name&gt;cout&lt;/name&gt;&lt;/name&gt;&lt;op:operator&gt;&amp;lt;&amp;lt;&lt;/op:operator&gt;&lt;lit:literal type=""string&gt;""A::Foo&lt;/lit:literal&gt;&lt;op:operator&gt;&amp;lt;&amp;lt;&lt;/op:operator&gt;&lt;name&gt;&lt;name&gt;std&lt;/name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;&lt;name&gt;endl&lt;/name&gt;&lt;/name&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
    }&lt;/block&gt;&lt;/function&gt;
    &lt;function&gt;&lt;type&gt;&lt;name&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name&gt;print&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt;
    &lt;block&gt;{
         &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
         &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;&lt;name&gt;Foo&lt;/name&gt;&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
    }&lt;/block&gt;&lt;/function&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1118" pos:column="13">var</name></type> <name pos:line="1118" pos:column="17">unit</name> <init pos:line="1118" pos:column="22">= <expr><call><name><name pos:line="1118" pos:column="24">fileSetup</name><op:operator pos:line="1118" pos:column="33">.</op:operator><name pos:line="1118" pos:column="34">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1118" pos:column="58">(<argument><expr><name pos:line="1118" pos:column="59">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1118" pos:column="64">"test.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1119" pos:column="13">var</name></type> <name pos:line="1119" pos:column="17">globalScope</name> <init pos:line="1119" pos:column="29">= <expr><call><name><name pos:line="1119" pos:column="31">codeParser</name><op:operator pos:line="1119" pos:column="41">.</op:operator><name pos:line="1119" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="1119" pos:column="55">(<argument><expr><name pos:line="1119" pos:column="56">unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1120" pos:column="13">Assert</name><op:operator pos:line="1120" pos:column="19">.</op:operator><name pos:line="1120" pos:column="20">AreEqual</name></name><argument_list pos:line="1120" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1120" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1120" pos:column="32">globalScope</name><op:operator pos:line="1120" pos:column="43">.</op:operator><name pos:line="1120" pos:column="44">ChildStatements</name><op:operator pos:line="1120" pos:column="59">.</op:operator><name pos:line="1120" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1122" pos:column="13">var</name></type> <name pos:line="1122" pos:column="17">globalFoo</name> <init pos:line="1122" pos:column="27">= <expr><call><name><name pos:line="1122" pos:column="29">globalScope</name><op:operator pos:line="1122" pos:column="40">.</op:operator><name><name pos:line="1122" pos:column="41">GetNamedChildren</name><argument_list pos:line="1122" pos:column="57">&lt;<argument><name pos:line="1122" pos:column="58">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1122" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="1122" pos:column="76">"Foo"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1122" pos:column="82">.</op:operator><call><name pos:line="1122" pos:column="83">FirstOrDefault</name><argument_list pos:line="1122" pos:column="97">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1123" pos:column="13">var</name></type> <name pos:line="1123" pos:column="17">aFoo</name> <init pos:line="1123" pos:column="22">= <expr><call><name><name pos:line="1123" pos:column="24">globalScope</name><op:operator pos:line="1123" pos:column="35">.</op:operator><name><name pos:line="1123" pos:column="36">GetNamedChildren</name><argument_list pos:line="1123" pos:column="52">&lt;<argument><name pos:line="1123" pos:column="53">NamespaceDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1123" pos:column="73">(<argument><expr><lit:literal type="string" pos:line="1123" pos:column="74">"A"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1123" pos:column="78">.</op:operator><call><name pos:line="1123" pos:column="79">First</name><argument_list pos:line="1123" pos:column="84">()</argument_list></call><op:operator pos:line="1123" pos:column="86">.</op:operator><call><name><name pos:line="1123" pos:column="87">GetNamedChildren</name><argument_list pos:line="1123" pos:column="103">&lt;<argument><name pos:line="1123" pos:column="104">MethodDefinition</name></argument>&gt;</argument_list></name><argument_list pos:line="1123" pos:column="121">(<argument><expr><lit:literal type="string" pos:line="1123" pos:column="122">"Foo"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1123" pos:column="128">.</op:operator><call><name pos:line="1123" pos:column="129">FirstOrDefault</name><argument_list pos:line="1123" pos:column="143">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1124" pos:column="13">var</name></type> <name pos:line="1124" pos:column="17">print</name> <init pos:line="1124" pos:column="23">= <expr><call><name><name pos:line="1124" pos:column="25">globalScope</name><op:operator pos:line="1124" pos:column="36">.</op:operator><name><name pos:line="1124" pos:column="37">GetNamedChildren</name><argument_list pos:line="1124" pos:column="53">&lt;<argument><name pos:line="1124" pos:column="54">NamespaceDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1124" pos:column="74">(<argument><expr><lit:literal type="string" pos:line="1124" pos:column="75">"A"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1124" pos:column="79">.</op:operator><call><name pos:line="1124" pos:column="80">First</name><argument_list pos:line="1124" pos:column="85">()</argument_list></call><op:operator pos:line="1124" pos:column="87">.</op:operator><call><name><name pos:line="1124" pos:column="88">GetNamedChildren</name><argument_list pos:line="1124" pos:column="104">&lt;<argument><name pos:line="1124" pos:column="105">MethodDefinition</name></argument>&gt;</argument_list></name><argument_list pos:line="1124" pos:column="122">(<argument><expr><lit:literal type="string" pos:line="1124" pos:column="123">"print"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1124" pos:column="131">.</op:operator><call><name pos:line="1124" pos:column="132">FirstOrDefault</name><argument_list pos:line="1124" pos:column="146">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="1126" pos:column="13">Assert</name><op:operator pos:line="1126" pos:column="19">.</op:operator><name pos:line="1126" pos:column="20">IsNotNull</name></name><argument_list pos:line="1126" pos:column="29">(<argument><expr><name pos:line="1126" pos:column="30">globalFoo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1127" pos:column="13">Assert</name><op:operator pos:line="1127" pos:column="19">.</op:operator><name pos:line="1127" pos:column="20">IsNotNull</name></name><argument_list pos:line="1127" pos:column="29">(<argument><expr><name pos:line="1127" pos:column="30">aFoo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1128" pos:column="13">Assert</name><op:operator pos:line="1128" pos:column="19">.</op:operator><name pos:line="1128" pos:column="20">IsNotNull</name></name><argument_list pos:line="1128" pos:column="29">(<argument><expr><name pos:line="1128" pos:column="30">print</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="1130" pos:column="13">Assert</name><op:operator pos:line="1130" pos:column="19">.</op:operator><name pos:line="1130" pos:column="20">AreEqual</name></name><argument_list pos:line="1130" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1130" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1130" pos:column="32">print</name><op:operator pos:line="1130" pos:column="37">.</op:operator><name pos:line="1130" pos:column="38">ChildStatements</name><op:operator pos:line="1130" pos:column="53">.</op:operator><name pos:line="1130" pos:column="54">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1132" pos:column="13">var</name></type> <name pos:line="1132" pos:column="17">aCall</name> <init pos:line="1132" pos:column="23">= <expr><name><name pos:line="1132" pos:column="25">print</name><op:operator pos:line="1132" pos:column="30">.</op:operator><name pos:line="1132" pos:column="31">ChildStatements</name><index pos:line="1132" pos:column="46">[<expr><lit:literal type="number" pos:line="1132" pos:column="47">0</lit:literal></expr>]</index></name><op:operator pos:line="1132" pos:column="49">.</op:operator><call><name><name pos:line="1132" pos:column="50">Content</name><op:operator pos:line="1132" pos:column="57">.</op:operator><name><name pos:line="1132" pos:column="58">GetDescendantsAndSelf</name><argument_list pos:line="1132" pos:column="79">&lt;<argument><name pos:line="1132" pos:column="80">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1132" pos:column="91">()</argument_list></call><op:operator pos:line="1132" pos:column="93">.</op:operator><call><name pos:line="1132" pos:column="94">FirstOrDefault</name><argument_list pos:line="1132" pos:column="108">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1133" pos:column="13">Assert</name><op:operator pos:line="1133" pos:column="19">.</op:operator><name pos:line="1133" pos:column="20">IsNotNull</name></name><argument_list pos:line="1133" pos:column="29">(<argument><expr><name pos:line="1133" pos:column="30">aCall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1134" pos:column="13">var</name></type> <name pos:line="1134" pos:column="17">aCallMatches</name> <init pos:line="1134" pos:column="30">= <expr><call><name><name pos:line="1134" pos:column="32">aCall</name><op:operator pos:line="1134" pos:column="37">.</op:operator><name pos:line="1134" pos:column="38">FindMatches</name></name><argument_list pos:line="1134" pos:column="49">()</argument_list></call><op:operator pos:line="1134" pos:column="51">.</op:operator><call><name pos:line="1134" pos:column="52">ToList</name><argument_list pos:line="1134" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="1135" pos:column="13">//Assert.AreEqual(1, matches.Count);</comment>
            <expr_stmt><expr><call><name><name pos:line="1136" pos:column="13">Assert</name><op:operator pos:line="1136" pos:column="19">.</op:operator><name pos:line="1136" pos:column="20">AreSame</name></name><argument_list pos:line="1136" pos:column="27">(<argument><expr><name pos:line="1136" pos:column="28">aFoo</name></expr></argument>, <argument><expr><call><name><name pos:line="1136" pos:column="34">aCallMatches</name><op:operator pos:line="1136" pos:column="46">.</op:operator><name pos:line="1136" pos:column="47">FirstOrDefault</name></name><argument_list pos:line="1136" pos:column="61">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1138" pos:column="13">var</name></type> <name pos:line="1138" pos:column="17">globalCall</name> <init pos:line="1138" pos:column="28">= <expr><name><name pos:line="1138" pos:column="30">print</name><op:operator pos:line="1138" pos:column="35">.</op:operator><name pos:line="1138" pos:column="36">ChildStatements</name><index pos:line="1138" pos:column="51">[<expr><lit:literal type="number" pos:line="1138" pos:column="52">1</lit:literal></expr>]</index></name><op:operator pos:line="1138" pos:column="54">.</op:operator><call><name><name pos:line="1138" pos:column="55">Content</name><op:operator pos:line="1138" pos:column="62">.</op:operator><name><name pos:line="1138" pos:column="63">GetDescendantsAndSelf</name><argument_list pos:line="1138" pos:column="84">&lt;<argument><name pos:line="1138" pos:column="85">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1138" pos:column="96">()</argument_list></call><op:operator pos:line="1138" pos:column="98">.</op:operator><call><name pos:line="1138" pos:column="99">FirstOrDefault</name><argument_list pos:line="1138" pos:column="113">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1139" pos:column="13">Assert</name><op:operator pos:line="1139" pos:column="19">.</op:operator><name pos:line="1139" pos:column="20">IsNotNull</name></name><argument_list pos:line="1139" pos:column="29">(<argument><expr><name pos:line="1139" pos:column="30">globalCall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1140" pos:column="13">var</name></type> <name pos:line="1140" pos:column="17">globalCallMatches</name> <init pos:line="1140" pos:column="35">= <expr><call><name><name pos:line="1140" pos:column="37">globalCall</name><op:operator pos:line="1140" pos:column="47">.</op:operator><name pos:line="1140" pos:column="48">FindMatches</name></name><argument_list pos:line="1140" pos:column="59">()</argument_list></call><op:operator pos:line="1140" pos:column="61">.</op:operator><call><name pos:line="1140" pos:column="62">ToList</name><argument_list pos:line="1140" pos:column="68">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1141" pos:column="13">Assert</name><op:operator pos:line="1141" pos:column="19">.</op:operator><name pos:line="1141" pos:column="20">AreEqual</name></name><argument_list pos:line="1141" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1141" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1141" pos:column="32">globalCallMatches</name><op:operator pos:line="1141" pos:column="49">.</op:operator><name pos:line="1141" pos:column="50">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1142" pos:column="13">Assert</name><op:operator pos:line="1142" pos:column="19">.</op:operator><name pos:line="1142" pos:column="20">AreSame</name></name><argument_list pos:line="1142" pos:column="27">(<argument><expr><name pos:line="1142" pos:column="28">globalFoo</name></expr></argument>, <argument><expr><call><name><name pos:line="1142" pos:column="39">globalCallMatches</name><op:operator pos:line="1142" pos:column="56">.</op:operator><name pos:line="1142" pos:column="57">FirstOrDefault</name></name><argument_list pos:line="1142" pos:column="71">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1145" pos:column="9">[<expr><name pos:line="1145" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1146" pos:column="9">public</specifier> <name pos:line="1146" pos:column="16">void</name></type> <name pos:line="1146" pos:column="21">TestMethodCallFindMatches</name><parameter_list pos:line="1146" pos:column="46">()</parameter_list> <block pos:line="1146" pos:column="49">{
            <comment type="line" pos:line="1147" pos:column="13">// # A.h class A { int context;</comment>
            <comment type="line" pos:line="1148" pos:column="13">// public:</comment>
            <comment type="line" pos:line="1149" pos:column="13">// A(); };</comment>
            <decl_stmt><decl><type><name pos:line="1150" pos:column="13">string</name></type> <name pos:line="1150" pos:column="20">headerXml</name> <init pos:line="1150" pos:column="30">= <expr><lit:literal type="string" pos:line="1150" pos:column="32">@"&lt;class&gt;class &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{&lt;private type=""default&gt;
    &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;context&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
    &lt;/private&gt;&lt;public&gt;public:
        &lt;constructor_decl&gt;&lt;name&gt;A&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt;;&lt;/constructor_decl&gt;
&lt;/public&gt;}&lt;/block&gt;;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="1156" pos:column="13">// # A.cpp #include "A.h"</comment>
            <comment type="line" pos:line="1157" pos:column="13">// A: :A() {</comment>
            <comment type="line" pos:line="1158" pos:column="13">// }</comment>
            <decl_stmt><decl><type><name pos:line="1159" pos:column="13">string</name></type> <name pos:line="1159" pos:column="20">implementationXml</name> <init pos:line="1159" pos:column="38">= <expr><lit:literal type="string" pos:line="1159" pos:column="40">@"&lt;cpp:include&gt;#&lt;cpp:directive&gt;include&lt;/cpp:directive&gt; &lt;cpp:file&gt;&lt;lit:literal type=""string&gt;""A.h&lt;/lit:literal&gt;&lt;/cpp:file&gt;&lt;/cpp:include&gt;
&lt;constructor&gt;&lt;name&gt;&lt;name&gt;A&lt;/name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;&lt;name&gt;A&lt;/name&gt;&lt;/name&gt;&lt;parameter_list&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;val&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt; &lt;block&gt;{
}&lt;/block&gt;&lt;/constructor&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="1163" pos:column="13">// # main.cpp #include "A.h" int main() { A a = A(); return 0; }</comment>
            <decl_stmt><decl><type><name pos:line="1164" pos:column="13">string</name></type> <name pos:line="1164" pos:column="20">mainXml</name> <init pos:line="1164" pos:column="28">= <expr><lit:literal type="string" pos:line="1164" pos:column="30">@"&lt;cpp:include&gt;#&lt;cpp:directive&gt;include&lt;/cpp:directive&gt; &lt;cpp:file&gt;&lt;lit:literal type=""string&gt;""A.h&lt;/lit:literal&gt;&lt;/cpp:file&gt;&lt;/cpp:include&gt;
&lt;function&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;main&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{
    &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;A&lt;/name&gt;&lt;/type&gt; &lt;name&gt;a&lt;/name&gt; =&lt;init&gt; &lt;expr&gt;&lt;op:operator&gt;new&lt;/op:operator&gt; &lt;call&gt;&lt;name&gt;A&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;&lt;/init&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
    &lt;return&gt;return &lt;expr&gt;&lt;lit:literal type=""number&gt;0&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt;
}&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1170" pos:column="13">var</name></type> <name pos:line="1170" pos:column="17">headerElement</name> <init pos:line="1170" pos:column="31">= <expr><call><name><name pos:line="1170" pos:column="33">fileSetup</name><op:operator pos:line="1170" pos:column="42">.</op:operator><name pos:line="1170" pos:column="43">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1170" pos:column="67">(<argument><expr><name pos:line="1170" pos:column="68">headerXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1170" pos:column="79">"A.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1171" pos:column="13">var</name></type> <name pos:line="1171" pos:column="17">implementationElement</name> <init pos:line="1171" pos:column="39">= <expr><call><name><name pos:line="1171" pos:column="41">fileSetup</name><op:operator pos:line="1171" pos:column="50">.</op:operator><name pos:line="1171" pos:column="51">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1171" pos:column="75">(<argument><expr><name pos:line="1171" pos:column="76">implementationXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1171" pos:column="95">"A.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1172" pos:column="13">var</name></type> <name pos:line="1172" pos:column="17">mainElement</name> <init pos:line="1172" pos:column="29">= <expr><call><name><name pos:line="1172" pos:column="31">fileSetup</name><op:operator pos:line="1172" pos:column="40">.</op:operator><name pos:line="1172" pos:column="41">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1172" pos:column="65">(<argument><expr><name pos:line="1172" pos:column="66">mainXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1172" pos:column="75">"main.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1174" pos:column="13">var</name></type> <name pos:line="1174" pos:column="17">header</name> <init pos:line="1174" pos:column="24">= <expr><call><name><name pos:line="1174" pos:column="26">codeParser</name><op:operator pos:line="1174" pos:column="36">.</op:operator><name pos:line="1174" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="1174" pos:column="50">(<argument><expr><name pos:line="1174" pos:column="51">headerElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1175" pos:column="13">var</name></type> <name pos:line="1175" pos:column="17">implementation</name> <init pos:line="1175" pos:column="32">= <expr><call><name><name pos:line="1175" pos:column="34">codeParser</name><op:operator pos:line="1175" pos:column="44">.</op:operator><name pos:line="1175" pos:column="45">ParseFileUnit</name></name><argument_list pos:line="1175" pos:column="58">(<argument><expr><name pos:line="1175" pos:column="59">implementationElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1176" pos:column="13">var</name></type> main <init pos:line="1176" pos:column="22">= <expr><call><name><name pos:line="1176" pos:column="24">codeParser</name><op:operator pos:line="1176" pos:column="34">.</op:operator><name pos:line="1176" pos:column="35">ParseFileUnit</name></name><argument_list pos:line="1176" pos:column="48">(<argument><expr><name pos:line="1176" pos:column="49">mainElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1178" pos:column="13">var</name></type> <name pos:line="1178" pos:column="17">unmergedMainMethod</name> <init pos:line="1178" pos:column="36">= <expr pos:line="1178" pos:column="38">main<op:operator pos:line="1178" pos:column="42">.</op:operator><call><name><name pos:line="1178" pos:column="43">ChildStatements</name><op:operator pos:line="1178" pos:column="58">.</op:operator><name pos:line="1178" pos:column="59">First</name></name><argument_list pos:line="1178" pos:column="64">()</argument_list></call> <op:operator pos:line="1178" pos:column="67">as</op:operator> <name pos:line="1178" pos:column="70">MethodDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1179" pos:column="13">Assert</name><op:operator pos:line="1179" pos:column="19">.</op:operator><name pos:line="1179" pos:column="20">That</name></name><argument_list pos:line="1179" pos:column="24">(<argument><expr><call><name><name pos:line="1179" pos:column="25">unmergedMainMethod</name><op:operator pos:line="1179" pos:column="43">.</op:operator><name><name pos:line="1179" pos:column="44">FindExpressions</name><argument_list pos:line="1179" pos:column="59">&lt;<argument><name pos:line="1179" pos:column="60">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1179" pos:column="71">(<argument><expr><lit:literal type="boolean" pos:line="1179" pos:column="72">true</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1179" pos:column="77">.</op:operator><call><name pos:line="1179" pos:column="78">First</name><argument_list pos:line="1179" pos:column="83">()</argument_list></call><op:operator pos:line="1179" pos:column="85">.</op:operator><call><name pos:line="1179" pos:column="86">FindMatches</name><argument_list pos:line="1179" pos:column="97">()</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="1179" pos:column="101">Is</name><op:operator pos:line="1179" pos:column="103">.</op:operator><name pos:line="1179" pos:column="104">Empty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1181" pos:column="13">var</name></type> <name pos:line="1181" pos:column="17">globalScope</name> <init pos:line="1181" pos:column="29">= <expr pos:line="1181" pos:column="31">main<op:operator pos:line="1181" pos:column="35">.</op:operator><call><name pos:line="1181" pos:column="36">Merge</name><argument_list pos:line="1181" pos:column="41">(<argument><expr><name pos:line="1181" pos:column="42">implementation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="1182" pos:column="13">globalScope</name> <op:operator pos:line="1182" pos:column="25">=</op:operator> <call><name><name pos:line="1182" pos:column="27">globalScope</name><op:operator pos:line="1182" pos:column="38">.</op:operator><name pos:line="1182" pos:column="39">Merge</name></name><argument_list pos:line="1182" pos:column="44">(<argument><expr><name pos:line="1182" pos:column="45">header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1184" pos:column="13">var</name></type> <name pos:line="1184" pos:column="17">namedChildren</name> <init pos:line="1184" pos:column="31">= <expr><linq><from pos:line="1184" pos:column="33">from <expr><name pos:line="1184" pos:column="38">namedChild</name></expr> <in pos:line="1184" pos:column="49">in <expr><call><name><name pos:line="1184" pos:column="52">globalScope</name><op:operator pos:line="1184" pos:column="63">.</op:operator><name pos:line="1184" pos:column="64">ChildStatements</name><op:operator pos:line="1184" pos:column="79">.</op:operator><name><name pos:line="1184" pos:column="80">OfType</name><argument_list pos:line="1184" pos:column="86">&lt;<argument><name pos:line="1184" pos:column="87">INamedEntity</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1184" pos:column="100">()</argument_list></call></expr></in></from>
                                <orderby pos:line="1185" pos:column="33">orderby <expr><name><name pos:line="1185" pos:column="41">namedChild</name><op:operator pos:line="1185" pos:column="51">.</op:operator><name pos:line="1185" pos:column="52">Name</name></name></expr></orderby>
                                <select pos:line="1186" pos:column="33">select <expr><name pos:line="1186" pos:column="40">namedChild</name></expr></select></linq></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="1188" pos:column="13">Assert</name><op:operator pos:line="1188" pos:column="19">.</op:operator><name pos:line="1188" pos:column="20">AreEqual</name></name><argument_list pos:line="1188" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1188" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="1188" pos:column="32">namedChildren</name><op:operator pos:line="1188" pos:column="45">.</op:operator><name pos:line="1188" pos:column="46">Count</name></name><argument_list pos:line="1188" pos:column="51">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1190" pos:column="13">var</name></type> <name pos:line="1190" pos:column="17">typeA</name> <init pos:line="1190" pos:column="23">= <expr><call><name><name pos:line="1190" pos:column="25">namedChildren</name><op:operator pos:line="1190" pos:column="38">.</op:operator><name pos:line="1190" pos:column="39">First</name></name><argument_list pos:line="1190" pos:column="44">()</argument_list></call> <op:operator pos:line="1190" pos:column="47">as</op:operator> <name pos:line="1190" pos:column="50">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1191" pos:column="13">var</name></type> <name pos:line="1191" pos:column="17">mainMethod</name> <init pos:line="1191" pos:column="28">= <expr><call><name><name pos:line="1191" pos:column="30">namedChildren</name><op:operator pos:line="1191" pos:column="43">.</op:operator><name pos:line="1191" pos:column="44">Last</name></name><argument_list pos:line="1191" pos:column="48">()</argument_list></call> <op:operator pos:line="1191" pos:column="51">as</op:operator> <name pos:line="1191" pos:column="54">MethodDefinition</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="1193" pos:column="13">Assert</name><op:operator pos:line="1193" pos:column="19">.</op:operator><name pos:line="1193" pos:column="20">AreEqual</name></name><argument_list pos:line="1193" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1193" pos:column="29">"A"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1193" pos:column="34">typeA</name><op:operator pos:line="1193" pos:column="39">.</op:operator><name pos:line="1193" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1194" pos:column="13">Assert</name><op:operator pos:line="1194" pos:column="19">.</op:operator><name pos:line="1194" pos:column="20">AreEqual</name></name><argument_list pos:line="1194" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1194" pos:column="29">"main"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1194" pos:column="37">mainMethod</name><op:operator pos:line="1194" pos:column="47">.</op:operator><name pos:line="1194" pos:column="48">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1196" pos:column="13">var</name></type> <name pos:line="1196" pos:column="17">callInMain</name> <init pos:line="1196" pos:column="28">= <expr><call><name><name pos:line="1196" pos:column="30">mainMethod</name><op:operator pos:line="1196" pos:column="40">.</op:operator><name><name pos:line="1196" pos:column="41">FindExpressions</name><argument_list pos:line="1196" pos:column="56">&lt;<argument><name pos:line="1196" pos:column="57">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1196" pos:column="68">(<argument><expr><lit:literal type="boolean" pos:line="1196" pos:column="69">true</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1196" pos:column="74">.</op:operator><call><name pos:line="1196" pos:column="75">First</name><argument_list pos:line="1196" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1197" pos:column="13">var</name></type> <name pos:line="1197" pos:column="17">constructor</name> <init pos:line="1197" pos:column="29">= <expr><call><name><name pos:line="1197" pos:column="31">typeA</name><op:operator pos:line="1197" pos:column="36">.</op:operator><name pos:line="1197" pos:column="37">ChildStatements</name><op:operator pos:line="1197" pos:column="52">.</op:operator><name><name pos:line="1197" pos:column="53">OfType</name><argument_list pos:line="1197" pos:column="59">&lt;<argument><name pos:line="1197" pos:column="60">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1197" pos:column="77">()</argument_list></call><op:operator pos:line="1197" pos:column="79">.</op:operator><call><name pos:line="1197" pos:column="80">FirstOrDefault</name><argument_list pos:line="1197" pos:column="94">()</argument_list></call> <op:operator pos:line="1197" pos:column="97">as</op:operator> <name pos:line="1197" pos:column="100">MethodDefinition</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="1199" pos:column="13">Assert</name><op:operator pos:line="1199" pos:column="19">.</op:operator><name pos:line="1199" pos:column="20">IsTrue</name></name><argument_list pos:line="1199" pos:column="26">(<argument><expr><name><name pos:line="1199" pos:column="27">callInMain</name><op:operator pos:line="1199" pos:column="37">.</op:operator><name pos:line="1199" pos:column="38">IsConstructor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1200" pos:column="13">Assert</name><op:operator pos:line="1200" pos:column="19">.</op:operator><name pos:line="1200" pos:column="20">IsTrue</name></name><argument_list pos:line="1200" pos:column="26">(<argument><expr><name><name pos:line="1200" pos:column="27">constructor</name><op:operator pos:line="1200" pos:column="38">.</op:operator><name pos:line="1200" pos:column="39">IsConstructor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1201" pos:column="13">Assert</name><op:operator pos:line="1201" pos:column="19">.</op:operator><name pos:line="1201" pos:column="20">AreSame</name></name><argument_list pos:line="1201" pos:column="27">(<argument><expr><name pos:line="1201" pos:column="28">constructor</name></expr></argument>, <argument><expr><call><name><name pos:line="1201" pos:column="41">callInMain</name><op:operator pos:line="1201" pos:column="51">.</op:operator><name pos:line="1201" pos:column="52">FindMatches</name></name><argument_list pos:line="1201" pos:column="63">()</argument_list></call><op:operator pos:line="1201" pos:column="65">.</op:operator><call><name pos:line="1201" pos:column="66">First</name><argument_list pos:line="1201" pos:column="71">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1204" pos:column="9">[<expr><name pos:line="1204" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1205" pos:column="9">public</specifier> <name pos:line="1205" pos:column="16">void</name></type> <name pos:line="1205" pos:column="21">TestMethodCallFindMatches_WithArguments</name><parameter_list pos:line="1205" pos:column="60">()</parameter_list> <block pos:line="1205" pos:column="63">{
            <comment type="line" pos:line="1206" pos:column="13">// # A.h class A { int context;</comment>
            <comment type="line" pos:line="1207" pos:column="13">// public:</comment>
            <comment type="line" pos:line="1208" pos:column="13">// A(int value); };</comment>
            <decl_stmt><decl><type><name pos:line="1209" pos:column="13">string</name></type> <name pos:line="1209" pos:column="20">headerXml</name> <init pos:line="1209" pos:column="30">= <expr><lit:literal type="string" pos:line="1209" pos:column="32">@"&lt;class&gt;class &lt;name&gt;A&lt;/name&gt; &lt;block&gt;{&lt;private type=""default&gt;
    &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;context&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
&lt;/private&gt;&lt;public&gt;public:
    &lt;constructor_decl&gt;&lt;name&gt;A&lt;/name&gt;&lt;parameter_list&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;value&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt;;&lt;/constructor_decl&gt;
&lt;/public&gt;}&lt;/block&gt;;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="1215" pos:column="13">// # A.cpp #include "A.h"</comment>
            <comment type="line" pos:line="1216" pos:column="13">// A: :A(int value) { context = value;</comment>
            <comment type="line" pos:line="1217" pos:column="13">// }</comment>
            <decl_stmt><decl><type><name pos:line="1218" pos:column="13">string</name></type> <name pos:line="1218" pos:column="20">implementationXml</name> <init pos:line="1218" pos:column="38">= <expr><lit:literal type="string" pos:line="1218" pos:column="40">@"&lt;cpp:include&gt;#&lt;cpp:directive&gt;include&lt;/cpp:directive&gt; &lt;cpp:file&gt;&lt;lit:literal type=""string&gt;""A.h&lt;/lit:literal&gt;&lt;/cpp:file&gt;&lt;/cpp:include&gt;
&lt;constructor&gt;&lt;name&gt;&lt;name&gt;A&lt;/name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;&lt;name&gt;A&lt;/name&gt;&lt;/name&gt;&lt;parameter_list&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;value&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt; &lt;block&gt;{
    &lt;expr_stmt&gt;&lt;expr&gt;&lt;name&gt;context&lt;/name&gt; &lt;op:operator&gt;=&lt;/op:operator&gt; &lt;name&gt;value&lt;/name&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
}&lt;/block&gt;&lt;/constructor&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="1223" pos:column="13">// # main.cpp #include "A.h" int main() { int startingState = 0; A *a = new</comment>
            <comment type="line" pos:line="1224" pos:column="13">// A(startingState); return startingState; }</comment>
            <decl_stmt><decl><type><name pos:line="1225" pos:column="13">string</name></type> <name pos:line="1225" pos:column="20">mainXml</name> <init pos:line="1225" pos:column="28">= <expr><lit:literal type="string" pos:line="1225" pos:column="30">@"&lt;cpp:include&gt;#&lt;cpp:directive&gt;include&lt;/cpp:directive&gt; &lt;cpp:file&gt;&lt;lit:literal type=""string&gt;""A.h&lt;/lit:literal&gt;&lt;/cpp:file&gt;&lt;/cpp:include&gt;
&lt;function&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;main&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{
    &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;startingState&lt;/name&gt; =&lt;init&gt; &lt;expr&gt;&lt;lit:literal type=""number&gt;0&lt;/lit:literal&gt;&lt;/expr&gt;&lt;/init&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
    &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;A&lt;/name&gt; &lt;type:modifier&gt;*&lt;/type:modifier&gt;&lt;/type&gt;&lt;name&gt;a&lt;/name&gt; =&lt;init&gt; &lt;expr&gt;&lt;op:operator&gt;new&lt;/op:operator&gt; &lt;call&gt;&lt;name&gt;A&lt;/name&gt;&lt;argument_list&gt;(&lt;argument&gt;&lt;expr&gt;&lt;name&gt;startingState&lt;/name&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;&lt;/init&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
    &lt;return&gt;return &lt;expr&gt;&lt;name&gt;startingState&lt;/name&gt;&lt;/expr&gt;;&lt;/return&gt;&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1231" pos:column="13">var</name></type> <name pos:line="1231" pos:column="17">headerElement</name> <init pos:line="1231" pos:column="31">= <expr><call><name><name pos:line="1231" pos:column="33">fileSetup</name><op:operator pos:line="1231" pos:column="42">.</op:operator><name pos:line="1231" pos:column="43">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1231" pos:column="67">(<argument><expr><name pos:line="1231" pos:column="68">headerXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1231" pos:column="79">"A.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1232" pos:column="13">var</name></type> <name pos:line="1232" pos:column="17">implementationElement</name> <init pos:line="1232" pos:column="39">= <expr><call><name><name pos:line="1232" pos:column="41">fileSetup</name><op:operator pos:line="1232" pos:column="50">.</op:operator><name pos:line="1232" pos:column="51">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1232" pos:column="75">(<argument><expr><name pos:line="1232" pos:column="76">implementationXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1232" pos:column="95">"A.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1233" pos:column="13">var</name></type> <name pos:line="1233" pos:column="17">mainElement</name> <init pos:line="1233" pos:column="29">= <expr><call><name><name pos:line="1233" pos:column="31">fileSetup</name><op:operator pos:line="1233" pos:column="40">.</op:operator><name pos:line="1233" pos:column="41">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1233" pos:column="65">(<argument><expr><name pos:line="1233" pos:column="66">mainXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1233" pos:column="75">"main.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1235" pos:column="13">var</name></type> <name pos:line="1235" pos:column="17">header</name> <init pos:line="1235" pos:column="24">= <expr><call><name><name pos:line="1235" pos:column="26">codeParser</name><op:operator pos:line="1235" pos:column="36">.</op:operator><name pos:line="1235" pos:column="37">ParseFileUnit</name></name><argument_list pos:line="1235" pos:column="50">(<argument><expr><name pos:line="1235" pos:column="51">headerElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1236" pos:column="13">var</name></type> <name pos:line="1236" pos:column="17">implementation</name> <init pos:line="1236" pos:column="32">= <expr><call><name><name pos:line="1236" pos:column="34">codeParser</name><op:operator pos:line="1236" pos:column="44">.</op:operator><name pos:line="1236" pos:column="45">ParseFileUnit</name></name><argument_list pos:line="1236" pos:column="58">(<argument><expr><name pos:line="1236" pos:column="59">implementationElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1237" pos:column="13">var</name></type> main <init pos:line="1237" pos:column="22">= <expr><call><name><name pos:line="1237" pos:column="24">codeParser</name><op:operator pos:line="1237" pos:column="34">.</op:operator><name pos:line="1237" pos:column="35">ParseFileUnit</name></name><argument_list pos:line="1237" pos:column="48">(<argument><expr><name pos:line="1237" pos:column="49">mainElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1239" pos:column="13">var</name></type> <name pos:line="1239" pos:column="17">globalScope</name> <init pos:line="1239" pos:column="29">= <expr pos:line="1239" pos:column="31">main<op:operator pos:line="1239" pos:column="35">.</op:operator><call><name pos:line="1239" pos:column="36">Merge</name><argument_list pos:line="1239" pos:column="41">(<argument><expr><name pos:line="1239" pos:column="42">implementation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="1240" pos:column="13">globalScope</name> <op:operator pos:line="1240" pos:column="25">=</op:operator> <call><name><name pos:line="1240" pos:column="27">globalScope</name><op:operator pos:line="1240" pos:column="38">.</op:operator><name pos:line="1240" pos:column="39">Merge</name></name><argument_list pos:line="1240" pos:column="44">(<argument><expr><name pos:line="1240" pos:column="45">header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1242" pos:column="13">var</name></type> <name pos:line="1242" pos:column="17">namedChildren</name> <init pos:line="1242" pos:column="31">= <expr><linq><from pos:line="1242" pos:column="33">from <expr><name pos:line="1242" pos:column="38">namedChild</name></expr> <in pos:line="1242" pos:column="49">in <expr><call><name><name pos:line="1242" pos:column="52">globalScope</name><op:operator pos:line="1242" pos:column="63">.</op:operator><name pos:line="1242" pos:column="64">ChildStatements</name><op:operator pos:line="1242" pos:column="79">.</op:operator><name><name pos:line="1242" pos:column="80">OfType</name><argument_list pos:line="1242" pos:column="86">&lt;<argument><name pos:line="1242" pos:column="87">INamedEntity</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1242" pos:column="100">()</argument_list></call></expr></in></from>
                                <orderby pos:line="1243" pos:column="33">orderby <expr><name><name pos:line="1243" pos:column="41">namedChild</name><op:operator pos:line="1243" pos:column="51">.</op:operator><name pos:line="1243" pos:column="52">Name</name></name></expr></orderby>
                                <select pos:line="1244" pos:column="33">select <expr><name pos:line="1244" pos:column="40">namedChild</name></expr></select></linq></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="1246" pos:column="13">Assert</name><op:operator pos:line="1246" pos:column="19">.</op:operator><name pos:line="1246" pos:column="20">AreEqual</name></name><argument_list pos:line="1246" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1246" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="1246" pos:column="32">namedChildren</name><op:operator pos:line="1246" pos:column="45">.</op:operator><name pos:line="1246" pos:column="46">Count</name></name><argument_list pos:line="1246" pos:column="51">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1248" pos:column="13">var</name></type> <name pos:line="1248" pos:column="17">typeA</name> <init pos:line="1248" pos:column="23">= <expr><call><name><name pos:line="1248" pos:column="25">namedChildren</name><op:operator pos:line="1248" pos:column="38">.</op:operator><name pos:line="1248" pos:column="39">First</name></name><argument_list pos:line="1248" pos:column="44">()</argument_list></call> <op:operator pos:line="1248" pos:column="47">as</op:operator> <name pos:line="1248" pos:column="50">TypeDefinition</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1249" pos:column="13">var</name></type> <name pos:line="1249" pos:column="17">mainMethod</name> <init pos:line="1249" pos:column="28">= <expr><call><name><name pos:line="1249" pos:column="30">namedChildren</name><op:operator pos:line="1249" pos:column="43">.</op:operator><name pos:line="1249" pos:column="44">Last</name></name><argument_list pos:line="1249" pos:column="48">()</argument_list></call> <op:operator pos:line="1249" pos:column="51">as</op:operator> <name pos:line="1249" pos:column="54">MethodDefinition</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="1251" pos:column="13">Assert</name><op:operator pos:line="1251" pos:column="19">.</op:operator><name pos:line="1251" pos:column="20">AreEqual</name></name><argument_list pos:line="1251" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1251" pos:column="29">"A"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1251" pos:column="34">typeA</name><op:operator pos:line="1251" pos:column="39">.</op:operator><name pos:line="1251" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1252" pos:column="13">Assert</name><op:operator pos:line="1252" pos:column="19">.</op:operator><name pos:line="1252" pos:column="20">AreEqual</name></name><argument_list pos:line="1252" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1252" pos:column="29">"main"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1252" pos:column="37">mainMethod</name><op:operator pos:line="1252" pos:column="47">.</op:operator><name pos:line="1252" pos:column="48">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1254" pos:column="13">var</name></type> <name pos:line="1254" pos:column="17">callInMain</name> <init pos:line="1254" pos:column="28">= <expr><call><name><name pos:line="1254" pos:column="30">mainMethod</name><op:operator pos:line="1254" pos:column="40">.</op:operator><name><name pos:line="1254" pos:column="41">FindExpressions</name><argument_list pos:line="1254" pos:column="56">&lt;<argument><name pos:line="1254" pos:column="57">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1254" pos:column="68">(<argument><expr><lit:literal type="boolean" pos:line="1254" pos:column="69">true</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1254" pos:column="74">.</op:operator><call><name pos:line="1254" pos:column="75">First</name><argument_list pos:line="1254" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1255" pos:column="13">var</name></type> <name pos:line="1255" pos:column="17">constructor</name> <init pos:line="1255" pos:column="29">= <expr><call><name><name pos:line="1255" pos:column="31">typeA</name><op:operator pos:line="1255" pos:column="36">.</op:operator><name pos:line="1255" pos:column="37">ChildStatements</name><op:operator pos:line="1255" pos:column="52">.</op:operator><name><name pos:line="1255" pos:column="53">OfType</name><argument_list pos:line="1255" pos:column="59">&lt;<argument><name pos:line="1255" pos:column="60">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1255" pos:column="77">()</argument_list></call><op:operator pos:line="1255" pos:column="79">.</op:operator><call><name pos:line="1255" pos:column="80">FirstOrDefault</name><argument_list pos:line="1255" pos:column="94">()</argument_list></call> <op:operator pos:line="1255" pos:column="97">as</op:operator> <name pos:line="1255" pos:column="100">MethodDefinition</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="1257" pos:column="13">Assert</name><op:operator pos:line="1257" pos:column="19">.</op:operator><name pos:line="1257" pos:column="20">IsTrue</name></name><argument_list pos:line="1257" pos:column="26">(<argument><expr><name><name pos:line="1257" pos:column="27">callInMain</name><op:operator pos:line="1257" pos:column="37">.</op:operator><name pos:line="1257" pos:column="38">IsConstructor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1258" pos:column="13">Assert</name><op:operator pos:line="1258" pos:column="19">.</op:operator><name pos:line="1258" pos:column="20">IsTrue</name></name><argument_list pos:line="1258" pos:column="26">(<argument><expr><name><name pos:line="1258" pos:column="27">constructor</name><op:operator pos:line="1258" pos:column="38">.</op:operator><name pos:line="1258" pos:column="39">IsConstructor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1259" pos:column="13">Assert</name><op:operator pos:line="1259" pos:column="19">.</op:operator><name pos:line="1259" pos:column="20">AreSame</name></name><argument_list pos:line="1259" pos:column="27">(<argument><expr><name pos:line="1259" pos:column="28">constructor</name></expr></argument>, <argument><expr><call><name><name pos:line="1259" pos:column="41">callInMain</name><op:operator pos:line="1259" pos:column="51">.</op:operator><name pos:line="1259" pos:column="52">FindMatches</name></name><argument_list pos:line="1259" pos:column="63">()</argument_list></call><op:operator pos:line="1259" pos:column="65">.</op:operator><call><name pos:line="1259" pos:column="66">First</name><argument_list pos:line="1259" pos:column="71">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1262" pos:column="9">[<expr><name pos:line="1262" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1263" pos:column="9">public</specifier> <name pos:line="1263" pos:column="16">void</name></type> <name pos:line="1263" pos:column="21">TestMethodCallMatchToParameter</name><parameter_list pos:line="1263" pos:column="51">()</parameter_list> <block pos:line="1263" pos:column="54">{
            <comment type="line" pos:line="1264" pos:column="13">//void CallFoo(B b) { b.Foo(); }</comment>
            <comment type="line" pos:line="1265" pos:column="13">//class B { void Foo() { } }</comment>
            <decl_stmt><decl><type><name pos:line="1266" pos:column="13">string</name></type> <name pos:line="1266" pos:column="20">xml</name> <init pos:line="1266" pos:column="24">= <expr><lit:literal type="string" pos:line="1266" pos:column="26">@"&lt;class pos:line=""1"" pos:column="&gt;class &lt;name pos:line=""1"" pos:column="&gt;B&lt;/name&gt; &lt;block pos:line=""1"" pos:column="&gt;{&lt;private type=""default"" pos:line=""1"" pos:column=&gt; &lt;function&gt;&lt;type&gt;&lt;name pos:line=""1"" pos:column=""&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""1"" pos:column=""&gt;Foo&lt;/name&gt;&lt;parameter_list pos:line=""1"" pos:column=""&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""1"" pos:column=""&gt;{ }&lt;/block&gt;&lt;/function&gt; &lt;/private&gt;}&lt;/block&gt;;&lt;/class&gt;
&lt;function&gt;&lt;type&gt;&lt;name pos:line=""2"" pos:column="&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""2"" pos:column="&gt;CallFoo&lt;/name&gt;&lt;parameter_list pos:line=""2"" pos:column=""&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""2"" pos:column=""&gt;B&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""2"" pos:column=""&gt;b&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt; &lt;block pos:line=""2"" pos:column=""&gt;{ &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;&lt;name pos:line=""2"" pos:column=""&gt;b&lt;/name&gt;&lt;op:operator pos:line=""2"" pos:column=""&gt;.&lt;/op:operator&gt;&lt;name pos:line=""2"" pos:column=""&gt;Foo&lt;/name&gt;&lt;/name&gt;&lt;argument_list pos:line=""2"" pos:column=""&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt; }&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1269" pos:column="13">var</name></type> <name pos:line="1269" pos:column="17">testUnit</name> <init pos:line="1269" pos:column="26">= <expr><call><name><name pos:line="1269" pos:column="28">fileSetup</name><op:operator pos:line="1269" pos:column="37">.</op:operator><name pos:line="1269" pos:column="38">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1269" pos:column="62">(<argument><expr><name pos:line="1269" pos:column="63">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1269" pos:column="68">"test.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1271" pos:column="13">var</name></type> <name pos:line="1271" pos:column="17">testScope</name> <init pos:line="1271" pos:column="27">= <expr><call><name><name pos:line="1271" pos:column="29">codeParser</name><op:operator pos:line="1271" pos:column="39">.</op:operator><name pos:line="1271" pos:column="40">ParseFileUnit</name></name><argument_list pos:line="1271" pos:column="53">(<argument><expr><name pos:line="1271" pos:column="54">testUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1273" pos:column="13">var</name></type> <name pos:line="1273" pos:column="17">methodCallFoo</name> <init pos:line="1273" pos:column="31">= <expr><call><name><name pos:line="1273" pos:column="33">testScope</name><op:operator pos:line="1273" pos:column="42">.</op:operator><name><name pos:line="1273" pos:column="43">GetNamedChildren</name><argument_list pos:line="1273" pos:column="59">&lt;<argument><name pos:line="1273" pos:column="60">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1273" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="1273" pos:column="78">"CallFoo"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1273" pos:column="88">.</op:operator><call><name pos:line="1273" pos:column="89">FirstOrDefault</name><argument_list pos:line="1273" pos:column="103">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1274" pos:column="13">var</name></type> <name pos:line="1274" pos:column="17">classB</name> <init pos:line="1274" pos:column="24">= <expr><call><name><name pos:line="1274" pos:column="26">testScope</name><op:operator pos:line="1274" pos:column="35">.</op:operator><name><name pos:line="1274" pos:column="36">GetNamedChildren</name><argument_list pos:line="1274" pos:column="52">&lt;<argument><name pos:line="1274" pos:column="53">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1274" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="1274" pos:column="69">"B"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1274" pos:column="73">.</op:operator><call><name pos:line="1274" pos:column="74">FirstOrDefault</name><argument_list pos:line="1274" pos:column="88">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="1276" pos:column="13">Assert</name><op:operator pos:line="1276" pos:column="19">.</op:operator><name pos:line="1276" pos:column="20">IsNotNull</name></name><argument_list pos:line="1276" pos:column="29">(<argument><expr><name pos:line="1276" pos:column="30">methodCallFoo</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1276" pos:column="45">"can't find CallFoo"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1277" pos:column="13">Assert</name><op:operator pos:line="1277" pos:column="19">.</op:operator><name pos:line="1277" pos:column="20">IsNotNull</name></name><argument_list pos:line="1277" pos:column="29">(<argument><expr><name pos:line="1277" pos:column="30">classB</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1277" pos:column="38">"can't find class B"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1279" pos:column="13">var</name></type> <name pos:line="1279" pos:column="17">bDotFoo</name> <init pos:line="1279" pos:column="25">= <expr><call><name><name pos:line="1279" pos:column="27">classB</name><op:operator pos:line="1279" pos:column="33">.</op:operator><name><name pos:line="1279" pos:column="34">GetNamedChildren</name><argument_list pos:line="1279" pos:column="50">&lt;<argument><name pos:line="1279" pos:column="51">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1279" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="1279" pos:column="69">"Foo"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1279" pos:column="75">.</op:operator><call><name pos:line="1279" pos:column="76">FirstOrDefault</name><argument_list pos:line="1279" pos:column="90">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1280" pos:column="13">Assert</name><op:operator pos:line="1280" pos:column="19">.</op:operator><name pos:line="1280" pos:column="20">IsNotNull</name></name><argument_list pos:line="1280" pos:column="29">(<argument><expr><name pos:line="1280" pos:column="30">bDotFoo</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1280" pos:column="39">"can't find B.Foo()"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1282" pos:column="13">var</name></type> <name pos:line="1282" pos:column="17">callToFoo</name> <init pos:line="1282" pos:column="27">= <expr><call><name><name pos:line="1282" pos:column="29">methodCallFoo</name><op:operator pos:line="1282" pos:column="42">.</op:operator><name><name pos:line="1282" pos:column="43">FindExpressions</name><argument_list pos:line="1282" pos:column="58">&lt;<argument><name pos:line="1282" pos:column="59">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1282" pos:column="70">(<argument><expr><lit:literal type="boolean" pos:line="1282" pos:column="71">true</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1282" pos:column="76">.</op:operator><call><name pos:line="1282" pos:column="77">FirstOrDefault</name><argument_list pos:line="1282" pos:column="91">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1283" pos:column="13">Assert</name><op:operator pos:line="1283" pos:column="19">.</op:operator><name pos:line="1283" pos:column="20">IsNotNull</name></name><argument_list pos:line="1283" pos:column="29">(<argument><expr><name pos:line="1283" pos:column="30">callToFoo</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1283" pos:column="41">"could not find a call to Foo()"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="1285" pos:column="13">Assert</name><op:operator pos:line="1285" pos:column="19">.</op:operator><name pos:line="1285" pos:column="20">AreEqual</name></name><argument_list pos:line="1285" pos:column="28">(<argument><expr><name pos:line="1285" pos:column="29">bDotFoo</name></expr></argument>, <argument><expr><call><name><name pos:line="1285" pos:column="38">callToFoo</name><op:operator pos:line="1285" pos:column="47">.</op:operator><name pos:line="1285" pos:column="48">FindMatches</name></name><argument_list pos:line="1285" pos:column="59">()</argument_list></call><op:operator pos:line="1285" pos:column="61">.</op:operator><call><name pos:line="1285" pos:column="62">FirstOrDefault</name><argument_list pos:line="1285" pos:column="76">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1288" pos:column="9">[<expr><name pos:line="1288" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1289" pos:column="9">public</specifier> <name pos:line="1289" pos:column="16">void</name></type> <name pos:line="1289" pos:column="21">TestMethodDefinition_ReturnType</name><parameter_list pos:line="1289" pos:column="52">()</parameter_list> <block pos:line="1289" pos:column="55">{
            <comment type="line" pos:line="1290" pos:column="13">//int Foo() { }</comment>
            <decl_stmt><decl><type><name pos:line="1291" pos:column="13">string</name></type> <name pos:line="1291" pos:column="20">xml</name> <init pos:line="1291" pos:column="24">= <expr><lit:literal type="string" pos:line="1291" pos:column="26">@"&lt;function&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1293" pos:column="13">var</name></type> <name pos:line="1293" pos:column="17">testUnit</name> <init pos:line="1293" pos:column="26">= <expr><call><name><name pos:line="1293" pos:column="28">fileSetup</name><op:operator pos:line="1293" pos:column="37">.</op:operator><name pos:line="1293" pos:column="38">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1293" pos:column="62">(<argument><expr><name pos:line="1293" pos:column="63">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1293" pos:column="68">"test.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1295" pos:column="13">var</name></type> <name pos:line="1295" pos:column="17">testScope</name> <init pos:line="1295" pos:column="27">= <expr><call><name><name pos:line="1295" pos:column="29">codeParser</name><op:operator pos:line="1295" pos:column="39">.</op:operator><name pos:line="1295" pos:column="40">ParseFileUnit</name></name><argument_list pos:line="1295" pos:column="53">(<argument><expr><name pos:line="1295" pos:column="54">testUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1297" pos:column="13">var</name></type> <name pos:line="1297" pos:column="17">method</name> <init pos:line="1297" pos:column="24">= <expr><call><name><name pos:line="1297" pos:column="26">testScope</name><op:operator pos:line="1297" pos:column="35">.</op:operator><name pos:line="1297" pos:column="36">ChildStatements</name><op:operator pos:line="1297" pos:column="51">.</op:operator><name pos:line="1297" pos:column="52">First</name></name><argument_list pos:line="1297" pos:column="57">()</argument_list></call> <op:operator pos:line="1297" pos:column="60">as</op:operator> <name pos:line="1297" pos:column="63">MethodDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1298" pos:column="13">Assert</name><op:operator pos:line="1298" pos:column="19">.</op:operator><name pos:line="1298" pos:column="20">IsNotNull</name></name><argument_list pos:line="1298" pos:column="29">(<argument><expr><name pos:line="1298" pos:column="30">method</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1298" pos:column="38">"could not find the test method"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1299" pos:column="13">Assert</name><op:operator pos:line="1299" pos:column="19">.</op:operator><name pos:line="1299" pos:column="20">AreEqual</name></name><argument_list pos:line="1299" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1299" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1299" pos:column="36">method</name><op:operator pos:line="1299" pos:column="42">.</op:operator><name pos:line="1299" pos:column="43">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1300" pos:column="13">Assert</name><op:operator pos:line="1300" pos:column="19">.</op:operator><name pos:line="1300" pos:column="20">AreEqual</name></name><argument_list pos:line="1300" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1300" pos:column="29">"int"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1300" pos:column="36">method</name><op:operator pos:line="1300" pos:column="42">.</op:operator><name pos:line="1300" pos:column="43">ReturnType</name><op:operator pos:line="1300" pos:column="53">.</op:operator><name pos:line="1300" pos:column="54">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1301" pos:column="13">Assert</name><op:operator pos:line="1301" pos:column="19">.</op:operator><name pos:line="1301" pos:column="20">AreEqual</name></name><argument_list pos:line="1301" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1301" pos:column="29">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1301" pos:column="32">method</name><op:operator pos:line="1301" pos:column="38">.</op:operator><name pos:line="1301" pos:column="39">Parameters</name><op:operator pos:line="1301" pos:column="49">.</op:operator><name pos:line="1301" pos:column="50">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1302" pos:column="13">Assert</name><op:operator pos:line="1302" pos:column="19">.</op:operator><name pos:line="1302" pos:column="20">IsFalse</name></name><argument_list pos:line="1302" pos:column="27">(<argument><expr><name><name pos:line="1302" pos:column="28">method</name><op:operator pos:line="1302" pos:column="34">.</op:operator><name pos:line="1302" pos:column="35">IsConstructor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1303" pos:column="13">Assert</name><op:operator pos:line="1303" pos:column="19">.</op:operator><name pos:line="1303" pos:column="20">IsFalse</name></name><argument_list pos:line="1303" pos:column="27">(<argument><expr><name><name pos:line="1303" pos:column="28">method</name><op:operator pos:line="1303" pos:column="34">.</op:operator><name pos:line="1303" pos:column="35">IsDestructor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1304" pos:column="13">Assert</name><op:operator pos:line="1304" pos:column="19">.</op:operator><name pos:line="1304" pos:column="20">IsFalse</name></name><argument_list pos:line="1304" pos:column="27">(<argument><expr><name><name pos:line="1304" pos:column="28">method</name><op:operator pos:line="1304" pos:column="34">.</op:operator><name pos:line="1304" pos:column="35">IsPartial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1307" pos:column="9">[<expr><name pos:line="1307" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1308" pos:column="9">public</specifier> <name pos:line="1308" pos:column="16">void</name></type> <name pos:line="1308" pos:column="21">TestMethodDefinition_ReturnTypeAndSpecifier</name><parameter_list pos:line="1308" pos:column="64">()</parameter_list> <block pos:line="1308" pos:column="67">{
            <comment type="line" pos:line="1309" pos:column="13">//static int Foo() { }</comment>
            <decl_stmt><decl><type><name pos:line="1310" pos:column="13">string</name></type> <name pos:line="1310" pos:column="20">xml</name> <init pos:line="1310" pos:column="24">= <expr><lit:literal type="string" pos:line="1310" pos:column="26">@"&lt;function&gt;&lt;type&gt;&lt;name&gt;static&lt;/name&gt; &lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1312" pos:column="13">var</name></type> <name pos:line="1312" pos:column="17">testUnit</name> <init pos:line="1312" pos:column="26">= <expr><call><name><name pos:line="1312" pos:column="28">fileSetup</name><op:operator pos:line="1312" pos:column="37">.</op:operator><name pos:line="1312" pos:column="38">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1312" pos:column="62">(<argument><expr><name pos:line="1312" pos:column="63">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1312" pos:column="68">"test.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1314" pos:column="13">var</name></type> <name pos:line="1314" pos:column="17">testScope</name> <init pos:line="1314" pos:column="27">= <expr><call><name><name pos:line="1314" pos:column="29">codeParser</name><op:operator pos:line="1314" pos:column="39">.</op:operator><name pos:line="1314" pos:column="40">ParseFileUnit</name></name><argument_list pos:line="1314" pos:column="53">(<argument><expr><name pos:line="1314" pos:column="54">testUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1316" pos:column="13">var</name></type> <name pos:line="1316" pos:column="17">method</name> <init pos:line="1316" pos:column="24">= <expr><call><name><name pos:line="1316" pos:column="26">testScope</name><op:operator pos:line="1316" pos:column="35">.</op:operator><name pos:line="1316" pos:column="36">ChildStatements</name><op:operator pos:line="1316" pos:column="51">.</op:operator><name pos:line="1316" pos:column="52">First</name></name><argument_list pos:line="1316" pos:column="57">()</argument_list></call> <op:operator pos:line="1316" pos:column="60">as</op:operator> <name pos:line="1316" pos:column="63">MethodDefinition</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1317" pos:column="13">Assert</name><op:operator pos:line="1317" pos:column="19">.</op:operator><name pos:line="1317" pos:column="20">IsNotNull</name></name><argument_list pos:line="1317" pos:column="29">(<argument><expr><name pos:line="1317" pos:column="30">method</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1317" pos:column="38">"could not find the test method"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1318" pos:column="13">Assert</name><op:operator pos:line="1318" pos:column="19">.</op:operator><name pos:line="1318" pos:column="20">AreEqual</name></name><argument_list pos:line="1318" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1318" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1318" pos:column="36">method</name><op:operator pos:line="1318" pos:column="42">.</op:operator><name pos:line="1318" pos:column="43">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="1320" pos:column="13">Assert</name><op:operator pos:line="1320" pos:column="19">.</op:operator><name pos:line="1320" pos:column="20">AreEqual</name></name><argument_list pos:line="1320" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1320" pos:column="29">"int"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1320" pos:column="36">method</name><op:operator pos:line="1320" pos:column="42">.</op:operator><name pos:line="1320" pos:column="43">ReturnType</name><op:operator pos:line="1320" pos:column="53">.</op:operator><name pos:line="1320" pos:column="54">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1323" pos:column="9">[<expr><name pos:line="1323" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1324" pos:column="9">public</specifier> <name pos:line="1324" pos:column="16">void</name></type> <name pos:line="1324" pos:column="21">TestMethodDefinition_Parameters</name><parameter_list pos:line="1324" pos:column="52">()</parameter_list> <block pos:line="1324" pos:column="55">{
            <comment type="line" pos:line="1325" pos:column="13">//int Foo(int bar, char baz) { }</comment>
            <decl_stmt><decl><type><name pos:line="1326" pos:column="13">var</name></type> <name pos:line="1326" pos:column="17">xml</name> <init pos:line="1326" pos:column="21">= <expr><lit:literal type="string" pos:line="1326" pos:column="23">@"&lt;function&gt;&lt;type&gt;&lt;name pos:line=""1"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""1"" pos:column="&gt;Foo&lt;/name&gt;&lt;parameter_list pos:line=""1"" pos:column="&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""1"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""1"" pos:column=""&gt;bar&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;, &lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""1"" pos:column=""&gt;char&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""1"" pos:column=""&gt;baz&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt; &lt;block pos:line=""1"" pos:column=""&gt;{ }&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1327" pos:column="13">var</name></type> <name pos:line="1327" pos:column="17">testUnit</name> <init pos:line="1327" pos:column="26">= <expr><call><name><name pos:line="1327" pos:column="28">fileSetup</name><op:operator pos:line="1327" pos:column="37">.</op:operator><name pos:line="1327" pos:column="38">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1327" pos:column="62">(<argument><expr><name pos:line="1327" pos:column="63">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1327" pos:column="68">"test.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1328" pos:column="13">var</name></type> <name pos:line="1328" pos:column="17">testScope</name> <init pos:line="1328" pos:column="27">= <expr><call><name><name pos:line="1328" pos:column="29">codeParser</name><op:operator pos:line="1328" pos:column="39">.</op:operator><name pos:line="1328" pos:column="40">ParseFileUnit</name></name><argument_list pos:line="1328" pos:column="53">(<argument><expr><name pos:line="1328" pos:column="54">testUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1330" pos:column="13">var</name></type> <name pos:line="1330" pos:column="17">foo</name> <init pos:line="1330" pos:column="21">= <expr><call><name><name pos:line="1330" pos:column="23">testScope</name><op:operator pos:line="1330" pos:column="32">.</op:operator><name><name pos:line="1330" pos:column="33">GetNamedChildren</name><argument_list pos:line="1330" pos:column="49">&lt;<argument><name pos:line="1330" pos:column="50">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1330" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="1330" pos:column="68">"Foo"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1330" pos:column="74">.</op:operator><call><name pos:line="1330" pos:column="75">First</name><argument_list pos:line="1330" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1331" pos:column="13">Assert</name><op:operator pos:line="1331" pos:column="19">.</op:operator><name pos:line="1331" pos:column="20">AreEqual</name></name><argument_list pos:line="1331" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1331" pos:column="29">"int"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1331" pos:column="36">foo</name><op:operator pos:line="1331" pos:column="39">.</op:operator><name pos:line="1331" pos:column="40">ReturnType</name><op:operator pos:line="1331" pos:column="50">.</op:operator><name pos:line="1331" pos:column="51">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1332" pos:column="13">Assert</name><op:operator pos:line="1332" pos:column="19">.</op:operator><name pos:line="1332" pos:column="20">AreEqual</name></name><argument_list pos:line="1332" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1332" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1332" pos:column="32">foo</name><op:operator pos:line="1332" pos:column="35">.</op:operator><name pos:line="1332" pos:column="36">Parameters</name><op:operator pos:line="1332" pos:column="46">.</op:operator><name pos:line="1332" pos:column="47">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1333" pos:column="13">Assert</name><op:operator pos:line="1333" pos:column="19">.</op:operator><name pos:line="1333" pos:column="20">AreEqual</name></name><argument_list pos:line="1333" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1333" pos:column="29">"int"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1333" pos:column="36">foo</name><op:operator pos:line="1333" pos:column="39">.</op:operator><name pos:line="1333" pos:column="40">Parameters</name><index pos:line="1333" pos:column="50">[<expr><lit:literal type="number" pos:line="1333" pos:column="51">0</lit:literal></expr>]</index></name><op:operator pos:line="1333" pos:column="53">.</op:operator><name><name pos:line="1333" pos:column="54">VariableType</name><op:operator pos:line="1333" pos:column="66">.</op:operator><name pos:line="1333" pos:column="67">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1334" pos:column="13">Assert</name><op:operator pos:line="1334" pos:column="19">.</op:operator><name pos:line="1334" pos:column="20">AreEqual</name></name><argument_list pos:line="1334" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1334" pos:column="29">"bar"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1334" pos:column="36">foo</name><op:operator pos:line="1334" pos:column="39">.</op:operator><name pos:line="1334" pos:column="40">Parameters</name><index pos:line="1334" pos:column="50">[<expr><lit:literal type="number" pos:line="1334" pos:column="51">0</lit:literal></expr>]</index></name><op:operator pos:line="1334" pos:column="53">.</op:operator><name pos:line="1334" pos:column="54">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1335" pos:column="13">Assert</name><op:operator pos:line="1335" pos:column="19">.</op:operator><name pos:line="1335" pos:column="20">AreEqual</name></name><argument_list pos:line="1335" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1335" pos:column="29">"char"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1335" pos:column="37">foo</name><op:operator pos:line="1335" pos:column="40">.</op:operator><name pos:line="1335" pos:column="41">Parameters</name><index pos:line="1335" pos:column="51">[<expr><lit:literal type="number" pos:line="1335" pos:column="52">1</lit:literal></expr>]</index></name><op:operator pos:line="1335" pos:column="54">.</op:operator><name><name pos:line="1335" pos:column="55">VariableType</name><op:operator pos:line="1335" pos:column="67">.</op:operator><name pos:line="1335" pos:column="68">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1336" pos:column="13">Assert</name><op:operator pos:line="1336" pos:column="19">.</op:operator><name pos:line="1336" pos:column="20">AreEqual</name></name><argument_list pos:line="1336" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1336" pos:column="29">"baz"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1336" pos:column="36">foo</name><op:operator pos:line="1336" pos:column="39">.</op:operator><name pos:line="1336" pos:column="40">Parameters</name><index pos:line="1336" pos:column="50">[<expr><lit:literal type="number" pos:line="1336" pos:column="51">1</lit:literal></expr>]</index></name><op:operator pos:line="1336" pos:column="53">.</op:operator><name pos:line="1336" pos:column="54">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1339" pos:column="9">[<expr><name pos:line="1339" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1340" pos:column="9">public</specifier> <name pos:line="1340" pos:column="16">void</name></type> <name pos:line="1340" pos:column="21">TestMethodDefinition_VoidParameter</name><parameter_list pos:line="1340" pos:column="55">()</parameter_list> <block pos:line="1340" pos:column="58">{
            <comment type="line" pos:line="1341" pos:column="13">//void Foo(void) { }</comment>
            <decl_stmt><decl><type><name pos:line="1342" pos:column="13">string</name></type> <name pos:line="1342" pos:column="20">xml</name> <init pos:line="1342" pos:column="24">= <expr><lit:literal type="string" pos:line="1342" pos:column="26">@"&lt;function&gt;&lt;type&gt;&lt;name&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;void&lt;/name&gt;&lt;/type&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1344" pos:column="13">var</name></type> <name pos:line="1344" pos:column="17">testUnit</name> <init pos:line="1344" pos:column="26">= <expr><call><name><name pos:line="1344" pos:column="28">fileSetup</name><op:operator pos:line="1344" pos:column="37">.</op:operator><name pos:line="1344" pos:column="38">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1344" pos:column="62">(<argument><expr><name pos:line="1344" pos:column="63">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1344" pos:column="68">"test.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1346" pos:column="13">var</name></type> <name pos:line="1346" pos:column="17">testScope</name> <init pos:line="1346" pos:column="27">= <expr><call><name><name pos:line="1346" pos:column="29">codeParser</name><op:operator pos:line="1346" pos:column="39">.</op:operator><name pos:line="1346" pos:column="40">ParseFileUnit</name></name><argument_list pos:line="1346" pos:column="53">(<argument><expr><name pos:line="1346" pos:column="54">testUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1348" pos:column="13">var</name></type> <name pos:line="1348" pos:column="17">method</name> <init pos:line="1348" pos:column="24">= <expr><call><name><name pos:line="1348" pos:column="26">testScope</name><op:operator pos:line="1348" pos:column="35">.</op:operator><name><name pos:line="1348" pos:column="36">GetDescendants</name><argument_list pos:line="1348" pos:column="50">&lt;<argument><name pos:line="1348" pos:column="51">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1348" pos:column="68">()</argument_list></call><op:operator pos:line="1348" pos:column="70">.</op:operator><call><name pos:line="1348" pos:column="71">FirstOrDefault</name><argument_list pos:line="1348" pos:column="85">(<argument><expr><lambda><name pos:line="1348" pos:column="86">m</name> <op:operator pos:line="1348" pos:column="88">=&gt;</op:operator> <name><name pos:line="1348" pos:column="91">m</name><op:operator pos:line="1348" pos:column="92">.</op:operator><name pos:line="1348" pos:column="93">Name</name></name> <op:operator pos:line="1348" pos:column="98">==</op:operator> <lit:literal type="string" pos:line="1348" pos:column="101">"Foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1349" pos:column="13">Assert</name><op:operator pos:line="1349" pos:column="19">.</op:operator><name pos:line="1349" pos:column="20">IsNotNull</name></name><argument_list pos:line="1349" pos:column="29">(<argument><expr><name pos:line="1349" pos:column="30">method</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1349" pos:column="38">"could not find the test method"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="1351" pos:column="13">Assert</name><op:operator pos:line="1351" pos:column="19">.</op:operator><name pos:line="1351" pos:column="20">AreEqual</name></name><argument_list pos:line="1351" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1351" pos:column="29">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1351" pos:column="32">method</name><op:operator pos:line="1351" pos:column="38">.</op:operator><name pos:line="1351" pos:column="39">Parameters</name><op:operator pos:line="1351" pos:column="49">.</op:operator><name pos:line="1351" pos:column="50">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1354" pos:column="9">[<expr><name pos:line="1354" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1355" pos:column="9">public</specifier> <name pos:line="1355" pos:column="16">void</name></type> <name pos:line="1355" pos:column="21">TestMethodDefinition_FunctionPointerParameter</name><parameter_list pos:line="1355" pos:column="66">()</parameter_list> <block pos:line="1355" pos:column="69">{
            <comment type="line" pos:line="1356" pos:column="13">//int Foo(char bar, int (*pInit)(Quux *theQuux)) {}</comment>
            <decl_stmt><decl><type><name pos:line="1357" pos:column="13">var</name></type> <name pos:line="1357" pos:column="17">xml</name> <init pos:line="1357" pos:column="21">= <expr><lit:literal type="string" pos:line="1357" pos:column="23">@"&lt;function&gt;&lt;type&gt;&lt;name pos:line=""1"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""1"" pos:column="&gt;Foo&lt;/name&gt;&lt;parameter_list pos:line=""1"" pos:column="&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""1"" pos:column="&gt;char&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""1"" pos:column=""&gt;bar&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;, &lt;param&gt;&lt;function_decl&gt;&lt;type&gt;&lt;name pos:line=""1"" pos:column=""&gt;int&lt;/name&gt;&lt;/type&gt; (&lt;type:modifier pos:line=""1"" pos:column=""&gt;*&lt;/type:modifier&gt;&lt;name pos:line=""1"" pos:column=""&gt;pInit&lt;/name&gt;)&lt;parameter_list pos:line=""1"" pos:column=""&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""1"" pos:column=""&gt;Quux&lt;/name&gt; &lt;type:modifier pos:line=""1"" pos:column=""&gt;*&lt;/type:modifier&gt;&lt;/type&gt;&lt;name pos:line=""1"" pos:column=""&gt;theQuux&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt;&lt;/function_decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt; &lt;block pos:line=""1"" pos:column=""&gt;{}&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1358" pos:column="13">var</name></type> <name pos:line="1358" pos:column="17">testUnit</name> <init pos:line="1358" pos:column="26">= <expr><call><name><name pos:line="1358" pos:column="28">fileSetup</name><op:operator pos:line="1358" pos:column="37">.</op:operator><name pos:line="1358" pos:column="38">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1358" pos:column="62">(<argument><expr><name pos:line="1358" pos:column="63">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1358" pos:column="68">"test.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1359" pos:column="13">var</name></type> <name pos:line="1359" pos:column="17">testScope</name> <init pos:line="1359" pos:column="27">= <expr><call><name><name pos:line="1359" pos:column="29">codeParser</name><op:operator pos:line="1359" pos:column="39">.</op:operator><name pos:line="1359" pos:column="40">ParseFileUnit</name></name><argument_list pos:line="1359" pos:column="53">(<argument><expr><name pos:line="1359" pos:column="54">testUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1361" pos:column="13">var</name></type> <name pos:line="1361" pos:column="17">foo</name> <init pos:line="1361" pos:column="21">= <expr><call><name><name pos:line="1361" pos:column="23">testScope</name><op:operator pos:line="1361" pos:column="32">.</op:operator><name><name pos:line="1361" pos:column="33">GetNamedChildren</name><argument_list pos:line="1361" pos:column="49">&lt;<argument><name pos:line="1361" pos:column="50">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1361" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="1361" pos:column="68">"Foo"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1361" pos:column="74">.</op:operator><call><name pos:line="1361" pos:column="75">First</name><argument_list pos:line="1361" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1362" pos:column="13">Assert</name><op:operator pos:line="1362" pos:column="19">.</op:operator><name pos:line="1362" pos:column="20">AreEqual</name></name><argument_list pos:line="1362" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1362" pos:column="29">"int"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1362" pos:column="36">foo</name><op:operator pos:line="1362" pos:column="39">.</op:operator><name pos:line="1362" pos:column="40">ReturnType</name><op:operator pos:line="1362" pos:column="50">.</op:operator><name pos:line="1362" pos:column="51">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1363" pos:column="13">Assert</name><op:operator pos:line="1363" pos:column="19">.</op:operator><name pos:line="1363" pos:column="20">AreEqual</name></name><argument_list pos:line="1363" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1363" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1363" pos:column="32">foo</name><op:operator pos:line="1363" pos:column="35">.</op:operator><name pos:line="1363" pos:column="36">Parameters</name><op:operator pos:line="1363" pos:column="46">.</op:operator><name pos:line="1363" pos:column="47">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1364" pos:column="13">Assert</name><op:operator pos:line="1364" pos:column="19">.</op:operator><name pos:line="1364" pos:column="20">AreEqual</name></name><argument_list pos:line="1364" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1364" pos:column="29">"char"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1364" pos:column="37">foo</name><op:operator pos:line="1364" pos:column="40">.</op:operator><name pos:line="1364" pos:column="41">Parameters</name><index pos:line="1364" pos:column="51">[<expr><lit:literal type="number" pos:line="1364" pos:column="52">0</lit:literal></expr>]</index></name><op:operator pos:line="1364" pos:column="54">.</op:operator><name><name pos:line="1364" pos:column="55">VariableType</name><op:operator pos:line="1364" pos:column="67">.</op:operator><name pos:line="1364" pos:column="68">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1365" pos:column="13">Assert</name><op:operator pos:line="1365" pos:column="19">.</op:operator><name pos:line="1365" pos:column="20">AreEqual</name></name><argument_list pos:line="1365" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1365" pos:column="29">"bar"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1365" pos:column="36">foo</name><op:operator pos:line="1365" pos:column="39">.</op:operator><name pos:line="1365" pos:column="40">Parameters</name><index pos:line="1365" pos:column="50">[<expr><lit:literal type="number" pos:line="1365" pos:column="51">0</lit:literal></expr>]</index></name><op:operator pos:line="1365" pos:column="53">.</op:operator><name pos:line="1365" pos:column="54">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1366" pos:column="13">Assert</name><op:operator pos:line="1366" pos:column="19">.</op:operator><name pos:line="1366" pos:column="20">AreEqual</name></name><argument_list pos:line="1366" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1366" pos:column="29">"int"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1366" pos:column="36">foo</name><op:operator pos:line="1366" pos:column="39">.</op:operator><name pos:line="1366" pos:column="40">Parameters</name><index pos:line="1366" pos:column="50">[<expr><lit:literal type="number" pos:line="1366" pos:column="51">1</lit:literal></expr>]</index></name><op:operator pos:line="1366" pos:column="53">.</op:operator><name><name pos:line="1366" pos:column="54">VariableType</name><op:operator pos:line="1366" pos:column="66">.</op:operator><name pos:line="1366" pos:column="67">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1367" pos:column="13">Assert</name><op:operator pos:line="1367" pos:column="19">.</op:operator><name pos:line="1367" pos:column="20">AreEqual</name></name><argument_list pos:line="1367" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1367" pos:column="29">"pInit"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1367" pos:column="38">foo</name><op:operator pos:line="1367" pos:column="41">.</op:operator><name pos:line="1367" pos:column="42">Parameters</name><index pos:line="1367" pos:column="52">[<expr><lit:literal type="number" pos:line="1367" pos:column="53">1</lit:literal></expr>]</index></name><op:operator pos:line="1367" pos:column="55">.</op:operator><name pos:line="1367" pos:column="56">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1370" pos:column="9">[<expr><name pos:line="1370" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1371" pos:column="9">public</specifier> <name pos:line="1371" pos:column="16">void</name></type> <name pos:line="1371" pos:column="21">TestMethodDefinition_VoidReturn</name><parameter_list pos:line="1371" pos:column="52">()</parameter_list> <block pos:line="1371" pos:column="55">{
            <comment type="line" pos:line="1372" pos:column="13">//void Foo() { }</comment>
            <decl_stmt><decl><type><name pos:line="1373" pos:column="13">string</name></type> <name pos:line="1373" pos:column="20">xml</name> <init pos:line="1373" pos:column="24">= <expr><lit:literal type="string" pos:line="1373" pos:column="26">@"&lt;function&gt;&lt;type&gt;&lt;name&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1375" pos:column="13">var</name></type> <name pos:line="1375" pos:column="17">testUnit</name> <init pos:line="1375" pos:column="26">= <expr><call><name><name pos:line="1375" pos:column="28">fileSetup</name><op:operator pos:line="1375" pos:column="37">.</op:operator><name pos:line="1375" pos:column="38">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1375" pos:column="62">(<argument><expr><name pos:line="1375" pos:column="63">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1375" pos:column="68">"test.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1377" pos:column="13">var</name></type> <name pos:line="1377" pos:column="17">testScope</name> <init pos:line="1377" pos:column="27">= <expr><call><name><name pos:line="1377" pos:column="29">codeParser</name><op:operator pos:line="1377" pos:column="39">.</op:operator><name pos:line="1377" pos:column="40">ParseFileUnit</name></name><argument_list pos:line="1377" pos:column="53">(<argument><expr><name pos:line="1377" pos:column="54">testUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1379" pos:column="13">var</name></type> <name pos:line="1379" pos:column="17">method</name> <init pos:line="1379" pos:column="24">= <expr><call><name><name pos:line="1379" pos:column="26">testScope</name><op:operator pos:line="1379" pos:column="35">.</op:operator><name><name pos:line="1379" pos:column="36">GetDescendants</name><argument_list pos:line="1379" pos:column="50">&lt;<argument><name pos:line="1379" pos:column="51">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1379" pos:column="68">()</argument_list></call><op:operator pos:line="1379" pos:column="70">.</op:operator><call><name pos:line="1379" pos:column="71">FirstOrDefault</name><argument_list pos:line="1379" pos:column="85">(<argument><expr><lambda><name pos:line="1379" pos:column="86">m</name> <op:operator pos:line="1379" pos:column="88">=&gt;</op:operator> <name><name pos:line="1379" pos:column="91">m</name><op:operator pos:line="1379" pos:column="92">.</op:operator><name pos:line="1379" pos:column="93">Name</name></name> <op:operator pos:line="1379" pos:column="98">==</op:operator> <lit:literal type="string" pos:line="1379" pos:column="101">"Foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1380" pos:column="13">Assert</name><op:operator pos:line="1380" pos:column="19">.</op:operator><name pos:line="1380" pos:column="20">IsNotNull</name></name><argument_list pos:line="1380" pos:column="29">(<argument><expr><name pos:line="1380" pos:column="30">method</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1380" pos:column="38">"could not find the test method"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1381" pos:column="13">Assert</name><op:operator pos:line="1381" pos:column="19">.</op:operator><name pos:line="1381" pos:column="20">AreEqual</name></name><argument_list pos:line="1381" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1381" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1381" pos:column="36">method</name><op:operator pos:line="1381" pos:column="42">.</op:operator><name pos:line="1381" pos:column="43">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1382" pos:column="13">Assert</name><op:operator pos:line="1382" pos:column="19">.</op:operator><name pos:line="1382" pos:column="20">IsNull</name></name><argument_list pos:line="1382" pos:column="26">(<argument><expr><name><name pos:line="1382" pos:column="27">method</name><op:operator pos:line="1382" pos:column="33">.</op:operator><name pos:line="1382" pos:column="34">ReturnType</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1382" pos:column="46">"return type should be null"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1385" pos:column="9">[<expr><name pos:line="1385" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1386" pos:column="9">public</specifier> <name pos:line="1386" pos:column="16">void</name></type> <name pos:line="1386" pos:column="21">TestMethodDefinition_DefaultArguments</name><parameter_list pos:line="1386" pos:column="58">()</parameter_list> <block pos:line="1386" pos:column="61">{
            <comment type="line" pos:line="1387" pos:column="13">//void foo(int a = 0);</comment>
            <comment type="line" pos:line="1388" pos:column="13">//</comment>
            <comment type="line" pos:line="1389" pos:column="13">//int main() {</comment>
            <comment type="line" pos:line="1390" pos:column="13">//    foo();</comment>
            <comment type="line" pos:line="1391" pos:column="13">//    foo(5);</comment>
            <comment type="line" pos:line="1392" pos:column="13">//    return 0;</comment>
            <comment type="line" pos:line="1393" pos:column="13">//}</comment>
            <comment type="line" pos:line="1394" pos:column="13">//</comment>
            <comment type="line" pos:line="1395" pos:column="13">//void foo(int a) { }</comment>
            <decl_stmt><decl><type><name pos:line="1396" pos:column="13">string</name></type> <name pos:line="1396" pos:column="20">xml</name> <init pos:line="1396" pos:column="24">= <expr><lit:literal type="string" pos:line="1396" pos:column="26">@"&lt;function_decl&gt;&lt;type&gt;&lt;name&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name&gt;foo&lt;/name&gt;&lt;parameter_list&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;a&lt;/name&gt; =&lt;init&gt; &lt;expr&gt;&lt;lit:literal type=""number&gt;0&lt;/lit:literal&gt;&lt;/expr&gt;&lt;/init&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt;;&lt;/function_decl&gt;

&lt;function&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;main&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{
    &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;foo&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
    &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;foo&lt;/name&gt;&lt;argument_list&gt;(&lt;argument&gt;&lt;expr&gt;&lt;lit:literal type=""number&gt;5&lt;/lit:literal&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
    &lt;return&gt;return &lt;expr&gt;&lt;lit:literal type=""number&gt;0&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt;
}&lt;/block&gt;&lt;/function&gt;

&lt;function&gt;&lt;type&gt;&lt;name&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name&gt;foo&lt;/name&gt;&lt;parameter_list&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;a&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1406" pos:column="13">var</name></type> <name pos:line="1406" pos:column="17">unit</name> <init pos:line="1406" pos:column="22">= <expr><call><name><name pos:line="1406" pos:column="24">fileSetup</name><op:operator pos:line="1406" pos:column="33">.</op:operator><name pos:line="1406" pos:column="34">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1406" pos:column="58">(<argument><expr><name pos:line="1406" pos:column="59">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1406" pos:column="64">"test.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1407" pos:column="13">var</name></type> <name pos:line="1407" pos:column="17">globalScope</name> <init pos:line="1407" pos:column="29">= <expr><call><name><name pos:line="1407" pos:column="31">codeParser</name><op:operator pos:line="1407" pos:column="41">.</op:operator><name pos:line="1407" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="1407" pos:column="55">(<argument><expr><name pos:line="1407" pos:column="56">unit</name></expr></argument>)</argument_list></call><op:operator pos:line="1407" pos:column="61">.</op:operator><call><name pos:line="1407" pos:column="62">Merge</name><argument_list pos:line="1407" pos:column="67">(<argument><expr><op:operator pos:line="1407" pos:column="68">new</op:operator> <call><name pos:line="1407" pos:column="72">NamespaceDefinition</name><argument_list pos:line="1407" pos:column="91">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1408" pos:column="13">Assert</name><op:operator pos:line="1408" pos:column="19">.</op:operator><name pos:line="1408" pos:column="20">AreEqual</name></name><argument_list pos:line="1408" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1408" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1408" pos:column="32">globalScope</name><op:operator pos:line="1408" pos:column="43">.</op:operator><name pos:line="1408" pos:column="44">ChildStatements</name><op:operator pos:line="1408" pos:column="59">.</op:operator><name pos:line="1408" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1410" pos:column="13">var</name></type> <name pos:line="1410" pos:column="17">fooMethod</name> <init pos:line="1410" pos:column="27">= <expr><call><name><name pos:line="1410" pos:column="29">globalScope</name><op:operator pos:line="1410" pos:column="40">.</op:operator><name><name pos:line="1410" pos:column="41">GetNamedChildren</name><argument_list pos:line="1410" pos:column="57">&lt;<argument><name pos:line="1410" pos:column="58">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1410" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="1410" pos:column="76">"foo"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1410" pos:column="82">.</op:operator><call><name pos:line="1410" pos:column="83">FirstOrDefault</name><argument_list pos:line="1410" pos:column="97">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1411" pos:column="13">var</name></type> <name pos:line="1411" pos:column="17">mainMethod</name> <init pos:line="1411" pos:column="28">= <expr><call><name><name pos:line="1411" pos:column="30">globalScope</name><op:operator pos:line="1411" pos:column="41">.</op:operator><name><name pos:line="1411" pos:column="42">GetNamedChildren</name><argument_list pos:line="1411" pos:column="58">&lt;<argument><name pos:line="1411" pos:column="59">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1411" pos:column="76">(<argument><expr><lit:literal type="string" pos:line="1411" pos:column="77">"main"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1411" pos:column="84">.</op:operator><call><name pos:line="1411" pos:column="85">FirstOrDefault</name><argument_list pos:line="1411" pos:column="99">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="1413" pos:column="13">Assert</name><op:operator pos:line="1413" pos:column="19">.</op:operator><name pos:line="1413" pos:column="20">IsNotNull</name></name><argument_list pos:line="1413" pos:column="29">(<argument><expr><name pos:line="1413" pos:column="30">fooMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1414" pos:column="13">Assert</name><op:operator pos:line="1414" pos:column="19">.</op:operator><name pos:line="1414" pos:column="20">IsNotNull</name></name><argument_list pos:line="1414" pos:column="29">(<argument><expr><name pos:line="1414" pos:column="30">mainMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="1416" pos:column="13">Assert</name><op:operator pos:line="1416" pos:column="19">.</op:operator><name pos:line="1416" pos:column="20">AreEqual</name></name><argument_list pos:line="1416" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1416" pos:column="29">3</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1416" pos:column="32">mainMethod</name><op:operator pos:line="1416" pos:column="42">.</op:operator><name pos:line="1416" pos:column="43">ChildStatements</name><op:operator pos:line="1416" pos:column="58">.</op:operator><name pos:line="1416" pos:column="59">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1417" pos:column="13">var</name></type> <name pos:line="1417" pos:column="17">defaultCall</name> <init pos:line="1417" pos:column="29">= <expr><name><name pos:line="1417" pos:column="31">mainMethod</name><op:operator pos:line="1417" pos:column="41">.</op:operator><name pos:line="1417" pos:column="42">ChildStatements</name><index pos:line="1417" pos:column="57">[<expr><lit:literal type="number" pos:line="1417" pos:column="58">0</lit:literal></expr>]</index></name><op:operator pos:line="1417" pos:column="60">.</op:operator><call><name><name pos:line="1417" pos:column="61">Content</name><op:operator pos:line="1417" pos:column="68">.</op:operator><name><name pos:line="1417" pos:column="69">GetDescendantsAndSelf</name><argument_list pos:line="1417" pos:column="90">&lt;<argument><name pos:line="1417" pos:column="91">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1417" pos:column="102">()</argument_list></call><op:operator pos:line="1417" pos:column="104">.</op:operator><call><name pos:line="1417" pos:column="105">FirstOrDefault</name><argument_list pos:line="1417" pos:column="119">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1418" pos:column="13">Assert</name><op:operator pos:line="1418" pos:column="19">.</op:operator><name pos:line="1418" pos:column="20">IsNotNull</name></name><argument_list pos:line="1418" pos:column="29">(<argument><expr><name pos:line="1418" pos:column="30">defaultCall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1419" pos:column="13">Assert</name><op:operator pos:line="1419" pos:column="19">.</op:operator><name pos:line="1419" pos:column="20">AreSame</name></name><argument_list pos:line="1419" pos:column="27">(<argument><expr><name pos:line="1419" pos:column="28">fooMethod</name></expr></argument>, <argument><expr><call><name><name pos:line="1419" pos:column="39">defaultCall</name><op:operator pos:line="1419" pos:column="50">.</op:operator><name pos:line="1419" pos:column="51">FindMatches</name></name><argument_list pos:line="1419" pos:column="62">()</argument_list></call><op:operator pos:line="1419" pos:column="64">.</op:operator><call><name pos:line="1419" pos:column="65">FirstOrDefault</name><argument_list pos:line="1419" pos:column="79">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1421" pos:column="13">var</name></type> <name pos:line="1421" pos:column="17">fiveCall</name> <init pos:line="1421" pos:column="26">= <expr><name><name pos:line="1421" pos:column="28">mainMethod</name><op:operator pos:line="1421" pos:column="38">.</op:operator><name pos:line="1421" pos:column="39">ChildStatements</name><index pos:line="1421" pos:column="54">[<expr><lit:literal type="number" pos:line="1421" pos:column="55">1</lit:literal></expr>]</index></name><op:operator pos:line="1421" pos:column="57">.</op:operator><call><name><name pos:line="1421" pos:column="58">Content</name><op:operator pos:line="1421" pos:column="65">.</op:operator><name><name pos:line="1421" pos:column="66">GetDescendantsAndSelf</name><argument_list pos:line="1421" pos:column="87">&lt;<argument><name pos:line="1421" pos:column="88">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1421" pos:column="99">()</argument_list></call><op:operator pos:line="1421" pos:column="101">.</op:operator><call><name pos:line="1421" pos:column="102">FirstOrDefault</name><argument_list pos:line="1421" pos:column="116">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1422" pos:column="13">Assert</name><op:operator pos:line="1422" pos:column="19">.</op:operator><name pos:line="1422" pos:column="20">IsNotNull</name></name><argument_list pos:line="1422" pos:column="29">(<argument><expr><name pos:line="1422" pos:column="30">fiveCall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1423" pos:column="13">Assert</name><op:operator pos:line="1423" pos:column="19">.</op:operator><name pos:line="1423" pos:column="20">AreSame</name></name><argument_list pos:line="1423" pos:column="27">(<argument><expr><name pos:line="1423" pos:column="28">fooMethod</name></expr></argument>, <argument><expr><call><name><name pos:line="1423" pos:column="39">fiveCall</name><op:operator pos:line="1423" pos:column="47">.</op:operator><name pos:line="1423" pos:column="48">FindMatches</name></name><argument_list pos:line="1423" pos:column="59">()</argument_list></call><op:operator pos:line="1423" pos:column="61">.</op:operator><call><name pos:line="1423" pos:column="62">FirstOrDefault</name><argument_list pos:line="1423" pos:column="76">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1426" pos:column="9">[<expr><name pos:line="1426" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1427" pos:column="9">public</specifier> <name pos:line="1427" pos:column="16">void</name></type> <name pos:line="1427" pos:column="21">TestTwoVariableDeclarations</name><parameter_list pos:line="1427" pos:column="48">()</parameter_list> <block pos:line="1427" pos:column="51">{
            <comment type="line" pos:line="1428" pos:column="13">//int a,b;</comment>
            <decl_stmt><decl><type><name pos:line="1429" pos:column="13">string</name></type> <name pos:line="1429" pos:column="20">testXml</name> <init pos:line="1429" pos:column="28">= <expr><lit:literal type="string" pos:line="1429" pos:column="30">@"&lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;a&lt;/name&gt;&lt;/decl&gt;&lt;op:operator&gt;,&lt;/op:operator&gt;&lt;decl&gt;&lt;type ref=""prev"&gt;&lt;name&gt;b&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1430" pos:column="13">var</name></type> <name pos:line="1430" pos:column="17">testUnit</name> <init pos:line="1430" pos:column="26">= <expr><call><name><name pos:line="1430" pos:column="28">fileSetup</name><op:operator pos:line="1430" pos:column="37">.</op:operator><name pos:line="1430" pos:column="38">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1430" pos:column="62">(<argument><expr><name pos:line="1430" pos:column="63">testXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1430" pos:column="72">"test.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1432" pos:column="13">var</name></type> <name pos:line="1432" pos:column="17">globalScope</name> <init pos:line="1432" pos:column="29">= <expr><call><name><name pos:line="1432" pos:column="31">codeParser</name><op:operator pos:line="1432" pos:column="41">.</op:operator><name pos:line="1432" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="1432" pos:column="55">(<argument><expr><name pos:line="1432" pos:column="56">testUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1434" pos:column="13">var</name></type> <name pos:line="1434" pos:column="17">declStmt</name> <init pos:line="1434" pos:column="26">= <expr><call><name><name pos:line="1434" pos:column="28">globalScope</name><op:operator pos:line="1434" pos:column="39">.</op:operator><name pos:line="1434" pos:column="40">ChildStatements</name><op:operator pos:line="1434" pos:column="55">.</op:operator><name pos:line="1434" pos:column="56">First</name></name><argument_list pos:line="1434" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1435" pos:column="13">var</name></type> <name pos:line="1435" pos:column="17">varDecls</name> <init pos:line="1435" pos:column="26">= <expr><call><name><name pos:line="1435" pos:column="28">declStmt</name><op:operator pos:line="1435" pos:column="36">.</op:operator><name pos:line="1435" pos:column="37">Content</name><op:operator pos:line="1435" pos:column="44">.</op:operator><name pos:line="1435" pos:column="45">Components</name><op:operator pos:line="1435" pos:column="55">.</op:operator><name><name pos:line="1435" pos:column="56">OfType</name><argument_list pos:line="1435" pos:column="62">&lt;<argument><name pos:line="1435" pos:column="63">VariableDeclaration</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1435" pos:column="83">()</argument_list></call><op:operator pos:line="1435" pos:column="85">.</op:operator><call><name pos:line="1435" pos:column="86">ToList</name><argument_list pos:line="1435" pos:column="92">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="1437" pos:column="13">Assert</name><op:operator pos:line="1437" pos:column="19">.</op:operator><name pos:line="1437" pos:column="20">AreEqual</name></name><argument_list pos:line="1437" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1437" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1437" pos:column="32">varDecls</name><op:operator pos:line="1437" pos:column="40">.</op:operator><name pos:line="1437" pos:column="41">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1438" pos:column="13">Assert</name><op:operator pos:line="1438" pos:column="19">.</op:operator><name pos:line="1438" pos:column="20">AreEqual</name></name><argument_list pos:line="1438" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1438" pos:column="29">"a"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1438" pos:column="34">varDecls</name><index pos:line="1438" pos:column="42">[<expr><lit:literal type="number" pos:line="1438" pos:column="43">0</lit:literal></expr>]</index></name><op:operator pos:line="1438" pos:column="45">.</op:operator><name pos:line="1438" pos:column="46">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1439" pos:column="13">Assert</name><op:operator pos:line="1439" pos:column="19">.</op:operator><name pos:line="1439" pos:column="20">AreEqual</name></name><argument_list pos:line="1439" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1439" pos:column="29">"int"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1439" pos:column="36">varDecls</name><index pos:line="1439" pos:column="44">[<expr><lit:literal type="number" pos:line="1439" pos:column="45">0</lit:literal></expr>]</index></name><op:operator pos:line="1439" pos:column="47">.</op:operator><name><name pos:line="1439" pos:column="48">VariableType</name><op:operator pos:line="1439" pos:column="60">.</op:operator><name pos:line="1439" pos:column="61">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1440" pos:column="13">Assert</name><op:operator pos:line="1440" pos:column="19">.</op:operator><name pos:line="1440" pos:column="20">AreEqual</name></name><argument_list pos:line="1440" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1440" pos:column="29">"b"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1440" pos:column="34">varDecls</name><index pos:line="1440" pos:column="42">[<expr><lit:literal type="number" pos:line="1440" pos:column="43">1</lit:literal></expr>]</index></name><op:operator pos:line="1440" pos:column="45">.</op:operator><name pos:line="1440" pos:column="46">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1441" pos:column="13">Assert</name><op:operator pos:line="1441" pos:column="19">.</op:operator><name pos:line="1441" pos:column="20">AreSame</name></name><argument_list pos:line="1441" pos:column="27">(<argument><expr><name><name pos:line="1441" pos:column="28">varDecls</name><index pos:line="1441" pos:column="36">[<expr><lit:literal type="number" pos:line="1441" pos:column="37">0</lit:literal></expr>]</index></name><op:operator pos:line="1441" pos:column="39">.</op:operator><name pos:line="1441" pos:column="40">VariableType</name></expr></argument>, <argument><expr><name><name pos:line="1441" pos:column="54">varDecls</name><index pos:line="1441" pos:column="62">[<expr><lit:literal type="number" pos:line="1441" pos:column="63">1</lit:literal></expr>]</index></name><op:operator pos:line="1441" pos:column="65">.</op:operator><name pos:line="1441" pos:column="66">VariableType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1444" pos:column="9">[<expr><name pos:line="1444" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1445" pos:column="9">public</specifier> <name pos:line="1445" pos:column="16">void</name></type> <name pos:line="1445" pos:column="21">TestThreeVariableDeclarations</name><parameter_list pos:line="1445" pos:column="50">()</parameter_list> <block pos:line="1445" pos:column="53">{
            <comment type="line" pos:line="1446" pos:column="13">//int a,b,c;</comment>
            <decl_stmt><decl><type><name pos:line="1447" pos:column="13">string</name></type> <name pos:line="1447" pos:column="20">testXml</name> <init pos:line="1447" pos:column="28">= <expr><lit:literal type="string" pos:line="1447" pos:column="30">@"&lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;a&lt;/name&gt;&lt;/decl&gt;&lt;op:operator&gt;,&lt;/op:operator&gt;&lt;decl&gt;&lt;type ref=""prev"&gt;&lt;name&gt;b&lt;/name&gt;&lt;/decl&gt;&lt;op:operator&gt;,&lt;/op:operator&gt;&lt;decl&gt;&lt;type ref=""prev"&gt;&lt;name&gt;c&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1448" pos:column="13">var</name></type> <name pos:line="1448" pos:column="17">testUnit</name> <init pos:line="1448" pos:column="26">= <expr><call><name><name pos:line="1448" pos:column="28">fileSetup</name><op:operator pos:line="1448" pos:column="37">.</op:operator><name pos:line="1448" pos:column="38">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1448" pos:column="62">(<argument><expr><name pos:line="1448" pos:column="63">testXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1448" pos:column="72">"test.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1450" pos:column="13">var</name></type> <name pos:line="1450" pos:column="17">globalScope</name> <init pos:line="1450" pos:column="29">= <expr><call><name><name pos:line="1450" pos:column="31">codeParser</name><op:operator pos:line="1450" pos:column="41">.</op:operator><name pos:line="1450" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="1450" pos:column="55">(<argument><expr><name pos:line="1450" pos:column="56">testUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1452" pos:column="13">var</name></type> <name pos:line="1452" pos:column="17">declStmt</name> <init pos:line="1452" pos:column="26">= <expr><call><name><name pos:line="1452" pos:column="28">globalScope</name><op:operator pos:line="1452" pos:column="39">.</op:operator><name pos:line="1452" pos:column="40">ChildStatements</name><op:operator pos:line="1452" pos:column="55">.</op:operator><name pos:line="1452" pos:column="56">First</name></name><argument_list pos:line="1452" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1453" pos:column="13">var</name></type> <name pos:line="1453" pos:column="17">varDecls</name> <init pos:line="1453" pos:column="26">= <expr><call><name><name pos:line="1453" pos:column="28">declStmt</name><op:operator pos:line="1453" pos:column="36">.</op:operator><name pos:line="1453" pos:column="37">Content</name><op:operator pos:line="1453" pos:column="44">.</op:operator><name pos:line="1453" pos:column="45">Components</name><op:operator pos:line="1453" pos:column="55">.</op:operator><name><name pos:line="1453" pos:column="56">OfType</name><argument_list pos:line="1453" pos:column="62">&lt;<argument><name pos:line="1453" pos:column="63">VariableDeclaration</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1453" pos:column="83">()</argument_list></call><op:operator pos:line="1453" pos:column="85">.</op:operator><call><name pos:line="1453" pos:column="86">ToList</name><argument_list pos:line="1453" pos:column="92">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="1455" pos:column="13">Assert</name><op:operator pos:line="1455" pos:column="19">.</op:operator><name pos:line="1455" pos:column="20">AreEqual</name></name><argument_list pos:line="1455" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1455" pos:column="29">3</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1455" pos:column="32">varDecls</name><op:operator pos:line="1455" pos:column="40">.</op:operator><name pos:line="1455" pos:column="41">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1456" pos:column="13">Assert</name><op:operator pos:line="1456" pos:column="19">.</op:operator><name pos:line="1456" pos:column="20">AreEqual</name></name><argument_list pos:line="1456" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1456" pos:column="29">"a"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1456" pos:column="34">varDecls</name><index pos:line="1456" pos:column="42">[<expr><lit:literal type="number" pos:line="1456" pos:column="43">0</lit:literal></expr>]</index></name><op:operator pos:line="1456" pos:column="45">.</op:operator><name pos:line="1456" pos:column="46">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1457" pos:column="13">Assert</name><op:operator pos:line="1457" pos:column="19">.</op:operator><name pos:line="1457" pos:column="20">AreEqual</name></name><argument_list pos:line="1457" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1457" pos:column="29">"int"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1457" pos:column="36">varDecls</name><index pos:line="1457" pos:column="44">[<expr><lit:literal type="number" pos:line="1457" pos:column="45">0</lit:literal></expr>]</index></name><op:operator pos:line="1457" pos:column="47">.</op:operator><name><name pos:line="1457" pos:column="48">VariableType</name><op:operator pos:line="1457" pos:column="60">.</op:operator><name pos:line="1457" pos:column="61">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1458" pos:column="13">Assert</name><op:operator pos:line="1458" pos:column="19">.</op:operator><name pos:line="1458" pos:column="20">AreEqual</name></name><argument_list pos:line="1458" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1458" pos:column="29">"b"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1458" pos:column="34">varDecls</name><index pos:line="1458" pos:column="42">[<expr><lit:literal type="number" pos:line="1458" pos:column="43">1</lit:literal></expr>]</index></name><op:operator pos:line="1458" pos:column="45">.</op:operator><name pos:line="1458" pos:column="46">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1459" pos:column="13">Assert</name><op:operator pos:line="1459" pos:column="19">.</op:operator><name pos:line="1459" pos:column="20">AreSame</name></name><argument_list pos:line="1459" pos:column="27">(<argument><expr><name><name pos:line="1459" pos:column="28">varDecls</name><index pos:line="1459" pos:column="36">[<expr><lit:literal type="number" pos:line="1459" pos:column="37">0</lit:literal></expr>]</index></name><op:operator pos:line="1459" pos:column="39">.</op:operator><name pos:line="1459" pos:column="40">VariableType</name></expr></argument>, <argument><expr><name><name pos:line="1459" pos:column="54">varDecls</name><index pos:line="1459" pos:column="62">[<expr><lit:literal type="number" pos:line="1459" pos:column="63">1</lit:literal></expr>]</index></name><op:operator pos:line="1459" pos:column="65">.</op:operator><name pos:line="1459" pos:column="66">VariableType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1460" pos:column="13">Assert</name><op:operator pos:line="1460" pos:column="19">.</op:operator><name pos:line="1460" pos:column="20">AreEqual</name></name><argument_list pos:line="1460" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1460" pos:column="29">"c"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1460" pos:column="34">varDecls</name><index pos:line="1460" pos:column="42">[<expr><lit:literal type="number" pos:line="1460" pos:column="43">2</lit:literal></expr>]</index></name><op:operator pos:line="1460" pos:column="45">.</op:operator><name pos:line="1460" pos:column="46">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1461" pos:column="13">Assert</name><op:operator pos:line="1461" pos:column="19">.</op:operator><name pos:line="1461" pos:column="20">AreSame</name></name><argument_list pos:line="1461" pos:column="27">(<argument><expr><name><name pos:line="1461" pos:column="28">varDecls</name><index pos:line="1461" pos:column="36">[<expr><lit:literal type="number" pos:line="1461" pos:column="37">0</lit:literal></expr>]</index></name><op:operator pos:line="1461" pos:column="39">.</op:operator><name pos:line="1461" pos:column="40">VariableType</name></expr></argument>, <argument><expr><name><name pos:line="1461" pos:column="54">varDecls</name><index pos:line="1461" pos:column="62">[<expr><lit:literal type="number" pos:line="1461" pos:column="63">2</lit:literal></expr>]</index></name><op:operator pos:line="1461" pos:column="65">.</op:operator><name pos:line="1461" pos:column="66">VariableType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1464" pos:column="9">[<expr><name pos:line="1464" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1465" pos:column="9">public</specifier> <name pos:line="1465" pos:column="16">void</name></type> <name pos:line="1465" pos:column="21">TestVariablesWithSpecifiers</name><parameter_list pos:line="1465" pos:column="48">()</parameter_list> <block pos:line="1465" pos:column="51">{
            <comment type="line" pos:line="1466" pos:column="13">//const int A;</comment>
            <comment type="line" pos:line="1467" pos:column="13">//static int B;</comment>
            <comment type="line" pos:line="1468" pos:column="13">//static const Foo C;</comment>
            <comment type="line" pos:line="1469" pos:column="13">//extern Foo D;</comment>
            <decl_stmt><decl><type><name pos:line="1470" pos:column="13">string</name></type> <name pos:line="1470" pos:column="20">testXml</name> <init pos:line="1470" pos:column="28">= <expr><lit:literal type="string" pos:line="1470" pos:column="30">@"&lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;specifier&gt;const&lt;/specifier&gt; &lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;A&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
&lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;specifier&gt;static&lt;/specifier&gt; &lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;B&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
&lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;specifier&gt;static&lt;/specifier&gt; &lt;specifier&gt;const&lt;/specifier&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;/type&gt; &lt;name&gt;C&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
&lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;specifier&gt;extern&lt;/specifier&gt; &lt;name&gt;Foo&lt;/name&gt;&lt;/type&gt; &lt;name&gt;D&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1474" pos:column="13">var</name></type> <name pos:line="1474" pos:column="17">testUnit</name> <init pos:line="1474" pos:column="26">= <expr><call><name><name pos:line="1474" pos:column="28">fileSetup</name><op:operator pos:line="1474" pos:column="37">.</op:operator><name pos:line="1474" pos:column="38">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1474" pos:column="62">(<argument><expr><name pos:line="1474" pos:column="63">testXml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1474" pos:column="72">"test.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1476" pos:column="13">var</name></type> <name pos:line="1476" pos:column="17">globalScope</name> <init pos:line="1476" pos:column="29">= <expr><call><name><name pos:line="1476" pos:column="31">codeParser</name><op:operator pos:line="1476" pos:column="41">.</op:operator><name pos:line="1476" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="1476" pos:column="55">(<argument><expr><name pos:line="1476" pos:column="56">testUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1477" pos:column="13">Assert</name><op:operator pos:line="1477" pos:column="19">.</op:operator><name pos:line="1477" pos:column="20">AreEqual</name></name><argument_list pos:line="1477" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1477" pos:column="29">4</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1477" pos:column="32">globalScope</name><op:operator pos:line="1477" pos:column="43">.</op:operator><name pos:line="1477" pos:column="44">ChildStatements</name><op:operator pos:line="1477" pos:column="59">.</op:operator><name pos:line="1477" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1479" pos:column="13">var</name></type> <name pos:line="1479" pos:column="17">declA</name> <init pos:line="1479" pos:column="23">= <expr><name><name pos:line="1479" pos:column="25">globalScope</name><op:operator pos:line="1479" pos:column="36">.</op:operator><name pos:line="1479" pos:column="37">ChildStatements</name><index pos:line="1479" pos:column="52">[<expr><lit:literal type="number" pos:line="1479" pos:column="53">0</lit:literal></expr>]</index></name><op:operator pos:line="1479" pos:column="55">.</op:operator><name pos:line="1479" pos:column="56">Content</name> <op:operator pos:line="1479" pos:column="64">as</op:operator> <name pos:line="1479" pos:column="67">VariableDeclaration</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1480" pos:column="13">Assert</name><op:operator pos:line="1480" pos:column="19">.</op:operator><name pos:line="1480" pos:column="20">IsNotNull</name></name><argument_list pos:line="1480" pos:column="29">(<argument><expr><name pos:line="1480" pos:column="30">declA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1481" pos:column="13">Assert</name><op:operator pos:line="1481" pos:column="19">.</op:operator><name pos:line="1481" pos:column="20">AreEqual</name></name><argument_list pos:line="1481" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1481" pos:column="29">"A"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1481" pos:column="34">declA</name><op:operator pos:line="1481" pos:column="39">.</op:operator><name pos:line="1481" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1482" pos:column="13">Assert</name><op:operator pos:line="1482" pos:column="19">.</op:operator><name pos:line="1482" pos:column="20">AreEqual</name></name><argument_list pos:line="1482" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1482" pos:column="29">"int"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1482" pos:column="36">declA</name><op:operator pos:line="1482" pos:column="41">.</op:operator><name pos:line="1482" pos:column="42">VariableType</name><op:operator pos:line="1482" pos:column="54">.</op:operator><name pos:line="1482" pos:column="55">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1483" pos:column="13">Assert</name><op:operator pos:line="1483" pos:column="19">.</op:operator><name pos:line="1483" pos:column="20">AreEqual</name></name><argument_list pos:line="1483" pos:column="28">(<argument><expr><name><name pos:line="1483" pos:column="29">AccessModifier</name><op:operator pos:line="1483" pos:column="43">.</op:operator><name pos:line="1483" pos:column="44">None</name></name></expr></argument>, <argument><expr><name><name pos:line="1483" pos:column="50">declA</name><op:operator pos:line="1483" pos:column="55">.</op:operator><name pos:line="1483" pos:column="56">Accessibility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1485" pos:column="13">var</name></type> <name pos:line="1485" pos:column="17">declB</name> <init pos:line="1485" pos:column="23">= <expr><name><name pos:line="1485" pos:column="25">globalScope</name><op:operator pos:line="1485" pos:column="36">.</op:operator><name pos:line="1485" pos:column="37">ChildStatements</name><index pos:line="1485" pos:column="52">[<expr><lit:literal type="number" pos:line="1485" pos:column="53">1</lit:literal></expr>]</index></name><op:operator pos:line="1485" pos:column="55">.</op:operator><name pos:line="1485" pos:column="56">Content</name> <op:operator pos:line="1485" pos:column="64">as</op:operator> <name pos:line="1485" pos:column="67">VariableDeclaration</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1486" pos:column="13">Assert</name><op:operator pos:line="1486" pos:column="19">.</op:operator><name pos:line="1486" pos:column="20">IsNotNull</name></name><argument_list pos:line="1486" pos:column="29">(<argument><expr><name pos:line="1486" pos:column="30">declB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1487" pos:column="13">Assert</name><op:operator pos:line="1487" pos:column="19">.</op:operator><name pos:line="1487" pos:column="20">AreEqual</name></name><argument_list pos:line="1487" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1487" pos:column="29">"B"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1487" pos:column="34">declB</name><op:operator pos:line="1487" pos:column="39">.</op:operator><name pos:line="1487" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1488" pos:column="13">Assert</name><op:operator pos:line="1488" pos:column="19">.</op:operator><name pos:line="1488" pos:column="20">AreEqual</name></name><argument_list pos:line="1488" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1488" pos:column="29">"int"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1488" pos:column="36">declB</name><op:operator pos:line="1488" pos:column="41">.</op:operator><name pos:line="1488" pos:column="42">VariableType</name><op:operator pos:line="1488" pos:column="54">.</op:operator><name pos:line="1488" pos:column="55">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1489" pos:column="13">Assert</name><op:operator pos:line="1489" pos:column="19">.</op:operator><name pos:line="1489" pos:column="20">AreEqual</name></name><argument_list pos:line="1489" pos:column="28">(<argument><expr><name><name pos:line="1489" pos:column="29">AccessModifier</name><op:operator pos:line="1489" pos:column="43">.</op:operator><name pos:line="1489" pos:column="44">None</name></name></expr></argument>, <argument><expr><name><name pos:line="1489" pos:column="50">declB</name><op:operator pos:line="1489" pos:column="55">.</op:operator><name pos:line="1489" pos:column="56">Accessibility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1491" pos:column="13">var</name></type> <name pos:line="1491" pos:column="17">declC</name> <init pos:line="1491" pos:column="23">= <expr><name><name pos:line="1491" pos:column="25">globalScope</name><op:operator pos:line="1491" pos:column="36">.</op:operator><name pos:line="1491" pos:column="37">ChildStatements</name><index pos:line="1491" pos:column="52">[<expr><lit:literal type="number" pos:line="1491" pos:column="53">2</lit:literal></expr>]</index></name><op:operator pos:line="1491" pos:column="55">.</op:operator><name pos:line="1491" pos:column="56">Content</name> <op:operator pos:line="1491" pos:column="64">as</op:operator> <name pos:line="1491" pos:column="67">VariableDeclaration</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1492" pos:column="13">Assert</name><op:operator pos:line="1492" pos:column="19">.</op:operator><name pos:line="1492" pos:column="20">IsNotNull</name></name><argument_list pos:line="1492" pos:column="29">(<argument><expr><name pos:line="1492" pos:column="30">declC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1493" pos:column="13">Assert</name><op:operator pos:line="1493" pos:column="19">.</op:operator><name pos:line="1493" pos:column="20">AreEqual</name></name><argument_list pos:line="1493" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1493" pos:column="29">"C"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1493" pos:column="34">declC</name><op:operator pos:line="1493" pos:column="39">.</op:operator><name pos:line="1493" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1494" pos:column="13">Assert</name><op:operator pos:line="1494" pos:column="19">.</op:operator><name pos:line="1494" pos:column="20">AreEqual</name></name><argument_list pos:line="1494" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1494" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1494" pos:column="36">declC</name><op:operator pos:line="1494" pos:column="41">.</op:operator><name pos:line="1494" pos:column="42">VariableType</name><op:operator pos:line="1494" pos:column="54">.</op:operator><name pos:line="1494" pos:column="55">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1495" pos:column="13">Assert</name><op:operator pos:line="1495" pos:column="19">.</op:operator><name pos:line="1495" pos:column="20">AreEqual</name></name><argument_list pos:line="1495" pos:column="28">(<argument><expr><name><name pos:line="1495" pos:column="29">AccessModifier</name><op:operator pos:line="1495" pos:column="43">.</op:operator><name pos:line="1495" pos:column="44">None</name></name></expr></argument>, <argument><expr><name><name pos:line="1495" pos:column="50">declC</name><op:operator pos:line="1495" pos:column="55">.</op:operator><name pos:line="1495" pos:column="56">Accessibility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1497" pos:column="13">var</name></type> <name pos:line="1497" pos:column="17">declD</name> <init pos:line="1497" pos:column="23">= <expr><name><name pos:line="1497" pos:column="25">globalScope</name><op:operator pos:line="1497" pos:column="36">.</op:operator><name pos:line="1497" pos:column="37">ChildStatements</name><index pos:line="1497" pos:column="52">[<expr><lit:literal type="number" pos:line="1497" pos:column="53">3</lit:literal></expr>]</index></name><op:operator pos:line="1497" pos:column="55">.</op:operator><name pos:line="1497" pos:column="56">Content</name> <op:operator pos:line="1497" pos:column="64">as</op:operator> <name pos:line="1497" pos:column="67">VariableDeclaration</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1498" pos:column="13">Assert</name><op:operator pos:line="1498" pos:column="19">.</op:operator><name pos:line="1498" pos:column="20">IsNotNull</name></name><argument_list pos:line="1498" pos:column="29">(<argument><expr><name pos:line="1498" pos:column="30">declD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1499" pos:column="13">Assert</name><op:operator pos:line="1499" pos:column="19">.</op:operator><name pos:line="1499" pos:column="20">AreEqual</name></name><argument_list pos:line="1499" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1499" pos:column="29">"D"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1499" pos:column="34">declD</name><op:operator pos:line="1499" pos:column="39">.</op:operator><name pos:line="1499" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1500" pos:column="13">Assert</name><op:operator pos:line="1500" pos:column="19">.</op:operator><name pos:line="1500" pos:column="20">AreEqual</name></name><argument_list pos:line="1500" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1500" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1500" pos:column="36">declD</name><op:operator pos:line="1500" pos:column="41">.</op:operator><name pos:line="1500" pos:column="42">VariableType</name><op:operator pos:line="1500" pos:column="54">.</op:operator><name pos:line="1500" pos:column="55">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1501" pos:column="13">Assert</name><op:operator pos:line="1501" pos:column="19">.</op:operator><name pos:line="1501" pos:column="20">AreEqual</name></name><argument_list pos:line="1501" pos:column="28">(<argument><expr><name><name pos:line="1501" pos:column="29">AccessModifier</name><op:operator pos:line="1501" pos:column="43">.</op:operator><name pos:line="1501" pos:column="44">None</name></name></expr></argument>, <argument><expr><name><name pos:line="1501" pos:column="50">declD</name><op:operator pos:line="1501" pos:column="55">.</op:operator><name pos:line="1501" pos:column="56">Accessibility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1504" pos:column="9">[<expr><name pos:line="1504" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1505" pos:column="9">public</specifier> <name pos:line="1505" pos:column="16">void</name></type> <name pos:line="1505" pos:column="21">TestLiteralUse</name><parameter_list pos:line="1505" pos:column="35">()</parameter_list> <block pos:line="1505" pos:column="38">{
            <comment type="line" pos:line="1506" pos:column="13">//a = 17;</comment>
            <comment type="line" pos:line="1507" pos:column="13">//foo = "watermelon";</comment>
            <comment type="line" pos:line="1508" pos:column="13">//if(true) { </comment>
            <comment type="line" pos:line="1509" pos:column="13">//  c = 'h';</comment>
            <comment type="line" pos:line="1510" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="1511" pos:column="13">string</name></type> <name pos:line="1511" pos:column="20">xml</name> <init pos:line="1511" pos:column="24">= <expr><lit:literal type="string" pos:line="1511" pos:column="26">@"&lt;expr_stmt&gt;&lt;expr&gt;&lt;name&gt;a&lt;/name&gt; &lt;op:operator&gt;=&lt;/op:operator&gt; &lt;lit:literal type=""number&gt;17&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
&lt;expr_stmt&gt;&lt;expr&gt;&lt;name&gt;foo&lt;/name&gt; &lt;op:operator&gt;=&lt;/op:operator&gt; &lt;lit:literal type=""string&gt;""watermelon&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
&lt;if&gt;if&lt;condition&gt;(&lt;expr&gt;&lt;lit:literal type=""boolean&gt;true&lt;/lit:literal&gt;&lt;/expr&gt;)&lt;/condition&gt;&lt;then&gt; &lt;block&gt;{ 
  &lt;expr_stmt&gt;&lt;expr&gt;&lt;name&gt;c&lt;/name&gt; &lt;op:operator&gt;=&lt;/op:operator&gt; &lt;lit:literal type=""char&gt;'h'&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
}&lt;/block&gt;&lt;/then&gt;&lt;/if&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1516" pos:column="13">XElement</name></type> <name pos:line="1516" pos:column="22">xmlElement</name> <init pos:line="1516" pos:column="33">= <expr><call><name><name pos:line="1516" pos:column="35">fileSetup</name><op:operator pos:line="1516" pos:column="44">.</op:operator><name pos:line="1516" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1516" pos:column="69">(<argument><expr><name pos:line="1516" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1516" pos:column="75">"A.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1518" pos:column="13">var</name></type> <name pos:line="1518" pos:column="17">globalScope</name> <init pos:line="1518" pos:column="29">= <expr><call><name><name pos:line="1518" pos:column="31">codeParser</name><op:operator pos:line="1518" pos:column="41">.</op:operator><name pos:line="1518" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="1518" pos:column="55">(<argument><expr><name pos:line="1518" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1520" pos:column="13">var</name></type> <name pos:line="1520" pos:column="17">numLit</name> <init pos:line="1520" pos:column="24">= <expr><name><name pos:line="1520" pos:column="26">globalScope</name><op:operator pos:line="1520" pos:column="37">.</op:operator><name pos:line="1520" pos:column="38">ChildStatements</name><index pos:line="1520" pos:column="53">[<expr><lit:literal type="number" pos:line="1520" pos:column="54">0</lit:literal></expr>]</index></name><op:operator pos:line="1520" pos:column="56">.</op:operator><call><name><name pos:line="1520" pos:column="57">Content</name><op:operator pos:line="1520" pos:column="64">.</op:operator><name><name pos:line="1520" pos:column="65">GetDescendantsAndSelf</name><argument_list pos:line="1520" pos:column="86">&lt;<argument><name pos:line="1520" pos:column="87">LiteralUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1520" pos:column="98">()</argument_list></call><op:operator pos:line="1520" pos:column="100">.</op:operator><call><name pos:line="1520" pos:column="101">FirstOrDefault</name><argument_list pos:line="1520" pos:column="115">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1521" pos:column="13">Assert</name><op:operator pos:line="1521" pos:column="19">.</op:operator><name pos:line="1521" pos:column="20">IsNotNull</name></name><argument_list pos:line="1521" pos:column="29">(<argument><expr><name pos:line="1521" pos:column="30">numLit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1522" pos:column="13">Assert</name><op:operator pos:line="1522" pos:column="19">.</op:operator><name pos:line="1522" pos:column="20">AreEqual</name></name><argument_list pos:line="1522" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1522" pos:column="29">"17"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1522" pos:column="35">numLit</name><op:operator pos:line="1522" pos:column="41">.</op:operator><name pos:line="1522" pos:column="42">Text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1523" pos:column="13">Assert</name><op:operator pos:line="1523" pos:column="19">.</op:operator><name pos:line="1523" pos:column="20">AreEqual</name></name><argument_list pos:line="1523" pos:column="28">(<argument><expr><name><name pos:line="1523" pos:column="29">LiteralKind</name><op:operator pos:line="1523" pos:column="40">.</op:operator><name pos:line="1523" pos:column="41">Number</name></name></expr></argument>, <argument><expr><name><name pos:line="1523" pos:column="49">numLit</name><op:operator pos:line="1523" pos:column="55">.</op:operator><name pos:line="1523" pos:column="56">Kind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1525" pos:column="13">var</name></type> <name pos:line="1525" pos:column="17">stringLit</name> <init pos:line="1525" pos:column="27">= <expr><name><name pos:line="1525" pos:column="29">globalScope</name><op:operator pos:line="1525" pos:column="40">.</op:operator><name pos:line="1525" pos:column="41">ChildStatements</name><index pos:line="1525" pos:column="56">[<expr><lit:literal type="number" pos:line="1525" pos:column="57">1</lit:literal></expr>]</index></name><op:operator pos:line="1525" pos:column="59">.</op:operator><call><name><name pos:line="1525" pos:column="60">Content</name><op:operator pos:line="1525" pos:column="67">.</op:operator><name><name pos:line="1525" pos:column="68">GetDescendantsAndSelf</name><argument_list pos:line="1525" pos:column="89">&lt;<argument><name pos:line="1525" pos:column="90">LiteralUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1525" pos:column="101">()</argument_list></call><op:operator pos:line="1525" pos:column="103">.</op:operator><call><name pos:line="1525" pos:column="104">FirstOrDefault</name><argument_list pos:line="1525" pos:column="118">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1526" pos:column="13">Assert</name><op:operator pos:line="1526" pos:column="19">.</op:operator><name pos:line="1526" pos:column="20">IsNotNull</name></name><argument_list pos:line="1526" pos:column="29">(<argument><expr><name pos:line="1526" pos:column="30">stringLit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1527" pos:column="13">Assert</name><op:operator pos:line="1527" pos:column="19">.</op:operator><name pos:line="1527" pos:column="20">AreEqual</name></name><argument_list pos:line="1527" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1527" pos:column="29">"\"watermelon\""</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1527" pos:column="47">stringLit</name><op:operator pos:line="1527" pos:column="56">.</op:operator><name pos:line="1527" pos:column="57">Text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1528" pos:column="13">Assert</name><op:operator pos:line="1528" pos:column="19">.</op:operator><name pos:line="1528" pos:column="20">AreEqual</name></name><argument_list pos:line="1528" pos:column="28">(<argument><expr><name><name pos:line="1528" pos:column="29">LiteralKind</name><op:operator pos:line="1528" pos:column="40">.</op:operator><name pos:line="1528" pos:column="41">String</name></name></expr></argument>, <argument><expr><name><name pos:line="1528" pos:column="49">stringLit</name><op:operator pos:line="1528" pos:column="58">.</op:operator><name pos:line="1528" pos:column="59">Kind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1530" pos:column="13">var</name></type> <name pos:line="1530" pos:column="17">ifStmt</name> <init pos:line="1530" pos:column="24">= <expr><name><name pos:line="1530" pos:column="26">globalScope</name><op:operator pos:line="1530" pos:column="37">.</op:operator><name pos:line="1530" pos:column="38">ChildStatements</name><index pos:line="1530" pos:column="53">[<expr><lit:literal type="number" pos:line="1530" pos:column="54">2</lit:literal></expr>]</index></name> <op:operator pos:line="1530" pos:column="57">as</op:operator> <name pos:line="1530" pos:column="60">IfStatement</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1531" pos:column="13">Assert</name><op:operator pos:line="1531" pos:column="19">.</op:operator><name pos:line="1531" pos:column="20">IsNotNull</name></name><argument_list pos:line="1531" pos:column="29">(<argument><expr><name pos:line="1531" pos:column="30">ifStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1533" pos:column="13">var</name></type> <name pos:line="1533" pos:column="17">boolLit</name> <init pos:line="1533" pos:column="25">= <expr><name><name pos:line="1533" pos:column="27">ifStmt</name><op:operator pos:line="1533" pos:column="33">.</op:operator><name pos:line="1533" pos:column="34">Condition</name></name> <op:operator pos:line="1533" pos:column="44">as</op:operator> <name pos:line="1533" pos:column="47">LiteralUse</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1534" pos:column="13">Assert</name><op:operator pos:line="1534" pos:column="19">.</op:operator><name pos:line="1534" pos:column="20">IsNotNull</name></name><argument_list pos:line="1534" pos:column="29">(<argument><expr><name pos:line="1534" pos:column="30">boolLit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1535" pos:column="13">Assert</name><op:operator pos:line="1535" pos:column="19">.</op:operator><name pos:line="1535" pos:column="20">AreEqual</name></name><argument_list pos:line="1535" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1535" pos:column="29">"true"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1535" pos:column="37">boolLit</name><op:operator pos:line="1535" pos:column="44">.</op:operator><name pos:line="1535" pos:column="45">Text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1536" pos:column="13">Assert</name><op:operator pos:line="1536" pos:column="19">.</op:operator><name pos:line="1536" pos:column="20">AreEqual</name></name><argument_list pos:line="1536" pos:column="28">(<argument><expr><name><name pos:line="1536" pos:column="29">LiteralKind</name><op:operator pos:line="1536" pos:column="40">.</op:operator><name pos:line="1536" pos:column="41">Boolean</name></name></expr></argument>, <argument><expr><name><name pos:line="1536" pos:column="50">boolLit</name><op:operator pos:line="1536" pos:column="57">.</op:operator><name pos:line="1536" pos:column="58">Kind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1538" pos:column="13">var</name></type> <name pos:line="1538" pos:column="17">charLit</name> <init pos:line="1538" pos:column="25">= <expr><name><name pos:line="1538" pos:column="27">ifStmt</name><op:operator pos:line="1538" pos:column="33">.</op:operator><name pos:line="1538" pos:column="34">ChildStatements</name><index pos:line="1538" pos:column="49">[<expr><lit:literal type="number" pos:line="1538" pos:column="50">0</lit:literal></expr>]</index></name><op:operator pos:line="1538" pos:column="52">.</op:operator><call><name><name pos:line="1538" pos:column="53">Content</name><op:operator pos:line="1538" pos:column="60">.</op:operator><name><name pos:line="1538" pos:column="61">GetDescendantsAndSelf</name><argument_list pos:line="1538" pos:column="82">&lt;<argument><name pos:line="1538" pos:column="83">LiteralUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1538" pos:column="94">()</argument_list></call><op:operator pos:line="1538" pos:column="96">.</op:operator><call><name pos:line="1538" pos:column="97">FirstOrDefault</name><argument_list pos:line="1538" pos:column="111">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1539" pos:column="13">Assert</name><op:operator pos:line="1539" pos:column="19">.</op:operator><name pos:line="1539" pos:column="20">IsNotNull</name></name><argument_list pos:line="1539" pos:column="29">(<argument><expr><name pos:line="1539" pos:column="30">charLit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1540" pos:column="13">Assert</name><op:operator pos:line="1540" pos:column="19">.</op:operator><name pos:line="1540" pos:column="20">AreEqual</name></name><argument_list pos:line="1540" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1540" pos:column="29">"\'h\'"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1540" pos:column="38">charLit</name><op:operator pos:line="1540" pos:column="45">.</op:operator><name pos:line="1540" pos:column="46">Text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1541" pos:column="13">Assert</name><op:operator pos:line="1541" pos:column="19">.</op:operator><name pos:line="1541" pos:column="20">AreEqual</name></name><argument_list pos:line="1541" pos:column="28">(<argument><expr><name><name pos:line="1541" pos:column="29">LiteralKind</name><op:operator pos:line="1541" pos:column="40">.</op:operator><name pos:line="1541" pos:column="41">Character</name></name></expr></argument>, <argument><expr><name><name pos:line="1541" pos:column="52">charLit</name><op:operator pos:line="1541" pos:column="59">.</op:operator><name pos:line="1541" pos:column="60">Kind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1544" pos:column="9">[<expr><name pos:line="1544" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1545" pos:column="9">public</specifier> <name pos:line="1545" pos:column="16">void</name></type> <name pos:line="1545" pos:column="21">TestIfElse</name><parameter_list pos:line="1545" pos:column="31">()</parameter_list> <block pos:line="1545" pos:column="34">{
            <comment type="line" pos:line="1546" pos:column="13">//if(a==b) {</comment>
            <comment type="line" pos:line="1547" pos:column="13">//  i = 17;</comment>
            <comment type="line" pos:line="1548" pos:column="13">//} else {</comment>
            <comment type="line" pos:line="1549" pos:column="13">//  i = 42;</comment>
            <comment type="line" pos:line="1550" pos:column="13">//  ReportError();</comment>
            <comment type="line" pos:line="1551" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="1552" pos:column="13">string</name></type> <name pos:line="1552" pos:column="20">xml</name> <init pos:line="1552" pos:column="24">= <expr><lit:literal type="string" pos:line="1552" pos:column="26">@"&lt;if&gt;if&lt;condition&gt;(&lt;expr&gt;&lt;name&gt;a&lt;/name&gt;&lt;op:operator&gt;==&lt;/op:operator&gt;&lt;name&gt;b&lt;/name&gt;&lt;/expr&gt;)&lt;/condition&gt;&lt;then&gt; &lt;block&gt;{
  &lt;expr_stmt&gt;&lt;expr&gt;&lt;name&gt;i&lt;/name&gt; &lt;op:operator&gt;=&lt;/op:operator&gt; &lt;lit:literal type=""number&gt;17&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
}&lt;/block&gt;&lt;/then&gt; &lt;else&gt;else &lt;block&gt;{
  &lt;expr_stmt&gt;&lt;expr&gt;&lt;name&gt;i&lt;/name&gt; &lt;op:operator&gt;=&lt;/op:operator&gt; &lt;lit:literal type=""number&gt;42&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
  &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;ReportError&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
}&lt;/block&gt;&lt;/else&gt;&lt;/if&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1558" pos:column="13">XElement</name></type> <name pos:line="1558" pos:column="22">xmlElement</name> <init pos:line="1558" pos:column="33">= <expr><call><name><name pos:line="1558" pos:column="35">fileSetup</name><op:operator pos:line="1558" pos:column="44">.</op:operator><name pos:line="1558" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1558" pos:column="69">(<argument><expr><name pos:line="1558" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1558" pos:column="75">"A.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1560" pos:column="13">var</name></type> <name pos:line="1560" pos:column="17">globalScope</name> <init pos:line="1560" pos:column="29">= <expr><call><name><name pos:line="1560" pos:column="31">codeParser</name><op:operator pos:line="1560" pos:column="41">.</op:operator><name pos:line="1560" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="1560" pos:column="55">(<argument><expr><name pos:line="1560" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1561" pos:column="13">var</name></type> <name pos:line="1561" pos:column="17">ifStmt</name> <init pos:line="1561" pos:column="24">= <expr><call><name><name pos:line="1561" pos:column="26">globalScope</name><op:operator pos:line="1561" pos:column="37">.</op:operator><name pos:line="1561" pos:column="38">ChildStatements</name><op:operator pos:line="1561" pos:column="53">.</op:operator><name pos:line="1561" pos:column="54">First</name></name><argument_list pos:line="1561" pos:column="59">()</argument_list></call> <op:operator pos:line="1561" pos:column="62">as</op:operator> <name pos:line="1561" pos:column="65">IfStatement</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1562" pos:column="13">Assert</name><op:operator pos:line="1562" pos:column="19">.</op:operator><name pos:line="1562" pos:column="20">IsNotNull</name></name><argument_list pos:line="1562" pos:column="29">(<argument><expr><name pos:line="1562" pos:column="30">ifStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1563" pos:column="13">Assert</name><op:operator pos:line="1563" pos:column="19">.</op:operator><name pos:line="1563" pos:column="20">IsNull</name></name><argument_list pos:line="1563" pos:column="26">(<argument><expr><name><name pos:line="1563" pos:column="27">ifStmt</name><op:operator pos:line="1563" pos:column="33">.</op:operator><name pos:line="1563" pos:column="34">Content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1564" pos:column="13">Assert</name><op:operator pos:line="1564" pos:column="19">.</op:operator><name pos:line="1564" pos:column="20">IsNotNull</name></name><argument_list pos:line="1564" pos:column="29">(<argument><expr><name><name pos:line="1564" pos:column="30">ifStmt</name><op:operator pos:line="1564" pos:column="36">.</op:operator><name pos:line="1564" pos:column="37">Condition</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1565" pos:column="13">Assert</name><op:operator pos:line="1565" pos:column="19">.</op:operator><name pos:line="1565" pos:column="20">AreEqual</name></name><argument_list pos:line="1565" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1565" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1565" pos:column="32">ifStmt</name><op:operator pos:line="1565" pos:column="38">.</op:operator><name pos:line="1565" pos:column="39">ChildStatements</name><op:operator pos:line="1565" pos:column="54">.</op:operator><name pos:line="1565" pos:column="55">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1566" pos:column="13">Assert</name><op:operator pos:line="1566" pos:column="19">.</op:operator><name pos:line="1566" pos:column="20">AreEqual</name></name><argument_list pos:line="1566" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1566" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1566" pos:column="32">ifStmt</name><op:operator pos:line="1566" pos:column="38">.</op:operator><name pos:line="1566" pos:column="39">ElseStatements</name><op:operator pos:line="1566" pos:column="53">.</op:operator><name pos:line="1566" pos:column="54">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1569" pos:column="9">[<expr><name pos:line="1569" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1570" pos:column="9">public</specifier> <name pos:line="1570" pos:column="16">void</name></type> <name pos:line="1570" pos:column="21">TestIfElseIf</name><parameter_list pos:line="1570" pos:column="33">()</parameter_list> <block pos:line="1570" pos:column="36">{
            <comment type="line" pos:line="1571" pos:column="13">//if(a==b) {</comment>
            <comment type="line" pos:line="1572" pos:column="13">//  i = 17;</comment>
            <comment type="line" pos:line="1573" pos:column="13">//} else if(a==c) {</comment>
            <comment type="line" pos:line="1574" pos:column="13">//  i = 42;</comment>
            <comment type="line" pos:line="1575" pos:column="13">//  foo();</comment>
            <comment type="line" pos:line="1576" pos:column="13">//} else {</comment>
            <comment type="line" pos:line="1577" pos:column="13">//  ReportError();</comment>
            <comment type="line" pos:line="1578" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="1579" pos:column="13">string</name></type> <name pos:line="1579" pos:column="20">xml</name> <init pos:line="1579" pos:column="24">= <expr><lit:literal type="string" pos:line="1579" pos:column="26">@"&lt;if&gt;if&lt;condition&gt;(&lt;expr&gt;&lt;name&gt;a&lt;/name&gt;&lt;op:operator&gt;==&lt;/op:operator&gt;&lt;name&gt;b&lt;/name&gt;&lt;/expr&gt;)&lt;/condition&gt;&lt;then&gt; &lt;block&gt;{
  &lt;expr_stmt&gt;&lt;expr&gt;&lt;name&gt;i&lt;/name&gt; &lt;op:operator&gt;=&lt;/op:operator&gt; &lt;lit:literal type=""number&gt;17&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
}&lt;/block&gt;&lt;/then&gt; &lt;else&gt;else &lt;if&gt;if&lt;condition&gt;(&lt;expr&gt;&lt;name&gt;a&lt;/name&gt;&lt;op:operator&gt;==&lt;/op:operator&gt;&lt;name&gt;c&lt;/name&gt;&lt;/expr&gt;)&lt;/condition&gt;&lt;then&gt; &lt;block&gt;{
  &lt;expr_stmt&gt;&lt;expr&gt;&lt;name&gt;i&lt;/name&gt; &lt;op:operator&gt;=&lt;/op:operator&gt; &lt;lit:literal type=""number&gt;42&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
  &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;foo&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
}&lt;/block&gt;&lt;/then&gt; &lt;else&gt;else &lt;block&gt;{
  &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;ReportError&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
}&lt;/block&gt;&lt;/else&gt;&lt;/if&gt;&lt;/else&gt;&lt;/if&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1587" pos:column="13">XElement</name></type> <name pos:line="1587" pos:column="22">xmlElement</name> <init pos:line="1587" pos:column="33">= <expr><call><name><name pos:line="1587" pos:column="35">fileSetup</name><op:operator pos:line="1587" pos:column="44">.</op:operator><name pos:line="1587" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1587" pos:column="69">(<argument><expr><name pos:line="1587" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1587" pos:column="75">"A.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1588" pos:column="13">var</name></type> <name pos:line="1588" pos:column="17">globalScope</name> <init pos:line="1588" pos:column="29">= <expr><call><name><name pos:line="1588" pos:column="31">codeParser</name><op:operator pos:line="1588" pos:column="41">.</op:operator><name pos:line="1588" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="1588" pos:column="55">(<argument><expr><name pos:line="1588" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1590" pos:column="13">var</name></type> <name pos:line="1590" pos:column="17">ifStmt</name> <init pos:line="1590" pos:column="24">= <expr><call><name><name pos:line="1590" pos:column="26">globalScope</name><op:operator pos:line="1590" pos:column="37">.</op:operator><name pos:line="1590" pos:column="38">ChildStatements</name><op:operator pos:line="1590" pos:column="53">.</op:operator><name pos:line="1590" pos:column="54">First</name></name><argument_list pos:line="1590" pos:column="59">()</argument_list></call> <op:operator pos:line="1590" pos:column="62">as</op:operator> <name pos:line="1590" pos:column="65">IfStatement</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1591" pos:column="13">Assert</name><op:operator pos:line="1591" pos:column="19">.</op:operator><name pos:line="1591" pos:column="20">IsNotNull</name></name><argument_list pos:line="1591" pos:column="29">(<argument><expr><name pos:line="1591" pos:column="30">ifStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1592" pos:column="13">Assert</name><op:operator pos:line="1592" pos:column="19">.</op:operator><name pos:line="1592" pos:column="20">IsNull</name></name><argument_list pos:line="1592" pos:column="26">(<argument><expr><name><name pos:line="1592" pos:column="27">ifStmt</name><op:operator pos:line="1592" pos:column="33">.</op:operator><name pos:line="1592" pos:column="34">Content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1593" pos:column="13">Assert</name><op:operator pos:line="1593" pos:column="19">.</op:operator><name pos:line="1593" pos:column="20">IsNotNull</name></name><argument_list pos:line="1593" pos:column="29">(<argument><expr><name><name pos:line="1593" pos:column="30">ifStmt</name><op:operator pos:line="1593" pos:column="36">.</op:operator><name pos:line="1593" pos:column="37">Condition</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1594" pos:column="13">Assert</name><op:operator pos:line="1594" pos:column="19">.</op:operator><name pos:line="1594" pos:column="20">AreEqual</name></name><argument_list pos:line="1594" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1594" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1594" pos:column="32">ifStmt</name><op:operator pos:line="1594" pos:column="38">.</op:operator><name pos:line="1594" pos:column="39">ChildStatements</name><op:operator pos:line="1594" pos:column="54">.</op:operator><name pos:line="1594" pos:column="55">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1595" pos:column="13">Assert</name><op:operator pos:line="1595" pos:column="19">.</op:operator><name pos:line="1595" pos:column="20">AreEqual</name></name><argument_list pos:line="1595" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1595" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1595" pos:column="32">ifStmt</name><op:operator pos:line="1595" pos:column="38">.</op:operator><name pos:line="1595" pos:column="39">ElseStatements</name><op:operator pos:line="1595" pos:column="53">.</op:operator><name pos:line="1595" pos:column="54">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1597" pos:column="13">var</name></type> <name pos:line="1597" pos:column="17">ifStmt2</name> <init pos:line="1597" pos:column="25">= <expr><call><name><name pos:line="1597" pos:column="27">ifStmt</name><op:operator pos:line="1597" pos:column="33">.</op:operator><name pos:line="1597" pos:column="34">ElseStatements</name><op:operator pos:line="1597" pos:column="48">.</op:operator><name pos:line="1597" pos:column="49">First</name></name><argument_list pos:line="1597" pos:column="54">()</argument_list></call> <op:operator pos:line="1597" pos:column="57">as</op:operator> <name pos:line="1597" pos:column="60">IfStatement</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1598" pos:column="13">Assert</name><op:operator pos:line="1598" pos:column="19">.</op:operator><name pos:line="1598" pos:column="20">IsNotNull</name></name><argument_list pos:line="1598" pos:column="29">(<argument><expr><name pos:line="1598" pos:column="30">ifStmt2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1599" pos:column="13">Assert</name><op:operator pos:line="1599" pos:column="19">.</op:operator><name pos:line="1599" pos:column="20">IsNull</name></name><argument_list pos:line="1599" pos:column="26">(<argument><expr><name><name pos:line="1599" pos:column="27">ifStmt2</name><op:operator pos:line="1599" pos:column="34">.</op:operator><name pos:line="1599" pos:column="35">Content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1600" pos:column="13">Assert</name><op:operator pos:line="1600" pos:column="19">.</op:operator><name pos:line="1600" pos:column="20">IsNotNull</name></name><argument_list pos:line="1600" pos:column="29">(<argument><expr><name><name pos:line="1600" pos:column="30">ifStmt2</name><op:operator pos:line="1600" pos:column="37">.</op:operator><name pos:line="1600" pos:column="38">Condition</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1601" pos:column="13">Assert</name><op:operator pos:line="1601" pos:column="19">.</op:operator><name pos:line="1601" pos:column="20">AreEqual</name></name><argument_list pos:line="1601" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1601" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1601" pos:column="32">ifStmt2</name><op:operator pos:line="1601" pos:column="39">.</op:operator><name pos:line="1601" pos:column="40">ChildStatements</name><op:operator pos:line="1601" pos:column="55">.</op:operator><name pos:line="1601" pos:column="56">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1602" pos:column="13">Assert</name><op:operator pos:line="1602" pos:column="19">.</op:operator><name pos:line="1602" pos:column="20">AreEqual</name></name><argument_list pos:line="1602" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1602" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1602" pos:column="32">ifStmt2</name><op:operator pos:line="1602" pos:column="39">.</op:operator><name pos:line="1602" pos:column="40">ElseStatements</name><op:operator pos:line="1602" pos:column="54">.</op:operator><name pos:line="1602" pos:column="55">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1605" pos:column="9">[<expr><name pos:line="1605" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1606" pos:column="9">public</specifier> <name pos:line="1606" pos:column="16">void</name></type> <name pos:line="1606" pos:column="21">TestEmptyStatement</name><parameter_list pos:line="1606" pos:column="39">()</parameter_list> <block pos:line="1606" pos:column="42">{
            <comment type="line" pos:line="1607" pos:column="13">// ;</comment>
            <decl_stmt><decl><type><name pos:line="1608" pos:column="13">string</name></type> <name pos:line="1608" pos:column="20">xml</name> <init pos:line="1608" pos:column="24">= <expr><lit:literal type="string" pos:line="1608" pos:column="26">@"&lt;empty_stmt&gt;;&lt;/empty_stmt&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1609" pos:column="13">XElement</name></type> <name pos:line="1609" pos:column="22">xmlElement</name> <init pos:line="1609" pos:column="33">= <expr><call><name><name pos:line="1609" pos:column="35">fileSetup</name><op:operator pos:line="1609" pos:column="44">.</op:operator><name pos:line="1609" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1609" pos:column="69">(<argument><expr><name pos:line="1609" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1609" pos:column="75">"A.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <decl_stmt><decl><type><name pos:line="1611" pos:column="13">var</name></type> <name pos:line="1611" pos:column="17">globalScope</name> <init pos:line="1611" pos:column="29">= <expr><call><name><name pos:line="1611" pos:column="31">codeParser</name><op:operator pos:line="1611" pos:column="41">.</op:operator><name pos:line="1611" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="1611" pos:column="55">(<argument><expr><name pos:line="1611" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1612" pos:column="13">Assert</name><op:operator pos:line="1612" pos:column="19">.</op:operator><name pos:line="1612" pos:column="20">AreEqual</name></name><argument_list pos:line="1612" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1612" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1612" pos:column="32">globalScope</name><op:operator pos:line="1612" pos:column="43">.</op:operator><name pos:line="1612" pos:column="44">ChildStatements</name><op:operator pos:line="1612" pos:column="59">.</op:operator><name pos:line="1612" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1613" pos:column="13">var</name></type> <name pos:line="1613" pos:column="17">actual</name> <init pos:line="1613" pos:column="24">= <expr><name><name pos:line="1613" pos:column="26">globalScope</name><op:operator pos:line="1613" pos:column="37">.</op:operator><name pos:line="1613" pos:column="38">ChildStatements</name><index pos:line="1613" pos:column="53">[<expr><lit:literal type="number" pos:line="1613" pos:column="54">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1614" pos:column="13">Assert</name><op:operator pos:line="1614" pos:column="19">.</op:operator><name pos:line="1614" pos:column="20">IsNotNull</name></name><argument_list pos:line="1614" pos:column="29">(<argument><expr><name pos:line="1614" pos:column="30">actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1615" pos:column="13">Assert</name><op:operator pos:line="1615" pos:column="19">.</op:operator><name pos:line="1615" pos:column="20">AreEqual</name></name><argument_list pos:line="1615" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1615" pos:column="29">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1615" pos:column="32">actual</name><op:operator pos:line="1615" pos:column="38">.</op:operator><name pos:line="1615" pos:column="39">ChildStatements</name><op:operator pos:line="1615" pos:column="54">.</op:operator><name pos:line="1615" pos:column="55">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1616" pos:column="13">Assert</name><op:operator pos:line="1616" pos:column="19">.</op:operator><name pos:line="1616" pos:column="20">IsNull</name></name><argument_list pos:line="1616" pos:column="26">(<argument><expr><name><name pos:line="1616" pos:column="27">actual</name><op:operator pos:line="1616" pos:column="33">.</op:operator><name pos:line="1616" pos:column="34">Content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1619" pos:column="9">[<expr><name pos:line="1619" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1620" pos:column="9">public</specifier> <name pos:line="1620" pos:column="16">void</name></type> <name pos:line="1620" pos:column="21">TestVariableUse_Index</name><parameter_list pos:line="1620" pos:column="42">()</parameter_list> <block pos:line="1620" pos:column="45">{
            <comment type="line" pos:line="1621" pos:column="13">//foo.bar[17];</comment>
            <decl_stmt><decl><type><name pos:line="1622" pos:column="13">string</name></type> <name pos:line="1622" pos:column="20">xml</name> <init pos:line="1622" pos:column="24">= <expr><lit:literal type="string" pos:line="1622" pos:column="26">@"&lt;expr_stmt&gt;&lt;expr&gt;&lt;name&gt;&lt;name&gt;foo&lt;/name&gt;&lt;op:operator&gt;.&lt;/op:operator&gt;&lt;name&gt;bar&lt;/name&gt;&lt;index&gt;[&lt;expr&gt;&lt;lit:literal type=""number&gt;17&lt;/lit:literal&gt;&lt;/expr&gt;]&lt;/index&gt;&lt;/name&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1623" pos:column="13">XElement</name></type> <name pos:line="1623" pos:column="22">xmlElement</name> <init pos:line="1623" pos:column="33">= <expr><call><name><name pos:line="1623" pos:column="35">fileSetup</name><op:operator pos:line="1623" pos:column="44">.</op:operator><name pos:line="1623" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1623" pos:column="69">(<argument><expr><name pos:line="1623" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1623" pos:column="75">"a.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1625" pos:column="13">var</name></type> <name pos:line="1625" pos:column="17">globalScope</name> <init pos:line="1625" pos:column="29">= <expr><call><name><name pos:line="1625" pos:column="31">codeParser</name><op:operator pos:line="1625" pos:column="41">.</op:operator><name pos:line="1625" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="1625" pos:column="55">(<argument><expr><name pos:line="1625" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1626" pos:column="13">Assert</name><op:operator pos:line="1626" pos:column="19">.</op:operator><name pos:line="1626" pos:column="20">AreEqual</name></name><argument_list pos:line="1626" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1626" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1626" pos:column="32">globalScope</name><op:operator pos:line="1626" pos:column="43">.</op:operator><name pos:line="1626" pos:column="44">ChildStatements</name><op:operator pos:line="1626" pos:column="59">.</op:operator><name pos:line="1626" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1627" pos:column="13">var</name></type> <name pos:line="1627" pos:column="17">exp</name> <init pos:line="1627" pos:column="21">= <expr><name><name pos:line="1627" pos:column="23">globalScope</name><op:operator pos:line="1627" pos:column="34">.</op:operator><name pos:line="1627" pos:column="35">ChildStatements</name><index pos:line="1627" pos:column="50">[<expr><lit:literal type="number" pos:line="1627" pos:column="51">0</lit:literal></expr>]</index></name><op:operator pos:line="1627" pos:column="53">.</op:operator><name pos:line="1627" pos:column="54">Content</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1628" pos:column="13">Assert</name><op:operator pos:line="1628" pos:column="19">.</op:operator><name pos:line="1628" pos:column="20">IsNotNull</name></name><argument_list pos:line="1628" pos:column="29">(<argument><expr><name pos:line="1628" pos:column="30">exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1629" pos:column="13">Assert</name><op:operator pos:line="1629" pos:column="19">.</op:operator><name pos:line="1629" pos:column="20">AreEqual</name></name><argument_list pos:line="1629" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1629" pos:column="29">3</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1629" pos:column="32">exp</name><op:operator pos:line="1629" pos:column="35">.</op:operator><name pos:line="1629" pos:column="36">Components</name><op:operator pos:line="1629" pos:column="46">.</op:operator><name pos:line="1629" pos:column="47">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1630" pos:column="13">var</name></type> <name pos:line="1630" pos:column="17">foo</name> <init pos:line="1630" pos:column="21">= <expr><name><name pos:line="1630" pos:column="23">exp</name><op:operator pos:line="1630" pos:column="26">.</op:operator><name pos:line="1630" pos:column="27">Components</name><index pos:line="1630" pos:column="37">[<expr><lit:literal type="number" pos:line="1630" pos:column="38">0</lit:literal></expr>]</index></name> <op:operator pos:line="1630" pos:column="41">as</op:operator> <name pos:line="1630" pos:column="44">NameUse</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1631" pos:column="13">Assert</name><op:operator pos:line="1631" pos:column="19">.</op:operator><name pos:line="1631" pos:column="20">IsNotNull</name></name><argument_list pos:line="1631" pos:column="29">(<argument><expr><name pos:line="1631" pos:column="30">foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1632" pos:column="13">Assert</name><op:operator pos:line="1632" pos:column="19">.</op:operator><name pos:line="1632" pos:column="20">AreEqual</name></name><argument_list pos:line="1632" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1632" pos:column="29">"foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1632" pos:column="36">foo</name><op:operator pos:line="1632" pos:column="39">.</op:operator><name pos:line="1632" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1633" pos:column="13">var</name></type> <name pos:line="1633" pos:column="17">op</name> <init pos:line="1633" pos:column="20">= <expr><name><name pos:line="1633" pos:column="22">exp</name><op:operator pos:line="1633" pos:column="25">.</op:operator><name pos:line="1633" pos:column="26">Components</name><index pos:line="1633" pos:column="36">[<expr><lit:literal type="number" pos:line="1633" pos:column="37">1</lit:literal></expr>]</index></name> <op:operator pos:line="1633" pos:column="40">as</op:operator> <name pos:line="1633" pos:column="43">OperatorUse</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1634" pos:column="13">Assert</name><op:operator pos:line="1634" pos:column="19">.</op:operator><name pos:line="1634" pos:column="20">IsNotNull</name></name><argument_list pos:line="1634" pos:column="29">(<argument><expr><name pos:line="1634" pos:column="30">op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1635" pos:column="13">Assert</name><op:operator pos:line="1635" pos:column="19">.</op:operator><name pos:line="1635" pos:column="20">AreEqual</name></name><argument_list pos:line="1635" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1635" pos:column="29">"."</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1635" pos:column="34">op</name><op:operator pos:line="1635" pos:column="36">.</op:operator><name pos:line="1635" pos:column="37">Text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1636" pos:column="13">var</name></type> <name pos:line="1636" pos:column="17">bar</name> <init pos:line="1636" pos:column="21">= <expr><name><name pos:line="1636" pos:column="23">exp</name><op:operator pos:line="1636" pos:column="26">.</op:operator><name pos:line="1636" pos:column="27">Components</name><index pos:line="1636" pos:column="37">[<expr><lit:literal type="number" pos:line="1636" pos:column="38">2</lit:literal></expr>]</index></name> <op:operator pos:line="1636" pos:column="41">as</op:operator> <name pos:line="1636" pos:column="44">VariableUse</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1637" pos:column="13">Assert</name><op:operator pos:line="1637" pos:column="19">.</op:operator><name pos:line="1637" pos:column="20">IsNotNull</name></name><argument_list pos:line="1637" pos:column="29">(<argument><expr><name pos:line="1637" pos:column="30">bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1638" pos:column="13">Assert</name><op:operator pos:line="1638" pos:column="19">.</op:operator><name pos:line="1638" pos:column="20">AreEqual</name></name><argument_list pos:line="1638" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1638" pos:column="29">"bar"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1638" pos:column="36">bar</name><op:operator pos:line="1638" pos:column="39">.</op:operator><name pos:line="1638" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1639" pos:column="13">var</name></type> <name pos:line="1639" pos:column="17">index</name> <init pos:line="1639" pos:column="23">= <expr><name><name pos:line="1639" pos:column="25">bar</name><op:operator pos:line="1639" pos:column="28">.</op:operator><name pos:line="1639" pos:column="29">Index</name></name> <op:operator pos:line="1639" pos:column="35">as</op:operator> <name pos:line="1639" pos:column="38">LiteralUse</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1640" pos:column="13">Assert</name><op:operator pos:line="1640" pos:column="19">.</op:operator><name pos:line="1640" pos:column="20">IsNotNull</name></name><argument_list pos:line="1640" pos:column="29">(<argument><expr><name pos:line="1640" pos:column="30">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1641" pos:column="13">Assert</name><op:operator pos:line="1641" pos:column="19">.</op:operator><name pos:line="1641" pos:column="20">AreEqual</name></name><argument_list pos:line="1641" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1641" pos:column="29">"17"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1641" pos:column="35">index</name><op:operator pos:line="1641" pos:column="40">.</op:operator><name pos:line="1641" pos:column="41">Text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1642" pos:column="13">Assert</name><op:operator pos:line="1642" pos:column="19">.</op:operator><name pos:line="1642" pos:column="20">AreEqual</name></name><argument_list pos:line="1642" pos:column="28">(<argument><expr><name><name pos:line="1642" pos:column="29">LiteralKind</name><op:operator pos:line="1642" pos:column="40">.</op:operator><name pos:line="1642" pos:column="41">Number</name></name></expr></argument>, <argument><expr><name><name pos:line="1642" pos:column="49">index</name><op:operator pos:line="1642" pos:column="54">.</op:operator><name pos:line="1642" pos:column="55">Kind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1645" pos:column="9">[<expr><name pos:line="1645" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1646" pos:column="9">public</specifier> <name pos:line="1646" pos:column="16">void</name></type> <name pos:line="1646" pos:column="21">TestResolveVariable_Field</name><parameter_list pos:line="1646" pos:column="46">()</parameter_list> <block pos:line="1646" pos:column="49">{
            <comment type="line" pos:line="1647" pos:column="13">//class A {</comment>
            <comment type="line" pos:line="1648" pos:column="13">//public:</comment>
            <comment type="line" pos:line="1649" pos:column="13">//  int Foo;</comment>
            <comment type="line" pos:line="1650" pos:column="13">//  A() { Foo = 42; }</comment>
            <comment type="line" pos:line="1651" pos:column="13">//};</comment>
            <decl_stmt><decl><type><name pos:line="1652" pos:column="13">string</name></type> <name pos:line="1652" pos:column="20">xml</name> <init pos:line="1652" pos:column="24">= <expr><lit:literal type="string" pos:line="1652" pos:column="26">@"&lt;class pos:line=""1"" pos:column="&gt;class &lt;name pos:line=""1"" pos:column="&gt;A&lt;/name&gt; &lt;block pos:line=""1"" pos:column="&gt;{&lt;private type=""default"" pos:line=""1"" pos:column=&gt;
&lt;/private&gt;&lt;public pos:line=""2"" pos:column="&gt;public:
  &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""3"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""3"" pos:column="&gt;Foo&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
  &lt;constructor&gt;&lt;name pos:line=""4"" pos:column="&gt;A&lt;/name&gt;&lt;parameter_list pos:line=""4"" pos:column="&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""4"" pos:column="&gt;{ &lt;expr_stmt&gt;&lt;expr&gt;&lt;name pos:line=""4"" pos:column="&gt;Foo&lt;/name&gt; &lt;op:operator pos:line=""4"" pos:column=""&gt;=&lt;/op:operator&gt; &lt;lit:literal type=""number"" pos:line=""4"" pos:column=&gt;42&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt; }&lt;/block&gt;&lt;/constructor&gt;
&lt;/public&gt;}&lt;/block&gt;;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1657" pos:column="13">XElement</name></type> <name pos:line="1657" pos:column="22">xmlElement</name> <init pos:line="1657" pos:column="33">= <expr><call><name><name pos:line="1657" pos:column="35">fileSetup</name><op:operator pos:line="1657" pos:column="44">.</op:operator><name pos:line="1657" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1657" pos:column="69">(<argument><expr><name pos:line="1657" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1657" pos:column="75">"A.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1659" pos:column="13">var</name></type> <name pos:line="1659" pos:column="17">globalScope</name> <init pos:line="1659" pos:column="29">= <expr><call><name><name pos:line="1659" pos:column="31">codeParser</name><op:operator pos:line="1659" pos:column="41">.</op:operator><name pos:line="1659" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="1659" pos:column="55">(<argument><expr><name pos:line="1659" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1660" pos:column="13">var</name></type> <name pos:line="1660" pos:column="17">fooDecl</name> <init pos:line="1660" pos:column="25">= <expr><call><name><name pos:line="1660" pos:column="27">globalScope</name><op:operator pos:line="1660" pos:column="38">.</op:operator><name><name pos:line="1660" pos:column="39">GetNamedChildren</name><argument_list pos:line="1660" pos:column="55">&lt;<argument><name pos:line="1660" pos:column="56">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1660" pos:column="71">(<argument><expr><lit:literal type="string" pos:line="1660" pos:column="72">"A"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1660" pos:column="76">.</op:operator><call><name pos:line="1660" pos:column="77">First</name><argument_list pos:line="1660" pos:column="82">()</argument_list></call><op:operator pos:line="1660" pos:column="84">.</op:operator><call><name><name pos:line="1660" pos:column="85">GetNamedChildren</name><argument_list pos:line="1660" pos:column="101">&lt;<argument><name pos:line="1660" pos:column="102">VariableDeclaration</name></argument>&gt;</argument_list></name><argument_list pos:line="1660" pos:column="122">(<argument><expr><lit:literal type="string" pos:line="1660" pos:column="123">"Foo"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1660" pos:column="129">.</op:operator><call><name pos:line="1660" pos:column="130">First</name><argument_list pos:line="1660" pos:column="135">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1661" pos:column="13">var</name></type> <name pos:line="1661" pos:column="17">aConstructor</name> <init pos:line="1661" pos:column="30">= <expr><call><name><name pos:line="1661" pos:column="32">globalScope</name><op:operator pos:line="1661" pos:column="43">.</op:operator><name><name pos:line="1661" pos:column="44">GetDescendants</name><argument_list pos:line="1661" pos:column="58">&lt;<argument><name pos:line="1661" pos:column="59">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1661" pos:column="76">()</argument_list></call><op:operator pos:line="1661" pos:column="78">.</op:operator><call><name pos:line="1661" pos:column="79">First</name><argument_list pos:line="1661" pos:column="84">(<argument><expr><lambda><name pos:line="1661" pos:column="85">m</name> <op:operator pos:line="1661" pos:column="87">=&gt;</op:operator> <name><name pos:line="1661" pos:column="90">m</name><op:operator pos:line="1661" pos:column="91">.</op:operator><name pos:line="1661" pos:column="92">Name</name></name> <op:operator pos:line="1661" pos:column="97">==</op:operator> <lit:literal type="string" pos:line="1661" pos:column="100">"A"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1662" pos:column="13">Assert</name><op:operator pos:line="1662" pos:column="19">.</op:operator><name pos:line="1662" pos:column="20">AreEqual</name></name><argument_list pos:line="1662" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1662" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1662" pos:column="32">aConstructor</name><op:operator pos:line="1662" pos:column="44">.</op:operator><name pos:line="1662" pos:column="45">ChildStatements</name><op:operator pos:line="1662" pos:column="60">.</op:operator><name pos:line="1662" pos:column="61">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1663" pos:column="13">var</name></type> <name pos:line="1663" pos:column="17">fooUse</name> <init pos:line="1663" pos:column="24">= <expr><name><name pos:line="1663" pos:column="26">aConstructor</name><op:operator pos:line="1663" pos:column="38">.</op:operator><name pos:line="1663" pos:column="39">ChildStatements</name><index pos:line="1663" pos:column="54">[<expr><lit:literal type="number" pos:line="1663" pos:column="55">0</lit:literal></expr>]</index></name><op:operator pos:line="1663" pos:column="57">.</op:operator><call><name><name pos:line="1663" pos:column="58">Content</name><op:operator pos:line="1663" pos:column="65">.</op:operator><name><name pos:line="1663" pos:column="66">GetDescendants</name><argument_list pos:line="1663" pos:column="80">&lt;<argument><name pos:line="1663" pos:column="81">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1663" pos:column="89">()</argument_list></call><op:operator pos:line="1663" pos:column="91">.</op:operator><call><name pos:line="1663" pos:column="92">FirstOrDefault</name><argument_list pos:line="1663" pos:column="106">(<argument><expr><lambda><name pos:line="1663" pos:column="107">n</name> <op:operator pos:line="1663" pos:column="109">=&gt;</op:operator> <name><name pos:line="1663" pos:column="112">n</name><op:operator pos:line="1663" pos:column="113">.</op:operator><name pos:line="1663" pos:column="114">Name</name></name> <op:operator pos:line="1663" pos:column="119">==</op:operator> <lit:literal type="string" pos:line="1663" pos:column="122">"Foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1664" pos:column="13">Assert</name><op:operator pos:line="1664" pos:column="19">.</op:operator><name pos:line="1664" pos:column="20">IsNotNull</name></name><argument_list pos:line="1664" pos:column="29">(<argument><expr><name pos:line="1664" pos:column="30">fooUse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1665" pos:column="13">Assert</name><op:operator pos:line="1665" pos:column="19">.</op:operator><name pos:line="1665" pos:column="20">AreSame</name></name><argument_list pos:line="1665" pos:column="27">(<argument><expr><name pos:line="1665" pos:column="28">fooDecl</name></expr></argument>, <argument><expr><call><name><name pos:line="1665" pos:column="37">fooUse</name><op:operator pos:line="1665" pos:column="43">.</op:operator><name pos:line="1665" pos:column="44">FindMatches</name></name><argument_list pos:line="1665" pos:column="55">()</argument_list></call><op:operator pos:line="1665" pos:column="57">.</op:operator><call><name pos:line="1665" pos:column="58">FirstOrDefault</name><argument_list pos:line="1665" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1668" pos:column="9">[<expr><name pos:line="1668" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1669" pos:column="9">public</specifier> <name pos:line="1669" pos:column="16">void</name></type> <name pos:line="1669" pos:column="21">TestResolveVariable_FieldInParent</name><parameter_list pos:line="1669" pos:column="54">()</parameter_list> <block pos:line="1669" pos:column="57">{
            <comment type="line" pos:line="1670" pos:column="13">//class B {</comment>
            <comment type="line" pos:line="1671" pos:column="13">//public:</comment>
            <comment type="line" pos:line="1672" pos:column="13">//  int Foo;</comment>
            <comment type="line" pos:line="1673" pos:column="13">//};</comment>
            <comment type="line" pos:line="1674" pos:column="13">//class A : public B {</comment>
            <comment type="line" pos:line="1675" pos:column="13">//public:</comment>
            <comment type="line" pos:line="1676" pos:column="13">//  A() { Foo = 42; }</comment>
            <comment type="line" pos:line="1677" pos:column="13">//};</comment>
            <decl_stmt><decl><type><name pos:line="1678" pos:column="13">var</name></type> <name pos:line="1678" pos:column="17">xml</name> <init pos:line="1678" pos:column="21">= <expr><lit:literal type="string" pos:line="1678" pos:column="23">@"&lt;class pos:line=""1"" pos:column="&gt;class &lt;name pos:line=""1"" pos:column="&gt;B&lt;/name&gt; &lt;block pos:line=""1"" pos:column="&gt;{&lt;private type=""default"" pos:line=""1"" pos:column=&gt;
&lt;/private&gt;&lt;public pos:line=""2"" pos:column="&gt;public:
  &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""3"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""3"" pos:column="&gt;Foo&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
&lt;/public&gt;}&lt;/block&gt;;&lt;/class&gt;
&lt;class pos:line=""5"" pos:column="&gt;class &lt;name pos:line=""5"" pos:column="&gt;A&lt;/name&gt; &lt;super pos:line=""5"" pos:column="&gt;: &lt;specifier pos:line=""5"" pos:column=""&gt;public&lt;/specifier&gt; &lt;name pos:line=""5"" pos:column=""&gt;B&lt;/name&gt;&lt;/super&gt; &lt;block pos:line=""5"" pos:column=""&gt;{&lt;private type=""default"" pos:line=""5"" pos:column=&gt;
&lt;/private&gt;&lt;public pos:line=""6"" pos:column="&gt;public:
  &lt;constructor&gt;&lt;name pos:line=""7"" pos:column="&gt;A&lt;/name&gt;&lt;parameter_list pos:line=""7"" pos:column="&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""7"" pos:column="&gt;{ &lt;expr_stmt&gt;&lt;expr&gt;&lt;name pos:line=""7"" pos:column="&gt;Foo&lt;/name&gt; &lt;op:operator pos:line=""7"" pos:column=""&gt;=&lt;/op:operator&gt; &lt;lit:literal type=""number"" pos:line=""7"" pos:column=&gt;42&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt; }&lt;/block&gt;&lt;/constructor&gt;
&lt;/public&gt;}&lt;/block&gt;;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1686" pos:column="13">XElement</name></type> <name pos:line="1686" pos:column="22">xmlElement</name> <init pos:line="1686" pos:column="33">= <expr><call><name><name pos:line="1686" pos:column="35">fileSetup</name><op:operator pos:line="1686" pos:column="44">.</op:operator><name pos:line="1686" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1686" pos:column="69">(<argument><expr><name pos:line="1686" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1686" pos:column="75">"A.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1688" pos:column="13">var</name></type> <name pos:line="1688" pos:column="17">globalScope</name> <init pos:line="1688" pos:column="29">= <expr><call><name><name pos:line="1688" pos:column="31">codeParser</name><op:operator pos:line="1688" pos:column="41">.</op:operator><name pos:line="1688" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="1688" pos:column="55">(<argument><expr><name pos:line="1688" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1689" pos:column="13">var</name></type> <name pos:line="1689" pos:column="17">fooDecl</name> <init pos:line="1689" pos:column="25">= <expr><call><name><name pos:line="1689" pos:column="27">globalScope</name><op:operator pos:line="1689" pos:column="38">.</op:operator><name><name pos:line="1689" pos:column="39">GetNamedChildren</name><argument_list pos:line="1689" pos:column="55">&lt;<argument><name pos:line="1689" pos:column="56">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1689" pos:column="71">(<argument><expr><lit:literal type="string" pos:line="1689" pos:column="72">"B"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1689" pos:column="76">.</op:operator><call><name pos:line="1689" pos:column="77">First</name><argument_list pos:line="1689" pos:column="82">()</argument_list></call><op:operator pos:line="1689" pos:column="84">.</op:operator><call><name><name pos:line="1689" pos:column="85">GetNamedChildren</name><argument_list pos:line="1689" pos:column="101">&lt;<argument><name pos:line="1689" pos:column="102">VariableDeclaration</name></argument>&gt;</argument_list></name><argument_list pos:line="1689" pos:column="122">(<argument><expr><lit:literal type="string" pos:line="1689" pos:column="123">"Foo"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1689" pos:column="129">.</op:operator><call><name pos:line="1689" pos:column="130">First</name><argument_list pos:line="1689" pos:column="135">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1690" pos:column="13">var</name></type> <name pos:line="1690" pos:column="17">aConstructor</name> <init pos:line="1690" pos:column="30">= <expr><call><name><name pos:line="1690" pos:column="32">globalScope</name><op:operator pos:line="1690" pos:column="43">.</op:operator><name><name pos:line="1690" pos:column="44">GetDescendants</name><argument_list pos:line="1690" pos:column="58">&lt;<argument><name pos:line="1690" pos:column="59">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1690" pos:column="76">()</argument_list></call><op:operator pos:line="1690" pos:column="78">.</op:operator><call><name pos:line="1690" pos:column="79">First</name><argument_list pos:line="1690" pos:column="84">(<argument><expr><lambda><name pos:line="1690" pos:column="85">m</name> <op:operator pos:line="1690" pos:column="87">=&gt;</op:operator> <name><name pos:line="1690" pos:column="90">m</name><op:operator pos:line="1690" pos:column="91">.</op:operator><name pos:line="1690" pos:column="92">Name</name></name> <op:operator pos:line="1690" pos:column="97">==</op:operator> <lit:literal type="string" pos:line="1690" pos:column="100">"A"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1691" pos:column="13">Assert</name><op:operator pos:line="1691" pos:column="19">.</op:operator><name pos:line="1691" pos:column="20">AreEqual</name></name><argument_list pos:line="1691" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1691" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1691" pos:column="32">aConstructor</name><op:operator pos:line="1691" pos:column="44">.</op:operator><name pos:line="1691" pos:column="45">ChildStatements</name><op:operator pos:line="1691" pos:column="60">.</op:operator><name pos:line="1691" pos:column="61">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1692" pos:column="13">var</name></type> <name pos:line="1692" pos:column="17">fooUse</name> <init pos:line="1692" pos:column="24">= <expr><name><name pos:line="1692" pos:column="26">aConstructor</name><op:operator pos:line="1692" pos:column="38">.</op:operator><name pos:line="1692" pos:column="39">ChildStatements</name><index pos:line="1692" pos:column="54">[<expr><lit:literal type="number" pos:line="1692" pos:column="55">0</lit:literal></expr>]</index></name><op:operator pos:line="1692" pos:column="57">.</op:operator><call><name><name pos:line="1692" pos:column="58">Content</name><op:operator pos:line="1692" pos:column="65">.</op:operator><name><name pos:line="1692" pos:column="66">GetDescendants</name><argument_list pos:line="1692" pos:column="80">&lt;<argument><name pos:line="1692" pos:column="81">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1692" pos:column="89">()</argument_list></call><op:operator pos:line="1692" pos:column="91">.</op:operator><call><name pos:line="1692" pos:column="92">FirstOrDefault</name><argument_list pos:line="1692" pos:column="106">(<argument><expr><lambda><name pos:line="1692" pos:column="107">n</name> <op:operator pos:line="1692" pos:column="109">=&gt;</op:operator> <name><name pos:line="1692" pos:column="112">n</name><op:operator pos:line="1692" pos:column="113">.</op:operator><name pos:line="1692" pos:column="114">Name</name></name> <op:operator pos:line="1692" pos:column="119">==</op:operator> <lit:literal type="string" pos:line="1692" pos:column="122">"Foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1693" pos:column="13">Assert</name><op:operator pos:line="1693" pos:column="19">.</op:operator><name pos:line="1693" pos:column="20">IsNotNull</name></name><argument_list pos:line="1693" pos:column="29">(<argument><expr><name pos:line="1693" pos:column="30">fooUse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1694" pos:column="13">Assert</name><op:operator pos:line="1694" pos:column="19">.</op:operator><name pos:line="1694" pos:column="20">AreSame</name></name><argument_list pos:line="1694" pos:column="27">(<argument><expr><name pos:line="1694" pos:column="28">fooDecl</name></expr></argument>, <argument><expr><call><name><name pos:line="1694" pos:column="37">fooUse</name><op:operator pos:line="1694" pos:column="43">.</op:operator><name pos:line="1694" pos:column="44">FindMatches</name></name><argument_list pos:line="1694" pos:column="55">()</argument_list></call><op:operator pos:line="1694" pos:column="57">.</op:operator><call><name pos:line="1694" pos:column="58">FirstOrDefault</name><argument_list pos:line="1694" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1697" pos:column="9">[<expr><name pos:line="1697" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1698" pos:column="9">public</specifier> <name pos:line="1698" pos:column="16">void</name></type> <name pos:line="1698" pos:column="21">TestResolveVariable_Global</name><parameter_list pos:line="1698" pos:column="47">()</parameter_list> <block pos:line="1698" pos:column="50">{
            <comment type="line" pos:line="1699" pos:column="13">//int Foo;</comment>
            <comment type="line" pos:line="1700" pos:column="13">//int Bar() {</comment>
            <comment type="line" pos:line="1701" pos:column="13">//  Foo = 17;</comment>
            <comment type="line" pos:line="1702" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="1703" pos:column="13">var</name></type> <name pos:line="1703" pos:column="17">xml</name> <init pos:line="1703" pos:column="21">= <expr><lit:literal type="string" pos:line="1703" pos:column="23">@"&lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""1"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""1"" pos:column="&gt;Foo&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
&lt;function&gt;&lt;type&gt;&lt;name pos:line=""2"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""2"" pos:column="&gt;Bar&lt;/name&gt;&lt;parameter_list pos:line=""2"" pos:column="&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""2"" pos:column=""&gt;{
  &lt;expr_stmt&gt;&lt;expr&gt;&lt;name pos:line=""3"" pos:column="&gt;Foo&lt;/name&gt; &lt;op:operator pos:line=""3"" pos:column="&gt;=&lt;/op:operator&gt; &lt;lit:literal type=""number"" pos:line=""3"" pos:column&gt;17&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
}&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1707" pos:column="13">XElement</name></type> <name pos:line="1707" pos:column="22">xmlElement</name> <init pos:line="1707" pos:column="33">= <expr><call><name><name pos:line="1707" pos:column="35">fileSetup</name><op:operator pos:line="1707" pos:column="44">.</op:operator><name pos:line="1707" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1707" pos:column="69">(<argument><expr><name pos:line="1707" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1707" pos:column="75">"A.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1709" pos:column="13">var</name></type> <name pos:line="1709" pos:column="17">globalScope</name> <init pos:line="1709" pos:column="29">= <expr><call><name><name pos:line="1709" pos:column="31">codeParser</name><op:operator pos:line="1709" pos:column="41">.</op:operator><name pos:line="1709" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="1709" pos:column="55">(<argument><expr><name pos:line="1709" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1710" pos:column="13">var</name></type> <name pos:line="1710" pos:column="17">fooDecl</name> <init pos:line="1710" pos:column="25">= <expr><call><name><name pos:line="1710" pos:column="27">globalScope</name><op:operator pos:line="1710" pos:column="38">.</op:operator><name><name pos:line="1710" pos:column="39">GetNamedChildren</name><argument_list pos:line="1710" pos:column="55">&lt;<argument><name pos:line="1710" pos:column="56">VariableDeclaration</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1710" pos:column="76">(<argument><expr><lit:literal type="string" pos:line="1710" pos:column="77">"Foo"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1710" pos:column="83">.</op:operator><call><name pos:line="1710" pos:column="84">First</name><argument_list pos:line="1710" pos:column="89">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1711" pos:column="13">var</name></type> <name pos:line="1711" pos:column="17">bar</name> <init pos:line="1711" pos:column="21">= <expr><call><name><name pos:line="1711" pos:column="23">globalScope</name><op:operator pos:line="1711" pos:column="34">.</op:operator><name><name pos:line="1711" pos:column="35">GetDescendants</name><argument_list pos:line="1711" pos:column="49">&lt;<argument><name pos:line="1711" pos:column="50">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1711" pos:column="67">()</argument_list></call><op:operator pos:line="1711" pos:column="69">.</op:operator><call><name pos:line="1711" pos:column="70">First</name><argument_list pos:line="1711" pos:column="75">(<argument><expr><lambda><name pos:line="1711" pos:column="76">m</name> <op:operator pos:line="1711" pos:column="78">=&gt;</op:operator> <name><name pos:line="1711" pos:column="81">m</name><op:operator pos:line="1711" pos:column="82">.</op:operator><name pos:line="1711" pos:column="83">Name</name></name> <op:operator pos:line="1711" pos:column="88">==</op:operator> <lit:literal type="string" pos:line="1711" pos:column="91">"Bar"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1712" pos:column="13">Assert</name><op:operator pos:line="1712" pos:column="19">.</op:operator><name pos:line="1712" pos:column="20">AreEqual</name></name><argument_list pos:line="1712" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1712" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1712" pos:column="32">bar</name><op:operator pos:line="1712" pos:column="35">.</op:operator><name pos:line="1712" pos:column="36">ChildStatements</name><op:operator pos:line="1712" pos:column="51">.</op:operator><name pos:line="1712" pos:column="52">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1713" pos:column="13">var</name></type> <name pos:line="1713" pos:column="17">fooUse</name> <init pos:line="1713" pos:column="24">= <expr><name><name pos:line="1713" pos:column="26">bar</name><op:operator pos:line="1713" pos:column="29">.</op:operator><name pos:line="1713" pos:column="30">ChildStatements</name><index pos:line="1713" pos:column="45">[<expr><lit:literal type="number" pos:line="1713" pos:column="46">0</lit:literal></expr>]</index></name><op:operator pos:line="1713" pos:column="48">.</op:operator><call><name><name pos:line="1713" pos:column="49">Content</name><op:operator pos:line="1713" pos:column="56">.</op:operator><name><name pos:line="1713" pos:column="57">GetDescendants</name><argument_list pos:line="1713" pos:column="71">&lt;<argument><name pos:line="1713" pos:column="72">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1713" pos:column="80">()</argument_list></call><op:operator pos:line="1713" pos:column="82">.</op:operator><call><name pos:line="1713" pos:column="83">FirstOrDefault</name><argument_list pos:line="1713" pos:column="97">(<argument><expr><lambda><name pos:line="1713" pos:column="98">n</name> <op:operator pos:line="1713" pos:column="100">=&gt;</op:operator> <name><name pos:line="1713" pos:column="103">n</name><op:operator pos:line="1713" pos:column="104">.</op:operator><name pos:line="1713" pos:column="105">Name</name></name> <op:operator pos:line="1713" pos:column="110">==</op:operator> <lit:literal type="string" pos:line="1713" pos:column="113">"Foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1714" pos:column="13">Assert</name><op:operator pos:line="1714" pos:column="19">.</op:operator><name pos:line="1714" pos:column="20">IsNotNull</name></name><argument_list pos:line="1714" pos:column="29">(<argument><expr><name pos:line="1714" pos:column="30">fooUse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1715" pos:column="13">Assert</name><op:operator pos:line="1715" pos:column="19">.</op:operator><name pos:line="1715" pos:column="20">AreSame</name></name><argument_list pos:line="1715" pos:column="27">(<argument><expr><name pos:line="1715" pos:column="28">fooDecl</name></expr></argument>, <argument><expr><call><name><name pos:line="1715" pos:column="37">fooUse</name><op:operator pos:line="1715" pos:column="43">.</op:operator><name pos:line="1715" pos:column="44">FindMatches</name></name><argument_list pos:line="1715" pos:column="55">()</argument_list></call><op:operator pos:line="1715" pos:column="57">.</op:operator><call><name pos:line="1715" pos:column="58">FirstOrDefault</name><argument_list pos:line="1715" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1718" pos:column="9">[<expr><name pos:line="1718" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1719" pos:column="9">public</specifier> <name pos:line="1719" pos:column="16">void</name></type> <name pos:line="1719" pos:column="21">TestResolveVariable_VarInNamespace</name><parameter_list pos:line="1719" pos:column="55">()</parameter_list> <block pos:line="1719" pos:column="58">{
            <comment type="line" pos:line="1720" pos:column="13">//namespace A {</comment>
            <comment type="line" pos:line="1721" pos:column="13">//  int Foo;</comment>
            <comment type="line" pos:line="1722" pos:column="13">//  int Bar() {</comment>
            <comment type="line" pos:line="1723" pos:column="13">//    Foo = 17;</comment>
            <comment type="line" pos:line="1724" pos:column="13">//  }</comment>
            <comment type="line" pos:line="1725" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="1726" pos:column="13">var</name></type> <name pos:line="1726" pos:column="17">xml</name> <init pos:line="1726" pos:column="21">= <expr><lit:literal type="string" pos:line="1726" pos:column="23">@"&lt;namespace pos:line=""1"" pos:column="&gt;namespace &lt;name pos:line=""1"" pos:column=""&gt;A&lt;/name&gt; &lt;block pos:line=""1"" pos:column=""&gt;{
  &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""2"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""2"" pos:column="&gt;Foo&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
  &lt;function&gt;&lt;type&gt;&lt;name pos:line=""3"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""3"" pos:column="&gt;Bar&lt;/name&gt;&lt;parameter_list pos:line=""3"" pos:column=""&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""3"" pos:column=""&gt;{
    &lt;expr_stmt&gt;&lt;expr&gt;&lt;name pos:line=""4"" pos:column="&gt;Foo&lt;/name&gt; &lt;op:operator pos:line=""4"" pos:column="&gt;=&lt;/op:operator&gt; &lt;lit:literal type=""number"" pos:line=""4"" pos:column=&gt;17&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
  }&lt;/block&gt;&lt;/function&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1732" pos:column="13">XElement</name></type> <name pos:line="1732" pos:column="22">xmlElement</name> <init pos:line="1732" pos:column="33">= <expr><call><name><name pos:line="1732" pos:column="35">fileSetup</name><op:operator pos:line="1732" pos:column="44">.</op:operator><name pos:line="1732" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1732" pos:column="69">(<argument><expr><name pos:line="1732" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1732" pos:column="75">"A.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1734" pos:column="13">var</name></type> <name pos:line="1734" pos:column="17">globalScope</name> <init pos:line="1734" pos:column="29">= <expr><call><name><name pos:line="1734" pos:column="31">codeParser</name><op:operator pos:line="1734" pos:column="41">.</op:operator><name pos:line="1734" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="1734" pos:column="55">(<argument><expr><name pos:line="1734" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1735" pos:column="13">var</name></type> <name pos:line="1735" pos:column="17">fooDecl</name> <init pos:line="1735" pos:column="25">= <expr><call><name><name pos:line="1735" pos:column="27">globalScope</name><op:operator pos:line="1735" pos:column="38">.</op:operator><name><name pos:line="1735" pos:column="39">GetNamedChildren</name><argument_list pos:line="1735" pos:column="55">&lt;<argument><name pos:line="1735" pos:column="56">NamespaceDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1735" pos:column="76">(<argument><expr><lit:literal type="string" pos:line="1735" pos:column="77">"A"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1735" pos:column="81">.</op:operator><call><name pos:line="1735" pos:column="82">First</name><argument_list pos:line="1735" pos:column="87">()</argument_list></call><op:operator pos:line="1735" pos:column="89">.</op:operator><call><name><name pos:line="1735" pos:column="90">GetNamedChildren</name><argument_list pos:line="1735" pos:column="106">&lt;<argument><name pos:line="1735" pos:column="107">VariableDeclaration</name></argument>&gt;</argument_list></name><argument_list pos:line="1735" pos:column="127">(<argument><expr><lit:literal type="string" pos:line="1735" pos:column="128">"Foo"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1735" pos:column="134">.</op:operator><call><name pos:line="1735" pos:column="135">First</name><argument_list pos:line="1735" pos:column="140">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1736" pos:column="13">var</name></type> <name pos:line="1736" pos:column="17">bar</name> <init pos:line="1736" pos:column="21">= <expr><call><name><name pos:line="1736" pos:column="23">globalScope</name><op:operator pos:line="1736" pos:column="34">.</op:operator><name><name pos:line="1736" pos:column="35">GetDescendants</name><argument_list pos:line="1736" pos:column="49">&lt;<argument><name pos:line="1736" pos:column="50">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1736" pos:column="67">()</argument_list></call><op:operator pos:line="1736" pos:column="69">.</op:operator><call><name pos:line="1736" pos:column="70">First</name><argument_list pos:line="1736" pos:column="75">(<argument><expr><lambda><name pos:line="1736" pos:column="76">m</name> <op:operator pos:line="1736" pos:column="78">=&gt;</op:operator> <name><name pos:line="1736" pos:column="81">m</name><op:operator pos:line="1736" pos:column="82">.</op:operator><name pos:line="1736" pos:column="83">Name</name></name> <op:operator pos:line="1736" pos:column="88">==</op:operator> <lit:literal type="string" pos:line="1736" pos:column="91">"Bar"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1737" pos:column="13">Assert</name><op:operator pos:line="1737" pos:column="19">.</op:operator><name pos:line="1737" pos:column="20">AreEqual</name></name><argument_list pos:line="1737" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1737" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1737" pos:column="32">bar</name><op:operator pos:line="1737" pos:column="35">.</op:operator><name pos:line="1737" pos:column="36">ChildStatements</name><op:operator pos:line="1737" pos:column="51">.</op:operator><name pos:line="1737" pos:column="52">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1738" pos:column="13">var</name></type> <name pos:line="1738" pos:column="17">fooUse</name> <init pos:line="1738" pos:column="24">= <expr><name><name pos:line="1738" pos:column="26">bar</name><op:operator pos:line="1738" pos:column="29">.</op:operator><name pos:line="1738" pos:column="30">ChildStatements</name><index pos:line="1738" pos:column="45">[<expr><lit:literal type="number" pos:line="1738" pos:column="46">0</lit:literal></expr>]</index></name><op:operator pos:line="1738" pos:column="48">.</op:operator><call><name><name pos:line="1738" pos:column="49">Content</name><op:operator pos:line="1738" pos:column="56">.</op:operator><name><name pos:line="1738" pos:column="57">GetDescendants</name><argument_list pos:line="1738" pos:column="71">&lt;<argument><name pos:line="1738" pos:column="72">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1738" pos:column="80">()</argument_list></call><op:operator pos:line="1738" pos:column="82">.</op:operator><call><name pos:line="1738" pos:column="83">FirstOrDefault</name><argument_list pos:line="1738" pos:column="97">(<argument><expr><lambda><name pos:line="1738" pos:column="98">n</name> <op:operator pos:line="1738" pos:column="100">=&gt;</op:operator> <name><name pos:line="1738" pos:column="103">n</name><op:operator pos:line="1738" pos:column="104">.</op:operator><name pos:line="1738" pos:column="105">Name</name></name> <op:operator pos:line="1738" pos:column="110">==</op:operator> <lit:literal type="string" pos:line="1738" pos:column="113">"Foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1739" pos:column="13">Assert</name><op:operator pos:line="1739" pos:column="19">.</op:operator><name pos:line="1739" pos:column="20">IsNotNull</name></name><argument_list pos:line="1739" pos:column="29">(<argument><expr><name pos:line="1739" pos:column="30">fooUse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1740" pos:column="13">Assert</name><op:operator pos:line="1740" pos:column="19">.</op:operator><name pos:line="1740" pos:column="20">AreSame</name></name><argument_list pos:line="1740" pos:column="27">(<argument><expr><name pos:line="1740" pos:column="28">fooDecl</name></expr></argument>, <argument><expr><call><name><name pos:line="1740" pos:column="37">fooUse</name><op:operator pos:line="1740" pos:column="43">.</op:operator><name pos:line="1740" pos:column="44">FindMatches</name></name><argument_list pos:line="1740" pos:column="55">()</argument_list></call><op:operator pos:line="1740" pos:column="57">.</op:operator><call><name pos:line="1740" pos:column="58">FirstOrDefault</name><argument_list pos:line="1740" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1743" pos:column="9">[<expr><name pos:line="1743" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1744" pos:column="9">public</specifier> <name pos:line="1744" pos:column="16">void</name></type> <name pos:line="1744" pos:column="21">TestResolveVariable_Masking</name><parameter_list pos:line="1744" pos:column="48">()</parameter_list> <block pos:line="1744" pos:column="51">{
            <comment type="line" pos:line="1745" pos:column="13">//int foo = 17;</comment>
            <comment type="line" pos:line="1746" pos:column="13">//int main(int argc, char** argv)</comment>
            <comment type="line" pos:line="1747" pos:column="13">//{</comment>
            <comment type="line" pos:line="1748" pos:column="13">//    std::cout&lt;&lt;foo&lt;&lt;std::endl;</comment>
            <comment type="line" pos:line="1749" pos:column="13">//    float foo = 42.0;</comment>
            <comment type="line" pos:line="1750" pos:column="13">//    std::cout&lt;&lt;foo&lt;&lt;std::endl;</comment>
            <comment type="line" pos:line="1751" pos:column="13">//    return 0;</comment>
            <comment type="line" pos:line="1752" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="1753" pos:column="13">var</name></type> <name pos:line="1753" pos:column="17">xml</name> <init pos:line="1753" pos:column="21">= <expr><lit:literal type="string" pos:line="1753" pos:column="23">@"&lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""1"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""1"" pos:column="&gt;foo&lt;/name&gt; &lt;init pos:line=""1"" pos:column="&gt;= &lt;expr&gt;&lt;lit:literal type=""number"" pos:line=""1"" pos:column=&gt;17&lt;/lit:literal&gt;&lt;/expr&gt;&lt;/init&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
&lt;function&gt;&lt;type&gt;&lt;name pos:line=""2"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""2"" pos:column="&gt;main&lt;/name&gt;&lt;parameter_list pos:line=""2"" pos:column="&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""2"" pos:column=""&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""2"" pos:column=""&gt;argc&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;, &lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""2"" pos:column=""&gt;char&lt;/name&gt;&lt;type:modifier pos:line=""2"" pos:column=""&gt;*&lt;/type:modifier&gt;&lt;type:modifier pos:line=""2"" pos:column=""&gt;*&lt;/type:modifier&gt;&lt;/type&gt; &lt;name pos:line=""2"" pos:column=""&gt;argv&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt;
&lt;block pos:line=""3"" pos:column="&gt;{
    &lt;expr_stmt&gt;&lt;expr&gt;&lt;name&gt;&lt;name pos:line=""4"" pos:column="&gt;std&lt;/name&gt;&lt;op:operator pos:line=""4"" pos:column="&gt;::&lt;/op:operator&gt;&lt;name pos:line=""4"" pos:column=""&gt;cout&lt;/name&gt;&lt;/name&gt;&lt;op:operator pos:line=""4"" pos:column=""&gt;&amp;lt;&amp;lt;&lt;/op:operator&gt;&lt;name pos:line=""4"" pos:column=""&gt;foo&lt;/name&gt;&lt;op:operator pos:line=""4"" pos:column=""&gt;&amp;lt;&amp;lt;&lt;/op:operator&gt;&lt;name&gt;&lt;name pos:line=""4"" pos:column=""&gt;std&lt;/name&gt;&lt;op:operator pos:line=""4"" pos:column=""&gt;::&lt;/op:operator&gt;&lt;name pos:line=""4"" pos:column=""&gt;endl&lt;/name&gt;&lt;/name&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
    &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""5"" pos:column="&gt;float&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""5"" pos:column=""&gt;foo&lt;/name&gt; &lt;init pos:line=""5"" pos:column=""&gt;= &lt;expr&gt;&lt;lit:literal type=""number"" pos:line=""5"" pos:column=&gt;42.0&lt;/lit:literal&gt;&lt;/expr&gt;&lt;/init&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
    &lt;expr_stmt&gt;&lt;expr&gt;&lt;name&gt;&lt;name pos:line=""6"" pos:column="&gt;std&lt;/name&gt;&lt;op:operator pos:line=""6"" pos:column="&gt;::&lt;/op:operator&gt;&lt;name pos:line=""6"" pos:column=""&gt;cout&lt;/name&gt;&lt;/name&gt;&lt;op:operator pos:line=""6"" pos:column=""&gt;&amp;lt;&amp;lt;&lt;/op:operator&gt;&lt;name pos:line=""6"" pos:column=""&gt;foo&lt;/name&gt;&lt;op:operator pos:line=""6"" pos:column=""&gt;&amp;lt;&amp;lt;&lt;/op:operator&gt;&lt;name&gt;&lt;name pos:line=""6"" pos:column=""&gt;std&lt;/name&gt;&lt;op:operator pos:line=""6"" pos:column=""&gt;::&lt;/op:operator&gt;&lt;name pos:line=""6"" pos:column=""&gt;endl&lt;/name&gt;&lt;/name&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
    &lt;return pos:line=""7"" pos:column="&gt;return &lt;expr&gt;&lt;lit:literal type=""number"" pos:line=""7"" pos:column=&gt;0&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt;
}&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1761" pos:column="13">XElement</name></type> <name pos:line="1761" pos:column="22">xmlElement</name> <init pos:line="1761" pos:column="33">= <expr><call><name><name pos:line="1761" pos:column="35">fileSetup</name><op:operator pos:line="1761" pos:column="44">.</op:operator><name pos:line="1761" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1761" pos:column="69">(<argument><expr><name pos:line="1761" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1761" pos:column="75">"A.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1763" pos:column="13">var</name></type> <name pos:line="1763" pos:column="17">globalScope</name> <init pos:line="1763" pos:column="29">= <expr><call><name><name pos:line="1763" pos:column="31">codeParser</name><op:operator pos:line="1763" pos:column="41">.</op:operator><name pos:line="1763" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="1763" pos:column="55">(<argument><expr><name pos:line="1763" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1764" pos:column="13">Assert</name><op:operator pos:line="1764" pos:column="19">.</op:operator><name pos:line="1764" pos:column="20">AreEqual</name></name><argument_list pos:line="1764" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1764" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1764" pos:column="32">globalScope</name><op:operator pos:line="1764" pos:column="43">.</op:operator><name pos:line="1764" pos:column="44">ChildStatements</name><op:operator pos:line="1764" pos:column="59">.</op:operator><name pos:line="1764" pos:column="60">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1765" pos:column="13">var</name></type> <name pos:line="1765" pos:column="17">globalFoo</name> <init pos:line="1765" pos:column="27">= <expr><call><name><name pos:line="1765" pos:column="29">globalScope</name><op:operator pos:line="1765" pos:column="40">.</op:operator><name><name pos:line="1765" pos:column="41">GetNamedChildren</name><argument_list pos:line="1765" pos:column="57">&lt;<argument><name pos:line="1765" pos:column="58">VariableDeclaration</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1765" pos:column="78">(<argument><expr><lit:literal type="string" pos:line="1765" pos:column="79">"foo"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1765" pos:column="85">.</op:operator><call><name pos:line="1765" pos:column="86">First</name><argument_list pos:line="1765" pos:column="91">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1766" pos:column="13">var</name></type> main <init pos:line="1766" pos:column="22">= <expr><call><name><name pos:line="1766" pos:column="24">globalScope</name><op:operator pos:line="1766" pos:column="35">.</op:operator><name><name pos:line="1766" pos:column="36">GetNamedChildren</name><argument_list pos:line="1766" pos:column="52">&lt;<argument><name pos:line="1766" pos:column="53">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1766" pos:column="70">(<argument><expr><lit:literal type="string" pos:line="1766" pos:column="71">"main"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1766" pos:column="78">.</op:operator><call><name pos:line="1766" pos:column="79">First</name><argument_list pos:line="1766" pos:column="84">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1767" pos:column="13">Assert</name><op:operator pos:line="1767" pos:column="19">.</op:operator><name pos:line="1767" pos:column="20">AreEqual</name></name><argument_list pos:line="1767" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1767" pos:column="29">4</lit:literal></expr></argument>, <argument><expr pos:line="1767" pos:column="32">main<op:operator pos:line="1767" pos:column="36">.</op:operator><name><name pos:line="1767" pos:column="37">ChildStatements</name><op:operator pos:line="1767" pos:column="52">.</op:operator><name pos:line="1767" pos:column="53">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1769" pos:column="13">var</name></type> <name pos:line="1769" pos:column="17">globalFooUse</name> <init pos:line="1769" pos:column="30">= <expr pos:line="1769" pos:column="32">main<op:operator pos:line="1769" pos:column="36">.</op:operator><name><name pos:line="1769" pos:column="37">ChildStatements</name><index pos:line="1769" pos:column="52">[<expr><lit:literal type="number" pos:line="1769" pos:column="53">0</lit:literal></expr>]</index></name><op:operator pos:line="1769" pos:column="55">.</op:operator><call><name><name pos:line="1769" pos:column="56">Content</name><op:operator pos:line="1769" pos:column="63">.</op:operator><name><name pos:line="1769" pos:column="64">GetDescendantsAndSelf</name><argument_list pos:line="1769" pos:column="85">&lt;<argument><name pos:line="1769" pos:column="86">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1769" pos:column="94">()</argument_list></call><op:operator pos:line="1769" pos:column="96">.</op:operator><call><name pos:line="1769" pos:column="97">First</name><argument_list pos:line="1769" pos:column="102">(<argument><expr><lambda><name pos:line="1769" pos:column="103">n</name> <op:operator pos:line="1769" pos:column="105">=&gt;</op:operator> <name><name pos:line="1769" pos:column="108">n</name><op:operator pos:line="1769" pos:column="109">.</op:operator><name pos:line="1769" pos:column="110">Name</name></name> <op:operator pos:line="1769" pos:column="115">==</op:operator> <lit:literal type="string" pos:line="1769" pos:column="118">"foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1770" pos:column="13">var</name></type> <name pos:line="1770" pos:column="17">globalFooUseMatches</name> <init pos:line="1770" pos:column="37">= <expr><call><name><name pos:line="1770" pos:column="39">globalFooUse</name><op:operator pos:line="1770" pos:column="51">.</op:operator><name pos:line="1770" pos:column="52">FindMatches</name></name><argument_list pos:line="1770" pos:column="63">()</argument_list></call><op:operator pos:line="1770" pos:column="65">.</op:operator><call><name pos:line="1770" pos:column="66">ToList</name><argument_list pos:line="1770" pos:column="72">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1771" pos:column="13">Assert</name><op:operator pos:line="1771" pos:column="19">.</op:operator><name pos:line="1771" pos:column="20">AreEqual</name></name><argument_list pos:line="1771" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1771" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1771" pos:column="32">globalFooUseMatches</name><op:operator pos:line="1771" pos:column="51">.</op:operator><name pos:line="1771" pos:column="52">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1772" pos:column="13">Assert</name><op:operator pos:line="1772" pos:column="19">.</op:operator><name pos:line="1772" pos:column="20">AreSame</name></name><argument_list pos:line="1772" pos:column="27">(<argument><expr><name pos:line="1772" pos:column="28">globalFoo</name></expr></argument>, <argument><expr><name><name pos:line="1772" pos:column="39">globalFooUseMatches</name><index pos:line="1772" pos:column="58">[<expr><lit:literal type="number" pos:line="1772" pos:column="59">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1774" pos:column="13">var</name></type> <name pos:line="1774" pos:column="17">localFoo</name> <init pos:line="1774" pos:column="26">= <expr pos:line="1774" pos:column="28">main<op:operator pos:line="1774" pos:column="32">.</op:operator><call><name><name pos:line="1774" pos:column="33">GetNamedChildren</name><argument_list pos:line="1774" pos:column="49">&lt;<argument><name pos:line="1774" pos:column="50">VariableDeclaration</name></argument>&gt;</argument_list></name><argument_list pos:line="1774" pos:column="70">(<argument><expr><lit:literal type="string" pos:line="1774" pos:column="71">"foo"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1774" pos:column="77">.</op:operator><call><name pos:line="1774" pos:column="78">First</name><argument_list pos:line="1774" pos:column="83">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1775" pos:column="13">var</name></type> <name pos:line="1775" pos:column="17">localFooUse</name> <init pos:line="1775" pos:column="29">= <expr pos:line="1775" pos:column="31">main<op:operator pos:line="1775" pos:column="35">.</op:operator><name><name pos:line="1775" pos:column="36">ChildStatements</name><index pos:line="1775" pos:column="51">[<expr><lit:literal type="number" pos:line="1775" pos:column="52">2</lit:literal></expr>]</index></name><op:operator pos:line="1775" pos:column="54">.</op:operator><call><name><name pos:line="1775" pos:column="55">Content</name><op:operator pos:line="1775" pos:column="62">.</op:operator><name><name pos:line="1775" pos:column="63">GetDescendantsAndSelf</name><argument_list pos:line="1775" pos:column="84">&lt;<argument><name pos:line="1775" pos:column="85">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1775" pos:column="93">()</argument_list></call><op:operator pos:line="1775" pos:column="95">.</op:operator><call><name pos:line="1775" pos:column="96">First</name><argument_list pos:line="1775" pos:column="101">(<argument><expr><lambda><name pos:line="1775" pos:column="102">n</name> <op:operator pos:line="1775" pos:column="104">=&gt;</op:operator> <name><name pos:line="1775" pos:column="107">n</name><op:operator pos:line="1775" pos:column="108">.</op:operator><name pos:line="1775" pos:column="109">Name</name></name> <op:operator pos:line="1775" pos:column="114">==</op:operator> <lit:literal type="string" pos:line="1775" pos:column="117">"foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1776" pos:column="13">var</name></type> <name pos:line="1776" pos:column="17">localFooUseMatches</name> <init pos:line="1776" pos:column="36">= <expr><call><name><name pos:line="1776" pos:column="38">localFooUse</name><op:operator pos:line="1776" pos:column="49">.</op:operator><name pos:line="1776" pos:column="50">FindMatches</name></name><argument_list pos:line="1776" pos:column="61">()</argument_list></call><op:operator pos:line="1776" pos:column="63">.</op:operator><call><name pos:line="1776" pos:column="64">ToList</name><argument_list pos:line="1776" pos:column="70">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1777" pos:column="13">Assert</name><op:operator pos:line="1777" pos:column="19">.</op:operator><name pos:line="1777" pos:column="20">AreEqual</name></name><argument_list pos:line="1777" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1777" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1777" pos:column="32">localFooUseMatches</name><op:operator pos:line="1777" pos:column="50">.</op:operator><name pos:line="1777" pos:column="51">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1778" pos:column="13">Assert</name><op:operator pos:line="1778" pos:column="19">.</op:operator><name pos:line="1778" pos:column="20">AreSame</name></name><argument_list pos:line="1778" pos:column="27">(<argument><expr><name pos:line="1778" pos:column="28">localFoo</name></expr></argument>, <argument><expr><name><name pos:line="1778" pos:column="38">localFooUseMatches</name><index pos:line="1778" pos:column="56">[<expr><lit:literal type="number" pos:line="1778" pos:column="57">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1781" pos:column="9">[<expr><name pos:line="1781" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1782" pos:column="9">public</specifier> <name pos:line="1782" pos:column="16">void</name></type> <name pos:line="1782" pos:column="21">TestVariableDeclaredInCallingObjectWithParentClass</name><parameter_list pos:line="1782" pos:column="71">()</parameter_list> <block pos:line="1782" pos:column="74">{
            <comment type="line" pos:line="1783" pos:column="13">//class A { B b; };</comment>
            <decl_stmt><decl><type><name pos:line="1784" pos:column="13">string</name></type> <name pos:line="1784" pos:column="20">a_xml</name> <init pos:line="1784" pos:column="26">= <expr><lit:literal type="string" pos:line="1784" pos:column="28">@"&lt;class pos:line=""1"" pos:column="&gt;class &lt;name pos:line=""1"" pos:column="&gt;A&lt;/name&gt; &lt;block pos:line=""1"" pos:column="&gt;{&lt;private type=""default"" pos:line=""1"" pos:column=&gt; &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""1"" pos:column=""&gt;B&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""1"" pos:column=""&gt;b&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt; &lt;/private&gt;}&lt;/block&gt;;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="1786" pos:column="13">//class B { void Foo() { } };</comment>
            <decl_stmt><decl><type><name pos:line="1787" pos:column="13">string</name></type> <name pos:line="1787" pos:column="20">b_xml</name> <init pos:line="1787" pos:column="26">= <expr><lit:literal type="string" pos:line="1787" pos:column="28">@"&lt;class pos:line=""1"" pos:column="&gt;class &lt;name pos:line=""1"" pos:column="&gt;B&lt;/name&gt; &lt;block pos:line=""1"" pos:column="&gt;{&lt;private type=""default"" pos:line=""1"" pos:column=&gt; &lt;function&gt;&lt;type&gt;&lt;name pos:line=""1"" pos:column=""&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""1"" pos:column=""&gt;Foo&lt;/name&gt;&lt;parameter_list pos:line=""1"" pos:column=""&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""1"" pos:column=""&gt;{ }&lt;/block&gt;&lt;/function&gt; &lt;/private&gt;}&lt;/block&gt;;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="1789" pos:column="13">//class C : A { };</comment>
            <decl_stmt><decl><type><name pos:line="1790" pos:column="13">string</name></type> <name pos:line="1790" pos:column="20">c_xml</name> <init pos:line="1790" pos:column="26">= <expr><lit:literal type="string" pos:line="1790" pos:column="28">@"&lt;class pos:line=""1"" pos:column="&gt;class &lt;name pos:line=""1"" pos:column="&gt;C&lt;/name&gt; &lt;super pos:line=""1"" pos:column="&gt;: &lt;name pos:line=""1"" pos:column=""&gt;A&lt;/name&gt;&lt;/super&gt; &lt;block pos:line=""1"" pos:column=""&gt;{&lt;private type=""default"" pos:line=""1"" pos:column=&gt; &lt;/private&gt;}&lt;/block&gt;;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="1792" pos:column="13">//class D {</comment>
            <comment type="line" pos:line="1793" pos:column="13">//	C c;</comment>
            <comment type="line" pos:line="1794" pos:column="13">//	void Bar() { c.b.Foo(); }</comment>
            <comment type="line" pos:line="1795" pos:column="13">//};</comment>
            <decl_stmt><decl><type><name pos:line="1796" pos:column="13">string</name></type> <name pos:line="1796" pos:column="20">d_xml</name> <init pos:line="1796" pos:column="26">= <expr><lit:literal type="string" pos:line="1796" pos:column="28">@"&lt;class pos:line=""1"" pos:column="&gt;class &lt;name pos:line=""1"" pos:column="&gt;D&lt;/name&gt; &lt;block pos:line=""1"" pos:column="&gt;{&lt;private type=""default"" pos:line=""1"" pos:column=&gt;
    &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""2"" pos:column="&gt;C&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""2"" pos:column="&gt;c&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
    &lt;function&gt;&lt;type&gt;&lt;name pos:line=""3"" pos:column="&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""3"" pos:column=""&gt;Bar&lt;/name&gt;&lt;parameter_list pos:line=""3"" pos:column=""&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""3"" pos:column=""&gt;{ &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;&lt;name pos:line=""3"" pos:column=""&gt;c&lt;/name&gt;&lt;op:operator pos:line=""3"" pos:column=""&gt;.&lt;/op:operator&gt;&lt;name pos:line=""3"" pos:column=""&gt;b&lt;/name&gt;&lt;op:operator pos:line=""3"" pos:column=""&gt;.&lt;/op:operator&gt;&lt;name pos:line=""3"" pos:column=""&gt;Foo&lt;/name&gt;&lt;/name&gt;&lt;argument_list pos:line=""3"" pos:column=""&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt; }&lt;/block&gt;&lt;/function&gt;
&lt;/private&gt;}&lt;/block&gt;;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1801" pos:column="13">var</name></type> <name pos:line="1801" pos:column="17">aUnit</name> <init pos:line="1801" pos:column="23">= <expr><call><name><name pos:line="1801" pos:column="25">fileSetup</name><op:operator pos:line="1801" pos:column="34">.</op:operator><name pos:line="1801" pos:column="35">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1801" pos:column="59">(<argument><expr><name pos:line="1801" pos:column="60">a_xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1801" pos:column="67">"A.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1802" pos:column="13">var</name></type> <name pos:line="1802" pos:column="17">bUnit</name> <init pos:line="1802" pos:column="23">= <expr><call><name><name pos:line="1802" pos:column="25">fileSetup</name><op:operator pos:line="1802" pos:column="34">.</op:operator><name pos:line="1802" pos:column="35">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1802" pos:column="59">(<argument><expr><name pos:line="1802" pos:column="60">b_xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1802" pos:column="67">"B.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1803" pos:column="13">var</name></type> <name pos:line="1803" pos:column="17">cUnit</name> <init pos:line="1803" pos:column="23">= <expr><call><name><name pos:line="1803" pos:column="25">fileSetup</name><op:operator pos:line="1803" pos:column="34">.</op:operator><name pos:line="1803" pos:column="35">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1803" pos:column="59">(<argument><expr><name pos:line="1803" pos:column="60">c_xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1803" pos:column="67">"C.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1804" pos:column="13">var</name></type> <name pos:line="1804" pos:column="17">dUnit</name> <init pos:line="1804" pos:column="23">= <expr><call><name><name pos:line="1804" pos:column="25">fileSetup</name><op:operator pos:line="1804" pos:column="34">.</op:operator><name pos:line="1804" pos:column="35">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1804" pos:column="59">(<argument><expr><name pos:line="1804" pos:column="60">d_xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1804" pos:column="67">"D.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1806" pos:column="13">var</name></type> <name pos:line="1806" pos:column="17">globalScope</name> <init pos:line="1806" pos:column="29">= <expr><call><name><name pos:line="1806" pos:column="31">codeParser</name><op:operator pos:line="1806" pos:column="41">.</op:operator><name pos:line="1806" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="1806" pos:column="55">(<argument><expr><name pos:line="1806" pos:column="56">aUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="1807" pos:column="13">globalScope</name> <op:operator pos:line="1807" pos:column="25">=</op:operator> <call><name><name pos:line="1807" pos:column="27">globalScope</name><op:operator pos:line="1807" pos:column="38">.</op:operator><name pos:line="1807" pos:column="39">Merge</name></name><argument_list pos:line="1807" pos:column="44">(<argument><expr><call><name><name pos:line="1807" pos:column="45">codeParser</name><op:operator pos:line="1807" pos:column="55">.</op:operator><name pos:line="1807" pos:column="56">ParseFileUnit</name></name><argument_list pos:line="1807" pos:column="69">(<argument><expr><name pos:line="1807" pos:column="70">bUnit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="1808" pos:column="13">globalScope</name> <op:operator pos:line="1808" pos:column="25">=</op:operator> <call><name><name pos:line="1808" pos:column="27">globalScope</name><op:operator pos:line="1808" pos:column="38">.</op:operator><name pos:line="1808" pos:column="39">Merge</name></name><argument_list pos:line="1808" pos:column="44">(<argument><expr><call><name><name pos:line="1808" pos:column="45">codeParser</name><op:operator pos:line="1808" pos:column="55">.</op:operator><name pos:line="1808" pos:column="56">ParseFileUnit</name></name><argument_list pos:line="1808" pos:column="69">(<argument><expr><name pos:line="1808" pos:column="70">cUnit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="1809" pos:column="13">globalScope</name> <op:operator pos:line="1809" pos:column="25">=</op:operator> <call><name><name pos:line="1809" pos:column="27">globalScope</name><op:operator pos:line="1809" pos:column="38">.</op:operator><name pos:line="1809" pos:column="39">Merge</name></name><argument_list pos:line="1809" pos:column="44">(<argument><expr><call><name><name pos:line="1809" pos:column="45">codeParser</name><op:operator pos:line="1809" pos:column="55">.</op:operator><name pos:line="1809" pos:column="56">ParseFileUnit</name></name><argument_list pos:line="1809" pos:column="69">(<argument><expr><name pos:line="1809" pos:column="70">dUnit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1811" pos:column="13">var</name></type> <name pos:line="1811" pos:column="17">typeA</name> <init pos:line="1811" pos:column="23">= <expr><call><name><name pos:line="1811" pos:column="25">globalScope</name><op:operator pos:line="1811" pos:column="36">.</op:operator><name><name pos:line="1811" pos:column="37">GetNamedChildren</name><argument_list pos:line="1811" pos:column="53">&lt;<argument><name pos:line="1811" pos:column="54">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1811" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="1811" pos:column="70">"A"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1811" pos:column="74">.</op:operator><call><name pos:line="1811" pos:column="75">FirstOrDefault</name><argument_list pos:line="1811" pos:column="89">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1812" pos:column="13">var</name></type> <name pos:line="1812" pos:column="17">typeB</name> <init pos:line="1812" pos:column="23">= <expr><call><name><name pos:line="1812" pos:column="25">globalScope</name><op:operator pos:line="1812" pos:column="36">.</op:operator><name><name pos:line="1812" pos:column="37">GetNamedChildren</name><argument_list pos:line="1812" pos:column="53">&lt;<argument><name pos:line="1812" pos:column="54">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1812" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="1812" pos:column="70">"B"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1812" pos:column="74">.</op:operator><call><name pos:line="1812" pos:column="75">FirstOrDefault</name><argument_list pos:line="1812" pos:column="89">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1813" pos:column="13">var</name></type> <name pos:line="1813" pos:column="17">typeC</name> <init pos:line="1813" pos:column="23">= <expr><call><name><name pos:line="1813" pos:column="25">globalScope</name><op:operator pos:line="1813" pos:column="36">.</op:operator><name><name pos:line="1813" pos:column="37">GetNamedChildren</name><argument_list pos:line="1813" pos:column="53">&lt;<argument><name pos:line="1813" pos:column="54">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1813" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="1813" pos:column="70">"C"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1813" pos:column="74">.</op:operator><call><name pos:line="1813" pos:column="75">FirstOrDefault</name><argument_list pos:line="1813" pos:column="89">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1814" pos:column="13">var</name></type> <name pos:line="1814" pos:column="17">typeD</name> <init pos:line="1814" pos:column="23">= <expr><call><name><name pos:line="1814" pos:column="25">globalScope</name><op:operator pos:line="1814" pos:column="36">.</op:operator><name><name pos:line="1814" pos:column="37">GetNamedChildren</name><argument_list pos:line="1814" pos:column="53">&lt;<argument><name pos:line="1814" pos:column="54">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1814" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="1814" pos:column="70">"D"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1814" pos:column="74">.</op:operator><call><name pos:line="1814" pos:column="75">FirstOrDefault</name><argument_list pos:line="1814" pos:column="89">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="1816" pos:column="13">Assert</name><op:operator pos:line="1816" pos:column="19">.</op:operator><name pos:line="1816" pos:column="20">IsNotNull</name></name><argument_list pos:line="1816" pos:column="29">(<argument><expr><name pos:line="1816" pos:column="30">typeA</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1816" pos:column="37">"could not find class A"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1817" pos:column="13">Assert</name><op:operator pos:line="1817" pos:column="19">.</op:operator><name pos:line="1817" pos:column="20">IsNotNull</name></name><argument_list pos:line="1817" pos:column="29">(<argument><expr><name pos:line="1817" pos:column="30">typeB</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1817" pos:column="37">"could not find class B"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1818" pos:column="13">Assert</name><op:operator pos:line="1818" pos:column="19">.</op:operator><name pos:line="1818" pos:column="20">IsNotNull</name></name><argument_list pos:line="1818" pos:column="29">(<argument><expr><name pos:line="1818" pos:column="30">typeC</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1818" pos:column="37">"could not find class C"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1819" pos:column="13">Assert</name><op:operator pos:line="1819" pos:column="19">.</op:operator><name pos:line="1819" pos:column="20">IsNotNull</name></name><argument_list pos:line="1819" pos:column="29">(<argument><expr><name pos:line="1819" pos:column="30">typeD</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1819" pos:column="37">"could not find class D"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1821" pos:column="13">var</name></type> <name pos:line="1821" pos:column="17">adotB</name> <init pos:line="1821" pos:column="23">= <expr><call><name><name pos:line="1821" pos:column="25">typeA</name><op:operator pos:line="1821" pos:column="30">.</op:operator><name><name pos:line="1821" pos:column="31">GetNamedChildren</name><argument_list pos:line="1821" pos:column="47">&lt;<argument><name pos:line="1821" pos:column="48">VariableDeclaration</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1821" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="1821" pos:column="69">"b"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1821" pos:column="73">.</op:operator><call><name pos:line="1821" pos:column="74">FirstOrDefault</name><argument_list pos:line="1821" pos:column="88">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1822" pos:column="13">Assert</name><op:operator pos:line="1822" pos:column="19">.</op:operator><name pos:line="1822" pos:column="20">IsNotNull</name></name><argument_list pos:line="1822" pos:column="29">(<argument><expr><name pos:line="1822" pos:column="30">adotB</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1822" pos:column="37">"could not find variable A.b"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1823" pos:column="13">Assert</name><op:operator pos:line="1823" pos:column="19">.</op:operator><name pos:line="1823" pos:column="20">AreEqual</name></name><argument_list pos:line="1823" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1823" pos:column="29">"b"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1823" pos:column="34">adotB</name><op:operator pos:line="1823" pos:column="39">.</op:operator><name pos:line="1823" pos:column="40">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1825" pos:column="13">var</name></type> <name pos:line="1825" pos:column="17">bDotFoo</name> <init pos:line="1825" pos:column="25">= <expr><call><name><name pos:line="1825" pos:column="27">typeB</name><op:operator pos:line="1825" pos:column="32">.</op:operator><name><name pos:line="1825" pos:column="33">GetNamedChildren</name><argument_list pos:line="1825" pos:column="49">&lt;<argument><name pos:line="1825" pos:column="50">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1825" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="1825" pos:column="68">"Foo"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1825" pos:column="74">.</op:operator><call><name pos:line="1825" pos:column="75">FirstOrDefault</name><argument_list pos:line="1825" pos:column="89">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1826" pos:column="13">Assert</name><op:operator pos:line="1826" pos:column="19">.</op:operator><name pos:line="1826" pos:column="20">IsNotNull</name></name><argument_list pos:line="1826" pos:column="29">(<argument><expr><name pos:line="1826" pos:column="30">bDotFoo</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1826" pos:column="39">"could not method B.Foo()"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1828" pos:column="13">var</name></type> <name pos:line="1828" pos:column="17">dDotBar</name> <init pos:line="1828" pos:column="25">= <expr><call><name><name pos:line="1828" pos:column="27">typeD</name><op:operator pos:line="1828" pos:column="32">.</op:operator><name><name pos:line="1828" pos:column="33">GetNamedChildren</name><argument_list pos:line="1828" pos:column="49">&lt;<argument><name pos:line="1828" pos:column="50">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1828" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="1828" pos:column="68">"Bar"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1828" pos:column="74">.</op:operator><call><name pos:line="1828" pos:column="75">FirstOrDefault</name><argument_list pos:line="1828" pos:column="89">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1829" pos:column="13">Assert</name><op:operator pos:line="1829" pos:column="19">.</op:operator><name pos:line="1829" pos:column="20">IsNotNull</name></name><argument_list pos:line="1829" pos:column="29">(<argument><expr><name pos:line="1829" pos:column="30">dDotBar</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1829" pos:column="39">"could not find method D.Bar()"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1831" pos:column="13">var</name></type> <name pos:line="1831" pos:column="17">callToFoo</name> <init pos:line="1831" pos:column="27">= <expr><call><name><name pos:line="1831" pos:column="29">dDotBar</name><op:operator pos:line="1831" pos:column="36">.</op:operator><name><name pos:line="1831" pos:column="37">FindExpressions</name><argument_list pos:line="1831" pos:column="52">&lt;<argument><name pos:line="1831" pos:column="53">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1831" pos:column="64">(<argument><expr><lit:literal type="boolean" pos:line="1831" pos:column="65">true</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1831" pos:column="70">.</op:operator><call><name pos:line="1831" pos:column="71">FirstOrDefault</name><argument_list pos:line="1831" pos:column="85">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1832" pos:column="13">Assert</name><op:operator pos:line="1832" pos:column="19">.</op:operator><name pos:line="1832" pos:column="20">IsNotNull</name></name><argument_list pos:line="1832" pos:column="29">(<argument><expr><name pos:line="1832" pos:column="30">callToFoo</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1832" pos:column="41">"could not find any method calls in D.Bar()"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="1834" pos:column="13">Assert</name><op:operator pos:line="1834" pos:column="19">.</op:operator><name pos:line="1834" pos:column="20">AreEqual</name></name><argument_list pos:line="1834" pos:column="28">(<argument><expr><name pos:line="1834" pos:column="29">bDotFoo</name></expr></argument>, <argument><expr><call><name><name pos:line="1834" pos:column="38">callToFoo</name><op:operator pos:line="1834" pos:column="47">.</op:operator><name pos:line="1834" pos:column="48">FindMatches</name></name><argument_list pos:line="1834" pos:column="59">()</argument_list></call><op:operator pos:line="1834" pos:column="61">.</op:operator><call><name pos:line="1834" pos:column="62">FirstOrDefault</name><argument_list pos:line="1834" pos:column="76">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1837" pos:column="9">[<expr><name pos:line="1837" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1838" pos:column="9">public</specifier> <name pos:line="1838" pos:column="16">void</name></type> <name pos:line="1838" pos:column="21">TestResolveArrayVariable_Local</name><parameter_list pos:line="1838" pos:column="51">()</parameter_list> <block pos:line="1838" pos:column="54">{
            <comment type="line" pos:line="1839" pos:column="13">//int Foo() {</comment>
            <comment type="line" pos:line="1840" pos:column="13">//  if(MethodCall()) {</comment>
            <comment type="line" pos:line="1841" pos:column="13">//    int* bar = malloc(SIZE);</comment>
            <comment type="line" pos:line="1842" pos:column="13">//    bar[0] = 42;</comment>
            <comment type="line" pos:line="1843" pos:column="13">//  }</comment>
            <comment type="line" pos:line="1844" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="1845" pos:column="13">string</name></type> <name pos:line="1845" pos:column="20">xml</name> <init pos:line="1845" pos:column="24">= <expr><lit:literal type="string" pos:line="1845" pos:column="26">@"&lt;function&gt;&lt;type&gt;&lt;name pos:line=""1"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""1"" pos:column="&gt;Foo&lt;/name&gt;&lt;parameter_list pos:line=""1"" pos:column="&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""1"" pos:column=""&gt;{
  &lt;if pos:line=""2"" pos:column="&gt;if&lt;condition pos:line=""2"" pos:column="&gt;(&lt;expr&gt;&lt;call&gt;&lt;name pos:line=""2"" pos:column="&gt;MethodCall&lt;/name&gt;&lt;argument_list pos:line=""2"" pos:column=""&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;)&lt;/condition&gt;&lt;then pos:line=""2"" pos:column=""&gt; &lt;block pos:line=""2"" pos:column=""&gt;{
    &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""3"" pos:column="&gt;int&lt;/name&gt;&lt;type:modifier pos:line=""3"" pos:column="&gt;*&lt;/type:modifier&gt;&lt;/type&gt; &lt;name pos:line=""3"" pos:column=""&gt;bar&lt;/name&gt; &lt;init pos:line=""3"" pos:column=""&gt;= &lt;expr&gt;&lt;call&gt;&lt;name pos:line=""3"" pos:column=""&gt;malloc&lt;/name&gt;&lt;argument_list pos:line=""3"" pos:column=""&gt;(&lt;argument&gt;&lt;expr&gt;&lt;name pos:line=""3"" pos:column=""&gt;SIZE&lt;/name&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;&lt;/init&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
    &lt;expr_stmt&gt;&lt;expr&gt;&lt;name&gt;&lt;name pos:line=""4"" pos:column="&gt;bar&lt;/name&gt;&lt;index pos:line=""4"" pos:column="&gt;[&lt;expr&gt;&lt;lit:literal type=""number"" pos:line=""4"" pos:column&gt;0&lt;/lit:literal&gt;&lt;/expr&gt;]&lt;/index&gt;&lt;/name&gt; &lt;op:operator pos:line=""4"" pos:column=""&gt;=&lt;/op:operator&gt; &lt;lit:literal type=""number"" pos:line=""4"" pos:column=&gt;42&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
  }&lt;/block&gt;&lt;/then&gt;&lt;/if&gt;
}&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1851" pos:column="13">var</name></type> <name pos:line="1851" pos:column="17">xmlElement</name> <init pos:line="1851" pos:column="28">= <expr><call><name><name pos:line="1851" pos:column="30">fileSetup</name><op:operator pos:line="1851" pos:column="39">.</op:operator><name pos:line="1851" pos:column="40">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1851" pos:column="64">(<argument><expr><name pos:line="1851" pos:column="65">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1851" pos:column="70">"a.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1853" pos:column="13">var</name></type> <name pos:line="1853" pos:column="17">globalScope</name> <init pos:line="1853" pos:column="29">= <expr><call><name><name pos:line="1853" pos:column="31">codeParser</name><op:operator pos:line="1853" pos:column="41">.</op:operator><name pos:line="1853" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="1853" pos:column="55">(<argument><expr><name pos:line="1853" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1854" pos:column="13">var</name></type> <name pos:line="1854" pos:column="17">ifStmt</name> <init pos:line="1854" pos:column="24">= <expr><call><name><name pos:line="1854" pos:column="26">globalScope</name><op:operator pos:line="1854" pos:column="37">.</op:operator><name><name pos:line="1854" pos:column="38">GetDescendants</name><argument_list pos:line="1854" pos:column="52">&lt;<argument><name pos:line="1854" pos:column="53">IfStatement</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1854" pos:column="65">()</argument_list></call><op:operator pos:line="1854" pos:column="67">.</op:operator><call><name pos:line="1854" pos:column="68">First</name><argument_list pos:line="1854" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1855" pos:column="13">Assert</name><op:operator pos:line="1855" pos:column="19">.</op:operator><name pos:line="1855" pos:column="20">AreEqual</name></name><argument_list pos:line="1855" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1855" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="1855" pos:column="32">ifStmt</name><op:operator pos:line="1855" pos:column="38">.</op:operator><name pos:line="1855" pos:column="39">ChildStatements</name><op:operator pos:line="1855" pos:column="54">.</op:operator><name pos:line="1855" pos:column="55">Count</name></name><argument_list pos:line="1855" pos:column="60">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1857" pos:column="13">var</name></type> <name pos:line="1857" pos:column="17">barDecl</name> <init pos:line="1857" pos:column="25">= <expr><name><name pos:line="1857" pos:column="27">ifStmt</name><op:operator pos:line="1857" pos:column="33">.</op:operator><name pos:line="1857" pos:column="34">ChildStatements</name><index pos:line="1857" pos:column="49">[<expr><lit:literal type="number" pos:line="1857" pos:column="50">0</lit:literal></expr>]</index></name><op:operator pos:line="1857" pos:column="52">.</op:operator><call><name><name pos:line="1857" pos:column="53">Content</name><op:operator pos:line="1857" pos:column="60">.</op:operator><name><name pos:line="1857" pos:column="61">GetDescendantsAndSelf</name><argument_list pos:line="1857" pos:column="82">&lt;<argument><name pos:line="1857" pos:column="83">VariableDeclaration</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1857" pos:column="103">()</argument_list></call><op:operator pos:line="1857" pos:column="105">.</op:operator><call><name pos:line="1857" pos:column="106">FirstOrDefault</name><argument_list pos:line="1857" pos:column="120">(<argument><expr><lambda><name pos:line="1857" pos:column="121">v</name> <op:operator pos:line="1857" pos:column="123">=&gt;</op:operator> <name><name pos:line="1857" pos:column="126">v</name><op:operator pos:line="1857" pos:column="127">.</op:operator><name pos:line="1857" pos:column="128">Name</name></name> <op:operator pos:line="1857" pos:column="133">==</op:operator> <lit:literal type="string" pos:line="1857" pos:column="136">"bar"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1858" pos:column="13">Assert</name><op:operator pos:line="1858" pos:column="19">.</op:operator><name pos:line="1858" pos:column="20">IsNotNull</name></name><argument_list pos:line="1858" pos:column="29">(<argument><expr><name pos:line="1858" pos:column="30">barDecl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1859" pos:column="13">var</name></type> <name pos:line="1859" pos:column="17">barUse</name> <init pos:line="1859" pos:column="24">= <expr><name><name pos:line="1859" pos:column="26">ifStmt</name><op:operator pos:line="1859" pos:column="32">.</op:operator><name pos:line="1859" pos:column="33">ChildStatements</name><index pos:line="1859" pos:column="48">[<expr><lit:literal type="number" pos:line="1859" pos:column="49">1</lit:literal></expr>]</index></name><op:operator pos:line="1859" pos:column="51">.</op:operator><call><name><name pos:line="1859" pos:column="52">Content</name><op:operator pos:line="1859" pos:column="59">.</op:operator><name><name pos:line="1859" pos:column="60">GetDescendantsAndSelf</name><argument_list pos:line="1859" pos:column="81">&lt;<argument><name pos:line="1859" pos:column="82">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1859" pos:column="90">()</argument_list></call><op:operator pos:line="1859" pos:column="92">.</op:operator><call><name pos:line="1859" pos:column="93">FirstOrDefault</name><argument_list pos:line="1859" pos:column="107">(<argument><expr><lambda><name pos:line="1859" pos:column="108">n</name> <op:operator pos:line="1859" pos:column="110">=&gt;</op:operator> <name><name pos:line="1859" pos:column="113">n</name><op:operator pos:line="1859" pos:column="114">.</op:operator><name pos:line="1859" pos:column="115">Name</name></name> <op:operator pos:line="1859" pos:column="120">==</op:operator> <lit:literal type="string" pos:line="1859" pos:column="123">"bar"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1860" pos:column="13">Assert</name><op:operator pos:line="1860" pos:column="19">.</op:operator><name pos:line="1860" pos:column="20">IsNotNull</name></name><argument_list pos:line="1860" pos:column="29">(<argument><expr><name pos:line="1860" pos:column="30">barUse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1861" pos:column="13">Assert</name><op:operator pos:line="1861" pos:column="19">.</op:operator><name pos:line="1861" pos:column="20">AreSame</name></name><argument_list pos:line="1861" pos:column="27">(<argument><expr><name pos:line="1861" pos:column="28">barDecl</name></expr></argument>, <argument><expr><call><name><name pos:line="1861" pos:column="37">barUse</name><op:operator pos:line="1861" pos:column="43">.</op:operator><name pos:line="1861" pos:column="44">FindMatches</name></name><argument_list pos:line="1861" pos:column="55">()</argument_list></call><op:operator pos:line="1861" pos:column="57">.</op:operator><call><name pos:line="1861" pos:column="58">FirstOrDefault</name><argument_list pos:line="1861" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1864" pos:column="9">[<expr><name pos:line="1864" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1865" pos:column="9">public</specifier> <name pos:line="1865" pos:column="16">void</name></type> <name pos:line="1865" pos:column="21">TestResolveArrayVariable_Field</name><parameter_list pos:line="1865" pos:column="51">()</parameter_list> <block pos:line="1865" pos:column="54">{
            <comment type="line" pos:line="1866" pos:column="13">//class A {</comment>
            <comment type="line" pos:line="1867" pos:column="13">//public:</comment>
            <comment type="line" pos:line="1868" pos:column="13">//  char* Foo;</comment>
            <comment type="line" pos:line="1869" pos:column="13">//  A() { </comment>
            <comment type="line" pos:line="1870" pos:column="13">//    Foo = malloc(SIZE);</comment>
            <comment type="line" pos:line="1871" pos:column="13">//    Foo[17] = 'x';</comment>
            <comment type="line" pos:line="1872" pos:column="13">//  }</comment>
            <comment type="line" pos:line="1873" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="1874" pos:column="13">string</name></type> <name pos:line="1874" pos:column="20">xml</name> <init pos:line="1874" pos:column="24">= <expr><lit:literal type="string" pos:line="1874" pos:column="26">@"&lt;class pos:line=""1"" pos:column="&gt;class &lt;name pos:line=""1"" pos:column="&gt;A&lt;/name&gt; &lt;block pos:line=""1"" pos:column="&gt;{&lt;private type=""default"" pos:line=""1"" pos:column=&gt;
&lt;/private&gt;&lt;public pos:line=""2"" pos:column="&gt;public:
  &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""3"" pos:column="&gt;char&lt;/name&gt;&lt;type:modifier pos:line=""3"" pos:column="&gt;*&lt;/type:modifier&gt;&lt;/type&gt; &lt;name pos:line=""3"" pos:column="&gt;Foo&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
  &lt;constructor&gt;&lt;name pos:line=""4"" pos:column="&gt;A&lt;/name&gt;&lt;parameter_list pos:line=""4"" pos:column="&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""4"" pos:column="&gt;{ 
    &lt;expr_stmt&gt;&lt;expr&gt;&lt;name pos:line=""5"" pos:column="&gt;Foo&lt;/name&gt; &lt;op:operator pos:line=""5"" pos:column="&gt;=&lt;/op:operator&gt; &lt;call&gt;&lt;name pos:line=""5"" pos:column=""&gt;malloc&lt;/name&gt;&lt;argument_list pos:line=""5"" pos:column=""&gt;(&lt;argument&gt;&lt;expr&gt;&lt;name pos:line=""5"" pos:column=""&gt;SIZE&lt;/name&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
    &lt;expr_stmt&gt;&lt;expr&gt;&lt;name&gt;&lt;name pos:line=""6"" pos:column="&gt;Foo&lt;/name&gt;&lt;index pos:line=""6"" pos:column="&gt;[&lt;expr&gt;&lt;lit:literal type=""number"" pos:line=""6"" pos:column&gt;17&lt;/lit:literal&gt;&lt;/expr&gt;]&lt;/index&gt;&lt;/name&gt; &lt;op:operator pos:line=""6"" pos:column=""&gt;=&lt;/op:operator&gt; &lt;lit:literal type=""char"" pos:line=""6"" pos:column=&gt;'x'&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
  }&lt;/block&gt;&lt;/constructor&gt;
&lt;/public&gt;}&lt;/block&gt;&lt;decl/&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1882" pos:column="13">XElement</name></type> <name pos:line="1882" pos:column="22">xmlElement</name> <init pos:line="1882" pos:column="33">= <expr><call><name><name pos:line="1882" pos:column="35">fileSetup</name><op:operator pos:line="1882" pos:column="44">.</op:operator><name pos:line="1882" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1882" pos:column="69">(<argument><expr><name pos:line="1882" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1882" pos:column="75">"A.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1884" pos:column="13">var</name></type> <name pos:line="1884" pos:column="17">globalScope</name> <init pos:line="1884" pos:column="29">= <expr><call><name><name pos:line="1884" pos:column="31">codeParser</name><op:operator pos:line="1884" pos:column="41">.</op:operator><name pos:line="1884" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="1884" pos:column="55">(<argument><expr><name pos:line="1884" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1885" pos:column="13">var</name></type> <name pos:line="1885" pos:column="17">fooDecl</name> <init pos:line="1885" pos:column="25">= <expr><call><name><name pos:line="1885" pos:column="27">globalScope</name><op:operator pos:line="1885" pos:column="38">.</op:operator><name><name pos:line="1885" pos:column="39">GetNamedChildren</name><argument_list pos:line="1885" pos:column="55">&lt;<argument><name pos:line="1885" pos:column="56">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1885" pos:column="71">(<argument><expr><lit:literal type="string" pos:line="1885" pos:column="72">"A"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1885" pos:column="76">.</op:operator><call><name pos:line="1885" pos:column="77">First</name><argument_list pos:line="1885" pos:column="82">()</argument_list></call><op:operator pos:line="1885" pos:column="84">.</op:operator><call><name><name pos:line="1885" pos:column="85">GetNamedChildren</name><argument_list pos:line="1885" pos:column="101">&lt;<argument><name pos:line="1885" pos:column="102">VariableDeclaration</name></argument>&gt;</argument_list></name><argument_list pos:line="1885" pos:column="122">(<argument><expr><lit:literal type="string" pos:line="1885" pos:column="123">"Foo"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1885" pos:column="129">.</op:operator><call><name pos:line="1885" pos:column="130">First</name><argument_list pos:line="1885" pos:column="135">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1886" pos:column="13">var</name></type> <name pos:line="1886" pos:column="17">aConstructor</name> <init pos:line="1886" pos:column="30">= <expr><call><name><name pos:line="1886" pos:column="32">globalScope</name><op:operator pos:line="1886" pos:column="43">.</op:operator><name><name pos:line="1886" pos:column="44">GetDescendants</name><argument_list pos:line="1886" pos:column="58">&lt;<argument><name pos:line="1886" pos:column="59">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1886" pos:column="76">()</argument_list></call><op:operator pos:line="1886" pos:column="78">.</op:operator><call><name pos:line="1886" pos:column="79">First</name><argument_list pos:line="1886" pos:column="84">(<argument><expr><lambda><name pos:line="1886" pos:column="85">m</name> <op:operator pos:line="1886" pos:column="87">=&gt;</op:operator> <name><name pos:line="1886" pos:column="90">m</name><op:operator pos:line="1886" pos:column="91">.</op:operator><name pos:line="1886" pos:column="92">Name</name></name> <op:operator pos:line="1886" pos:column="97">==</op:operator> <lit:literal type="string" pos:line="1886" pos:column="100">"A"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1887" pos:column="13">Assert</name><op:operator pos:line="1887" pos:column="19">.</op:operator><name pos:line="1887" pos:column="20">AreEqual</name></name><argument_list pos:line="1887" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1887" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1887" pos:column="32">aConstructor</name><op:operator pos:line="1887" pos:column="44">.</op:operator><name pos:line="1887" pos:column="45">ChildStatements</name><op:operator pos:line="1887" pos:column="60">.</op:operator><name pos:line="1887" pos:column="61">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1888" pos:column="13">var</name></type> <name pos:line="1888" pos:column="17">fooUse</name> <init pos:line="1888" pos:column="24">= <expr><name><name pos:line="1888" pos:column="26">aConstructor</name><op:operator pos:line="1888" pos:column="38">.</op:operator><name pos:line="1888" pos:column="39">ChildStatements</name><index pos:line="1888" pos:column="54">[<expr><lit:literal type="number" pos:line="1888" pos:column="55">1</lit:literal></expr>]</index></name><op:operator pos:line="1888" pos:column="57">.</op:operator><call><name><name pos:line="1888" pos:column="58">Content</name><op:operator pos:line="1888" pos:column="65">.</op:operator><name><name pos:line="1888" pos:column="66">GetDescendants</name><argument_list pos:line="1888" pos:column="80">&lt;<argument><name pos:line="1888" pos:column="81">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1888" pos:column="89">()</argument_list></call><op:operator pos:line="1888" pos:column="91">.</op:operator><call><name pos:line="1888" pos:column="92">FirstOrDefault</name><argument_list pos:line="1888" pos:column="106">(<argument><expr><lambda><name pos:line="1888" pos:column="107">n</name> <op:operator pos:line="1888" pos:column="109">=&gt;</op:operator> <name><name pos:line="1888" pos:column="112">n</name><op:operator pos:line="1888" pos:column="113">.</op:operator><name pos:line="1888" pos:column="114">Name</name></name> <op:operator pos:line="1888" pos:column="119">==</op:operator> <lit:literal type="string" pos:line="1888" pos:column="122">"Foo"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1889" pos:column="13">Assert</name><op:operator pos:line="1889" pos:column="19">.</op:operator><name pos:line="1889" pos:column="20">IsNotNull</name></name><argument_list pos:line="1889" pos:column="29">(<argument><expr><name pos:line="1889" pos:column="30">fooUse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1890" pos:column="13">Assert</name><op:operator pos:line="1890" pos:column="19">.</op:operator><name pos:line="1890" pos:column="20">AreSame</name></name><argument_list pos:line="1890" pos:column="27">(<argument><expr><name pos:line="1890" pos:column="28">fooDecl</name></expr></argument>, <argument><expr><call><name><name pos:line="1890" pos:column="37">fooUse</name><op:operator pos:line="1890" pos:column="43">.</op:operator><name pos:line="1890" pos:column="44">FindMatches</name></name><argument_list pos:line="1890" pos:column="55">()</argument_list></call><op:operator pos:line="1890" pos:column="57">.</op:operator><call><name pos:line="1890" pos:column="58">FirstOrDefault</name><argument_list pos:line="1890" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1893" pos:column="9">[<expr><name pos:line="1893" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1894" pos:column="9">public</specifier> <name pos:line="1894" pos:column="16">void</name></type> <name pos:line="1894" pos:column="21">TestResolveCallOnArrayVariable</name><parameter_list pos:line="1894" pos:column="51">()</parameter_list> <block pos:line="1894" pos:column="54">{
            <comment type="line" pos:line="1895" pos:column="13">//#include &lt;iostream&gt;</comment>
            <comment type="line" pos:line="1896" pos:column="13">//const int SIZE = 5;</comment>
            <comment type="line" pos:line="1897" pos:column="13">//class Foo {</comment>
            <comment type="line" pos:line="1898" pos:column="13">//public:</comment>
            <comment type="line" pos:line="1899" pos:column="13">//    int GetNum() { return 42; }</comment>
            <comment type="line" pos:line="1900" pos:column="13">//};</comment>
            <comment type="line" pos:line="1901" pos:column="13">//class Bar {</comment>
            <comment type="line" pos:line="1902" pos:column="13">//public:</comment>
            <comment type="line" pos:line="1903" pos:column="13">//    Foo FooArray[SIZE];</comment>
            <comment type="line" pos:line="1904" pos:column="13">//};</comment>
            <comment type="line" pos:line="1905" pos:column="13">//int main(int argc, char** argv) {</comment>
            <comment type="line" pos:line="1906" pos:column="13">//    Bar myBar;</comment>
            <comment type="line" pos:line="1907" pos:column="13">//    std::cout&lt;&lt; myBar.FooArray[0].GetNum() &lt;&lt; std::endl;</comment>
            <comment type="line" pos:line="1908" pos:column="13">//    return 0;</comment>
            <comment type="line" pos:line="1909" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="1910" pos:column="13">string</name></type> <name pos:line="1910" pos:column="20">xml</name> <init pos:line="1910" pos:column="24">= <expr><lit:literal type="string" pos:line="1910" pos:column="26">@"&lt;cpp:include pos:line=""1"" pos:column="&gt;#&lt;cpp:directive pos:line=""1"" pos:column="&gt;include&lt;/cpp:directive&gt; &lt;cpp:file pos:line=""1"" pos:column=""&gt;&amp;lt;iostream&amp;gt;&lt;/cpp:file&gt;&lt;/cpp:include&gt;
&lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;specifier pos:line=""2"" pos:column="&gt;const&lt;/specifier&gt; &lt;name pos:line=""2"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""2"" pos:column=""&gt;SIZE&lt;/name&gt; &lt;init pos:line=""2"" pos:column=""&gt;= &lt;expr&gt;&lt;lit:literal type=""number"" pos:line=""2"" pos:column=&gt;5&lt;/lit:literal&gt;&lt;/expr&gt;&lt;/init&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
&lt;class pos:line=""3"" pos:column="&gt;class &lt;name pos:line=""3"" pos:column="&gt;Foo&lt;/name&gt; &lt;block pos:line=""3"" pos:column=""&gt;{&lt;private type=""default"" pos:line=""3"" pos:column=&gt;
&lt;/private&gt;&lt;public pos:line=""4"" pos:column="&gt;public:
    &lt;function&gt;&lt;type&gt;&lt;name pos:line=""5"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""5"" pos:column="&gt;GetNum&lt;/name&gt;&lt;parameter_list pos:line=""5"" pos:column=""&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""5"" pos:column=""&gt;{ &lt;return pos:line=""5"" pos:column=""&gt;return &lt;expr&gt;&lt;lit:literal type=""number"" pos:line=""5"" pos:column=&gt;42&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt; }&lt;/block&gt;&lt;/function&gt;
&lt;/public&gt;}&lt;/block&gt;;&lt;/class&gt;
&lt;class pos:line=""7"" pos:column="&gt;class &lt;name pos:line=""7"" pos:column="&gt;Bar&lt;/name&gt; &lt;block pos:line=""7"" pos:column=""&gt;{&lt;private type=""default"" pos:line=""7"" pos:column=&gt;
&lt;/private&gt;&lt;public pos:line=""8"" pos:column="&gt;public:
    &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""9"" pos:column="&gt;Foo&lt;/name&gt;&lt;/type&gt; &lt;name&gt;&lt;name pos:line=""9"" pos:column="&gt;FooArray&lt;/name&gt;&lt;index pos:line=""9"" pos:column=""&gt;[&lt;expr&gt;&lt;name pos:line=""9"" pos:column=""&gt;SIZE&lt;/name&gt;&lt;/expr&gt;]&lt;/index&gt;&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
&lt;/public&gt;}&lt;/block&gt;;&lt;/class&gt;
&lt;function&gt;&lt;type&gt;&lt;name pos:line=""11"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""11"" pos:column="&gt;main&lt;/name&gt;&lt;parameter_list pos:line=""11"" pos:column="&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""11"" pos:column=""&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""11"" pos:column=""&gt;argc&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;, &lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""11"" pos:column=""&gt;char&lt;/name&gt;&lt;type:modifier pos:line=""11"" pos:column=""&gt;*&lt;/type:modifier&gt;&lt;type:modifier pos:line=""11"" pos:column=""&gt;*&lt;/type:modifier&gt;&lt;/type&gt; &lt;name pos:line=""11"" pos:column=""&gt;argv&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt; &lt;block pos:line=""11"" pos:column=""&gt;{
    &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""12"" pos:column="&gt;Bar&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""12"" pos:column="&gt;myBar&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
    &lt;expr_stmt&gt;&lt;expr&gt;&lt;name&gt;&lt;name pos:line=""13"" pos:column="&gt;std&lt;/name&gt;&lt;op:operator pos:line=""13"" pos:column="&gt;::&lt;/op:operator&gt;&lt;name pos:line=""13"" pos:column=""&gt;cout&lt;/name&gt;&lt;/name&gt;&lt;op:operator pos:line=""13"" pos:column=""&gt;&amp;lt;&amp;lt;&lt;/op:operator&gt; &lt;name&gt;&lt;name pos:line=""13"" pos:column=""&gt;myBar&lt;/name&gt;&lt;op:operator pos:line=""13"" pos:column=""&gt;.&lt;/op:operator&gt;&lt;name pos:line=""13"" pos:column=""&gt;FooArray&lt;/name&gt;&lt;index pos:line=""13"" pos:column=""&gt;[&lt;expr&gt;&lt;lit:literal type=""number"" pos:line=""13"" pos:column=&gt;0&lt;/lit:literal&gt;&lt;/expr&gt;]&lt;/index&gt;&lt;/name&gt;&lt;op:operator pos:line=""13"" pos:column=""&gt;.&lt;/op:operator&gt;&lt;call&gt;&lt;name pos:line=""13"" pos:column=""&gt;GetNum&lt;/name&gt;&lt;argument_list pos:line=""13"" pos:column=""&gt;()&lt;/argument_list&gt;&lt;/call&gt; &lt;op:operator pos:line=""13"" pos:column=""&gt;&amp;lt;&amp;lt;&lt;/op:operator&gt; &lt;name&gt;&lt;name pos:line=""13"" pos:column=""&gt;std&lt;/name&gt;&lt;op:operator pos:line=""13"" pos:column=""&gt;::&lt;/op:operator&gt;&lt;name pos:line=""13"" pos:column=""&gt;endl&lt;/name&gt;&lt;/name&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
    &lt;return pos:line=""14"" pos:column="&gt;return &lt;expr&gt;&lt;lit:literal type=""number"" pos:line=""14"" pos:column=&gt;0&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt;
}&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1925" pos:column="13">XElement</name></type> <name pos:line="1925" pos:column="22">xmlElement</name> <init pos:line="1925" pos:column="33">= <expr><call><name><name pos:line="1925" pos:column="35">fileSetup</name><op:operator pos:line="1925" pos:column="44">.</op:operator><name pos:line="1925" pos:column="45">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1925" pos:column="69">(<argument><expr><name pos:line="1925" pos:column="70">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1925" pos:column="75">"A.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1927" pos:column="13">var</name></type> <name pos:line="1927" pos:column="17">globalScope</name> <init pos:line="1927" pos:column="29">= <expr><call><name><name pos:line="1927" pos:column="31">codeParser</name><op:operator pos:line="1927" pos:column="41">.</op:operator><name pos:line="1927" pos:column="42">ParseFileUnit</name></name><argument_list pos:line="1927" pos:column="55">(<argument><expr><name pos:line="1927" pos:column="56">xmlElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1928" pos:column="13">var</name></type> <name pos:line="1928" pos:column="17">getNum</name> <init pos:line="1928" pos:column="24">= <expr><call><name><name pos:line="1928" pos:column="26">globalScope</name><op:operator pos:line="1928" pos:column="37">.</op:operator><name><name pos:line="1928" pos:column="38">GetDescendants</name><argument_list pos:line="1928" pos:column="52">&lt;<argument><name pos:line="1928" pos:column="53">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1928" pos:column="70">()</argument_list></call><op:operator pos:line="1928" pos:column="72">.</op:operator><call><name pos:line="1928" pos:column="73">FirstOrDefault</name><argument_list pos:line="1928" pos:column="87">(<argument><expr><lambda><name pos:line="1928" pos:column="88">m</name> <op:operator pos:line="1928" pos:column="90">=&gt;</op:operator> <name><name pos:line="1928" pos:column="93">m</name><op:operator pos:line="1928" pos:column="94">.</op:operator><name pos:line="1928" pos:column="95">Name</name></name> <op:operator pos:line="1928" pos:column="100">==</op:operator> <lit:literal type="string" pos:line="1928" pos:column="103">"GetNum"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1929" pos:column="13">Assert</name><op:operator pos:line="1929" pos:column="19">.</op:operator><name pos:line="1929" pos:column="20">IsNotNull</name></name><argument_list pos:line="1929" pos:column="29">(<argument><expr><name pos:line="1929" pos:column="30">getNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="1930" pos:column="13">var</name></type> main <init pos:line="1930" pos:column="22">= <expr><call><name><name pos:line="1930" pos:column="24">globalScope</name><op:operator pos:line="1930" pos:column="35">.</op:operator><name><name pos:line="1930" pos:column="36">GetDescendants</name><argument_list pos:line="1930" pos:column="50">&lt;<argument><name pos:line="1930" pos:column="51">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1930" pos:column="68">()</argument_list></call><op:operator pos:line="1930" pos:column="70">.</op:operator><call><name pos:line="1930" pos:column="71">FirstOrDefault</name><argument_list pos:line="1930" pos:column="85">(<argument><expr><lambda><name pos:line="1930" pos:column="86">m</name> <op:operator pos:line="1930" pos:column="88">=&gt;</op:operator> <name><name pos:line="1930" pos:column="91">m</name><op:operator pos:line="1930" pos:column="92">.</op:operator><name pos:line="1930" pos:column="93">Name</name></name> <op:operator pos:line="1930" pos:column="98">==</op:operator> <lit:literal type="string" pos:line="1930" pos:column="101">"main"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1931" pos:column="13">Assert</name><op:operator pos:line="1931" pos:column="19">.</op:operator><name pos:line="1931" pos:column="20">IsNotNull</name></name><argument_list pos:line="1931" pos:column="29">(<argument><expr pos:line="1931" pos:column="30">main</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1932" pos:column="13">Assert</name><op:operator pos:line="1932" pos:column="19">.</op:operator><name pos:line="1932" pos:column="20">AreEqual</name></name><argument_list pos:line="1932" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1932" pos:column="29">3</lit:literal></expr></argument>, <argument><expr pos:line="1932" pos:column="32">main<op:operator pos:line="1932" pos:column="36">.</op:operator><name><name pos:line="1932" pos:column="37">ChildStatements</name><op:operator pos:line="1932" pos:column="52">.</op:operator><name pos:line="1932" pos:column="53">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1934" pos:column="13">var</name></type> <name pos:line="1934" pos:column="17">getNumCall</name> <init pos:line="1934" pos:column="28">= <expr pos:line="1934" pos:column="30">main<op:operator pos:line="1934" pos:column="34">.</op:operator><name><name pos:line="1934" pos:column="35">ChildStatements</name><index pos:line="1934" pos:column="50">[<expr><lit:literal type="number" pos:line="1934" pos:column="51">1</lit:literal></expr>]</index></name><op:operator pos:line="1934" pos:column="53">.</op:operator><call><name><name pos:line="1934" pos:column="54">Content</name><op:operator pos:line="1934" pos:column="61">.</op:operator><name><name pos:line="1934" pos:column="62">GetDescendantsAndSelf</name><argument_list pos:line="1934" pos:column="83">&lt;<argument><name pos:line="1934" pos:column="84">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1934" pos:column="95">()</argument_list></call><op:operator pos:line="1934" pos:column="97">.</op:operator><call><name pos:line="1934" pos:column="98">First</name><argument_list pos:line="1934" pos:column="103">(<argument><expr><lambda><name pos:line="1934" pos:column="104">mc</name> <op:operator pos:line="1934" pos:column="107">=&gt;</op:operator> <name><name pos:line="1934" pos:column="110">mc</name><op:operator pos:line="1934" pos:column="112">.</op:operator><name pos:line="1934" pos:column="113">Name</name></name> <op:operator pos:line="1934" pos:column="118">==</op:operator> <lit:literal type="string" pos:line="1934" pos:column="121">"GetNum"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1935" pos:column="13">var</name></type> <name pos:line="1935" pos:column="17">matches</name> <init pos:line="1935" pos:column="25">= <expr><call><name><name pos:line="1935" pos:column="27">getNumCall</name><op:operator pos:line="1935" pos:column="37">.</op:operator><name pos:line="1935" pos:column="38">FindMatches</name></name><argument_list pos:line="1935" pos:column="49">()</argument_list></call><op:operator pos:line="1935" pos:column="51">.</op:operator><call><name pos:line="1935" pos:column="52">ToList</name><argument_list pos:line="1935" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1936" pos:column="13">Assert</name><op:operator pos:line="1936" pos:column="19">.</op:operator><name pos:line="1936" pos:column="20">AreEqual</name></name><argument_list pos:line="1936" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="1936" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1936" pos:column="32">matches</name><op:operator pos:line="1936" pos:column="39">.</op:operator><name pos:line="1936" pos:column="40">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1937" pos:column="13">Assert</name><op:operator pos:line="1937" pos:column="19">.</op:operator><name pos:line="1937" pos:column="20">AreSame</name></name><argument_list pos:line="1937" pos:column="27">(<argument><expr><name pos:line="1937" pos:column="28">getNum</name></expr></argument>, <argument><expr><call><name><name pos:line="1937" pos:column="36">matches</name><op:operator pos:line="1937" pos:column="43">.</op:operator><name pos:line="1937" pos:column="44">First</name></name><argument_list pos:line="1937" pos:column="49">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="1940" pos:column="9">[<expr><name pos:line="1940" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="1941" pos:column="9">public</specifier> <name pos:line="1941" pos:column="16">void</name></type> <name pos:line="1941" pos:column="21">TestTypeUseForOtherNamespace</name><parameter_list pos:line="1941" pos:column="49">()</parameter_list> <block pos:line="1941" pos:column="52">{
            <comment type="line" pos:line="1942" pos:column="13">//namespace A {</comment>
            <comment type="line" pos:line="1943" pos:column="13">//    namespace B {</comment>
            <comment type="line" pos:line="1944" pos:column="13">//        class C {</comment>
            <comment type="line" pos:line="1945" pos:column="13">//            int Foo() { }</comment>
            <comment type="line" pos:line="1946" pos:column="13">//        };</comment>
            <comment type="line" pos:line="1947" pos:column="13">//    }</comment>
            <comment type="line" pos:line="1948" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="1949" pos:column="13">string</name></type> <name pos:line="1949" pos:column="20">c_xml</name> <init pos:line="1949" pos:column="26">= <expr><lit:literal type="string" pos:line="1949" pos:column="28">@"&lt;namespace pos:line=""1"" pos:column="&gt;namespace &lt;name pos:line=""1"" pos:column=""&gt;A&lt;/name&gt; &lt;block pos:line=""1"" pos:column=""&gt;{
    &lt;namespace pos:line=""2"" pos:column="&gt;namespace &lt;name pos:line=""2"" pos:column=""&gt;B&lt;/name&gt; &lt;block pos:line=""2"" pos:column=""&gt;{
        &lt;class pos:line=""3"" pos:column="&gt;class &lt;name pos:line=""3"" pos:column=""&gt;C&lt;/name&gt; &lt;block pos:line=""3"" pos:column=""&gt;{&lt;private type=""default"" pos:line=""3"" pos:column=&gt;
            &lt;function&gt;&lt;type&gt;&lt;name pos:line=""4"" pos:column=""&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""4"" pos:column=""&gt;Foo&lt;/name&gt;&lt;parameter_list pos:line=""4"" pos:column=""&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""4"" pos:column=""&gt;{ }&lt;/block&gt;&lt;/function&gt;
        &lt;/private&gt;}&lt;/block&gt;;&lt;/class&gt;
    }&lt;/block&gt;&lt;/namespace&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="1957" pos:column="13">//using namespace A::B;</comment>
            <comment type="line" pos:line="1958" pos:column="13">//namespace D {</comment>
            <comment type="line" pos:line="1959" pos:column="13">//    class E {</comment>
            <comment type="line" pos:line="1960" pos:column="13">//        void main() {</comment>
            <comment type="line" pos:line="1961" pos:column="13">//            C c = new C();</comment>
            <comment type="line" pos:line="1962" pos:column="13">//            c.Foo();</comment>
            <comment type="line" pos:line="1963" pos:column="13">//        }</comment>
            <comment type="line" pos:line="1964" pos:column="13">//    };</comment>
            <comment type="line" pos:line="1965" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="1966" pos:column="13">string</name></type> <name pos:line="1966" pos:column="20">e_xml</name> <init pos:line="1966" pos:column="26">= <expr><lit:literal type="string" pos:line="1966" pos:column="28">@"&lt;using pos:line=""1"" pos:column="&gt;using namespace &lt;name&gt;&lt;name pos:line=""1"" pos:column=""&gt;A&lt;/name&gt;&lt;op:operator pos:line=""1"" pos:column=""&gt;::&lt;/op:operator&gt;&lt;name pos:line=""1"" pos:column=""&gt;B&lt;/name&gt;&lt;/name&gt;;&lt;/using&gt;
&lt;namespace pos:line=""2"" pos:column="&gt;namespace &lt;name pos:line=""2"" pos:column=""&gt;D&lt;/name&gt; &lt;block pos:line=""2"" pos:column=""&gt;{
    &lt;class pos:line=""3"" pos:column="&gt;class &lt;name pos:line=""3"" pos:column=""&gt;E&lt;/name&gt; &lt;block pos:line=""3"" pos:column=""&gt;{&lt;private type=""default"" pos:line=""3"" pos:column=&gt;
        &lt;function&gt;&lt;type&gt;&lt;name pos:line=""4"" pos:column="&gt;void&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""4"" pos:column=""&gt;main&lt;/name&gt;&lt;parameter_list pos:line=""4"" pos:column=""&gt;()&lt;/parameter_list&gt; &lt;block pos:line=""4"" pos:column=""&gt;{
            &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""5"" pos:column=""&gt;C&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""5"" pos:column=""&gt;c&lt;/name&gt; &lt;init pos:line=""5"" pos:column=""&gt;= &lt;expr&gt;&lt;op:operator pos:line=""5"" pos:column=""&gt;new&lt;/op:operator&gt; &lt;call&gt;&lt;name pos:line=""5"" pos:column=""&gt;C&lt;/name&gt;&lt;argument_list pos:line=""5"" pos:column=""&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;&lt;/init&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
            &lt;expr_stmt&gt;&lt;expr&gt;&lt;call&gt;&lt;name&gt;&lt;name pos:line=""6"" pos:column=""&gt;c&lt;/name&gt;&lt;op:operator pos:line=""6"" pos:column=""&gt;.&lt;/op:operator&gt;&lt;name pos:line=""6"" pos:column=""&gt;Foo&lt;/name&gt;&lt;/name&gt;&lt;argument_list pos:line=""6"" pos:column=""&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;;&lt;/expr_stmt&gt;
        }&lt;/block&gt;&lt;/function&gt;
    &lt;/private&gt;}&lt;/block&gt;;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1976" pos:column="13">var</name></type> <name pos:line="1976" pos:column="17">cUnit</name> <init pos:line="1976" pos:column="23">= <expr><call><name><name pos:line="1976" pos:column="25">fileSetup</name><op:operator pos:line="1976" pos:column="34">.</op:operator><name pos:line="1976" pos:column="35">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1976" pos:column="59">(<argument><expr><name pos:line="1976" pos:column="60">c_xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1976" pos:column="67">"C.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1977" pos:column="13">var</name></type> <name pos:line="1977" pos:column="17">eUnit</name> <init pos:line="1977" pos:column="23">= <expr><call><name><name pos:line="1977" pos:column="25">fileSetup</name><op:operator pos:line="1977" pos:column="34">.</op:operator><name pos:line="1977" pos:column="35">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="1977" pos:column="59">(<argument><expr><name pos:line="1977" pos:column="60">e_xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1977" pos:column="67">"E.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1979" pos:column="13">NamespaceDefinition</name></type> <name pos:line="1979" pos:column="33">globalScope</name> <init pos:line="1979" pos:column="45">= <expr><call><name><name pos:line="1979" pos:column="47">codeParser</name><op:operator pos:line="1979" pos:column="57">.</op:operator><name pos:line="1979" pos:column="58">ParseFileUnit</name></name><argument_list pos:line="1979" pos:column="71">(<argument><expr><name pos:line="1979" pos:column="72">cUnit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="1980" pos:column="13">globalScope</name> <op:operator pos:line="1980" pos:column="25">=</op:operator> <call><name><name pos:line="1980" pos:column="27">globalScope</name><op:operator pos:line="1980" pos:column="38">.</op:operator><name pos:line="1980" pos:column="39">Merge</name></name><argument_list pos:line="1980" pos:column="44">(<argument><expr><call><name><name pos:line="1980" pos:column="45">codeParser</name><op:operator pos:line="1980" pos:column="55">.</op:operator><name pos:line="1980" pos:column="56">ParseFileUnit</name></name><argument_list pos:line="1980" pos:column="69">(<argument><expr><name pos:line="1980" pos:column="70">eUnit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1982" pos:column="13">var</name></type> <name pos:line="1982" pos:column="17">typeC</name> <init pos:line="1982" pos:column="23">= <expr><call><name><name pos:line="1982" pos:column="25">globalScope</name><op:operator pos:line="1982" pos:column="36">.</op:operator><name><name pos:line="1982" pos:column="37">GetDescendants</name><argument_list pos:line="1982" pos:column="51">&lt;<argument><name pos:line="1982" pos:column="52">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1982" pos:column="67">()</argument_list></call><op:operator pos:line="1982" pos:column="69">.</op:operator><call><name pos:line="1982" pos:column="70">Where</name><argument_list pos:line="1982" pos:column="75">(<argument><expr><lambda><name pos:line="1982" pos:column="76">t</name> <op:operator pos:line="1982" pos:column="78">=&gt;</op:operator> <name><name pos:line="1982" pos:column="81">t</name><op:operator pos:line="1982" pos:column="82">.</op:operator><name pos:line="1982" pos:column="83">Name</name></name> <op:operator pos:line="1982" pos:column="88">==</op:operator> <lit:literal type="string" pos:line="1982" pos:column="91">"C"</lit:literal></lambda></expr></argument>)</argument_list></call><op:operator pos:line="1982" pos:column="95">.</op:operator><call><name pos:line="1982" pos:column="96">FirstOrDefault</name><argument_list pos:line="1982" pos:column="110">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1983" pos:column="13">var</name></type> <name pos:line="1983" pos:column="17">typeE</name> <init pos:line="1983" pos:column="23">= <expr><call><name><name pos:line="1983" pos:column="25">globalScope</name><op:operator pos:line="1983" pos:column="36">.</op:operator><name><name pos:line="1983" pos:column="37">GetDescendants</name><argument_list pos:line="1983" pos:column="51">&lt;<argument><name pos:line="1983" pos:column="52">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1983" pos:column="67">()</argument_list></call><op:operator pos:line="1983" pos:column="69">.</op:operator><call><name pos:line="1983" pos:column="70">Where</name><argument_list pos:line="1983" pos:column="75">(<argument><expr><lambda><name pos:line="1983" pos:column="76">t</name> <op:operator pos:line="1983" pos:column="78">=&gt;</op:operator> <name><name pos:line="1983" pos:column="81">t</name><op:operator pos:line="1983" pos:column="82">.</op:operator><name pos:line="1983" pos:column="83">Name</name></name> <op:operator pos:line="1983" pos:column="88">==</op:operator> <lit:literal type="string" pos:line="1983" pos:column="91">"E"</lit:literal></lambda></expr></argument>)</argument_list></call><op:operator pos:line="1983" pos:column="95">.</op:operator><call><name pos:line="1983" pos:column="96">FirstOrDefault</name><argument_list pos:line="1983" pos:column="110">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="1985" pos:column="13">var</name></type> <name pos:line="1985" pos:column="17">mainMethod</name> <init pos:line="1985" pos:column="28">= <expr><call><name><name pos:line="1985" pos:column="30">typeE</name><op:operator pos:line="1985" pos:column="35">.</op:operator><name pos:line="1985" pos:column="36">ChildStatements</name><op:operator pos:line="1985" pos:column="51">.</op:operator><name><name pos:line="1985" pos:column="52">OfType</name><argument_list pos:line="1985" pos:column="58">&lt;<argument><name pos:line="1985" pos:column="59">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1985" pos:column="76">()</argument_list></call><op:operator pos:line="1985" pos:column="78">.</op:operator><call><name pos:line="1985" pos:column="79">FirstOrDefault</name><argument_list pos:line="1985" pos:column="93">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1986" pos:column="13">Assert</name><op:operator pos:line="1986" pos:column="19">.</op:operator><name pos:line="1986" pos:column="20">IsNotNull</name></name><argument_list pos:line="1986" pos:column="29">(<argument><expr><name pos:line="1986" pos:column="30">mainMethod</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1986" pos:column="42">"is not a method definition"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1987" pos:column="13">Assert</name><op:operator pos:line="1987" pos:column="19">.</op:operator><name pos:line="1987" pos:column="20">AreEqual</name></name><argument_list pos:line="1987" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1987" pos:column="29">"main"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1987" pos:column="37">mainMethod</name><op:operator pos:line="1987" pos:column="47">.</op:operator><name pos:line="1987" pos:column="48">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1989" pos:column="13">var</name></type> <name pos:line="1989" pos:column="17">fooMethod</name> <init pos:line="1989" pos:column="27">= <expr><call><name><name pos:line="1989" pos:column="29">typeC</name><op:operator pos:line="1989" pos:column="34">.</op:operator><name><name pos:line="1989" pos:column="35">GetNamedChildren</name><argument_list pos:line="1989" pos:column="51">&lt;<argument><name pos:line="1989" pos:column="52">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1989" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="1989" pos:column="70">"Foo"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1989" pos:column="76">.</op:operator><call><name pos:line="1989" pos:column="77">FirstOrDefault</name><argument_list pos:line="1989" pos:column="91">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1990" pos:column="13">Assert</name><op:operator pos:line="1990" pos:column="19">.</op:operator><name pos:line="1990" pos:column="20">IsNotNull</name></name><argument_list pos:line="1990" pos:column="29">(<argument><expr><name pos:line="1990" pos:column="30">fooMethod</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1990" pos:column="41">"no method foo found"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1991" pos:column="13">Assert</name><op:operator pos:line="1991" pos:column="19">.</op:operator><name pos:line="1991" pos:column="20">AreEqual</name></name><argument_list pos:line="1991" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="1991" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="1991" pos:column="36">fooMethod</name><op:operator pos:line="1991" pos:column="45">.</op:operator><name pos:line="1991" pos:column="46">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1993" pos:column="13">var</name></type> <name pos:line="1993" pos:column="17">cDeclaration</name> <init pos:line="1993" pos:column="30">= <expr><call><name><name pos:line="1993" pos:column="32">mainMethod</name><op:operator pos:line="1993" pos:column="42">.</op:operator><name><name pos:line="1993" pos:column="43">FindExpressions</name><argument_list pos:line="1993" pos:column="58">&lt;<argument><name pos:line="1993" pos:column="59">VariableDeclaration</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1993" pos:column="79">(<argument><expr><lit:literal type="boolean" pos:line="1993" pos:column="80">true</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1993" pos:column="85">.</op:operator><call><name pos:line="1993" pos:column="86">FirstOrDefault</name><argument_list pos:line="1993" pos:column="100">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="1994" pos:column="13">Assert</name><op:operator pos:line="1994" pos:column="19">.</op:operator><name pos:line="1994" pos:column="20">IsNotNull</name></name><argument_list pos:line="1994" pos:column="29">(<argument><expr><name pos:line="1994" pos:column="30">cDeclaration</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1994" pos:column="44">"No declaration found"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="1995" pos:column="13">Assert</name><op:operator pos:line="1995" pos:column="19">.</op:operator><name pos:line="1995" pos:column="20">AreSame</name></name><argument_list pos:line="1995" pos:column="27">(<argument><expr><name pos:line="1995" pos:column="28">typeC</name></expr></argument>, <argument><expr><call><name><name pos:line="1995" pos:column="35">cDeclaration</name><op:operator pos:line="1995" pos:column="47">.</op:operator><name pos:line="1995" pos:column="48">VariableType</name><op:operator pos:line="1995" pos:column="60">.</op:operator><name pos:line="1995" pos:column="61">ResolveType</name></name><argument_list pos:line="1995" pos:column="72">()</argument_list></call><op:operator pos:line="1995" pos:column="74">.</op:operator><call><name pos:line="1995" pos:column="75">FirstOrDefault</name><argument_list pos:line="1995" pos:column="89">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="1997" pos:column="13">var</name></type> <name pos:line="1997" pos:column="17">callToCConstructor</name> <init pos:line="1997" pos:column="36">= <expr><call><name><name pos:line="1997" pos:column="38">mainMethod</name><op:operator pos:line="1997" pos:column="48">.</op:operator><name><name pos:line="1997" pos:column="49">FindExpressions</name><argument_list pos:line="1997" pos:column="64">&lt;<argument><name pos:line="1997" pos:column="65">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1997" pos:column="76">(<argument><expr><lit:literal type="boolean" pos:line="1997" pos:column="77">true</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1997" pos:column="82">.</op:operator><call><name pos:line="1997" pos:column="83">FirstOrDefault</name><argument_list pos:line="1997" pos:column="97">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="1998" pos:column="13">var</name></type> <name pos:line="1998" pos:column="17">callToFoo</name> <init pos:line="1998" pos:column="27">= <expr><call><name><name pos:line="1998" pos:column="29">mainMethod</name><op:operator pos:line="1998" pos:column="39">.</op:operator><name><name pos:line="1998" pos:column="40">FindExpressions</name><argument_list pos:line="1998" pos:column="55">&lt;<argument><name pos:line="1998" pos:column="56">MethodCall</name></argument>&gt;</argument_list></name></name><argument_list pos:line="1998" pos:column="67">(<argument><expr><lit:literal type="boolean" pos:line="1998" pos:column="68">true</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1998" pos:column="73">.</op:operator><call><name pos:line="1998" pos:column="74">LastOrDefault</name><argument_list pos:line="1998" pos:column="87">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="2000" pos:column="13">Assert</name><op:operator pos:line="2000" pos:column="19">.</op:operator><name pos:line="2000" pos:column="20">AreEqual</name></name><argument_list pos:line="2000" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="2000" pos:column="29">"C"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="2000" pos:column="34">callToCConstructor</name><op:operator pos:line="2000" pos:column="52">.</op:operator><name pos:line="2000" pos:column="53">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="2001" pos:column="13">Assert</name><op:operator pos:line="2001" pos:column="19">.</op:operator><name pos:line="2001" pos:column="20">That</name></name><argument_list pos:line="2001" pos:column="24">(<argument><expr><name><name pos:line="2001" pos:column="25">callToCConstructor</name><op:operator pos:line="2001" pos:column="43">.</op:operator><name pos:line="2001" pos:column="44">IsConstructor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="2002" pos:column="13">Assert</name><op:operator pos:line="2002" pos:column="19">.</op:operator><name pos:line="2002" pos:column="20">IsNull</name></name><argument_list pos:line="2002" pos:column="26">(<argument><expr><call><name><name pos:line="2002" pos:column="27">callToCConstructor</name><op:operator pos:line="2002" pos:column="45">.</op:operator><name pos:line="2002" pos:column="46">FindMatches</name></name><argument_list pos:line="2002" pos:column="57">()</argument_list></call><op:operator pos:line="2002" pos:column="59">.</op:operator><call><name pos:line="2002" pos:column="60">FirstOrDefault</name><argument_list pos:line="2002" pos:column="74">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="2004" pos:column="13">Assert</name><op:operator pos:line="2004" pos:column="19">.</op:operator><name pos:line="2004" pos:column="20">AreEqual</name></name><argument_list pos:line="2004" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="2004" pos:column="29">"Foo"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="2004" pos:column="36">callToFoo</name><op:operator pos:line="2004" pos:column="45">.</op:operator><name pos:line="2004" pos:column="46">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="2005" pos:column="13">Assert</name><op:operator pos:line="2005" pos:column="19">.</op:operator><name pos:line="2005" pos:column="20">AreSame</name></name><argument_list pos:line="2005" pos:column="27">(<argument><expr><name pos:line="2005" pos:column="28">fooMethod</name></expr></argument>, <argument><expr><call><name><name pos:line="2005" pos:column="39">callToFoo</name><op:operator pos:line="2005" pos:column="48">.</op:operator><name pos:line="2005" pos:column="49">FindMatches</name></name><argument_list pos:line="2005" pos:column="60">()</argument_list></call><op:operator pos:line="2005" pos:column="62">.</op:operator><call><name pos:line="2005" pos:column="63">FirstOrDefault</name><argument_list pos:line="2005" pos:column="77">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
