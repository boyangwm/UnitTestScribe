<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data\NamedScope.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2013 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *    Patrick Francis (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="13" pos:column="1">using <name pos:line="13" pos:column="7">System</name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Collections</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">Generic</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Collections</name><op:operator pos:line="15" pos:column="25">.</op:operator><name pos:line="15" pos:column="26">ObjectModel</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Diagnostics</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Linq</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Text</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">System</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">Xml</name></name>;</using>

<namespace pos:line="21" pos:column="1">namespace <name><name pos:line="21" pos:column="11">ABB</name><op:operator pos:line="21" pos:column="14">.</op:operator><name pos:line="21" pos:column="15">SrcML</name><op:operator pos:line="21" pos:column="20">.</op:operator><name pos:line="21" pos:column="21">Data</name></name> <block pos:line="21" pos:column="26">{
    <comment type="line" pos:line="22" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="23" pos:column="5">/// Represents a program scope that has a name.</comment>
    <comment type="line" pos:line="24" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="25" pos:column="5">public</specifier> class <name pos:line="25" pos:column="18">NamedScope</name> <super pos:line="25" pos:column="29">: <name pos:line="25" pos:column="31">BlockStatement</name>, <name pos:line="25" pos:column="47">INamedEntity</name></super> <block pos:line="25" pos:column="60">{
        <decl_stmt><decl><type><specifier pos:line="26" pos:column="9">private</specifier> <name pos:line="26" pos:column="17">NamePrefix</name></type> <name pos:line="26" pos:column="28">_prefix</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="27" pos:column="9">private</specifier> <name><name pos:line="27" pos:column="17">Dictionary</name><argument_list pos:line="27" pos:column="27">&lt;<argument><name pos:line="27" pos:column="28">string</name></argument>, <argument><name><name pos:line="27" pos:column="36">List</name><argument_list pos:line="27" pos:column="40">&lt;<argument><name pos:line="27" pos:column="41">NamedScope</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="27" pos:column="54">_nameCache</name></decl>;</decl_stmt>

        <comment type="line" pos:line="29" pos:column="9">/// &lt;summary&gt; The XML name for NamedScope. &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="30" pos:column="9">public</specifier> <specifier pos:line="30" pos:column="16">new</specifier> <specifier pos:line="30" pos:column="20">const</specifier> <name pos:line="30" pos:column="26">string</name></type> <name pos:line="30" pos:column="33">XmlName</name> <init pos:line="30" pos:column="41">= <expr><lit:literal type="string" pos:line="30" pos:column="43">"NamedScope"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="32" pos:column="9">/// &lt;summary&gt; XML Name for &lt;see cref="Name" /&gt; &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="33" pos:column="9">public</specifier> <specifier pos:line="33" pos:column="16">const</specifier> <name pos:line="33" pos:column="22">string</name></type> <name pos:line="33" pos:column="29">XmlNameName</name> <init pos:line="33" pos:column="41">= <expr><lit:literal type="string" pos:line="33" pos:column="43">"Name"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="35" pos:column="9">/// &lt;summary&gt; XML Name for &lt;see cref="NamePrefix" /&gt; &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="36" pos:column="9">public</specifier> <specifier pos:line="36" pos:column="16">const</specifier> <name pos:line="36" pos:column="22">string</name></type> <name pos:line="36" pos:column="29">XmlPrefixName</name> <init pos:line="36" pos:column="43">= <expr><lit:literal type="string" pos:line="36" pos:column="45">"NamePrefix"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="38" pos:column="9">/// &lt;summary&gt; XML Name for &lt;see cref="Accessibility" /&gt; &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="39" pos:column="9">public</specifier> <specifier pos:line="39" pos:column="16">const</specifier> <name pos:line="39" pos:column="22">string</name></type> <name pos:line="39" pos:column="29">XmlAccessibilityName</name> <init pos:line="39" pos:column="50">= <expr><lit:literal type="string" pos:line="39" pos:column="52">"Accessibility"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="41" pos:column="9">/// &lt;summary&gt; Creates an empty NamedScope. &lt;/summary&gt;</comment>
        <constructor><specifier pos:line="42" pos:column="9">public</specifier> <name pos:line="42" pos:column="16">NamedScope</name><parameter_list pos:line="42" pos:column="26">()</parameter_list> <member_list pos:line="42" pos:column="29">: <call><name pos:line="42" pos:column="31">base</name><argument_list pos:line="42" pos:column="35">()</argument_list></call> </member_list><block pos:line="42" pos:column="38">{
            <expr_stmt><expr><name pos:line="43" pos:column="13">Name</name> <op:operator pos:line="43" pos:column="18">=</op:operator> <name><name pos:line="43" pos:column="20">string</name><op:operator pos:line="43" pos:column="26">.</op:operator><name pos:line="43" pos:column="27">Empty</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="44" pos:column="13">Accessibility</name> <op:operator pos:line="44" pos:column="27">=</op:operator> <name><name pos:line="44" pos:column="29">AccessModifier</name><op:operator pos:line="44" pos:column="43">.</op:operator><name pos:line="44" pos:column="44">None</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="45" pos:column="13">PrefixIsResolved</name> <op:operator pos:line="45" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="45" pos:column="32">true</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="46" pos:column="13">_nameCache</name> <op:operator pos:line="46" pos:column="24">=</op:operator> <op:operator pos:line="46" pos:column="26">new</op:operator> <call><name><name pos:line="46" pos:column="30">Dictionary</name><argument_list pos:line="46" pos:column="40">&lt;<argument><name pos:line="46" pos:column="41">string</name></argument>, <argument><name><name pos:line="46" pos:column="49">List</name><argument_list pos:line="46" pos:column="53">&lt;<argument><name pos:line="46" pos:column="54">NamedScope</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list pos:line="46" pos:column="66">(<argument><expr><name><name pos:line="46" pos:column="67">StringComparer</name><op:operator pos:line="46" pos:column="81">.</op:operator><name pos:line="46" pos:column="82">Ordinal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="49" pos:column="9">/// &lt;summary&gt; The name of the scope. &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="50" pos:column="9">public</specifier> <name pos:line="50" pos:column="16">string</name></type> <name pos:line="50" pos:column="23">Name</name> <block pos:line="50" pos:column="28">{ <function_decl><name pos:line="50" pos:column="30">get</name>;</function_decl> <function_decl><name pos:line="50" pos:column="35">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="52" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="53" pos:column="9">/// For C/C++ methods, this property gives the specified scope that the method is defined in.</comment>
        <comment type="line" pos:line="54" pos:column="9">/// For example, in the method &lt;code&gt;int A::B::MyFunction(char arg);&lt;/code&gt; the NamePrefix is A::B.</comment>
        <comment type="line" pos:line="55" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="56" pos:column="9">public</specifier> <name pos:line="56" pos:column="16">NamePrefix</name></type> <name pos:line="56" pos:column="27">Prefix</name> <block pos:line="56" pos:column="34">{
            <function><name pos:line="57" pos:column="13">get</name> <block pos:line="57" pos:column="17">{ <return pos:line="57" pos:column="19">return <expr><name pos:line="57" pos:column="26">_prefix</name></expr>;</return> }</block></function>
            <function><name pos:line="58" pos:column="13">set</name> <block pos:line="58" pos:column="17">{
                <if pos:line="59" pos:column="17">if<condition pos:line="59" pos:column="19">(<expr><name pos:line="59" pos:column="20">value</name> <op:operator pos:line="59" pos:column="26">!=</op:operator> <name pos:line="59" pos:column="29">_prefix</name></expr>)</condition><then pos:line="59" pos:column="37"> <block pos:line="59" pos:column="38">{
                    <expr_stmt><expr><name pos:line="60" pos:column="21">_prefix</name> <op:operator pos:line="60" pos:column="29">=</op:operator> <name pos:line="60" pos:column="31">value</name></expr>;</expr_stmt>
                    <if pos:line="61" pos:column="21">if<condition pos:line="61" pos:column="23">(<expr><name pos:line="61" pos:column="24">_prefix</name> <op:operator pos:line="61" pos:column="32">!=</op:operator> <name pos:line="61" pos:column="35">null</name></expr>)</condition><then pos:line="61" pos:column="40"> <block pos:line="61" pos:column="41">{
                        <expr_stmt><expr><name><name pos:line="62" pos:column="25">_prefix</name><op:operator pos:line="62" pos:column="32">.</op:operator><name pos:line="62" pos:column="33">ParentStatement</name></name> <op:operator pos:line="62" pos:column="49">=</op:operator> <name pos:line="62" pos:column="51">this</name></expr>;</expr_stmt>
                    }</block></then></if>
                    <expr_stmt><expr><name pos:line="64" pos:column="21">PrefixIsResolved</name> <op:operator pos:line="64" pos:column="38">=</op:operator> <op:operator pos:line="64" pos:column="40">(</op:operator><name pos:line="64" pos:column="41">null</name> <op:operator pos:line="64" pos:column="46">==</op:operator> <name pos:line="64" pos:column="49">_prefix</name><op:operator pos:line="64" pos:column="56">)</op:operator></expr>;</expr_stmt>
                }</block></then></if>
            }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="69" pos:column="9">public</specifier> <name pos:line="69" pos:column="16">bool</name></type> <name pos:line="69" pos:column="21">PrefixIsResolved</name> <block pos:line="69" pos:column="38">{ <function_decl><name pos:line="69" pos:column="40">get</name>;</function_decl> <function_decl><specifier pos:line="69" pos:column="45">private</specifier> <name pos:line="69" pos:column="53">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="71" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="72" pos:column="9">/// The accessibility for this scope, e.g. public, private, etc.</comment>
        <comment type="line" pos:line="73" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="74" pos:column="9">public</specifier> <name pos:line="74" pos:column="16">AccessModifier</name></type> <name pos:line="74" pos:column="31">Accessibility</name> <block pos:line="74" pos:column="45">{ <function_decl><name pos:line="74" pos:column="47">get</name>;</function_decl> <function_decl><name pos:line="74" pos:column="52">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="76" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="77" pos:column="9">/// Adds the given Statement to the ChildStatements collection. Nothing will be done if &lt;paramref name="child"/&gt; is null.</comment>
        <comment type="line" pos:line="78" pos:column="9">/// Updates the internal cache of named children, if appropriate.</comment>
        <comment type="line" pos:line="79" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="80" pos:column="9">/// &lt;param name="child"&gt;The Statement to add.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="81" pos:column="9">public</specifier> <specifier pos:line="81" pos:column="16">override</specifier> <name pos:line="81" pos:column="25">void</name></type> <name pos:line="81" pos:column="30">AddChildStatement</name><parameter_list pos:line="81" pos:column="47">(<param><decl><type><name pos:line="81" pos:column="48">Statement</name></type> <name pos:line="81" pos:column="58">child</name></decl></param>)</parameter_list> <block pos:line="81" pos:column="65">{
            <expr_stmt><expr><call><name><name pos:line="82" pos:column="13">base</name><op:operator pos:line="82" pos:column="17">.</op:operator><name pos:line="82" pos:column="18">AddChildStatement</name></name><argument_list pos:line="82" pos:column="35">(<argument><expr><name pos:line="82" pos:column="36">child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="83" pos:column="13">AddNamedChild</name><argument_list pos:line="83" pos:column="26">(<argument><expr><name pos:line="83" pos:column="27">child</name> <op:operator pos:line="83" pos:column="33">as</op:operator> <name pos:line="83" pos:column="36">NamedScope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="86" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="87" pos:column="9">/// Removes &lt;paramref name="child"/&gt; from the ChildStatements collection.</comment>
        <comment type="line" pos:line="88" pos:column="9">/// Updates the internal cache of named children, if appropriate.</comment>
        <comment type="line" pos:line="89" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="90" pos:column="9">/// &lt;param name="child"&gt;The child statement to remove.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="91" pos:column="9">public</specifier> <specifier pos:line="91" pos:column="16">override</specifier> <name pos:line="91" pos:column="25">void</name></type> <name pos:line="91" pos:column="30">RemoveChild</name><parameter_list pos:line="91" pos:column="41">(<param><decl><type><name pos:line="91" pos:column="42">Statement</name></type> <name pos:line="91" pos:column="52">child</name></decl></param>)</parameter_list> <block pos:line="91" pos:column="59">{
            <expr_stmt><expr><call><name><name pos:line="92" pos:column="13">base</name><op:operator pos:line="92" pos:column="17">.</op:operator><name pos:line="92" pos:column="18">RemoveChild</name></name><argument_list pos:line="92" pos:column="29">(<argument><expr><name pos:line="92" pos:column="30">child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="93" pos:column="13">RemoveNamedChild</name><argument_list pos:line="93" pos:column="29">(<argument><expr><name pos:line="93" pos:column="30">child</name> <op:operator pos:line="93" pos:column="36">as</op:operator> <name pos:line="93" pos:column="39">NamedScope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="96" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="97" pos:column="9">/// Gets the full name by finding all of the named scope ancestors and combining them.</comment>
        <comment type="line" pos:line="98" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="99" pos:column="9">/// &lt;returns&gt;The full name for this named scope&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="100" pos:column="9">public</specifier> <name pos:line="100" pos:column="16">string</name></type> <name pos:line="100" pos:column="23">GetFullName</name><parameter_list pos:line="100" pos:column="34">()</parameter_list> <block pos:line="100" pos:column="37">{
            <decl_stmt><decl><type><name><name pos:line="101" pos:column="13">IEnumerable</name><argument_list pos:line="101" pos:column="24">&lt;<argument><name pos:line="101" pos:column="25">string</name></argument>&gt;</argument_list></name></type> <name pos:line="101" pos:column="33">names</name></decl>;</decl_stmt>
            <if pos:line="102" pos:column="13">if<condition pos:line="102" pos:column="15">(<expr><name pos:line="102" pos:column="16">PrefixIsResolved</name></expr>)</condition><then pos:line="102" pos:column="33"> <block pos:line="102" pos:column="34">{
                <expr_stmt><expr><name pos:line="103" pos:column="17">names</name> <op:operator pos:line="103" pos:column="23">=</op:operator> <op:operator pos:line="103" pos:column="25">(</op:operator><linq><from pos:line="103" pos:column="26">from <expr><name pos:line="103" pos:column="31">statement</name></expr> <in pos:line="103" pos:column="41">in <expr><call><name><name pos:line="103" pos:column="44">GetAncestorsAndSelf</name><argument_list pos:line="103" pos:column="63">&lt;<argument><name pos:line="103" pos:column="64">NamedScope</name></argument>&gt;</argument_list></name><argument_list pos:line="103" pos:column="75">()</argument_list></call></expr></in></from>
                         <where pos:line="104" pos:column="26">where <expr><op:operator pos:line="104" pos:column="32">!</op:operator><call><name><name pos:line="104" pos:column="33">String</name><op:operator pos:line="104" pos:column="39">.</op:operator><name pos:line="104" pos:column="40">IsNullOrEmpty</name></name><argument_list pos:line="104" pos:column="53">(<argument><expr><name><name pos:line="104" pos:column="54">statement</name><op:operator pos:line="104" pos:column="63">.</op:operator><name pos:line="104" pos:column="64">Name</name></name></expr></argument>)</argument_list></call></expr></where>
                         <select pos:line="105" pos:column="26">select <expr><name><name pos:line="105" pos:column="33">statement</name><op:operator pos:line="105" pos:column="42">.</op:operator><name pos:line="105" pos:column="43">Name</name></name></expr></select></linq><op:operator pos:line="105" pos:column="47">)</op:operator><op:operator pos:line="105" pos:column="48">.</op:operator><call><name pos:line="105" pos:column="49">Reverse</name><argument_list pos:line="105" pos:column="56">()</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="106" pos:column="15">else <block pos:line="106" pos:column="20">{
                <expr_stmt><expr><name pos:line="107" pos:column="17">names</name> <op:operator pos:line="107" pos:column="23">=</op:operator> <linq><from pos:line="107" pos:column="25">from <expr><name pos:line="107" pos:column="30">nameUse</name></expr> <in pos:line="107" pos:column="38">in <expr><name><name pos:line="107" pos:column="41">Prefix</name><op:operator pos:line="107" pos:column="47">.</op:operator><name pos:line="107" pos:column="48">Names</name></name></expr></in></from>
                        <select pos:line="108" pos:column="25">select <expr><name><name pos:line="108" pos:column="32">nameUse</name><op:operator pos:line="108" pos:column="39">.</op:operator><name pos:line="108" pos:column="40">Name</name></name></expr></select></linq></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="109" pos:column="17">names</name> <op:operator pos:line="109" pos:column="23">=</op:operator> <call><name><name pos:line="109" pos:column="25">names</name><op:operator pos:line="109" pos:column="30">.</op:operator><name pos:line="109" pos:column="31">Concat</name></name><argument_list pos:line="109" pos:column="37">(<argument><expr><call><name><name pos:line="109" pos:column="38">Enumerable</name><op:operator pos:line="109" pos:column="48">.</op:operator><name pos:line="109" pos:column="49">Repeat</name></name><argument_list pos:line="109" pos:column="55">(<argument><expr><name><name pos:line="109" pos:column="56">this</name><op:operator pos:line="109" pos:column="60">.</op:operator><name pos:line="109" pos:column="61">Name</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="109" pos:column="67">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            
            <return pos:line="112" pos:column="13">return <expr><call><name><name pos:line="112" pos:column="20">string</name><op:operator pos:line="112" pos:column="26">.</op:operator><name pos:line="112" pos:column="27">Join</name></name><argument_list pos:line="112" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="112" pos:column="32">"."</lit:literal></expr></argument>, <argument><expr><name pos:line="112" pos:column="37">names</name></expr></argument>)</argument_list></call><op:operator pos:line="112" pos:column="43">.</op:operator><call><name pos:line="112" pos:column="44">TrimEnd</name><argument_list pos:line="112" pos:column="51">(<argument><expr><lit:literal type="char" pos:line="112" pos:column="52">'.'</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="115" pos:column="9">protected</specifier> <name pos:line="115" pos:column="19">void</name></type> <name pos:line="115" pos:column="24">ResetPrefix</name><parameter_list pos:line="115" pos:column="35">()</parameter_list> <block pos:line="115" pos:column="38">{
            <if pos:line="116" pos:column="13">if<condition pos:line="116" pos:column="15">(<expr><name pos:line="116" pos:column="16">PrefixIsResolved</name> <op:operator pos:line="116" pos:column="33">&amp;&amp;</op:operator> <name pos:line="116" pos:column="36">null</name> <op:operator pos:line="116" pos:column="41">!=</op:operator> <name pos:line="116" pos:column="44">Prefix</name></expr>)</condition><then pos:line="116" pos:column="51"> <block pos:line="116" pos:column="52">{
                <expr_stmt><expr><name pos:line="117" pos:column="17">PrefixIsResolved</name> <op:operator pos:line="117" pos:column="34">=</op:operator> <lit:literal type="boolean" pos:line="117" pos:column="36">false</lit:literal></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="118" pos:column="17">var</name></type> <name pos:line="118" pos:column="21">originalRoot</name> <init pos:line="118" pos:column="34">= <expr><call><name><name pos:line="118" pos:column="36">this</name><op:operator pos:line="118" pos:column="40">.</op:operator><name><name pos:line="118" pos:column="41">GetAncestors</name><argument_list pos:line="118" pos:column="53">&lt;<argument><name pos:line="118" pos:column="54">NamedScope</name></argument>&gt;</argument_list></name></name><argument_list pos:line="118" pos:column="65">()</argument_list></call><op:operator pos:line="118" pos:column="67">.</op:operator><call><name pos:line="118" pos:column="68">Skip</name><argument_list pos:line="118" pos:column="72">(<argument><expr><call><name><name pos:line="118" pos:column="73">Prefix</name><op:operator pos:line="118" pos:column="79">.</op:operator><name pos:line="118" pos:column="80">Names</name><op:operator pos:line="118" pos:column="85">.</op:operator><name pos:line="118" pos:column="86">Count</name></name><argument_list pos:line="118" pos:column="91">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="118" pos:column="94">.</op:operator><call><name pos:line="118" pos:column="95">FirstOrDefault</name><argument_list pos:line="118" pos:column="109">()</argument_list></call></expr></init></decl>;</decl_stmt>

                <if pos:line="120" pos:column="17">if<condition pos:line="120" pos:column="19">(<expr><name pos:line="120" pos:column="20">null</name> <op:operator pos:line="120" pos:column="25">!=</op:operator> <name pos:line="120" pos:column="28">originalRoot</name> <op:operator pos:line="120" pos:column="41">&amp;&amp;</op:operator> <name pos:line="120" pos:column="44">null</name> <op:operator pos:line="120" pos:column="49">!=</op:operator> <name pos:line="120" pos:column="52">ParentStatement</name></expr>)</condition><then pos:line="120" pos:column="68"> <block pos:line="120" pos:column="69">{
                    <expr_stmt><expr><call><name><name pos:line="121" pos:column="21">ParentStatement</name><op:operator pos:line="121" pos:column="36">.</op:operator><name pos:line="121" pos:column="37">RemoveChild</name></name><argument_list pos:line="121" pos:column="48">(<argument><expr><name pos:line="121" pos:column="49">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="122" pos:column="21">originalRoot</name><op:operator pos:line="122" pos:column="33">.</op:operator><name pos:line="122" pos:column="34">AddChildStatement</name></name><argument_list pos:line="122" pos:column="51">(<argument><expr><name pos:line="122" pos:column="52">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="127" pos:column="9">protected</specifier> <name pos:line="127" pos:column="19">void</name></type> <name pos:line="127" pos:column="24">MapPrefix</name><parameter_list pos:line="127" pos:column="33">(<param><decl><type><name pos:line="127" pos:column="34">NamedScope</name></type> <name pos:line="127" pos:column="45">tail</name></decl></param>)</parameter_list> <block pos:line="127" pos:column="51">{
            <decl_stmt><decl><type><name pos:line="128" pos:column="13">var</name></type> <name pos:line="128" pos:column="17">data</name> <init pos:line="128" pos:column="22">= <expr><call><name><name pos:line="128" pos:column="24">Enumerable</name><op:operator pos:line="128" pos:column="34">.</op:operator><name pos:line="128" pos:column="35">Zip</name></name><argument_list pos:line="128" pos:column="38">(<argument><expr><call><name><name pos:line="128" pos:column="39">Prefix</name><op:operator pos:line="128" pos:column="45">.</op:operator><name pos:line="128" pos:column="46">Names</name><op:operator pos:line="128" pos:column="51">.</op:operator><name pos:line="128" pos:column="52">Reverse</name></name><argument_list pos:line="128" pos:column="59">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="128" pos:column="63">tail</name><op:operator pos:line="128" pos:column="67">.</op:operator><name><name pos:line="128" pos:column="68">GetAncestorsAndSelf</name><argument_list pos:line="128" pos:column="87">&lt;<argument><name pos:line="128" pos:column="88">NamedScope</name></argument>&gt;</argument_list></name></name><argument_list pos:line="128" pos:column="99">()</argument_list></call></expr></argument>, <argument><expr><lambda><parameter_list pos:line="128" pos:column="103">(<param><decl><name pos:line="128" pos:column="104">name</name></decl></param>, <param><decl><name pos:line="128" pos:column="110">scope</name></decl></param>)</parameter_list> <op:operator pos:line="128" pos:column="117">=&gt;</op:operator> <block pos:line="128" pos:column="120">{
                <return pos:line="129" pos:column="17">return <expr><op:operator pos:line="129" pos:column="24">new</op:operator> <block pos:line="129" pos:column="28">{
                    <expr_stmt><expr><name pos:line="130" pos:column="21">IsValid</name> <op:operator pos:line="130" pos:column="29">=</op:operator> <op:operator pos:line="130" pos:column="31">(</op:operator><name><name pos:line="130" pos:column="32">name</name><op:operator pos:line="130" pos:column="36">.</op:operator><name pos:line="130" pos:column="37">Name</name></name> <op:operator pos:line="130" pos:column="42">==</op:operator> <name><name pos:line="130" pos:column="45">scope</name><op:operator pos:line="130" pos:column="50">.</op:operator><name pos:line="130" pos:column="51">Name</name></name><op:operator pos:line="130" pos:column="55">)</op:operator></expr><op:operator pos:line="130" pos:column="56">,</op:operator>
                    <expr><name pos:line="131" pos:column="21">Location</name> <op:operator pos:line="131" pos:column="30">=</op:operator> <name><name pos:line="131" pos:column="32">name</name><op:operator pos:line="131" pos:column="36">.</op:operator><name pos:line="131" pos:column="37">Location</name></name></expr><op:operator pos:line="131" pos:column="45">,</op:operator>
                    <expr><name pos:line="132" pos:column="21">Scope</name> <op:operator pos:line="132" pos:column="27">=</op:operator> <name pos:line="132" pos:column="29">scope</name></expr><op:operator pos:line="132" pos:column="34">,</op:operator></expr_stmt>
                }</block></expr></return><empty_stmt pos:line="133" pos:column="18">;</empty_stmt>
            }</block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="135" pos:column="13">foreach(<init><decl><type><name pos:line="135" pos:column="21">var</name></type> <name pos:line="135" pos:column="25">d</name> <range pos:line="135" pos:column="27">in <expr><name pos:line="135" pos:column="30">data</name></expr></range></decl></init>) <block pos:line="135" pos:column="36">{
                <if pos:line="136" pos:column="17">if<condition pos:line="136" pos:column="19">(<expr><name><name pos:line="136" pos:column="20">d</name><op:operator pos:line="136" pos:column="21">.</op:operator><name pos:line="136" pos:column="22">IsValid</name></name></expr>)</condition><then pos:line="136" pos:column="30"> <block pos:line="136" pos:column="31">{
                    <expr_stmt><expr><call><name><name pos:line="137" pos:column="21">d</name><op:operator pos:line="137" pos:column="22">.</op:operator><name pos:line="137" pos:column="23">Scope</name><op:operator pos:line="137" pos:column="28">.</op:operator><name pos:line="137" pos:column="29">AddLocation</name></name><argument_list pos:line="137" pos:column="40">(<argument><expr><name><name pos:line="137" pos:column="41">d</name><op:operator pos:line="137" pos:column="42">.</op:operator><name pos:line="137" pos:column="43">Location</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="138" pos:column="19">else <block pos:line="138" pos:column="24">{
                    <throw pos:line="139" pos:column="21">throw <expr><op:operator pos:line="139" pos:column="27">new</op:operator> <call><name pos:line="139" pos:column="31">SrcMLException</name><argument_list pos:line="139" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="139" pos:column="46">"not a valid scope for this prefix"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></else></if>
            }</block></foreach>
            <expr_stmt><expr><name pos:line="142" pos:column="13">PrefixIsResolved</name> <op:operator pos:line="142" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="142" pos:column="32">true</lit:literal></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="145" pos:column="9">public</specifier> <specifier pos:line="145" pos:column="16">override</specifier> <name pos:line="145" pos:column="25">Statement</name></type> <name pos:line="145" pos:column="35">Merge</name><parameter_list pos:line="145" pos:column="40">(<param><decl><type><name pos:line="145" pos:column="41">Statement</name></type> <name pos:line="145" pos:column="51">otherStatement</name></decl></param>)</parameter_list> <block pos:line="145" pos:column="67">{
            <return pos:line="146" pos:column="13">return <expr><call><name pos:line="146" pos:column="20">Merge</name><argument_list pos:line="146" pos:column="25">(<argument><expr><name pos:line="146" pos:column="26">otherStatement</name> <op:operator pos:line="146" pos:column="41">as</op:operator> <name pos:line="146" pos:column="44">NamedScope</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="149" pos:column="9">public</specifier> <name pos:line="149" pos:column="16">NamedScope</name></type> <name pos:line="149" pos:column="27">Merge</name><parameter_list pos:line="149" pos:column="32">(<param><decl><type><name pos:line="149" pos:column="33">NamedScope</name></type> <name pos:line="149" pos:column="44">otherNamedScope</name></decl></param>)</parameter_list> <block pos:line="149" pos:column="61">{
            <if pos:line="150" pos:column="13">if<condition pos:line="150" pos:column="15">(<expr><name pos:line="150" pos:column="16">null</name> <op:operator pos:line="150" pos:column="21">==</op:operator> <name pos:line="150" pos:column="24">otherNamedScope</name></expr>)</condition><then pos:line="150" pos:column="40"> <block pos:line="150" pos:column="41">{
                <throw pos:line="151" pos:column="17">throw <expr><op:operator pos:line="151" pos:column="23">new</op:operator> <call><name pos:line="151" pos:column="27">ArgumentNullException</name><argument_list pos:line="151" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="151" pos:column="49">"otherNamedScope"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <return pos:line="154" pos:column="13">return <expr><call><name><name pos:line="154" pos:column="20">Merge</name><argument_list pos:line="154" pos:column="25">&lt;<argument><name pos:line="154" pos:column="26">NamedScope</name></argument>&gt;</argument_list></name><argument_list pos:line="154" pos:column="37">(<argument><expr><name pos:line="154" pos:column="38">this</name></expr></argument>, <argument><expr><name pos:line="154" pos:column="44">otherNamedScope</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="157" pos:column="9">protected</specifier> <specifier pos:line="157" pos:column="19">static</specifier> <specifier pos:line="157" pos:column="26">new</specifier> <name pos:line="157" pos:column="30">T</name></type> <name><name pos:line="157" pos:column="32">Merge</name><argument_list pos:line="157" pos:column="37">&lt;<argument><name pos:line="157" pos:column="38">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="157" pos:column="40">(<param><decl><type><name pos:line="157" pos:column="41">T</name></type> <name pos:line="157" pos:column="43">firstStatement</name></decl></param>, <param><decl><type><name pos:line="157" pos:column="59">T</name></type> <name pos:line="157" pos:column="61">secondStatement</name></decl></param>)</parameter_list> <where pos:line="157" pos:column="78">where <name pos:line="157" pos:column="84">T</name> : <name pos:line="157" pos:column="88">NamedScope</name>, new()</where> <block pos:line="157" pos:column="106">{
            <decl_stmt><decl><type><name pos:line="158" pos:column="13">T</name></type> <name pos:line="158" pos:column="15">combinedStatement</name> <init pos:line="158" pos:column="33">= <expr><call><name><name pos:line="158" pos:column="35">Statement</name><op:operator pos:line="158" pos:column="44">.</op:operator><name><name pos:line="158" pos:column="45">Merge</name><argument_list pos:line="158" pos:column="50">&lt;<argument><name pos:line="158" pos:column="51">T</name></argument>&gt;</argument_list></name></name><argument_list pos:line="158" pos:column="53">(<argument><expr><name pos:line="158" pos:column="54">firstStatement</name></expr></argument>, <argument><expr><name pos:line="158" pos:column="70">secondStatement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="159" pos:column="13">combinedStatement</name><op:operator pos:line="159" pos:column="30">.</op:operator><name pos:line="159" pos:column="31">Name</name></name> <op:operator pos:line="159" pos:column="36">=</op:operator> <name><name pos:line="159" pos:column="38">firstStatement</name><op:operator pos:line="159" pos:column="52">.</op:operator><name pos:line="159" pos:column="53">Name</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="160" pos:column="13">combinedStatement</name><op:operator pos:line="160" pos:column="30">.</op:operator><name pos:line="160" pos:column="31">Accessibility</name></name> <op:operator pos:line="160" pos:column="45">=</op:operator> <op:operator pos:line="160" pos:column="47">(</op:operator><name><name pos:line="160" pos:column="48">firstStatement</name><op:operator pos:line="160" pos:column="62">.</op:operator><name pos:line="160" pos:column="63">Accessibility</name></name> <op:operator pos:line="160" pos:column="77">&gt;=</op:operator> <name><name pos:line="160" pos:column="80">secondStatement</name><op:operator pos:line="160" pos:column="95">.</op:operator><name pos:line="160" pos:column="96">Accessibility</name> <type:modifier pos:line="160" pos:column="110">?</type:modifier></name> <name><name pos:line="160" pos:column="112">firstStatement</name><op:operator pos:line="160" pos:column="126">.</op:operator><name pos:line="160" pos:column="127">Accessibility</name></name> <op:operator pos:line="160" pos:column="141">:</op:operator> <name><name pos:line="160" pos:column="143">secondStatement</name><op:operator pos:line="160" pos:column="158">.</op:operator><name pos:line="160" pos:column="159">Accessibility</name></name><op:operator pos:line="160" pos:column="172">)</op:operator></expr>;</expr_stmt>
            <if pos:line="161" pos:column="13">if<condition pos:line="161" pos:column="15">(<expr><name pos:line="161" pos:column="16">null</name> <op:operator pos:line="161" pos:column="21">!=</op:operator> <name><name pos:line="161" pos:column="24">firstStatement</name><op:operator pos:line="161" pos:column="38">.</op:operator><name pos:line="161" pos:column="39">Prefix</name></name></expr>)</condition><then pos:line="161" pos:column="46"> <block pos:line="161" pos:column="47">{
                <expr_stmt><expr><name><name pos:line="162" pos:column="17">combinedStatement</name><op:operator pos:line="162" pos:column="34">.</op:operator><name pos:line="162" pos:column="35">Prefix</name></name> <op:operator pos:line="162" pos:column="42">=</op:operator> <name><name pos:line="162" pos:column="44">firstStatement</name><op:operator pos:line="162" pos:column="58">.</op:operator><name pos:line="162" pos:column="59">Prefix</name></name></expr>;</expr_stmt>
            }</block></then> <else pos:line="163" pos:column="15">else <if pos:line="163" pos:column="20">if<condition pos:line="163" pos:column="22">(<expr><name pos:line="163" pos:column="23">null</name> <op:operator pos:line="163" pos:column="28">!=</op:operator> <name><name pos:line="163" pos:column="31">secondStatement</name><op:operator pos:line="163" pos:column="46">.</op:operator><name pos:line="163" pos:column="47">Prefix</name></name></expr>)</condition><then pos:line="163" pos:column="54"> <block pos:line="163" pos:column="55">{
                <expr_stmt><expr><name><name pos:line="164" pos:column="17">combinedStatement</name><op:operator pos:line="164" pos:column="34">.</op:operator><name pos:line="164" pos:column="35">Prefix</name></name> <op:operator pos:line="164" pos:column="42">=</op:operator> <name><name pos:line="164" pos:column="44">secondStatement</name><op:operator pos:line="164" pos:column="59">.</op:operator><name pos:line="164" pos:column="60">Prefix</name></name></expr>;</expr_stmt>
            }</block></then></if></else></if>
            <expr_stmt><expr><name><name pos:line="166" pos:column="13">combinedStatement</name><op:operator pos:line="166" pos:column="30">.</op:operator><name pos:line="166" pos:column="31">PrefixIsResolved</name></name> <op:operator pos:line="166" pos:column="48">=</op:operator> <lit:literal type="boolean" pos:line="166" pos:column="50">true</lit:literal></expr>;</expr_stmt>
            <return pos:line="167" pos:column="13">return <expr><name pos:line="167" pos:column="20">combinedStatement</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="170" pos:column="9">public</specifier> <specifier pos:line="170" pos:column="16">override</specifier> <name pos:line="170" pos:column="25">void</name></type> <name pos:line="170" pos:column="30">RemoveFile</name><parameter_list pos:line="170" pos:column="40">(<param><decl><type><name pos:line="170" pos:column="41">string</name></type> <name pos:line="170" pos:column="48">fileName</name></decl></param>)</parameter_list> <block pos:line="170" pos:column="58">{
            <expr_stmt><expr><call><name pos:line="171" pos:column="13">RemoveLocations</name><argument_list pos:line="171" pos:column="28">(<argument><expr><name pos:line="171" pos:column="29">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="172" pos:column="13">RemoveFileFromChildren</name><argument_list pos:line="172" pos:column="35">(<argument><expr><name pos:line="172" pos:column="36">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if pos:line="174" pos:column="13">if<condition pos:line="174" pos:column="15">(<expr><name pos:line="174" pos:column="16">ToBeDeleted</name></expr>)</condition><then pos:line="174" pos:column="28"> <block pos:line="174" pos:column="29">{
                <decl_stmt><decl><type><name pos:line="175" pos:column="17">var</name></type> <name pos:line="175" pos:column="21">orphanedChildren</name> <init pos:line="175" pos:column="38">= <expr><op:operator pos:line="175" pos:column="40">(</op:operator><linq><from pos:line="175" pos:column="41">from <expr><name pos:line="175" pos:column="46">child</name></expr> <in pos:line="175" pos:column="52">in <expr><call><name><name pos:line="175" pos:column="55">ChildStatements</name><op:operator pos:line="175" pos:column="70">.</op:operator><name><name pos:line="175" pos:column="71">OfType</name><argument_list pos:line="175" pos:column="77">&lt;<argument><name pos:line="175" pos:column="78">NamedScope</name></argument>&gt;</argument_list></name></name><argument_list pos:line="175" pos:column="89">()</argument_list></call></expr></in></from>
                                        <where pos:line="176" pos:column="41">where <expr><op:operator pos:line="176" pos:column="47">!</op:operator><name><name pos:line="176" pos:column="48">child</name><op:operator pos:line="176" pos:column="53">.</op:operator><name pos:line="176" pos:column="54">ToBeDeleted</name> <type:modifier pos:line="176" pos:column="66">&amp;&amp;</type:modifier></name> <name pos:line="176" pos:column="69">null</name> <op:operator pos:line="176" pos:column="74">!=</op:operator> <name><name pos:line="176" pos:column="77">child</name><op:operator pos:line="176" pos:column="82">.</op:operator><name pos:line="176" pos:column="83">Prefix</name></name></expr></where>
                                        <select pos:line="177" pos:column="41">select <expr><name pos:line="177" pos:column="48">child</name></expr></select></linq><op:operator pos:line="177" pos:column="53">)</op:operator><op:operator pos:line="177" pos:column="54">.</op:operator><call><name pos:line="177" pos:column="55">ToList</name><argument_list pos:line="177" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>

                <foreach pos:line="179" pos:column="17">foreach(<init><decl><type><name pos:line="179" pos:column="25">var</name></type> <name pos:line="179" pos:column="29">child</name> <range pos:line="179" pos:column="35">in <expr><name pos:line="179" pos:column="38">orphanedChildren</name></expr></range></decl></init>) <block pos:line="179" pos:column="56">{
                    <expr_stmt><expr><call><name><name pos:line="180" pos:column="21">child</name><op:operator pos:line="180" pos:column="26">.</op:operator><name pos:line="180" pos:column="27">ResetPrefix</name></name><argument_list pos:line="180" pos:column="38">()</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
                <expr_stmt><expr><name pos:line="182" pos:column="17">ParentStatement</name> <op:operator pos:line="182" pos:column="33">=</op:operator> <name pos:line="182" pos:column="35">null</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>
        
        <function><type><specifier pos:line="186" pos:column="9">protected</specifier> <specifier pos:line="186" pos:column="19">override</specifier> <name pos:line="186" pos:column="28">void</name></type> <name pos:line="186" pos:column="33">RestructureChildren</name><parameter_list pos:line="186" pos:column="52">()</parameter_list> <block pos:line="186" pos:column="55">{
            <decl_stmt><decl><type><name pos:line="187" pos:column="13">var</name></type> <name pos:line="187" pos:column="17">children</name> <init pos:line="187" pos:column="26">= <expr><call><name><name pos:line="187" pos:column="28">Statement</name><op:operator pos:line="187" pos:column="37">.</op:operator><name pos:line="187" pos:column="38">RestructureChildren</name></name><argument_list pos:line="187" pos:column="57">(<argument><expr><name pos:line="187" pos:column="58">ChildStatements</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="188" pos:column="13">_nameCache</name><op:operator pos:line="188" pos:column="23">.</op:operator><name pos:line="188" pos:column="24">Clear</name></name><argument_list pos:line="188" pos:column="29">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="189" pos:column="13">ClearChildren</name><argument_list pos:line="189" pos:column="26">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="190" pos:column="13">AddChildStatements</name><argument_list pos:line="190" pos:column="31">(<argument><expr><name pos:line="190" pos:column="32">children</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="192" pos:column="13">var</name></type> <name pos:line="192" pos:column="17">namedChildrenWithPrefixes</name> <init pos:line="192" pos:column="43">= <expr><op:operator pos:line="192" pos:column="45">(</op:operator><linq><from pos:line="192" pos:column="46">from <expr><name pos:line="192" pos:column="51">child</name></expr> <in pos:line="192" pos:column="57">in <expr><call><name><name pos:line="192" pos:column="60">children</name><op:operator pos:line="192" pos:column="68">.</op:operator><name><name pos:line="192" pos:column="69">OfType</name><argument_list pos:line="192" pos:column="75">&lt;<argument><name pos:line="192" pos:column="76">NamedScope</name></argument>&gt;</argument_list></name></name><argument_list pos:line="192" pos:column="87">()</argument_list></call></expr></in></from>
                                             <where pos:line="193" pos:column="46">where <expr><op:operator pos:line="193" pos:column="52">!</op:operator><name><name pos:line="193" pos:column="53">child</name><op:operator pos:line="193" pos:column="58">.</op:operator><name pos:line="193" pos:column="59">PrefixIsResolved</name></name></expr></where>
                                             <select pos:line="194" pos:column="46">select <expr><name pos:line="194" pos:column="53">child</name></expr></select></linq><op:operator pos:line="194" pos:column="58">)</op:operator><op:operator pos:line="194" pos:column="59">.</op:operator><call><name><name pos:line="194" pos:column="60">ToList</name><argument_list pos:line="194" pos:column="66">&lt;<argument><name pos:line="194" pos:column="67">NamedScope</name></argument>&gt;</argument_list></name><argument_list pos:line="194" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="196" pos:column="13">// 2. check to see if children with prefixes can be relocated</comment>
            <foreach pos:line="197" pos:column="13">foreach(<init><decl><type><name pos:line="197" pos:column="21">var</name></type> <name pos:line="197" pos:column="25">child</name> <range pos:line="197" pos:column="31">in <expr><name pos:line="197" pos:column="34">namedChildrenWithPrefixes</name></expr></range></decl></init>) <block pos:line="197" pos:column="61">{
                <decl_stmt><decl><type><name pos:line="198" pos:column="17">var</name></type> <name pos:line="198" pos:column="21">firstPossibleParent</name> <init pos:line="198" pos:column="41">= <expr><call><name><name pos:line="198" pos:column="43">child</name><op:operator pos:line="198" pos:column="48">.</op:operator><name pos:line="198" pos:column="49">Prefix</name><op:operator pos:line="198" pos:column="55">.</op:operator><name pos:line="198" pos:column="56">FindMatches</name></name><argument_list pos:line="198" pos:column="67">()</argument_list></call><op:operator pos:line="198" pos:column="69">.</op:operator><call><name pos:line="198" pos:column="70">FirstOrDefault</name><argument_list pos:line="198" pos:column="84">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="199" pos:column="17">if<condition pos:line="199" pos:column="19">(<expr><name pos:line="199" pos:column="20">null</name> <op:operator pos:line="199" pos:column="25">!=</op:operator> <name pos:line="199" pos:column="28">firstPossibleParent</name></expr>)</condition><then pos:line="199" pos:column="48"> <block pos:line="199" pos:column="49">{
                    <expr_stmt><expr><call><name pos:line="200" pos:column="21">RemoveChild</name><argument_list pos:line="200" pos:column="32">(<argument><expr><name pos:line="200" pos:column="33">child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="201" pos:column="21">child</name><op:operator pos:line="201" pos:column="26">.</op:operator><name pos:line="201" pos:column="27">MapPrefix</name></name><argument_list pos:line="201" pos:column="36">(<argument><expr><name pos:line="201" pos:column="37">firstPossibleParent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="202" pos:column="21">firstPossibleParent</name><op:operator pos:line="202" pos:column="40">.</op:operator><name pos:line="202" pos:column="41">AddChildStatement</name></name><argument_list pos:line="202" pos:column="58">(<argument><expr><name pos:line="202" pos:column="59">child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="203" pos:column="21">firstPossibleParent</name><op:operator pos:line="203" pos:column="40">.</op:operator><name pos:line="203" pos:column="41">RestructureChildren</name></name><argument_list pos:line="203" pos:column="60">()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></foreach>
        }</block></function>

        <comment type="line" pos:line="208" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="209" pos:column="9">/// Processes the child of the current reader position into a child of this object.</comment>
        <comment type="line" pos:line="210" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="211" pos:column="9">/// &lt;param name="reader"&gt;The XML reader&lt;/param&gt;</comment>
        <function><type><specifier pos:line="212" pos:column="9">protected</specifier> <specifier pos:line="212" pos:column="19">override</specifier> <name pos:line="212" pos:column="28">void</name></type> <name pos:line="212" pos:column="33">ReadXmlChild</name><parameter_list pos:line="212" pos:column="45">(<param><decl><type><name pos:line="212" pos:column="46">XmlReader</name></type> <name pos:line="212" pos:column="56">reader</name></decl></param>)</parameter_list> <block pos:line="212" pos:column="64">{
            <if pos:line="213" pos:column="13">if<condition pos:line="213" pos:column="15">(<expr><name pos:line="213" pos:column="16">XmlNameName</name> <op:operator pos:line="213" pos:column="28">==</op:operator> <name><name pos:line="213" pos:column="31">reader</name><op:operator pos:line="213" pos:column="37">.</op:operator><name pos:line="213" pos:column="38">Name</name></name></expr>)</condition><then pos:line="213" pos:column="43"> <block pos:line="213" pos:column="44">{
                <expr_stmt><expr><name><name pos:line="214" pos:column="17">this</name><op:operator pos:line="214" pos:column="21">.</op:operator><name pos:line="214" pos:column="22">Name</name></name> <op:operator pos:line="214" pos:column="27">=</op:operator> <call><name><name pos:line="214" pos:column="29">reader</name><op:operator pos:line="214" pos:column="35">.</op:operator><name pos:line="214" pos:column="36">ReadElementContentAsString</name></name><argument_list pos:line="214" pos:column="62">()</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="215" pos:column="15">else <if pos:line="215" pos:column="20">if<condition pos:line="215" pos:column="22">(<expr><name pos:line="215" pos:column="23">XmlAccessibilityName</name> <op:operator pos:line="215" pos:column="44">==</op:operator> <name><name pos:line="215" pos:column="47">reader</name><op:operator pos:line="215" pos:column="53">.</op:operator><name pos:line="215" pos:column="54">Name</name></name></expr>)</condition><then pos:line="215" pos:column="59"> <block pos:line="215" pos:column="60">{
                <expr_stmt><expr><name><name pos:line="216" pos:column="17">this</name><op:operator pos:line="216" pos:column="21">.</op:operator><name pos:line="216" pos:column="22">Accessibility</name></name> <op:operator pos:line="216" pos:column="36">=</op:operator> <call><name><name pos:line="216" pos:column="38">AccessModifierExtensions</name><op:operator pos:line="216" pos:column="62">.</op:operator><name pos:line="216" pos:column="63">FromKeywordString</name></name><argument_list pos:line="216" pos:column="80">(<argument><expr><call><name><name pos:line="216" pos:column="81">reader</name><op:operator pos:line="216" pos:column="87">.</op:operator><name pos:line="216" pos:column="88">ReadElementContentAsString</name></name><argument_list pos:line="216" pos:column="114">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="217" pos:column="15">else <if pos:line="217" pos:column="20">if<condition pos:line="217" pos:column="22">(<expr><name pos:line="217" pos:column="23">XmlPrefixName</name> <op:operator pos:line="217" pos:column="37">==</op:operator> <name><name pos:line="217" pos:column="40">reader</name><op:operator pos:line="217" pos:column="46">.</op:operator><name pos:line="217" pos:column="47">Name</name></name></expr>)</condition><then pos:line="217" pos:column="52"> <block pos:line="217" pos:column="53">{
                <expr_stmt><expr><name><name pos:line="218" pos:column="17">this</name><op:operator pos:line="218" pos:column="21">.</op:operator><name pos:line="218" pos:column="22">Prefix</name></name> <op:operator pos:line="218" pos:column="29">=</op:operator> <call><name><name pos:line="218" pos:column="31">XmlSerialization</name><op:operator pos:line="218" pos:column="47">.</op:operator><name pos:line="218" pos:column="48">ReadChildExpression</name></name><argument_list pos:line="218" pos:column="67">(<argument><expr><name pos:line="218" pos:column="68">reader</name></expr></argument>)</argument_list></call> <op:operator pos:line="218" pos:column="76">as</op:operator> <name pos:line="218" pos:column="79">NamePrefix</name></expr>;</expr_stmt>
            }</block></then> <else pos:line="219" pos:column="15">else <block pos:line="219" pos:column="20">{
                <expr_stmt><expr><call><name><name pos:line="220" pos:column="17">base</name><op:operator pos:line="220" pos:column="21">.</op:operator><name pos:line="220" pos:column="22">ReadXmlChild</name></name><argument_list pos:line="220" pos:column="34">(<argument><expr><name pos:line="220" pos:column="35">reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if></else></if></else></if>
        }</block></function>

        <comment type="line" pos:line="224" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="225" pos:column="9">/// Writes the contents of this object to &lt;paramref name="writer"/&gt;.</comment>
        <comment type="line" pos:line="226" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="227" pos:column="9">/// &lt;param name="writer"&gt;The XML writer to write to&lt;/param&gt;</comment>
        <function><type><specifier pos:line="228" pos:column="9">protected</specifier> <specifier pos:line="228" pos:column="19">override</specifier> <name pos:line="228" pos:column="28">void</name></type> <name pos:line="228" pos:column="33">WriteXmlContents</name><parameter_list pos:line="228" pos:column="49">(<param><decl><type><name pos:line="228" pos:column="50">XmlWriter</name></type> <name pos:line="228" pos:column="60">writer</name></decl></param>)</parameter_list> <block pos:line="228" pos:column="68">{
            <if pos:line="229" pos:column="13">if<condition pos:line="229" pos:column="15">(<expr><op:operator pos:line="229" pos:column="16">!</op:operator><call><name><name pos:line="229" pos:column="17">string</name><op:operator pos:line="229" pos:column="23">.</op:operator><name pos:line="229" pos:column="24">IsNullOrEmpty</name></name><argument_list pos:line="229" pos:column="37">(<argument><expr><name pos:line="229" pos:column="38">Name</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="229" pos:column="44"> <block pos:line="229" pos:column="45">{
                <expr_stmt><expr><call><name><name pos:line="230" pos:column="17">writer</name><op:operator pos:line="230" pos:column="23">.</op:operator><name pos:line="230" pos:column="24">WriteElementString</name></name><argument_list pos:line="230" pos:column="42">(<argument><expr><name pos:line="230" pos:column="43">XmlNameName</name></expr></argument>, <argument><expr><name pos:line="230" pos:column="56">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="233" pos:column="13">string</name></type> <name pos:line="233" pos:column="20">attribute</name> <init pos:line="233" pos:column="30">= <expr><call><name><name pos:line="233" pos:column="32">Accessibility</name><op:operator pos:line="233" pos:column="45">.</op:operator><name pos:line="233" pos:column="46">ToKeywordString</name></name><argument_list pos:line="233" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="234" pos:column="13">if<condition pos:line="234" pos:column="15">(<expr><name><name pos:line="234" pos:column="16">AccessModifier</name><op:operator pos:line="234" pos:column="30">.</op:operator><name pos:line="234" pos:column="31">None</name></name> <op:operator pos:line="234" pos:column="36">!=</op:operator> <name pos:line="234" pos:column="39">Accessibility</name></expr>)</condition><then pos:line="234" pos:column="53"> <block pos:line="234" pos:column="54">{
                <expr_stmt><expr><call><name><name pos:line="235" pos:column="17">writer</name><op:operator pos:line="235" pos:column="23">.</op:operator><name pos:line="235" pos:column="24">WriteElementString</name></name><argument_list pos:line="235" pos:column="42">(<argument><expr><name pos:line="235" pos:column="43">XmlAccessibilityName</name></expr></argument>, <argument><expr><call><name><name pos:line="235" pos:column="65">Accessibility</name><op:operator pos:line="235" pos:column="78">.</op:operator><name pos:line="235" pos:column="79">ToKeywordString</name></name><argument_list pos:line="235" pos:column="94">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if pos:line="237" pos:column="13">if<condition pos:line="237" pos:column="15">(<expr><name pos:line="237" pos:column="16">null</name> <op:operator pos:line="237" pos:column="21">!=</op:operator> <name pos:line="237" pos:column="24">Prefix</name></expr>)</condition><then pos:line="237" pos:column="31"> <block pos:line="237" pos:column="32">{
                <expr_stmt><expr><call><name><name pos:line="238" pos:column="17">XmlSerialization</name><op:operator pos:line="238" pos:column="33">.</op:operator><name pos:line="238" pos:column="34">WriteElement</name></name><argument_list pos:line="238" pos:column="46">(<argument><expr><name pos:line="238" pos:column="47">writer</name></expr></argument>, <argument><expr><name pos:line="238" pos:column="55">Prefix</name></expr></argument>, <argument><expr><name pos:line="238" pos:column="63">XmlPrefixName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name><name pos:line="241" pos:column="13">base</name><op:operator pos:line="241" pos:column="17">.</op:operator><name pos:line="241" pos:column="18">WriteXmlContents</name></name><argument_list pos:line="241" pos:column="34">(<argument><expr><name pos:line="241" pos:column="35">writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="244" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="245" pos:column="9">/// Returns the children of this statement that have the same name as the given &lt;paramref name="use"/&gt;, and the given type.</comment>
        <comment type="line" pos:line="246" pos:column="9">/// This method searches only the immediate children, and not further descendants.</comment>
        <comment type="line" pos:line="247" pos:column="9">/// The order of children within a NamedScope does not matter, so the location of the use is not taken into account.</comment>
        <comment type="line" pos:line="248" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="249" pos:column="9">/// &lt;typeparam name="T"&gt;The type of children to return.&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="250" pos:column="9">/// &lt;param name="use"&gt;The use containing the name to search for.&lt;/param&gt;</comment>
        <comment type="line" pos:line="251" pos:column="9">/// &lt;param name="searchDeclarations"&gt;Whether to search the child DeclarationStatements for named entities.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="252" pos:column="9">public</specifier> <specifier pos:line="252" pos:column="16">override</specifier> <name><name pos:line="252" pos:column="25">IEnumerable</name><argument_list pos:line="252" pos:column="36">&lt;<argument><name pos:line="252" pos:column="37">T</name></argument>&gt;</argument_list></name></type> <name><name pos:line="252" pos:column="40">GetNamedChildren</name><argument_list pos:line="252" pos:column="56">&lt;<argument><name pos:line="252" pos:column="57">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="252" pos:column="59">(<param><decl><type><name pos:line="252" pos:column="60">NameUse</name></type> <name pos:line="252" pos:column="68">use</name></decl></param>, <param><decl><type><name pos:line="252" pos:column="73">bool</name></type> <name pos:line="252" pos:column="78">searchDeclarations</name></decl></param>)</parameter_list> <block pos:line="252" pos:column="98">{
            <if pos:line="253" pos:column="13">if<condition pos:line="253" pos:column="15">(<expr><name pos:line="253" pos:column="16">use</name> <op:operator pos:line="253" pos:column="20">==</op:operator> <name pos:line="253" pos:column="23">null</name></expr>)</condition><then pos:line="253" pos:column="28"> <block pos:line="253" pos:column="29">{ <throw pos:line="253" pos:column="31">throw <expr><op:operator pos:line="253" pos:column="37">new</op:operator> <call><name pos:line="253" pos:column="41">ArgumentNullException</name><argument_list pos:line="253" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="253" pos:column="63">"use"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>
            <return pos:line="254" pos:column="13">return <expr><call><name><name pos:line="254" pos:column="20">GetNamedChildren</name><argument_list pos:line="254" pos:column="36">&lt;<argument><name pos:line="254" pos:column="37">T</name></argument>&gt;</argument_list></name><argument_list pos:line="254" pos:column="39">(<argument><expr><name><name pos:line="254" pos:column="40">use</name><op:operator pos:line="254" pos:column="43">.</op:operator><name pos:line="254" pos:column="44">Name</name></name></expr></argument>, <argument><expr><name pos:line="254" pos:column="50">searchDeclarations</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="257" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="258" pos:column="9">/// Returns the children of this statement named &lt;paramref name="name"/&gt; and the given &lt;typeparamref name="T"/&gt;.</comment>
        <comment type="line" pos:line="259" pos:column="9">/// This method searches only the immediate children.</comment>
        <comment type="line" pos:line="260" pos:column="9">/// In order to speed up the search, this method consults the internal name cache to get the list of matching &lt;see cref="NamedScope"&gt;named scopes&lt;/see&gt;</comment>
        <comment type="line" pos:line="261" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="262" pos:column="9">/// &lt;typeparam name="T"&gt;The type to filter on&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="263" pos:column="9">/// &lt;param name="name"&gt;The name to search for&lt;/param&gt;</comment>
        <comment type="line" pos:line="264" pos:column="9">/// &lt;param name="searchDeclarations"&gt;Whether to search the child declaration statements for named entities.&lt;/param&gt;</comment>
        <comment type="line" pos:line="265" pos:column="9">/// &lt;returns&gt;Any children of this statement named &lt;paramref name="name"/&gt; of type &lt;typeparamref name="T"/&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="266" pos:column="9">public</specifier> <specifier pos:line="266" pos:column="16">override</specifier> <name><name pos:line="266" pos:column="25">IEnumerable</name><argument_list pos:line="266" pos:column="36">&lt;<argument><name pos:line="266" pos:column="37">T</name></argument>&gt;</argument_list></name></type> <name><name pos:line="266" pos:column="40">GetNamedChildren</name><argument_list pos:line="266" pos:column="56">&lt;<argument><name pos:line="266" pos:column="57">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="266" pos:column="59">(<param><decl><type><name pos:line="266" pos:column="60">string</name></type> <name pos:line="266" pos:column="67">name</name></decl></param>, <param><decl><type><name pos:line="266" pos:column="73">bool</name></type> <name pos:line="266" pos:column="78">searchDeclarations</name></decl></param>)</parameter_list> <block pos:line="266" pos:column="98">{
            <decl_stmt><decl><type><name><name pos:line="267" pos:column="13">List</name><argument_list pos:line="267" pos:column="17">&lt;<argument><name pos:line="267" pos:column="18">NamedScope</name></argument>&gt;</argument_list></name></type> <name pos:line="267" pos:column="30">resultsList</name> <init pos:line="267" pos:column="42">= <expr><name pos:line="267" pos:column="44">null</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="268" pos:column="13">_nameCache</name><op:operator pos:line="268" pos:column="23">.</op:operator><name pos:line="268" pos:column="24">TryGetValue</name></name><argument_list pos:line="268" pos:column="35">(<argument><expr><name pos:line="268" pos:column="36">name</name></expr></argument>, <argument><expr pos:line="268" pos:column="42">out <name pos:line="268" pos:column="46">resultsList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name pos:line="269" pos:column="13">IEnumerable</name><argument_list pos:line="269" pos:column="24">&lt;<argument><name pos:line="269" pos:column="25">T</name></argument>&gt;</argument_list></name></type> <name pos:line="269" pos:column="28">results</name> <init pos:line="269" pos:column="36">= <expr><name pos:line="269" pos:column="38">resultsList</name> <op:operator pos:line="269" pos:column="50">!=</op:operator> <name pos:line="269" pos:column="53">null</name> <op:operator pos:line="269" pos:column="58">?</op:operator> <call><name><name pos:line="269" pos:column="60">resultsList</name><op:operator pos:line="269" pos:column="71">.</op:operator><name><name pos:line="269" pos:column="72">OfType</name><argument_list pos:line="269" pos:column="78">&lt;<argument><name pos:line="269" pos:column="79">T</name></argument>&gt;</argument_list></name></name><argument_list pos:line="269" pos:column="81">()</argument_list></call> <op:operator pos:line="269" pos:column="84">:</op:operator> <call><name><name pos:line="269" pos:column="86">Enumerable</name><op:operator pos:line="269" pos:column="96">.</op:operator><name><name pos:line="269" pos:column="97">Empty</name><argument_list pos:line="269" pos:column="102">&lt;<argument><name pos:line="269" pos:column="103">T</name></argument>&gt;</argument_list></name></name><argument_list pos:line="269" pos:column="105">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="270" pos:column="13">if<condition pos:line="270" pos:column="15">(<expr><op:operator pos:line="270" pos:column="16">!</op:operator><name pos:line="270" pos:column="17">searchDeclarations</name></expr>)</condition><then pos:line="270" pos:column="36"> <block pos:line="270" pos:column="37">{ <return pos:line="270" pos:column="39">return <expr><name pos:line="270" pos:column="46">results</name></expr>;</return> }</block></then></if>

            <decl_stmt><decl><type><name pos:line="272" pos:column="13">var</name></type> <name pos:line="272" pos:column="17">decls</name> <init pos:line="272" pos:column="23">= <expr><linq><from pos:line="272" pos:column="25">from <expr><name pos:line="272" pos:column="30">declStmt</name></expr> <in pos:line="272" pos:column="39">in <expr><call><name pos:line="272" pos:column="42">GetChildren</name><argument_list pos:line="272" pos:column="53">()</argument_list></call><op:operator pos:line="272" pos:column="55">.</op:operator><call><name><name pos:line="272" pos:column="56">OfType</name><argument_list pos:line="272" pos:column="62">&lt;<argument><name pos:line="272" pos:column="63">DeclarationStatement</name></argument>&gt;</argument_list></name><argument_list pos:line="272" pos:column="84">()</argument_list></call></expr></in></from>
                        <from pos:line="273" pos:column="25">from <expr><name pos:line="273" pos:column="30">decl</name></expr> <in pos:line="273" pos:column="35">in <expr><call><name><name pos:line="273" pos:column="38">declStmt</name><op:operator pos:line="273" pos:column="46">.</op:operator><name pos:line="273" pos:column="47">GetDeclarations</name></name><argument_list pos:line="273" pos:column="62">()</argument_list></call><op:operator pos:line="273" pos:column="64">.</op:operator><call><name><name pos:line="273" pos:column="65">OfType</name><argument_list pos:line="273" pos:column="71">&lt;<argument><name pos:line="273" pos:column="72">T</name></argument>&gt;</argument_list></name><argument_list pos:line="273" pos:column="74">()</argument_list></call></expr></in></from>
                        <where pos:line="274" pos:column="25">where <expr><call><name><name pos:line="274" pos:column="31">string</name><op:operator pos:line="274" pos:column="37">.</op:operator><name pos:line="274" pos:column="38">Equals</name></name><argument_list pos:line="274" pos:column="44">(<argument><expr><name><name pos:line="274" pos:column="45">decl</name><op:operator pos:line="274" pos:column="49">.</op:operator><name pos:line="274" pos:column="50">Name</name></name></expr></argument>, <argument><expr><name pos:line="274" pos:column="56">name</name></expr></argument>, <argument><expr><name><name pos:line="274" pos:column="62">StringComparison</name><op:operator pos:line="274" pos:column="78">.</op:operator><name pos:line="274" pos:column="79">Ordinal</name></name></expr></argument>)</argument_list></call></expr></where>
                        <select pos:line="275" pos:column="25">select <expr><name pos:line="275" pos:column="32">decl</name></expr></select></linq></expr></init></decl>;</decl_stmt>

            <return pos:line="277" pos:column="13">return <expr><call><name><name pos:line="277" pos:column="20">results</name><op:operator pos:line="277" pos:column="27">.</op:operator><name pos:line="277" pos:column="28">Concat</name></name><argument_list pos:line="277" pos:column="34">(<argument><expr><name pos:line="277" pos:column="35">decls</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
        <comment type="line" pos:line="279" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="280" pos:column="9">/// Returns the locations where this entity appears in the source.</comment>
        <comment type="line" pos:line="281" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="282" pos:column="9">public</specifier> <name><name pos:line="282" pos:column="16">IEnumerable</name><argument_list pos:line="282" pos:column="27">&lt;<argument><name pos:line="282" pos:column="28">SrcMLLocation</name></argument>&gt;</argument_list></name></type> <name pos:line="282" pos:column="43">GetLocations</name><parameter_list pos:line="282" pos:column="55">()</parameter_list> <block pos:line="282" pos:column="58">{
            <return pos:line="283" pos:column="13">return <expr><name pos:line="283" pos:column="20">Locations</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="286" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="287" pos:column="9">/// Returns all the expressions within this statement.</comment>
        <comment type="line" pos:line="288" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="289" pos:column="9">public</specifier> <specifier pos:line="289" pos:column="16">override</specifier> <name><name pos:line="289" pos:column="25">IEnumerable</name><argument_list pos:line="289" pos:column="36">&lt;<argument><name pos:line="289" pos:column="37">Expression</name></argument>&gt;</argument_list></name></type> <name pos:line="289" pos:column="49">GetExpressions</name><parameter_list pos:line="289" pos:column="63">()</parameter_list> <block pos:line="289" pos:column="66">{
            <if pos:line="290" pos:column="13">if<condition pos:line="290" pos:column="15">(<expr><name pos:line="290" pos:column="16">Prefix</name> <op:operator pos:line="290" pos:column="23">!=</op:operator> <name pos:line="290" pos:column="26">null</name></expr>)</condition><then pos:line="290" pos:column="31"> <block pos:line="290" pos:column="32">{
                <return><specifier pos:line="291" pos:column="17">yield</specifier> return <expr><name pos:line="291" pos:column="30">Prefix</name></expr>;</return>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="295" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="296" pos:column="9">/// Returns a string representation of this statement.</comment>
        <comment type="line" pos:line="297" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="298" pos:column="9">public</specifier> <specifier pos:line="298" pos:column="16">override</specifier> <name pos:line="298" pos:column="25">string</name></type> <name pos:line="298" pos:column="32">ToString</name><parameter_list pos:line="298" pos:column="40">()</parameter_list> <block pos:line="298" pos:column="43">{
            <if pos:line="299" pos:column="13">if<condition pos:line="299" pos:column="15">(<expr><name pos:line="299" pos:column="16">Accessibility</name> <op:operator pos:line="299" pos:column="30">==</op:operator> <name><name pos:line="299" pos:column="33">AccessModifier</name><op:operator pos:line="299" pos:column="47">.</op:operator><name pos:line="299" pos:column="48">None</name></name></expr>)</condition><then pos:line="299" pos:column="53"> <block pos:line="299" pos:column="54">{
                <return pos:line="300" pos:column="17">return <expr><name pos:line="300" pos:column="24">Name</name></expr>;</return>
            }</block></then> <else pos:line="301" pos:column="15">else <block pos:line="301" pos:column="20">{
                <return pos:line="302" pos:column="17">return <expr><call><name><name pos:line="302" pos:column="24">string</name><op:operator pos:line="302" pos:column="30">.</op:operator><name pos:line="302" pos:column="31">Format</name></name><argument_list pos:line="302" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="302" pos:column="38">"{0} {1}"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="302" pos:column="49">Accessibility</name><op:operator pos:line="302" pos:column="62">.</op:operator><name pos:line="302" pos:column="63">ToKeywordString</name></name><argument_list pos:line="302" pos:column="78">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="302" pos:column="82">Name</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></else></if>
        }</block></function>

        <cpp:region pos:line="306" pos:column="9">#<cpp:directive pos:line="306" pos:column="10">region</cpp:directive> Private Methods</cpp:region>
        <comment type="line" pos:line="307" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="308" pos:column="9">/// Adds &lt;paramref name="namedChild"/&gt; to the name cache.</comment>
        <comment type="line" pos:line="309" pos:column="9">/// If &lt;paramref name="namedChild"/&gt; is null, then nothing happens.</comment>
        <comment type="line" pos:line="310" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="311" pos:column="9">/// &lt;param name="namedChild"&gt;The named child to add&lt;/param&gt;</comment>
        <function><type><specifier pos:line="312" pos:column="9">private</specifier> <name pos:line="312" pos:column="17">void</name></type> <name pos:line="312" pos:column="22">AddNamedChild</name><parameter_list pos:line="312" pos:column="35">(<param><decl><type><name pos:line="312" pos:column="36">NamedScope</name></type> <name pos:line="312" pos:column="47">namedChild</name></decl></param>)</parameter_list> <block pos:line="312" pos:column="59">{
            <if pos:line="313" pos:column="13">if<condition pos:line="313" pos:column="15">(<expr><name pos:line="313" pos:column="16">null</name> <op:operator pos:line="313" pos:column="21">==</op:operator> <name pos:line="313" pos:column="24">namedChild</name></expr>)</condition><then pos:line="313" pos:column="35"> <block pos:line="313" pos:column="36">{ <return pos:line="313" pos:column="38">return;</return> }</block></then></if>
            <decl_stmt><decl><type><name><name pos:line="314" pos:column="13">List</name><argument_list pos:line="314" pos:column="17">&lt;<argument><name pos:line="314" pos:column="18">NamedScope</name></argument>&gt;</argument_list></name></type> <name pos:line="314" pos:column="30">cacheForName</name></decl>;</decl_stmt>
            <if pos:line="315" pos:column="13">if<condition pos:line="315" pos:column="15">(<expr><call><name><name pos:line="315" pos:column="16">_nameCache</name><op:operator pos:line="315" pos:column="26">.</op:operator><name pos:line="315" pos:column="27">TryGetValue</name></name><argument_list pos:line="315" pos:column="38">(<argument><expr><name><name pos:line="315" pos:column="39">namedChild</name><op:operator pos:line="315" pos:column="49">.</op:operator><name pos:line="315" pos:column="50">Name</name></name></expr></argument>, <argument><expr pos:line="315" pos:column="56">out <name pos:line="315" pos:column="60">cacheForName</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="315" pos:column="74"> <block pos:line="315" pos:column="75">{
                <expr_stmt><expr><call><name><name pos:line="316" pos:column="17">cacheForName</name><op:operator pos:line="316" pos:column="29">.</op:operator><name pos:line="316" pos:column="30">Add</name></name><argument_list pos:line="316" pos:column="33">(<argument><expr><name pos:line="316" pos:column="34">namedChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="317" pos:column="15">else <block pos:line="317" pos:column="20">{
                <expr_stmt><expr><name><name pos:line="318" pos:column="17">_nameCache</name><index pos:line="318" pos:column="27">[<expr><name><name pos:line="318" pos:column="28">namedChild</name><op:operator pos:line="318" pos:column="38">.</op:operator><name pos:line="318" pos:column="39">Name</name></name></expr>]</index></name> <op:operator pos:line="318" pos:column="45">=</op:operator> <op:operator pos:line="318" pos:column="47">new</op:operator> <call><name><name pos:line="318" pos:column="51">List</name><argument_list pos:line="318" pos:column="55">&lt;<argument><name pos:line="318" pos:column="56">NamedScope</name></argument>&gt;</argument_list></name><argument_list pos:line="318" pos:column="67">()</argument_list></call> <block pos:line="318" pos:column="70">{ <expr><name pos:line="318" pos:column="72">namedChild</name></expr> }</block></expr>;</expr_stmt>
            }</block></else></if>
        }</block></function>

        <comment type="line" pos:line="322" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="323" pos:column="9">/// Removes &lt;paramref name="namedChild"/&gt; from the name cache.</comment>
        <comment type="line" pos:line="324" pos:column="9">/// If &lt;paramref name="namedChild"/&gt;is null, then nothing happens.</comment>
        <comment type="line" pos:line="325" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="326" pos:column="9">/// &lt;param name="namedChild"&gt;The named child to remove&lt;/param&gt;</comment>
        <function><type><specifier pos:line="327" pos:column="9">private</specifier> <name pos:line="327" pos:column="17">void</name></type> <name pos:line="327" pos:column="22">RemoveNamedChild</name><parameter_list pos:line="327" pos:column="38">(<param><decl><type><name pos:line="327" pos:column="39">NamedScope</name></type> <name pos:line="327" pos:column="50">namedChild</name></decl></param>)</parameter_list> <block pos:line="327" pos:column="62">{
            <if pos:line="328" pos:column="13">if<condition pos:line="328" pos:column="15">(<expr><name pos:line="328" pos:column="16">null</name> <op:operator pos:line="328" pos:column="21">==</op:operator> <name pos:line="328" pos:column="24">namedChild</name></expr>)</condition><then pos:line="328" pos:column="35"> <block pos:line="328" pos:column="36">{ <return pos:line="328" pos:column="38">return;</return> }</block></then></if>
            <decl_stmt><decl><type><name><name pos:line="329" pos:column="13">List</name><argument_list pos:line="329" pos:column="17">&lt;<argument><name pos:line="329" pos:column="18">NamedScope</name></argument>&gt;</argument_list></name></type> <name pos:line="329" pos:column="30">cacheForName</name></decl>;</decl_stmt>
            <if pos:line="330" pos:column="13">if<condition pos:line="330" pos:column="15">(<expr><call><name><name pos:line="330" pos:column="16">_nameCache</name><op:operator pos:line="330" pos:column="26">.</op:operator><name pos:line="330" pos:column="27">TryGetValue</name></name><argument_list pos:line="330" pos:column="38">(<argument><expr><name><name pos:line="330" pos:column="39">namedChild</name><op:operator pos:line="330" pos:column="49">.</op:operator><name pos:line="330" pos:column="50">Name</name></name></expr></argument>, <argument><expr pos:line="330" pos:column="56">out <name pos:line="330" pos:column="60">cacheForName</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="330" pos:column="74"> <block pos:line="330" pos:column="75">{
                <expr_stmt><expr><call><name><name pos:line="331" pos:column="17">cacheForName</name><op:operator pos:line="331" pos:column="29">.</op:operator><name pos:line="331" pos:column="30">Remove</name></name><argument_list pos:line="331" pos:column="36">(<argument><expr><name pos:line="331" pos:column="37">namedChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="332" pos:column="17">if<condition pos:line="332" pos:column="19">(<expr><name><name pos:line="332" pos:column="20">cacheForName</name><op:operator pos:line="332" pos:column="32">.</op:operator><name pos:line="332" pos:column="33">Count</name></name> <op:operator pos:line="332" pos:column="39">==</op:operator> <lit:literal type="number" pos:line="332" pos:column="42">0</lit:literal></expr>)</condition><then pos:line="332" pos:column="44"> <block pos:line="332" pos:column="45">{
                    <expr_stmt><expr><call><name><name pos:line="333" pos:column="21">_nameCache</name><op:operator pos:line="333" pos:column="31">.</op:operator><name pos:line="333" pos:column="32">Remove</name></name><argument_list pos:line="333" pos:column="38">(<argument><expr><name><name pos:line="333" pos:column="39">namedChild</name><op:operator pos:line="333" pos:column="49">.</op:operator><name pos:line="333" pos:column="50">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></function>
        <cpp:endregion pos:line="337" pos:column="9">#<cpp:directive pos:line="337" pos:column="10">endregion</cpp:directive> Private Methods</cpp:endregion>
    }</block></class>
}</block></namespace></unit>
