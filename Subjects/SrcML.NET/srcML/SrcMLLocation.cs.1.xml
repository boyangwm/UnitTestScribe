<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data\SrcMLLocation.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2013 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">System</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Linq</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Xml</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Xml</name><op:operator pos:line="15" pos:column="17">.</op:operator><name pos:line="15" pos:column="18">Linq</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Xml</name><op:operator pos:line="16" pos:column="17">.</op:operator><name pos:line="16" pos:column="18">Serialization</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Xml</name><op:operator pos:line="17" pos:column="17">.</op:operator><name pos:line="17" pos:column="18">XPath</name></name>;</using>

<namespace pos:line="19" pos:column="1">namespace <name><name pos:line="19" pos:column="11">ABB</name><op:operator pos:line="19" pos:column="14">.</op:operator><name pos:line="19" pos:column="15">SrcML</name><op:operator pos:line="19" pos:column="20">.</op:operator><name pos:line="19" pos:column="21">Data</name></name> <block pos:line="19" pos:column="26">{

    <comment type="line" pos:line="21" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="22" pos:column="5">/// Represents a location in a SrcML document. This extends SourceLocation to include an XPath,</comment>
    <comment type="line" pos:line="23" pos:column="5">/// and other relevant properties.</comment>
    <comment type="line" pos:line="24" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="25" pos:column="5">public</specifier> class <name pos:line="25" pos:column="18">SrcMLLocation</name> <super pos:line="25" pos:column="32">: <name pos:line="25" pos:column="34">SourceLocation</name></super> <block pos:line="25" pos:column="49">{
        <comment type="line" pos:line="26" pos:column="9">/// &lt;summary&gt;XML name for serialization&lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="27" pos:column="9">public</specifier> <specifier pos:line="27" pos:column="16">new</specifier> <specifier pos:line="27" pos:column="20">const</specifier> <name pos:line="27" pos:column="26">string</name></type> <name pos:line="27" pos:column="33">XmlName</name> <init pos:line="27" pos:column="41">= <expr><lit:literal type="string" pos:line="27" pos:column="43">"SrcMLLocation"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="29" pos:column="9">/// &lt;summary&gt;XML attribute name for the &lt;see cref="XPath"/&gt; property&lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="30" pos:column="9">public</specifier> <specifier pos:line="30" pos:column="16">const</specifier> <name pos:line="30" pos:column="22">string</name></type> <name pos:line="30" pos:column="29">XmlXPathAttributeName</name> <init pos:line="30" pos:column="51">= <expr><lit:literal type="string" pos:line="30" pos:column="53">"xpath"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="32" pos:column="9">/// &lt;summary&gt;XML attribute name for the &lt;see cref="IsReference"/&gt; property&lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="33" pos:column="9">public</specifier> <specifier pos:line="33" pos:column="16">const</specifier> <name pos:line="33" pos:column="22">string</name></type> <name pos:line="33" pos:column="29">XmlIsReferenceAttribute</name> <init pos:line="33" pos:column="53">= <expr><lit:literal type="string" pos:line="33" pos:column="55">"is_ref"</lit:literal></expr></init></decl>;</decl_stmt>
        <comment type="line" pos:line="34" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="35" pos:column="9">/// Creates a new srcML location object</comment>
        <comment type="line" pos:line="36" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="37" pos:column="9">/// &lt;param name="element"&gt;The srcML element that this location refers to&lt;/param&gt;</comment>
        <comment type="line" pos:line="38" pos:column="9">/// &lt;param name="fileName"&gt;The filename&lt;/param&gt;</comment>
        <constructor><specifier pos:line="39" pos:column="9">public</specifier> <name pos:line="39" pos:column="16">SrcMLLocation</name><parameter_list pos:line="39" pos:column="29">(<param><decl><type><name pos:line="39" pos:column="30">XElement</name></type> <name pos:line="39" pos:column="39">element</name></decl></param>, <param><decl><type><name pos:line="39" pos:column="48">string</name></type> <name pos:line="39" pos:column="55">fileName</name></decl></param>)</parameter_list>
            <member_list pos:line="40" pos:column="13">: <call><name pos:line="40" pos:column="15">this</name><argument_list pos:line="40" pos:column="19">(<argument><expr><name pos:line="40" pos:column="20">element</name></expr></argument>, <argument><expr><name pos:line="40" pos:column="29">fileName</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="40" pos:column="39">false</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="40" pos:column="46">{
        }</block></constructor>

        <comment type="line" pos:line="43" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="44" pos:column="9">/// Creates a new srcML location object based on the given</comment>
        <comment type="line" pos:line="45" pos:column="9">/// &lt;see cref="System.Xml.Linq.XElement"&gt;XML element&lt;/see&gt; and</comment>
        <comment type="line" pos:line="46" pos:column="9">/// &lt;see cref="ABB.SrcML.SRC.Unit"&gt;file unit&lt;/see&gt;</comment>
        <comment type="line" pos:line="47" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="48" pos:column="9">/// &lt;param name="element"&gt;The element (should contain &lt;see cref="ABB.SrcML.POS"/&gt;</comment>
        <comment type="line" pos:line="49" pos:column="9">/// attributes&lt;/param&gt;</comment>
        <comment type="line" pos:line="50" pos:column="9">/// &lt;param name="fileUnit"&gt;The file unit (must be a see cref="ABB.SrcML.SRC.Unit"/&gt;)&lt;/param&gt;</comment>
        <constructor><specifier pos:line="51" pos:column="9">public</specifier> <name pos:line="51" pos:column="16">SrcMLLocation</name><parameter_list pos:line="51" pos:column="29">(<param><decl><type><name pos:line="51" pos:column="30">XElement</name></type> <name pos:line="51" pos:column="39">element</name></decl></param>, <param><decl><type><name pos:line="51" pos:column="48">XElement</name></type> <name pos:line="51" pos:column="57">fileUnit</name></decl></param>)</parameter_list>
            <member_list pos:line="52" pos:column="13">: <call><name pos:line="52" pos:column="15">this</name><argument_list pos:line="52" pos:column="19">(<argument><expr><name pos:line="52" pos:column="20">element</name></expr></argument>, <argument><expr><name pos:line="52" pos:column="29">fileUnit</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="52" pos:column="39">false</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="52" pos:column="46">{
        }</block></constructor>

        <comment type="line" pos:line="55" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="56" pos:column="9">/// Creates a new srcML location object</comment>
        <comment type="line" pos:line="57" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="58" pos:column="9">/// &lt;param name="element"&gt;The srcML element that this location refers to&lt;/param&gt;</comment>
        <comment type="line" pos:line="59" pos:column="9">/// &lt;param name="fileUnit"&gt;The file unit that contains</comment>
        <comment type="line" pos:line="60" pos:column="9">/// &lt;paramref name="element"/&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="61" pos:column="9">/// &lt;param name="isReferenceLocation"&gt;true if this is a reference location; false</comment>
        <comment type="line" pos:line="62" pos:column="9">/// otherwise&lt;/param&gt;</comment>
        <constructor><specifier pos:line="63" pos:column="9">public</specifier> <name pos:line="63" pos:column="16">SrcMLLocation</name><parameter_list pos:line="63" pos:column="29">(<param><decl><type><name pos:line="63" pos:column="30">XElement</name></type> <name pos:line="63" pos:column="39">element</name></decl></param>, <param><decl><type><name pos:line="63" pos:column="48">XElement</name></type> <name pos:line="63" pos:column="57">fileUnit</name></decl></param>, <param><decl><type><name pos:line="63" pos:column="67">bool</name></type> <name pos:line="63" pos:column="72">isReferenceLocation</name></decl></param>)</parameter_list> <block pos:line="63" pos:column="93">{
            <if pos:line="64" pos:column="13">if<condition pos:line="64" pos:column="15">(<expr><name pos:line="64" pos:column="16">element</name> <op:operator pos:line="64" pos:column="24">==</op:operator> <name pos:line="64" pos:column="27">null</name></expr>)</condition><then pos:line="64" pos:column="32">
                <throw pos:line="65" pos:column="17">throw <expr><op:operator pos:line="65" pos:column="23">new</op:operator> <call><name pos:line="65" pos:column="27">ArgumentNullException</name><argument_list pos:line="65" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="65" pos:column="49">"element"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="66" pos:column="13">if<condition pos:line="66" pos:column="15">(<expr><name pos:line="66" pos:column="16">fileUnit</name> <op:operator pos:line="66" pos:column="25">==</op:operator> <name pos:line="66" pos:column="28">null</name></expr>)</condition><then pos:line="66" pos:column="33">
                <throw pos:line="67" pos:column="17">throw <expr><op:operator pos:line="67" pos:column="23">new</op:operator> <call><name pos:line="67" pos:column="27">ArgumentNullException</name><argument_list pos:line="67" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="67" pos:column="49">"fileUnit"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <expr_stmt><expr><name><name pos:line="68" pos:column="13">this</name><op:operator pos:line="68" pos:column="17">.</op:operator><name pos:line="68" pos:column="18">SourceFileName</name></name> <op:operator pos:line="68" pos:column="33">=</op:operator> <call><name><name pos:line="68" pos:column="35">SrcMLElement</name><op:operator pos:line="68" pos:column="47">.</op:operator><name pos:line="68" pos:column="48">GetFileNameForUnit</name></name><argument_list pos:line="68" pos:column="66">(<argument><expr><name pos:line="68" pos:column="67">fileUnit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="69" pos:column="13">this</name><op:operator pos:line="69" pos:column="17">.</op:operator><name pos:line="69" pos:column="18">StartingLineNumber</name></name> <op:operator pos:line="69" pos:column="37">=</op:operator> <call><name><name pos:line="69" pos:column="39">element</name><op:operator pos:line="69" pos:column="46">.</op:operator><name pos:line="69" pos:column="47">GetSrcLineNumber</name></name><argument_list pos:line="69" pos:column="63">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="70" pos:column="13">this</name><op:operator pos:line="70" pos:column="17">.</op:operator><name pos:line="70" pos:column="18">StartingColumnNumber</name></name> <op:operator pos:line="70" pos:column="39">=</op:operator> <call><name><name pos:line="70" pos:column="41">element</name><op:operator pos:line="70" pos:column="48">.</op:operator><name pos:line="70" pos:column="49">GetSrcLinePosition</name></name><argument_list pos:line="70" pos:column="67">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="71" pos:column="13">this</name><op:operator pos:line="71" pos:column="17">.</op:operator><name pos:line="71" pos:column="18">XPath</name></name> <op:operator pos:line="71" pos:column="24">=</op:operator> <call><name><name pos:line="71" pos:column="26">element</name><op:operator pos:line="71" pos:column="33">.</op:operator><name pos:line="71" pos:column="34">GetXPath</name></name><argument_list pos:line="71" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="72" pos:column="13">this</name><op:operator pos:line="72" pos:column="17">.</op:operator><name pos:line="72" pos:column="18">IsReference</name></name> <op:operator pos:line="72" pos:column="30">=</op:operator> <name pos:line="72" pos:column="32">isReferenceLocation</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="73" pos:column="13">SetEndingLocation</name><argument_list pos:line="73" pos:column="30">(<argument><expr><name pos:line="73" pos:column="31">element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="76" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="77" pos:column="9">/// Creates a new srcML location object</comment>
        <comment type="line" pos:line="78" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="79" pos:column="9">/// &lt;param name="element"&gt;The srcML element that this location refers to&lt;/param&gt;</comment>
        <comment type="line" pos:line="80" pos:column="9">/// &lt;param name="fileName"&gt;The filename&lt;/param&gt;</comment>
        <comment type="line" pos:line="81" pos:column="9">/// &lt;param name="isReferenceLocation"&gt;true if this is a reference location; false</comment>
        <comment type="line" pos:line="82" pos:column="9">/// otherwise&lt;/param&gt;</comment>
        <constructor><specifier pos:line="83" pos:column="9">public</specifier> <name pos:line="83" pos:column="16">SrcMLLocation</name><parameter_list pos:line="83" pos:column="29">(<param><decl><type><name pos:line="83" pos:column="30">XElement</name></type> <name pos:line="83" pos:column="39">element</name></decl></param>, <param><decl><type><name pos:line="83" pos:column="48">string</name></type> <name pos:line="83" pos:column="55">fileName</name></decl></param>, <param><decl><type><name pos:line="83" pos:column="65">bool</name></type> <name pos:line="83" pos:column="70">isReferenceLocation</name></decl></param>)</parameter_list> <block pos:line="83" pos:column="91">{
            <if pos:line="84" pos:column="13">if<condition pos:line="84" pos:column="15">(<expr><name pos:line="84" pos:column="16">element</name> <op:operator pos:line="84" pos:column="24">==</op:operator> <name pos:line="84" pos:column="27">null</name></expr>)</condition><then pos:line="84" pos:column="32">
                <throw pos:line="85" pos:column="17">throw <expr><op:operator pos:line="85" pos:column="23">new</op:operator> <call><name pos:line="85" pos:column="27">ArgumentNullException</name><argument_list pos:line="85" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="85" pos:column="49">"element"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <expr_stmt><expr><name><name pos:line="86" pos:column="13">this</name><op:operator pos:line="86" pos:column="17">.</op:operator><name pos:line="86" pos:column="18">SourceFileName</name></name> <op:operator pos:line="86" pos:column="33">=</op:operator> <name pos:line="86" pos:column="35">fileName</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="87" pos:column="13">this</name><op:operator pos:line="87" pos:column="17">.</op:operator><name pos:line="87" pos:column="18">StartingLineNumber</name></name> <op:operator pos:line="87" pos:column="37">=</op:operator> <call><name><name pos:line="87" pos:column="39">element</name><op:operator pos:line="87" pos:column="46">.</op:operator><name pos:line="87" pos:column="47">GetSrcLineNumber</name></name><argument_list pos:line="87" pos:column="63">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="88" pos:column="13">this</name><op:operator pos:line="88" pos:column="17">.</op:operator><name pos:line="88" pos:column="18">StartingColumnNumber</name></name> <op:operator pos:line="88" pos:column="39">=</op:operator> <call><name><name pos:line="88" pos:column="41">element</name><op:operator pos:line="88" pos:column="48">.</op:operator><name pos:line="88" pos:column="49">GetSrcLinePosition</name></name><argument_list pos:line="88" pos:column="67">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="89" pos:column="13">this</name><op:operator pos:line="89" pos:column="17">.</op:operator><name pos:line="89" pos:column="18">XPath</name></name> <op:operator pos:line="89" pos:column="24">=</op:operator> <call><name><name pos:line="89" pos:column="26">element</name><op:operator pos:line="89" pos:column="33">.</op:operator><name pos:line="89" pos:column="34">GetXPath</name></name><argument_list pos:line="89" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="90" pos:column="13">this</name><op:operator pos:line="90" pos:column="17">.</op:operator><name pos:line="90" pos:column="18">IsReference</name></name> <op:operator pos:line="90" pos:column="30">=</op:operator> <name pos:line="90" pos:column="32">isReferenceLocation</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="91" pos:column="13">SetEndingLocation</name><argument_list pos:line="91" pos:column="30">(<argument><expr><name pos:line="91" pos:column="31">element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="94" pos:column="9">/// &lt;summary&gt; Creates a new empty SrcMLLocation object. &lt;/summary&gt;</comment>
        <constructor><specifier pos:line="95" pos:column="9">public</specifier> <name pos:line="95" pos:column="16">SrcMLLocation</name><parameter_list pos:line="95" pos:column="29">()</parameter_list> <member_list pos:line="95" pos:column="32">: <call><name pos:line="95" pos:column="34">base</name><argument_list pos:line="95" pos:column="38">()</argument_list></call> </member_list><block pos:line="95" pos:column="41">{ }</block></constructor>

        <comment type="line" pos:line="97" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="98" pos:column="9">/// True if this location is a reference; false if it is a definition</comment>
        <comment type="line" pos:line="99" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="100" pos:column="9">public</specifier> <name pos:line="100" pos:column="16">bool</name></type> <name pos:line="100" pos:column="21">IsReference</name> <block pos:line="100" pos:column="33">{ <function_decl><name pos:line="100" pos:column="35">get</name>;</function_decl> <function_decl><name pos:line="100" pos:column="40">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="102" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="103" pos:column="9">/// The XPath query that identifies this scope</comment>
        <comment type="line" pos:line="104" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="105" pos:column="9">public</specifier> <name pos:line="105" pos:column="16">string</name></type> <name pos:line="105" pos:column="23">XPath</name> <block pos:line="105" pos:column="29">{ <function_decl><name pos:line="105" pos:column="31">get</name>;</function_decl> <function_decl><name pos:line="105" pos:column="36">set</name>;</function_decl> }</block></decl></decl_stmt>


        <comment type="line" pos:line="108" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="109" pos:column="9">/// Determines whether the given source location occurs within this location. This will be</comment>
        <comment type="line" pos:line="110" pos:column="9">/// determined using the XPath, if set.</comment>
        <comment type="line" pos:line="111" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="112" pos:column="9">/// &lt;param name="otherLoc"&gt;The SourceLocation to test&lt;/param&gt;</comment>
        <comment type="line" pos:line="113" pos:column="9">/// &lt;returns&gt;True if this location subsumes the given location, False otherwise.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="114" pos:column="9">public</specifier> <specifier pos:line="114" pos:column="16">override</specifier> <name pos:line="114" pos:column="25">bool</name></type> <name pos:line="114" pos:column="30">Contains</name><parameter_list pos:line="114" pos:column="38">(<param><decl><type><name pos:line="114" pos:column="39">SourceLocation</name></type> <name pos:line="114" pos:column="54">otherLoc</name></decl></param>)</parameter_list> <block pos:line="114" pos:column="64">{
            <if pos:line="115" pos:column="13">if<condition pos:line="115" pos:column="15">(<expr><name pos:line="115" pos:column="16">otherLoc</name> <op:operator pos:line="115" pos:column="25">==</op:operator> <name pos:line="115" pos:column="28">null</name></expr>)</condition><then pos:line="115" pos:column="33">
                <throw pos:line="116" pos:column="17">throw <expr><op:operator pos:line="116" pos:column="23">new</op:operator> <call><name pos:line="116" pos:column="27">ArgumentNullException</name><argument_list pos:line="116" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="116" pos:column="49">"otherLoc"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="118" pos:column="13">var</name></type> <name pos:line="118" pos:column="17">otherSrcMLLoc</name> <init pos:line="118" pos:column="31">= <expr><name pos:line="118" pos:column="33">otherLoc</name> <op:operator pos:line="118" pos:column="42">as</op:operator> <name pos:line="118" pos:column="45">SrcMLLocation</name></expr></init></decl>;</decl_stmt>
            <if pos:line="119" pos:column="13">if<condition pos:line="119" pos:column="15">(<expr><name pos:line="119" pos:column="16">otherSrcMLLoc</name> <op:operator pos:line="119" pos:column="30">!=</op:operator> <name pos:line="119" pos:column="33">null</name> <op:operator pos:line="119" pos:column="38">&amp;&amp;</op:operator> <op:operator pos:line="119" pos:column="41">!</op:operator><call><name><name pos:line="119" pos:column="42">string</name><op:operator pos:line="119" pos:column="48">.</op:operator><name pos:line="119" pos:column="49">IsNullOrWhiteSpace</name></name><argument_list pos:line="119" pos:column="67">(<argument><expr><name pos:line="119" pos:column="68">XPath</name></expr></argument>)</argument_list></call> <op:operator pos:line="119" pos:column="75">&amp;&amp;</op:operator> <op:operator pos:line="119" pos:column="78">!</op:operator><call><name><name pos:line="119" pos:column="79">string</name><op:operator pos:line="119" pos:column="85">.</op:operator><name pos:line="119" pos:column="86">IsNullOrWhiteSpace</name></name><argument_list pos:line="119" pos:column="104">(<argument><expr><name><name pos:line="119" pos:column="105">otherSrcMLLoc</name><op:operator pos:line="119" pos:column="118">.</op:operator><name pos:line="119" pos:column="119">XPath</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="119" pos:column="126"> <block pos:line="119" pos:column="127">{
                <comment type="line" pos:line="120" pos:column="17">//return XPath.StartsWith(otherSrcMLLoc.XPath);</comment>
                <return pos:line="121" pos:column="17">return <expr><call><name><name pos:line="121" pos:column="24">otherSrcMLLoc</name><op:operator pos:line="121" pos:column="37">.</op:operator><name pos:line="121" pos:column="38">XPath</name><op:operator pos:line="121" pos:column="43">.</op:operator><name pos:line="121" pos:column="44">StartsWith</name></name><argument_list pos:line="121" pos:column="54">(<argument><expr><name><name pos:line="121" pos:column="55">this</name><op:operator pos:line="121" pos:column="59">.</op:operator><name pos:line="121" pos:column="60">XPath</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
            <return pos:line="123" pos:column="13">return <expr><call><name><name pos:line="123" pos:column="20">base</name><op:operator pos:line="123" pos:column="24">.</op:operator><name pos:line="123" pos:column="25">Contains</name></name><argument_list pos:line="123" pos:column="33">(<argument><expr><name pos:line="123" pos:column="34">otherLoc</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="126" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="127" pos:column="9">/// Gets the XElement referred to by &lt;see cref="XPath"/&gt;.</comment>
        <comment type="line" pos:line="128" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="129" pos:column="9">/// &lt;param name="archive"&gt;The archive for this location&lt;/param&gt;</comment>
        <comment type="line" pos:line="130" pos:column="9">/// &lt;returns&gt;The XElement referred to by &lt;see cref="XPath"/&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="131" pos:column="9">public</specifier> <name pos:line="131" pos:column="16">XElement</name></type> <name pos:line="131" pos:column="25">GetXElement</name><parameter_list pos:line="131" pos:column="36">(<param><decl><type><name pos:line="131" pos:column="37">SrcMLArchive</name></type> <name pos:line="131" pos:column="50">archive</name></decl></param>)</parameter_list> <block pos:line="131" pos:column="59">{
            <if pos:line="132" pos:column="13">if<condition pos:line="132" pos:column="15">(<expr><name pos:line="132" pos:column="16">null</name> <op:operator pos:line="132" pos:column="21">==</op:operator> <name pos:line="132" pos:column="24">archive</name></expr>)</condition><then pos:line="132" pos:column="32">
                <throw pos:line="133" pos:column="17">throw <expr><op:operator pos:line="133" pos:column="23">new</op:operator> <call><name pos:line="133" pos:column="27">ArgumentNullException</name><argument_list pos:line="133" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="133" pos:column="49">"archive"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="135" pos:column="13">var</name></type> <name pos:line="135" pos:column="17">unit</name> <init pos:line="135" pos:column="22">= <expr><call><name><name pos:line="135" pos:column="24">archive</name><op:operator pos:line="135" pos:column="31">.</op:operator><name pos:line="135" pos:column="32">GetXElementForSourceFile</name></name><argument_list pos:line="135" pos:column="56">(<argument><expr><name><name pos:line="135" pos:column="57">this</name><op:operator pos:line="135" pos:column="61">.</op:operator><name pos:line="135" pos:column="62">SourceFileName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="136" pos:column="13">if<condition pos:line="136" pos:column="15">(<expr><name pos:line="136" pos:column="16">unit</name> <op:operator pos:line="136" pos:column="21">!=</op:operator> <name pos:line="136" pos:column="24">null</name></expr>)</condition><then pos:line="136" pos:column="29"> <block pos:line="136" pos:column="30">{
                <return pos:line="137" pos:column="17">return <expr><call><name><name pos:line="137" pos:column="24">unit</name><op:operator pos:line="137" pos:column="28">.</op:operator><name pos:line="137" pos:column="29">XPathSelectElement</name></name><argument_list pos:line="137" pos:column="47">(<argument><expr><name><name pos:line="137" pos:column="48">this</name><op:operator pos:line="137" pos:column="52">.</op:operator><name pos:line="137" pos:column="53">XPath</name></name></expr></argument>, <argument><expr><name><name pos:line="137" pos:column="60">SrcMLNamespaces</name><op:operator pos:line="137" pos:column="75">.</op:operator><name pos:line="137" pos:column="76">Manager</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>

            <return pos:line="140" pos:column="13">return <expr><name pos:line="140" pos:column="20">null</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="143" pos:column="9">/// &lt;summary&gt; Returns the XML name for this program element. &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="144" pos:column="9">public</specifier> <specifier pos:line="144" pos:column="16">override</specifier> <name pos:line="144" pos:column="25">string</name></type> <name pos:line="144" pos:column="32">GetXmlName</name><parameter_list pos:line="144" pos:column="42">()</parameter_list> <block pos:line="144" pos:column="45">{ <return pos:line="144" pos:column="47">return <expr><name><name pos:line="144" pos:column="54">SrcMLLocation</name><op:operator pos:line="144" pos:column="67">.</op:operator><name pos:line="144" pos:column="68">XmlName</name></name></expr>;</return> }</block></function>

        <comment type="line" pos:line="146" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="147" pos:column="9">/// Read the XML attributes from the current &lt;paramref name="reader"/&gt; position</comment>
        <comment type="line" pos:line="148" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="149" pos:column="9">/// &lt;param name="reader"&gt;The XML reader&lt;/param&gt;</comment>
        <function><type><specifier pos:line="150" pos:column="9">protected</specifier> <specifier pos:line="150" pos:column="19">override</specifier> <name pos:line="150" pos:column="28">void</name></type> <name pos:line="150" pos:column="33">ReadXmlAttributes</name><parameter_list pos:line="150" pos:column="50">(<param><decl><type><name pos:line="150" pos:column="51">XmlReader</name></type> <name pos:line="150" pos:column="61">reader</name></decl></param>)</parameter_list> <block pos:line="150" pos:column="69">{
            <expr_stmt><expr><name pos:line="151" pos:column="13">XPath</name> <op:operator pos:line="151" pos:column="19">=</op:operator> <call><name><name pos:line="151" pos:column="21">reader</name><op:operator pos:line="151" pos:column="27">.</op:operator><name pos:line="151" pos:column="28">GetAttribute</name></name><argument_list pos:line="151" pos:column="40">(<argument><expr><name pos:line="151" pos:column="41">XmlXPathAttributeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="152" pos:column="13">string</name></type> <name pos:line="152" pos:column="20">attribute</name> <init pos:line="152" pos:column="30">= <expr><call><name><name pos:line="152" pos:column="32">reader</name><op:operator pos:line="152" pos:column="38">.</op:operator><name pos:line="152" pos:column="39">GetAttribute</name></name><argument_list pos:line="152" pos:column="51">(<argument><expr><name pos:line="152" pos:column="52">XmlIsReferenceAttribute</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if pos:line="154" pos:column="13">if<condition pos:line="154" pos:column="15">(<expr><name pos:line="154" pos:column="16">null</name> <op:operator pos:line="154" pos:column="21">!=</op:operator> <name pos:line="154" pos:column="24">attribute</name></expr>)</condition><then pos:line="154" pos:column="34"> <block pos:line="154" pos:column="35">{
                <expr_stmt><expr><name pos:line="155" pos:column="17">IsReference</name> <op:operator pos:line="155" pos:column="29">=</op:operator> <call><name><name pos:line="155" pos:column="31">XmlConvert</name><op:operator pos:line="155" pos:column="41">.</op:operator><name pos:line="155" pos:column="42">ToBoolean</name></name><argument_list pos:line="155" pos:column="51">(<argument><expr><name pos:line="155" pos:column="52">attribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name><name pos:line="158" pos:column="13">base</name><op:operator pos:line="158" pos:column="17">.</op:operator><name pos:line="158" pos:column="18">ReadXmlAttributes</name></name><argument_list pos:line="158" pos:column="35">(<argument><expr><name pos:line="158" pos:column="36">reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="161" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="162" pos:column="9">/// Writes all of the data to be serialized to &lt;paramref name="writer"/&gt;.</comment>
        <comment type="line" pos:line="163" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="164" pos:column="9">/// &lt;param name="writer"&gt;The XML writer&lt;/param&gt;</comment>
        <function><type><specifier pos:line="165" pos:column="9">public</specifier> <specifier pos:line="165" pos:column="16">override</specifier> <name pos:line="165" pos:column="25">void</name></type> <name pos:line="165" pos:column="30">WriteXml</name><parameter_list pos:line="165" pos:column="38">(<param><decl><type><name pos:line="165" pos:column="39">XmlWriter</name></type> <name pos:line="165" pos:column="49">writer</name></decl></param>)</parameter_list> <block pos:line="165" pos:column="57">{
            <expr_stmt><expr><call><name><name pos:line="166" pos:column="13">base</name><op:operator pos:line="166" pos:column="17">.</op:operator><name pos:line="166" pos:column="18">WriteXml</name></name><argument_list pos:line="166" pos:column="26">(<argument><expr><name pos:line="166" pos:column="27">writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="167" pos:column="13">writer</name><op:operator pos:line="167" pos:column="19">.</op:operator><name pos:line="167" pos:column="20">WriteAttributeString</name></name><argument_list pos:line="167" pos:column="40">(<argument><expr><name pos:line="167" pos:column="41">XmlXPathAttributeName</name></expr></argument>, <argument><expr><name pos:line="167" pos:column="64">XPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if pos:line="168" pos:column="13">if<condition pos:line="168" pos:column="15">(<expr><name pos:line="168" pos:column="16">IsReference</name></expr>)</condition><then pos:line="168" pos:column="28"> <block pos:line="168" pos:column="29">{
                <expr_stmt><expr><call><name><name pos:line="169" pos:column="17">writer</name><op:operator pos:line="169" pos:column="23">.</op:operator><name pos:line="169" pos:column="24">WriteAttributeString</name></name><argument_list pos:line="169" pos:column="44">(<argument><expr><name pos:line="169" pos:column="45">XmlIsReferenceAttribute</name></expr></argument>, <argument><expr><call><name><name pos:line="169" pos:column="70">XmlConvert</name><op:operator pos:line="169" pos:column="80">.</op:operator><name pos:line="169" pos:column="81">ToString</name></name><argument_list pos:line="169" pos:column="89">(<argument><expr><name pos:line="169" pos:column="90">IsReference</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="173" pos:column="9">private</specifier> <name pos:line="173" pos:column="17">void</name></type> <name pos:line="173" pos:column="22">SetEndingLocation</name><parameter_list pos:line="173" pos:column="39">(<param><decl><type><name pos:line="173" pos:column="40">XElement</name></type> <name pos:line="173" pos:column="49">element</name></decl></param>)</parameter_list> <block pos:line="173" pos:column="58">{
            <if pos:line="174" pos:column="13">if<condition pos:line="174" pos:column="15">(<expr><name pos:line="174" pos:column="16">element</name> <op:operator pos:line="174" pos:column="24">==</op:operator> <name pos:line="174" pos:column="27">null</name></expr>)</condition><then pos:line="174" pos:column="32">
                <throw pos:line="175" pos:column="17">throw <expr><op:operator pos:line="175" pos:column="23">new</op:operator> <call><name pos:line="175" pos:column="27">ArgumentNullException</name><argument_list pos:line="175" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="175" pos:column="49">"element"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <decl_stmt><decl><type><name pos:line="176" pos:column="13">var</name></type> <name pos:line="176" pos:column="17">current</name> <init pos:line="176" pos:column="25">= <expr><name pos:line="176" pos:column="27">element</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="177" pos:column="13">XElement</name></type> <name pos:line="177" pos:column="22">nextSibling</name> <init pos:line="177" pos:column="34">= <expr><name pos:line="177" pos:column="36">null</name></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="178" pos:column="13">//navigate up until we find a sibling (or the top of the file)</comment>
            <while pos:line="179" pos:column="13">while<condition pos:line="179" pos:column="18">(<expr><name pos:line="179" pos:column="19">nextSibling</name> <op:operator pos:line="179" pos:column="31">==</op:operator> <name pos:line="179" pos:column="34">null</name> <op:operator pos:line="179" pos:column="39">&amp;&amp;</op:operator> <name pos:line="179" pos:column="42">current</name> <op:operator pos:line="179" pos:column="50">!=</op:operator> <name pos:line="179" pos:column="53">null</name></expr>)</condition> <block pos:line="179" pos:column="59">{
                <expr_stmt><expr><name pos:line="180" pos:column="17">nextSibling</name> <op:operator pos:line="180" pos:column="29">=</op:operator> <call><name><name pos:line="180" pos:column="31">current</name><op:operator pos:line="180" pos:column="38">.</op:operator><name pos:line="180" pos:column="39">ElementsAfterSelf</name></name><argument_list pos:line="180" pos:column="56">()</argument_list></call><op:operator pos:line="180" pos:column="58">.</op:operator><call><name pos:line="180" pos:column="59">FirstOrDefault</name><argument_list pos:line="180" pos:column="73">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="181" pos:column="17">current</name> <op:operator pos:line="181" pos:column="25">=</op:operator> <name><name pos:line="181" pos:column="27">current</name><op:operator pos:line="181" pos:column="34">.</op:operator><name pos:line="181" pos:column="35">Parent</name></name></expr>;</expr_stmt>
            }</block></while>

            <if pos:line="184" pos:column="13">if<condition pos:line="184" pos:column="15">(<expr><name pos:line="184" pos:column="16">null</name> <op:operator pos:line="184" pos:column="21">!=</op:operator> <name pos:line="184" pos:column="24">nextSibling</name></expr>)</condition><then pos:line="184" pos:column="36"> <block pos:line="184" pos:column="37">{
                <expr_stmt><expr><name><name pos:line="185" pos:column="17">this</name><op:operator pos:line="185" pos:column="21">.</op:operator><name pos:line="185" pos:column="22">EndingLineNumber</name></name> <op:operator pos:line="185" pos:column="39">=</op:operator> <call><name><name pos:line="185" pos:column="41">nextSibling</name><op:operator pos:line="185" pos:column="52">.</op:operator><name pos:line="185" pos:column="53">GetSrcLineNumber</name></name><argument_list pos:line="185" pos:column="69">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="186" pos:column="17">this</name><op:operator pos:line="186" pos:column="21">.</op:operator><name pos:line="186" pos:column="22">EndingColumnNumber</name></name> <op:operator pos:line="186" pos:column="41">=</op:operator> <call><name><name pos:line="186" pos:column="43">nextSibling</name><op:operator pos:line="186" pos:column="54">.</op:operator><name pos:line="186" pos:column="55">GetSrcLinePosition</name></name><argument_list pos:line="186" pos:column="73">()</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="187" pos:column="15">else <block pos:line="187" pos:column="20">{
                <expr_stmt><expr><name><name pos:line="188" pos:column="17">this</name><op:operator pos:line="188" pos:column="21">.</op:operator><name pos:line="188" pos:column="22">EndingLineNumber</name></name> <op:operator pos:line="188" pos:column="39">=</op:operator> <name><name pos:line="188" pos:column="41">int</name><op:operator pos:line="188" pos:column="44">.</op:operator><name pos:line="188" pos:column="45">MaxValue</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="189" pos:column="17">this</name><op:operator pos:line="189" pos:column="21">.</op:operator><name pos:line="189" pos:column="22">EndingColumnNumber</name></name> <op:operator pos:line="189" pos:column="41">=</op:operator> <name><name pos:line="189" pos:column="43">int</name><op:operator pos:line="189" pos:column="46">.</op:operator><name pos:line="189" pos:column="47">MaxValue</name></name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
