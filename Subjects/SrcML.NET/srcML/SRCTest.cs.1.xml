<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Test\SRCTest.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2010 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">System</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Text</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Collections</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">Generic</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Linq</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">NUnit</name><op:operator pos:line="16" pos:column="12">.</op:operator><name pos:line="16" pos:column="13">Framework</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">IO</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">ABB</name><op:operator pos:line="18" pos:column="10">.</op:operator><name pos:line="18" pos:column="11">SrcML</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">System</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">Xml</name><op:operator pos:line="19" pos:column="17">.</op:operator><name pos:line="19" pos:column="18">Linq</name></name>;</using>

<namespace pos:line="21" pos:column="1">namespace <name><name pos:line="21" pos:column="11">ABB</name><op:operator pos:line="21" pos:column="14">.</op:operator><name pos:line="21" pos:column="15">SrcML</name><op:operator pos:line="21" pos:column="20">.</op:operator><name pos:line="21" pos:column="21">Test</name></name>
<block pos:line="22" pos:column="1">{
    <class><attribute pos:line="23" pos:column="5">[<expr><name pos:line="23" pos:column="6">TestFixture</name></expr>]</attribute>
    <attribute pos:line="24" pos:column="5">[<expr><call><name pos:line="24" pos:column="6">Category</name><argument_list pos:line="24" pos:column="14">(<argument><expr><lit:literal type="string" pos:line="24" pos:column="15">"Build"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="25" pos:column="5">public</specifier> class <name pos:line="25" pos:column="18">SRCTest</name>
    <block pos:line="26" pos:column="5">{
        <function><type><attribute pos:line="27" pos:column="9">[<expr><name pos:line="27" pos:column="10">TestFixtureSetUp</name></expr>]</attribute>
        <specifier pos:line="28" pos:column="9">public</specifier> <specifier pos:line="28" pos:column="16">static</specifier> <name pos:line="28" pos:column="23">void</name></type> <name pos:line="28" pos:column="28">SRCTestInitialize</name><parameter_list pos:line="28" pos:column="45">()</parameter_list>
        <block pos:line="29" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="30" pos:column="13">Directory</name><op:operator pos:line="30" pos:column="22">.</op:operator><name pos:line="30" pos:column="23">CreateDirectory</name></name><argument_list pos:line="30" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="30" pos:column="39">"srctest"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="31" pos:column="13">Directory</name><op:operator pos:line="31" pos:column="22">.</op:operator><name pos:line="31" pos:column="23">CreateDirectory</name></name><argument_list pos:line="31" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="31" pos:column="39">"srctest_xml"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="33" pos:column="13">File</name><op:operator pos:line="33" pos:column="17">.</op:operator><name pos:line="33" pos:column="18">WriteAllText</name></name><argument_list pos:line="33" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="33" pos:column="31">@"srctest\foo.c"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="33" pos:column="49">String</name><op:operator pos:line="33" pos:column="55">.</op:operator><name pos:line="33" pos:column="56">Format</name></name><argument_list pos:line="33" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="33" pos:column="63">@"int foo() {{{0}    printf(""hello world!""); bool x = &lt; 3; printd(""what?"");}}{0}{0}void bar() {{{0}    while(1){0}    {{{0}        printg(""bar"");{0}    }}{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="233">Environment</name><op:operator pos:line="33" pos:column="244">.</op:operator><name pos:line="33" pos:column="245">NewLine</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="35" pos:column="13">File</name><op:operator pos:line="35" pos:column="17">.</op:operator><name pos:line="35" pos:column="18">WriteAllText</name></name><argument_list pos:line="35" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="35" pos:column="31">"srctest\\bar.c"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="35" pos:column="49">String</name><op:operator pos:line="35" pos:column="55">.</op:operator><name pos:line="35" pos:column="56">Format</name></name><argument_list pos:line="35" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="35" pos:column="63">@"int bar() {{{0}printf(""good bye, world"");{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="116">Environment</name><op:operator pos:line="35" pos:column="127">.</op:operator><name pos:line="35" pos:column="128">NewLine</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="38" pos:column="9">[<expr><name pos:line="38" pos:column="10">TestFixtureTearDown</name></expr>]</attribute>
        <specifier pos:line="39" pos:column="9">public</specifier> <specifier pos:line="39" pos:column="16">static</specifier> <name pos:line="39" pos:column="23">void</name></type> <name pos:line="39" pos:column="28">SRCTestCleanup</name><parameter_list pos:line="39" pos:column="42">()</parameter_list>
        <block pos:line="40" pos:column="9">{
            <foreach pos:line="41" pos:column="13">foreach (<init><decl><type><name pos:line="41" pos:column="22">var</name></type> <name pos:line="41" pos:column="26">file</name> <range pos:line="41" pos:column="31">in <expr><call><name><name pos:line="41" pos:column="34">Directory</name><op:operator pos:line="41" pos:column="43">.</op:operator><name pos:line="41" pos:column="44">GetFiles</name></name><argument_list pos:line="41" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="41" pos:column="53">"srctest"</lit:literal></expr></argument>)</argument_list></call></expr></range></decl></init>)
            <block pos:line="42" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="43" pos:column="17">File</name><op:operator pos:line="43" pos:column="21">.</op:operator><name pos:line="43" pos:column="22">Delete</name></name><argument_list pos:line="43" pos:column="28">(<argument><expr><name pos:line="43" pos:column="29">file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
            <foreach pos:line="45" pos:column="13">foreach (<init><decl><type><name pos:line="45" pos:column="22">var</name></type> <name pos:line="45" pos:column="26">file</name> <range pos:line="45" pos:column="31">in <expr><call><name><name pos:line="45" pos:column="34">Directory</name><op:operator pos:line="45" pos:column="43">.</op:operator><name pos:line="45" pos:column="44">GetFiles</name></name><argument_list pos:line="45" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="45" pos:column="53">"srctest_xml"</lit:literal></expr></argument>)</argument_list></call></expr></range></decl></init>)
            <block pos:line="46" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="47" pos:column="17">File</name><op:operator pos:line="47" pos:column="21">.</op:operator><name pos:line="47" pos:column="22">Delete</name></name><argument_list pos:line="47" pos:column="28">(<argument><expr><name pos:line="47" pos:column="29">file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
            <expr_stmt><expr><call><name><name pos:line="49" pos:column="13">Directory</name><op:operator pos:line="49" pos:column="22">.</op:operator><name pos:line="49" pos:column="23">Delete</name></name><argument_list pos:line="49" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="49" pos:column="30">"srctest"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="50" pos:column="13">Directory</name><op:operator pos:line="50" pos:column="22">.</op:operator><name pos:line="50" pos:column="23">Delete</name></name><argument_list pos:line="50" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="50" pos:column="30">"srctest_xml"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="53" pos:column="9">[<expr><name pos:line="53" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="54" pos:column="9">public</specifier> <name pos:line="54" pos:column="16">void</name></type> <name pos:line="54" pos:column="21">CheckPositionNumberWithSingleUnit</name><parameter_list pos:line="54" pos:column="54">()</parameter_list>
        <block pos:line="55" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="56" pos:column="13">var</name></type> <name pos:line="56" pos:column="17">srcmlObject</name> <init pos:line="56" pos:column="29">= <expr><op:operator pos:line="56" pos:column="31">new</op:operator> <call><name><name pos:line="56" pos:column="35">ABB</name><op:operator pos:line="56" pos:column="38">.</op:operator><name pos:line="56" pos:column="39">SrcML</name><op:operator pos:line="56" pos:column="44">.</op:operator><name pos:line="56" pos:column="45">SrcML</name></name><argument_list pos:line="56" pos:column="50">(<argument><expr><call><name><name pos:line="56" pos:column="51">Path</name><op:operator pos:line="56" pos:column="55">.</op:operator><name pos:line="56" pos:column="56">Combine</name></name><argument_list pos:line="56" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="56" pos:column="64">"."</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="56" pos:column="69">"SrcML"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="58" pos:column="13">var</name></type> <name pos:line="58" pos:column="17">doc</name> <init pos:line="58" pos:column="21">= <expr><call><name><name pos:line="58" pos:column="23">srcmlObject</name><op:operator pos:line="58" pos:column="34">.</op:operator><name pos:line="58" pos:column="35">GenerateSrcMLFromFile</name></name><argument_list pos:line="58" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="58" pos:column="57">@"srctest\foo.c"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="58" pos:column="75">@"srctest_xml\singleunit_position.xml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="60" pos:column="13">var</name></type> <name pos:line="60" pos:column="17">firstUnit</name> <init pos:line="60" pos:column="27">= <expr><call><name><name pos:line="60" pos:column="29">doc</name><op:operator pos:line="60" pos:column="32">.</op:operator><name pos:line="60" pos:column="33">FileUnits</name><op:operator pos:line="60" pos:column="42">.</op:operator><name pos:line="60" pos:column="43">First</name></name><argument_list pos:line="60" pos:column="48">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="62" pos:column="13">Assert</name><op:operator pos:line="62" pos:column="19">.</op:operator><name pos:line="62" pos:column="20">AreEqual</name></name><argument_list pos:line="62" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="62" pos:column="29">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="62" pos:column="32">firstUnit</name><op:operator pos:line="62" pos:column="41">.</op:operator><name pos:line="62" pos:column="42">GetSrcLinePosition</name></name><argument_list pos:line="62" pos:column="60">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="63" pos:column="13">Assert</name><op:operator pos:line="63" pos:column="19">.</op:operator><name pos:line="63" pos:column="20">AreEqual</name></name><argument_list pos:line="63" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="63" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="63" pos:column="32">firstUnit</name><op:operator pos:line="63" pos:column="41">.</op:operator><name pos:line="63" pos:column="42">Descendants</name></name><argument_list pos:line="63" pos:column="53">(<argument><expr><name><name pos:line="63" pos:column="54">SRC</name><op:operator pos:line="63" pos:column="57">.</op:operator><name pos:line="63" pos:column="58">Type</name></name></expr></argument>)</argument_list></call><op:operator pos:line="63" pos:column="63">.</op:operator><call><name pos:line="63" pos:column="64">First</name><argument_list pos:line="63" pos:column="69">()</argument_list></call><op:operator pos:line="63" pos:column="71">.</op:operator><call><name pos:line="63" pos:column="72">Element</name><argument_list pos:line="63" pos:column="79">(<argument><expr><name><name pos:line="63" pos:column="80">SRC</name><op:operator pos:line="63" pos:column="83">.</op:operator><name pos:line="63" pos:column="84">Name</name></name></expr></argument>)</argument_list></call><op:operator pos:line="63" pos:column="89">.</op:operator><call><name pos:line="63" pos:column="90">GetSrcLinePosition</name><argument_list pos:line="63" pos:column="108">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="64" pos:column="13">Assert</name><op:operator pos:line="64" pos:column="19">.</op:operator><name pos:line="64" pos:column="20">AreEqual</name></name><argument_list pos:line="64" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="64" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="64" pos:column="32">firstUnit</name><op:operator pos:line="64" pos:column="41">.</op:operator><name pos:line="64" pos:column="42">Element</name></name><argument_list pos:line="64" pos:column="49">(<argument><expr><name><name pos:line="64" pos:column="50">SRC</name><op:operator pos:line="64" pos:column="53">.</op:operator><name pos:line="64" pos:column="54">Function</name></name></expr></argument>)</argument_list></call><op:operator pos:line="64" pos:column="63">.</op:operator><call><name pos:line="64" pos:column="64">GetSrcLinePosition</name><argument_list pos:line="64" pos:column="82">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="65" pos:column="13">Assert</name><op:operator pos:line="65" pos:column="19">.</op:operator><name pos:line="65" pos:column="20">AreEqual</name></name><argument_list pos:line="65" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="65" pos:column="29">5</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="65" pos:column="32">firstUnit</name><op:operator pos:line="65" pos:column="41">.</op:operator><name pos:line="65" pos:column="42">Descendants</name></name><argument_list pos:line="65" pos:column="53">(<argument><expr><name><name pos:line="65" pos:column="54">SRC</name><op:operator pos:line="65" pos:column="57">.</op:operator><name pos:line="65" pos:column="58">Name</name></name></expr></argument>)</argument_list></call><op:operator pos:line="65" pos:column="63">.</op:operator><call><name pos:line="65" pos:column="64">First</name><argument_list pos:line="65" pos:column="69">(<argument><expr><lambda><name pos:line="65" pos:column="70">n</name> <op:operator pos:line="65" pos:column="72">=&gt;</op:operator> <name><name pos:line="65" pos:column="75">n</name><op:operator pos:line="65" pos:column="76">.</op:operator><name pos:line="65" pos:column="77">Value</name></name> <op:operator pos:line="65" pos:column="83">==</op:operator> <lit:literal type="string" pos:line="65" pos:column="86">"foo"</lit:literal></lambda></expr></argument>)</argument_list></call><op:operator pos:line="65" pos:column="92">.</op:operator><call><name pos:line="65" pos:column="93">GetSrcLinePosition</name><argument_list pos:line="65" pos:column="111">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="66" pos:column="13">Assert</name><op:operator pos:line="66" pos:column="19">.</op:operator><name pos:line="66" pos:column="20">AreEqual</name></name><argument_list pos:line="66" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="66" pos:column="29">5</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="66" pos:column="32">firstUnit</name><op:operator pos:line="66" pos:column="41">.</op:operator><name pos:line="66" pos:column="42">Descendants</name></name><argument_list pos:line="66" pos:column="53">(<argument><expr><name><name pos:line="66" pos:column="54">SRC</name><op:operator pos:line="66" pos:column="57">.</op:operator><name pos:line="66" pos:column="58">Name</name></name></expr></argument>)</argument_list></call><op:operator pos:line="66" pos:column="63">.</op:operator><call><name pos:line="66" pos:column="64">First</name><argument_list pos:line="66" pos:column="69">(<argument><expr><lambda><name pos:line="66" pos:column="70">n</name> <op:operator pos:line="66" pos:column="72">=&gt;</op:operator> <name><name pos:line="66" pos:column="75">n</name><op:operator pos:line="66" pos:column="76">.</op:operator><name pos:line="66" pos:column="77">Value</name></name> <op:operator pos:line="66" pos:column="83">==</op:operator> <lit:literal type="string" pos:line="66" pos:column="86">"printf"</lit:literal></lambda></expr></argument>)</argument_list></call><op:operator pos:line="66" pos:column="95">.</op:operator><call><name pos:line="66" pos:column="96">GetSrcLinePosition</name><argument_list pos:line="66" pos:column="114">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="67" pos:column="13">Assert</name><op:operator pos:line="67" pos:column="19">.</op:operator><name pos:line="67" pos:column="20">AreEqual</name></name><argument_list pos:line="67" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="67" pos:column="29">45</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="67" pos:column="33">firstUnit</name><op:operator pos:line="67" pos:column="42">.</op:operator><name pos:line="67" pos:column="43">Descendants</name></name><argument_list pos:line="67" pos:column="54">(<argument><expr><name><name pos:line="67" pos:column="55">SRC</name><op:operator pos:line="67" pos:column="58">.</op:operator><name pos:line="67" pos:column="59">Name</name></name></expr></argument>)</argument_list></call><op:operator pos:line="67" pos:column="64">.</op:operator><call><name pos:line="67" pos:column="65">First</name><argument_list pos:line="67" pos:column="70">(<argument><expr><lambda><name pos:line="67" pos:column="71">n</name> <op:operator pos:line="67" pos:column="73">=&gt;</op:operator> <name><name pos:line="67" pos:column="76">n</name><op:operator pos:line="67" pos:column="77">.</op:operator><name pos:line="67" pos:column="78">Value</name></name> <op:operator pos:line="67" pos:column="84">==</op:operator> <lit:literal type="string" pos:line="67" pos:column="87">"printd"</lit:literal></lambda></expr></argument>)</argument_list></call><op:operator pos:line="67" pos:column="96">.</op:operator><call><name pos:line="67" pos:column="97">GetSrcLinePosition</name><argument_list pos:line="67" pos:column="115">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="69" pos:column="13">Assert</name><op:operator pos:line="69" pos:column="19">.</op:operator><name pos:line="69" pos:column="20">AreEqual</name></name><argument_list pos:line="69" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="69" pos:column="29">6</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="69" pos:column="32">firstUnit</name><op:operator pos:line="69" pos:column="41">.</op:operator><name pos:line="69" pos:column="42">Descendants</name></name><argument_list pos:line="69" pos:column="53">(<argument><expr><name><name pos:line="69" pos:column="54">SRC</name><op:operator pos:line="69" pos:column="57">.</op:operator><name pos:line="69" pos:column="58">Name</name></name></expr></argument>)</argument_list></call><op:operator pos:line="69" pos:column="63">.</op:operator><call><name pos:line="69" pos:column="64">First</name><argument_list pos:line="69" pos:column="69">(<argument><expr><lambda><name pos:line="69" pos:column="70">n</name> <op:operator pos:line="69" pos:column="72">=&gt;</op:operator> <name><name pos:line="69" pos:column="75">n</name><op:operator pos:line="69" pos:column="76">.</op:operator><name pos:line="69" pos:column="77">Value</name></name> <op:operator pos:line="69" pos:column="83">==</op:operator> <lit:literal type="string" pos:line="69" pos:column="86">"bar"</lit:literal></lambda></expr></argument>)</argument_list></call><op:operator pos:line="69" pos:column="92">.</op:operator><call><name pos:line="69" pos:column="93">GetSrcLinePosition</name><argument_list pos:line="69" pos:column="111">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="70" pos:column="13">Assert</name><op:operator pos:line="70" pos:column="19">.</op:operator><name pos:line="70" pos:column="20">AreEqual</name></name><argument_list pos:line="70" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="70" pos:column="29">10</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="70" pos:column="33">firstUnit</name><op:operator pos:line="70" pos:column="42">.</op:operator><name pos:line="70" pos:column="43">Descendants</name></name><argument_list pos:line="70" pos:column="54">(<argument><expr><name><name pos:line="70" pos:column="55">SRC</name><op:operator pos:line="70" pos:column="58">.</op:operator><name pos:line="70" pos:column="59">Condition</name></name></expr></argument>)</argument_list></call><op:operator pos:line="70" pos:column="69">.</op:operator><call><name pos:line="70" pos:column="70">First</name><argument_list pos:line="70" pos:column="75">()</argument_list></call><op:operator pos:line="70" pos:column="77">.</op:operator><call><name pos:line="70" pos:column="78">GetSrcLinePosition</name><argument_list pos:line="70" pos:column="96">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="71" pos:column="13">Assert</name><op:operator pos:line="71" pos:column="19">.</op:operator><name pos:line="71" pos:column="20">AreEqual</name></name><argument_list pos:line="71" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="71" pos:column="29">9</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="71" pos:column="32">firstUnit</name><op:operator pos:line="71" pos:column="41">.</op:operator><name pos:line="71" pos:column="42">Descendants</name></name><argument_list pos:line="71" pos:column="53">(<argument><expr><name><name pos:line="71" pos:column="54">SRC</name><op:operator pos:line="71" pos:column="57">.</op:operator><name pos:line="71" pos:column="58">Name</name></name></expr></argument>)</argument_list></call><op:operator pos:line="71" pos:column="63">.</op:operator><call><name pos:line="71" pos:column="64">First</name><argument_list pos:line="71" pos:column="69">(<argument><expr><lambda><name pos:line="71" pos:column="70">n</name> <op:operator pos:line="71" pos:column="72">=&gt;</op:operator> <name><name pos:line="71" pos:column="75">n</name><op:operator pos:line="71" pos:column="76">.</op:operator><name pos:line="71" pos:column="77">Value</name></name> <op:operator pos:line="71" pos:column="83">==</op:operator> <lit:literal type="string" pos:line="71" pos:column="86">"printg"</lit:literal></lambda></expr></argument>)</argument_list></call><op:operator pos:line="71" pos:column="95">.</op:operator><call><name pos:line="71" pos:column="96">GetSrcLinePosition</name><argument_list pos:line="71" pos:column="114">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="74" pos:column="9">[<expr><name pos:line="74" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="75" pos:column="9">public</specifier> <name pos:line="75" pos:column="16">void</name></type> <name pos:line="75" pos:column="21">GetSrcLineNumberWithSingleUnit</name><parameter_list pos:line="75" pos:column="51">()</parameter_list>
        <block pos:line="76" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="77" pos:column="13">File</name><op:operator pos:line="77" pos:column="17">.</op:operator><name pos:line="77" pos:column="18">WriteAllText</name></name><argument_list pos:line="77" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="77" pos:column="31">"srctest\\singleunitlinenum.c"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="77" pos:column="63">@"int foo() {
printf(""hello world!"");
}"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="80" pos:column="13">var</name></type> <name pos:line="80" pos:column="17">srcmlObject</name> <init pos:line="80" pos:column="29">= <expr><op:operator pos:line="80" pos:column="31">new</op:operator> <call><name pos:line="80" pos:column="35">Src2SrcMLRunner</name><argument_list pos:line="80" pos:column="50">(<argument><expr><call><name><name pos:line="80" pos:column="51">Path</name><op:operator pos:line="80" pos:column="55">.</op:operator><name pos:line="80" pos:column="56">Combine</name></name><argument_list pos:line="80" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="80" pos:column="64">"."</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="80" pos:column="69">"SrcML"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="82" pos:column="13">var</name></type> <name pos:line="82" pos:column="17">doc</name> <init pos:line="82" pos:column="21">= <expr><call><name><name pos:line="82" pos:column="23">srcmlObject</name><op:operator pos:line="82" pos:column="34">.</op:operator><name pos:line="82" pos:column="35">GenerateSrcMLFromFile</name></name><argument_list pos:line="82" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="82" pos:column="57">"srctest\\singleunitlinenum.c"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="82" pos:column="89">@"srctest_xml\singleunit_linenumber.xml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="84" pos:column="13">var</name></type> <name pos:line="84" pos:column="17">unit</name> <init pos:line="84" pos:column="22">= <expr><call><name><name pos:line="84" pos:column="24">doc</name><op:operator pos:line="84" pos:column="27">.</op:operator><name pos:line="84" pos:column="28">FileUnits</name><op:operator pos:line="84" pos:column="37">.</op:operator><name pos:line="84" pos:column="38">First</name></name><argument_list pos:line="84" pos:column="43">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="86" pos:column="13">Assert</name><op:operator pos:line="86" pos:column="19">.</op:operator><name pos:line="86" pos:column="20">AreEqual</name></name><argument_list pos:line="86" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="86" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="86" pos:column="32">unit</name><op:operator pos:line="86" pos:column="36">.</op:operator><name pos:line="86" pos:column="37">GetSrcLineNumber</name></name><argument_list pos:line="86" pos:column="53">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="87" pos:column="13">Assert</name><op:operator pos:line="87" pos:column="19">.</op:operator><name pos:line="87" pos:column="20">AreEqual</name></name><argument_list pos:line="87" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="87" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="87" pos:column="32">unit</name><op:operator pos:line="87" pos:column="36">.</op:operator><name pos:line="87" pos:column="37">Element</name></name><argument_list pos:line="87" pos:column="44">(<argument><expr><name><name pos:line="87" pos:column="45">SRC</name><op:operator pos:line="87" pos:column="48">.</op:operator><name pos:line="87" pos:column="49">Function</name></name></expr></argument>)</argument_list></call><op:operator pos:line="87" pos:column="58">.</op:operator><call><name pos:line="87" pos:column="59">GetSrcLineNumber</name><argument_list pos:line="87" pos:column="75">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="88" pos:column="13">Assert</name><op:operator pos:line="88" pos:column="19">.</op:operator><name pos:line="88" pos:column="20">AreEqual</name></name><argument_list pos:line="88" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="88" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="88" pos:column="32">unit</name><op:operator pos:line="88" pos:column="36">.</op:operator><name pos:line="88" pos:column="37">Descendants</name></name><argument_list pos:line="88" pos:column="48">(<argument><expr><name><name pos:line="88" pos:column="49">SRC</name><op:operator pos:line="88" pos:column="52">.</op:operator><name pos:line="88" pos:column="53">Call</name></name></expr></argument>)</argument_list></call><op:operator pos:line="88" pos:column="58">.</op:operator><call><name pos:line="88" pos:column="59">First</name><argument_list pos:line="88" pos:column="64">()</argument_list></call><op:operator pos:line="88" pos:column="66">.</op:operator><call><name pos:line="88" pos:column="67">GetSrcLineNumber</name><argument_list pos:line="88" pos:column="83">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="91" pos:column="9">[<expr><name pos:line="91" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="92" pos:column="9">public</specifier> <name pos:line="92" pos:column="16">void</name></type> <name pos:line="92" pos:column="21">GetLineInfoWithString</name><parameter_list pos:line="92" pos:column="42">()</parameter_list>
        <block pos:line="93" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="94" pos:column="13">var</name></type> <name pos:line="94" pos:column="17">source</name> <init pos:line="94" pos:column="24">= <expr><lit:literal type="string" pos:line="94" pos:column="26">@"int foo() {
printf(""hello world!"");
}"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="97" pos:column="13">var</name></type> <name pos:line="97" pos:column="17">srcmlObject</name> <init pos:line="97" pos:column="29">= <expr><op:operator pos:line="97" pos:column="31">new</op:operator> <call><name pos:line="97" pos:column="35">Src2SrcMLRunner</name><argument_list pos:line="97" pos:column="50">(<argument><expr><call><name><name pos:line="97" pos:column="51">Path</name><op:operator pos:line="97" pos:column="55">.</op:operator><name pos:line="97" pos:column="56">Combine</name></name><argument_list pos:line="97" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="97" pos:column="64">"."</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="97" pos:column="69">"SrcML"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="99" pos:column="13">var</name></type> <name pos:line="99" pos:column="17">xml</name> <init pos:line="99" pos:column="21">= <expr><call><name><name pos:line="99" pos:column="23">srcmlObject</name><op:operator pos:line="99" pos:column="34">.</op:operator><name pos:line="99" pos:column="35">GenerateSrcMLFromString</name></name><argument_list pos:line="99" pos:column="58">(<argument><expr><name pos:line="99" pos:column="59">source</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="101" pos:column="13">var</name></type> <name pos:line="101" pos:column="17">element</name> <init pos:line="101" pos:column="25">= <expr><call><name><name pos:line="101" pos:column="27">XElement</name><op:operator pos:line="101" pos:column="35">.</op:operator><name pos:line="101" pos:column="36">Parse</name></name><argument_list pos:line="101" pos:column="41">(<argument><expr><name pos:line="101" pos:column="42">xml</name></expr></argument>)</argument_list></call><op:operator pos:line="101" pos:column="46">.</op:operator><call><name pos:line="101" pos:column="47">Elements</name><argument_list pos:line="101" pos:column="55">()</argument_list></call><op:operator pos:line="101" pos:column="57">.</op:operator><call><name pos:line="101" pos:column="58">First</name><argument_list pos:line="101" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="103" pos:column="13">Assert</name><op:operator pos:line="103" pos:column="19">.</op:operator><name pos:line="103" pos:column="20">AreEqual</name></name><argument_list pos:line="103" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="103" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="103" pos:column="32">element</name><op:operator pos:line="103" pos:column="39">.</op:operator><name pos:line="103" pos:column="40">GetSrcLineNumber</name></name><argument_list pos:line="103" pos:column="56">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="104" pos:column="13">Assert</name><op:operator pos:line="104" pos:column="19">.</op:operator><name pos:line="104" pos:column="20">AreEqual</name></name><argument_list pos:line="104" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="104" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="104" pos:column="32">element</name><op:operator pos:line="104" pos:column="39">.</op:operator><name pos:line="104" pos:column="40">GetSrcLinePosition</name></name><argument_list pos:line="104" pos:column="58">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="107" pos:column="9">[<expr><name pos:line="107" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="108" pos:column="9">public</specifier> <name pos:line="108" pos:column="16">void</name></type> <name pos:line="108" pos:column="21">GetSrcLineNumberWithMultipleUnit</name><parameter_list pos:line="108" pos:column="53">()</parameter_list>
        <block pos:line="109" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="110" pos:column="13">var</name></type> <name pos:line="110" pos:column="17">srcmlObject</name> <init pos:line="110" pos:column="29">= <expr><op:operator pos:line="110" pos:column="31">new</op:operator> <call><name pos:line="110" pos:column="35">Src2SrcMLRunner</name><argument_list pos:line="110" pos:column="50">(<argument><expr><call><name><name pos:line="110" pos:column="51">Path</name><op:operator pos:line="110" pos:column="55">.</op:operator><name pos:line="110" pos:column="56">Combine</name></name><argument_list pos:line="110" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="110" pos:column="64">"."</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="110" pos:column="69">"SrcML"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="112" pos:column="13">var</name></type> <name pos:line="112" pos:column="17">doc</name> <init pos:line="112" pos:column="21">= <expr><call><name><name pos:line="112" pos:column="23">srcmlObject</name><op:operator pos:line="112" pos:column="34">.</op:operator><name pos:line="112" pos:column="35">GenerateSrcMLFromDirectory</name></name><argument_list pos:line="112" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="112" pos:column="62">"srctest"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="112" pos:column="73">"srctest_xml\\multipleunit_linenumber.xml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <decl_stmt><decl><type><name pos:line="114" pos:column="13">var</name></type> <name pos:line="114" pos:column="17">firstUnit</name> <init pos:line="114" pos:column="27">= <expr><call><name><name pos:line="114" pos:column="29">doc</name><op:operator pos:line="114" pos:column="32">.</op:operator><name pos:line="114" pos:column="33">FileUnits</name><op:operator pos:line="114" pos:column="42">.</op:operator><name pos:line="114" pos:column="43">First</name></name><argument_list pos:line="114" pos:column="48">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="116" pos:column="13">Assert</name><op:operator pos:line="116" pos:column="19">.</op:operator><name pos:line="116" pos:column="20">AreEqual</name></name><argument_list pos:line="116" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="116" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="116" pos:column="32">firstUnit</name><op:operator pos:line="116" pos:column="41">.</op:operator><name pos:line="116" pos:column="42">Element</name></name><argument_list pos:line="116" pos:column="49">(<argument><expr><name><name pos:line="116" pos:column="50">SRC</name><op:operator pos:line="116" pos:column="53">.</op:operator><name pos:line="116" pos:column="54">Function</name></name></expr></argument>)</argument_list></call><op:operator pos:line="116" pos:column="63">.</op:operator><call><name pos:line="116" pos:column="64">GetSrcLineNumber</name><argument_list pos:line="116" pos:column="80">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="117" pos:column="13">Assert</name><op:operator pos:line="117" pos:column="19">.</op:operator><name pos:line="117" pos:column="20">AreEqual</name></name><argument_list pos:line="117" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="117" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="117" pos:column="32">firstUnit</name><op:operator pos:line="117" pos:column="41">.</op:operator><name pos:line="117" pos:column="42">Descendants</name></name><argument_list pos:line="117" pos:column="53">(<argument><expr><name><name pos:line="117" pos:column="54">SRC</name><op:operator pos:line="117" pos:column="57">.</op:operator><name pos:line="117" pos:column="58">Call</name></name></expr></argument>)</argument_list></call><op:operator pos:line="117" pos:column="63">.</op:operator><call><name pos:line="117" pos:column="64">First</name><argument_list pos:line="117" pos:column="69">()</argument_list></call><op:operator pos:line="117" pos:column="71">.</op:operator><call><name pos:line="117" pos:column="72">GetSrcLineNumber</name><argument_list pos:line="117" pos:column="88">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="120" pos:column="9">[<expr><name pos:line="120" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="121" pos:column="9">public</specifier> <name pos:line="121" pos:column="16">void</name></type> <name pos:line="121" pos:column="21">ToSourceTest</name><parameter_list pos:line="121" pos:column="33">()</parameter_list>
        <block pos:line="122" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="123" pos:column="13">var</name></type> <name pos:line="123" pos:column="17">text</name> <init pos:line="123" pos:column="22">= <expr><call><name><name pos:line="123" pos:column="24">File</name><op:operator pos:line="123" pos:column="28">.</op:operator><name pos:line="123" pos:column="29">ReadAllText</name></name><argument_list pos:line="123" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="123" pos:column="41">"srctest\\foo.c"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="125" pos:column="13">var</name></type> <name pos:line="125" pos:column="17">srcmlObject</name> <init pos:line="125" pos:column="29">= <expr><op:operator pos:line="125" pos:column="31">new</op:operator> <call><name pos:line="125" pos:column="35">Src2SrcMLRunner</name><argument_list pos:line="125" pos:column="50">(<argument><expr><call><name><name pos:line="125" pos:column="51">Path</name><op:operator pos:line="125" pos:column="55">.</op:operator><name pos:line="125" pos:column="56">Combine</name></name><argument_list pos:line="125" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="125" pos:column="64">"."</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="125" pos:column="69">"SrcML"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="127" pos:column="13">var</name></type> <name pos:line="127" pos:column="17">doc</name> <init pos:line="127" pos:column="21">= <expr><call><name><name pos:line="127" pos:column="23">srcmlObject</name><op:operator pos:line="127" pos:column="34">.</op:operator><name pos:line="127" pos:column="35">GenerateSrcMLFromFile</name></name><argument_list pos:line="127" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="127" pos:column="57">"srctest\\foo.c"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="127" pos:column="75">"srctest_xml\\srctest_tosource.xml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="129" pos:column="13">var</name></type> <name pos:line="129" pos:column="17">firstUnit</name> <init pos:line="129" pos:column="27">= <expr><call><name><name pos:line="129" pos:column="29">doc</name><op:operator pos:line="129" pos:column="32">.</op:operator><name pos:line="129" pos:column="33">FileUnits</name><op:operator pos:line="129" pos:column="42">.</op:operator><name pos:line="129" pos:column="43">First</name></name><argument_list pos:line="129" pos:column="48">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="131" pos:column="13">string</name></type> <name pos:line="131" pos:column="20">contentsFromXml</name> <init pos:line="131" pos:column="36">= <expr><call><name><name pos:line="131" pos:column="38">firstUnit</name><op:operator pos:line="131" pos:column="47">.</op:operator><name pos:line="131" pos:column="48">ToSource</name></name><argument_list pos:line="131" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="133" pos:column="13">Assert</name><op:operator pos:line="133" pos:column="19">.</op:operator><name pos:line="133" pos:column="20">AreEqual</name></name><argument_list pos:line="133" pos:column="28">(<argument><expr><name pos:line="133" pos:column="29">text</name></expr></argument>, <argument><expr><name pos:line="133" pos:column="35">contentsFromXml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="136" pos:column="9">[<expr><name pos:line="136" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="137" pos:column="9">public</specifier> <name pos:line="137" pos:column="16">void</name></type> <name pos:line="137" pos:column="21">ParentStatementTest</name><parameter_list pos:line="137" pos:column="40">()</parameter_list>
        <block pos:line="138" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="139" pos:column="13">var</name></type> <name pos:line="139" pos:column="17">srcmlObject</name> <init pos:line="139" pos:column="29">= <expr><op:operator pos:line="139" pos:column="31">new</op:operator> <call><name pos:line="139" pos:column="35">Src2SrcMLRunner</name><argument_list pos:line="139" pos:column="50">(<argument><expr><call><name><name pos:line="139" pos:column="51">Path</name><op:operator pos:line="139" pos:column="55">.</op:operator><name pos:line="139" pos:column="56">Combine</name></name><argument_list pos:line="139" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="139" pos:column="64">"."</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="139" pos:column="69">"SrcML"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="141" pos:column="13">var</name></type> <name pos:line="141" pos:column="17">doc</name> <init pos:line="141" pos:column="21">= <expr><call><name><name pos:line="141" pos:column="23">srcmlObject</name><op:operator pos:line="141" pos:column="34">.</op:operator><name pos:line="141" pos:column="35">GenerateSrcMLFromFile</name></name><argument_list pos:line="141" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="141" pos:column="57">"srctest\\foo.c"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="141" pos:column="75">"srctest_xml\\srctest_parentstatement.xml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="142" pos:column="13">var</name></type> <name pos:line="142" pos:column="17">firstUnit</name> <init pos:line="142" pos:column="27">= <expr><call><name><name pos:line="142" pos:column="29">doc</name><op:operator pos:line="142" pos:column="32">.</op:operator><name pos:line="142" pos:column="33">FileUnits</name><op:operator pos:line="142" pos:column="42">.</op:operator><name pos:line="142" pos:column="43">First</name></name><argument_list pos:line="142" pos:column="48">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="143" pos:column="13">var</name></type> <name pos:line="143" pos:column="17">function</name> <init pos:line="143" pos:column="26">= <expr><call><name><name pos:line="143" pos:column="28">firstUnit</name><op:operator pos:line="143" pos:column="37">.</op:operator><name pos:line="143" pos:column="38">Element</name></name><argument_list pos:line="143" pos:column="45">(<argument><expr><name><name pos:line="143" pos:column="46">SRC</name><op:operator pos:line="143" pos:column="49">.</op:operator><name pos:line="143" pos:column="50">Function</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <decl_stmt><decl><type><name pos:line="145" pos:column="13">var</name></type> <name pos:line="145" pos:column="17">expression</name> <init pos:line="145" pos:column="28">= <expr><call><name><name pos:line="145" pos:column="30">function</name><op:operator pos:line="145" pos:column="38">.</op:operator><name pos:line="145" pos:column="39">Element</name></name><argument_list pos:line="145" pos:column="46">(<argument><expr><name><name pos:line="145" pos:column="47">SRC</name><op:operator pos:line="145" pos:column="50">.</op:operator><name pos:line="145" pos:column="51">Block</name></name></expr></argument>)</argument_list></call><op:operator pos:line="145" pos:column="57">.</op:operator><call><name pos:line="145" pos:column="58">Element</name><argument_list pos:line="145" pos:column="65">(<argument><expr><name><name pos:line="145" pos:column="66">SRC</name><op:operator pos:line="145" pos:column="69">.</op:operator><name pos:line="145" pos:column="70">ExpressionStatement</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="146" pos:column="13">var</name></type> <name pos:line="146" pos:column="17">call</name> <init pos:line="146" pos:column="22">= <expr><call><name><name pos:line="146" pos:column="24">expression</name><op:operator pos:line="146" pos:column="34">.</op:operator><name pos:line="146" pos:column="35">Descendants</name></name><argument_list pos:line="146" pos:column="46">(<argument><expr><name><name pos:line="146" pos:column="47">SRC</name><op:operator pos:line="146" pos:column="50">.</op:operator><name pos:line="146" pos:column="51">Call</name></name></expr></argument>)</argument_list></call><op:operator pos:line="146" pos:column="56">.</op:operator><call><name pos:line="146" pos:column="57">First</name><argument_list pos:line="146" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="148" pos:column="13">var</name></type> <name pos:line="148" pos:column="17">declaration</name> <init pos:line="148" pos:column="29">= <expr><call><name><name pos:line="148" pos:column="31">function</name><op:operator pos:line="148" pos:column="39">.</op:operator><name pos:line="148" pos:column="40">Element</name></name><argument_list pos:line="148" pos:column="47">(<argument><expr><name><name pos:line="148" pos:column="48">SRC</name><op:operator pos:line="148" pos:column="51">.</op:operator><name pos:line="148" pos:column="52">Block</name></name></expr></argument>)</argument_list></call><op:operator pos:line="148" pos:column="58">.</op:operator><call><name pos:line="148" pos:column="59">Element</name><argument_list pos:line="148" pos:column="66">(<argument><expr><name><name pos:line="148" pos:column="67">SRC</name><op:operator pos:line="148" pos:column="70">.</op:operator><name pos:line="148" pos:column="71">DeclarationStatement</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="149" pos:column="13">var</name></type> <name pos:line="149" pos:column="17">variable</name> <init pos:line="149" pos:column="26">= <expr><call><name><name pos:line="149" pos:column="28">declaration</name><op:operator pos:line="149" pos:column="39">.</op:operator><name pos:line="149" pos:column="40">Element</name></name><argument_list pos:line="149" pos:column="47">(<argument><expr><name><name pos:line="149" pos:column="48">SRC</name><op:operator pos:line="149" pos:column="51">.</op:operator><name pos:line="149" pos:column="52">Declaration</name></name></expr></argument>)</argument_list></call><op:operator pos:line="149" pos:column="64">.</op:operator><call><name pos:line="149" pos:column="65">Element</name><argument_list pos:line="149" pos:column="72">(<argument><expr><name><name pos:line="149" pos:column="73">SRC</name><op:operator pos:line="149" pos:column="76">.</op:operator><name pos:line="149" pos:column="77">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="151" pos:column="13">var</name></type> <name pos:line="151" pos:column="17">unitParent</name> <init pos:line="151" pos:column="28">= <expr><call><name><name pos:line="151" pos:column="30">firstUnit</name><op:operator pos:line="151" pos:column="39">.</op:operator><name pos:line="151" pos:column="40">ParentStatement</name></name><argument_list pos:line="151" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="152" pos:column="13">var</name></type> <name pos:line="152" pos:column="17">functionParent</name> <init pos:line="152" pos:column="32">= <expr><call><name><name pos:line="152" pos:column="34">function</name><op:operator pos:line="152" pos:column="42">.</op:operator><name pos:line="152" pos:column="43">ParentStatement</name></name><argument_list pos:line="152" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="153" pos:column="13">var</name></type> <name pos:line="153" pos:column="17">callParent</name> <init pos:line="153" pos:column="28">= <expr><call><name><name pos:line="153" pos:column="30">call</name><op:operator pos:line="153" pos:column="34">.</op:operator><name pos:line="153" pos:column="35">ParentStatement</name></name><argument_list pos:line="153" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="154" pos:column="13">var</name></type> <name pos:line="154" pos:column="17">variableParent</name> <init pos:line="154" pos:column="32">= <expr><call><name><name pos:line="154" pos:column="34">variable</name><op:operator pos:line="154" pos:column="42">.</op:operator><name pos:line="154" pos:column="43">ParentStatement</name></name><argument_list pos:line="154" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="156" pos:column="13">Assert</name><op:operator pos:line="156" pos:column="19">.</op:operator><name pos:line="156" pos:column="20">IsNull</name></name><argument_list pos:line="156" pos:column="26">(<argument><expr><name pos:line="156" pos:column="27">unitParent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="157" pos:column="13">Assert</name><op:operator pos:line="157" pos:column="19">.</op:operator><name pos:line="157" pos:column="20">IsNull</name></name><argument_list pos:line="157" pos:column="26">(<argument><expr><name pos:line="157" pos:column="27">functionParent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="158" pos:column="13">Assert</name><op:operator pos:line="158" pos:column="19">.</op:operator><name pos:line="158" pos:column="20">AreEqual</name></name><argument_list pos:line="158" pos:column="28">(<argument><expr><name pos:line="158" pos:column="29">callParent</name></expr></argument>, <argument><expr><name pos:line="158" pos:column="41">expression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="159" pos:column="13">Assert</name><op:operator pos:line="159" pos:column="19">.</op:operator><name pos:line="159" pos:column="20">AreEqual</name></name><argument_list pos:line="159" pos:column="28">(<argument><expr><name pos:line="159" pos:column="29">declaration</name></expr></argument>, <argument><expr><name pos:line="159" pos:column="42">variableParent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
        }</block></function>

        <function><type><attribute pos:line="162" pos:column="9">[<expr><name pos:line="162" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="163" pos:column="9">public</specifier> <name pos:line="163" pos:column="16">void</name></type> <name pos:line="163" pos:column="21">ContainsCallToTest</name><parameter_list pos:line="163" pos:column="39">()</parameter_list>
        <block pos:line="164" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="165" pos:column="13">string</name></type> <name pos:line="165" pos:column="20">source</name> <init pos:line="165" pos:column="27">= <expr><lit:literal type="string" pos:line="165" pos:column="29">@"int foo() {
    printf(""hello world!"");
    int x = 5;
}"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="169" pos:column="13">var</name></type> <name pos:line="169" pos:column="17">srcmlObject</name> <init pos:line="169" pos:column="29">= <expr><op:operator pos:line="169" pos:column="31">new</op:operator> <call><name pos:line="169" pos:column="35">Src2SrcMLRunner</name><argument_list pos:line="169" pos:column="50">(<argument><expr><call><name><name pos:line="169" pos:column="51">Path</name><op:operator pos:line="169" pos:column="55">.</op:operator><name pos:line="169" pos:column="56">Combine</name></name><argument_list pos:line="169" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="169" pos:column="64">"."</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="169" pos:column="69">"SrcML"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="170" pos:column="13">var</name></type> <name pos:line="170" pos:column="17">xml</name> <init pos:line="170" pos:column="21">= <expr><call><name><name pos:line="170" pos:column="23">srcmlObject</name><op:operator pos:line="170" pos:column="34">.</op:operator><name pos:line="170" pos:column="35">GenerateSrcMLFromString</name></name><argument_list pos:line="170" pos:column="58">(<argument><expr><name pos:line="170" pos:column="59">source</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="172" pos:column="13">var</name></type> <name pos:line="172" pos:column="17">element</name> <init pos:line="172" pos:column="25">= <expr><call><name><name pos:line="172" pos:column="27">XElement</name><op:operator pos:line="172" pos:column="35">.</op:operator><name pos:line="172" pos:column="36">Parse</name></name><argument_list pos:line="172" pos:column="41">(<argument><expr><name pos:line="172" pos:column="42">xml</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="173" pos:column="13">var</name></type> <name pos:line="173" pos:column="17">expression</name> <init pos:line="173" pos:column="28">= <expr><call><name><name pos:line="173" pos:column="30">element</name><op:operator pos:line="173" pos:column="37">.</op:operator><name pos:line="173" pos:column="38">Descendants</name></name><argument_list pos:line="173" pos:column="49">(<argument><expr><name><name pos:line="173" pos:column="50">SRC</name><op:operator pos:line="173" pos:column="53">.</op:operator><name pos:line="173" pos:column="54">DeclarationStatement</name></name></expr></argument>)</argument_list></call><op:operator pos:line="173" pos:column="75">.</op:operator><call><name pos:line="173" pos:column="76">First</name><argument_list pos:line="173" pos:column="81">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="175" pos:column="13">Assert</name><op:operator pos:line="175" pos:column="19">.</op:operator><name pos:line="175" pos:column="20">IsTrue</name></name><argument_list pos:line="175" pos:column="26">(<argument><expr><call><name><name pos:line="175" pos:column="27">element</name><op:operator pos:line="175" pos:column="34">.</op:operator><name pos:line="175" pos:column="35">ContainsCallTo</name></name><argument_list pos:line="175" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="175" pos:column="50">"printf"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="176" pos:column="13">Assert</name><op:operator pos:line="176" pos:column="19">.</op:operator><name pos:line="176" pos:column="20">IsFalse</name></name><argument_list pos:line="176" pos:column="27">(<argument><expr><call><name><name pos:line="176" pos:column="28">expression</name><op:operator pos:line="176" pos:column="38">.</op:operator><name pos:line="176" pos:column="39">ContainsCallTo</name></name><argument_list pos:line="176" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="176" pos:column="54">"printf"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
