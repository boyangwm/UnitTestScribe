<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\VisualStudio\ABB.SrcML.VisualStudio.SrcMLService\VsMonitoringService.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2014 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine(ABB Group) - Initial implementation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">ABB</name><op:operator pos:line="12" pos:column="10">.</op:operator><name pos:line="12" pos:column="11">SrcML</name><op:operator pos:line="12" pos:column="16">.</op:operator><name pos:line="12" pos:column="17">Utilities</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">ABB</name><op:operator pos:line="13" pos:column="10">.</op:operator><name pos:line="13" pos:column="11">VisualStudio</name></name>;</using>
<using pos:line="14" pos:column="1">using <name pos:line="14" pos:column="7">EnvDTE</name>;</using>
<using pos:line="15" pos:column="1">using <name pos:line="15" pos:column="7">System</name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Collections</name><op:operator pos:line="16" pos:column="25">.</op:operator><name pos:line="16" pos:column="26">ObjectModel</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">IO</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Threading</name><op:operator pos:line="18" pos:column="23">.</op:operator><name pos:line="18" pos:column="24">Tasks</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">System</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">Xml</name><op:operator pos:line="19" pos:column="17">.</op:operator><name pos:line="19" pos:column="18">Linq</name></name>;</using>
<using pos:line="20" pos:column="1">using <name pos:line="20" pos:column="7">VsPackage</name> <init pos:line="20" pos:column="17">= <expr><name><name pos:line="20" pos:column="19">Microsoft</name><op:operator pos:line="20" pos:column="28">.</op:operator><name pos:line="20" pos:column="29">VisualStudio</name><op:operator pos:line="20" pos:column="41">.</op:operator><name pos:line="20" pos:column="42">Shell</name><op:operator pos:line="20" pos:column="47">.</op:operator><name pos:line="20" pos:column="48">Package</name></name></expr></init>;</using>

<namespace pos:line="22" pos:column="1">namespace <name><name pos:line="22" pos:column="11">ABB</name><op:operator pos:line="22" pos:column="14">.</op:operator><name pos:line="22" pos:column="15">SrcML</name><op:operator pos:line="22" pos:column="20">.</op:operator><name pos:line="22" pos:column="21">VisualStudio</name></name> <block pos:line="22" pos:column="34">{
    <comment type="line" pos:line="23" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="24" pos:column="5">/// Service for monitoring changes to files within the currently open solution</comment>
    <comment type="line" pos:line="25" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="26" pos:column="5">public</specifier> class <name pos:line="26" pos:column="18">VsMonitoringService</name> <super pos:line="26" pos:column="38">: <name pos:line="26" pos:column="40">AbstractMonitoringService</name>, <name pos:line="26" pos:column="67">ISrcMLGlobalService</name>, <name pos:line="26" pos:column="88">SSrcMLGlobalService</name></super> <block pos:line="26" pos:column="108">{
        <comment type="line" pos:line="27" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="28" pos:column="9">/// The directory in the extension folder to store data in for each solution</comment>
        <comment type="line" pos:line="29" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="30" pos:column="9">public</specifier> <specifier pos:line="30" pos:column="16">const</specifier> <name pos:line="30" pos:column="22">string</name></type> <name pos:line="30" pos:column="29">DEFAULT_STORAGE_FOLDER</name> <init pos:line="30" pos:column="52">= <expr><lit:literal type="string" pos:line="30" pos:column="54">"Archives"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="32" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="33" pos:column="9">/// The file name that indicates that the data directory should be deleted</comment>
        <comment type="line" pos:line="34" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="35" pos:column="9">public</specifier> <specifier pos:line="35" pos:column="16">const</specifier> <name pos:line="35" pos:column="22">string</name></type> <name pos:line="35" pos:column="29">RESET_FILE_NAME</name> <init pos:line="35" pos:column="45">= <expr><lit:literal type="string" pos:line="35" pos:column="47">"RESETSOLUTION"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="37" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="38" pos:column="9">/// Creates a new monitoring service object</comment>
        <comment type="line" pos:line="39" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="40" pos:column="9">/// &lt;param name="serviceProvider"&gt;The container where this service is sited&lt;/param&gt;</comment>
        <comment type="line" pos:line="41" pos:column="9">/// &lt;param name="taskManagerService"&gt;The task manager&lt;/param&gt;</comment>
        <constructor><specifier pos:line="42" pos:column="9">public</specifier> <name pos:line="42" pos:column="16">VsMonitoringService</name><parameter_list pos:line="42" pos:column="35">(<param><decl><type><name pos:line="42" pos:column="36">SrcMLServicePackage</name></type> <name pos:line="42" pos:column="56">serviceProvider</name></decl></param>, <param><decl><type><name pos:line="42" pos:column="73">ITaskManagerService</name></type> <name pos:line="42" pos:column="93">taskManagerService</name></decl></param>)</parameter_list>
            <member_list pos:line="43" pos:column="13">: <call><name pos:line="43" pos:column="15">base</name><argument_list pos:line="43" pos:column="19">(<argument><expr><name pos:line="43" pos:column="20">serviceProvider</name></expr></argument>, <argument><expr><name pos:line="43" pos:column="37">taskManagerService</name></expr></argument>)</argument_list></call> </member_list><block pos:line="43" pos:column="57">{
        }</block></constructor>

        <comment type="line" pos:line="46" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="47" pos:column="9">/// Raised when a directory is added via &lt;see cref="AddDirectoryToMonitor"/&gt;</comment>
        <comment type="line" pos:line="48" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="49" pos:column="9">public</specifier> <specifier pos:line="49" pos:column="16">event</specifier> <name><name pos:line="49" pos:column="22">EventHandler</name><argument_list pos:line="49" pos:column="34">&lt;<argument><name pos:line="49" pos:column="35">DirectoryScanningMonitorEventArgs</name></argument>&gt;</argument_list></name></type> <name pos:line="49" pos:column="70">DirectoryAdded</name></decl>;</decl_stmt>

        <comment type="line" pos:line="51" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="52" pos:column="9">/// Raised when a directory is removed via &lt;see cref="RemoveDirectoryFromMonitor"/&gt;</comment>
        <comment type="line" pos:line="53" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="54" pos:column="9">public</specifier> <specifier pos:line="54" pos:column="16">event</specifier> <name><name pos:line="54" pos:column="22">EventHandler</name><argument_list pos:line="54" pos:column="34">&lt;<argument><name pos:line="54" pos:column="35">DirectoryScanningMonitorEventArgs</name></argument>&gt;</argument_list></name></type> <name pos:line="54" pos:column="70">DirectoryRemoved</name></decl>;</decl_stmt>

        <comment type="line" pos:line="56" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="57" pos:column="9">/// Raised when the monitor detects a file has changed</comment>
        <comment type="line" pos:line="58" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="59" pos:column="9">public</specifier> <specifier pos:line="59" pos:column="16">event</specifier> <name><name pos:line="59" pos:column="22">EventHandler</name><argument_list pos:line="59" pos:column="34">&lt;<argument><name pos:line="59" pos:column="35">FileEventRaisedArgs</name></argument>&gt;</argument_list></name></type> <name pos:line="59" pos:column="56">SourceFileChanged</name></decl>;</decl_stmt>

        <comment type="line" pos:line="61" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="62" pos:column="9">/// Raised when an update starts. This is a wrapper around &lt;see cref="AbstractMonitoringService.UpdateStarted"/&gt; for backwards compatibility</comment>
        <comment type="line" pos:line="63" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="64" pos:column="9">public</specifier> <specifier pos:line="64" pos:column="16">event</specifier> <name pos:line="64" pos:column="22">EventHandler</name></type> <name pos:line="64" pos:column="35">UpdateArchivesStarted</name> <block pos:line="64" pos:column="57">{
            <function><name pos:line="65" pos:column="13">add</name> <block pos:line="65" pos:column="17">{ <expr_stmt><expr><name pos:line="65" pos:column="19">UpdateStarted</name> <op:operator pos:line="65" pos:column="33">+=</op:operator> <name pos:line="65" pos:column="36">value</name></expr>;</expr_stmt> }</block></function>
            <function><name pos:line="66" pos:column="13">remove</name> <block pos:line="66" pos:column="20">{ <expr_stmt><expr><name pos:line="66" pos:column="22">UpdateStarted</name> <op:operator pos:line="66" pos:column="36">-=</op:operator> <name pos:line="66" pos:column="39">value</name></expr>;</expr_stmt> }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="69" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="70" pos:column="9">/// Raised when an update completes. This is a wrapper around &lt;see cref="AbstractMonitoringService.UpdateCompleted"/&gt; for backwards compatibility</comment>
        <comment type="line" pos:line="71" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="72" pos:column="9">public</specifier> <specifier pos:line="72" pos:column="16">event</specifier> <name pos:line="72" pos:column="22">EventHandler</name></type> <name pos:line="72" pos:column="35">UpdateArchivesCompleted</name> <block pos:line="72" pos:column="59">{
            <function><name pos:line="73" pos:column="13">add</name> <block pos:line="73" pos:column="17">{ <expr_stmt><expr><name pos:line="73" pos:column="19">UpdateCompleted</name> <op:operator pos:line="73" pos:column="35">+=</op:operator> <name pos:line="73" pos:column="38">value</name></expr>;</expr_stmt> }</block></function>
            <function><name pos:line="74" pos:column="13">remove</name> <block pos:line="74" pos:column="20">{ <expr_stmt><expr><name pos:line="74" pos:column="22">UpdateCompleted</name> <op:operator pos:line="74" pos:column="38">-=</op:operator> <name pos:line="74" pos:column="41">value</name></expr>;</expr_stmt> }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="77" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="78" pos:column="9">/// The current monitor object</comment>
        <comment type="line" pos:line="79" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="80" pos:column="9">public</specifier> <name pos:line="80" pos:column="16">SourceMonitor</name></type> <name pos:line="80" pos:column="30">CurrentMonitor</name> <block pos:line="80" pos:column="45">{ <function_decl><name pos:line="80" pos:column="47">get</name>;</function_decl> <function_decl><specifier pos:line="80" pos:column="52">private</specifier> <name pos:line="80" pos:column="60">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="82" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="83" pos:column="9">/// the srcML project that wires everything better</comment>
        <comment type="line" pos:line="84" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="85" pos:column="9">public</specifier> <name pos:line="85" pos:column="16">SrcMLProject</name></type> <name pos:line="85" pos:column="29">CurrentProject</name> <block pos:line="85" pos:column="44">{ <function_decl><name pos:line="85" pos:column="46">get</name>;</function_decl> <function_decl><specifier pos:line="85" pos:column="51">private</specifier> <name pos:line="85" pos:column="59">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="87" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="88" pos:column="9">/// The current srcML archive</comment>
        <comment type="line" pos:line="89" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="90" pos:column="9">public</specifier> <name pos:line="90" pos:column="16">SrcMLArchive</name></type> <name pos:line="90" pos:column="29">CurrentSrcMLArchive</name> <block pos:line="90" pos:column="49">{ <function><name pos:line="90" pos:column="51">get</name> <block pos:line="90" pos:column="55">{ <return pos:line="90" pos:column="57">return <expr><op:operator pos:line="90" pos:column="64">(</op:operator><name pos:line="90" pos:column="65">null</name> <op:operator pos:line="90" pos:column="70">!=</op:operator> <name pos:line="90" pos:column="73">CurrentProject</name> <op:operator pos:line="90" pos:column="88">?</op:operator> <name><name pos:line="90" pos:column="90">CurrentProject</name><op:operator pos:line="90" pos:column="104">.</op:operator><name pos:line="90" pos:column="105">SourceArchive</name></name> <op:operator pos:line="90" pos:column="119">:</op:operator> <name pos:line="90" pos:column="121">null</name><op:operator pos:line="90" pos:column="125">)</op:operator></expr>;</return> }</block></function> }</block></decl></decl_stmt>

        <comment type="line" pos:line="92" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="93" pos:column="9">/// The collection of monitored directories</comment>
        <comment type="line" pos:line="94" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="95" pos:column="9">public</specifier> <name><name pos:line="95" pos:column="16">ReadOnlyCollection</name><argument_list pos:line="95" pos:column="34">&lt;<argument><name pos:line="95" pos:column="35">string</name></argument>&gt;</argument_list></name></type> <name pos:line="95" pos:column="43">MonitoredDirectories</name> <block pos:line="95" pos:column="64">{ <function><name pos:line="95" pos:column="66">get</name> <block pos:line="95" pos:column="70">{ <return pos:line="95" pos:column="72">return <expr><op:operator pos:line="95" pos:column="79">(</op:operator><name pos:line="95" pos:column="80">CurrentMonitor</name> <op:operator pos:line="95" pos:column="95">==</op:operator> <name pos:line="95" pos:column="98">null</name> <op:operator pos:line="95" pos:column="103">?</op:operator> <name pos:line="95" pos:column="105">null</name> <op:operator pos:line="95" pos:column="110">:</op:operator> <name><name pos:line="95" pos:column="112">this</name><op:operator pos:line="95" pos:column="116">.</op:operator><name pos:line="95" pos:column="117">CurrentMonitor</name><op:operator pos:line="95" pos:column="131">.</op:operator><name pos:line="95" pos:column="132">MonitoredDirectories</name></name><op:operator pos:line="95" pos:column="152">)</op:operator></expr>;</return> }</block></function> }</block></decl></decl_stmt>

        <comment type="line" pos:line="97" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="98" pos:column="9">/// The interval at which to scan &lt;see cref="MonitoredDirectories"/&gt;</comment>
        <comment type="line" pos:line="99" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="100" pos:column="9">public</specifier> <name pos:line="100" pos:column="16">double</name></type> <name pos:line="100" pos:column="23">ScanInterval</name> <block pos:line="100" pos:column="36">{
            <function><name pos:line="101" pos:column="13">get</name> <block pos:line="101" pos:column="17">{ <return pos:line="101" pos:column="19">return <expr><op:operator pos:line="101" pos:column="26">(</op:operator><name pos:line="101" pos:column="27">null</name> <op:operator pos:line="101" pos:column="32">==</op:operator> <name pos:line="101" pos:column="35">CurrentMonitor</name> <op:operator pos:line="101" pos:column="50">?</op:operator> <name><name pos:line="101" pos:column="52">Double</name><op:operator pos:line="101" pos:column="58">.</op:operator><name pos:line="101" pos:column="59">NaN</name></name> <op:operator pos:line="101" pos:column="63">:</op:operator> <name><name pos:line="101" pos:column="65">CurrentMonitor</name><op:operator pos:line="101" pos:column="79">.</op:operator><name pos:line="101" pos:column="80">ScanInterval</name></name><op:operator pos:line="101" pos:column="92">)</op:operator></expr>;</return> }</block></function>
            <function><name pos:line="102" pos:column="13">set</name> <block pos:line="102" pos:column="17">{
                <if pos:line="103" pos:column="17">if<condition pos:line="103" pos:column="19">(<expr><name pos:line="103" pos:column="20">null</name> <op:operator pos:line="103" pos:column="25">==</op:operator> <name pos:line="103" pos:column="28">CurrentMonitor</name></expr>)</condition><then pos:line="103" pos:column="43"> <block pos:line="103" pos:column="44">{ <throw pos:line="103" pos:column="46">throw <expr><op:operator pos:line="103" pos:column="52">new</op:operator> <call><name pos:line="103" pos:column="56">InvalidOperationException</name><argument_list pos:line="103" pos:column="81">(<argument><expr><lit:literal type="string" pos:line="103" pos:column="82">"There is no monitor to update"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>
                <if pos:line="104" pos:column="17">if<condition pos:line="104" pos:column="19">(<expr><name pos:line="104" pos:column="20">value</name> <op:operator pos:line="104" pos:column="26">&lt;</op:operator> <lit:literal type="number" pos:line="104" pos:column="28">0.0</lit:literal></expr>)</condition><then pos:line="104" pos:column="32"> <block pos:line="104" pos:column="33">{ <throw pos:line="104" pos:column="35">throw <expr><op:operator pos:line="104" pos:column="41">new</op:operator> <call><name pos:line="104" pos:column="45">ArgumentOutOfRangeException</name><argument_list pos:line="104" pos:column="72">(<argument><expr><lit:literal type="string" pos:line="104" pos:column="73">"value"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="104" pos:column="82">"ScanInterval must be greater than 0"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>
                <expr_stmt><expr><name><name pos:line="105" pos:column="17">CurrentMonitor</name><op:operator pos:line="105" pos:column="31">.</op:operator><name pos:line="105" pos:column="32">ScanInterval</name></name> <op:operator pos:line="105" pos:column="45">=</op:operator> <name pos:line="105" pos:column="47">value</name></expr>;</expr_stmt>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="109" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="110" pos:column="9">/// Sets up the monitor prior to &lt;see cref="AbstractMonitoringService.StartMonitoring"/&gt;</comment>
        <comment type="line" pos:line="111" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="112" pos:column="9">protected</specifier> <specifier pos:line="112" pos:column="19">override</specifier> <name pos:line="112" pos:column="28">void</name></type> <name pos:line="112" pos:column="33">Setup</name><parameter_list pos:line="112" pos:column="38">()</parameter_list> <block pos:line="112" pos:column="41">{
            <decl_stmt><decl><type><name pos:line="113" pos:column="13">var</name></type> <name pos:line="113" pos:column="17">openSolution</name> <init pos:line="113" pos:column="30">= <expr><call><name pos:line="113" pos:column="32">GetOpenSolution</name><argument_list pos:line="113" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if pos:line="115" pos:column="13">if<condition pos:line="115" pos:column="15">(<expr><name pos:line="115" pos:column="16">null</name> <op:operator pos:line="115" pos:column="21">!=</op:operator> <name pos:line="115" pos:column="24">openSolution</name></expr>)</condition><then pos:line="115" pos:column="37"> <block pos:line="115" pos:column="38">{
                <decl_stmt><decl><type><name pos:line="116" pos:column="17">var</name></type> <name pos:line="116" pos:column="21">storagePath</name> <init pos:line="116" pos:column="33">= <expr><call><name pos:line="116" pos:column="35">GetBaseDirectory</name><argument_list pos:line="116" pos:column="51">(<argument><expr><name pos:line="116" pos:column="52">openSolution</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="117" pos:column="17">if<condition pos:line="117" pos:column="19">(<expr><call><name pos:line="117" pos:column="20">ShouldReset</name><argument_list pos:line="117" pos:column="31">()</argument_list></call></expr>)</condition><then pos:line="117" pos:column="34"> <block pos:line="117" pos:column="35">{
                    <expr_stmt><expr><call><name><name pos:line="118" pos:column="21">Directory</name><op:operator pos:line="118" pos:column="30">.</op:operator><name pos:line="118" pos:column="31">Delete</name></name><argument_list pos:line="118" pos:column="37">(<argument><expr><name pos:line="118" pos:column="38">storagePath</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="118" pos:column="51">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name pos:line="120" pos:column="17">CurrentMonitor</name> <op:operator pos:line="120" pos:column="32">=</op:operator> <op:operator pos:line="120" pos:column="34">new</op:operator> <call><name pos:line="120" pos:column="38">SourceMonitor</name><argument_list pos:line="120" pos:column="51">(<argument><expr><name pos:line="120" pos:column="52">openSolution</name></expr></argument>, <argument><expr><name><name pos:line="120" pos:column="66">DirectoryScanningMonitor</name><op:operator pos:line="120" pos:column="90">.</op:operator><name pos:line="120" pos:column="91">DEFAULT_SCAN_INTERVAL</name></name></expr></argument>, <argument><expr><name pos:line="120" pos:column="114">GlobalScheduler</name></expr></argument>, <argument><expr><name pos:line="120" pos:column="131">storagePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="121" pos:column="17">CurrentProject</name> <op:operator pos:line="121" pos:column="32">=</op:operator> <op:operator pos:line="121" pos:column="34">new</op:operator> <call><name pos:line="121" pos:column="38">SrcMLProject</name><argument_list pos:line="121" pos:column="50">(<argument><expr><name pos:line="121" pos:column="51">GlobalScheduler</name></expr></argument>, <argument><expr><name pos:line="121" pos:column="68">CurrentMonitor</name></expr></argument>, <argument><expr><op:operator pos:line="121" pos:column="84">new</op:operator> <call><name pos:line="121" pos:column="88">SrcMLGenerator</name><argument_list pos:line="121" pos:column="102">(<argument><expr><call><name><name pos:line="121" pos:column="103">Path</name><op:operator pos:line="121" pos:column="107">.</op:operator><name pos:line="121" pos:column="108">Combine</name></name><argument_list pos:line="121" pos:column="115">(<argument><expr><name><name pos:line="121" pos:column="116">ServiceProvider</name><op:operator pos:line="121" pos:column="131">.</op:operator><name pos:line="121" pos:column="132">ExtensionDirectory</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="121" pos:column="152">"SrcML"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name><name pos:line="123" pos:column="17">CurrentMonitor</name><op:operator pos:line="123" pos:column="31">.</op:operator><name pos:line="123" pos:column="32">DirectoryAdded</name></name> <op:operator pos:line="123" pos:column="47">+=</op:operator> <name pos:line="123" pos:column="50">CurrentMonitor_DirectoryAdded</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="124" pos:column="17">CurrentMonitor</name><op:operator pos:line="124" pos:column="31">.</op:operator><name pos:line="124" pos:column="32">DirectoryRemoved</name></name> <op:operator pos:line="124" pos:column="49">+=</op:operator> <name pos:line="124" pos:column="52">CurrentMonitor_DirectoryRemoved</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="125" pos:column="17">CurrentMonitor</name><op:operator pos:line="125" pos:column="31">.</op:operator><name pos:line="125" pos:column="32">UpdateArchivesStarted</name></name> <op:operator pos:line="125" pos:column="54">+=</op:operator> <name pos:line="125" pos:column="57">CurrentMonitor_UpdateArchivesStarted</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="126" pos:column="17">CurrentMonitor</name><op:operator pos:line="126" pos:column="31">.</op:operator><name pos:line="126" pos:column="32">UpdateArchivesCompleted</name></name> <op:operator pos:line="126" pos:column="56">+=</op:operator> <name pos:line="126" pos:column="59">CurrentMonitor_UpdateArchivesCompleted</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="127" pos:column="17">CurrentMonitor</name><op:operator pos:line="127" pos:column="31">.</op:operator><name pos:line="127" pos:column="32">FileChanged</name></name> <op:operator pos:line="127" pos:column="44">+=</op:operator> <name pos:line="127" pos:column="47">CurrentMonitor_FileChanged</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="128" pos:column="17">CurrentMonitor</name><op:operator pos:line="128" pos:column="31">.</op:operator><name pos:line="128" pos:column="32">AddDirectoriesFromSaveFile</name></name><argument_list pos:line="128" pos:column="58">()</argument_list></call></expr>;</expr_stmt>
                <if pos:line="129" pos:column="17">if<condition pos:line="129" pos:column="19">(<expr><lit:literal type="number" pos:line="129" pos:column="20">0</lit:literal> <op:operator pos:line="129" pos:column="22">==</op:operator> <name><name pos:line="129" pos:column="25">CurrentMonitor</name><op:operator pos:line="129" pos:column="39">.</op:operator><name pos:line="129" pos:column="40">MonitoredDirectories</name><op:operator pos:line="129" pos:column="60">.</op:operator><name pos:line="129" pos:column="61">Count</name></name></expr>)</condition><then pos:line="129" pos:column="67"> <block pos:line="129" pos:column="68">{
                    <expr_stmt><expr><call><name><name pos:line="130" pos:column="21">CurrentMonitor</name><op:operator pos:line="130" pos:column="35">.</op:operator><name pos:line="130" pos:column="36">AddSolutionDirectories</name></name><argument_list pos:line="130" pos:column="58">()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="136" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="137" pos:column="9">/// Implementation method for &lt;see cref="AbstractMonitoringService.Update"/&gt;</comment>
        <comment type="line" pos:line="138" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="139" pos:column="9">protected</specifier> <specifier pos:line="139" pos:column="19">override</specifier> <name pos:line="139" pos:column="28">void</name></type> <name pos:line="139" pos:column="33">UpdateImpl</name><parameter_list pos:line="139" pos:column="43">()</parameter_list> <block pos:line="139" pos:column="46">{
            <expr_stmt><expr><call><name><name pos:line="140" pos:column="13">CurrentMonitor</name><op:operator pos:line="140" pos:column="27">.</op:operator><name pos:line="140" pos:column="28">UpdateArchivesAsync</name></name><argument_list pos:line="140" pos:column="47">()</argument_list></call><op:operator pos:line="140" pos:column="49">.</op:operator><call><name pos:line="140" pos:column="50">Wait</name><argument_list pos:line="140" pos:column="54">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="143" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="144" pos:column="9">/// Raises the &lt;see cref="SourceFileChanged"/&gt; event</comment>
        <comment type="line" pos:line="145" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="146" pos:column="9">/// &lt;param name="e"&gt;The file event arguments&lt;/param&gt;</comment>
        <function><type><specifier pos:line="147" pos:column="9">protected</specifier> <specifier pos:line="147" pos:column="19">virtual</specifier> <name pos:line="147" pos:column="27">void</name></type> <name pos:line="147" pos:column="32">OnSourceFileChanged</name><parameter_list pos:line="147" pos:column="51">(<param><decl><type><name pos:line="147" pos:column="52">FileEventRaisedArgs</name></type> <name pos:line="147" pos:column="72">e</name></decl></param>)</parameter_list> <block pos:line="147" pos:column="75">{
            <decl_stmt><decl><type><name><name pos:line="148" pos:column="13">EventHandler</name><argument_list pos:line="148" pos:column="25">&lt;<argument><name pos:line="148" pos:column="26">FileEventRaisedArgs</name></argument>&gt;</argument_list></name></type> <name pos:line="148" pos:column="47">handler</name> <init pos:line="148" pos:column="55">= <expr><name pos:line="148" pos:column="57">SourceFileChanged</name></expr></init></decl>;</decl_stmt>
            <if pos:line="149" pos:column="13">if<condition pos:line="149" pos:column="15">(<expr><name pos:line="149" pos:column="16">null</name> <op:operator pos:line="149" pos:column="21">!=</op:operator> <name pos:line="149" pos:column="24">handler</name></expr>)</condition><then pos:line="149" pos:column="32"> <block pos:line="149" pos:column="33">{
                <expr_stmt><expr><call><name pos:line="150" pos:column="17">handler</name><argument_list pos:line="150" pos:column="24">(<argument><expr><name pos:line="150" pos:column="25">this</name></expr></argument>, <argument><expr><name pos:line="150" pos:column="31">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="154" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="155" pos:column="9">/// Raises the &lt;see cref="DirectoryRemoved"/&gt; event</comment>
        <comment type="line" pos:line="156" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="157" pos:column="9">/// &lt;param name="e"&gt;The event arguments&lt;/param&gt;</comment>
        <function><type><specifier pos:line="158" pos:column="9">protected</specifier> <specifier pos:line="158" pos:column="19">virtual</specifier> <name pos:line="158" pos:column="27">void</name></type> <name pos:line="158" pos:column="32">OnDirectoryRemoved</name><parameter_list pos:line="158" pos:column="50">(<param><decl><type><name pos:line="158" pos:column="51">DirectoryScanningMonitorEventArgs</name></type> <name pos:line="158" pos:column="85">e</name></decl></param>)</parameter_list> <block pos:line="158" pos:column="88">{
            <decl_stmt><decl><type><name><name pos:line="159" pos:column="13">EventHandler</name><argument_list pos:line="159" pos:column="25">&lt;<argument><name pos:line="159" pos:column="26">DirectoryScanningMonitorEventArgs</name></argument>&gt;</argument_list></name></type> <name pos:line="159" pos:column="61">handler</name> <init pos:line="159" pos:column="69">= <expr><name pos:line="159" pos:column="71">DirectoryRemoved</name></expr></init></decl>;</decl_stmt>
            <if pos:line="160" pos:column="13">if<condition pos:line="160" pos:column="15">(<expr><name pos:line="160" pos:column="16">null</name> <op:operator pos:line="160" pos:column="21">!=</op:operator> <name pos:line="160" pos:column="24">handler</name></expr>)</condition><then pos:line="160" pos:column="32"> <block pos:line="160" pos:column="33">{
                <expr_stmt><expr><call><name pos:line="161" pos:column="17">handler</name><argument_list pos:line="161" pos:column="24">(<argument><expr><name pos:line="161" pos:column="25">this</name></expr></argument>, <argument><expr><name pos:line="161" pos:column="31">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="165" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="166" pos:column="9">/// Raises the &lt;see cref="DirectoryAdded"/&gt; event</comment>
        <comment type="line" pos:line="167" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="168" pos:column="9">/// &lt;param name="e"&gt;The event arguments&lt;/param&gt;</comment>
        <function><type><specifier pos:line="169" pos:column="9">protected</specifier> <specifier pos:line="169" pos:column="19">virtual</specifier> <name pos:line="169" pos:column="27">void</name></type> <name pos:line="169" pos:column="32">OnDirectoryAdded</name><parameter_list pos:line="169" pos:column="48">(<param><decl><type><name pos:line="169" pos:column="49">DirectoryScanningMonitorEventArgs</name></type> <name pos:line="169" pos:column="83">e</name></decl></param>)</parameter_list> <block pos:line="169" pos:column="86">{
            <decl_stmt><decl><type><name><name pos:line="170" pos:column="13">EventHandler</name><argument_list pos:line="170" pos:column="25">&lt;<argument><name pos:line="170" pos:column="26">DirectoryScanningMonitorEventArgs</name></argument>&gt;</argument_list></name></type> <name pos:line="170" pos:column="61">handler</name> <init pos:line="170" pos:column="69">= <expr><name pos:line="170" pos:column="71">DirectoryAdded</name></expr></init></decl>;</decl_stmt>
            <if pos:line="171" pos:column="13">if<condition pos:line="171" pos:column="15">(<expr><name pos:line="171" pos:column="16">null</name> <op:operator pos:line="171" pos:column="21">!=</op:operator> <name pos:line="171" pos:column="24">handler</name></expr>)</condition><then pos:line="171" pos:column="32"> <block pos:line="171" pos:column="33">{
                <expr_stmt><expr><call><name pos:line="172" pos:column="17">handler</name><argument_list pos:line="172" pos:column="24">(<argument><expr><name pos:line="172" pos:column="25">this</name></expr></argument>, <argument><expr><name pos:line="172" pos:column="31">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="176" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="177" pos:column="9">/// Implementation for &lt;see cref="AbstractMonitoringService.StartMonitoring"/&gt;</comment>
        <comment type="line" pos:line="178" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="179" pos:column="9">protected</specifier> <specifier pos:line="179" pos:column="19">override</specifier> <name pos:line="179" pos:column="28">void</name></type> <name pos:line="179" pos:column="33">StartMonitoringImpl</name><parameter_list pos:line="179" pos:column="52">()</parameter_list> <block pos:line="179" pos:column="55">{
            <if pos:line="180" pos:column="13">if<condition pos:line="180" pos:column="15">(<expr><name pos:line="180" pos:column="16">null</name> <op:operator pos:line="180" pos:column="21">!=</op:operator> <name pos:line="180" pos:column="24">CurrentMonitor</name></expr>)</condition><then pos:line="180" pos:column="39"> <block pos:line="180" pos:column="40">{
                <expr_stmt><expr><call><name><name pos:line="181" pos:column="17">CurrentMonitor</name><op:operator pos:line="181" pos:column="31">.</op:operator><name pos:line="181" pos:column="32">StartMonitoring</name></name><argument_list pos:line="181" pos:column="47">()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="185" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="186" pos:column="9">/// Implementation for &lt;see cref="AbstractMonitoringService.StopMonitoring"/&gt;</comment>
        <comment type="line" pos:line="187" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="188" pos:column="9">protected</specifier> <specifier pos:line="188" pos:column="19">override</specifier> <name pos:line="188" pos:column="28">void</name></type> <name pos:line="188" pos:column="33">StopMonitoringImpl</name><parameter_list pos:line="188" pos:column="51">()</parameter_list> <block pos:line="188" pos:column="54">{
            <if pos:line="189" pos:column="13">if<condition pos:line="189" pos:column="15">(<expr><name pos:line="189" pos:column="16">CurrentMonitor</name> <op:operator pos:line="189" pos:column="31">!=</op:operator> <name pos:line="189" pos:column="34">null</name> <op:operator pos:line="189" pos:column="39">&amp;&amp;</op:operator> <name pos:line="189" pos:column="42">CurrentSrcMLArchive</name> <op:operator pos:line="189" pos:column="62">!=</op:operator> <name pos:line="189" pos:column="65">null</name></expr>)</condition><then pos:line="189" pos:column="70"> <block pos:line="189" pos:column="71">{
                <expr_stmt><expr><call><name><name pos:line="190" pos:column="17">SaveTimer</name><op:operator pos:line="190" pos:column="26">.</op:operator><name pos:line="190" pos:column="27">Stop</name></name><argument_list pos:line="190" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="191" pos:column="17">CurrentProject</name><op:operator pos:line="191" pos:column="31">.</op:operator><name pos:line="191" pos:column="32">StopMonitoring</name></name><argument_list pos:line="191" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
                
                <expr_stmt><expr><name><name pos:line="193" pos:column="17">CurrentMonitor</name><op:operator pos:line="193" pos:column="31">.</op:operator><name pos:line="193" pos:column="32">FileChanged</name></name> <op:operator pos:line="193" pos:column="44">-=</op:operator> <name pos:line="193" pos:column="47">CurrentMonitor_FileChanged</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="194" pos:column="17">CurrentMonitor</name><op:operator pos:line="194" pos:column="31">.</op:operator><name pos:line="194" pos:column="32">DirectoryAdded</name></name> <op:operator pos:line="194" pos:column="47">-=</op:operator> <name pos:line="194" pos:column="50">CurrentMonitor_DirectoryAdded</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="195" pos:column="17">CurrentMonitor</name><op:operator pos:line="195" pos:column="31">.</op:operator><name pos:line="195" pos:column="32">DirectoryRemoved</name></name> <op:operator pos:line="195" pos:column="49">-=</op:operator> <name pos:line="195" pos:column="52">CurrentMonitor_DirectoryRemoved</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="196" pos:column="17">CurrentMonitor</name><op:operator pos:line="196" pos:column="31">.</op:operator><name pos:line="196" pos:column="32">UpdateArchivesStarted</name></name> <op:operator pos:line="196" pos:column="54">-=</op:operator> <name pos:line="196" pos:column="57">CurrentMonitor_UpdateArchivesStarted</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="197" pos:column="17">CurrentMonitor</name><op:operator pos:line="197" pos:column="31">.</op:operator><name pos:line="197" pos:column="32">UpdateArchivesCompleted</name></name> <op:operator pos:line="197" pos:column="56">-=</op:operator> <name pos:line="197" pos:column="59">CurrentMonitor_UpdateArchivesCompleted</name></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name pos:line="199" pos:column="17">CurrentProject</name><op:operator pos:line="199" pos:column="31">.</op:operator><name pos:line="199" pos:column="32">Dispose</name></name><argument_list pos:line="199" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="200" pos:column="17">CurrentProject</name> <op:operator pos:line="200" pos:column="32">=</op:operator> <name pos:line="200" pos:column="34">null</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="201" pos:column="17">CurrentMonitor</name> <op:operator pos:line="201" pos:column="32">=</op:operator> <name pos:line="201" pos:column="34">null</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="205" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="206" pos:column="9">/// Adds &lt;paramref name="pathToDirectory"/&gt; to the &lt;see cref="MonitoredDirectories"/&gt; collection</comment>
        <comment type="line" pos:line="207" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="208" pos:column="9">/// &lt;param name="pathToDirectory"&gt;The path to the directory to be added&lt;/param&gt;</comment>
        <function><type><specifier pos:line="209" pos:column="9">public</specifier> <name pos:line="209" pos:column="16">void</name></type> <name pos:line="209" pos:column="21">AddDirectoryToMonitor</name><parameter_list pos:line="209" pos:column="42">(<param><decl><type><name pos:line="209" pos:column="43">string</name></type> <name pos:line="209" pos:column="50">pathToDirectory</name></decl></param>)</parameter_list> <block pos:line="209" pos:column="67">{
            <if pos:line="210" pos:column="13">if<condition pos:line="210" pos:column="15">(<expr><name pos:line="210" pos:column="16">null</name> <op:operator pos:line="210" pos:column="21">==</op:operator> <name pos:line="210" pos:column="24">CurrentMonitor</name></expr>)</condition><then pos:line="210" pos:column="39"> <block pos:line="210" pos:column="40">{ <throw pos:line="210" pos:column="42">throw <expr><op:operator pos:line="210" pos:column="48">new</op:operator> <call><name pos:line="210" pos:column="52">InvalidOperationException</name><argument_list pos:line="210" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="210" pos:column="78">"Only valid once a solution has been opened."</lit:literal></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>
            <if pos:line="211" pos:column="13">if<condition pos:line="211" pos:column="15">(<expr><call><name><name pos:line="211" pos:column="16">String</name><op:operator pos:line="211" pos:column="22">.</op:operator><name pos:line="211" pos:column="23">IsNullOrWhiteSpace</name></name><argument_list pos:line="211" pos:column="41">(<argument><expr><name pos:line="211" pos:column="42">pathToDirectory</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="211" pos:column="59"> <block pos:line="211" pos:column="60">{ <throw pos:line="211" pos:column="62">throw <expr><op:operator pos:line="211" pos:column="68">new</op:operator> <call><name pos:line="211" pos:column="72">ArgumentNullException</name><argument_list pos:line="211" pos:column="93">(<argument><expr><lit:literal type="string" pos:line="211" pos:column="94">"pathToDirectory"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>
            <expr_stmt><expr><call><name><name pos:line="212" pos:column="13">CurrentMonitor</name><op:operator pos:line="212" pos:column="27">.</op:operator><name pos:line="212" pos:column="28">AddDirectory</name></name><argument_list pos:line="212" pos:column="40">(<argument><expr><name pos:line="212" pos:column="41">pathToDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="215" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="216" pos:column="9">/// Gets a srcML element for &lt;paramref name="sourceFilePath"/&gt; from &lt;see cref="CurrentSrcMLArchive"/&gt;</comment>
        <comment type="line" pos:line="217" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="218" pos:column="9">/// &lt;param name="sourceFilePath"&gt;The source file path&lt;/param&gt;</comment>
        <comment type="line" pos:line="219" pos:column="9">/// &lt;returns&gt;The XML element for &lt;paramref name="sourceFilePath"/&gt; (null if it is not in the archive)&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="220" pos:column="9">public</specifier> <name pos:line="220" pos:column="16">XElement</name></type> <name pos:line="220" pos:column="25">GetXElementForSourceFile</name><parameter_list pos:line="220" pos:column="49">(<param><decl><type><name pos:line="220" pos:column="50">string</name></type> <name pos:line="220" pos:column="57">sourceFilePath</name></decl></param>)</parameter_list> <block pos:line="220" pos:column="73">{
            <return pos:line="221" pos:column="13">return <expr><op:operator pos:line="221" pos:column="20">(</op:operator><name pos:line="221" pos:column="21">CurrentSrcMLArchive</name> <op:operator pos:line="221" pos:column="41">==</op:operator> <name pos:line="221" pos:column="44">null</name> <op:operator pos:line="221" pos:column="49">?</op:operator> <name pos:line="221" pos:column="51">null</name> <op:operator pos:line="221" pos:column="56">:</op:operator> <call><name><name pos:line="221" pos:column="58">CurrentSrcMLArchive</name><op:operator pos:line="221" pos:column="77">.</op:operator><name pos:line="221" pos:column="78">GetXElementForSourceFile</name></name><argument_list pos:line="221" pos:column="102">(<argument><expr><name pos:line="221" pos:column="103">sourceFilePath</name></expr></argument>)</argument_list></call><op:operator pos:line="221" pos:column="118">)</op:operator></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="224" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="225" pos:column="9">/// Removes &lt;paramref name="pathToDirectory"/&gt; from &lt;see cref="MonitoredDirectories"/&gt;</comment>
        <comment type="line" pos:line="226" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="227" pos:column="9">/// &lt;param name="pathToDirectory"&gt;The path to the directory to be added&lt;/param&gt;</comment>
        <function><type><specifier pos:line="228" pos:column="9">public</specifier> <name pos:line="228" pos:column="16">void</name></type> <name pos:line="228" pos:column="21">RemoveDirectoryFromMonitor</name><parameter_list pos:line="228" pos:column="47">(<param><decl><type><name pos:line="228" pos:column="48">string</name></type> <name pos:line="228" pos:column="55">pathToDirectory</name></decl></param>)</parameter_list> <block pos:line="228" pos:column="72">{
            <if pos:line="229" pos:column="13">if<condition pos:line="229" pos:column="15">(<expr><name pos:line="229" pos:column="16">null</name> <op:operator pos:line="229" pos:column="21">==</op:operator> <name pos:line="229" pos:column="24">CurrentMonitor</name></expr>)</condition><then pos:line="229" pos:column="39"> <block pos:line="229" pos:column="40">{ <throw pos:line="229" pos:column="42">throw <expr><op:operator pos:line="229" pos:column="48">new</op:operator> <call><name pos:line="229" pos:column="52">InvalidOperationException</name><argument_list pos:line="229" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="229" pos:column="78">"Only valid once a solution has been opened."</lit:literal></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>
            <if pos:line="230" pos:column="13">if<condition pos:line="230" pos:column="15">(<expr><call><name><name pos:line="230" pos:column="16">String</name><op:operator pos:line="230" pos:column="22">.</op:operator><name pos:line="230" pos:column="23">IsNullOrWhiteSpace</name></name><argument_list pos:line="230" pos:column="41">(<argument><expr><name pos:line="230" pos:column="42">pathToDirectory</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="230" pos:column="59"> <block pos:line="230" pos:column="60">{ <throw pos:line="230" pos:column="62">throw <expr><op:operator pos:line="230" pos:column="68">new</op:operator> <call><name pos:line="230" pos:column="72">ArgumentNullException</name><argument_list pos:line="230" pos:column="93">(<argument><expr><lit:literal type="string" pos:line="230" pos:column="94">"pathToDirectory"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>

            <expr_stmt><expr><call><name><name pos:line="232" pos:column="13">CurrentMonitor</name><op:operator pos:line="232" pos:column="27">.</op:operator><name pos:line="232" pos:column="28">RemoveDirectory</name></name><argument_list pos:line="232" pos:column="43">(<argument><expr><name pos:line="232" pos:column="44">pathToDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="235" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="236" pos:column="9">/// Creates &lt;see cref="RESET_FILE_NAME"/&gt; in the data directory for the open solution. This indicates the directory should be deleted</comment>
        <comment type="line" pos:line="237" pos:column="9">/// on the next call to &lt;see cref="Setup"/&gt;</comment>
        <comment type="line" pos:line="238" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="239" pos:column="9">public</specifier> <name pos:line="239" pos:column="16">void</name></type> <name pos:line="239" pos:column="21">Reset</name><parameter_list pos:line="239" pos:column="26">()</parameter_list> <block pos:line="239" pos:column="29">{
            <decl_stmt><decl><type><name pos:line="240" pos:column="13">var</name></type> <name pos:line="240" pos:column="17">openSolution</name> <init pos:line="240" pos:column="30">= <expr><call><name pos:line="240" pos:column="32">GetOpenSolution</name><argument_list pos:line="240" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="241" pos:column="13">if<condition pos:line="241" pos:column="15">(<expr><name pos:line="241" pos:column="16">null</name> <op:operator pos:line="241" pos:column="21">!=</op:operator> <name pos:line="241" pos:column="24">openSolution</name></expr>)</condition><then pos:line="241" pos:column="37"> <block pos:line="241" pos:column="38">{
                <decl_stmt><decl><type><name pos:line="242" pos:column="17">var</name></type> <name pos:line="242" pos:column="21">baseDirectory</name> <init pos:line="242" pos:column="35">= <expr><call><name pos:line="242" pos:column="37">GetBaseDirectory</name><argument_list pos:line="242" pos:column="53">(<argument><expr><name pos:line="242" pos:column="54">openSolution</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="243" pos:column="17">File</name><op:operator pos:line="243" pos:column="21">.</op:operator><name pos:line="243" pos:column="22">Create</name></name><argument_list pos:line="243" pos:column="28">(<argument><expr><call><name><name pos:line="243" pos:column="29">Path</name><op:operator pos:line="243" pos:column="33">.</op:operator><name pos:line="243" pos:column="34">Combine</name></name><argument_list pos:line="243" pos:column="41">(<argument><expr><name pos:line="243" pos:column="42">baseDirectory</name></expr></argument>, <argument><expr><name pos:line="243" pos:column="57">RESET_FILE_NAME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="243" pos:column="74">.</op:operator><call><name pos:line="243" pos:column="75">Close</name><argument_list pos:line="243" pos:column="80">()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="247" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="248" pos:column="9">/// Generate the folder path for storing srcML files. (For all the following four methods.)</comment>
        <comment type="line" pos:line="249" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="250" pos:column="9">/// &lt;param name="openSolution"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="251" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="252" pos:column="9">public</specifier> <name pos:line="252" pos:column="16">string</name></type> <name pos:line="252" pos:column="23">GetBaseDirectory</name><parameter_list pos:line="252" pos:column="39">(<param><decl><type><name pos:line="252" pos:column="40">Solution</name></type> <name pos:line="252" pos:column="49">openSolution</name></decl></param>)</parameter_list> <block pos:line="252" pos:column="63">{
            <decl_stmt><decl><type><name pos:line="253" pos:column="13">var</name></type> <name pos:line="253" pos:column="17">fullName</name> <init pos:line="253" pos:column="26">= <expr><name><name pos:line="253" pos:column="28">openSolution</name><op:operator pos:line="253" pos:column="40">.</op:operator><name pos:line="253" pos:column="41">FullName</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="254" pos:column="13">var</name></type> <name pos:line="254" pos:column="17">solutionName</name> <init pos:line="254" pos:column="30">= <expr><call><name><name pos:line="254" pos:column="32">Path</name><op:operator pos:line="254" pos:column="36">.</op:operator><name pos:line="254" pos:column="37">GetFileNameWithoutExtension</name></name><argument_list pos:line="254" pos:column="64">(<argument><expr><name pos:line="254" pos:column="65">fullName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="255" pos:column="13">var</name></type> <name pos:line="255" pos:column="17">directoryName</name> <init pos:line="255" pos:column="31">= <expr><call><name><name pos:line="255" pos:column="33">String</name><op:operator pos:line="255" pos:column="39">.</op:operator><name pos:line="255" pos:column="40">Format</name></name><argument_list pos:line="255" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="255" pos:column="47">"{0}{1}"</lit:literal></expr></argument>, <argument><expr><name pos:line="255" pos:column="57">solutionName</name></expr></argument>, <argument><expr><call><name><name pos:line="255" pos:column="71">fullName</name><op:operator pos:line="255" pos:column="79">.</op:operator><name pos:line="255" pos:column="80">GetHashCode</name></name><argument_list pos:line="255" pos:column="91">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <return pos:line="257" pos:column="13">return <expr><call><name><name pos:line="257" pos:column="20">Path</name><op:operator pos:line="257" pos:column="24">.</op:operator><name pos:line="257" pos:column="25">Combine</name></name><argument_list pos:line="257" pos:column="32">(<argument><expr><name><name pos:line="257" pos:column="33">this</name><op:operator pos:line="257" pos:column="37">.</op:operator><name pos:line="257" pos:column="38">ServiceProvider</name><op:operator pos:line="257" pos:column="53">.</op:operator><name pos:line="257" pos:column="54">ExtensionDirectory</name></name></expr></argument>, <argument><expr><name pos:line="257" pos:column="74">DEFAULT_STORAGE_FOLDER</name></expr></argument>, <argument><expr><name pos:line="257" pos:column="98">directoryName</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="260" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="261" pos:column="9">/// Saves the state of &lt;see cref="CurrentMonitor"/&gt;</comment>
        <comment type="line" pos:line="262" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="263" pos:column="9">protected</specifier> <specifier pos:line="263" pos:column="19">override</specifier> <name pos:line="263" pos:column="28">void</name></type> <name pos:line="263" pos:column="33">Save</name><parameter_list pos:line="263" pos:column="37">()</parameter_list> <block pos:line="263" pos:column="40">{
            <if pos:line="264" pos:column="13">if<condition pos:line="264" pos:column="15">(<expr><name pos:line="264" pos:column="16">null</name> <op:operator pos:line="264" pos:column="21">!=</op:operator> <name pos:line="264" pos:column="24">CurrentMonitor</name></expr>)</condition><then pos:line="264" pos:column="39"> <block pos:line="264" pos:column="40">{
                <expr_stmt><expr><call><name><name pos:line="265" pos:column="17">CurrentMonitor</name><op:operator pos:line="265" pos:column="31">.</op:operator><name pos:line="265" pos:column="32">Save</name></name><argument_list pos:line="265" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="269" pos:column="9">private</specifier> <name pos:line="269" pos:column="17">bool</name></type> <name pos:line="269" pos:column="22">ShouldReset</name><parameter_list pos:line="269" pos:column="33">()</parameter_list> <block pos:line="269" pos:column="36">{
            <decl_stmt><decl><type><name pos:line="270" pos:column="13">var</name></type> <name pos:line="270" pos:column="17">openSolution</name> <init pos:line="270" pos:column="30">= <expr><call><name pos:line="270" pos:column="32">GetOpenSolution</name><argument_list pos:line="270" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="271" pos:column="13">if<condition pos:line="271" pos:column="15">(<expr><name pos:line="271" pos:column="16">null</name> <op:operator pos:line="271" pos:column="21">!=</op:operator> <name pos:line="271" pos:column="24">openSolution</name></expr>)</condition><then pos:line="271" pos:column="37"> <block pos:line="271" pos:column="38">{
                <decl_stmt><decl><type><name pos:line="272" pos:column="17">var</name></type> <name pos:line="272" pos:column="21">baseDirectory</name> <init pos:line="272" pos:column="35">= <expr><call><name pos:line="272" pos:column="37">GetBaseDirectory</name><argument_list pos:line="272" pos:column="53">(<argument><expr><name pos:line="272" pos:column="54">openSolution</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return pos:line="273" pos:column="17">return <expr><call><name><name pos:line="273" pos:column="24">File</name><op:operator pos:line="273" pos:column="28">.</op:operator><name pos:line="273" pos:column="29">Exists</name></name><argument_list pos:line="273" pos:column="35">(<argument><expr><call><name><name pos:line="273" pos:column="36">Path</name><op:operator pos:line="273" pos:column="40">.</op:operator><name pos:line="273" pos:column="41">Combine</name></name><argument_list pos:line="273" pos:column="48">(<argument><expr><name pos:line="273" pos:column="49">baseDirectory</name></expr></argument>, <argument><expr><name pos:line="273" pos:column="64">RESET_FILE_NAME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
            <return pos:line="275" pos:column="13">return <expr><lit:literal type="boolean" pos:line="275" pos:column="20">false</lit:literal></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="278" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="279" pos:column="9">/// Get the open solution.</comment>
        <comment type="line" pos:line="280" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="281" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="282" pos:column="9">private</specifier> <specifier pos:line="282" pos:column="17">static</specifier> <name pos:line="282" pos:column="24">Solution</name></type> <name pos:line="282" pos:column="33">GetOpenSolution</name><parameter_list pos:line="282" pos:column="48">()</parameter_list> <block pos:line="282" pos:column="51">{
            <decl_stmt><decl><type><name pos:line="283" pos:column="13">var</name></type> <name pos:line="283" pos:column="17">dte</name> <init pos:line="283" pos:column="21">= <expr><call><name><name pos:line="283" pos:column="23">VsPackage</name><op:operator pos:line="283" pos:column="32">.</op:operator><name pos:line="283" pos:column="33">GetGlobalService</name></name><argument_list pos:line="283" pos:column="49">(<argument><expr><call><name pos:line="283" pos:column="50">typeof</name><argument_list pos:line="283" pos:column="56">(<argument><expr><name pos:line="283" pos:column="57">DTE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="283" pos:column="63">as</op:operator> <name pos:line="283" pos:column="66">DTE</name></expr></init></decl>;</decl_stmt>
            <if pos:line="284" pos:column="13">if<condition pos:line="284" pos:column="15">(<expr><name pos:line="284" pos:column="16">dte</name> <op:operator pos:line="284" pos:column="20">!=</op:operator> <name pos:line="284" pos:column="23">null</name></expr>)</condition><then pos:line="284" pos:column="28"> <block pos:line="284" pos:column="29">{
                <decl_stmt><decl><type><name pos:line="285" pos:column="17">var</name></type> <name pos:line="285" pos:column="21">openSolution</name> <init pos:line="285" pos:column="34">= <expr><name><name pos:line="285" pos:column="36">dte</name><op:operator pos:line="285" pos:column="39">.</op:operator><name pos:line="285" pos:column="40">Solution</name></name></expr></init></decl>;</decl_stmt>
                <return pos:line="286" pos:column="17">return <expr><name pos:line="286" pos:column="24">openSolution</name></expr>;</return>
            }</block></then> <else pos:line="287" pos:column="15">else <block pos:line="287" pos:column="20">{
                <return pos:line="288" pos:column="17">return <expr><name pos:line="288" pos:column="24">null</name></expr>;</return>
            }</block></else></if>
        }</block></function>

        <function><type><specifier pos:line="292" pos:column="9">private</specifier> <name pos:line="292" pos:column="17">void</name></type> <name pos:line="292" pos:column="22">CurrentMonitor_FileChanged</name><parameter_list pos:line="292" pos:column="48">(<param><decl><type><name pos:line="292" pos:column="49">object</name></type> <name pos:line="292" pos:column="56">sender</name></decl></param>, <param><decl><type><name pos:line="292" pos:column="64">FileEventRaisedArgs</name></type> <name pos:line="292" pos:column="84">e</name></decl></param>)</parameter_list> <block pos:line="292" pos:column="87">{
            <expr_stmt><expr><call><name pos:line="293" pos:column="13">OnSourceFileChanged</name><argument_list pos:line="293" pos:column="32">(<argument><expr><name pos:line="293" pos:column="33">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <function><type><specifier pos:line="295" pos:column="9">private</specifier> <name pos:line="295" pos:column="17">void</name></type> <name pos:line="295" pos:column="22">CurrentMonitor_UpdateArchivesCompleted</name><parameter_list pos:line="295" pos:column="60">(<param><decl><type><name pos:line="295" pos:column="61">object</name></type> <name pos:line="295" pos:column="68">sender</name></decl></param>, <param><decl><type><name pos:line="295" pos:column="76">EventArgs</name></type> <name pos:line="295" pos:column="86">e</name></decl></param>)</parameter_list> <block pos:line="295" pos:column="89">{
            <expr_stmt><expr><call><name pos:line="296" pos:column="13">OnUpdateCompleted</name><argument_list pos:line="296" pos:column="30">(<argument><expr><name pos:line="296" pos:column="31">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="299" pos:column="9">private</specifier> <name pos:line="299" pos:column="17">void</name></type> <name pos:line="299" pos:column="22">CurrentMonitor_UpdateArchivesStarted</name><parameter_list pos:line="299" pos:column="58">(<param><decl><type><name pos:line="299" pos:column="59">object</name></type> <name pos:line="299" pos:column="66">sender</name></decl></param>, <param><decl><type><name pos:line="299" pos:column="74">EventArgs</name></type> <name pos:line="299" pos:column="84">e</name></decl></param>)</parameter_list> <block pos:line="299" pos:column="87">{
            <expr_stmt><expr><call><name pos:line="300" pos:column="13">OnUpdateStarted</name><argument_list pos:line="300" pos:column="28">(<argument><expr><name pos:line="300" pos:column="29">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="303" pos:column="9">private</specifier> <name pos:line="303" pos:column="17">void</name></type> <name pos:line="303" pos:column="22">CurrentMonitor_DirectoryRemoved</name><parameter_list pos:line="303" pos:column="53">(<param><decl><type><name pos:line="303" pos:column="54">object</name></type> <name pos:line="303" pos:column="61">sender</name></decl></param>, <param><decl><type><name pos:line="303" pos:column="69">DirectoryScanningMonitorEventArgs</name></type> <name pos:line="303" pos:column="103">e</name></decl></param>)</parameter_list> <block pos:line="303" pos:column="106">{
            <expr_stmt><expr><call><name pos:line="304" pos:column="13">OnDirectoryRemoved</name><argument_list pos:line="304" pos:column="31">(<argument><expr><name pos:line="304" pos:column="32">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="307" pos:column="9">private</specifier> <name pos:line="307" pos:column="17">void</name></type> <name pos:line="307" pos:column="22">CurrentMonitor_DirectoryAdded</name><parameter_list pos:line="307" pos:column="51">(<param><decl><type><name pos:line="307" pos:column="52">object</name></type> <name pos:line="307" pos:column="59">sender</name></decl></param>, <param><decl><type><name pos:line="307" pos:column="67">DirectoryScanningMonitorEventArgs</name></type> <name pos:line="307" pos:column="101">e</name></decl></param>)</parameter_list> <block pos:line="307" pos:column="104">{
            <expr_stmt><expr><call><name pos:line="308" pos:column="13">OnDirectoryAdded</name><argument_list pos:line="308" pos:column="29">(<argument><expr><name pos:line="308" pos:column="30">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
