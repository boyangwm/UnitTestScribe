<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML\SrcMLArchive.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2011 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - Initial implementation
 *    Jiang Zheng (ABB Group) - Initial implementation
 *****************************************************************************/</comment>

<using pos:line="13" pos:column="1">using <name pos:line="13" pos:column="7">System</name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Collections</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">Generic</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">ComponentModel</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Diagnostics</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Linq</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">IO</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">System</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">Threading</name></name>;</using>
<using pos:line="20" pos:column="1">using <name><name pos:line="20" pos:column="7">System</name><op:operator pos:line="20" pos:column="13">.</op:operator><name pos:line="20" pos:column="14">Threading</name><op:operator pos:line="20" pos:column="23">.</op:operator><name pos:line="20" pos:column="24">Tasks</name></name>;</using>
<using pos:line="21" pos:column="1">using <name><name pos:line="21" pos:column="7">System</name><op:operator pos:line="21" pos:column="13">.</op:operator><name pos:line="21" pos:column="14">Xml</name><op:operator pos:line="21" pos:column="17">.</op:operator><name pos:line="21" pos:column="18">Linq</name></name>;</using>
<using pos:line="22" pos:column="1">using <name><name pos:line="22" pos:column="7">ABB</name><op:operator pos:line="22" pos:column="10">.</op:operator><name pos:line="22" pos:column="11">SrcML</name><op:operator pos:line="22" pos:column="16">.</op:operator><name pos:line="22" pos:column="17">Utilities</name></name>;</using>
<using pos:line="23" pos:column="1">using <name><name pos:line="23" pos:column="7">System</name><op:operator pos:line="23" pos:column="13">.</op:operator><name pos:line="23" pos:column="14">Collections</name><op:operator pos:line="23" pos:column="25">.</op:operator><name pos:line="23" pos:column="26">ObjectModel</name></name>;</using>

<namespace pos:line="25" pos:column="1">namespace <name><name pos:line="25" pos:column="11">ABB</name><op:operator pos:line="25" pos:column="14">.</op:operator><name pos:line="25" pos:column="15">SrcML</name></name> <block pos:line="25" pos:column="21">{
    <comment type="line" pos:line="26" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="27" pos:column="5">/// This is an implementation of &lt;see cref="AbstractArchive"/&gt;. File changes trigger the addition, update, and deletion of srcML archives in</comment>
    <comment type="line" pos:line="28" pos:column="5">/// the archive directory</comment>
    <comment type="line" pos:line="29" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="30" pos:column="5">public</specifier> class <name pos:line="30" pos:column="18">SrcMLArchive</name> <super pos:line="30" pos:column="31">: <name><name pos:line="30" pos:column="33">GeneratorArchive</name><argument_list pos:line="30" pos:column="49">&lt;<argument><name pos:line="30" pos:column="50">SrcMLGenerator</name></argument>&gt;</argument_list></name></super> <block pos:line="30" pos:column="66">{
        <comment type="line" pos:line="31" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="32" pos:column="9">/// The default diretory to store the srcML files in</comment>
        <comment type="line" pos:line="33" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="34" pos:column="9">public</specifier> <specifier pos:line="34" pos:column="16">const</specifier> <name pos:line="34" pos:column="22">string</name></type> <name pos:line="34" pos:column="29">DEFAULT_ARCHIVE_DIRECTORY</name> <init pos:line="34" pos:column="55">= <expr><lit:literal type="string" pos:line="34" pos:column="57">"srcML"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="36" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="37" pos:column="9">/// Creates a new srcML archive in &lt;see cref="DEFAULT_ARCHIVE_DIRECTORY"/&gt; within &lt;see cref="Environment.CurrentDirectory"/&gt;.</comment>
        <comment type="line" pos:line="38" pos:column="9">/// &lt;/summary&gt;</comment>
        <constructor><specifier pos:line="39" pos:column="9">public</specifier> <name pos:line="39" pos:column="16">SrcMLArchive</name><parameter_list pos:line="39" pos:column="28">()</parameter_list> <member_list pos:line="39" pos:column="31">: <call><name pos:line="39" pos:column="33">this</name><argument_list pos:line="39" pos:column="37">(<argument><expr><name><name pos:line="39" pos:column="38">Environment</name><op:operator pos:line="39" pos:column="49">.</op:operator><name pos:line="39" pos:column="50">CurrentDirectory</name></name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="39" pos:column="68">true</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="39" pos:column="74">{ }</block></constructor>

        <comment type="line" pos:line="41" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="42" pos:column="9">/// Creates a new SrcMLArchive. The archive is created in &lt;c&gt;"baseDirectory\srcML"&lt;/c&gt;.</comment>
        <comment type="line" pos:line="43" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="44" pos:column="9">/// &lt;param name="baseDirectory"&gt;the base directory&lt;/param&gt;</comment>
        <constructor><specifier pos:line="45" pos:column="9">public</specifier> <name pos:line="45" pos:column="16">SrcMLArchive</name><parameter_list pos:line="45" pos:column="28">(<param><decl><type><name pos:line="45" pos:column="29">string</name></type> <name pos:line="45" pos:column="36">baseDirectory</name></decl></param>)</parameter_list>
            <member_list pos:line="46" pos:column="13">: <call><name pos:line="46" pos:column="15">this</name><argument_list pos:line="46" pos:column="19">(<argument><expr><name pos:line="46" pos:column="20">baseDirectory</name></expr></argument>, <argument><expr><name pos:line="46" pos:column="35">DEFAULT_ARCHIVE_DIRECTORY</name></expr></argument>)</argument_list></call> </member_list><block pos:line="46" pos:column="62">{
        }</block></constructor>

        <comment type="line" pos:line="49" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="50" pos:column="9">/// Creates a new SrcMLArchive. The archive is created in &lt;c&gt;"baseDirectory\srcML"&lt;/c&gt;.</comment>
        <comment type="line" pos:line="51" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="52" pos:column="9">/// &lt;param name="baseDirectory"&gt;the base directory&lt;/param&gt;</comment>
        <comment type="line" pos:line="53" pos:column="9">/// &lt;param name="useExistingSrcML"&gt;If True, any existing SrcML files in &lt;see cref="AbstractArchive.ArchivePath"/&gt; will be used. If False, these files will be deleted and potentially recreated.&lt;/param&gt;</comment>
        <constructor><specifier pos:line="54" pos:column="9">public</specifier> <name pos:line="54" pos:column="16">SrcMLArchive</name><parameter_list pos:line="54" pos:column="28">(<param><decl><type><name pos:line="54" pos:column="29">string</name></type> <name pos:line="54" pos:column="36">baseDirectory</name></decl></param>, <param><decl><type><name pos:line="54" pos:column="51">bool</name></type> <name pos:line="54" pos:column="56">useExistingSrcML</name></decl></param>)</parameter_list>
            <member_list pos:line="55" pos:column="13">: <call><name pos:line="55" pos:column="15">this</name><argument_list pos:line="55" pos:column="19">(<argument><expr><name pos:line="55" pos:column="20">baseDirectory</name></expr></argument>, <argument><expr><name pos:line="55" pos:column="35">DEFAULT_ARCHIVE_DIRECTORY</name></expr></argument>, <argument><expr><name pos:line="55" pos:column="62">useExistingSrcML</name></expr></argument>)</argument_list></call> </member_list><block pos:line="55" pos:column="80">{
        }</block></constructor>

        <comment type="line" pos:line="58" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="59" pos:column="9">/// Creates a new srcML archive</comment>
        <comment type="line" pos:line="60" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="61" pos:column="9">/// &lt;param name="baseDirectory"&gt;The base directory&lt;/param&gt;</comment>
        <comment type="line" pos:line="62" pos:column="9">/// &lt;param name="scheduler"&gt;The task scheduler to use for asynchronous tasks&lt;/param&gt;</comment>
        <constructor><specifier pos:line="63" pos:column="9">public</specifier> <name pos:line="63" pos:column="16">SrcMLArchive</name><parameter_list pos:line="63" pos:column="28">(<param><decl><type><name pos:line="63" pos:column="29">string</name></type> <name pos:line="63" pos:column="36">baseDirectory</name></decl></param>, <param><decl><type><name pos:line="63" pos:column="51">TaskScheduler</name></type> <name pos:line="63" pos:column="65">scheduler</name></decl></param>)</parameter_list>
            <member_list pos:line="64" pos:column="13">: <call><name pos:line="64" pos:column="15">this</name><argument_list pos:line="64" pos:column="19">(<argument><expr><name pos:line="64" pos:column="20">baseDirectory</name></expr></argument>, <argument><expr><name pos:line="64" pos:column="35">DEFAULT_ARCHIVE_DIRECTORY</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="64" pos:column="62">true</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="64" pos:column="68">new</op:operator> <call><name pos:line="64" pos:column="72">SrcMLGenerator</name><argument_list pos:line="64" pos:column="86">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="64" pos:column="90">new</op:operator> <call><name pos:line="64" pos:column="94">SrcMLFileNameMapping</name><argument_list pos:line="64" pos:column="114">(<argument><expr><call><name><name pos:line="64" pos:column="115">Path</name><op:operator pos:line="64" pos:column="119">.</op:operator><name pos:line="64" pos:column="120">Combine</name></name><argument_list pos:line="64" pos:column="127">(<argument><expr><name pos:line="64" pos:column="128">baseDirectory</name></expr></argument>, <argument><expr><name pos:line="64" pos:column="143">DEFAULT_ARCHIVE_DIRECTORY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="64" pos:column="172">TaskScheduler</name><op:operator pos:line="64" pos:column="185">.</op:operator><name pos:line="64" pos:column="186">Default</name></name></expr></argument>)</argument_list></call> </member_list><block pos:line="64" pos:column="195">{ }</block></constructor>

        <comment type="line" pos:line="66" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="67" pos:column="9">/// Creates a new SrcMLArchive. The archive is created in &lt;c&gt;"baseDirectory\srcML"&lt;/c&gt;.</comment>
        <comment type="line" pos:line="68" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="69" pos:column="9">/// &lt;param name="baseDirectory"&gt;the base directory&lt;/param&gt;</comment>
        <comment type="line" pos:line="70" pos:column="9">/// &lt;param name="useExistingSrcML"&gt;If True, any existing SrcML files in &lt;see cref="AbstractArchive.ArchivePath"/&gt; will be used. If False, these files will be deleted and potentially recreated.&lt;/param&gt;</comment>
        <comment type="line" pos:line="71" pos:column="9">/// &lt;param name="generator"&gt;The SrcMLGenerator to use to convert source files to SrcML.&lt;/param&gt;</comment>
        <constructor><specifier pos:line="72" pos:column="9">public</specifier> <name pos:line="72" pos:column="16">SrcMLArchive</name><parameter_list pos:line="72" pos:column="28">(<param><decl><type><name pos:line="72" pos:column="29">string</name></type> <name pos:line="72" pos:column="36">baseDirectory</name></decl></param>, <param><decl><type><name pos:line="72" pos:column="51">bool</name></type> <name pos:line="72" pos:column="56">useExistingSrcML</name></decl></param>, <param><decl><type><name pos:line="72" pos:column="74">SrcMLGenerator</name></type> <name pos:line="72" pos:column="89">generator</name></decl></param>)</parameter_list>
            <member_list pos:line="73" pos:column="13">: <call><name pos:line="73" pos:column="15">this</name><argument_list pos:line="73" pos:column="19">(<argument><expr><name pos:line="73" pos:column="20">baseDirectory</name></expr></argument>, <argument><expr><name pos:line="73" pos:column="35">DEFAULT_ARCHIVE_DIRECTORY</name></expr></argument>, <argument><expr><name pos:line="73" pos:column="62">useExistingSrcML</name></expr></argument>, <argument><expr><name pos:line="73" pos:column="80">generator</name></expr></argument>)</argument_list></call> </member_list><block pos:line="73" pos:column="91">{
        }</block></constructor>

        <comment type="line" pos:line="76" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="77" pos:column="9">/// Creates a new SrcMLArchive. The archive is created in &lt;c&gt;"baseDirectory\srcML"&lt;/c&gt;.</comment>
        <comment type="line" pos:line="78" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="79" pos:column="9">/// &lt;param name="baseDirectory"&gt;the base directory&lt;/param&gt;</comment>
        <comment type="line" pos:line="80" pos:column="9">/// &lt;param name="useExistingSrcML"&gt;If True, any existing SrcML files in &lt;see cref="AbstractArchive.ArchivePath"/&gt; will be used. If False, these files will be deleted and potentially recreated.&lt;/param&gt;</comment>
        <comment type="line" pos:line="81" pos:column="9">/// &lt;param name="generator"&gt;The SrcMLGenerator to use to convert source files to SrcML.&lt;/param&gt;</comment>
        <comment type="line" pos:line="82" pos:column="9">/// &lt;param name="xmlMapping"&gt;The XmlFileNameMapping to use to map source paths to xml file paths.&lt;/param&gt;</comment>
        <constructor><specifier pos:line="83" pos:column="9">public</specifier> <name pos:line="83" pos:column="16">SrcMLArchive</name><parameter_list pos:line="83" pos:column="28">(<param><decl><type><name pos:line="83" pos:column="29">string</name></type> <name pos:line="83" pos:column="36">baseDirectory</name></decl></param>, <param><decl><type><name pos:line="83" pos:column="51">bool</name></type> <name pos:line="83" pos:column="56">useExistingSrcML</name></decl></param>, <param><decl><type><name pos:line="83" pos:column="74">SrcMLGenerator</name></type> <name pos:line="83" pos:column="89">generator</name></decl></param>, <param><decl><type><name pos:line="83" pos:column="100">AbstractFileNameMapping</name></type> <name pos:line="83" pos:column="124">xmlMapping</name></decl></param>)</parameter_list>
            <member_list pos:line="84" pos:column="13">: <call><name pos:line="84" pos:column="15">this</name><argument_list pos:line="84" pos:column="19">(<argument><expr><name pos:line="84" pos:column="20">baseDirectory</name></expr></argument>, <argument><expr><name pos:line="84" pos:column="35">DEFAULT_ARCHIVE_DIRECTORY</name></expr></argument>, <argument><expr><name pos:line="84" pos:column="62">useExistingSrcML</name></expr></argument>, <argument><expr><name pos:line="84" pos:column="80">generator</name></expr></argument>, <argument><expr><name pos:line="84" pos:column="91">xmlMapping</name></expr></argument>, <argument><expr><name><name pos:line="84" pos:column="103">TaskScheduler</name><op:operator pos:line="84" pos:column="116">.</op:operator><name pos:line="84" pos:column="117">Default</name></name></expr></argument>)</argument_list></call> </member_list><block pos:line="84" pos:column="126">{
        }</block></constructor>
        <comment type="line" pos:line="86" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="87" pos:column="9">/// Creates a new SrcMLArchive. By default, any existing srcML will be used.</comment>
        <comment type="line" pos:line="88" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="89" pos:column="9">/// &lt;param name="baseDirectory"&gt;The parent of &lt;paramref name="srcMLDirectory"/&gt;. &lt;see cref="AbstractArchive.ArchivePath"/&gt; will be set to &lt;c&gt;Path.Combine(baseDirectory, srcMLDirectory)&lt;/c&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="90" pos:column="9">/// &lt;param name="srcMLDirectory"&gt;The directory to store the SrcML files in. This will be created as a subdirectory of &lt;paramref name="baseDirectory"/&gt;&lt;/param&gt;</comment>
        <constructor><specifier pos:line="91" pos:column="9">public</specifier> <name pos:line="91" pos:column="16">SrcMLArchive</name><parameter_list pos:line="91" pos:column="28">(<param><decl><type><name pos:line="91" pos:column="29">string</name></type> <name pos:line="91" pos:column="36">baseDirectory</name></decl></param>, <param><decl><type><name pos:line="91" pos:column="51">string</name></type> <name pos:line="91" pos:column="58">srcMLDirectory</name></decl></param>)</parameter_list>
            <member_list pos:line="92" pos:column="13">: <call><name pos:line="92" pos:column="15">this</name><argument_list pos:line="92" pos:column="19">(<argument><expr><name pos:line="92" pos:column="20">baseDirectory</name></expr></argument>, <argument><expr><name pos:line="92" pos:column="35">srcMLDirectory</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="92" pos:column="51">true</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="92" pos:column="57">{
        }</block></constructor>

        <comment type="line" pos:line="95" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="96" pos:column="9">/// Creates a new SrcMLArchive.</comment>
        <comment type="line" pos:line="97" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="98" pos:column="9">/// &lt;param name="baseDirectory"&gt;The parent of &lt;paramref name="srcMLDirectory"/&gt;. &lt;see cref="AbstractArchive.ArchivePath"/&gt; will be set to &lt;c&gt;Path.Combine(baseDirectory, srcMLDirectory)&lt;/c&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="99" pos:column="9">/// &lt;param name="srcMLDirectory"&gt;The directory to store the SrcML files in. This will be created as a subdirectory of &lt;paramref name="baseDirectory"/&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="100" pos:column="9">/// &lt;param name="useExistingSrcML"&gt;If True, any existing SrcML files in &lt;see cref="AbstractArchive.ArchivePath"/&gt; will be used. If False, these files will be deleted and potentially recreated.&lt;/param&gt;</comment>
        <constructor><specifier pos:line="101" pos:column="9">public</specifier> <name pos:line="101" pos:column="16">SrcMLArchive</name><parameter_list pos:line="101" pos:column="28">(<param><decl><type><name pos:line="101" pos:column="29">string</name></type> <name pos:line="101" pos:column="36">baseDirectory</name></decl></param>, <param><decl><type><name pos:line="101" pos:column="51">string</name></type> <name pos:line="101" pos:column="58">srcMLDirectory</name></decl></param>, <param><decl><type><name pos:line="101" pos:column="74">bool</name></type> <name pos:line="101" pos:column="79">useExistingSrcML</name></decl></param>)</parameter_list>
            <member_list pos:line="102" pos:column="13">: <call><name pos:line="102" pos:column="15">this</name><argument_list pos:line="102" pos:column="19">(<argument><expr><name pos:line="102" pos:column="20">baseDirectory</name></expr></argument>, <argument><expr><name pos:line="102" pos:column="35">srcMLDirectory</name></expr></argument>, <argument><expr><name pos:line="102" pos:column="51">useExistingSrcML</name></expr></argument>, <argument><expr><op:operator pos:line="102" pos:column="69">new</op:operator> <call><name pos:line="102" pos:column="73">SrcMLGenerator</name><argument_list pos:line="102" pos:column="87">()</argument_list></call></expr></argument>)</argument_list></call> </member_list><block pos:line="102" pos:column="91">{
        }</block></constructor>

        <comment type="line" pos:line="105" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="106" pos:column="9">/// Creates a new SrcMLArchive.</comment>
        <comment type="line" pos:line="107" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="108" pos:column="9">/// &lt;param name="baseDirectory"&gt;The parent of &lt;paramref name="srcMLDirectory"/&gt;. &lt;see cref="AbstractArchive.ArchivePath"/&gt; will be set to &lt;c&gt;Path.Combine(baseDirectory, srcMLDirectory)&lt;/c&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="109" pos:column="9">/// &lt;param name="srcMLDirectory"&gt;The directory to store the SrcML files in. This will be created as a subdirectory of &lt;paramref name="baseDirectory"/&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="110" pos:column="9">/// &lt;param name="useExistingSrcML"&gt;If True, any existing SrcML files in &lt;see cref="AbstractArchive.ArchivePath"/&gt; will be used. If False, these files will be deleted and potentially recreated.&lt;/param&gt;</comment>
        <comment type="line" pos:line="111" pos:column="9">/// &lt;param name="generator"&gt;The SrcMLGenerator to use to convert source files to SrcML.&lt;/param&gt;</comment>
        <constructor><specifier pos:line="112" pos:column="9">public</specifier> <name pos:line="112" pos:column="16">SrcMLArchive</name><parameter_list pos:line="112" pos:column="28">(<param><decl><type><name pos:line="112" pos:column="29">string</name></type> <name pos:line="112" pos:column="36">baseDirectory</name></decl></param>, <param><decl><type><name pos:line="112" pos:column="51">string</name></type> <name pos:line="112" pos:column="58">srcMLDirectory</name></decl></param>, <param><decl><type><name pos:line="112" pos:column="74">bool</name></type> <name pos:line="112" pos:column="79">useExistingSrcML</name></decl></param>, <param><decl><type><name pos:line="112" pos:column="97">SrcMLGenerator</name></type> <name pos:line="112" pos:column="112">generator</name></decl></param>)</parameter_list>
            <member_list pos:line="113" pos:column="13">: <call><name pos:line="113" pos:column="15">this</name><argument_list pos:line="113" pos:column="19">(<argument><expr><name pos:line="113" pos:column="20">baseDirectory</name></expr></argument>, <argument><expr><name pos:line="113" pos:column="35">srcMLDirectory</name></expr></argument>, <argument><expr><name pos:line="113" pos:column="51">useExistingSrcML</name></expr></argument>, <argument><expr><name pos:line="113" pos:column="69">generator</name></expr></argument>,
                   <argument><expr><op:operator pos:line="114" pos:column="20">new</op:operator> <call><name pos:line="114" pos:column="24">SrcMLFileNameMapping</name><argument_list pos:line="114" pos:column="44">(<argument><expr><call><name><name pos:line="114" pos:column="45">Path</name><op:operator pos:line="114" pos:column="49">.</op:operator><name pos:line="114" pos:column="50">Combine</name></name><argument_list pos:line="114" pos:column="57">(<argument><expr><name pos:line="114" pos:column="58">baseDirectory</name></expr></argument>, <argument><expr><name pos:line="114" pos:column="73">srcMLDirectory</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="114" pos:column="91">TaskScheduler</name><op:operator pos:line="114" pos:column="104">.</op:operator><name pos:line="114" pos:column="105">Default</name></name></expr></argument>)</argument_list></call> </member_list><block pos:line="114" pos:column="114">{

        }</block></constructor>

        <comment type="line" pos:line="118" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="119" pos:column="9">/// Creates a new SrcMLArchive.</comment>
        <comment type="line" pos:line="120" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="121" pos:column="9">/// &lt;param name="baseDirectory"&gt;The parent of &lt;paramref name="srcMLDirectory"/&gt;. &lt;see cref="AbstractArchive.ArchivePath"/&gt; will be set to &lt;c&gt;Path.Combine(baseDirectory, srcMLDirectory)&lt;/c&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="122" pos:column="9">/// &lt;param name="srcMLDirectory"&gt;The directory to store the SrcML files in. This will be created as a subdirectory of &lt;paramref name="baseDirectory"/&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="123" pos:column="9">/// &lt;param name="useExistingSrcML"&gt;If True, any existing SrcML files in &lt;see cref="AbstractArchive.ArchivePath"/&gt; will be used. If False, these files will be deleted and potentially recreated.&lt;/param&gt;</comment>
        <comment type="line" pos:line="124" pos:column="9">/// &lt;param name="generator"&gt;The SrcMLGenerator to use to convert source files to SrcML.&lt;/param&gt;</comment>
        <comment type="line" pos:line="125" pos:column="9">/// &lt;param name="xmlMapping"&gt;The XmlFileNameMapping to use to map source paths to xml file paths.&lt;/param&gt;</comment>
        <comment type="line" pos:line="126" pos:column="9">/// &lt;param name="scheduler"&gt;The task scheduler to for asynchronous tasks&lt;/param&gt;</comment>
        <constructor><specifier pos:line="127" pos:column="9">public</specifier> <name pos:line="127" pos:column="16">SrcMLArchive</name><parameter_list pos:line="127" pos:column="28">(<param><decl><type><name pos:line="127" pos:column="29">string</name></type> <name pos:line="127" pos:column="36">baseDirectory</name></decl></param>, <param><decl><type><name pos:line="127" pos:column="51">string</name></type> <name pos:line="127" pos:column="58">srcMLDirectory</name></decl></param>, <param><decl><type><name pos:line="127" pos:column="74">bool</name></type> <name pos:line="127" pos:column="79">useExistingSrcML</name></decl></param>, <param><decl><type><name pos:line="127" pos:column="97">SrcMLGenerator</name></type> <name pos:line="127" pos:column="112">generator</name></decl></param>, <param><decl><type><name pos:line="127" pos:column="123">AbstractFileNameMapping</name></type> <name pos:line="127" pos:column="147">mapping</name></decl></param>, <param><decl><type><name pos:line="127" pos:column="156">TaskScheduler</name></type> <name pos:line="127" pos:column="170">scheduler</name></decl></param>)</parameter_list>
            <member_list pos:line="128" pos:column="13">: <call><name pos:line="128" pos:column="15">base</name><argument_list pos:line="128" pos:column="19">(<argument><expr><name pos:line="128" pos:column="20">baseDirectory</name></expr></argument>, <argument><expr><name pos:line="128" pos:column="35">srcMLDirectory</name></expr></argument>, <argument><expr><name pos:line="128" pos:column="51">useExistingSrcML</name></expr></argument>, <argument><expr><name pos:line="128" pos:column="69">generator</name></expr></argument>, <argument><expr><name pos:line="128" pos:column="80">mapping</name></expr></argument>, <argument><expr><name pos:line="128" pos:column="89">scheduler</name></expr></argument>)</argument_list></call> </member_list><block pos:line="128" pos:column="100">{ }</block></constructor>

        <comment type="line" pos:line="130" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="131" pos:column="9">/// Enumerates over each file in the archive and returns a file unit</comment>
        <comment type="line" pos:line="132" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="133" pos:column="9">public</specifier> <name><name pos:line="133" pos:column="16">IEnumerable</name><argument_list pos:line="133" pos:column="27">&lt;<argument><name pos:line="133" pos:column="28">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="133" pos:column="38">FileUnits</name> <block pos:line="133" pos:column="48">{
            <function><name pos:line="134" pos:column="13">get</name> <block pos:line="134" pos:column="17">{
                <return pos:line="135" pos:column="17">return <expr><linq><from pos:line="135" pos:column="24">from <expr><name pos:line="135" pos:column="29">xmlFileName</name></expr> <in pos:line="135" pos:column="41">in <expr><call><name pos:line="135" pos:column="44">GetArchivedFiles</name><argument_list pos:line="135" pos:column="60">()</argument_list></call></expr></in></from>
                       <select pos:line="136" pos:column="24">select <expr><call><name><name pos:line="136" pos:column="31">SrcMLElement</name><op:operator pos:line="136" pos:column="43">.</op:operator><name pos:line="136" pos:column="44">Load</name></name><argument_list pos:line="136" pos:column="48">(<argument><expr><name pos:line="136" pos:column="49">xmlFileName</name></expr></argument>)</argument_list></call></expr></select></linq></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <function><type><specifier pos:line="140" pos:column="9">protected</specifier> <specifier pos:line="140" pos:column="19">override</specifier> <name pos:line="140" pos:column="28">void</name></type> <name pos:line="140" pos:column="33">OnFileChanged</name><parameter_list pos:line="140" pos:column="46">(<param><decl><type><name pos:line="140" pos:column="47">FileEventRaisedArgs</name></type> <name pos:line="140" pos:column="67">e</name></decl></param>)</parameter_list> <block pos:line="140" pos:column="70">{
            <if pos:line="141" pos:column="13">if<condition pos:line="141" pos:column="15">(<expr><name><name pos:line="141" pos:column="16">e</name><op:operator pos:line="141" pos:column="17">.</op:operator><name pos:line="141" pos:column="18">EventType</name></name> <op:operator pos:line="141" pos:column="28">!=</op:operator> <name><name pos:line="141" pos:column="31">FileEventType</name><op:operator pos:line="141" pos:column="44">.</op:operator><name pos:line="141" pos:column="45">FileDeleted</name></name></expr>)</condition><then pos:line="141" pos:column="57"> <block pos:line="141" pos:column="58">{
                <expr_stmt><expr><name><name pos:line="142" pos:column="17">e</name><op:operator pos:line="142" pos:column="18">.</op:operator><name pos:line="142" pos:column="19">HasSrcML</name></name> <op:operator pos:line="142" pos:column="28">=</op:operator> <lit:literal type="boolean" pos:line="142" pos:column="30">true</lit:literal></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name pos:line="144" pos:column="13">base</name><op:operator pos:line="144" pos:column="17">.</op:operator><name pos:line="144" pos:column="18">OnFileChanged</name></name><argument_list pos:line="144" pos:column="31">(<argument><expr><name pos:line="144" pos:column="32">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="147" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="148" pos:column="9">/// Check if the file extension is in the set of file types that can be processed by SrcML.NET.</comment>
        <comment type="line" pos:line="149" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="150" pos:column="9">/// &lt;param name="filePath"&gt;The file name to check.&lt;/param&gt;</comment>
        <comment type="line" pos:line="151" pos:column="9">/// &lt;returns&gt;True if the file can be converted to SrcML; False otherwise.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="152" pos:column="9">public</specifier> <name pos:line="152" pos:column="16">bool</name></type> <name pos:line="152" pos:column="21">IsValidFileExtension</name><parameter_list pos:line="152" pos:column="41">(<param><decl><type><name pos:line="152" pos:column="42">string</name></type> <name pos:line="152" pos:column="49">filePath</name></decl></param>)</parameter_list> <block pos:line="152" pos:column="59">{
            <decl_stmt><decl><type><name pos:line="153" pos:column="13">string</name></type> <name pos:line="153" pos:column="20">fileExtension</name> <init pos:line="153" pos:column="34">= <expr><call><name><name pos:line="153" pos:column="36">Path</name><op:operator pos:line="153" pos:column="40">.</op:operator><name pos:line="153" pos:column="41">GetExtension</name></name><argument_list pos:line="153" pos:column="53">(<argument><expr><name pos:line="153" pos:column="54">filePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="154" pos:column="13">if<condition pos:line="154" pos:column="15">(<expr><name pos:line="154" pos:column="16">fileExtension</name> <op:operator pos:line="154" pos:column="30">!=</op:operator> <name pos:line="154" pos:column="33">null</name> <op:operator pos:line="154" pos:column="38">&amp;&amp;</op:operator> <call><name><name pos:line="154" pos:column="41">Generator</name><op:operator pos:line="154" pos:column="50">.</op:operator><name pos:line="154" pos:column="51">ExtensionMapping</name><op:operator pos:line="154" pos:column="67">.</op:operator><name pos:line="154" pos:column="68">ContainsKey</name></name><argument_list pos:line="154" pos:column="79">(<argument><expr><name pos:line="154" pos:column="80">fileExtension</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="154" pos:column="95"> <block pos:line="154" pos:column="96">{
                <return pos:line="155" pos:column="17">return <expr><lit:literal type="boolean" pos:line="155" pos:column="24">true</lit:literal></expr>;</return>
            }</block></then></if>
            <return pos:line="157" pos:column="13">return <expr><lit:literal type="boolean" pos:line="157" pos:column="20">false</lit:literal></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="160" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="161" pos:column="9">/// Gets the XElement for the specified source file. If the SrcML does not already exist in the archive, it will be created.</comment>
        <comment type="line" pos:line="162" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="163" pos:column="9">/// &lt;param name="sourceFilePath"&gt;The source file to get the root XElement for.&lt;/param&gt;</comment>
        <comment type="line" pos:line="164" pos:column="9">/// &lt;returns&gt;The root XElement of the source file.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="165" pos:column="9">public</specifier> <specifier pos:line="165" pos:column="16">virtual</specifier> <name pos:line="165" pos:column="24">XElement</name></type> <name pos:line="165" pos:column="33">GetXElementForSourceFile</name><parameter_list pos:line="165" pos:column="57">(<param><decl><type><name pos:line="165" pos:column="58">string</name></type> <name pos:line="165" pos:column="65">sourceFilePath</name></decl></param>)</parameter_list> <block pos:line="165" pos:column="81">{
            <if pos:line="166" pos:column="13">if<condition pos:line="166" pos:column="15">(<expr><op:operator pos:line="166" pos:column="16">!</op:operator><call><name><name pos:line="166" pos:column="17">File</name><op:operator pos:line="166" pos:column="21">.</op:operator><name pos:line="166" pos:column="22">Exists</name></name><argument_list pos:line="166" pos:column="28">(<argument><expr><name pos:line="166" pos:column="29">sourceFilePath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="166" pos:column="45"> <block pos:line="166" pos:column="46">{
                <return pos:line="167" pos:column="17">return <expr><name pos:line="167" pos:column="24">null</name></expr>;</return>
            }</block></then> <else pos:line="168" pos:column="15">else <block pos:line="168" pos:column="20">{
                <decl_stmt><decl><type><name pos:line="169" pos:column="17">string</name></type> <name pos:line="169" pos:column="24">xmlPath</name> <init pos:line="169" pos:column="32">= <expr><call><name pos:line="169" pos:column="34">GetArchivePath</name><argument_list pos:line="169" pos:column="48">(<argument><expr><name pos:line="169" pos:column="49">sourceFilePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                
                <if pos:line="171" pos:column="17">if<condition pos:line="171" pos:column="19">(<expr><op:operator pos:line="171" pos:column="20">!</op:operator><call><name><name pos:line="171" pos:column="21">File</name><op:operator pos:line="171" pos:column="25">.</op:operator><name pos:line="171" pos:column="26">Exists</name></name><argument_list pos:line="171" pos:column="32">(<argument><expr><name pos:line="171" pos:column="33">xmlPath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="171" pos:column="42"> <block pos:line="171" pos:column="43">{
                    <return pos:line="172" pos:column="21">return <expr><name pos:line="172" pos:column="28">null</name></expr>;</return>
                }</block></then></if>
                <return pos:line="174" pos:column="17">return <expr><call><name><name pos:line="174" pos:column="24">SrcMLElement</name><op:operator pos:line="174" pos:column="36">.</op:operator><name pos:line="174" pos:column="37">Load</name></name><argument_list pos:line="174" pos:column="41">(<argument><expr><name pos:line="174" pos:column="42">xmlPath</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></else></if>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
