<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\TestInputs\csharp_overload_callingobj.cs" pos:tabs="8"><namespace pos:line="1" pos:column="1">namespace <name pos:line="1" pos:column="11">OverloadTest</name> <block pos:line="1" pos:column="24">{
		<class><specifier pos:line="2" pos:column="17">public</specifier> class <name pos:line="2" pos:column="30">Test</name> <block pos:line="2" pos:column="35">{
			<decl_stmt><decl><type><name pos:line="3" pos:column="25">TestCall</name></type> <name pos:line="3" pos:column="34">t</name></decl>;</decl_stmt>

			<function><type><specifier pos:line="5" pos:column="25">public</specifier> <name pos:line="5" pos:column="32">void</name></type> <name pos:line="5" pos:column="37">runFoo0</name><parameter_list pos:line="5" pos:column="44">()</parameter_list> <block pos:line="5" pos:column="47">{ <expr_stmt><expr><call><name><name pos:line="5" pos:column="49">t</name><op:operator pos:line="5" pos:column="50">.</op:operator><name pos:line="5" pos:column="51">foo</name></name><argument_list pos:line="5" pos:column="54">()</argument_list></call></expr>;</expr_stmt> }</block></function>

			<function><type><specifier pos:line="7" pos:column="25">public</specifier> <name pos:line="7" pos:column="32">void</name></type> <name pos:line="7" pos:column="37">runFoo1</name><parameter_list pos:line="7" pos:column="44">()</parameter_list> <block pos:line="7" pos:column="47">{ <expr_stmt><expr><call><name><name pos:line="7" pos:column="49">t</name><op:operator pos:line="7" pos:column="50">.</op:operator><name pos:line="7" pos:column="51">foo</name></name><argument_list pos:line="7" pos:column="54">(<argument><expr><lit:literal type="boolean" pos:line="7" pos:column="55">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
	}</block></class>
}</block></namespace></unit>
