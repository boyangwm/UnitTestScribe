<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data.Test\DataAssert.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2014 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *    Patrick Francis (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">NUnit</name><op:operator pos:line="13" pos:column="12">.</op:operator><name pos:line="13" pos:column="13">Framework</name></name>;</using>
<using pos:line="14" pos:column="1">using <name pos:line="14" pos:column="7">System</name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Collections</name><op:operator pos:line="15" pos:column="25">.</op:operator><name pos:line="15" pos:column="26">Generic</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Linq</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Text</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Threading</name><op:operator pos:line="18" pos:column="23">.</op:operator><name pos:line="18" pos:column="24">Tasks</name></name>;</using>

<namespace pos:line="20" pos:column="1">namespace <name><name pos:line="20" pos:column="11">ABB</name><op:operator pos:line="20" pos:column="14">.</op:operator><name pos:line="20" pos:column="15">SrcML</name><op:operator pos:line="20" pos:column="20">.</op:operator><name pos:line="20" pos:column="21">Data</name><op:operator pos:line="20" pos:column="25">.</op:operator><name pos:line="20" pos:column="26">Test</name></name> <block pos:line="20" pos:column="31">{
    <comment type="line" pos:line="21" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="22" pos:column="5">/// The DataAssert class provides methods for comparing two similar elements (&lt;see cref="ABB.SrcML.Data.Statement"/&gt;,</comment>
    <comment type="line" pos:line="23" pos:column="5">/// &lt;see cref="ABB.SrcML.Data.Expression"/&gt;, or &lt;see cref="ABB.SrcML.Data.SrcMLLocation"/&gt;).</comment>
    <comment type="line" pos:line="24" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="25" pos:column="5">public</specifier> class <name pos:line="25" pos:column="18">DataAssert</name> <block pos:line="25" pos:column="29">{
        <comment type="line" pos:line="26" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="27" pos:column="9">/// Tests that two expressions are identical</comment>
        <comment type="line" pos:line="28" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="29" pos:column="9">/// &lt;param name="expected"&gt;The expected expression&lt;/param&gt;</comment>
        <comment type="line" pos:line="30" pos:column="9">/// &lt;param name="actual"&gt;The actual expression&lt;/param&gt;</comment>
        <function><type><specifier pos:line="31" pos:column="9">public</specifier> <specifier pos:line="31" pos:column="16">static</specifier> <name pos:line="31" pos:column="23">void</name></type> <name pos:line="31" pos:column="28">ExpressionsAreEqual</name><parameter_list pos:line="31" pos:column="47">(<param><decl><type><name pos:line="31" pos:column="48">Expression</name></type> <name pos:line="31" pos:column="59">expected</name></decl></param>, <param><decl><type><name pos:line="31" pos:column="69">Expression</name></type> <name pos:line="31" pos:column="80">actual</name></decl></param>)</parameter_list> <block pos:line="31" pos:column="88">{
            <expr_stmt><expr><call><name pos:line="32" pos:column="13">ExpressionsAreEqual</name><argument_list pos:line="32" pos:column="32">(<argument><expr><name pos:line="32" pos:column="33">expected</name></expr></argument>, <argument><expr><name pos:line="32" pos:column="43">actual</name></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="51">String</name><op:operator pos:line="32" pos:column="57">.</op:operator><name pos:line="32" pos:column="58">Empty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="35" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="36" pos:column="9">/// Tests that two locations are identical</comment>
        <comment type="line" pos:line="37" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="38" pos:column="9">/// &lt;param name="expected"&gt;The expected location&lt;/param&gt;</comment>
        <comment type="line" pos:line="39" pos:column="9">/// &lt;param name="actual"&gt;The actual location&lt;/param&gt;</comment>
        <function><type><specifier pos:line="40" pos:column="9">public</specifier> <specifier pos:line="40" pos:column="16">static</specifier> <name pos:line="40" pos:column="23">void</name></type> <name pos:line="40" pos:column="28">LocationsAreEqual</name><parameter_list pos:line="40" pos:column="45">(<param><decl><type><name pos:line="40" pos:column="46">SrcMLLocation</name></type> <name pos:line="40" pos:column="60">expected</name></decl></param>, <param><decl><type><name pos:line="40" pos:column="70">SrcMLLocation</name></type> <name pos:line="40" pos:column="84">actual</name></decl></param>)</parameter_list> <block pos:line="40" pos:column="92">{
            <expr_stmt><expr><call><name pos:line="41" pos:column="13">LocationsAreEqual</name><argument_list pos:line="41" pos:column="30">(<argument><expr><name pos:line="41" pos:column="31">expected</name></expr></argument>, <argument><expr><name pos:line="41" pos:column="41">actual</name></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="49">string</name><op:operator pos:line="41" pos:column="55">.</op:operator><name pos:line="41" pos:column="56">Empty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="44" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="45" pos:column="9">/// Tests that two statements are identical</comment>
        <comment type="line" pos:line="46" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="47" pos:column="9">/// &lt;param name="expected"&gt;The expected statement&lt;/param&gt;</comment>
        <comment type="line" pos:line="48" pos:column="9">/// &lt;param name="actual"&gt;The actual statement&lt;/param&gt;</comment>
        <function><type><specifier pos:line="49" pos:column="9">public</specifier> <specifier pos:line="49" pos:column="16">static</specifier> <name pos:line="49" pos:column="23">void</name></type> <name pos:line="49" pos:column="28">StatementsAreEqual</name><parameter_list pos:line="49" pos:column="46">(<param><decl><type><name pos:line="49" pos:column="47">Statement</name></type> <name pos:line="49" pos:column="57">expected</name></decl></param>, <param><decl><type><name pos:line="49" pos:column="67">Statement</name></type> <name pos:line="49" pos:column="77">actual</name></decl></param>)</parameter_list> <block pos:line="49" pos:column="85">{
            <expr_stmt><expr><call><name pos:line="50" pos:column="13">StatementsAreEqual</name><argument_list pos:line="50" pos:column="31">(<argument><expr><name pos:line="50" pos:column="32">expected</name></expr></argument>, <argument><expr><name pos:line="50" pos:column="42">actual</name></expr></argument>, <argument><expr><call><name><name pos:line="50" pos:column="50">expected</name><op:operator pos:line="50" pos:column="58">.</op:operator><name pos:line="50" pos:column="59">GetXmlName</name></name><argument_list pos:line="50" pos:column="69">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="53" pos:column="9">private</specifier> <specifier pos:line="53" pos:column="17">static</specifier> <name pos:line="53" pos:column="24">void</name></type> <name pos:line="53" pos:column="29">LocationsAreEqual</name><parameter_list pos:line="53" pos:column="46">(<param><decl><type><name pos:line="53" pos:column="47">SrcMLLocation</name></type> <name pos:line="53" pos:column="61">expected</name></decl></param>, <param><decl><type><name pos:line="53" pos:column="71">SrcMLLocation</name></type> <name pos:line="53" pos:column="85">actual</name></decl></param>, <param><decl><type><name pos:line="53" pos:column="93">string</name></type> <name pos:line="53" pos:column="100">propertyName</name></decl></param>)</parameter_list> <block pos:line="53" pos:column="114">{
            <if pos:line="54" pos:column="13">if<condition pos:line="54" pos:column="15">(<expr><name pos:line="54" pos:column="16">expected</name> <op:operator pos:line="54" pos:column="25">!=</op:operator> <name pos:line="54" pos:column="28">actual</name></expr>)</condition><then pos:line="54" pos:column="35"> <block pos:line="54" pos:column="36">{
                <try pos:line="55" pos:column="17">try <block pos:line="55" pos:column="21">{
                    <expr_stmt><expr><call><name pos:line="56" pos:column="21">IsTrue</name><argument_list pos:line="56" pos:column="27">(<argument><expr><name pos:line="56" pos:column="28">expected</name> <op:operator pos:line="56" pos:column="37">!=</op:operator> <name pos:line="56" pos:column="40">null</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="56" pos:column="46">"expected!null"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="57" pos:column="21">IsTrue</name><argument_list pos:line="57" pos:column="27">(<argument><expr><name pos:line="57" pos:column="28">actual</name> <op:operator pos:line="57" pos:column="35">!=</op:operator> <name pos:line="57" pos:column="38">null</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="57" pos:column="44">"actual!null"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="58" pos:column="21">IsTrue</name><argument_list pos:line="58" pos:column="27">(<argument><expr><name><name pos:line="58" pos:column="28">expected</name><op:operator pos:line="58" pos:column="36">.</op:operator><name pos:line="58" pos:column="37">IsReference</name></name> <op:operator pos:line="58" pos:column="49">==</op:operator> <name><name pos:line="58" pos:column="52">actual</name><op:operator pos:line="58" pos:column="58">.</op:operator><name pos:line="58" pos:column="59">IsReference</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="58" pos:column="72">"IsReference"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="59" pos:column="21">IsTrue</name><argument_list pos:line="59" pos:column="27">(<argument><expr><name><name pos:line="59" pos:column="28">expected</name><op:operator pos:line="59" pos:column="36">.</op:operator><name pos:line="59" pos:column="37">SourceFileName</name></name> <op:operator pos:line="59" pos:column="52">==</op:operator> <name><name pos:line="59" pos:column="55">actual</name><op:operator pos:line="59" pos:column="61">.</op:operator><name pos:line="59" pos:column="62">SourceFileName</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="59" pos:column="78">"SourceFileName"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="60" pos:column="21">IsTrue</name><argument_list pos:line="60" pos:column="27">(<argument><expr><name><name pos:line="60" pos:column="28">expected</name><op:operator pos:line="60" pos:column="36">.</op:operator><name pos:line="60" pos:column="37">StartingLineNumber</name></name> <op:operator pos:line="60" pos:column="56">==</op:operator> <name><name pos:line="60" pos:column="59">actual</name><op:operator pos:line="60" pos:column="65">.</op:operator><name pos:line="60" pos:column="66">StartingLineNumber</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="60" pos:column="86">"StartingLineNumber"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="61" pos:column="21">IsTrue</name><argument_list pos:line="61" pos:column="27">(<argument><expr><name><name pos:line="61" pos:column="28">expected</name><op:operator pos:line="61" pos:column="36">.</op:operator><name pos:line="61" pos:column="37">StartingColumnNumber</name></name> <op:operator pos:line="61" pos:column="58">==</op:operator> <name><name pos:line="61" pos:column="61">actual</name><op:operator pos:line="61" pos:column="67">.</op:operator><name pos:line="61" pos:column="68">StartingColumnNumber</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="61" pos:column="90">"StartingColumnNumber"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="62" pos:column="21">IsTrue</name><argument_list pos:line="62" pos:column="27">(<argument><expr><name><name pos:line="62" pos:column="28">expected</name><op:operator pos:line="62" pos:column="36">.</op:operator><name pos:line="62" pos:column="37">EndingLineNumber</name></name> <op:operator pos:line="62" pos:column="54">==</op:operator> <name><name pos:line="62" pos:column="57">actual</name><op:operator pos:line="62" pos:column="63">.</op:operator><name pos:line="62" pos:column="64">EndingLineNumber</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="62" pos:column="82">"EndingLineNumber"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="63" pos:column="21">IsTrue</name><argument_list pos:line="63" pos:column="27">(<argument><expr><name><name pos:line="63" pos:column="28">expected</name><op:operator pos:line="63" pos:column="36">.</op:operator><name pos:line="63" pos:column="37">EndingColumnNumber</name></name> <op:operator pos:line="63" pos:column="56">==</op:operator> <name><name pos:line="63" pos:column="59">actual</name><op:operator pos:line="63" pos:column="65">.</op:operator><name pos:line="63" pos:column="66">EndingColumnNumber</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="63" pos:column="86">"EndingColumnNumber"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="64" pos:column="21">IsTrue</name><argument_list pos:line="64" pos:column="27">(<argument><expr><name><name pos:line="64" pos:column="28">expected</name><op:operator pos:line="64" pos:column="36">.</op:operator><name pos:line="64" pos:column="37">XPath</name></name> <op:operator pos:line="64" pos:column="43">==</op:operator> <name><name pos:line="64" pos:column="46">actual</name><op:operator pos:line="64" pos:column="52">.</op:operator><name pos:line="64" pos:column="53">XPath</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="64" pos:column="60">"XPath"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch pos:line="65" pos:column="19">catch<parameter_list pos:line="65" pos:column="24">(<param><decl><type><name pos:line="65" pos:column="25">DataAssertionException</name></type> <name pos:line="65" pos:column="48">e</name></decl></param>)</parameter_list> <block pos:line="65" pos:column="51">{
                    <expr_stmt><expr><call><name><name pos:line="66" pos:column="21">e</name><op:operator pos:line="66" pos:column="22">.</op:operator><name pos:line="66" pos:column="23">Add</name></name><argument_list pos:line="66" pos:column="26">(<argument><expr><name pos:line="66" pos:column="27">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <throw pos:line="67" pos:column="21">throw <expr><name pos:line="67" pos:column="27">e</name></expr>;</throw>
                }</block></catch></try>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="72" pos:column="9">private</specifier> <specifier pos:line="72" pos:column="17">static</specifier> <name pos:line="72" pos:column="24">void</name></type> <name pos:line="72" pos:column="29">IsTrue</name><parameter_list pos:line="72" pos:column="35">(<param><decl><type><name pos:line="72" pos:column="36">bool</name></type> <name pos:line="72" pos:column="41">condition</name></decl></param>, <param><decl><type><name pos:line="72" pos:column="52">string</name></type> <name pos:line="72" pos:column="59">propertyName</name></decl></param>)</parameter_list> <block pos:line="72" pos:column="73">{
            <if pos:line="73" pos:column="13">if<condition pos:line="73" pos:column="15">(<expr><op:operator pos:line="73" pos:column="16">!</op:operator><name pos:line="73" pos:column="17">condition</name></expr>)</condition><then pos:line="73" pos:column="27"> <block pos:line="73" pos:column="28">{
                <decl_stmt><decl><type><name pos:line="74" pos:column="17">var</name></type> <name pos:line="74" pos:column="21">exception</name> <init pos:line="74" pos:column="31">= <expr><op:operator pos:line="74" pos:column="33">new</op:operator> <call><name pos:line="74" pos:column="37">DataAssertionException</name><argument_list pos:line="74" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="75" pos:column="17">exception</name><op:operator pos:line="75" pos:column="26">.</op:operator><name pos:line="75" pos:column="27">Add</name></name><argument_list pos:line="75" pos:column="30">(<argument><expr><name pos:line="75" pos:column="31">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw pos:line="76" pos:column="17">throw <expr><name pos:line="76" pos:column="23">exception</name></expr>;</throw>
            }</block></then></if>
        }</block></function>

        <cpp:region pos:line="80" pos:column="9">#<cpp:directive pos:line="80" pos:column="10">region</cpp:directive> Collection equality methods</cpp:region>
        <function><type><specifier pos:line="81" pos:column="9">private</specifier> <specifier pos:line="81" pos:column="17">static</specifier> <name pos:line="81" pos:column="24">void</name></type> <name><name pos:line="81" pos:column="29">OrderedCollectionsAreEqual</name><argument_list pos:line="81" pos:column="55">&lt;<argument><name pos:line="81" pos:column="56">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="81" pos:column="58">(<param><decl><type><name><name pos:line="81" pos:column="59">ICollection</name><argument_list pos:line="81" pos:column="70">&lt;<argument><name pos:line="81" pos:column="71">T</name></argument>&gt;</argument_list></name></type> <name pos:line="81" pos:column="74">expected</name></decl></param>, <param><decl><type><name><name pos:line="81" pos:column="84">ICollection</name><argument_list pos:line="81" pos:column="95">&lt;<argument><name pos:line="81" pos:column="96">T</name></argument>&gt;</argument_list></name></type> <name pos:line="81" pos:column="99">actual</name></decl></param>, <param><decl><type><name><name pos:line="81" pos:column="107">Action</name><argument_list pos:line="81" pos:column="113">&lt;<argument><name pos:line="81" pos:column="114">T</name></argument>, <argument><name pos:line="81" pos:column="117">T</name></argument>&gt;</argument_list></name></type> <name pos:line="81" pos:column="120">test</name></decl></param>, <param><decl><type><name pos:line="81" pos:column="126">string</name></type> <name pos:line="81" pos:column="133">propertyName</name></decl></param>)</parameter_list> <block pos:line="81" pos:column="147">{
            <expr_stmt><expr><call><name pos:line="82" pos:column="13">IsTrue</name><argument_list pos:line="82" pos:column="19">(<argument><expr><name><name pos:line="82" pos:column="20">expected</name><op:operator pos:line="82" pos:column="28">.</op:operator><name pos:line="82" pos:column="29">Count</name></name> <op:operator pos:line="82" pos:column="35">==</op:operator> <name><name pos:line="82" pos:column="38">actual</name><op:operator pos:line="82" pos:column="44">.</op:operator><name pos:line="82" pos:column="45">Count</name></name></expr></argument>, <argument><expr><call><name><name pos:line="82" pos:column="52">string</name><op:operator pos:line="82" pos:column="58">.</op:operator><name pos:line="82" pos:column="59">Format</name></name><argument_list pos:line="82" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="82" pos:column="66">"{0}(count)"</lit:literal></expr></argument>, <argument><expr><name pos:line="82" pos:column="80">propertyName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for pos:line="83" pos:column="13">for(<init><decl><type><name pos:line="83" pos:column="17">int</name></type> <name pos:line="83" pos:column="21">i</name> <init pos:line="83" pos:column="23">= <expr><lit:literal type="number" pos:line="83" pos:column="25">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="83" pos:column="28">i</name> <op:operator pos:line="83" pos:column="30">&lt;</op:operator> <name><name pos:line="83" pos:column="32">actual</name><op:operator pos:line="83" pos:column="38">.</op:operator><name pos:line="83" pos:column="39">Count</name></name></expr>;</condition> <incr><expr><name pos:line="83" pos:column="46">i</name><op:operator pos:line="83" pos:column="47">++</op:operator></expr></incr>) <block pos:line="83" pos:column="51">{
                <try pos:line="84" pos:column="17">try <block pos:line="84" pos:column="21">{
                    <expr_stmt><expr><call><name pos:line="85" pos:column="21">test</name><argument_list pos:line="85" pos:column="25">(<argument><expr><call><name><name pos:line="85" pos:column="26">expected</name><op:operator pos:line="85" pos:column="34">.</op:operator><name pos:line="85" pos:column="35">ElementAt</name></name><argument_list pos:line="85" pos:column="44">(<argument><expr><name pos:line="85" pos:column="45">i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="85" pos:column="49">actual</name><op:operator pos:line="85" pos:column="55">.</op:operator><name pos:line="85" pos:column="56">ElementAt</name></name><argument_list pos:line="85" pos:column="65">(<argument><expr><name pos:line="85" pos:column="66">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch pos:line="86" pos:column="19">catch<parameter_list pos:line="86" pos:column="24">(<param><decl><type><name pos:line="86" pos:column="25">DataAssertionException</name></type> <name pos:line="86" pos:column="48">e</name></decl></param>)</parameter_list> <block pos:line="86" pos:column="51">{
                    <expr_stmt><expr><call><name><name pos:line="87" pos:column="21">e</name><op:operator pos:line="87" pos:column="22">.</op:operator><name pos:line="87" pos:column="23">Add</name></name><argument_list pos:line="87" pos:column="26">(<argument><expr><call><name><name pos:line="87" pos:column="27">String</name><op:operator pos:line="87" pos:column="33">.</op:operator><name pos:line="87" pos:column="34">Format</name></name><argument_list pos:line="87" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="87" pos:column="41">"{0}[{1}]"</lit:literal></expr></argument>, <argument><expr><name pos:line="87" pos:column="53">propertyName</name></expr></argument>, <argument><expr><name pos:line="87" pos:column="67">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <throw pos:line="88" pos:column="21">throw <expr><name pos:line="88" pos:column="27">e</name></expr>;</throw>
                }</block></catch></try>
            }</block></for>
        }</block></function>

        <function><type><specifier pos:line="93" pos:column="9">private</specifier> <specifier pos:line="93" pos:column="17">static</specifier> <name pos:line="93" pos:column="24">void</name></type> <name><name pos:line="93" pos:column="29">UnorderedCollectionsAreEqual</name><argument_list pos:line="93" pos:column="57">&lt;<argument><name pos:line="93" pos:column="58">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="93" pos:column="60">(<param><decl><type><name><name pos:line="93" pos:column="61">ICollection</name><argument_list pos:line="93" pos:column="72">&lt;<argument><name pos:line="93" pos:column="73">T</name></argument>&gt;</argument_list></name></type> <name pos:line="93" pos:column="76">expected</name></decl></param>, <param><decl><type><name><name pos:line="93" pos:column="86">ICollection</name><argument_list pos:line="93" pos:column="97">&lt;<argument><name pos:line="93" pos:column="98">T</name></argument>&gt;</argument_list></name></type> <name pos:line="93" pos:column="101">actual</name></decl></param>, <param><decl><type><name><name pos:line="93" pos:column="109">Action</name><argument_list pos:line="93" pos:column="115">&lt;<argument><name pos:line="93" pos:column="116">T</name></argument>, <argument><name pos:line="93" pos:column="119">T</name></argument>&gt;</argument_list></name></type> <name pos:line="93" pos:column="122">test</name></decl></param>, <param><decl><type><name pos:line="93" pos:column="128">string</name></type> <name pos:line="93" pos:column="135">propertyName</name></decl></param>)</parameter_list> <block pos:line="93" pos:column="149">{
            <expr_stmt><expr><call><name pos:line="94" pos:column="13">IsTrue</name><argument_list pos:line="94" pos:column="19">(<argument><expr><name><name pos:line="94" pos:column="20">expected</name><op:operator pos:line="94" pos:column="28">.</op:operator><name pos:line="94" pos:column="29">Count</name></name> <op:operator pos:line="94" pos:column="35">==</op:operator> <name><name pos:line="94" pos:column="38">actual</name><op:operator pos:line="94" pos:column="44">.</op:operator><name pos:line="94" pos:column="45">Count</name></name></expr></argument>, <argument><expr><call><name><name pos:line="94" pos:column="52">string</name><op:operator pos:line="94" pos:column="58">.</op:operator><name pos:line="94" pos:column="59">Format</name></name><argument_list pos:line="94" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="94" pos:column="66">"{0}(count)"</lit:literal></expr></argument>, <argument><expr><name pos:line="94" pos:column="80">propertyName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="96" pos:column="13">int</name></type> <name pos:line="96" pos:column="17">successCount</name> <init pos:line="96" pos:column="30">= <expr><lit:literal type="number" pos:line="96" pos:column="32">0</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="97" pos:column="13">var</name></type> <name pos:line="97" pos:column="17">matched</name> <init pos:line="97" pos:column="25">= <expr><op:operator pos:line="97" pos:column="27">new</op:operator> <name><name pos:line="97" pos:column="31">bool</name><index pos:line="97" pos:column="35">[<expr><name><name pos:line="97" pos:column="36">expected</name><op:operator pos:line="97" pos:column="44">.</op:operator><name pos:line="97" pos:column="45">Count</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <for pos:line="98" pos:column="13">for(<init><decl><type><name pos:line="98" pos:column="17">int</name></type> <name pos:line="98" pos:column="21">i</name> <init pos:line="98" pos:column="23">= <expr><lit:literal type="number" pos:line="98" pos:column="25">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="98" pos:column="28">i</name> <op:operator pos:line="98" pos:column="30">&lt;</op:operator> <name><name pos:line="98" pos:column="32">expected</name><op:operator pos:line="98" pos:column="40">.</op:operator><name pos:line="98" pos:column="41">Count</name></name></expr>;</condition> <incr><expr><name pos:line="98" pos:column="48">i</name><op:operator pos:line="98" pos:column="49">++</op:operator></expr></incr>) <block pos:line="98" pos:column="53">{
                <expr_stmt><expr><name pos:line="99" pos:column="17">successCount</name> <op:operator pos:line="99" pos:column="30">=</op:operator> <lit:literal type="number" pos:line="99" pos:column="32">0</lit:literal></expr>;</expr_stmt>
                <for pos:line="100" pos:column="17">for(<init><decl><type><name pos:line="100" pos:column="21">int</name></type> <name pos:line="100" pos:column="25">j</name> <init pos:line="100" pos:column="27">= <expr><lit:literal type="number" pos:line="100" pos:column="29">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="100" pos:column="32">j</name> <op:operator pos:line="100" pos:column="34">&lt;</op:operator> <name><name pos:line="100" pos:column="36">expected</name><op:operator pos:line="100" pos:column="44">.</op:operator><name pos:line="100" pos:column="45">Count</name></name></expr>;</condition> <incr><expr><name pos:line="100" pos:column="52">j</name><op:operator pos:line="100" pos:column="53">++</op:operator></expr></incr>) <block pos:line="100" pos:column="57">{
                    <try pos:line="101" pos:column="21">try <block pos:line="101" pos:column="25">{
                        <expr_stmt><expr><call><name pos:line="102" pos:column="25">test</name><argument_list pos:line="102" pos:column="29">(<argument><expr><call><name><name pos:line="102" pos:column="30">expected</name><op:operator pos:line="102" pos:column="38">.</op:operator><name pos:line="102" pos:column="39">ElementAt</name></name><argument_list pos:line="102" pos:column="48">(<argument><expr><name pos:line="102" pos:column="49">i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="102" pos:column="53">actual</name><op:operator pos:line="102" pos:column="59">.</op:operator><name pos:line="102" pos:column="60">ElementAt</name></name><argument_list pos:line="102" pos:column="69">(<argument><expr><name pos:line="102" pos:column="70">j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="103" pos:column="25">successCount</name><op:operator pos:line="103" pos:column="37">++</op:operator></expr>;</expr_stmt>
                    }</block> <catch pos:line="104" pos:column="23">catch<parameter_list pos:line="104" pos:column="28">(<param><decl><type><name pos:line="104" pos:column="29">DataAssertionException</name></type></decl></param>)</parameter_list> <block pos:line="104" pos:column="53">{

                    }</block></catch></try>
                }</block></for>

                <if pos:line="109" pos:column="17">if<condition pos:line="109" pos:column="19">(<expr><name pos:line="109" pos:column="20">successCount</name> <op:operator pos:line="109" pos:column="33">&gt;</op:operator> <lit:literal type="number" pos:line="109" pos:column="35">0</lit:literal></expr>)</condition><then pos:line="109" pos:column="37"> <block pos:line="109" pos:column="38">{
                    <expr_stmt><expr><name><name pos:line="110" pos:column="21">matched</name><index pos:line="110" pos:column="28">[<expr><name pos:line="110" pos:column="29">i</name></expr>]</index></name> <op:operator pos:line="110" pos:column="32">=</op:operator> <lit:literal type="boolean" pos:line="110" pos:column="34">true</lit:literal></expr>;</expr_stmt>
                }</block></then> <else pos:line="111" pos:column="19">else <block pos:line="111" pos:column="24">{
                    <decl_stmt><decl><type><name pos:line="112" pos:column="21">var</name></type> <name pos:line="112" pos:column="25">e</name> <init pos:line="112" pos:column="27">= <expr><op:operator pos:line="112" pos:column="29">new</op:operator> <call><name pos:line="112" pos:column="33">DataAssertionException</name><argument_list pos:line="112" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="113" pos:column="21">e</name><op:operator pos:line="113" pos:column="22">.</op:operator><name pos:line="113" pos:column="23">Add</name></name><argument_list pos:line="113" pos:column="26">(<argument><expr><call><name><name pos:line="113" pos:column="27">String</name><op:operator pos:line="113" pos:column="33">.</op:operator><name pos:line="113" pos:column="34">Format</name></name><argument_list pos:line="113" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="113" pos:column="41">"{0}[{1}]"</lit:literal></expr></argument>, <argument><expr><name pos:line="113" pos:column="53">propertyName</name></expr></argument>, <argument><expr><name pos:line="113" pos:column="67">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <throw pos:line="114" pos:column="21">throw <expr><name pos:line="114" pos:column="27">e</name></expr>;</throw>
                }</block></else></if>
            }</block></for>

            <for pos:line="118" pos:column="13">for(<init><decl><type><name pos:line="118" pos:column="17">int</name></type> <name pos:line="118" pos:column="21">i</name> <init pos:line="118" pos:column="23">= <expr><lit:literal type="number" pos:line="118" pos:column="25">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="118" pos:column="28">i</name> <op:operator pos:line="118" pos:column="30">&lt;</op:operator> <name><name pos:line="118" pos:column="32">expected</name><op:operator pos:line="118" pos:column="40">.</op:operator><name pos:line="118" pos:column="41">Count</name></name></expr>;</condition> <incr><expr><name pos:line="118" pos:column="48">i</name><op:operator pos:line="118" pos:column="49">++</op:operator></expr></incr>) <block pos:line="118" pos:column="53">{
                <if pos:line="119" pos:column="17">if<condition pos:line="119" pos:column="19">(<expr><op:operator pos:line="119" pos:column="20">!</op:operator><name><name pos:line="119" pos:column="21">matched</name><index pos:line="119" pos:column="28">[<expr><name pos:line="119" pos:column="29">i</name></expr>]</index></name></expr>)</condition><then pos:line="119" pos:column="32"> <block pos:line="119" pos:column="33">{
                    <decl_stmt><decl><type><name pos:line="120" pos:column="21">var</name></type> <name pos:line="120" pos:column="25">e</name> <init pos:line="120" pos:column="27">= <expr><op:operator pos:line="120" pos:column="29">new</op:operator> <call><name pos:line="120" pos:column="33">DataAssertionException</name><argument_list pos:line="120" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="121" pos:column="21">e</name><op:operator pos:line="121" pos:column="22">.</op:operator><name pos:line="121" pos:column="23">Add</name></name><argument_list pos:line="121" pos:column="26">(<argument><expr><call><name><name pos:line="121" pos:column="27">String</name><op:operator pos:line="121" pos:column="33">.</op:operator><name pos:line="121" pos:column="34">Format</name></name><argument_list pos:line="121" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="121" pos:column="41">"{0}[{1}]"</lit:literal></expr></argument>, <argument><expr><name pos:line="121" pos:column="53">propertyName</name></expr></argument>, <argument><expr><name pos:line="121" pos:column="67">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <throw pos:line="122" pos:column="21">throw <expr><name pos:line="122" pos:column="27">e</name></expr>;</throw>
                }</block></then></if>
            }</block></for>
        }</block></function>
        <cpp:endregion pos:line="126" pos:column="9">#<cpp:directive pos:line="126" pos:column="10">endregion</cpp:directive> Collection equality methods</cpp:endregion>
        <cpp:region pos:line="127" pos:column="9">#<cpp:directive pos:line="127" pos:column="10">region</cpp:directive> Statement equality methods</cpp:region>

        <function><type><specifier pos:line="129" pos:column="9">private</specifier> <specifier pos:line="129" pos:column="17">static</specifier> <name pos:line="129" pos:column="24">void</name></type> <name pos:line="129" pos:column="29">StatementsAreEqual</name><parameter_list pos:line="129" pos:column="47">(<param><decl><type><name pos:line="129" pos:column="48">Statement</name></type> <name pos:line="129" pos:column="58">expected</name></decl></param>, <param><decl><type><name pos:line="129" pos:column="68">Statement</name></type> <name pos:line="129" pos:column="78">actual</name></decl></param>, <param><decl><type><name pos:line="129" pos:column="86">string</name></type> <name pos:line="129" pos:column="93">propertyName</name></decl></param>)</parameter_list> <block pos:line="129" pos:column="107">{
            <if pos:line="130" pos:column="13">if<condition pos:line="130" pos:column="15">(<expr><name pos:line="130" pos:column="16">expected</name> <op:operator pos:line="130" pos:column="25">!=</op:operator> <name pos:line="130" pos:column="28">actual</name></expr>)</condition><then pos:line="130" pos:column="35"> <block pos:line="130" pos:column="36">{
                <try pos:line="131" pos:column="17">try <block pos:line="131" pos:column="21">{
                    <expr_stmt><expr><call><name pos:line="132" pos:column="21">IsTrue</name><argument_list pos:line="132" pos:column="27">(<argument><expr><name pos:line="132" pos:column="28">expected</name> <op:operator pos:line="132" pos:column="37">!=</op:operator> <name pos:line="132" pos:column="40">null</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="132" pos:column="46">"a!null"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="133" pos:column="21">IsTrue</name><argument_list pos:line="133" pos:column="27">(<argument><expr><name pos:line="133" pos:column="28">actual</name> <op:operator pos:line="133" pos:column="35">!=</op:operator> <name pos:line="133" pos:column="38">null</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="133" pos:column="44">"b!null"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="134" pos:column="21">IsTrue</name><argument_list pos:line="134" pos:column="27">(<argument><expr><call><name><name pos:line="134" pos:column="28">expected</name><op:operator pos:line="134" pos:column="36">.</op:operator><name pos:line="134" pos:column="37">GetType</name></name><argument_list pos:line="134" pos:column="44">()</argument_list></call> <op:operator pos:line="134" pos:column="47">==</op:operator> <call><name><name pos:line="134" pos:column="50">actual</name><op:operator pos:line="134" pos:column="56">.</op:operator><name pos:line="134" pos:column="57">GetType</name></name><argument_list pos:line="134" pos:column="64">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="134" pos:column="68">"TYPE"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch pos:line="135" pos:column="19">catch<parameter_list pos:line="135" pos:column="24">(<param><decl><type><name pos:line="135" pos:column="25">DataAssertionException</name></type> <name pos:line="135" pos:column="48">e</name></decl></param>)</parameter_list> <block pos:line="135" pos:column="51">{
                    <expr_stmt><expr><call><name><name pos:line="136" pos:column="21">e</name><op:operator pos:line="136" pos:column="22">.</op:operator><name pos:line="136" pos:column="23">Add</name></name><argument_list pos:line="136" pos:column="26">(<argument><expr><name pos:line="136" pos:column="27">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <throw pos:line="137" pos:column="21">throw <expr><name pos:line="137" pos:column="27">e</name></expr>;</throw>
                }</block></catch></try>
                <expr_stmt><expr><call><name pos:line="139" pos:column="17">TestEquality</name><argument_list pos:line="139" pos:column="29">(<argument><expr><op:operator pos:line="139" pos:column="30">(</op:operator><name pos:line="139" pos:column="31">dynamic</name><op:operator pos:line="139" pos:column="38">)</op:operator> <name pos:line="139" pos:column="40">expected</name></expr></argument>, <argument><expr><op:operator pos:line="139" pos:column="50">(</op:operator><name pos:line="139" pos:column="51">dynamic</name><op:operator pos:line="139" pos:column="58">)</op:operator> <name pos:line="139" pos:column="60">actual</name></expr></argument>, <argument><expr><name pos:line="139" pos:column="68">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="143" pos:column="9">private</specifier> <specifier pos:line="143" pos:column="17">static</specifier> <name pos:line="143" pos:column="24">void</name></type> <name pos:line="143" pos:column="29">TestEquality</name><parameter_list pos:line="143" pos:column="41">(<param><decl><type><name pos:line="143" pos:column="42">Statement</name></type> <name pos:line="143" pos:column="52">expected</name></decl></param>, <param><decl><type><name pos:line="143" pos:column="62">Statement</name></type> <name pos:line="143" pos:column="72">actual</name></decl></param>, <param><decl><type><name pos:line="143" pos:column="80">string</name></type> <name pos:line="143" pos:column="87">propertyName</name></decl></param>)</parameter_list> <block pos:line="143" pos:column="101">{
            <try pos:line="144" pos:column="13">try <block pos:line="144" pos:column="17">{
                <expr_stmt><expr><call><name pos:line="145" pos:column="17">IsTrue</name><argument_list pos:line="145" pos:column="23">(<argument><expr><name><name pos:line="145" pos:column="24">expected</name><op:operator pos:line="145" pos:column="32">.</op:operator><name pos:line="145" pos:column="33">ProgrammingLanguage</name></name> <op:operator pos:line="145" pos:column="53">==</op:operator> <name><name pos:line="145" pos:column="56">actual</name><op:operator pos:line="145" pos:column="62">.</op:operator><name pos:line="145" pos:column="63">ProgrammingLanguage</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="145" pos:column="84">"ProgrammingLanguage"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="146" pos:column="17">ExpressionsAreEqual</name><argument_list pos:line="146" pos:column="36">(<argument><expr><name><name pos:line="146" pos:column="37">expected</name><op:operator pos:line="146" pos:column="45">.</op:operator><name pos:line="146" pos:column="46">Content</name></name></expr></argument>, <argument><expr><name><name pos:line="146" pos:column="55">actual</name><op:operator pos:line="146" pos:column="61">.</op:operator><name pos:line="146" pos:column="62">Content</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="146" pos:column="71">"Content"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="147" pos:column="17">UnorderedCollectionsAreEqual</name><argument_list pos:line="147" pos:column="45">&lt;<argument><name pos:line="147" pos:column="46">SrcMLLocation</name></argument>&gt;</argument_list></name><argument_list pos:line="147" pos:column="60">(<argument><expr><name><name pos:line="147" pos:column="61">expected</name><op:operator pos:line="147" pos:column="69">.</op:operator><name pos:line="147" pos:column="70">Locations</name></name></expr></argument>, <argument><expr><name><name pos:line="147" pos:column="81">actual</name><op:operator pos:line="147" pos:column="87">.</op:operator><name pos:line="147" pos:column="88">Locations</name></name></expr></argument>, <argument><expr><name pos:line="147" pos:column="99">LocationsAreEqual</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="147" pos:column="118">"Locations"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="148" pos:column="17">OrderedCollectionsAreEqual</name><argument_list pos:line="148" pos:column="43">&lt;<argument><name pos:line="148" pos:column="44">Statement</name></argument>&gt;</argument_list></name><argument_list pos:line="148" pos:column="54">(<argument><expr><name><name pos:line="148" pos:column="55">expected</name><op:operator pos:line="148" pos:column="63">.</op:operator><name pos:line="148" pos:column="64">ChildStatements</name></name></expr></argument>, <argument><expr><name><name pos:line="148" pos:column="81">actual</name><op:operator pos:line="148" pos:column="87">.</op:operator><name pos:line="148" pos:column="88">ChildStatements</name></name></expr></argument>, <argument><expr><name pos:line="148" pos:column="105">StatementsAreEqual</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="148" pos:column="125">"ChildStatements"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch pos:line="149" pos:column="15">catch<parameter_list pos:line="149" pos:column="20">(<param><decl><type><name pos:line="149" pos:column="21">DataAssertionException</name></type> <name pos:line="149" pos:column="44">e</name></decl></param>)</parameter_list> <block pos:line="149" pos:column="47">{
                <expr_stmt><expr><call><name><name pos:line="150" pos:column="17">e</name><op:operator pos:line="150" pos:column="18">.</op:operator><name pos:line="150" pos:column="19">Add</name></name><argument_list pos:line="150" pos:column="22">(<argument><expr><name pos:line="150" pos:column="23">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw pos:line="151" pos:column="17">throw <expr><name pos:line="151" pos:column="23">e</name></expr>;</throw>
            }</block></catch></try>
        }</block></function>

        <function><type><specifier pos:line="155" pos:column="9">private</specifier> <specifier pos:line="155" pos:column="17">static</specifier> <name pos:line="155" pos:column="24">void</name></type> <name pos:line="155" pos:column="29">TestEquality</name><parameter_list pos:line="155" pos:column="41">(<param><decl><type><name pos:line="155" pos:column="42">ImportStatement</name></type> <name pos:line="155" pos:column="58">expected</name></decl></param>, <param><decl><type><name pos:line="155" pos:column="68">ImportStatement</name></type> <name pos:line="155" pos:column="84">actual</name></decl></param>, <param><decl><type><name pos:line="155" pos:column="92">string</name></type> <name pos:line="155" pos:column="99">propertyName</name></decl></param>)</parameter_list> <block pos:line="155" pos:column="113">{
            <try pos:line="156" pos:column="13">try <block pos:line="156" pos:column="17">{
                <expr_stmt><expr><call><name pos:line="157" pos:column="17">ExpressionsAreEqual</name><argument_list pos:line="157" pos:column="36">(<argument><expr><name><name pos:line="157" pos:column="37">expected</name><op:operator pos:line="157" pos:column="45">.</op:operator><name pos:line="157" pos:column="46">ImportedNamespace</name></name></expr></argument>, <argument><expr><name><name pos:line="157" pos:column="65">actual</name><op:operator pos:line="157" pos:column="71">.</op:operator><name pos:line="157" pos:column="72">ImportedNamespace</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="157" pos:column="91">"ImportedNamespace"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch pos:line="158" pos:column="15">catch<parameter_list pos:line="158" pos:column="20">(<param><decl><type><name pos:line="158" pos:column="21">DataAssertionException</name></type> <name pos:line="158" pos:column="44">e</name></decl></param>)</parameter_list> <block pos:line="158" pos:column="47">{
                <expr_stmt><expr><call><name><name pos:line="159" pos:column="17">e</name><op:operator pos:line="159" pos:column="18">.</op:operator><name pos:line="159" pos:column="19">Add</name></name><argument_list pos:line="159" pos:column="22">(<argument><expr><name pos:line="159" pos:column="23">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw pos:line="160" pos:column="17">throw <expr><name pos:line="160" pos:column="23">e</name></expr>;</throw>
            }</block></catch></try>
            <expr_stmt><expr><call><name pos:line="162" pos:column="13">TestEquality</name><argument_list pos:line="162" pos:column="25">(<argument><expr><op:operator pos:line="162" pos:column="26">(</op:operator><name pos:line="162" pos:column="27">Statement</name><op:operator pos:line="162" pos:column="36">)</op:operator> <name pos:line="162" pos:column="38">expected</name></expr></argument>, <argument><expr><op:operator pos:line="162" pos:column="48">(</op:operator><name pos:line="162" pos:column="49">Statement</name><op:operator pos:line="162" pos:column="58">)</op:operator> <name pos:line="162" pos:column="60">actual</name></expr></argument>, <argument><expr><name pos:line="162" pos:column="68">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="165" pos:column="9">private</specifier> <specifier pos:line="165" pos:column="17">static</specifier> <name pos:line="165" pos:column="24">void</name></type> <name pos:line="165" pos:column="29">TestEquality</name><parameter_list pos:line="165" pos:column="41">(<param><decl><type><name pos:line="165" pos:column="42">AliasStatement</name></type> <name pos:line="165" pos:column="57">expected</name></decl></param>, <param><decl><type><name pos:line="165" pos:column="67">AliasStatement</name></type> <name pos:line="165" pos:column="82">actual</name></decl></param>, <param><decl><type><name pos:line="165" pos:column="90">string</name></type> <name pos:line="165" pos:column="97">propertyName</name></decl></param>)</parameter_list> <block pos:line="165" pos:column="111">{
            <try pos:line="166" pos:column="13">try <block pos:line="166" pos:column="17">{
                <expr_stmt><expr><call><name pos:line="167" pos:column="17">IsTrue</name><argument_list pos:line="167" pos:column="23">(<argument><expr><name><name pos:line="167" pos:column="24">expected</name><op:operator pos:line="167" pos:column="32">.</op:operator><name pos:line="167" pos:column="33">AliasName</name></name> <op:operator pos:line="167" pos:column="43">==</op:operator> <name><name pos:line="167" pos:column="46">actual</name><op:operator pos:line="167" pos:column="52">.</op:operator><name pos:line="167" pos:column="53">AliasName</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="167" pos:column="64">"AliasName"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="168" pos:column="17">ExpressionsAreEqual</name><argument_list pos:line="168" pos:column="36">(<argument><expr><name><name pos:line="168" pos:column="37">expected</name><op:operator pos:line="168" pos:column="45">.</op:operator><name pos:line="168" pos:column="46">Target</name></name></expr></argument>, <argument><expr><name><name pos:line="168" pos:column="54">actual</name><op:operator pos:line="168" pos:column="60">.</op:operator><name pos:line="168" pos:column="61">Target</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="168" pos:column="69">"Target"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch pos:line="169" pos:column="15">catch<parameter_list pos:line="169" pos:column="20">(<param><decl><type><name pos:line="169" pos:column="21">DataAssertionException</name></type> <name pos:line="169" pos:column="44">e</name></decl></param>)</parameter_list> <block pos:line="169" pos:column="47">{
                <expr_stmt><expr><call><name><name pos:line="170" pos:column="17">e</name><op:operator pos:line="170" pos:column="18">.</op:operator><name pos:line="170" pos:column="19">Add</name></name><argument_list pos:line="170" pos:column="22">(<argument><expr><name pos:line="170" pos:column="23">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw pos:line="171" pos:column="17">throw <expr><name pos:line="171" pos:column="23">e</name></expr>;</throw>
            }</block></catch></try>
            <expr_stmt><expr><call><name pos:line="173" pos:column="13">TestEquality</name><argument_list pos:line="173" pos:column="25">(<argument><expr><op:operator pos:line="173" pos:column="26">(</op:operator><name pos:line="173" pos:column="27">Statement</name><op:operator pos:line="173" pos:column="36">)</op:operator> <name pos:line="173" pos:column="38">expected</name></expr></argument>, <argument><expr><op:operator pos:line="173" pos:column="48">(</op:operator><name pos:line="173" pos:column="49">Statement</name><op:operator pos:line="173" pos:column="58">)</op:operator> <name pos:line="173" pos:column="60">actual</name></expr></argument>, <argument><expr><name pos:line="173" pos:column="68">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="176" pos:column="9">private</specifier> <specifier pos:line="176" pos:column="17">static</specifier> <name pos:line="176" pos:column="24">void</name></type> <name pos:line="176" pos:column="29">TestEquality</name><parameter_list pos:line="176" pos:column="41">(<param><decl><type><name pos:line="176" pos:column="42">LabelStatement</name></type> <name pos:line="176" pos:column="57">expected</name></decl></param>, <param><decl><type><name pos:line="176" pos:column="67">LabelStatement</name></type> <name pos:line="176" pos:column="82">actual</name></decl></param>, <param><decl><type><name pos:line="176" pos:column="90">string</name></type> <name pos:line="176" pos:column="97">propertyName</name></decl></param>)</parameter_list> <block pos:line="176" pos:column="111">{
            <try pos:line="177" pos:column="13">try <block pos:line="177" pos:column="17">{
                <expr_stmt><expr><call><name pos:line="178" pos:column="17">IsTrue</name><argument_list pos:line="178" pos:column="23">(<argument><expr><name><name pos:line="178" pos:column="24">expected</name><op:operator pos:line="178" pos:column="32">.</op:operator><name pos:line="178" pos:column="33">Name</name></name> <op:operator pos:line="178" pos:column="38">==</op:operator> <name><name pos:line="178" pos:column="41">actual</name><op:operator pos:line="178" pos:column="47">.</op:operator><name pos:line="178" pos:column="48">Name</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="178" pos:column="54">"Name"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch pos:line="179" pos:column="15">catch<parameter_list pos:line="179" pos:column="20">(<param><decl><type><name pos:line="179" pos:column="21">DataAssertionException</name></type> <name pos:line="179" pos:column="44">e</name></decl></param>)</parameter_list> <block pos:line="179" pos:column="47">{
                <expr_stmt><expr><call><name><name pos:line="180" pos:column="17">e</name><op:operator pos:line="180" pos:column="18">.</op:operator><name pos:line="180" pos:column="19">Add</name></name><argument_list pos:line="180" pos:column="22">(<argument><expr><name pos:line="180" pos:column="23">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw pos:line="181" pos:column="17">throw <expr><name pos:line="181" pos:column="23">e</name></expr>;</throw>
            }</block></catch></try>
            <expr_stmt><expr><call><name pos:line="183" pos:column="13">TestEquality</name><argument_list pos:line="183" pos:column="25">(<argument><expr><op:operator pos:line="183" pos:column="26">(</op:operator><name pos:line="183" pos:column="27">Statement</name><op:operator pos:line="183" pos:column="36">)</op:operator> <name pos:line="183" pos:column="38">expected</name></expr></argument>, <argument><expr><op:operator pos:line="183" pos:column="48">(</op:operator><name pos:line="183" pos:column="49">Statement</name><op:operator pos:line="183" pos:column="58">)</op:operator> <name pos:line="183" pos:column="60">actual</name></expr></argument>, <argument><expr><name pos:line="183" pos:column="68">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="186" pos:column="9">private</specifier> <specifier pos:line="186" pos:column="17">static</specifier> <name pos:line="186" pos:column="24">void</name></type> <name pos:line="186" pos:column="29">TestEquality</name><parameter_list pos:line="186" pos:column="41">(<param><decl><type><name pos:line="186" pos:column="42">ExternStatement</name></type> <name pos:line="186" pos:column="58">expected</name></decl></param>, <param><decl><type><name pos:line="186" pos:column="68">ExternStatement</name></type> <name pos:line="186" pos:column="84">actual</name></decl></param>, <param><decl><type><name pos:line="186" pos:column="92">string</name></type> <name pos:line="186" pos:column="99">propertyName</name></decl></param>)</parameter_list> <block pos:line="186" pos:column="113">{
            <try pos:line="187" pos:column="13">try <block pos:line="187" pos:column="17">{
                <expr_stmt><expr><call><name pos:line="188" pos:column="17">IsTrue</name><argument_list pos:line="188" pos:column="23">(<argument><expr><name><name pos:line="188" pos:column="24">expected</name><op:operator pos:line="188" pos:column="32">.</op:operator><name pos:line="188" pos:column="33">LinkageType</name></name> <op:operator pos:line="188" pos:column="45">==</op:operator> <name><name pos:line="188" pos:column="48">actual</name><op:operator pos:line="188" pos:column="54">.</op:operator><name pos:line="188" pos:column="55">LinkageType</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="188" pos:column="68">"LinkageType"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch pos:line="189" pos:column="15">catch<parameter_list pos:line="189" pos:column="20">(<param><decl><type><name pos:line="189" pos:column="21">DataAssertionException</name></type> <name pos:line="189" pos:column="44">e</name></decl></param>)</parameter_list> <block pos:line="189" pos:column="47">{
                <expr_stmt><expr><call><name><name pos:line="190" pos:column="17">e</name><op:operator pos:line="190" pos:column="18">.</op:operator><name pos:line="190" pos:column="19">Add</name></name><argument_list pos:line="190" pos:column="22">(<argument><expr><name pos:line="190" pos:column="23">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw pos:line="191" pos:column="17">throw <expr><name pos:line="191" pos:column="23">e</name></expr>;</throw>
            }</block></catch></try>
            <expr_stmt><expr><call><name pos:line="193" pos:column="13">TestEquality</name><argument_list pos:line="193" pos:column="25">(<argument><expr><op:operator pos:line="193" pos:column="26">(</op:operator><name pos:line="193" pos:column="27">Statement</name><op:operator pos:line="193" pos:column="36">)</op:operator> <name pos:line="193" pos:column="38">expected</name></expr></argument>, <argument><expr><op:operator pos:line="193" pos:column="48">(</op:operator><name pos:line="193" pos:column="49">Statement</name><op:operator pos:line="193" pos:column="58">)</op:operator> <name pos:line="193" pos:column="60">actual</name></expr></argument>, <argument><expr><name pos:line="193" pos:column="68">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="196" pos:column="9">private</specifier> <specifier pos:line="196" pos:column="17">static</specifier> <name pos:line="196" pos:column="24">void</name></type> <name pos:line="196" pos:column="29">TestEquality</name><parameter_list pos:line="196" pos:column="41">(<param><decl><type><name pos:line="196" pos:column="42">BlockStatement</name></type> <name pos:line="196" pos:column="57">expected</name></decl></param>, <param><decl><type><name pos:line="196" pos:column="67">BlockStatement</name></type> <name pos:line="196" pos:column="82">actual</name></decl></param>, <param><decl><type><name pos:line="196" pos:column="90">string</name></type> <name pos:line="196" pos:column="97">propertyName</name></decl></param>)</parameter_list> <block pos:line="196" pos:column="111">{
            <expr_stmt><expr><call><name pos:line="197" pos:column="13">TestEquality</name><argument_list pos:line="197" pos:column="25">(<argument><expr><op:operator pos:line="197" pos:column="26">(</op:operator><name pos:line="197" pos:column="27">Statement</name><op:operator pos:line="197" pos:column="36">)</op:operator> <name pos:line="197" pos:column="38">expected</name></expr></argument>, <argument><expr><op:operator pos:line="197" pos:column="48">(</op:operator><name pos:line="197" pos:column="49">Statement</name><op:operator pos:line="197" pos:column="58">)</op:operator> <name pos:line="197" pos:column="60">actual</name></expr></argument>, <argument><expr><name pos:line="197" pos:column="68">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="200" pos:column="9">private</specifier> <specifier pos:line="200" pos:column="17">static</specifier> <name pos:line="200" pos:column="24">void</name></type> <name pos:line="200" pos:column="29">TestEquality</name><parameter_list pos:line="200" pos:column="41">(<param><decl><type><name pos:line="200" pos:column="42">UsingBlockStatement</name></type> <name pos:line="200" pos:column="62">expected</name></decl></param>, <param><decl><type><name pos:line="200" pos:column="72">UsingBlockStatement</name></type> <name pos:line="200" pos:column="92">actual</name></decl></param>, <param><decl><type><name pos:line="200" pos:column="100">string</name></type> <name pos:line="200" pos:column="107">propertyName</name></decl></param>)</parameter_list> <block pos:line="200" pos:column="121">{
            <try pos:line="201" pos:column="13">try <block pos:line="201" pos:column="17">{
                <expr_stmt><expr><call><name pos:line="202" pos:column="17">ExpressionsAreEqual</name><argument_list pos:line="202" pos:column="36">(<argument><expr><name><name pos:line="202" pos:column="37">expected</name><op:operator pos:line="202" pos:column="45">.</op:operator><name pos:line="202" pos:column="46">Initializer</name></name></expr></argument>, <argument><expr><name><name pos:line="202" pos:column="59">actual</name><op:operator pos:line="202" pos:column="65">.</op:operator><name pos:line="202" pos:column="66">Initializer</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="202" pos:column="79">"Initializer"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch pos:line="203" pos:column="15">catch<parameter_list pos:line="203" pos:column="20">(<param><decl><type><name pos:line="203" pos:column="21">DataAssertionException</name></type> <name pos:line="203" pos:column="44">e</name></decl></param>)</parameter_list> <block pos:line="203" pos:column="47">{
                <expr_stmt><expr><call><name><name pos:line="204" pos:column="17">e</name><op:operator pos:line="204" pos:column="18">.</op:operator><name pos:line="204" pos:column="19">Add</name></name><argument_list pos:line="204" pos:column="22">(<argument><expr><name pos:line="204" pos:column="23">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw pos:line="205" pos:column="17">throw <expr><name pos:line="205" pos:column="23">e</name></expr>;</throw>
            }</block></catch></try>
            <expr_stmt><expr><call><name pos:line="207" pos:column="13">TestEquality</name><argument_list pos:line="207" pos:column="25">(<argument><expr><op:operator pos:line="207" pos:column="26">(</op:operator><name pos:line="207" pos:column="27">BlockStatement</name><op:operator pos:line="207" pos:column="41">)</op:operator> <name pos:line="207" pos:column="43">expected</name></expr></argument>, <argument><expr><op:operator pos:line="207" pos:column="53">(</op:operator><name pos:line="207" pos:column="54">BlockStatement</name><op:operator pos:line="207" pos:column="68">)</op:operator> <name pos:line="207" pos:column="70">actual</name></expr></argument>, <argument><expr><name pos:line="207" pos:column="78">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="210" pos:column="9">private</specifier> <specifier pos:line="210" pos:column="17">static</specifier> <name pos:line="210" pos:column="24">void</name></type> <name pos:line="210" pos:column="29">TestEquality</name><parameter_list pos:line="210" pos:column="41">(<param><decl><type><name pos:line="210" pos:column="42">TryStatement</name></type> <name pos:line="210" pos:column="55">expected</name></decl></param>, <param><decl><type><name pos:line="210" pos:column="65">TryStatement</name></type> <name pos:line="210" pos:column="78">actual</name></decl></param>, <param><decl><type><name pos:line="210" pos:column="86">string</name></type> <name pos:line="210" pos:column="93">propertyName</name></decl></param>)</parameter_list> <block pos:line="210" pos:column="107">{
            <try pos:line="211" pos:column="13">try <block pos:line="211" pos:column="17">{
                <expr_stmt><expr><call><name><name pos:line="212" pos:column="17">OrderedCollectionsAreEqual</name><argument_list pos:line="212" pos:column="43">&lt;<argument><name pos:line="212" pos:column="44">CatchStatement</name></argument>&gt;</argument_list></name><argument_list pos:line="212" pos:column="59">(<argument><expr><name><name pos:line="212" pos:column="60">expected</name><op:operator pos:line="212" pos:column="68">.</op:operator><name pos:line="212" pos:column="69">CatchStatements</name></name></expr></argument>, <argument><expr><name><name pos:line="212" pos:column="86">actual</name><op:operator pos:line="212" pos:column="92">.</op:operator><name pos:line="212" pos:column="93">CatchStatements</name></name></expr></argument>, <argument><expr><name pos:line="212" pos:column="110">StatementsAreEqual</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="212" pos:column="130">"CatchStatements"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="213" pos:column="17">OrderedCollectionsAreEqual</name><argument_list pos:line="213" pos:column="43">&lt;<argument><name pos:line="213" pos:column="44">Statement</name></argument>&gt;</argument_list></name><argument_list pos:line="213" pos:column="54">(<argument><expr><name><name pos:line="213" pos:column="55">expected</name><op:operator pos:line="213" pos:column="63">.</op:operator><name pos:line="213" pos:column="64">FinallyStatements</name></name></expr></argument>, <argument><expr><name><name pos:line="213" pos:column="83">actual</name><op:operator pos:line="213" pos:column="89">.</op:operator><name pos:line="213" pos:column="90">FinallyStatements</name></name></expr></argument>, <argument><expr><name pos:line="213" pos:column="109">StatementsAreEqual</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="213" pos:column="129">"FinallyStatements"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch pos:line="214" pos:column="15">catch<parameter_list pos:line="214" pos:column="20">(<param><decl><type><name pos:line="214" pos:column="21">DataAssertionException</name></type> <name pos:line="214" pos:column="44">e</name></decl></param>)</parameter_list> <block pos:line="214" pos:column="47">{
                <expr_stmt><expr><call><name><name pos:line="215" pos:column="17">e</name><op:operator pos:line="215" pos:column="18">.</op:operator><name pos:line="215" pos:column="19">Add</name></name><argument_list pos:line="215" pos:column="22">(<argument><expr><name pos:line="215" pos:column="23">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw pos:line="216" pos:column="17">throw <expr><name pos:line="216" pos:column="23">e</name></expr>;</throw>
            }</block></catch></try>
            <expr_stmt><expr><call><name pos:line="218" pos:column="13">TestEquality</name><argument_list pos:line="218" pos:column="25">(<argument><expr><op:operator pos:line="218" pos:column="26">(</op:operator><name pos:line="218" pos:column="27">BlockStatement</name><op:operator pos:line="218" pos:column="41">)</op:operator> <name pos:line="218" pos:column="43">expected</name></expr></argument>, <argument><expr><op:operator pos:line="218" pos:column="53">(</op:operator><name pos:line="218" pos:column="54">BlockStatement</name><op:operator pos:line="218" pos:column="68">)</op:operator> <name pos:line="218" pos:column="70">actual</name></expr></argument>, <argument><expr><name pos:line="218" pos:column="78">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="221" pos:column="9">private</specifier> <specifier pos:line="221" pos:column="17">static</specifier> <name pos:line="221" pos:column="24">void</name></type> <name pos:line="221" pos:column="29">TestEquality</name><parameter_list pos:line="221" pos:column="41">(<param><decl><type><name pos:line="221" pos:column="42">CatchStatement</name></type> <name pos:line="221" pos:column="57">expected</name></decl></param>, <param><decl><type><name pos:line="221" pos:column="67">CatchStatement</name></type> <name pos:line="221" pos:column="82">actual</name></decl></param>, <param><decl><type><name pos:line="221" pos:column="90">string</name></type> <name pos:line="221" pos:column="97">propertyName</name></decl></param>)</parameter_list> <block pos:line="221" pos:column="111">{
            <try pos:line="222" pos:column="13">try <block pos:line="222" pos:column="17">{
                <expr_stmt><expr><call><name pos:line="223" pos:column="17">ExpressionsAreEqual</name><argument_list pos:line="223" pos:column="36">(<argument><expr><name><name pos:line="223" pos:column="37">expected</name><op:operator pos:line="223" pos:column="45">.</op:operator><name pos:line="223" pos:column="46">Parameter</name></name></expr></argument>, <argument><expr><name><name pos:line="223" pos:column="57">actual</name><op:operator pos:line="223" pos:column="63">.</op:operator><name pos:line="223" pos:column="64">Parameter</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="223" pos:column="75">"Parameter"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch pos:line="224" pos:column="15">catch<parameter_list pos:line="224" pos:column="20">(<param><decl><type><name pos:line="224" pos:column="21">DataAssertionException</name></type> <name pos:line="224" pos:column="44">e</name></decl></param>)</parameter_list> <block pos:line="224" pos:column="47">{
                <expr_stmt><expr><call><name><name pos:line="225" pos:column="17">e</name><op:operator pos:line="225" pos:column="18">.</op:operator><name pos:line="225" pos:column="19">Add</name></name><argument_list pos:line="225" pos:column="22">(<argument><expr><name pos:line="225" pos:column="23">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw pos:line="226" pos:column="17">throw <expr><name pos:line="226" pos:column="23">e</name></expr>;</throw>
            }</block></catch></try>
            <expr_stmt><expr><call><name pos:line="228" pos:column="13">TestEquality</name><argument_list pos:line="228" pos:column="25">(<argument><expr><op:operator pos:line="228" pos:column="26">(</op:operator><name pos:line="228" pos:column="27">BlockStatement</name><op:operator pos:line="228" pos:column="41">)</op:operator> <name pos:line="228" pos:column="43">expected</name></expr></argument>, <argument><expr><op:operator pos:line="228" pos:column="53">(</op:operator><name pos:line="228" pos:column="54">BlockStatement</name><op:operator pos:line="228" pos:column="68">)</op:operator> <name pos:line="228" pos:column="70">actual</name></expr></argument>, <argument><expr><name pos:line="228" pos:column="78">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="231" pos:column="9">private</specifier> <specifier pos:line="231" pos:column="17">static</specifier> <name pos:line="231" pos:column="24">void</name></type> <name pos:line="231" pos:column="29">TestEquality</name><parameter_list pos:line="231" pos:column="41">(<param><decl><type><name pos:line="231" pos:column="42">NamedScope</name></type> <name pos:line="231" pos:column="53">expected</name></decl></param>, <param><decl><type><name pos:line="231" pos:column="63">NamedScope</name></type> <name pos:line="231" pos:column="74">actual</name></decl></param>, <param><decl><type><name pos:line="231" pos:column="82">string</name></type> <name pos:line="231" pos:column="89">propertyName</name></decl></param>)</parameter_list> <block pos:line="231" pos:column="103">{
            <try pos:line="232" pos:column="13">try <block pos:line="232" pos:column="17">{
                <expr_stmt><expr><call><name pos:line="233" pos:column="17">IsTrue</name><argument_list pos:line="233" pos:column="23">(<argument><expr><name><name pos:line="233" pos:column="24">expected</name><op:operator pos:line="233" pos:column="32">.</op:operator><name pos:line="233" pos:column="33">Name</name></name> <op:operator pos:line="233" pos:column="38">==</op:operator> <name><name pos:line="233" pos:column="41">actual</name><op:operator pos:line="233" pos:column="47">.</op:operator><name pos:line="233" pos:column="48">Name</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="233" pos:column="54">"Name"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="234" pos:column="17">ExpressionsAreEqual</name><argument_list pos:line="234" pos:column="36">(<argument><expr><name><name pos:line="234" pos:column="37">expected</name><op:operator pos:line="234" pos:column="45">.</op:operator><name pos:line="234" pos:column="46">Prefix</name></name></expr></argument>, <argument><expr><name><name pos:line="234" pos:column="54">actual</name><op:operator pos:line="234" pos:column="60">.</op:operator><name pos:line="234" pos:column="61">Prefix</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="234" pos:column="69">"Prefix"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch pos:line="235" pos:column="15">catch<parameter_list pos:line="235" pos:column="20">(<param><decl><type><name pos:line="235" pos:column="21">DataAssertionException</name></type> <name pos:line="235" pos:column="44">e</name></decl></param>)</parameter_list> <block pos:line="235" pos:column="47">{
                <expr_stmt><expr><call><name><name pos:line="236" pos:column="17">e</name><op:operator pos:line="236" pos:column="18">.</op:operator><name pos:line="236" pos:column="19">Add</name></name><argument_list pos:line="236" pos:column="22">(<argument><expr><name pos:line="236" pos:column="23">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw pos:line="237" pos:column="17">throw <expr><name pos:line="237" pos:column="23">e</name></expr>;</throw>
            }</block></catch></try>
            <expr_stmt><expr><call><name pos:line="239" pos:column="13">TestEquality</name><argument_list pos:line="239" pos:column="25">(<argument><expr><op:operator pos:line="239" pos:column="26">(</op:operator><name pos:line="239" pos:column="27">BlockStatement</name><op:operator pos:line="239" pos:column="41">)</op:operator> <name pos:line="239" pos:column="43">expected</name></expr></argument>, <argument><expr><op:operator pos:line="239" pos:column="53">(</op:operator><name pos:line="239" pos:column="54">BlockStatement</name><op:operator pos:line="239" pos:column="68">)</op:operator> <name pos:line="239" pos:column="70">actual</name></expr></argument>, <argument><expr><name pos:line="239" pos:column="78">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="242" pos:column="9">private</specifier> <specifier pos:line="242" pos:column="17">static</specifier> <name pos:line="242" pos:column="24">void</name></type> <name pos:line="242" pos:column="29">TestEquality</name><parameter_list pos:line="242" pos:column="41">(<param><decl><type><name pos:line="242" pos:column="42">TypeDefinition</name></type> <name pos:line="242" pos:column="57">expected</name></decl></param>, <param><decl><type><name pos:line="242" pos:column="67">TypeDefinition</name></type> <name pos:line="242" pos:column="82">actual</name></decl></param>, <param><decl><type><name pos:line="242" pos:column="90">string</name></type> <name pos:line="242" pos:column="97">propertyName</name></decl></param>)</parameter_list> <block pos:line="242" pos:column="111">{
            <try pos:line="243" pos:column="13">try <block pos:line="243" pos:column="17">{
                <expr_stmt><expr><call><name pos:line="244" pos:column="17">IsTrue</name><argument_list pos:line="244" pos:column="23">(<argument><expr><name><name pos:line="244" pos:column="24">expected</name><op:operator pos:line="244" pos:column="32">.</op:operator><name pos:line="244" pos:column="33">IsPartial</name></name> <op:operator pos:line="244" pos:column="43">==</op:operator> <name><name pos:line="244" pos:column="46">actual</name><op:operator pos:line="244" pos:column="52">.</op:operator><name pos:line="244" pos:column="53">IsPartial</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="244" pos:column="64">"IsPartial"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="245" pos:column="17">IsTrue</name><argument_list pos:line="245" pos:column="23">(<argument><expr><name><name pos:line="245" pos:column="24">expected</name><op:operator pos:line="245" pos:column="32">.</op:operator><name pos:line="245" pos:column="33">Kind</name></name> <op:operator pos:line="245" pos:column="38">==</op:operator> <name><name pos:line="245" pos:column="41">actual</name><op:operator pos:line="245" pos:column="47">.</op:operator><name pos:line="245" pos:column="48">Kind</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="245" pos:column="54">"Kind"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="246" pos:column="17">UnorderedCollectionsAreEqual</name><argument_list pos:line="246" pos:column="45">&lt;<argument><name pos:line="246" pos:column="46">TypeUse</name></argument>&gt;</argument_list></name><argument_list pos:line="246" pos:column="54">(<argument><expr><name><name pos:line="246" pos:column="55">expected</name><op:operator pos:line="246" pos:column="63">.</op:operator><name pos:line="246" pos:column="64">ParentTypeNames</name></name></expr></argument>, <argument><expr><name><name pos:line="246" pos:column="81">actual</name><op:operator pos:line="246" pos:column="87">.</op:operator><name pos:line="246" pos:column="88">ParentTypeNames</name></name></expr></argument>, <argument><expr><name pos:line="246" pos:column="105">ExpressionsAreEqual</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="246" pos:column="126">"ParentTypes"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch pos:line="247" pos:column="15">catch<parameter_list pos:line="247" pos:column="20">(<param><decl><type><name pos:line="247" pos:column="21">DataAssertionException</name></type> <name pos:line="247" pos:column="44">e</name></decl></param>)</parameter_list> <block pos:line="247" pos:column="47">{
                <expr_stmt><expr><call><name><name pos:line="248" pos:column="17">e</name><op:operator pos:line="248" pos:column="18">.</op:operator><name pos:line="248" pos:column="19">Add</name></name><argument_list pos:line="248" pos:column="22">(<argument><expr><name pos:line="248" pos:column="23">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw pos:line="249" pos:column="17">throw <expr><name pos:line="249" pos:column="23">e</name></expr>;</throw>
            }</block></catch></try>
            <expr_stmt><expr><call><name pos:line="251" pos:column="13">TestEquality</name><argument_list pos:line="251" pos:column="25">(<argument><expr><op:operator pos:line="251" pos:column="26">(</op:operator><name pos:line="251" pos:column="27">NamedScope</name><op:operator pos:line="251" pos:column="37">)</op:operator> <name pos:line="251" pos:column="39">expected</name></expr></argument>, <argument><expr><op:operator pos:line="251" pos:column="49">(</op:operator><name pos:line="251" pos:column="50">NamedScope</name><op:operator pos:line="251" pos:column="60">)</op:operator> <name pos:line="251" pos:column="62">actual</name></expr></argument>, <argument><expr><name pos:line="251" pos:column="70">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="254" pos:column="9">private</specifier> <specifier pos:line="254" pos:column="17">static</specifier> <name pos:line="254" pos:column="24">void</name></type> <name pos:line="254" pos:column="29">TestEquality</name><parameter_list pos:line="254" pos:column="41">(<param><decl><type><name pos:line="254" pos:column="42">MethodDefinition</name></type> <name pos:line="254" pos:column="59">expected</name></decl></param>, <param><decl><type><name pos:line="254" pos:column="69">MethodDefinition</name></type> <name pos:line="254" pos:column="86">actual</name></decl></param>, <param><decl><type><name pos:line="254" pos:column="94">string</name></type> <name pos:line="254" pos:column="101">propertyName</name></decl></param>)</parameter_list> <block pos:line="254" pos:column="115">{
            <try pos:line="255" pos:column="13">try <block pos:line="255" pos:column="17">{
                <expr_stmt><expr><call><name pos:line="256" pos:column="17">IsTrue</name><argument_list pos:line="256" pos:column="23">(<argument><expr><name><name pos:line="256" pos:column="24">expected</name><op:operator pos:line="256" pos:column="32">.</op:operator><name pos:line="256" pos:column="33">IsConstructor</name></name> <op:operator pos:line="256" pos:column="47">==</op:operator> <name><name pos:line="256" pos:column="50">actual</name><op:operator pos:line="256" pos:column="56">.</op:operator><name pos:line="256" pos:column="57">IsConstructor</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="256" pos:column="72">"IsConstructor"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="257" pos:column="17">IsTrue</name><argument_list pos:line="257" pos:column="23">(<argument><expr><name><name pos:line="257" pos:column="24">expected</name><op:operator pos:line="257" pos:column="32">.</op:operator><name pos:line="257" pos:column="33">IsDestructor</name></name> <op:operator pos:line="257" pos:column="46">==</op:operator> <name><name pos:line="257" pos:column="49">actual</name><op:operator pos:line="257" pos:column="55">.</op:operator><name pos:line="257" pos:column="56">IsDestructor</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="257" pos:column="70">"IsDestructor"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="258" pos:column="17">IsTrue</name><argument_list pos:line="258" pos:column="23">(<argument><expr><name><name pos:line="258" pos:column="24">expected</name><op:operator pos:line="258" pos:column="32">.</op:operator><name pos:line="258" pos:column="33">IsPartial</name></name> <op:operator pos:line="258" pos:column="43">==</op:operator> <name><name pos:line="258" pos:column="46">actual</name><op:operator pos:line="258" pos:column="52">.</op:operator><name pos:line="258" pos:column="53">IsPartial</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="258" pos:column="64">"IsPartial"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="259" pos:column="17">ExpressionsAreEqual</name><argument_list pos:line="259" pos:column="36">(<argument><expr><name><name pos:line="259" pos:column="37">expected</name><op:operator pos:line="259" pos:column="45">.</op:operator><name pos:line="259" pos:column="46">ReturnType</name></name></expr></argument>, <argument><expr><name><name pos:line="259" pos:column="58">actual</name><op:operator pos:line="259" pos:column="64">.</op:operator><name pos:line="259" pos:column="65">ReturnType</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="259" pos:column="77">"ReturnType"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="260" pos:column="17">OrderedCollectionsAreEqual</name><argument_list pos:line="260" pos:column="43">&lt;<argument><name pos:line="260" pos:column="44">VariableDeclaration</name></argument>&gt;</argument_list></name><argument_list pos:line="260" pos:column="64">(<argument><expr><name><name pos:line="260" pos:column="65">expected</name><op:operator pos:line="260" pos:column="73">.</op:operator><name pos:line="260" pos:column="74">Parameters</name></name></expr></argument>, <argument><expr><name><name pos:line="260" pos:column="86">actual</name><op:operator pos:line="260" pos:column="92">.</op:operator><name pos:line="260" pos:column="93">Parameters</name></name></expr></argument>, <argument><expr><name pos:line="260" pos:column="105">ExpressionsAreEqual</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="260" pos:column="126">"Parameters"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="261" pos:column="17">OrderedCollectionsAreEqual</name><argument_list pos:line="261" pos:column="43">&lt;<argument><name pos:line="261" pos:column="44">MethodCall</name></argument>&gt;</argument_list></name><argument_list pos:line="261" pos:column="55">(<argument><expr><name><name pos:line="261" pos:column="56">expected</name><op:operator pos:line="261" pos:column="64">.</op:operator><name pos:line="261" pos:column="65">ConstructorInitializers</name></name></expr></argument>, <argument><expr><name><name pos:line="261" pos:column="90">actual</name><op:operator pos:line="261" pos:column="96">.</op:operator><name pos:line="261" pos:column="97">ConstructorInitializers</name></name></expr></argument>, <argument><expr><name pos:line="261" pos:column="122">ExpressionsAreEqual</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="261" pos:column="143">"ConstructorInitializers"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch pos:line="262" pos:column="15">catch<parameter_list pos:line="262" pos:column="20">(<param><decl><type><name pos:line="262" pos:column="21">DataAssertionException</name></type> <name pos:line="262" pos:column="44">e</name></decl></param>)</parameter_list> <block pos:line="262" pos:column="47">{
                <expr_stmt><expr><call><name><name pos:line="263" pos:column="17">e</name><op:operator pos:line="263" pos:column="18">.</op:operator><name pos:line="263" pos:column="19">Add</name></name><argument_list pos:line="263" pos:column="22">(<argument><expr><name pos:line="263" pos:column="23">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw pos:line="264" pos:column="17">throw <expr><name pos:line="264" pos:column="23">e</name></expr>;</throw>
            }</block></catch></try>
            <expr_stmt><expr><call><name pos:line="266" pos:column="13">TestEquality</name><argument_list pos:line="266" pos:column="25">(<argument><expr><op:operator pos:line="266" pos:column="26">(</op:operator><name pos:line="266" pos:column="27">NamedScope</name><op:operator pos:line="266" pos:column="37">)</op:operator> <name pos:line="266" pos:column="39">expected</name></expr></argument>, <argument><expr><op:operator pos:line="266" pos:column="49">(</op:operator><name pos:line="266" pos:column="50">NamedScope</name><op:operator pos:line="266" pos:column="60">)</op:operator> <name pos:line="266" pos:column="62">actual</name></expr></argument>, <argument><expr><name pos:line="266" pos:column="70">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="269" pos:column="9">private</specifier> <specifier pos:line="269" pos:column="17">static</specifier> <name pos:line="269" pos:column="24">void</name></type> <name pos:line="269" pos:column="29">TestEquality</name><parameter_list pos:line="269" pos:column="41">(<param><decl><type><name pos:line="269" pos:column="42">PropertyDefinition</name></type> <name pos:line="269" pos:column="61">expected</name></decl></param>, <param><decl><type><name pos:line="269" pos:column="71">PropertyDefinition</name></type> <name pos:line="269" pos:column="90">actual</name></decl></param>, <param><decl><type><name pos:line="269" pos:column="98">string</name></type> <name pos:line="269" pos:column="105">propertyName</name></decl></param>)</parameter_list> <block pos:line="269" pos:column="119">{
            <try pos:line="270" pos:column="13">try <block pos:line="270" pos:column="17">{
                <expr_stmt><expr><call><name pos:line="271" pos:column="17">ExpressionsAreEqual</name><argument_list pos:line="271" pos:column="36">(<argument><expr><name><name pos:line="271" pos:column="37">expected</name><op:operator pos:line="271" pos:column="45">.</op:operator><name pos:line="271" pos:column="46">ReturnType</name></name></expr></argument>, <argument><expr><name><name pos:line="271" pos:column="58">actual</name><op:operator pos:line="271" pos:column="64">.</op:operator><name pos:line="271" pos:column="65">ReturnType</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="271" pos:column="77">"ReturnType"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="272" pos:column="17">StatementsAreEqual</name><argument_list pos:line="272" pos:column="35">(<argument><expr><name><name pos:line="272" pos:column="36">expected</name><op:operator pos:line="272" pos:column="44">.</op:operator><name pos:line="272" pos:column="45">Getter</name></name></expr></argument>, <argument><expr><name><name pos:line="272" pos:column="53">actual</name><op:operator pos:line="272" pos:column="59">.</op:operator><name pos:line="272" pos:column="60">Getter</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="272" pos:column="68">"Getter"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="273" pos:column="17">StatementsAreEqual</name><argument_list pos:line="273" pos:column="35">(<argument><expr><name><name pos:line="273" pos:column="36">expected</name><op:operator pos:line="273" pos:column="44">.</op:operator><name pos:line="273" pos:column="45">Setter</name></name></expr></argument>, <argument><expr><name><name pos:line="273" pos:column="53">actual</name><op:operator pos:line="273" pos:column="59">.</op:operator><name pos:line="273" pos:column="60">Setter</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="273" pos:column="68">"Setter"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch pos:line="274" pos:column="15">catch<parameter_list pos:line="274" pos:column="20">(<param><decl><type><name pos:line="274" pos:column="21">DataAssertionException</name></type> <name pos:line="274" pos:column="44">e</name></decl></param>)</parameter_list> <block pos:line="274" pos:column="47">{
                <expr_stmt><expr><call><name><name pos:line="275" pos:column="17">e</name><op:operator pos:line="275" pos:column="18">.</op:operator><name pos:line="275" pos:column="19">Add</name></name><argument_list pos:line="275" pos:column="22">(<argument><expr><name pos:line="275" pos:column="23">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw pos:line="276" pos:column="17">throw <expr><name pos:line="276" pos:column="23">e</name></expr>;</throw>
            }</block></catch></try>
            <expr_stmt><expr><call><name pos:line="278" pos:column="13">TestEquality</name><argument_list pos:line="278" pos:column="25">(<argument><expr><op:operator pos:line="278" pos:column="26">(</op:operator><name pos:line="278" pos:column="27">NamedScope</name><op:operator pos:line="278" pos:column="37">)</op:operator> <name pos:line="278" pos:column="39">expected</name></expr></argument>, <argument><expr><op:operator pos:line="278" pos:column="49">(</op:operator><name pos:line="278" pos:column="50">NamedScope</name><op:operator pos:line="278" pos:column="60">)</op:operator> <name pos:line="278" pos:column="62">actual</name></expr></argument>, <argument><expr><name pos:line="278" pos:column="70">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="281" pos:column="9">private</specifier> <specifier pos:line="281" pos:column="17">static</specifier> <name pos:line="281" pos:column="24">void</name></type> <name pos:line="281" pos:column="29">TestEquality</name><parameter_list pos:line="281" pos:column="41">(<param><decl><type><name pos:line="281" pos:column="42">ConditionBlockStatement</name></type> <name pos:line="281" pos:column="66">expected</name></decl></param>, <param><decl><type><name pos:line="281" pos:column="76">ConditionBlockStatement</name></type> <name pos:line="281" pos:column="100">actual</name></decl></param>, <param><decl><type><name pos:line="281" pos:column="108">string</name></type> <name pos:line="281" pos:column="115">propertyName</name></decl></param>)</parameter_list> <block pos:line="281" pos:column="129">{
            <try pos:line="282" pos:column="13">try <block pos:line="282" pos:column="17">{
                <expr_stmt><expr><call><name pos:line="283" pos:column="17">ExpressionsAreEqual</name><argument_list pos:line="283" pos:column="36">(<argument><expr><name><name pos:line="283" pos:column="37">expected</name><op:operator pos:line="283" pos:column="45">.</op:operator><name pos:line="283" pos:column="46">Condition</name></name></expr></argument>, <argument><expr><name><name pos:line="283" pos:column="57">actual</name><op:operator pos:line="283" pos:column="63">.</op:operator><name pos:line="283" pos:column="64">Condition</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="283" pos:column="75">"Condition"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch pos:line="284" pos:column="15">catch<parameter_list pos:line="284" pos:column="20">(<param><decl><type><name pos:line="284" pos:column="21">DataAssertionException</name></type> <name pos:line="284" pos:column="44">e</name></decl></param>)</parameter_list> <block pos:line="284" pos:column="47">{
                <expr_stmt><expr><call><name><name pos:line="285" pos:column="17">e</name><op:operator pos:line="285" pos:column="18">.</op:operator><name pos:line="285" pos:column="19">Add</name></name><argument_list pos:line="285" pos:column="22">(<argument><expr><name pos:line="285" pos:column="23">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw pos:line="286" pos:column="17">throw <expr><name pos:line="286" pos:column="23">e</name></expr>;</throw>
            }</block></catch></try>
            <expr_stmt><expr><call><name pos:line="288" pos:column="13">TestEquality</name><argument_list pos:line="288" pos:column="25">(<argument><expr><op:operator pos:line="288" pos:column="26">(</op:operator><name pos:line="288" pos:column="27">BlockStatement</name><op:operator pos:line="288" pos:column="41">)</op:operator> <name pos:line="288" pos:column="43">expected</name></expr></argument>, <argument><expr><op:operator pos:line="288" pos:column="53">(</op:operator><name pos:line="288" pos:column="54">BlockStatement</name><op:operator pos:line="288" pos:column="68">)</op:operator> <name pos:line="288" pos:column="70">actual</name></expr></argument>, <argument><expr><name pos:line="288" pos:column="78">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="291" pos:column="9">private</specifier> <specifier pos:line="291" pos:column="17">static</specifier> <name pos:line="291" pos:column="24">void</name></type> <name pos:line="291" pos:column="29">TestEquality</name><parameter_list pos:line="291" pos:column="41">(<param><decl><type><name pos:line="291" pos:column="42">IfStatement</name></type> <name pos:line="291" pos:column="54">expected</name></decl></param>, <param><decl><type><name pos:line="291" pos:column="64">IfStatement</name></type> <name pos:line="291" pos:column="76">actual</name></decl></param>, <param><decl><type><name pos:line="291" pos:column="84">string</name></type> <name pos:line="291" pos:column="91">propertyName</name></decl></param>)</parameter_list> <block pos:line="291" pos:column="105">{
            <try pos:line="292" pos:column="13">try <block pos:line="292" pos:column="17">{
                <expr_stmt><expr><call><name><name pos:line="293" pos:column="17">OrderedCollectionsAreEqual</name><argument_list pos:line="293" pos:column="43">&lt;<argument><name pos:line="293" pos:column="44">Statement</name></argument>&gt;</argument_list></name><argument_list pos:line="293" pos:column="54">(<argument><expr><name><name pos:line="293" pos:column="55">expected</name><op:operator pos:line="293" pos:column="63">.</op:operator><name pos:line="293" pos:column="64">ElseStatements</name></name></expr></argument>, <argument><expr><name><name pos:line="293" pos:column="80">actual</name><op:operator pos:line="293" pos:column="86">.</op:operator><name pos:line="293" pos:column="87">ElseStatements</name></name></expr></argument>, <argument><expr><name pos:line="293" pos:column="103">StatementsAreEqual</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="293" pos:column="123">"ElseStatements"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch pos:line="294" pos:column="15">catch<parameter_list pos:line="294" pos:column="20">(<param><decl><type><name pos:line="294" pos:column="21">DataAssertionException</name></type> <name pos:line="294" pos:column="44">e</name></decl></param>)</parameter_list> <block pos:line="294" pos:column="47">{
                <expr_stmt><expr><call><name><name pos:line="295" pos:column="17">e</name><op:operator pos:line="295" pos:column="18">.</op:operator><name pos:line="295" pos:column="19">Add</name></name><argument_list pos:line="295" pos:column="22">(<argument><expr><name pos:line="295" pos:column="23">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw pos:line="296" pos:column="17">throw <expr><name pos:line="296" pos:column="23">e</name></expr>;</throw>
            }</block></catch></try>
            <expr_stmt><expr><call><name pos:line="298" pos:column="13">TestEquality</name><argument_list pos:line="298" pos:column="25">(<argument><expr><op:operator pos:line="298" pos:column="26">(</op:operator><name pos:line="298" pos:column="27">ConditionBlockStatement</name><op:operator pos:line="298" pos:column="50">)</op:operator> <name pos:line="298" pos:column="52">expected</name></expr></argument>, <argument><expr><op:operator pos:line="298" pos:column="62">(</op:operator><name pos:line="298" pos:column="63">ConditionBlockStatement</name><op:operator pos:line="298" pos:column="86">)</op:operator> <name pos:line="298" pos:column="88">actual</name></expr></argument>, <argument><expr><name pos:line="298" pos:column="96">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="301" pos:column="9">private</specifier> <specifier pos:line="301" pos:column="17">static</specifier> <name pos:line="301" pos:column="24">void</name></type> <name pos:line="301" pos:column="29">TestEquality</name><parameter_list pos:line="301" pos:column="41">(<param><decl><type><name pos:line="301" pos:column="42">CaseStatement</name></type> <name pos:line="301" pos:column="56">expected</name></decl></param>, <param><decl><type><name pos:line="301" pos:column="66">CaseStatement</name></type> <name pos:line="301" pos:column="80">actual</name></decl></param>, <param><decl><type><name pos:line="301" pos:column="88">string</name></type> <name pos:line="301" pos:column="95">propertyName</name></decl></param>)</parameter_list> <block pos:line="301" pos:column="109">{
            <try pos:line="302" pos:column="13">try <block pos:line="302" pos:column="17">{
                <expr_stmt><expr><call><name pos:line="303" pos:column="17">IsTrue</name><argument_list pos:line="303" pos:column="23">(<argument><expr><name><name pos:line="303" pos:column="24">expected</name><op:operator pos:line="303" pos:column="32">.</op:operator><name pos:line="303" pos:column="33">IsDefault</name></name> <op:operator pos:line="303" pos:column="43">==</op:operator> <name><name pos:line="303" pos:column="46">actual</name><op:operator pos:line="303" pos:column="52">.</op:operator><name pos:line="303" pos:column="53">IsDefault</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="303" pos:column="64">"IsDefault"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch pos:line="304" pos:column="15">catch<parameter_list pos:line="304" pos:column="20">(<param><decl><type><name pos:line="304" pos:column="21">DataAssertionException</name></type> <name pos:line="304" pos:column="44">e</name></decl></param>)</parameter_list> <block pos:line="304" pos:column="47">{
                <expr_stmt><expr><call><name><name pos:line="305" pos:column="17">e</name><op:operator pos:line="305" pos:column="18">.</op:operator><name pos:line="305" pos:column="19">Add</name></name><argument_list pos:line="305" pos:column="22">(<argument><expr><name pos:line="305" pos:column="23">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw pos:line="306" pos:column="17">throw <expr><name pos:line="306" pos:column="23">e</name></expr>;</throw>
            }</block></catch></try>
            <expr_stmt><expr><call><name pos:line="308" pos:column="13">TestEquality</name><argument_list pos:line="308" pos:column="25">(<argument><expr><op:operator pos:line="308" pos:column="26">(</op:operator><name pos:line="308" pos:column="27">ConditionBlockStatement</name><op:operator pos:line="308" pos:column="50">)</op:operator> <name pos:line="308" pos:column="52">expected</name></expr></argument>, <argument><expr><op:operator pos:line="308" pos:column="62">(</op:operator><name pos:line="308" pos:column="63">ConditionBlockStatement</name><op:operator pos:line="308" pos:column="86">)</op:operator> <name pos:line="308" pos:column="88">actual</name></expr></argument>, <argument><expr><name pos:line="308" pos:column="96">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="311" pos:column="9">private</specifier> <specifier pos:line="311" pos:column="17">static</specifier> <name pos:line="311" pos:column="24">void</name></type> <name pos:line="311" pos:column="29">TestEquality</name><parameter_list pos:line="311" pos:column="41">(<param><decl><type><name pos:line="311" pos:column="42">ForStatement</name></type> <name pos:line="311" pos:column="55">expected</name></decl></param>, <param><decl><type><name pos:line="311" pos:column="65">ForStatement</name></type> <name pos:line="311" pos:column="78">actual</name></decl></param>, <param><decl><type><name pos:line="311" pos:column="86">string</name></type> <name pos:line="311" pos:column="93">propertyName</name></decl></param>)</parameter_list> <block pos:line="311" pos:column="107">{
            <try pos:line="312" pos:column="13">try <block pos:line="312" pos:column="17">{
                <expr_stmt><expr><call><name pos:line="313" pos:column="17">ExpressionsAreEqual</name><argument_list pos:line="313" pos:column="36">(<argument><expr><name><name pos:line="313" pos:column="37">expected</name><op:operator pos:line="313" pos:column="45">.</op:operator><name pos:line="313" pos:column="46">Initializer</name></name></expr></argument>, <argument><expr><name><name pos:line="313" pos:column="59">actual</name><op:operator pos:line="313" pos:column="65">.</op:operator><name pos:line="313" pos:column="66">Initializer</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="313" pos:column="79">"Initializer"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="314" pos:column="17">ExpressionsAreEqual</name><argument_list pos:line="314" pos:column="36">(<argument><expr><name><name pos:line="314" pos:column="37">expected</name><op:operator pos:line="314" pos:column="45">.</op:operator><name pos:line="314" pos:column="46">Incrementer</name></name></expr></argument>, <argument><expr><name><name pos:line="314" pos:column="59">actual</name><op:operator pos:line="314" pos:column="65">.</op:operator><name pos:line="314" pos:column="66">Incrementer</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="314" pos:column="79">"Incrementer"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch pos:line="315" pos:column="15">catch<parameter_list pos:line="315" pos:column="20">(<param><decl><type><name pos:line="315" pos:column="21">DataAssertionException</name></type> <name pos:line="315" pos:column="44">e</name></decl></param>)</parameter_list> <block pos:line="315" pos:column="47">{
                <expr_stmt><expr><call><name><name pos:line="316" pos:column="17">e</name><op:operator pos:line="316" pos:column="18">.</op:operator><name pos:line="316" pos:column="19">Add</name></name><argument_list pos:line="316" pos:column="22">(<argument><expr><name pos:line="316" pos:column="23">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw pos:line="317" pos:column="17">throw <expr><name pos:line="317" pos:column="23">e</name></expr>;</throw>
            }</block></catch></try>
            <expr_stmt><expr><call><name pos:line="319" pos:column="13">TestEquality</name><argument_list pos:line="319" pos:column="25">(<argument><expr><op:operator pos:line="319" pos:column="26">(</op:operator><name pos:line="319" pos:column="27">ConditionBlockStatement</name><op:operator pos:line="319" pos:column="50">)</op:operator> <name pos:line="319" pos:column="52">expected</name></expr></argument>, <argument><expr><op:operator pos:line="319" pos:column="62">(</op:operator><name pos:line="319" pos:column="63">ConditionBlockStatement</name><op:operator pos:line="319" pos:column="86">)</op:operator> <name pos:line="319" pos:column="88">actual</name></expr></argument>, <argument><expr><name pos:line="319" pos:column="96">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <cpp:endregion pos:line="321" pos:column="9">#<cpp:directive pos:line="321" pos:column="10">endregion</cpp:directive> Statement equality methods</cpp:endregion>
        <cpp:region pos:line="322" pos:column="9">#<cpp:directive pos:line="322" pos:column="10">region</cpp:directive> Expression equality methods</cpp:region>

        <function><type><specifier pos:line="324" pos:column="9">private</specifier> <specifier pos:line="324" pos:column="17">static</specifier> <name pos:line="324" pos:column="24">void</name></type> <name pos:line="324" pos:column="29">ExpressionsAreEqual</name><parameter_list pos:line="324" pos:column="48">(<param><decl><type><name pos:line="324" pos:column="49">Expression</name></type> <name pos:line="324" pos:column="60">expected</name></decl></param>, <param><decl><type><name pos:line="324" pos:column="70">Expression</name></type> <name pos:line="324" pos:column="81">actual</name></decl></param>, <param><decl><type><name pos:line="324" pos:column="89">string</name></type> <name pos:line="324" pos:column="96">propertyName</name></decl></param>)</parameter_list> <block pos:line="324" pos:column="110">{
            <if pos:line="325" pos:column="13">if<condition pos:line="325" pos:column="15">(<expr><name pos:line="325" pos:column="16">expected</name> <op:operator pos:line="325" pos:column="25">!=</op:operator> <name pos:line="325" pos:column="28">actual</name></expr>)</condition><then pos:line="325" pos:column="35"> <block pos:line="325" pos:column="36">{
                <try pos:line="326" pos:column="17">try <block pos:line="326" pos:column="21">{
                    <expr_stmt><expr><call><name pos:line="327" pos:column="21">IsTrue</name><argument_list pos:line="327" pos:column="27">(<argument><expr><name pos:line="327" pos:column="28">expected</name> <op:operator pos:line="327" pos:column="37">!=</op:operator> <name pos:line="327" pos:column="40">null</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="327" pos:column="46">"a!null"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="328" pos:column="21">IsTrue</name><argument_list pos:line="328" pos:column="27">(<argument><expr><name pos:line="328" pos:column="28">actual</name> <op:operator pos:line="328" pos:column="35">!=</op:operator> <name pos:line="328" pos:column="38">null</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="328" pos:column="44">"b!null"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="329" pos:column="21">IsTrue</name><argument_list pos:line="329" pos:column="27">(<argument><expr><call><name><name pos:line="329" pos:column="28">expected</name><op:operator pos:line="329" pos:column="36">.</op:operator><name pos:line="329" pos:column="37">GetType</name></name><argument_list pos:line="329" pos:column="44">()</argument_list></call> <op:operator pos:line="329" pos:column="47">==</op:operator> <call><name><name pos:line="329" pos:column="50">actual</name><op:operator pos:line="329" pos:column="56">.</op:operator><name pos:line="329" pos:column="57">GetType</name></name><argument_list pos:line="329" pos:column="64">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="329" pos:column="68">"TYPE"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch pos:line="330" pos:column="19">catch<parameter_list pos:line="330" pos:column="24">(<param><decl><type><name pos:line="330" pos:column="25">DataAssertionException</name></type> <name pos:line="330" pos:column="48">e</name></decl></param>)</parameter_list> <block pos:line="330" pos:column="51">{
                    <expr_stmt><expr><call><name><name pos:line="331" pos:column="21">e</name><op:operator pos:line="331" pos:column="22">.</op:operator><name pos:line="331" pos:column="23">Add</name></name><argument_list pos:line="331" pos:column="26">(<argument><expr><name pos:line="331" pos:column="27">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <throw pos:line="332" pos:column="21">throw <expr><name pos:line="332" pos:column="27">e</name></expr>;</throw>
                }</block></catch></try>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="337" pos:column="9">private</specifier> <specifier pos:line="337" pos:column="17">static</specifier> <name pos:line="337" pos:column="24">void</name></type> <name pos:line="337" pos:column="29">TestEquality</name><parameter_list pos:line="337" pos:column="41">(<param><decl><type><name pos:line="337" pos:column="42">Expression</name></type> <name pos:line="337" pos:column="53">expected</name></decl></param>, <param><decl><type><name pos:line="337" pos:column="63">Expression</name></type> <name pos:line="337" pos:column="74">actual</name></decl></param>, <param><decl><type><name pos:line="337" pos:column="82">string</name></type> <name pos:line="337" pos:column="89">propertyName</name></decl></param>)</parameter_list> <block pos:line="337" pos:column="103">{
            <try pos:line="338" pos:column="13">try <block pos:line="338" pos:column="17">{
                <expr_stmt><expr><call><name pos:line="339" pos:column="17">IsTrue</name><argument_list pos:line="339" pos:column="23">(<argument><expr><name><name pos:line="339" pos:column="24">expected</name><op:operator pos:line="339" pos:column="32">.</op:operator><name pos:line="339" pos:column="33">ProgrammingLanguage</name></name> <op:operator pos:line="339" pos:column="53">==</op:operator> <name><name pos:line="339" pos:column="56">actual</name><op:operator pos:line="339" pos:column="62">.</op:operator><name pos:line="339" pos:column="63">ProgrammingLanguage</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="339" pos:column="84">"ProgrammingLanguage"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="340" pos:column="17">LocationsAreEqual</name><argument_list pos:line="340" pos:column="34">(<argument><expr><name><name pos:line="340" pos:column="35">expected</name><op:operator pos:line="340" pos:column="43">.</op:operator><name pos:line="340" pos:column="44">Location</name></name></expr></argument>, <argument><expr><name><name pos:line="340" pos:column="54">actual</name><op:operator pos:line="340" pos:column="60">.</op:operator><name pos:line="340" pos:column="61">Location</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="340" pos:column="71">"Location"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="341" pos:column="17">OrderedCollectionsAreEqual</name><argument_list pos:line="341" pos:column="43">&lt;<argument><name pos:line="341" pos:column="44">Expression</name></argument>&gt;</argument_list></name><argument_list pos:line="341" pos:column="55">(<argument><expr><name><name pos:line="341" pos:column="56">expected</name><op:operator pos:line="341" pos:column="64">.</op:operator><name pos:line="341" pos:column="65">Components</name></name></expr></argument>, <argument><expr><name><name pos:line="341" pos:column="77">actual</name><op:operator pos:line="341" pos:column="83">.</op:operator><name pos:line="341" pos:column="84">Components</name></name></expr></argument>, <argument><expr><name pos:line="341" pos:column="96">ExpressionsAreEqual</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="341" pos:column="117">"Components"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch pos:line="342" pos:column="15">catch<parameter_list pos:line="342" pos:column="20">(<param><decl><type><name pos:line="342" pos:column="21">DataAssertionException</name></type> <name pos:line="342" pos:column="44">e</name></decl></param>)</parameter_list> <block pos:line="342" pos:column="47">{
                <expr_stmt><expr><call><name><name pos:line="343" pos:column="17">e</name><op:operator pos:line="343" pos:column="18">.</op:operator><name pos:line="343" pos:column="19">Add</name></name><argument_list pos:line="343" pos:column="22">(<argument><expr><name pos:line="343" pos:column="23">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw pos:line="344" pos:column="17">throw <expr><name pos:line="344" pos:column="23">e</name></expr>;</throw>
            }</block></catch></try>
        }</block></function>

        <function><type><specifier pos:line="348" pos:column="9">private</specifier> <specifier pos:line="348" pos:column="17">static</specifier> <name pos:line="348" pos:column="24">void</name></type> <name pos:line="348" pos:column="29">TestEquality</name><parameter_list pos:line="348" pos:column="41">(<param><decl><type><name pos:line="348" pos:column="42">OperatorUse</name></type> <name pos:line="348" pos:column="54">expected</name></decl></param>, <param><decl><type><name pos:line="348" pos:column="64">OperatorUse</name></type> <name pos:line="348" pos:column="76">actual</name></decl></param>, <param><decl><type><name pos:line="348" pos:column="84">string</name></type> <name pos:line="348" pos:column="91">propertyName</name></decl></param>)</parameter_list> <block pos:line="348" pos:column="105">{
            <try pos:line="349" pos:column="13">try <block pos:line="349" pos:column="17">{
                <expr_stmt><expr><call><name pos:line="350" pos:column="17">IsTrue</name><argument_list pos:line="350" pos:column="23">(<argument><expr><name><name pos:line="350" pos:column="24">expected</name><op:operator pos:line="350" pos:column="32">.</op:operator><name pos:line="350" pos:column="33">Text</name></name> <op:operator pos:line="350" pos:column="38">==</op:operator> <name><name pos:line="350" pos:column="41">actual</name><op:operator pos:line="350" pos:column="47">.</op:operator><name pos:line="350" pos:column="48">Text</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="350" pos:column="54">"Text"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="351" pos:column="17">ExpressionsAreEqual</name><argument_list pos:line="351" pos:column="36">(<argument><expr><op:operator pos:line="351" pos:column="37">(</op:operator><name pos:line="351" pos:column="38">Expression</name><op:operator pos:line="351" pos:column="48">)</op:operator> <name pos:line="351" pos:column="50">expected</name></expr></argument>, <argument><expr><op:operator pos:line="351" pos:column="60">(</op:operator><name pos:line="351" pos:column="61">Expression</name><op:operator pos:line="351" pos:column="71">)</op:operator> <name pos:line="351" pos:column="73">actual</name></expr></argument>, <argument><expr><name pos:line="351" pos:column="81">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch pos:line="352" pos:column="15">catch<parameter_list pos:line="352" pos:column="20">(<param><decl><type><name pos:line="352" pos:column="21">DataAssertionException</name></type> <name pos:line="352" pos:column="44">e</name></decl></param>)</parameter_list> <block pos:line="352" pos:column="47">{
                <expr_stmt><expr><call><name><name pos:line="353" pos:column="17">e</name><op:operator pos:line="353" pos:column="18">.</op:operator><name pos:line="353" pos:column="19">Add</name></name><argument_list pos:line="353" pos:column="22">(<argument><expr><name pos:line="353" pos:column="23">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw pos:line="354" pos:column="17">throw <expr><name pos:line="354" pos:column="23">e</name></expr>;</throw>
            }</block></catch></try>
        }</block></function>

        <function><type><specifier pos:line="358" pos:column="9">private</specifier> <specifier pos:line="358" pos:column="17">static</specifier> <name pos:line="358" pos:column="24">void</name></type> <name pos:line="358" pos:column="29">TestEquality</name><parameter_list pos:line="358" pos:column="41">(<param><decl><type><name pos:line="358" pos:column="42">VariableDeclaration</name></type> <name pos:line="358" pos:column="62">expected</name></decl></param>, <param><decl><type><name pos:line="358" pos:column="72">VariableDeclaration</name></type> <name pos:line="358" pos:column="92">actual</name></decl></param>, <param><decl><type><name pos:line="358" pos:column="100">string</name></type> <name pos:line="358" pos:column="107">propertyName</name></decl></param>)</parameter_list> <block pos:line="358" pos:column="121">{
            <try pos:line="359" pos:column="13">try <block pos:line="359" pos:column="17">{
                <expr_stmt><expr><call><name pos:line="360" pos:column="17">IsTrue</name><argument_list pos:line="360" pos:column="23">(<argument><expr><name><name pos:line="360" pos:column="24">expected</name><op:operator pos:line="360" pos:column="32">.</op:operator><name pos:line="360" pos:column="33">Name</name></name> <op:operator pos:line="360" pos:column="38">==</op:operator> <name><name pos:line="360" pos:column="41">actual</name><op:operator pos:line="360" pos:column="47">.</op:operator><name pos:line="360" pos:column="48">Name</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="360" pos:column="54">"Name"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="361" pos:column="17">ExpressionsAreEqual</name><argument_list pos:line="361" pos:column="36">(<argument><expr><name><name pos:line="361" pos:column="37">expected</name><op:operator pos:line="361" pos:column="45">.</op:operator><name pos:line="361" pos:column="46">Initializer</name></name></expr></argument>, <argument><expr><name><name pos:line="361" pos:column="59">actual</name><op:operator pos:line="361" pos:column="65">.</op:operator><name pos:line="361" pos:column="66">Initializer</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="361" pos:column="79">"Initializer"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="362" pos:column="17">ExpressionsAreEqual</name><argument_list pos:line="362" pos:column="36">(<argument><expr><name><name pos:line="362" pos:column="37">expected</name><op:operator pos:line="362" pos:column="45">.</op:operator><name pos:line="362" pos:column="46">Range</name></name></expr></argument>, <argument><expr><name><name pos:line="362" pos:column="53">actual</name><op:operator pos:line="362" pos:column="59">.</op:operator><name pos:line="362" pos:column="60">Range</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="362" pos:column="67">"Range"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="363" pos:column="17">ExpressionsAreEqual</name><argument_list pos:line="363" pos:column="36">(<argument><expr><name><name pos:line="363" pos:column="37">expected</name><op:operator pos:line="363" pos:column="45">.</op:operator><name pos:line="363" pos:column="46">VariableType</name></name></expr></argument>, <argument><expr><name><name pos:line="363" pos:column="60">actual</name><op:operator pos:line="363" pos:column="66">.</op:operator><name pos:line="363" pos:column="67">VariableType</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="363" pos:column="81">"VariableType"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch pos:line="364" pos:column="15">catch<parameter_list pos:line="364" pos:column="20">(<param><decl><type><name pos:line="364" pos:column="21">DataAssertionException</name></type> <name pos:line="364" pos:column="44">e</name></decl></param>)</parameter_list> <block pos:line="364" pos:column="47">{
                <expr_stmt><expr><call><name><name pos:line="365" pos:column="17">e</name><op:operator pos:line="365" pos:column="18">.</op:operator><name pos:line="365" pos:column="19">Add</name></name><argument_list pos:line="365" pos:column="22">(<argument><expr><name pos:line="365" pos:column="23">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw pos:line="366" pos:column="17">throw <expr><name pos:line="366" pos:column="23">e</name></expr>;</throw>
            }</block></catch></try>
            <expr_stmt><expr><call><name pos:line="368" pos:column="13">TestEquality</name><argument_list pos:line="368" pos:column="25">(<argument><expr><op:operator pos:line="368" pos:column="26">(</op:operator><name pos:line="368" pos:column="27">Expression</name><op:operator pos:line="368" pos:column="37">)</op:operator> <name pos:line="368" pos:column="39">expected</name></expr></argument>, <argument><expr><op:operator pos:line="368" pos:column="49">(</op:operator><name pos:line="368" pos:column="50">Expression</name><op:operator pos:line="368" pos:column="60">)</op:operator> <name pos:line="368" pos:column="62">actual</name></expr></argument>, <argument><expr><name pos:line="368" pos:column="70">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="371" pos:column="9">private</specifier> <specifier pos:line="371" pos:column="17">static</specifier> <name pos:line="371" pos:column="24">void</name></type> <name pos:line="371" pos:column="29">TestEquality</name><parameter_list pos:line="371" pos:column="41">(<param><decl><type><name pos:line="371" pos:column="42">LiteralUse</name></type> <name pos:line="371" pos:column="53">expected</name></decl></param>, <param><decl><type><name pos:line="371" pos:column="63">LiteralUse</name></type> <name pos:line="371" pos:column="74">actual</name></decl></param>, <param><decl><type><name pos:line="371" pos:column="82">string</name></type> <name pos:line="371" pos:column="89">propertyName</name></decl></param>)</parameter_list> <block pos:line="371" pos:column="103">{
            <try pos:line="372" pos:column="13">try <block pos:line="372" pos:column="17">{
                <expr_stmt><expr><call><name pos:line="373" pos:column="17">IsTrue</name><argument_list pos:line="373" pos:column="23">(<argument><expr><name><name pos:line="373" pos:column="24">expected</name><op:operator pos:line="373" pos:column="32">.</op:operator><name pos:line="373" pos:column="33">Kind</name></name> <op:operator pos:line="373" pos:column="38">==</op:operator> <name><name pos:line="373" pos:column="41">actual</name><op:operator pos:line="373" pos:column="47">.</op:operator><name pos:line="373" pos:column="48">Kind</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="373" pos:column="54">"Kind"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="374" pos:column="17">IsTrue</name><argument_list pos:line="374" pos:column="23">(<argument><expr><name><name pos:line="374" pos:column="24">expected</name><op:operator pos:line="374" pos:column="32">.</op:operator><name pos:line="374" pos:column="33">Text</name></name> <op:operator pos:line="374" pos:column="38">==</op:operator> <name><name pos:line="374" pos:column="41">actual</name><op:operator pos:line="374" pos:column="47">.</op:operator><name pos:line="374" pos:column="48">Text</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="374" pos:column="54">"Value"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch pos:line="375" pos:column="15">catch<parameter_list pos:line="375" pos:column="20">(<param><decl><type><name pos:line="375" pos:column="21">DataAssertionException</name></type> <name pos:line="375" pos:column="44">e</name></decl></param>)</parameter_list> <block pos:line="375" pos:column="47">{
                <expr_stmt><expr><call><name><name pos:line="376" pos:column="17">e</name><op:operator pos:line="376" pos:column="18">.</op:operator><name pos:line="376" pos:column="19">Add</name></name><argument_list pos:line="376" pos:column="22">(<argument><expr><name pos:line="376" pos:column="23">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw pos:line="377" pos:column="17">throw <expr><name pos:line="377" pos:column="23">e</name></expr>;</throw>
            }</block></catch></try>
            <expr_stmt><expr><call><name pos:line="379" pos:column="13">TestEquality</name><argument_list pos:line="379" pos:column="25">(<argument><expr><op:operator pos:line="379" pos:column="26">(</op:operator><name pos:line="379" pos:column="27">Expression</name><op:operator pos:line="379" pos:column="37">)</op:operator> <name pos:line="379" pos:column="39">expected</name></expr></argument>, <argument><expr><op:operator pos:line="379" pos:column="49">(</op:operator><name pos:line="379" pos:column="50">Expression</name><op:operator pos:line="379" pos:column="60">)</op:operator> <name pos:line="379" pos:column="62">actual</name></expr></argument>, <argument><expr><name pos:line="379" pos:column="70">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="382" pos:column="9">private</specifier> <specifier pos:line="382" pos:column="17">static</specifier> <name pos:line="382" pos:column="24">void</name></type> <name pos:line="382" pos:column="29">TestEquality</name><parameter_list pos:line="382" pos:column="41">(<param><decl><type><name pos:line="382" pos:column="42">NameUse</name></type> <name pos:line="382" pos:column="50">expected</name></decl></param>, <param><decl><type><name pos:line="382" pos:column="60">NameUse</name></type> <name pos:line="382" pos:column="68">actual</name></decl></param>, <param><decl><type><name pos:line="382" pos:column="76">string</name></type> <name pos:line="382" pos:column="83">propertyName</name></decl></param>)</parameter_list> <block pos:line="382" pos:column="97">{
            <try pos:line="383" pos:column="13">try <block pos:line="383" pos:column="17">{
                <expr_stmt><expr><call><name pos:line="384" pos:column="17">IsTrue</name><argument_list pos:line="384" pos:column="23">(<argument><expr><name><name pos:line="384" pos:column="24">expected</name><op:operator pos:line="384" pos:column="32">.</op:operator><name pos:line="384" pos:column="33">Name</name></name> <op:operator pos:line="384" pos:column="38">==</op:operator> <name><name pos:line="384" pos:column="41">actual</name><op:operator pos:line="384" pos:column="47">.</op:operator><name pos:line="384" pos:column="48">Name</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="384" pos:column="54">"Name"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="385" pos:column="17">ExpressionsAreEqual</name><argument_list pos:line="385" pos:column="36">(<argument><expr><name><name pos:line="385" pos:column="37">expected</name><op:operator pos:line="385" pos:column="45">.</op:operator><name pos:line="385" pos:column="46">Prefix</name></name></expr></argument>, <argument><expr><name><name pos:line="385" pos:column="54">actual</name><op:operator pos:line="385" pos:column="60">.</op:operator><name pos:line="385" pos:column="61">Prefix</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="385" pos:column="69">"Prefix"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch pos:line="386" pos:column="15">catch<parameter_list pos:line="386" pos:column="20">(<param><decl><type><name pos:line="386" pos:column="21">DataAssertionException</name></type> <name pos:line="386" pos:column="44">e</name></decl></param>)</parameter_list> <block pos:line="386" pos:column="47">{
                <expr_stmt><expr><call><name><name pos:line="387" pos:column="17">e</name><op:operator pos:line="387" pos:column="18">.</op:operator><name pos:line="387" pos:column="19">Add</name></name><argument_list pos:line="387" pos:column="22">(<argument><expr><name pos:line="387" pos:column="23">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw pos:line="388" pos:column="17">throw <expr><name pos:line="388" pos:column="23">e</name></expr>;</throw>
            }</block></catch></try>
            <expr_stmt><expr><call><name pos:line="390" pos:column="13">TestEquality</name><argument_list pos:line="390" pos:column="25">(<argument><expr><op:operator pos:line="390" pos:column="26">(</op:operator><name pos:line="390" pos:column="27">Expression</name><op:operator pos:line="390" pos:column="37">)</op:operator> <name pos:line="390" pos:column="39">expected</name></expr></argument>, <argument><expr><op:operator pos:line="390" pos:column="49">(</op:operator><name pos:line="390" pos:column="50">Expression</name><op:operator pos:line="390" pos:column="60">)</op:operator> <name pos:line="390" pos:column="62">actual</name></expr></argument>, <argument><expr><name pos:line="390" pos:column="70">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="393" pos:column="9">private</specifier> <specifier pos:line="393" pos:column="17">static</specifier> <name pos:line="393" pos:column="24">void</name></type> <name pos:line="393" pos:column="29">TestEquality</name><parameter_list pos:line="393" pos:column="41">(<param><decl><type><name pos:line="393" pos:column="42">TypeUse</name></type> <name pos:line="393" pos:column="50">expected</name></decl></param>, <param><decl><type><name pos:line="393" pos:column="60">TypeUse</name></type> <name pos:line="393" pos:column="68">actual</name></decl></param>, <param><decl><type><name pos:line="393" pos:column="76">string</name></type> <name pos:line="393" pos:column="83">propertyName</name></decl></param>)</parameter_list> <block pos:line="393" pos:column="97">{
            <try pos:line="394" pos:column="13">try <block pos:line="394" pos:column="17">{
                <expr_stmt><expr><call><name><name pos:line="395" pos:column="17">OrderedCollectionsAreEqual</name><argument_list pos:line="395" pos:column="43">&lt;<argument><name pos:line="395" pos:column="44">TypeUse</name></argument>&gt;</argument_list></name><argument_list pos:line="395" pos:column="52">(<argument><expr><name><name pos:line="395" pos:column="53">expected</name><op:operator pos:line="395" pos:column="61">.</op:operator><name pos:line="395" pos:column="62">TypeParameters</name></name></expr></argument>, <argument><expr><name><name pos:line="395" pos:column="78">actual</name><op:operator pos:line="395" pos:column="84">.</op:operator><name pos:line="395" pos:column="85">TypeParameters</name></name></expr></argument>, <argument><expr><name pos:line="395" pos:column="101">ExpressionsAreEqual</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="395" pos:column="122">"TypeParameters"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            }</block> <catch pos:line="397" pos:column="15">catch<parameter_list pos:line="397" pos:column="20">(<param><decl><type><name pos:line="397" pos:column="21">DataAssertionException</name></type> <name pos:line="397" pos:column="44">e</name></decl></param>)</parameter_list> <block pos:line="397" pos:column="47">{
                <expr_stmt><expr><call><name><name pos:line="398" pos:column="17">e</name><op:operator pos:line="398" pos:column="18">.</op:operator><name pos:line="398" pos:column="19">Add</name></name><argument_list pos:line="398" pos:column="22">(<argument><expr><name pos:line="398" pos:column="23">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw pos:line="399" pos:column="17">throw <expr><name pos:line="399" pos:column="23">e</name></expr>;</throw>
            }</block></catch></try>
            <expr_stmt><expr><call><name pos:line="401" pos:column="13">TestEquality</name><argument_list pos:line="401" pos:column="25">(<argument><expr><op:operator pos:line="401" pos:column="26">(</op:operator><name pos:line="401" pos:column="27">NameUse</name><op:operator pos:line="401" pos:column="34">)</op:operator> <name pos:line="401" pos:column="36">expected</name></expr></argument>, <argument><expr><op:operator pos:line="401" pos:column="46">(</op:operator><name pos:line="401" pos:column="47">NameUse</name><op:operator pos:line="401" pos:column="54">)</op:operator> <name pos:line="401" pos:column="56">actual</name></expr></argument>, <argument><expr><name pos:line="401" pos:column="64">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="404" pos:column="9">private</specifier> <specifier pos:line="404" pos:column="17">static</specifier> <name pos:line="404" pos:column="24">void</name></type> <name pos:line="404" pos:column="29">TestEquality</name><parameter_list pos:line="404" pos:column="41">(<param><decl><type><name pos:line="404" pos:column="42">MethodCall</name></type> <name pos:line="404" pos:column="53">expected</name></decl></param>, <param><decl><type><name pos:line="404" pos:column="63">MethodCall</name></type> <name pos:line="404" pos:column="74">actual</name></decl></param>, <param><decl><type><name pos:line="404" pos:column="82">string</name></type> <name pos:line="404" pos:column="89">propertyName</name></decl></param>)</parameter_list> <block pos:line="404" pos:column="103">{
            <try pos:line="405" pos:column="13">try <block pos:line="405" pos:column="17">{
                <expr_stmt><expr><call><name pos:line="406" pos:column="17">IsTrue</name><argument_list pos:line="406" pos:column="23">(<argument><expr><name><name pos:line="406" pos:column="24">expected</name><op:operator pos:line="406" pos:column="32">.</op:operator><name pos:line="406" pos:column="33">IsConstructor</name></name> <op:operator pos:line="406" pos:column="47">==</op:operator> <name><name pos:line="406" pos:column="50">actual</name><op:operator pos:line="406" pos:column="56">.</op:operator><name pos:line="406" pos:column="57">IsConstructor</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="406" pos:column="72">"IsConstructor"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="407" pos:column="17">IsTrue</name><argument_list pos:line="407" pos:column="23">(<argument><expr><name><name pos:line="407" pos:column="24">expected</name><op:operator pos:line="407" pos:column="32">.</op:operator><name pos:line="407" pos:column="33">IsDestructor</name></name> <op:operator pos:line="407" pos:column="46">==</op:operator> <name><name pos:line="407" pos:column="49">actual</name><op:operator pos:line="407" pos:column="55">.</op:operator><name pos:line="407" pos:column="56">IsDestructor</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="407" pos:column="70">"IsDestructor"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="408" pos:column="17">IsTrue</name><argument_list pos:line="408" pos:column="23">(<argument><expr><name><name pos:line="408" pos:column="24">expected</name><op:operator pos:line="408" pos:column="32">.</op:operator><name pos:line="408" pos:column="33">IsConstructorInitializer</name></name> <op:operator pos:line="408" pos:column="58">==</op:operator> <name><name pos:line="408" pos:column="61">actual</name><op:operator pos:line="408" pos:column="67">.</op:operator><name pos:line="408" pos:column="68">IsConstructorInitializer</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="408" pos:column="94">"IsConstructorInitializer"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="409" pos:column="17">OrderedCollectionsAreEqual</name><argument_list pos:line="409" pos:column="43">&lt;<argument><name pos:line="409" pos:column="44">Expression</name></argument>&gt;</argument_list></name><argument_list pos:line="409" pos:column="55">(<argument><expr><name><name pos:line="409" pos:column="56">expected</name><op:operator pos:line="409" pos:column="64">.</op:operator><name pos:line="409" pos:column="65">Arguments</name></name></expr></argument>, <argument><expr><name><name pos:line="409" pos:column="76">actual</name><op:operator pos:line="409" pos:column="82">.</op:operator><name pos:line="409" pos:column="83">Arguments</name></name></expr></argument>, <argument><expr><name pos:line="409" pos:column="94">ExpressionsAreEqual</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="409" pos:column="115">"Arguments"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="410" pos:column="17">OrderedCollectionsAreEqual</name><argument_list pos:line="410" pos:column="43">&lt;<argument><name pos:line="410" pos:column="44">TypeUse</name></argument>&gt;</argument_list></name><argument_list pos:line="410" pos:column="52">(<argument><expr><name><name pos:line="410" pos:column="53">expected</name><op:operator pos:line="410" pos:column="61">.</op:operator><name pos:line="410" pos:column="62">TypeArguments</name></name></expr></argument>, <argument><expr><name><name pos:line="410" pos:column="77">actual</name><op:operator pos:line="410" pos:column="83">.</op:operator><name pos:line="410" pos:column="84">TypeArguments</name></name></expr></argument>, <argument><expr><name pos:line="410" pos:column="99">ExpressionsAreEqual</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="410" pos:column="120">"TypeArguments"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch pos:line="411" pos:column="15">catch<parameter_list pos:line="411" pos:column="20">(<param><decl><type><name pos:line="411" pos:column="21">DataAssertionException</name></type> <name pos:line="411" pos:column="44">e</name></decl></param>)</parameter_list> <block pos:line="411" pos:column="47">{
                <expr_stmt><expr><call><name><name pos:line="412" pos:column="17">e</name><op:operator pos:line="412" pos:column="18">.</op:operator><name pos:line="412" pos:column="19">Add</name></name><argument_list pos:line="412" pos:column="22">(<argument><expr><name pos:line="412" pos:column="23">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw pos:line="413" pos:column="17">throw <expr><name pos:line="413" pos:column="23">e</name></expr>;</throw>
            }</block></catch></try>
            <expr_stmt><expr><call><name pos:line="415" pos:column="13">TestEquality</name><argument_list pos:line="415" pos:column="25">(<argument><expr><op:operator pos:line="415" pos:column="26">(</op:operator><name pos:line="415" pos:column="27">NameUse</name><op:operator pos:line="415" pos:column="34">)</op:operator> <name pos:line="415" pos:column="36">expected</name></expr></argument>, <argument><expr><op:operator pos:line="415" pos:column="46">(</op:operator><name pos:line="415" pos:column="47">NameUse</name><op:operator pos:line="415" pos:column="54">)</op:operator> <name pos:line="415" pos:column="56">actual</name></expr></argument>, <argument><expr><name pos:line="415" pos:column="64">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="418" pos:column="9">private</specifier> <specifier pos:line="418" pos:column="17">static</specifier> <name pos:line="418" pos:column="24">void</name></type> <name pos:line="418" pos:column="29">TestEquality</name><parameter_list pos:line="418" pos:column="41">(<param><decl><type><name pos:line="418" pos:column="42">VariableUse</name></type> <name pos:line="418" pos:column="54">expected</name></decl></param>, <param><decl><type><name pos:line="418" pos:column="64">VariableUse</name></type> <name pos:line="418" pos:column="76">actual</name></decl></param>, <param><decl><type><name pos:line="418" pos:column="84">string</name></type> <name pos:line="418" pos:column="91">propertyName</name></decl></param>)</parameter_list> <block pos:line="418" pos:column="105">{
            <try pos:line="419" pos:column="13">try <block pos:line="419" pos:column="17">{
                <expr_stmt><expr><call><name pos:line="420" pos:column="17">ExpressionsAreEqual</name><argument_list pos:line="420" pos:column="36">(<argument><expr><name><name pos:line="420" pos:column="37">expected</name><op:operator pos:line="420" pos:column="45">.</op:operator><name pos:line="420" pos:column="46">Index</name></name></expr></argument>, <argument><expr><name><name pos:line="420" pos:column="53">actual</name><op:operator pos:line="420" pos:column="59">.</op:operator><name pos:line="420" pos:column="60">Index</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="420" pos:column="67">"Index"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch pos:line="421" pos:column="15">catch<parameter_list pos:line="421" pos:column="20">(<param><decl><type><name pos:line="421" pos:column="21">DataAssertionException</name></type> <name pos:line="421" pos:column="44">e</name></decl></param>)</parameter_list> <block pos:line="421" pos:column="47">{
                <expr_stmt><expr><call><name><name pos:line="422" pos:column="17">e</name><op:operator pos:line="422" pos:column="18">.</op:operator><name pos:line="422" pos:column="19">Add</name></name><argument_list pos:line="422" pos:column="22">(<argument><expr><name pos:line="422" pos:column="23">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw pos:line="423" pos:column="17">throw <expr><name pos:line="423" pos:column="23">e</name></expr>;</throw>
            }</block></catch></try>
            <expr_stmt><expr><call><name pos:line="425" pos:column="13">TestEquality</name><argument_list pos:line="425" pos:column="25">(<argument><expr><op:operator pos:line="425" pos:column="26">(</op:operator><name pos:line="425" pos:column="27">NameUse</name><op:operator pos:line="425" pos:column="34">)</op:operator> <name pos:line="425" pos:column="36">expected</name></expr></argument>, <argument><expr><op:operator pos:line="425" pos:column="46">(</op:operator><name pos:line="425" pos:column="47">NameUse</name><op:operator pos:line="425" pos:column="54">)</op:operator> <name pos:line="425" pos:column="56">actual</name></expr></argument>, <argument><expr><name pos:line="425" pos:column="64">propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <cpp:endregion pos:line="427" pos:column="9">#<cpp:directive pos:line="427" pos:column="10">endregion</cpp:directive> Expression equality methods</cpp:endregion>
    }</block></class>

    <class><specifier pos:line="430" pos:column="5">public</specifier> class <name pos:line="430" pos:column="18">DataAssertionException</name> <super pos:line="430" pos:column="41">: <name pos:line="430" pos:column="43">AssertionException</name></super> <block pos:line="430" pos:column="62">{
        <decl_stmt><decl><type><specifier pos:line="431" pos:column="9">private</specifier> <name pos:line="431" pos:column="17">string</name></type> <name pos:line="431" pos:column="24">messagePrefix</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="432" pos:column="9">public</specifier> <name><name pos:line="432" pos:column="16">Stack</name><argument_list pos:line="432" pos:column="21">&lt;<argument><name pos:line="432" pos:column="22">string</name></argument>&gt;</argument_list></name></type> <name pos:line="432" pos:column="30">ErrorStack</name> <block pos:line="432" pos:column="41">{ <function_decl><name pos:line="432" pos:column="43">get</name>;</function_decl> <function_decl><name pos:line="432" pos:column="48">set</name>;</function_decl> }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="434" pos:column="9">public</specifier> <specifier pos:line="434" pos:column="16">override</specifier> <name pos:line="434" pos:column="25">string</name></type> <name pos:line="434" pos:column="32">Message</name> <block pos:line="434" pos:column="40">{
            <function><name pos:line="435" pos:column="13">get</name> <block pos:line="435" pos:column="17">{
                <return pos:line="436" pos:column="17">return <expr><call><name pos:line="436" pos:column="24">FormatMessage</name><argument_list pos:line="436" pos:column="37">()</argument_list></call></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>
        <constructor><specifier pos:line="439" pos:column="9">public</specifier> <name pos:line="439" pos:column="16">DataAssertionException</name><parameter_list pos:line="439" pos:column="38">()</parameter_list>
            <member_list pos:line="440" pos:column="13">: <call><name pos:line="440" pos:column="15">base</name><argument_list pos:line="440" pos:column="19">(<argument><expr><lit:literal type="string" pos:line="440" pos:column="20">"Data Assertion Failed"</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="440" pos:column="45">{
            <expr_stmt><expr><name pos:line="441" pos:column="13">messagePrefix</name> <op:operator pos:line="441" pos:column="27">=</op:operator> <name><name pos:line="441" pos:column="29">base</name><op:operator pos:line="441" pos:column="33">.</op:operator><name pos:line="441" pos:column="34">Message</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="442" pos:column="13">ErrorStack</name> <op:operator pos:line="442" pos:column="24">=</op:operator> <op:operator pos:line="442" pos:column="26">new</op:operator> <call><name><name pos:line="442" pos:column="30">Stack</name><argument_list pos:line="442" pos:column="35">&lt;<argument><name pos:line="442" pos:column="36">string</name></argument>&gt;</argument_list></name><argument_list pos:line="442" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier pos:line="445" pos:column="9">public</specifier> <name pos:line="445" pos:column="16">void</name></type> <name pos:line="445" pos:column="21">Add</name><parameter_list pos:line="445" pos:column="24">(<param><decl><type><name pos:line="445" pos:column="25">string</name></type> <name pos:line="445" pos:column="32">text</name></decl></param>)</parameter_list> <block pos:line="445" pos:column="38">{
            <if pos:line="446" pos:column="13">if<condition pos:line="446" pos:column="15">(<expr><op:operator pos:line="446" pos:column="16">!</op:operator><call><name><name pos:line="446" pos:column="17">String</name><op:operator pos:line="446" pos:column="23">.</op:operator><name pos:line="446" pos:column="24">IsNullOrEmpty</name></name><argument_list pos:line="446" pos:column="37">(<argument><expr><name pos:line="446" pos:column="38">text</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="446" pos:column="44"> <block pos:line="446" pos:column="45">{
                <expr_stmt><expr><call><name><name pos:line="447" pos:column="17">ErrorStack</name><op:operator pos:line="447" pos:column="27">.</op:operator><name pos:line="447" pos:column="28">Push</name></name><argument_list pos:line="447" pos:column="32">(<argument><expr><name pos:line="447" pos:column="33">text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="451" pos:column="9">private</specifier> <name pos:line="451" pos:column="17">string</name></type> <name pos:line="451" pos:column="24">FormatMessage</name><parameter_list pos:line="451" pos:column="37">()</parameter_list> <block pos:line="451" pos:column="40">{
            <return pos:line="452" pos:column="13">return <expr><call><name><name pos:line="452" pos:column="20">String</name><op:operator pos:line="452" pos:column="26">.</op:operator><name pos:line="452" pos:column="27">Format</name></name><argument_list pos:line="452" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="452" pos:column="34">"{0}: {1}"</lit:literal></expr></argument>, <argument><expr><name pos:line="452" pos:column="46">messagePrefix</name></expr></argument>, <argument><expr><call><name><name pos:line="452" pos:column="61">String</name><op:operator pos:line="452" pos:column="67">.</op:operator><name pos:line="452" pos:column="68">Join</name></name><argument_list pos:line="452" pos:column="72">(<argument><expr><lit:literal type="string" pos:line="452" pos:column="73">" / "</lit:literal></expr></argument>, <argument><expr><name pos:line="452" pos:column="80">ErrorStack</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
