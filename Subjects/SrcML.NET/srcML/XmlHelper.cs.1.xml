<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML\XmlHelper.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2010 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">System</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Collections</name><op:operator pos:line="13" pos:column="25">.</op:operator><name pos:line="13" pos:column="26">Generic</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Linq</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Text</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Xml</name><op:operator pos:line="16" pos:column="17">.</op:operator><name pos:line="16" pos:column="18">Linq</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Xml</name></name>;</using>

<namespace pos:line="19" pos:column="1">namespace <name><name pos:line="19" pos:column="11">ABB</name><op:operator pos:line="19" pos:column="14">.</op:operator><name pos:line="19" pos:column="15">SrcML</name></name>
<block pos:line="20" pos:column="1">{
    <comment type="line" pos:line="21" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="22" pos:column="5">/// Collection of static functions for working with XML.</comment>
    <comment type="line" pos:line="23" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="24" pos:column="5">internal</specifier> <specifier pos:line="24" pos:column="14">static</specifier> class <name pos:line="24" pos:column="27">XmlHelper</name>
    <block pos:line="25" pos:column="5">{
        <comment type="line" pos:line="26" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="27" pos:column="9">/// Stream elements that have the given name.</comment>
        <comment type="line" pos:line="28" pos:column="9">/// This uses the technique defined http://msdn.microsoft.com/en-us/library/bb387008(v=vs.90).aspx</comment>
        <comment type="line" pos:line="29" pos:column="9">/// with modifications from here: http://social.msdn.microsoft.com/Forums/en/xmlandnetfx/thread/da366348-f209-433f-bb3b-8b5615409fe0</comment>
        <comment type="line" pos:line="30" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="31" pos:column="9">/// &lt;param name="fileName"&gt;the filename to stream elements from&lt;/param&gt;</comment>
        <comment type="line" pos:line="32" pos:column="9">/// &lt;param name="name"&gt;The XName to find in the XML document&lt;/param&gt;</comment>
        <comment type="line" pos:line="33" pos:column="9">/// &lt;param name="minimumDepth"&gt;The minimum depth to find elements at in the DOM tree&lt;/param&gt;</comment>
        <comment type="line" pos:line="34" pos:column="9">/// &lt;returns&gt;elements from this XML document with name &lt;paramref name="name"/&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="35" pos:column="9">public</specifier> <specifier pos:line="35" pos:column="16">static</specifier> <name><name pos:line="35" pos:column="23">IEnumerable</name><argument_list pos:line="35" pos:column="34">&lt;<argument><name pos:line="35" pos:column="35">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="35" pos:column="45">StreamElements</name><parameter_list pos:line="35" pos:column="59">(<param><decl><type><name pos:line="35" pos:column="60">string</name></type> <name pos:line="35" pos:column="67">fileName</name></decl></param>, <param><decl><type><name pos:line="35" pos:column="77">XName</name></type> <name pos:line="35" pos:column="83">name</name></decl></param>, <param><decl><type><name pos:line="35" pos:column="89">int</name></type> <name pos:line="35" pos:column="93">minimumDepth</name> <init pos:line="35" pos:column="106">= <expr><lit:literal type="number" pos:line="35" pos:column="108">1</lit:literal></expr></init></decl></param>)</parameter_list>
        <block pos:line="36" pos:column="9">{
            <using pos:line="37" pos:column="13">using (<decl><type><name pos:line="37" pos:column="20">XmlReader</name></type> <name pos:line="37" pos:column="30">reader</name> <init pos:line="37" pos:column="37">= <expr><call><name><name pos:line="37" pos:column="39">XmlReader</name><op:operator pos:line="37" pos:column="48">.</op:operator><name pos:line="37" pos:column="49">Create</name></name><argument_list pos:line="37" pos:column="55">(<argument><expr><name pos:line="37" pos:column="56">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>)
            <block pos:line="38" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="39" pos:column="17">IXmlLineInfo</name></type> <name pos:line="39" pos:column="30">xmlLineInfo</name> <init pos:line="39" pos:column="42">= <expr><name pos:line="39" pos:column="44">reader</name> <op:operator pos:line="39" pos:column="51">as</op:operator> <name pos:line="39" pos:column="54">IXmlLineInfo</name></expr></init></decl>;</decl_stmt>

                <if pos:line="41" pos:column="17">if <condition pos:line="41" pos:column="20">(<expr><name pos:line="41" pos:column="21">null</name> <op:operator pos:line="41" pos:column="26">==</op:operator> <name pos:line="41" pos:column="29">xmlLineInfo</name></expr>)</condition><then pos:line="41" pos:column="41">
                    <throw pos:line="42" pos:column="21">throw <expr><op:operator pos:line="42" pos:column="27">new</op:operator> <call><name pos:line="42" pos:column="31">XmlException</name><argument_list pos:line="42" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="42" pos:column="44">"reader could not be cast to an IXmlLineInfo object"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

                <expr_stmt><expr><call><name><name pos:line="44" pos:column="17">reader</name><op:operator pos:line="44" pos:column="23">.</op:operator><name pos:line="44" pos:column="24">MoveToContent</name></name><argument_list pos:line="44" pos:column="37">()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="45" pos:column="17">XElement</name></type> <name pos:line="45" pos:column="26">node</name> <init pos:line="45" pos:column="31">= <expr><name pos:line="45" pos:column="33">null</name></expr></init></decl>;</decl_stmt>

                <while pos:line="47" pos:column="17">while <condition pos:line="47" pos:column="23">(<expr><op:operator pos:line="47" pos:column="24">!</op:operator><name><name pos:line="47" pos:column="25">reader</name><op:operator pos:line="47" pos:column="31">.</op:operator><name pos:line="47" pos:column="32">EOF</name></name></expr>)</condition>
                <block pos:line="48" pos:column="17">{
                    <if pos:line="49" pos:column="21">if <condition pos:line="49" pos:column="24">(<expr><name><name pos:line="49" pos:column="25">reader</name><op:operator pos:line="49" pos:column="31">.</op:operator><name pos:line="49" pos:column="32">Depth</name></name> <op:operator pos:line="49" pos:column="38">&gt;=</op:operator> <name pos:line="49" pos:column="41">minimumDepth</name> <op:operator pos:line="49" pos:column="54">&amp;&amp;</op:operator>
                        <name><name pos:line="50" pos:column="25">reader</name><op:operator pos:line="50" pos:column="31">.</op:operator><name pos:line="50" pos:column="32">NodeType</name></name> <op:operator pos:line="50" pos:column="41">==</op:operator> <name><name pos:line="50" pos:column="44">XmlNodeType</name><op:operator pos:line="50" pos:column="55">.</op:operator><name pos:line="50" pos:column="56">Element</name> <type:modifier pos:line="50" pos:column="64">&amp;&amp;</type:modifier></name>
                        <name><name pos:line="51" pos:column="25">reader</name><op:operator pos:line="51" pos:column="31">.</op:operator><name pos:line="51" pos:column="32">NamespaceURI</name></name> <op:operator pos:line="51" pos:column="45">==</op:operator> <name><name pos:line="51" pos:column="48">name</name><op:operator pos:line="51" pos:column="52">.</op:operator><name pos:line="51" pos:column="53">Namespace</name> <type:modifier pos:line="51" pos:column="63">&amp;&amp;</type:modifier></name>
                        <name><name pos:line="52" pos:column="25">reader</name><op:operator pos:line="52" pos:column="31">.</op:operator><name pos:line="52" pos:column="32">Name</name></name> <op:operator pos:line="52" pos:column="37">==</op:operator> <name><name pos:line="52" pos:column="40">name</name><op:operator pos:line="52" pos:column="44">.</op:operator><name pos:line="52" pos:column="45">LocalName</name></name></expr>)</condition><then pos:line="52" pos:column="55">
                    <block pos:line="53" pos:column="21">{
                        <comment type="line" pos:line="54" pos:column="25">//node = XElement.ReadFrom(reader) as XElement;</comment>
                        <expr_stmt><expr><name pos:line="55" pos:column="25">node</name> <op:operator pos:line="55" pos:column="30">=</op:operator> <call><name pos:line="55" pos:column="32">ReadWithLineInfo</name><argument_list pos:line="55" pos:column="48">(<argument><expr><name pos:line="55" pos:column="49">reader</name></expr></argument>, <argument><expr><name pos:line="55" pos:column="57">xmlLineInfo</name></expr></argument>)</argument_list></call> <op:operator pos:line="55" pos:column="70">as</op:operator> <name pos:line="55" pos:column="73">XElement</name></expr>;</expr_stmt>
                        <if pos:line="56" pos:column="25">if <condition pos:line="56" pos:column="28">(<expr><name pos:line="56" pos:column="29">node</name> <op:operator pos:line="56" pos:column="34">!=</op:operator> <name pos:line="56" pos:column="37">null</name></expr>)</condition><then pos:line="56" pos:column="42">
                            <return><specifier pos:line="57" pos:column="29">yield</specifier> return <expr><name pos:line="57" pos:column="42">node</name></expr>;</return></then></if>
                        <expr_stmt><expr><call><name><name pos:line="58" pos:column="25">reader</name><op:operator pos:line="58" pos:column="31">.</op:operator><name pos:line="58" pos:column="32">Read</name></name><argument_list pos:line="58" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else pos:line="60" pos:column="21">else
                    <block pos:line="61" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="62" pos:column="25">reader</name><op:operator pos:line="62" pos:column="31">.</op:operator><name pos:line="62" pos:column="32">Read</name></name><argument_list pos:line="62" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></while>
            }</block></using>
        }</block></function>

        <comment type="line" pos:line="68" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="69" pos:column="9">/// Read an XNode from the given XmlReader and LineInfo object. If available, line info will be added to XElement.</comment>
        <comment type="line" pos:line="70" pos:column="9">/// This technique is adapted from here: http://blogs.msdn.com/b/mikechampion/archive/2006/09/10/748408.aspx</comment>
        <comment type="line" pos:line="71" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="72" pos:column="9">/// &lt;param name="reader"&gt;The XmlReader to read from&lt;/param&gt;</comment>
        <comment type="line" pos:line="73" pos:column="9">/// &lt;param name="lineInfo"&gt;This should be &lt;paramref name="reader"/&gt; cast as an &lt;see cref="IXmlLineInfo"/&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="74" pos:column="9">/// &lt;returns&gt;an XNode with line information if present&lt;/returns&gt;</comment>
        <comment type="line" pos:line="75" pos:column="9">/// &lt;seealso cref="XNode.ReadFrom"&gt;This function replaces XNode.ReadFrom&lt;/seealso&gt;</comment>
        <function><type><specifier pos:line="76" pos:column="9">public</specifier> <specifier pos:line="76" pos:column="16">static</specifier> <name pos:line="76" pos:column="23">XNode</name></type> <name pos:line="76" pos:column="29">ReadWithLineInfo</name><parameter_list pos:line="76" pos:column="45">(<param><decl><type><name pos:line="76" pos:column="46">XmlReader</name></type> <name pos:line="76" pos:column="56">reader</name></decl></param>, <param><decl><type><name pos:line="76" pos:column="64">IXmlLineInfo</name></type> <name pos:line="76" pos:column="77">lineInfo</name></decl></param>)</parameter_list>
        <block pos:line="77" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="78" pos:column="13">XNode</name></type> <name pos:line="78" pos:column="19">node</name> <init pos:line="78" pos:column="24">= <expr><name pos:line="78" pos:column="26">null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="79" pos:column="13">XElement</name></type> <name pos:line="79" pos:column="22">parent</name> <init pos:line="79" pos:column="29">= <expr><name pos:line="79" pos:column="31">null</name></expr></init></decl>;</decl_stmt>

            <do pos:line="81" pos:column="13">do
            <block pos:line="82" pos:column="13">{
                <switch pos:line="83" pos:column="17">switch <condition pos:line="83" pos:column="24">(<expr><name><name pos:line="83" pos:column="25">reader</name><op:operator pos:line="83" pos:column="31">.</op:operator><name pos:line="83" pos:column="32">NodeType</name></name></expr>)</condition>
                <block pos:line="84" pos:column="17">{
                    <case pos:line="85" pos:column="21">case <expr><name><name pos:line="85" pos:column="26">XmlNodeType</name><op:operator pos:line="85" pos:column="37">.</op:operator><name pos:line="85" pos:column="38">Element</name></name></expr>:
                        <comment type="line" pos:line="86" pos:column="25">// create a new element with the given name</comment>
                        <decl_stmt><decl><type><name pos:line="87" pos:column="25">XElement</name></type> <name pos:line="87" pos:column="34">element</name> <init pos:line="87" pos:column="42">= <expr><op:operator pos:line="87" pos:column="44">new</op:operator> <call><name pos:line="87" pos:column="48">XElement</name><argument_list pos:line="87" pos:column="56">(<argument><expr><call><name><name pos:line="87" pos:column="57">XName</name><op:operator pos:line="87" pos:column="62">.</op:operator><name pos:line="87" pos:column="63">Get</name></name><argument_list pos:line="87" pos:column="66">(<argument><expr><name><name pos:line="87" pos:column="67">reader</name><op:operator pos:line="87" pos:column="73">.</op:operator><name pos:line="87" pos:column="74">LocalName</name></name></expr></argument>, <argument><expr><name><name pos:line="87" pos:column="85">reader</name><op:operator pos:line="87" pos:column="91">.</op:operator><name pos:line="87" pos:column="92">NamespaceURI</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <comment type="line" pos:line="89" pos:column="25">// add attributes to the element</comment>
                        <if pos:line="90" pos:column="25">if <condition pos:line="90" pos:column="28">(<expr><call><name><name pos:line="90" pos:column="29">reader</name><op:operator pos:line="90" pos:column="35">.</op:operator><name pos:line="90" pos:column="36">MoveToFirstAttribute</name></name><argument_list pos:line="90" pos:column="56">()</argument_list></call></expr>)</condition><then pos:line="90" pos:column="59">
                        <block pos:line="91" pos:column="25">{
                            <do pos:line="92" pos:column="29">do
                            <block pos:line="93" pos:column="29">{
                                <comment type="line" pos:line="94" pos:column="33">// Compound documents created with older versions of ABB.SrcML left out some namespaces</comment>
                                <comment type="line" pos:line="95" pos:column="33">// this causes an "xmlns" attribute to be added to any names not in the default (SRC) namespace</comment>
                                <comment type="line" pos:line="96" pos:column="33">// to avoid an ArgumentException thrown by element.Add in this case, just don't add these</comment>
                                <if pos:line="97" pos:column="33">if <condition pos:line="97" pos:column="36">(<expr><op:operator pos:line="97" pos:column="37">!</op:operator><op:operator pos:line="97" pos:column="38">(</op:operator><name><name pos:line="97" pos:column="39">reader</name><op:operator pos:line="97" pos:column="45">.</op:operator><name pos:line="97" pos:column="46">LocalName</name></name> <op:operator pos:line="97" pos:column="56">==</op:operator> <lit:literal type="string" pos:line="97" pos:column="59">"xmlns"</lit:literal> <op:operator pos:line="97" pos:column="67">&amp;&amp;</op:operator> <name><name pos:line="97" pos:column="70">reader</name><op:operator pos:line="97" pos:column="76">.</op:operator><name pos:line="97" pos:column="77">NamespaceURI</name></name> <op:operator pos:line="97" pos:column="90">==</op:operator> <lit:literal type="string" pos:line="97" pos:column="93">"http://www.w3.org/2000/xmlns/"</lit:literal><op:operator pos:line="97" pos:column="124">)</op:operator></expr>)</condition><then pos:line="97" pos:column="126">
                                    <expr_stmt><expr><call><name><name pos:line="98" pos:column="37">element</name><op:operator pos:line="98" pos:column="44">.</op:operator><name pos:line="98" pos:column="45">Add</name></name><argument_list pos:line="98" pos:column="48">(<argument><expr><op:operator pos:line="98" pos:column="49">new</op:operator> <call><name pos:line="98" pos:column="53">XAttribute</name><argument_list pos:line="98" pos:column="63">(<argument><expr><call><name><name pos:line="98" pos:column="64">XName</name><op:operator pos:line="98" pos:column="69">.</op:operator><name pos:line="98" pos:column="70">Get</name></name><argument_list pos:line="98" pos:column="73">(<argument><expr><name><name pos:line="98" pos:column="74">reader</name><op:operator pos:line="98" pos:column="80">.</op:operator><name pos:line="98" pos:column="81">LocalName</name></name></expr></argument>, <argument><expr><name><name pos:line="98" pos:column="92">reader</name><op:operator pos:line="98" pos:column="98">.</op:operator><name pos:line="98" pos:column="99">NamespaceURI</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="98" pos:column="114">reader</name><op:operator pos:line="98" pos:column="120">.</op:operator><name pos:line="98" pos:column="121">Value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                            }</block> while <condition pos:line="99" pos:column="37">(<expr><call><name><name pos:line="99" pos:column="38">reader</name><op:operator pos:line="99" pos:column="44">.</op:operator><name pos:line="99" pos:column="45">MoveToNextAttribute</name></name><argument_list pos:line="99" pos:column="64">()</argument_list></call></expr>)</condition>;</do>
                            <expr_stmt><expr><call><name><name pos:line="100" pos:column="29">reader</name><op:operator pos:line="100" pos:column="35">.</op:operator><name pos:line="100" pos:column="36">MoveToElement</name></name><argument_list pos:line="100" pos:column="49">()</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                        <comment type="line" pos:line="102" pos:column="25">// add a ABB.SrcML.LineInfo annotation to the element if line information is present.</comment>
                        <if pos:line="103" pos:column="25">if <condition pos:line="103" pos:column="28">(<expr><call><name><name pos:line="103" pos:column="29">lineInfo</name><op:operator pos:line="103" pos:column="37">.</op:operator><name pos:line="103" pos:column="38">HasLineInfo</name></name><argument_list pos:line="103" pos:column="49">()</argument_list></call></expr>)</condition><then pos:line="103" pos:column="52">
                        <block pos:line="104" pos:column="25">{
                            <expr_stmt><expr><call><name><name pos:line="105" pos:column="29">element</name><op:operator pos:line="105" pos:column="36">.</op:operator><name pos:line="105" pos:column="37">SetLineInfo</name></name><argument_list pos:line="105" pos:column="48">(<argument><expr><op:operator pos:line="105" pos:column="49">new</op:operator> <call><name pos:line="105" pos:column="53">LineInfo</name><argument_list pos:line="105" pos:column="61">(<argument><expr><name><name pos:line="105" pos:column="62">lineInfo</name><op:operator pos:line="105" pos:column="70">.</op:operator><name pos:line="105" pos:column="71">LineNumber</name></name></expr></argument>, <argument><expr><name><name pos:line="105" pos:column="83">lineInfo</name><op:operator pos:line="105" pos:column="91">.</op:operator><name pos:line="105" pos:column="92">LinePosition</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>

                        <comment type="line" pos:line="108" pos:column="25">// if the reader is not empty, we have to go and get all of the children and add them.</comment>
                        <comment type="line" pos:line="109" pos:column="25">// otherwise, we can jsut set this to node.</comment>
                        <if pos:line="110" pos:column="25">if <condition pos:line="110" pos:column="28">(<expr><op:operator pos:line="110" pos:column="29">!</op:operator><name><name pos:line="110" pos:column="30">reader</name><op:operator pos:line="110" pos:column="36">.</op:operator><name pos:line="110" pos:column="37">IsEmptyElement</name></name></expr>)</condition><then pos:line="110" pos:column="52">
                        <block pos:line="111" pos:column="25">{
                            <if pos:line="112" pos:column="29">if <condition pos:line="112" pos:column="32">(<expr><name pos:line="112" pos:column="33">null</name> <op:operator pos:line="112" pos:column="38">!=</op:operator> <name pos:line="112" pos:column="41">parent</name></expr>)</condition><then pos:line="112" pos:column="48">
                            <block pos:line="113" pos:column="29">{
                                <expr_stmt><expr><call><name><name pos:line="114" pos:column="33">parent</name><op:operator pos:line="114" pos:column="39">.</op:operator><name pos:line="114" pos:column="40">Add</name></name><argument_list pos:line="114" pos:column="43">(<argument><expr><name pos:line="114" pos:column="44">element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></then></if>
                            <expr_stmt><expr><name pos:line="116" pos:column="29">parent</name> <op:operator pos:line="116" pos:column="36">=</op:operator> <name pos:line="116" pos:column="38">element</name></expr>;</expr_stmt>
                            <continue pos:line="117" pos:column="29">continue;</continue>
                        }</block></then>
                        <else pos:line="119" pos:column="25">else
                        <block pos:line="120" pos:column="25">{
                            <expr_stmt><expr><name pos:line="121" pos:column="29">node</name> <op:operator pos:line="121" pos:column="34">=</op:operator> <name pos:line="121" pos:column="36">element</name></expr>;</expr_stmt>
                        }</block></else></if>
                        <break pos:line="123" pos:column="25">break;</break>
                    </case><case pos:line="124" pos:column="21">case <expr><name><name pos:line="124" pos:column="26">XmlNodeType</name><op:operator pos:line="124" pos:column="37">.</op:operator><name pos:line="124" pos:column="38">EndElement</name></name></expr>:
                        <comment type="line" pos:line="125" pos:column="25">// process the EndElement</comment>
                        <if pos:line="126" pos:column="25">if <condition pos:line="126" pos:column="28">(<expr><name pos:line="126" pos:column="29">null</name> <op:operator pos:line="126" pos:column="34">==</op:operator> <name pos:line="126" pos:column="37">parent</name></expr>)</condition><then pos:line="126" pos:column="44">
                            <return pos:line="127" pos:column="29">return <expr><name pos:line="127" pos:column="36">null</name></expr>;</return></then></if>
                        <if pos:line="128" pos:column="25">if <condition pos:line="128" pos:column="28">(<expr><name><name pos:line="128" pos:column="29">parent</name><op:operator pos:line="128" pos:column="35">.</op:operator><name pos:line="128" pos:column="36">IsEmpty</name></name></expr>)</condition><then pos:line="128" pos:column="44">
                        <block pos:line="129" pos:column="25">{
                            <expr_stmt><expr><call><name><name pos:line="130" pos:column="29">parent</name><op:operator pos:line="130" pos:column="35">.</op:operator><name pos:line="130" pos:column="36">Add</name></name><argument_list pos:line="130" pos:column="39">(<argument><expr><name><name pos:line="130" pos:column="40">string</name><op:operator pos:line="130" pos:column="46">.</op:operator><name pos:line="130" pos:column="47">Empty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                        <if pos:line="132" pos:column="25">if <condition pos:line="132" pos:column="28">(<expr><name><name pos:line="132" pos:column="29">parent</name><op:operator pos:line="132" pos:column="35">.</op:operator><name pos:line="132" pos:column="36">Parent</name></name> <op:operator pos:line="132" pos:column="43">==</op:operator> <name pos:line="132" pos:column="46">null</name></expr>)</condition><then pos:line="132" pos:column="51">
                            <return pos:line="133" pos:column="29">return <expr><name pos:line="133" pos:column="36">parent</name></expr>;</return></then></if>
                        <expr_stmt><expr><name pos:line="134" pos:column="25">parent</name> <op:operator pos:line="134" pos:column="32">=</op:operator> <name><name pos:line="134" pos:column="34">parent</name><op:operator pos:line="134" pos:column="40">.</op:operator><name pos:line="134" pos:column="41">Parent</name></name></expr>;</expr_stmt>
                        <continue pos:line="135" pos:column="25">continue;</continue>
                    </case><case pos:line="136" pos:column="21">case <expr><name><name pos:line="136" pos:column="26">XmlNodeType</name><op:operator pos:line="136" pos:column="37">.</op:operator><name pos:line="136" pos:column="38">Text</name></name></expr>:
                    </case><case pos:line="137" pos:column="21">case <expr><name><name pos:line="137" pos:column="26">XmlNodeType</name><op:operator pos:line="137" pos:column="37">.</op:operator><name pos:line="137" pos:column="38">SignificantWhitespace</name></name></expr>:
                    </case><case pos:line="138" pos:column="21">case <expr><name><name pos:line="138" pos:column="26">XmlNodeType</name><op:operator pos:line="138" pos:column="37">.</op:operator><name pos:line="138" pos:column="38">Whitespace</name></name></expr>:
                        <expr_stmt><expr><name pos:line="139" pos:column="25">node</name> <op:operator pos:line="139" pos:column="30">=</op:operator> <op:operator pos:line="139" pos:column="32">new</op:operator> <call><name pos:line="139" pos:column="36">XText</name><argument_list pos:line="139" pos:column="41">(<argument><expr><name><name pos:line="139" pos:column="42">reader</name><op:operator pos:line="139" pos:column="48">.</op:operator><name pos:line="139" pos:column="49">Value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:line="140" pos:column="25">break;</break>
                    </case><case pos:line="141" pos:column="21">case <expr><name><name pos:line="141" pos:column="26">XmlNodeType</name><op:operator pos:line="141" pos:column="37">.</op:operator><name pos:line="141" pos:column="38">CDATA</name></name></expr>:
                        <expr_stmt><expr><name pos:line="142" pos:column="25">node</name> <op:operator pos:line="142" pos:column="30">=</op:operator> <op:operator pos:line="142" pos:column="32">new</op:operator> <call><name pos:line="142" pos:column="36">XCData</name><argument_list pos:line="142" pos:column="42">(<argument><expr><name><name pos:line="142" pos:column="43">reader</name><op:operator pos:line="142" pos:column="49">.</op:operator><name pos:line="142" pos:column="50">Value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:line="143" pos:column="25">break;</break>
                    </case><case pos:line="144" pos:column="21">case <expr><name><name pos:line="144" pos:column="26">XmlNodeType</name><op:operator pos:line="144" pos:column="37">.</op:operator><name pos:line="144" pos:column="38">Comment</name></name></expr>:
                        <expr_stmt><expr><name pos:line="145" pos:column="25">node</name> <op:operator pos:line="145" pos:column="30">=</op:operator> <op:operator pos:line="145" pos:column="32">new</op:operator> <call><name pos:line="145" pos:column="36">XComment</name><argument_list pos:line="145" pos:column="44">(<argument><expr><name><name pos:line="145" pos:column="45">reader</name><op:operator pos:line="145" pos:column="51">.</op:operator><name pos:line="145" pos:column="52">Value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:line="146" pos:column="25">break;</break>
                    </case><case pos:line="147" pos:column="21">case <expr><name><name pos:line="147" pos:column="26">XmlNodeType</name><op:operator pos:line="147" pos:column="37">.</op:operator><name pos:line="147" pos:column="38">ProcessingInstruction</name></name></expr>:
                        <expr_stmt><expr><name pos:line="148" pos:column="25">node</name> <op:operator pos:line="148" pos:column="30">=</op:operator> <op:operator pos:line="148" pos:column="32">new</op:operator> <call><name pos:line="148" pos:column="36">XProcessingInstruction</name><argument_list pos:line="148" pos:column="58">(<argument><expr><name><name pos:line="148" pos:column="59">reader</name><op:operator pos:line="148" pos:column="65">.</op:operator><name pos:line="148" pos:column="66">Name</name></name></expr></argument>, <argument><expr><name><name pos:line="148" pos:column="72">reader</name><op:operator pos:line="148" pos:column="78">.</op:operator><name pos:line="148" pos:column="79">Value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:line="149" pos:column="25">break;</break>
                    </case><case pos:line="150" pos:column="21">case <expr><name><name pos:line="150" pos:column="26">XmlNodeType</name><op:operator pos:line="150" pos:column="37">.</op:operator><name pos:line="150" pos:column="38">DocumentType</name></name></expr>:
                        <expr_stmt><expr><name pos:line="151" pos:column="25">node</name> <op:operator pos:line="151" pos:column="30">=</op:operator> <op:operator pos:line="151" pos:column="32">new</op:operator> <call><name pos:line="151" pos:column="36">XDocumentType</name><argument_list pos:line="151" pos:column="49">(<argument><expr><name><name pos:line="151" pos:column="50">reader</name><op:operator pos:line="151" pos:column="56">.</op:operator><name pos:line="151" pos:column="57">LocalName</name></name></expr></argument>, <argument><expr><call><name><name pos:line="151" pos:column="68">reader</name><op:operator pos:line="151" pos:column="74">.</op:operator><name pos:line="151" pos:column="75">GetAttribute</name></name><argument_list pos:line="151" pos:column="87">(<argument><expr><lit:literal type="string" pos:line="151" pos:column="88">"PUBLIC"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="151" pos:column="99">reader</name><op:operator pos:line="151" pos:column="105">.</op:operator><name pos:line="151" pos:column="106">GetAttribute</name></name><argument_list pos:line="151" pos:column="118">(<argument><expr><lit:literal type="string" pos:line="151" pos:column="119">"SYSTEM"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="151" pos:column="130">reader</name><op:operator pos:line="151" pos:column="136">.</op:operator><name pos:line="151" pos:column="137">Value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:line="152" pos:column="25">break;</break>
                    </case><case pos:line="153" pos:column="21">case <expr><name><name pos:line="153" pos:column="26">XmlNodeType</name><op:operator pos:line="153" pos:column="37">.</op:operator><name pos:line="153" pos:column="38">EntityReference</name></name></expr>:
                        <expr_stmt><expr><call><name><name pos:line="154" pos:column="25">reader</name><op:operator pos:line="154" pos:column="31">.</op:operator><name pos:line="154" pos:column="32">ResolveEntity</name></name><argument_list pos:line="154" pos:column="45">()</argument_list></call></expr>;</expr_stmt>
                        <continue pos:line="155" pos:column="25">continue;</continue>
                    </case><case pos:line="156" pos:column="21">case <expr><name><name pos:line="156" pos:column="26">XmlNodeType</name><op:operator pos:line="156" pos:column="37">.</op:operator><name pos:line="156" pos:column="38">XmlDeclaration</name></name></expr>:
                    </case><case pos:line="157" pos:column="21">case <expr><name><name pos:line="157" pos:column="26">XmlNodeType</name><op:operator pos:line="157" pos:column="37">.</op:operator><name pos:line="157" pos:column="38">EndEntity</name></name></expr>:
                        <continue pos:line="158" pos:column="25">continue;</continue>
                    </case><default pos:line="159" pos:column="21">default:
                        <throw pos:line="160" pos:column="25">throw <expr><op:operator pos:line="160" pos:column="31">new</op:operator> <call><name pos:line="160" pos:column="35">InvalidOperationException</name><argument_list pos:line="160" pos:column="60">()</argument_list></call></expr>;</throw>
                </default>}</block></switch>

                <if pos:line="163" pos:column="17">if <condition pos:line="163" pos:column="20">(<expr><name pos:line="163" pos:column="21">null</name> <op:operator pos:line="163" pos:column="26">==</op:operator> <name pos:line="163" pos:column="29">parent</name></expr>)</condition><then pos:line="163" pos:column="36">
                    <return pos:line="164" pos:column="21">return <expr><name pos:line="164" pos:column="28">node</name></expr>;</return></then></if>
                <expr_stmt><expr><call><name><name pos:line="165" pos:column="17">parent</name><op:operator pos:line="165" pos:column="23">.</op:operator><name pos:line="165" pos:column="24">Add</name></name><argument_list pos:line="165" pos:column="27">(<argument><expr><name pos:line="165" pos:column="28">node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> while <condition pos:line="166" pos:column="21">(<expr><call><name><name pos:line="166" pos:column="22">reader</name><op:operator pos:line="166" pos:column="28">.</op:operator><name pos:line="166" pos:column="29">Read</name></name><argument_list pos:line="166" pos:column="33">()</argument_list></call></expr>)</condition>;</do>
            <return pos:line="167" pos:column="13">return <expr><name pos:line="167" pos:column="20">null</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
