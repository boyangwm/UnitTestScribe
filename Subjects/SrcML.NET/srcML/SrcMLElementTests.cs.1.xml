<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Test\SrcMLElementTests.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2010 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Patrick Francis (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">System</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Collections</name><op:operator pos:line="13" pos:column="25">.</op:operator><name pos:line="13" pos:column="26">Generic</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Linq</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Text</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Xml</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Xml</name><op:operator pos:line="17" pos:column="17">.</op:operator><name pos:line="17" pos:column="18">Linq</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">NUnit</name><op:operator pos:line="18" pos:column="12">.</op:operator><name pos:line="18" pos:column="13">Framework</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">ABB</name><op:operator pos:line="19" pos:column="10">.</op:operator><name pos:line="19" pos:column="11">SrcML</name></name>;</using>

<namespace pos:line="21" pos:column="1">namespace <name><name pos:line="21" pos:column="11">ABB</name><op:operator pos:line="21" pos:column="14">.</op:operator><name pos:line="21" pos:column="15">SrcML</name><op:operator pos:line="21" pos:column="20">.</op:operator><name pos:line="21" pos:column="21">Test</name></name> <block pos:line="21" pos:column="26">{
    <comment type="line" pos:line="22" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="23" pos:column="5">/// Tests for ABB.SrcML.SrcMLElement</comment>
    <comment type="line" pos:line="24" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><attribute pos:line="25" pos:column="5">[<expr><name pos:line="25" pos:column="6">TestFixture</name></expr>]</attribute>
    <attribute pos:line="26" pos:column="5">[<expr><call><name pos:line="26" pos:column="6">Category</name><argument_list pos:line="26" pos:column="14">(<argument><expr><lit:literal type="string" pos:line="26" pos:column="15">"Build"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="27" pos:column="5">public</specifier> class <name pos:line="27" pos:column="18">SrcMLElementTests</name> <block pos:line="27" pos:column="36">{
        <decl_stmt><decl><type><specifier pos:line="28" pos:column="9">private</specifier> <name pos:line="28" pos:column="17">string</name></type> <name pos:line="28" pos:column="24">srcMLFormat</name></decl>;</decl_stmt>

        <function><type><attribute pos:line="30" pos:column="9">[<expr><name pos:line="30" pos:column="10">TestFixtureSetUp</name></expr>]</attribute>
        <specifier pos:line="31" pos:column="9">public</specifier> <name pos:line="31" pos:column="16">void</name></type> <name pos:line="31" pos:column="21">ClassSetup</name><parameter_list pos:line="31" pos:column="31">()</parameter_list> <block pos:line="31" pos:column="34">{
            <comment type="line" pos:line="32" pos:column="13">//construct the necessary srcML wrapper unit tags</comment>
            <decl_stmt><decl><type><name pos:line="33" pos:column="13">XmlNamespaceManager</name></type> <name pos:line="33" pos:column="33">xnm</name> <init pos:line="33" pos:column="37">= <expr><name><name pos:line="33" pos:column="39">SrcML</name><op:operator pos:line="33" pos:column="44">.</op:operator><name pos:line="33" pos:column="45">NamespaceManager</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="34" pos:column="13">StringBuilder</name></type> <name pos:line="34" pos:column="27">namespaceDecls</name> <init pos:line="34" pos:column="42">= <expr><op:operator pos:line="34" pos:column="44">new</op:operator> <call><name pos:line="34" pos:column="48">StringBuilder</name><argument_list pos:line="34" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="35" pos:column="13">foreach(<init><decl><type><name pos:line="35" pos:column="21">string</name></type> <name pos:line="35" pos:column="28">prefix</name> <range pos:line="35" pos:column="35">in <expr><name pos:line="35" pos:column="38">xnm</name></expr></range></decl></init>) <block pos:line="35" pos:column="43">{
                <if pos:line="36" pos:column="17">if<condition pos:line="36" pos:column="19">(<expr><name pos:line="36" pos:column="20">prefix</name> <op:operator pos:line="36" pos:column="27">!=</op:operator> <name><name pos:line="36" pos:column="30">string</name><op:operator pos:line="36" pos:column="36">.</op:operator><name pos:line="36" pos:column="37">Empty</name> <type:modifier pos:line="36" pos:column="43">&amp;&amp;</type:modifier></name> <op:operator pos:line="36" pos:column="46">!</op:operator><call><name><name pos:line="36" pos:column="47">prefix</name><op:operator pos:line="36" pos:column="53">.</op:operator><name pos:line="36" pos:column="54">StartsWith</name></name><argument_list pos:line="36" pos:column="64">(<argument><expr><lit:literal type="string" pos:line="36" pos:column="65">"xml"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="72">StringComparison</name><op:operator pos:line="36" pos:column="88">.</op:operator><name pos:line="36" pos:column="89">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="36" pos:column="108"> <block pos:line="36" pos:column="109">{
                    <if pos:line="37" pos:column="21">if<condition pos:line="37" pos:column="23">(<expr><call><name><name pos:line="37" pos:column="24">prefix</name><op:operator pos:line="37" pos:column="30">.</op:operator><name pos:line="37" pos:column="31">Equals</name></name><argument_list pos:line="37" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="37" pos:column="38">"src"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="45">StringComparison</name><op:operator pos:line="37" pos:column="61">.</op:operator><name pos:line="37" pos:column="62">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="37" pos:column="81"> <block pos:line="37" pos:column="82">{
                        <expr_stmt><expr><call><name><name pos:line="38" pos:column="25">namespaceDecls</name><op:operator pos:line="38" pos:column="39">.</op:operator><name pos:line="38" pos:column="40">AppendFormat</name></name><argument_list pos:line="38" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="38" pos:column="53">"xmlns=\"{0}\" "</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="38" pos:column="71">xnm</name><op:operator pos:line="38" pos:column="74">.</op:operator><name pos:line="38" pos:column="75">LookupNamespace</name></name><argument_list pos:line="38" pos:column="90">(<argument><expr><name pos:line="38" pos:column="91">prefix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else pos:line="39" pos:column="23">else <block pos:line="39" pos:column="28">{
                        <expr_stmt><expr><call><name><name pos:line="40" pos:column="25">namespaceDecls</name><op:operator pos:line="40" pos:column="39">.</op:operator><name pos:line="40" pos:column="40">AppendFormat</name></name><argument_list pos:line="40" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="40" pos:column="53">"xmlns:{0}=\"{1}\" "</lit:literal></expr></argument>, <argument><expr><name pos:line="40" pos:column="75">prefix</name></expr></argument>, <argument><expr><call><name><name pos:line="40" pos:column="83">xnm</name><op:operator pos:line="40" pos:column="86">.</op:operator><name pos:line="40" pos:column="87">LookupNamespace</name></name><argument_list pos:line="40" pos:column="102">(<argument><expr><name pos:line="40" pos:column="103">prefix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then></if>
            }</block></foreach>
            <expr_stmt><expr><name pos:line="44" pos:column="13">srcMLFormat</name> <op:operator pos:line="44" pos:column="25">=</op:operator> <call><name><name pos:line="44" pos:column="27">string</name><op:operator pos:line="44" pos:column="33">.</op:operator><name pos:line="44" pos:column="34">Format</name></name><argument_list pos:line="44" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="44" pos:column="41">"&lt;unit {0}&gt;{{0}}&lt;/unit&gt;"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="44" pos:column="67">namespaceDecls</name><op:operator pos:line="44" pos:column="81">.</op:operator><name pos:line="44" pos:column="82">ToString</name></name><argument_list pos:line="44" pos:column="90">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="47" pos:column="9">[<expr><name pos:line="47" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="48" pos:column="9">public</specifier> <name pos:line="48" pos:column="16">void</name></type> <name pos:line="48" pos:column="21">TestGetMethodSignature_Normal</name><parameter_list pos:line="48" pos:column="50">()</parameter_list> <block pos:line="48" pos:column="53">{
            <decl_stmt><decl><type><name pos:line="49" pos:column="13">string</name></type> <name pos:line="49" pos:column="20">testSrcML</name> <init pos:line="49" pos:column="30">= <expr><lit:literal type="string" pos:line="49" pos:column="32">@"&lt;function&gt;&lt;type&gt;&lt;name&gt;char&lt;/name&gt;&lt;type:modifier&gt;*&lt;/type:modifier&gt;&lt;/type&gt; &lt;name&gt;&lt;name&gt;MyClass&lt;/name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;&lt;name&gt;foo&lt;/name&gt;&lt;/name&gt;&lt;parameter_list&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;bar&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt; &lt;block&gt;{
    &lt;if&gt;if&lt;condition&gt;(&lt;expr&gt;&lt;name&gt;bar&lt;/name&gt; &lt;op:operator&gt;&amp;gt;&lt;/op:operator&gt; &lt;call&gt;&lt;name&gt;GetNumber&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;)&lt;/condition&gt;&lt;then&gt; &lt;block&gt;{
        &lt;return&gt;return &lt;expr&gt;&lt;lit:literal type=""string&gt;""Hello, world!&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt;
    }&lt;/block&gt;&lt;/then&gt; &lt;else&gt;else &lt;block&gt;{
        &lt;return&gt;return &lt;expr&gt;&lt;lit:literal type=""string&gt;""Goodbye cruel world!&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt;
    }&lt;/block&gt;&lt;/else&gt;&lt;/if&gt;
}&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="56" pos:column="13">XElement</name></type> <name pos:line="56" pos:column="22">xml</name> <init pos:line="56" pos:column="26">= <expr><call><name><name pos:line="56" pos:column="28">XElement</name><op:operator pos:line="56" pos:column="36">.</op:operator><name pos:line="56" pos:column="37">Parse</name></name><argument_list pos:line="56" pos:column="42">(<argument><expr><call><name><name pos:line="56" pos:column="43">string</name><op:operator pos:line="56" pos:column="49">.</op:operator><name pos:line="56" pos:column="50">Format</name></name><argument_list pos:line="56" pos:column="56">(<argument><expr><name pos:line="56" pos:column="57">srcMLFormat</name></expr></argument>, <argument><expr><name pos:line="56" pos:column="70">testSrcML</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="82">LoadOptions</name><op:operator pos:line="56" pos:column="93">.</op:operator><name pos:line="56" pos:column="94">PreserveWhitespace</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="58" pos:column="13">string</name></type> <name pos:line="58" pos:column="20">actual</name> <init pos:line="58" pos:column="27">= <expr><call><name><name pos:line="58" pos:column="29">SrcMLElement</name><op:operator pos:line="58" pos:column="41">.</op:operator><name pos:line="58" pos:column="42">GetMethodSignature</name></name><argument_list pos:line="58" pos:column="60">(<argument><expr><call><name><name pos:line="58" pos:column="61">xml</name><op:operator pos:line="58" pos:column="64">.</op:operator><name pos:line="58" pos:column="65">Element</name></name><argument_list pos:line="58" pos:column="72">(<argument><expr><name><name pos:line="58" pos:column="73">SRC</name><op:operator pos:line="58" pos:column="76">.</op:operator><name pos:line="58" pos:column="77">Function</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="59" pos:column="13">string</name></type> <name pos:line="59" pos:column="20">expected</name> <init pos:line="59" pos:column="29">= <expr><lit:literal type="string" pos:line="59" pos:column="31">"char* MyClass::foo(int bar)"</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="60" pos:column="13">Assert</name><op:operator pos:line="60" pos:column="19">.</op:operator><name pos:line="60" pos:column="20">AreEqual</name></name><argument_list pos:line="60" pos:column="28">(<argument><expr><name pos:line="60" pos:column="29">expected</name></expr></argument>, <argument><expr><name pos:line="60" pos:column="39">actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="63" pos:column="9">[<expr><name pos:line="63" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="64" pos:column="9">public</specifier> <name pos:line="64" pos:column="16">void</name></type> <name pos:line="64" pos:column="21">TestGetMethodSignature_Whitespace</name><parameter_list pos:line="64" pos:column="54">()</parameter_list> <block pos:line="64" pos:column="57">{
            <decl_stmt><decl><type><name pos:line="65" pos:column="13">string</name></type> <name pos:line="65" pos:column="20">testSrcML</name> <init pos:line="65" pos:column="30">= <expr><lit:literal type="string" pos:line="65" pos:column="32">@"&lt;function&gt;&lt;type&gt;&lt;name&gt;char&lt;/name&gt;&lt;type:modifier&gt;*&lt;/type:modifier&gt;&lt;/type&gt; &lt;name&gt;&lt;name&gt;MyClass&lt;/name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;&lt;name&gt;foo&lt;/name&gt;&lt;/name&gt;&lt;parameter_list&gt;(
	&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;bar&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;,
	&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;baz&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;,
	&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;float&lt;/name&gt;&lt;/type&gt; &lt;name&gt;xyzzy&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt; 
&lt;block&gt;{
    &lt;if&gt;if&lt;condition&gt;(&lt;expr&gt;&lt;name&gt;bar&lt;/name&gt; &lt;op:operator&gt;&amp;gt;&lt;/op:operator&gt; &lt;call&gt;&lt;name&gt;GetNumber&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;)&lt;/condition&gt;&lt;then&gt; &lt;block&gt;{
        &lt;return&gt;return &lt;expr&gt;&lt;lit:literal type=""string&gt;""Hello, world!&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt;
    }&lt;/block&gt;&lt;/then&gt; &lt;else&gt;else &lt;block&gt;{
        &lt;return&gt;return &lt;expr&gt;&lt;lit:literal type=""string&gt;""Goodbye cruel world!&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt;
    }&lt;/block&gt;&lt;/else&gt;&lt;/if&gt;
}&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="76" pos:column="13">XElement</name></type> <name pos:line="76" pos:column="22">xml</name> <init pos:line="76" pos:column="26">= <expr><call><name><name pos:line="76" pos:column="28">XElement</name><op:operator pos:line="76" pos:column="36">.</op:operator><name pos:line="76" pos:column="37">Parse</name></name><argument_list pos:line="76" pos:column="42">(<argument><expr><call><name><name pos:line="76" pos:column="43">string</name><op:operator pos:line="76" pos:column="49">.</op:operator><name pos:line="76" pos:column="50">Format</name></name><argument_list pos:line="76" pos:column="56">(<argument><expr><name pos:line="76" pos:column="57">srcMLFormat</name></expr></argument>, <argument><expr><name pos:line="76" pos:column="70">testSrcML</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="76" pos:column="82">LoadOptions</name><op:operator pos:line="76" pos:column="93">.</op:operator><name pos:line="76" pos:column="94">PreserveWhitespace</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="78" pos:column="13">string</name></type> <name pos:line="78" pos:column="20">actual</name> <init pos:line="78" pos:column="27">= <expr><call><name><name pos:line="78" pos:column="29">SrcMLElement</name><op:operator pos:line="78" pos:column="41">.</op:operator><name pos:line="78" pos:column="42">GetMethodSignature</name></name><argument_list pos:line="78" pos:column="60">(<argument><expr><call><name><name pos:line="78" pos:column="61">xml</name><op:operator pos:line="78" pos:column="64">.</op:operator><name pos:line="78" pos:column="65">Element</name></name><argument_list pos:line="78" pos:column="72">(<argument><expr><name><name pos:line="78" pos:column="73">SRC</name><op:operator pos:line="78" pos:column="76">.</op:operator><name pos:line="78" pos:column="77">Function</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="79" pos:column="13">string</name></type> <name pos:line="79" pos:column="20">expected</name> <init pos:line="79" pos:column="29">= <expr><lit:literal type="string" pos:line="79" pos:column="31">"char* MyClass::foo( int bar, int baz, float xyzzy)"</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="80" pos:column="13">Assert</name><op:operator pos:line="80" pos:column="19">.</op:operator><name pos:line="80" pos:column="20">AreEqual</name></name><argument_list pos:line="80" pos:column="28">(<argument><expr><name pos:line="80" pos:column="29">expected</name></expr></argument>, <argument><expr><name pos:line="80" pos:column="39">actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="83" pos:column="9">[<expr><name pos:line="83" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="84" pos:column="9">public</specifier> <name pos:line="84" pos:column="16">void</name></type> <name pos:line="84" pos:column="21">TestGetMethodSignature_InitializerList</name><parameter_list pos:line="84" pos:column="59">()</parameter_list> <block pos:line="84" pos:column="62">{
            <decl_stmt><decl><type><name pos:line="85" pos:column="13">string</name></type> <name pos:line="85" pos:column="20">testSrcML</name> <init pos:line="85" pos:column="30">= <expr><lit:literal type="string" pos:line="85" pos:column="32">@"&lt;constructor&gt;&lt;name&gt;&lt;name&gt;MyClass&lt;/name&gt;&lt;op:operator&gt;::&lt;/op:operator&gt;&lt;name&gt;MyClass&lt;/name&gt;&lt;/name&gt;&lt;parameter_list&gt;(&lt;param&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;bar&lt;/name&gt;&lt;/decl&gt;&lt;/param&gt;)&lt;/parameter_list&gt; &lt;member_list&gt;: &lt;call&gt;&lt;name&gt;_capacity&lt;/name&gt;&lt;argument_list&gt;(&lt;argument&gt;&lt;expr&gt;&lt;lit:literal type=""number&gt;15&lt;/lit:literal&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt;, &lt;call&gt;&lt;name&gt;_len&lt;/name&gt;&lt;argument_list&gt;(&lt;argument&gt;&lt;expr&gt;&lt;lit:literal type=""number&gt;0&lt;/lit:literal&gt;&lt;/expr&gt;&lt;/argument&gt;)&lt;/argument_list&gt;&lt;/call&gt; &lt;/member_list&gt;&lt;block&gt;{
    &lt;if&gt;if&lt;condition&gt;(&lt;expr&gt;&lt;name&gt;bar&lt;/name&gt; &lt;op:operator&gt;&amp;gt;&lt;/op:operator&gt; &lt;call&gt;&lt;name&gt;GetNumber&lt;/name&gt;&lt;argument_list&gt;()&lt;/argument_list&gt;&lt;/call&gt;&lt;/expr&gt;)&lt;/condition&gt;&lt;then&gt; &lt;block&gt;{
        &lt;return&gt;return &lt;expr&gt;&lt;lit:literal type=""string&gt;""Hello, world!&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt;
    }&lt;/block&gt;&lt;/then&gt; &lt;else&gt;else &lt;block&gt;{
        &lt;return&gt;return &lt;expr&gt;&lt;lit:literal type=""string&gt;""Goodbye cruel world!&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt;
    }&lt;/block&gt;&lt;/else&gt;&lt;/if&gt;
}&lt;/block&gt;&lt;/constructor&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="92" pos:column="13">XElement</name></type> <name pos:line="92" pos:column="22">xml</name> <init pos:line="92" pos:column="26">= <expr><call><name><name pos:line="92" pos:column="28">XElement</name><op:operator pos:line="92" pos:column="36">.</op:operator><name pos:line="92" pos:column="37">Parse</name></name><argument_list pos:line="92" pos:column="42">(<argument><expr><call><name><name pos:line="92" pos:column="43">string</name><op:operator pos:line="92" pos:column="49">.</op:operator><name pos:line="92" pos:column="50">Format</name></name><argument_list pos:line="92" pos:column="56">(<argument><expr><name pos:line="92" pos:column="57">srcMLFormat</name></expr></argument>, <argument><expr><name pos:line="92" pos:column="70">testSrcML</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="92" pos:column="82">LoadOptions</name><op:operator pos:line="92" pos:column="93">.</op:operator><name pos:line="92" pos:column="94">PreserveWhitespace</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="94" pos:column="13">string</name></type> <name pos:line="94" pos:column="20">actual</name> <init pos:line="94" pos:column="27">= <expr><call><name><name pos:line="94" pos:column="29">SrcMLElement</name><op:operator pos:line="94" pos:column="41">.</op:operator><name pos:line="94" pos:column="42">GetMethodSignature</name></name><argument_list pos:line="94" pos:column="60">(<argument><expr><call><name><name pos:line="94" pos:column="61">xml</name><op:operator pos:line="94" pos:column="64">.</op:operator><name pos:line="94" pos:column="65">Element</name></name><argument_list pos:line="94" pos:column="72">(<argument><expr><name><name pos:line="94" pos:column="73">SRC</name><op:operator pos:line="94" pos:column="76">.</op:operator><name pos:line="94" pos:column="77">Constructor</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="95" pos:column="13">string</name></type> <name pos:line="95" pos:column="20">expected</name> <init pos:line="95" pos:column="29">= <expr><lit:literal type="string" pos:line="95" pos:column="31">"MyClass::MyClass(int bar)"</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="96" pos:column="13">Assert</name><op:operator pos:line="96" pos:column="19">.</op:operator><name pos:line="96" pos:column="20">AreEqual</name></name><argument_list pos:line="96" pos:column="28">(<argument><expr><name pos:line="96" pos:column="29">expected</name></expr></argument>, <argument><expr><name pos:line="96" pos:column="39">actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="99" pos:column="9">[<expr><name pos:line="99" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="100" pos:column="9">public</specifier> <name pos:line="100" pos:column="16">void</name></type> <name pos:line="100" pos:column="21">TestGetLanguageForUnit_ValidLanguage</name><parameter_list pos:line="100" pos:column="57">()</parameter_list> <block pos:line="100" pos:column="60">{
            <decl_stmt><decl><type><name pos:line="101" pos:column="13">string</name></type> <name pos:line="101" pos:column="20">testXml</name> <init pos:line="101" pos:column="28">= <expr><lit:literal type="string" pos:line="101" pos:column="30">@"&lt;?xml version=""1.0"" encoding=""UTF-8"" standalone=""&gt;
&lt;unit xmlns=""http://www.sdml.info/srcML/src"" language=""C++"" filename=""test&gt;&lt;expr_stmt&gt;&lt;expr&gt;&lt;/expr&gt;&lt;/expr_stmt&gt;
&lt;/unit&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="105" pos:column="13">XElement</name></type> <name pos:line="105" pos:column="22">fileUnit</name> <init pos:line="105" pos:column="31">= <expr><call><name><name pos:line="105" pos:column="33">XElement</name><op:operator pos:line="105" pos:column="41">.</op:operator><name pos:line="105" pos:column="42">Parse</name></name><argument_list pos:line="105" pos:column="47">(<argument><expr><name pos:line="105" pos:column="48">testXml</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="107" pos:column="13">Assert</name><op:operator pos:line="107" pos:column="19">.</op:operator><name pos:line="107" pos:column="20">AreEqual</name></name><argument_list pos:line="107" pos:column="28">(<argument><expr><name><name pos:line="107" pos:column="29">Language</name><op:operator pos:line="107" pos:column="37">.</op:operator><name pos:line="107" pos:column="38">CPlusPlus</name></name></expr></argument>, <argument><expr><call><name><name pos:line="107" pos:column="49">SrcMLElement</name><op:operator pos:line="107" pos:column="61">.</op:operator><name pos:line="107" pos:column="62">GetLanguageForUnit</name></name><argument_list pos:line="107" pos:column="80">(<argument><expr><name pos:line="107" pos:column="81">fileUnit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="110" pos:column="9">[<expr><name pos:line="110" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="111" pos:column="9">public</specifier> <name pos:line="111" pos:column="16">void</name></type> <name pos:line="111" pos:column="21">TestGetLanguageForUnit_NoLanguage</name><parameter_list pos:line="111" pos:column="54">()</parameter_list> <block pos:line="111" pos:column="57">{
            <decl_stmt><decl><type><name pos:line="112" pos:column="13">string</name></type> <name pos:line="112" pos:column="20">testXml</name> <init pos:line="112" pos:column="28">= <expr><lit:literal type="string" pos:line="112" pos:column="30">@"&lt;?xml version=""1.0"" encoding=""UTF-8"" standalone=""&gt;
&lt;unit xmlns=""http://www.sdml.info/srcML/src"" filename=""test.c&gt;&lt;expr_stmt&gt;&lt;expr&gt;&lt;/expr&gt;&lt;/expr_stmt&gt;
&lt;/unit&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="116" pos:column="13">XElement</name></type> <name pos:line="116" pos:column="22">fileUnit</name> <init pos:line="116" pos:column="31">= <expr><call><name><name pos:line="116" pos:column="33">XElement</name><op:operator pos:line="116" pos:column="41">.</op:operator><name pos:line="116" pos:column="42">Parse</name></name><argument_list pos:line="116" pos:column="47">(<argument><expr><name pos:line="116" pos:column="48">testXml</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="118" pos:column="13">Assert</name><op:operator pos:line="118" pos:column="19">.</op:operator><name><name pos:line="118" pos:column="20">Throws</name><argument_list pos:line="118" pos:column="26">&lt;<argument><name pos:line="118" pos:column="27">SrcMLException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="118" pos:column="42">(<argument><expr><lambda><parameter_list pos:line="118" pos:column="43">()</parameter_list> <op:operator pos:line="118" pos:column="46">=&gt;</op:operator> <call><name><name pos:line="118" pos:column="49">SrcMLElement</name><op:operator pos:line="118" pos:column="61">.</op:operator><name pos:line="118" pos:column="62">GetLanguageForUnit</name></name><argument_list pos:line="118" pos:column="80">(<argument><expr><name pos:line="118" pos:column="81">fileUnit</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="121" pos:column="9">[<expr><name pos:line="121" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="122" pos:column="9">public</specifier> <name pos:line="122" pos:column="16">void</name></type> <name pos:line="122" pos:column="21">TestGetLanguageForUnit_InvalidLanguage</name><parameter_list pos:line="122" pos:column="59">()</parameter_list> <block pos:line="122" pos:column="62">{
            <decl_stmt><decl><type><name pos:line="123" pos:column="13">string</name></type> <name pos:line="123" pos:column="20">testXml</name> <init pos:line="123" pos:column="28">= <expr><lit:literal type="string" pos:line="123" pos:column="30">@"&lt;?xml version=""1.0"" encoding=""UTF-8"" standalone=""&gt;
&lt;unit xmlns=""http://www.sdml.info/srcML/src"" language=""C+"" filename=""test&gt;&lt;expr_stmt&gt;&lt;expr&gt;&lt;/expr&gt;&lt;/expr_stmt&gt;
&lt;/unit&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="127" pos:column="13">XElement</name></type> <name pos:line="127" pos:column="22">fileUnit</name> <init pos:line="127" pos:column="31">= <expr><call><name><name pos:line="127" pos:column="33">XElement</name><op:operator pos:line="127" pos:column="41">.</op:operator><name pos:line="127" pos:column="42">Parse</name></name><argument_list pos:line="127" pos:column="47">(<argument><expr><name pos:line="127" pos:column="48">testXml</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="129" pos:column="13">Assert</name><op:operator pos:line="129" pos:column="19">.</op:operator><name><name pos:line="129" pos:column="20">Throws</name><argument_list pos:line="129" pos:column="26">&lt;<argument><name pos:line="129" pos:column="27">SrcMLException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="129" pos:column="42">(<argument><expr><lambda><parameter_list pos:line="129" pos:column="43">()</parameter_list> <op:operator pos:line="129" pos:column="46">=&gt;</op:operator> <call><name><name pos:line="129" pos:column="49">SrcMLElement</name><op:operator pos:line="129" pos:column="61">.</op:operator><name pos:line="129" pos:column="62">GetLanguageForUnit</name></name><argument_list pos:line="129" pos:column="80">(<argument><expr><name pos:line="129" pos:column="81">fileUnit</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="132" pos:column="9">[<expr><name pos:line="132" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="133" pos:column="9">public</specifier> <name pos:line="133" pos:column="16">void</name></type> <name pos:line="133" pos:column="21">TestGetLanguageForUnit_InvalidArgument</name><parameter_list pos:line="133" pos:column="59">()</parameter_list> <block pos:line="133" pos:column="62">{
            <decl_stmt><decl><type><name pos:line="134" pos:column="13">string</name></type> <name pos:line="134" pos:column="20">testXml</name> <init pos:line="134" pos:column="28">= <expr><lit:literal type="string" pos:line="134" pos:column="30">@"&lt;function&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;main&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt; &lt;block&gt;{ }&lt;/block&gt;&lt;/function&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="136" pos:column="13">XElement</name></type> <name pos:line="136" pos:column="22">fileUnit</name> <init pos:line="136" pos:column="31">= <expr><call><name><name pos:line="136" pos:column="33">XElement</name><op:operator pos:line="136" pos:column="41">.</op:operator><name pos:line="136" pos:column="42">Parse</name></name><argument_list pos:line="136" pos:column="47">(<argument><expr><name pos:line="136" pos:column="48">testXml</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="138" pos:column="13">Assert</name><op:operator pos:line="138" pos:column="19">.</op:operator><name><name pos:line="138" pos:column="20">Throws</name><argument_list pos:line="138" pos:column="26">&lt;<argument><name pos:line="138" pos:column="27">ArgumentException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="138" pos:column="45">(<argument><expr><lambda><parameter_list pos:line="138" pos:column="46">()</parameter_list> <op:operator pos:line="138" pos:column="49">=&gt;</op:operator> <call><name><name pos:line="138" pos:column="52">SrcMLElement</name><op:operator pos:line="138" pos:column="64">.</op:operator><name pos:line="138" pos:column="65">GetLanguageForUnit</name></name><argument_list pos:line="138" pos:column="83">(<argument><expr><name pos:line="138" pos:column="84">fileUnit</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="140" pos:column="13">fileUnit</name> <op:operator pos:line="140" pos:column="22">=</op:operator> <name pos:line="140" pos:column="24">null</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="141" pos:column="13">Assert</name><op:operator pos:line="141" pos:column="19">.</op:operator><name><name pos:line="141" pos:column="20">Throws</name><argument_list pos:line="141" pos:column="26">&lt;<argument><name pos:line="141" pos:column="27">ArgumentNullException</name></argument>&gt;</argument_list></name></name><argument_list pos:line="141" pos:column="49">(<argument><expr><lambda><parameter_list pos:line="141" pos:column="50">()</parameter_list> <op:operator pos:line="141" pos:column="53">=&gt;</op:operator> <call><name><name pos:line="141" pos:column="56">SrcMLElement</name><op:operator pos:line="141" pos:column="68">.</op:operator><name pos:line="141" pos:column="69">GetLanguageForUnit</name></name><argument_list pos:line="141" pos:column="87">(<argument><expr><name pos:line="141" pos:column="88">fileUnit</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
