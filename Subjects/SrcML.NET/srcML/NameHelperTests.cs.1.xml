<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data.Test\NameHelperTests.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2013 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">NUnit</name><op:operator pos:line="12" pos:column="12">.</op:operator><name pos:line="12" pos:column="13">Framework</name></name>;</using>
<using pos:line="13" pos:column="1">using <name pos:line="13" pos:column="7">System</name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Linq</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Xml</name><op:operator pos:line="15" pos:column="17">.</op:operator><name pos:line="15" pos:column="18">Linq</name></name>;</using>

<namespace pos:line="17" pos:column="1">namespace <name><name pos:line="17" pos:column="11">ABB</name><op:operator pos:line="17" pos:column="14">.</op:operator><name pos:line="17" pos:column="15">SrcML</name><op:operator pos:line="17" pos:column="20">.</op:operator><name pos:line="17" pos:column="21">Data</name><op:operator pos:line="17" pos:column="25">.</op:operator><name pos:line="17" pos:column="26">Test</name></name> <block pos:line="17" pos:column="31">{

    <class><attribute pos:line="19" pos:column="5">[<expr><name pos:line="19" pos:column="6">TestFixture</name></expr>]</attribute>
    <attribute pos:line="20" pos:column="5">[<expr><call><name pos:line="20" pos:column="6">Category</name><argument_list pos:line="20" pos:column="14">(<argument><expr><lit:literal type="string" pos:line="20" pos:column="15">"Build"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="21" pos:column="5">internal</specifier> class <name pos:line="21" pos:column="20">NameHelperTests</name> <block pos:line="21" pos:column="36">{

        <function><type><attribute pos:line="23" pos:column="9">[<expr><name pos:line="23" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="24" pos:column="9">public</specifier> <name pos:line="24" pos:column="16">void</name></type> <name pos:line="24" pos:column="21">TestGetLastNameElement</name><parameter_list pos:line="24" pos:column="43">()</parameter_list> <block pos:line="24" pos:column="46">{
            <decl_stmt><decl><type><name pos:line="25" pos:column="13">var</name></type> <name pos:line="25" pos:column="17">nameElement</name> <init pos:line="25" pos:column="29">= <expr><call><name pos:line="25" pos:column="31">FormatRootNameElement</name><argument_list pos:line="25" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="25" pos:column="53">"&lt;name&gt;A&lt;/name&gt;&lt;name&gt;B&lt;/name&gt;"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="27" pos:column="13">var</name></type> <name pos:line="27" pos:column="17">expectedLastName</name> <init pos:line="27" pos:column="34">= <expr><call><name><name pos:line="27" pos:column="36">nameElement</name><op:operator pos:line="27" pos:column="47">.</op:operator><name pos:line="27" pos:column="48">Elements</name></name><argument_list pos:line="27" pos:column="56">(<argument><expr><name><name pos:line="27" pos:column="57">SRC</name><op:operator pos:line="27" pos:column="60">.</op:operator><name pos:line="27" pos:column="61">Name</name></name></expr></argument>)</argument_list></call><op:operator pos:line="27" pos:column="66">.</op:operator><call><name pos:line="27" pos:column="67">Last</name><argument_list pos:line="27" pos:column="71">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="28" pos:column="13">var</name></type> <name pos:line="28" pos:column="17">lastName</name> <init pos:line="28" pos:column="26">= <expr><call><name><name pos:line="28" pos:column="28">NameHelper</name><op:operator pos:line="28" pos:column="38">.</op:operator><name pos:line="28" pos:column="39">GetLastNameElement</name></name><argument_list pos:line="28" pos:column="57">(<argument><expr><name pos:line="28" pos:column="58">nameElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="30" pos:column="13">Assert</name><op:operator pos:line="30" pos:column="19">.</op:operator><name pos:line="30" pos:column="20">AreSame</name></name><argument_list pos:line="30" pos:column="27">(<argument><expr><name pos:line="30" pos:column="28">expectedLastName</name></expr></argument>, <argument><expr><name pos:line="30" pos:column="46">lastName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="33" pos:column="9">[<expr><name pos:line="33" pos:column="10">Test</name></expr><op:operator pos:line="33" pos:column="14">,</op:operator> <expr><call><name pos:line="33" pos:column="16">ExpectedException</name><argument_list pos:line="33" pos:column="33">(<argument><expr><call><name pos:line="33" pos:column="34">typeof</name><argument_list pos:line="33" pos:column="40">(<argument><expr><name pos:line="33" pos:column="41">ArgumentNullException</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="34" pos:column="9">public</specifier> <name pos:line="34" pos:column="16">void</name></type> <name pos:line="34" pos:column="21">TestGetLastNameElement_Null</name><parameter_list pos:line="34" pos:column="48">()</parameter_list> <block pos:line="34" pos:column="51">{
            <expr_stmt><expr><call><name><name pos:line="35" pos:column="13">NameHelper</name><op:operator pos:line="35" pos:column="23">.</op:operator><name pos:line="35" pos:column="24">GetLastName</name></name><argument_list pos:line="35" pos:column="35">(<argument><expr><name pos:line="35" pos:column="36">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="38" pos:column="9">[<expr><name pos:line="38" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="39" pos:column="9">public</specifier> <name pos:line="39" pos:column="16">void</name></type> <name pos:line="39" pos:column="21">TestGetNameElementsExceptLast</name><parameter_list pos:line="39" pos:column="50">()</parameter_list> <block pos:line="39" pos:column="53">{
            <decl_stmt><decl><type><name pos:line="40" pos:column="13">var</name></type> <name pos:line="40" pos:column="17">nameElement</name> <init pos:line="40" pos:column="29">= <expr><call><name pos:line="40" pos:column="31">FormatRootNameElement</name><argument_list pos:line="40" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="40" pos:column="53">"&lt;name&gt;A&lt;/name&gt;&lt;name&gt;B&lt;/name&gt;"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="42" pos:column="13">var</name></type> <name pos:line="42" pos:column="17">expectedFirstName</name> <init pos:line="42" pos:column="35">= <expr><call><name><name pos:line="42" pos:column="37">nameElement</name><op:operator pos:line="42" pos:column="48">.</op:operator><name pos:line="42" pos:column="49">Elements</name></name><argument_list pos:line="42" pos:column="57">(<argument><expr><name><name pos:line="42" pos:column="58">SRC</name><op:operator pos:line="42" pos:column="61">.</op:operator><name pos:line="42" pos:column="62">Name</name></name></expr></argument>)</argument_list></call><op:operator pos:line="42" pos:column="67">.</op:operator><call><name pos:line="42" pos:column="68">First</name><argument_list pos:line="42" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="43" pos:column="13">var</name></type> <name pos:line="43" pos:column="17">nestedNamesExceptLast</name> <init pos:line="43" pos:column="39">= <expr><call><name><name pos:line="43" pos:column="41">NameHelper</name><op:operator pos:line="43" pos:column="51">.</op:operator><name pos:line="43" pos:column="52">GetNameElementsExceptLast</name></name><argument_list pos:line="43" pos:column="77">(<argument><expr><name pos:line="43" pos:column="78">nameElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="45" pos:column="13">Assert</name><op:operator pos:line="45" pos:column="19">.</op:operator><name pos:line="45" pos:column="20">AreEqual</name></name><argument_list pos:line="45" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="45" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="45" pos:column="32">nestedNamesExceptLast</name><op:operator pos:line="45" pos:column="53">.</op:operator><name pos:line="45" pos:column="54">Count</name></name><argument_list pos:line="45" pos:column="59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="46" pos:column="13">Assert</name><op:operator pos:line="46" pos:column="19">.</op:operator><name pos:line="46" pos:column="20">AreSame</name></name><argument_list pos:line="46" pos:column="27">(<argument><expr><name pos:line="46" pos:column="28">expectedFirstName</name></expr></argument>, <argument><expr><call><name><name pos:line="46" pos:column="47">nestedNamesExceptLast</name><op:operator pos:line="46" pos:column="68">.</op:operator><name pos:line="46" pos:column="69">First</name></name><argument_list pos:line="46" pos:column="74">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="49" pos:column="9">[<expr><name pos:line="49" pos:column="10">Test</name></expr><op:operator pos:line="49" pos:column="14">,</op:operator> <expr><call><name pos:line="49" pos:column="16">ExpectedException</name><argument_list pos:line="49" pos:column="33">(<argument><expr><call><name pos:line="49" pos:column="34">typeof</name><argument_list pos:line="49" pos:column="40">(<argument><expr><name pos:line="49" pos:column="41">ArgumentNullException</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="50" pos:column="9">public</specifier> <name pos:line="50" pos:column="16">void</name></type> <name pos:line="50" pos:column="21">TestGetNameElementsExceptLast_Null</name><parameter_list pos:line="50" pos:column="55">()</parameter_list> <block pos:line="50" pos:column="58">{
            <expr_stmt><expr><call><name><name pos:line="51" pos:column="13">NameHelper</name><op:operator pos:line="51" pos:column="23">.</op:operator><name pos:line="51" pos:column="24">GetNameElementsExceptLast</name></name><argument_list pos:line="51" pos:column="49">(<argument><expr><name pos:line="51" pos:column="50">null</name></expr></argument>)</argument_list></call><op:operator pos:line="51" pos:column="55">.</op:operator><call><name pos:line="51" pos:column="56">First</name><argument_list pos:line="51" pos:column="61">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="54" pos:column="9">[<expr><name pos:line="54" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="55" pos:column="9">public</specifier> <name pos:line="55" pos:column="16">void</name></type> <name pos:line="55" pos:column="21">TestGetNestedNameElements</name><parameter_list pos:line="55" pos:column="46">()</parameter_list> <block pos:line="55" pos:column="49">{
            <decl_stmt><decl><type><name pos:line="56" pos:column="13">var</name></type> <name pos:line="56" pos:column="17">nameElement</name> <init pos:line="56" pos:column="29">= <expr><call><name pos:line="56" pos:column="31">FormatRootNameElement</name><argument_list pos:line="56" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="56" pos:column="53">"&lt;name&gt;A&lt;/name&gt;&lt;name&gt;B&lt;/name&gt;"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="58" pos:column="13">var</name></type> <name pos:line="58" pos:column="17">nestedNames</name> <init pos:line="58" pos:column="29">= <expr><call><name><name pos:line="58" pos:column="31">NameHelper</name><op:operator pos:line="58" pos:column="41">.</op:operator><name pos:line="58" pos:column="42">GetNameElementsFromName</name></name><argument_list pos:line="58" pos:column="65">(<argument><expr><name pos:line="58" pos:column="66">nameElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="60" pos:column="13">Assert</name><op:operator pos:line="60" pos:column="19">.</op:operator><name pos:line="60" pos:column="20">AreEqual</name></name><argument_list pos:line="60" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="60" pos:column="29">"A"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="60" pos:column="34">nestedNames</name><op:operator pos:line="60" pos:column="45">.</op:operator><name pos:line="60" pos:column="46">First</name></name><argument_list pos:line="60" pos:column="51">()</argument_list></call><op:operator pos:line="60" pos:column="53">.</op:operator><name pos:line="60" pos:column="54">Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="61" pos:column="13">Assert</name><op:operator pos:line="61" pos:column="19">.</op:operator><name pos:line="61" pos:column="20">AreEqual</name></name><argument_list pos:line="61" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="61" pos:column="29">"B"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="61" pos:column="34">nestedNames</name><op:operator pos:line="61" pos:column="45">.</op:operator><name pos:line="61" pos:column="46">Last</name></name><argument_list pos:line="61" pos:column="50">()</argument_list></call><op:operator pos:line="61" pos:column="52">.</op:operator><name pos:line="61" pos:column="53">Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="64" pos:column="9">[<expr><name pos:line="64" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="65" pos:column="9">public</specifier> <name pos:line="65" pos:column="16">void</name></type> <name pos:line="65" pos:column="21">TestGetNestedNameElements_NoNestedNames</name><parameter_list pos:line="65" pos:column="60">()</parameter_list> <block pos:line="65" pos:column="63">{
            <decl_stmt><decl><type><name pos:line="66" pos:column="13">var</name></type> <name pos:line="66" pos:column="17">nameElement</name> <init pos:line="66" pos:column="29">= <expr><call><name pos:line="66" pos:column="31">FormatRootNameElement</name><argument_list pos:line="66" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="66" pos:column="53">"A"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="68" pos:column="13">var</name></type> <name pos:line="68" pos:column="17">expectedFirstName</name> <init pos:line="68" pos:column="35">= <expr><name><name pos:line="68" pos:column="37">nameElement</name><op:operator pos:line="68" pos:column="48">.</op:operator><name pos:line="68" pos:column="49">Value</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="70" pos:column="13">Assert</name><op:operator pos:line="70" pos:column="19">.</op:operator><name pos:line="70" pos:column="20">AreSame</name></name><argument_list pos:line="70" pos:column="27">(<argument><expr><name pos:line="70" pos:column="28">nameElement</name></expr></argument>, <argument><expr><call><name><name pos:line="70" pos:column="41">NameHelper</name><op:operator pos:line="70" pos:column="51">.</op:operator><name pos:line="70" pos:column="52">GetNameElementsFromName</name></name><argument_list pos:line="70" pos:column="75">(<argument><expr><name pos:line="70" pos:column="76">nameElement</name></expr></argument>)</argument_list></call><op:operator pos:line="70" pos:column="88">.</op:operator><call><name pos:line="70" pos:column="89">First</name><argument_list pos:line="70" pos:column="94">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="71" pos:column="13">Assert</name><op:operator pos:line="71" pos:column="19">.</op:operator><name pos:line="71" pos:column="20">AreEqual</name></name><argument_list pos:line="71" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="71" pos:column="29">"A"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="71" pos:column="34">NameHelper</name><op:operator pos:line="71" pos:column="44">.</op:operator><name pos:line="71" pos:column="45">GetLastName</name></name><argument_list pos:line="71" pos:column="56">(<argument><expr><name pos:line="71" pos:column="57">nameElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="72" pos:column="13">Assert</name><op:operator pos:line="72" pos:column="19">.</op:operator><name pos:line="72" pos:column="20">AreEqual</name></name><argument_list pos:line="72" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="72" pos:column="29">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="72" pos:column="32">NameHelper</name><op:operator pos:line="72" pos:column="42">.</op:operator><name pos:line="72" pos:column="43">GetNameElementsExceptLast</name></name><argument_list pos:line="72" pos:column="68">(<argument><expr><name pos:line="72" pos:column="69">nameElement</name></expr></argument>)</argument_list></call><op:operator pos:line="72" pos:column="81">.</op:operator><call><name pos:line="72" pos:column="82">Count</name><argument_list pos:line="72" pos:column="87">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="75" pos:column="9">[<expr><name pos:line="75" pos:column="10">Test</name></expr><op:operator pos:line="75" pos:column="14">,</op:operator> <expr><call><name pos:line="75" pos:column="16">ExpectedException</name><argument_list pos:line="75" pos:column="33">(<argument><expr><call><name pos:line="75" pos:column="34">typeof</name><argument_list pos:line="75" pos:column="40">(<argument><expr><name pos:line="75" pos:column="41">ArgumentNullException</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="76" pos:column="9">public</specifier> <name pos:line="76" pos:column="16">void</name></type> <name pos:line="76" pos:column="21">TestGetNestedNameElements_Null</name><parameter_list pos:line="76" pos:column="51">()</parameter_list> <block pos:line="76" pos:column="54">{
            <expr_stmt><expr><call><name><name pos:line="77" pos:column="13">NameHelper</name><op:operator pos:line="77" pos:column="23">.</op:operator><name pos:line="77" pos:column="24">GetNameElementsFromName</name></name><argument_list pos:line="77" pos:column="47">(<argument><expr><name pos:line="77" pos:column="48">null</name></expr></argument>)</argument_list></call><op:operator pos:line="77" pos:column="53">.</op:operator><call><name pos:line="77" pos:column="54">First</name><argument_list pos:line="77" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="80" pos:column="9">private</specifier> <name pos:line="80" pos:column="17">XElement</name></type> <name pos:line="80" pos:column="26">FormatRootNameElement</name><parameter_list pos:line="80" pos:column="47">(<param><decl><type><name pos:line="80" pos:column="48">string</name></type> <name pos:line="80" pos:column="55">content</name></decl></param>)</parameter_list> <block pos:line="80" pos:column="64">{
            <return pos:line="81" pos:column="13">return <expr><call><name><name pos:line="81" pos:column="20">XElement</name><op:operator pos:line="81" pos:column="28">.</op:operator><name pos:line="81" pos:column="29">Parse</name></name><argument_list pos:line="81" pos:column="34">(<argument><expr><call><name><name pos:line="81" pos:column="35">String</name><op:operator pos:line="81" pos:column="41">.</op:operator><name pos:line="81" pos:column="42">Format</name></name><argument_list pos:line="81" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="81" pos:column="49">@"&lt;name xmlns=""{0}&gt;{1}&lt;/name&gt;"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="81" pos:column="84">SrcML</name><op:operator pos:line="81" pos:column="89">.</op:operator><name pos:line="81" pos:column="90">NamespaceManager</name><op:operator pos:line="81" pos:column="106">.</op:operator><name pos:line="81" pos:column="107">LookupNamespace</name></name><argument_list pos:line="81" pos:column="122">(<argument><expr><lit:literal type="string" pos:line="81" pos:column="123">"src"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="81" pos:column="131">content</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
