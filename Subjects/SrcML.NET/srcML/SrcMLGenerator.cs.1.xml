<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML\SrcMLGenerator.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2013 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Patrick Francis (ABB Group) - initial API, implementation, &amp; documentation
 *    Vinay Augustine (ABB Group) - Replaced Src2SrcMLRunner with Src2SrcMLRunner2
 *****************************************************************************/</comment>

<using pos:line="13" pos:column="1">using <name pos:line="13" pos:column="7">System</name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Collections</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">Generic</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Collections</name><op:operator pos:line="15" pos:column="25">.</op:operator><name pos:line="15" pos:column="26">ObjectModel</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">IO</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Linq</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Text</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">System</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">Xml</name><op:operator pos:line="19" pos:column="17">.</op:operator><name pos:line="19" pos:column="18">Linq</name></name>;</using>

<namespace pos:line="21" pos:column="1">namespace <name><name pos:line="21" pos:column="11">ABB</name><op:operator pos:line="21" pos:column="14">.</op:operator><name pos:line="21" pos:column="15">SrcML</name></name> <block pos:line="21" pos:column="21">{
    <comment type="line" pos:line="22" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="23" pos:column="5">/// The SrcML Generator class provides a convenient wrapper for multiple &lt;see cref="Src2SrcMLRunner2"&gt;src2srcml runners&lt;/see&gt;, each targetted at a different language.</comment>
    <comment type="line" pos:line="24" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="25" pos:column="5">public</specifier> class <name pos:line="25" pos:column="18">SrcMLGenerator</name> <super pos:line="25" pos:column="33">: <name pos:line="25" pos:column="35">AbstractGenerator</name></super> <block pos:line="25" pos:column="53">{
        <decl_stmt><decl><type><specifier pos:line="26" pos:column="9">private</specifier> <specifier pos:line="26" pos:column="17">readonly</specifier> <name pos:line="26" pos:column="26">Src2SrcMLRunner2</name></type> <name pos:line="26" pos:column="43">defaultExecutable</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="27" pos:column="9">private</specifier> <specifier pos:line="27" pos:column="17">readonly</specifier> <name pos:line="27" pos:column="26">Language</name><index pos:line="27" pos:column="34">[]</index></type> <name pos:line="27" pos:column="37">defaultLanguages</name> <init pos:line="27" pos:column="54">= <expr><op:operator pos:line="27" pos:column="56">new</op:operator><index pos:line="27" pos:column="59">[]</index> <block pos:line="27" pos:column="62">{ <expr><name><name pos:line="27" pos:column="64">Language</name><op:operator pos:line="27" pos:column="72">.</op:operator><name pos:line="27" pos:column="73">C</name></name></expr>, <expr><name><name pos:line="27" pos:column="76">Language</name><op:operator pos:line="27" pos:column="84">.</op:operator><name pos:line="27" pos:column="85">CPlusPlus</name></name></expr>, <expr><name><name pos:line="27" pos:column="96">Language</name><op:operator pos:line="27" pos:column="104">.</op:operator><name pos:line="27" pos:column="105">Java</name></name></expr>, <expr><name><name pos:line="27" pos:column="111">Language</name><op:operator pos:line="27" pos:column="119">.</op:operator><name pos:line="27" pos:column="120">AspectJ</name></name></expr>, <expr><name><name pos:line="27" pos:column="129">Language</name><op:operator pos:line="27" pos:column="137">.</op:operator><name pos:line="27" pos:column="138">CSharp</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="28" pos:column="9">private</specifier> <name pos:line="28" pos:column="17">string</name><index pos:line="28" pos:column="23">[]</index></type> <name pos:line="28" pos:column="26">defaultArguments</name></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><specifier pos:line="30" pos:column="9">private</specifier> <name><name pos:line="30" pos:column="17">Dictionary</name><argument_list pos:line="30" pos:column="27">&lt;<argument><name pos:line="30" pos:column="28">Language</name></argument>, <argument><name pos:line="30" pos:column="38">Src2SrcMLRunner2</name></argument>&gt;</argument_list></name></type> <name pos:line="30" pos:column="56">nonDefaultExecutables</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="31" pos:column="9">private</specifier> <name><name pos:line="31" pos:column="17">Dictionary</name><argument_list pos:line="31" pos:column="27">&lt;<argument><name pos:line="31" pos:column="28">Language</name></argument>, <argument><name pos:line="31" pos:column="38">string</name><index pos:line="31" pos:column="44">[]</index></argument>&gt;</argument_list></name></type> <name pos:line="31" pos:column="48">nonDefaultArguments</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="33" pos:column="9">private</specifier> <specifier pos:line="33" pos:column="17">readonly</specifier> <name><name pos:line="33" pos:column="26">Dictionary</name><argument_list pos:line="33" pos:column="36">&lt;<argument><name pos:line="33" pos:column="37">string</name></argument>, <argument><name pos:line="33" pos:column="45">Language</name></argument>&gt;</argument_list></name></type> <name pos:line="33" pos:column="55">extensionMapping</name> <init pos:line="33" pos:column="72">= <expr><op:operator pos:line="33" pos:column="74">new</op:operator> <call><name><name pos:line="33" pos:column="78">Dictionary</name><argument_list pos:line="33" pos:column="88">&lt;<argument><name pos:line="33" pos:column="89">string</name></argument>, <argument><name pos:line="33" pos:column="97">Language</name></argument>&gt;</argument_list></name><argument_list pos:line="33" pos:column="106">(<argument><expr><name><name pos:line="33" pos:column="107">StringComparer</name><op:operator pos:line="33" pos:column="121">.</op:operator><name pos:line="33" pos:column="122">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call>
                                                                         <block pos:line="34" pos:column="74">{
                                                                             <expr><block pos:line="35" pos:column="78">{<expr><lit:literal type="string" pos:line="35" pos:column="79">".c"</lit:literal></expr>, <expr><name><name pos:line="35" pos:column="85">Language</name><op:operator pos:line="35" pos:column="93">.</op:operator><name pos:line="35" pos:column="94">C</name></name></expr>}</block></expr>,
                                                                             <expr><block pos:line="36" pos:column="78">{<expr><lit:literal type="string" pos:line="36" pos:column="79">".h"</lit:literal></expr>, <expr><name><name pos:line="36" pos:column="85">Language</name><op:operator pos:line="36" pos:column="93">.</op:operator><name pos:line="36" pos:column="94">CPlusPlus</name></name></expr>}</block></expr>,
                                                                             <expr><block pos:line="37" pos:column="78">{<expr><lit:literal type="string" pos:line="37" pos:column="79">".cpp"</lit:literal></expr>, <expr><name><name pos:line="37" pos:column="87">Language</name><op:operator pos:line="37" pos:column="95">.</op:operator><name pos:line="37" pos:column="96">CPlusPlus</name></name></expr>}</block></expr>,
                                                                             <expr><block pos:line="38" pos:column="78">{<expr><lit:literal type="string" pos:line="38" pos:column="79">".cxx"</lit:literal></expr>, <expr><name><name pos:line="38" pos:column="87">Language</name><op:operator pos:line="38" pos:column="95">.</op:operator><name pos:line="38" pos:column="96">CPlusPlus</name></name></expr>}</block></expr>,
                                                                             <expr><block pos:line="39" pos:column="78">{<expr><lit:literal type="string" pos:line="39" pos:column="79">".java"</lit:literal></expr>, <expr><name><name pos:line="39" pos:column="88">Language</name><op:operator pos:line="39" pos:column="96">.</op:operator><name pos:line="39" pos:column="97">Java</name></name></expr>}</block></expr>,
                                                                             <expr><block pos:line="40" pos:column="78">{<expr><lit:literal type="string" pos:line="40" pos:column="79">".cs"</lit:literal></expr>, <expr><name><name pos:line="40" pos:column="86">Language</name><op:operator pos:line="40" pos:column="94">.</op:operator><name pos:line="40" pos:column="95">CSharp</name></name></expr>}</block></expr>
                                                                         }</block></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="43" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="44" pos:column="9">/// Maps file extensions to the languages they will be parsed as.</comment>
        <comment type="line" pos:line="45" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="46" pos:column="9">public</specifier> <name><name pos:line="46" pos:column="16">Dictionary</name><argument_list pos:line="46" pos:column="26">&lt;<argument><name pos:line="46" pos:column="27">string</name></argument>, <argument><name pos:line="46" pos:column="35">Language</name></argument>&gt;</argument_list></name></type> <name pos:line="46" pos:column="45">ExtensionMapping</name> <block pos:line="46" pos:column="62">{
            <function><name pos:line="47" pos:column="13">get</name> <block pos:line="47" pos:column="17">{ <return pos:line="47" pos:column="19">return <expr><name pos:line="47" pos:column="26">extensionMapping</name></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="50" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="51" pos:column="9">/// Maps Languages to the Src2SrcMLRunner that will parse it, if different from the default.</comment>
        <comment type="line" pos:line="52" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="53" pos:column="9">public</specifier> <name><name pos:line="53" pos:column="16">Dictionary</name><argument_list pos:line="53" pos:column="26">&lt;<argument><name pos:line="53" pos:column="27">Language</name></argument>, <argument><name pos:line="53" pos:column="37">Src2SrcMLRunner2</name></argument>&gt;</argument_list></name></type> <name pos:line="53" pos:column="55">NonDefaultExecutables</name> <block pos:line="53" pos:column="77">{
            <function><name pos:line="54" pos:column="13">get</name> <block pos:line="54" pos:column="17">{ <return pos:line="54" pos:column="19">return <expr><name pos:line="54" pos:column="26">nonDefaultExecutables</name></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="57" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="58" pos:column="9">/// The languages that can be parsed by this SrcMLGenerator.</comment>
        <comment type="line" pos:line="59" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="60" pos:column="9">public</specifier> <name><name pos:line="60" pos:column="16">IEnumerable</name><argument_list pos:line="60" pos:column="27">&lt;<argument><name pos:line="60" pos:column="28">Language</name></argument>&gt;</argument_list></name></type> <name pos:line="60" pos:column="38">SupportedLanguages</name> <block pos:line="60" pos:column="57">{
            <function><name pos:line="61" pos:column="13">get</name> <block pos:line="61" pos:column="17">{ <return pos:line="61" pos:column="19">return <expr><call><name><name pos:line="61" pos:column="26">defaultLanguages</name><op:operator pos:line="61" pos:column="42">.</op:operator><name pos:line="61" pos:column="43">Union</name></name><argument_list pos:line="61" pos:column="48">(<argument><expr><name><name pos:line="61" pos:column="49">nonDefaultExecutables</name><op:operator pos:line="61" pos:column="70">.</op:operator><name pos:line="61" pos:column="71">Keys</name></name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
        }</block></decl></decl_stmt> 

        <comment type="line" pos:line="64" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="65" pos:column="9">/// Creates a new SrcMLGenerator.</comment>
        <comment type="line" pos:line="66" pos:column="9">/// &lt;/summary&gt;</comment>
        <constructor><specifier pos:line="67" pos:column="9">public</specifier> <name pos:line="67" pos:column="16">SrcMLGenerator</name><parameter_list pos:line="67" pos:column="30">()</parameter_list> <member_list pos:line="67" pos:column="33">: <call><name pos:line="67" pos:column="35">base</name><argument_list pos:line="67" pos:column="39">()</argument_list></call> </member_list><block pos:line="67" pos:column="42">{
            <expr_stmt><expr><name pos:line="68" pos:column="13">defaultExecutable</name> <op:operator pos:line="68" pos:column="31">=</op:operator> <op:operator pos:line="68" pos:column="33">new</op:operator> <call><name pos:line="68" pos:column="37">Src2SrcMLRunner2</name><argument_list pos:line="68" pos:column="53">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="69" pos:column="13">defaultArguments</name> <op:operator pos:line="69" pos:column="30">=</op:operator> <op:operator pos:line="69" pos:column="32">new</op:operator><index pos:line="69" pos:column="35">[]</index> <block pos:line="69" pos:column="38">{ <expr><name><name pos:line="69" pos:column="40">LIT</name><op:operator pos:line="69" pos:column="43">.</op:operator><name pos:line="69" pos:column="44">ArgumentLabel</name></name></expr><op:operator pos:line="69" pos:column="57">,</op:operator> <expr><name><name pos:line="69" pos:column="59">OP</name><op:operator pos:line="69" pos:column="61">.</op:operator><name pos:line="69" pos:column="62">ArgumentLabel</name></name></expr><op:operator pos:line="69" pos:column="75">,</op:operator> <expr><name><name pos:line="69" pos:column="77">POS</name><op:operator pos:line="69" pos:column="80">.</op:operator><name pos:line="69" pos:column="81">ArgumentLabel</name></name></expr><op:operator pos:line="69" pos:column="94">,</op:operator> <expr><name><name pos:line="69" pos:column="96">TYPE</name><op:operator pos:line="69" pos:column="100">.</op:operator><name pos:line="69" pos:column="101">ArgumentLabel</name></name></expr> }</block></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="70" pos:column="13">nonDefaultExecutables</name> <op:operator pos:line="70" pos:column="35">=</op:operator> <op:operator pos:line="70" pos:column="37">new</op:operator> <call><name><name pos:line="70" pos:column="41">Dictionary</name><argument_list pos:line="70" pos:column="51">&lt;<argument><name pos:line="70" pos:column="52">Language</name></argument>, <argument><name pos:line="70" pos:column="62">Src2SrcMLRunner2</name></argument>&gt;</argument_list></name><argument_list pos:line="70" pos:column="79">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="71" pos:column="13">nonDefaultArguments</name> <op:operator pos:line="71" pos:column="33">=</op:operator> <op:operator pos:line="71" pos:column="35">new</op:operator> <call><name><name pos:line="71" pos:column="39">Dictionary</name><argument_list pos:line="71" pos:column="49">&lt;<argument><name pos:line="71" pos:column="50">Language</name></argument>, <argument><name><name pos:line="71" pos:column="60">string</name><index pos:line="71" pos:column="66">[]</index></name></argument>&gt;</argument_list></name><argument_list pos:line="71" pos:column="69">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="72" pos:column="13">DetectNonDefaultExecutables</name><argument_list pos:line="72" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="75" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="76" pos:column="9">/// Creates a new SrcMLGenerator</comment>
        <comment type="line" pos:line="77" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="78" pos:column="9">/// &lt;param name="defaultExecutableDirectory"&gt;The directory containing the default srcml executables to use.&lt;/param&gt;</comment>
        <constructor><specifier pos:line="79" pos:column="9">public</specifier> <name pos:line="79" pos:column="16">SrcMLGenerator</name><parameter_list pos:line="79" pos:column="30">(<param><decl><type><name pos:line="79" pos:column="31">string</name></type> <name pos:line="79" pos:column="38">defaultExecutableDirectory</name></decl></param>)</parameter_list> <member_list pos:line="79" pos:column="66">: <call><name pos:line="79" pos:column="68">this</name><argument_list pos:line="79" pos:column="72">(<argument><expr><name pos:line="79" pos:column="73">defaultExecutableDirectory</name></expr></argument>, <argument><expr><op:operator pos:line="79" pos:column="101">new</op:operator><index pos:line="79" pos:column="104">[]</index> <block pos:line="79" pos:column="107">{ <expr><name><name pos:line="79" pos:column="109">LIT</name><op:operator pos:line="79" pos:column="112">.</op:operator><name pos:line="79" pos:column="113">ArgumentLabel</name></name></expr><op:operator pos:line="79" pos:column="126">,</op:operator> <expr><name><name pos:line="79" pos:column="128">OP</name><op:operator pos:line="79" pos:column="130">.</op:operator><name pos:line="79" pos:column="131">ArgumentLabel</name></name></expr><op:operator pos:line="79" pos:column="144">,</op:operator> <expr><name><name pos:line="79" pos:column="146">POS</name><op:operator pos:line="79" pos:column="149">.</op:operator><name pos:line="79" pos:column="150">ArgumentLabel</name></name></expr><op:operator pos:line="79" pos:column="163">,</op:operator> <expr><name><name pos:line="79" pos:column="165">TYPE</name><op:operator pos:line="79" pos:column="169">.</op:operator><name pos:line="79" pos:column="170">ArgumentLabel</name></name></expr> }</block></expr></argument>)</argument_list></call> </member_list><block pos:line="79" pos:column="187">{ }</block></constructor>

        <comment type="line" pos:line="81" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="82" pos:column="9">/// Creates a new SrcMLGenerator</comment>
        <comment type="line" pos:line="83" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="84" pos:column="9">/// &lt;param name="defaultExecutableDirectory"&gt;The directory containing the default srcml executables to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="85" pos:column="9">/// &lt;param name="namespaceArguments"&gt;The namespace arguments to use when converting to SrcML.&lt;/param&gt;</comment>
        <constructor><specifier pos:line="86" pos:column="9">public</specifier> <name pos:line="86" pos:column="16">SrcMLGenerator</name><parameter_list pos:line="86" pos:column="30">(<param><decl><type><name pos:line="86" pos:column="31">string</name></type> <name pos:line="86" pos:column="38">defaultExecutableDirectory</name></decl></param>, <param><decl><type><name><name pos:line="86" pos:column="66">IEnumerable</name><argument_list pos:line="86" pos:column="77">&lt;<argument><name pos:line="86" pos:column="78">string</name></argument>&gt;</argument_list></name></type> <name pos:line="86" pos:column="86">namespaceArguments</name></decl></param>)</parameter_list> <member_list pos:line="86" pos:column="106">: <call><name pos:line="86" pos:column="108">base</name><argument_list pos:line="86" pos:column="112">()</argument_list></call> </member_list><block pos:line="86" pos:column="115">{
            <expr_stmt><expr><name pos:line="87" pos:column="13">defaultExecutable</name> <op:operator pos:line="87" pos:column="31">=</op:operator> <op:operator pos:line="87" pos:column="33">new</op:operator> <call><name pos:line="87" pos:column="37">Src2SrcMLRunner2</name><argument_list pos:line="87" pos:column="53">(<argument><expr><name pos:line="87" pos:column="54">defaultExecutableDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="88" pos:column="13">defaultArguments</name> <op:operator pos:line="88" pos:column="30">=</op:operator> <call><name><name pos:line="88" pos:column="32">namespaceArguments</name><op:operator pos:line="88" pos:column="50">.</op:operator><name pos:line="88" pos:column="51">ToArray</name></name><argument_list pos:line="88" pos:column="58">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="89" pos:column="13">nonDefaultExecutables</name> <op:operator pos:line="89" pos:column="35">=</op:operator> <op:operator pos:line="89" pos:column="37">new</op:operator> <call><name><name pos:line="89" pos:column="41">Dictionary</name><argument_list pos:line="89" pos:column="51">&lt;<argument><name pos:line="89" pos:column="52">Language</name></argument>, <argument><name pos:line="89" pos:column="62">Src2SrcMLRunner2</name></argument>&gt;</argument_list></name><argument_list pos:line="89" pos:column="79">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="90" pos:column="13">nonDefaultArguments</name> <op:operator pos:line="90" pos:column="33">=</op:operator> <op:operator pos:line="90" pos:column="35">new</op:operator> <call><name><name pos:line="90" pos:column="39">Dictionary</name><argument_list pos:line="90" pos:column="49">&lt;<argument><name pos:line="90" pos:column="50">Language</name></argument>, <argument><name><name pos:line="90" pos:column="60">string</name><index pos:line="90" pos:column="66">[]</index></name></argument>&gt;</argument_list></name><argument_list pos:line="90" pos:column="69">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="91" pos:column="13">DetectNonDefaultExecutables</name><argument_list pos:line="91" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="94" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="95" pos:column="9">/// Registers a src2srcml executable to use for the given languages.</comment>
        <comment type="line" pos:line="96" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="97" pos:column="9">/// &lt;param name="executableDirectory"&gt;The directory containing the src2srcml executable to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="98" pos:column="9">/// &lt;param name="languages"&gt;A collection of the Languages that should be parsed by this executable.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="99" pos:column="9">public</specifier> <name pos:line="99" pos:column="16">void</name></type> <name pos:line="99" pos:column="21">RegisterExecutable</name><parameter_list pos:line="99" pos:column="39">(<param><decl><type><name pos:line="99" pos:column="40">string</name></type> <name pos:line="99" pos:column="47">executableDirectory</name></decl></param>, <param><decl><type><name><name pos:line="99" pos:column="68">IEnumerable</name><argument_list pos:line="99" pos:column="79">&lt;<argument><name pos:line="99" pos:column="80">Language</name></argument>&gt;</argument_list></name></type> <name pos:line="99" pos:column="90">languages</name></decl></param>)</parameter_list> <block pos:line="99" pos:column="101">{
            <expr_stmt><expr><call><name pos:line="100" pos:column="13">RegisterExecutable</name><argument_list pos:line="100" pos:column="31">(<argument><expr><name pos:line="100" pos:column="32">executableDirectory</name></expr></argument>, <argument><expr><name pos:line="100" pos:column="53">languages</name></expr></argument>, <argument><expr><name pos:line="100" pos:column="64">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="103" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="104" pos:column="9">/// Registers a src2srcml executable to use for the given languages.</comment>
        <comment type="line" pos:line="105" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="106" pos:column="9">/// &lt;param name="executableDirectory"&gt;The directory containing the src2srcml executable to use.&lt;/param&gt;</comment>
        <comment type="line" pos:line="107" pos:column="9">/// &lt;param name="languages"&gt;A collection of the Languages that should be parsed by this executable.&lt;/param&gt;</comment>
        <comment type="line" pos:line="108" pos:column="9">/// &lt;param name="namespaceArguments"&gt;The namespace arguments to use when converting to SrcML.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="109" pos:column="9">public</specifier> <name pos:line="109" pos:column="16">void</name></type> <name pos:line="109" pos:column="21">RegisterExecutable</name><parameter_list pos:line="109" pos:column="39">(<param><decl><type><name pos:line="109" pos:column="40">string</name></type> <name pos:line="109" pos:column="47">executableDirectory</name></decl></param>, <param><decl><type><name><name pos:line="109" pos:column="68">IEnumerable</name><argument_list pos:line="109" pos:column="79">&lt;<argument><name pos:line="109" pos:column="80">Language</name></argument>&gt;</argument_list></name></type> <name pos:line="109" pos:column="90">languages</name></decl></param>, <param><decl><type><name><name pos:line="109" pos:column="101">IEnumerable</name><argument_list pos:line="109" pos:column="112">&lt;<argument><name pos:line="109" pos:column="113">string</name></argument>&gt;</argument_list></name></type> <name pos:line="109" pos:column="121">namespaceArguments</name></decl></param>)</parameter_list> <block pos:line="109" pos:column="141">{
            <if pos:line="110" pos:column="13">if<condition pos:line="110" pos:column="15">(<expr><name pos:line="110" pos:column="16">nonDefaultExecutables</name> <op:operator pos:line="110" pos:column="38">==</op:operator> <name pos:line="110" pos:column="41">null</name></expr>)</condition><then pos:line="110" pos:column="46"> <block pos:line="110" pos:column="47">{
                <expr_stmt><expr><name pos:line="111" pos:column="17">nonDefaultExecutables</name> <op:operator pos:line="111" pos:column="39">=</op:operator> <op:operator pos:line="111" pos:column="41">new</op:operator> <call><name><name pos:line="111" pos:column="45">Dictionary</name><argument_list pos:line="111" pos:column="55">&lt;<argument><name pos:line="111" pos:column="56">Language</name></argument>, <argument><name pos:line="111" pos:column="66">Src2SrcMLRunner2</name></argument>&gt;</argument_list></name><argument_list pos:line="111" pos:column="83">()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="114" pos:column="13">var</name></type> <name pos:line="114" pos:column="17">langList</name> <init pos:line="114" pos:column="26">= <expr><call><name><name pos:line="114" pos:column="28">languages</name><op:operator pos:line="114" pos:column="37">.</op:operator><name pos:line="114" pos:column="38">ToList</name></name><argument_list pos:line="114" pos:column="44">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="115" pos:column="13">var</name></type> <name pos:line="115" pos:column="17">dupLanguages</name> <init pos:line="115" pos:column="30">= <expr><call><name><name pos:line="115" pos:column="32">langList</name><op:operator pos:line="115" pos:column="40">.</op:operator><name pos:line="115" pos:column="41">Intersect</name></name><argument_list pos:line="115" pos:column="50">(<argument><expr><name><name pos:line="115" pos:column="51">nonDefaultExecutables</name><op:operator pos:line="115" pos:column="72">.</op:operator><name pos:line="115" pos:column="73">Keys</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="116" pos:column="13">if<condition pos:line="116" pos:column="15">(<expr><call><name><name pos:line="116" pos:column="16">dupLanguages</name><op:operator pos:line="116" pos:column="28">.</op:operator><name pos:line="116" pos:column="29">Any</name></name><argument_list pos:line="116" pos:column="32">()</argument_list></call></expr>)</condition><then pos:line="116" pos:column="35"> <block pos:line="116" pos:column="36">{
                <decl_stmt><decl><type><name pos:line="117" pos:column="17">var</name></type> <name pos:line="117" pos:column="21">oldExec</name> <init pos:line="117" pos:column="29">= <expr><name><name pos:line="117" pos:column="31">nonDefaultExecutables</name><index pos:line="117" pos:column="52">[<expr><call><name><name pos:line="117" pos:column="53">dupLanguages</name><op:operator pos:line="117" pos:column="65">.</op:operator><name pos:line="117" pos:column="66">First</name></name><argument_list pos:line="117" pos:column="71">()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <throw pos:line="118" pos:column="17">throw <expr><op:operator pos:line="118" pos:column="23">new</op:operator> <call><name pos:line="118" pos:column="27">InvalidOperationException</name><argument_list pos:line="118" pos:column="52">(<argument><expr><call><name><name pos:line="118" pos:column="53">string</name><op:operator pos:line="118" pos:column="59">.</op:operator><name pos:line="118" pos:column="60">Format</name></name><argument_list pos:line="118" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="118" pos:column="67">"Executable already registered for language {0}: {1}"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="118" pos:column="122">dupLanguages</name><op:operator pos:line="118" pos:column="134">.</op:operator><name pos:line="118" pos:column="135">First</name></name><argument_list pos:line="118" pos:column="140">()</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="118" pos:column="144">oldExec</name><op:operator pos:line="118" pos:column="151">.</op:operator><name pos:line="118" pos:column="152">ExecutablePath</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="121" pos:column="13">var</name></type> <name pos:line="121" pos:column="17">runner</name> <init pos:line="121" pos:column="24">= <expr><op:operator pos:line="121" pos:column="26">new</op:operator> <call><name pos:line="121" pos:column="30">Src2SrcMLRunner2</name><argument_list pos:line="121" pos:column="46">(<argument><expr><name pos:line="121" pos:column="47">executableDirectory</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <foreach pos:line="123" pos:column="13">foreach(<init><decl><type><name pos:line="123" pos:column="21">var</name></type> <name pos:line="123" pos:column="25">lang</name> <range pos:line="123" pos:column="30">in <expr><name pos:line="123" pos:column="33">languages</name></expr></range></decl></init>) <block pos:line="123" pos:column="44">{
                <expr_stmt><expr><name><name pos:line="124" pos:column="17">nonDefaultExecutables</name><index pos:line="124" pos:column="38">[<expr><name pos:line="124" pos:column="39">lang</name></expr>]</index></name> <op:operator pos:line="124" pos:column="45">=</op:operator> <name pos:line="124" pos:column="47">runner</name></expr>;</expr_stmt>
                <if pos:line="125" pos:column="17">if<condition pos:line="125" pos:column="19">(<expr><name pos:line="125" pos:column="20">namespaceArguments</name> <op:operator pos:line="125" pos:column="39">!=</op:operator> <name pos:line="125" pos:column="42">null</name></expr>)</condition><then pos:line="125" pos:column="47"> <block pos:line="125" pos:column="48">{
                    <expr_stmt><expr><name><name pos:line="126" pos:column="21">nonDefaultArguments</name><index pos:line="126" pos:column="40">[<expr><name pos:line="126" pos:column="41">lang</name></expr>]</index></name> <op:operator pos:line="126" pos:column="47">=</op:operator> <call><name><name pos:line="126" pos:column="49">namespaceArguments</name><op:operator pos:line="126" pos:column="67">.</op:operator><name pos:line="126" pos:column="68">ToArray</name></name><argument_list pos:line="126" pos:column="75">()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></foreach>
        }</block></function>

        <comment type="line" pos:line="131" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="132" pos:column="9">/// Scans the directory containing the default src2srcml executable and looks for subdirectories corresponding to defined languages.</comment>
        <comment type="line" pos:line="133" pos:column="9">/// Each of these is registered for the given language.</comment>
        <comment type="line" pos:line="134" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="135" pos:column="9">protected</specifier> <name pos:line="135" pos:column="19">void</name></type> <name pos:line="135" pos:column="24">DetectNonDefaultExecutables</name><parameter_list pos:line="135" pos:column="51">()</parameter_list> <block pos:line="135" pos:column="54">{
            <decl_stmt><decl><type><name pos:line="136" pos:column="13">var</name></type> <name pos:line="136" pos:column="17">defaultDir</name> <init pos:line="136" pos:column="28">= <expr><op:operator pos:line="136" pos:column="30">new</op:operator> <call><name pos:line="136" pos:column="34">DirectoryInfo</name><argument_list pos:line="136" pos:column="47">(<argument><expr><name><name pos:line="136" pos:column="48">defaultExecutable</name><op:operator pos:line="136" pos:column="65">.</op:operator><name pos:line="136" pos:column="66">ApplicationDirectory</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="137" pos:column="13">if<condition pos:line="137" pos:column="15">(<expr><name><name pos:line="137" pos:column="16">defaultDir</name><op:operator pos:line="137" pos:column="26">.</op:operator><name pos:line="137" pos:column="27">Exists</name></name></expr>)</condition><then pos:line="137" pos:column="34"> <block pos:line="137" pos:column="35">{
                <foreach pos:line="138" pos:column="17">foreach(<init><decl><type><name pos:line="138" pos:column="25">var</name></type> <name pos:line="138" pos:column="29">dir</name> <range pos:line="138" pos:column="33">in <expr><call><name><name pos:line="138" pos:column="36">defaultDir</name><op:operator pos:line="138" pos:column="46">.</op:operator><name pos:line="138" pos:column="47">GetDirectories</name></name><argument_list pos:line="138" pos:column="61">()</argument_list></call></expr></range></decl></init>) <block pos:line="138" pos:column="65">{
                    <decl_stmt><decl><type><name pos:line="139" pos:column="21">Language</name></type> <name pos:line="139" pos:column="30">dirlanguage</name></decl>;</decl_stmt>
                    <if pos:line="140" pos:column="21">if<condition pos:line="140" pos:column="23">(<expr><call><name><name pos:line="140" pos:column="24">Enum</name><op:operator pos:line="140" pos:column="28">.</op:operator><name><name pos:line="140" pos:column="29">TryParse</name><argument_list pos:line="140" pos:column="37">&lt;<argument><name pos:line="140" pos:column="38">Language</name></argument>&gt;</argument_list></name></name><argument_list pos:line="140" pos:column="47">(<argument><expr><name><name pos:line="140" pos:column="48">dir</name><op:operator pos:line="140" pos:column="51">.</op:operator><name pos:line="140" pos:column="52">Name</name></name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="140" pos:column="58">true</lit:literal></expr></argument>, <argument><expr pos:line="140" pos:column="64">out <name pos:line="140" pos:column="68">dirlanguage</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="140" pos:column="81"> <block pos:line="140" pos:column="82">{
                        <if pos:line="141" pos:column="25">if<condition pos:line="141" pos:column="27">(<expr><call><name><name pos:line="141" pos:column="28">File</name><op:operator pos:line="141" pos:column="32">.</op:operator><name pos:line="141" pos:column="33">Exists</name></name><argument_list pos:line="141" pos:column="39">(<argument><expr><call><name><name pos:line="141" pos:column="40">Path</name><op:operator pos:line="141" pos:column="44">.</op:operator><name pos:line="141" pos:column="45">Combine</name></name><argument_list pos:line="141" pos:column="52">(<argument><expr><name><name pos:line="141" pos:column="53">dir</name><op:operator pos:line="141" pos:column="56">.</op:operator><name pos:line="141" pos:column="57">FullName</name></name></expr></argument>, <argument><expr><name><name pos:line="141" pos:column="67">Src2SrcMLRunner2</name><op:operator pos:line="141" pos:column="83">.</op:operator><name pos:line="141" pos:column="84">Src2SrcMLExecutableName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="141" pos:column="110"> <block pos:line="141" pos:column="111">{
                            <expr_stmt><expr><call><name pos:line="142" pos:column="29">RegisterExecutable</name><argument_list pos:line="142" pos:column="47">(<argument><expr><name><name pos:line="142" pos:column="48">dir</name><op:operator pos:line="142" pos:column="51">.</op:operator><name pos:line="142" pos:column="52">FullName</name></name></expr></argument>, <argument><expr><op:operator pos:line="142" pos:column="62">new</op:operator><index pos:line="142" pos:column="65">[]</index> <block pos:line="142" pos:column="68">{ <expr><name pos:line="142" pos:column="70">dirlanguage</name></expr> }</block></expr></argument>, <argument><expr><name pos:line="142" pos:column="85">defaultArguments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></then></if>
                }</block></foreach>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="149" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="150" pos:column="9">/// Generate a SrcML document from a single source file. The language will be inferred from the extension.</comment>
        <comment type="line" pos:line="151" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="152" pos:column="9">/// &lt;param name="sourceFileName"&gt;The path of the source file to convert.&lt;/param&gt;</comment>
        <comment type="line" pos:line="153" pos:column="9">/// &lt;param name="xmlFileName"&gt;The file name to write the resulting XML to.&lt;/param&gt;</comment>
        <comment type="line" pos:line="154" pos:column="9">/// &lt;returns&gt;A SrcMLFile for &lt;paramref name="xmlFileName"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="155" pos:column="9">public</specifier> <name pos:line="155" pos:column="16">void</name></type> <name pos:line="155" pos:column="21">GenerateSrcMLFromFile</name><parameter_list pos:line="155" pos:column="42">(<param><decl><type><name pos:line="155" pos:column="43">string</name></type> <name pos:line="155" pos:column="50">sourceFileName</name></decl></param>, <param><decl><type><name pos:line="155" pos:column="66">string</name></type> <name pos:line="155" pos:column="73">xmlFileName</name></decl></param>)</parameter_list> <block pos:line="155" pos:column="86">{
            <expr_stmt><expr><call><name pos:line="156" pos:column="13">GenerateSrcMLFromFile</name><argument_list pos:line="156" pos:column="34">(<argument><expr><name pos:line="156" pos:column="35">sourceFileName</name></expr></argument>, <argument><expr><name pos:line="156" pos:column="51">xmlFileName</name></expr></argument>, <argument><expr><name><name pos:line="156" pos:column="64">Language</name><op:operator pos:line="156" pos:column="72">.</op:operator><name pos:line="156" pos:column="73">Any</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="159" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="160" pos:column="9">/// Generate a SrcML document from a single source file.</comment>
        <comment type="line" pos:line="161" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="162" pos:column="9">/// &lt;param name="sourceFileName"&gt;The path to the source file to convert.&lt;/param&gt;</comment>
        <comment type="line" pos:line="163" pos:column="9">/// &lt;param name="xmlFileName"&gt;The file name to write the resulting XML to.&lt;/param&gt;</comment>
        <comment type="line" pos:line="164" pos:column="9">/// &lt;param name="language"&gt;The language to parse the source file as. If this is Language.Any, then the language will be determined from the file extension.&lt;/param&gt;</comment>
        <comment type="line" pos:line="165" pos:column="9">/// &lt;returns&gt;A SrcMLFile for &lt;paramref name="xmlFileName"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="166" pos:column="9">public</specifier> <name pos:line="166" pos:column="16">void</name></type> <name pos:line="166" pos:column="21">GenerateSrcMLFromFile</name><parameter_list pos:line="166" pos:column="42">(<param><decl><type><name pos:line="166" pos:column="43">string</name></type> <name pos:line="166" pos:column="50">sourceFileName</name></decl></param>, <param><decl><type><name pos:line="166" pos:column="66">string</name></type> <name pos:line="166" pos:column="73">xmlFileName</name></decl></param>, <param><decl><type><name pos:line="166" pos:column="86">Language</name></type> <name pos:line="166" pos:column="95">language</name></decl></param>)</parameter_list> <block pos:line="166" pos:column="105">{
            <if pos:line="167" pos:column="13">if<condition pos:line="167" pos:column="15">(<expr><name pos:line="167" pos:column="16">language</name> <op:operator pos:line="167" pos:column="25">==</op:operator> <name><name pos:line="167" pos:column="28">Language</name><op:operator pos:line="167" pos:column="36">.</op:operator><name pos:line="167" pos:column="37">Any</name></name></expr>)</condition><then pos:line="167" pos:column="41"> <block pos:line="167" pos:column="42">{
                <decl_stmt><decl><type><name pos:line="168" pos:column="17">string</name></type> <name pos:line="168" pos:column="24">ext</name> <init pos:line="168" pos:column="28">= <expr><call><name><name pos:line="168" pos:column="30">Path</name><op:operator pos:line="168" pos:column="34">.</op:operator><name pos:line="168" pos:column="35">GetExtension</name></name><argument_list pos:line="168" pos:column="47">(<argument><expr><name pos:line="168" pos:column="48">sourceFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="169" pos:column="17">if<condition pos:line="169" pos:column="19">(<expr><name pos:line="169" pos:column="20">ext</name> <op:operator pos:line="169" pos:column="24">==</op:operator> <name pos:line="169" pos:column="27">null</name> <op:operator pos:line="169" pos:column="32">||</op:operator> <op:operator pos:line="169" pos:column="35">!</op:operator><call><name><name pos:line="169" pos:column="36">extensionMapping</name><op:operator pos:line="169" pos:column="52">.</op:operator><name pos:line="169" pos:column="53">ContainsKey</name></name><argument_list pos:line="169" pos:column="64">(<argument><expr><name pos:line="169" pos:column="65">ext</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="169" pos:column="70"> <block pos:line="169" pos:column="71">{
                    <throw pos:line="170" pos:column="21">throw <expr><op:operator pos:line="170" pos:column="27">new</op:operator> <call><name pos:line="170" pos:column="31">ArgumentException</name><argument_list pos:line="170" pos:column="48">(<argument><expr><call><name><name pos:line="170" pos:column="49">string</name><op:operator pos:line="170" pos:column="55">.</op:operator><name pos:line="170" pos:column="56">Format</name></name><argument_list pos:line="170" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="170" pos:column="63">"Unknown file extension: {0}"</lit:literal></expr></argument>, <argument><expr><name pos:line="170" pos:column="94">ext</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="170" pos:column="100">"sourceFileName"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
                <expr_stmt><expr><name pos:line="172" pos:column="17">language</name> <op:operator pos:line="172" pos:column="26">=</op:operator> <name><name pos:line="172" pos:column="28">extensionMapping</name><index pos:line="172" pos:column="44">[<expr><name pos:line="172" pos:column="45">ext</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></then></if>
            <decl_stmt><decl><type><name pos:line="174" pos:column="13">Src2SrcMLRunner2</name></type> <name pos:line="174" pos:column="30">runner</name> <init pos:line="174" pos:column="37">= <expr><call><name><name pos:line="174" pos:column="39">nonDefaultExecutables</name><op:operator pos:line="174" pos:column="60">.</op:operator><name pos:line="174" pos:column="61">ContainsKey</name></name><argument_list pos:line="174" pos:column="72">(<argument><expr><name pos:line="174" pos:column="73">language</name></expr></argument>)</argument_list></call> <op:operator pos:line="174" pos:column="83">?</op:operator> <name><name pos:line="174" pos:column="85">nonDefaultExecutables</name><index pos:line="174" pos:column="106">[<expr><name pos:line="174" pos:column="107">language</name></expr>]</index></name> <op:operator pos:line="174" pos:column="117">:</op:operator> <name pos:line="174" pos:column="119">defaultExecutable</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="175" pos:column="13">var</name></type> <name pos:line="175" pos:column="17">additionalArguments</name> <init pos:line="175" pos:column="37">= <expr><call><name pos:line="175" pos:column="39">CreateArgumentsForLanguage</name><argument_list pos:line="175" pos:column="65">(<argument><expr><name pos:line="175" pos:column="66">language</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="176" pos:column="13">var</name></type> <name pos:line="176" pos:column="17">runnerExtMap</name> <init pos:line="176" pos:column="30">= <expr><call><name pos:line="176" pos:column="32">CreateExtensionMappingForRunner</name><argument_list pos:line="176" pos:column="63">(<argument><expr><name pos:line="176" pos:column="64">runner</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="178" pos:column="13">runner</name><op:operator pos:line="178" pos:column="19">.</op:operator><name pos:line="178" pos:column="20">GenerateSrcMLFromFile</name></name><argument_list pos:line="178" pos:column="41">(<argument><expr><name pos:line="178" pos:column="42">sourceFileName</name></expr></argument>, <argument><expr><name pos:line="178" pos:column="58">xmlFileName</name></expr></argument>, <argument><expr><name pos:line="178" pos:column="71">language</name></expr></argument>, <argument><expr><name pos:line="178" pos:column="81">additionalArguments</name></expr></argument>, <argument><expr><name pos:line="178" pos:column="102">runnerExtMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="181" pos:column="9">public</specifier> <name pos:line="181" pos:column="16">void</name></type> <name pos:line="181" pos:column="21">GenerateSrcMLFromFiles</name><parameter_list pos:line="181" pos:column="43">(<param><decl><type><name><name pos:line="181" pos:column="44">IEnumerable</name><argument_list pos:line="181" pos:column="55">&lt;<argument><name pos:line="181" pos:column="56">string</name></argument>&gt;</argument_list></name></type> <name pos:line="181" pos:column="64">sourceFileNames</name></decl></param>, <param><decl><type><name pos:line="181" pos:column="81">string</name></type> <name pos:line="181" pos:column="88">xmlFileName</name></decl></param>)</parameter_list> <block pos:line="181" pos:column="101">{
            <decl_stmt><decl><type><name pos:line="182" pos:column="13">var</name></type> <name pos:line="182" pos:column="17">filesByLanguage</name> <init pos:line="182" pos:column="33">= <expr><op:operator pos:line="182" pos:column="35">new</op:operator> <call><name><name pos:line="182" pos:column="39">Dictionary</name><argument_list pos:line="182" pos:column="49">&lt;<argument><name pos:line="182" pos:column="50">Language</name></argument>, <argument><name><name pos:line="182" pos:column="60">List</name><argument_list pos:line="182" pos:column="64">&lt;<argument><name pos:line="182" pos:column="65">string</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list pos:line="182" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="183" pos:column="13">//determine which runner should process each source file</comment>
            <foreach pos:line="184" pos:column="13">foreach(<init><decl><type><name pos:line="184" pos:column="21">var</name></type> <name pos:line="184" pos:column="25">sourceFile</name> <range pos:line="184" pos:column="36">in <expr><name pos:line="184" pos:column="39">sourceFileNames</name></expr></range></decl></init>) <block pos:line="184" pos:column="56">{
                <decl_stmt><decl><type><name pos:line="185" pos:column="17">var</name></type> <name pos:line="185" pos:column="21">ext</name> <init pos:line="185" pos:column="25">= <expr><call><name><name pos:line="185" pos:column="27">Path</name><op:operator pos:line="185" pos:column="31">.</op:operator><name pos:line="185" pos:column="32">GetExtension</name></name><argument_list pos:line="185" pos:column="44">(<argument><expr><name pos:line="185" pos:column="45">sourceFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="186" pos:column="17">if<condition pos:line="186" pos:column="19">(<expr><name pos:line="186" pos:column="20">ext</name> <op:operator pos:line="186" pos:column="24">!=</op:operator> <name pos:line="186" pos:column="27">null</name> <op:operator pos:line="186" pos:column="32">&amp;&amp;</op:operator> <call><name><name pos:line="186" pos:column="35">extensionMapping</name><op:operator pos:line="186" pos:column="51">.</op:operator><name pos:line="186" pos:column="52">ContainsKey</name></name><argument_list pos:line="186" pos:column="63">(<argument><expr><name pos:line="186" pos:column="64">ext</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="186" pos:column="69"> <block pos:line="186" pos:column="70">{
                    <decl_stmt><decl><type><name pos:line="187" pos:column="21">Language</name></type> <name pos:line="187" pos:column="30">lang</name> <init pos:line="187" pos:column="35">= <expr><name><name pos:line="187" pos:column="37">extensionMapping</name><index pos:line="187" pos:column="53">[<expr><name pos:line="187" pos:column="54">ext</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <if pos:line="188" pos:column="21">if<condition pos:line="188" pos:column="23">(<expr><call><name><name pos:line="188" pos:column="24">nonDefaultExecutables</name><op:operator pos:line="188" pos:column="45">.</op:operator><name pos:line="188" pos:column="46">ContainsKey</name></name><argument_list pos:line="188" pos:column="57">(<argument><expr><name pos:line="188" pos:column="58">lang</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="188" pos:column="64"> <block pos:line="188" pos:column="65">{
                        <comment type="line" pos:line="189" pos:column="25">//this file should be parsed by a non-default runner</comment>
                        <if pos:line="190" pos:column="25">if<condition pos:line="190" pos:column="27">(<expr><op:operator pos:line="190" pos:column="28">!</op:operator><call><name><name pos:line="190" pos:column="29">filesByLanguage</name><op:operator pos:line="190" pos:column="44">.</op:operator><name pos:line="190" pos:column="45">ContainsKey</name></name><argument_list pos:line="190" pos:column="56">(<argument><expr><name pos:line="190" pos:column="57">lang</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="190" pos:column="63"> <block pos:line="190" pos:column="64">{
                            <expr_stmt><expr><name><name pos:line="191" pos:column="29">filesByLanguage</name><index pos:line="191" pos:column="44">[<expr><name pos:line="191" pos:column="45">lang</name></expr>]</index></name> <op:operator pos:line="191" pos:column="51">=</op:operator> <op:operator pos:line="191" pos:column="53">new</op:operator> <call><name><name pos:line="191" pos:column="57">List</name><argument_list pos:line="191" pos:column="61">&lt;<argument><name pos:line="191" pos:column="62">string</name></argument>&gt;</argument_list></name><argument_list pos:line="191" pos:column="69">()</argument_list></call> <block pos:line="191" pos:column="72">{ <expr><name pos:line="191" pos:column="74">sourceFile</name></expr> }</block></expr>;</expr_stmt>
                        }</block></then> <else pos:line="192" pos:column="27">else <block pos:line="192" pos:column="32">{
                            <expr_stmt><expr><name><name pos:line="193" pos:column="29">filesByLanguage</name><index pos:line="193" pos:column="44">[<expr><name pos:line="193" pos:column="45">lang</name></expr>]</index></name><op:operator pos:line="193" pos:column="50">.</op:operator><call><name pos:line="193" pos:column="51">Add</name><argument_list pos:line="193" pos:column="54">(<argument><expr><name pos:line="193" pos:column="55">sourceFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></else></if>
                    }</block></then> <else pos:line="195" pos:column="23">else <block pos:line="195" pos:column="28">{
                        <comment type="line" pos:line="196" pos:column="25">//should be parsed by the default runner</comment>
                        <if pos:line="197" pos:column="25">if<condition pos:line="197" pos:column="27">(<expr><op:operator pos:line="197" pos:column="28">!</op:operator><call><name><name pos:line="197" pos:column="29">filesByLanguage</name><op:operator pos:line="197" pos:column="44">.</op:operator><name pos:line="197" pos:column="45">ContainsKey</name></name><argument_list pos:line="197" pos:column="56">(<argument><expr><name><name pos:line="197" pos:column="57">Language</name><op:operator pos:line="197" pos:column="65">.</op:operator><name pos:line="197" pos:column="66">Any</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="197" pos:column="71"> <block pos:line="197" pos:column="72">{
                            <expr_stmt><expr><name><name pos:line="198" pos:column="29">filesByLanguage</name><index pos:line="198" pos:column="44">[<expr><name><name pos:line="198" pos:column="45">Language</name><op:operator pos:line="198" pos:column="53">.</op:operator><name pos:line="198" pos:column="54">Any</name></name></expr>]</index></name> <op:operator pos:line="198" pos:column="59">=</op:operator> <op:operator pos:line="198" pos:column="61">new</op:operator> <call><name><name pos:line="198" pos:column="65">List</name><argument_list pos:line="198" pos:column="69">&lt;<argument><name pos:line="198" pos:column="70">string</name></argument>&gt;</argument_list></name><argument_list pos:line="198" pos:column="77">()</argument_list></call> <block pos:line="198" pos:column="80">{ <expr><name pos:line="198" pos:column="82">sourceFile</name></expr> }</block></expr>;</expr_stmt>
                        }</block></then> <else pos:line="199" pos:column="27">else <block pos:line="199" pos:column="32">{
                            <expr_stmt><expr><name><name pos:line="200" pos:column="29">filesByLanguage</name><index pos:line="200" pos:column="44">[<expr><name><name pos:line="200" pos:column="45">Language</name><op:operator pos:line="200" pos:column="53">.</op:operator><name pos:line="200" pos:column="54">Any</name></name></expr>]</index></name><op:operator pos:line="200" pos:column="58">.</op:operator><call><name pos:line="200" pos:column="59">Add</name><argument_list pos:line="200" pos:column="62">(<argument><expr><name pos:line="200" pos:column="63">sourceFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></else></if>
                    }</block></else></if>
                }</block></then></if>
            }</block></foreach>

            <comment type="line" pos:line="206" pos:column="13">//convert files to srcml</comment>
            <decl_stmt><decl><type><name pos:line="207" pos:column="13">SrcMLFile</name></type> <name pos:line="207" pos:column="23">tempArchive</name> <init pos:line="207" pos:column="35">= <expr><name pos:line="207" pos:column="37">null</name></expr></init></decl>;</decl_stmt>
            <foreach pos:line="208" pos:column="13">foreach(<init><decl><type><name pos:line="208" pos:column="21">var</name></type> <name pos:line="208" pos:column="25">kvp</name> <range pos:line="208" pos:column="29">in <expr><name pos:line="208" pos:column="32">filesByLanguage</name></expr></range></decl></init>) <block pos:line="208" pos:column="49">{
                <decl_stmt><decl><type><name pos:line="209" pos:column="17">var</name></type> <name pos:line="209" pos:column="21">tempOutputFile</name> <init pos:line="209" pos:column="36">= <expr><call><name><name pos:line="209" pos:column="38">Path</name><op:operator pos:line="209" pos:column="42">.</op:operator><name pos:line="209" pos:column="43">GetTempFileName</name></name><argument_list pos:line="209" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="210" pos:column="17">SrcMLFile</name></type> <name pos:line="210" pos:column="27">tempResult</name></decl>;</decl_stmt>
                <if pos:line="211" pos:column="17">if<condition pos:line="211" pos:column="19">(<expr><name><name pos:line="211" pos:column="20">kvp</name><op:operator pos:line="211" pos:column="23">.</op:operator><name pos:line="211" pos:column="24">Key</name></name> <op:operator pos:line="211" pos:column="28">==</op:operator> <name><name pos:line="211" pos:column="31">Language</name><op:operator pos:line="211" pos:column="39">.</op:operator><name pos:line="211" pos:column="40">Any</name></name></expr>)</condition><then pos:line="211" pos:column="44"> <block pos:line="211" pos:column="45">{
                    <decl_stmt><decl><type><name pos:line="212" pos:column="21">var</name></type> <name pos:line="212" pos:column="25">mapForRunner</name> <init pos:line="212" pos:column="38">= <expr><call><name pos:line="212" pos:column="40">CreateExtensionMappingForRunner</name><argument_list pos:line="212" pos:column="71">(<argument><expr><name pos:line="212" pos:column="72">defaultExecutable</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="213" pos:column="21">defaultExecutable</name><op:operator pos:line="213" pos:column="38">.</op:operator><name pos:line="213" pos:column="39">GenerateSrcMLFromFiles</name></name><argument_list pos:line="213" pos:column="61">(<argument><expr><name><name pos:line="213" pos:column="62">kvp</name><op:operator pos:line="213" pos:column="65">.</op:operator><name pos:line="213" pos:column="66">Value</name></name></expr></argument>, <argument><expr><name pos:line="213" pos:column="73">tempOutputFile</name></expr></argument>, <argument><expr><name><name pos:line="213" pos:column="89">Language</name><op:operator pos:line="213" pos:column="97">.</op:operator><name pos:line="213" pos:column="98">Any</name></name></expr></argument>, <argument><expr><op:operator pos:line="213" pos:column="103">new</op:operator> <call><name><name pos:line="213" pos:column="107">Collection</name><argument_list pos:line="213" pos:column="117">&lt;<argument><name pos:line="213" pos:column="118">string</name></argument>&gt;</argument_list></name><argument_list pos:line="213" pos:column="125">(<argument><expr><call><name><name pos:line="213" pos:column="126">defaultArguments</name><op:operator pos:line="213" pos:column="142">.</op:operator><name pos:line="213" pos:column="143">ToList</name></name><argument_list pos:line="213" pos:column="149">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="213" pos:column="154">mapForRunner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="214" pos:column="19">else <block pos:line="214" pos:column="24">{
                    <decl_stmt><decl><type><name pos:line="215" pos:column="21">var</name></type> <name pos:line="215" pos:column="25">runner</name> <init pos:line="215" pos:column="32">= <expr><name><name pos:line="215" pos:column="34">nonDefaultExecutables</name><index pos:line="215" pos:column="55">[<expr><name><name pos:line="215" pos:column="56">kvp</name><op:operator pos:line="215" pos:column="59">.</op:operator><name pos:line="215" pos:column="60">Key</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="216" pos:column="21">var</name></type> <name pos:line="216" pos:column="25">mapForRunner</name> <init pos:line="216" pos:column="38">= <expr><call><name pos:line="216" pos:column="40">CreateExtensionMappingForRunner</name><argument_list pos:line="216" pos:column="71">(<argument><expr><name pos:line="216" pos:column="72">runner</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="217" pos:column="21">runner</name><op:operator pos:line="217" pos:column="27">.</op:operator><name pos:line="217" pos:column="28">GenerateSrcMLFromFiles</name></name><argument_list pos:line="217" pos:column="50">(<argument><expr><name><name pos:line="217" pos:column="51">kvp</name><op:operator pos:line="217" pos:column="54">.</op:operator><name pos:line="217" pos:column="55">Value</name></name></expr></argument>, <argument><expr><name pos:line="217" pos:column="62">tempOutputFile</name></expr></argument>, <argument><expr><name><name pos:line="217" pos:column="78">kvp</name><op:operator pos:line="217" pos:column="81">.</op:operator><name pos:line="217" pos:column="82">Key</name></name></expr></argument>, <argument><expr><op:operator pos:line="217" pos:column="87">new</op:operator> <call><name><name pos:line="217" pos:column="91">Collection</name><argument_list pos:line="217" pos:column="101">&lt;<argument><name pos:line="217" pos:column="102">string</name></argument>&gt;</argument_list></name><argument_list pos:line="217" pos:column="109">(<argument><expr><name><name pos:line="217" pos:column="110">nonDefaultArguments</name><index pos:line="217" pos:column="129">[<expr><name><name pos:line="217" pos:column="130">kvp</name><op:operator pos:line="217" pos:column="133">.</op:operator><name pos:line="217" pos:column="134">Key</name></name></expr>]</index></name><op:operator pos:line="217" pos:column="138">.</op:operator><call><name pos:line="217" pos:column="139">ToList</name><argument_list pos:line="217" pos:column="145">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="217" pos:column="150">mapForRunner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><name pos:line="219" pos:column="17">tempResult</name> <op:operator pos:line="219" pos:column="28">=</op:operator> <op:operator pos:line="219" pos:column="30">new</op:operator> <call><name pos:line="219" pos:column="34">SrcMLFile</name><argument_list pos:line="219" pos:column="43">(<argument><expr><name pos:line="219" pos:column="44">tempOutputFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="220" pos:column="17">var</name></type> <name pos:line="220" pos:column="21">oldArchiveFile</name> <init pos:line="220" pos:column="36">= <expr><name pos:line="220" pos:column="38">tempArchive</name> <op:operator pos:line="220" pos:column="50">!=</op:operator> <name pos:line="220" pos:column="53">null</name> <op:operator pos:line="220" pos:column="58">?</op:operator> <name><name pos:line="220" pos:column="60">tempArchive</name><op:operator pos:line="220" pos:column="71">.</op:operator><name pos:line="220" pos:column="72">FileName</name></name> <op:operator pos:line="220" pos:column="81">:</op:operator> <name pos:line="220" pos:column="83">null</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name pos:line="221" pos:column="17">tempArchive</name> <op:operator pos:line="221" pos:column="29">=</op:operator> <call><name><name pos:line="221" pos:column="31">tempResult</name><op:operator pos:line="221" pos:column="41">.</op:operator><name pos:line="221" pos:column="42">Merge</name></name><argument_list pos:line="221" pos:column="47">(<argument><expr><name pos:line="221" pos:column="48">tempArchive</name></expr></argument>, <argument><expr><call><name><name pos:line="221" pos:column="61">Path</name><op:operator pos:line="221" pos:column="65">.</op:operator><name pos:line="221" pos:column="66">GetTempFileName</name></name><argument_list pos:line="221" pos:column="81">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="222" pos:column="17">File</name><op:operator pos:line="222" pos:column="21">.</op:operator><name pos:line="222" pos:column="22">Delete</name></name><argument_list pos:line="222" pos:column="28">(<argument><expr><name pos:line="222" pos:column="29">tempOutputFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="223" pos:column="17">if<condition pos:line="223" pos:column="19">(<expr><name pos:line="223" pos:column="20">oldArchiveFile</name> <op:operator pos:line="223" pos:column="35">!=</op:operator> <name pos:line="223" pos:column="38">null</name></expr>)</condition><then pos:line="223" pos:column="43"> <block pos:line="223" pos:column="44">{ <expr_stmt><expr><call><name><name pos:line="223" pos:column="46">File</name><op:operator pos:line="223" pos:column="50">.</op:operator><name pos:line="223" pos:column="51">Delete</name></name><argument_list pos:line="223" pos:column="57">(<argument><expr><name pos:line="223" pos:column="58">oldArchiveFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></then></if>
            }</block></foreach>

            <if pos:line="226" pos:column="13">if<condition pos:line="226" pos:column="15">(<expr><name pos:line="226" pos:column="16">tempArchive</name> <op:operator pos:line="226" pos:column="28">!=</op:operator> <name pos:line="226" pos:column="31">null</name></expr>)</condition><then pos:line="226" pos:column="36"> <block pos:line="226" pos:column="37">{
                <if pos:line="227" pos:column="17">if<condition pos:line="227" pos:column="19">(<expr><call><name><name pos:line="227" pos:column="20">File</name><op:operator pos:line="227" pos:column="24">.</op:operator><name pos:line="227" pos:column="25">Exists</name></name><argument_list pos:line="227" pos:column="31">(<argument><expr><name pos:line="227" pos:column="32">xmlFileName</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="227" pos:column="45"> <block pos:line="227" pos:column="46">{
                    <expr_stmt><expr><call><name><name pos:line="228" pos:column="21">File</name><op:operator pos:line="228" pos:column="25">.</op:operator><name pos:line="228" pos:column="26">Delete</name></name><argument_list pos:line="228" pos:column="32">(<argument><expr><name pos:line="228" pos:column="33">xmlFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name><name pos:line="230" pos:column="17">File</name><op:operator pos:line="230" pos:column="21">.</op:operator><name pos:line="230" pos:column="22">Move</name></name><argument_list pos:line="230" pos:column="26">(<argument><expr><name><name pos:line="230" pos:column="27">tempArchive</name><op:operator pos:line="230" pos:column="38">.</op:operator><name pos:line="230" pos:column="39">FileName</name></name></expr></argument>, <argument><expr><name pos:line="230" pos:column="49">xmlFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>
        <comment type="line" pos:line="233" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="234" pos:column="9">/// Generates a SrcML document from a collection of source files. The language(s) will be inferred from the file extensions.</comment>
        <comment type="line" pos:line="235" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="236" pos:column="9">/// &lt;param name="sourceFileNames"&gt;The source files to generate SrcML from.&lt;/param&gt;</comment>
        <comment type="line" pos:line="237" pos:column="9">/// &lt;param name="xmlFileName"&gt;The file name to write the resulting XML to.&lt;/param&gt;</comment>
        <comment type="line" pos:line="238" pos:column="9">/// &lt;returns&gt;A SrcMLFile for &lt;paramref name="xmlFileName"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="239" pos:column="9">public</specifier> <name pos:line="239" pos:column="16">SrcMLFile</name></type> <name pos:line="239" pos:column="26">GenerateSrcMLFileFromFiles</name><parameter_list pos:line="239" pos:column="52">(<param><decl><type><name><name pos:line="239" pos:column="53">IEnumerable</name><argument_list pos:line="239" pos:column="64">&lt;<argument><name pos:line="239" pos:column="65">string</name></argument>&gt;</argument_list></name></type> <name pos:line="239" pos:column="73">sourceFileNames</name></decl></param>, <param><decl><type><name pos:line="239" pos:column="90">string</name></type> <name pos:line="239" pos:column="97">xmlFileName</name></decl></param>)</parameter_list> <block pos:line="239" pos:column="110">{
            <expr_stmt><expr><call><name pos:line="240" pos:column="13">GenerateSrcMLFromFiles</name><argument_list pos:line="240" pos:column="35">(<argument><expr><name pos:line="240" pos:column="36">sourceFileNames</name></expr></argument>, <argument><expr><name pos:line="240" pos:column="53">xmlFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="241" pos:column="13">return <expr><op:operator pos:line="241" pos:column="20">new</op:operator> <call><name pos:line="241" pos:column="24">SrcMLFile</name><argument_list pos:line="241" pos:column="33">(<argument><expr><name pos:line="241" pos:column="34">xmlFileName</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="244" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="245" pos:column="9">/// Generates a SrcML document from a collection of source files using the specified language.</comment>
        <comment type="line" pos:line="246" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="247" pos:column="9">/// &lt;param name="sourceFileNames"&gt;The source files to generate SrcML from.&lt;/param&gt;</comment>
        <comment type="line" pos:line="248" pos:column="9">/// &lt;param name="xmlFileName"&gt;The file name to write the resulting XML to.&lt;/param&gt;</comment>
        <comment type="line" pos:line="249" pos:column="9">/// &lt;param name="language"&gt;The language to parse the source files as.&lt;/param&gt;</comment>
        <comment type="line" pos:line="250" pos:column="9">/// &lt;returns&gt;A SrcMLFile for &lt;paramref name="xmlFileName"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="251" pos:column="9">public</specifier> <name pos:line="251" pos:column="16">void</name></type> <name pos:line="251" pos:column="21">GenerateSrcMLFromFiles</name><parameter_list pos:line="251" pos:column="43">(<param><decl><type><name><name pos:line="251" pos:column="44">IEnumerable</name><argument_list pos:line="251" pos:column="55">&lt;<argument><name pos:line="251" pos:column="56">string</name></argument>&gt;</argument_list></name></type> <name pos:line="251" pos:column="64">sourceFileNames</name></decl></param>, <param><decl><type><name pos:line="251" pos:column="81">string</name></type> <name pos:line="251" pos:column="88">xmlFileName</name></decl></param>, <param><decl><type><name pos:line="251" pos:column="101">Language</name></type> <name pos:line="251" pos:column="110">language</name></decl></param>)</parameter_list> <block pos:line="251" pos:column="120">{
            <decl_stmt><decl><type><name pos:line="252" pos:column="13">Src2SrcMLRunner2</name></type> <name pos:line="252" pos:column="30">runner</name> <init pos:line="252" pos:column="37">= <expr><call><name><name pos:line="252" pos:column="39">nonDefaultExecutables</name><op:operator pos:line="252" pos:column="60">.</op:operator><name pos:line="252" pos:column="61">ContainsKey</name></name><argument_list pos:line="252" pos:column="72">(<argument><expr><name pos:line="252" pos:column="73">language</name></expr></argument>)</argument_list></call> <op:operator pos:line="252" pos:column="83">?</op:operator> <name><name pos:line="252" pos:column="85">nonDefaultExecutables</name><index pos:line="252" pos:column="106">[<expr><name pos:line="252" pos:column="107">language</name></expr>]</index></name> <op:operator pos:line="252" pos:column="117">:</op:operator> <name pos:line="252" pos:column="119">defaultExecutable</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="253" pos:column="13">var</name></type> <name pos:line="253" pos:column="17">mapForRunner</name> <init pos:line="253" pos:column="30">= <expr><call><name pos:line="253" pos:column="32">CreateExtensionMappingForRunner</name><argument_list pos:line="253" pos:column="63">(<argument><expr><name pos:line="253" pos:column="64">runner</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="254" pos:column="13">var</name></type> <name pos:line="254" pos:column="17">additionalArguments</name> <init pos:line="254" pos:column="37">= <expr><call><name pos:line="254" pos:column="39">CreateArgumentsForLanguage</name><argument_list pos:line="254" pos:column="65">(<argument><expr><name pos:line="254" pos:column="66">language</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="256" pos:column="13">runner</name><op:operator pos:line="256" pos:column="19">.</op:operator><name pos:line="256" pos:column="20">GenerateSrcMLFromFiles</name></name><argument_list pos:line="256" pos:column="42">(<argument><expr><name pos:line="256" pos:column="43">sourceFileNames</name></expr></argument>, <argument><expr><name pos:line="256" pos:column="60">xmlFileName</name></expr></argument>, <argument><expr><name pos:line="256" pos:column="73">language</name></expr></argument>, <argument><expr><name pos:line="256" pos:column="83">additionalArguments</name></expr></argument>, <argument><expr><name pos:line="256" pos:column="104">mapForRunner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="259" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="260" pos:column="9">/// Generate a SrcML document from the given path and place it in the XML file.</comment>
        <comment type="line" pos:line="261" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="262" pos:column="9">/// &lt;param name="directoryPath"&gt;The directory path.&lt;/param&gt;</comment>
        <comment type="line" pos:line="263" pos:column="9">/// &lt;param name="xmlFileName"&gt;The path of the xml file.&lt;/param&gt;</comment>
        <comment type="line" pos:line="264" pos:column="9">/// &lt;returns&gt;A SrcMLFile that points at &lt;paramref name="xmlFileName"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="265" pos:column="9">public</specifier> <name pos:line="265" pos:column="16">SrcMLFile</name></type> <name pos:line="265" pos:column="26">GenerateSrcMLFileFromDirectory</name><parameter_list pos:line="265" pos:column="56">(<param><decl><type><name pos:line="265" pos:column="57">string</name></type> <name pos:line="265" pos:column="64">directoryPath</name></decl></param>, <param><decl><type><name pos:line="265" pos:column="79">string</name></type> <name pos:line="265" pos:column="86">xmlFileName</name></decl></param>)</parameter_list> <block pos:line="265" pos:column="99">{
            <return pos:line="266" pos:column="13">return <expr><call><name pos:line="266" pos:column="20">GenerateSrcMLFileFromDirectory</name><argument_list pos:line="266" pos:column="50">(<argument><expr><name pos:line="266" pos:column="51">directoryPath</name></expr></argument>, <argument><expr><name pos:line="266" pos:column="66">xmlFileName</name></expr></argument>, <argument><expr><name><name pos:line="266" pos:column="79">Language</name><op:operator pos:line="266" pos:column="87">.</op:operator><name pos:line="266" pos:column="88">Any</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="269" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="270" pos:column="9">/// Generates a SrcML document from the given path and place it in the XML file. The XML document will only contain files not present in &lt;paramref name="filesToExclude"/&gt;.</comment>
        <comment type="line" pos:line="271" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="272" pos:column="9">/// &lt;param name="directoryPath"&gt;The directory path.&lt;/param&gt;</comment>
        <comment type="line" pos:line="273" pos:column="9">/// &lt;param name="xmlFileName"&gt;The path of the xml file.&lt;/param&gt;</comment>
        <comment type="line" pos:line="274" pos:column="9">/// &lt;param name="filesToExclude"&gt;A collection of files to exclude from &lt;paramref name="xmlFileName"/&gt;.&lt;/param&gt;</comment>
        <comment type="line" pos:line="275" pos:column="9">/// &lt;returns&gt;A SrcMLFile that points at &lt;paramref name="xmlFileName"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="276" pos:column="9">public</specifier> <name pos:line="276" pos:column="16">SrcMLFile</name></type> <name pos:line="276" pos:column="26">GenerateSrcMLFileFromDirectory</name><parameter_list pos:line="276" pos:column="56">(<param><decl><type><name pos:line="276" pos:column="57">string</name></type> <name pos:line="276" pos:column="64">directoryPath</name></decl></param>, <param><decl><type><name pos:line="276" pos:column="79">string</name></type> <name pos:line="276" pos:column="86">xmlFileName</name></decl></param>, <param><decl><type><name><name pos:line="276" pos:column="99">IEnumerable</name><argument_list pos:line="276" pos:column="110">&lt;<argument><name pos:line="276" pos:column="111">string</name></argument>&gt;</argument_list></name></type> <name pos:line="276" pos:column="119">filesToExclude</name></decl></param>)</parameter_list> <block pos:line="276" pos:column="135">{
            <return pos:line="277" pos:column="13">return <expr><call><name pos:line="277" pos:column="20">GenerateSrcMLFileFromDirectory</name><argument_list pos:line="277" pos:column="50">(<argument><expr><name pos:line="277" pos:column="51">directoryPath</name></expr></argument>, <argument><expr><name pos:line="277" pos:column="66">xmlFileName</name></expr></argument>, <argument><expr><name pos:line="277" pos:column="79">filesToExclude</name></expr></argument>, <argument><expr><name><name pos:line="277" pos:column="95">Language</name><op:operator pos:line="277" pos:column="103">.</op:operator><name pos:line="277" pos:column="104">Any</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="280" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="281" pos:column="9">/// Generate a SrcML document from the given path and place it in the XML file. The file will only contain source files classified as &lt;paramref name="languageFilter"/&gt;.</comment>
        <comment type="line" pos:line="282" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="283" pos:column="9">/// &lt;param name="directoryPath"&gt;The directory path.&lt;/param&gt;</comment>
        <comment type="line" pos:line="284" pos:column="9">/// &lt;param name="xmlFileName"&gt;The path of the xml file.&lt;/param&gt;</comment>
        <comment type="line" pos:line="285" pos:column="9">/// &lt;param name="languageFilter"&gt;The language to include.&lt;/param&gt;</comment>
        <comment type="line" pos:line="286" pos:column="9">/// &lt;returns&gt;A SrcMLFile that points at &lt;paramref name="xmlFileName"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="287" pos:column="9">public</specifier> <name pos:line="287" pos:column="16">SrcMLFile</name></type> <name pos:line="287" pos:column="26">GenerateSrcMLFileFromDirectory</name><parameter_list pos:line="287" pos:column="56">(<param><decl><type><name pos:line="287" pos:column="57">string</name></type> <name pos:line="287" pos:column="64">directoryPath</name></decl></param>, <param><decl><type><name pos:line="287" pos:column="79">string</name></type> <name pos:line="287" pos:column="86">xmlFileName</name></decl></param>, <param><decl><type><name pos:line="287" pos:column="99">Language</name></type> <name pos:line="287" pos:column="108">languageFilter</name></decl></param>)</parameter_list> <block pos:line="287" pos:column="124">{
            <return pos:line="288" pos:column="13">return <expr><call><name pos:line="288" pos:column="20">GenerateSrcMLFileFromDirectory</name><argument_list pos:line="288" pos:column="50">(<argument><expr><name pos:line="288" pos:column="51">directoryPath</name></expr></argument>, <argument><expr><name pos:line="288" pos:column="66">xmlFileName</name></expr></argument>, <argument><expr><op:operator pos:line="288" pos:column="79">new</op:operator> <name><name pos:line="288" pos:column="83">string</name><index pos:line="288" pos:column="89">[]</index></name> <block pos:line="288" pos:column="92">{ }</block></expr></argument>, <argument><expr><name pos:line="288" pos:column="97">languageFilter</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="291" pos:column="9">public</specifier> <name pos:line="291" pos:column="16">SrcMLFile</name></type> <name pos:line="291" pos:column="26">GenerateSrcMLFileFromDirectory</name><parameter_list pos:line="291" pos:column="56">(<param><decl><type><name pos:line="291" pos:column="57">string</name></type> <name pos:line="291" pos:column="64">directoryPath</name></decl></param>, <param><decl><type><name pos:line="291" pos:column="79">string</name></type> <name pos:line="291" pos:column="86">xmlFileName</name></decl></param>, <param><decl><type><name><name pos:line="291" pos:column="99">IEnumerable</name><argument_list pos:line="291" pos:column="110">&lt;<argument><name pos:line="291" pos:column="111">string</name></argument>&gt;</argument_list></name></type> <name pos:line="291" pos:column="119">filesToExclude</name></decl></param>, <param><decl><type><name pos:line="291" pos:column="135">Language</name></type> <name pos:line="291" pos:column="144">languageFilter</name></decl></param>)</parameter_list> <block pos:line="291" pos:column="160">{
            <expr_stmt><expr><call><name pos:line="292" pos:column="13">GenerateSrcMLFromDirectory</name><argument_list pos:line="292" pos:column="39">(<argument><expr><name pos:line="292" pos:column="40">directoryPath</name></expr></argument>, <argument><expr><name pos:line="292" pos:column="55">xmlFileName</name></expr></argument>, <argument><expr><name pos:line="292" pos:column="68">filesToExclude</name></expr></argument>, <argument><expr><name pos:line="292" pos:column="84">languageFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="293" pos:column="13">return <expr><op:operator pos:line="293" pos:column="20">new</op:operator> <call><name pos:line="293" pos:column="24">SrcMLFile</name><argument_list pos:line="293" pos:column="33">(<argument><expr><name pos:line="293" pos:column="34">xmlFileName</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="296" pos:column="9">public</specifier> <name pos:line="296" pos:column="16">void</name></type> <name pos:line="296" pos:column="21">GenerateSrcMLFromDirectory</name><parameter_list pos:line="296" pos:column="47">(<param><decl><type><name pos:line="296" pos:column="48">string</name></type> <name pos:line="296" pos:column="55">directoryPath</name></decl></param>, <param><decl><type><name pos:line="296" pos:column="70">string</name></type> <name pos:line="296" pos:column="77">xmlFileName</name></decl></param>)</parameter_list> <block pos:line="296" pos:column="90">{

        }</block></function>

        <function><type><specifier pos:line="300" pos:column="9">public</specifier> <name pos:line="300" pos:column="16">void</name></type> <name pos:line="300" pos:column="21">GenerateSrcMLFromDirectory</name><parameter_list pos:line="300" pos:column="47">(<param><decl><type><name pos:line="300" pos:column="48">string</name></type> <name pos:line="300" pos:column="55">directoryPath</name></decl></param>, <param><decl><type><name pos:line="300" pos:column="70">string</name></type> <name pos:line="300" pos:column="77">xmlFileName</name></decl></param>, <param><decl><type><name pos:line="300" pos:column="90">Language</name></type> <name pos:line="300" pos:column="99">languageFilter</name></decl></param>)</parameter_list> <block pos:line="300" pos:column="115">{
        }</block></function>

        <function><type><specifier pos:line="303" pos:column="9">public</specifier> <name pos:line="303" pos:column="16">void</name></type> <name pos:line="303" pos:column="21">GenerateSrcMLFromDirectory</name><parameter_list pos:line="303" pos:column="47">(<param><decl><type><name pos:line="303" pos:column="48">string</name></type> <name pos:line="303" pos:column="55">directoryPath</name></decl></param>, <param><decl><type><name pos:line="303" pos:column="70">string</name></type> <name pos:line="303" pos:column="77">xmlFileName</name></decl></param>, <param><decl><type><name><name pos:line="303" pos:column="90">IEnumerable</name><argument_list pos:line="303" pos:column="101">&lt;<argument><name pos:line="303" pos:column="102">string</name></argument>&gt;</argument_list></name></type> <name pos:line="303" pos:column="110">filesToExclude</name></decl></param>)</parameter_list> <block pos:line="303" pos:column="126">{

        }</block></function>
        <comment type="line" pos:line="306" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="307" pos:column="9">/// Generate a SrcML document from the given path and place it in the XML file. The file will only contain source files classified as &lt;paramref name="languageFilter"/&gt;.</comment>
        <comment type="line" pos:line="308" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="309" pos:column="9">/// &lt;param name="directoryPath"&gt;The directory path.&lt;/param&gt;</comment>
        <comment type="line" pos:line="310" pos:column="9">/// &lt;param name="xmlFileName"&gt;The path of the xml file.&lt;/param&gt;</comment>
        <comment type="line" pos:line="311" pos:column="9">/// &lt;param name="filesToExclude"&gt;A collection of files to exclude from &lt;paramref name="xmlFileName"/&gt;.&lt;/param&gt;</comment>
        <comment type="line" pos:line="312" pos:column="9">/// &lt;param name="languageFilter"&gt;The language to include.&lt;/param&gt;</comment>
        <comment type="line" pos:line="313" pos:column="9">/// &lt;returns&gt;A SrcMLFile that points at &lt;paramref name="xmlFileName"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="314" pos:column="9">public</specifier> <name pos:line="314" pos:column="16">void</name></type> <name pos:line="314" pos:column="21">GenerateSrcMLFromDirectory</name><parameter_list pos:line="314" pos:column="47">(<param><decl><type><name pos:line="314" pos:column="48">string</name></type> <name pos:line="314" pos:column="55">directoryPath</name></decl></param>, <param><decl><type><name pos:line="314" pos:column="70">string</name></type> <name pos:line="314" pos:column="77">xmlFileName</name></decl></param>, <param><decl><type><name><name pos:line="314" pos:column="90">IEnumerable</name><argument_list pos:line="314" pos:column="101">&lt;<argument><name pos:line="314" pos:column="102">string</name></argument>&gt;</argument_list></name></type> <name pos:line="314" pos:column="110">filesToExclude</name></decl></param>, <param><decl><type><name pos:line="314" pos:column="126">Language</name></type> <name pos:line="314" pos:column="135">languageFilter</name></decl></param>)</parameter_list> <block pos:line="314" pos:column="151">{
            <if pos:line="315" pos:column="13">if<condition pos:line="315" pos:column="15">(<expr><op:operator pos:line="315" pos:column="16">!</op:operator><call><name><name pos:line="315" pos:column="17">Directory</name><op:operator pos:line="315" pos:column="26">.</op:operator><name pos:line="315" pos:column="27">Exists</name></name><argument_list pos:line="315" pos:column="33">(<argument><expr><name pos:line="315" pos:column="34">directoryPath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="315" pos:column="49"> <block pos:line="315" pos:column="50">{
                <throw pos:line="316" pos:column="17">throw <expr><op:operator pos:line="316" pos:column="23">new</op:operator> <call><name pos:line="316" pos:column="27">DirectoryNotFoundException</name><argument_list pos:line="316" pos:column="53">(<argument><expr><call><name><name pos:line="316" pos:column="54">String</name><op:operator pos:line="316" pos:column="60">.</op:operator><name pos:line="316" pos:column="61">Format</name></name><argument_list pos:line="316" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="316" pos:column="68">"{0} does not exist."</lit:literal></expr></argument>, <argument><expr><name pos:line="316" pos:column="91">directoryPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="319" pos:column="13">var</name></type> <name pos:line="319" pos:column="17">dir</name> <init pos:line="319" pos:column="21">= <expr><op:operator pos:line="319" pos:column="23">new</op:operator> <call><name pos:line="319" pos:column="27">DirectoryInfo</name><argument_list pos:line="319" pos:column="40">(<argument><expr><name pos:line="319" pos:column="41">directoryPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="320" pos:column="13">var</name></type> <name pos:line="320" pos:column="17">fileObjectsToExclude</name> <init pos:line="320" pos:column="38">= <expr><linq><from pos:line="320" pos:column="40">from <expr><name pos:line="320" pos:column="45">f</name></expr> <in pos:line="320" pos:column="47">in <expr><name pos:line="320" pos:column="50">filesToExclude</name></expr></in></from>
                                       <select pos:line="321" pos:column="40">select <expr><op:operator pos:line="321" pos:column="47">new</op:operator> <call><name pos:line="321" pos:column="51">FileInfo</name><argument_list pos:line="321" pos:column="59">(<argument><expr><name pos:line="321" pos:column="60">f</name></expr></argument>)</argument_list></call></expr></select></linq></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="322" pos:column="13">var</name></type> <name pos:line="322" pos:column="17">files</name> <init pos:line="322" pos:column="23">= <expr><op:operator pos:line="322" pos:column="25">(</op:operator><linq><from pos:line="322" pos:column="26">from <expr><name pos:line="322" pos:column="31">filePath</name></expr> <in pos:line="322" pos:column="40">in <expr><call><name><name pos:line="322" pos:column="43">dir</name><op:operator pos:line="322" pos:column="46">.</op:operator><name pos:line="322" pos:column="47">GetFiles</name></name><argument_list pos:line="322" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="322" pos:column="56">"*"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="322" pos:column="61">SearchOption</name><op:operator pos:line="322" pos:column="73">.</op:operator><name pos:line="322" pos:column="74">AllDirectories</name></name></expr></argument>)</argument_list></call></expr></in></from>
                         <where pos:line="323" pos:column="26">where <expr><call><name><name pos:line="323" pos:column="32">extensionMapping</name><op:operator pos:line="323" pos:column="48">.</op:operator><name pos:line="323" pos:column="49">ContainsKey</name></name><argument_list pos:line="323" pos:column="60">(<argument><expr><name><name pos:line="323" pos:column="61">filePath</name><op:operator pos:line="323" pos:column="69">.</op:operator><name pos:line="323" pos:column="70">Extension</name></name></expr></argument>)</argument_list></call></expr></where>
                         <select pos:line="324" pos:column="26">select <expr><name pos:line="324" pos:column="33">filePath</name></expr></select></linq><op:operator pos:line="324" pos:column="41">)</op:operator><op:operator pos:line="324" pos:column="42">.</op:operator><call><name pos:line="324" pos:column="43">Except</name><argument_list pos:line="324" pos:column="49">(<argument><expr><name pos:line="324" pos:column="50">fileObjectsToExclude</name></expr></argument>, <argument><expr><op:operator pos:line="324" pos:column="72">new</op:operator> <call><name pos:line="324" pos:column="76">FileInfoComparer</name><argument_list pos:line="324" pos:column="92">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name><name pos:line="326" pos:column="13">IEnumerable</name><argument_list pos:line="326" pos:column="24">&lt;<argument><name pos:line="326" pos:column="25">string</name></argument>&gt;</argument_list></name></type> <name pos:line="326" pos:column="33">reducedFileList</name></decl>;</decl_stmt>
            <if pos:line="327" pos:column="13">if<condition pos:line="327" pos:column="15">(<expr><name pos:line="327" pos:column="16">languageFilter</name> <op:operator pos:line="327" pos:column="31">==</op:operator> <name><name pos:line="327" pos:column="34">Language</name><op:operator pos:line="327" pos:column="42">.</op:operator><name pos:line="327" pos:column="43">Any</name></name></expr>)</condition><then pos:line="327" pos:column="47"> <block pos:line="327" pos:column="48">{
                <expr_stmt><expr><name pos:line="328" pos:column="17">reducedFileList</name> <op:operator pos:line="328" pos:column="33">=</op:operator> <linq><from pos:line="328" pos:column="35">from <expr><name pos:line="328" pos:column="40">f</name></expr> <in pos:line="328" pos:column="42">in <expr><name pos:line="328" pos:column="45">files</name></expr></in></from>
                                  <select pos:line="329" pos:column="35">select <expr><name><name pos:line="329" pos:column="42">f</name><op:operator pos:line="329" pos:column="43">.</op:operator><name pos:line="329" pos:column="44">FullName</name></name></expr></select></linq></expr>;</expr_stmt>
            }</block></then> <else pos:line="330" pos:column="15">else <block pos:line="330" pos:column="20">{
                <expr_stmt><expr><name pos:line="331" pos:column="17">reducedFileList</name> <op:operator pos:line="331" pos:column="33">=</op:operator> <linq><from pos:line="331" pos:column="35">from <expr><name pos:line="331" pos:column="40">f</name></expr> <in pos:line="331" pos:column="42">in <expr><name pos:line="331" pos:column="45">files</name></expr></in></from>
                                  <where pos:line="332" pos:column="35">where <expr><call><name><name pos:line="332" pos:column="41">extensionMapping</name><op:operator pos:line="332" pos:column="57">.</op:operator><name pos:line="332" pos:column="58">ContainsKey</name></name><argument_list pos:line="332" pos:column="69">(<argument><expr><name><name pos:line="332" pos:column="70">f</name><op:operator pos:line="332" pos:column="71">.</op:operator><name pos:line="332" pos:column="72">Extension</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="332" pos:column="83">&amp;&amp;</op:operator> <name><name pos:line="332" pos:column="86">extensionMapping</name><index pos:line="332" pos:column="102">[<expr><name><name pos:line="332" pos:column="103">f</name><op:operator pos:line="332" pos:column="104">.</op:operator><name pos:line="332" pos:column="105">Extension</name></name></expr>]</index></name> <op:operator pos:line="332" pos:column="116">==</op:operator> <name pos:line="332" pos:column="119">languageFilter</name></expr></where>
                                  <select pos:line="333" pos:column="35">select <expr><name><name pos:line="333" pos:column="42">f</name><op:operator pos:line="333" pos:column="43">.</op:operator><name pos:line="333" pos:column="44">FullName</name></name></expr></select></linq></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name pos:line="335" pos:column="13">GenerateSrcMLFileFromFiles</name><argument_list pos:line="335" pos:column="39">(<argument><expr><name pos:line="335" pos:column="40">reducedFileList</name></expr></argument>, <argument><expr><name pos:line="335" pos:column="57">xmlFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="338" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="339" pos:column="9">/// Generate SrcML from a given string of source code. The source code will be parsed as C++.</comment>
        <comment type="line" pos:line="340" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="341" pos:column="9">/// &lt;param name="source"&gt;A string containing the source code to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="342" pos:column="9">/// &lt;returns&gt;XML representing the source.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="343" pos:column="9">public</specifier> <name pos:line="343" pos:column="16">string</name></type> <name pos:line="343" pos:column="23">GenerateSrcMLFromString</name><parameter_list pos:line="343" pos:column="46">(<param><decl><type><name pos:line="343" pos:column="47">string</name></type> <name pos:line="343" pos:column="54">source</name></decl></param>)</parameter_list> <block pos:line="343" pos:column="62">{
            <return pos:line="344" pos:column="13">return <expr><call><name><name pos:line="344" pos:column="20">defaultExecutable</name><op:operator pos:line="344" pos:column="37">.</op:operator><name pos:line="344" pos:column="38">GenerateSrcMLFromString</name></name><argument_list pos:line="344" pos:column="61">(<argument><expr><name pos:line="344" pos:column="62">source</name></expr></argument>, <argument><expr><name><name pos:line="344" pos:column="70">Language</name><op:operator pos:line="344" pos:column="78">.</op:operator><name pos:line="344" pos:column="79">CPlusPlus</name></name></expr></argument>, <argument><expr><op:operator pos:line="344" pos:column="90">new</op:operator> <call><name><name pos:line="344" pos:column="94">Collection</name><argument_list pos:line="344" pos:column="104">&lt;<argument><name pos:line="344" pos:column="105">string</name></argument>&gt;</argument_list></name><argument_list pos:line="344" pos:column="112">(<argument><expr><name pos:line="344" pos:column="113">defaultArguments</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="344" pos:column="132">true</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="347" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="348" pos:column="9">/// Generate SrcML from a given string of source code.</comment>
        <comment type="line" pos:line="349" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="350" pos:column="9">/// &lt;param name="source"&gt;A string containing the source code to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="351" pos:column="9">/// &lt;param name="language"&gt;The language to parse the string as. Language.Any is not valid.&lt;/param&gt;</comment>
        <comment type="line" pos:line="352" pos:column="9">/// &lt;returns&gt;XML representing the source.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="353" pos:column="9">public</specifier> <name pos:line="353" pos:column="16">string</name></type> <name pos:line="353" pos:column="23">GenerateSrcMLFromString</name><parameter_list pos:line="353" pos:column="46">(<param><decl><type><name pos:line="353" pos:column="47">string</name></type> <name pos:line="353" pos:column="54">source</name></decl></param>, <param><decl><type><name pos:line="353" pos:column="62">Language</name></type> <name pos:line="353" pos:column="71">language</name></decl></param>)</parameter_list> <block pos:line="353" pos:column="81">{
            <if pos:line="354" pos:column="13">if<condition pos:line="354" pos:column="15">(<expr><name pos:line="354" pos:column="16">language</name> <op:operator pos:line="354" pos:column="25">==</op:operator> <name><name pos:line="354" pos:column="28">Language</name><op:operator pos:line="354" pos:column="36">.</op:operator><name pos:line="354" pos:column="37">Any</name></name></expr>)</condition><then pos:line="354" pos:column="41"> <block pos:line="354" pos:column="42">{
                <throw pos:line="355" pos:column="17">throw <expr><op:operator pos:line="355" pos:column="23">new</op:operator> <call><name pos:line="355" pos:column="27">SrcMLException</name><argument_list pos:line="355" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="355" pos:column="42">"Any is not a valid language. Pick an actual language in the enumeration"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <decl_stmt><decl><type><name pos:line="357" pos:column="13">Src2SrcMLRunner2</name></type> <name pos:line="357" pos:column="30">runner</name> <init pos:line="357" pos:column="37">= <expr><call><name><name pos:line="357" pos:column="39">nonDefaultExecutables</name><op:operator pos:line="357" pos:column="60">.</op:operator><name pos:line="357" pos:column="61">ContainsKey</name></name><argument_list pos:line="357" pos:column="72">(<argument><expr><name pos:line="357" pos:column="73">language</name></expr></argument>)</argument_list></call> <op:operator pos:line="357" pos:column="83">?</op:operator> <name><name pos:line="357" pos:column="85">nonDefaultExecutables</name><index pos:line="357" pos:column="106">[<expr><name pos:line="357" pos:column="107">language</name></expr>]</index></name> <op:operator pos:line="357" pos:column="117">:</op:operator> <name pos:line="357" pos:column="119">defaultExecutable</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="358" pos:column="13">var</name></type> <name pos:line="358" pos:column="17">additionalArguments</name> <init pos:line="358" pos:column="37">= <expr><call><name pos:line="358" pos:column="39">CreateArgumentsForLanguage</name><argument_list pos:line="358" pos:column="65">(<argument><expr><name pos:line="358" pos:column="66">language</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <return pos:line="360" pos:column="13">return <expr><call><name><name pos:line="360" pos:column="20">runner</name><op:operator pos:line="360" pos:column="26">.</op:operator><name pos:line="360" pos:column="27">GenerateSrcMLFromString</name></name><argument_list pos:line="360" pos:column="50">(<argument><expr><name pos:line="360" pos:column="51">source</name></expr></argument>, <argument><expr><name pos:line="360" pos:column="59">language</name></expr></argument>, <argument><expr><name pos:line="360" pos:column="69">additionalArguments</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="360" pos:column="90">true</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="363" pos:column="9">private</specifier> <name><name pos:line="363" pos:column="17">Collection</name><argument_list pos:line="363" pos:column="27">&lt;<argument><name pos:line="363" pos:column="28">string</name></argument>&gt;</argument_list></name></type> <name pos:line="363" pos:column="36">CreateArgumentsForLanguage</name><parameter_list pos:line="363" pos:column="62">(<param><decl><type><name pos:line="363" pos:column="63">Language</name></type> <name pos:line="363" pos:column="72">language</name></decl></param>)</parameter_list> <block pos:line="363" pos:column="82">{
            <return pos:line="364" pos:column="13">return <expr><op:operator pos:line="364" pos:column="20">new</op:operator> <call><name><name pos:line="364" pos:column="24">Collection</name><argument_list pos:line="364" pos:column="34">&lt;<argument><name pos:line="364" pos:column="35">string</name></argument>&gt;</argument_list></name><argument_list pos:line="364" pos:column="42">(<argument><expr><call><name><name pos:line="364" pos:column="43">nonDefaultArguments</name><op:operator pos:line="364" pos:column="62">.</op:operator><name pos:line="364" pos:column="63">ContainsKey</name></name><argument_list pos:line="364" pos:column="74">(<argument><expr><name pos:line="364" pos:column="75">language</name></expr></argument>)</argument_list></call> <op:operator pos:line="364" pos:column="85">?</op:operator> <name><name pos:line="364" pos:column="87">nonDefaultArguments</name><index pos:line="364" pos:column="106">[<expr><name pos:line="364" pos:column="107">language</name></expr>]</index></name> <op:operator pos:line="364" pos:column="117">:</op:operator> <name pos:line="364" pos:column="119">defaultArguments</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="367" pos:column="9">private</specifier> <name><name pos:line="367" pos:column="17">Dictionary</name><argument_list pos:line="367" pos:column="27">&lt;<argument><name pos:line="367" pos:column="28">string</name></argument>, <argument><name pos:line="367" pos:column="36">Language</name></argument>&gt;</argument_list></name></type> <name pos:line="367" pos:column="46">CreateExtensionMappingForRunner</name><parameter_list pos:line="367" pos:column="77">(<param><decl><type><name pos:line="367" pos:column="78">Src2SrcMLRunner2</name></type> <name pos:line="367" pos:column="95">runner</name></decl></param>)</parameter_list> <block pos:line="367" pos:column="103">{
            <decl_stmt><decl><type><name><name pos:line="368" pos:column="13">Dictionary</name><argument_list pos:line="368" pos:column="23">&lt;<argument><name pos:line="368" pos:column="24">string</name></argument>, <argument><name pos:line="368" pos:column="32">Language</name></argument>&gt;</argument_list></name></type> <name pos:line="368" pos:column="42">extensionMapForRunner</name> <init pos:line="368" pos:column="64">= <expr><op:operator pos:line="368" pos:column="66">new</op:operator> <call><name><name pos:line="368" pos:column="70">Dictionary</name><argument_list pos:line="368" pos:column="80">&lt;<argument><name pos:line="368" pos:column="81">string</name></argument>, <argument><name pos:line="368" pos:column="89">Language</name></argument>&gt;</argument_list></name><argument_list pos:line="368" pos:column="98">(<argument><expr><name><name pos:line="368" pos:column="99">StringComparer</name><op:operator pos:line="368" pos:column="113">.</op:operator><name pos:line="368" pos:column="114">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="369" pos:column="13">IEnumerable</name><argument_list pos:line="369" pos:column="24">&lt;<argument><name><name pos:line="369" pos:column="25">KeyValuePair</name><argument_list pos:line="369" pos:column="37">&lt;<argument><name pos:line="369" pos:column="38">string</name></argument>, <argument><name pos:line="369" pos:column="46">Language</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="369" pos:column="57">kvps</name> <init pos:line="369" pos:column="62">= <expr><call><name><name pos:line="369" pos:column="64">Enumerable</name><op:operator pos:line="369" pos:column="74">.</op:operator><name><name pos:line="369" pos:column="75">Empty</name><argument_list pos:line="369" pos:column="80">&lt;<argument><name><name pos:line="369" pos:column="81">KeyValuePair</name><argument_list pos:line="369" pos:column="93">&lt;<argument><name pos:line="369" pos:column="94">string</name></argument>,<argument><name pos:line="369" pos:column="101">Language</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name><argument_list pos:line="369" pos:column="111">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="370" pos:column="13">if<condition pos:line="370" pos:column="15">(<expr><name pos:line="370" pos:column="16">runner</name> <op:operator pos:line="370" pos:column="23">==</op:operator> <name pos:line="370" pos:column="26">defaultExecutable</name></expr>)</condition><then pos:line="370" pos:column="44"> <block pos:line="370" pos:column="45">{
                <expr_stmt><expr><name pos:line="371" pos:column="17">kvps</name> <op:operator pos:line="371" pos:column="22">=</op:operator> <linq><from pos:line="371" pos:column="24">from <expr><name pos:line="371" pos:column="29">kvp</name></expr> <in pos:line="371" pos:column="33">in <expr><name pos:line="371" pos:column="36">ExtensionMapping</name></expr></in></from>
                       <where pos:line="372" pos:column="24">where <expr><call><name><name pos:line="372" pos:column="30">defaultLanguages</name><op:operator pos:line="372" pos:column="46">.</op:operator><name pos:line="372" pos:column="47">Contains</name></name><argument_list pos:line="372" pos:column="55">(<argument><expr><name><name pos:line="372" pos:column="56">kvp</name><op:operator pos:line="372" pos:column="59">.</op:operator><name pos:line="372" pos:column="60">Value</name></name></expr></argument>)</argument_list></call></expr></where>
                       <select pos:line="373" pos:column="24">select <expr><name pos:line="373" pos:column="31">kvp</name></expr></select></linq></expr>;</expr_stmt>
            }</block></then> <else pos:line="374" pos:column="15">else <if pos:line="374" pos:column="20">if<condition pos:line="374" pos:column="22">(<expr><call><name><name pos:line="374" pos:column="23">nonDefaultExecutables</name><op:operator pos:line="374" pos:column="44">.</op:operator><name pos:line="374" pos:column="45">Values</name><op:operator pos:line="374" pos:column="51">.</op:operator><name pos:line="374" pos:column="52">Contains</name></name><argument_list pos:line="374" pos:column="60">(<argument><expr><name pos:line="374" pos:column="61">runner</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="374" pos:column="69"> <block pos:line="374" pos:column="70">{
                <decl_stmt><decl><type><name pos:line="375" pos:column="17">var</name></type> <name pos:line="375" pos:column="21">registeredLanguages</name> <init pos:line="375" pos:column="41">= <expr><op:operator pos:line="375" pos:column="43">(</op:operator><linq><from pos:line="375" pos:column="44">from <expr><name pos:line="375" pos:column="49">kvp</name></expr> <in pos:line="375" pos:column="53">in <expr><name pos:line="375" pos:column="56">nonDefaultExecutables</name></expr></in></from>
                                           <where pos:line="376" pos:column="44">where <expr><name><name pos:line="376" pos:column="50">kvp</name><op:operator pos:line="376" pos:column="53">.</op:operator><name pos:line="376" pos:column="54">Value</name></name> <op:operator pos:line="376" pos:column="60">==</op:operator> <name pos:line="376" pos:column="63">runner</name></expr></where>
                                           <select pos:line="377" pos:column="44">select <expr><name><name pos:line="377" pos:column="51">kvp</name><op:operator pos:line="377" pos:column="54">.</op:operator><name pos:line="377" pos:column="55">Key</name></name></expr></select></linq><op:operator pos:line="377" pos:column="58">)</op:operator><op:operator pos:line="377" pos:column="59">.</op:operator><call><name pos:line="377" pos:column="60">ToList</name><argument_list pos:line="377" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name pos:line="378" pos:column="17">kvps</name> <op:operator pos:line="378" pos:column="22">=</op:operator> <linq><from pos:line="378" pos:column="24">from <expr><name pos:line="378" pos:column="29">kvp</name></expr> <in pos:line="378" pos:column="33">in <expr><name pos:line="378" pos:column="36">ExtensionMapping</name></expr></in></from>
                       <where pos:line="379" pos:column="24">where <expr><call><name><name pos:line="379" pos:column="30">registeredLanguages</name><op:operator pos:line="379" pos:column="49">.</op:operator><name pos:line="379" pos:column="50">Contains</name></name><argument_list pos:line="379" pos:column="58">(<argument><expr><name><name pos:line="379" pos:column="59">kvp</name><op:operator pos:line="379" pos:column="62">.</op:operator><name pos:line="379" pos:column="63">Value</name></name></expr></argument>)</argument_list></call></expr></where>
                       <select pos:line="380" pos:column="24">select <expr><name pos:line="380" pos:column="31">kvp</name></expr></select></linq></expr>;</expr_stmt>
            }</block></then></if></else></if>
            <foreach pos:line="382" pos:column="13">foreach(<init><decl><type><name pos:line="382" pos:column="21">var</name></type> <name pos:line="382" pos:column="25">kvp</name> <range pos:line="382" pos:column="29">in <expr><name pos:line="382" pos:column="32">kvps</name></expr></range></decl></init>) <block pos:line="382" pos:column="38">{
                <expr_stmt><expr><name><name pos:line="383" pos:column="17">extensionMapForRunner</name><index pos:line="383" pos:column="38">[<expr><name><name pos:line="383" pos:column="39">kvp</name><op:operator pos:line="383" pos:column="42">.</op:operator><name pos:line="383" pos:column="43">Key</name></name></expr>]</index></name> <op:operator pos:line="383" pos:column="48">=</op:operator> <name><name pos:line="383" pos:column="50">kvp</name><op:operator pos:line="383" pos:column="53">.</op:operator><name pos:line="383" pos:column="54">Value</name></name></expr>;</expr_stmt>
            }</block></foreach>
            
            <return pos:line="386" pos:column="13">return <expr><name pos:line="386" pos:column="20">extensionMapForRunner</name></expr>;</return>
        }</block></function>

        <decl_stmt><decl><type><specifier pos:line="389" pos:column="9">public</specifier> <specifier pos:line="389" pos:column="16">override</specifier> <name><name pos:line="389" pos:column="25">ICollection</name><argument_list pos:line="389" pos:column="36">&lt;<argument><name pos:line="389" pos:column="37">string</name></argument>&gt;</argument_list></name></type> <name pos:line="389" pos:column="45">SupportedExtensions</name> <block pos:line="389" pos:column="65">{
            <function><name pos:line="390" pos:column="13">get</name> <block pos:line="390" pos:column="17">{ <return pos:line="390" pos:column="19">return <expr><name><name pos:line="390" pos:column="26">ExtensionMapping</name><op:operator pos:line="390" pos:column="42">.</op:operator><name pos:line="390" pos:column="43">Keys</name></name></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <function><type><specifier pos:line="393" pos:column="9">protected</specifier> <specifier pos:line="393" pos:column="19">override</specifier> <name pos:line="393" pos:column="28">bool</name></type> <name pos:line="393" pos:column="33">GenerateImpl</name><parameter_list pos:line="393" pos:column="45">(<param><decl><type><name pos:line="393" pos:column="46">string</name></type> <name pos:line="393" pos:column="53">inputFileName</name></decl></param>, <param><decl><type><name pos:line="393" pos:column="68">string</name></type> <name pos:line="393" pos:column="75">outputFileName</name></decl></param>)</parameter_list> <block pos:line="393" pos:column="91">{
            <expr_stmt><expr><call><name pos:line="394" pos:column="13">GenerateSrcMLFromFile</name><argument_list pos:line="394" pos:column="34">(<argument><expr><name pos:line="394" pos:column="35">inputFileName</name></expr></argument>, <argument><expr><name pos:line="394" pos:column="50">outputFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="395" pos:column="13">return <expr><lit:literal type="boolean" pos:line="395" pos:column="20">true</lit:literal></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
