<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\VisualStudio\ABB.SrcML.VisualStudio.SrcMLService\SrcMLServicePackage.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2013 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Jiang Zheng (ABB Group) - Initial implementation
 *****************************************************************************/</comment>
<using pos:line="11" pos:column="1">using <name pos:line="11" pos:column="7">System</name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">System</name><op:operator pos:line="12" pos:column="13">.</op:operator><name pos:line="12" pos:column="14">ComponentModel</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Diagnostics</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Globalization</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">IO</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Linq</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Reflection</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Runtime</name><op:operator pos:line="18" pos:column="21">.</op:operator><name pos:line="18" pos:column="22">InteropServices</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">System</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">ComponentModel</name><op:operator pos:line="19" pos:column="28">.</op:operator><name pos:line="19" pos:column="29">Design</name></name>;</using>
<using pos:line="20" pos:column="1">using <name pos:line="20" pos:column="7">EnvDTE</name>;</using>
<using pos:line="21" pos:column="1">using <name pos:line="21" pos:column="7">EnvDTE80</name>;</using>
<using pos:line="22" pos:column="1">using <name><name pos:line="22" pos:column="7">Microsoft</name><op:operator pos:line="22" pos:column="16">.</op:operator><name pos:line="22" pos:column="17">Win32</name></name>;</using>
<using pos:line="23" pos:column="1">using <name><name pos:line="23" pos:column="7">Microsoft</name><op:operator pos:line="23" pos:column="16">.</op:operator><name pos:line="23" pos:column="17">VisualStudio</name></name>;</using>
<using pos:line="24" pos:column="1">using <name><name pos:line="24" pos:column="7">Microsoft</name><op:operator pos:line="24" pos:column="16">.</op:operator><name pos:line="24" pos:column="17">VisualStudio</name><op:operator pos:line="24" pos:column="29">.</op:operator><name pos:line="24" pos:column="30">Shell</name><op:operator pos:line="24" pos:column="35">.</op:operator><name pos:line="24" pos:column="36">Interop</name></name>;</using>
<using pos:line="25" pos:column="1">using <name><name pos:line="25" pos:column="7">Microsoft</name><op:operator pos:line="25" pos:column="16">.</op:operator><name pos:line="25" pos:column="17">VisualStudio</name><op:operator pos:line="25" pos:column="29">.</op:operator><name pos:line="25" pos:column="30">OLE</name><op:operator pos:line="25" pos:column="33">.</op:operator><name pos:line="25" pos:column="34">Interop</name></name>;</using>
<using pos:line="26" pos:column="1">using <name><name pos:line="26" pos:column="7">Microsoft</name><op:operator pos:line="26" pos:column="16">.</op:operator><name pos:line="26" pos:column="17">VisualStudio</name><op:operator pos:line="26" pos:column="29">.</op:operator><name pos:line="26" pos:column="30">Shell</name></name>;</using>
<using pos:line="27" pos:column="1">using <name pos:line="27" pos:column="7">log4net</name>;</using>
<using pos:line="28" pos:column="1">using <name><name pos:line="28" pos:column="7">ABB</name><op:operator pos:line="28" pos:column="10">.</op:operator><name pos:line="28" pos:column="11">SrcML</name><op:operator pos:line="28" pos:column="16">.</op:operator><name pos:line="28" pos:column="17">Utilities</name></name>;</using>
<using pos:line="29" pos:column="1">using <name><name pos:line="29" pos:column="7">ABB</name><op:operator pos:line="29" pos:column="10">.</op:operator><name pos:line="29" pos:column="11">VisualStudio</name></name>;</using>
<using pos:line="30" pos:column="1">using <name><name pos:line="30" pos:column="7">ABB</name><op:operator pos:line="30" pos:column="10">.</op:operator><name pos:line="30" pos:column="11">SrcML</name><op:operator pos:line="30" pos:column="16">.</op:operator><name pos:line="30" pos:column="17">Data</name></name>;</using>

<namespace pos:line="32" pos:column="1">namespace <name><name pos:line="32" pos:column="11">ABB</name><op:operator pos:line="32" pos:column="14">.</op:operator><name pos:line="32" pos:column="15">SrcML</name><op:operator pos:line="32" pos:column="20">.</op:operator><name pos:line="32" pos:column="21">VisualStudio</name></name> <block pos:line="32" pos:column="34">{
    <comment type="line" pos:line="33" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="34" pos:column="5">/// This is the class that implements the package exposed by this assembly.</comment>
    <comment type="line" pos:line="35" pos:column="5">///</comment>
    <comment type="line" pos:line="36" pos:column="5">/// The minimum requirement for a class to be considered a valid package for Visual Studio</comment>
    <comment type="line" pos:line="37" pos:column="5">/// is to implement the IVsPackage interface and register itself with the shell.</comment>
    <comment type="line" pos:line="38" pos:column="5">/// This package uses the helper classes defined inside the Managed Package Framework (MPF)</comment>
    <comment type="line" pos:line="39" pos:column="5">/// to do it: it derives from the Package class that provides the implementation of the </comment>
    <comment type="line" pos:line="40" pos:column="5">/// IVsPackage interface and uses the registration attributes defined in the framework to </comment>
    <comment type="line" pos:line="41" pos:column="5">/// register itself and its components with the shell.</comment>
    <comment type="line" pos:line="42" pos:column="5">/// </comment>
    <comment type="line" pos:line="43" pos:column="5">/// Reference: Microsoft sample</comment>
    <comment type="line" pos:line="44" pos:column="5">/// This is the package that exposes the Visual Studio services.</comment>
    <comment type="line" pos:line="45" pos:column="5">/// In order to expose a service a package must implement the IServiceProvider interface (the one </comment>
    <comment type="line" pos:line="46" pos:column="5">/// defined in the Microsoft.VisualStudio.OLE.Interop.dll interop assembly, not the one defined in the</comment>
    <comment type="line" pos:line="47" pos:column="5">/// .NET Framework) and notify the shell that it is exposing the services.</comment>
    <comment type="line" pos:line="48" pos:column="5">/// The implementation of the interface can be somewhat difficult and error prone because it is not </comment>
    <comment type="line" pos:line="49" pos:column="5">/// designed for managed clients, but using the Managed Package Framework (MPF) we donâ€™t really need</comment>
    <comment type="line" pos:line="50" pos:column="5">/// to write any code: if our package derives from the Package class, then it will get for free the </comment>
    <comment type="line" pos:line="51" pos:column="5">/// implementation of IServiceProvider from the base class.</comment>
    <comment type="line" pos:line="52" pos:column="5">/// The notification to the shell about the exported service is done using the IProfferService interface</comment>
    <comment type="line" pos:line="53" pos:column="5">/// exposed by the SProfferService service; this service keeps a list of the services exposed globally </comment>
    <comment type="line" pos:line="54" pos:column="5">/// by the loaded packages and allows the shell to find the service even if the service provider that </comment>
    <comment type="line" pos:line="55" pos:column="5">/// exposes it is not inside the currently active chain of providers. If we simply use this service, </comment>
    <comment type="line" pos:line="56" pos:column="5">/// then the service will be available for all the clients when the package is loaded, but the service</comment>
    <comment type="line" pos:line="57" pos:column="5">/// will be not usable when the package is not loaded. To avoid this problem and tell the shell that </comment>
    <comment type="line" pos:line="58" pos:column="5">/// it has to make sure that this package is loaded when the service is queried, we have to register </comment>
    <comment type="line" pos:line="59" pos:column="5">/// the service and package inside the services section of the registry. The MPF exposes the </comment>
    <comment type="line" pos:line="60" pos:column="5">/// ProvideServiceAttribute registration attribute to add the information needed inside the registry, </comment>
    <comment type="line" pos:line="61" pos:column="5">/// so that all we have to do is to use it in the definition of the class that implements the package.</comment>
    <comment type="line" pos:line="62" pos:column="5">/// &lt;/summary&gt;</comment>

    <comment type="line" pos:line="64" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="65" pos:column="5">/// This attribute tells the PkgDef creation utility (CreatePkgDef.exe) that this class is a package.</comment>
    <comment type="line" pos:line="66" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><attribute pos:line="67" pos:column="5">[<expr><call><name pos:line="67" pos:column="6">PackageRegistration</name><argument_list pos:line="67" pos:column="25">(<argument><expr><name pos:line="67" pos:column="26">UseManagedResourcesOnly</name> <op:operator pos:line="67" pos:column="50">=</op:operator> <lit:literal type="boolean" pos:line="67" pos:column="52">true</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>

    <comment type="line" pos:line="69" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="70" pos:column="5">/// This attribute is used to register the information needed to show this package in the Help/About dialog of Visual Studio.</comment>
    <comment type="line" pos:line="71" pos:column="5">/// &lt;/summary&gt;</comment>
    <attribute pos:line="72" pos:column="5">[<expr><call><name pos:line="72" pos:column="6">InstalledProductRegistration</name><argument_list pos:line="72" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="72" pos:column="35">"#110"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="72" pos:column="43">"#112"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="72" pos:column="51">"1.0"</lit:literal></expr></argument>, <argument><expr><name pos:line="72" pos:column="58">IconResourceID</name> <op:operator pos:line="72" pos:column="73">=</op:operator> <lit:literal type="number" pos:line="72" pos:column="75">400</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>

    <comment type="line" pos:line="74" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="75" pos:column="5">/// This attribute is needed to let the shell know that this package exposes some menus.</comment>
    <comment type="line" pos:line="76" pos:column="5">/// &lt;/summary&gt;</comment>
    <attribute pos:line="77" pos:column="5">[<expr><call><name pos:line="77" pos:column="6">ProvideMenuResource</name><argument_list pos:line="77" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="77" pos:column="26">"Menus.ctmenu"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="77" pos:column="42">1</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>

    <comment type="line" pos:line="79" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="80" pos:column="5">/// Step 1: Add the ProvideServiceAttribute to the VSPackage that provides the global service.</comment>
    <comment type="line" pos:line="81" pos:column="5">/// ProvideServiceAttribute registers SSrcMLGlobalService with Visual Studio. Only the global service must be registered.</comment>
    <comment type="line" pos:line="82" pos:column="5">/// &lt;/summary&gt;</comment>
    <attribute pos:line="83" pos:column="5">[<expr><call><name pos:line="83" pos:column="6">ProvideService</name><argument_list pos:line="83" pos:column="20">(<argument><expr><call><name pos:line="83" pos:column="21">typeof</name><argument_list pos:line="83" pos:column="27">(<argument><expr><name pos:line="83" pos:column="28">SCursorMonitorService</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>]</attribute>
    <attribute pos:line="84" pos:column="5">[<expr><call><name pos:line="84" pos:column="6">ProvideService</name><argument_list pos:line="84" pos:column="20">(<argument><expr><call><name pos:line="84" pos:column="21">typeof</name><argument_list pos:line="84" pos:column="27">(<argument><expr><name pos:line="84" pos:column="28">SSrcMLGlobalService</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>]</attribute>
    <attribute pos:line="85" pos:column="5">[<expr><call><name pos:line="85" pos:column="6">ProvideService</name><argument_list pos:line="85" pos:column="20">(<argument><expr><call><name pos:line="85" pos:column="21">typeof</name><argument_list pos:line="85" pos:column="27">(<argument><expr><name pos:line="85" pos:column="28">STaskManagerService</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>]</attribute>
    <attribute pos:line="86" pos:column="5">[<expr><call><name pos:line="86" pos:column="6">ProvideService</name><argument_list pos:line="86" pos:column="20">(<argument><expr><call><name pos:line="86" pos:column="21">typeof</name><argument_list pos:line="86" pos:column="27">(<argument><expr><name pos:line="86" pos:column="28">SSrcMLDataService</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>]</attribute>
    <attribute pos:line="87" pos:column="5">[<expr><call><name pos:line="87" pos:column="6">ProvideService</name><argument_list pos:line="87" pos:column="20">(<argument><expr><call><name pos:line="87" pos:column="21">typeof</name><argument_list pos:line="87" pos:column="27">(<argument><expr><name pos:line="87" pos:column="28">SWorkingSetRegistrarService</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>]</attribute>
    <comment type="line" pos:line="88" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="89" pos:column="5">/// Get the Guid.</comment>
    <comment type="line" pos:line="90" pos:column="5">/// &lt;/summary&gt;</comment>
    <attribute pos:line="91" pos:column="5">[<expr><call><name pos:line="91" pos:column="6">Guid</name><argument_list pos:line="91" pos:column="10">(<argument><expr><name><name pos:line="91" pos:column="11">GuidList</name><op:operator pos:line="91" pos:column="19">.</op:operator><name pos:line="91" pos:column="20">SrcMLServicePackageId</name></name></expr></argument>)</argument_list></call></expr>]</attribute>

    <comment type="line" pos:line="93" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="94" pos:column="5">/// This attribute starts up this extension early so that it can listen to solution events.</comment>
    <comment type="line" pos:line="95" pos:column="5">/// &lt;/summary&gt;</comment>
    <attribute pos:line="96" pos:column="5">[<expr><call><name pos:line="96" pos:column="6">ProvideAutoLoad</name><argument_list pos:line="96" pos:column="21">(<argument><expr><name><name pos:line="96" pos:column="22">UIContextGuids</name><op:operator pos:line="96" pos:column="36">.</op:operator><name pos:line="96" pos:column="37">NoSolution</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="97" pos:column="5">public</specifier> <specifier pos:line="97" pos:column="12">sealed</specifier> class <name pos:line="97" pos:column="25">SrcMLServicePackage</name> <super pos:line="97" pos:column="45">: <name pos:line="97" pos:column="47">Package</name></super> <block pos:line="97" pos:column="55">{

        <comment type="line" pos:line="99" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="100" pos:column="9">/// SrcML.NET Service.</comment>
        <comment type="line" pos:line="101" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="102" pos:column="9">private</specifier> <name pos:line="102" pos:column="17">ISrcMLGlobalService</name></type> <name pos:line="102" pos:column="37">srcMLService</name></decl>;</decl_stmt>

        <comment type="line" pos:line="104" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="105" pos:column="9">/// Events relating to the state of the environment.</comment>
        <comment type="line" pos:line="106" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="107" pos:column="9">private</specifier> <name pos:line="107" pos:column="17">DTEEvents</name></type> <name pos:line="107" pos:column="27">DteEvents</name></decl>;</decl_stmt>

        <comment type="line" pos:line="109" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="110" pos:column="9">/// Events for changes to a solution.</comment>
        <comment type="line" pos:line="111" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="112" pos:column="9">private</specifier> <name pos:line="112" pos:column="17">SolutionEvents</name></type> <name pos:line="112" pos:column="32">SolutionEvents</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="114" pos:column="9">private</specifier> <name pos:line="114" pos:column="17">IWorkingSetRegistrarService</name></type> <name pos:line="114" pos:column="45">_workingSetRegistrar</name></decl>;</decl_stmt>

        <comment type="line" pos:line="116" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="117" pos:column="9">/// log4net logger.</comment>
        <comment type="line" pos:line="118" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="119" pos:column="9">private</specifier> <name pos:line="119" pos:column="17">ILog</name></type> <name pos:line="119" pos:column="22">logger</name></decl>;</decl_stmt>

        <comment type="line" pos:line="121" pos:column="9">//private ICursorMonitorService cursorMonitor;</comment>

        <comment type="line" pos:line="123" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="124" pos:column="9">/// Default constructor of the package.</comment>
        <comment type="line" pos:line="125" pos:column="9">/// Inside this method you can place any initialization code that does not require </comment>
        <comment type="line" pos:line="126" pos:column="9">/// any Visual Studio service because at this point the package object is created but </comment>
        <comment type="line" pos:line="127" pos:column="9">/// not sited yet inside Visual Studio environment. The place to do all the other </comment>
        <comment type="line" pos:line="128" pos:column="9">/// initialization is the Initialize method.</comment>
        <comment type="line" pos:line="129" pos:column="9">/// &lt;/summary&gt;</comment>
        <constructor><specifier pos:line="130" pos:column="9">public</specifier> <name pos:line="130" pos:column="16">SrcMLServicePackage</name><parameter_list pos:line="130" pos:column="35">()</parameter_list> <block pos:line="130" pos:column="38">{
            <comment type="line" pos:line="131" pos:column="13">//WriteActivityLog("SrcMLServicePackage.SrcMLServicePackage()");    // Leave this here as an example of how to use Activity Log</comment>
            <expr_stmt><expr><call><name><name pos:line="132" pos:column="13">SrcMLFileLogger</name><op:operator pos:line="132" pos:column="28">.</op:operator><name pos:line="132" pos:column="29">DefaultLogger</name><op:operator pos:line="132" pos:column="42">.</op:operator><name pos:line="132" pos:column="43">Info</name></name><argument_list pos:line="132" pos:column="47">(<argument><expr><call><name><name pos:line="132" pos:column="48">string</name><op:operator pos:line="132" pos:column="54">.</op:operator><name pos:line="132" pos:column="55">Format</name></name><argument_list pos:line="132" pos:column="61">(<argument><expr><name><name pos:line="132" pos:column="62">CultureInfo</name><op:operator pos:line="132" pos:column="73">.</op:operator><name pos:line="132" pos:column="74">CurrentCulture</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="132" pos:column="90">"Entering constructor for: {0}"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="132" pos:column="123">this</name><op:operator pos:line="132" pos:column="127">.</op:operator><name pos:line="132" pos:column="128">ToString</name></name><argument_list pos:line="132" pos:column="136">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="134" pos:column="13">// Step 2: Add callback methods to the service container to create the services.</comment>
            <comment type="line" pos:line="135" pos:column="13">// Here we update the list of the provided services with the ones specific for this package.</comment>
            <comment type="line" pos:line="136" pos:column="13">// Notice that we set to true the boolean flag about the service promotion for the global:</comment>
            <comment type="line" pos:line="137" pos:column="13">// to promote the service is actually to proffer it globally using the SProfferService service.</comment>
            <comment type="line" pos:line="138" pos:column="13">// For performance reasons we donâ€™t want to instantiate the services now, but only when and </comment>
            <comment type="line" pos:line="139" pos:column="13">// if some client asks for them, so we here define only the type of the service and a function</comment>
            <comment type="line" pos:line="140" pos:column="13">// that will be called the first time the package will receive a request for the service. </comment>
            <comment type="line" pos:line="141" pos:column="13">// This callback function is the one responsible for creating the instance of the service </comment>
            <comment type="line" pos:line="142" pos:column="13">// object.</comment>
            <comment type="line" pos:line="143" pos:column="13">// The SrcML local service has not been used so far.</comment>
            <decl_stmt><decl><type><name pos:line="144" pos:column="13">IServiceContainer</name></type> <name pos:line="144" pos:column="31">serviceContainer</name> <init pos:line="144" pos:column="48">= <expr><name pos:line="144" pos:column="50">this</name> <op:operator pos:line="144" pos:column="55">as</op:operator> <name pos:line="144" pos:column="58">IServiceContainer</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="145" pos:column="13">ServiceCreatorCallback</name></type> <name pos:line="145" pos:column="36">callback</name> <init pos:line="145" pos:column="45">= <expr><op:operator pos:line="145" pos:column="47">new</op:operator> <call><name pos:line="145" pos:column="51">ServiceCreatorCallback</name><argument_list pos:line="145" pos:column="73">(<argument><expr><name pos:line="145" pos:column="74">CreateService</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="146" pos:column="13">serviceContainer</name><op:operator pos:line="146" pos:column="29">.</op:operator><name pos:line="146" pos:column="30">AddService</name></name><argument_list pos:line="146" pos:column="40">(<argument><expr><call><name pos:line="146" pos:column="41">typeof</name><argument_list pos:line="146" pos:column="47">(<argument><expr><name pos:line="146" pos:column="48">SSrcMLGlobalService</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="146" pos:column="70">callback</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="146" pos:column="80">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="147" pos:column="13">serviceContainer</name><op:operator pos:line="147" pos:column="29">.</op:operator><name pos:line="147" pos:column="30">AddService</name></name><argument_list pos:line="147" pos:column="40">(<argument><expr><call><name pos:line="147" pos:column="41">typeof</name><argument_list pos:line="147" pos:column="47">(<argument><expr><name pos:line="147" pos:column="48">SSrcMLDataService</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="147" pos:column="68">callback</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="147" pos:column="78">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="148" pos:column="13">serviceContainer</name><op:operator pos:line="148" pos:column="29">.</op:operator><name pos:line="148" pos:column="30">AddService</name></name><argument_list pos:line="148" pos:column="40">(<argument><expr><call><name pos:line="148" pos:column="41">typeof</name><argument_list pos:line="148" pos:column="47">(<argument><expr><name pos:line="148" pos:column="48">STaskManagerService</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="148" pos:column="70">callback</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="148" pos:column="80">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="149" pos:column="13">serviceContainer</name><op:operator pos:line="149" pos:column="29">.</op:operator><name pos:line="149" pos:column="30">AddService</name></name><argument_list pos:line="149" pos:column="40">(<argument><expr><call><name pos:line="149" pos:column="41">typeof</name><argument_list pos:line="149" pos:column="47">(<argument><expr><name pos:line="149" pos:column="48">SWorkingSetRegistrarService</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="149" pos:column="78">callback</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="149" pos:column="88">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="150" pos:column="13">serviceContainer</name><op:operator pos:line="150" pos:column="29">.</op:operator><name pos:line="150" pos:column="30">AddService</name></name><argument_list pos:line="150" pos:column="40">(<argument><expr><call><name pos:line="150" pos:column="41">typeof</name><argument_list pos:line="150" pos:column="47">(<argument><expr><name pos:line="150" pos:column="48">SCursorMonitorService</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="150" pos:column="72">callback</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="150" pos:column="82">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="151" pos:column="13">serviceContainer</name><op:operator pos:line="151" pos:column="29">.</op:operator><name pos:line="151" pos:column="30">AddService</name></name><argument_list pos:line="151" pos:column="40">(<argument><expr><call><name pos:line="151" pos:column="41">typeof</name><argument_list pos:line="151" pos:column="47">(<argument><expr><name pos:line="151" pos:column="48">SMethodTrackService</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="151" pos:column="70">callback</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="151" pos:column="80">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="154" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="155" pos:column="9">/// The directory where this package is installed</comment>
        <comment type="line" pos:line="156" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="157" pos:column="9">public</specifier> <name pos:line="157" pos:column="16">string</name></type> <name pos:line="157" pos:column="23">ExtensionDirectory</name> <block pos:line="157" pos:column="42">{ <function_decl><name pos:line="157" pos:column="44">get</name>;</function_decl> <function_decl><specifier pos:line="157" pos:column="49">private</specifier> <name pos:line="157" pos:column="57">set</name>;</function_decl> }</block></decl></decl_stmt>
        <comment type="line" pos:line="158" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="159" pos:column="9">/// Step 3: Implement the callback method.</comment>
        <comment type="line" pos:line="160" pos:column="9">/// This is the function that will create a new instance of the services the first time a client</comment>
        <comment type="line" pos:line="161" pos:column="9">/// will ask for a specific service type. It is called by the base class's implementation of</comment>
        <comment type="line" pos:line="162" pos:column="9">/// IServiceProvider.</comment>
        <comment type="line" pos:line="163" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="164" pos:column="9">/// &lt;param name="container"&gt;The IServiceContainer that needs a new instance of the service.</comment>
        <comment type="line" pos:line="165" pos:column="9">///                         This must be this package.&lt;/param&gt;</comment>
        <comment type="line" pos:line="166" pos:column="9">/// &lt;param name="serviceType"&gt;The type of service to create.&lt;/param&gt;</comment>
        <comment type="line" pos:line="167" pos:column="9">/// &lt;returns&gt;The instance of the service.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="168" pos:column="9">private</specifier> <name pos:line="168" pos:column="17">object</name></type> <name pos:line="168" pos:column="24">CreateService</name><parameter_list pos:line="168" pos:column="37">(<param><decl><type><name pos:line="168" pos:column="38">IServiceContainer</name></type> <name pos:line="168" pos:column="56">container</name></decl></param>, <param><decl><type><name pos:line="168" pos:column="67">Type</name></type> <name pos:line="168" pos:column="72">serviceType</name></decl></param>)</parameter_list> <block pos:line="168" pos:column="85">{
            <expr_stmt><expr><call><name><name pos:line="169" pos:column="13">SrcMLFileLogger</name><op:operator pos:line="169" pos:column="28">.</op:operator><name pos:line="169" pos:column="29">DefaultLogger</name><op:operator pos:line="169" pos:column="42">.</op:operator><name pos:line="169" pos:column="43">Info</name></name><argument_list pos:line="169" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="169" pos:column="48">"    SrcMLServicePackage.CreateService()"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="171" pos:column="13">// Check if the IServiceContainer is this package.</comment>
            <if pos:line="172" pos:column="13">if<condition pos:line="172" pos:column="15">(<expr><name pos:line="172" pos:column="16">container</name> <op:operator pos:line="172" pos:column="26">!=</op:operator> <name pos:line="172" pos:column="29">this</name></expr>)</condition><then pos:line="172" pos:column="34"> <block pos:line="172" pos:column="35">{
                <expr_stmt><expr><call><name><name pos:line="173" pos:column="17">Trace</name><op:operator pos:line="173" pos:column="22">.</op:operator><name pos:line="173" pos:column="23">WriteLine</name></name><argument_list pos:line="173" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="173" pos:column="33">"ServicesPackage.CreateService called from an unexpected service container."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="174" pos:column="17">return <expr><name pos:line="174" pos:column="24">null</name></expr>;</return>
            }</block></then></if>

            <comment type="line" pos:line="177" pos:column="13">// Find the type of the requested service and create it.</comment>

            <if pos:line="179" pos:column="13">if<condition pos:line="179" pos:column="15">(<expr><call><name pos:line="179" pos:column="16">typeof</name><argument_list pos:line="179" pos:column="22">(<argument><expr><name pos:line="179" pos:column="23">SCursorMonitorService</name></expr></argument>)</argument_list></call> <op:operator pos:line="179" pos:column="46">==</op:operator> <name pos:line="179" pos:column="49">serviceType</name></expr>)</condition><then pos:line="179" pos:column="61"> <block pos:line="179" pos:column="62">{
                <return pos:line="180" pos:column="17">return <expr><op:operator pos:line="180" pos:column="24">new</op:operator> <call><name pos:line="180" pos:column="28">CursorMonitor</name><argument_list pos:line="180" pos:column="41">(<argument><expr><name pos:line="180" pos:column="42">this</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>

            <if pos:line="183" pos:column="13">if <condition pos:line="183" pos:column="16">(<expr><call><name pos:line="183" pos:column="17">typeof</name><argument_list pos:line="183" pos:column="23">(<argument><expr><name pos:line="183" pos:column="24">SMethodTrackService</name></expr></argument>)</argument_list></call> <op:operator pos:line="183" pos:column="45">==</op:operator> <name pos:line="183" pos:column="48">serviceType</name></expr>)</condition><then pos:line="183" pos:column="60">
            <block pos:line="184" pos:column="13">{
                <return pos:line="185" pos:column="17">return <expr><op:operator pos:line="185" pos:column="24">new</op:operator> <call><name pos:line="185" pos:column="28">MethodTrack</name><argument_list pos:line="185" pos:column="39">(<argument><expr><name pos:line="185" pos:column="40">this</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>

            <if pos:line="188" pos:column="13">if<condition pos:line="188" pos:column="15">(<expr><call><name pos:line="188" pos:column="16">typeof</name><argument_list pos:line="188" pos:column="22">(<argument><expr><name pos:line="188" pos:column="23">SSrcMLGlobalService</name></expr></argument>)</argument_list></call> <op:operator pos:line="188" pos:column="44">==</op:operator> <name pos:line="188" pos:column="47">serviceType</name></expr>)</condition><then pos:line="188" pos:column="59"> <block pos:line="188" pos:column="60">{
                <comment type="line" pos:line="189" pos:column="17">// Build the global service using this package as its service provider.</comment>
                <decl_stmt><decl><type><name pos:line="190" pos:column="17">ITaskManagerService</name></type> <name pos:line="190" pos:column="37">taskManager</name> <init pos:line="190" pos:column="49">= <expr><call><name pos:line="190" pos:column="51">GetService</name><argument_list pos:line="190" pos:column="61">(<argument><expr><call><name pos:line="190" pos:column="62">typeof</name><argument_list pos:line="190" pos:column="68">(<argument><expr><name pos:line="190" pos:column="69">STaskManagerService</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="190" pos:column="91">as</op:operator> <name pos:line="190" pos:column="94">ITaskManagerService</name></expr></init></decl>;</decl_stmt>
                <return pos:line="191" pos:column="17">return <expr><op:operator pos:line="191" pos:column="24">new</op:operator> <call><name pos:line="191" pos:column="28">VsMonitoringService</name><argument_list pos:line="191" pos:column="47">(<argument><expr><name pos:line="191" pos:column="48">this</name></expr></argument>, <argument><expr><name pos:line="191" pos:column="54">taskManager</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>

            <if pos:line="194" pos:column="13">if<condition pos:line="194" pos:column="15">(<expr><call><name pos:line="194" pos:column="16">typeof</name><argument_list pos:line="194" pos:column="22">(<argument><expr><name pos:line="194" pos:column="23">SSrcMLDataService</name></expr></argument>)</argument_list></call> <op:operator pos:line="194" pos:column="42">==</op:operator> <name pos:line="194" pos:column="45">serviceType</name></expr>)</condition><then pos:line="194" pos:column="57"> <block pos:line="194" pos:column="58">{
                <decl_stmt><decl><type><name pos:line="195" pos:column="17">ITaskManagerService</name></type> <name pos:line="195" pos:column="37">taskManager</name> <init pos:line="195" pos:column="49">= <expr><call><name pos:line="195" pos:column="51">GetService</name><argument_list pos:line="195" pos:column="61">(<argument><expr><call><name pos:line="195" pos:column="62">typeof</name><argument_list pos:line="195" pos:column="68">(<argument><expr><name pos:line="195" pos:column="69">STaskManagerService</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="195" pos:column="91">as</op:operator> <name pos:line="195" pos:column="94">ITaskManagerService</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="196" pos:column="17">ISrcMLGlobalService</name></type> <name pos:line="196" pos:column="37">srcMLService</name> <init pos:line="196" pos:column="50">= <expr><call><name pos:line="196" pos:column="52">GetService</name><argument_list pos:line="196" pos:column="62">(<argument><expr><call><name pos:line="196" pos:column="63">typeof</name><argument_list pos:line="196" pos:column="69">(<argument><expr><name pos:line="196" pos:column="70">SSrcMLGlobalService</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="196" pos:column="92">as</op:operator> <name pos:line="196" pos:column="95">ISrcMLGlobalService</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="197" pos:column="17">IWorkingSetRegistrarService</name></type> <name pos:line="197" pos:column="45">workingSetService</name> <init pos:line="197" pos:column="63">= <expr><call><name pos:line="197" pos:column="65">GetService</name><argument_list pos:line="197" pos:column="75">(<argument><expr><call><name pos:line="197" pos:column="76">typeof</name><argument_list pos:line="197" pos:column="82">(<argument><expr><name pos:line="197" pos:column="83">SWorkingSetRegistrarService</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="197" pos:column="113">as</op:operator> <name pos:line="197" pos:column="116">IWorkingSetRegistrarService</name></expr></init></decl>;</decl_stmt>

                <return pos:line="199" pos:column="17">return <expr><op:operator pos:line="199" pos:column="24">new</op:operator> <call><name pos:line="199" pos:column="28">VsDataService</name><argument_list pos:line="199" pos:column="41">(<argument><expr><name pos:line="199" pos:column="42">this</name></expr></argument>, <argument><expr><name pos:line="199" pos:column="48">taskManager</name></expr></argument>, <argument><expr><name pos:line="199" pos:column="61">srcMLService</name></expr></argument>, <argument><expr><name pos:line="199" pos:column="75">workingSetService</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>

            <if pos:line="202" pos:column="13">if<condition pos:line="202" pos:column="15">(<expr><call><name pos:line="202" pos:column="16">typeof</name><argument_list pos:line="202" pos:column="22">(<argument><expr><name pos:line="202" pos:column="23">STaskManagerService</name></expr></argument>)</argument_list></call> <op:operator pos:line="202" pos:column="44">==</op:operator> <name pos:line="202" pos:column="47">serviceType</name></expr>)</condition><then pos:line="202" pos:column="59"> <block pos:line="202" pos:column="60">{
                <return pos:line="203" pos:column="17">return <expr><op:operator pos:line="203" pos:column="24">new</op:operator> <call><name pos:line="203" pos:column="28">TaskManagerService</name><argument_list pos:line="203" pos:column="46">(<argument><expr><name pos:line="203" pos:column="47">this</name></expr></argument>, <argument><expr><op:operator pos:line="203" pos:column="53">new</op:operator> <call><name pos:line="203" pos:column="57">ConservativeAbbCoreStrategy</name><argument_list pos:line="203" pos:column="84">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>

            <if pos:line="206" pos:column="13">if<condition pos:line="206" pos:column="15">(<expr><call><name pos:line="206" pos:column="16">typeof</name><argument_list pos:line="206" pos:column="22">(<argument><expr><name pos:line="206" pos:column="23">SWorkingSetRegistrarService</name></expr></argument>)</argument_list></call> <op:operator pos:line="206" pos:column="52">==</op:operator> <name pos:line="206" pos:column="55">serviceType</name></expr>)</condition><then pos:line="206" pos:column="67"> <block pos:line="206" pos:column="68">{
                <return pos:line="207" pos:column="17">return <expr><op:operator pos:line="207" pos:column="24">new</op:operator> <call><name pos:line="207" pos:column="28">WorkingSetRegistrarService</name><argument_list pos:line="207" pos:column="54">(<argument><expr><name pos:line="207" pos:column="55">this</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>

            <comment type="line" pos:line="210" pos:column="13">// If we are here the service type is unknown, so write a message on the debug output</comment>
            <comment type="line" pos:line="211" pos:column="13">// and return null.</comment>
            <expr_stmt><expr><call><name><name pos:line="212" pos:column="13">Trace</name><op:operator pos:line="212" pos:column="18">.</op:operator><name pos:line="212" pos:column="19">WriteLine</name></name><argument_list pos:line="212" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="212" pos:column="29">"ServicesPackage.CreateService called for an unknown service type."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="213" pos:column="13">return <expr><name pos:line="213" pos:column="20">null</name></expr>;</return>
        }</block></function>

        <cpp:region pos:line="216" pos:column="9">#<cpp:directive pos:line="216" pos:column="10">region</cpp:directive> Package Members</cpp:region>
        <comment type="line" pos:line="217" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="218" pos:column="9">/// Initialization of the package; this method is called right after the package is sited, so this is the place</comment>
        <comment type="line" pos:line="219" pos:column="9">/// where you can put all the initialization code that rely on services provided by VisualStudio.</comment>
        <comment type="line" pos:line="220" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="221" pos:column="9">protected</specifier> <specifier pos:line="221" pos:column="19">override</specifier> <name pos:line="221" pos:column="28">void</name></type> <name pos:line="221" pos:column="33">Initialize</name><parameter_list pos:line="221" pos:column="43">()</parameter_list> <block pos:line="221" pos:column="46">{
            <expr_stmt><expr><call><name><name pos:line="222" pos:column="13">SrcMLFileLogger</name><op:operator pos:line="222" pos:column="28">.</op:operator><name pos:line="222" pos:column="29">DefaultLogger</name><op:operator pos:line="222" pos:column="42">.</op:operator><name pos:line="222" pos:column="43">Info</name></name><argument_list pos:line="222" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="222" pos:column="48">"Initializing SrcML.NET Service ..."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="224" pos:column="13">base</name><op:operator pos:line="224" pos:column="17">.</op:operator><name pos:line="224" pos:column="18">Initialize</name></name><argument_list pos:line="224" pos:column="28">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="226" pos:column="13">ExtensionDirectory</name> <op:operator pos:line="226" pos:column="32">=</op:operator> <call><name pos:line="226" pos:column="34">GetExtensionDirectory</name><argument_list pos:line="226" pos:column="55">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name pos:line="228" pos:column="13">SetUpLogger</name><argument_list pos:line="228" pos:column="24">()</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="230" pos:column="13">//SetUpCommand(); // SrcML.NET does not need any command so far.</comment>

            <expr_stmt><expr><name><name pos:line="232" pos:column="13">AppDomain</name><op:operator pos:line="232" pos:column="22">.</op:operator><name pos:line="232" pos:column="23">CurrentDomain</name><op:operator pos:line="232" pos:column="36">.</op:operator><name pos:line="232" pos:column="37">AssemblyResolve</name></name> <op:operator pos:line="232" pos:column="53">+=</op:operator> <name pos:line="232" pos:column="56">CurrentDomain_AssemblyResolve</name></expr>;</expr_stmt>

            <comment type="line" pos:line="234" pos:column="13">//// setup cursor monitoring service</comment>
            <comment type="line" pos:line="235" pos:column="13">//cursorMonitor = GetService(typeof(SCursorMonitorService)) as ICursorMonitorService;</comment>
            
            <comment type="line" pos:line="237" pos:column="13">// setup srcML service</comment>
            <expr_stmt><expr><name pos:line="238" pos:column="13">srcMLService</name> <op:operator pos:line="238" pos:column="26">=</op:operator> <call><name pos:line="238" pos:column="28">GetService</name><argument_list pos:line="238" pos:column="38">(<argument><expr><call><name pos:line="238" pos:column="39">typeof</name><argument_list pos:line="238" pos:column="45">(<argument><expr><name pos:line="238" pos:column="46">SSrcMLGlobalService</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="238" pos:column="68">as</op:operator> <name pos:line="238" pos:column="71">ISrcMLGlobalService</name></expr>;</expr_stmt>

            <comment type="line" pos:line="240" pos:column="13">// setup working set registrar</comment>
            <expr_stmt><expr><name pos:line="241" pos:column="13">_workingSetRegistrar</name> <op:operator pos:line="241" pos:column="34">=</op:operator> <call><name pos:line="241" pos:column="36">GetService</name><argument_list pos:line="241" pos:column="46">(<argument><expr><call><name pos:line="241" pos:column="47">typeof</name><argument_list pos:line="241" pos:column="53">(<argument><expr><name pos:line="241" pos:column="54">SWorkingSetRegistrarService</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="241" pos:column="84">as</op:operator> <name pos:line="241" pos:column="87">IWorkingSetRegistrarService</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="242" pos:column="13">_workingSetRegistrar</name><op:operator pos:line="242" pos:column="33">.</op:operator><name pos:line="242" pos:column="34">RegisterWorkingSetFactory</name></name><argument_list pos:line="242" pos:column="59">(<argument><expr><op:operator pos:line="242" pos:column="60">new</op:operator> <call><name><name pos:line="242" pos:column="64">DefaultWorkingSetFactory</name><argument_list pos:line="242" pos:column="88">&lt;<argument><name pos:line="242" pos:column="89">CompleteWorkingSet</name></argument>&gt;</argument_list></name><argument_list pos:line="242" pos:column="108">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name pos:line="244" pos:column="13">SetUpDTEEvents</name><argument_list pos:line="244" pos:column="27">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="246" pos:column="13">SrcMLFileLogger</name><op:operator pos:line="246" pos:column="28">.</op:operator><name pos:line="246" pos:column="29">DefaultLogger</name><op:operator pos:line="246" pos:column="42">.</op:operator><name pos:line="246" pos:column="43">Info</name></name><argument_list pos:line="246" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="246" pos:column="48">"Initialization completed."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <cpp:endregion pos:line="248" pos:column="9">#<cpp:directive pos:line="248" pos:column="10">endregion</cpp:directive></cpp:endregion>

        <function><type><specifier pos:line="250" pos:column="9">private</specifier> <name pos:line="250" pos:column="17">string</name></type> <name pos:line="250" pos:column="24">GetExtensionDirectory</name><parameter_list pos:line="250" pos:column="45">()</parameter_list> <block pos:line="250" pos:column="48">{
            <decl_stmt><decl><type><name pos:line="251" pos:column="13">var</name></type> <name pos:line="251" pos:column="17">uri</name> <init pos:line="251" pos:column="21">= <expr><op:operator pos:line="251" pos:column="23">new</op:operator> <call><name pos:line="251" pos:column="27">UriBuilder</name><argument_list pos:line="251" pos:column="37">(<argument><expr><call><name><name pos:line="251" pos:column="38">Assembly</name><op:operator pos:line="251" pos:column="46">.</op:operator><name pos:line="251" pos:column="47">GetExecutingAssembly</name></name><argument_list pos:line="251" pos:column="67">()</argument_list></call><op:operator pos:line="251" pos:column="69">.</op:operator><name pos:line="251" pos:column="70">CodeBase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="252" pos:column="13">var</name></type> <name pos:line="252" pos:column="17">fallbackDirectory</name> <init pos:line="252" pos:column="35">= <expr><call><name><name pos:line="252" pos:column="37">Path</name><op:operator pos:line="252" pos:column="41">.</op:operator><name pos:line="252" pos:column="42">GetDirectoryName</name></name><argument_list pos:line="252" pos:column="58">(<argument><expr><call><name><name pos:line="252" pos:column="59">Uri</name><op:operator pos:line="252" pos:column="62">.</op:operator><name pos:line="252" pos:column="63">UnescapeDataString</name></name><argument_list pos:line="252" pos:column="81">(<argument><expr><name><name pos:line="252" pos:column="82">uri</name><op:operator pos:line="252" pos:column="85">.</op:operator><name pos:line="252" pos:column="86">Path</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="254" pos:column="13">var</name></type> <name pos:line="254" pos:column="17">registry</name> <init pos:line="254" pos:column="26">= <expr><name><name pos:line="254" pos:column="28">this</name><op:operator pos:line="254" pos:column="32">.</op:operator><name pos:line="254" pos:column="33">UserRegistryRoot</name></name></expr></init></decl>;</decl_stmt>
            <if pos:line="255" pos:column="13">if<condition pos:line="255" pos:column="15">(<expr><name pos:line="255" pos:column="16">null</name> <op:operator pos:line="255" pos:column="21">==</op:operator> <name pos:line="255" pos:column="24">registry</name></expr>)</condition><then pos:line="255" pos:column="33"> <block pos:line="255" pos:column="34">{ <return pos:line="255" pos:column="36">return <expr><name pos:line="255" pos:column="43">fallbackDirectory</name></expr>;</return> }</block></then></if>

            <decl_stmt><decl><type><name pos:line="257" pos:column="13">var</name></type> <name pos:line="257" pos:column="17">extensionManager</name> <init pos:line="257" pos:column="34">= <expr><call><name><name pos:line="257" pos:column="36">registry</name><op:operator pos:line="257" pos:column="44">.</op:operator><name pos:line="257" pos:column="45">OpenSubKey</name></name><argument_list pos:line="257" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="257" pos:column="56">"ExtensionManager"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="258" pos:column="13">if<condition pos:line="258" pos:column="15">(<expr><name pos:line="258" pos:column="16">null</name> <op:operator pos:line="258" pos:column="21">==</op:operator> <name pos:line="258" pos:column="24">registry</name></expr>)</condition><then pos:line="258" pos:column="33"> <block pos:line="258" pos:column="34">{ <return pos:line="258" pos:column="36">return <expr><name pos:line="258" pos:column="43">fallbackDirectory</name></expr>;</return> }</block></then></if>

            <decl_stmt><decl><type><name pos:line="260" pos:column="13">var</name></type> <name pos:line="260" pos:column="17">enabledExtensions</name> <init pos:line="260" pos:column="35">= <expr><call><name><name pos:line="260" pos:column="37">extensionManager</name><op:operator pos:line="260" pos:column="53">.</op:operator><name pos:line="260" pos:column="54">OpenSubKey</name></name><argument_list pos:line="260" pos:column="64">(<argument><expr><lit:literal type="string" pos:line="260" pos:column="65">"EnabledExtensions"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="261" pos:column="13">if<condition pos:line="261" pos:column="15">(<expr><name pos:line="261" pos:column="16">null</name> <op:operator pos:line="261" pos:column="21">==</op:operator> <name pos:line="261" pos:column="24">registry</name></expr>)</condition><then pos:line="261" pos:column="33"> <block pos:line="261" pos:column="34">{ <return pos:line="261" pos:column="36">return <expr><name pos:line="261" pos:column="43">fallbackDirectory</name></expr>;</return> }</block></then></if>

            <decl_stmt><decl><type><name pos:line="263" pos:column="13">string</name></type> <name pos:line="263" pos:column="20">extensionKey</name> <init pos:line="263" pos:column="33">= <expr><op:operator pos:line="263" pos:column="35">(</op:operator><linq><from pos:line="263" pos:column="36">from <expr><name pos:line="263" pos:column="41">key</name></expr> <in pos:line="263" pos:column="45">in <expr><call><name><name pos:line="263" pos:column="48">enabledExtensions</name><op:operator pos:line="263" pos:column="65">.</op:operator><name pos:line="263" pos:column="66">GetValueNames</name></name><argument_list pos:line="263" pos:column="79">()</argument_list></call></expr></in></from>
                                   <where pos:line="264" pos:column="36">where <expr><call><name><name pos:line="264" pos:column="42">key</name><op:operator pos:line="264" pos:column="45">.</op:operator><name pos:line="264" pos:column="46">StartsWith</name></name><argument_list pos:line="264" pos:column="56">(<argument><expr><call><name><name pos:line="264" pos:column="57">GuidList</name><op:operator pos:line="264" pos:column="65">.</op:operator><name pos:line="264" pos:column="66">SrcMLServicePackageGuid</name><op:operator pos:line="264" pos:column="89">.</op:operator><name pos:line="264" pos:column="90">ToString</name></name><argument_list pos:line="264" pos:column="98">()</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="264" pos:column="102">StringComparison</name><op:operator pos:line="264" pos:column="118">.</op:operator><name pos:line="264" pos:column="119">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call></expr></where>
                                   <select pos:line="265" pos:column="36">select <expr><name pos:line="265" pos:column="43">key</name></expr></select></linq><op:operator pos:line="265" pos:column="46">)</op:operator><op:operator pos:line="265" pos:column="47">.</op:operator><call><name pos:line="265" pos:column="48">FirstOrDefault</name><argument_list pos:line="265" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <if pos:line="267" pos:column="13">if<condition pos:line="267" pos:column="15">(<expr><call><name><name pos:line="267" pos:column="16">String</name><op:operator pos:line="267" pos:column="22">.</op:operator><name pos:line="267" pos:column="23">IsNullOrEmpty</name></name><argument_list pos:line="267" pos:column="36">(<argument><expr><name pos:line="267" pos:column="37">extensionKey</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="267" pos:column="51"> <block pos:line="267" pos:column="52">{ <return pos:line="267" pos:column="54">return <expr><name pos:line="267" pos:column="61">fallbackDirectory</name></expr>;</return> }</block></then></if>

            <decl_stmt><decl><type><name pos:line="269" pos:column="13">string</name></type> <name pos:line="269" pos:column="20">directoryName</name> <init pos:line="269" pos:column="34">= <expr><call><name><name pos:line="269" pos:column="36">enabledExtensions</name><op:operator pos:line="269" pos:column="53">.</op:operator><name pos:line="269" pos:column="54">GetValue</name></name><argument_list pos:line="269" pos:column="62">(<argument><expr><name pos:line="269" pos:column="63">extensionKey</name></expr></argument>)</argument_list></call> <op:operator pos:line="269" pos:column="77">as</op:operator> <name pos:line="269" pos:column="80">string</name></expr></init></decl>;</decl_stmt>

            <return pos:line="271" pos:column="13">return <expr><op:operator pos:line="271" pos:column="20">(</op:operator><call><name><name pos:line="271" pos:column="21">String</name><op:operator pos:line="271" pos:column="27">.</op:operator><name pos:line="271" pos:column="28">IsNullOrEmpty</name></name><argument_list pos:line="271" pos:column="41">(<argument><expr><name pos:line="271" pos:column="42">directoryName</name></expr></argument>)</argument_list></call> <op:operator pos:line="271" pos:column="57">?</op:operator> <name pos:line="271" pos:column="59">fallbackDirectory</name> <op:operator pos:line="271" pos:column="77">:</op:operator> <name pos:line="271" pos:column="79">directoryName</name><op:operator pos:line="271" pos:column="92">)</op:operator></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="274" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="275" pos:column="9">/// Set up log4net logger.</comment>
        <comment type="line" pos:line="276" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="277" pos:column="9">private</specifier> <name pos:line="277" pos:column="17">void</name></type> <name pos:line="277" pos:column="22">SetUpLogger</name><parameter_list pos:line="277" pos:column="33">()</parameter_list> <block pos:line="277" pos:column="36">{
            <comment type="line" pos:line="278" pos:column="13">//var logFilePath = Path.Combine("C:\\Data\\", this.ToString() + ".log");</comment>
            <comment type="line" pos:line="279" pos:column="13">//logger = SrcMLFileLogger.CreateFileLogger(this.ToString() + "Logger", logFilePath);</comment>
            <decl_stmt><decl><type><name pos:line="280" pos:column="13">var</name></type> <name pos:line="280" pos:column="17">logFilePath</name> <init pos:line="280" pos:column="29">= <expr><call><name><name pos:line="280" pos:column="31">Path</name><op:operator pos:line="280" pos:column="35">.</op:operator><name pos:line="280" pos:column="36">Combine</name></name><argument_list pos:line="280" pos:column="43">(<argument><expr><name pos:line="280" pos:column="44">ExtensionDirectory</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="280" pos:column="64">"SrcML.NETService.log"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="281" pos:column="13">logger</name> <op:operator pos:line="281" pos:column="20">=</op:operator> <call><name><name pos:line="281" pos:column="22">SrcMLFileLogger</name><op:operator pos:line="281" pos:column="37">.</op:operator><name pos:line="281" pos:column="38">CreateFileLogger</name></name><argument_list pos:line="281" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="281" pos:column="55">"SrcMLServiceLogger"</lit:literal></expr></argument>, <argument><expr><name pos:line="281" pos:column="77">logFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="282" pos:column="13">SrcMLFileLogger</name><op:operator pos:line="282" pos:column="28">.</op:operator><name pos:line="282" pos:column="29">DefaultLogger</name><op:operator pos:line="282" pos:column="42">.</op:operator><name pos:line="282" pos:column="43">Info</name></name><argument_list pos:line="282" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="282" pos:column="48">"&gt; Set up log4net logger."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="285" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="286" pos:column="9">/// Set up command handlers for menu (commands must exist in the .vsct file)</comment>
        <comment type="line" pos:line="287" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="288" pos:column="9">private</specifier> <name pos:line="288" pos:column="17">void</name></type> <name pos:line="288" pos:column="22">SetUpCommand</name><parameter_list pos:line="288" pos:column="34">()</parameter_list> <block pos:line="288" pos:column="37">{
            <expr_stmt><expr><call><name><name pos:line="289" pos:column="13">SrcMLFileLogger</name><op:operator pos:line="289" pos:column="28">.</op:operator><name pos:line="289" pos:column="29">DefaultLogger</name><op:operator pos:line="289" pos:column="42">.</op:operator><name pos:line="289" pos:column="43">Info</name></name><argument_list pos:line="289" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="289" pos:column="48">"&gt; Set up command handlers for menu."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="291" pos:column="13">OleMenuCommandService</name></type> <name pos:line="291" pos:column="35">mcs</name> <init pos:line="291" pos:column="39">= <expr><call><name pos:line="291" pos:column="41">GetService</name><argument_list pos:line="291" pos:column="51">(<argument><expr><call><name pos:line="291" pos:column="52">typeof</name><argument_list pos:line="291" pos:column="58">(<argument><expr><name pos:line="291" pos:column="59">IMenuCommandService</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="291" pos:column="81">as</op:operator> <name pos:line="291" pos:column="84">OleMenuCommandService</name></expr></init></decl>;</decl_stmt>
            <if pos:line="292" pos:column="13">if<condition pos:line="292" pos:column="15">(<expr><name pos:line="292" pos:column="16">null</name> <op:operator pos:line="292" pos:column="21">!=</op:operator> <name pos:line="292" pos:column="24">mcs</name></expr>)</condition><then pos:line="292" pos:column="28"> <block pos:line="292" pos:column="29">{
                <comment type="line" pos:line="293" pos:column="17">// Create the command for the menu item.</comment>
                <decl_stmt><decl><type><name pos:line="294" pos:column="17">CommandID</name></type> <name pos:line="294" pos:column="27">menuCommandID</name> <init pos:line="294" pos:column="41">= <expr><op:operator pos:line="294" pos:column="43">new</op:operator> <call><name pos:line="294" pos:column="47">CommandID</name><argument_list pos:line="294" pos:column="56">(<argument><expr><name><name pos:line="294" pos:column="57">GuidList</name><op:operator pos:line="294" pos:column="65">.</op:operator><name pos:line="294" pos:column="66">guidSrcMLServiceCmdSet</name></name></expr></argument>, <argument><expr><op:operator pos:line="294" pos:column="90">(</op:operator><name pos:line="294" pos:column="91">int</name><op:operator pos:line="294" pos:column="94">)</op:operator><name><name pos:line="294" pos:column="95">PkgCmdIDList</name><op:operator pos:line="294" pos:column="107">.</op:operator><name pos:line="294" pos:column="108">SrcML</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="295" pos:column="17">MenuCommand</name></type> <name pos:line="295" pos:column="29">menuItem</name> <init pos:line="295" pos:column="38">= <expr><op:operator pos:line="295" pos:column="40">new</op:operator> <call><name pos:line="295" pos:column="44">MenuCommand</name><argument_list pos:line="295" pos:column="55">(<argument><expr><name pos:line="295" pos:column="56">MenuItemCallback</name></expr></argument>, <argument><expr><name pos:line="295" pos:column="74">menuCommandID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="296" pos:column="17">mcs</name><op:operator pos:line="296" pos:column="20">.</op:operator><name pos:line="296" pos:column="21">AddCommand</name></name><argument_list pos:line="296" pos:column="31">(<argument><expr><name pos:line="296" pos:column="32">menuItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="300" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="301" pos:column="9">/// This function is the callback used to execute a command when the a menu item is clicked.</comment>
        <comment type="line" pos:line="302" pos:column="9">/// See the Initialize method to see how the menu item is associated to this function using</comment>
        <comment type="line" pos:line="303" pos:column="9">/// the OleMenuCommandService service and the MenuCommand class.</comment>
        <comment type="line" pos:line="304" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="305" pos:column="9">private</specifier> <name pos:line="305" pos:column="17">void</name></type> <name pos:line="305" pos:column="22">MenuItemCallback</name><parameter_list pos:line="305" pos:column="38">(<param><decl><type><name pos:line="305" pos:column="39">object</name></type> <name pos:line="305" pos:column="46">sender</name></decl></param>, <param><decl><type><name pos:line="305" pos:column="54">EventArgs</name></type> <name pos:line="305" pos:column="64">e</name></decl></param>)</parameter_list> <block pos:line="305" pos:column="67">{
            <expr_stmt><expr><call><name><name pos:line="306" pos:column="13">SrcMLFileLogger</name><op:operator pos:line="306" pos:column="28">.</op:operator><name pos:line="306" pos:column="29">DefaultLogger</name><op:operator pos:line="306" pos:column="42">.</op:operator><name pos:line="306" pos:column="43">Info</name></name><argument_list pos:line="306" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="306" pos:column="48">"    SrcMLServicePackage.MenuItemCallback()"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="308" pos:column="13">// Show a Message Box to prove we were here</comment>
            <decl_stmt><decl><type><name pos:line="309" pos:column="13">IVsUIShell</name></type> <name pos:line="309" pos:column="24">uiShell</name> <init pos:line="309" pos:column="32">= <expr><op:operator pos:line="309" pos:column="34">(</op:operator><name pos:line="309" pos:column="35">IVsUIShell</name><op:operator pos:line="309" pos:column="45">)</op:operator><call><name pos:line="309" pos:column="46">GetService</name><argument_list pos:line="309" pos:column="56">(<argument><expr><call><name pos:line="309" pos:column="57">typeof</name><argument_list pos:line="309" pos:column="63">(<argument><expr><name pos:line="309" pos:column="64">SVsUIShell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="310" pos:column="13">Guid</name></type> <name pos:line="310" pos:column="18">clsid</name> <init pos:line="310" pos:column="24">= <expr><name><name pos:line="310" pos:column="26">Guid</name><op:operator pos:line="310" pos:column="30">.</op:operator><name pos:line="310" pos:column="31">Empty</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="311" pos:column="13">int</name></type> <name pos:line="311" pos:column="17">result</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="312" pos:column="13">Microsoft</name><op:operator pos:line="312" pos:column="22">.</op:operator><name pos:line="312" pos:column="23">VisualStudio</name><op:operator pos:line="312" pos:column="35">.</op:operator><name pos:line="312" pos:column="36">ErrorHandler</name><op:operator pos:line="312" pos:column="48">.</op:operator><name pos:line="312" pos:column="49">ThrowOnFailure</name></name><argument_list pos:line="312" pos:column="63">(<argument><expr><call><name><name pos:line="312" pos:column="64">uiShell</name><op:operator pos:line="312" pos:column="71">.</op:operator><name pos:line="312" pos:column="72">ShowMessageBox</name></name><argument_list pos:line="312" pos:column="86">(
                       <argument><expr><lit:literal type="number" pos:line="313" pos:column="24">0</lit:literal></expr></argument>,
                       <argument><expr pos:line="314" pos:column="24">ref <name pos:line="314" pos:column="28">clsid</name></expr></argument>,
                       <argument><expr><lit:literal type="string" pos:line="315" pos:column="24">"Our own SrcMLService"</lit:literal></expr></argument>,
                       <argument><expr><call><name><name pos:line="316" pos:column="24">string</name><op:operator pos:line="316" pos:column="30">.</op:operator><name pos:line="316" pos:column="31">Format</name></name><argument_list pos:line="316" pos:column="37">(<argument><expr><name><name pos:line="316" pos:column="38">CultureInfo</name><op:operator pos:line="316" pos:column="49">.</op:operator><name pos:line="316" pos:column="50">CurrentCulture</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="316" pos:column="66">"Inside {0}.MenuItemCallback()"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="316" pos:column="99">this</name><op:operator pos:line="316" pos:column="103">.</op:operator><name pos:line="316" pos:column="104">ToString</name></name><argument_list pos:line="316" pos:column="112">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                       <argument><expr><name><name pos:line="317" pos:column="24">string</name><op:operator pos:line="317" pos:column="30">.</op:operator><name pos:line="317" pos:column="31">Empty</name></name></expr></argument>,
                       <argument><expr><lit:literal type="number" pos:line="318" pos:column="24">0</lit:literal></expr></argument>,
                       <argument><expr><name><name pos:line="319" pos:column="24">OLEMSGBUTTON</name><op:operator pos:line="319" pos:column="36">.</op:operator><name pos:line="319" pos:column="37">OLEMSGBUTTON_OK</name></name></expr></argument>,
                       <argument><expr><name><name pos:line="320" pos:column="24">OLEMSGDEFBUTTON</name><op:operator pos:line="320" pos:column="39">.</op:operator><name pos:line="320" pos:column="40">OLEMSGDEFBUTTON_FIRST</name></name></expr></argument>,
                       <argument><expr><name><name pos:line="321" pos:column="24">OLEMSGICON</name><op:operator pos:line="321" pos:column="34">.</op:operator><name pos:line="321" pos:column="35">OLEMSGICON_INFO</name></name></expr></argument>,
                       <argument><expr><lit:literal type="number" pos:line="322" pos:column="24">0</lit:literal></expr></argument>,        <comment type="line" pos:line="322" pos:column="34">// false</comment>
                       <argument><expr pos:line="323" pos:column="24">out <name pos:line="323" pos:column="28">result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="326" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="327" pos:column="9">/// Register Visual Studio DTE events.</comment>
        <comment type="line" pos:line="328" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="329" pos:column="9">private</specifier> <name pos:line="329" pos:column="17">void</name></type> <name pos:line="329" pos:column="22">SetUpDTEEvents</name><parameter_list pos:line="329" pos:column="36">()</parameter_list> <block pos:line="329" pos:column="39">{
            <expr_stmt><expr><call><name><name pos:line="330" pos:column="13">SrcMLFileLogger</name><op:operator pos:line="330" pos:column="28">.</op:operator><name pos:line="330" pos:column="29">DefaultLogger</name><op:operator pos:line="330" pos:column="42">.</op:operator><name pos:line="330" pos:column="43">Info</name></name><argument_list pos:line="330" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="330" pos:column="48">"&gt; Register Visual Studio DTE events."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="332" pos:column="13">DTE2</name></type> <name pos:line="332" pos:column="18">dte</name> <init pos:line="332" pos:column="22">= <expr><call><name pos:line="332" pos:column="24">GetService</name><argument_list pos:line="332" pos:column="34">(<argument><expr><call><name pos:line="332" pos:column="35">typeof</name><argument_list pos:line="332" pos:column="41">(<argument><expr><name pos:line="332" pos:column="42">DTE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="332" pos:column="48">as</op:operator> <name pos:line="332" pos:column="51">DTE2</name></expr></init></decl>;</decl_stmt>
            <if pos:line="333" pos:column="13">if<condition pos:line="333" pos:column="15">(<expr><name pos:line="333" pos:column="16">dte</name> <op:operator pos:line="333" pos:column="20">!=</op:operator> <name pos:line="333" pos:column="23">null</name></expr>)</condition><then pos:line="333" pos:column="28"> <block pos:line="333" pos:column="29">{
                <expr_stmt><expr><name pos:line="334" pos:column="17">DteEvents</name> <op:operator pos:line="334" pos:column="27">=</op:operator> <name><name pos:line="334" pos:column="29">dte</name><op:operator pos:line="334" pos:column="32">.</op:operator><name pos:line="334" pos:column="33">Events</name><op:operator pos:line="334" pos:column="39">.</op:operator><name pos:line="334" pos:column="40">DTEEvents</name></name></expr>;</expr_stmt>
                <comment type="line" pos:line="335" pos:column="17">// Register the Visual Studio DTE event that occurs when the environment has completed initializing.</comment>
                <expr_stmt><expr><name><name pos:line="336" pos:column="17">DteEvents</name><op:operator pos:line="336" pos:column="26">.</op:operator><name pos:line="336" pos:column="27">OnStartupComplete</name></name> <op:operator pos:line="336" pos:column="45">+=</op:operator> <name pos:line="336" pos:column="48">DTEStartupCompleted</name></expr>;</expr_stmt>
                <comment type="line" pos:line="337" pos:column="17">// Register the Visual Studio DTE event that occurs when the development environment is closing.</comment>
                <expr_stmt><expr><name><name pos:line="338" pos:column="17">DteEvents</name><op:operator pos:line="338" pos:column="26">.</op:operator><name pos:line="338" pos:column="27">OnBeginShutdown</name></name> <op:operator pos:line="338" pos:column="43">+=</op:operator> <name pos:line="338" pos:column="46">DTEBeginShutdown</name></expr>;</expr_stmt>
            }</block></then> <else pos:line="339" pos:column="15">else <block pos:line="339" pos:column="20">{
                <expr_stmt><expr><call><name><name pos:line="340" pos:column="17">SrcMLFileLogger</name><op:operator pos:line="340" pos:column="32">.</op:operator><name pos:line="340" pos:column="33">DefaultLogger</name><op:operator pos:line="340" pos:column="46">.</op:operator><name pos:line="340" pos:column="47">Info</name></name><argument_list pos:line="340" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="340" pos:column="52">"&gt; Could not get the DTE object"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></function>

        <comment type="line" pos:line="344" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="345" pos:column="9">/// Respond to the Visual Studio DTE event that occurs when the environment has completed initializing.</comment>
        <comment type="line" pos:line="346" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="347" pos:column="9">private</specifier> <name pos:line="347" pos:column="17">void</name></type> <name pos:line="347" pos:column="22">DTEStartupCompleted</name><parameter_list pos:line="347" pos:column="41">()</parameter_list> <block pos:line="347" pos:column="44">{
            <expr_stmt><expr><call><name><name pos:line="348" pos:column="13">SrcMLFileLogger</name><op:operator pos:line="348" pos:column="28">.</op:operator><name pos:line="348" pos:column="29">DefaultLogger</name><op:operator pos:line="348" pos:column="42">.</op:operator><name pos:line="348" pos:column="43">Info</name></name><argument_list pos:line="348" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="348" pos:column="48">"Respond to the Visual Studio DTE event that occurs when the environment has completed initializing."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="350" pos:column="13">DTE2</name></type> <name pos:line="350" pos:column="18">dte</name> <init pos:line="350" pos:column="22">= <expr><call><name pos:line="350" pos:column="24">GetService</name><argument_list pos:line="350" pos:column="34">(<argument><expr><call><name pos:line="350" pos:column="35">typeof</name><argument_list pos:line="350" pos:column="41">(<argument><expr><name pos:line="350" pos:column="42">DTE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="350" pos:column="48">as</op:operator> <name pos:line="350" pos:column="51">DTE2</name></expr></init></decl>;</decl_stmt>
            <if pos:line="351" pos:column="13">if<condition pos:line="351" pos:column="15">(<expr><call><name><name pos:line="351" pos:column="16">dte</name><op:operator pos:line="351" pos:column="19">.</op:operator><name pos:line="351" pos:column="20">Version</name><op:operator pos:line="351" pos:column="27">.</op:operator><name pos:line="351" pos:column="28">StartsWith</name></name><argument_list pos:line="351" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="351" pos:column="39">"10"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="351" pos:column="45"> <block pos:line="351" pos:column="46">{
                <comment type="line" pos:line="352" pos:column="17">//only need to do this in VS2010, and it breaks things in VS2012</comment>
                <decl_stmt><decl><type><name pos:line="353" pos:column="17">var</name></type> <name pos:line="353" pos:column="21">openSolution</name> <init pos:line="353" pos:column="34">= <expr><name><name pos:line="353" pos:column="36">dte</name><op:operator pos:line="353" pos:column="39">.</op:operator><name pos:line="353" pos:column="40">Solution</name></name></expr></init></decl>;</decl_stmt>
                
                <if pos:line="355" pos:column="17">if<condition pos:line="355" pos:column="19">(<expr><name pos:line="355" pos:column="20">openSolution</name> <op:operator pos:line="355" pos:column="33">!=</op:operator> <name pos:line="355" pos:column="36">null</name> <op:operator pos:line="355" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="355" pos:column="44">!</op:operator><call><name><name pos:line="355" pos:column="45">String</name><op:operator pos:line="355" pos:column="51">.</op:operator><name pos:line="355" pos:column="52">IsNullOrWhiteSpace</name></name><argument_list pos:line="355" pos:column="70">(<argument><expr><name><name pos:line="355" pos:column="71">openSolution</name><op:operator pos:line="355" pos:column="83">.</op:operator><name pos:line="355" pos:column="84">FullName</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="355" pos:column="94"> <block pos:line="355" pos:column="95">{
                    <expr_stmt><expr><call><name pos:line="356" pos:column="21">SolutionOpened</name><argument_list pos:line="356" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>

                      

            <expr_stmt><expr><call><name pos:line="362" pos:column="13">RegisterSolutionEvents</name><argument_list pos:line="362" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="365" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="366" pos:column="9">/// Register solution events.</comment>
        <comment type="line" pos:line="367" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="368" pos:column="9">private</specifier> <name pos:line="368" pos:column="17">void</name></type> <name pos:line="368" pos:column="22">RegisterSolutionEvents</name><parameter_list pos:line="368" pos:column="44">()</parameter_list> <block pos:line="368" pos:column="47">{
            <expr_stmt><expr><call><name><name pos:line="369" pos:column="13">SrcMLFileLogger</name><op:operator pos:line="369" pos:column="28">.</op:operator><name pos:line="369" pos:column="29">DefaultLogger</name><op:operator pos:line="369" pos:column="42">.</op:operator><name pos:line="369" pos:column="43">Info</name></name><argument_list pos:line="369" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="369" pos:column="48">"&gt; Register solution events."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="371" pos:column="13">DTE2</name></type> <name pos:line="371" pos:column="18">dte</name> <init pos:line="371" pos:column="22">= <expr><call><name><name pos:line="371" pos:column="24">Package</name><op:operator pos:line="371" pos:column="31">.</op:operator><name pos:line="371" pos:column="32">GetGlobalService</name></name><argument_list pos:line="371" pos:column="48">(<argument><expr><call><name pos:line="371" pos:column="49">typeof</name><argument_list pos:line="371" pos:column="55">(<argument><expr><name pos:line="371" pos:column="56">DTE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="371" pos:column="62">as</op:operator> <name pos:line="371" pos:column="65">DTE2</name></expr></init></decl>;</decl_stmt>
            <if pos:line="372" pos:column="13">if<condition pos:line="372" pos:column="15">(<expr><name pos:line="372" pos:column="16">dte</name> <op:operator pos:line="372" pos:column="20">!=</op:operator> <name pos:line="372" pos:column="23">null</name></expr>)</condition><then pos:line="372" pos:column="28"> <block pos:line="372" pos:column="29">{
                <expr_stmt><expr><name pos:line="373" pos:column="17">SolutionEvents</name> <op:operator pos:line="373" pos:column="32">=</op:operator> <name><name pos:line="373" pos:column="34">dte</name><op:operator pos:line="373" pos:column="37">.</op:operator><name pos:line="373" pos:column="38">Events</name><op:operator pos:line="373" pos:column="44">.</op:operator><name pos:line="373" pos:column="45">SolutionEvents</name></name></expr>;</expr_stmt>
                <comment type="line" pos:line="374" pos:column="17">// Register the Visual Studio event that occurs when a solution is being opened.</comment>
                <expr_stmt><expr><name><name pos:line="375" pos:column="17">SolutionEvents</name><op:operator pos:line="375" pos:column="31">.</op:operator><name pos:line="375" pos:column="32">Opened</name></name> <op:operator pos:line="375" pos:column="39">+=</op:operator> <name pos:line="375" pos:column="42">SolutionOpened</name></expr>;</expr_stmt>
                <comment type="line" pos:line="376" pos:column="17">// Register the Visual Studio event that occurs when a solution is about to close.</comment>
                <expr_stmt><expr><name><name pos:line="377" pos:column="17">SolutionEvents</name><op:operator pos:line="377" pos:column="31">.</op:operator><name pos:line="377" pos:column="32">BeforeClosing</name></name> <op:operator pos:line="377" pos:column="46">+=</op:operator> <name pos:line="377" pos:column="49">RespondToSolutionClosing</name></expr>;</expr_stmt>
            }</block></then></if>
            <comment type="block" pos:line="379" pos:column="13">/*
            // maybe removed after completing project level IU
            // Queries listening clients as to whether the project can be unloaded.
            SolutionChangeListener = new SolutionChangeEventListener();
            SolutionChangeListener.OnQueryUnloadProject += () =&gt; {
                SolutionBeforeClosing();
                SolutionOpened();
            };
            */</comment>
        }</block></function>

        <comment type="line" pos:line="390" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="391" pos:column="9">/// Respond to the Visual Studio event that occurs when a solution is being opened.</comment>
        <comment type="line" pos:line="392" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="393" pos:column="9">private</specifier> <name pos:line="393" pos:column="17">void</name></type> <name pos:line="393" pos:column="22">SolutionOpened</name><parameter_list pos:line="393" pos:column="36">()</parameter_list> <block pos:line="393" pos:column="39">{
            <expr_stmt><expr><call><name><name pos:line="394" pos:column="13">SrcMLFileLogger</name><op:operator pos:line="394" pos:column="28">.</op:operator><name pos:line="394" pos:column="29">DefaultLogger</name><op:operator pos:line="394" pos:column="42">.</op:operator><name pos:line="394" pos:column="43">Info</name></name><argument_list pos:line="394" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="394" pos:column="48">"Respond to the Visual Studio event that occurs when a solution is being opened."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="396" pos:column="13">BackgroundWorker</name></type> <name pos:line="396" pos:column="30">bw</name> <init pos:line="396" pos:column="33">= <expr><op:operator pos:line="396" pos:column="35">new</op:operator> <call><name pos:line="396" pos:column="39">BackgroundWorker</name><argument_list pos:line="396" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="397" pos:column="13">bw</name><op:operator pos:line="397" pos:column="15">.</op:operator><name pos:line="397" pos:column="16">WorkerReportsProgress</name></name> <op:operator pos:line="397" pos:column="38">=</op:operator> <lit:literal type="boolean" pos:line="397" pos:column="40">false</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="398" pos:column="13">bw</name><op:operator pos:line="398" pos:column="15">.</op:operator><name pos:line="398" pos:column="16">WorkerSupportsCancellation</name></name> <op:operator pos:line="398" pos:column="43">=</op:operator> <lit:literal type="boolean" pos:line="398" pos:column="45">false</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="399" pos:column="13">bw</name><op:operator pos:line="399" pos:column="15">.</op:operator><name pos:line="399" pos:column="16">DoWork</name></name> <op:operator pos:line="399" pos:column="23">+=</op:operator> <op:operator pos:line="399" pos:column="26">new</op:operator> <call><name pos:line="399" pos:column="30">DoWorkEventHandler</name><argument_list pos:line="399" pos:column="48">(<argument><expr><name pos:line="399" pos:column="49">RespondToSolutionOpened</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="401" pos:column="13">bw</name><op:operator pos:line="401" pos:column="15">.</op:operator><name pos:line="401" pos:column="16">RunWorkerAsync</name></name><argument_list pos:line="401" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="404" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="405" pos:column="9">/// SrcML service starts to monitor the opened solution.</comment>
        <comment type="line" pos:line="406" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="407" pos:column="9">/// &lt;param name="sender"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="408" pos:column="9">/// &lt;param name="eventArgs"&gt;&lt;/param&gt;</comment>
        <function><type><specifier pos:line="409" pos:column="9">private</specifier> <name pos:line="409" pos:column="17">void</name></type> <name pos:line="409" pos:column="22">RespondToSolutionOpened</name><parameter_list pos:line="409" pos:column="45">(<param><decl><type><name pos:line="409" pos:column="46">object</name></type> <name pos:line="409" pos:column="53">sender</name></decl></param>, <param><decl><type><name pos:line="409" pos:column="61">DoWorkEventArgs</name></type> <name pos:line="409" pos:column="77">eventArgs</name></decl></param>)</parameter_list> <block pos:line="409" pos:column="88">{
            <comment type="line" pos:line="410" pos:column="13">//SrcMLFileLogger.DefaultLogger.Info("&gt; SrcML service starts monitoring the opened solution.");</comment>

            <comment type="line" pos:line="412" pos:column="13">// This statement should be commented out when releasing SrcML.NET for Sando</comment>
            <comment type="line" pos:line="413" pos:column="13">//srcMLService.StartMonitoring(true, SrcMLHelper.GetSrcMLDefaultDirectory(extensionDirectory));</comment>
            <expr_stmt><expr><call><name><name pos:line="414" pos:column="13">SrcMLFileLogger</name><op:operator pos:line="414" pos:column="28">.</op:operator><name pos:line="414" pos:column="29">DefaultLogger</name><op:operator pos:line="414" pos:column="42">.</op:operator><name pos:line="414" pos:column="43">Info</name></name><argument_list pos:line="414" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="414" pos:column="48">"srcml service starts monitoring"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="415" pos:column="13">srcMLService</name><op:operator pos:line="415" pos:column="25">.</op:operator><name pos:line="415" pos:column="26">StartMonitoring</name></name><argument_list pos:line="415" pos:column="41">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><name pos:line="418" pos:column="9">Assembly</name></type> <name pos:line="418" pos:column="18">CurrentDomain_AssemblyResolve</name><parameter_list pos:line="418" pos:column="47">(<param><decl><type><name pos:line="418" pos:column="48">object</name></type> <name pos:line="418" pos:column="55">sender</name></decl></param>, <param><decl><type><name pos:line="418" pos:column="63">ResolveEventArgs</name></type> <name pos:line="418" pos:column="80">args</name></decl></param>)</parameter_list> <block pos:line="418" pos:column="86">{
            <decl_stmt><decl><type><name pos:line="419" pos:column="13">var</name></type> <name pos:line="419" pos:column="17">assemblyName</name> <init pos:line="419" pos:column="30">= <expr><op:operator pos:line="419" pos:column="32">new</op:operator> <call><name pos:line="419" pos:column="36">AssemblyName</name><argument_list pos:line="419" pos:column="48">(<argument><expr><name><name pos:line="419" pos:column="49">args</name><op:operator pos:line="419" pos:column="53">.</op:operator><name pos:line="419" pos:column="54">Name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="420" pos:column="13">string</name></type> <name pos:line="420" pos:column="20">assemblyFilePath</name> <init pos:line="420" pos:column="37">= <expr><call><name><name pos:line="420" pos:column="39">Path</name><op:operator pos:line="420" pos:column="43">.</op:operator><name pos:line="420" pos:column="44">Combine</name></name><argument_list pos:line="420" pos:column="51">(<argument><expr><name pos:line="420" pos:column="52">ExtensionDirectory</name></expr></argument>, <argument><expr><name><name pos:line="420" pos:column="72">assemblyName</name><op:operator pos:line="420" pos:column="84">.</op:operator><name pos:line="420" pos:column="85">Name</name></name> <op:operator pos:line="420" pos:column="90">+</op:operator> <lit:literal type="string" pos:line="420" pos:column="92">".dll"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <decl_stmt><decl><type><name pos:line="422" pos:column="13">Assembly</name></type> <name pos:line="422" pos:column="22">assembly</name> <init pos:line="422" pos:column="31">= <expr><name pos:line="422" pos:column="33">null</name></expr></init></decl>;</decl_stmt>
            <if pos:line="423" pos:column="13">if<condition pos:line="423" pos:column="15">(<expr><op:operator pos:line="423" pos:column="16">!</op:operator><call><name><name pos:line="423" pos:column="17">String</name><op:operator pos:line="423" pos:column="23">.</op:operator><name pos:line="423" pos:column="24">IsNullOrWhiteSpace</name></name><argument_list pos:line="423" pos:column="42">(<argument><expr><name pos:line="423" pos:column="43">assemblyFilePath</name></expr></argument>)</argument_list></call> <op:operator pos:line="423" pos:column="61">&amp;&amp;</op:operator> <call><name><name pos:line="423" pos:column="64">File</name><op:operator pos:line="423" pos:column="68">.</op:operator><name pos:line="423" pos:column="69">Exists</name></name><argument_list pos:line="423" pos:column="75">(<argument><expr><name pos:line="423" pos:column="76">assemblyFilePath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="423" pos:column="94"> <block pos:line="423" pos:column="95">{
                <expr_stmt><expr><name pos:line="424" pos:column="17">assembly</name> <op:operator pos:line="424" pos:column="26">=</op:operator> <call><name><name pos:line="424" pos:column="28">Assembly</name><op:operator pos:line="424" pos:column="36">.</op:operator><name pos:line="424" pos:column="37">LoadFrom</name></name><argument_list pos:line="424" pos:column="45">(<argument><expr><name pos:line="424" pos:column="46">assemblyFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <return pos:line="426" pos:column="13">return <expr><name pos:line="426" pos:column="20">assembly</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="429" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="430" pos:column="9">/// Respond to the Visual Studio event that occurs when a solution is about to close.</comment>
        <comment type="line" pos:line="431" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="432" pos:column="9">private</specifier> <name pos:line="432" pos:column="17">void</name></type> <name pos:line="432" pos:column="22">RespondToSolutionClosing</name><parameter_list pos:line="432" pos:column="46">()</parameter_list> <block pos:line="432" pos:column="49">{
            <comment type="line" pos:line="433" pos:column="13">//SrcMLFileLogger.DefaultLogger.Info("Respond to the Visual Studio event that occurs when a solution is about to close.");</comment>
            <comment type="line" pos:line="434" pos:column="13">//SrcMLFileLogger.DefaultLogger.Info("&gt; SrcML service stops monitoring the opened solution.");</comment>
            <expr_stmt><expr><call><name><name pos:line="435" pos:column="13">srcMLService</name><op:operator pos:line="435" pos:column="25">.</op:operator><name pos:line="435" pos:column="26">StopMonitoring</name></name><argument_list pos:line="435" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="438" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="439" pos:column="9">/// Respond to the Visual Studio DTE event that occurs when the development environment is closing.</comment>
        <comment type="line" pos:line="440" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="441" pos:column="9">private</specifier> <name pos:line="441" pos:column="17">void</name></type> <name pos:line="441" pos:column="22">DTEBeginShutdown</name><parameter_list pos:line="441" pos:column="38">()</parameter_list> <block pos:line="441" pos:column="41">{
            <expr_stmt><expr><call><name><name pos:line="442" pos:column="13">SrcMLFileLogger</name><op:operator pos:line="442" pos:column="28">.</op:operator><name pos:line="442" pos:column="29">DefaultLogger</name><op:operator pos:line="442" pos:column="42">.</op:operator><name pos:line="442" pos:column="43">Info</name></name><argument_list pos:line="442" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="442" pos:column="48">"Respond to the Visual Studio DTE event that occurs when the development environment is closing."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="443" pos:column="13">//UnregisterSolutionEvents(); // TODO if necessary</comment>
            <comment type="line" pos:line="444" pos:column="13">//UnregisterDTEEvents(); // TODO if necessary</comment>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
