<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data\DataFileNameMapping.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2014 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - Initial implementation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">System</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Collections</name><op:operator pos:line="13" pos:column="25">.</op:operator><name pos:line="13" pos:column="26">Generic</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">IO</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">IO</name><op:operator pos:line="15" pos:column="16">.</op:operator><name pos:line="15" pos:column="17">Compression</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Linq</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Text</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Xml</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">System</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">Xml</name><op:operator pos:line="19" pos:column="17">.</op:operator><name pos:line="19" pos:column="18">Linq</name></name>;</using>

<namespace pos:line="21" pos:column="1">namespace <name><name pos:line="21" pos:column="11">ABB</name><op:operator pos:line="21" pos:column="14">.</op:operator><name pos:line="21" pos:column="15">SrcML</name><op:operator pos:line="21" pos:column="20">.</op:operator><name pos:line="21" pos:column="21">Data</name></name> <block pos:line="21" pos:column="26">{
    <comment type="line" pos:line="22" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="23" pos:column="5">/// File name mapping for data files</comment>
    <comment type="line" pos:line="24" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="25" pos:column="5">public</specifier> class <name pos:line="25" pos:column="18">DataFileNameMapping</name> <super pos:line="25" pos:column="38">: <name pos:line="25" pos:column="40">ShortFileNameMapping</name></super> <block pos:line="25" pos:column="61">{
        <decl_stmt><decl><type><specifier pos:line="26" pos:column="9">private</specifier> <name pos:line="26" pos:column="17">bool</name></type> <name pos:line="26" pos:column="22">_compressionEnabled</name></decl>;</decl_stmt>

        <comment type="line" pos:line="28" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="29" pos:column="9">/// Create a new data file name mapping. This uses &lt;see cref="XmlSerialization.DEFAULT_COMPRESSED_EXTENSION"/&gt;</comment>
        <comment type="line" pos:line="30" pos:column="9">/// as the extension for all target files.</comment>
        <comment type="line" pos:line="31" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="32" pos:column="9">/// &lt;param name="targetDirectory"&gt;The directory for the target files&lt;/param&gt;</comment>
        <constructor><specifier pos:line="33" pos:column="9">public</specifier> <name pos:line="33" pos:column="16">DataFileNameMapping</name><parameter_list pos:line="33" pos:column="35">(<param><decl><type><name pos:line="33" pos:column="36">string</name></type> <name pos:line="33" pos:column="43">targetDirectory</name></decl></param>)</parameter_list>
            <member_list pos:line="34" pos:column="13">: <call><name pos:line="34" pos:column="15">this</name><argument_list pos:line="34" pos:column="19">(<argument><expr><name pos:line="34" pos:column="20">targetDirectory</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="34" pos:column="37">true</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="34" pos:column="43">{ }</block></constructor>

        <comment type="line" pos:line="36" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="37" pos:column="9">/// Creates a new data file name mapping</comment>
        <comment type="line" pos:line="38" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="39" pos:column="9">/// &lt;param name="targetDirectory"&gt;The directory for the target files&lt;/param&gt;</comment>
        <comment type="line" pos:line="40" pos:column="9">/// &lt;param name="compressionEnabled"&gt;</comment>
        <comment type="line" pos:line="41" pos:column="9">/// If true, use &lt;see cref="XmlSerialization.DEFAULT_COMPRESSED_EXTENSION"&gt;the default compression extension&lt;/see&gt;.</comment>
        <comment type="line" pos:line="42" pos:column="9">/// Otherwise, use &lt;see cref="XmlSerialization.DEFAULT_EXTENSION"&gt;the default extension&lt;/see&gt;&lt;/param&gt;.</comment>
        <constructor><specifier pos:line="43" pos:column="9">public</specifier> <name pos:line="43" pos:column="16">DataFileNameMapping</name><parameter_list pos:line="43" pos:column="35">(<param><decl><type><name pos:line="43" pos:column="36">string</name></type> <name pos:line="43" pos:column="43">targetDirectory</name></decl></param>, <param><decl><type><name pos:line="43" pos:column="60">bool</name></type> <name pos:line="43" pos:column="65">compressionEnabled</name></decl></param>)</parameter_list>
            <member_list pos:line="44" pos:column="13">: <call><name pos:line="44" pos:column="15">base</name><argument_list pos:line="44" pos:column="19">(<argument><expr><name pos:line="44" pos:column="20">targetDirectory</name></expr></argument>, <argument><expr><call><name pos:line="44" pos:column="37">GetDefaultExtension</name><argument_list pos:line="44" pos:column="56">(<argument><expr><name pos:line="44" pos:column="57">compressionEnabled</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> </member_list><block pos:line="44" pos:column="78">{
            <expr_stmt><expr><name pos:line="45" pos:column="13">_compressionEnabled</name> <op:operator pos:line="45" pos:column="33">=</op:operator> <name pos:line="45" pos:column="35">compressionEnabled</name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="48" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="49" pos:column="9">/// Reads the source path from the &lt;paramref name="targetPath"/&gt;.</comment>
        <comment type="line" pos:line="50" pos:column="9">/// This works by reading the XML and finding the first &lt;see cref="SrcMLLocation.XmlName"&gt;Location&lt;/see&gt; element.</comment>
        <comment type="line" pos:line="51" pos:column="9">/// It then gets the &lt;see cref="SourceLocation.XmlFileAttributeName"&gt;file attribute&lt;/see&gt; within it. If the file</comment>
        <comment type="line" pos:line="52" pos:column="9">/// is compressed, it should automatically decompress it.</comment>
        <comment type="line" pos:line="53" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="54" pos:column="9">/// &lt;param name="targetPath"&gt;The target path&lt;/param&gt;</comment>
        <comment type="line" pos:line="55" pos:column="9">/// &lt;returns&gt;The source path found in &lt;paramref name="targetPath"/&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="56" pos:column="9">protected</specifier> <specifier pos:line="56" pos:column="19">override</specifier> <name pos:line="56" pos:column="28">string</name></type> <name pos:line="56" pos:column="35">GetSourcePathFromTargetFile</name><parameter_list pos:line="56" pos:column="62">(<param><decl><type><name pos:line="56" pos:column="63">string</name></type> <name pos:line="56" pos:column="70">targetPath</name></decl></param>)</parameter_list> <block pos:line="56" pos:column="82">{
            <decl_stmt><decl><type><name pos:line="57" pos:column="13">string</name></type> <name pos:line="57" pos:column="20">sourcePath</name> <init pos:line="57" pos:column="31">= <expr><name pos:line="57" pos:column="33">null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="58" pos:column="13">var</name></type> <name pos:line="58" pos:column="17">targetExtension</name> <init pos:line="58" pos:column="33">= <expr><call><name><name pos:line="58" pos:column="35">Path</name><op:operator pos:line="58" pos:column="39">.</op:operator><name pos:line="58" pos:column="40">GetExtension</name></name><argument_list pos:line="58" pos:column="52">(<argument><expr><name pos:line="58" pos:column="53">targetPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="59" pos:column="13">bool</name></type> <name pos:line="59" pos:column="18">targetNeedsDecompression</name> <init pos:line="59" pos:column="43">= <expr><call><name><name pos:line="59" pos:column="45">String</name><op:operator pos:line="59" pos:column="51">.</op:operator><name pos:line="59" pos:column="52">IsNullOrWhiteSpace</name></name><argument_list pos:line="59" pos:column="70">(<argument><expr><name pos:line="59" pos:column="71">targetExtension</name></expr></argument>)</argument_list></call> <op:operator pos:line="59" pos:column="88">||</op:operator>
                                            <call><name><name pos:line="60" pos:column="45">targetExtension</name><op:operator pos:line="60" pos:column="60">.</op:operator><name pos:line="60" pos:column="61">Equals</name></name><argument_list pos:line="60" pos:column="67">(<argument><expr><name><name pos:line="60" pos:column="68">XmlSerialization</name><op:operator pos:line="60" pos:column="84">.</op:operator><name pos:line="60" pos:column="85">DEFAULT_COMPRESSED_EXTENSION</name></name></expr></argument>,
                                                                   <argument><expr><name><name pos:line="61" pos:column="68">StringComparison</name><op:operator pos:line="61" pos:column="84">.</op:operator><name pos:line="61" pos:column="85">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <using pos:line="63" pos:column="13">using(<decl><type><name pos:line="63" pos:column="19">var</name></type> <name pos:line="63" pos:column="23">fileStream</name> <init pos:line="63" pos:column="34">= <expr><call><name><name pos:line="63" pos:column="36">File</name><op:operator pos:line="63" pos:column="40">.</op:operator><name pos:line="63" pos:column="41">OpenRead</name></name><argument_list pos:line="63" pos:column="49">(<argument><expr><name pos:line="63" pos:column="50">targetPath</name></expr></argument>)</argument_list></call></expr></init></decl>) <block pos:line="63" pos:column="63">{
                <if pos:line="64" pos:column="17">if<condition pos:line="64" pos:column="19">(<expr><name pos:line="64" pos:column="20">targetNeedsDecompression</name></expr>)</condition><then pos:line="64" pos:column="45"> <block pos:line="64" pos:column="46">{
                    <using pos:line="65" pos:column="21">using(<decl><type><name pos:line="65" pos:column="27">var</name></type> <name pos:line="65" pos:column="31">zipStream</name> <init pos:line="65" pos:column="41">= <expr><op:operator pos:line="65" pos:column="43">new</op:operator> <call><name pos:line="65" pos:column="47">GZipStream</name><argument_list pos:line="65" pos:column="57">(<argument><expr><name pos:line="65" pos:column="58">fileStream</name></expr></argument>, <argument><expr><name><name pos:line="65" pos:column="70">CompressionMode</name><op:operator pos:line="65" pos:column="85">.</op:operator><name pos:line="65" pos:column="86">Decompress</name></name></expr></argument>)</argument_list></call></expr></init></decl>) <block pos:line="65" pos:column="99">{
                        <expr_stmt><expr><name pos:line="66" pos:column="25">sourcePath</name> <op:operator pos:line="66" pos:column="36">=</op:operator> <call><name pos:line="66" pos:column="38">GetSourcePathFromTarget</name><argument_list pos:line="66" pos:column="61">(<argument><expr><name pos:line="66" pos:column="62">zipStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></using>
                }</block></then> <else pos:line="68" pos:column="19">else <block pos:line="68" pos:column="24">{
                    <expr_stmt><expr><name pos:line="69" pos:column="21">sourcePath</name> <op:operator pos:line="69" pos:column="32">=</op:operator> <call><name pos:line="69" pos:column="34">GetSourcePathFromTarget</name><argument_list pos:line="69" pos:column="57">(<argument><expr><name pos:line="69" pos:column="58">fileStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>   
            }</block></using>
            <return pos:line="72" pos:column="13">return <expr><name pos:line="72" pos:column="20">sourcePath</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="75" pos:column="9">private</specifier> <specifier pos:line="75" pos:column="17">static</specifier> <name pos:line="75" pos:column="24">string</name></type> <name pos:line="75" pos:column="31">GetDefaultExtension</name><parameter_list pos:line="75" pos:column="50">(<param><decl><type><name pos:line="75" pos:column="51">bool</name></type> <name pos:line="75" pos:column="56">compressionEnabled</name></decl></param>)</parameter_list> <block pos:line="75" pos:column="76">{
            <return pos:line="76" pos:column="13">return <expr><name pos:line="76" pos:column="20">compressionEnabled</name> <op:operator pos:line="76" pos:column="39">?</op:operator> <name><name pos:line="76" pos:column="41">XmlSerialization</name><op:operator pos:line="76" pos:column="57">.</op:operator><name pos:line="76" pos:column="58">DEFAULT_COMPRESSED_EXTENSION</name></name> <op:operator pos:line="76" pos:column="87">:</op:operator> <name><name pos:line="76" pos:column="89">XmlSerialization</name><op:operator pos:line="76" pos:column="105">.</op:operator><name pos:line="76" pos:column="106">DEFAULT_EXTENSION</name></name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="79" pos:column="9">private</specifier> <specifier pos:line="79" pos:column="17">static</specifier> <name pos:line="79" pos:column="24">string</name></type> <name pos:line="79" pos:column="31">GetSourcePathFromTarget</name><parameter_list pos:line="79" pos:column="54">(<param><decl><type><name pos:line="79" pos:column="55">Stream</name></type> <name pos:line="79" pos:column="62">targetStream</name></decl></param>)</parameter_list> <block pos:line="79" pos:column="76">{
            <try pos:line="80" pos:column="13">try <block pos:line="80" pos:column="17">{
                <decl_stmt><decl><type><name pos:line="81" pos:column="17">var</name></type> <name pos:line="81" pos:column="21">target</name> <init pos:line="81" pos:column="28">= <expr><call><name><name pos:line="81" pos:column="30">XElement</name><op:operator pos:line="81" pos:column="38">.</op:operator><name pos:line="81" pos:column="39">Load</name></name><argument_list pos:line="81" pos:column="43">(<argument><expr><name pos:line="81" pos:column="44">targetStream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="82" pos:column="17">var</name></type> <name pos:line="82" pos:column="21">firstLocation</name> <init pos:line="82" pos:column="35">= <expr><op:operator pos:line="82" pos:column="37">(</op:operator><linq><from pos:line="82" pos:column="38">from <expr><name pos:line="82" pos:column="43">location</name></expr> <in pos:line="82" pos:column="52">in <expr><call><name><name pos:line="82" pos:column="55">target</name><op:operator pos:line="82" pos:column="61">.</op:operator><name pos:line="82" pos:column="62">Descendants</name></name><argument_list pos:line="82" pos:column="73">(<argument><expr><name><name pos:line="82" pos:column="74">SrcMLLocation</name><op:operator pos:line="82" pos:column="87">.</op:operator><name pos:line="82" pos:column="88">XmlName</name></name></expr></argument>)</argument_list></call></expr></in></from>
                                     <select pos:line="83" pos:column="38">select <expr><call><name><name pos:line="83" pos:column="45">location</name><op:operator pos:line="83" pos:column="53">.</op:operator><name pos:line="83" pos:column="54">Attribute</name></name><argument_list pos:line="83" pos:column="63">(<argument><expr><name><name pos:line="83" pos:column="64">SourceLocation</name><op:operator pos:line="83" pos:column="78">.</op:operator><name pos:line="83" pos:column="79">XmlFileAttributeName</name></name></expr></argument>)</argument_list></call><op:operator pos:line="83" pos:column="100">.</op:operator><name pos:line="83" pos:column="101">Value</name></expr></select></linq><op:operator pos:line="83" pos:column="106">)</op:operator><op:operator pos:line="83" pos:column="107">.</op:operator><call><name pos:line="83" pos:column="108">FirstOrDefault</name><argument_list pos:line="83" pos:column="122">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <return pos:line="84" pos:column="17">return <expr><name pos:line="84" pos:column="24">firstLocation</name></expr>;</return>
            }</block> <catch pos:line="85" pos:column="15">catch<parameter_list pos:line="85" pos:column="20">(<param><decl><type><name pos:line="85" pos:column="21">XmlException</name></type></decl></param>)</parameter_list> <block pos:line="85" pos:column="35">{

            }</block></catch></try>
            <return pos:line="88" pos:column="13">return <expr><name pos:line="88" pos:column="20">null</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
