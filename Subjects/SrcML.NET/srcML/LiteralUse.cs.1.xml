<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data\LiteralUse.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2014 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *    Patrick Francis (ABB Group) - API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="13" pos:column="1">using <name pos:line="13" pos:column="7">System</name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Xml</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Xml</name><op:operator pos:line="15" pos:column="17">.</op:operator><name pos:line="15" pos:column="18">Linq</name></name>;</using>

<namespace pos:line="17" pos:column="1">namespace <name><name pos:line="17" pos:column="11">ABB</name><op:operator pos:line="17" pos:column="14">.</op:operator><name pos:line="17" pos:column="15">SrcML</name><op:operator pos:line="17" pos:column="20">.</op:operator><name pos:line="17" pos:column="21">Data</name></name> <block pos:line="17" pos:column="26">{

    <comment type="line" pos:line="19" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="20" pos:column="5">/// Represents a use of a literal in a program.</comment>
    <comment type="line" pos:line="21" pos:column="5">/// For example, in "int a = 42;" 42 is a literal use.</comment>
    <comment type="line" pos:line="22" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="23" pos:column="5">public</specifier> class <name pos:line="23" pos:column="18">LiteralUse</name> <super pos:line="23" pos:column="29">: <name pos:line="23" pos:column="31">Expression</name></super> <block pos:line="23" pos:column="42">{

        <comment type="line" pos:line="25" pos:column="9">/// &lt;summary&gt; The XML name for LiteralUse &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="26" pos:column="9">public</specifier> <specifier pos:line="26" pos:column="16">new</specifier> <specifier pos:line="26" pos:column="20">const</specifier> <name pos:line="26" pos:column="26">string</name></type> <name pos:line="26" pos:column="33">XmlName</name> <init pos:line="26" pos:column="41">= <expr><lit:literal type="string" pos:line="26" pos:column="43">"lu"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="28" pos:column="9">/// &lt;summary&gt; XML Name for &lt;see cref="Kind" /&gt; &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="29" pos:column="9">public</specifier> <specifier pos:line="29" pos:column="16">const</specifier> <name pos:line="29" pos:column="22">string</name></type> <name pos:line="29" pos:column="29">XmlKindName</name> <init pos:line="29" pos:column="41">= <expr><lit:literal type="string" pos:line="29" pos:column="43">"Kind"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="31" pos:column="9">/// &lt;summary&gt; XML Name for &lt;see cref="Text" /&gt; &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="32" pos:column="9">public</specifier> <specifier pos:line="32" pos:column="16">const</specifier> <name pos:line="32" pos:column="22">string</name></type> <name pos:line="32" pos:column="29">XmlTextName</name> <init pos:line="32" pos:column="41">= <expr><lit:literal type="string" pos:line="32" pos:column="43">"Text"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="34" pos:column="9">/// &lt;summary&gt;The text of the literal.&lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="35" pos:column="9">public</specifier> <name pos:line="35" pos:column="16">string</name></type> <name pos:line="35" pos:column="23">Text</name> <block pos:line="35" pos:column="28">{ <function_decl><name pos:line="35" pos:column="30">get</name>;</function_decl> <function_decl><name pos:line="35" pos:column="35">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="37" pos:column="9">/// &lt;summary&gt;The kind of literal.&lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="38" pos:column="9">public</specifier> <name pos:line="38" pos:column="16">LiteralKind</name></type> <name pos:line="38" pos:column="28">Kind</name> <block pos:line="38" pos:column="33">{ <function_decl><name pos:line="38" pos:column="35">get</name>;</function_decl> <function_decl><name pos:line="38" pos:column="40">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="40" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="41" pos:column="9">/// Gets the literal kind from the</comment>
        <comment type="line" pos:line="42" pos:column="9">/// &lt;paramref name="literalElement"/&gt;&lt;/summary&gt;</comment>
        <comment type="line" pos:line="43" pos:column="9">/// &lt;param name="literalElement"&gt;The literal element&lt;/param&gt;</comment>
        <comment type="line" pos:line="44" pos:column="9">/// &lt;returns&gt;The kind of element this is&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="45" pos:column="9">public</specifier> <specifier pos:line="45" pos:column="16">static</specifier> <name pos:line="45" pos:column="23">LiteralKind</name></type> <name pos:line="45" pos:column="35">GetLiteralKind</name><parameter_list pos:line="45" pos:column="49">(<param><decl><type><name pos:line="45" pos:column="50">XElement</name></type> <name pos:line="45" pos:column="59">literalElement</name></decl></param>)</parameter_list> <block pos:line="45" pos:column="75">{
            <if pos:line="46" pos:column="13">if<condition pos:line="46" pos:column="15">(<expr><name pos:line="46" pos:column="16">literalElement</name> <op:operator pos:line="46" pos:column="31">==</op:operator> <name pos:line="46" pos:column="34">null</name></expr>)</condition><then pos:line="46" pos:column="39">
                <throw pos:line="47" pos:column="17">throw <expr><op:operator pos:line="47" pos:column="23">new</op:operator> <call><name pos:line="47" pos:column="27">ArgumentNullException</name><argument_list pos:line="47" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="47" pos:column="49">"literalElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="48" pos:column="13">if<condition pos:line="48" pos:column="15">(<expr><name><name pos:line="48" pos:column="16">literalElement</name><op:operator pos:line="48" pos:column="30">.</op:operator><name pos:line="48" pos:column="31">Name</name></name> <op:operator pos:line="48" pos:column="36">!=</op:operator> <name><name pos:line="48" pos:column="39">LIT</name><op:operator pos:line="48" pos:column="42">.</op:operator><name pos:line="48" pos:column="43">Literal</name></name></expr>)</condition><then pos:line="48" pos:column="51">
                <throw pos:line="49" pos:column="17">throw <expr><op:operator pos:line="49" pos:column="23">new</op:operator> <call><name pos:line="49" pos:column="27">ArgumentException</name><argument_list pos:line="49" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="49" pos:column="45">"should be of type LIT.Literal"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="49" pos:column="78">"literalElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="51" pos:column="13">var</name></type> <name pos:line="51" pos:column="17">typeAttribute</name> <init pos:line="51" pos:column="31">= <expr><call><name><name pos:line="51" pos:column="33">literalElement</name><op:operator pos:line="51" pos:column="47">.</op:operator><name pos:line="51" pos:column="48">Attribute</name></name><argument_list pos:line="51" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="51" pos:column="58">"type"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="52" pos:column="13">if<condition pos:line="52" pos:column="15">(<expr><name pos:line="52" pos:column="16">null</name> <op:operator pos:line="52" pos:column="21">==</op:operator> <name pos:line="52" pos:column="24">typeAttribute</name></expr>)</condition><then pos:line="52" pos:column="38">
                <throw pos:line="53" pos:column="17">throw <expr><op:operator pos:line="53" pos:column="23">new</op:operator> <call><name pos:line="53" pos:column="27">ArgumentException</name><argument_list pos:line="53" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="53" pos:column="45">"should contain a \"type\" attribute"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="53" pos:column="84">"literalElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="55" pos:column="13">var</name></type> <name pos:line="55" pos:column="17">kind</name> <init pos:line="55" pos:column="22">= <expr><name><name pos:line="55" pos:column="24">typeAttribute</name><op:operator pos:line="55" pos:column="37">.</op:operator><name pos:line="55" pos:column="38">Value</name></name></expr></init></decl>;</decl_stmt>
            <switch pos:line="56" pos:column="13">switch<condition pos:line="56" pos:column="19">(<expr><name pos:line="56" pos:column="20">kind</name></expr>)</condition> <block pos:line="56" pos:column="26">{
                <case pos:line="57" pos:column="17">case <expr><lit:literal type="string" pos:line="57" pos:column="22">"boolean"</lit:literal></expr>:
                    <return pos:line="58" pos:column="21">return <expr><name><name pos:line="58" pos:column="28">LiteralKind</name><op:operator pos:line="58" pos:column="39">.</op:operator><name pos:line="58" pos:column="40">Boolean</name></name></expr>;</return>
                </case><case pos:line="59" pos:column="17">case <expr><lit:literal type="string" pos:line="59" pos:column="22">"char"</lit:literal></expr>:
                    <return pos:line="60" pos:column="21">return <expr><name><name pos:line="60" pos:column="28">LiteralKind</name><op:operator pos:line="60" pos:column="39">.</op:operator><name pos:line="60" pos:column="40">Character</name></name></expr>;</return>
                </case><case pos:line="61" pos:column="17">case <expr><lit:literal type="string" pos:line="61" pos:column="22">"number"</lit:literal></expr>:
                    <return pos:line="62" pos:column="21">return <expr><name><name pos:line="62" pos:column="28">LiteralKind</name><op:operator pos:line="62" pos:column="39">.</op:operator><name pos:line="62" pos:column="40">Number</name></name></expr>;</return>
                </case><case pos:line="63" pos:column="17">case <expr><lit:literal type="string" pos:line="63" pos:column="22">"string"</lit:literal></expr>:
                    <return pos:line="64" pos:column="21">return <expr><name><name pos:line="64" pos:column="28">LiteralKind</name><op:operator pos:line="64" pos:column="39">.</op:operator><name pos:line="64" pos:column="40">String</name></name></expr>;</return>
                </case><case pos:line="65" pos:column="17">case <expr><lit:literal type="string" pos:line="65" pos:column="22">"null"</lit:literal></expr>:
                    <return pos:line="66" pos:column="21">return <expr><name><name pos:line="66" pos:column="28">LiteralKind</name><op:operator pos:line="66" pos:column="39">.</op:operator><name pos:line="66" pos:column="40">Null</name></name></expr>;</return>
            </case>}</block></switch>
            <throw pos:line="68" pos:column="13">throw <expr><op:operator pos:line="68" pos:column="19">new</op:operator> <call><name pos:line="68" pos:column="23">SrcMLException</name><argument_list pos:line="68" pos:column="37">(<argument><expr><call><name><name pos:line="68" pos:column="38">String</name><op:operator pos:line="68" pos:column="44">.</op:operator><name pos:line="68" pos:column="45">Format</name></name><argument_list pos:line="68" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="68" pos:column="52">"\"{0}\" is not a valid literal kind"</lit:literal></expr></argument>, <argument><expr><name pos:line="68" pos:column="91">kind</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></function>

        <comment type="line" pos:line="71" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="72" pos:column="9">/// Instance method for getting &lt;see cref="LiteralUse.XmlName"/&gt;</comment>
        <comment type="line" pos:line="73" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="74" pos:column="9">/// &lt;returns&gt;Returns the XML name for LiteralUse&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="75" pos:column="9">public</specifier> <specifier pos:line="75" pos:column="16">override</specifier> <name pos:line="75" pos:column="25">string</name></type> <name pos:line="75" pos:column="32">GetXmlName</name><parameter_list pos:line="75" pos:column="42">()</parameter_list> <block pos:line="75" pos:column="45">{ <return pos:line="75" pos:column="47">return <expr><name><name pos:line="75" pos:column="54">LiteralUse</name><op:operator pos:line="75" pos:column="64">.</op:operator><name pos:line="75" pos:column="65">XmlName</name></name></expr>;</return> }</block></function>

        <comment type="line" pos:line="77" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="78" pos:column="9">/// Read the XML attributes from the current &lt;paramref name="reader"/&gt; position</comment>
        <comment type="line" pos:line="79" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="80" pos:column="9">/// &lt;param name="reader"&gt;The XML reader&lt;/param&gt;</comment>
        <function><type><specifier pos:line="81" pos:column="9">protected</specifier> <specifier pos:line="81" pos:column="19">override</specifier> <name pos:line="81" pos:column="28">void</name></type> <name pos:line="81" pos:column="33">ReadXmlAttributes</name><parameter_list pos:line="81" pos:column="50">(<param><decl><type><name pos:line="81" pos:column="51">XmlReader</name></type> <name pos:line="81" pos:column="61">reader</name></decl></param>)</parameter_list> <block pos:line="81" pos:column="69">{
            <decl_stmt><decl><type><name pos:line="82" pos:column="13">string</name></type> <name pos:line="82" pos:column="20">attribute</name> <init pos:line="82" pos:column="30">= <expr><call><name><name pos:line="82" pos:column="32">reader</name><op:operator pos:line="82" pos:column="38">.</op:operator><name pos:line="82" pos:column="39">GetAttribute</name></name><argument_list pos:line="82" pos:column="51">(<argument><expr><name pos:line="82" pos:column="52">XmlKindName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="83" pos:column="13">if<condition pos:line="83" pos:column="15">(<expr><op:operator pos:line="83" pos:column="16">!</op:operator><call><name><name pos:line="83" pos:column="17">String</name><op:operator pos:line="83" pos:column="23">.</op:operator><name pos:line="83" pos:column="24">IsNullOrEmpty</name></name><argument_list pos:line="83" pos:column="37">(<argument><expr><name pos:line="83" pos:column="38">attribute</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="83" pos:column="49"> <block pos:line="83" pos:column="50">{
                <expr_stmt><expr><name pos:line="84" pos:column="17">Kind</name> <op:operator pos:line="84" pos:column="22">=</op:operator> <call><name><name pos:line="84" pos:column="24">LiteralKindExtensions</name><op:operator pos:line="84" pos:column="45">.</op:operator><name pos:line="84" pos:column="46">FromKeyword</name></name><argument_list pos:line="84" pos:column="57">(<argument><expr><name pos:line="84" pos:column="58">attribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name pos:line="86" pos:column="13">attribute</name> <op:operator pos:line="86" pos:column="23">=</op:operator> <call><name><name pos:line="86" pos:column="25">reader</name><op:operator pos:line="86" pos:column="31">.</op:operator><name pos:line="86" pos:column="32">GetAttribute</name></name><argument_list pos:line="86" pos:column="44">(<argument><expr><name pos:line="86" pos:column="45">XmlTextName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if pos:line="87" pos:column="13">if<condition pos:line="87" pos:column="15">(<expr><op:operator pos:line="87" pos:column="16">!</op:operator><call><name><name pos:line="87" pos:column="17">String</name><op:operator pos:line="87" pos:column="23">.</op:operator><name pos:line="87" pos:column="24">IsNullOrEmpty</name></name><argument_list pos:line="87" pos:column="37">(<argument><expr><name pos:line="87" pos:column="38">attribute</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="87" pos:column="49"> <block pos:line="87" pos:column="50">{
                <expr_stmt><expr><name pos:line="88" pos:column="17">Text</name> <op:operator pos:line="88" pos:column="22">=</op:operator> <name pos:line="88" pos:column="24">attribute</name></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name><name pos:line="91" pos:column="13">base</name><op:operator pos:line="91" pos:column="17">.</op:operator><name pos:line="91" pos:column="18">ReadXmlAttributes</name></name><argument_list pos:line="91" pos:column="35">(<argument><expr><name pos:line="91" pos:column="36">reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="94" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="95" pos:column="9">/// Writes XML attributes from this object to the XML writer</comment>
        <comment type="line" pos:line="96" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="97" pos:column="9">/// &lt;param name="writer"&gt;The XML writer&lt;/param&gt;</comment>
        <function><type><specifier pos:line="98" pos:column="9">protected</specifier> <specifier pos:line="98" pos:column="19">override</specifier> <name pos:line="98" pos:column="28">void</name></type> <name pos:line="98" pos:column="33">WriteXmlAttributes</name><parameter_list pos:line="98" pos:column="51">(<param><decl><type><name pos:line="98" pos:column="52">XmlWriter</name></type> <name pos:line="98" pos:column="62">writer</name></decl></param>)</parameter_list> <block pos:line="98" pos:column="70">{
            <expr_stmt><expr><call><name><name pos:line="99" pos:column="13">writer</name><op:operator pos:line="99" pos:column="19">.</op:operator><name pos:line="99" pos:column="20">WriteAttributeString</name></name><argument_list pos:line="99" pos:column="40">(<argument><expr><name pos:line="99" pos:column="41">XmlKindName</name></expr></argument>, <argument><expr><call><name><name pos:line="99" pos:column="54">Kind</name><op:operator pos:line="99" pos:column="58">.</op:operator><name pos:line="99" pos:column="59">ToKeyword</name></name><argument_list pos:line="99" pos:column="68">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="100" pos:column="13">writer</name><op:operator pos:line="100" pos:column="19">.</op:operator><name pos:line="100" pos:column="20">WriteAttributeString</name></name><argument_list pos:line="100" pos:column="40">(<argument><expr><name pos:line="100" pos:column="41">XmlTextName</name></expr></argument>, <argument><expr><name pos:line="100" pos:column="54">Text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="101" pos:column="13">base</name><op:operator pos:line="101" pos:column="17">.</op:operator><name pos:line="101" pos:column="18">WriteXmlAttributes</name></name><argument_list pos:line="101" pos:column="36">(<argument><expr><name pos:line="101" pos:column="37">writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="104" pos:column="9">/// &lt;summary&gt; Returns the text value of this literal. &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="105" pos:column="9">public</specifier> <specifier pos:line="105" pos:column="16">override</specifier> <name pos:line="105" pos:column="25">string</name></type> <name pos:line="105" pos:column="32">ToString</name><parameter_list pos:line="105" pos:column="40">()</parameter_list> <block pos:line="105" pos:column="43">{
            <return pos:line="106" pos:column="13">return <expr><name pos:line="106" pos:column="20">Text</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
