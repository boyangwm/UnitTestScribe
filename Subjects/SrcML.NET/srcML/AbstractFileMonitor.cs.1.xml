<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML\AbstractFileMonitor.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2013 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - Initial implementation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">ABB</name><op:operator pos:line="12" pos:column="10">.</op:operator><name pos:line="12" pos:column="11">SrcML</name><op:operator pos:line="12" pos:column="16">.</op:operator><name pos:line="12" pos:column="17">Utilities</name></name>;</using>
<using pos:line="13" pos:column="1">using <name pos:line="13" pos:column="7">log4net</name>;</using>
<using pos:line="14" pos:column="1">using <name pos:line="14" pos:column="7">System</name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Collections</name><op:operator pos:line="15" pos:column="25">.</op:operator><name pos:line="15" pos:column="26">Concurrent</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Collections</name><op:operator pos:line="16" pos:column="25">.</op:operator><name pos:line="16" pos:column="26">Generic</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Collections</name><op:operator pos:line="17" pos:column="25">.</op:operator><name pos:line="17" pos:column="26">ObjectModel</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Diagnostics</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">System</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">IO</name></name>;</using>
<using pos:line="20" pos:column="1">using <name><name pos:line="20" pos:column="7">System</name><op:operator pos:line="20" pos:column="13">.</op:operator><name pos:line="20" pos:column="14">Linq</name></name>;</using>
<using pos:line="21" pos:column="1">using <name><name pos:line="21" pos:column="7">System</name><op:operator pos:line="21" pos:column="13">.</op:operator><name pos:line="21" pos:column="14">Text</name></name>;</using>
<using pos:line="22" pos:column="1">using <name><name pos:line="22" pos:column="7">System</name><op:operator pos:line="22" pos:column="13">.</op:operator><name pos:line="22" pos:column="14">Threading</name><op:operator pos:line="22" pos:column="23">.</op:operator><name pos:line="22" pos:column="24">Tasks</name></name>;</using>

<namespace pos:line="24" pos:column="1">namespace <name><name pos:line="24" pos:column="11">ABB</name><op:operator pos:line="24" pos:column="14">.</op:operator><name pos:line="24" pos:column="15">SrcML</name></name> <block pos:line="24" pos:column="21">{

    <comment type="line" pos:line="26" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="27" pos:column="5">/// &lt;para&gt;Represents an abstract file monitor. This class contains archives for storing various</comment>
    <comment type="line" pos:line="28" pos:column="5">/// file types To start using it, you first instantiate it with a</comment>
    <comment type="line" pos:line="29" pos:column="5">/// &lt;see cref="AbstractArchive"&gt;default archive&lt;/see&gt;. You then call</comment>
    <comment type="line" pos:line="30" pos:column="5">/// &lt;see cref="RegisterArchive"/&gt; for each alternative archive. This class automatically routes</comment>
    <comment type="line" pos:line="31" pos:column="5">/// files to the appropriate archive.&lt;/para&gt; &lt;para&gt;You begin monitoring by calling</comment>
    <comment type="line" pos:line="32" pos:column="5">/// &lt;see cref="StartMonitoring"/&gt;. &lt;see cref="StartMonitoring"/&gt; should subscribe to any events</comment>
    <comment type="line" pos:line="33" pos:column="5">/// and then call functions to respond to those events:&lt;/para&gt; &lt;list type="bullet"&gt;</comment>
    <comment type="line" pos:line="34" pos:column="5">/// &lt;item&gt;&lt;description&gt;&lt;see cref="AddFile(string)"/&gt;&lt;/description&gt;&lt;/item&gt;</comment>
    <comment type="line" pos:line="35" pos:column="5">/// &lt;item&gt;&lt;description&gt;&lt;see cref="DeleteFile(string)"/&gt;&lt;/description&gt;&lt;/item&gt;</comment>
    <comment type="line" pos:line="36" pos:column="5">/// &lt;item&gt;&lt;description&gt;&lt;/description&gt;&lt;see cref="UpdateFile(string)"/&gt;&lt;/item&gt;</comment>
    <comment type="line" pos:line="37" pos:column="5">/// &lt;item&gt;&lt;description&gt;&lt;see cref="RenameFile(string,string)"/&gt;&lt;/description&gt;&lt;/item&gt; &lt;/list&gt;</comment>
    <comment type="line" pos:line="38" pos:column="5">/// &lt;para&gt;When the archive is done processing the file, it raises its own</comment>
    <comment type="line" pos:line="39" pos:column="5">/// &lt;see cref="AbstractArchive.FileChanged"&gt;event&lt;/see&gt;&lt;/para&gt;</comment>
    <comment type="line" pos:line="40" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="41" pos:column="5">public</specifier> <specifier pos:line="41" pos:column="12">abstract</specifier> class <name pos:line="41" pos:column="27">AbstractFileMonitor</name> <super pos:line="41" pos:column="47">: <name pos:line="41" pos:column="49">IDisposable</name></super> <block pos:line="41" pos:column="61">{
        <decl_stmt><decl><type><specifier pos:line="42" pos:column="9">private</specifier> <name><name pos:line="42" pos:column="17">Dictionary</name><argument_list pos:line="42" pos:column="27">&lt;<argument><name pos:line="42" pos:column="28">string</name></argument>, <argument><name pos:line="42" pos:column="36">AbstractArchive</name></argument>&gt;</argument_list></name></type> <name pos:line="42" pos:column="53">archiveMap</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="43" pos:column="9">private</specifier> <name pos:line="43" pos:column="17">AbstractArchive</name></type> <name pos:line="43" pos:column="33">defaultArchive</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="44" pos:column="9">private</specifier> <name pos:line="44" pos:column="17">int</name></type> <name pos:line="44" pos:column="21">numberOfWorkingArchives</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="45" pos:column="9">private</specifier> <name pos:line="45" pos:column="17">ReadyNotifier</name></type> <name pos:line="45" pos:column="31">ReadyState</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="46" pos:column="9">private</specifier> <name><name pos:line="46" pos:column="17">HashSet</name><argument_list pos:line="46" pos:column="24">&lt;<argument><name pos:line="46" pos:column="25">AbstractArchive</name></argument>&gt;</argument_list></name></type> <name pos:line="46" pos:column="42">registeredArchives</name></decl>;</decl_stmt>

        <comment type="line" pos:line="48" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="49" pos:column="9">/// </comment>
        <comment type="line" pos:line="50" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="51" pos:column="9">/// &lt;param name="baseDirectory"&gt;&lt;/param&gt;</comment>
        <constructor><specifier pos:line="52" pos:column="9">protected</specifier> <name pos:line="52" pos:column="19">AbstractFileMonitor</name><parameter_list pos:line="52" pos:column="38">(<param><decl><type><name pos:line="52" pos:column="39">TaskScheduler</name></type> <name pos:line="52" pos:column="53">scheduler</name></decl></param>, <param><decl><type><name pos:line="52" pos:column="64">string</name></type> <name pos:line="52" pos:column="71">baseDirectory</name></decl></param>)</parameter_list> <member_list pos:line="52" pos:column="86">:
            <call><name pos:line="53" pos:column="13">this</name><argument_list pos:line="53" pos:column="17">(<argument><expr><name pos:line="53" pos:column="18">scheduler</name></expr></argument>, <argument><expr><name pos:line="53" pos:column="29">baseDirectory</name></expr></argument>, <argument><expr><name pos:line="53" pos:column="44">null</name></expr></argument>)</argument_list></call> </member_list><block pos:line="53" pos:column="50">{ }</block></constructor>

        <comment type="line" pos:line="55" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="56" pos:column="9">/// Creates a new AbstractFileMonitor with the default archive and a collection of</comment>
        <comment type="line" pos:line="57" pos:column="9">/// non-default archives that should be registered</comment>
        <comment type="line" pos:line="58" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="59" pos:column="9">/// &lt;param name="baseDirectory"&gt;The folder where this monitor stores it archives&lt;/param&gt;</comment>
        <comment type="line" pos:line="60" pos:column="9">/// &lt;param name="defaultArchive"&gt;The default archive&lt;/param&gt;</comment>
        <comment type="line" pos:line="61" pos:column="9">/// &lt;param name="otherArchives"&gt;A list of other archives that should be registered via see</comment>
        <comment type="line" pos:line="62" pos:column="9">/// cref="RegisterArchive(IArchive)"/&gt;&lt;/param&gt;</comment>
        <constructor><specifier pos:line="63" pos:column="9">protected</specifier> <name pos:line="63" pos:column="19">AbstractFileMonitor</name><parameter_list pos:line="63" pos:column="38">(<param><decl><type><name pos:line="63" pos:column="39">string</name></type> <name pos:line="63" pos:column="46">baseDirectory</name></decl></param>, <param><decl><type><name pos:line="63" pos:column="61">AbstractArchive</name></type> <name pos:line="63" pos:column="77">defaultArchive</name></decl></param>, <param><decl><type><specifier pos:line="63" pos:column="93">params</specifier> <name><name pos:line="63" pos:column="100">AbstractArchive</name><index pos:line="63" pos:column="115">[]</index></name></type> <name pos:line="63" pos:column="118">otherArchives</name></decl></param>)</parameter_list> <block pos:line="63" pos:column="133">{
            <expr_stmt><expr><name><name pos:line="64" pos:column="13">this</name><op:operator pos:line="64" pos:column="17">.</op:operator><name pos:line="64" pos:column="18">MonitorStoragePath</name></name> <op:operator pos:line="64" pos:column="37">=</op:operator> <name pos:line="64" pos:column="39">baseDirectory</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="65" pos:column="13">this</name><op:operator pos:line="65" pos:column="17">.</op:operator><name pos:line="65" pos:column="18">registeredArchives</name></name> <op:operator pos:line="65" pos:column="37">=</op:operator> <op:operator pos:line="65" pos:column="39">new</op:operator> <call><name><name pos:line="65" pos:column="43">HashSet</name><argument_list pos:line="65" pos:column="50">&lt;<argument><name pos:line="65" pos:column="51">AbstractArchive</name></argument>&gt;</argument_list></name><argument_list pos:line="65" pos:column="67">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="66" pos:column="13">this</name><op:operator pos:line="66" pos:column="17">.</op:operator><name pos:line="66" pos:column="18">archiveMap</name></name> <op:operator pos:line="66" pos:column="29">=</op:operator> <op:operator pos:line="66" pos:column="31">new</op:operator> <call><name><name pos:line="66" pos:column="35">Dictionary</name><argument_list pos:line="66" pos:column="45">&lt;<argument><name pos:line="66" pos:column="46">string</name></argument>, <argument><name pos:line="66" pos:column="54">AbstractArchive</name></argument>&gt;</argument_list></name><argument_list pos:line="66" pos:column="70">(<argument><expr><name><name pos:line="66" pos:column="71">StringComparer</name><op:operator pos:line="66" pos:column="85">.</op:operator><name pos:line="66" pos:column="86">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="67" pos:column="13">this</name><op:operator pos:line="67" pos:column="17">.</op:operator><name pos:line="67" pos:column="18">ReadyState</name></name> <op:operator pos:line="67" pos:column="29">=</op:operator> <op:operator pos:line="67" pos:column="31">new</op:operator> <call><name pos:line="67" pos:column="35">ReadyNotifier</name><argument_list pos:line="67" pos:column="48">(<argument><expr><name pos:line="67" pos:column="49">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="68" pos:column="13">this</name><op:operator pos:line="68" pos:column="17">.</op:operator><name pos:line="68" pos:column="18">numberOfWorkingArchives</name></name> <op:operator pos:line="68" pos:column="42">=</op:operator> <lit:literal type="number" pos:line="68" pos:column="44">0</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="69" pos:column="13">Factory</name> <op:operator pos:line="69" pos:column="21">=</op:operator> <name><name pos:line="69" pos:column="23">Task</name><op:operator pos:line="69" pos:column="27">.</op:operator><name pos:line="69" pos:column="28">Factory</name></name></expr>;</expr_stmt>

            <if pos:line="71" pos:column="13">if<condition pos:line="71" pos:column="15">(<expr><name pos:line="71" pos:column="16">null</name> <op:operator pos:line="71" pos:column="21">!=</op:operator> <name pos:line="71" pos:column="24">defaultArchive</name></expr>)</condition><then pos:line="71" pos:column="39"> <block pos:line="71" pos:column="40">{
                <expr_stmt><expr><call><name pos:line="72" pos:column="17">RegisterArchive</name><argument_list pos:line="72" pos:column="32">(<argument><expr><name pos:line="72" pos:column="33">defaultArchive</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="72" pos:column="49">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            
            <foreach pos:line="75" pos:column="13">foreach(<init><decl><type><name pos:line="75" pos:column="21">var</name></type> <name pos:line="75" pos:column="25">archive</name> <range pos:line="75" pos:column="33">in <expr><name pos:line="75" pos:column="36">otherArchives</name></expr></range></decl></init>) <block pos:line="75" pos:column="51">{
                <expr_stmt><expr><call><name><name pos:line="76" pos:column="17">this</name><op:operator pos:line="76" pos:column="21">.</op:operator><name pos:line="76" pos:column="22">RegisterArchive</name></name><argument_list pos:line="76" pos:column="37">(<argument><expr><name pos:line="76" pos:column="38">archive</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="76" pos:column="47">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></constructor>

        <comment type="line" pos:line="80" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="81" pos:column="9">/// Creates a new AbstractFileMonitor with the default archive and a collection of</comment>
        <comment type="line" pos:line="82" pos:column="9">/// non-default archives that should be registered</comment>
        <comment type="line" pos:line="83" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="84" pos:column="9">/// &lt;param name="baseDirectory"&gt;The folder where this monitor stores it archives&lt;/param&gt;</comment>
        <comment type="line" pos:line="85" pos:column="9">/// &lt;param name="defaultArchive"&gt;The default archive&lt;/param&gt;</comment>
        <comment type="line" pos:line="86" pos:column="9">/// &lt;param name="otherArchives"&gt;A list of other archives that should be registered via see</comment>
        <comment type="line" pos:line="87" pos:column="9">/// cref="RegisterArchive(IArchive)"/&gt;&lt;/param&gt;</comment>
        <constructor><specifier pos:line="88" pos:column="9">protected</specifier> <name pos:line="88" pos:column="19">AbstractFileMonitor</name><parameter_list pos:line="88" pos:column="38">(<param><decl><type><name pos:line="88" pos:column="39">TaskScheduler</name></type> <name pos:line="88" pos:column="53">scheduler</name></decl></param>, <param><decl><type><name pos:line="88" pos:column="64">string</name></type> <name pos:line="88" pos:column="71">baseDirectory</name></decl></param>, <param><decl><type><name pos:line="88" pos:column="86">AbstractArchive</name></type> <name pos:line="88" pos:column="102">defaultArchive</name></decl></param>, <param><decl><type><specifier pos:line="88" pos:column="118">params</specifier> <name><name pos:line="88" pos:column="125">AbstractArchive</name><index pos:line="88" pos:column="140">[]</index></name></type> <name pos:line="88" pos:column="143">otherArchives</name></decl></param>)</parameter_list> <block pos:line="88" pos:column="158">{
            <expr_stmt><expr><name><name pos:line="89" pos:column="13">this</name><op:operator pos:line="89" pos:column="17">.</op:operator><name pos:line="89" pos:column="18">MonitorStoragePath</name></name> <op:operator pos:line="89" pos:column="37">=</op:operator> <name pos:line="89" pos:column="39">baseDirectory</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="90" pos:column="13">this</name><op:operator pos:line="90" pos:column="17">.</op:operator><name pos:line="90" pos:column="18">registeredArchives</name></name> <op:operator pos:line="90" pos:column="37">=</op:operator> <op:operator pos:line="90" pos:column="39">new</op:operator> <call><name><name pos:line="90" pos:column="43">HashSet</name><argument_list pos:line="90" pos:column="50">&lt;<argument><name pos:line="90" pos:column="51">AbstractArchive</name></argument>&gt;</argument_list></name><argument_list pos:line="90" pos:column="67">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="91" pos:column="13">this</name><op:operator pos:line="91" pos:column="17">.</op:operator><name pos:line="91" pos:column="18">archiveMap</name></name> <op:operator pos:line="91" pos:column="29">=</op:operator> <op:operator pos:line="91" pos:column="31">new</op:operator> <call><name><name pos:line="91" pos:column="35">Dictionary</name><argument_list pos:line="91" pos:column="45">&lt;<argument><name pos:line="91" pos:column="46">string</name></argument>, <argument><name pos:line="91" pos:column="54">AbstractArchive</name></argument>&gt;</argument_list></name><argument_list pos:line="91" pos:column="70">(<argument><expr><name><name pos:line="91" pos:column="71">StringComparer</name><op:operator pos:line="91" pos:column="85">.</op:operator><name pos:line="91" pos:column="86">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="92" pos:column="13">this</name><op:operator pos:line="92" pos:column="17">.</op:operator><name pos:line="92" pos:column="18">ReadyState</name></name> <op:operator pos:line="92" pos:column="29">=</op:operator> <op:operator pos:line="92" pos:column="31">new</op:operator> <call><name pos:line="92" pos:column="35">ReadyNotifier</name><argument_list pos:line="92" pos:column="48">(<argument><expr><name pos:line="92" pos:column="49">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="93" pos:column="13">this</name><op:operator pos:line="93" pos:column="17">.</op:operator><name pos:line="93" pos:column="18">numberOfWorkingArchives</name></name> <op:operator pos:line="93" pos:column="42">=</op:operator> <lit:literal type="number" pos:line="93" pos:column="44">0</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="94" pos:column="13">Factory</name> <op:operator pos:line="94" pos:column="21">=</op:operator> <op:operator pos:line="94" pos:column="23">new</op:operator> <call><name pos:line="94" pos:column="27">TaskFactory</name><argument_list pos:line="94" pos:column="38">(<argument><expr><name pos:line="94" pos:column="39">scheduler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if pos:line="96" pos:column="13">if<condition pos:line="96" pos:column="15">(<expr><name pos:line="96" pos:column="16">null</name> <op:operator pos:line="96" pos:column="21">!=</op:operator> <name pos:line="96" pos:column="24">defaultArchive</name></expr>)</condition><then pos:line="96" pos:column="39"> <block pos:line="96" pos:column="40">{
                <expr_stmt><expr><call><name pos:line="97" pos:column="17">RegisterArchive</name><argument_list pos:line="97" pos:column="32">(<argument><expr><name pos:line="97" pos:column="33">defaultArchive</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="97" pos:column="49">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            
            <foreach pos:line="100" pos:column="13">foreach(<init><decl><type><name pos:line="100" pos:column="21">var</name></type> <name pos:line="100" pos:column="25">archive</name> <range pos:line="100" pos:column="33">in <expr><name pos:line="100" pos:column="36">otherArchives</name></expr></range></decl></init>) <block pos:line="100" pos:column="51">{
                <expr_stmt><expr><call><name><name pos:line="101" pos:column="17">this</name><op:operator pos:line="101" pos:column="21">.</op:operator><name pos:line="101" pos:column="22">RegisterArchive</name></name><argument_list pos:line="101" pos:column="37">(<argument><expr><name pos:line="101" pos:column="38">archive</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="101" pos:column="47">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></constructor>

        <comment type="line" pos:line="105" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="106" pos:column="9">/// Calls &lt;see cref="Dispose(bool)"/&gt; with false as the argument in case disposal hasn't</comment>
        <comment type="line" pos:line="107" pos:column="9">/// already been done.</comment>
        <comment type="line" pos:line="108" pos:column="9">/// &lt;/summary&gt;</comment>
        <destructor><name pos:line="109" pos:column="9">~<name pos:line="109" pos:column="10">AbstractFileMonitor</name></name><parameter_list pos:line="109" pos:column="29">()</parameter_list> <block pos:line="109" pos:column="32">{
            <expr_stmt><expr><call><name pos:line="110" pos:column="13">Dispose</name><argument_list pos:line="110" pos:column="20">(<argument><expr><lit:literal type="boolean" pos:line="110" pos:column="21">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></destructor>

        <comment type="line" pos:line="113" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="114" pos:column="9">/// Event fires when any of the archives raises their</comment>
        <comment type="line" pos:line="115" pos:column="9">/// &lt;see cref="AbstractArchive.FileChanged"/&gt;.</comment>
        <comment type="line" pos:line="116" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="117" pos:column="9">public</specifier> <specifier pos:line="117" pos:column="16">event</specifier> <name><name pos:line="117" pos:column="22">EventHandler</name><argument_list pos:line="117" pos:column="34">&lt;<argument><name pos:line="117" pos:column="35">FileEventRaisedArgs</name></argument>&gt;</argument_list></name></type> <name pos:line="117" pos:column="56">FileChanged</name></decl>;</decl_stmt>

        <comment type="line" pos:line="119" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="120" pos:column="9">/// Event fires when &lt;see cref="StopMonitoring()"/&gt; is completed</comment>
        <comment type="line" pos:line="121" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="122" pos:column="9">public</specifier> <specifier pos:line="122" pos:column="16">event</specifier> <name pos:line="122" pos:column="22">EventHandler</name></type> <name pos:line="122" pos:column="35">MonitoringStopped</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="124" pos:column="9">public</specifier> <specifier pos:line="124" pos:column="16">event</specifier> <name pos:line="124" pos:column="22">EventHandler</name></type> <name pos:line="124" pos:column="35">UpdateArchivesStarted</name></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><specifier pos:line="126" pos:column="9">public</specifier> <specifier pos:line="126" pos:column="16">event</specifier> <name pos:line="126" pos:column="22">EventHandler</name></type> <name pos:line="126" pos:column="35">UpdateArchivesCompleted</name></decl>;</decl_stmt>

        <comment type="line" pos:line="128" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="129" pos:column="9">/// The folder where all of the archives can store their data. &lt;see cref="AbstractArchive"/&gt;</comment>
        <comment type="line" pos:line="130" pos:column="9">/// objects can use this as their root folder</comment>
        <comment type="line" pos:line="131" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="132" pos:column="9">public</specifier> <name pos:line="132" pos:column="16">string</name></type> <name pos:line="132" pos:column="23">MonitorStoragePath</name> <block pos:line="132" pos:column="42">{ <function_decl><name pos:line="132" pos:column="44">get</name>;</function_decl> <function_decl><specifier pos:line="132" pos:column="49">protected</specifier> <name pos:line="132" pos:column="59">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="134" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="135" pos:column="9">/// Number of the elements in the returned collection from GetFilesFromSource()</comment>
        <comment type="line" pos:line="136" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="137" pos:column="9">public</specifier> <name pos:line="137" pos:column="16">int</name></type> <name pos:line="137" pos:column="20">NumberOfAllMonitoredFiles</name> <block pos:line="137" pos:column="46">{ <function_decl><name pos:line="137" pos:column="48">get</name>;</function_decl> <function_decl><specifier pos:line="137" pos:column="53">protected</specifier> <name pos:line="137" pos:column="63">set</name>;</function_decl> }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="139" pos:column="9">public</specifier> <name pos:line="139" pos:column="16">bool</name></type> <name pos:line="139" pos:column="21">UpdateArchivesRunning</name> <block pos:line="139" pos:column="43">{ <function_decl><name pos:line="139" pos:column="45">get</name>;</function_decl> <function_decl><specifier pos:line="139" pos:column="50">protected</specifier> <name pos:line="139" pos:column="60">set</name>;</function_decl> }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="141" pos:column="9">protected</specifier> <name pos:line="141" pos:column="19">TaskFactory</name></type> <name pos:line="141" pos:column="31">Factory</name> <block pos:line="141" pos:column="39">{ <function_decl><name pos:line="141" pos:column="41">get</name>;</function_decl> <function_decl><specifier pos:line="141" pos:column="46">private</specifier> <name pos:line="141" pos:column="54">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="143" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="144" pos:column="9">/// Processes a file addition by adding the file to the appropriate archive</comment>
        <comment type="line" pos:line="145" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="146" pos:column="9">/// &lt;param name="filePath"&gt;the file to add&lt;/param&gt;</comment>
        <function><type><specifier pos:line="147" pos:column="9">public</specifier> <name pos:line="147" pos:column="16">void</name></type> <name pos:line="147" pos:column="21">AddFile</name><parameter_list pos:line="147" pos:column="28">(<param><decl><type><name pos:line="147" pos:column="29">string</name></type> <name pos:line="147" pos:column="36">filePath</name></decl></param>)</parameter_list> <block pos:line="147" pos:column="46">{
            <decl_stmt><decl><type><name pos:line="148" pos:column="13">var</name></type> <name pos:line="148" pos:column="17">archive</name> <init pos:line="148" pos:column="25">= <expr><call><name><name pos:line="148" pos:column="27">this</name><op:operator pos:line="148" pos:column="31">.</op:operator><name pos:line="148" pos:column="32">GetArchiveForFile</name></name><argument_list pos:line="148" pos:column="49">(<argument><expr><name pos:line="148" pos:column="50">filePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="149" pos:column="13">if<condition pos:line="149" pos:column="15">(<expr><name pos:line="149" pos:column="16">null</name> <op:operator pos:line="149" pos:column="21">!=</op:operator> <name pos:line="149" pos:column="24">archive</name></expr>)</condition><then pos:line="149" pos:column="32"> <block pos:line="149" pos:column="33">{
                <expr_stmt><expr><call><name><name pos:line="150" pos:column="17">archive</name><op:operator pos:line="150" pos:column="24">.</op:operator><name pos:line="150" pos:column="25">AddOrUpdateFile</name></name><argument_list pos:line="150" pos:column="40">(<argument><expr><name pos:line="150" pos:column="41">filePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="154" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="155" pos:column="9">/// Processes a file addition by adding the file to the appropriate archive</comment>
        <comment type="line" pos:line="156" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="157" pos:column="9">/// &lt;param name="filePath"&gt;the file to add&lt;/param&gt;</comment>
        <function><type><specifier pos:line="158" pos:column="9">public</specifier> <name pos:line="158" pos:column="16">Task</name></type> <name pos:line="158" pos:column="21">AddFileAsync</name><parameter_list pos:line="158" pos:column="33">(<param><decl><type><name pos:line="158" pos:column="34">string</name></type> <name pos:line="158" pos:column="41">filePath</name></decl></param>)</parameter_list> <block pos:line="158" pos:column="51">{
            <decl_stmt><decl><type><name pos:line="159" pos:column="13">var</name></type> <name pos:line="159" pos:column="17">archive</name> <init pos:line="159" pos:column="25">= <expr><call><name><name pos:line="159" pos:column="27">this</name><op:operator pos:line="159" pos:column="31">.</op:operator><name pos:line="159" pos:column="32">GetArchiveForFile</name></name><argument_list pos:line="159" pos:column="49">(<argument><expr><name pos:line="159" pos:column="50">filePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="160" pos:column="13">if<condition pos:line="160" pos:column="15">(<expr><name pos:line="160" pos:column="16">null</name> <op:operator pos:line="160" pos:column="21">!=</op:operator> <name pos:line="160" pos:column="24">archive</name></expr>)</condition><then pos:line="160" pos:column="32"> <block pos:line="160" pos:column="33">{
                <return pos:line="161" pos:column="17">return <expr><call><name><name pos:line="161" pos:column="24">archive</name><op:operator pos:line="161" pos:column="31">.</op:operator><name pos:line="161" pos:column="32">AddOrUpdateFileAsync</name></name><argument_list pos:line="161" pos:column="52">(<argument><expr><name pos:line="161" pos:column="53">filePath</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
            <return pos:line="163" pos:column="13">return <expr><name pos:line="163" pos:column="20">null</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="166" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="167" pos:column="9">/// Processes a file deletion by deleting the file from the appropriate archive</comment>
        <comment type="line" pos:line="168" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="169" pos:column="9">/// &lt;param name="filePath"&gt;The file to delete&lt;/param&gt;</comment>
        <function><type><specifier pos:line="170" pos:column="9">public</specifier> <name pos:line="170" pos:column="16">void</name></type> <name pos:line="170" pos:column="21">DeleteFile</name><parameter_list pos:line="170" pos:column="31">(<param><decl><type><name pos:line="170" pos:column="32">string</name></type> <name pos:line="170" pos:column="39">filePath</name></decl></param>)</parameter_list> <block pos:line="170" pos:column="49">{
            <decl_stmt><decl><type><name pos:line="171" pos:column="13">var</name></type> <name pos:line="171" pos:column="17">archive</name> <init pos:line="171" pos:column="25">= <expr><call><name><name pos:line="171" pos:column="27">this</name><op:operator pos:line="171" pos:column="31">.</op:operator><name pos:line="171" pos:column="32">GetArchiveForFile</name></name><argument_list pos:line="171" pos:column="49">(<argument><expr><name pos:line="171" pos:column="50">filePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="172" pos:column="13">if<condition pos:line="172" pos:column="15">(<expr><name pos:line="172" pos:column="16">null</name> <op:operator pos:line="172" pos:column="21">!=</op:operator> <name pos:line="172" pos:column="24">archive</name></expr>)</condition><then pos:line="172" pos:column="32"> <block pos:line="172" pos:column="33">{
                <expr_stmt><expr><call><name><name pos:line="173" pos:column="17">archive</name><op:operator pos:line="173" pos:column="24">.</op:operator><name pos:line="173" pos:column="25">DeleteFile</name></name><argument_list pos:line="173" pos:column="35">(<argument><expr><name pos:line="173" pos:column="36">filePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="177" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="178" pos:column="9">/// Processes a file deletion by deleting the file from the appropriate archive</comment>
        <comment type="line" pos:line="179" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="180" pos:column="9">/// &lt;param name="filePath"&gt;The file to delete&lt;/param&gt;</comment>
        <function><type><specifier pos:line="181" pos:column="9">public</specifier> <name pos:line="181" pos:column="16">Task</name></type> <name pos:line="181" pos:column="21">DeleteFileAsync</name><parameter_list pos:line="181" pos:column="36">(<param><decl><type><name pos:line="181" pos:column="37">string</name></type> <name pos:line="181" pos:column="44">filePath</name></decl></param>)</parameter_list> <block pos:line="181" pos:column="54">{
            <decl_stmt><decl><type><name pos:line="182" pos:column="13">var</name></type> <name pos:line="182" pos:column="17">archive</name> <init pos:line="182" pos:column="25">= <expr><call><name><name pos:line="182" pos:column="27">this</name><op:operator pos:line="182" pos:column="31">.</op:operator><name pos:line="182" pos:column="32">GetArchiveForFile</name></name><argument_list pos:line="182" pos:column="49">(<argument><expr><name pos:line="182" pos:column="50">filePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="183" pos:column="13">if<condition pos:line="183" pos:column="15">(<expr><name pos:line="183" pos:column="16">null</name> <op:operator pos:line="183" pos:column="21">!=</op:operator> <name pos:line="183" pos:column="24">archive</name></expr>)</condition><then pos:line="183" pos:column="32"> <block pos:line="183" pos:column="33">{
                <return pos:line="184" pos:column="17">return <expr><call><name><name pos:line="184" pos:column="24">archive</name><op:operator pos:line="184" pos:column="31">.</op:operator><name pos:line="184" pos:column="32">DeleteFileAsync</name></name><argument_list pos:line="184" pos:column="47">(<argument><expr><name pos:line="184" pos:column="48">filePath</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
            <return pos:line="186" pos:column="13">return <expr><name pos:line="186" pos:column="20">null</name></expr>;</return>
        }</block></function>
        <comment type="line" pos:line="188" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="189" pos:column="9">/// disposes of all of the archives and stops the events</comment>
        <comment type="line" pos:line="190" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="191" pos:column="9">public</specifier> <name pos:line="191" pos:column="16">void</name></type> <name pos:line="191" pos:column="21">Dispose</name><parameter_list pos:line="191" pos:column="28">()</parameter_list> <block pos:line="191" pos:column="31">{
            <expr_stmt><expr><call><name><name pos:line="192" pos:column="13">SrcMLFileLogger</name><op:operator pos:line="192" pos:column="28">.</op:operator><name pos:line="192" pos:column="29">DefaultLogger</name><op:operator pos:line="192" pos:column="42">.</op:operator><name pos:line="192" pos:column="43">Info</name></name><argument_list pos:line="192" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="192" pos:column="48">"AbstractFileMonitor.Dispose()"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="193" pos:column="13">Dispose</name><argument_list pos:line="193" pos:column="20">(<argument><expr><lit:literal type="boolean" pos:line="193" pos:column="21">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="194" pos:column="13">GC</name><op:operator pos:line="194" pos:column="15">.</op:operator><name pos:line="194" pos:column="16">SuppressFinalize</name></name><argument_list pos:line="194" pos:column="32">(<argument><expr><name pos:line="194" pos:column="33">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="197" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="198" pos:column="9">/// Returns an enumerable of all the files monitored by this monitor</comment>
        <comment type="line" pos:line="199" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="200" pos:column="9">/// &lt;returns&gt;An enumerable of monitored files&lt;/returns&gt;</comment>
        <function_decl><type><specifier pos:line="201" pos:column="9">public</specifier> <specifier pos:line="201" pos:column="16">abstract</specifier> <name><name pos:line="201" pos:column="25">IEnumerable</name><argument_list pos:line="201" pos:column="36">&lt;<argument><name pos:line="201" pos:column="37">string</name></argument>&gt;</argument_list></name></type> <name pos:line="201" pos:column="45">EnumerateMonitoredFiles</name><parameter_list pos:line="201" pos:column="68">()</parameter_list>;</function_decl>

        <comment type="line" pos:line="203" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="204" pos:column="9">/// Gets the list of files already present in this archive</comment>
        <comment type="line" pos:line="205" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="206" pos:column="9">/// &lt;returns&gt;An enumerable of files present in all of the archives&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="207" pos:column="9">public</specifier> <specifier pos:line="207" pos:column="16">virtual</specifier> <name><name pos:line="207" pos:column="24">IEnumerable</name><argument_list pos:line="207" pos:column="35">&lt;<argument><name pos:line="207" pos:column="36">string</name></argument>&gt;</argument_list></name></type> <name pos:line="207" pos:column="44">GetArchivedFiles</name><parameter_list pos:line="207" pos:column="60">()</parameter_list> <block pos:line="207" pos:column="63">{
            <decl_stmt><decl><type><name pos:line="208" pos:column="13">var</name></type> <name pos:line="208" pos:column="17">archivedFiles</name> <init pos:line="208" pos:column="31">= <expr><linq><from pos:line="208" pos:column="33">from <expr><name pos:line="208" pos:column="38">archive</name></expr> <in pos:line="208" pos:column="46">in <expr><name pos:line="208" pos:column="49">registeredArchives</name></expr></in></from>
                                <from pos:line="209" pos:column="33">from <expr><name pos:line="209" pos:column="38">filePath</name></expr> <in pos:line="209" pos:column="47">in <expr><call><name><name pos:line="209" pos:column="50">archive</name><op:operator pos:line="209" pos:column="57">.</op:operator><name pos:line="209" pos:column="58">GetFiles</name></name><argument_list pos:line="209" pos:column="66">()</argument_list></call></expr></in></from>
                                <select pos:line="210" pos:column="33">select <expr><name pos:line="210" pos:column="40">filePath</name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <return pos:line="211" pos:column="13">return <expr><name pos:line="211" pos:column="20">archivedFiles</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="214" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="215" pos:column="9">/// Gets the list of source files from the object being monitored</comment>
        <comment type="line" pos:line="216" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="217" pos:column="9">/// &lt;returns&gt;An enumerable of files to be monitored&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="218" pos:column="9">public</specifier> <specifier pos:line="218" pos:column="16">virtual</specifier> <name><name pos:line="218" pos:column="24">Collection</name><argument_list pos:line="218" pos:column="34">&lt;<argument><name pos:line="218" pos:column="35">string</name></argument>&gt;</argument_list></name></type> <name pos:line="218" pos:column="43">GetFilesFromSource</name><parameter_list pos:line="218" pos:column="61">()</parameter_list> <block pos:line="218" pos:column="64">{
            <return pos:line="219" pos:column="13">return <expr><op:operator pos:line="219" pos:column="20">new</op:operator> <call><name><name pos:line="219" pos:column="24">Collection</name><argument_list pos:line="219" pos:column="34">&lt;<argument><name pos:line="219" pos:column="35">string</name></argument>&gt;</argument_list></name><argument_list pos:line="219" pos:column="42">(<argument><expr><call><name pos:line="219" pos:column="43">EnumerateMonitoredFiles</name><argument_list pos:line="219" pos:column="66">()</argument_list></call><op:operator pos:line="219" pos:column="68">.</op:operator><call><name pos:line="219" pos:column="69">ToList</name><argument_list pos:line="219" pos:column="75">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="222" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="223" pos:column="9">/// Registers an archive in the file monitor. All file changes will be automatically routed</comment>
        <comment type="line" pos:line="224" pos:column="9">/// to the appropriate archive based on file extension (via</comment>
        <comment type="line" pos:line="225" pos:column="9">/// &lt;see cref="AbstractArchive.SupportedExtensions"/&gt;</comment>
        <comment type="line" pos:line="226" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="227" pos:column="9">/// &lt;param name="archive"&gt;the archive to add.&lt;/param&gt;</comment>
        <comment type="line" pos:line="228" pos:column="9">/// &lt;param name="isDefault"&gt;whether or not to use this archive as the default</comment>
        <comment type="line" pos:line="229" pos:column="9">/// archive&lt;/param&gt;</comment>
        <function><type><specifier pos:line="230" pos:column="9">public</specifier> <name pos:line="230" pos:column="16">void</name></type> <name pos:line="230" pos:column="21">RegisterArchive</name><parameter_list pos:line="230" pos:column="36">(<param><decl><type><name pos:line="230" pos:column="37">AbstractArchive</name></type> <name pos:line="230" pos:column="53">archive</name></decl></param>, <param><decl><type><name pos:line="230" pos:column="62">bool</name></type> <name pos:line="230" pos:column="67">isDefault</name></decl></param>)</parameter_list> <block pos:line="230" pos:column="78">{
            <expr_stmt><expr><call><name><name pos:line="231" pos:column="13">this</name><op:operator pos:line="231" pos:column="17">.</op:operator><name pos:line="231" pos:column="18">registeredArchives</name><op:operator pos:line="231" pos:column="36">.</op:operator><name pos:line="231" pos:column="37">Add</name></name><argument_list pos:line="231" pos:column="40">(<argument><expr><name pos:line="231" pos:column="41">archive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="232" pos:column="13">archive</name><op:operator pos:line="232" pos:column="20">.</op:operator><name pos:line="232" pos:column="21">FileChanged</name></name> <op:operator pos:line="232" pos:column="33">+=</op:operator> <name pos:line="232" pos:column="36">RespondToArchiveFileEvent</name></expr>;</expr_stmt>
            <if pos:line="233" pos:column="13">if<condition pos:line="233" pos:column="15">(<expr><name pos:line="233" pos:column="16">isDefault</name></expr>)</condition><then pos:line="233" pos:column="26"> <block pos:line="233" pos:column="27">{
                <expr_stmt><expr><name><name pos:line="234" pos:column="17">this</name><op:operator pos:line="234" pos:column="21">.</op:operator><name pos:line="234" pos:column="22">defaultArchive</name></name> <op:operator pos:line="234" pos:column="37">=</op:operator> <name pos:line="234" pos:column="39">archive</name></expr>;</expr_stmt>
            }</block></then> <else pos:line="235" pos:column="15">else <block pos:line="235" pos:column="20">{
                <foreach pos:line="236" pos:column="17">foreach(<init><decl><type><name pos:line="236" pos:column="25">var</name></type> <name pos:line="236" pos:column="29">extension</name> <range pos:line="236" pos:column="39">in <expr><name><name pos:line="236" pos:column="42">archive</name><op:operator pos:line="236" pos:column="49">.</op:operator><name pos:line="236" pos:column="50">SupportedExtensions</name></name></expr></range></decl></init>) <block pos:line="236" pos:column="71">{
                    <if pos:line="237" pos:column="21">if<condition pos:line="237" pos:column="23">(<expr><call><name><name pos:line="237" pos:column="24">archiveMap</name><op:operator pos:line="237" pos:column="34">.</op:operator><name pos:line="237" pos:column="35">ContainsKey</name></name><argument_list pos:line="237" pos:column="46">(<argument><expr><name pos:line="237" pos:column="47">extension</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="237" pos:column="58"> <block pos:line="237" pos:column="59">{
                        <expr_stmt><expr><call><name><name pos:line="238" pos:column="25">SrcMLFileLogger</name><op:operator pos:line="238" pos:column="40">.</op:operator><name pos:line="238" pos:column="41">DefaultLogger</name><op:operator pos:line="238" pos:column="54">.</op:operator><name pos:line="238" pos:column="55">WarnFormat</name></name><argument_list pos:line="238" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="238" pos:column="66">"AbstractFileMonitor.RegisterNonDefaultArchive() - Archive already registered for extension {0}, will be replaced with the new archive."</lit:literal></expr></argument>, <argument><expr><name pos:line="238" pos:column="204">extension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <expr_stmt><expr><name><name pos:line="240" pos:column="21">archiveMap</name><index pos:line="240" pos:column="31">[<expr><name pos:line="240" pos:column="32">extension</name></expr>]</index></name> <op:operator pos:line="240" pos:column="43">=</op:operator> <name pos:line="240" pos:column="45">archive</name></expr>;</expr_stmt>
                }</block></foreach>
            }</block></else></if>
        }</block></function>

        <comment type="line" pos:line="245" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="246" pos:column="9">/// Processes a file rename. If the old and new path are both in the same archive, a</comment>
        <comment type="line" pos:line="247" pos:column="9">/// &lt;see cref="AbstractArchive.RenameFile(string,string)"/&gt; is called on the appropriate</comment>
        <comment type="line" pos:line="248" pos:column="9">/// archive. If they are in different archives, the</comment>
        <comment type="line" pos:line="249" pos:column="9">/// &lt;see cref="AbstractArchive.DeleteFile(string)"/&gt; is called on</comment>
        <comment type="line" pos:line="250" pos:column="9">/// &lt;paramref name="oldFilePath"/&gt;and &lt;see cref="AbstractArchive.AddOrUpdateFile(string)"/&gt;</comment>
        <comment type="line" pos:line="251" pos:column="9">/// is called on</comment>
        <comment type="line" pos:line="252" pos:column="9">/// &lt;paramref name="newFilePath"/&gt;&lt;/summary&gt;</comment>
        <comment type="line" pos:line="253" pos:column="9">/// &lt;param name="oldFilePath"&gt;the old file name&lt;/param&gt;</comment>
        <comment type="line" pos:line="254" pos:column="9">/// &lt;param name="newFilePath"&gt;the new file name&lt;/param&gt;</comment>
        <function><type><specifier pos:line="255" pos:column="9">public</specifier> <name pos:line="255" pos:column="16">void</name></type> <name pos:line="255" pos:column="21">RenameFile</name><parameter_list pos:line="255" pos:column="31">(<param><decl><type><name pos:line="255" pos:column="32">string</name></type> <name pos:line="255" pos:column="39">oldFilePath</name></decl></param>, <param><decl><type><name pos:line="255" pos:column="52">string</name></type> <name pos:line="255" pos:column="59">newFilePath</name></decl></param>)</parameter_list> <block pos:line="255" pos:column="72">{
            <decl_stmt><decl><type><name pos:line="256" pos:column="13">var</name></type> <name pos:line="256" pos:column="17">oldArchive</name> <init pos:line="256" pos:column="28">= <expr><call><name pos:line="256" pos:column="30">GetArchiveForFile</name><argument_list pos:line="256" pos:column="47">(<argument><expr><name pos:line="256" pos:column="48">oldFilePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="257" pos:column="13">var</name></type> <name pos:line="257" pos:column="17">newArchive</name> <init pos:line="257" pos:column="28">= <expr><call><name pos:line="257" pos:column="30">GetArchiveForFile</name><argument_list pos:line="257" pos:column="47">(<argument><expr><name pos:line="257" pos:column="48">newFilePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if pos:line="259" pos:column="13">if<condition pos:line="259" pos:column="15">(<expr><name pos:line="259" pos:column="16">null</name> <op:operator pos:line="259" pos:column="21">!=</op:operator> <name pos:line="259" pos:column="24">oldArchive</name> <op:operator pos:line="259" pos:column="35">&amp;&amp;</op:operator> <call><name><name pos:line="259" pos:column="38">oldArchive</name><op:operator pos:line="259" pos:column="48">.</op:operator><name pos:line="259" pos:column="49">Equals</name></name><argument_list pos:line="259" pos:column="55">(<argument><expr><name pos:line="259" pos:column="56">newArchive</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="259" pos:column="68"> <block pos:line="259" pos:column="69">{
                <expr_stmt><expr><call><name><name pos:line="260" pos:column="17">oldArchive</name><op:operator pos:line="260" pos:column="27">.</op:operator><name pos:line="260" pos:column="28">RenameFile</name></name><argument_list pos:line="260" pos:column="38">(<argument><expr><name pos:line="260" pos:column="39">oldFilePath</name></expr></argument>, <argument><expr><name pos:line="260" pos:column="52">newFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="261" pos:column="15">else <if pos:line="261" pos:column="20">if<condition pos:line="261" pos:column="22">(<expr><name pos:line="261" pos:column="23">null</name> <op:operator pos:line="261" pos:column="28">!=</op:operator> <name pos:line="261" pos:column="31">oldArchive</name></expr>)</condition><then><block pos:line="261" pos:column="42">{
                <expr_stmt><expr><call><name><name pos:line="262" pos:column="17">oldArchive</name><op:operator pos:line="262" pos:column="27">.</op:operator><name pos:line="262" pos:column="28">DeleteFile</name></name><argument_list pos:line="262" pos:column="38">(<argument><expr><name pos:line="262" pos:column="39">oldFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="263" pos:column="17">if<condition pos:line="263" pos:column="19">(<expr><name pos:line="263" pos:column="20">null</name> <op:operator pos:line="263" pos:column="25">!=</op:operator> <name pos:line="263" pos:column="28">newArchive</name></expr>)</condition><then pos:line="263" pos:column="39"> <block pos:line="263" pos:column="40">{
                    <expr_stmt><expr><call><name><name pos:line="264" pos:column="21">newArchive</name><op:operator pos:line="264" pos:column="31">.</op:operator><name pos:line="264" pos:column="32">AddOrUpdateFile</name></name><argument_list pos:line="264" pos:column="47">(<argument><expr><name pos:line="264" pos:column="48">newFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if></else></if>
        }</block></function>

        <comment type="line" pos:line="269" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="270" pos:column="9">/// Processes a file rename. If the old and new path are both in the same archive, a</comment>
        <comment type="line" pos:line="271" pos:column="9">/// &lt;see cref="AbstractArchive.RenameFile(string,string)"/&gt; is called on the appropriate</comment>
        <comment type="line" pos:line="272" pos:column="9">/// archive. If they are in different archives, the</comment>
        <comment type="line" pos:line="273" pos:column="9">/// &lt;see cref="AbstractArchive.DeleteFile(string)"/&gt; is called on</comment>
        <comment type="line" pos:line="274" pos:column="9">/// &lt;paramref name="oldFilePath"/&gt;and &lt;see cref="AbstractArchive.AddOrUpdateFile(string)"/&gt;</comment>
        <comment type="line" pos:line="275" pos:column="9">/// is called on</comment>
        <comment type="line" pos:line="276" pos:column="9">/// &lt;paramref name="newFilePath"/&gt;&lt;/summary&gt;</comment>
        <comment type="line" pos:line="277" pos:column="9">/// &lt;param name="oldFilePath"&gt;the old file name&lt;/param&gt;</comment>
        <comment type="line" pos:line="278" pos:column="9">/// &lt;param name="newFilePath"&gt;the new file name&lt;/param&gt;</comment>
        <function><type><specifier pos:line="279" pos:column="9">public</specifier> <name pos:line="279" pos:column="16">Task</name></type> <name pos:line="279" pos:column="21">RenameFileAsync</name><parameter_list pos:line="279" pos:column="36">(<param><decl><type><name pos:line="279" pos:column="37">string</name></type> <name pos:line="279" pos:column="44">oldFilePath</name></decl></param>, <param><decl><type><name pos:line="279" pos:column="57">string</name></type> <name pos:line="279" pos:column="64">newFilePath</name></decl></param>)</parameter_list> <block pos:line="279" pos:column="77">{
            <decl_stmt><decl><type><name pos:line="280" pos:column="13">var</name></type> <name pos:line="280" pos:column="17">oldArchive</name> <init pos:line="280" pos:column="28">= <expr><call><name pos:line="280" pos:column="30">GetArchiveForFile</name><argument_list pos:line="280" pos:column="47">(<argument><expr><name pos:line="280" pos:column="48">oldFilePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="281" pos:column="13">var</name></type> <name pos:line="281" pos:column="17">newArchive</name> <init pos:line="281" pos:column="28">= <expr><call><name pos:line="281" pos:column="30">GetArchiveForFile</name><argument_list pos:line="281" pos:column="47">(<argument><expr><name pos:line="281" pos:column="48">newFilePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if pos:line="283" pos:column="13">if<condition pos:line="283" pos:column="15">(<expr><name pos:line="283" pos:column="16">null</name> <op:operator pos:line="283" pos:column="21">!=</op:operator> <name pos:line="283" pos:column="24">oldArchive</name> <op:operator pos:line="283" pos:column="35">&amp;&amp;</op:operator> <call><name><name pos:line="283" pos:column="38">oldArchive</name><op:operator pos:line="283" pos:column="48">.</op:operator><name pos:line="283" pos:column="49">Equals</name></name><argument_list pos:line="283" pos:column="55">(<argument><expr><name pos:line="283" pos:column="56">newArchive</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="283" pos:column="68"> <block pos:line="283" pos:column="69">{
                <return pos:line="284" pos:column="17">return <expr><call><name><name pos:line="284" pos:column="24">oldArchive</name><op:operator pos:line="284" pos:column="34">.</op:operator><name pos:line="284" pos:column="35">RenameFileAsync</name></name><argument_list pos:line="284" pos:column="50">(<argument><expr><name pos:line="284" pos:column="51">oldFilePath</name></expr></argument>, <argument><expr><name pos:line="284" pos:column="64">newFilePath</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then> <else pos:line="285" pos:column="15">else <if pos:line="285" pos:column="20">if<condition pos:line="285" pos:column="22">(<expr><name pos:line="285" pos:column="23">null</name> <op:operator pos:line="285" pos:column="28">!=</op:operator> <name pos:line="285" pos:column="31">oldArchive</name></expr>)</condition><then pos:line="285" pos:column="42"> <block pos:line="285" pos:column="43">{
                <return pos:line="286" pos:column="17">return <expr><call><name><name pos:line="286" pos:column="24">oldArchive</name><op:operator pos:line="286" pos:column="34">.</op:operator><name pos:line="286" pos:column="35">DeleteFileAsync</name></name><argument_list pos:line="286" pos:column="50">(<argument><expr><name pos:line="286" pos:column="51">oldFilePath</name></expr></argument>)</argument_list></call><op:operator pos:line="286" pos:column="63">.</op:operator><call><name pos:line="286" pos:column="64">ContinueWith</name><argument_list pos:line="286" pos:column="76">(<argument><expr><lambda><parameter_list pos:line="286" pos:column="77">(<param><decl><name pos:line="286" pos:column="78">t</name></decl></param>)</parameter_list> <op:operator pos:line="286" pos:column="81">=&gt;</op:operator> <block pos:line="286" pos:column="84">{
                    <if pos:line="287" pos:column="21">if<condition pos:line="287" pos:column="23">(<expr><name pos:line="287" pos:column="24">null</name> <op:operator pos:line="287" pos:column="29">!=</op:operator> <name pos:line="287" pos:column="32">newArchive</name></expr>)</condition><then pos:line="287" pos:column="43"> <block pos:line="287" pos:column="44">{
                        <expr_stmt><expr><call><name><name pos:line="288" pos:column="25">newArchive</name><op:operator pos:line="288" pos:column="35">.</op:operator><name pos:line="288" pos:column="36">AddOrUpdateFile</name></name><argument_list pos:line="288" pos:column="51">(<argument><expr><name pos:line="288" pos:column="52">newFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></lambda></expr></argument>, <argument><expr><name><name pos:line="290" pos:column="20">TaskContinuationOptions</name><op:operator pos:line="290" pos:column="43">.</op:operator><name pos:line="290" pos:column="44">OnlyOnRanToCompletion</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if></else></if>
            <return pos:line="292" pos:column="13">return <expr><name pos:line="292" pos:column="20">null</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="295" pos:column="9">public</specifier> <specifier pos:line="295" pos:column="16">virtual</specifier> <name pos:line="295" pos:column="24">void</name></type> <name pos:line="295" pos:column="29">Save</name><parameter_list pos:line="295" pos:column="33">()</parameter_list> <block pos:line="295" pos:column="36">{
            <foreach pos:line="296" pos:column="13">foreach(<init><decl><type><name pos:line="296" pos:column="21">var</name></type> <name pos:line="296" pos:column="25">archive</name> <range pos:line="296" pos:column="33">in <expr><name pos:line="296" pos:column="36">registeredArchives</name></expr></range></decl></init>) <block pos:line="296" pos:column="56">{
                <expr_stmt><expr><call><name><name pos:line="297" pos:column="17">archive</name><op:operator pos:line="297" pos:column="24">.</op:operator><name pos:line="297" pos:column="25">Save</name></name><argument_list pos:line="297" pos:column="29">()</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>

        <comment type="line" pos:line="301" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="302" pos:column="9">/// Starts monitoring</comment>
        <comment type="line" pos:line="303" pos:column="9">/// &lt;/summary&gt;</comment>
        <function_decl><type><specifier pos:line="304" pos:column="9">public</specifier> <specifier pos:line="304" pos:column="16">abstract</specifier> <name pos:line="304" pos:column="25">void</name></type> <name pos:line="304" pos:column="30">StartMonitoring</name><parameter_list pos:line="304" pos:column="45">()</parameter_list>;</function_decl>

        <comment type="line" pos:line="306" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="307" pos:column="9">/// For Sando, add degree of parallelism Synchronizes the archives with the object being</comment>
        <comment type="line" pos:line="308" pos:column="9">/// monitored. Startup adds or updates outdated archive files and deletes archive files that</comment>
        <comment type="line" pos:line="309" pos:column="9">/// are no longer present on disk.</comment>
        <comment type="line" pos:line="310" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="311" pos:column="9">public</specifier> <specifier pos:line="311" pos:column="16">virtual</specifier> <name pos:line="311" pos:column="24">void</name></type> <name pos:line="311" pos:column="29">Startup_Concurrent</name><parameter_list pos:line="311" pos:column="47">(<param><decl><type><name pos:line="311" pos:column="48">int</name></type> <name pos:line="311" pos:column="52">degreeOfParallelism</name></decl></param>)</parameter_list> <block pos:line="311" pos:column="73">{
            <expr_stmt><expr><call><name><name pos:line="312" pos:column="13">SrcMLFileLogger</name><op:operator pos:line="312" pos:column="28">.</op:operator><name pos:line="312" pos:column="29">DefaultLogger</name><op:operator pos:line="312" pos:column="42">.</op:operator><name pos:line="312" pos:column="43">Info</name></name><argument_list pos:line="312" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="312" pos:column="48">"AbstractFileMonitor.Startup()"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="314" pos:column="13">// make a hashset of all the files to monitor</comment>
            <decl_stmt><decl><type><name pos:line="315" pos:column="13">var</name></type> <name pos:line="315" pos:column="17">monitoredFiles</name> <init pos:line="315" pos:column="32">= <expr><op:operator pos:line="315" pos:column="34">new</op:operator> <call><name><name pos:line="315" pos:column="38">HashSet</name><argument_list pos:line="315" pos:column="45">&lt;<argument><name pos:line="315" pos:column="46">string</name></argument>&gt;</argument_list></name><argument_list pos:line="315" pos:column="53">(<argument><expr><name><name pos:line="315" pos:column="54">StringComparer</name><op:operator pos:line="315" pos:column="68">.</op:operator><name pos:line="315" pos:column="69">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="316" pos:column="13">foreach(<init><decl><type><name pos:line="316" pos:column="21">var</name></type> <name pos:line="316" pos:column="25">filePath</name> <range pos:line="316" pos:column="34">in <expr><call><name pos:line="316" pos:column="37">GetFilesFromSource</name><argument_list pos:line="316" pos:column="55">()</argument_list></call></expr></range></decl></init>) <block pos:line="316" pos:column="59">{
                <expr_stmt><expr><call><name><name pos:line="317" pos:column="17">monitoredFiles</name><op:operator pos:line="317" pos:column="31">.</op:operator><name pos:line="317" pos:column="32">Add</name></name><argument_list pos:line="317" pos:column="35">(<argument><expr><name pos:line="317" pos:column="36">filePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>

            <comment type="line" pos:line="320" pos:column="13">// find all the files in the hashset that require updating</comment>
            <decl_stmt><decl><type><name pos:line="321" pos:column="13">var</name></type> <name pos:line="321" pos:column="17">outdatedFiles</name> <init pos:line="321" pos:column="31">= <expr><linq><from pos:line="321" pos:column="33">from <expr><name pos:line="321" pos:column="38">filePath</name></expr> <in pos:line="321" pos:column="47">in <expr><name pos:line="321" pos:column="50">monitoredFiles</name></expr></in></from>
                                <where pos:line="322" pos:column="33">where <expr><call><name pos:line="322" pos:column="39">GetArchiveForFile</name><argument_list pos:line="322" pos:column="56">(<argument><expr><name pos:line="322" pos:column="57">filePath</name></expr></argument>)</argument_list></call><op:operator pos:line="322" pos:column="66">.</op:operator><call><name pos:line="322" pos:column="67">IsOutdated</name><argument_list pos:line="322" pos:column="77">(<argument><expr><name pos:line="322" pos:column="78">filePath</name></expr></argument>)</argument_list></call></expr></where>
                                <select pos:line="323" pos:column="33">select <expr><name pos:line="323" pos:column="40">filePath</name></expr></select></linq></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="325" pos:column="13">Stopwatch</name></type> <name pos:line="325" pos:column="23">sw</name> <init pos:line="325" pos:column="26">= <expr><op:operator pos:line="325" pos:column="28">new</op:operator> <call><name pos:line="325" pos:column="32">Stopwatch</name><argument_list pos:line="325" pos:column="41">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="326" pos:column="13">sw</name><op:operator pos:line="326" pos:column="15">.</op:operator><name pos:line="326" pos:column="16">Start</name></name><argument_list pos:line="326" pos:column="21">()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name><name pos:line="328" pos:column="13">ConcurrentQueue</name><argument_list pos:line="328" pos:column="28">&lt;<argument><name pos:line="328" pos:column="29">string</name></argument>&gt;</argument_list></name></type> <name pos:line="328" pos:column="37">missedFiles</name> <init pos:line="328" pos:column="49">= <expr><op:operator pos:line="328" pos:column="51">new</op:operator> <call><name><name pos:line="328" pos:column="55">ConcurrentQueue</name><argument_list pos:line="328" pos:column="70">&lt;<argument><name pos:line="328" pos:column="71">string</name></argument>&gt;</argument_list></name><argument_list pos:line="328" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="329" pos:column="13">ParallelOptions</name></type> <name pos:line="329" pos:column="29">option</name> <init pos:line="329" pos:column="36">= <expr><op:operator pos:line="329" pos:column="38">new</op:operator> <call><name pos:line="329" pos:column="42">ParallelOptions</name><argument_list pos:line="329" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="330" pos:column="13">//number of threads, for Sando application, 2 is the best trade-off</comment>
            <expr_stmt><expr><name><name pos:line="331" pos:column="13">option</name><op:operator pos:line="331" pos:column="19">.</op:operator><name pos:line="331" pos:column="20">MaxDegreeOfParallelism</name></name> <op:operator pos:line="331" pos:column="43">=</op:operator> <name pos:line="331" pos:column="45">degreeOfParallelism</name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="333" pos:column="13">Parallel</name><op:operator pos:line="333" pos:column="21">.</op:operator><name pos:line="333" pos:column="22">ForEach</name></name><argument_list pos:line="333" pos:column="29">(<argument><expr><name pos:line="333" pos:column="30">outdatedFiles</name></expr></argument>, <argument><expr><name pos:line="333" pos:column="45">option</name></expr></argument>, <argument><expr><lambda><name pos:line="333" pos:column="53">currentFile</name> <op:operator pos:line="333" pos:column="65">=&gt;</op:operator> <block pos:line="333" pos:column="68">{
                <decl_stmt><decl><type><name pos:line="334" pos:column="17">string</name></type> <name pos:line="334" pos:column="24">filePath</name> <init pos:line="334" pos:column="33">= <expr><name pos:line="334" pos:column="35">currentFile</name></expr></init></decl>;</decl_stmt>
                <try pos:line="335" pos:column="17">try <block pos:line="335" pos:column="21">{
                    <expr_stmt><expr><call><name pos:line="336" pos:column="21">AddFile</name><argument_list pos:line="336" pos:column="28">(<argument><expr><name pos:line="336" pos:column="29">filePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch pos:line="337" pos:column="19">catch<parameter_list pos:line="337" pos:column="24">(<param><decl><type><name pos:line="337" pos:column="25">Exception</name></type> <name pos:line="337" pos:column="35">e</name></decl></param>)</parameter_list> <block pos:line="337" pos:column="38">{
                    <comment type="line" pos:line="338" pos:column="21">//Trace.WriteLine(fileName + " " + e.Message);</comment>
                    <expr_stmt><expr><call><name><name pos:line="339" pos:column="21">missedFiles</name><op:operator pos:line="339" pos:column="32">.</op:operator><name pos:line="339" pos:column="33">Enqueue</name></name><argument_list pos:line="339" pos:column="40">(<argument><expr><name pos:line="339" pos:column="41">filePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="343" pos:column="13">Task</name><op:operator pos:line="343" pos:column="17">.</op:operator><name pos:line="343" pos:column="18">WaitAll</name></name><argument_list pos:line="343" pos:column="25">()</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="345" pos:column="13">//As a remedial action, regenerate the file missed in the last step</comment>
            <if pos:line="346" pos:column="13">if<condition pos:line="346" pos:column="15">(<expr><name><name pos:line="346" pos:column="16">missedFiles</name><op:operator pos:line="346" pos:column="27">.</op:operator><name pos:line="346" pos:column="28">Count</name></name> <op:operator pos:line="346" pos:column="34">&gt;</op:operator> <lit:literal type="number" pos:line="346" pos:column="36">0</lit:literal></expr>)</condition><then pos:line="346" pos:column="38"> <block pos:line="346" pos:column="39">{
                <foreach pos:line="347" pos:column="17">foreach(<init><decl><type><name pos:line="347" pos:column="25">string</name></type> <name pos:line="347" pos:column="32">fileName</name> <range pos:line="347" pos:column="41">in <expr><name pos:line="347" pos:column="44">missedFiles</name></expr></range></decl></init>)
                    <try pos:line="348" pos:column="21">try <block pos:line="348" pos:column="25">{
                        <expr_stmt><expr><call><name pos:line="349" pos:column="25">AddFile</name><argument_list pos:line="349" pos:column="32">(<argument><expr><name pos:line="349" pos:column="33">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block> <catch pos:line="350" pos:column="23">catch<parameter_list pos:line="350" pos:column="28">(<param><decl><type><name pos:line="350" pos:column="29">Exception</name></type> <name pos:line="350" pos:column="39">e</name></decl></param>)</parameter_list> <block pos:line="350" pos:column="42">{
                        <comment type="line" pos:line="351" pos:column="25">//Log exception</comment>
                    }</block></catch></try></foreach>
            }</block></then></if>

            <expr_stmt><expr><call><name><name pos:line="355" pos:column="13">sw</name><op:operator pos:line="355" pos:column="15">.</op:operator><name pos:line="355" pos:column="16">Stop</name></name><argument_list pos:line="355" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="356" pos:column="13">Console</name><op:operator pos:line="356" pos:column="20">.</op:operator><name pos:line="356" pos:column="21">WriteLine</name></name><argument_list pos:line="356" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="356" pos:column="31">"Concurrently generating SrcML files: "</lit:literal> <op:operator pos:line="356" pos:column="71">+</op:operator> <name><name pos:line="356" pos:column="73">sw</name><op:operator pos:line="356" pos:column="75">.</op:operator><name pos:line="356" pos:column="76">Elapsed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="358" pos:column="13">// find all the files to delete (files in the archive that are not in the list of files</comment>
            <comment type="line" pos:line="359" pos:column="13">// to monitor</comment>
            <decl_stmt><decl><type><name pos:line="360" pos:column="13">var</name></type> <name pos:line="360" pos:column="17">filesToDelete</name> <init pos:line="360" pos:column="31">= <expr><linq><from pos:line="360" pos:column="33">from <expr><name pos:line="360" pos:column="38">archive</name></expr> <in pos:line="360" pos:column="46">in <expr><name pos:line="360" pos:column="49">registeredArchives</name></expr></in></from>
                                <from pos:line="361" pos:column="33">from <expr><name pos:line="361" pos:column="38">filePath</name></expr> <in pos:line="361" pos:column="47">in <expr><call><name><name pos:line="361" pos:column="50">archive</name><op:operator pos:line="361" pos:column="57">.</op:operator><name pos:line="361" pos:column="58">GetFiles</name></name><argument_list pos:line="361" pos:column="66">()</argument_list></call></expr></in></from>
                                <where pos:line="362" pos:column="33">where <expr><op:operator pos:line="362" pos:column="39">!</op:operator><call><name><name pos:line="362" pos:column="40">monitoredFiles</name><op:operator pos:line="362" pos:column="54">.</op:operator><name pos:line="362" pos:column="55">Contains</name></name><argument_list pos:line="362" pos:column="63">(<argument><expr><name pos:line="362" pos:column="64">filePath</name></expr></argument>)</argument_list></call></expr></where>
                                <select pos:line="363" pos:column="33">select <expr><op:operator pos:line="363" pos:column="40">new</op:operator> <block pos:line="363" pos:column="44">{
                                    <expr><name pos:line="364" pos:column="37">Archive</name> <op:operator pos:line="364" pos:column="45">=</op:operator> <name pos:line="364" pos:column="47">archive</name></expr>,
                                    <expr><name pos:line="365" pos:column="37">FilePath</name> <op:operator pos:line="365" pos:column="46">=</op:operator> <name pos:line="365" pos:column="48">filePath</name></expr>,
                                }</block></expr></select></linq></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="368" pos:column="13">// delete the extra files from the archive</comment>
            <foreach pos:line="369" pos:column="13">foreach(<init><decl><type><name pos:line="369" pos:column="21">var</name></type> <name pos:line="369" pos:column="25">data</name> <range pos:line="369" pos:column="30">in <expr><name pos:line="369" pos:column="33">filesToDelete</name></expr></range></decl></init>) <block pos:line="369" pos:column="48">{
                <try pos:line="370" pos:column="17">try <block pos:line="370" pos:column="21">{
                    <expr_stmt><expr><call><name><name pos:line="371" pos:column="21">data</name><op:operator pos:line="371" pos:column="25">.</op:operator><name pos:line="371" pos:column="26">Archive</name><op:operator pos:line="371" pos:column="33">.</op:operator><name pos:line="371" pos:column="34">DeleteFile</name></name><argument_list pos:line="371" pos:column="44">(<argument><expr><name><name pos:line="371" pos:column="45">data</name><op:operator pos:line="371" pos:column="49">.</op:operator><name pos:line="371" pos:column="50">FilePath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch pos:line="372" pos:column="19">catch<parameter_list pos:line="372" pos:column="24">(<param><decl><type><name pos:line="372" pos:column="25">Exception</name></type></decl></param>)</parameter_list> <block pos:line="372" pos:column="36">{
                    <comment type="line" pos:line="373" pos:column="21">// TODO log exception</comment>
                }</block></catch></try>
            }</block></foreach>
        }</block></function>

        <function><type><specifier pos:line="378" pos:column="9">public</specifier> <specifier pos:line="378" pos:column="16">virtual</specifier> <name pos:line="378" pos:column="24">void</name></type> <name pos:line="378" pos:column="29">Startup_Concurrent</name><parameter_list pos:line="378" pos:column="47">()</parameter_list> <block pos:line="378" pos:column="50">{
            <expr_stmt><expr><call><name><name pos:line="379" pos:column="13">SrcMLFileLogger</name><op:operator pos:line="379" pos:column="28">.</op:operator><name pos:line="379" pos:column="29">DefaultLogger</name><op:operator pos:line="379" pos:column="42">.</op:operator><name pos:line="379" pos:column="43">Info</name></name><argument_list pos:line="379" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="379" pos:column="48">"AbstractFileMonitor.Startup()"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="381" pos:column="13">// make a hashset of all the files to monitor</comment>
            <decl_stmt><decl><type><name pos:line="382" pos:column="13">var</name></type> <name pos:line="382" pos:column="17">monitoredFiles</name> <init pos:line="382" pos:column="32">= <expr><op:operator pos:line="382" pos:column="34">new</op:operator> <call><name><name pos:line="382" pos:column="38">HashSet</name><argument_list pos:line="382" pos:column="45">&lt;<argument><name pos:line="382" pos:column="46">string</name></argument>&gt;</argument_list></name><argument_list pos:line="382" pos:column="53">(<argument><expr><name><name pos:line="382" pos:column="54">StringComparer</name><op:operator pos:line="382" pos:column="68">.</op:operator><name pos:line="382" pos:column="69">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="383" pos:column="13">foreach(<init><decl><type><name pos:line="383" pos:column="21">var</name></type> <name pos:line="383" pos:column="25">filePath</name> <range pos:line="383" pos:column="34">in <expr><call><name pos:line="383" pos:column="37">GetFilesFromSource</name><argument_list pos:line="383" pos:column="55">()</argument_list></call></expr></range></decl></init>) <block pos:line="383" pos:column="59">{
                <expr_stmt><expr><call><name><name pos:line="384" pos:column="17">monitoredFiles</name><op:operator pos:line="384" pos:column="31">.</op:operator><name pos:line="384" pos:column="32">Add</name></name><argument_list pos:line="384" pos:column="35">(<argument><expr><name pos:line="384" pos:column="36">filePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>

            <comment type="line" pos:line="387" pos:column="13">// find all the files in the hashset that require updating</comment>
            <decl_stmt><decl><type><name pos:line="388" pos:column="13">var</name></type> <name pos:line="388" pos:column="17">outdatedFiles</name> <init pos:line="388" pos:column="31">= <expr><linq><from pos:line="388" pos:column="33">from <expr><name pos:line="388" pos:column="38">filePath</name></expr> <in pos:line="388" pos:column="47">in <expr><name pos:line="388" pos:column="50">monitoredFiles</name></expr></in></from>
                                <where pos:line="389" pos:column="33">where <expr><call><name pos:line="389" pos:column="39">GetArchiveForFile</name><argument_list pos:line="389" pos:column="56">(<argument><expr><name pos:line="389" pos:column="57">filePath</name></expr></argument>)</argument_list></call><op:operator pos:line="389" pos:column="66">.</op:operator><call><name pos:line="389" pos:column="67">IsOutdated</name><argument_list pos:line="389" pos:column="77">(<argument><expr><name pos:line="389" pos:column="78">filePath</name></expr></argument>)</argument_list></call></expr></where>
                                <select pos:line="390" pos:column="33">select <expr><name pos:line="390" pos:column="40">filePath</name></expr></select></linq></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="392" pos:column="13">Stopwatch</name></type> <name pos:line="392" pos:column="23">sw</name> <init pos:line="392" pos:column="26">= <expr><op:operator pos:line="392" pos:column="28">new</op:operator> <call><name pos:line="392" pos:column="32">Stopwatch</name><argument_list pos:line="392" pos:column="41">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="393" pos:column="13">sw</name><op:operator pos:line="393" pos:column="15">.</op:operator><name pos:line="393" pos:column="16">Start</name></name><argument_list pos:line="393" pos:column="21">()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name><name pos:line="395" pos:column="13">ConcurrentQueue</name><argument_list pos:line="395" pos:column="28">&lt;<argument><name pos:line="395" pos:column="29">string</name></argument>&gt;</argument_list></name></type> <name pos:line="395" pos:column="37">missedFiles</name> <init pos:line="395" pos:column="49">= <expr><op:operator pos:line="395" pos:column="51">new</op:operator> <call><name><name pos:line="395" pos:column="55">ConcurrentQueue</name><argument_list pos:line="395" pos:column="70">&lt;<argument><name pos:line="395" pos:column="71">string</name></argument>&gt;</argument_list></name><argument_list pos:line="395" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="397" pos:column="13">Parallel</name><op:operator pos:line="397" pos:column="21">.</op:operator><name pos:line="397" pos:column="22">ForEach</name></name><argument_list pos:line="397" pos:column="29">(<argument><expr><name pos:line="397" pos:column="30">outdatedFiles</name></expr></argument>, <argument><expr><lambda><name pos:line="397" pos:column="45">currentFile</name> <op:operator pos:line="397" pos:column="57">=&gt;</op:operator> <block pos:line="397" pos:column="60">{
                <decl_stmt><decl><type><name pos:line="398" pos:column="17">string</name></type> <name pos:line="398" pos:column="24">filePath</name> <init pos:line="398" pos:column="33">= <expr><name pos:line="398" pos:column="35">currentFile</name></expr></init></decl>;</decl_stmt>
                <try pos:line="399" pos:column="17">try <block pos:line="399" pos:column="21">{
                    <expr_stmt><expr><call><name pos:line="400" pos:column="21">AddFile</name><argument_list pos:line="400" pos:column="28">(<argument><expr><name pos:line="400" pos:column="29">filePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch pos:line="401" pos:column="19">catch<parameter_list pos:line="401" pos:column="24">(<param><decl><type><name pos:line="401" pos:column="25">Exception</name></type> <name pos:line="401" pos:column="35">e</name></decl></param>)</parameter_list> <block pos:line="401" pos:column="38">{
                    <comment type="line" pos:line="402" pos:column="21">//Trace.WriteLine(fileName + " " + e.Message);</comment>
                    <expr_stmt><expr><call><name><name pos:line="403" pos:column="21">missedFiles</name><op:operator pos:line="403" pos:column="32">.</op:operator><name pos:line="403" pos:column="33">Enqueue</name></name><argument_list pos:line="403" pos:column="40">(<argument><expr><name pos:line="403" pos:column="41">filePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="407" pos:column="13">Task</name><op:operator pos:line="407" pos:column="17">.</op:operator><name pos:line="407" pos:column="18">WaitAll</name></name><argument_list pos:line="407" pos:column="25">()</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="409" pos:column="13">//As a remedial action, regenerate the file missed in the last step</comment>
            <if pos:line="410" pos:column="13">if<condition pos:line="410" pos:column="15">(<expr><name><name pos:line="410" pos:column="16">missedFiles</name><op:operator pos:line="410" pos:column="27">.</op:operator><name pos:line="410" pos:column="28">Count</name></name> <op:operator pos:line="410" pos:column="34">&gt;</op:operator> <lit:literal type="number" pos:line="410" pos:column="36">0</lit:literal></expr>)</condition><then pos:line="410" pos:column="38"> <block pos:line="410" pos:column="39">{
                <foreach pos:line="411" pos:column="17">foreach(<init><decl><type><name pos:line="411" pos:column="25">string</name></type> <name pos:line="411" pos:column="32">fileName</name> <range pos:line="411" pos:column="41">in <expr><name pos:line="411" pos:column="44">missedFiles</name></expr></range></decl></init>)
                    <try pos:line="412" pos:column="21">try <block pos:line="412" pos:column="25">{
                        <expr_stmt><expr><call><name pos:line="413" pos:column="25">AddFile</name><argument_list pos:line="413" pos:column="32">(<argument><expr><name pos:line="413" pos:column="33">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block> <catch pos:line="414" pos:column="23">catch<parameter_list pos:line="414" pos:column="28">(<param><decl><type><name pos:line="414" pos:column="29">Exception</name></type> <name pos:line="414" pos:column="39">e</name></decl></param>)</parameter_list> <block pos:line="414" pos:column="42">{
                        <comment type="line" pos:line="415" pos:column="25">//Log exception</comment>
                    }</block></catch></try></foreach>
            }</block></then></if>

            <expr_stmt><expr><call><name><name pos:line="419" pos:column="13">sw</name><op:operator pos:line="419" pos:column="15">.</op:operator><name pos:line="419" pos:column="16">Stop</name></name><argument_list pos:line="419" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="420" pos:column="13">Console</name><op:operator pos:line="420" pos:column="20">.</op:operator><name pos:line="420" pos:column="21">WriteLine</name></name><argument_list pos:line="420" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="420" pos:column="31">"Concurrently generating SrcML files: "</lit:literal> <op:operator pos:line="420" pos:column="71">+</op:operator> <name><name pos:line="420" pos:column="73">sw</name><op:operator pos:line="420" pos:column="75">.</op:operator><name pos:line="420" pos:column="76">Elapsed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="422" pos:column="13">// find all the files to delete (files in the archive that are not in the list of files</comment>
            <comment type="line" pos:line="423" pos:column="13">// to monitor</comment>
            <decl_stmt><decl><type><name pos:line="424" pos:column="13">var</name></type> <name pos:line="424" pos:column="17">filesToDelete</name> <init pos:line="424" pos:column="31">= <expr><linq><from pos:line="424" pos:column="33">from <expr><name pos:line="424" pos:column="38">archive</name></expr> <in pos:line="424" pos:column="46">in <expr><name pos:line="424" pos:column="49">registeredArchives</name></expr></in></from>
                                <from pos:line="425" pos:column="33">from <expr><name pos:line="425" pos:column="38">filePath</name></expr> <in pos:line="425" pos:column="47">in <expr><call><name><name pos:line="425" pos:column="50">archive</name><op:operator pos:line="425" pos:column="57">.</op:operator><name pos:line="425" pos:column="58">GetFiles</name></name><argument_list pos:line="425" pos:column="66">()</argument_list></call></expr></in></from>
                                <where pos:line="426" pos:column="33">where <expr><op:operator pos:line="426" pos:column="39">!</op:operator><call><name><name pos:line="426" pos:column="40">monitoredFiles</name><op:operator pos:line="426" pos:column="54">.</op:operator><name pos:line="426" pos:column="55">Contains</name></name><argument_list pos:line="426" pos:column="63">(<argument><expr><name pos:line="426" pos:column="64">filePath</name></expr></argument>)</argument_list></call></expr></where>
                                <select pos:line="427" pos:column="33">select <expr><op:operator pos:line="427" pos:column="40">new</op:operator> <block pos:line="427" pos:column="44">{
                                    <expr><name pos:line="428" pos:column="37">Archive</name> <op:operator pos:line="428" pos:column="45">=</op:operator> <name pos:line="428" pos:column="47">archive</name></expr>,
                                    <expr><name pos:line="429" pos:column="37">FilePath</name> <op:operator pos:line="429" pos:column="46">=</op:operator> <name pos:line="429" pos:column="48">filePath</name></expr>,
                                }</block></expr></select></linq></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="432" pos:column="13">// delete the extra files from the archive</comment>
            <foreach pos:line="433" pos:column="13">foreach(<init><decl><type><name pos:line="433" pos:column="21">var</name></type> <name pos:line="433" pos:column="25">data</name> <range pos:line="433" pos:column="30">in <expr><name pos:line="433" pos:column="33">filesToDelete</name></expr></range></decl></init>) <block pos:line="433" pos:column="48">{
                <try pos:line="434" pos:column="17">try <block pos:line="434" pos:column="21">{
                    <expr_stmt><expr><call><name><name pos:line="435" pos:column="21">data</name><op:operator pos:line="435" pos:column="25">.</op:operator><name pos:line="435" pos:column="26">Archive</name><op:operator pos:line="435" pos:column="33">.</op:operator><name pos:line="435" pos:column="34">DeleteFile</name></name><argument_list pos:line="435" pos:column="44">(<argument><expr><name><name pos:line="435" pos:column="45">data</name><op:operator pos:line="435" pos:column="49">.</op:operator><name pos:line="435" pos:column="50">FilePath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch pos:line="436" pos:column="19">catch<parameter_list pos:line="436" pos:column="24">(<param><decl><type><name pos:line="436" pos:column="25">Exception</name></type></decl></param>)</parameter_list> <block pos:line="436" pos:column="36">{
                    <comment type="line" pos:line="437" pos:column="21">// TODO log exception</comment>
                }</block></catch></try>
            }</block></foreach>
        }</block></function>

        <comment type="line" pos:line="442" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="443" pos:column="9">/// Stops monitoring. Also calls &lt;see cref="Dispose()"/&gt;</comment>
        <comment type="line" pos:line="444" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="445" pos:column="9">public</specifier> <specifier pos:line="445" pos:column="16">virtual</specifier> <name pos:line="445" pos:column="24">void</name></type> <name pos:line="445" pos:column="29">StopMonitoring</name><parameter_list pos:line="445" pos:column="43">()</parameter_list> <block pos:line="445" pos:column="46">{
            <expr_stmt><expr><call><name pos:line="446" pos:column="13">OnMonitoringStopped</name><argument_list pos:line="446" pos:column="32">(<argument><expr><op:operator pos:line="446" pos:column="33">new</op:operator> <call><name pos:line="446" pos:column="37">EventArgs</name><argument_list pos:line="446" pos:column="46">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="449" pos:column="9">public</specifier> <name pos:line="449" pos:column="16">void</name></type> <name pos:line="449" pos:column="21">UpdateArchives</name><parameter_list pos:line="449" pos:column="35">()</parameter_list> <block pos:line="449" pos:column="38">{
            <expr_stmt><expr><call><name pos:line="450" pos:column="13">OnUpdateArchivesStarted</name><argument_list pos:line="450" pos:column="36">(<argument><expr><op:operator pos:line="450" pos:column="37">new</op:operator> <call><name pos:line="450" pos:column="41">EventArgs</name><argument_list pos:line="450" pos:column="50">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="451" pos:column="13">var</name></type> <name pos:line="451" pos:column="17">monitoredFiles</name> <init pos:line="451" pos:column="32">= <expr><op:operator pos:line="451" pos:column="34">new</op:operator> <call><name><name pos:line="451" pos:column="38">HashSet</name><argument_list pos:line="451" pos:column="45">&lt;<argument><name pos:line="451" pos:column="46">string</name></argument>&gt;</argument_list></name><argument_list pos:line="451" pos:column="53">(<argument><expr><call><name pos:line="451" pos:column="54">GetFilesFromSource</name><argument_list pos:line="451" pos:column="72">()</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="451" pos:column="76">StringComparer</name><op:operator pos:line="451" pos:column="90">.</op:operator><name pos:line="451" pos:column="91">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="453" pos:column="13">var</name></type> <name pos:line="453" pos:column="17">outdatedFiles</name> <init pos:line="453" pos:column="31">= <expr><linq><from pos:line="453" pos:column="33">from <expr><name pos:line="453" pos:column="38">filePath</name></expr> <in pos:line="453" pos:column="47">in <expr><name pos:line="453" pos:column="50">monitoredFiles</name></expr></in></from>
                                <let pos:line="454" pos:column="33">let <expr><name pos:line="454" pos:column="37">archive</name> <op:operator pos:line="454" pos:column="45">=</op:operator> <call><name pos:line="454" pos:column="47">GetArchiveForFile</name><argument_list pos:line="454" pos:column="64">(<argument><expr><name pos:line="454" pos:column="65">filePath</name></expr></argument>)</argument_list></call></expr></let>
                                <where pos:line="455" pos:column="33">where <expr><name pos:line="455" pos:column="39">null</name> <op:operator pos:line="455" pos:column="44">!=</op:operator> <name pos:line="455" pos:column="47">archive</name> <op:operator pos:line="455" pos:column="55">&amp;&amp;</op:operator> <call><name><name pos:line="455" pos:column="58">archive</name><op:operator pos:line="455" pos:column="65">.</op:operator><name pos:line="455" pos:column="66">IsOutdated</name></name><argument_list pos:line="455" pos:column="76">(<argument><expr><name pos:line="455" pos:column="77">filePath</name></expr></argument>)</argument_list></call></expr></where>
                                <select pos:line="456" pos:column="33">select <expr><name pos:line="456" pos:column="40">filePath</name></expr></select></linq></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="458" pos:column="13">var</name></type> <name pos:line="458" pos:column="17">deletedFiles</name> <init pos:line="458" pos:column="30">= <expr><linq><from pos:line="458" pos:column="32">from <expr><name pos:line="458" pos:column="37">filePath</name></expr> <in pos:line="458" pos:column="46">in <expr><call><name pos:line="458" pos:column="49">GetArchivedFiles</name><argument_list pos:line="458" pos:column="65">()</argument_list></call></expr></in></from>
                               <let pos:line="459" pos:column="32">let <expr><name pos:line="459" pos:column="36">archive</name> <op:operator pos:line="459" pos:column="44">=</op:operator> <call><name pos:line="459" pos:column="46">GetArchiveForFile</name><argument_list pos:line="459" pos:column="63">(<argument><expr><name pos:line="459" pos:column="64">filePath</name></expr></argument>)</argument_list></call></expr></let>
                               <where pos:line="460" pos:column="32">where <expr><name pos:line="460" pos:column="38">null</name> <op:operator pos:line="460" pos:column="43">!=</op:operator> <name pos:line="460" pos:column="46">archive</name> <op:operator pos:line="460" pos:column="54">&amp;&amp;</op:operator> <name pos:line="460" pos:column="57">null</name> <op:operator pos:line="460" pos:column="62">!=</op:operator> <name pos:line="460" pos:column="65">filePath</name> <op:operator pos:line="460" pos:column="74">&amp;&amp;</op:operator> <op:operator pos:line="460" pos:column="77">!</op:operator><call><name><name pos:line="460" pos:column="78">monitoredFiles</name><op:operator pos:line="460" pos:column="92">.</op:operator><name pos:line="460" pos:column="93">Contains</name></name><argument_list pos:line="460" pos:column="101">(<argument><expr><name pos:line="460" pos:column="102">filePath</name></expr></argument>)</argument_list></call></expr></where>
                               <select pos:line="461" pos:column="32">select <expr><name pos:line="461" pos:column="39">filePath</name></expr></select></linq></expr></init></decl>;</decl_stmt>

            <foreach pos:line="463" pos:column="13">foreach(<init><decl><type><name pos:line="463" pos:column="21">var</name></type> <name pos:line="463" pos:column="25">filePath</name> <range pos:line="463" pos:column="34">in <expr><name pos:line="463" pos:column="37">outdatedFiles</name></expr></range></decl></init>) <block pos:line="463" pos:column="52">{
                <expr_stmt><expr><call><name pos:line="464" pos:column="17">UpdateFile</name><argument_list pos:line="464" pos:column="27">(<argument><expr><name pos:line="464" pos:column="28">filePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>

            <foreach pos:line="467" pos:column="13">foreach(<init><decl><type><name pos:line="467" pos:column="21">var</name></type> <name pos:line="467" pos:column="25">filePath</name> <range pos:line="467" pos:column="34">in <expr><name pos:line="467" pos:column="37">deletedFiles</name></expr></range></decl></init>) <block pos:line="467" pos:column="51">{
                <expr_stmt><expr><call><name pos:line="468" pos:column="17">DeleteFile</name><argument_list pos:line="468" pos:column="27">(<argument><expr><name pos:line="468" pos:column="28">filePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
            <expr_stmt><expr><call><name pos:line="470" pos:column="13">OnUpdateArchivesCompleted</name><argument_list pos:line="470" pos:column="38">(<argument><expr><op:operator pos:line="470" pos:column="39">new</op:operator> <call><name pos:line="470" pos:column="43">EventArgs</name><argument_list pos:line="470" pos:column="52">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="473" pos:column="9">public</specifier> <name pos:line="473" pos:column="16">Task</name></type> <name pos:line="473" pos:column="21">UpdateArchivesAsync</name><parameter_list pos:line="473" pos:column="40">()</parameter_list> <block pos:line="473" pos:column="43">{
            <decl_stmt><decl><type><name pos:line="474" pos:column="13">var</name></type> <name pos:line="474" pos:column="17">task</name> <init pos:line="474" pos:column="22">= <expr><call><name><name pos:line="474" pos:column="24">Factory</name><op:operator pos:line="474" pos:column="31">.</op:operator><name pos:line="474" pos:column="32">StartNew</name></name><argument_list pos:line="474" pos:column="40">(<argument><expr><lambda><parameter_list pos:line="474" pos:column="41">()</parameter_list> <op:operator pos:line="474" pos:column="44">=&gt;</op:operator> <block pos:line="474" pos:column="47">{
                <expr_stmt><expr><call><name pos:line="475" pos:column="17">OnUpdateArchivesStarted</name><argument_list pos:line="475" pos:column="40">(<argument><expr><op:operator pos:line="475" pos:column="41">new</op:operator> <call><name pos:line="475" pos:column="45">EventArgs</name><argument_list pos:line="475" pos:column="54">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="476" pos:column="17">var</name></type> <name pos:line="476" pos:column="21">monitoredFiles</name> <init pos:line="476" pos:column="36">= <expr><op:operator pos:line="476" pos:column="38">new</op:operator> <call><name><name pos:line="476" pos:column="42">HashSet</name><argument_list pos:line="476" pos:column="49">&lt;<argument><name pos:line="476" pos:column="50">string</name></argument>&gt;</argument_list></name><argument_list pos:line="476" pos:column="57">(<argument><expr><call><name pos:line="476" pos:column="58">GetFilesFromSource</name><argument_list pos:line="476" pos:column="76">()</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="476" pos:column="80">StringComparer</name><op:operator pos:line="476" pos:column="94">.</op:operator><name pos:line="476" pos:column="95">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name pos:line="478" pos:column="17">var</name></type> <name pos:line="478" pos:column="21">outdatedFileTasks</name> <init pos:line="478" pos:column="39">= <expr><linq><from pos:line="478" pos:column="41">from <expr><name pos:line="478" pos:column="46">filePath</name></expr> <in pos:line="478" pos:column="55">in <expr><name pos:line="478" pos:column="58">monitoredFiles</name></expr></in></from>
                                        <let pos:line="479" pos:column="41">let <expr><name pos:line="479" pos:column="45">archive</name> <op:operator pos:line="479" pos:column="53">=</op:operator> <call><name pos:line="479" pos:column="55">GetArchiveForFile</name><argument_list pos:line="479" pos:column="72">(<argument><expr><name pos:line="479" pos:column="73">filePath</name></expr></argument>)</argument_list></call></expr></let>
                                        <where pos:line="480" pos:column="41">where <expr><name pos:line="480" pos:column="47">null</name> <op:operator pos:line="480" pos:column="52">!=</op:operator> <name pos:line="480" pos:column="55">archive</name> <op:operator pos:line="480" pos:column="63">&amp;&amp;</op:operator> <call><name><name pos:line="480" pos:column="66">archive</name><op:operator pos:line="480" pos:column="73">.</op:operator><name pos:line="480" pos:column="74">IsOutdated</name></name><argument_list pos:line="480" pos:column="84">(<argument><expr><name pos:line="480" pos:column="85">filePath</name></expr></argument>)</argument_list></call></expr></where>
                                        <select pos:line="481" pos:column="41">select <expr><call><name pos:line="481" pos:column="48">UpdateFileAsync</name><argument_list pos:line="481" pos:column="63">(<argument><expr><name pos:line="481" pos:column="64">filePath</name></expr></argument>)</argument_list></call></expr></select></linq></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="482" pos:column="17">Task</name><op:operator pos:line="482" pos:column="21">.</op:operator><name pos:line="482" pos:column="22">WaitAll</name></name><argument_list pos:line="482" pos:column="29">(<argument><expr><call><name><name pos:line="482" pos:column="30">outdatedFileTasks</name><op:operator pos:line="482" pos:column="47">.</op:operator><name pos:line="482" pos:column="48">ToArray</name></name><argument_list pos:line="482" pos:column="55">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="484" pos:column="17">var</name></type> <name pos:line="484" pos:column="21">deletedFileTasks</name> <init pos:line="484" pos:column="38">= <expr><linq><from pos:line="484" pos:column="40">from <expr><name pos:line="484" pos:column="45">filePath</name></expr> <in pos:line="484" pos:column="54">in <expr><call><name pos:line="484" pos:column="57">GetArchivedFiles</name><argument_list pos:line="484" pos:column="73">()</argument_list></call></expr></in></from>
                                       <let pos:line="485" pos:column="40">let <expr><name pos:line="485" pos:column="44">archive</name> <op:operator pos:line="485" pos:column="52">=</op:operator> <call><name pos:line="485" pos:column="54">GetArchiveForFile</name><argument_list pos:line="485" pos:column="71">(<argument><expr><name pos:line="485" pos:column="72">filePath</name></expr></argument>)</argument_list></call></expr></let>
                                       <where pos:line="486" pos:column="40">where <expr><name pos:line="486" pos:column="46">null</name> <op:operator pos:line="486" pos:column="51">!=</op:operator> <name pos:line="486" pos:column="54">archive</name> <op:operator pos:line="486" pos:column="62">&amp;&amp;</op:operator> <name pos:line="486" pos:column="65">null</name> <op:operator pos:line="486" pos:column="70">!=</op:operator> <name pos:line="486" pos:column="73">filePath</name> <op:operator pos:line="486" pos:column="82">&amp;&amp;</op:operator> <op:operator pos:line="486" pos:column="85">!</op:operator><call><name><name pos:line="486" pos:column="86">monitoredFiles</name><op:operator pos:line="486" pos:column="100">.</op:operator><name pos:line="486" pos:column="101">Contains</name></name><argument_list pos:line="486" pos:column="109">(<argument><expr><name pos:line="486" pos:column="110">filePath</name></expr></argument>)</argument_list></call></expr></where>
                                       <select pos:line="487" pos:column="40">select <expr><call><name pos:line="487" pos:column="47">DeleteFileAsync</name><argument_list pos:line="487" pos:column="62">(<argument><expr><name pos:line="487" pos:column="63">filePath</name></expr></argument>)</argument_list></call></expr></select></linq></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name pos:line="489" pos:column="17">Task</name><op:operator pos:line="489" pos:column="21">.</op:operator><name pos:line="489" pos:column="22">WaitAll</name></name><argument_list pos:line="489" pos:column="29">(<argument><expr><call><name><name pos:line="489" pos:column="30">deletedFileTasks</name><op:operator pos:line="489" pos:column="46">.</op:operator><name pos:line="489" pos:column="47">ToArray</name></name><argument_list pos:line="489" pos:column="54">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="490" pos:column="17">OnUpdateArchivesCompleted</name><argument_list pos:line="490" pos:column="42">(<argument><expr><op:operator pos:line="490" pos:column="43">new</op:operator> <call><name pos:line="490" pos:column="47">EventArgs</name><argument_list pos:line="490" pos:column="56">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="492" pos:column="13">return <expr><name pos:line="492" pos:column="20">task</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="495" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="496" pos:column="9">/// Processes a file update by updating the file in the appropriate archive</comment>
        <comment type="line" pos:line="497" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="498" pos:column="9">/// &lt;param name="filePath"&gt;the file to update&lt;/param&gt;</comment>
        <function><type><specifier pos:line="499" pos:column="9">public</specifier> <name pos:line="499" pos:column="16">void</name></type> <name pos:line="499" pos:column="21">UpdateFile</name><parameter_list pos:line="499" pos:column="31">(<param><decl><type><name pos:line="499" pos:column="32">string</name></type> <name pos:line="499" pos:column="39">filePath</name></decl></param>)</parameter_list> <block pos:line="499" pos:column="49">{
            <decl_stmt><decl><type><name pos:line="500" pos:column="13">var</name></type> <name pos:line="500" pos:column="17">archive</name> <init pos:line="500" pos:column="25">= <expr><call><name><name pos:line="500" pos:column="27">this</name><op:operator pos:line="500" pos:column="31">.</op:operator><name pos:line="500" pos:column="32">GetArchiveForFile</name></name><argument_list pos:line="500" pos:column="49">(<argument><expr><name pos:line="500" pos:column="50">filePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="501" pos:column="13">if<condition pos:line="501" pos:column="15">(<expr><name pos:line="501" pos:column="16">null</name> <op:operator pos:line="501" pos:column="21">!=</op:operator> <name pos:line="501" pos:column="24">archive</name></expr>)</condition><then pos:line="501" pos:column="32"> <block pos:line="501" pos:column="33">{
                <expr_stmt><expr><call><name><name pos:line="502" pos:column="17">archive</name><op:operator pos:line="502" pos:column="24">.</op:operator><name pos:line="502" pos:column="25">AddOrUpdateFile</name></name><argument_list pos:line="502" pos:column="40">(<argument><expr><name pos:line="502" pos:column="41">filePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="506" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="507" pos:column="9">/// Processes a file update by updating the file in the appropriate archive</comment>
        <comment type="line" pos:line="508" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="509" pos:column="9">/// &lt;param name="filePath"&gt;the file to update&lt;/param&gt;</comment>
        <function><type><specifier pos:line="510" pos:column="9">public</specifier> <name pos:line="510" pos:column="16">Task</name></type> <name pos:line="510" pos:column="21">UpdateFileAsync</name><parameter_list pos:line="510" pos:column="36">(<param><decl><type><name pos:line="510" pos:column="37">string</name></type> <name pos:line="510" pos:column="44">filePath</name></decl></param>)</parameter_list> <block pos:line="510" pos:column="54">{
            <decl_stmt><decl><type><name pos:line="511" pos:column="13">var</name></type> <name pos:line="511" pos:column="17">archive</name> <init pos:line="511" pos:column="25">= <expr><call><name><name pos:line="511" pos:column="27">this</name><op:operator pos:line="511" pos:column="31">.</op:operator><name pos:line="511" pos:column="32">GetArchiveForFile</name></name><argument_list pos:line="511" pos:column="49">(<argument><expr><name pos:line="511" pos:column="50">filePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="512" pos:column="13">if<condition pos:line="512" pos:column="15">(<expr><name pos:line="512" pos:column="16">null</name> <op:operator pos:line="512" pos:column="21">!=</op:operator> <name pos:line="512" pos:column="24">archive</name></expr>)</condition><then pos:line="512" pos:column="32"> <block pos:line="512" pos:column="33">{
                <return pos:line="513" pos:column="17">return <expr><call><name><name pos:line="513" pos:column="24">archive</name><op:operator pos:line="513" pos:column="31">.</op:operator><name pos:line="513" pos:column="32">AddOrUpdateFileAsync</name></name><argument_list pos:line="513" pos:column="52">(<argument><expr><name pos:line="513" pos:column="53">filePath</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
            <return pos:line="515" pos:column="13">return <expr><name pos:line="515" pos:column="20">null</name></expr>;</return>
        }</block></function>
        <comment type="line" pos:line="517" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="518" pos:column="9">/// Sets the published events to null and calls Dispose on the registered archives if</comment>
        <comment type="line" pos:line="519" pos:column="9">/// &lt;paramref name="disposing"/&gt;is true.</comment>
        <comment type="line" pos:line="520" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="521" pos:column="9">/// &lt;param name="disposing"&gt;Causes this method to dispose of the registered archives&lt;/param&gt;</comment>
        <function><type><specifier pos:line="522" pos:column="9">protected</specifier> <specifier pos:line="522" pos:column="19">virtual</specifier> <name pos:line="522" pos:column="27">void</name></type> <name pos:line="522" pos:column="32">Dispose</name><parameter_list pos:line="522" pos:column="39">(<param><decl><type><name pos:line="522" pos:column="40">bool</name></type> <name pos:line="522" pos:column="45">disposing</name></decl></param>)</parameter_list> <block pos:line="522" pos:column="56">{
            <if pos:line="523" pos:column="13">if<condition pos:line="523" pos:column="15">(<expr><name pos:line="523" pos:column="16">disposing</name></expr>)</condition><then pos:line="523" pos:column="26"> <block pos:line="523" pos:column="27">{
                <foreach pos:line="524" pos:column="17">foreach(<init><decl><type><name pos:line="524" pos:column="25">var</name></type> <name pos:line="524" pos:column="29">archive</name> <range pos:line="524" pos:column="37">in <expr><name pos:line="524" pos:column="40">registeredArchives</name></expr></range></decl></init>) <block pos:line="524" pos:column="60">{
                    <expr_stmt><expr><call><name><name pos:line="525" pos:column="21">archive</name><op:operator pos:line="525" pos:column="28">.</op:operator><name pos:line="525" pos:column="29">Dispose</name></name><argument_list pos:line="525" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
            }</block></then></if>
            <expr_stmt><expr><name pos:line="528" pos:column="13">FileChanged</name> <op:operator pos:line="528" pos:column="25">=</op:operator> <name pos:line="528" pos:column="27">null</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="531" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="532" pos:column="9">/// Gets the appropriate archive for string this file name (based on</comment>
        <comment type="line" pos:line="533" pos:column="9">/// &lt;see cref="Path.GetExtension(string)"/&gt;</comment>
        <comment type="line" pos:line="534" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="535" pos:column="9">/// &lt;param name="fileName"&gt;The file name&lt;/param&gt;</comment>
        <comment type="line" pos:line="536" pos:column="9">/// &lt;returns&gt;The archive that should contain this file name&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="537" pos:column="9">protected</specifier> <name pos:line="537" pos:column="19">AbstractArchive</name></type> <name pos:line="537" pos:column="35">GetArchiveForFile</name><parameter_list pos:line="537" pos:column="52">(<param><decl><type><name pos:line="537" pos:column="53">string</name></type> <name pos:line="537" pos:column="60">fileName</name></decl></param>)</parameter_list> <block pos:line="537" pos:column="70">{
            <if pos:line="538" pos:column="13">if<condition pos:line="538" pos:column="15">(<expr><name pos:line="538" pos:column="16">null</name> <op:operator pos:line="538" pos:column="21">==</op:operator> <name pos:line="538" pos:column="24">fileName</name></expr>)</condition><then pos:line="538" pos:column="33">
                <throw pos:line="539" pos:column="17">throw <expr><op:operator pos:line="539" pos:column="23">new</op:operator> <call><name pos:line="539" pos:column="27">ArgumentNullException</name><argument_list pos:line="539" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="539" pos:column="49">"fileName"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="541" pos:column="13">AbstractArchive</name></type> <name pos:line="541" pos:column="29">selectedArchive</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="542" pos:column="13">var</name></type> <name pos:line="542" pos:column="17">extension</name> <init pos:line="542" pos:column="27">= <expr><call><name><name pos:line="542" pos:column="29">Path</name><op:operator pos:line="542" pos:column="33">.</op:operator><name pos:line="542" pos:column="34">GetExtension</name></name><argument_list pos:line="542" pos:column="46">(<argument><expr><name pos:line="542" pos:column="47">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if pos:line="544" pos:column="13">if<condition pos:line="544" pos:column="15">(<expr><op:operator pos:line="544" pos:column="16">!</op:operator><call><name><name pos:line="544" pos:column="17">this</name><op:operator pos:line="544" pos:column="21">.</op:operator><name pos:line="544" pos:column="22">archiveMap</name><op:operator pos:line="544" pos:column="32">.</op:operator><name pos:line="544" pos:column="33">TryGetValue</name></name><argument_list pos:line="544" pos:column="44">(<argument><expr><name pos:line="544" pos:column="45">extension</name></expr></argument>, <argument><expr pos:line="544" pos:column="56">out <name pos:line="544" pos:column="60">selectedArchive</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="544" pos:column="77"> <block pos:line="544" pos:column="78">{
                <expr_stmt><expr><name pos:line="545" pos:column="17">selectedArchive</name> <op:operator pos:line="545" pos:column="33">=</op:operator> <name pos:line="545" pos:column="35">defaultArchive</name></expr>;</expr_stmt>
            }</block></then></if>
            <return pos:line="547" pos:column="13">return <expr><name pos:line="547" pos:column="20">selectedArchive</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="550" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="551" pos:column="9">/// event handler for &lt;see cref="FileChanged"/&gt;</comment>
        <comment type="line" pos:line="552" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="553" pos:column="9">/// &lt;param name="e"&gt;event arguments&lt;/param&gt;</comment>
        <function><type><specifier pos:line="554" pos:column="9">protected</specifier> <specifier pos:line="554" pos:column="19">virtual</specifier> <name pos:line="554" pos:column="27">void</name></type> <name pos:line="554" pos:column="32">OnFileChanged</name><parameter_list pos:line="554" pos:column="45">(<param><decl><type><name pos:line="554" pos:column="46">FileEventRaisedArgs</name></type> <name pos:line="554" pos:column="66">e</name></decl></param>)</parameter_list> <block pos:line="554" pos:column="69">{
            <decl_stmt><decl><type><name><name pos:line="555" pos:column="13">EventHandler</name><argument_list pos:line="555" pos:column="25">&lt;<argument><name pos:line="555" pos:column="26">FileEventRaisedArgs</name></argument>&gt;</argument_list></name></type> <name pos:line="555" pos:column="47">handler</name> <init pos:line="555" pos:column="55">= <expr><name pos:line="555" pos:column="57">FileChanged</name></expr></init></decl>;</decl_stmt>
            <if pos:line="556" pos:column="13">if<condition pos:line="556" pos:column="15">(<expr><name pos:line="556" pos:column="16">handler</name> <op:operator pos:line="556" pos:column="24">!=</op:operator> <name pos:line="556" pos:column="27">null</name></expr>)</condition><then pos:line="556" pos:column="32"> <block pos:line="556" pos:column="33">{
                <expr_stmt><expr><call><name pos:line="557" pos:column="17">handler</name><argument_list pos:line="557" pos:column="24">(<argument><expr><name pos:line="557" pos:column="25">this</name></expr></argument>, <argument><expr><name pos:line="557" pos:column="31">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="561" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="562" pos:column="9">/// event handler for &lt;see cref="MonitoringStopped"/&gt;</comment>
        <comment type="line" pos:line="563" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="564" pos:column="9">/// &lt;param name="e"&gt;null event&lt;/param&gt;</comment>
        <function><type><specifier pos:line="565" pos:column="9">protected</specifier> <specifier pos:line="565" pos:column="19">virtual</specifier> <name pos:line="565" pos:column="27">void</name></type> <name pos:line="565" pos:column="32">OnMonitoringStopped</name><parameter_list pos:line="565" pos:column="51">(<param><decl><type><name pos:line="565" pos:column="52">EventArgs</name></type> <name pos:line="565" pos:column="62">e</name></decl></param>)</parameter_list> <block pos:line="565" pos:column="65">{
            <decl_stmt><decl><type><name pos:line="566" pos:column="13">EventHandler</name></type> <name pos:line="566" pos:column="26">handler</name> <init pos:line="566" pos:column="34">= <expr><name pos:line="566" pos:column="36">MonitoringStopped</name></expr></init></decl>;</decl_stmt>
            <if pos:line="567" pos:column="13">if<condition pos:line="567" pos:column="15">(<expr><name pos:line="567" pos:column="16">handler</name> <op:operator pos:line="567" pos:column="24">!=</op:operator> <name pos:line="567" pos:column="27">null</name></expr>)</condition><then pos:line="567" pos:column="32"> <block pos:line="567" pos:column="33">{
                <expr_stmt><expr><call><name pos:line="568" pos:column="17">handler</name><argument_list pos:line="568" pos:column="24">(<argument><expr><name pos:line="568" pos:column="25">this</name></expr></argument>, <argument><expr><name pos:line="568" pos:column="31">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="572" pos:column="9">protected</specifier> <specifier pos:line="572" pos:column="19">virtual</specifier> <name pos:line="572" pos:column="27">void</name></type> <name pos:line="572" pos:column="32">OnUpdateArchivesCompleted</name><parameter_list pos:line="572" pos:column="57">(<param><decl><type><name pos:line="572" pos:column="58">EventArgs</name></type> <name pos:line="572" pos:column="68">e</name></decl></param>)</parameter_list> <block pos:line="572" pos:column="71">{
            <decl_stmt><decl><type><name pos:line="573" pos:column="13">EventHandler</name></type> <name pos:line="573" pos:column="26">handler</name> <init pos:line="573" pos:column="34">= <expr><name pos:line="573" pos:column="36">UpdateArchivesCompleted</name></expr></init></decl>;</decl_stmt>
            <if pos:line="574" pos:column="13">if<condition pos:line="574" pos:column="15">(<expr><name pos:line="574" pos:column="16">handler</name> <op:operator pos:line="574" pos:column="24">!=</op:operator> <name pos:line="574" pos:column="27">null</name></expr>)</condition><then pos:line="574" pos:column="32"> <block pos:line="574" pos:column="33">{
                <expr_stmt><expr><call><name pos:line="575" pos:column="17">handler</name><argument_list pos:line="575" pos:column="24">(<argument><expr><name pos:line="575" pos:column="25">this</name></expr></argument>, <argument><expr><name pos:line="575" pos:column="31">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="579" pos:column="9">protected</specifier> <specifier pos:line="579" pos:column="19">virtual</specifier> <name pos:line="579" pos:column="27">void</name></type> <name pos:line="579" pos:column="32">OnUpdateArchivesStarted</name><parameter_list pos:line="579" pos:column="55">(<param><decl><type><name pos:line="579" pos:column="56">EventArgs</name></type> <name pos:line="579" pos:column="66">e</name></decl></param>)</parameter_list> <block pos:line="579" pos:column="69">{
            <decl_stmt><decl><type><name pos:line="580" pos:column="13">EventHandler</name></type> <name pos:line="580" pos:column="26">handler</name> <init pos:line="580" pos:column="34">= <expr><name pos:line="580" pos:column="36">UpdateArchivesStarted</name></expr></init></decl>;</decl_stmt>
            <if pos:line="581" pos:column="13">if<condition pos:line="581" pos:column="15">(<expr><name pos:line="581" pos:column="16">handler</name> <op:operator pos:line="581" pos:column="24">!=</op:operator> <name pos:line="581" pos:column="27">null</name></expr>)</condition><then pos:line="581" pos:column="32"> <block pos:line="581" pos:column="33">{
                <expr_stmt><expr><call><name pos:line="582" pos:column="17">handler</name><argument_list pos:line="582" pos:column="24">(<argument><expr><name pos:line="582" pos:column="25">this</name></expr></argument>, <argument><expr><name pos:line="582" pos:column="31">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>
        <comment type="line" pos:line="585" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="586" pos:column="9">/// Raises the &lt;see cref="FileChanged"/&gt; event.</comment>
        <comment type="line" pos:line="587" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="588" pos:column="9">/// &lt;param name="sender"&gt;The caller&lt;/param&gt;</comment>
        <comment type="line" pos:line="589" pos:column="9">/// &lt;param name="e"&gt;The event arguments&lt;/param&gt;</comment>
        <function><type><specifier pos:line="590" pos:column="9">protected</specifier> <specifier pos:line="590" pos:column="19">virtual</specifier> <name pos:line="590" pos:column="27">void</name></type> <name pos:line="590" pos:column="32">RespondToArchiveFileEvent</name><parameter_list pos:line="590" pos:column="57">(<param><decl><type><name pos:line="590" pos:column="58">object</name></type> <name pos:line="590" pos:column="65">sender</name></decl></param>, <param><decl><type><name pos:line="590" pos:column="73">FileEventRaisedArgs</name></type> <name pos:line="590" pos:column="93">e</name></decl></param>)</parameter_list> <block pos:line="590" pos:column="96">{
            <comment type="line" pos:line="591" pos:column="13">//SrcMLFileLogger.DefaultLogger.Info("AbstractFileMonitor.RespondToArchiveFileEvent() type = " + e.EventType + ", file = " + e.FilePath + ", oldfile = " + e.OldFilePath + ", HasSrcML = " + e.HasSrcML);</comment>
            <decl_stmt><decl><type><name pos:line="592" pos:column="13">FileInfo</name></type> <name pos:line="592" pos:column="22">fi</name> <init pos:line="592" pos:column="25">= <expr><op:operator pos:line="592" pos:column="27">new</op:operator> <call><name pos:line="592" pos:column="31">FileInfo</name><argument_list pos:line="592" pos:column="39">(<argument><expr><name><name pos:line="592" pos:column="40">e</name><op:operator pos:line="592" pos:column="41">.</op:operator><name pos:line="592" pos:column="42">FilePath</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="593" pos:column="13">OnFileChanged</name><argument_list pos:line="593" pos:column="26">(<argument><expr><name pos:line="593" pos:column="27">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
