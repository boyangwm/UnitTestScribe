<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data\XNameMaps.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2013 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">System</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Collections</name><op:operator pos:line="13" pos:column="25">.</op:operator><name pos:line="13" pos:column="26">Generic</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Xml</name><op:operator pos:line="14" pos:column="17">.</op:operator><name pos:line="14" pos:column="18">Linq</name></name>;</using>

<namespace pos:line="16" pos:column="1">namespace <name><name pos:line="16" pos:column="11">ABB</name><op:operator pos:line="16" pos:column="14">.</op:operator><name pos:line="16" pos:column="15">SrcML</name><op:operator pos:line="16" pos:column="20">.</op:operator><name pos:line="16" pos:column="21">Data</name></name> <block pos:line="16" pos:column="26">{

    <comment type="line" pos:line="18" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="19" pos:column="5">/// This class houses a mapping of &lt;see cref="System.Xml.Linq.XName"/&gt; to</comment>
    <comment type="line" pos:line="20" pos:column="5">/// &lt;see cref="TypeKind"/&gt;/</comment>
    <comment type="line" pos:line="21" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="22" pos:column="5">internal</specifier> <specifier pos:line="22" pos:column="14">static</specifier> class <name pos:line="22" pos:column="27">XNameMaps</name> <block pos:line="22" pos:column="37">{

        <comment type="line" pos:line="24" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="25" pos:column="9">/// gets the TypeKind for the given typeElement. The element must be of node type</comment>
        <comment type="line" pos:line="26" pos:column="9">/// &lt;see cref="ABB.SrcML.SRC.Struct"/&gt;, &lt;see cref="ABB.SrcML.SRC.StructDeclaration"/&gt;, </comment>
        <comment type="line" pos:line="27" pos:column="9">/// &lt;see cref="ABB.SrcML.SRC.Class"/&gt;, &lt;see cref="ABB.SrcML.SRC.ClassDeclaration"/&gt;</comment>
        <comment type="line" pos:line="28" pos:column="9">/// &lt;see cref="ABB.SrcML.SRC.Union"/&gt;, &lt;see cref="ABB.SrcML.SRC.UnionDeclaration"/&gt;, or</comment>
        <comment type="line" pos:line="29" pos:column="9">/// &lt;see cref="ABB.SrcML.SRC.Enum"/&gt;</comment>
        <comment type="line" pos:line="30" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="31" pos:column="9">/// &lt;param name="typeElement"&gt;The type element&lt;/param&gt;</comment>
        <comment type="line" pos:line="32" pos:column="9">/// &lt;returns&gt;The kind of the type element&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="33" pos:column="9">public</specifier> <specifier pos:line="33" pos:column="16">static</specifier> <name pos:line="33" pos:column="23">TypeKind</name></type> <name pos:line="33" pos:column="32">GetKindForXElement</name><parameter_list pos:line="33" pos:column="50">(<param><decl><type><name pos:line="33" pos:column="51">XElement</name></type> <name pos:line="33" pos:column="60">typeElement</name></decl></param>)</parameter_list> <block pos:line="33" pos:column="73">{
            <if pos:line="34" pos:column="13">if<condition pos:line="34" pos:column="15">(<expr><name pos:line="34" pos:column="16">null</name> <op:operator pos:line="34" pos:column="21">==</op:operator> <name pos:line="34" pos:column="24">typeElement</name></expr>)</condition><then pos:line="34" pos:column="36"> <block pos:line="34" pos:column="37">{ <throw pos:line="34" pos:column="39">throw <expr><op:operator pos:line="34" pos:column="45">new</op:operator> <call><name pos:line="34" pos:column="49">ArgumentNullException</name><argument_list pos:line="34" pos:column="70">(<argument><expr><lit:literal type="string" pos:line="34" pos:column="71">"typeElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>
            
            <decl_stmt><decl><type><name pos:line="36" pos:column="13">var</name></type> <name pos:line="36" pos:column="17">map</name> <init pos:line="36" pos:column="21">= <expr><op:operator pos:line="36" pos:column="23">new</op:operator> <call><name><name pos:line="36" pos:column="27">Dictionary</name><argument_list pos:line="36" pos:column="37">&lt;<argument><name pos:line="36" pos:column="38">XName</name></argument>, <argument><name pos:line="36" pos:column="45">TypeKind</name></argument>&gt;</argument_list></name><argument_list pos:line="36" pos:column="54">()</argument_list></call> <block pos:line="36" pos:column="57">{
                <expr><block pos:line="37" pos:column="17">{ <expr><name><name pos:line="37" pos:column="19">SRC</name><op:operator pos:line="37" pos:column="22">.</op:operator><name pos:line="37" pos:column="23">Struct</name></name></expr>, <expr><name><name pos:line="37" pos:column="31">TypeKind</name><op:operator pos:line="37" pos:column="39">.</op:operator><name pos:line="37" pos:column="40">Struct</name></name></expr> }</block></expr>,
                <expr><block pos:line="38" pos:column="17">{ <expr><name><name pos:line="38" pos:column="19">SRC</name><op:operator pos:line="38" pos:column="22">.</op:operator><name pos:line="38" pos:column="23">StructDeclaration</name></name></expr>, <expr><name><name pos:line="38" pos:column="42">TypeKind</name><op:operator pos:line="38" pos:column="50">.</op:operator><name pos:line="38" pos:column="51">Struct</name></name></expr> }</block></expr>,
                <expr><block pos:line="39" pos:column="17">{ <expr><name><name pos:line="39" pos:column="19">SRC</name><op:operator pos:line="39" pos:column="22">.</op:operator><name pos:line="39" pos:column="23">Class</name></name></expr>, <expr><name><name pos:line="39" pos:column="30">TypeKind</name><op:operator pos:line="39" pos:column="38">.</op:operator><name pos:line="39" pos:column="39">Class</name></name></expr> }</block></expr>,
                <expr><block pos:line="40" pos:column="17">{ <expr><name><name pos:line="40" pos:column="19">SRC</name><op:operator pos:line="40" pos:column="22">.</op:operator><name pos:line="40" pos:column="23">ClassDeclaration</name></name></expr>, <expr><name><name pos:line="40" pos:column="41">TypeKind</name><op:operator pos:line="40" pos:column="49">.</op:operator><name pos:line="40" pos:column="50">Class</name></name></expr> }</block></expr>,
                <expr><block pos:line="41" pos:column="17">{ <expr><name><name pos:line="41" pos:column="19">SRC</name><op:operator pos:line="41" pos:column="22">.</op:operator><name pos:line="41" pos:column="23">Union</name></name></expr>, <expr><name><name pos:line="41" pos:column="30">TypeKind</name><op:operator pos:line="41" pos:column="38">.</op:operator><name pos:line="41" pos:column="39">Union</name></name></expr> }</block></expr>,
                <expr><block pos:line="42" pos:column="17">{ <expr><name><name pos:line="42" pos:column="19">SRC</name><op:operator pos:line="42" pos:column="22">.</op:operator><name pos:line="42" pos:column="23">UnionDeclaration</name></name></expr>, <expr><name><name pos:line="42" pos:column="41">TypeKind</name><op:operator pos:line="42" pos:column="49">.</op:operator><name pos:line="42" pos:column="50">Union</name></name></expr> }</block></expr>,
                <expr><block pos:line="43" pos:column="17">{ <expr><name><name pos:line="43" pos:column="19">SRC</name><op:operator pos:line="43" pos:column="22">.</op:operator><name pos:line="43" pos:column="23">Enum</name></name></expr>, <expr><name><name pos:line="43" pos:column="29">TypeKind</name><op:operator pos:line="43" pos:column="37">.</op:operator><name pos:line="43" pos:column="38">Enumeration</name></name></expr> }</block></expr>,
            }</block></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="46" pos:column="13">TypeKind</name></type> <name pos:line="46" pos:column="22">answer</name></decl>;</decl_stmt>
            <if pos:line="47" pos:column="13">if<condition pos:line="47" pos:column="15">(<expr><call><name><name pos:line="47" pos:column="16">map</name><op:operator pos:line="47" pos:column="19">.</op:operator><name pos:line="47" pos:column="20">TryGetValue</name></name><argument_list pos:line="47" pos:column="31">(<argument><expr><name><name pos:line="47" pos:column="32">typeElement</name><op:operator pos:line="47" pos:column="43">.</op:operator><name pos:line="47" pos:column="44">Name</name></name></expr></argument>, <argument><expr pos:line="47" pos:column="50">out <name pos:line="47" pos:column="54">answer</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="47" pos:column="62"> <block pos:line="47" pos:column="63">{
                <if pos:line="48" pos:column="17">if<condition pos:line="48" pos:column="19">(<expr><name><name pos:line="48" pos:column="20">TypeKind</name><op:operator pos:line="48" pos:column="28">.</op:operator><name pos:line="48" pos:column="29">Class</name></name> <op:operator pos:line="48" pos:column="35">==</op:operator> <name pos:line="48" pos:column="38">answer</name></expr>)</condition><then pos:line="48" pos:column="45"> <block pos:line="48" pos:column="46">{
                    <decl_stmt><decl><type><name pos:line="49" pos:column="21">var</name></type> <name pos:line="49" pos:column="25">typeAttribute</name> <init pos:line="49" pos:column="39">= <expr><call><name><name pos:line="49" pos:column="41">typeElement</name><op:operator pos:line="49" pos:column="52">.</op:operator><name pos:line="49" pos:column="53">Attribute</name></name><argument_list pos:line="49" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="49" pos:column="63">"type"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="50" pos:column="21">if<condition pos:line="50" pos:column="23">(<expr><name pos:line="50" pos:column="24">null</name> <op:operator pos:line="50" pos:column="29">!=</op:operator> <name pos:line="50" pos:column="32">typeAttribute</name> <op:operator pos:line="50" pos:column="46">&amp;&amp;</op:operator> <name><name pos:line="50" pos:column="49">typeAttribute</name><op:operator pos:line="50" pos:column="62">.</op:operator><name pos:line="50" pos:column="63">Value</name></name> <op:operator pos:line="50" pos:column="69">==</op:operator> <lit:literal type="string" pos:line="50" pos:column="72">"interface"</lit:literal></expr>)</condition><then pos:line="50" pos:column="84"> <block pos:line="50" pos:column="85">{
                        <return pos:line="51" pos:column="25">return <expr><name><name pos:line="51" pos:column="32">TypeKind</name><op:operator pos:line="51" pos:column="40">.</op:operator><name pos:line="51" pos:column="41">Interface</name></name></expr>;</return>
                    }</block></then></if>
                }</block></then></if>
                <return pos:line="54" pos:column="17">return <expr><name pos:line="54" pos:column="24">answer</name></expr>;</return>
            }</block></then></if>
            <throw pos:line="56" pos:column="13">throw <expr><op:operator pos:line="56" pos:column="19">new</op:operator> <call><name pos:line="56" pos:column="23">ArgumentException</name><argument_list pos:line="56" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="56" pos:column="41">"element must be of type struct, struct_decl, class, class_decl, union, union_decl, or enum"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="56" pos:column="135">"typeElement"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
