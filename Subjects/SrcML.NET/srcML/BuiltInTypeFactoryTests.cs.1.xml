<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data.Test\BuiltInTypeFactoryTests.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2013 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">ABB</name><op:operator pos:line="12" pos:column="10">.</op:operator><name pos:line="12" pos:column="11">SrcML</name><op:operator pos:line="12" pos:column="16">.</op:operator><name pos:line="12" pos:column="17">Test</name><op:operator pos:line="12" pos:column="21">.</op:operator><name pos:line="12" pos:column="22">Utilities</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">NUnit</name><op:operator pos:line="13" pos:column="12">.</op:operator><name pos:line="13" pos:column="13">Framework</name></name>;</using>
<using pos:line="14" pos:column="1">using <name pos:line="14" pos:column="7">System</name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Collections</name><op:operator pos:line="15" pos:column="25">.</op:operator><name pos:line="15" pos:column="26">Generic</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Linq</name></name>;</using>

<namespace pos:line="18" pos:column="1">namespace <name><name pos:line="18" pos:column="11">ABB</name><op:operator pos:line="18" pos:column="14">.</op:operator><name pos:line="18" pos:column="15">SrcML</name><op:operator pos:line="18" pos:column="20">.</op:operator><name pos:line="18" pos:column="21">Data</name><op:operator pos:line="18" pos:column="25">.</op:operator><name pos:line="18" pos:column="26">Test</name></name> <block pos:line="18" pos:column="31">{

    <class><attribute pos:line="20" pos:column="5">[<expr><name pos:line="20" pos:column="6">TestFixture</name></expr>]</attribute>
    <attribute pos:line="21" pos:column="5">[<expr><call><name pos:line="21" pos:column="6">Category</name><argument_list pos:line="21" pos:column="14">(<argument><expr><lit:literal type="string" pos:line="21" pos:column="15">"Build"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="22" pos:column="5">public</specifier> class <name pos:line="22" pos:column="18">BuiltInTypeFactoryTests</name> <block pos:line="22" pos:column="42">{
        <decl_stmt><decl><type><specifier pos:line="23" pos:column="9">private</specifier> <name><name pos:line="23" pos:column="17">Dictionary</name><argument_list pos:line="23" pos:column="27">&lt;<argument><name pos:line="23" pos:column="28">Language</name></argument>, <argument><name pos:line="23" pos:column="38">AbstractCodeParser</name></argument>&gt;</argument_list></name></type> <name pos:line="23" pos:column="58">CodeParser</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="24" pos:column="9">private</specifier> <name><name pos:line="24" pos:column="17">Dictionary</name><argument_list pos:line="24" pos:column="27">&lt;<argument><name pos:line="24" pos:column="28">Language</name></argument>, <argument><name pos:line="24" pos:column="38">SrcMLFileUnitSetup</name></argument>&gt;</argument_list></name></type> <name pos:line="24" pos:column="58">FileUnitSetup</name></decl>;</decl_stmt>

        <function><type><attribute pos:line="26" pos:column="9">[<expr><name pos:line="26" pos:column="10">TestFixtureSetUp</name></expr>]</attribute>
        <specifier pos:line="27" pos:column="9">public</specifier> <name pos:line="27" pos:column="16">void</name></type> <name pos:line="27" pos:column="21">ClassSetup</name><parameter_list pos:line="27" pos:column="31">()</parameter_list> <block pos:line="27" pos:column="34">{
            <expr_stmt><expr><name pos:line="28" pos:column="13">FileUnitSetup</name> <op:operator pos:line="28" pos:column="27">=</op:operator> <op:operator pos:line="28" pos:column="29">new</op:operator> <call><name><name pos:line="28" pos:column="33">Dictionary</name><argument_list pos:line="28" pos:column="43">&lt;<argument><name pos:line="28" pos:column="44">Language</name></argument>, <argument><name pos:line="28" pos:column="54">SrcMLFileUnitSetup</name></argument>&gt;</argument_list></name><argument_list pos:line="28" pos:column="73">()</argument_list></call> <block pos:line="28" pos:column="76">{
                <expr><block pos:line="29" pos:column="17">{ <expr><name><name pos:line="29" pos:column="19">Language</name><op:operator pos:line="29" pos:column="27">.</op:operator><name pos:line="29" pos:column="28">CPlusPlus</name></name></expr><op:operator pos:line="29" pos:column="37">,</op:operator> <expr><op:operator pos:line="29" pos:column="39">new</op:operator> <call><name pos:line="29" pos:column="43">SrcMLFileUnitSetup</name><argument_list pos:line="29" pos:column="61">(<argument><expr><name><name pos:line="29" pos:column="62">Language</name><op:operator pos:line="29" pos:column="70">.</op:operator><name pos:line="29" pos:column="71">CPlusPlus</name></name></expr></argument>)</argument_list></call></expr> }</block></expr><op:operator pos:line="29" pos:column="83">,</op:operator>
                <expr><block pos:line="30" pos:column="17">{ <expr><name><name pos:line="30" pos:column="19">Language</name><op:operator pos:line="30" pos:column="27">.</op:operator><name pos:line="30" pos:column="28">Java</name></name></expr><op:operator pos:line="30" pos:column="32">,</op:operator> <expr><op:operator pos:line="30" pos:column="34">new</op:operator> <call><name pos:line="30" pos:column="38">SrcMLFileUnitSetup</name><argument_list pos:line="30" pos:column="56">(<argument><expr><name><name pos:line="30" pos:column="57">Language</name><op:operator pos:line="30" pos:column="65">.</op:operator><name pos:line="30" pos:column="66">Java</name></name></expr></argument>)</argument_list></call></expr> }</block></expr><op:operator pos:line="30" pos:column="73">,</op:operator>
            }</block></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="32" pos:column="13">CodeParser</name> <op:operator pos:line="32" pos:column="24">=</op:operator> <op:operator pos:line="32" pos:column="26">new</op:operator> <call><name><name pos:line="32" pos:column="30">Dictionary</name><argument_list pos:line="32" pos:column="40">&lt;<argument><name pos:line="32" pos:column="41">Language</name></argument>, <argument><name pos:line="32" pos:column="51">AbstractCodeParser</name></argument>&gt;</argument_list></name><argument_list pos:line="32" pos:column="70">()</argument_list></call> <block pos:line="32" pos:column="73">{
                <expr><block pos:line="33" pos:column="17">{ <expr><name><name pos:line="33" pos:column="19">Language</name><op:operator pos:line="33" pos:column="27">.</op:operator><name pos:line="33" pos:column="28">CPlusPlus</name></name></expr><op:operator pos:line="33" pos:column="37">,</op:operator> <expr><op:operator pos:line="33" pos:column="39">new</op:operator> <call><name pos:line="33" pos:column="43">CPlusPlusCodeParser</name><argument_list pos:line="33" pos:column="62">()</argument_list></call></expr> }</block></expr><op:operator pos:line="33" pos:column="66">,</op:operator>
                <expr><block pos:line="34" pos:column="17">{ <expr><name><name pos:line="34" pos:column="19">Language</name><op:operator pos:line="34" pos:column="27">.</op:operator><name pos:line="34" pos:column="28">Java</name></name></expr><op:operator pos:line="34" pos:column="32">,</op:operator> <expr><op:operator pos:line="34" pos:column="34">new</op:operator> <call><name pos:line="34" pos:column="38">JavaCodeParser</name><argument_list pos:line="34" pos:column="52">()</argument_list></call></expr> }</block></expr><op:operator pos:line="34" pos:column="56">,</op:operator>
            }</block></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="38" pos:column="9">[<expr><name pos:line="38" pos:column="10">Test</name></expr>]</attribute>
        <attribute pos:line="39" pos:column="9">[<expr><call><name pos:line="39" pos:column="10">Category</name><argument_list pos:line="39" pos:column="18">(<argument><expr><lit:literal type="string" pos:line="39" pos:column="19">"Todo"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="40" pos:column="9">public</specifier> <name pos:line="40" pos:column="16">void</name></type> <name pos:line="40" pos:column="21">TestCppBuiltIns_WithDoubleWord</name><parameter_list pos:line="40" pos:column="51">()</parameter_list> <block pos:line="40" pos:column="54">{
            <comment type="line" pos:line="41" pos:column="13">// #a.cpp #example: "unsigned int a;"; MODIFIER TYPE a; MODIFIER TYPE b;</comment>
            <decl_stmt><decl><type><name pos:line="42" pos:column="13">string</name></type> <name pos:line="42" pos:column="20">xmlFormat</name> <init pos:line="42" pos:column="30">= <expr><lit:literal type="string" pos:line="42" pos:column="32">@"&lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;{0}&lt;/name&gt; &lt;name&gt;{1}&lt;/name&gt;&lt;/type&gt; &lt;name&gt;a&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
&lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;{0}&lt;/name&gt; &lt;name&gt;{1}&lt;/name&gt;&lt;/type&gt; &lt;name&gt;b&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <foreach pos:line="45" pos:column="13">foreach(<init><decl><type><name pos:line="45" pos:column="21">var</name></type> <name pos:line="45" pos:column="25">builtInModifier</name> <range pos:line="45" pos:column="41">in <expr><op:operator pos:line="45" pos:column="44">new</op:operator> <name><name pos:line="45" pos:column="48">string</name><index pos:line="45" pos:column="54">[]</index></name> <block pos:line="45" pos:column="57">{ <expr><lit:literal type="string" pos:line="45" pos:column="59">"unsigned"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="45" pos:column="71">"signed"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="45" pos:column="81">"long"</lit:literal></expr> }</block></expr></range></decl></init>) <block pos:line="45" pos:column="91">{
                <foreach pos:line="46" pos:column="17">foreach(<init><decl><type><name pos:line="46" pos:column="25">var</name></type> <name pos:line="46" pos:column="29">builtIn</name> <range pos:line="46" pos:column="37">in <expr><op:operator pos:line="46" pos:column="40">new</op:operator> <name><name pos:line="46" pos:column="44">string</name><index pos:line="46" pos:column="50">[]</index></name> <block pos:line="46" pos:column="53">{ <expr><lit:literal type="string" pos:line="46" pos:column="55">"int"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="46" pos:column="62">"double"</lit:literal></expr> }</block></expr></range></decl></init>) <block pos:line="46" pos:column="74">{
                    <decl_stmt><decl><type><name pos:line="47" pos:column="21">var</name></type> <name pos:line="47" pos:column="25">aXml</name> <init pos:line="47" pos:column="30">= <expr><name><name pos:line="47" pos:column="32">FileUnitSetup</name><index pos:line="47" pos:column="45">[<expr><name><name pos:line="47" pos:column="46">Language</name><op:operator pos:line="47" pos:column="54">.</op:operator><name pos:line="47" pos:column="55">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="47" pos:column="65">.</op:operator><call><name pos:line="47" pos:column="66">GetFileUnitForXmlSnippet</name><argument_list pos:line="47" pos:column="90">(<argument><expr><call><name><name pos:line="47" pos:column="91">String</name><op:operator pos:line="47" pos:column="97">.</op:operator><name pos:line="47" pos:column="98">Format</name></name><argument_list pos:line="47" pos:column="104">(<argument><expr><name pos:line="47" pos:column="105">xmlFormat</name></expr></argument>, <argument><expr><name pos:line="47" pos:column="116">builtInModifier</name></expr></argument>, <argument><expr><name pos:line="47" pos:column="133">builtIn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="47" pos:column="143">"a.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt><decl><type><name pos:line="49" pos:column="21">var</name></type> <name pos:line="49" pos:column="25">globalScope</name> <init pos:line="49" pos:column="37">= <expr><name><name pos:line="49" pos:column="39">CodeParser</name><index pos:line="49" pos:column="49">[<expr><name><name pos:line="49" pos:column="50">Language</name><op:operator pos:line="49" pos:column="58">.</op:operator><name pos:line="49" pos:column="59">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="49" pos:column="69">.</op:operator><call><name pos:line="49" pos:column="70">ParseFileUnit</name><argument_list pos:line="49" pos:column="83">(<argument><expr><name pos:line="49" pos:column="84">aXml</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="50" pos:column="21">var</name></type> <name pos:line="50" pos:column="25">variables</name> <init pos:line="50" pos:column="35">= <expr><linq><from pos:line="50" pos:column="37">from <expr><name pos:line="50" pos:column="42">stmt</name></expr> <in pos:line="50" pos:column="47">in <expr><call><name><name pos:line="50" pos:column="50">globalScope</name><op:operator pos:line="50" pos:column="61">.</op:operator><name pos:line="50" pos:column="62">GetDescendants</name></name><argument_list pos:line="50" pos:column="76">()</argument_list></call></expr></in></from>
                                    <from pos:line="51" pos:column="37">from <expr><name pos:line="51" pos:column="42">declaration</name></expr> <in pos:line="51" pos:column="54">in <expr><call><name><name pos:line="51" pos:column="57">stmt</name><op:operator pos:line="51" pos:column="61">.</op:operator><name pos:line="51" pos:column="62">GetExpressions</name></name><argument_list pos:line="51" pos:column="76">()</argument_list></call><op:operator pos:line="51" pos:column="78">.</op:operator><call><name><name pos:line="51" pos:column="79">OfType</name><argument_list pos:line="51" pos:column="85">&lt;<argument><name pos:line="51" pos:column="86">VariableDeclaration</name></argument>&gt;</argument_list></name><argument_list pos:line="51" pos:column="106">()</argument_list></call></expr></in></from>
                                    <select pos:line="52" pos:column="37">select <expr><name pos:line="52" pos:column="44">declaration</name></expr></select></linq></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="53" pos:column="21">var</name></type> <name pos:line="53" pos:column="25">variableA</name> <init pos:line="53" pos:column="35">= <expr><call><name><name pos:line="53" pos:column="37">variables</name><op:operator pos:line="53" pos:column="46">.</op:operator><name pos:line="53" pos:column="47">FirstOrDefault</name></name><argument_list pos:line="53" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="54" pos:column="21">var</name></type> <name pos:line="54" pos:column="25">variableB</name> <init pos:line="54" pos:column="35">= <expr><call><name><name pos:line="54" pos:column="37">variables</name><op:operator pos:line="54" pos:column="46">.</op:operator><name pos:line="54" pos:column="47">LastOrDefault</name></name><argument_list pos:line="54" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    
                    <expr_stmt><expr><call><name><name pos:line="56" pos:column="21">Assert</name><op:operator pos:line="56" pos:column="27">.</op:operator><name pos:line="56" pos:column="28">AreEqual</name></name><argument_list pos:line="56" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="56" pos:column="37">"a"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="42">variableA</name><op:operator pos:line="56" pos:column="51">.</op:operator><name pos:line="56" pos:column="52">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="57" pos:column="21">Assert</name><op:operator pos:line="57" pos:column="27">.</op:operator><name pos:line="57" pos:column="28">AreEqual</name></name><argument_list pos:line="57" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="57" pos:column="37">"b"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="57" pos:column="42">variableB</name><op:operator pos:line="57" pos:column="51">.</op:operator><name pos:line="57" pos:column="52">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="58" pos:column="21">Assert</name><op:operator pos:line="58" pos:column="27">.</op:operator><name pos:line="58" pos:column="28">AreEqual</name></name><argument_list pos:line="58" pos:column="36">(<argument><expr><call><name><name pos:line="58" pos:column="37">String</name><op:operator pos:line="58" pos:column="43">.</op:operator><name pos:line="58" pos:column="44">Format</name></name><argument_list pos:line="58" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="58" pos:column="51">"{0} {1}"</lit:literal></expr></argument>, <argument><expr><name pos:line="58" pos:column="62">builtInModifier</name></expr></argument>, <argument><expr><name pos:line="58" pos:column="79">builtIn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="58" pos:column="89">variableA</name><op:operator pos:line="58" pos:column="98">.</op:operator><name pos:line="58" pos:column="99">VariableType</name><op:operator pos:line="58" pos:column="111">.</op:operator><name pos:line="58" pos:column="112">Name</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="58" pos:column="118">"TODO: Fix compound types"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name pos:line="59" pos:column="21">var</name></type> <name pos:line="59" pos:column="25">typeOfA</name> <init pos:line="59" pos:column="33">= <expr><call><name><name pos:line="59" pos:column="35">variableA</name><op:operator pos:line="59" pos:column="44">.</op:operator><name pos:line="59" pos:column="45">VariableType</name><op:operator pos:line="59" pos:column="57">.</op:operator><name pos:line="59" pos:column="58">FindMatches</name></name><argument_list pos:line="59" pos:column="69">()</argument_list></call><op:operator pos:line="59" pos:column="71">.</op:operator><call><name pos:line="59" pos:column="72">First</name><argument_list pos:line="59" pos:column="77">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="60" pos:column="21">var</name></type> <name pos:line="60" pos:column="25">typeOfB</name> <init pos:line="60" pos:column="33">= <expr><call><name><name pos:line="60" pos:column="35">variableB</name><op:operator pos:line="60" pos:column="44">.</op:operator><name pos:line="60" pos:column="45">VariableType</name><op:operator pos:line="60" pos:column="57">.</op:operator><name pos:line="60" pos:column="58">FindMatches</name></name><argument_list pos:line="60" pos:column="69">()</argument_list></call><op:operator pos:line="60" pos:column="71">.</op:operator><call><name pos:line="60" pos:column="72">First</name><argument_list pos:line="60" pos:column="77">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="61" pos:column="21">Assert</name><op:operator pos:line="61" pos:column="27">.</op:operator><name pos:line="61" pos:column="28">AreSame</name></name><argument_list pos:line="61" pos:column="35">(<argument><expr><name pos:line="61" pos:column="36">typeOfA</name></expr></argument>, <argument><expr><name pos:line="61" pos:column="45">typeOfB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
            }</block></foreach>
        }</block></function>

        <function><type><attribute pos:line="66" pos:column="9">[<expr><name pos:line="66" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="67" pos:column="9">public</specifier> <name pos:line="67" pos:column="16">void</name></type> <name pos:line="67" pos:column="21">TestCppBuiltIns_WithSingleWord</name><parameter_list pos:line="67" pos:column="51">()</parameter_list> <block pos:line="67" pos:column="54">{
            <comment type="line" pos:line="68" pos:column="13">// #a.cpp TYPE a; TYPE b;</comment>

            <decl_stmt><decl><type><name pos:line="70" pos:column="13">string</name></type> <name pos:line="70" pos:column="20">xmlFormat</name> <init pos:line="70" pos:column="30">= <expr><lit:literal type="string" pos:line="70" pos:column="32">@"&lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;{0}&lt;/name&gt;&lt;/type&gt; &lt;name&gt;a&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
&lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;{0}&lt;/name&gt;&lt;/type&gt; &lt;name&gt;b&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <foreach pos:line="73" pos:column="13">foreach(<init><decl><type><name pos:line="73" pos:column="21">var</name></type> <name pos:line="73" pos:column="25">builtIn</name> <range pos:line="73" pos:column="33">in <expr><op:operator pos:line="73" pos:column="36">new</op:operator> <name><name pos:line="73" pos:column="40">string</name><index pos:line="73" pos:column="46">[]</index></name> <block pos:line="73" pos:column="49">{ <expr><lit:literal type="string" pos:line="73" pos:column="51">"char"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="73" pos:column="59">"short"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="73" pos:column="68">"int"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="73" pos:column="75">"long"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="73" pos:column="83">"bool"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="73" pos:column="91">"float"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="73" pos:column="100">"double"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="73" pos:column="110">"wchar_t"</lit:literal></expr> }</block></expr></range></decl></init>) <block pos:line="73" pos:column="123">{
                <decl_stmt><decl><type><name pos:line="74" pos:column="17">var</name></type> <name pos:line="74" pos:column="21">aXml</name> <init pos:line="74" pos:column="26">= <expr><name><name pos:line="74" pos:column="28">FileUnitSetup</name><index pos:line="74" pos:column="41">[<expr><name><name pos:line="74" pos:column="42">Language</name><op:operator pos:line="74" pos:column="50">.</op:operator><name pos:line="74" pos:column="51">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="74" pos:column="61">.</op:operator><call><name pos:line="74" pos:column="62">GetFileUnitForXmlSnippet</name><argument_list pos:line="74" pos:column="86">(<argument><expr><call><name><name pos:line="74" pos:column="87">String</name><op:operator pos:line="74" pos:column="93">.</op:operator><name pos:line="74" pos:column="94">Format</name></name><argument_list pos:line="74" pos:column="100">(<argument><expr><name pos:line="74" pos:column="101">xmlFormat</name></expr></argument>, <argument><expr><name pos:line="74" pos:column="112">builtIn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="74" pos:column="122">"a.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name pos:line="76" pos:column="17">var</name></type> <name pos:line="76" pos:column="21">globalScope</name> <init pos:line="76" pos:column="33">= <expr><name><name pos:line="76" pos:column="35">CodeParser</name><index pos:line="76" pos:column="45">[<expr><name><name pos:line="76" pos:column="46">Language</name><op:operator pos:line="76" pos:column="54">.</op:operator><name pos:line="76" pos:column="55">CPlusPlus</name></name></expr>]</index></name><op:operator pos:line="76" pos:column="65">.</op:operator><call><name pos:line="76" pos:column="66">ParseFileUnit</name><argument_list pos:line="76" pos:column="79">(<argument><expr><name pos:line="76" pos:column="80">aXml</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="77" pos:column="17">var</name></type> <name pos:line="77" pos:column="21">variables</name> <init pos:line="77" pos:column="31">= <expr><linq><from pos:line="77" pos:column="33">from <expr><name pos:line="77" pos:column="38">stmt</name></expr> <in pos:line="77" pos:column="43">in <expr><call><name><name pos:line="77" pos:column="46">globalScope</name><op:operator pos:line="77" pos:column="57">.</op:operator><name pos:line="77" pos:column="58">GetDescendants</name></name><argument_list pos:line="77" pos:column="72">()</argument_list></call></expr></in></from>
                                <from pos:line="78" pos:column="33">from <expr><name pos:line="78" pos:column="38">declaration</name></expr> <in pos:line="78" pos:column="50">in <expr><call><name><name pos:line="78" pos:column="53">stmt</name><op:operator pos:line="78" pos:column="57">.</op:operator><name pos:line="78" pos:column="58">GetExpressions</name></name><argument_list pos:line="78" pos:column="72">()</argument_list></call><op:operator pos:line="78" pos:column="74">.</op:operator><call><name><name pos:line="78" pos:column="75">OfType</name><argument_list pos:line="78" pos:column="81">&lt;<argument><name pos:line="78" pos:column="82">VariableDeclaration</name></argument>&gt;</argument_list></name><argument_list pos:line="78" pos:column="102">()</argument_list></call></expr></in></from>
                                <select pos:line="79" pos:column="33">select <expr><name pos:line="79" pos:column="40">declaration</name></expr></select></linq></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="80" pos:column="17">var</name></type> <name pos:line="80" pos:column="21">variableA</name> <init pos:line="80" pos:column="31">= <expr><call><name><name pos:line="80" pos:column="33">variables</name><op:operator pos:line="80" pos:column="42">.</op:operator><name pos:line="80" pos:column="43">FirstOrDefault</name></name><argument_list pos:line="80" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="81" pos:column="17">var</name></type> <name pos:line="81" pos:column="21">variableB</name> <init pos:line="81" pos:column="31">= <expr><call><name><name pos:line="81" pos:column="33">variables</name><op:operator pos:line="81" pos:column="42">.</op:operator><name pos:line="81" pos:column="43">LastOrDefault</name></name><argument_list pos:line="81" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name pos:line="83" pos:column="17">Assert</name><op:operator pos:line="83" pos:column="23">.</op:operator><name pos:line="83" pos:column="24">AreEqual</name></name><argument_list pos:line="83" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="83" pos:column="33">"a"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="83" pos:column="38">variableA</name><op:operator pos:line="83" pos:column="47">.</op:operator><name pos:line="83" pos:column="48">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="84" pos:column="17">Assert</name><op:operator pos:line="84" pos:column="23">.</op:operator><name pos:line="84" pos:column="24">AreEqual</name></name><argument_list pos:line="84" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="84" pos:column="33">"b"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="84" pos:column="38">variableB</name><op:operator pos:line="84" pos:column="47">.</op:operator><name pos:line="84" pos:column="48">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="85" pos:column="17">Assert</name><op:operator pos:line="85" pos:column="23">.</op:operator><name pos:line="85" pos:column="24">AreEqual</name></name><argument_list pos:line="85" pos:column="32">(<argument><expr><name pos:line="85" pos:column="33">builtIn</name></expr></argument>, <argument><expr><name><name pos:line="85" pos:column="42">variableA</name><op:operator pos:line="85" pos:column="51">.</op:operator><name pos:line="85" pos:column="52">VariableType</name><op:operator pos:line="85" pos:column="64">.</op:operator><name pos:line="85" pos:column="65">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="87" pos:column="17">var</name></type> <name pos:line="87" pos:column="21">typeOfA</name> <init pos:line="87" pos:column="29">= <expr><call><name><name pos:line="87" pos:column="31">variableA</name><op:operator pos:line="87" pos:column="40">.</op:operator><name pos:line="87" pos:column="41">VariableType</name><op:operator pos:line="87" pos:column="53">.</op:operator><name pos:line="87" pos:column="54">FindMatches</name></name><argument_list pos:line="87" pos:column="65">()</argument_list></call><op:operator pos:line="87" pos:column="67">.</op:operator><call><name pos:line="87" pos:column="68">First</name><argument_list pos:line="87" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="88" pos:column="17">var</name></type> <name pos:line="88" pos:column="21">typeOfB</name> <init pos:line="88" pos:column="29">= <expr><call><name><name pos:line="88" pos:column="31">variableB</name><op:operator pos:line="88" pos:column="40">.</op:operator><name pos:line="88" pos:column="41">VariableType</name><op:operator pos:line="88" pos:column="53">.</op:operator><name pos:line="88" pos:column="54">FindMatches</name></name><argument_list pos:line="88" pos:column="65">()</argument_list></call><op:operator pos:line="88" pos:column="67">.</op:operator><call><name pos:line="88" pos:column="68">First</name><argument_list pos:line="88" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="89" pos:column="17">Assert</name><op:operator pos:line="89" pos:column="23">.</op:operator><name pos:line="89" pos:column="24">AreSame</name></name><argument_list pos:line="89" pos:column="31">(<argument><expr><name pos:line="89" pos:column="32">typeOfA</name></expr></argument>, <argument><expr><name pos:line="89" pos:column="41">typeOfB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>

        <function><type><attribute pos:line="93" pos:column="9">[<expr><name pos:line="93" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="94" pos:column="9">public</specifier> <name pos:line="94" pos:column="16">void</name></type> <name pos:line="94" pos:column="21">TestJavaBuiltIns</name><parameter_list pos:line="94" pos:column="37">()</parameter_list> <block pos:line="94" pos:column="40">{
            <comment type="line" pos:line="95" pos:column="13">// #a.java TYPE a; TYPE b;</comment>
            <decl_stmt><decl><type><name pos:line="96" pos:column="13">string</name></type> <name pos:line="96" pos:column="20">xmlFormat</name> <init pos:line="96" pos:column="30">= <expr><lit:literal type="string" pos:line="96" pos:column="32">@"&lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;{0}&lt;/name&gt;&lt;/type&gt; &lt;name&gt;a&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
&lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name&gt;{0}&lt;/name&gt;&lt;/type&gt; &lt;name&gt;b&lt;/name&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;"</lit:literal></expr></init></decl>;</decl_stmt>

            <foreach pos:line="99" pos:column="13">foreach(<init><decl><type><name pos:line="99" pos:column="21">var</name></type> <name pos:line="99" pos:column="25">builtIn</name> <range pos:line="99" pos:column="33">in <expr><op:operator pos:line="99" pos:column="36">new</op:operator> <name><name pos:line="99" pos:column="40">string</name><index pos:line="99" pos:column="46">[]</index></name> <block pos:line="99" pos:column="49">{ <expr><lit:literal type="string" pos:line="99" pos:column="51">"byte"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="99" pos:column="59">"short"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="99" pos:column="68">"int"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="99" pos:column="75">"long"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="99" pos:column="83">"float"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="99" pos:column="92">"double"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="99" pos:column="102">"boolean"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="99" pos:column="113">"char"</lit:literal></expr> }</block></expr></range></decl></init>) <block pos:line="99" pos:column="123">{
                <decl_stmt><decl><type><name pos:line="100" pos:column="17">var</name></type> <name pos:line="100" pos:column="21">aXml</name> <init pos:line="100" pos:column="26">= <expr><name><name pos:line="100" pos:column="28">FileUnitSetup</name><index pos:line="100" pos:column="41">[<expr><name><name pos:line="100" pos:column="42">Language</name><op:operator pos:line="100" pos:column="50">.</op:operator><name pos:line="100" pos:column="51">Java</name></name></expr>]</index></name><op:operator pos:line="100" pos:column="56">.</op:operator><call><name pos:line="100" pos:column="57">GetFileUnitForXmlSnippet</name><argument_list pos:line="100" pos:column="81">(<argument><expr><call><name><name pos:line="100" pos:column="82">String</name><op:operator pos:line="100" pos:column="88">.</op:operator><name pos:line="100" pos:column="89">Format</name></name><argument_list pos:line="100" pos:column="95">(<argument><expr><name pos:line="100" pos:column="96">xmlFormat</name></expr></argument>, <argument><expr><name pos:line="100" pos:column="107">builtIn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="100" pos:column="117">"a.java"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name pos:line="102" pos:column="17">var</name></type> <name pos:line="102" pos:column="21">globalScope</name> <init pos:line="102" pos:column="33">= <expr><name><name pos:line="102" pos:column="35">CodeParser</name><index pos:line="102" pos:column="45">[<expr><name><name pos:line="102" pos:column="46">Language</name><op:operator pos:line="102" pos:column="54">.</op:operator><name pos:line="102" pos:column="55">Java</name></name></expr>]</index></name><op:operator pos:line="102" pos:column="60">.</op:operator><call><name pos:line="102" pos:column="61">ParseFileUnit</name><argument_list pos:line="102" pos:column="74">(<argument><expr><name pos:line="102" pos:column="75">aXml</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="103" pos:column="17">var</name></type> <name pos:line="103" pos:column="21">variables</name> <init pos:line="103" pos:column="31">= <expr><linq><from pos:line="103" pos:column="33">from <expr><name pos:line="103" pos:column="38">stmt</name></expr> <in pos:line="103" pos:column="43">in <expr><call><name><name pos:line="103" pos:column="46">globalScope</name><op:operator pos:line="103" pos:column="57">.</op:operator><name pos:line="103" pos:column="58">GetDescendants</name></name><argument_list pos:line="103" pos:column="72">()</argument_list></call></expr></in></from>
                                <from pos:line="104" pos:column="33">from <expr><name pos:line="104" pos:column="38">declaration</name></expr> <in pos:line="104" pos:column="50">in <expr><call><name><name pos:line="104" pos:column="53">stmt</name><op:operator pos:line="104" pos:column="57">.</op:operator><name pos:line="104" pos:column="58">GetExpressions</name></name><argument_list pos:line="104" pos:column="72">()</argument_list></call><op:operator pos:line="104" pos:column="74">.</op:operator><call><name><name pos:line="104" pos:column="75">OfType</name><argument_list pos:line="104" pos:column="81">&lt;<argument><name pos:line="104" pos:column="82">VariableDeclaration</name></argument>&gt;</argument_list></name><argument_list pos:line="104" pos:column="102">()</argument_list></call></expr></in></from>
                                <select pos:line="105" pos:column="33">select <expr><name pos:line="105" pos:column="40">declaration</name></expr></select></linq></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="106" pos:column="17">var</name></type> <name pos:line="106" pos:column="21">variableA</name> <init pos:line="106" pos:column="31">= <expr><call><name><name pos:line="106" pos:column="33">variables</name><op:operator pos:line="106" pos:column="42">.</op:operator><name pos:line="106" pos:column="43">FirstOrDefault</name></name><argument_list pos:line="106" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="107" pos:column="17">var</name></type> <name pos:line="107" pos:column="21">variableB</name> <init pos:line="107" pos:column="31">= <expr><call><name><name pos:line="107" pos:column="33">variables</name><op:operator pos:line="107" pos:column="42">.</op:operator><name pos:line="107" pos:column="43">LastOrDefault</name></name><argument_list pos:line="107" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>

                
                <expr_stmt><expr><call><name><name pos:line="110" pos:column="17">Assert</name><op:operator pos:line="110" pos:column="23">.</op:operator><name pos:line="110" pos:column="24">AreEqual</name></name><argument_list pos:line="110" pos:column="32">(<argument><expr><name pos:line="110" pos:column="33">builtIn</name></expr></argument>, <argument><expr><name><name pos:line="110" pos:column="42">variableA</name><op:operator pos:line="110" pos:column="51">.</op:operator><name pos:line="110" pos:column="52">VariableType</name><op:operator pos:line="110" pos:column="64">.</op:operator><name pos:line="110" pos:column="65">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="112" pos:column="17">var</name></type> <name pos:line="112" pos:column="21">typeOfA</name> <init pos:line="112" pos:column="29">= <expr><call><name><name pos:line="112" pos:column="31">variableA</name><op:operator pos:line="112" pos:column="40">.</op:operator><name pos:line="112" pos:column="41">VariableType</name><op:operator pos:line="112" pos:column="53">.</op:operator><name pos:line="112" pos:column="54">FindMatches</name></name><argument_list pos:line="112" pos:column="65">()</argument_list></call><op:operator pos:line="112" pos:column="67">.</op:operator><call><name pos:line="112" pos:column="68">First</name><argument_list pos:line="112" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="113" pos:column="17">var</name></type> <name pos:line="113" pos:column="21">typeOfB</name> <init pos:line="113" pos:column="29">= <expr><call><name><name pos:line="113" pos:column="31">variableB</name><op:operator pos:line="113" pos:column="40">.</op:operator><name pos:line="113" pos:column="41">VariableType</name><op:operator pos:line="113" pos:column="53">.</op:operator><name pos:line="113" pos:column="54">FindMatches</name></name><argument_list pos:line="113" pos:column="65">()</argument_list></call><op:operator pos:line="113" pos:column="67">.</op:operator><call><name pos:line="113" pos:column="68">First</name><argument_list pos:line="113" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="114" pos:column="17">Assert</name><op:operator pos:line="114" pos:column="23">.</op:operator><name pos:line="114" pos:column="24">AreSame</name></name><argument_list pos:line="114" pos:column="31">(<argument><expr><name pos:line="114" pos:column="32">typeOfA</name></expr></argument>, <argument><expr><name pos:line="114" pos:column="41">typeOfB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
