<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML\TransformObjectHarness.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2010 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">System</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Collections</name><op:operator pos:line="13" pos:column="25">.</op:operator><name pos:line="13" pos:column="26">Generic</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Linq</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Text</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Reflection</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Xml</name><op:operator pos:line="17" pos:column="17">.</op:operator><name pos:line="17" pos:column="18">Linq</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Globalization</name></name>;</using>

<namespace pos:line="20" pos:column="1">namespace <name><name pos:line="20" pos:column="11">ABB</name><op:operator pos:line="20" pos:column="14">.</op:operator><name pos:line="20" pos:column="15">SrcML</name></name>
<block pos:line="21" pos:column="1">{
    <comment type="line" pos:line="22" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="23" pos:column="5">/// TransformObjectHarness is a test harness for testing objects that implement the &lt;see cref="ITransform"/&gt; interface.</comment>
    <comment type="line" pos:line="24" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="25" pos:column="5">public</specifier> class <name pos:line="25" pos:column="18">TransformObjectHarness</name> <super pos:line="25" pos:column="41">: <name pos:line="25" pos:column="43">ITransform</name></super>
    <block pos:line="26" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="27" pos:column="9">private</specifier> <name pos:line="27" pos:column="17">Type</name></type> <name pos:line="27" pos:column="22">_type</name></decl>;</decl_stmt>

        <comment type="line" pos:line="29" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="30" pos:column="9">/// Instantiates a new QueryFunctionTestObject for &lt;paramref name="type"/&gt;.</comment>
        <comment type="line" pos:line="31" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="32" pos:column="9">/// &lt;param name="type"&gt;The type to create a Test object for.&lt;/param&gt;</comment>
        <constructor><specifier pos:line="33" pos:column="9">public</specifier> <name pos:line="33" pos:column="16">TransformObjectHarness</name><parameter_list pos:line="33" pos:column="38">(<param><decl><type><name pos:line="33" pos:column="39">Type</name></type> <name pos:line="33" pos:column="44">type</name></decl></param>)</parameter_list>
        <block pos:line="34" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="35" pos:column="13">CheckTypeIsValid</name><argument_list pos:line="35" pos:column="29">(<argument><expr><name pos:line="35" pos:column="30">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="36" pos:column="13">this</name><op:operator pos:line="36" pos:column="17">.</op:operator><name pos:line="36" pos:column="18">_type</name></name> <op:operator pos:line="36" pos:column="24">=</op:operator> <name pos:line="36" pos:column="26">type</name></expr>;</expr_stmt>
        }</block></constructor>

        <constructor><specifier pos:line="39" pos:column="9">private</specifier> <name pos:line="39" pos:column="17">TransformObjectHarness</name><parameter_list pos:line="39" pos:column="39">()</parameter_list>
        <block pos:line="40" pos:column="9">{

        }</block></constructor>

        <function><type><specifier pos:line="44" pos:column="9">private</specifier> <specifier pos:line="44" pos:column="17">static</specifier> <name pos:line="44" pos:column="24">void</name></type> <name pos:line="44" pos:column="29">CheckTypeIsValid</name><parameter_list pos:line="44" pos:column="45">(<param><decl><type><name pos:line="44" pos:column="46">Type</name></type> <name pos:line="44" pos:column="51">type</name></decl></param>)</parameter_list>
        <block pos:line="45" pos:column="9">{
            
            <if pos:line="47" pos:column="13">if <condition pos:line="47" pos:column="16">(<expr><name pos:line="47" pos:column="17">null</name> <op:operator pos:line="47" pos:column="22">==</op:operator> <name pos:line="47" pos:column="25">type</name></expr>)</condition><then pos:line="47" pos:column="30">
                <throw pos:line="48" pos:column="17">throw <expr><op:operator pos:line="48" pos:column="23">new</op:operator> <call><name pos:line="48" pos:column="27">ArgumentNullException</name><argument_list pos:line="48" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="48" pos:column="49">"type"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="48" pos:column="57">"Cannot pass null to TransformObjectHarness"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="49" pos:column="13">if <condition pos:line="49" pos:column="16">(<expr><name pos:line="49" pos:column="17">null</name> <op:operator pos:line="49" pos:column="22">==</op:operator> <call><name><name pos:line="49" pos:column="25">type</name><op:operator pos:line="49" pos:column="29">.</op:operator><name pos:line="49" pos:column="30">GetInterface</name></name><argument_list pos:line="49" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="49" pos:column="43">"ABB.SrcML.ITransform"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="49" pos:column="67">
                <throw pos:line="50" pos:column="17">throw <expr><op:operator pos:line="50" pos:column="23">new</op:operator> <call><name pos:line="50" pos:column="27">ArgumentException</name><argument_list pos:line="50" pos:column="44">(<argument><expr><call><name><name pos:line="50" pos:column="45">String</name><op:operator pos:line="50" pos:column="51">.</op:operator><name pos:line="50" pos:column="52">Format</name></name><argument_list pos:line="50" pos:column="58">(<argument><expr><name><name pos:line="50" pos:column="59">CultureInfo</name><op:operator pos:line="50" pos:column="70">.</op:operator><name pos:line="50" pos:column="71">CurrentCulture</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="50" pos:column="87">"{0} must implement ABB.SrcML.ITransform"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="50" pos:column="130">type</name><op:operator pos:line="50" pos:column="134">.</op:operator><name pos:line="50" pos:column="135">FullName</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="50" pos:column="146">"type"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            
            <decl_stmt><decl><type><name pos:line="52" pos:column="13">var</name></type> <name pos:line="52" pos:column="17">defaultConstructors</name> <init pos:line="52" pos:column="37">= <expr><linq><from pos:line="52" pos:column="39">from <expr><name pos:line="52" pos:column="44">constructor</name></expr> <in pos:line="52" pos:column="56">in <expr><call><name><name pos:line="52" pos:column="59">type</name><op:operator pos:line="52" pos:column="63">.</op:operator><name pos:line="52" pos:column="64">GetConstructors</name></name><argument_list pos:line="52" pos:column="79">()</argument_list></call></expr></in></from>
                                      <where pos:line="53" pos:column="39">where <expr><name><name pos:line="53" pos:column="45">constructor</name><op:operator pos:line="53" pos:column="56">.</op:operator><name pos:line="53" pos:column="57">IsPublic</name></name></expr></where>
                                      <where pos:line="54" pos:column="39">where <expr><lit:literal type="number" pos:line="54" pos:column="45">0</lit:literal> <op:operator pos:line="54" pos:column="47">==</op:operator> <call><name><name pos:line="54" pos:column="50">constructor</name><op:operator pos:line="54" pos:column="61">.</op:operator><name pos:line="54" pos:column="62">GetParameters</name></name><argument_list pos:line="54" pos:column="75">()</argument_list></call><op:operator pos:line="54" pos:column="77">.</op:operator><name pos:line="54" pos:column="78">Length</name></expr></where>
                                      <select pos:line="55" pos:column="39">select <expr><name pos:line="55" pos:column="46">constructor</name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <if pos:line="56" pos:column="13">if <condition pos:line="56" pos:column="16">(<expr><lit:literal type="number" pos:line="56" pos:column="17">1</lit:literal> <op:operator pos:line="56" pos:column="19">!=</op:operator> <call><name><name pos:line="56" pos:column="22">defaultConstructors</name><op:operator pos:line="56" pos:column="41">.</op:operator><name pos:line="56" pos:column="42">Count</name></name><argument_list pos:line="56" pos:column="47">()</argument_list></call></expr>)</condition><then pos:line="56" pos:column="50">
                <throw pos:line="57" pos:column="17">throw <expr><op:operator pos:line="57" pos:column="23">new</op:operator> <call><name pos:line="57" pos:column="27">ArgumentException</name><argument_list pos:line="57" pos:column="44">(<argument><expr><call><name><name pos:line="57" pos:column="45">String</name><op:operator pos:line="57" pos:column="51">.</op:operator><name pos:line="57" pos:column="52">Format</name></name><argument_list pos:line="57" pos:column="58">(<argument><expr><name><name pos:line="57" pos:column="59">CultureInfo</name><op:operator pos:line="57" pos:column="70">.</op:operator><name pos:line="57" pos:column="71">CurrentCulture</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="57" pos:column="87">"{0} must have a public default constructor"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="57" pos:column="133">type</name><op:operator pos:line="57" pos:column="137">.</op:operator><name pos:line="57" pos:column="138">FullName</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="57" pos:column="149">"type"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
        }</block></function>
        <comment type="line" pos:line="59" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="60" pos:column="9">/// Returns the type being tested.</comment>
        <comment type="line" pos:line="61" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="62" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="63" pos:column="9">public</specifier> <specifier pos:line="63" pos:column="16">override</specifier> <name pos:line="63" pos:column="25">string</name></type> <name pos:line="63" pos:column="32">ToString</name><parameter_list pos:line="63" pos:column="40">()</parameter_list>
        <block pos:line="64" pos:column="9">{
            <return pos:line="65" pos:column="13">return <expr><call><name><name pos:line="65" pos:column="20">String</name><op:operator pos:line="65" pos:column="26">.</op:operator><name pos:line="65" pos:column="27">Format</name></name><argument_list pos:line="65" pos:column="33">(<argument><expr><name><name pos:line="65" pos:column="34">CultureInfo</name><op:operator pos:line="65" pos:column="45">.</op:operator><name pos:line="65" pos:column="46">InvariantCulture</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="65" pos:column="64">"&lt;TransformObjectHarness {0}&gt;"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="65" pos:column="96">_type</name><op:operator pos:line="65" pos:column="101">.</op:operator><name pos:line="65" pos:column="102">FullName</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
        <cpp:region pos:line="67" pos:column="9">#<cpp:directive pos:line="67" pos:column="10">region</cpp:directive> ITransform Members</cpp:region>

        <comment type="line" pos:line="69" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="70" pos:column="9">/// Instantiates the object under test and then executes its query function.</comment>
        <comment type="line" pos:line="71" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="72" pos:column="9">/// &lt;param name="element"&gt;The XElement to query&lt;/param&gt;</comment>
        <comment type="line" pos:line="73" pos:column="9">/// &lt;returns&gt;an IEnumerable of the results&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="74" pos:column="9">public</specifier> <name><name pos:line="74" pos:column="16">IEnumerable</name><argument_list pos:line="74" pos:column="27">&lt;<argument><name pos:line="74" pos:column="28">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="74" pos:column="38">Query</name><parameter_list pos:line="74" pos:column="43">(<param><decl><type><name pos:line="74" pos:column="44">XElement</name></type> <name pos:line="74" pos:column="53">element</name></decl></param>)</parameter_list>
        <block pos:line="75" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="76" pos:column="13">ITransform</name></type> <name pos:line="76" pos:column="24">transform</name> <init pos:line="76" pos:column="34">= <expr><call><name><name pos:line="76" pos:column="36">Activator</name><op:operator pos:line="76" pos:column="45">.</op:operator><name pos:line="76" pos:column="46">CreateInstance</name></name><argument_list pos:line="76" pos:column="60">(<argument><expr><name><name pos:line="76" pos:column="61">this</name><op:operator pos:line="76" pos:column="65">.</op:operator><name pos:line="76" pos:column="66">_type</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="76" pos:column="73">as</op:operator> <name pos:line="76" pos:column="76">ITransform</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="77" pos:column="13">var</name></type> <name pos:line="77" pos:column="17">results</name> <init pos:line="77" pos:column="25">= <expr><call><name><name pos:line="77" pos:column="27">transform</name><op:operator pos:line="77" pos:column="36">.</op:operator><name pos:line="77" pos:column="37">Query</name></name><argument_list pos:line="77" pos:column="42">(<argument><expr><name pos:line="77" pos:column="43">element</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="78" pos:column="13">return <expr><name pos:line="78" pos:column="20">results</name> <op:operator pos:line="78" pos:column="28">as</op:operator> <name><name pos:line="78" pos:column="31">IEnumerable</name><argument_list pos:line="78" pos:column="42">&lt;<argument><name pos:line="78" pos:column="43">XElement</name></argument>&gt;</argument_list></name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="81" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="82" pos:column="9">/// Instantiates the object under test and then executes its transform function.</comment>
        <comment type="line" pos:line="83" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="84" pos:column="9">/// &lt;param name="element"&gt;The XElement to transform&lt;/param&gt;</comment>
        <comment type="line" pos:line="85" pos:column="9">/// &lt;returns&gt;The transformed version of &lt;paramref name="element"/&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="86" pos:column="9">public</specifier> <name pos:line="86" pos:column="16">XElement</name></type> <name pos:line="86" pos:column="25">Transform</name><parameter_list pos:line="86" pos:column="34">(<param><decl><type><name pos:line="86" pos:column="35">XElement</name></type> <name pos:line="86" pos:column="44">element</name></decl></param>)</parameter_list>
        <block pos:line="87" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="88" pos:column="13">ITransform</name></type> <name pos:line="88" pos:column="24">transform</name> <init pos:line="88" pos:column="34">= <expr><call><name><name pos:line="88" pos:column="36">Activator</name><op:operator pos:line="88" pos:column="45">.</op:operator><name pos:line="88" pos:column="46">CreateInstance</name></name><argument_list pos:line="88" pos:column="60">(<argument><expr><name><name pos:line="88" pos:column="61">this</name><op:operator pos:line="88" pos:column="65">.</op:operator><name pos:line="88" pos:column="66">_type</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="88" pos:column="73">as</op:operator> <name pos:line="88" pos:column="76">ITransform</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="89" pos:column="13">XElement</name></type> <name pos:line="89" pos:column="22">transformedElement</name> <init pos:line="89" pos:column="41">= <expr><call><name><name pos:line="89" pos:column="43">transform</name><op:operator pos:line="89" pos:column="52">.</op:operator><name pos:line="89" pos:column="53">Transform</name></name><argument_list pos:line="89" pos:column="62">(<argument><expr><name pos:line="89" pos:column="63">element</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="90" pos:column="13">return <expr><name pos:line="90" pos:column="20">transformedElement</name></expr>;</return>
        }</block></function>

        <cpp:endregion pos:line="93" pos:column="9">#<cpp:directive pos:line="93" pos:column="10">endregion</cpp:directive></cpp:endregion>
    }</block></class>
}</block></namespace>
</unit>
