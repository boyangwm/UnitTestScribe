<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Test\ExternalTests.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2010 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">System</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Text</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Collections</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">Generic</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">IO</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Linq</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">NUnit</name><op:operator pos:line="17" pos:column="12">.</op:operator><name pos:line="17" pos:column="13">Framework</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Xml</name><op:operator pos:line="18" pos:column="17">.</op:operator><name pos:line="18" pos:column="18">Linq</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">ABB</name><op:operator pos:line="19" pos:column="10">.</op:operator><name pos:line="19" pos:column="11">SrcML</name></name>;</using>
<namespace pos:line="20" pos:column="1">namespace <name><name pos:line="20" pos:column="11">ABB</name><op:operator pos:line="20" pos:column="14">.</op:operator><name pos:line="20" pos:column="15">SrcML</name><op:operator pos:line="20" pos:column="20">.</op:operator><name pos:line="20" pos:column="21">Test</name></name>
<block pos:line="21" pos:column="1">{
    <class><attribute pos:line="22" pos:column="5">[<expr><name pos:line="22" pos:column="6">TestFixture</name></expr>]</attribute>
    <attribute pos:line="23" pos:column="5">[<expr><call><name pos:line="23" pos:column="6">Category</name><argument_list pos:line="23" pos:column="14">(<argument><expr><lit:literal type="string" pos:line="23" pos:column="15">"Build"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="24" pos:column="5">public</specifier> class <name pos:line="24" pos:column="18">ExternalTests</name>
    <block pos:line="25" pos:column="5">{
        <function><type><attribute pos:line="26" pos:column="9">[<expr><name pos:line="26" pos:column="10">TestFixtureSetUp</name></expr>]</attribute>
        <specifier pos:line="27" pos:column="9">public</specifier> <specifier pos:line="27" pos:column="16">static</specifier> <name pos:line="27" pos:column="23">void</name></type> <name pos:line="27" pos:column="28">ExternalTestInitialize</name><parameter_list pos:line="27" pos:column="50">()</parameter_list>
        <block pos:line="28" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="29" pos:column="13">Directory</name><op:operator pos:line="29" pos:column="22">.</op:operator><name pos:line="29" pos:column="23">CreateDirectory</name></name><argument_list pos:line="29" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="29" pos:column="39">"external"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="30" pos:column="13">Directory</name><op:operator pos:line="30" pos:column="22">.</op:operator><name pos:line="30" pos:column="23">CreateDirectory</name></name><argument_list pos:line="30" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="30" pos:column="39">"external_xml"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="32" pos:column="13">File</name><op:operator pos:line="32" pos:column="17">.</op:operator><name pos:line="32" pos:column="18">WriteAllBytes</name></name><argument_list pos:line="32" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="32" pos:column="32">"external\\fileWithBom.cpp"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="32" pos:column="61">new</op:operator> <name><name pos:line="32" pos:column="65">byte</name><index pos:line="32" pos:column="69">[<expr><lit:literal type="number" pos:line="32" pos:column="70">3</lit:literal></expr>]</index></name> <block pos:line="32" pos:column="73">{ <expr><lit:literal type="number" pos:line="32" pos:column="75">0xEF</lit:literal></expr><op:operator pos:line="32" pos:column="79">,</op:operator> <expr><lit:literal type="number" pos:line="32" pos:column="81">0xBB</lit:literal></expr><op:operator pos:line="32" pos:column="85">,</op:operator> <expr><lit:literal type="number" pos:line="32" pos:column="87">0xBF</lit:literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="34" pos:column="13">File</name><op:operator pos:line="34" pos:column="17">.</op:operator><name pos:line="34" pos:column="18">WriteAllText</name></name><argument_list pos:line="34" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="34" pos:column="31">"external\\ClassWithConstructor.java"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="34" pos:column="70">String</name><op:operator pos:line="34" pos:column="76">.</op:operator><name pos:line="34" pos:column="77">Format</name></name><argument_list pos:line="34" pos:column="83">(<argument><expr><lit:literal type="string" pos:line="34" pos:column="84">@"package external;{0}{0}class ClassWithConstructor{0}{{{0}	private int hidden = 0;{0}{0}	public Test(int value){0}	{{{0}		hidden = value;{0}	}}{0}{0}	public int foo (char a){0}	{{{0}		return (int) a;{0}	}}{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="347">Environment</name><op:operator pos:line="34" pos:column="358">.</op:operator><name pos:line="34" pos:column="359">NewLine</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="36" pos:column="13">File</name><op:operator pos:line="36" pos:column="17">.</op:operator><name pos:line="36" pos:column="18">WriteAllText</name></name><argument_list pos:line="36" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="36" pos:column="31">@"external\cpp_parsing_error.c"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="36" pos:column="64">String</name><op:operator pos:line="36" pos:column="70">.</op:operator><name pos:line="36" pos:column="71">Format</name></name><argument_list pos:line="36" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="36" pos:column="78">@"int testcase(int x){0}{{{0}	if(x &lt; 0){0}		printf(""x&lt; 0\n"");{0}#if 1{0}	else{0}		printf(""&gt;= 0\n"");{0}#else{0}	else{0}		printf(""no really, &gt;= 0\n"");{0}#endif{0}	return x;{0}}}{0}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="309">Environment</name><op:operator pos:line="36" pos:column="320">.</op:operator><name pos:line="36" pos:column="321">NewLine</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="38" pos:column="13">File</name><op:operator pos:line="38" pos:column="17">.</op:operator><name pos:line="38" pos:column="18">WriteAllText</name></name><argument_list pos:line="38" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="38" pos:column="31">"external\\MacroWithoutSemicolon.cpp"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="38" pos:column="70">String</name><op:operator pos:line="38" pos:column="76">.</op:operator><name pos:line="38" pos:column="77">Format</name></name><argument_list pos:line="38" pos:column="83">(<argument><expr><lit:literal type="string" pos:line="38" pos:column="84">@"if (exists) {{{0}	Py_BEGIN_ALLOW_THREADS{0}	fp = fopen(filename, ""r"" PY_STDIOTEXTMODE);{0}	Py_END_ALLOW_THREADS{0}{0}	if (fp == NULL) {{{0}		exists = 0;{0}	}}{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="283">Environment</name><op:operator pos:line="38" pos:column="294">.</op:operator><name pos:line="38" pos:column="295">NewLine</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="40" pos:column="13">File</name><op:operator pos:line="40" pos:column="17">.</op:operator><name pos:line="40" pos:column="18">WriteAllText</name></name><argument_list pos:line="40" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="40" pos:column="31">"external\\DestructorWithIfStatement.cpp"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="40" pos:column="74">String</name><op:operator pos:line="40" pos:column="80">.</op:operator><name pos:line="40" pos:column="81">Format</name></name><argument_list pos:line="40" pos:column="87">(<argument><expr><lit:literal type="string" pos:line="40" pos:column="88">@"~Test(){0}{{{0}	if(0){0}	{{{0}	}}{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="147">Environment</name><op:operator pos:line="40" pos:column="158">.</op:operator><name pos:line="40" pos:column="159">NewLine</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="42" pos:column="13">File</name><op:operator pos:line="42" pos:column="17">.</op:operator><name pos:line="42" pos:column="18">WriteAllText</name></name><argument_list pos:line="42" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="42" pos:column="31">"external\\MethodWithFunctionPointerParameters.cpp"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="42" pos:column="84">String</name><op:operator pos:line="42" pos:column="90">.</op:operator><name pos:line="42" pos:column="91">Format</name></name><argument_list pos:line="42" pos:column="97">(<argument><expr><lit:literal type="string" pos:line="42" pos:column="98">@"void foo(int (*a)(char i), char b){0}{{{0}}}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="147">Environment</name><op:operator pos:line="42" pos:column="158">.</op:operator><name pos:line="42" pos:column="159">NewLine</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="44" pos:column="13">File</name><op:operator pos:line="44" pos:column="17">.</op:operator><name pos:line="44" pos:column="18">WriteAllText</name></name><argument_list pos:line="44" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="44" pos:column="31">"external\\TestCSharpExpressionWithDefaultKeyword.cs"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="44" pos:column="86">"class B { int X; void foo() { X = default(int); } void bar() { } }"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="46" pos:column="13">File</name><op:operator pos:line="46" pos:column="17">.</op:operator><name pos:line="46" pos:column="18">WriteAllText</name></name><argument_list pos:line="46" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="46" pos:column="31">"external\\TestCppTypeModifiers.cpp"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="46" pos:column="69">String</name><op:operator pos:line="46" pos:column="75">.</op:operator><name pos:line="46" pos:column="76">Format</name></name><argument_list pos:line="46" pos:column="82">(<argument><expr><lit:literal type="string" pos:line="46" pos:column="83">"const int X = 5;{0}static int Y = 5;"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="123">Environment</name><op:operator pos:line="46" pos:column="134">.</op:operator><name pos:line="46" pos:column="135">NewLine</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="48" pos:column="13">File</name><op:operator pos:line="48" pos:column="17">.</op:operator><name pos:line="48" pos:column="18">WriteAllText</name></name><argument_list pos:line="48" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="48" pos:column="31">"external\\TestCSharpExpressionWithSet.cs"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="48" pos:column="75">"class A { object set; void foo() { set = null; } }"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="49" pos:column="13">File</name><op:operator pos:line="49" pos:column="17">.</op:operator><name pos:line="49" pos:column="18">WriteAllText</name></name><argument_list pos:line="49" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="49" pos:column="31">"external\\TestCSharpExpressionWithGet.cs"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="49" pos:column="75">"class A { object get; void foo() { get = null; } }"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="50" pos:column="13">File</name><op:operator pos:line="50" pos:column="17">.</op:operator><name pos:line="50" pos:column="18">WriteAllText</name></name><argument_list pos:line="50" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="50" pos:column="31">"external\\TestCSharpExpressionWithAdd.cs"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="50" pos:column="75">"class A { object add; void foo() { add = null; } }"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="51" pos:column="13">File</name><op:operator pos:line="51" pos:column="17">.</op:operator><name pos:line="51" pos:column="18">WriteAllText</name></name><argument_list pos:line="51" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="51" pos:column="31">"external\\TestCSharpExpressionWithRemove.cs"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="51" pos:column="78">"class A { object remove; void foo() { remove = null; } }"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="52" pos:column="13">File</name><op:operator pos:line="52" pos:column="17">.</op:operator><name pos:line="52" pos:column="18">WriteAllText</name></name><argument_list pos:line="52" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="52" pos:column="31">"external\\TestCSharpUsingStatement.cs"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="52" pos:column="72">@"using (Font font1 = new Font(""Arial"", 10)) { }"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="55" pos:column="9">[<expr><name pos:line="55" pos:column="10">TestFixtureTearDown</name></expr>]</attribute>
        <specifier pos:line="56" pos:column="9">public</specifier> <specifier pos:line="56" pos:column="16">static</specifier> <name pos:line="56" pos:column="23">void</name></type> <name pos:line="56" pos:column="28">SRCTestCleanup</name><parameter_list pos:line="56" pos:column="42">()</parameter_list>
        <block pos:line="57" pos:column="9">{
            <foreach pos:line="58" pos:column="13">foreach (<init><decl><type><name pos:line="58" pos:column="22">var</name></type> <name pos:line="58" pos:column="26">file</name> <range pos:line="58" pos:column="31">in <expr><call><name><name pos:line="58" pos:column="34">Directory</name><op:operator pos:line="58" pos:column="43">.</op:operator><name pos:line="58" pos:column="44">GetFiles</name></name><argument_list pos:line="58" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="58" pos:column="53">"external"</lit:literal></expr></argument>)</argument_list></call></expr></range></decl></init>)
            <block pos:line="59" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="60" pos:column="17">File</name><op:operator pos:line="60" pos:column="21">.</op:operator><name pos:line="60" pos:column="22">Delete</name></name><argument_list pos:line="60" pos:column="28">(<argument><expr><name pos:line="60" pos:column="29">file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
            <foreach pos:line="62" pos:column="13">foreach (<init><decl><type><name pos:line="62" pos:column="22">var</name></type> <name pos:line="62" pos:column="26">file</name> <range pos:line="62" pos:column="31">in <expr><call><name><name pos:line="62" pos:column="34">Directory</name><op:operator pos:line="62" pos:column="43">.</op:operator><name pos:line="62" pos:column="44">GetFiles</name></name><argument_list pos:line="62" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="62" pos:column="53">"external_xml"</lit:literal></expr></argument>)</argument_list></call></expr></range></decl></init>)
            <block pos:line="63" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="64" pos:column="17">File</name><op:operator pos:line="64" pos:column="21">.</op:operator><name pos:line="64" pos:column="22">Delete</name></name><argument_list pos:line="64" pos:column="28">(<argument><expr><name pos:line="64" pos:column="29">file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
            <expr_stmt><expr><call><name><name pos:line="66" pos:column="13">Directory</name><op:operator pos:line="66" pos:column="22">.</op:operator><name pos:line="66" pos:column="23">Delete</name></name><argument_list pos:line="66" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="66" pos:column="30">"external"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="67" pos:column="13">Directory</name><op:operator pos:line="67" pos:column="22">.</op:operator><name pos:line="67" pos:column="23">Delete</name></name><argument_list pos:line="67" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="67" pos:column="30">"external_xml"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="70" pos:column="9">[<expr><name pos:line="70" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="71" pos:column="9">public</specifier> <name pos:line="71" pos:column="16">void</name></type> <name pos:line="71" pos:column="21">FileWithBom</name><parameter_list pos:line="71" pos:column="32">()</parameter_list>
        <block pos:line="72" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="73" pos:column="13">var</name></type> <name pos:line="73" pos:column="17">srcmlObject</name> <init pos:line="73" pos:column="29">= <expr><op:operator pos:line="73" pos:column="31">new</op:operator> <call><name><name pos:line="73" pos:column="35">ABB</name><op:operator pos:line="73" pos:column="38">.</op:operator><name pos:line="73" pos:column="39">SrcML</name><op:operator pos:line="73" pos:column="44">.</op:operator><name pos:line="73" pos:column="45">SrcML</name></name><argument_list pos:line="73" pos:column="50">(<argument><expr><call><name><name pos:line="73" pos:column="51">Path</name><op:operator pos:line="73" pos:column="55">.</op:operator><name pos:line="73" pos:column="56">Combine</name></name><argument_list pos:line="73" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="73" pos:column="64">"."</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="73" pos:column="69">"SrcML"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="75" pos:column="13">var</name></type> <name pos:line="75" pos:column="17">doc</name> <init pos:line="75" pos:column="21">= <expr><call><name><name pos:line="75" pos:column="23">srcmlObject</name><op:operator pos:line="75" pos:column="34">.</op:operator><name pos:line="75" pos:column="35">GenerateSrcMLFromFile</name></name><argument_list pos:line="75" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="75" pos:column="57">"external\\fileWithBom.cpp"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="75" pos:column="86">"external_xml\\fileWithBom.xml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        }</block></function>

        <function><type><attribute pos:line="78" pos:column="9">[<expr><name pos:line="78" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="79" pos:column="9">public</specifier> <name pos:line="79" pos:column="16">void</name></type> <name pos:line="79" pos:column="21">JavaClassWithConstructor</name><parameter_list pos:line="79" pos:column="45">()</parameter_list>
        <block pos:line="80" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="81" pos:column="13">var</name></type> <name pos:line="81" pos:column="17">srcmlObject</name> <init pos:line="81" pos:column="29">= <expr><op:operator pos:line="81" pos:column="31">new</op:operator> <call><name pos:line="81" pos:column="35">Src2SrcMLRunner</name><argument_list pos:line="81" pos:column="50">(<argument><expr><call><name><name pos:line="81" pos:column="51">Path</name><op:operator pos:line="81" pos:column="55">.</op:operator><name pos:line="81" pos:column="56">Combine</name></name><argument_list pos:line="81" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="81" pos:column="64">"."</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="81" pos:column="69">"SrcML"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="83" pos:column="13">var</name></type> <name pos:line="83" pos:column="17">doc</name> <init pos:line="83" pos:column="21">= <expr><call><name><name pos:line="83" pos:column="23">srcmlObject</name><op:operator pos:line="83" pos:column="34">.</op:operator><name pos:line="83" pos:column="35">GenerateSrcMLFromFile</name></name><argument_list pos:line="83" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="83" pos:column="57">"external\\ClassWithConstructor.java"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="83" pos:column="96">"external_xml\\ClassWithConstructor.java.xml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="84" pos:column="13">XElement</name></type> <name pos:line="84" pos:column="22">classBlock</name> <init pos:line="84" pos:column="33">= <expr><name pos:line="84" pos:column="35">null</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name pos:line="86" pos:column="13">classBlock</name> <op:operator pos:line="86" pos:column="24">=</op:operator> <call><name><name pos:line="86" pos:column="26">doc</name><op:operator pos:line="86" pos:column="29">.</op:operator><name pos:line="86" pos:column="30">FileUnits</name><op:operator pos:line="86" pos:column="39">.</op:operator><name pos:line="86" pos:column="40">First</name></name><argument_list pos:line="86" pos:column="45">()</argument_list></call><op:operator pos:line="86" pos:column="47">.</op:operator><call><name pos:line="86" pos:column="48">Element</name><argument_list pos:line="86" pos:column="55">(<argument><expr><name><name pos:line="86" pos:column="56">SRC</name><op:operator pos:line="86" pos:column="59">.</op:operator><name pos:line="86" pos:column="60">Class</name></name></expr></argument>)</argument_list></call><op:operator pos:line="86" pos:column="66">.</op:operator><call><name pos:line="86" pos:column="67">Element</name><argument_list pos:line="86" pos:column="74">(<argument><expr><name><name pos:line="86" pos:column="75">SRC</name><op:operator pos:line="86" pos:column="78">.</op:operator><name pos:line="86" pos:column="79">Block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="88" pos:column="13">Assert</name><op:operator pos:line="88" pos:column="19">.</op:operator><name pos:line="88" pos:column="20">AreEqual</name></name><argument_list pos:line="88" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="88" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="88" pos:column="32">classBlock</name><op:operator pos:line="88" pos:column="42">.</op:operator><name pos:line="88" pos:column="43">Elements</name></name><argument_list pos:line="88" pos:column="51">(<argument><expr><name><name pos:line="88" pos:column="52">SRC</name><op:operator pos:line="88" pos:column="55">.</op:operator><name pos:line="88" pos:column="56">Function</name></name></expr></argument>)</argument_list></call><op:operator pos:line="88" pos:column="65">.</op:operator><call><name pos:line="88" pos:column="66">Count</name><argument_list pos:line="88" pos:column="71">()</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="88" pos:column="75">srcmlObject</name><op:operator pos:line="88" pos:column="86">.</op:operator><name pos:line="88" pos:column="87">ApplicationDirectory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="91" pos:column="9">[<expr><name pos:line="91" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="92" pos:column="9">public</specifier> <name pos:line="92" pos:column="16">void</name></type> <name pos:line="92" pos:column="21">DeclStmtWithTwoDecl</name><parameter_list pos:line="92" pos:column="40">()</parameter_list>
        <block pos:line="93" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="94" pos:column="13">var</name></type> <name pos:line="94" pos:column="17">srcmlObject</name> <init pos:line="94" pos:column="29">= <expr><op:operator pos:line="94" pos:column="31">new</op:operator> <call><name pos:line="94" pos:column="35">Src2SrcMLRunner</name><argument_list pos:line="94" pos:column="50">(<argument><expr><call><name><name pos:line="94" pos:column="51">Path</name><op:operator pos:line="94" pos:column="55">.</op:operator><name pos:line="94" pos:column="56">Combine</name></name><argument_list pos:line="94" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="94" pos:column="64">"."</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="94" pos:column="69">"SrcML"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="95" pos:column="13">var</name></type> <name pos:line="95" pos:column="17">source</name> <init pos:line="95" pos:column="24">= <expr><lit:literal type="string" pos:line="95" pos:column="26">"int x = 0, y = 2;"</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="97" pos:column="13">var</name></type> <name pos:line="97" pos:column="17">xml</name> <init pos:line="97" pos:column="21">= <expr><call><name><name pos:line="97" pos:column="23">srcmlObject</name><op:operator pos:line="97" pos:column="34">.</op:operator><name pos:line="97" pos:column="35">GenerateSrcMLFromString</name></name><argument_list pos:line="97" pos:column="58">(<argument><expr><name pos:line="97" pos:column="59">source</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="98" pos:column="13">var</name></type> <name pos:line="98" pos:column="17">element</name> <init pos:line="98" pos:column="25">= <expr><call><name><name pos:line="98" pos:column="27">XElement</name><op:operator pos:line="98" pos:column="35">.</op:operator><name pos:line="98" pos:column="36">Parse</name></name><argument_list pos:line="98" pos:column="41">(<argument><expr><name pos:line="98" pos:column="42">xml</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="100" pos:column="13">var</name></type> <name pos:line="100" pos:column="17">decl</name> <init pos:line="100" pos:column="22">= <expr><call><name><name pos:line="100" pos:column="24">element</name><op:operator pos:line="100" pos:column="31">.</op:operator><name pos:line="100" pos:column="32">Element</name></name><argument_list pos:line="100" pos:column="39">(<argument><expr><name><name pos:line="100" pos:column="40">SRC</name><op:operator pos:line="100" pos:column="43">.</op:operator><name pos:line="100" pos:column="44">DeclarationStatement</name></name></expr></argument>)</argument_list></call><op:operator pos:line="100" pos:column="65">.</op:operator><call><name pos:line="100" pos:column="66">Element</name><argument_list pos:line="100" pos:column="73">(<argument><expr><name><name pos:line="100" pos:column="74">SRC</name><op:operator pos:line="100" pos:column="77">.</op:operator><name pos:line="100" pos:column="78">Declaration</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="101" pos:column="13">var</name></type> <name pos:line="101" pos:column="17">nameCount</name> <init pos:line="101" pos:column="27">= <expr><call><name><name pos:line="101" pos:column="29">decl</name><op:operator pos:line="101" pos:column="33">.</op:operator><name pos:line="101" pos:column="34">Elements</name></name><argument_list pos:line="101" pos:column="42">(<argument><expr><name><name pos:line="101" pos:column="43">SRC</name><op:operator pos:line="101" pos:column="46">.</op:operator><name pos:line="101" pos:column="47">Name</name></name></expr></argument>)</argument_list></call><op:operator pos:line="101" pos:column="52">.</op:operator><call><name pos:line="101" pos:column="53">Count</name><argument_list pos:line="101" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="102" pos:column="13">var</name></type> <name pos:line="102" pos:column="17">initCount</name> <init pos:line="102" pos:column="27">= <expr><call><name><name pos:line="102" pos:column="29">decl</name><op:operator pos:line="102" pos:column="33">.</op:operator><name pos:line="102" pos:column="34">Elements</name></name><argument_list pos:line="102" pos:column="42">(<argument><expr><name><name pos:line="102" pos:column="43">SRC</name><op:operator pos:line="102" pos:column="46">.</op:operator><name pos:line="102" pos:column="47">Init</name></name></expr></argument>)</argument_list></call><op:operator pos:line="102" pos:column="52">.</op:operator><call><name pos:line="102" pos:column="53">Count</name><argument_list pos:line="102" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="103" pos:column="13">Assert</name><op:operator pos:line="103" pos:column="19">.</op:operator><name pos:line="103" pos:column="20">AreEqual</name></name><argument_list pos:line="103" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="103" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name pos:line="103" pos:column="32">nameCount</name></expr></argument>, <argument><expr><name><name pos:line="103" pos:column="43">srcmlObject</name><op:operator pos:line="103" pos:column="54">.</op:operator><name pos:line="103" pos:column="55">ApplicationDirectory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="104" pos:column="13">Assert</name><op:operator pos:line="104" pos:column="19">.</op:operator><name pos:line="104" pos:column="20">AreEqual</name></name><argument_list pos:line="104" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="104" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><name pos:line="104" pos:column="32">initCount</name></expr></argument>, <argument><expr><name><name pos:line="104" pos:column="43">srcmlObject</name><op:operator pos:line="104" pos:column="54">.</op:operator><name pos:line="104" pos:column="55">ApplicationDirectory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="107" pos:column="9">[<expr><name pos:line="107" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="108" pos:column="9">public</specifier> <name pos:line="108" pos:column="16">void</name></type> <name pos:line="108" pos:column="21">FunctionWithElseInCpp</name><parameter_list pos:line="108" pos:column="42">()</parameter_list>
        <block pos:line="109" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="110" pos:column="13">var</name></type> <name pos:line="110" pos:column="17">srcmlObject</name> <init pos:line="110" pos:column="29">= <expr><op:operator pos:line="110" pos:column="31">new</op:operator> <call><name pos:line="110" pos:column="35">Src2SrcMLRunner</name><argument_list pos:line="110" pos:column="50">(<argument><expr><call><name><name pos:line="110" pos:column="51">Path</name><op:operator pos:line="110" pos:column="55">.</op:operator><name pos:line="110" pos:column="56">Combine</name></name><argument_list pos:line="110" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="110" pos:column="64">"."</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="110" pos:column="69">"SrcML"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="112" pos:column="13">var</name></type> <name pos:line="112" pos:column="17">doc</name> <init pos:line="112" pos:column="21">= <expr><call><name><name pos:line="112" pos:column="23">srcmlObject</name><op:operator pos:line="112" pos:column="34">.</op:operator><name pos:line="112" pos:column="35">GenerateSrcMLFromFile</name></name><argument_list pos:line="112" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="112" pos:column="57">"external\\cpp_parsing_error.c"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="112" pos:column="90">"external_xml\\cpp_parsing_error.c.xml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="114" pos:column="13">Assert</name><op:operator pos:line="114" pos:column="19">.</op:operator><name pos:line="114" pos:column="20">AreEqual</name></name><argument_list pos:line="114" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="114" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="114" pos:column="32">doc</name><op:operator pos:line="114" pos:column="35">.</op:operator><name pos:line="114" pos:column="36">FileUnits</name><op:operator pos:line="114" pos:column="45">.</op:operator><name pos:line="114" pos:column="46">First</name></name><argument_list pos:line="114" pos:column="51">()</argument_list></call><op:operator pos:line="114" pos:column="53">.</op:operator><call><name pos:line="114" pos:column="54">Elements</name><argument_list pos:line="114" pos:column="62">()</argument_list></call><op:operator pos:line="114" pos:column="64">.</op:operator><call><name pos:line="114" pos:column="65">Count</name><argument_list pos:line="114" pos:column="70">()</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="114" pos:column="74">srcmlObject</name><op:operator pos:line="114" pos:column="85">.</op:operator><name pos:line="114" pos:column="86">ApplicationDirectory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="117" pos:column="9">[<expr><name pos:line="117" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="118" pos:column="9">public</specifier> <name pos:line="118" pos:column="16">void</name></type> <name pos:line="118" pos:column="21">MacroWithoutSemicolon</name><parameter_list pos:line="118" pos:column="42">()</parameter_list>
        <block pos:line="119" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="120" pos:column="13">var</name></type> <name pos:line="120" pos:column="17">srcmlObject</name> <init pos:line="120" pos:column="29">= <expr><op:operator pos:line="120" pos:column="31">new</op:operator> <call><name pos:line="120" pos:column="35">Src2SrcMLRunner</name><argument_list pos:line="120" pos:column="50">(<argument><expr><call><name><name pos:line="120" pos:column="51">Path</name><op:operator pos:line="120" pos:column="55">.</op:operator><name pos:line="120" pos:column="56">Combine</name></name><argument_list pos:line="120" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="120" pos:column="64">"."</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="120" pos:column="69">"SrcML"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="122" pos:column="13">var</name></type> <name pos:line="122" pos:column="17">doc</name> <init pos:line="122" pos:column="21">= <expr><call><name><name pos:line="122" pos:column="23">srcmlObject</name><op:operator pos:line="122" pos:column="34">.</op:operator><name pos:line="122" pos:column="35">GenerateSrcMLFromFile</name></name><argument_list pos:line="122" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="122" pos:column="57">"external\\MacroWithoutSemicolon.cpp"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="122" pos:column="96">"external_xml\\MacroWithoutSemicolon.cpp.xml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="124" pos:column="13">Assert</name><op:operator pos:line="124" pos:column="19">.</op:operator><name pos:line="124" pos:column="20">AreEqual</name></name><argument_list pos:line="124" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="124" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="124" pos:column="32">doc</name><op:operator pos:line="124" pos:column="35">.</op:operator><name pos:line="124" pos:column="36">FileUnits</name><op:operator pos:line="124" pos:column="45">.</op:operator><name pos:line="124" pos:column="46">First</name></name><argument_list pos:line="124" pos:column="51">()</argument_list></call><op:operator pos:line="124" pos:column="53">.</op:operator><call><name pos:line="124" pos:column="54">Descendants</name><argument_list pos:line="124" pos:column="65">(<argument><expr><name><name pos:line="124" pos:column="66">SRC</name><op:operator pos:line="124" pos:column="69">.</op:operator><name pos:line="124" pos:column="70">If</name></name></expr></argument>)</argument_list></call><op:operator pos:line="124" pos:column="73">.</op:operator><call><name pos:line="124" pos:column="74">Count</name><argument_list pos:line="124" pos:column="79">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="127" pos:column="9">[<expr><name pos:line="127" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="128" pos:column="9">public</specifier> <name pos:line="128" pos:column="16">void</name></type> <name pos:line="128" pos:column="21">DestructorWithIfStatement</name><parameter_list pos:line="128" pos:column="46">()</parameter_list>
        <block pos:line="129" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="130" pos:column="13">var</name></type> <name pos:line="130" pos:column="17">srcmlObject</name> <init pos:line="130" pos:column="29">= <expr><op:operator pos:line="130" pos:column="31">new</op:operator> <call><name pos:line="130" pos:column="35">Src2SrcMLRunner</name><argument_list pos:line="130" pos:column="50">(<argument><expr><call><name><name pos:line="130" pos:column="51">Path</name><op:operator pos:line="130" pos:column="55">.</op:operator><name pos:line="130" pos:column="56">Combine</name></name><argument_list pos:line="130" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="130" pos:column="64">"."</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="130" pos:column="69">"SrcML"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="132" pos:column="13">var</name></type> <name pos:line="132" pos:column="17">doc</name> <init pos:line="132" pos:column="21">= <expr><call><name><name pos:line="132" pos:column="23">srcmlObject</name><op:operator pos:line="132" pos:column="34">.</op:operator><name pos:line="132" pos:column="35">GenerateSrcMLFromFile</name></name><argument_list pos:line="132" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="132" pos:column="57">"external\\DestructorWithIfStatement.cpp"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="132" pos:column="100">"external_xml\\DestructorWithIfStatement.cpp.xml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="134" pos:column="13">Assert</name><op:operator pos:line="134" pos:column="19">.</op:operator><name pos:line="134" pos:column="20">AreEqual</name></name><argument_list pos:line="134" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="134" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="134" pos:column="32">doc</name><op:operator pos:line="134" pos:column="35">.</op:operator><name pos:line="134" pos:column="36">FileUnits</name><op:operator pos:line="134" pos:column="45">.</op:operator><name pos:line="134" pos:column="46">First</name></name><argument_list pos:line="134" pos:column="51">()</argument_list></call><op:operator pos:line="134" pos:column="53">.</op:operator><call><name pos:line="134" pos:column="54">Descendants</name><argument_list pos:line="134" pos:column="65">(<argument><expr><name><name pos:line="134" pos:column="66">SRC</name><op:operator pos:line="134" pos:column="69">.</op:operator><name pos:line="134" pos:column="70">Destructor</name></name></expr></argument>)</argument_list></call><op:operator pos:line="134" pos:column="81">.</op:operator><call><name pos:line="134" pos:column="82">Count</name><argument_list pos:line="134" pos:column="87">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="137" pos:column="9">[<expr><name pos:line="137" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="138" pos:column="9">public</specifier> <name pos:line="138" pos:column="16">void</name></type> <name pos:line="138" pos:column="21">MethodWithFunctionPointerAsParameter</name><parameter_list pos:line="138" pos:column="57">()</parameter_list>
        <block pos:line="139" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="140" pos:column="13">var</name></type> <name pos:line="140" pos:column="17">srcmlObject</name> <init pos:line="140" pos:column="29">= <expr><op:operator pos:line="140" pos:column="31">new</op:operator> <call><name pos:line="140" pos:column="35">Src2SrcMLRunner</name><argument_list pos:line="140" pos:column="50">(<argument><expr><call><name><name pos:line="140" pos:column="51">Path</name><op:operator pos:line="140" pos:column="55">.</op:operator><name pos:line="140" pos:column="56">Combine</name></name><argument_list pos:line="140" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="140" pos:column="64">"."</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="140" pos:column="69">"SrcML"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="142" pos:column="13">var</name></type> <name pos:line="142" pos:column="17">doc</name> <init pos:line="142" pos:column="21">= <expr><call><name><name pos:line="142" pos:column="23">srcmlObject</name><op:operator pos:line="142" pos:column="34">.</op:operator><name pos:line="142" pos:column="35">GenerateSrcMLFromFile</name></name><argument_list pos:line="142" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="142" pos:column="57">"external\\MethodWithFunctionPointerParameters.cpp"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="142" pos:column="110">"external_xml\\MethodWithFunctionPointerParameters.cpp.xml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="144" pos:column="13">Assert</name><op:operator pos:line="144" pos:column="19">.</op:operator><name pos:line="144" pos:column="20">AreEqual</name></name><argument_list pos:line="144" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="144" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="144" pos:column="32">doc</name><op:operator pos:line="144" pos:column="35">.</op:operator><name pos:line="144" pos:column="36">FileUnits</name><op:operator pos:line="144" pos:column="45">.</op:operator><name pos:line="144" pos:column="46">First</name></name><argument_list pos:line="144" pos:column="51">()</argument_list></call><op:operator pos:line="144" pos:column="53">.</op:operator><call><name pos:line="144" pos:column="54">Element</name><argument_list pos:line="144" pos:column="61">(<argument><expr><name><name pos:line="144" pos:column="62">SRC</name><op:operator pos:line="144" pos:column="65">.</op:operator><name pos:line="144" pos:column="66">Function</name></name></expr></argument>)</argument_list></call><op:operator pos:line="144" pos:column="75">.</op:operator><call><name pos:line="144" pos:column="76">Element</name><argument_list pos:line="144" pos:column="83">(<argument><expr><name><name pos:line="144" pos:column="84">SRC</name><op:operator pos:line="144" pos:column="87">.</op:operator><name pos:line="144" pos:column="88">ParameterList</name></name></expr></argument>)</argument_list></call><op:operator pos:line="144" pos:column="102">.</op:operator><call><name pos:line="144" pos:column="103">Elements</name><argument_list pos:line="144" pos:column="111">(<argument><expr><name><name pos:line="144" pos:column="112">SRC</name><op:operator pos:line="144" pos:column="115">.</op:operator><name pos:line="144" pos:column="116">Parameter</name></name></expr></argument>)</argument_list></call><op:operator pos:line="144" pos:column="126">.</op:operator><call><name pos:line="144" pos:column="127">Count</name><argument_list pos:line="144" pos:column="132">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="147" pos:column="9">[<expr><name pos:line="147" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="148" pos:column="9">public</specifier> <name pos:line="148" pos:column="16">void</name></type> <name pos:line="148" pos:column="21">TestCSharpExpressionWithDefaultKeyword</name><parameter_list pos:line="148" pos:column="59">()</parameter_list> <block pos:line="148" pos:column="62">{
            <decl_stmt><decl><type><name pos:line="149" pos:column="13">var</name></type> <name pos:line="149" pos:column="17">generator</name> <init pos:line="149" pos:column="27">= <expr><op:operator pos:line="149" pos:column="29">new</op:operator> <call><name pos:line="149" pos:column="33">SrcMLGenerator</name><argument_list pos:line="149" pos:column="47">(<argument><expr><name><name pos:line="149" pos:column="48">TestConstants</name><op:operator pos:line="149" pos:column="61">.</op:operator><name pos:line="149" pos:column="62">SrcmlPath</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="150" pos:column="13">generator</name><op:operator pos:line="150" pos:column="22">.</op:operator><name pos:line="150" pos:column="23">GenerateSrcMLFromFile</name></name><argument_list pos:line="150" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="150" pos:column="45">"external\\TestCSharpExpressionWithDefaultKeyword.cs"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="150" pos:column="100">"external_xml\\TestCSharpExpressionWithDefaultKeyword.cs.xml"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="151" pos:column="13">var</name></type> <name pos:line="151" pos:column="17">fileUnit</name> <init pos:line="151" pos:column="26">= <expr><call><name><name pos:line="151" pos:column="28">SrcMLElement</name><op:operator pos:line="151" pos:column="40">.</op:operator><name pos:line="151" pos:column="41">Load</name></name><argument_list pos:line="151" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="151" pos:column="46">"external_xml\\TestCSharpExpressionWithDefaultKeyword.cs.xml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="152" pos:column="13">var</name></type> <name pos:line="152" pos:column="17">classB</name> <init pos:line="152" pos:column="24">= <expr><call><name><name pos:line="152" pos:column="26">fileUnit</name><op:operator pos:line="152" pos:column="34">.</op:operator><name pos:line="152" pos:column="35">Element</name></name><argument_list pos:line="152" pos:column="42">(<argument><expr><name><name pos:line="152" pos:column="43">SRC</name><op:operator pos:line="152" pos:column="46">.</op:operator><name pos:line="152" pos:column="47">Class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="153" pos:column="13">Assert</name><op:operator pos:line="153" pos:column="19">.</op:operator><name pos:line="153" pos:column="20">IsNotNull</name></name><argument_list pos:line="153" pos:column="29">(<argument><expr><name pos:line="153" pos:column="30">classB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="154" pos:column="13">Assert</name><op:operator pos:line="154" pos:column="19">.</op:operator><name pos:line="154" pos:column="20">AreEqual</name></name><argument_list pos:line="154" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="154" pos:column="29">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="154" pos:column="32">classB</name><op:operator pos:line="154" pos:column="38">.</op:operator><name pos:line="154" pos:column="39">Descendants</name></name><argument_list pos:line="154" pos:column="50">(<argument><expr><name><name pos:line="154" pos:column="51">SRC</name><op:operator pos:line="154" pos:column="54">.</op:operator><name pos:line="154" pos:column="55">Function</name></name></expr></argument>)</argument_list></call><op:operator pos:line="154" pos:column="64">.</op:operator><call><name pos:line="154" pos:column="65">Count</name><argument_list pos:line="154" pos:column="70">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="157" pos:column="9">[<expr><name pos:line="157" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="158" pos:column="9">public</specifier> <name pos:line="158" pos:column="16">void</name></type> <name pos:line="158" pos:column="21">TestCppConstTypeModifier</name><parameter_list pos:line="158" pos:column="45">()</parameter_list> <block pos:line="158" pos:column="48">{
            <decl_stmt><decl><type><name pos:line="159" pos:column="13">var</name></type> <name pos:line="159" pos:column="17">generator</name> <init pos:line="159" pos:column="27">= <expr><op:operator pos:line="159" pos:column="29">new</op:operator> <call><name pos:line="159" pos:column="33">SrcMLGenerator</name><argument_list pos:line="159" pos:column="47">(<argument><expr><name><name pos:line="159" pos:column="48">TestConstants</name><op:operator pos:line="159" pos:column="61">.</op:operator><name pos:line="159" pos:column="62">SrcmlPath</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="160" pos:column="13">generator</name><op:operator pos:line="160" pos:column="22">.</op:operator><name pos:line="160" pos:column="23">GenerateSrcMLFromFile</name></name><argument_list pos:line="160" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="160" pos:column="45">"external\\TestCppTypeModifiers.cpp"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="160" pos:column="83">"external_xml\\TestCppConstModifier.cpp.xml"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="161" pos:column="13">var</name></type> <name pos:line="161" pos:column="17">fileUnit</name> <init pos:line="161" pos:column="26">= <expr><call><name><name pos:line="161" pos:column="28">SrcMLElement</name><op:operator pos:line="161" pos:column="40">.</op:operator><name pos:line="161" pos:column="41">Load</name></name><argument_list pos:line="161" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="161" pos:column="46">"external_xml\\TestCppConstModifier.cpp.xml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="162" pos:column="13">var</name></type> <name pos:line="162" pos:column="17">typeWithConst</name> <init pos:line="162" pos:column="31">= <expr><call><name><name pos:line="162" pos:column="33">fileUnit</name><op:operator pos:line="162" pos:column="41">.</op:operator><name pos:line="162" pos:column="42">Descendants</name></name><argument_list pos:line="162" pos:column="53">(<argument><expr><name><name pos:line="162" pos:column="54">SRC</name><op:operator pos:line="162" pos:column="57">.</op:operator><name pos:line="162" pos:column="58">Type</name></name></expr></argument>)</argument_list></call><op:operator pos:line="162" pos:column="63">.</op:operator><call><name pos:line="162" pos:column="64">FirstOrDefault</name><argument_list pos:line="162" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="163" pos:column="13">Assert</name><op:operator pos:line="163" pos:column="19">.</op:operator><name pos:line="163" pos:column="20">IsNotNull</name></name><argument_list pos:line="163" pos:column="29">(<argument><expr><name pos:line="163" pos:column="30">typeWithConst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="164" pos:column="13">var</name></type> <name pos:line="164" pos:column="17">constModifier</name> <init pos:line="164" pos:column="31">= <expr><call><name><name pos:line="164" pos:column="33">typeWithConst</name><op:operator pos:line="164" pos:column="46">.</op:operator><name pos:line="164" pos:column="47">Elements</name></name><argument_list pos:line="164" pos:column="55">(<argument><expr><name><name pos:line="164" pos:column="56">SRC</name><op:operator pos:line="164" pos:column="59">.</op:operator><name pos:line="164" pos:column="60">Specifier</name></name></expr></argument>)</argument_list></call><op:operator pos:line="164" pos:column="70">.</op:operator><call><name pos:line="164" pos:column="71">FirstOrDefault</name><argument_list pos:line="164" pos:column="85">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="165" pos:column="13">Assert</name><op:operator pos:line="165" pos:column="19">.</op:operator><name pos:line="165" pos:column="20">IsNotNull</name></name><argument_list pos:line="165" pos:column="29">(<argument><expr><name pos:line="165" pos:column="30">constModifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="166" pos:column="13">Assert</name><op:operator pos:line="166" pos:column="19">.</op:operator><name pos:line="166" pos:column="20">AreEqual</name></name><argument_list pos:line="166" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="166" pos:column="29">"const"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="166" pos:column="38">constModifier</name><op:operator pos:line="166" pos:column="51">.</op:operator><name pos:line="166" pos:column="52">Value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="169" pos:column="9">[<expr><name pos:line="169" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="170" pos:column="9">public</specifier> <name pos:line="170" pos:column="16">void</name></type> <name pos:line="170" pos:column="21">TestCppStaticTypeModifier</name><parameter_list pos:line="170" pos:column="46">()</parameter_list> <block pos:line="170" pos:column="49">{
            <decl_stmt><decl><type><name pos:line="171" pos:column="13">var</name></type> <name pos:line="171" pos:column="17">generator</name> <init pos:line="171" pos:column="27">= <expr><op:operator pos:line="171" pos:column="29">new</op:operator> <call><name pos:line="171" pos:column="33">SrcMLGenerator</name><argument_list pos:line="171" pos:column="47">(<argument><expr><name><name pos:line="171" pos:column="48">TestConstants</name><op:operator pos:line="171" pos:column="61">.</op:operator><name pos:line="171" pos:column="62">SrcmlPath</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="172" pos:column="13">generator</name><op:operator pos:line="172" pos:column="22">.</op:operator><name pos:line="172" pos:column="23">GenerateSrcMLFromFile</name></name><argument_list pos:line="172" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="172" pos:column="45">"external\\TestCppTypeModifiers.cpp"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="172" pos:column="83">"external_xml\\TestCppStaticModifier.cpp.xml"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="173" pos:column="13">var</name></type> <name pos:line="173" pos:column="17">fileUnit</name> <init pos:line="173" pos:column="26">= <expr><call><name><name pos:line="173" pos:column="28">SrcMLElement</name><op:operator pos:line="173" pos:column="40">.</op:operator><name pos:line="173" pos:column="41">Load</name></name><argument_list pos:line="173" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="173" pos:column="46">"external_xml\\TestCppStaticModifier.cpp.xml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="174" pos:column="13">var</name></type> <name pos:line="174" pos:column="17">typeWithStatic</name> <init pos:line="174" pos:column="32">= <expr><call><name><name pos:line="174" pos:column="34">fileUnit</name><op:operator pos:line="174" pos:column="42">.</op:operator><name pos:line="174" pos:column="43">Descendants</name></name><argument_list pos:line="174" pos:column="54">(<argument><expr><name><name pos:line="174" pos:column="55">SRC</name><op:operator pos:line="174" pos:column="58">.</op:operator><name pos:line="174" pos:column="59">Type</name></name></expr></argument>)</argument_list></call><op:operator pos:line="174" pos:column="64">.</op:operator><call><name pos:line="174" pos:column="65">LastOrDefault</name><argument_list pos:line="174" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="175" pos:column="13">Assert</name><op:operator pos:line="175" pos:column="19">.</op:operator><name pos:line="175" pos:column="20">IsNotNull</name></name><argument_list pos:line="175" pos:column="29">(<argument><expr><name pos:line="175" pos:column="30">typeWithStatic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="176" pos:column="13">var</name></type> <name pos:line="176" pos:column="17">staticModifier</name> <init pos:line="176" pos:column="32">= <expr><call><name><name pos:line="176" pos:column="34">typeWithStatic</name><op:operator pos:line="176" pos:column="48">.</op:operator><name pos:line="176" pos:column="49">Elements</name></name><argument_list pos:line="176" pos:column="57">(<argument><expr><name><name pos:line="176" pos:column="58">SRC</name><op:operator pos:line="176" pos:column="61">.</op:operator><name pos:line="176" pos:column="62">Specifier</name></name></expr></argument>)</argument_list></call><op:operator pos:line="176" pos:column="72">.</op:operator><call><name pos:line="176" pos:column="73">FirstOrDefault</name><argument_list pos:line="176" pos:column="87">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="177" pos:column="13">Assert</name><op:operator pos:line="177" pos:column="19">.</op:operator><name pos:line="177" pos:column="20">IsNotNull</name></name><argument_list pos:line="177" pos:column="29">(<argument><expr><name pos:line="177" pos:column="30">staticModifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="178" pos:column="13">Assert</name><op:operator pos:line="178" pos:column="19">.</op:operator><name pos:line="178" pos:column="20">AreEqual</name></name><argument_list pos:line="178" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="178" pos:column="29">"static"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="178" pos:column="39">staticModifier</name><op:operator pos:line="178" pos:column="53">.</op:operator><name pos:line="178" pos:column="54">Value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="181" pos:column="9">[<expr><name pos:line="181" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="182" pos:column="9">public</specifier> <name pos:line="182" pos:column="16">void</name></type> <name pos:line="182" pos:column="21">TestCSharpExpressionWithSet</name><parameter_list pos:line="182" pos:column="48">()</parameter_list> <block pos:line="182" pos:column="51">{
            <decl_stmt><decl><type><name pos:line="183" pos:column="13">var</name></type> <name pos:line="183" pos:column="17">generator</name> <init pos:line="183" pos:column="27">= <expr><op:operator pos:line="183" pos:column="29">new</op:operator> <call><name pos:line="183" pos:column="33">SrcMLGenerator</name><argument_list pos:line="183" pos:column="47">(<argument><expr><name><name pos:line="183" pos:column="48">TestConstants</name><op:operator pos:line="183" pos:column="61">.</op:operator><name pos:line="183" pos:column="62">SrcmlPath</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="184" pos:column="13">generator</name><op:operator pos:line="184" pos:column="22">.</op:operator><name pos:line="184" pos:column="23">GenerateSrcMLFromFile</name></name><argument_list pos:line="184" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="184" pos:column="45">"external\\TestCSharpExpressionWithSet.cs"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="184" pos:column="89">"external_xml\\TestCSharpExpressionWithSet.cs.xml"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="185" pos:column="13">var</name></type> <name pos:line="185" pos:column="17">fileUnit</name> <init pos:line="185" pos:column="26">= <expr><call><name><name pos:line="185" pos:column="28">SrcMLElement</name><op:operator pos:line="185" pos:column="40">.</op:operator><name pos:line="185" pos:column="41">Load</name></name><argument_list pos:line="185" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="185" pos:column="46">"external_xml\\TestCSharpExpressionWithSet.cs.xml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="187" pos:column="13">var</name></type> <name pos:line="187" pos:column="17">method</name> <init pos:line="187" pos:column="24">= <expr><call><name><name pos:line="187" pos:column="26">fileUnit</name><op:operator pos:line="187" pos:column="34">.</op:operator><name pos:line="187" pos:column="35">Descendants</name></name><argument_list pos:line="187" pos:column="46">(<argument><expr><name><name pos:line="187" pos:column="47">SRC</name><op:operator pos:line="187" pos:column="50">.</op:operator><name pos:line="187" pos:column="51">Function</name></name></expr></argument>)</argument_list></call><op:operator pos:line="187" pos:column="60">.</op:operator><call><name pos:line="187" pos:column="61">FirstOrDefault</name><argument_list pos:line="187" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="188" pos:column="13">Assert</name><op:operator pos:line="188" pos:column="19">.</op:operator><name pos:line="188" pos:column="20">IsNotNull</name></name><argument_list pos:line="188" pos:column="29">(<argument><expr><name pos:line="188" pos:column="30">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="189" pos:column="13">var</name></type> <name pos:line="189" pos:column="17">methodBlock</name> <init pos:line="189" pos:column="29">= <expr><call><name><name pos:line="189" pos:column="31">method</name><op:operator pos:line="189" pos:column="37">.</op:operator><name pos:line="189" pos:column="38">Element</name></name><argument_list pos:line="189" pos:column="45">(<argument><expr><name><name pos:line="189" pos:column="46">SRC</name><op:operator pos:line="189" pos:column="49">.</op:operator><name pos:line="189" pos:column="50">Block</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="190" pos:column="13">Assert</name><op:operator pos:line="190" pos:column="19">.</op:operator><name pos:line="190" pos:column="20">IsNotNull</name></name><argument_list pos:line="190" pos:column="29">(<argument><expr><name pos:line="190" pos:column="30">methodBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="191" pos:column="13">Assert</name><op:operator pos:line="191" pos:column="19">.</op:operator><name pos:line="191" pos:column="20">AreEqual</name></name><argument_list pos:line="191" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="191" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="191" pos:column="32">methodBlock</name><op:operator pos:line="191" pos:column="43">.</op:operator><name pos:line="191" pos:column="44">Elements</name></name><argument_list pos:line="191" pos:column="52">(<argument><expr><name><name pos:line="191" pos:column="53">SRC</name><op:operator pos:line="191" pos:column="56">.</op:operator><name pos:line="191" pos:column="57">ExpressionStatement</name></name></expr></argument>)</argument_list></call><op:operator pos:line="191" pos:column="77">.</op:operator><call><name pos:line="191" pos:column="78">Count</name><argument_list pos:line="191" pos:column="83">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="194" pos:column="9">[<expr><name pos:line="194" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="195" pos:column="9">public</specifier> <name pos:line="195" pos:column="16">void</name></type> <name pos:line="195" pos:column="21">TestCSharpExpressionWithGet</name><parameter_list pos:line="195" pos:column="48">()</parameter_list> <block pos:line="195" pos:column="51">{
            <decl_stmt><decl><type><name pos:line="196" pos:column="13">var</name></type> <name pos:line="196" pos:column="17">generator</name> <init pos:line="196" pos:column="27">= <expr><op:operator pos:line="196" pos:column="29">new</op:operator> <call><name pos:line="196" pos:column="33">SrcMLGenerator</name><argument_list pos:line="196" pos:column="47">(<argument><expr><name><name pos:line="196" pos:column="48">TestConstants</name><op:operator pos:line="196" pos:column="61">.</op:operator><name pos:line="196" pos:column="62">SrcmlPath</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="197" pos:column="13">generator</name><op:operator pos:line="197" pos:column="22">.</op:operator><name pos:line="197" pos:column="23">GenerateSrcMLFromFile</name></name><argument_list pos:line="197" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="197" pos:column="45">"external\\TestCSharpExpressionWithGet.cs"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="197" pos:column="89">"external_xml\\TestCSharpExpressionWithGet.cs.xml"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="198" pos:column="13">var</name></type> <name pos:line="198" pos:column="17">fileUnit</name> <init pos:line="198" pos:column="26">= <expr><call><name><name pos:line="198" pos:column="28">SrcMLElement</name><op:operator pos:line="198" pos:column="40">.</op:operator><name pos:line="198" pos:column="41">Load</name></name><argument_list pos:line="198" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="198" pos:column="46">"external_xml\\TestCSharpExpressionWithGet.cs.xml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="200" pos:column="13">var</name></type> <name pos:line="200" pos:column="17">method</name> <init pos:line="200" pos:column="24">= <expr><call><name><name pos:line="200" pos:column="26">fileUnit</name><op:operator pos:line="200" pos:column="34">.</op:operator><name pos:line="200" pos:column="35">Descendants</name></name><argument_list pos:line="200" pos:column="46">(<argument><expr><name><name pos:line="200" pos:column="47">SRC</name><op:operator pos:line="200" pos:column="50">.</op:operator><name pos:line="200" pos:column="51">Function</name></name></expr></argument>)</argument_list></call><op:operator pos:line="200" pos:column="60">.</op:operator><call><name pos:line="200" pos:column="61">FirstOrDefault</name><argument_list pos:line="200" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="201" pos:column="13">Assert</name><op:operator pos:line="201" pos:column="19">.</op:operator><name pos:line="201" pos:column="20">IsNotNull</name></name><argument_list pos:line="201" pos:column="29">(<argument><expr><name pos:line="201" pos:column="30">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="202" pos:column="13">var</name></type> <name pos:line="202" pos:column="17">methodBlock</name> <init pos:line="202" pos:column="29">= <expr><call><name><name pos:line="202" pos:column="31">method</name><op:operator pos:line="202" pos:column="37">.</op:operator><name pos:line="202" pos:column="38">Element</name></name><argument_list pos:line="202" pos:column="45">(<argument><expr><name><name pos:line="202" pos:column="46">SRC</name><op:operator pos:line="202" pos:column="49">.</op:operator><name pos:line="202" pos:column="50">Block</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="203" pos:column="13">Assert</name><op:operator pos:line="203" pos:column="19">.</op:operator><name pos:line="203" pos:column="20">IsNotNull</name></name><argument_list pos:line="203" pos:column="29">(<argument><expr><name pos:line="203" pos:column="30">methodBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="204" pos:column="13">Assert</name><op:operator pos:line="204" pos:column="19">.</op:operator><name pos:line="204" pos:column="20">AreEqual</name></name><argument_list pos:line="204" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="204" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="204" pos:column="32">methodBlock</name><op:operator pos:line="204" pos:column="43">.</op:operator><name pos:line="204" pos:column="44">Elements</name></name><argument_list pos:line="204" pos:column="52">(<argument><expr><name><name pos:line="204" pos:column="53">SRC</name><op:operator pos:line="204" pos:column="56">.</op:operator><name pos:line="204" pos:column="57">ExpressionStatement</name></name></expr></argument>)</argument_list></call><op:operator pos:line="204" pos:column="77">.</op:operator><call><name pos:line="204" pos:column="78">Count</name><argument_list pos:line="204" pos:column="83">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="207" pos:column="9">[<expr><name pos:line="207" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="208" pos:column="9">public</specifier> <name pos:line="208" pos:column="16">void</name></type> <name pos:line="208" pos:column="21">TestCSharpExpressionWithAdd</name><parameter_list pos:line="208" pos:column="48">()</parameter_list> <block pos:line="208" pos:column="51">{
            <decl_stmt><decl><type><name pos:line="209" pos:column="13">var</name></type> <name pos:line="209" pos:column="17">generator</name> <init pos:line="209" pos:column="27">= <expr><op:operator pos:line="209" pos:column="29">new</op:operator> <call><name pos:line="209" pos:column="33">SrcMLGenerator</name><argument_list pos:line="209" pos:column="47">(<argument><expr><name><name pos:line="209" pos:column="48">TestConstants</name><op:operator pos:line="209" pos:column="61">.</op:operator><name pos:line="209" pos:column="62">SrcmlPath</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="210" pos:column="13">generator</name><op:operator pos:line="210" pos:column="22">.</op:operator><name pos:line="210" pos:column="23">GenerateSrcMLFromFile</name></name><argument_list pos:line="210" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="210" pos:column="45">"external\\TestCSharpExpressionWithAdd.cs"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="210" pos:column="89">"external_xml\\TestCSharpExpressionWithAdd.cs.xml"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="211" pos:column="13">var</name></type> <name pos:line="211" pos:column="17">fileUnit</name> <init pos:line="211" pos:column="26">= <expr><call><name><name pos:line="211" pos:column="28">SrcMLElement</name><op:operator pos:line="211" pos:column="40">.</op:operator><name pos:line="211" pos:column="41">Load</name></name><argument_list pos:line="211" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="211" pos:column="46">"external_xml\\TestCSharpExpressionWithAdd.cs.xml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="213" pos:column="13">var</name></type> <name pos:line="213" pos:column="17">method</name> <init pos:line="213" pos:column="24">= <expr><call><name><name pos:line="213" pos:column="26">fileUnit</name><op:operator pos:line="213" pos:column="34">.</op:operator><name pos:line="213" pos:column="35">Descendants</name></name><argument_list pos:line="213" pos:column="46">(<argument><expr><name><name pos:line="213" pos:column="47">SRC</name><op:operator pos:line="213" pos:column="50">.</op:operator><name pos:line="213" pos:column="51">Function</name></name></expr></argument>)</argument_list></call><op:operator pos:line="213" pos:column="60">.</op:operator><call><name pos:line="213" pos:column="61">FirstOrDefault</name><argument_list pos:line="213" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="214" pos:column="13">Assert</name><op:operator pos:line="214" pos:column="19">.</op:operator><name pos:line="214" pos:column="20">IsNotNull</name></name><argument_list pos:line="214" pos:column="29">(<argument><expr><name pos:line="214" pos:column="30">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="215" pos:column="13">var</name></type> <name pos:line="215" pos:column="17">methodBlock</name> <init pos:line="215" pos:column="29">= <expr><call><name><name pos:line="215" pos:column="31">method</name><op:operator pos:line="215" pos:column="37">.</op:operator><name pos:line="215" pos:column="38">Element</name></name><argument_list pos:line="215" pos:column="45">(<argument><expr><name><name pos:line="215" pos:column="46">SRC</name><op:operator pos:line="215" pos:column="49">.</op:operator><name pos:line="215" pos:column="50">Block</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="216" pos:column="13">Assert</name><op:operator pos:line="216" pos:column="19">.</op:operator><name pos:line="216" pos:column="20">IsNotNull</name></name><argument_list pos:line="216" pos:column="29">(<argument><expr><name pos:line="216" pos:column="30">methodBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="217" pos:column="13">Assert</name><op:operator pos:line="217" pos:column="19">.</op:operator><name pos:line="217" pos:column="20">AreEqual</name></name><argument_list pos:line="217" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="217" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="217" pos:column="32">methodBlock</name><op:operator pos:line="217" pos:column="43">.</op:operator><name pos:line="217" pos:column="44">Elements</name></name><argument_list pos:line="217" pos:column="52">(<argument><expr><name><name pos:line="217" pos:column="53">SRC</name><op:operator pos:line="217" pos:column="56">.</op:operator><name pos:line="217" pos:column="57">ExpressionStatement</name></name></expr></argument>)</argument_list></call><op:operator pos:line="217" pos:column="77">.</op:operator><call><name pos:line="217" pos:column="78">Count</name><argument_list pos:line="217" pos:column="83">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="220" pos:column="9">[<expr><name pos:line="220" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="221" pos:column="9">public</specifier> <name pos:line="221" pos:column="16">void</name></type> <name pos:line="221" pos:column="21">TestCSharpExpressionWithRemove</name><parameter_list pos:line="221" pos:column="51">()</parameter_list> <block pos:line="221" pos:column="54">{
            <decl_stmt><decl><type><name pos:line="222" pos:column="13">var</name></type> <name pos:line="222" pos:column="17">generator</name> <init pos:line="222" pos:column="27">= <expr><op:operator pos:line="222" pos:column="29">new</op:operator> <call><name pos:line="222" pos:column="33">SrcMLGenerator</name><argument_list pos:line="222" pos:column="47">(<argument><expr><name><name pos:line="222" pos:column="48">TestConstants</name><op:operator pos:line="222" pos:column="61">.</op:operator><name pos:line="222" pos:column="62">SrcmlPath</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="223" pos:column="13">generator</name><op:operator pos:line="223" pos:column="22">.</op:operator><name pos:line="223" pos:column="23">GenerateSrcMLFromFile</name></name><argument_list pos:line="223" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="223" pos:column="45">"external\\TestCSharpExpressionWithRemove.cs"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="223" pos:column="92">"external_xml\\TestCSharpExpressionWithRemove.cs.xml"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="224" pos:column="13">var</name></type> <name pos:line="224" pos:column="17">fileUnit</name> <init pos:line="224" pos:column="26">= <expr><call><name><name pos:line="224" pos:column="28">SrcMLElement</name><op:operator pos:line="224" pos:column="40">.</op:operator><name pos:line="224" pos:column="41">Load</name></name><argument_list pos:line="224" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="224" pos:column="46">"external_xml\\TestCSharpExpressionWithRemove.cs.xml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="226" pos:column="13">var</name></type> <name pos:line="226" pos:column="17">method</name> <init pos:line="226" pos:column="24">= <expr><call><name><name pos:line="226" pos:column="26">fileUnit</name><op:operator pos:line="226" pos:column="34">.</op:operator><name pos:line="226" pos:column="35">Descendants</name></name><argument_list pos:line="226" pos:column="46">(<argument><expr><name><name pos:line="226" pos:column="47">SRC</name><op:operator pos:line="226" pos:column="50">.</op:operator><name pos:line="226" pos:column="51">Function</name></name></expr></argument>)</argument_list></call><op:operator pos:line="226" pos:column="60">.</op:operator><call><name pos:line="226" pos:column="61">FirstOrDefault</name><argument_list pos:line="226" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="227" pos:column="13">Assert</name><op:operator pos:line="227" pos:column="19">.</op:operator><name pos:line="227" pos:column="20">IsNotNull</name></name><argument_list pos:line="227" pos:column="29">(<argument><expr><name pos:line="227" pos:column="30">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="228" pos:column="13">var</name></type> <name pos:line="228" pos:column="17">methodBlock</name> <init pos:line="228" pos:column="29">= <expr><call><name><name pos:line="228" pos:column="31">method</name><op:operator pos:line="228" pos:column="37">.</op:operator><name pos:line="228" pos:column="38">Element</name></name><argument_list pos:line="228" pos:column="45">(<argument><expr><name><name pos:line="228" pos:column="46">SRC</name><op:operator pos:line="228" pos:column="49">.</op:operator><name pos:line="228" pos:column="50">Block</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="229" pos:column="13">Assert</name><op:operator pos:line="229" pos:column="19">.</op:operator><name pos:line="229" pos:column="20">IsNotNull</name></name><argument_list pos:line="229" pos:column="29">(<argument><expr><name pos:line="229" pos:column="30">methodBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="230" pos:column="13">Assert</name><op:operator pos:line="230" pos:column="19">.</op:operator><name pos:line="230" pos:column="20">AreEqual</name></name><argument_list pos:line="230" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="230" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="230" pos:column="32">methodBlock</name><op:operator pos:line="230" pos:column="43">.</op:operator><name pos:line="230" pos:column="44">Elements</name></name><argument_list pos:line="230" pos:column="52">(<argument><expr><name><name pos:line="230" pos:column="53">SRC</name><op:operator pos:line="230" pos:column="56">.</op:operator><name pos:line="230" pos:column="57">ExpressionStatement</name></name></expr></argument>)</argument_list></call><op:operator pos:line="230" pos:column="77">.</op:operator><call><name pos:line="230" pos:column="78">Count</name><argument_list pos:line="230" pos:column="83">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="233" pos:column="9">[<expr><name pos:line="233" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="234" pos:column="9">public</specifier> <name pos:line="234" pos:column="16">void</name></type> <name pos:line="234" pos:column="21">TestCSharpUsingStatement</name><parameter_list pos:line="234" pos:column="45">()</parameter_list> <block pos:line="234" pos:column="48">{
            <decl_stmt><decl><type><name pos:line="235" pos:column="13">var</name></type> <name pos:line="235" pos:column="17">generator</name> <init pos:line="235" pos:column="27">= <expr><op:operator pos:line="235" pos:column="29">new</op:operator> <call><name pos:line="235" pos:column="33">SrcMLGenerator</name><argument_list pos:line="235" pos:column="47">(<argument><expr><name><name pos:line="235" pos:column="48">TestConstants</name><op:operator pos:line="235" pos:column="61">.</op:operator><name pos:line="235" pos:column="62">SrcmlPath</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="236" pos:column="13">generator</name><op:operator pos:line="236" pos:column="22">.</op:operator><name pos:line="236" pos:column="23">GenerateSrcMLFromFile</name></name><argument_list pos:line="236" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="236" pos:column="45">"external\\TestCSharpUsingStatement.cs"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="236" pos:column="86">"external_xml\\TestCSharpUsingStatement.cs.xml"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="237" pos:column="13">var</name></type> <name pos:line="237" pos:column="17">fileUnit</name> <init pos:line="237" pos:column="26">= <expr><call><name><name pos:line="237" pos:column="28">SrcMLElement</name><op:operator pos:line="237" pos:column="40">.</op:operator><name pos:line="237" pos:column="41">Load</name></name><argument_list pos:line="237" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="237" pos:column="46">"external_xml\\TestCSharpUsingStatement.cs.xml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="239" pos:column="13">var</name></type> <name pos:line="239" pos:column="17">usingBlock</name> <init pos:line="239" pos:column="28">= <expr><call><name><name pos:line="239" pos:column="30">fileUnit</name><op:operator pos:line="239" pos:column="38">.</op:operator><name pos:line="239" pos:column="39">Elements</name></name><argument_list pos:line="239" pos:column="47">(<argument><expr><name><name pos:line="239" pos:column="48">SRC</name><op:operator pos:line="239" pos:column="51">.</op:operator><name pos:line="239" pos:column="52">Using</name></name></expr></argument>)</argument_list></call><op:operator pos:line="239" pos:column="58">.</op:operator><call><name pos:line="239" pos:column="59">FirstOrDefault</name><argument_list pos:line="239" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="240" pos:column="13">Assert</name><op:operator pos:line="240" pos:column="19">.</op:operator><name pos:line="240" pos:column="20">IsNotNull</name></name><argument_list pos:line="240" pos:column="29">(<argument><expr><name pos:line="240" pos:column="30">usingBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="242" pos:column="13">Assert</name><op:operator pos:line="242" pos:column="19">.</op:operator><name pos:line="242" pos:column="20">AreEqual</name></name><argument_list pos:line="242" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="242" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="242" pos:column="32">usingBlock</name><op:operator pos:line="242" pos:column="42">.</op:operator><name pos:line="242" pos:column="43">Elements</name></name><argument_list pos:line="242" pos:column="51">(<argument><expr><name><name pos:line="242" pos:column="52">SRC</name><op:operator pos:line="242" pos:column="55">.</op:operator><name pos:line="242" pos:column="56">Declaration</name></name></expr></argument>)</argument_list></call><op:operator pos:line="242" pos:column="68">.</op:operator><call><name pos:line="242" pos:column="69">Count</name><argument_list pos:line="242" pos:column="74">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="243" pos:column="13">Assert</name><op:operator pos:line="243" pos:column="19">.</op:operator><name pos:line="243" pos:column="20">AreEqual</name></name><argument_list pos:line="243" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="243" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="243" pos:column="32">usingBlock</name><op:operator pos:line="243" pos:column="42">.</op:operator><name pos:line="243" pos:column="43">Elements</name></name><argument_list pos:line="243" pos:column="51">(<argument><expr><name><name pos:line="243" pos:column="52">SRC</name><op:operator pos:line="243" pos:column="55">.</op:operator><name pos:line="243" pos:column="56">Block</name></name></expr></argument>)</argument_list></call><op:operator pos:line="243" pos:column="62">.</op:operator><call><name pos:line="243" pos:column="63">Count</name><argument_list pos:line="243" pos:column="68">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
