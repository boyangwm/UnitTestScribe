<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\Tools\ABB.SrcML.Tools.MethodCallSurvey\MethodCallSample.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">ABB</name><op:operator pos:line="1" pos:column="10">.</op:operator><name pos:line="1" pos:column="11">SrcML</name><op:operator pos:line="1" pos:column="16">.</op:operator><name pos:line="1" pos:column="17">Data</name></name>;</using>
<using pos:line="2" pos:column="1">using <name pos:line="2" pos:column="7">System</name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Collections</name><op:operator pos:line="3" pos:column="25">.</op:operator><name pos:line="3" pos:column="26">Generic</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Collections</name><op:operator pos:line="4" pos:column="25">.</op:operator><name pos:line="4" pos:column="26">ObjectModel</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">ComponentModel</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">IO</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">System</name><op:operator pos:line="7" pos:column="13">.</op:operator><name pos:line="7" pos:column="14">Linq</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">System</name><op:operator pos:line="8" pos:column="13">.</op:operator><name pos:line="8" pos:column="14">Text</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">System</name><op:operator pos:line="9" pos:column="13">.</op:operator><name pos:line="9" pos:column="14">Threading</name></name>;</using>

<namespace pos:line="11" pos:column="1">namespace <name><name pos:line="11" pos:column="11">ABB</name><op:operator pos:line="11" pos:column="14">.</op:operator><name pos:line="11" pos:column="15">SrcML</name><op:operator pos:line="11" pos:column="20">.</op:operator><name pos:line="11" pos:column="21">Tools</name><op:operator pos:line="11" pos:column="26">.</op:operator><name pos:line="11" pos:column="27">MethodCallSurvey</name></name> <block pos:line="11" pos:column="44">{

    <class><specifier pos:line="13" pos:column="5">public</specifier> class <name pos:line="13" pos:column="18">MethodCallSample</name> <super pos:line="13" pos:column="35">: <name pos:line="13" pos:column="37">INotifyPropertyChanged</name></super> <block pos:line="13" pos:column="60">{
        <decl_stmt><decl><type><specifier pos:line="14" pos:column="9">private</specifier> <name><name pos:line="14" pos:column="17">ObservableCollection</name><argument_list pos:line="14" pos:column="37">&lt;<argument><name pos:line="14" pos:column="38">MethodCall</name></argument>&gt;</argument_list></name></type> <name pos:line="14" pos:column="50">_callSampleCollection</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="15" pos:column="9">private</specifier> <name pos:line="15" pos:column="17">MethodCall</name></type> <name pos:line="15" pos:column="28">_currentCall</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="16" pos:column="9">private</specifier> <name><name pos:line="16" pos:column="17">ObservableCollection</name><argument_list pos:line="16" pos:column="37">&lt;<argument><name pos:line="16" pos:column="38">MethodDefinition</name></argument>&gt;</argument_list></name></type> <name pos:line="16" pos:column="56">_currentMatchCollection</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="17" pos:column="9">private</specifier> <name pos:line="17" pos:column="17">DateTime</name></type> <name pos:line="17" pos:column="26">_dateCreated</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="18" pos:column="9">private</specifier> <name pos:line="18" pos:column="17">string</name></type> <name pos:line="18" pos:column="24">_projectName</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="19" pos:column="9">private</specifier> <name pos:line="19" pos:column="17">int</name></type> <name pos:line="19" pos:column="21">_sampleSize</name></decl>;</decl_stmt>

        <constructor><specifier pos:line="21" pos:column="9">public</specifier> <name pos:line="21" pos:column="16">MethodCallSample</name><parameter_list pos:line="21" pos:column="32">(<param><decl><type><name pos:line="21" pos:column="33">int</name></type> <name pos:line="21" pos:column="37">sampleSize</name></decl></param>)</parameter_list>
            <member_list pos:line="22" pos:column="13">: <call><name pos:line="22" pos:column="15">this</name><argument_list pos:line="22" pos:column="19">(<argument><expr><name pos:line="22" pos:column="20">null</name></expr></argument>, <argument><expr><name pos:line="22" pos:column="26">null</name></expr></argument>, <argument><expr><name pos:line="22" pos:column="32">sampleSize</name></expr></argument>)</argument_list></call> </member_list><block pos:line="22" pos:column="44">{
        }</block></constructor>

        <constructor><specifier pos:line="25" pos:column="9">public</specifier> <name pos:line="25" pos:column="16">MethodCallSample</name><parameter_list pos:line="25" pos:column="32">(<param><decl><type><name pos:line="25" pos:column="33">SrcMLArchive</name></type> <name pos:line="25" pos:column="46">archive</name></decl></param>, <param><decl><type><name pos:line="25" pos:column="55">AbstractWorkingSet</name></type> <name pos:line="25" pos:column="74">data</name></decl></param>, <param><decl><type><name pos:line="25" pos:column="80">int</name></type> <name pos:line="25" pos:column="84">sampleSize</name></decl></param>)</parameter_list> <block pos:line="25" pos:column="96">{
            <expr_stmt><expr><name><name pos:line="26" pos:column="13">this</name><op:operator pos:line="26" pos:column="17">.</op:operator><name pos:line="26" pos:column="18">Archive</name></name> <op:operator pos:line="26" pos:column="26">=</op:operator> <name pos:line="26" pos:column="28">archive</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="27" pos:column="13">this</name><op:operator pos:line="27" pos:column="17">.</op:operator><name pos:line="27" pos:column="18">Data</name></name> <op:operator pos:line="27" pos:column="23">=</op:operator> <name pos:line="27" pos:column="25">data</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="28" pos:column="13">this</name><op:operator pos:line="28" pos:column="17">.</op:operator><name pos:line="28" pos:column="18">Date</name></name> <op:operator pos:line="28" pos:column="23">=</op:operator> <name><name pos:line="28" pos:column="25">DateTime</name><op:operator pos:line="28" pos:column="33">.</op:operator><name pos:line="28" pos:column="34">Now</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="29" pos:column="13">this</name><op:operator pos:line="29" pos:column="17">.</op:operator><name pos:line="29" pos:column="18">_projectName</name></name> <op:operator pos:line="29" pos:column="31">=</op:operator> <name><name pos:line="29" pos:column="33">string</name><op:operator pos:line="29" pos:column="39">.</op:operator><name pos:line="29" pos:column="40">Empty</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="30" pos:column="13">this</name><op:operator pos:line="30" pos:column="17">.</op:operator><name pos:line="30" pos:column="18">SampleSize</name></name> <op:operator pos:line="30" pos:column="29">=</op:operator> <name pos:line="30" pos:column="31">sampleSize</name></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="32" pos:column="13">FirstMatchIsValid</name> <op:operator pos:line="32" pos:column="31">=</op:operator> <op:operator pos:line="32" pos:column="33">new</op:operator> <call><name pos:line="32" pos:column="37">Statistic</name><argument_list pos:line="32" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="32" pos:column="47">"FirstMatchIsValid"</lit:literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="68">SampleSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="33" pos:column="13">HasMatches</name> <op:operator pos:line="33" pos:column="24">=</op:operator> <op:operator pos:line="33" pos:column="26">new</op:operator> <call><name pos:line="33" pos:column="30">Statistic</name><argument_list pos:line="33" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="33" pos:column="40">"HasMatches"</lit:literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="54">SampleSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="34" pos:column="13">HasNoMatches</name> <op:operator pos:line="34" pos:column="26">=</op:operator> <op:operator pos:line="34" pos:column="28">new</op:operator> <call><name pos:line="34" pos:column="32">Statistic</name><argument_list pos:line="34" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="34" pos:column="42">"HasNoMatches"</lit:literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="58">SampleSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="35" pos:column="13">IsExternal</name> <op:operator pos:line="35" pos:column="24">=</op:operator> <op:operator pos:line="35" pos:column="26">new</op:operator> <call><name pos:line="35" pos:column="30">Statistic</name><argument_list pos:line="35" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="35" pos:column="40">"IsExternal"</lit:literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="54">SampleSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name pos:line="37" pos:column="13">FirstMatchIsValid</name><op:operator pos:line="37" pos:column="30">.</op:operator><name pos:line="37" pos:column="31">PropertyChanged</name></name> <op:operator pos:line="37" pos:column="47">+=</op:operator> <name pos:line="37" pos:column="50">StatisticChanged</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="38" pos:column="13">HasMatches</name><op:operator pos:line="38" pos:column="23">.</op:operator><name pos:line="38" pos:column="24">PropertyChanged</name></name> <op:operator pos:line="38" pos:column="40">+=</op:operator> <name pos:line="38" pos:column="43">StatisticChanged</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="39" pos:column="13">HasNoMatches</name><op:operator pos:line="39" pos:column="25">.</op:operator><name pos:line="39" pos:column="26">PropertyChanged</name></name> <op:operator pos:line="39" pos:column="42">+=</op:operator> <name pos:line="39" pos:column="45">StatisticChanged</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="40" pos:column="13">IsExternal</name><op:operator pos:line="40" pos:column="23">.</op:operator><name pos:line="40" pos:column="24">PropertyChanged</name></name> <op:operator pos:line="40" pos:column="40">+=</op:operator> <name pos:line="40" pos:column="43">StatisticChanged</name></expr>;</expr_stmt>
        }</block></constructor>

        <decl_stmt><decl><type><specifier pos:line="43" pos:column="9">public</specifier> <specifier pos:line="43" pos:column="16">event</specifier> <name pos:line="43" pos:column="22">PropertyChangedEventHandler</name></type> <name pos:line="43" pos:column="50">PropertyChanged</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="45" pos:column="9">public</specifier> <name pos:line="45" pos:column="16">SrcMLArchive</name></type> <name pos:line="45" pos:column="29">Archive</name> <block pos:line="45" pos:column="37">{ <function_decl><name pos:line="45" pos:column="39">get</name>;</function_decl> <function_decl><name pos:line="45" pos:column="44">set</name>;</function_decl> }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="47" pos:column="9">public</specifier> <name><name pos:line="47" pos:column="16">ObservableCollection</name><argument_list pos:line="47" pos:column="36">&lt;<argument><name pos:line="47" pos:column="37">MethodCall</name></argument>&gt;</argument_list></name></type> <name pos:line="47" pos:column="49">CallSample</name> <block pos:line="47" pos:column="60">{
            <function><name pos:line="48" pos:column="13">get</name> <block pos:line="48" pos:column="17">{ <return pos:line="48" pos:column="19">return <expr><name><name pos:line="48" pos:column="26">this</name><op:operator pos:line="48" pos:column="30">.</op:operator><name pos:line="48" pos:column="31">_callSampleCollection</name></name></expr>;</return> }</block></function>
            <function><name pos:line="49" pos:column="13">set</name> <block pos:line="49" pos:column="17">{
                <if pos:line="50" pos:column="17">if<condition pos:line="50" pos:column="19">(<expr><name pos:line="50" pos:column="20">value</name> <op:operator pos:line="50" pos:column="26">!=</op:operator> <name pos:line="50" pos:column="29">_callSampleCollection</name></expr>)</condition><then pos:line="50" pos:column="51"> <block pos:line="50" pos:column="52">{
                    <expr_stmt><expr><name pos:line="51" pos:column="21">_callSampleCollection</name> <op:operator pos:line="51" pos:column="43">=</op:operator> <name pos:line="51" pos:column="45">value</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="52" pos:column="21">OnPropertyChanged</name><argument_list pos:line="52" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="52" pos:column="39">"CallSample"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="57" pos:column="9">public</specifier> <name pos:line="57" pos:column="16">MethodCall</name></type> <name pos:line="57" pos:column="27">CurrentCall</name> <block pos:line="57" pos:column="39">{
            <function><name pos:line="58" pos:column="13">get</name> <block pos:line="58" pos:column="17">{ <return pos:line="58" pos:column="19">return <expr><name><name pos:line="58" pos:column="26">this</name><op:operator pos:line="58" pos:column="30">.</op:operator><name pos:line="58" pos:column="31">_currentCall</name></name></expr>;</return> }</block></function>
            <function><name pos:line="59" pos:column="13">set</name> <block pos:line="59" pos:column="17">{
                <if pos:line="60" pos:column="17">if<condition pos:line="60" pos:column="19">(<expr><name pos:line="60" pos:column="20">value</name> <op:operator pos:line="60" pos:column="26">!=</op:operator> <name pos:line="60" pos:column="29">_currentCall</name></expr>)</condition><then pos:line="60" pos:column="42"> <block pos:line="60" pos:column="43">{
                    <expr_stmt><expr><name pos:line="61" pos:column="21">_currentCall</name> <op:operator pos:line="61" pos:column="34">=</op:operator> <name pos:line="61" pos:column="36">value</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="62" pos:column="21">OnPropertyChanged</name><argument_list pos:line="62" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="62" pos:column="39">"CurrentCall"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="67" pos:column="9">public</specifier> <name><name pos:line="67" pos:column="16">ObservableCollection</name><argument_list pos:line="67" pos:column="36">&lt;<argument><name pos:line="67" pos:column="37">MethodDefinition</name></argument>&gt;</argument_list></name></type> <name pos:line="67" pos:column="55">CurrentMatches</name> <block pos:line="67" pos:column="70">{
            <function><name pos:line="68" pos:column="13">get</name> <block pos:line="68" pos:column="17">{ <return pos:line="68" pos:column="19">return <expr><name><name pos:line="68" pos:column="26">this</name><op:operator pos:line="68" pos:column="30">.</op:operator><name pos:line="68" pos:column="31">_currentMatchCollection</name></name></expr>;</return> }</block></function>
            <function><name pos:line="69" pos:column="13">set</name> <block pos:line="69" pos:column="17">{
                <if pos:line="70" pos:column="17">if<condition pos:line="70" pos:column="19">(<expr><name pos:line="70" pos:column="20">value</name> <op:operator pos:line="70" pos:column="26">!=</op:operator> <name pos:line="70" pos:column="29">_currentMatchCollection</name></expr>)</condition><then pos:line="70" pos:column="53"> <block pos:line="70" pos:column="54">{
                    <expr_stmt><expr><name pos:line="71" pos:column="21">_currentMatchCollection</name> <op:operator pos:line="71" pos:column="45">=</op:operator> <name pos:line="71" pos:column="47">value</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="72" pos:column="21">OnPropertyChanged</name><argument_list pos:line="72" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="72" pos:column="39">"CurrentMatches"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="77" pos:column="9">public</specifier> <name pos:line="77" pos:column="16">AbstractWorkingSet</name></type> <name pos:line="77" pos:column="35">Data</name> <block pos:line="77" pos:column="40">{ <function_decl><name pos:line="77" pos:column="42">get</name>;</function_decl> <function_decl><name pos:line="77" pos:column="47">set</name>;</function_decl> }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="79" pos:column="9">public</specifier> <name pos:line="79" pos:column="16">DateTime</name></type> <name pos:line="79" pos:column="25">Date</name> <block pos:line="79" pos:column="30">{
            <function><name pos:line="80" pos:column="13">get</name> <block pos:line="80" pos:column="17">{ <return pos:line="80" pos:column="19">return <expr><name><name pos:line="80" pos:column="26">this</name><op:operator pos:line="80" pos:column="30">.</op:operator><name pos:line="80" pos:column="31">_dateCreated</name></name></expr>;</return> }</block></function>
            <function><name pos:line="81" pos:column="13">set</name> <block pos:line="81" pos:column="17">{
                <if pos:line="82" pos:column="17">if<condition pos:line="82" pos:column="19">(<expr><name pos:line="82" pos:column="20">value</name> <op:operator pos:line="82" pos:column="26">!=</op:operator> <name pos:line="82" pos:column="29">_dateCreated</name></expr>)</condition><then pos:line="82" pos:column="42"> <block pos:line="82" pos:column="43">{
                    <expr_stmt><expr><name pos:line="83" pos:column="21">_dateCreated</name> <op:operator pos:line="83" pos:column="34">=</op:operator> <name pos:line="83" pos:column="36">value</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="84" pos:column="21">OnPropertyChanged</name><argument_list pos:line="84" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="84" pos:column="39">"Date"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="89" pos:column="9">public</specifier> <name pos:line="89" pos:column="16">Statistic</name></type> <name pos:line="89" pos:column="26">FirstMatchIsValid</name> <block pos:line="89" pos:column="44">{ <function_decl><name pos:line="89" pos:column="46">get</name>;</function_decl> <function_decl><specifier pos:line="89" pos:column="51">private</specifier> <name pos:line="89" pos:column="59">set</name>;</function_decl> }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="91" pos:column="9">public</specifier> <name pos:line="91" pos:column="16">Statistic</name></type> <name pos:line="91" pos:column="26">HasMatches</name> <block pos:line="91" pos:column="37">{ <function_decl><name pos:line="91" pos:column="39">get</name>;</function_decl> <function_decl><specifier pos:line="91" pos:column="44">private</specifier> <name pos:line="91" pos:column="52">set</name>;</function_decl> }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="93" pos:column="9">public</specifier> <name pos:line="93" pos:column="16">Statistic</name></type> <name pos:line="93" pos:column="26">HasNoMatches</name> <block pos:line="93" pos:column="39">{ <function_decl><name pos:line="93" pos:column="41">get</name>;</function_decl> <function_decl><specifier pos:line="93" pos:column="46">private</specifier> <name pos:line="93" pos:column="54">set</name>;</function_decl> }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="95" pos:column="9">public</specifier> <name pos:line="95" pos:column="16">Statistic</name></type> <name pos:line="95" pos:column="26">IsExternal</name> <block pos:line="95" pos:column="37">{ <function_decl><name pos:line="95" pos:column="39">get</name>;</function_decl> <function_decl><specifier pos:line="95" pos:column="44">private</specifier> <name pos:line="95" pos:column="52">set</name>;</function_decl> }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="97" pos:column="9">public</specifier> <name pos:line="97" pos:column="16">string</name></type> <name pos:line="97" pos:column="23">ProjectName</name> <block pos:line="97" pos:column="35">{
            <function><name pos:line="98" pos:column="13">get</name> <block pos:line="98" pos:column="17">{ <return pos:line="98" pos:column="19">return <expr><name><name pos:line="98" pos:column="26">this</name><op:operator pos:line="98" pos:column="30">.</op:operator><name pos:line="98" pos:column="31">_projectName</name></name></expr>;</return> }</block></function>
            <function><name pos:line="99" pos:column="13">set</name> <block pos:line="99" pos:column="17">{
                <if pos:line="100" pos:column="17">if<condition pos:line="100" pos:column="19">(<expr><name pos:line="100" pos:column="20">value</name> <op:operator pos:line="100" pos:column="26">!=</op:operator> <name pos:line="100" pos:column="29">_projectName</name></expr>)</condition><then pos:line="100" pos:column="42"> <block pos:line="100" pos:column="43">{
                    <expr_stmt><expr><name pos:line="101" pos:column="21">_projectName</name> <op:operator pos:line="101" pos:column="34">=</op:operator> <name pos:line="101" pos:column="36">value</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="102" pos:column="21">OnPropertyChanged</name><argument_list pos:line="102" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="102" pos:column="39">"ProjectName"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="107" pos:column="9">public</specifier> <name pos:line="107" pos:column="16">int</name></type> <name pos:line="107" pos:column="20">SampleSize</name> <block pos:line="107" pos:column="31">{
            <function><name pos:line="108" pos:column="13">get</name> <block pos:line="108" pos:column="17">{ <return pos:line="108" pos:column="19">return <expr><name><name pos:line="108" pos:column="26">this</name><op:operator pos:line="108" pos:column="30">.</op:operator><name pos:line="108" pos:column="31">_sampleSize</name></name></expr>;</return> }</block></function>
            <function><name pos:line="109" pos:column="13">set</name> <block pos:line="109" pos:column="17">{
                <if pos:line="110" pos:column="17">if<condition pos:line="110" pos:column="19">(<expr><name pos:line="110" pos:column="20">value</name> <op:operator pos:line="110" pos:column="26">!=</op:operator> <name pos:line="110" pos:column="29">_sampleSize</name></expr>)</condition><then pos:line="110" pos:column="41"> <block pos:line="110" pos:column="42">{
                    <expr_stmt><expr><name pos:line="111" pos:column="21">_sampleSize</name> <op:operator pos:line="111" pos:column="33">=</op:operator> <name pos:line="111" pos:column="35">value</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="112" pos:column="21">OnPropertyChanged</name><argument_list pos:line="112" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="112" pos:column="39">"SampleSize"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></function>
        }</block></decl></decl_stmt>

        <function><type><specifier pos:line="117" pos:column="9">public</specifier> <name><name pos:line="117" pos:column="16">ObservableCollection</name><argument_list pos:line="117" pos:column="36">&lt;<argument><name pos:line="117" pos:column="37">MethodCall</name></argument>&gt;</argument_list></name></type> <name pos:line="117" pos:column="49">GetSampleOfMethodCalls</name><parameter_list pos:line="117" pos:column="71">(<param><decl><type><name pos:line="117" pos:column="72">BackgroundWorker</name></type> <name pos:line="117" pos:column="89">worker</name></decl></param>)</parameter_list> <block pos:line="117" pos:column="97">{
            <comment type="line" pos:line="118" pos:column="13">// TODO reimplement once the MethodCalls property has been added</comment>
            <comment type="line" pos:line="119" pos:column="13">//try {</comment>
            <comment type="line" pos:line="120" pos:column="13">//    NamespaceDefinition globalScope;</comment>
            <comment type="line" pos:line="121" pos:column="13">//    if(Data.TryLockGlobalScope(Timeout.Infinite, out globalScope)) {</comment>
            <comment type="line" pos:line="122" pos:column="13">//        var allCalls = from scope in globalScope.GetDescendants()</comment>
            <comment type="line" pos:line="123" pos:column="13">//                       from call in scope.MethodCalls</comment>
            <comment type="line" pos:line="124" pos:column="13">//                       select call;</comment>
            <comment type="line" pos:line="125" pos:column="13">//        int numberOfCalls = allCalls.Count();</comment>

            <comment type="line" pos:line="127" pos:column="13">//        if(null != worker) {</comment>
            <comment type="line" pos:line="128" pos:column="13">//            worker.ReportProgress(0, String.Format("Found {0} calls", numberOfCalls));</comment>
            <comment type="line" pos:line="129" pos:column="13">//        }</comment>

            <comment type="line" pos:line="131" pos:column="13">//        var rng = new Random();</comment>
            <comment type="line" pos:line="132" pos:column="13">//        var randomCallSample = allCalls.OrderBy(x =&gt; rng.Next()).Take(SampleSize);</comment>

            <comment type="line" pos:line="134" pos:column="13">//        var calls = from call in randomCallSample</comment>
            <comment type="line" pos:line="135" pos:column="13">//                    select new MethodCall(Archive, call);</comment>

            <comment type="line" pos:line="137" pos:column="13">//        var callCollection = new ObservableCollection&lt;MethodCall&gt;(calls.Take(SampleSize));</comment>
            <comment type="line" pos:line="138" pos:column="13">//        if(null != worker) {</comment>
            <comment type="line" pos:line="139" pos:column="13">//            worker.ReportProgress(100, String.Format("Showing {0} / {1} calls", SampleSize, numberOfCalls));</comment>
            <comment type="line" pos:line="140" pos:column="13">//        }</comment>
            <comment type="line" pos:line="141" pos:column="13">//        return callCollection;</comment>
            <comment type="line" pos:line="142" pos:column="13">//    }</comment>
            <comment type="line" pos:line="143" pos:column="13">//} finally {</comment>
            <comment type="line" pos:line="144" pos:column="13">//    Data.ReleaseGlobalScopeLock();</comment>
            <comment type="line" pos:line="145" pos:column="13">//}</comment>
            <comment type="line" pos:line="146" pos:column="13">//return null;</comment>
            <throw pos:line="147" pos:column="13">throw <expr><op:operator pos:line="147" pos:column="19">new</op:operator> <call><name pos:line="147" pos:column="23">NotImplementedException</name><argument_list pos:line="147" pos:column="46">()</argument_list></call></expr>;</throw>
        }</block></function>

        <function><type><specifier pos:line="150" pos:column="9">public</specifier> <name pos:line="150" pos:column="16">void</name></type> <name pos:line="150" pos:column="21">StartMonitoringCalls</name><parameter_list pos:line="150" pos:column="41">()</parameter_list> <block pos:line="150" pos:column="44">{
            <expr_stmt><expr><call><name><name pos:line="151" pos:column="13">FirstMatchIsValid</name><op:operator pos:line="151" pos:column="30">.</op:operator><name pos:line="151" pos:column="31">Connect</name></name><argument_list pos:line="151" pos:column="38">(<argument><expr><name pos:line="151" pos:column="39">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="152" pos:column="13">HasMatches</name><op:operator pos:line="152" pos:column="23">.</op:operator><name pos:line="152" pos:column="24">Connect</name></name><argument_list pos:line="152" pos:column="31">(<argument><expr><name pos:line="152" pos:column="32">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="153" pos:column="13">HasNoMatches</name><op:operator pos:line="153" pos:column="25">.</op:operator><name pos:line="153" pos:column="26">Connect</name></name><argument_list pos:line="153" pos:column="33">(<argument><expr><name pos:line="153" pos:column="34">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="154" pos:column="13">IsExternal</name><op:operator pos:line="154" pos:column="23">.</op:operator><name pos:line="154" pos:column="24">Connect</name></name><argument_list pos:line="154" pos:column="31">(<argument><expr><name pos:line="154" pos:column="32">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="157" pos:column="9">public</specifier> <name pos:line="157" pos:column="16">void</name></type> <name pos:line="157" pos:column="21">WriteStatistics</name><parameter_list pos:line="157" pos:column="36">(<param><decl><type><name pos:line="157" pos:column="37">string</name></type> <name pos:line="157" pos:column="44">fileName</name></decl></param>)</parameter_list> <block pos:line="157" pos:column="54">{
            <decl_stmt><decl><type><name><name pos:line="158" pos:column="13">List</name><argument_list pos:line="158" pos:column="17">&lt;<argument><name pos:line="158" pos:column="18">string</name></argument>&gt;</argument_list></name></type> <name pos:line="158" pos:column="26">contents</name> <init pos:line="158" pos:column="35">= <expr><op:operator pos:line="158" pos:column="37">new</op:operator> <call><name><name pos:line="158" pos:column="41">List</name><argument_list pos:line="158" pos:column="45">&lt;<argument><name pos:line="158" pos:column="46">string</name></argument>&gt;</argument_list></name><argument_list pos:line="158" pos:column="53">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="159" pos:column="13">if<condition pos:line="159" pos:column="15">(<expr><call><name><name pos:line="159" pos:column="16">File</name><op:operator pos:line="159" pos:column="20">.</op:operator><name pos:line="159" pos:column="21">Exists</name></name><argument_list pos:line="159" pos:column="27">(<argument><expr><name pos:line="159" pos:column="28">fileName</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="159" pos:column="38"> <block pos:line="159" pos:column="39">{
            }</block></then></if>
            <expr_stmt><expr><call><name><name pos:line="161" pos:column="13">contents</name><op:operator pos:line="161" pos:column="21">.</op:operator><name pos:line="161" pos:column="22">Add</name></name><argument_list pos:line="161" pos:column="25">(<argument><expr><call><name><name pos:line="161" pos:column="26">String</name><op:operator pos:line="161" pos:column="32">.</op:operator><name pos:line="161" pos:column="33">Format</name></name><argument_list pos:line="161" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="161" pos:column="40">""</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="162" pos:column="13">File</name><op:operator pos:line="162" pos:column="17">.</op:operator><name pos:line="162" pos:column="18">WriteAllLines</name></name><argument_list pos:line="162" pos:column="31">(<argument><expr><name pos:line="162" pos:column="32">fileName</name></expr></argument>, <argument><expr><name pos:line="162" pos:column="42">contents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="165" pos:column="9">protected</specifier> <name pos:line="165" pos:column="19">void</name></type> <name pos:line="165" pos:column="24">OnPropertyChanged</name><parameter_list pos:line="165" pos:column="41">(<param><decl><type><name pos:line="165" pos:column="42">string</name></type> <name pos:line="165" pos:column="49">name</name></decl></param>)</parameter_list> <block pos:line="165" pos:column="55">{
            <decl_stmt><decl><type><name pos:line="166" pos:column="13">PropertyChangedEventHandler</name></type> <name pos:line="166" pos:column="41">handler</name> <init pos:line="166" pos:column="49">= <expr><name pos:line="166" pos:column="51">PropertyChanged</name></expr></init></decl>;</decl_stmt>
            <if pos:line="167" pos:column="13">if<condition pos:line="167" pos:column="15">(<expr><name pos:line="167" pos:column="16">handler</name> <op:operator pos:line="167" pos:column="24">!=</op:operator> <name pos:line="167" pos:column="27">null</name></expr>)</condition><then pos:line="167" pos:column="32"> <block pos:line="167" pos:column="33">{
                <expr_stmt><expr><call><name pos:line="168" pos:column="17">handler</name><argument_list pos:line="168" pos:column="24">(<argument><expr><name pos:line="168" pos:column="25">this</name></expr></argument>, <argument><expr><op:operator pos:line="168" pos:column="31">new</op:operator> <call><name pos:line="168" pos:column="35">PropertyChangedEventArgs</name><argument_list pos:line="168" pos:column="59">(<argument><expr><name pos:line="168" pos:column="60">name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="172" pos:column="9">private</specifier> <name pos:line="172" pos:column="17">void</name></type> <name pos:line="172" pos:column="22">StatisticChanged</name><parameter_list pos:line="172" pos:column="38">(<param><decl><type><name pos:line="172" pos:column="39">object</name></type> <name pos:line="172" pos:column="46">sender</name></decl></param>, <param><decl><type><name pos:line="172" pos:column="54">PropertyChangedEventArgs</name></type> <name pos:line="172" pos:column="79">e</name></decl></param>)</parameter_list> <block pos:line="172" pos:column="82">{
            <expr_stmt><expr><call><name pos:line="173" pos:column="13">OnPropertyChanged</name><argument_list pos:line="173" pos:column="30">(<argument><expr><op:operator pos:line="173" pos:column="31">(</op:operator><name pos:line="173" pos:column="32">sender</name> <op:operator pos:line="173" pos:column="39">as</op:operator> <name pos:line="173" pos:column="42">Statistic</name><op:operator pos:line="173" pos:column="51">)</op:operator><op:operator pos:line="173" pos:column="52">.</op:operator><name pos:line="173" pos:column="53">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
