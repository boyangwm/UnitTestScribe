<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\VisualStudio\ABB.SrcML.VisualStudio.PreviewAddIn\TransformPreviewControl.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2011 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">System</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Collections</name><op:operator pos:line="13" pos:column="25">.</op:operator><name pos:line="13" pos:column="26">Generic</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">IO</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Linq</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Reflection</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Security</name><op:operator pos:line="17" pos:column="22">.</op:operator><name pos:line="17" pos:column="23">Permissions</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Text</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">System</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">Windows</name><op:operator pos:line="19" pos:column="21">.</op:operator><name pos:line="19" pos:column="22">Forms</name></name>;</using>
<using pos:line="20" pos:column="1">using <name><name pos:line="20" pos:column="7">System</name><op:operator pos:line="20" pos:column="13">.</op:operator><name pos:line="20" pos:column="14">Xml</name><op:operator pos:line="20" pos:column="17">.</op:operator><name pos:line="20" pos:column="18">Linq</name></name>;</using>
<using pos:line="21" pos:column="1">using <name><name pos:line="21" pos:column="7">System</name><op:operator pos:line="21" pos:column="13">.</op:operator><name pos:line="21" pos:column="14">ComponentModel</name></name>;</using>
<using pos:line="22" pos:column="1">using <name><name pos:line="22" pos:column="7">System</name><op:operator pos:line="22" pos:column="13">.</op:operator><name pos:line="22" pos:column="14">Xml</name></name>;</using>
<using pos:line="23" pos:column="1">using <name><name pos:line="23" pos:column="7">SDML</name><op:operator pos:line="23" pos:column="11">.</op:operator><name pos:line="23" pos:column="12">SrcMLVSAddin</name><op:operator pos:line="23" pos:column="24">.</op:operator><name pos:line="23" pos:column="25">SyntaticCategory</name></name>;</using>

<namespace pos:line="25" pos:column="1">namespace <name><name pos:line="25" pos:column="11">ABB</name><op:operator pos:line="25" pos:column="14">.</op:operator><name pos:line="25" pos:column="15">SrcML</name><op:operator pos:line="25" pos:column="20">.</op:operator><name pos:line="25" pos:column="21">VisualStudio</name><op:operator pos:line="25" pos:column="33">.</op:operator><name pos:line="25" pos:column="34">PreviewAddIn</name></name>
<block pos:line="26" pos:column="1">{
    <comment type="line" pos:line="27" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="28" pos:column="5">/// Summary description for TransformPreviewControl.</comment>
    <comment type="line" pos:line="29" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="30" pos:column="5">public</specifier> <specifier pos:line="30" pos:column="12">partial</specifier> class <name pos:line="30" pos:column="26">TransformPreviewControl</name> <super pos:line="30" pos:column="50">: <name pos:line="30" pos:column="52">UserControl</name></super>
    <block pos:line="31" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="32" pos:column="9">public</specifier> <specifier pos:line="32" pos:column="16">static</specifier> <name pos:line="32" pos:column="23">string</name></type> <name pos:line="32" pos:column="30">GUID</name> <init pos:line="32" pos:column="35">= <expr><lit:literal type="string" pos:line="32" pos:column="37">"{C2FFB509-8A43-4bf6-B40C-AAF7648A7D28}"</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="33" pos:column="9">public</specifier> <name><name pos:line="33" pos:column="16">EventHandler</name><argument_list pos:line="33" pos:column="28">&lt;<argument><name pos:line="33" pos:column="29">SrcMLFileCreatedEventArgs</name></argument>&gt;</argument_list></name></type> <name pos:line="33" pos:column="56">SrcMLFileCreatedEvent</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="34" pos:column="9">public</specifier> <name><name pos:line="34" pos:column="16">EventHandler</name><argument_list pos:line="34" pos:column="28">&lt;<argument><name pos:line="34" pos:column="29">OpenFileEventArgs</name></argument>&gt;</argument_list></name></type> <name pos:line="34" pos:column="48">OpenFileEvent</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="36" pos:column="9">private</specifier> <name pos:line="36" pos:column="17">SrcML</name></type> <name pos:line="36" pos:column="23">srcml</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="37" pos:column="9">private</specifier> <name pos:line="37" pos:column="17">DirectoryInfo</name></type> <name pos:line="37" pos:column="31">projectSrcmlFolder</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="38" pos:column="9">private</specifier> <name><name pos:line="38" pos:column="17">BindingList</name><argument_list pos:line="38" pos:column="28">&lt;<argument><name pos:line="38" pos:column="29">DirectoryInfo</name></argument>&gt;</argument_list></name></type> <name pos:line="38" pos:column="44">sourceDirectories</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="39" pos:column="9">private</specifier> <name><name pos:line="39" pos:column="17">Dictionary</name><argument_list pos:line="39" pos:column="27">&lt;<argument><name pos:line="39" pos:column="28">DirectoryInfo</name></argument>, <argument><name pos:line="39" pos:column="43">string</name></argument>&gt;</argument_list></name></type> <name pos:line="39" pos:column="51">srcmlDict</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="41" pos:column="9">private</specifier> <name><name pos:line="41" pos:column="17">BindingList</name><argument_list pos:line="41" pos:column="28">&lt;<argument><name pos:line="41" pos:column="29">DirectoryInfo</name></argument>&gt;</argument_list></name></type> <name pos:line="41" pos:column="44">outputSourceDirectoryList</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="43" pos:column="9">private</specifier> <name pos:line="43" pos:column="17">bool</name></type> <name pos:line="43" pos:column="22">generatingXML</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="44" pos:column="9">private</specifier> <name pos:line="44" pos:column="17">bool</name></type> <name pos:line="44" pos:column="22">generatingSource</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="45" pos:column="9">private</specifier> <name pos:line="45" pos:column="17">bool</name></type> <name pos:line="45" pos:column="22">queryingXML</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="47" pos:column="9">private</specifier> <name pos:line="47" pos:column="17">SrcMLFile</name></type> <name pos:line="47" pos:column="27">selectedDoc</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="48" pos:column="9">private</specifier> <name><name pos:line="48" pos:column="17">List</name><argument_list pos:line="48" pos:column="21">&lt;<argument><name pos:line="48" pos:column="22">DataCell</name></argument>&gt;</argument_list></name></type> <name pos:line="48" pos:column="32">data</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="49" pos:column="9">private</specifier> <name pos:line="49" pos:column="17">SyntaticCategoryDataModel</name></type> <name pos:line="49" pos:column="43">categories</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="50" pos:column="9">private</specifier> <name pos:line="50" pos:column="17">ITransform</name></type> <name pos:line="50" pos:column="28">selectedTransform</name></decl>;</decl_stmt>

        <constructor><specifier pos:line="52" pos:column="9">public</specifier> <name pos:line="52" pos:column="16">TransformPreviewControl</name><parameter_list pos:line="52" pos:column="39">()</parameter_list>
        <block pos:line="53" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="54" pos:column="13">InitializeComponent</name><argument_list pos:line="54" pos:column="32">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name pos:line="56" pos:column="13">dataGridView1</name><op:operator pos:line="56" pos:column="26">.</op:operator><name pos:line="56" pos:column="27">AutoGenerateColumns</name></name> <op:operator pos:line="56" pos:column="47">=</op:operator> <lit:literal type="boolean" pos:line="56" pos:column="49">false</lit:literal></expr>;</expr_stmt>

            <try pos:line="58" pos:column="13">try
            <block pos:line="59" pos:column="13">{
                <expr_stmt><expr><name pos:line="60" pos:column="17">srcml</name> <op:operator pos:line="60" pos:column="23">=</op:operator> <op:operator pos:line="60" pos:column="25">new</op:operator> <call><name pos:line="60" pos:column="29">SrcML</name><argument_list pos:line="60" pos:column="34">()</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch pos:line="62" pos:column="13">catch<parameter_list pos:line="62" pos:column="18">(<param><decl><type><name pos:line="62" pos:column="19">FileNotFoundException</name></type> <name pos:line="62" pos:column="41">e</name></decl></param>)</parameter_list>
            <block pos:line="63" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="64" pos:column="17">string</name></type> <name pos:line="64" pos:column="24">msg</name> <init pos:line="64" pos:column="28">= <expr><call><name><name pos:line="64" pos:column="30">String</name><op:operator pos:line="64" pos:column="36">.</op:operator><name pos:line="64" pos:column="37">Format</name></name><argument_list pos:line="64" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="64" pos:column="44">"{0}: {1}\n{2}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="64" pos:column="61">e</name><op:operator pos:line="64" pos:column="62">.</op:operator><name pos:line="64" pos:column="63">Source</name></name></expr></argument>, <argument><expr><name><name pos:line="64" pos:column="71">e</name><op:operator pos:line="64" pos:column="72">.</op:operator><name pos:line="64" pos:column="73">Message</name></name></expr></argument>, <argument><expr><name><name pos:line="64" pos:column="82">e</name><op:operator pos:line="64" pos:column="83">.</op:operator><name pos:line="64" pos:column="84">StackTrace</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="65" pos:column="17">if <condition pos:line="65" pos:column="20">(<expr><name><name pos:line="65" pos:column="21">e</name><op:operator pos:line="65" pos:column="22">.</op:operator><name pos:line="65" pos:column="23">InnerException</name></name> <op:operator pos:line="65" pos:column="38">!=</op:operator> <name pos:line="65" pos:column="41">null</name></expr>)</condition><then pos:line="65" pos:column="46">
                    <expr_stmt><expr><name pos:line="66" pos:column="21">msg</name> <op:operator pos:line="66" pos:column="25">+=</op:operator> <call><name><name pos:line="66" pos:column="28">String</name><op:operator pos:line="66" pos:column="34">.</op:operator><name pos:line="66" pos:column="35">Format</name></name><argument_list pos:line="66" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="66" pos:column="42">"\n{0}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="66" pos:column="51">e</name><op:operator pos:line="66" pos:column="52">.</op:operator><name pos:line="66" pos:column="53">InnerException</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></catch></try>

            <expr_stmt><expr><name><name pos:line="69" pos:column="13">AppDomain</name><op:operator pos:line="69" pos:column="22">.</op:operator><name pos:line="69" pos:column="23">CurrentDomain</name><op:operator pos:line="69" pos:column="36">.</op:operator><name pos:line="69" pos:column="37">AssemblyResolve</name></name> <op:operator pos:line="69" pos:column="53">+=</op:operator> <name pos:line="69" pos:column="56">CurrentDomain_AssemblyResolve</name></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="71" pos:column="13">projectSrcmlFolder</name> <op:operator pos:line="71" pos:column="32">=</op:operator> <name pos:line="71" pos:column="34">null</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="72" pos:column="13">sourceDirectories</name> <op:operator pos:line="72" pos:column="31">=</op:operator> <op:operator pos:line="72" pos:column="33">new</op:operator> <call><name><name pos:line="72" pos:column="37">BindingList</name><argument_list pos:line="72" pos:column="48">&lt;<argument><name pos:line="72" pos:column="49">DirectoryInfo</name></argument>&gt;</argument_list></name><argument_list pos:line="72" pos:column="63">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="73" pos:column="13">srcmlDict</name> <op:operator pos:line="73" pos:column="23">=</op:operator> <op:operator pos:line="73" pos:column="25">new</op:operator> <call><name><name pos:line="73" pos:column="29">Dictionary</name><argument_list pos:line="73" pos:column="39">&lt;<argument><name pos:line="73" pos:column="40">DirectoryInfo</name></argument>, <argument><name pos:line="73" pos:column="55">string</name></argument>&gt;</argument_list></name><argument_list pos:line="73" pos:column="62">(<argument><expr><op:operator pos:line="73" pos:column="63">new</op:operator> <call><name pos:line="73" pos:column="67">DirectoryInfoComparer</name><argument_list pos:line="73" pos:column="88">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="74" pos:column="13">outputSourceDirectoryList</name> <op:operator pos:line="74" pos:column="39">=</op:operator> <op:operator pos:line="74" pos:column="41">new</op:operator> <call><name><name pos:line="74" pos:column="45">BindingList</name><argument_list pos:line="74" pos:column="56">&lt;<argument><name pos:line="74" pos:column="57">DirectoryInfo</name></argument>&gt;</argument_list></name><argument_list pos:line="74" pos:column="71">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name pos:line="76" pos:column="13">inputFolderComboBox</name><op:operator pos:line="76" pos:column="32">.</op:operator><name pos:line="76" pos:column="33">DataSource</name></name> <op:operator pos:line="76" pos:column="44">=</op:operator> <name pos:line="76" pos:column="46">sourceDirectories</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="77" pos:column="13">inputFolderComboBox</name><op:operator pos:line="77" pos:column="32">.</op:operator><name pos:line="77" pos:column="33">DisplayMember</name></name> <op:operator pos:line="77" pos:column="47">=</op:operator> <lit:literal type="string" pos:line="77" pos:column="49">"FullName"</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="78" pos:column="13">inputFolderComboBox</name><op:operator pos:line="78" pos:column="32">.</op:operator><name pos:line="78" pos:column="33">SelectedIndex</name></name> <op:operator pos:line="78" pos:column="47">=</op:operator> <op:operator pos:line="78" pos:column="49">-</op:operator><lit:literal type="number" pos:line="78" pos:column="50">1</lit:literal></expr>;</expr_stmt>

            <expr_stmt><expr><name><name pos:line="80" pos:column="13">outputFolderComboBox</name><op:operator pos:line="80" pos:column="33">.</op:operator><name pos:line="80" pos:column="34">DataSource</name></name> <op:operator pos:line="80" pos:column="45">=</op:operator> <name pos:line="80" pos:column="47">outputSourceDirectoryList</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="81" pos:column="13">outputFolderComboBox</name><op:operator pos:line="81" pos:column="33">.</op:operator><name pos:line="81" pos:column="34">DisplayMember</name></name> <op:operator pos:line="81" pos:column="48">=</op:operator> <lit:literal type="string" pos:line="81" pos:column="50">"FullName"</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="82" pos:column="13">outputFolderComboBox</name><op:operator pos:line="82" pos:column="33">.</op:operator><name pos:line="82" pos:column="34">SelectedIndex</name></name> <op:operator pos:line="82" pos:column="48">=</op:operator> <op:operator pos:line="82" pos:column="50">-</op:operator><lit:literal type="number" pos:line="82" pos:column="51">1</lit:literal></expr>;</expr_stmt>

            <expr_stmt><expr><name><name pos:line="84" pos:column="13">LocationColumn</name><op:operator pos:line="84" pos:column="27">.</op:operator><name pos:line="84" pos:column="28">DataPropertyName</name></name> <op:operator pos:line="84" pos:column="45">=</op:operator> <lit:literal type="string" pos:line="84" pos:column="47">"Location"</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="85" pos:column="13">OriginalSourceColumn</name><op:operator pos:line="85" pos:column="33">.</op:operator><name pos:line="85" pos:column="34">DataPropertyName</name></name> <op:operator pos:line="85" pos:column="51">=</op:operator> <lit:literal type="string" pos:line="85" pos:column="53">"Text"</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="86" pos:column="13">TransformedSourceColumn</name><op:operator pos:line="86" pos:column="36">.</op:operator><name pos:line="86" pos:column="37">DataPropertyName</name></name> <op:operator pos:line="86" pos:column="54">=</op:operator> <lit:literal type="string" pos:line="86" pos:column="56">"TransformedText"</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="87" pos:column="13">EnabledColumn</name><op:operator pos:line="87" pos:column="26">.</op:operator><name pos:line="87" pos:column="27">DataPropertyName</name></name> <op:operator pos:line="87" pos:column="44">=</op:operator> <lit:literal type="string" pos:line="87" pos:column="46">"Enabled"</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="88" pos:column="13">setButtons</name><argument_list pos:line="88" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier pos:line="91" pos:column="9">protected</specifier> <specifier pos:line="91" pos:column="19">virtual</specifier> <name pos:line="91" pos:column="27">void</name></type> <name pos:line="91" pos:column="32">OnSrcMLFileCreatedEvent</name><parameter_list pos:line="91" pos:column="55">(<param><decl><type><name pos:line="91" pos:column="56">SrcMLFileCreatedEventArgs</name></type> <name pos:line="91" pos:column="82">e</name></decl></param>)</parameter_list>
        <block pos:line="92" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="93" pos:column="13">EventHandler</name><argument_list pos:line="93" pos:column="25">&lt;<argument><name pos:line="93" pos:column="26">SrcMLFileCreatedEventArgs</name></argument>&gt;</argument_list></name></type> <name pos:line="93" pos:column="53">handler</name> <init pos:line="93" pos:column="61">= <expr><name pos:line="93" pos:column="63">SrcMLFileCreatedEvent</name></expr></init></decl>;</decl_stmt>

            <if pos:line="95" pos:column="13">if <condition pos:line="95" pos:column="16">(<expr><name pos:line="95" pos:column="17">handler</name> <op:operator pos:line="95" pos:column="25">!=</op:operator> <name pos:line="95" pos:column="28">null</name></expr>)</condition><then pos:line="95" pos:column="33">
                <expr_stmt><expr><call><name pos:line="96" pos:column="17">handler</name><argument_list pos:line="96" pos:column="24">(<argument><expr><name pos:line="96" pos:column="25">this</name></expr></argument>, <argument><expr><name pos:line="96" pos:column="31">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></function>

        <function><type><specifier pos:line="99" pos:column="9">protected</specifier> <specifier pos:line="99" pos:column="19">virtual</specifier> <name pos:line="99" pos:column="27">void</name></type> <name pos:line="99" pos:column="32">OnOpenFileEvent</name><parameter_list pos:line="99" pos:column="47">(<param><decl><type><name pos:line="99" pos:column="48">OpenFileEventArgs</name></type> <name pos:line="99" pos:column="66">e</name></decl></param>)</parameter_list>
        <block pos:line="100" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="101" pos:column="13">EventHandler</name><argument_list pos:line="101" pos:column="25">&lt;<argument><name pos:line="101" pos:column="26">OpenFileEventArgs</name></argument>&gt;</argument_list></name></type> <name pos:line="101" pos:column="45">handler</name> <init pos:line="101" pos:column="53">= <expr><name pos:line="101" pos:column="55">OpenFileEvent</name></expr></init></decl>;</decl_stmt>
            <if pos:line="102" pos:column="13">if <condition pos:line="102" pos:column="16">(<expr><name pos:line="102" pos:column="17">handler</name> <op:operator pos:line="102" pos:column="25">!=</op:operator> <name pos:line="102" pos:column="28">null</name></expr>)</condition><then pos:line="102" pos:column="33">
                <expr_stmt><expr><call><name pos:line="103" pos:column="17">handler</name><argument_list pos:line="103" pos:column="24">(<argument><expr><name pos:line="103" pos:column="25">this</name></expr></argument>, <argument><expr><name pos:line="103" pos:column="31">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></function>

        <comment type="line" pos:line="106" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="107" pos:column="9">/// This conducts assembly resolution for the processBuiltDlls function by checking the current domain</comment>
        <comment type="line" pos:line="108" pos:column="9">/// for assembly. It is most likely used to resolve ABB.SrcML.dll which should be in the current domain</comment>
        <comment type="line" pos:line="109" pos:column="9">/// in order for the TransformPreviewControl to load in the first place.</comment>
        <comment type="line" pos:line="110" pos:column="9">/// </comment>
        <comment type="line" pos:line="111" pos:column="9">/// This problem was solved based on code from here:</comment>
        <comment type="line" pos:line="112" pos:column="9">/// http://stackoverflow.com/a/2658326/6171</comment>
        <comment type="line" pos:line="113" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="114" pos:column="9">/// &lt;param name="sender"&gt;the sender&lt;/param&gt;</comment>
        <comment type="line" pos:line="115" pos:column="9">/// &lt;param name="args"&gt;resolve event arguments&lt;/param&gt;</comment>
        <comment type="line" pos:line="116" pos:column="9">/// &lt;returns&gt;the requested assembly if it has been loaded in the current domain. null otherwise.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="117" pos:column="9">private</specifier> <name pos:line="117" pos:column="17">Assembly</name></type> <name pos:line="117" pos:column="26">CurrentDomain_AssemblyResolve</name><parameter_list pos:line="117" pos:column="55">(<param><decl><type><name pos:line="117" pos:column="56">object</name></type> <name pos:line="117" pos:column="63">sender</name></decl></param>, <param><decl><type><name pos:line="117" pos:column="71">ResolveEventArgs</name></type> <name pos:line="117" pos:column="88">args</name></decl></param>)</parameter_list>
        <block pos:line="118" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="119" pos:column="13">var</name></type> <name pos:line="119" pos:column="17">domain</name> <init pos:line="119" pos:column="24">= <expr><op:operator pos:line="119" pos:column="26">(</op:operator><name pos:line="119" pos:column="27">AppDomain</name><op:operator pos:line="119" pos:column="36">)</op:operator><name pos:line="119" pos:column="37">sender</name></expr></init></decl>;</decl_stmt>

            <foreach pos:line="121" pos:column="13">foreach (<init><decl><type><name pos:line="121" pos:column="22">var</name></type> <name pos:line="121" pos:column="26">assembly</name> <range pos:line="121" pos:column="35">in <expr><call><name><name pos:line="121" pos:column="38">domain</name><op:operator pos:line="121" pos:column="44">.</op:operator><name pos:line="121" pos:column="45">GetAssemblies</name></name><argument_list pos:line="121" pos:column="58">()</argument_list></call></expr></range></decl></init>)
            <block pos:line="122" pos:column="13">{
                <if pos:line="123" pos:column="17">if <condition pos:line="123" pos:column="20">(<expr><name><name pos:line="123" pos:column="21">assembly</name><op:operator pos:line="123" pos:column="29">.</op:operator><name pos:line="123" pos:column="30">FullName</name></name> <op:operator pos:line="123" pos:column="39">==</op:operator> <name><name pos:line="123" pos:column="42">args</name><op:operator pos:line="123" pos:column="46">.</op:operator><name pos:line="123" pos:column="47">Name</name></name></expr>)</condition><then pos:line="123" pos:column="52">
                    <return pos:line="124" pos:column="21">return <expr><name pos:line="124" pos:column="28">assembly</name></expr>;</return></then></if>
            }</block></foreach>
            <return pos:line="126" pos:column="13">return <expr><name pos:line="126" pos:column="20">null</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="129" pos:column="9">/// &lt;summary&gt; </comment>
        <comment type="line" pos:line="130" pos:column="9">/// Let this control process the mnemonics.</comment>
        <comment type="line" pos:line="131" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><attribute pos:line="132" pos:column="9">[<expr><call><name pos:line="132" pos:column="10">UIPermission</name><argument_list pos:line="132" pos:column="22">(<argument><expr><name><name pos:line="132" pos:column="23">SecurityAction</name><op:operator pos:line="132" pos:column="37">.</op:operator><name pos:line="132" pos:column="38">LinkDemand</name></name></expr></argument>, <argument><expr><name pos:line="132" pos:column="50">Window</name> <op:operator pos:line="132" pos:column="57">=</op:operator> <name><name pos:line="132" pos:column="59">UIPermissionWindow</name><op:operator pos:line="132" pos:column="77">.</op:operator><name pos:line="132" pos:column="78">AllWindows</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="133" pos:column="9">protected</specifier> <specifier pos:line="133" pos:column="19">override</specifier> <name pos:line="133" pos:column="28">bool</name></type> <name pos:line="133" pos:column="33">ProcessDialogChar</name><parameter_list pos:line="133" pos:column="50">(<param><decl><type><name pos:line="133" pos:column="51">char</name></type> <name pos:line="133" pos:column="56">charCode</name></decl></param>)</parameter_list>
        <block pos:line="134" pos:column="9">{
              <comment type="line" pos:line="135" pos:column="15">// If we're the top-level form or control, we need to do the mnemonic handling</comment>
              <if pos:line="136" pos:column="15">if <condition pos:line="136" pos:column="18">(<expr><name pos:line="136" pos:column="19">charCode</name> <op:operator pos:line="136" pos:column="28">!=</op:operator> <lit:literal type="char" pos:line="136" pos:column="31">' '</lit:literal> <op:operator pos:line="136" pos:column="35">&amp;&amp;</op:operator> <call><name pos:line="136" pos:column="38">ProcessMnemonic</name><argument_list pos:line="136" pos:column="53">(<argument><expr><name pos:line="136" pos:column="54">charCode</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="136" pos:column="64">
              <block pos:line="137" pos:column="15">{
                    <return pos:line="138" pos:column="21">return <expr><lit:literal type="boolean" pos:line="138" pos:column="28">true</lit:literal></expr>;</return>
              }</block></then></if>
              <return pos:line="140" pos:column="15">return <expr><call><name><name pos:line="140" pos:column="22">base</name><op:operator pos:line="140" pos:column="26">.</op:operator><name pos:line="140" pos:column="27">ProcessDialogChar</name></name><argument_list pos:line="140" pos:column="44">(<argument><expr><name pos:line="140" pos:column="45">charCode</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="143" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="144" pos:column="9">/// Enable the IME status handling for this control.</comment>
        <comment type="line" pos:line="145" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="146" pos:column="9">protected</specifier> <specifier pos:line="146" pos:column="19">override</specifier> <name pos:line="146" pos:column="28">bool</name></type> <name pos:line="146" pos:column="33">CanEnableIme</name>
        <block pos:line="147" pos:column="9">{
            <function><name pos:line="148" pos:column="13">get</name>
            <block pos:line="149" pos:column="13">{
                <return pos:line="150" pos:column="17">return <expr><lit:literal type="boolean" pos:line="150" pos:column="24">true</lit:literal></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <function><type><specifier pos:line="154" pos:column="9">private</specifier> <specifier pos:line="154" pos:column="17">static</specifier> <name><name pos:line="154" pos:column="24">List</name><argument_list pos:line="154" pos:column="28">&lt;<argument><name pos:line="154" pos:column="29">DataCell</name></argument>&gt;</argument_list></name></type> <name pos:line="154" pos:column="39">executeTransform</name><parameter_list pos:line="154" pos:column="55">(<param><decl><type><name pos:line="154" pos:column="56">SrcMLFile</name></type> <name pos:line="154" pos:column="66">doc</name></decl></param>, <param><decl><type><name pos:line="154" pos:column="71">ITransform</name></type> <name pos:line="154" pos:column="82">transform</name></decl></param>, <param><decl><type><specifier pos:line="154" pos:column="93">ref</specifier> <name pos:line="154" pos:column="97">SyntaticCategoryDataModel</name></type> <name pos:line="154" pos:column="123">categories</name></decl></param>, <param><decl><type><name pos:line="154" pos:column="135">BackgroundWorker</name></type> <name pos:line="154" pos:column="152">worker</name></decl></param>)</parameter_list>
        <block pos:line="155" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="156" pos:column="13">IEnumerable</name><argument_list pos:line="156" pos:column="24">&lt;<argument><name pos:line="156" pos:column="25">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="156" pos:column="35">elements</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="157" pos:column="13">List</name><argument_list pos:line="157" pos:column="17">&lt;<argument><name pos:line="157" pos:column="18">DataCell</name></argument>&gt;</argument_list></name></type> <name pos:line="157" pos:column="28">data</name> <init pos:line="157" pos:column="33">= <expr><name pos:line="157" pos:column="35">null</name></expr></init></decl>;</decl_stmt>

            <if pos:line="159" pos:column="13">if <condition pos:line="159" pos:column="16">(<expr><name pos:line="159" pos:column="17">null</name> <op:operator pos:line="159" pos:column="22">!=</op:operator> <name pos:line="159" pos:column="25">transform</name></expr>)</condition><then pos:line="159" pos:column="35">
            <block pos:line="160" pos:column="13">{
                <try pos:line="161" pos:column="17">try
                <block pos:line="162" pos:column="17">{
                    <expr_stmt><expr><name pos:line="163" pos:column="21">elements</name> <op:operator pos:line="163" pos:column="30">=</op:operator> <call><name><name pos:line="163" pos:column="32">doc</name><op:operator pos:line="163" pos:column="35">.</op:operator><name pos:line="163" pos:column="36">QueryEachUnit</name></name><argument_list pos:line="163" pos:column="49">(<argument><expr><name pos:line="163" pos:column="50">transform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if pos:line="165" pos:column="21">if <condition pos:line="165" pos:column="24">(<expr><name pos:line="165" pos:column="25">null</name> <op:operator pos:line="165" pos:column="30">!=</op:operator> <name pos:line="165" pos:column="33">elements</name></expr>)</condition><then pos:line="165" pos:column="42">
                    <block pos:line="166" pos:column="21">{
                        <decl_stmt><decl><type><name pos:line="167" pos:column="25">float</name></type> <name pos:line="167" pos:column="31">numElements</name> <init pos:line="167" pos:column="43">= <expr><op:operator pos:line="167" pos:column="45">(</op:operator><name pos:line="167" pos:column="46">float</name><op:operator pos:line="167" pos:column="51">)</op:operator><call><name><name pos:line="167" pos:column="52">elements</name><op:operator pos:line="167" pos:column="60">.</op:operator><name pos:line="167" pos:column="61">Count</name></name><argument_list pos:line="167" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name pos:line="168" pos:column="25">int</name></type> <name pos:line="168" pos:column="29">i</name> <init pos:line="168" pos:column="31">= <expr><lit:literal type="number" pos:line="168" pos:column="33">0</lit:literal></expr></init><op:operator pos:line="168" pos:column="34">,</op:operator> <name pos:line="168" pos:column="36">percentComplete</name> <init pos:line="168" pos:column="52">= <expr><lit:literal type="number" pos:line="168" pos:column="54">0</lit:literal></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name pos:line="169" pos:column="25">data</name> <op:operator pos:line="169" pos:column="30">=</op:operator> <op:operator pos:line="169" pos:column="32">new</op:operator> <call><name><name pos:line="169" pos:column="36">List</name><argument_list pos:line="169" pos:column="40">&lt;<argument><name pos:line="169" pos:column="41">DataCell</name></argument>&gt;</argument_list></name><argument_list pos:line="169" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
                        <foreach pos:line="170" pos:column="25">foreach (<init><decl><type><name pos:line="170" pos:column="34">var</name></type> <name pos:line="170" pos:column="38">node</name> <range pos:line="170" pos:column="43">in <expr><name pos:line="170" pos:column="46">elements</name></expr></range></decl></init>)
                        <block pos:line="171" pos:column="25">{
                            <decl_stmt><decl><type><name pos:line="172" pos:column="29">var</name></type> <name pos:line="172" pos:column="33">occurrence</name> <init pos:line="172" pos:column="44">= <expr><op:operator pos:line="172" pos:column="46">new</op:operator> <call><name pos:line="172" pos:column="50">SyntaticOccurance</name><argument_list pos:line="172" pos:column="67">(<argument><expr><name pos:line="172" pos:column="68">categories</name></expr></argument>, <argument><expr><name pos:line="172" pos:column="80">node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><call><name><name pos:line="173" pos:column="29">categories</name><op:operator pos:line="173" pos:column="39">.</op:operator><name pos:line="173" pos:column="40">AddOccurance</name></name><argument_list pos:line="173" pos:column="52">(<argument><expr><name pos:line="173" pos:column="53">occurrence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name pos:line="174" pos:column="29">data</name><op:operator pos:line="174" pos:column="33">.</op:operator><name pos:line="174" pos:column="34">Add</name></name><argument_list pos:line="174" pos:column="37">(<argument><expr><op:operator pos:line="174" pos:column="38">new</op:operator> <call><name pos:line="174" pos:column="42">DataCell</name><argument_list pos:line="174" pos:column="50">(<argument><expr><name pos:line="174" pos:column="51">doc</name></expr></argument>, <argument><expr><name pos:line="174" pos:column="56">node</name></expr></argument>, <argument><expr><name pos:line="174" pos:column="62">transform</name></expr></argument>, <argument><expr><name pos:line="174" pos:column="73">occurrence</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name pos:line="175" pos:column="29">percentComplete</name> <op:operator pos:line="175" pos:column="45">=</op:operator> <call pos:line="175" pos:column="47">(<name pos:line="175" pos:column="48">int</name>)<argument_list pos:line="175" pos:column="52">(<argument><expr><op:operator pos:line="175" pos:column="53">(</op:operator><name pos:line="175" pos:column="54">float</name><op:operator pos:line="175" pos:column="59">)</op:operator><op:operator pos:line="175" pos:column="60">++</op:operator><name pos:line="175" pos:column="62">i</name> <op:operator pos:line="175" pos:column="64">/</op:operator> <name pos:line="175" pos:column="66">numElements</name> <op:operator pos:line="175" pos:column="78">*</op:operator> <lit:literal type="number" pos:line="175" pos:column="80">100</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name pos:line="176" pos:column="29">worker</name><op:operator pos:line="176" pos:column="35">.</op:operator><name pos:line="176" pos:column="36">ReportProgress</name></name><argument_list pos:line="176" pos:column="50">(<argument><expr><name pos:line="176" pos:column="51">percentComplete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></foreach>
                        <foreach pos:line="178" pos:column="25">foreach (<init><decl><type><name pos:line="178" pos:column="34">var</name></type> <name pos:line="178" pos:column="38">d</name> <range pos:line="178" pos:column="40">in <expr><name pos:line="178" pos:column="43">data</name></expr></range></decl></init>)
                            <expr_stmt><expr><name><name pos:line="179" pos:column="29">d</name><op:operator pos:line="179" pos:column="30">.</op:operator><name pos:line="179" pos:column="31">Enabled</name></name> <op:operator pos:line="179" pos:column="39">=</op:operator> <lit:literal type="boolean" pos:line="179" pos:column="41">true</lit:literal></expr>;</expr_stmt></foreach>
                    }</block></then></if>
                }</block>
                <catch pos:line="182" pos:column="17">catch <parameter_list pos:line="182" pos:column="23">(<param><decl><type><name pos:line="182" pos:column="24">Exception</name></type> <name pos:line="182" pos:column="34">e</name></decl></param>)</parameter_list>
                <block pos:line="183" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="184" pos:column="21">MessageBox</name><op:operator pos:line="184" pos:column="31">.</op:operator><name pos:line="184" pos:column="32">Show</name></name><argument_list pos:line="184" pos:column="36">(<argument><expr><call><name><name pos:line="184" pos:column="37">String</name><op:operator pos:line="184" pos:column="43">.</op:operator><name pos:line="184" pos:column="44">Format</name></name><argument_list pos:line="184" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="184" pos:column="51">"{0}: {1}\n{2}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="184" pos:column="68">e</name><op:operator pos:line="184" pos:column="69">.</op:operator><name pos:line="184" pos:column="70">Source</name></name></expr></argument>, <argument><expr><name><name pos:line="184" pos:column="78">e</name><op:operator pos:line="184" pos:column="79">.</op:operator><name pos:line="184" pos:column="80">Message</name></name></expr></argument>, <argument><expr><name><name pos:line="184" pos:column="89">e</name><op:operator pos:line="184" pos:column="90">.</op:operator><name pos:line="184" pos:column="91">StackTrace</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></then></if>
            <return pos:line="187" pos:column="13">return <expr><name pos:line="187" pos:column="20">data</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="190" pos:column="9">private</specifier> <name pos:line="190" pos:column="17">string</name></type> <name pos:line="190" pos:column="24">getPathFor</name><parameter_list pos:line="190" pos:column="34">(<param><decl><type><name pos:line="190" pos:column="35">DirectoryInfo</name></type> <name pos:line="190" pos:column="49">sourceFolder</name></decl></param>)</parameter_list>
        <block pos:line="191" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="192" pos:column="13">var</name></type> <name pos:line="192" pos:column="17">docPath</name> <init pos:line="192" pos:column="25">= <expr><call><name><name pos:line="192" pos:column="27">Path</name><op:operator pos:line="192" pos:column="31">.</op:operator><name pos:line="192" pos:column="32">GetTempFileName</name></name><argument_list pos:line="192" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="194" pos:column="13">string</name><index pos:line="194" pos:column="19">[]</index></type> <name pos:line="194" pos:column="22">parts</name> <init pos:line="194" pos:column="28">= <expr><call><name><name pos:line="194" pos:column="30">sourceFolder</name><op:operator pos:line="194" pos:column="42">.</op:operator><name pos:line="194" pos:column="43">FullName</name><op:operator pos:line="194" pos:column="51">.</op:operator><name pos:line="194" pos:column="52">Split</name></name><argument_list pos:line="194" pos:column="57">(<argument><expr><name><name pos:line="194" pos:column="58">Path</name><op:operator pos:line="194" pos:column="62">.</op:operator><name pos:line="194" pos:column="63">DirectorySeparatorChar</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="195" pos:column="13">string</name></type> <name pos:line="195" pos:column="20">filename</name> <init pos:line="195" pos:column="29">= <expr><call><name><name pos:line="195" pos:column="31">String</name><op:operator pos:line="195" pos:column="37">.</op:operator><name pos:line="195" pos:column="38">Join</name></name><argument_list pos:line="195" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="195" pos:column="43">"-"</lit:literal></expr></argument>, <argument><expr><name pos:line="195" pos:column="48">parts</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="195" pos:column="55">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="195" pos:column="58">parts</name><op:operator pos:line="195" pos:column="63">.</op:operator><name pos:line="195" pos:column="64">Length</name></name> <op:operator pos:line="195" pos:column="71">-</op:operator> <lit:literal type="number" pos:line="195" pos:column="73">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if pos:line="197" pos:column="13">if <condition pos:line="197" pos:column="16">(<expr><name pos:line="197" pos:column="17">null</name> <op:operator pos:line="197" pos:column="22">!=</op:operator> <name pos:line="197" pos:column="25">projectSrcmlFolder</name></expr>)</condition><then pos:line="197" pos:column="44">
            <block pos:line="198" pos:column="13">{
                <expr_stmt><expr><name pos:line="199" pos:column="17">docPath</name> <op:operator pos:line="199" pos:column="25">=</op:operator> <call><name><name pos:line="199" pos:column="27">Path</name><op:operator pos:line="199" pos:column="31">.</op:operator><name pos:line="199" pos:column="32">Combine</name></name><argument_list pos:line="199" pos:column="39">(<argument><expr><name><name pos:line="199" pos:column="40">projectSrcmlFolder</name><op:operator pos:line="199" pos:column="58">.</op:operator><name pos:line="199" pos:column="59">FullName</name></name></expr></argument>, <argument><expr><name pos:line="199" pos:column="69">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="200" pos:column="17">docPath</name> <op:operator pos:line="200" pos:column="25">+=</op:operator> <lit:literal type="string" pos:line="200" pos:column="28">".xml"</lit:literal></expr>;</expr_stmt>
            }</block></then></if>

            <return pos:line="203" pos:column="13">return <expr><name pos:line="203" pos:column="20">docPath</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="206" pos:column="9">private</specifier> <name pos:line="206" pos:column="17">void</name></type> <name pos:line="206" pos:column="22">dataGridView1_SelectionChanged</name><parameter_list pos:line="206" pos:column="52">(<param><decl><type><name pos:line="206" pos:column="53">object</name></type> <name pos:line="206" pos:column="60">sender</name></decl></param>, <param><decl><type><name pos:line="206" pos:column="68">EventArgs</name></type> <name pos:line="206" pos:column="78">e</name></decl></param>)</parameter_list>
        <block pos:line="207" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="208" pos:column="13">List</name><argument_list pos:line="208" pos:column="17">&lt;<argument><name pos:line="208" pos:column="18">DataCell</name></argument>&gt;</argument_list></name></type> <name pos:line="208" pos:column="28">data</name> <init pos:line="208" pos:column="33">= <expr><name><name pos:line="208" pos:column="35">dataGridView1</name><op:operator pos:line="208" pos:column="48">.</op:operator><name pos:line="208" pos:column="49">DataSource</name></name> <op:operator pos:line="208" pos:column="60">as</op:operator> <name><name pos:line="208" pos:column="63">List</name><argument_list pos:line="208" pos:column="67">&lt;<argument><name pos:line="208" pos:column="68">DataCell</name></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="209" pos:column="13">int</name></type> <name pos:line="209" pos:column="17">index</name><init pos:line="209" pos:column="22">= <expr><name><name pos:line="209" pos:column="24">dataGridView1</name><op:operator pos:line="209" pos:column="37">.</op:operator><name pos:line="209" pos:column="38">CurrentRow</name><op:operator pos:line="209" pos:column="48">.</op:operator><name pos:line="209" pos:column="49">Index</name></name></expr></init></decl>;</decl_stmt>
        }</block></function>

        <function><type><specifier pos:line="212" pos:column="9">private</specifier> <name pos:line="212" pos:column="17">void</name></type> <name pos:line="212" pos:column="22">updateSelectedTransform</name><parameter_list pos:line="212" pos:column="45">(<param><decl><type><name pos:line="212" pos:column="46">object</name></type> <name pos:line="212" pos:column="53">sender</name></decl></param>, <param><decl><type><name pos:line="212" pos:column="61">EventArgs</name></type> <name pos:line="212" pos:column="71">e</name></decl></param>)</parameter_list>
        <block pos:line="213" pos:column="9">{
            <if pos:line="214" pos:column="13">if <condition pos:line="214" pos:column="16">(<expr><name pos:line="214" pos:column="17">null</name> <op:operator pos:line="214" pos:column="22">!=</op:operator> <name><name pos:line="214" pos:column="25">transformComboBox</name><op:operator pos:line="214" pos:column="42">.</op:operator><name pos:line="214" pos:column="43">SelectedItem</name></name></expr>)</condition><then pos:line="214" pos:column="56">
                <expr_stmt><expr><name pos:line="215" pos:column="17">selectedTransform</name> <op:operator pos:line="215" pos:column="35">=</op:operator> <name><name pos:line="215" pos:column="37">transformComboBox</name><op:operator pos:line="215" pos:column="54">.</op:operator><name pos:line="215" pos:column="55">SelectedItem</name></name> <op:operator pos:line="215" pos:column="68">as</op:operator> <name pos:line="215" pos:column="71">ITransform</name></expr>;</expr_stmt></then>
            <else pos:line="216" pos:column="13">else
                <expr_stmt><expr><name pos:line="217" pos:column="17">selectedTransform</name> <op:operator pos:line="217" pos:column="35">=</op:operator> <name pos:line="217" pos:column="37">null</name></expr>;</expr_stmt></else></if>
            <expr_stmt><expr><call><name pos:line="218" pos:column="13">setButtons</name><argument_list pos:line="218" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="221" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="222" pos:column="9">/// setButtons should be called in two places:</comment>
        <comment type="line" pos:line="223" pos:column="9">/// 1. at the end of each button press. To enable this, _Click functions must reset any variables that are to be modified.</comment>
        <comment type="line" pos:line="224" pos:column="9">/// 2. at the end of each action triggered by a button press -- for instance, when a button press causes a long-running job</comment>
        <comment type="line" pos:line="225" pos:column="9">///    to be triggered, that action must call setButtons() when completed.</comment>
        <comment type="line" pos:line="226" pos:column="9">/// </comment>
        <comment type="line" pos:line="227" pos:column="9">/// setButtons only sets the enabled/disabled state of the buttons. It does not set the text or modify any other parts of the control</comment>
        <comment type="line" pos:line="228" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="229" pos:column="9">private</specifier> <name pos:line="229" pos:column="17">void</name></type> <name pos:line="229" pos:column="22">setButtons</name><parameter_list pos:line="229" pos:column="32">()</parameter_list>
        <block pos:line="230" pos:column="9">{
            <expr_stmt><expr><name><name pos:line="231" pos:column="13">browseInputFoldersButton</name><op:operator pos:line="231" pos:column="37">.</op:operator><name pos:line="231" pos:column="38">Enabled</name></name> <op:operator pos:line="231" pos:column="46">=</op:operator> <op:operator pos:line="231" pos:column="48">(</op:operator><op:operator pos:line="231" pos:column="49">!</op:operator><name pos:line="231" pos:column="50">generatingXML</name> <op:operator pos:line="231" pos:column="64">&amp;&amp;</op:operator> <op:operator pos:line="231" pos:column="67">!</op:operator><name pos:line="231" pos:column="68">generatingSource</name><op:operator pos:line="231" pos:column="84">)</op:operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="232" pos:column="13">browseOutputFoldersButton</name><op:operator pos:line="232" pos:column="38">.</op:operator><name pos:line="232" pos:column="39">Enabled</name></name> <op:operator pos:line="232" pos:column="47">=</op:operator> <op:operator pos:line="232" pos:column="49">(</op:operator><op:operator pos:line="232" pos:column="50">!</op:operator><name pos:line="232" pos:column="51">generatingSource</name><op:operator pos:line="232" pos:column="67">)</op:operator></expr>;</expr_stmt>

            <expr_stmt><expr><name><name pos:line="234" pos:column="13">runQueryButton</name><op:operator pos:line="234" pos:column="27">.</op:operator><name pos:line="234" pos:column="28">Enabled</name></name> <op:operator pos:line="234" pos:column="36">=</op:operator> <op:operator pos:line="234" pos:column="38">(</op:operator><op:operator pos:line="234" pos:column="39">!</op:operator><name pos:line="234" pos:column="40">generatingSource</name> <op:operator pos:line="234" pos:column="57">&amp;&amp;</op:operator>
                                      <op:operator pos:line="235" pos:column="39">!</op:operator><name pos:line="235" pos:column="40">queryingXML</name> <op:operator pos:line="235" pos:column="52">&amp;&amp;</op:operator>
                                      <name pos:line="236" pos:column="39">null</name> <op:operator pos:line="236" pos:column="44">!=</op:operator> <name><name pos:line="236" pos:column="47">inputFolderComboBox</name><op:operator pos:line="236" pos:column="66">.</op:operator><name pos:line="236" pos:column="67">SelectedItem</name> <type:modifier pos:line="236" pos:column="80">&amp;&amp;</type:modifier></name>
                                      <name pos:line="237" pos:column="39">null</name> <op:operator pos:line="237" pos:column="44">!=</op:operator> <name pos:line="237" pos:column="47">selectedTransform</name><op:operator pos:line="237" pos:column="64">)</op:operator></expr>;</expr_stmt>
            
            <expr_stmt><expr><name><name pos:line="239" pos:column="13">runTransformButton</name><op:operator pos:line="239" pos:column="31">.</op:operator><name pos:line="239" pos:column="32">Enabled</name></name> <op:operator pos:line="239" pos:column="40">=</op:operator> <op:operator pos:line="239" pos:column="42">(</op:operator><name><name pos:line="239" pos:column="43">runQueryButton</name><op:operator pos:line="239" pos:column="57">.</op:operator><name pos:line="239" pos:column="58">Enabled</name> <type:modifier pos:line="239" pos:column="66">&amp;&amp;</type:modifier></name>
                                          <name pos:line="240" pos:column="43">null</name> <op:operator pos:line="240" pos:column="48">!=</op:operator> <name><name pos:line="240" pos:column="51">dataGridView1</name><op:operator pos:line="240" pos:column="64">.</op:operator><name pos:line="240" pos:column="65">DataSource</name> <type:modifier pos:line="240" pos:column="76">&amp;&amp;</type:modifier></name>
                                          <op:operator pos:line="241" pos:column="43">-</op:operator><lit:literal type="number" pos:line="241" pos:column="44">1</lit:literal> <op:operator pos:line="241" pos:column="46">&lt;</op:operator> <name><name pos:line="241" pos:column="48">outputFolderComboBox</name><op:operator pos:line="241" pos:column="68">.</op:operator><name pos:line="241" pos:column="69">SelectedIndex</name></name><op:operator pos:line="241" pos:column="82">)</op:operator></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="244" pos:column="9">public</specifier> <name pos:line="244" pos:column="16">bool</name></type> <name pos:line="244" pos:column="21">processBuiltDlls</name><parameter_list pos:line="244" pos:column="37">(<param><decl><type><name><name pos:line="244" pos:column="38">List</name><argument_list pos:line="244" pos:column="42">&lt;<argument><name pos:line="244" pos:column="43">string</name></argument>&gt;</argument_list></name></type> <name pos:line="244" pos:column="51">dlls</name></decl></param>)</parameter_list>
        <block pos:line="245" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="246" pos:column="13">Assembly</name></type> <name pos:line="246" pos:column="22">assembly</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="247" pos:column="13">List</name><argument_list pos:line="247" pos:column="17">&lt;<argument><name pos:line="247" pos:column="18">ITransform</name></argument>&gt;</argument_list></name></type> <name pos:line="247" pos:column="30">transforms</name> <init pos:line="247" pos:column="41">= <expr><op:operator pos:line="247" pos:column="43">new</op:operator> <call><name><name pos:line="247" pos:column="47">List</name><argument_list pos:line="247" pos:column="51">&lt;<argument><name pos:line="247" pos:column="52">ITransform</name></argument>&gt;</argument_list></name><argument_list pos:line="247" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="248" pos:column="13">string</name></type> <name pos:line="248" pos:column="20">msg</name> <init pos:line="248" pos:column="24">= <expr><lit:literal type="string" pos:line="248" pos:column="26">""</lit:literal></expr></init></decl>;</decl_stmt>

            <foreach pos:line="250" pos:column="13">foreach (<init><decl><type><name pos:line="250" pos:column="22">var</name></type> <name pos:line="250" pos:column="26">dll</name> <range pos:line="250" pos:column="30">in <expr><name pos:line="250" pos:column="33">dlls</name></expr></range></decl></init>)
            <block pos:line="251" pos:column="13">{
                <try pos:line="252" pos:column="17">try
                <block pos:line="253" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="254" pos:column="21">var</name></type> <name pos:line="254" pos:column="25">bytes</name> <init pos:line="254" pos:column="31">= <expr><call><name><name pos:line="254" pos:column="33">File</name><op:operator pos:line="254" pos:column="37">.</op:operator><name pos:line="254" pos:column="38">ReadAllBytes</name></name><argument_list pos:line="254" pos:column="50">(<argument><expr><name pos:line="254" pos:column="51">dll</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name pos:line="255" pos:column="21">assembly</name> <op:operator pos:line="255" pos:column="30">=</op:operator> <call><name><name pos:line="255" pos:column="32">Assembly</name><op:operator pos:line="255" pos:column="40">.</op:operator><name pos:line="255" pos:column="41">Load</name></name><argument_list pos:line="255" pos:column="45">(<argument><expr><name pos:line="255" pos:column="46">bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name pos:line="256" pos:column="21">var</name></type> <name pos:line="256" pos:column="25">newTypes</name> <init pos:line="256" pos:column="34">= <expr><call><name><name pos:line="256" pos:column="36">assembly</name><op:operator pos:line="256" pos:column="44">.</op:operator><name pos:line="256" pos:column="45">GetTypes</name></name><argument_list pos:line="256" pos:column="53">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <foreach pos:line="258" pos:column="21">foreach (<init><decl><type><name pos:line="258" pos:column="30">var</name></type> <name pos:line="258" pos:column="34">type</name> <range pos:line="258" pos:column="39">in <expr><name pos:line="258" pos:column="42">newTypes</name></expr></range></decl></init>)
                    <block pos:line="259" pos:column="21">{
                        <try pos:line="260" pos:column="25">try
                        <block pos:line="261" pos:column="25">{
                            <if pos:line="262" pos:column="29">if <condition pos:line="262" pos:column="32">(<expr><name pos:line="262" pos:column="33">null</name> <op:operator pos:line="262" pos:column="38">!=</op:operator> <call><name><name pos:line="262" pos:column="41">type</name><op:operator pos:line="262" pos:column="45">.</op:operator><name pos:line="262" pos:column="46">GetInterface</name></name><argument_list pos:line="262" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="262" pos:column="59">"ABB.SrcML.ITransform"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="262" pos:column="83">&amp;&amp;</op:operator>
                                <lit:literal type="string" pos:line="263" pos:column="33">"ABB.SrcML"</lit:literal> <op:operator pos:line="263" pos:column="45">!=</op:operator> <name><name pos:line="263" pos:column="48">type</name><op:operator pos:line="263" pos:column="52">.</op:operator><name pos:line="263" pos:column="53">Namespace</name></name></expr>)</condition><then pos:line="263" pos:column="63">
                            <block pos:line="264" pos:column="29">{
                                <decl_stmt><decl><type><name pos:line="265" pos:column="33">ITransform</name></type> <name pos:line="265" pos:column="44">test</name> <init pos:line="265" pos:column="49">= <expr><op:operator pos:line="265" pos:column="51">new</op:operator> <call><name pos:line="265" pos:column="55">TransformObjectHarness</name><argument_list pos:line="265" pos:column="77">(<argument><expr><name pos:line="265" pos:column="78">type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <expr_stmt><expr><call><name><name pos:line="266" pos:column="33">transforms</name><op:operator pos:line="266" pos:column="43">.</op:operator><name pos:line="266" pos:column="44">Add</name></name><argument_list pos:line="266" pos:column="47">(<argument><expr><name pos:line="266" pos:column="48">test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></then>
                            <else pos:line="268" pos:column="29">else
                            <block pos:line="269" pos:column="29">{
                                <foreach pos:line="270" pos:column="33">foreach (<init><decl><type><name pos:line="270" pos:column="42">var</name></type> <name pos:line="270" pos:column="46">test</name> <range pos:line="270" pos:column="51">in <expr><call><name><name pos:line="270" pos:column="54">QueryHarness</name><op:operator pos:line="270" pos:column="66">.</op:operator><name pos:line="270" pos:column="67">CreateFromType</name></name><argument_list pos:line="270" pos:column="81">(<argument><expr><name pos:line="270" pos:column="82">type</name></expr></argument>)</argument_list></call></expr></range></decl></init>)
                                <block pos:line="271" pos:column="33">{
                                    <expr_stmt><expr><call><name><name pos:line="272" pos:column="37">transforms</name><op:operator pos:line="272" pos:column="47">.</op:operator><name pos:line="272" pos:column="48">Add</name></name><argument_list pos:line="272" pos:column="51">(<argument><expr><name pos:line="272" pos:column="52">test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                }</block></foreach>
                            }</block></else></if>
                        }</block>
                        <catch pos:line="276" pos:column="25">catch <parameter_list pos:line="276" pos:column="31">(<param><decl><type><name pos:line="276" pos:column="32">MissingMethodException</name></type> <name pos:line="276" pos:column="55">e</name></decl></param>)</parameter_list>
                        <block pos:line="277" pos:column="25">{
                            <expr_stmt><expr><name><name pos:line="278" pos:column="29">messageLabel</name><op:operator pos:line="278" pos:column="41">.</op:operator><name pos:line="278" pos:column="42">Text</name></name> <op:operator pos:line="278" pos:column="47">=</op:operator> <call><name><name pos:line="278" pos:column="49">String</name><op:operator pos:line="278" pos:column="55">.</op:operator><name pos:line="278" pos:column="56">Format</name></name><argument_list pos:line="278" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="278" pos:column="63">"Could not load {0}({1})"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="278" pos:column="90">type</name><op:operator pos:line="278" pos:column="94">.</op:operator><name pos:line="278" pos:column="95">FullName</name></name></expr></argument>, <argument><expr><name><name pos:line="278" pos:column="105">e</name><op:operator pos:line="278" pos:column="106">.</op:operator><name pos:line="278" pos:column="107">Message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></catch></try>

                    }</block></foreach>
                }</block>
                <catch pos:line="283" pos:column="17">catch <parameter_list pos:line="283" pos:column="23">(<param><decl><type><name pos:line="283" pos:column="24">ReflectionTypeLoadException</name></type> <name pos:line="283" pos:column="52">e</name></decl></param>)</parameter_list>
                <block pos:line="284" pos:column="17">{
                    <expr_stmt><expr><name pos:line="285" pos:column="21">msg</name> <op:operator pos:line="285" pos:column="25">=</op:operator> <call><name><name pos:line="285" pos:column="27">String</name><op:operator pos:line="285" pos:column="33">.</op:operator><name pos:line="285" pos:column="34">Format</name></name><argument_list pos:line="285" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="285" pos:column="41">"{0}\n"</lit:literal></expr></argument>, <argument><expr><name pos:line="285" pos:column="50">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <foreach pos:line="286" pos:column="21">foreach (<init><decl><type><name pos:line="286" pos:column="30">var</name></type> <name pos:line="286" pos:column="34">le</name> <range pos:line="286" pos:column="37">in <expr><name><name pos:line="286" pos:column="40">e</name><op:operator pos:line="286" pos:column="41">.</op:operator><name pos:line="286" pos:column="42">LoaderExceptions</name></name></expr></range></decl></init>)
                        <expr_stmt><expr><name pos:line="287" pos:column="25">msg</name> <op:operator pos:line="287" pos:column="29">+=</op:operator> <call><name><name pos:line="287" pos:column="32">le</name><op:operator pos:line="287" pos:column="34">.</op:operator><name pos:line="287" pos:column="35">ToString</name></name><argument_list pos:line="287" pos:column="43">()</argument_list></call></expr>;</expr_stmt></foreach>
                }</block></catch>
                <catch pos:line="289" pos:column="17">catch <parameter_list pos:line="289" pos:column="23">(<param><decl><type><name pos:line="289" pos:column="24">Exception</name></type> <name pos:line="289" pos:column="34">e</name></decl></param>)</parameter_list>
                <block pos:line="290" pos:column="17">{
                    <expr_stmt><expr><name pos:line="291" pos:column="21">msg</name> <op:operator pos:line="291" pos:column="25">=</op:operator> <call><name><name pos:line="291" pos:column="27">e</name><op:operator pos:line="291" pos:column="28">.</op:operator><name pos:line="291" pos:column="29">ToString</name></name><argument_list pos:line="291" pos:column="37">()</argument_list></call></expr>;</expr_stmt>
                }</block></catch>
                <finally pos:line="293" pos:column="17">finally
                <block pos:line="294" pos:column="17">{
                    <if pos:line="295" pos:column="21">if <condition pos:line="295" pos:column="24">(<expr><lit:literal type="number" pos:line="295" pos:column="25">0</lit:literal> <op:operator pos:line="295" pos:column="27">&lt;</op:operator> <name><name pos:line="295" pos:column="29">msg</name><op:operator pos:line="295" pos:column="32">.</op:operator><name pos:line="295" pos:column="33">Length</name></name></expr>)</condition><then pos:line="295" pos:column="40">
                        <expr_stmt><expr><call><name><name pos:line="296" pos:column="25">MessageBox</name><op:operator pos:line="296" pos:column="35">.</op:operator><name pos:line="296" pos:column="36">Show</name></name><argument_list pos:line="296" pos:column="40">(<argument><expr><name pos:line="296" pos:column="41">msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                }</block></finally></try>
            }</block></foreach>
            <decl_stmt><decl><type><name pos:line="299" pos:column="13">int</name></type> <name pos:line="299" pos:column="17">index</name> <init pos:line="299" pos:column="23">= <expr><name><name pos:line="299" pos:column="25">transformComboBox</name><op:operator pos:line="299" pos:column="42">.</op:operator><name pos:line="299" pos:column="43">SelectedIndex</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="300" pos:column="13">transformComboBox</name><op:operator pos:line="300" pos:column="30">.</op:operator><name pos:line="300" pos:column="31">DataSource</name></name> <op:operator pos:line="300" pos:column="42">=</op:operator> <name pos:line="300" pos:column="44">transforms</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="301" pos:column="13">transformComboBox</name><op:operator pos:line="301" pos:column="30">.</op:operator><name pos:line="301" pos:column="31">DisplayMember</name></name> <op:operator pos:line="301" pos:column="45">=</op:operator> <lit:literal type="string" pos:line="301" pos:column="47">"Name"</lit:literal></expr>;</expr_stmt>

            <if pos:line="303" pos:column="13">if <condition pos:line="303" pos:column="16">(<expr><name pos:line="303" pos:column="17">index</name> <op:operator pos:line="303" pos:column="23">&lt;</op:operator> <name><name pos:line="303" pos:column="25">transforms</name><op:operator pos:line="303" pos:column="35">.</op:operator><name pos:line="303" pos:column="36">Count</name></name></expr>)</condition><then pos:line="303" pos:column="42">
                <expr_stmt><expr><name><name pos:line="304" pos:column="17">transformComboBox</name><op:operator pos:line="304" pos:column="34">.</op:operator><name pos:line="304" pos:column="35">SelectedIndex</name></name> <op:operator pos:line="304" pos:column="49">=</op:operator> <name pos:line="304" pos:column="51">index</name></expr>;</expr_stmt></then>
            <else pos:line="305" pos:column="13">else
                <expr_stmt><expr><name><name pos:line="306" pos:column="17">transformComboBox</name><op:operator pos:line="306" pos:column="34">.</op:operator><name pos:line="306" pos:column="35">SelectedIndex</name></name> <op:operator pos:line="306" pos:column="49">=</op:operator> <name><name pos:line="306" pos:column="51">transforms</name><op:operator pos:line="306" pos:column="61">.</op:operator><name pos:line="306" pos:column="62">Count</name></name> <op:operator pos:line="306" pos:column="68">-</op:operator> <lit:literal type="number" pos:line="306" pos:column="70">1</lit:literal></expr>;</expr_stmt></else></if>

            <expr_stmt><expr><name><name pos:line="308" pos:column="13">messageLabel</name><op:operator pos:line="308" pos:column="25">.</op:operator><name pos:line="308" pos:column="26">Text</name></name> <op:operator pos:line="308" pos:column="31">=</op:operator> <call><name><name pos:line="308" pos:column="33">String</name><op:operator pos:line="308" pos:column="39">.</op:operator><name pos:line="308" pos:column="40">Format</name></name><argument_list pos:line="308" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="308" pos:column="47">"Loaded {0} transforms."</lit:literal></expr></argument>, <argument><expr><name><name pos:line="308" pos:column="73">transforms</name><op:operator pos:line="308" pos:column="83">.</op:operator><name pos:line="308" pos:column="84">Count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:line="310" pos:column="13">return <expr><lit:literal type="boolean" pos:line="310" pos:column="20">true</lit:literal></expr>;</return>
        }</block></function>
 
        <cpp:region pos:line="313" pos:column="9">#<cpp:directive pos:line="313" pos:column="10">region</cpp:directive> selecting folders</cpp:region>
        <function><type><specifier pos:line="314" pos:column="9">private</specifier> <name pos:line="314" pos:column="17">void</name></type> <name pos:line="314" pos:column="22">browseInputFoldersButton_Click</name><parameter_list pos:line="314" pos:column="52">(<param><decl><type><name pos:line="314" pos:column="53">object</name></type> <name pos:line="314" pos:column="60">sender</name></decl></param>, <param><decl><type><name pos:line="314" pos:column="68">EventArgs</name></type> <name pos:line="314" pos:column="78">e</name></decl></param>)</parameter_list>
        <block pos:line="315" pos:column="9">{
            <expr_stmt><expr><name><name pos:line="316" pos:column="13">projectFolderDialog</name><op:operator pos:line="316" pos:column="32">.</op:operator><name pos:line="316" pos:column="33">ShowNewFolderButton</name></name> <op:operator pos:line="316" pos:column="53">=</op:operator> <lit:literal type="boolean" pos:line="316" pos:column="55">false</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="317" pos:column="13">projectFolderDialog</name><op:operator pos:line="317" pos:column="32">.</op:operator><name pos:line="317" pos:column="33">Description</name></name> <op:operator pos:line="317" pos:column="45">=</op:operator> <lit:literal type="string" pos:line="317" pos:column="47">"Select a Source Folder"</lit:literal></expr>;</expr_stmt>
            <if pos:line="318" pos:column="13">if <condition pos:line="318" pos:column="16">(<expr><call><name><name pos:line="318" pos:column="17">projectFolderDialog</name><op:operator pos:line="318" pos:column="36">.</op:operator><name pos:line="318" pos:column="37">ShowDialog</name></name><argument_list pos:line="318" pos:column="47">()</argument_list></call> <op:operator pos:line="318" pos:column="50">==</op:operator> <name><name pos:line="318" pos:column="53">DialogResult</name><op:operator pos:line="318" pos:column="65">.</op:operator><name pos:line="318" pos:column="66">OK</name></name></expr>)</condition><then pos:line="318" pos:column="69">
            <block pos:line="319" pos:column="13">{
                <expr_stmt><expr><call><name pos:line="320" pos:column="17">addNewSourceFolder</name><argument_list pos:line="320" pos:column="35">(<argument><expr><op:operator pos:line="320" pos:column="36">new</op:operator> <call><name pos:line="320" pos:column="40">DirectoryInfo</name><argument_list pos:line="320" pos:column="53">(<argument><expr><name><name pos:line="320" pos:column="54">projectFolderDialog</name><op:operator pos:line="320" pos:column="73">.</op:operator><name pos:line="320" pos:column="74">SelectedPath</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="321" pos:column="17">if <condition pos:line="321" pos:column="20">(<expr><lit:literal type="number" pos:line="321" pos:column="21">1</lit:literal> <op:operator pos:line="321" pos:column="23">==</op:operator> <name><name pos:line="321" pos:column="26">sourceDirectories</name><op:operator pos:line="321" pos:column="43">.</op:operator><name pos:line="321" pos:column="44">Count</name></name></expr>)</condition><then pos:line="321" pos:column="50">
                    <expr_stmt><expr><call><name pos:line="322" pos:column="21">updateSelectedInputFolder</name><argument_list pos:line="322" pos:column="46">()</argument_list></call></expr>;</expr_stmt></then></if>
                <comment type="line" pos:line="323" pos:column="17">// selectedDoc = null;</comment>
            }</block></then></if>
            <expr_stmt><expr><name><name pos:line="325" pos:column="13">inputFolderComboBox</name><op:operator pos:line="325" pos:column="32">.</op:operator><name pos:line="325" pos:column="33">SelectedIndex</name></name> <op:operator pos:line="325" pos:column="47">=</op:operator> <name><name pos:line="325" pos:column="49">sourceDirectories</name><op:operator pos:line="325" pos:column="66">.</op:operator><name pos:line="325" pos:column="67">Count</name></name> <op:operator pos:line="325" pos:column="73">-</op:operator> <lit:literal type="number" pos:line="325" pos:column="75">1</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="326" pos:column="13">setButtons</name><argument_list pos:line="326" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="329" pos:column="9">private</specifier> <name pos:line="329" pos:column="17">void</name></type> <name pos:line="329" pos:column="22">browseOutputFoldersButton_Click</name><parameter_list pos:line="329" pos:column="53">(<param><decl><type><name pos:line="329" pos:column="54">object</name></type> <name pos:line="329" pos:column="61">sender</name></decl></param>, <param><decl><type><name pos:line="329" pos:column="69">EventArgs</name></type> <name pos:line="329" pos:column="79">e</name></decl></param>)</parameter_list>
        <block pos:line="330" pos:column="9">{
            <expr_stmt><expr><name><name pos:line="331" pos:column="13">projectFolderDialog</name><op:operator pos:line="331" pos:column="32">.</op:operator><name pos:line="331" pos:column="33">ShowNewFolderButton</name></name> <op:operator pos:line="331" pos:column="53">=</op:operator> <lit:literal type="boolean" pos:line="331" pos:column="55">true</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="332" pos:column="13">projectFolderDialog</name><op:operator pos:line="332" pos:column="32">.</op:operator><name pos:line="332" pos:column="33">Description</name></name> <op:operator pos:line="332" pos:column="45">=</op:operator>  <lit:literal type="string" pos:line="332" pos:column="48">"Select an Output Folder"</lit:literal></expr>;</expr_stmt>
            <if pos:line="333" pos:column="13">if <condition pos:line="333" pos:column="16">(<expr><call><name><name pos:line="333" pos:column="17">projectFolderDialog</name><op:operator pos:line="333" pos:column="36">.</op:operator><name pos:line="333" pos:column="37">ShowDialog</name></name><argument_list pos:line="333" pos:column="47">()</argument_list></call> <op:operator pos:line="333" pos:column="50">==</op:operator> <name><name pos:line="333" pos:column="53">DialogResult</name><op:operator pos:line="333" pos:column="65">.</op:operator><name pos:line="333" pos:column="66">OK</name></name></expr>)</condition><then pos:line="333" pos:column="69">
            <block pos:line="334" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="335" pos:column="17">var</name></type> <name pos:line="335" pos:column="21">dir</name> <init pos:line="335" pos:column="25">= <expr><op:operator pos:line="335" pos:column="27">new</op:operator> <call><name pos:line="335" pos:column="31">DirectoryInfo</name><argument_list pos:line="335" pos:column="44">(<argument><expr><name><name pos:line="335" pos:column="45">projectFolderDialog</name><op:operator pos:line="335" pos:column="64">.</op:operator><name pos:line="335" pos:column="65">SelectedPath</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="336" pos:column="17">if <condition pos:line="336" pos:column="20">(<expr><op:operator pos:line="336" pos:column="21">!</op:operator><call><name><name pos:line="336" pos:column="22">outputSourceDirectoryList</name><op:operator pos:line="336" pos:column="47">.</op:operator><name pos:line="336" pos:column="48">Contains</name></name><argument_list pos:line="336" pos:column="56">(<argument><expr><name pos:line="336" pos:column="57">dir</name></expr></argument>, <argument><expr><name><name pos:line="336" pos:column="62">srcmlDict</name><op:operator pos:line="336" pos:column="71">.</op:operator><name pos:line="336" pos:column="72">Comparer</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="336" pos:column="82">
                    <expr_stmt><expr><call><name><name pos:line="337" pos:column="21">outputSourceDirectoryList</name><op:operator pos:line="337" pos:column="46">.</op:operator><name pos:line="337" pos:column="47">Add</name></name><argument_list pos:line="337" pos:column="50">(<argument><expr><name pos:line="337" pos:column="51">dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></then></if>
            <expr_stmt><expr><name><name pos:line="339" pos:column="13">outputFolderComboBox</name><op:operator pos:line="339" pos:column="33">.</op:operator><name pos:line="339" pos:column="34">SelectedIndex</name></name> <op:operator pos:line="339" pos:column="48">=</op:operator> <name><name pos:line="339" pos:column="50">outputSourceDirectoryList</name><op:operator pos:line="339" pos:column="75">.</op:operator><name pos:line="339" pos:column="76">Count</name></name> <op:operator pos:line="339" pos:column="82">-</op:operator> <lit:literal type="number" pos:line="339" pos:column="84">1</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="340" pos:column="13">setButtons</name><argument_list pos:line="340" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="343" pos:column="9">private</specifier> <name pos:line="343" pos:column="17">void</name></type> <name pos:line="343" pos:column="22">addNewSourceFolder</name><parameter_list pos:line="343" pos:column="40">(<param><decl><type><name pos:line="343" pos:column="41">DirectoryInfo</name></type> <name pos:line="343" pos:column="55">sourceFolder</name></decl></param>)</parameter_list>
        <block pos:line="344" pos:column="9">{   
            <if pos:line="345" pos:column="13">if<condition pos:line="345" pos:column="15">(<expr><op:operator pos:line="345" pos:column="16">!</op:operator><call><name><name pos:line="345" pos:column="17">sourceDirectories</name><op:operator pos:line="345" pos:column="34">.</op:operator><name pos:line="345" pos:column="35">Contains</name></name><argument_list pos:line="345" pos:column="43">(<argument><expr><name pos:line="345" pos:column="44">sourceFolder</name></expr></argument>, <argument><expr><name><name pos:line="345" pos:column="58">srcmlDict</name><op:operator pos:line="345" pos:column="67">.</op:operator><name pos:line="345" pos:column="68">Comparer</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="345" pos:column="78">
                <expr_stmt><expr><call><name><name pos:line="346" pos:column="17">sourceDirectories</name><op:operator pos:line="346" pos:column="34">.</op:operator><name pos:line="346" pos:column="35">Add</name></name><argument_list pos:line="346" pos:column="38">(<argument><expr><name pos:line="346" pos:column="39">sourceFolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></function>

        <function><type><specifier pos:line="349" pos:column="9">private</specifier> <name pos:line="349" pos:column="17">void</name></type> <name pos:line="349" pos:column="22">updateSelectedInputFolder</name><parameter_list pos:line="349" pos:column="47">()</parameter_list>
        <block pos:line="350" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="351" pos:column="13">DirectoryInfo</name></type> <name pos:line="351" pos:column="27">source</name> <init pos:line="351" pos:column="34">= <expr><name><name pos:line="351" pos:column="36">inputFolderComboBox</name><op:operator pos:line="351" pos:column="55">.</op:operator><name pos:line="351" pos:column="56">SelectedItem</name></name> <op:operator pos:line="351" pos:column="69">as</op:operator> <name pos:line="351" pos:column="72">DirectoryInfo</name></expr></init></decl>;</decl_stmt>

            <if pos:line="353" pos:column="13">if <condition pos:line="353" pos:column="16">(<expr><name pos:line="353" pos:column="17">null</name> <op:operator pos:line="353" pos:column="22">!=</op:operator> <name pos:line="353" pos:column="25">source</name></expr>)</condition><then pos:line="353" pos:column="32">
            <block pos:line="354" pos:column="13">{
                <if pos:line="355" pos:column="17">if <condition pos:line="355" pos:column="20">(<expr><op:operator pos:line="355" pos:column="21">!</op:operator><call><name><name pos:line="355" pos:column="22">srcmlDict</name><op:operator pos:line="355" pos:column="31">.</op:operator><name pos:line="355" pos:column="32">ContainsKey</name></name><argument_list pos:line="355" pos:column="43">(<argument><expr><name pos:line="355" pos:column="44">source</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="355" pos:column="52">
                <block pos:line="356" pos:column="17">{
                    <expr_stmt><expr><name pos:line="357" pos:column="21">generatingXML</name> <op:operator pos:line="357" pos:column="35">=</op:operator> <lit:literal type="boolean" pos:line="357" pos:column="37">true</lit:literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="358" pos:column="21">browseInputFoldersButton</name><op:operator pos:line="358" pos:column="45">.</op:operator><name pos:line="358" pos:column="46">Enabled</name></name> <op:operator pos:line="358" pos:column="54">=</op:operator> <lit:literal type="boolean" pos:line="358" pos:column="56">false</lit:literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="359" pos:column="21">browseInputFoldersButton</name><op:operator pos:line="359" pos:column="45">.</op:operator><name pos:line="359" pos:column="46">Text</name></name> <op:operator pos:line="359" pos:column="51">=</op:operator> <name><name pos:line="359" pos:column="53">Resources</name><op:operator pos:line="359" pos:column="62">.</op:operator><name pos:line="359" pos:column="63">BrowseButtonLoading</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="360" pos:column="21">progressBar</name><op:operator pos:line="360" pos:column="32">.</op:operator><name pos:line="360" pos:column="33">Style</name></name> <op:operator pos:line="360" pos:column="39">=</op:operator> <name><name pos:line="360" pos:column="41">ProgressBarStyle</name><op:operator pos:line="360" pos:column="57">.</op:operator><name pos:line="360" pos:column="58">Marquee</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="361" pos:column="21">messageLabel</name><op:operator pos:line="361" pos:column="33">.</op:operator><name pos:line="361" pos:column="34">Text</name></name> <op:operator pos:line="361" pos:column="39">=</op:operator> <call><name><name pos:line="361" pos:column="41">String</name><op:operator pos:line="361" pos:column="47">.</op:operator><name pos:line="361" pos:column="48">Format</name></name><argument_list pos:line="361" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="361" pos:column="55">"Converting {0} to SrcML..."</lit:literal></expr></argument>, <argument><expr><name><name pos:line="361" pos:column="85">source</name><op:operator pos:line="361" pos:column="91">.</op:operator><name pos:line="361" pos:column="92">FullName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="362" pos:column="21">srcmlGenWorker</name><op:operator pos:line="362" pos:column="35">.</op:operator><name pos:line="362" pos:column="36">RunWorkerAsync</name></name><argument_list pos:line="362" pos:column="50">(<argument><expr><op:operator pos:line="362" pos:column="51">(</op:operator><name pos:line="362" pos:column="52">object</name><op:operator pos:line="362" pos:column="58">)</op:operator><name pos:line="362" pos:column="59">source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="367" pos:column="9">private</specifier> <name pos:line="367" pos:column="17">void</name></type> <name pos:line="367" pos:column="22">srcmlGenWorker_DoWork</name><parameter_list pos:line="367" pos:column="43">(<param><decl><type><name pos:line="367" pos:column="44">object</name></type> <name pos:line="367" pos:column="51">sender</name></decl></param>, <param><decl><type><name pos:line="367" pos:column="59">DoWorkEventArgs</name></type> <name pos:line="367" pos:column="75">e</name></decl></param>)</parameter_list>
        <block pos:line="368" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="369" pos:column="13">Object</name><index pos:line="369" pos:column="19">[]</index></type> <name pos:line="369" pos:column="22">array</name> <init pos:line="369" pos:column="28">= <expr><op:operator pos:line="369" pos:column="30">new</op:operator> <name><name pos:line="369" pos:column="34">Object</name><index pos:line="369" pos:column="40">[<expr><lit:literal type="number" pos:line="369" pos:column="41">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="370" pos:column="13">DirectoryInfo</name></type> <name pos:line="370" pos:column="27">source</name> <init pos:line="370" pos:column="34">= <expr><name><name pos:line="370" pos:column="36">e</name><op:operator pos:line="370" pos:column="37">.</op:operator><name pos:line="370" pos:column="38">Argument</name></name> <op:operator pos:line="370" pos:column="47">as</op:operator> <name pos:line="370" pos:column="50">DirectoryInfo</name></expr></init></decl>;</decl_stmt>
            
            <decl_stmt><decl><type><name pos:line="372" pos:column="13">var</name></type> <name pos:line="372" pos:column="17">docPath</name> <init pos:line="372" pos:column="25">= <expr><call><name pos:line="372" pos:column="27">getPathFor</name><argument_list pos:line="372" pos:column="37">(<argument><expr><name pos:line="372" pos:column="38">source</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="373" pos:column="13">if <condition pos:line="373" pos:column="16">(<expr><name pos:line="373" pos:column="17">null</name> <op:operator pos:line="373" pos:column="22">==</op:operator> <name pos:line="373" pos:column="25">docPath</name></expr>)</condition><then pos:line="373" pos:column="33">
                <expr_stmt><expr><name pos:line="374" pos:column="17">docPath</name> <op:operator pos:line="374" pos:column="25">=</op:operator> <call><name><name pos:line="374" pos:column="27">Path</name><op:operator pos:line="374" pos:column="31">.</op:operator><name pos:line="374" pos:column="32">GetTempFileName</name></name><argument_list pos:line="374" pos:column="47">()</argument_list></call></expr>;</expr_stmt></then></if>
            
            <expr_stmt><expr><name><name pos:line="376" pos:column="13">array</name><index pos:line="376" pos:column="18">[<expr><lit:literal type="number" pos:line="376" pos:column="19">0</lit:literal></expr>]</index></name> <op:operator pos:line="376" pos:column="22">=</op:operator> <name pos:line="376" pos:column="24">source</name> <op:operator pos:line="376" pos:column="31">as</op:operator> <name pos:line="376" pos:column="34">Object</name></expr>;</expr_stmt>
            
            <try pos:line="378" pos:column="13">try
            <block pos:line="379" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="380" pos:column="17">var</name></type> <name pos:line="380" pos:column="21">so</name> <init pos:line="380" pos:column="24">= <expr><op:operator pos:line="380" pos:column="26">new</op:operator> <call><name pos:line="380" pos:column="30">SrcML</name><argument_list pos:line="380" pos:column="35">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="381" pos:column="17">SrcMLFile</name></type> <name pos:line="381" pos:column="27">doc</name> <init pos:line="381" pos:column="31">= <expr><call><name><name pos:line="381" pos:column="33">so</name><op:operator pos:line="381" pos:column="35">.</op:operator><name pos:line="381" pos:column="36">GenerateSrcMLFromDirectory</name></name><argument_list pos:line="381" pos:column="62">(<argument><expr><name><name pos:line="381" pos:column="63">source</name><op:operator pos:line="381" pos:column="69">.</op:operator><name pos:line="381" pos:column="70">FullName</name></name></expr></argument>, <argument><expr><name pos:line="381" pos:column="80">docPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name pos:line="382" pos:column="17">array</name><index pos:line="382" pos:column="22">[<expr><lit:literal type="number" pos:line="382" pos:column="23">1</lit:literal></expr>]</index></name> <op:operator pos:line="382" pos:column="26">=</op:operator> <op:operator pos:line="382" pos:column="28">(</op:operator><name pos:line="382" pos:column="29">doc</name> <op:operator pos:line="382" pos:column="33">==</op:operator> <name pos:line="382" pos:column="36">null</name> <op:operator pos:line="382" pos:column="41">?</op:operator> <name pos:line="382" pos:column="43">null</name> <op:operator pos:line="382" pos:column="48">:</op:operator> <name><name pos:line="382" pos:column="50">doc</name><op:operator pos:line="382" pos:column="53">.</op:operator><name pos:line="382" pos:column="54">FileName</name></name> <op:operator pos:line="382" pos:column="63">as</op:operator> <name pos:line="382" pos:column="66">Object</name><op:operator pos:line="382" pos:column="72">)</op:operator></expr>;</expr_stmt>
            }</block>
            <catch pos:line="384" pos:column="13">catch <parameter_list pos:line="384" pos:column="19">(<param><decl><type><name pos:line="384" pos:column="20">TargetInvocationException</name></type> <name pos:line="384" pos:column="46">ex</name></decl></param>)</parameter_list>
            <block pos:line="385" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="386" pos:column="17">MessageBox</name><op:operator pos:line="386" pos:column="27">.</op:operator><name pos:line="386" pos:column="28">Show</name></name><argument_list pos:line="386" pos:column="32">(<argument><expr><call><name><name pos:line="386" pos:column="33">String</name><op:operator pos:line="386" pos:column="39">.</op:operator><name pos:line="386" pos:column="40">Format</name></name><argument_list pos:line="386" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="386" pos:column="47">"Could not load {0}: {1}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="386" pos:column="74">source</name><op:operator pos:line="386" pos:column="80">.</op:operator><name pos:line="386" pos:column="81">FullName</name></name></expr></argument>, <argument><expr><name><name pos:line="386" pos:column="91">ex</name><op:operator pos:line="386" pos:column="93">.</op:operator><name pos:line="386" pos:column="94">Message</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch>
            <catch pos:line="388" pos:column="13">catch <parameter_list pos:line="388" pos:column="19">(<param><decl><type><name pos:line="388" pos:column="20">SrcMLException</name></type> <name pos:line="388" pos:column="35">ex</name></decl></param>)</parameter_list>
            <block pos:line="389" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="390" pos:column="17">MessageBox</name><op:operator pos:line="390" pos:column="27">.</op:operator><name pos:line="390" pos:column="28">Show</name></name><argument_list pos:line="390" pos:column="32">(<argument><expr><call><name><name pos:line="390" pos:column="33">String</name><op:operator pos:line="390" pos:column="39">.</op:operator><name pos:line="390" pos:column="40">Format</name></name><argument_list pos:line="390" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="390" pos:column="47">"Could not load {0}: {1}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="390" pos:column="74">source</name><op:operator pos:line="390" pos:column="80">.</op:operator><name pos:line="390" pos:column="81">FullName</name></name></expr></argument>, <argument><expr><name><name pos:line="390" pos:column="91">ex</name><op:operator pos:line="390" pos:column="93">.</op:operator><name pos:line="390" pos:column="94">Message</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>

            <expr_stmt><expr><name><name pos:line="393" pos:column="13">e</name><op:operator pos:line="393" pos:column="14">.</op:operator><name pos:line="393" pos:column="15">Result</name></name> <op:operator pos:line="393" pos:column="22">=</op:operator> <name pos:line="393" pos:column="24">array</name></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="396" pos:column="9">private</specifier> <name pos:line="396" pos:column="17">void</name></type> <name pos:line="396" pos:column="22">srcmlGenWorker_RunWorkerCompleted</name><parameter_list pos:line="396" pos:column="55">(<param><decl><type><name pos:line="396" pos:column="56">object</name></type> <name pos:line="396" pos:column="63">sender</name></decl></param>, <param><decl><type><name pos:line="396" pos:column="71">RunWorkerCompletedEventArgs</name></type> <name pos:line="396" pos:column="99">e</name></decl></param>)</parameter_list>
        <block pos:line="397" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="398" pos:column="13">Object</name><index pos:line="398" pos:column="19">[]</index></type> <name pos:line="398" pos:column="22">results</name> <init pos:line="398" pos:column="30">= <expr><name><name pos:line="398" pos:column="32">e</name><op:operator pos:line="398" pos:column="33">.</op:operator><name pos:line="398" pos:column="34">Result</name></name> <op:operator pos:line="398" pos:column="41">as</op:operator> <name><name pos:line="398" pos:column="44">Object</name><index pos:line="398" pos:column="50">[]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="399" pos:column="13">DirectoryInfo</name></type> <name pos:line="399" pos:column="27">source</name> <init pos:line="399" pos:column="34">= <expr><name><name pos:line="399" pos:column="36">results</name><index pos:line="399" pos:column="43">[<expr><lit:literal type="number" pos:line="399" pos:column="44">0</lit:literal></expr>]</index></name> <op:operator pos:line="399" pos:column="47">as</op:operator> <name pos:line="399" pos:column="50">DirectoryInfo</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="400" pos:column="13">string</name></type> <name pos:line="400" pos:column="20">doc</name> <init pos:line="400" pos:column="24">= <expr><name><name pos:line="400" pos:column="26">results</name><index pos:line="400" pos:column="33">[<expr><lit:literal type="number" pos:line="400" pos:column="34">1</lit:literal></expr>]</index></name> <op:operator pos:line="400" pos:column="37">as</op:operator> <name pos:line="400" pos:column="40">string</name></expr></init></decl>;</decl_stmt><comment type="line" pos:line="400" pos:column="47">// SrcMLFile;</comment>

            <if pos:line="402" pos:column="13">if <condition pos:line="402" pos:column="16">(<expr><name pos:line="402" pos:column="17">null</name> <op:operator pos:line="402" pos:column="22">!=</op:operator> <name pos:line="402" pos:column="25">doc</name></expr>)</condition><then pos:line="402" pos:column="29">
            <block pos:line="403" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="404" pos:column="17">srcmlDict</name><index pos:line="404" pos:column="26">[<expr><name pos:line="404" pos:column="27">source</name></expr>]</index></name> <op:operator pos:line="404" pos:column="35">=</op:operator> <name pos:line="404" pos:column="37">doc</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="405" pos:column="17">OnSrcMLFileCreatedEvent</name><argument_list pos:line="405" pos:column="40">(<argument><expr><op:operator pos:line="405" pos:column="41">new</op:operator> <call><name pos:line="405" pos:column="45">SrcMLFileCreatedEventArgs</name><argument_list pos:line="405" pos:column="70">(<argument><expr><name pos:line="405" pos:column="71">doc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else pos:line="407" pos:column="13">else
            <block pos:line="408" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="409" pos:column="17">srcmlDict</name><op:operator pos:line="409" pos:column="26">.</op:operator><name pos:line="409" pos:column="27">Remove</name></name><argument_list pos:line="409" pos:column="33">(<argument><expr><name pos:line="409" pos:column="34">source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="410" pos:column="17">sourceDirectories</name><op:operator pos:line="410" pos:column="34">.</op:operator><name pos:line="410" pos:column="35">Remove</name></name><argument_list pos:line="410" pos:column="41">(<argument><expr><name pos:line="410" pos:column="42">source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name pos:line="412" pos:column="13">generatingXML</name> <op:operator pos:line="412" pos:column="27">=</op:operator> <lit:literal type="boolean" pos:line="412" pos:column="29">false</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="413" pos:column="13">browseInputFoldersButton</name><op:operator pos:line="413" pos:column="37">.</op:operator><name pos:line="413" pos:column="38">Text</name></name> <op:operator pos:line="413" pos:column="43">=</op:operator> <name><name pos:line="413" pos:column="45">Resources</name><op:operator pos:line="413" pos:column="54">.</op:operator><name pos:line="413" pos:column="55">BrowseButton</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="414" pos:column="13">browseInputFoldersButton</name><op:operator pos:line="414" pos:column="37">.</op:operator><name pos:line="414" pos:column="38">Enabled</name></name> <op:operator pos:line="414" pos:column="46">=</op:operator> <lit:literal type="boolean" pos:line="414" pos:column="48">true</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="415" pos:column="13">progressBar</name><op:operator pos:line="415" pos:column="24">.</op:operator><name pos:line="415" pos:column="25">Style</name></name> <op:operator pos:line="415" pos:column="31">=</op:operator> <name><name pos:line="415" pos:column="33">ProgressBarStyle</name><op:operator pos:line="415" pos:column="49">.</op:operator><name pos:line="415" pos:column="50">Blocks</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="416" pos:column="13">messageLabel</name><op:operator pos:line="416" pos:column="25">.</op:operator><name pos:line="416" pos:column="26">Text</name></name> <op:operator pos:line="416" pos:column="31">=</op:operator> <op:operator pos:line="416" pos:column="33">(</op:operator><name pos:line="416" pos:column="34">null</name> <op:operator pos:line="416" pos:column="39">!=</op:operator> <name pos:line="416" pos:column="42">doc</name> <op:operator pos:line="416" pos:column="46">?</op:operator> <lit:literal type="string" pos:line="416" pos:column="48">"Finished importing "</lit:literal> <op:operator pos:line="416" pos:column="70">:</op:operator> <lit:literal type="string" pos:line="416" pos:column="72">"Could not import "</lit:literal><op:operator pos:line="416" pos:column="91">)</op:operator> <op:operator pos:line="416" pos:column="93">+</op:operator> <name pos:line="416" pos:column="95">source</name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name pos:line="418" pos:column="13">setButtons</name><argument_list pos:line="418" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="421" pos:column="9">private</specifier> <name pos:line="421" pos:column="17">void</name></type> <name pos:line="421" pos:column="22">updateSelectedDocument</name><parameter_list pos:line="421" pos:column="44">(<param><decl><type><name pos:line="421" pos:column="45">object</name></type> <name pos:line="421" pos:column="52">sender</name></decl></param>, <param><decl><type><name pos:line="421" pos:column="60">EventArgs</name></type> <name pos:line="421" pos:column="70">e</name></decl></param>)</parameter_list>
        <block pos:line="422" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="423" pos:column="13">updateSelectedInputFolder</name><argument_list pos:line="423" pos:column="38">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <cpp:endregion pos:line="425" pos:column="9">#<cpp:directive pos:line="425" pos:column="10">endregion</cpp:directive></cpp:endregion>

        <function><type><specifier pos:line="427" pos:column="9">private</specifier> <name pos:line="427" pos:column="17">void</name></type> <name pos:line="427" pos:column="22">progressChanged</name><parameter_list pos:line="427" pos:column="37">(<param><decl><type><name pos:line="427" pos:column="38">object</name></type> <name pos:line="427" pos:column="45">sender</name></decl></param>, <param><decl><type><name pos:line="427" pos:column="53">ProgressChangedEventArgs</name></type> <name pos:line="427" pos:column="78">e</name></decl></param>)</parameter_list>
        <block pos:line="428" pos:column="9">{
            <expr_stmt><expr><name><name pos:line="429" pos:column="13">progressBar</name><op:operator pos:line="429" pos:column="24">.</op:operator><name pos:line="429" pos:column="25">Value</name></name> <op:operator pos:line="429" pos:column="31">=</op:operator> <name><name pos:line="429" pos:column="33">e</name><op:operator pos:line="429" pos:column="34">.</op:operator><name pos:line="429" pos:column="35">ProgressPercentage</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="430" pos:column="13">progressLabel</name><op:operator pos:line="430" pos:column="26">.</op:operator><name pos:line="430" pos:column="27">Text</name></name> <op:operator pos:line="430" pos:column="32">=</op:operator> <call><name><name pos:line="430" pos:column="34">String</name><op:operator pos:line="430" pos:column="40">.</op:operator><name pos:line="430" pos:column="41">Format</name></name><argument_list pos:line="430" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="430" pos:column="48">"{0}% done"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="430" pos:column="61">e</name><op:operator pos:line="430" pos:column="62">.</op:operator><name pos:line="430" pos:column="63">ProgressPercentage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <cpp:region pos:line="433" pos:column="9">#<cpp:directive pos:line="433" pos:column="10">region</cpp:directive> transform</cpp:region>
        <comment type="line" pos:line="434" pos:column="9">// Transform button functions</comment>
        <function><type><specifier pos:line="435" pos:column="9">private</specifier> <name pos:line="435" pos:column="17">void</name></type> <name pos:line="435" pos:column="22">runTransformButton_Click</name><parameter_list pos:line="435" pos:column="46">(<param><decl><type><name pos:line="435" pos:column="47">object</name></type> <name pos:line="435" pos:column="54">sender</name></decl></param>, <param><decl><type><name pos:line="435" pos:column="62">EventArgs</name></type> <name pos:line="435" pos:column="72">e</name></decl></param>)</parameter_list>
        <block pos:line="436" pos:column="9">{
            <expr_stmt><expr><name pos:line="437" pos:column="13">generatingSource</name> <op:operator pos:line="437" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="437" pos:column="32">true</lit:literal></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="439" pos:column="13">Object</name><index pos:line="439" pos:column="19">[]</index></type> <name pos:line="439" pos:column="22">args</name> <init pos:line="439" pos:column="27">= <expr><block pos:line="439" pos:column="29">{ <expr><name><name pos:line="439" pos:column="31">dataGridView1</name><op:operator pos:line="439" pos:column="44">.</op:operator><name pos:line="439" pos:column="45">DataSource</name></name> <op:operator pos:line="439" pos:column="56">as</op:operator> <name><name pos:line="439" pos:column="59">List</name><argument_list pos:line="439" pos:column="63">&lt;<argument><name pos:line="439" pos:column="64">DataCell</name></argument>&gt;</argument_list></name></expr>,
                              <expr><name pos:line="440" pos:column="31">selectedDoc</name></expr>,
                              <expr><name><name pos:line="441" pos:column="31">outputFolderComboBox</name><op:operator pos:line="441" pos:column="51">.</op:operator><name pos:line="441" pos:column="52">SelectedItem</name></name> <op:operator pos:line="441" pos:column="65">as</op:operator> <name pos:line="441" pos:column="68">DirectoryInfo</name></expr> }</block></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name pos:line="443" pos:column="13">messageLabel</name><op:operator pos:line="443" pos:column="25">.</op:operator><name pos:line="443" pos:column="26">Text</name></name> <op:operator pos:line="443" pos:column="31">=</op:operator> <lit:literal type="string" pos:line="443" pos:column="33">"Transforming with "</lit:literal> <op:operator pos:line="443" pos:column="54">+</op:operator> <call><name><name pos:line="443" pos:column="56">selectedTransform</name><op:operator pos:line="443" pos:column="73">.</op:operator><name pos:line="443" pos:column="74">GetType</name></name><argument_list pos:line="443" pos:column="81">()</argument_list></call><op:operator pos:line="443" pos:column="83">.</op:operator><name pos:line="443" pos:column="84">FullName</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="444" pos:column="13">runTransformButton</name><op:operator pos:line="444" pos:column="31">.</op:operator><name pos:line="444" pos:column="32">Text</name></name> <op:operator pos:line="444" pos:column="37">=</op:operator> <name><name pos:line="444" pos:column="39">Resources</name><op:operator pos:line="444" pos:column="48">.</op:operator><name pos:line="444" pos:column="49">ExecuteButtonRunning</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="445" pos:column="13">runTransformButton</name><op:operator pos:line="445" pos:column="31">.</op:operator><name pos:line="445" pos:column="32">Enabled</name></name> <op:operator pos:line="445" pos:column="40">=</op:operator> <lit:literal type="boolean" pos:line="445" pos:column="42">false</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="446" pos:column="13">exportSourceWorker</name><op:operator pos:line="446" pos:column="31">.</op:operator><name pos:line="446" pos:column="32">RunWorkerAsync</name></name><argument_list pos:line="446" pos:column="46">(<argument><expr><name pos:line="446" pos:column="47">args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="447" pos:column="13">setButtons</name><argument_list pos:line="447" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="450" pos:column="9">private</specifier> <name pos:line="450" pos:column="17">void</name></type> <name pos:line="450" pos:column="22">exportSourceWorker_DoWork</name><parameter_list pos:line="450" pos:column="47">(<param><decl><type><name pos:line="450" pos:column="48">object</name></type> <name pos:line="450" pos:column="55">sender</name></decl></param>, <param><decl><type><name pos:line="450" pos:column="63">DoWorkEventArgs</name></type> <name pos:line="450" pos:column="79">e</name></decl></param>)</parameter_list>
        <block pos:line="451" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="452" pos:column="13">Object</name><index pos:line="452" pos:column="19">[]</index></type> <name pos:line="452" pos:column="22">args</name> <init pos:line="452" pos:column="27">= <expr><name><name pos:line="452" pos:column="29">e</name><op:operator pos:line="452" pos:column="30">.</op:operator><name pos:line="452" pos:column="31">Argument</name></name> <op:operator pos:line="452" pos:column="40">as</op:operator> <name><name pos:line="452" pos:column="43">Object</name><index pos:line="452" pos:column="49">[]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="453" pos:column="13">Object</name><index pos:line="453" pos:column="19">[]</index></type> <name pos:line="453" pos:column="22">results</name> <init pos:line="453" pos:column="30">= <expr><op:operator pos:line="453" pos:column="32">new</op:operator> <name><name pos:line="453" pos:column="36">Object</name><index pos:line="453" pos:column="42">[<expr><lit:literal type="number" pos:line="453" pos:column="43">3</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name><name pos:line="455" pos:column="13">List</name><argument_list pos:line="455" pos:column="17">&lt;<argument><name pos:line="455" pos:column="18">DataCell</name></argument>&gt;</argument_list></name></type> <name pos:line="455" pos:column="28">queryResults</name> <init pos:line="455" pos:column="41">= <expr><name><name pos:line="455" pos:column="43">args</name><index pos:line="455" pos:column="47">[<expr><lit:literal type="number" pos:line="455" pos:column="48">0</lit:literal></expr>]</index></name> <op:operator pos:line="455" pos:column="51">as</op:operator> <name><name pos:line="455" pos:column="54">List</name><argument_list pos:line="455" pos:column="58">&lt;<argument><name pos:line="455" pos:column="59">DataCell</name></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="456" pos:column="13">SrcMLFile</name></type> <name pos:line="456" pos:column="23">doc</name> <init pos:line="456" pos:column="27">= <expr><name><name pos:line="456" pos:column="29">args</name><index pos:line="456" pos:column="33">[<expr><lit:literal type="number" pos:line="456" pos:column="34">1</lit:literal></expr>]</index></name> <op:operator pos:line="456" pos:column="37">as</op:operator> <name pos:line="456" pos:column="40">SrcMLFile</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="457" pos:column="13">DirectoryInfo</name></type> <name pos:line="457" pos:column="27">target</name> <init pos:line="457" pos:column="34">= <expr><name><name pos:line="457" pos:column="36">args</name><index pos:line="457" pos:column="40">[<expr><lit:literal type="number" pos:line="457" pos:column="41">2</lit:literal></expr>]</index></name> <op:operator pos:line="457" pos:column="44">as</op:operator> <name pos:line="457" pos:column="47">DirectoryInfo</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="458" pos:column="13">SrcMLFile</name></type> <name pos:line="458" pos:column="23">output</name></decl>;</decl_stmt>

            <decl_stmt><decl><type><name><name pos:line="460" pos:column="13">Dictionary</name><argument_list pos:line="460" pos:column="23">&lt;<argument><name pos:line="460" pos:column="24">String</name></argument>, <argument><name pos:line="460" pos:column="32">Exception</name></argument>&gt;</argument_list></name></type> <name pos:line="460" pos:column="43">errors</name> <init pos:line="460" pos:column="50">= <expr><op:operator pos:line="460" pos:column="52">new</op:operator> <call><name><name pos:line="460" pos:column="56">Dictionary</name><argument_list pos:line="460" pos:column="66">&lt;<argument><name pos:line="460" pos:column="67">string</name></argument>, <argument><name pos:line="460" pos:column="75">Exception</name></argument>&gt;</argument_list></name><argument_list pos:line="460" pos:column="85">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="462" pos:column="13">var</name></type> <name pos:line="462" pos:column="17">outputDoc</name> <init pos:line="462" pos:column="27">= <expr><call><name pos:line="462" pos:column="29">getPathFor</name><argument_list pos:line="462" pos:column="39">(<argument><expr><name pos:line="462" pos:column="40">target</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if pos:line="464" pos:column="13">if <condition pos:line="464" pos:column="16">(<expr><name pos:line="464" pos:column="17">null</name> <op:operator pos:line="464" pos:column="22">!=</op:operator> <name pos:line="464" pos:column="25">queryResults</name></expr>)</condition><then pos:line="464" pos:column="38">
            <block pos:line="465" pos:column="13">{
                <comment type="line" pos:line="466" pos:column="17">// get the files that contain the changes the user wants to make</comment>
                <comment type="line" pos:line="467" pos:column="17">// put the files in a list -- this takes more memory, but will be stable</comment>
                <comment type="line" pos:line="468" pos:column="17">//var units = (from node in queryResults</comment>
                <comment type="line" pos:line="469" pos:column="17">//             select (node.Enabled ? node.TransformedXml : node.Xml).Ancestors(SRC.Unit).First()).Distinct().ToList();</comment>

                <decl_stmt><decl><type><name pos:line="471" pos:column="17">var</name></type> <name pos:line="471" pos:column="21">units</name> <init pos:line="471" pos:column="27">= <expr><op:operator pos:line="471" pos:column="29">(</op:operator><linq><from pos:line="471" pos:column="30">from <expr><name pos:line="471" pos:column="35">node</name></expr> <in pos:line="471" pos:column="40">in <expr><name pos:line="471" pos:column="43">queryResults</name></expr></in></from>
                             <where pos:line="472" pos:column="30">where <expr><name><name pos:line="472" pos:column="36">node</name><op:operator pos:line="472" pos:column="40">.</op:operator><name pos:line="472" pos:column="41">Enabled</name></name></expr></where>
                             <where pos:line="473" pos:column="30">where <expr><name><name pos:line="473" pos:column="36">node</name><op:operator pos:line="473" pos:column="40">.</op:operator><name pos:line="473" pos:column="41">TransformedXml</name></name> <op:operator pos:line="473" pos:column="56">!=</op:operator> <name pos:line="473" pos:column="59">null</name></expr></where>
                             <where pos:line="474" pos:column="30">where <expr><call><name><name pos:line="474" pos:column="36">node</name><op:operator pos:line="474" pos:column="40">.</op:operator><name pos:line="474" pos:column="41">TransformedXml</name><op:operator pos:line="474" pos:column="55">.</op:operator><name pos:line="474" pos:column="56">Ancestors</name></name><argument_list pos:line="474" pos:column="65">(<argument><expr><name><name pos:line="474" pos:column="66">SRC</name><op:operator pos:line="474" pos:column="69">.</op:operator><name pos:line="474" pos:column="70">Unit</name></name></expr></argument>)</argument_list></call><op:operator pos:line="474" pos:column="75">.</op:operator><call><name pos:line="474" pos:column="76">Any</name><argument_list pos:line="474" pos:column="79">()</argument_list></call></expr></where>
                             <select pos:line="475" pos:column="30">select <expr><call><name><name pos:line="475" pos:column="37">node</name><op:operator pos:line="475" pos:column="41">.</op:operator><name pos:line="475" pos:column="42">TransformedXml</name><op:operator pos:line="475" pos:column="56">.</op:operator><name pos:line="475" pos:column="57">Ancestors</name></name><argument_list pos:line="475" pos:column="66">(<argument><expr><name><name pos:line="475" pos:column="67">SRC</name><op:operator pos:line="475" pos:column="70">.</op:operator><name pos:line="475" pos:column="71">Unit</name></name></expr></argument>)</argument_list></call><op:operator pos:line="475" pos:column="76">.</op:operator><call><name pos:line="475" pos:column="77">First</name><argument_list pos:line="475" pos:column="82">()</argument_list></call></expr></select></linq><op:operator pos:line="475" pos:column="84">)</op:operator><op:operator pos:line="475" pos:column="85">.</op:operator><call><name pos:line="475" pos:column="86">Distinct</name><argument_list pos:line="475" pos:column="94">()</argument_list></call><op:operator pos:line="475" pos:column="96">.</op:operator><call><name pos:line="475" pos:column="97">ToList</name><argument_list pos:line="475" pos:column="103">()</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name pos:line="477" pos:column="17">doc</name><op:operator pos:line="477" pos:column="20">.</op:operator><name pos:line="477" pos:column="21">Save</name></name><argument_list pos:line="477" pos:column="25">(<argument><expr><name pos:line="477" pos:column="26">outputDoc</name></expr></argument>, <argument><expr><name pos:line="477" pos:column="37">units</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name pos:line="479" pos:column="17">output</name> <op:operator pos:line="479" pos:column="24">=</op:operator> <op:operator pos:line="479" pos:column="26">new</op:operator> <call><name pos:line="479" pos:column="30">SrcMLFile</name><argument_list pos:line="479" pos:column="39">(<argument><expr><name pos:line="479" pos:column="40">outputDoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="480" pos:column="17">output</name><op:operator pos:line="480" pos:column="23">.</op:operator><name pos:line="480" pos:column="24">ProjectDirectory</name></name> <op:operator pos:line="480" pos:column="41">=</op:operator> <name><name pos:line="480" pos:column="43">target</name><op:operator pos:line="480" pos:column="49">.</op:operator><name pos:line="480" pos:column="50">FullName</name></name></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="482" pos:column="17">float</name></type> <name pos:line="482" pos:column="23">numUnits</name> <init pos:line="482" pos:column="32">= <expr><call><name><name pos:line="482" pos:column="34">output</name><op:operator pos:line="482" pos:column="40">.</op:operator><name pos:line="482" pos:column="41">FileUnits</name><op:operator pos:line="482" pos:column="50">.</op:operator><name pos:line="482" pos:column="51">Count</name></name><argument_list pos:line="482" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="483" pos:column="17">int</name></type> <name pos:line="483" pos:column="21">unitsProcessed</name> <init pos:line="483" pos:column="36">= <expr><lit:literal type="number" pos:line="483" pos:column="38">0</lit:literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="484" pos:column="17">int</name></type> <name pos:line="484" pos:column="21">percentComplete</name> <init pos:line="484" pos:column="37">= <expr><lit:literal type="number" pos:line="484" pos:column="39">0</lit:literal></expr></init></decl>;</decl_stmt>

                <foreach pos:line="486" pos:column="17">foreach (<init><decl><type><name pos:line="486" pos:column="26">var</name></type> <name pos:line="486" pos:column="30">unit</name> <range pos:line="486" pos:column="35">in <expr><name><name pos:line="486" pos:column="38">output</name><op:operator pos:line="486" pos:column="44">.</op:operator><name pos:line="486" pos:column="45">FileUnits</name></name></expr></range></decl></init>)
                <block pos:line="487" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="488" pos:column="21">var</name></type> <name pos:line="488" pos:column="25">filename</name> <init pos:line="488" pos:column="34">= <expr><call><name><name pos:line="488" pos:column="36">unit</name><op:operator pos:line="488" pos:column="40">.</op:operator><name pos:line="488" pos:column="41">Attribute</name></name><argument_list pos:line="488" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="488" pos:column="51">"filename"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="488" pos:column="62">.</op:operator><name pos:line="488" pos:column="63">Value</name></expr></init></decl>;</decl_stmt>

                    <decl_stmt><decl><type><name pos:line="490" pos:column="21">FileInfo</name></type> <name pos:line="490" pos:column="30">fileInfo</name> <init pos:line="490" pos:column="39">= <expr><op:operator pos:line="490" pos:column="41">new</op:operator> <call><name pos:line="490" pos:column="45">FileInfo</name><argument_list pos:line="490" pos:column="53">(<argument><expr><name pos:line="490" pos:column="54">filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    
                    <try pos:line="492" pos:column="21">try
                    <block pos:line="493" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="494" pos:column="25">Directory</name><op:operator pos:line="494" pos:column="34">.</op:operator><name pos:line="494" pos:column="35">CreateDirectory</name></name><argument_list pos:line="494" pos:column="50">(<argument><expr><name><name pos:line="494" pos:column="51">fileInfo</name><op:operator pos:line="494" pos:column="59">.</op:operator><name pos:line="494" pos:column="60">DirectoryName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="495" pos:column="25">File</name><op:operator pos:line="495" pos:column="29">.</op:operator><name pos:line="495" pos:column="30">WriteAllText</name></name><argument_list pos:line="495" pos:column="42">(<argument><expr><name pos:line="495" pos:column="43">filename</name></expr></argument>, <argument><expr><call><name><name pos:line="495" pos:column="53">unit</name><op:operator pos:line="495" pos:column="57">.</op:operator><name pos:line="495" pos:column="58">ToSource</name></name><argument_list pos:line="495" pos:column="66">()</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="495" pos:column="70">Encoding</name><op:operator pos:line="495" pos:column="78">.</op:operator><name pos:line="495" pos:column="79">UTF8</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="496" pos:column="25">percentComplete</name> <op:operator pos:line="496" pos:column="41">=</op:operator> <op:operator pos:line="496" pos:column="43">(</op:operator><op:operator pos:line="496" pos:column="44">++</op:operator><name pos:line="496" pos:column="46">unitsProcessed</name> <op:operator pos:line="496" pos:column="61">/</op:operator> <op:operator pos:line="496" pos:column="63">(</op:operator><name pos:line="496" pos:column="64">int</name><op:operator pos:line="496" pos:column="67">)</op:operator><name pos:line="496" pos:column="68">numUnits</name><op:operator pos:line="496" pos:column="76">)</op:operator></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="497" pos:column="25">exportSourceWorker</name><op:operator pos:line="497" pos:column="43">.</op:operator><name pos:line="497" pos:column="44">ReportProgress</name></name><argument_list pos:line="497" pos:column="58">(<argument><expr><name pos:line="497" pos:column="59">percentComplete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block>
                    <catch pos:line="499" pos:column="21">catch <parameter_list pos:line="499" pos:column="27">(<param><decl><type><name pos:line="499" pos:column="28">UnauthorizedAccessException</name></type> <name pos:line="499" pos:column="56">uae</name></decl></param>)</parameter_list>
                    <block pos:line="500" pos:column="21">{
                        <expr_stmt><expr><name><name pos:line="501" pos:column="25">errors</name><index pos:line="501" pos:column="31">[<expr><name pos:line="501" pos:column="32">filename</name></expr>]</index></name> <op:operator pos:line="501" pos:column="42">=</op:operator> <name pos:line="501" pos:column="44">uae</name></expr>;</expr_stmt>
                    }</block></catch></try>
                }</block></foreach>

                <expr_stmt><expr><name><name pos:line="505" pos:column="17">results</name><index pos:line="505" pos:column="24">[<expr><lit:literal type="number" pos:line="505" pos:column="25">0</lit:literal></expr>]</index></name> <op:operator pos:line="505" pos:column="28">=</op:operator> <name pos:line="505" pos:column="30">target</name> <op:operator pos:line="505" pos:column="37">as</op:operator> <name pos:line="505" pos:column="40">Object</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="506" pos:column="17">results</name><index pos:line="506" pos:column="24">[<expr><lit:literal type="number" pos:line="506" pos:column="25">1</lit:literal></expr>]</index></name> <op:operator pos:line="506" pos:column="28">=</op:operator> <name pos:line="506" pos:column="30">output</name> <op:operator pos:line="506" pos:column="37">as</op:operator> <name pos:line="506" pos:column="40">Object</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="507" pos:column="17">results</name><index pos:line="507" pos:column="24">[<expr><lit:literal type="number" pos:line="507" pos:column="25">2</lit:literal></expr>]</index></name> <op:operator pos:line="507" pos:column="28">=</op:operator> <name pos:line="507" pos:column="30">errors</name> <op:operator pos:line="507" pos:column="37">as</op:operator> <name pos:line="507" pos:column="40">Object</name></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><name><name pos:line="510" pos:column="13">e</name><op:operator pos:line="510" pos:column="14">.</op:operator><name pos:line="510" pos:column="15">Result</name></name> <op:operator pos:line="510" pos:column="22">=</op:operator> <name pos:line="510" pos:column="24">results</name> <op:operator pos:line="510" pos:column="32">as</op:operator> <name pos:line="510" pos:column="35">Object</name></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="513" pos:column="9">private</specifier> <name pos:line="513" pos:column="17">void</name></type> <name pos:line="513" pos:column="22">exportSourceWorker_RunWorkerCompleted</name><parameter_list pos:line="513" pos:column="59">(<param><decl><type><name pos:line="513" pos:column="60">object</name></type> <name pos:line="513" pos:column="67">sender</name></decl></param>, <param><decl><type><name pos:line="513" pos:column="75">RunWorkerCompletedEventArgs</name></type> <name pos:line="513" pos:column="103">e</name></decl></param>)</parameter_list>
        <block pos:line="514" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="515" pos:column="13">Object</name><index pos:line="515" pos:column="19">[]</index></type> <name pos:line="515" pos:column="22">results</name> <init pos:line="515" pos:column="30">= <expr><name><name pos:line="515" pos:column="32">e</name><op:operator pos:line="515" pos:column="33">.</op:operator><name pos:line="515" pos:column="34">Result</name></name> <op:operator pos:line="515" pos:column="41">as</op:operator> <name><name pos:line="515" pos:column="44">Object</name><index pos:line="515" pos:column="50">[]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="516" pos:column="13">DirectoryInfo</name></type> <name pos:line="516" pos:column="27">outputDir</name> <init pos:line="516" pos:column="37">= <expr><name><name pos:line="516" pos:column="39">results</name><index pos:line="516" pos:column="46">[<expr><lit:literal type="number" pos:line="516" pos:column="47">0</lit:literal></expr>]</index></name> <op:operator pos:line="516" pos:column="50">as</op:operator> <name pos:line="516" pos:column="53">DirectoryInfo</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="517" pos:column="13">SrcMLFile</name></type> <name pos:line="517" pos:column="23">outputDoc</name> <init pos:line="517" pos:column="33">= <expr><name><name pos:line="517" pos:column="35">results</name><index pos:line="517" pos:column="42">[<expr><lit:literal type="number" pos:line="517" pos:column="43">1</lit:literal></expr>]</index></name> <op:operator pos:line="517" pos:column="46">as</op:operator> <name pos:line="517" pos:column="49">SrcMLFile</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="518" pos:column="13">Dictionary</name><argument_list pos:line="518" pos:column="23">&lt;<argument><name pos:line="518" pos:column="24">String</name></argument>, <argument><name pos:line="518" pos:column="32">Exception</name></argument>&gt;</argument_list></name></type> <name pos:line="518" pos:column="43">errors</name> <init pos:line="518" pos:column="50">= <expr><name><name pos:line="518" pos:column="52">results</name><index pos:line="518" pos:column="59">[<expr><lit:literal type="number" pos:line="518" pos:column="60">2</lit:literal></expr>]</index></name> <op:operator pos:line="518" pos:column="63">as</op:operator> <name><name pos:line="518" pos:column="66">Dictionary</name><argument_list pos:line="518" pos:column="76">&lt;<argument><name pos:line="518" pos:column="77">String</name></argument>, <argument><name pos:line="518" pos:column="85">Exception</name></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name pos:line="520" pos:column="13">addNewSourceFolder</name><argument_list pos:line="520" pos:column="31">(<argument><expr><name pos:line="520" pos:column="32">outputDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="522" pos:column="13">generatingSource</name> <op:operator pos:line="522" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="522" pos:column="32">false</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="523" pos:column="13">runTransformButton</name><op:operator pos:line="523" pos:column="31">.</op:operator><name pos:line="523" pos:column="32">Text</name></name> <op:operator pos:line="523" pos:column="37">=</op:operator> <name><name pos:line="523" pos:column="39">Resources</name><op:operator pos:line="523" pos:column="48">.</op:operator><name pos:line="523" pos:column="49">ExecuteButton</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="524" pos:column="13">progressBar</name><op:operator pos:line="524" pos:column="24">.</op:operator><name pos:line="524" pos:column="25">Value</name></name> <op:operator pos:line="524" pos:column="31">=</op:operator> <lit:literal type="number" pos:line="524" pos:column="33">0</lit:literal></expr>;</expr_stmt>
            <if pos:line="525" pos:column="13">if <condition pos:line="525" pos:column="16">(<expr><lit:literal type="number" pos:line="525" pos:column="17">0</lit:literal> <op:operator pos:line="525" pos:column="19">==</op:operator> <name><name pos:line="525" pos:column="22">errors</name><op:operator pos:line="525" pos:column="28">.</op:operator><name pos:line="525" pos:column="29">Count</name></name></expr>)</condition><then pos:line="525" pos:column="35">
                <expr_stmt><expr><name><name pos:line="526" pos:column="17">messageLabel</name><op:operator pos:line="526" pos:column="29">.</op:operator><name pos:line="526" pos:column="30">Text</name></name> <op:operator pos:line="526" pos:column="35">=</op:operator> <lit:literal type="string" pos:line="526" pos:column="37">"Wrote source to "</lit:literal> <op:operator pos:line="526" pos:column="56">+</op:operator> <name pos:line="526" pos:column="58">outputDir</name></expr>;</expr_stmt></then>
            <else pos:line="527" pos:column="13">else <if pos:line="527" pos:column="18">if<condition pos:line="527" pos:column="20">(<expr><name><name pos:line="527" pos:column="21">errors</name><op:operator pos:line="527" pos:column="27">.</op:operator><name pos:line="527" pos:column="28">Count</name></name> <op:operator pos:line="527" pos:column="34">&lt;</op:operator> <call><name><name pos:line="527" pos:column="36">outputDoc</name><op:operator pos:line="527" pos:column="45">.</op:operator><name pos:line="527" pos:column="46">FileUnits</name><op:operator pos:line="527" pos:column="55">.</op:operator><name pos:line="527" pos:column="56">Count</name></name><argument_list pos:line="527" pos:column="61">()</argument_list></call></expr>)</condition><then pos:line="527" pos:column="64">
                <expr_stmt><expr><name><name pos:line="528" pos:column="17">messageLabel</name><op:operator pos:line="528" pos:column="29">.</op:operator><name pos:line="528" pos:column="30">Text</name></name> <op:operator pos:line="528" pos:column="35">=</op:operator> <call><name><name pos:line="528" pos:column="37">String</name><op:operator pos:line="528" pos:column="43">.</op:operator><name pos:line="528" pos:column="44">Format</name></name><argument_list pos:line="528" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="528" pos:column="51">"Wrote Source to {0}. Could not write {1} / {2} files"</lit:literal></expr></argument>,
                                                    <argument><expr><name pos:line="529" pos:column="53">outputDir</name></expr></argument>, <argument><expr><name><name pos:line="529" pos:column="64">errors</name><op:operator pos:line="529" pos:column="70">.</op:operator><name pos:line="529" pos:column="71">Count</name></name></expr></argument>, <argument><expr><call><name><name pos:line="529" pos:column="78">outputDoc</name><op:operator pos:line="529" pos:column="87">.</op:operator><name pos:line="529" pos:column="88">FileUnits</name><op:operator pos:line="529" pos:column="97">.</op:operator><name pos:line="529" pos:column="98">Count</name></name><argument_list pos:line="529" pos:column="103">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else pos:line="530" pos:column="13">else
                <expr_stmt><expr><name><name pos:line="531" pos:column="17">messageLabel</name><op:operator pos:line="531" pos:column="29">.</op:operator><name pos:line="531" pos:column="30">Text</name></name> <op:operator pos:line="531" pos:column="35">=</op:operator> <lit:literal type="string" pos:line="531" pos:column="37">"Could not write any files to "</lit:literal> <op:operator pos:line="531" pos:column="69">+</op:operator> <name pos:line="531" pos:column="71">outputDir</name></expr>;</expr_stmt></else></if></else></if>
            <expr_stmt><expr><name><name pos:line="532" pos:column="13">progressLabel</name><op:operator pos:line="532" pos:column="26">.</op:operator><name pos:line="532" pos:column="27">Text</name></name> <op:operator pos:line="532" pos:column="32">=</op:operator> <lit:literal type="string" pos:line="532" pos:column="34">""</lit:literal></expr>;</expr_stmt>

            <expr_stmt><expr><call><name pos:line="534" pos:column="13">OnSrcMLFileCreatedEvent</name><argument_list pos:line="534" pos:column="36">(<argument><expr><op:operator pos:line="534" pos:column="37">new</op:operator> <call><name pos:line="534" pos:column="41">SrcMLFileCreatedEventArgs</name><argument_list pos:line="534" pos:column="66">(<argument><expr><name><name pos:line="534" pos:column="67">outputDoc</name><op:operator pos:line="534" pos:column="76">.</op:operator><name pos:line="534" pos:column="77">FileName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="535" pos:column="13">setButtons</name><argument_list pos:line="535" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <cpp:endregion pos:line="537" pos:column="9">#<cpp:directive pos:line="537" pos:column="10">endregion</cpp:directive></cpp:endregion>

        <cpp:region pos:line="539" pos:column="9">#<cpp:directive pos:line="539" pos:column="10">region</cpp:directive> testing srcml transforms</cpp:region>
        <function><type><specifier pos:line="540" pos:column="9">private</specifier> <name pos:line="540" pos:column="17">void</name></type> <name pos:line="540" pos:column="22">runQueryButton_Click</name><parameter_list pos:line="540" pos:column="42">(<param><decl><type><name pos:line="540" pos:column="43">object</name></type> <name pos:line="540" pos:column="50">sender</name></decl></param>, <param><decl><type><name pos:line="540" pos:column="58">EventArgs</name></type> <name pos:line="540" pos:column="68">e</name></decl></param>)</parameter_list>
        <block pos:line="541" pos:column="9">{
            <expr_stmt><expr><name pos:line="542" pos:column="13">queryingXML</name> <op:operator pos:line="542" pos:column="25">=</op:operator> <lit:literal type="boolean" pos:line="542" pos:column="27">true</lit:literal></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="543" pos:column="13">string</name></type> <name pos:line="543" pos:column="20">filename</name> <init pos:line="543" pos:column="29">= <expr><name><name pos:line="543" pos:column="31">srcmlDict</name><index pos:line="543" pos:column="40">[<expr><name><name pos:line="543" pos:column="41">inputFolderComboBox</name><op:operator pos:line="543" pos:column="60">.</op:operator><name pos:line="543" pos:column="61">SelectedItem</name></name> <op:operator pos:line="543" pos:column="74">as</op:operator> <name pos:line="543" pos:column="77">DirectoryInfo</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="544" pos:column="13">Object</name><index pos:line="544" pos:column="19">[]</index></type> <name pos:line="544" pos:column="22">args</name> <init pos:line="544" pos:column="27">= <expr><block pos:line="544" pos:column="29">{ <expr><name pos:line="544" pos:column="31">filename</name></expr>, <expr><name pos:line="544" pos:column="41">selectedTransform</name></expr> }</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="545" pos:column="13">runQueryButton</name><op:operator pos:line="545" pos:column="27">.</op:operator><name pos:line="545" pos:column="28">Text</name></name> <op:operator pos:line="545" pos:column="33">=</op:operator> <name><name pos:line="545" pos:column="35">Resources</name><op:operator pos:line="545" pos:column="44">.</op:operator><name pos:line="545" pos:column="45">TestButtonRunning</name></name></expr>;</expr_stmt>
            
            <expr_stmt><expr><name><name pos:line="547" pos:column="13">messageLabel</name><op:operator pos:line="547" pos:column="25">.</op:operator><name pos:line="547" pos:column="26">Text</name></name> <op:operator pos:line="547" pos:column="31">=</op:operator> <lit:literal type="string" pos:line="547" pos:column="33">"Querying "</lit:literal> <op:operator pos:line="547" pos:column="45">+</op:operator> <call><name><name pos:line="547" pos:column="47">Path</name><op:operator pos:line="547" pos:column="51">.</op:operator><name pos:line="547" pos:column="52">GetFileName</name></name><argument_list pos:line="547" pos:column="63">(<argument><expr><name pos:line="547" pos:column="64">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="548" pos:column="13">queryWorker</name><op:operator pos:line="548" pos:column="24">.</op:operator><name pos:line="548" pos:column="25">RunWorkerAsync</name></name><argument_list pos:line="548" pos:column="39">(<argument><expr><name pos:line="548" pos:column="40">args</name> <op:operator pos:line="548" pos:column="45">as</op:operator> <name pos:line="548" pos:column="48">Object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="549" pos:column="13">setButtons</name><argument_list pos:line="549" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="552" pos:column="9">private</specifier> <name pos:line="552" pos:column="17">void</name></type> <name pos:line="552" pos:column="22">queryWorker_DoWork</name><parameter_list pos:line="552" pos:column="40">(<param><decl><type><name pos:line="552" pos:column="41">object</name></type> <name pos:line="552" pos:column="48">sender</name></decl></param>, <param><decl><type><name pos:line="552" pos:column="56">DoWorkEventArgs</name></type> <name pos:line="552" pos:column="72">e</name></decl></param>)</parameter_list>
        <block pos:line="553" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="554" pos:column="13">Object</name><index pos:line="554" pos:column="19">[]</index></type> <name pos:line="554" pos:column="22">args</name> <init pos:line="554" pos:column="27">= <expr><name><name pos:line="554" pos:column="29">e</name><op:operator pos:line="554" pos:column="30">.</op:operator><name pos:line="554" pos:column="31">Argument</name></name> <op:operator pos:line="554" pos:column="40">as</op:operator> <name><name pos:line="554" pos:column="43">Object</name><index pos:line="554" pos:column="49">[]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="556" pos:column="13">SrcMLFile</name></type> <name pos:line="556" pos:column="23">doc</name> <init pos:line="556" pos:column="27">= <expr><op:operator pos:line="556" pos:column="29">new</op:operator> <call><name pos:line="556" pos:column="33">SrcMLFile</name><argument_list pos:line="556" pos:column="42">(<argument><expr><name><name pos:line="556" pos:column="43">args</name><index pos:line="556" pos:column="47">[<expr><lit:literal type="number" pos:line="556" pos:column="48">0</lit:literal></expr>]</index></name> <op:operator pos:line="556" pos:column="51">as</op:operator> <name pos:line="556" pos:column="54">string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="557" pos:column="13">ITransform</name></type> <name pos:line="557" pos:column="24">transform</name> <init pos:line="557" pos:column="34">= <expr><name><name pos:line="557" pos:column="36">args</name><index pos:line="557" pos:column="40">[<expr><lit:literal type="number" pos:line="557" pos:column="41">1</lit:literal></expr>]</index></name> <op:operator pos:line="557" pos:column="44">as</op:operator> <name pos:line="557" pos:column="47">ITransform</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="559" pos:column="13">SyntaticCategoryDataModel</name></type> <name pos:line="559" pos:column="39">categories</name> <init pos:line="559" pos:column="50">= <expr><op:operator pos:line="559" pos:column="52">new</op:operator> <call><name pos:line="559" pos:column="56">SyntaticCategoryDataModel</name><argument_list pos:line="559" pos:column="81">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="560" pos:column="13">List</name><argument_list pos:line="560" pos:column="17">&lt;<argument><name pos:line="560" pos:column="18">DataCell</name></argument>&gt;</argument_list></name></type> <name pos:line="560" pos:column="28">data</name> <init pos:line="560" pos:column="33">= <expr><call><name pos:line="560" pos:column="35">executeTransform</name><argument_list pos:line="560" pos:column="51">(<argument><expr><name pos:line="560" pos:column="52">doc</name></expr></argument>, <argument><expr><name pos:line="560" pos:column="57">transform</name></expr></argument>, <argument><expr pos:line="560" pos:column="68">ref <name pos:line="560" pos:column="72">categories</name></expr></argument>, <argument><expr><name pos:line="560" pos:column="84">sender</name> <op:operator pos:line="560" pos:column="91">as</op:operator> <name pos:line="560" pos:column="94">BackgroundWorker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="561" pos:column="13">Object</name><index pos:line="561" pos:column="19">[]</index></type> <name pos:line="561" pos:column="22">results</name> <init pos:line="561" pos:column="30">= <expr><block pos:line="561" pos:column="32">{ <expr><name pos:line="561" pos:column="34">doc</name></expr>, <expr><name pos:line="561" pos:column="39">data</name></expr>, <expr><name pos:line="561" pos:column="45">categories</name></expr> }</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="562" pos:column="13">e</name><op:operator pos:line="562" pos:column="14">.</op:operator><name pos:line="562" pos:column="15">Result</name></name> <op:operator pos:line="562" pos:column="22">=</op:operator> <name pos:line="562" pos:column="24">results</name></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="565" pos:column="9">private</specifier> <name pos:line="565" pos:column="17">void</name></type> <name pos:line="565" pos:column="22">queryWorker_RunWorkerCompleted</name><parameter_list pos:line="565" pos:column="52">(<param><decl><type><name pos:line="565" pos:column="53">object</name></type> <name pos:line="565" pos:column="60">sender</name></decl></param>, <param><decl><type><name pos:line="565" pos:column="68">RunWorkerCompletedEventArgs</name></type> <name pos:line="565" pos:column="96">e</name></decl></param>)</parameter_list>
        <block pos:line="566" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="567" pos:column="13">Object</name><index pos:line="567" pos:column="19">[]</index></type> <name pos:line="567" pos:column="22">results</name> <init pos:line="567" pos:column="30">= <expr><name><name pos:line="567" pos:column="32">e</name><op:operator pos:line="567" pos:column="33">.</op:operator><name pos:line="567" pos:column="34">Result</name></name> <op:operator pos:line="567" pos:column="41">as</op:operator> <name><name pos:line="567" pos:column="44">Object</name><index pos:line="567" pos:column="50">[]</index></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name pos:line="569" pos:column="13">this</name><op:operator pos:line="569" pos:column="17">.</op:operator><name pos:line="569" pos:column="18">selectedDoc</name></name> <op:operator pos:line="569" pos:column="30">=</op:operator> <name><name pos:line="569" pos:column="32">results</name><index pos:line="569" pos:column="39">[<expr><lit:literal type="number" pos:line="569" pos:column="40">0</lit:literal></expr>]</index></name> <op:operator pos:line="569" pos:column="43">as</op:operator> <name pos:line="569" pos:column="46">SrcMLFile</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="570" pos:column="13">this</name><op:operator pos:line="570" pos:column="17">.</op:operator><name pos:line="570" pos:column="18">data</name></name> <op:operator pos:line="570" pos:column="23">=</op:operator> <name><name pos:line="570" pos:column="25">results</name><index pos:line="570" pos:column="32">[<expr><lit:literal type="number" pos:line="570" pos:column="33">1</lit:literal></expr>]</index></name> <op:operator pos:line="570" pos:column="36">as</op:operator> <name><name pos:line="570" pos:column="39">List</name><argument_list pos:line="570" pos:column="43">&lt;<argument><name pos:line="570" pos:column="44">DataCell</name></argument>&gt;</argument_list></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="571" pos:column="13">this</name><op:operator pos:line="571" pos:column="17">.</op:operator><name pos:line="571" pos:column="18">categories</name></name> <op:operator pos:line="571" pos:column="29">=</op:operator> <name><name pos:line="571" pos:column="31">results</name><index pos:line="571" pos:column="38">[<expr><lit:literal type="number" pos:line="571" pos:column="39">2</lit:literal></expr>]</index></name> <op:operator pos:line="571" pos:column="42">as</op:operator> <name pos:line="571" pos:column="45">SyntaticCategoryDataModel</name></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="573" pos:column="13">int</name></type> <name pos:line="573" pos:column="17">count</name> <init pos:line="573" pos:column="23">= <expr><lit:literal type="number" pos:line="573" pos:column="25">0</lit:literal></expr></init></decl>;</decl_stmt>

            <if pos:line="575" pos:column="13">if <condition pos:line="575" pos:column="16">(<expr><name pos:line="575" pos:column="17">null</name> <op:operator pos:line="575" pos:column="22">!=</op:operator> <name><name pos:line="575" pos:column="25">this</name><op:operator pos:line="575" pos:column="29">.</op:operator><name pos:line="575" pos:column="30">data</name></name></expr>)</condition><then pos:line="575" pos:column="35">
            <block pos:line="576" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="577" pos:column="17">dataGridView1</name><op:operator pos:line="577" pos:column="30">.</op:operator><name pos:line="577" pos:column="31">DataSource</name></name> <op:operator pos:line="577" pos:column="42">=</op:operator> <name><name pos:line="577" pos:column="44">this</name><op:operator pos:line="577" pos:column="48">.</op:operator><name pos:line="577" pos:column="49">data</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="578" pos:column="17">count</name> <op:operator pos:line="578" pos:column="23">=</op:operator> <name><name pos:line="578" pos:column="25">this</name><op:operator pos:line="578" pos:column="29">.</op:operator><name pos:line="578" pos:column="30">data</name><op:operator pos:line="578" pos:column="34">.</op:operator><name pos:line="578" pos:column="35">Count</name></name></expr>;</expr_stmt>
            }</block></then></if>

            <if pos:line="581" pos:column="13">if <condition pos:line="581" pos:column="16">(<expr><name pos:line="581" pos:column="17">null</name> <op:operator pos:line="581" pos:column="22">!=</op:operator> <name><name pos:line="581" pos:column="25">this</name><op:operator pos:line="581" pos:column="29">.</op:operator><name pos:line="581" pos:column="30">categories</name></name></expr>)</condition><then pos:line="581" pos:column="41">
            <block pos:line="582" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="583" pos:column="17">CategoryTreeNode</name></type> <name pos:line="583" pos:column="34">root</name> <init pos:line="583" pos:column="39">= <expr><op:operator pos:line="583" pos:column="41">new</op:operator> <call><name pos:line="583" pos:column="45">CategoryTreeNode</name><argument_list pos:line="583" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="583" pos:column="62">"All"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                
                <expr_stmt><expr><call><name><name pos:line="585" pos:column="17">categoryTreeView</name><op:operator pos:line="585" pos:column="33">.</op:operator><name pos:line="585" pos:column="34">BeginUpdate</name></name><argument_list pos:line="585" pos:column="45">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="586" pos:column="17">categoryTreeView</name><op:operator pos:line="586" pos:column="33">.</op:operator><name pos:line="586" pos:column="34">Nodes</name><op:operator pos:line="586" pos:column="39">.</op:operator><name pos:line="586" pos:column="40">Clear</name></name><argument_list pos:line="586" pos:column="45">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="587" pos:column="17">categoryTreeView</name><op:operator pos:line="587" pos:column="33">.</op:operator><name pos:line="587" pos:column="34">Nodes</name><op:operator pos:line="587" pos:column="39">.</op:operator><name pos:line="587" pos:column="40">Add</name></name><argument_list pos:line="587" pos:column="43">(<argument><expr><name pos:line="587" pos:column="44">root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <foreach pos:line="588" pos:column="17">foreach (<init><decl><type><name pos:line="588" pos:column="26">var</name></type> <name pos:line="588" pos:column="30">category</name> <range pos:line="588" pos:column="39">in <expr><name><name pos:line="588" pos:column="42">categories</name><op:operator pos:line="588" pos:column="52">.</op:operator><name pos:line="588" pos:column="53">SyntaticCategories</name><op:operator pos:line="588" pos:column="71">.</op:operator><name pos:line="588" pos:column="72">Keys</name></name></expr></range></decl></init>)
                <block pos:line="589" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="590" pos:column="21">var</name></type> <name pos:line="590" pos:column="25">xpath</name> <init pos:line="590" pos:column="31">= <expr><name><name pos:line="590" pos:column="33">categories</name><op:operator pos:line="590" pos:column="43">.</op:operator><name pos:line="590" pos:column="44">SyntaticCategories</name><index pos:line="590" pos:column="62">[<expr><name pos:line="590" pos:column="63">category</name></expr>]</index></name><op:operator pos:line="590" pos:column="72">.</op:operator><call><name pos:line="590" pos:column="73">First</name><argument_list pos:line="590" pos:column="78">()</argument_list></call><op:operator pos:line="590" pos:column="80">.</op:operator><name pos:line="590" pos:column="81">CategoryAsXPath</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="591" pos:column="21">var</name></type> <name pos:line="591" pos:column="25">categoryCount</name> <init pos:line="591" pos:column="39">= <expr><name><name pos:line="591" pos:column="41">categories</name><op:operator pos:line="591" pos:column="51">.</op:operator><name pos:line="591" pos:column="52">SyntaticCategories</name><index pos:line="591" pos:column="70">[<expr><name pos:line="591" pos:column="71">category</name></expr>]</index></name><op:operator pos:line="591" pos:column="80">.</op:operator><name pos:line="591" pos:column="81">Count</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="592" pos:column="21">root</name><op:operator pos:line="592" pos:column="25">.</op:operator><name pos:line="592" pos:column="26">AddCategory</name></name><argument_list pos:line="592" pos:column="37">(<argument><expr><name pos:line="592" pos:column="38">xpath</name></expr></argument>, <argument><expr><name pos:line="592" pos:column="45">categoryCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
                <expr_stmt><expr><name><name pos:line="594" pos:column="17">categoryTreeView</name><op:operator pos:line="594" pos:column="33">.</op:operator><name pos:line="594" pos:column="34">SelectedNode</name></name> <op:operator pos:line="594" pos:column="47">=</op:operator> <name pos:line="594" pos:column="49">root</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="595" pos:column="17">categoryTreeView</name><op:operator pos:line="595" pos:column="33">.</op:operator><name pos:line="595" pos:column="34">EndUpdate</name></name><argument_list pos:line="595" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><name pos:line="598" pos:column="13">queryingXML</name> <op:operator pos:line="598" pos:column="25">=</op:operator> <lit:literal type="boolean" pos:line="598" pos:column="27">false</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="599" pos:column="13">runQueryButton</name><op:operator pos:line="599" pos:column="27">.</op:operator><name pos:line="599" pos:column="28">Text</name></name> <op:operator pos:line="599" pos:column="33">=</op:operator> <name><name pos:line="599" pos:column="35">Resources</name><op:operator pos:line="599" pos:column="44">.</op:operator><name pos:line="599" pos:column="45">TestButton</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="600" pos:column="13">progressBar</name><op:operator pos:line="600" pos:column="24">.</op:operator><name pos:line="600" pos:column="25">Value</name></name> <op:operator pos:line="600" pos:column="31">=</op:operator> <lit:literal type="number" pos:line="600" pos:column="33">0</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="601" pos:column="13">progressLabel</name><op:operator pos:line="601" pos:column="26">.</op:operator><name pos:line="601" pos:column="27">Text</name></name> <op:operator pos:line="601" pos:column="32">=</op:operator> <lit:literal type="string" pos:line="601" pos:column="34">""</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="602" pos:column="13">messageLabel</name><op:operator pos:line="602" pos:column="25">.</op:operator><name pos:line="602" pos:column="26">Text</name></name> <op:operator pos:line="602" pos:column="31">=</op:operator> <call><name><name pos:line="602" pos:column="33">String</name><op:operator pos:line="602" pos:column="39">.</op:operator><name pos:line="602" pos:column="40">Format</name></name><argument_list pos:line="602" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="602" pos:column="47">"Found {0} items."</lit:literal></expr></argument>, <argument><expr><name pos:line="602" pos:column="67">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="603" pos:column="13">setButtons</name><argument_list pos:line="603" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <cpp:endregion pos:line="605" pos:column="9">#<cpp:directive pos:line="605" pos:column="10">endregion</cpp:directive></cpp:endregion>

        <cpp:region pos:line="607" pos:column="9">#<cpp:directive pos:line="607" pos:column="10">region</cpp:directive> load SrcML Files</cpp:region>
        <function><type><specifier pos:line="608" pos:column="9">public</specifier> <name pos:line="608" pos:column="16">void</name></type> <name pos:line="608" pos:column="21">LoadSrcMLFiles</name><parameter_list pos:line="608" pos:column="35">(<param><decl><type><name pos:line="608" pos:column="36">DirectoryInfo</name></type> <name pos:line="608" pos:column="50">folder</name></decl></param>)</parameter_list>
        <block pos:line="609" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="610" pos:column="13">List</name><argument_list pos:line="610" pos:column="17">&lt;<argument><name pos:line="610" pos:column="18">FileInfo</name></argument>&gt;</argument_list></name></type> <name pos:line="610" pos:column="28">srcmldocs</name> <init pos:line="610" pos:column="38">= <expr><op:operator pos:line="610" pos:column="40">new</op:operator> <call><name><name pos:line="610" pos:column="44">List</name><argument_list pos:line="610" pos:column="48">&lt;<argument><name pos:line="610" pos:column="49">FileInfo</name></argument>&gt;</argument_list></name><argument_list pos:line="610" pos:column="58">(<argument><expr><call><name><name pos:line="610" pos:column="59">folder</name><op:operator pos:line="610" pos:column="65">.</op:operator><name pos:line="610" pos:column="66">GetFiles</name></name><argument_list pos:line="610" pos:column="74">(<argument><expr><lit:literal type="string" pos:line="610" pos:column="75">"*.xml"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <expr_stmt><expr><name pos:line="612" pos:column="13">projectSrcmlFolder</name> <op:operator pos:line="612" pos:column="32">=</op:operator> <name pos:line="612" pos:column="34">folder</name></expr>;</expr_stmt>

            <if pos:line="614" pos:column="13">if <condition pos:line="614" pos:column="16">(<expr><name><name pos:line="614" pos:column="17">srcmldocs</name><op:operator pos:line="614" pos:column="26">.</op:operator><name pos:line="614" pos:column="27">Count</name></name> <op:operator pos:line="614" pos:column="33">&gt;</op:operator> <lit:literal type="number" pos:line="614" pos:column="35">0</lit:literal></expr>)</condition><then pos:line="614" pos:column="37">
            <block pos:line="615" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="616" pos:column="17">messageLabel</name><op:operator pos:line="616" pos:column="29">.</op:operator><name pos:line="616" pos:column="30">Text</name></name> <op:operator pos:line="616" pos:column="35">=</op:operator> <lit:literal type="string" pos:line="616" pos:column="37">"Loading SrcML Files"</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="617" pos:column="17">srcmlLoadWorker</name><op:operator pos:line="617" pos:column="32">.</op:operator><name pos:line="617" pos:column="33">RunWorkerAsync</name></name><argument_list pos:line="617" pos:column="47">(<argument><expr><name pos:line="617" pos:column="48">srcmldocs</name> <op:operator pos:line="617" pos:column="58">as</op:operator> <name pos:line="617" pos:column="61">Object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="618" pos:column="17">generatingXML</name> <op:operator pos:line="618" pos:column="31">=</op:operator> <lit:literal type="boolean" pos:line="618" pos:column="33">true</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="619" pos:column="17">browseInputFoldersButton</name><op:operator pos:line="619" pos:column="41">.</op:operator><name pos:line="619" pos:column="42">Text</name></name> <op:operator pos:line="619" pos:column="47">=</op:operator> <name><name pos:line="619" pos:column="49">Resources</name><op:operator pos:line="619" pos:column="58">.</op:operator><name pos:line="619" pos:column="59">BrowseButtonLoading</name></name></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name pos:line="621" pos:column="13">setButtons</name><argument_list pos:line="621" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="624" pos:column="9">private</specifier> <name pos:line="624" pos:column="17">void</name></type> <name pos:line="624" pos:column="22">srcmlLoadWorker_DoWork</name><parameter_list pos:line="624" pos:column="44">(<param><decl><type><name pos:line="624" pos:column="45">object</name></type> <name pos:line="624" pos:column="52">sender</name></decl></param>, <param><decl><type><name pos:line="624" pos:column="60">DoWorkEventArgs</name></type> <name pos:line="624" pos:column="76">e</name></decl></param>)</parameter_list>
        <block pos:line="625" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="626" pos:column="13">List</name><argument_list pos:line="626" pos:column="17">&lt;<argument><name pos:line="626" pos:column="18">FileInfo</name></argument>&gt;</argument_list></name></type> <name pos:line="626" pos:column="28">srcmldocs</name> <init pos:line="626" pos:column="38">= <expr><name><name pos:line="626" pos:column="40">e</name><op:operator pos:line="626" pos:column="41">.</op:operator><name pos:line="626" pos:column="42">Argument</name></name> <op:operator pos:line="626" pos:column="51">as</op:operator> <name><name pos:line="626" pos:column="54">List</name><argument_list pos:line="626" pos:column="58">&lt;<argument><name pos:line="626" pos:column="59">FileInfo</name></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="627" pos:column="13">Dictionary</name><argument_list pos:line="627" pos:column="23">&lt;<argument><name pos:line="627" pos:column="24">DirectoryInfo</name></argument>, <argument><name pos:line="627" pos:column="39">string</name></argument>&gt;</argument_list></name></type> <name pos:line="627" pos:column="47">results</name> <init pos:line="627" pos:column="55">= <expr><op:operator pos:line="627" pos:column="57">new</op:operator> <call><name><name pos:line="627" pos:column="61">Dictionary</name><argument_list pos:line="627" pos:column="71">&lt;<argument><name pos:line="627" pos:column="72">DirectoryInfo</name></argument>, <argument><name pos:line="627" pos:column="87">string</name></argument>&gt;</argument_list></name><argument_list pos:line="627" pos:column="94">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="629" pos:column="13">int</name></type> <name pos:line="629" pos:column="17">i</name> <init pos:line="629" pos:column="19">= <expr><lit:literal type="number" pos:line="629" pos:column="21">0</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="630" pos:column="13">float</name></type> <name pos:line="630" pos:column="19">count</name> <init pos:line="630" pos:column="25">= <expr><op:operator pos:line="630" pos:column="27">(</op:operator><name pos:line="630" pos:column="28">float</name><op:operator pos:line="630" pos:column="33">)</op:operator> <name><name pos:line="630" pos:column="35">srcmldocs</name><op:operator pos:line="630" pos:column="44">.</op:operator><name pos:line="630" pos:column="45">Count</name></name></expr></init></decl>;</decl_stmt>

            <foreach pos:line="632" pos:column="13">foreach (<init><decl><type><name pos:line="632" pos:column="22">var</name></type> <name pos:line="632" pos:column="26">fi</name> <range pos:line="632" pos:column="29">in <expr><name pos:line="632" pos:column="32">srcmldocs</name></expr></range></decl></init>)
            <block pos:line="633" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="634" pos:column="17">var</name></type> <name pos:line="634" pos:column="21">path</name> <init pos:line="634" pos:column="26">= <expr><name><name pos:line="634" pos:column="28">fi</name><op:operator pos:line="634" pos:column="30">.</op:operator><name pos:line="634" pos:column="31">FullName</name></name></expr></init></decl>;</decl_stmt>
                <if pos:line="635" pos:column="17">if <condition pos:line="635" pos:column="20">(<expr><call><name><name pos:line="635" pos:column="21">File</name><op:operator pos:line="635" pos:column="25">.</op:operator><name pos:line="635" pos:column="26">Exists</name></name><argument_list pos:line="635" pos:column="32">(<argument><expr><name pos:line="635" pos:column="33">path</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="635" pos:column="39">
                <block pos:line="636" pos:column="17">{
                    <try pos:line="637" pos:column="21">try
                    <block pos:line="638" pos:column="21">{
                        <decl_stmt><decl><type><name pos:line="639" pos:column="25">var</name></type> <name pos:line="639" pos:column="29">srcml</name> <init pos:line="639" pos:column="35">= <expr><op:operator pos:line="639" pos:column="37">new</op:operator> <call><name pos:line="639" pos:column="41">SrcMLFile</name><argument_list pos:line="639" pos:column="50">(<argument><expr><name pos:line="639" pos:column="51">path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if pos:line="640" pos:column="25">if <condition pos:line="640" pos:column="28">(<expr><name pos:line="640" pos:column="29">null</name> <op:operator pos:line="640" pos:column="34">!=</op:operator> <name><name pos:line="640" pos:column="37">srcml</name><op:operator pos:line="640" pos:column="42">.</op:operator><name pos:line="640" pos:column="43">ProjectDirectory</name></name></expr>)</condition><then pos:line="640" pos:column="60">
                        <block pos:line="641" pos:column="25">{
                            <decl_stmt><decl><type><name pos:line="642" pos:column="29">var</name></type> <name pos:line="642" pos:column="33">sourceFolder</name> <init pos:line="642" pos:column="46">= <expr><op:operator pos:line="642" pos:column="48">new</op:operator> <call><name pos:line="642" pos:column="52">DirectoryInfo</name><argument_list pos:line="642" pos:column="65">(<argument><expr><name><name pos:line="642" pos:column="66">srcml</name><op:operator pos:line="642" pos:column="71">.</op:operator><name pos:line="642" pos:column="72">ProjectDirectory</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><name><name pos:line="643" pos:column="29">results</name><index pos:line="643" pos:column="36">[<expr><name pos:line="643" pos:column="37">sourceFolder</name></expr>]</index></name> <op:operator pos:line="643" pos:column="51">=</op:operator> <name pos:line="643" pos:column="53">path</name></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block>
                    <catch pos:line="646" pos:column="21">catch <parameter_list pos:line="646" pos:column="27">(<param><decl><type><name pos:line="646" pos:column="28">XmlException</name></type> <name pos:line="646" pos:column="41">ex</name></decl></param>)</parameter_list>
                    <block pos:line="647" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="648" pos:column="25">MessageBox</name><op:operator pos:line="648" pos:column="35">.</op:operator><name pos:line="648" pos:column="36">Show</name></name><argument_list pos:line="648" pos:column="40">(<argument><expr><call><name><name pos:line="648" pos:column="41">String</name><op:operator pos:line="648" pos:column="47">.</op:operator><name pos:line="648" pos:column="48">Format</name></name><argument_list pos:line="648" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="648" pos:column="55">"Error Loading {0}: {1}"</lit:literal></expr></argument>, <argument><expr><name pos:line="648" pos:column="81">path</name></expr></argument>, <argument><expr><name><name pos:line="648" pos:column="87">ex</name><op:operator pos:line="648" pos:column="89">.</op:operator><name pos:line="648" pos:column="90">Message</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></catch>
                    <catch pos:line="650" pos:column="21">catch <parameter_list pos:line="650" pos:column="27">(<param><decl><type><name pos:line="650" pos:column="28">OutOfMemoryException</name></type> <name pos:line="650" pos:column="49">ex</name></decl></param>)</parameter_list>
                    <block pos:line="651" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="652" pos:column="25">MessageBox</name><op:operator pos:line="652" pos:column="35">.</op:operator><name pos:line="652" pos:column="36">Show</name></name><argument_list pos:line="652" pos:column="40">(<argument><expr><call><name><name pos:line="652" pos:column="41">String</name><op:operator pos:line="652" pos:column="47">.</op:operator><name pos:line="652" pos:column="48">Format</name></name><argument_list pos:line="652" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="652" pos:column="55">"Error Loading {0}: {1}"</lit:literal></expr></argument>, <argument><expr><name pos:line="652" pos:column="81">path</name></expr></argument>, <argument><expr><name><name pos:line="652" pos:column="87">ex</name><op:operator pos:line="652" pos:column="89">.</op:operator><name pos:line="652" pos:column="90">Message</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></catch>
                    <catch pos:line="654" pos:column="21">catch <parameter_list pos:line="654" pos:column="27">(<param><decl><type><name pos:line="654" pos:column="28">SrcMLException</name></type> <name pos:line="654" pos:column="43">ex</name></decl></param>)</parameter_list>
                    <block pos:line="655" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="656" pos:column="25">MessageBox</name><op:operator pos:line="656" pos:column="35">.</op:operator><name pos:line="656" pos:column="36">Show</name></name><argument_list pos:line="656" pos:column="40">(<argument><expr><call><name><name pos:line="656" pos:column="41">String</name><op:operator pos:line="656" pos:column="47">.</op:operator><name pos:line="656" pos:column="48">Format</name></name><argument_list pos:line="656" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="656" pos:column="55">"Error Loading {0}: {1}"</lit:literal></expr></argument>, <argument><expr><name pos:line="656" pos:column="81">path</name></expr></argument>, <argument><expr><name><name pos:line="656" pos:column="87">ex</name><op:operator pos:line="656" pos:column="89">.</op:operator><name pos:line="656" pos:column="90">Message</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></catch></try>
                }</block></then></if>
                <expr_stmt><expr><call><name><name pos:line="659" pos:column="17">srcmlLoadWorker</name><op:operator pos:line="659" pos:column="32">.</op:operator><name pos:line="659" pos:column="33">ReportProgress</name></name><argument_list pos:line="659" pos:column="47">(<argument><expr><call pos:line="659" pos:column="48">(<name pos:line="659" pos:column="49">int</name>)<argument_list pos:line="659" pos:column="53">(<argument><expr><lit:literal type="number" pos:line="659" pos:column="54">100</lit:literal> <op:operator pos:line="659" pos:column="58">*</op:operator> <op:operator pos:line="659" pos:column="60">(</op:operator><name pos:line="659" pos:column="61">float</name><op:operator pos:line="659" pos:column="66">)</op:operator><op:operator pos:line="659" pos:column="67">++</op:operator><name pos:line="659" pos:column="69">i</name> <op:operator pos:line="659" pos:column="71">/</op:operator> <name pos:line="659" pos:column="73">count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>

            <expr_stmt><expr><name><name pos:line="662" pos:column="13">e</name><op:operator pos:line="662" pos:column="14">.</op:operator><name pos:line="662" pos:column="15">Result</name></name> <op:operator pos:line="662" pos:column="22">=</op:operator> <name pos:line="662" pos:column="24">results</name> <op:operator pos:line="662" pos:column="32">as</op:operator> <name pos:line="662" pos:column="35">Object</name></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="665" pos:column="9">private</specifier> <name pos:line="665" pos:column="17">void</name></type> <name pos:line="665" pos:column="22">srcmlLoadWorker_RunWorkerCompleted</name><parameter_list pos:line="665" pos:column="56">(<param><decl><type><name pos:line="665" pos:column="57">object</name></type> <name pos:line="665" pos:column="64">sender</name></decl></param>, <param><decl><type><name pos:line="665" pos:column="72">RunWorkerCompletedEventArgs</name></type> <name pos:line="665" pos:column="100">e</name></decl></param>)</parameter_list>
        <block pos:line="666" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="667" pos:column="13">Dictionary</name><argument_list pos:line="667" pos:column="23">&lt;<argument><name pos:line="667" pos:column="24">DirectoryInfo</name></argument>, <argument><name pos:line="667" pos:column="39">string</name></argument>&gt;</argument_list></name></type> <name pos:line="667" pos:column="47">results</name> <init pos:line="667" pos:column="55">= <expr><name><name pos:line="667" pos:column="57">e</name><op:operator pos:line="667" pos:column="58">.</op:operator><name pos:line="667" pos:column="59">Result</name></name> <op:operator pos:line="667" pos:column="66">as</op:operator> <name><name pos:line="667" pos:column="69">Dictionary</name><argument_list pos:line="667" pos:column="79">&lt;<argument><name pos:line="667" pos:column="80">DirectoryInfo</name></argument>, <argument><name pos:line="667" pos:column="95">string</name></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="668" pos:column="13">int</name></type> <name pos:line="668" pos:column="17">startingIndex</name> <init pos:line="668" pos:column="31">= <expr><op:operator pos:line="668" pos:column="33">-</op:operator><lit:literal type="number" pos:line="668" pos:column="34">1</lit:literal></expr></init></decl>;</decl_stmt>
            <foreach pos:line="669" pos:column="13">foreach (<init><decl><type><name pos:line="669" pos:column="22">var</name></type> <name pos:line="669" pos:column="26">sourceFolder</name> <range pos:line="669" pos:column="39">in <expr><name><name pos:line="669" pos:column="42">results</name><op:operator pos:line="669" pos:column="49">.</op:operator><name pos:line="669" pos:column="50">Keys</name></name></expr></range></decl></init>)
            <block pos:line="670" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="671" pos:column="17">srcmlDict</name><index pos:line="671" pos:column="26">[<expr><name pos:line="671" pos:column="27">sourceFolder</name></expr>]</index></name> <op:operator pos:line="671" pos:column="41">=</op:operator> <name><name pos:line="671" pos:column="43">results</name><index pos:line="671" pos:column="50">[<expr><name pos:line="671" pos:column="51">sourceFolder</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="672" pos:column="17">addNewSourceFolder</name><argument_list pos:line="672" pos:column="35">(<argument><expr><name pos:line="672" pos:column="36">sourceFolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><op:operator pos:line="673" pos:column="17">++</op:operator><name pos:line="673" pos:column="19">startingIndex</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="674" pos:column="17">OnSrcMLFileCreatedEvent</name><argument_list pos:line="674" pos:column="40">(<argument><expr><op:operator pos:line="674" pos:column="41">new</op:operator> <call><name pos:line="674" pos:column="45">SrcMLFileCreatedEventArgs</name><argument_list pos:line="674" pos:column="70">(<argument><expr><name><name pos:line="674" pos:column="71">results</name><index pos:line="674" pos:column="78">[<expr><name pos:line="674" pos:column="79">sourceFolder</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
            <expr_stmt><expr><name><name pos:line="676" pos:column="13">messageLabel</name><op:operator pos:line="676" pos:column="25">.</op:operator><name pos:line="676" pos:column="26">Text</name></name> <op:operator pos:line="676" pos:column="31">=</op:operator> <lit:literal type="string" pos:line="676" pos:column="33">"Ready"</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="677" pos:column="13">progressLabel</name><op:operator pos:line="677" pos:column="26">.</op:operator><name pos:line="677" pos:column="27">Text</name></name> <op:operator pos:line="677" pos:column="32">=</op:operator> <lit:literal type="string" pos:line="677" pos:column="34">""</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="678" pos:column="13">progressBar</name><op:operator pos:line="678" pos:column="24">.</op:operator><name pos:line="678" pos:column="25">Value</name></name> <op:operator pos:line="678" pos:column="31">=</op:operator> <lit:literal type="number" pos:line="678" pos:column="33">0</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="679" pos:column="13">browseInputFoldersButton</name><op:operator pos:line="679" pos:column="37">.</op:operator><name pos:line="679" pos:column="38">Text</name></name> <op:operator pos:line="679" pos:column="43">=</op:operator> <name><name pos:line="679" pos:column="45">Resources</name><op:operator pos:line="679" pos:column="54">.</op:operator><name pos:line="679" pos:column="55">BrowseButton</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="680" pos:column="13">generatingXML</name> <op:operator pos:line="680" pos:column="27">=</op:operator> <lit:literal type="boolean" pos:line="680" pos:column="29">false</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="681" pos:column="13">inputFolderComboBox</name><op:operator pos:line="681" pos:column="32">.</op:operator><name pos:line="681" pos:column="33">SelectedIndex</name></name> <op:operator pos:line="681" pos:column="47">=</op:operator> <name pos:line="681" pos:column="49">startingIndex</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="682" pos:column="13">updateSelectedInputFolder</name><argument_list pos:line="682" pos:column="38">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="683" pos:column="13">setButtons</name><argument_list pos:line="683" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <cpp:endregion pos:line="685" pos:column="9">#<cpp:directive pos:line="685" pos:column="10">endregion</cpp:directive></cpp:endregion>

        <function><type><specifier pos:line="687" pos:column="9">private</specifier> <name pos:line="687" pos:column="17">void</name></type> <name pos:line="687" pos:column="22">dataGridView1_CellDoubleClick</name><parameter_list pos:line="687" pos:column="51">(<param><decl><type><name pos:line="687" pos:column="52">object</name></type> <name pos:line="687" pos:column="59">sender</name></decl></param>, <param><decl><type><name pos:line="687" pos:column="67">DataGridViewCellEventArgs</name></type> <name pos:line="687" pos:column="93">e</name></decl></param>)</parameter_list>
        <block pos:line="688" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="689" pos:column="13">List</name><argument_list pos:line="689" pos:column="17">&lt;<argument><name pos:line="689" pos:column="18">DataCell</name></argument>&gt;</argument_list></name></type> <name pos:line="689" pos:column="28">data</name> <init pos:line="689" pos:column="33">= <expr><name><name pos:line="689" pos:column="35">dataGridView1</name><op:operator pos:line="689" pos:column="48">.</op:operator><name pos:line="689" pos:column="49">DataSource</name></name> <op:operator pos:line="689" pos:column="60">as</op:operator> <name><name pos:line="689" pos:column="63">List</name><argument_list pos:line="689" pos:column="67">&lt;<argument><name pos:line="689" pos:column="68">DataCell</name></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
            <if pos:line="690" pos:column="13">if <condition pos:line="690" pos:column="16">(<expr><name pos:line="690" pos:column="17">null</name> <op:operator pos:line="690" pos:column="22">!=</op:operator> <name pos:line="690" pos:column="25">data</name> <op:operator pos:line="690" pos:column="30">&amp;&amp;</op:operator> <lit:literal type="number" pos:line="690" pos:column="33">0</lit:literal> <op:operator pos:line="690" pos:column="35">&lt;=</op:operator> <name><name pos:line="690" pos:column="38">e</name><op:operator pos:line="690" pos:column="39">.</op:operator><name pos:line="690" pos:column="40">RowIndex</name></name></expr>)</condition><then pos:line="690" pos:column="49">
            <block pos:line="691" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="692" pos:column="17">var</name></type> <name pos:line="692" pos:column="21">cell</name> <init pos:line="692" pos:column="26">= <expr><name><name pos:line="692" pos:column="28">data</name><index pos:line="692" pos:column="32">[<expr><name><name pos:line="692" pos:column="33">e</name><op:operator pos:line="692" pos:column="34">.</op:operator><name pos:line="692" pos:column="35">RowIndex</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="693" pos:column="17">var</name></type> <name pos:line="693" pos:column="21">path</name> <init pos:line="693" pos:column="26">= <expr><call><name><name pos:line="693" pos:column="28">Path</name><op:operator pos:line="693" pos:column="32">.</op:operator><name pos:line="693" pos:column="33">Combine</name></name><argument_list pos:line="693" pos:column="40">(<argument><expr><name><name pos:line="693" pos:column="41">selectedDoc</name><op:operator pos:line="693" pos:column="52">.</op:operator><name pos:line="693" pos:column="53">ProjectDirectory</name></name></expr></argument>, <argument><expr><name><name pos:line="693" pos:column="71">cell</name><op:operator pos:line="693" pos:column="75">.</op:operator><name pos:line="693" pos:column="76">FilePath</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name pos:line="694" pos:column="17">OnOpenFileEvent</name><argument_list pos:line="694" pos:column="32">(<argument><expr><op:operator pos:line="694" pos:column="33">new</op:operator> <call><name pos:line="694" pos:column="37">OpenFileEventArgs</name><argument_list pos:line="694" pos:column="54">(<argument><expr><name pos:line="694" pos:column="55">path</name></expr></argument>, <argument><expr><name><name pos:line="694" pos:column="61">cell</name><op:operator pos:line="694" pos:column="65">.</op:operator><name pos:line="694" pos:column="66">LineNumber</name></name></expr></argument>, <argument><expr><name><name pos:line="694" pos:column="78">cell</name><op:operator pos:line="694" pos:column="82">.</op:operator><name pos:line="694" pos:column="83">EndLineNumber</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="698" pos:column="9">private</specifier> <name pos:line="698" pos:column="17">void</name></type> <name pos:line="698" pos:column="22">categoryTreeView_AfterSelect</name><parameter_list pos:line="698" pos:column="50">(<param><decl><type><name pos:line="698" pos:column="51">object</name></type> <name pos:line="698" pos:column="58">sender</name></decl></param>, <param><decl><type><name pos:line="698" pos:column="66">TreeViewEventArgs</name></type> <name pos:line="698" pos:column="84">e</name></decl></param>)</parameter_list>
        <block pos:line="699" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="700" pos:column="13">var</name></type> <name pos:line="700" pos:column="17">treeNode</name> <init pos:line="700" pos:column="26">= <expr><name><name pos:line="700" pos:column="28">e</name><op:operator pos:line="700" pos:column="29">.</op:operator><name pos:line="700" pos:column="30">Node</name></name> <op:operator pos:line="700" pos:column="35">as</op:operator> <name pos:line="700" pos:column="38">CategoryTreeNode</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="701" pos:column="13">var</name></type> <name pos:line="701" pos:column="17">label</name> <init pos:line="701" pos:column="23">= <expr><op:operator pos:line="701" pos:column="25">(</op:operator><name><name pos:line="701" pos:column="26">String</name><op:operator pos:line="701" pos:column="32">.</op:operator><name pos:line="701" pos:column="33">Empty</name></name> <op:operator pos:line="701" pos:column="39">==</op:operator> <name><name pos:line="701" pos:column="42">treeNode</name><op:operator pos:line="701" pos:column="50">.</op:operator><name pos:line="701" pos:column="51">XPath</name> <type:modifier pos:line="701" pos:column="57">?</type:modifier></name> <lit:literal type="string" pos:line="701" pos:column="59">"All"</lit:literal> <op:operator pos:line="701" pos:column="65">:</op:operator> <name><name pos:line="701" pos:column="67">treeNode</name><op:operator pos:line="701" pos:column="75">.</op:operator><name pos:line="701" pos:column="76">XPath</name></name><op:operator pos:line="701" pos:column="81">)</op:operator></expr></init></decl>;</decl_stmt>

            <if pos:line="703" pos:column="13">if <condition pos:line="703" pos:column="16">(<expr><name><name pos:line="703" pos:column="17">String</name><op:operator pos:line="703" pos:column="23">.</op:operator><name pos:line="703" pos:column="24">Empty</name></name> <op:operator pos:line="703" pos:column="30">==</op:operator> <name><name pos:line="703" pos:column="33">treeNode</name><op:operator pos:line="703" pos:column="41">.</op:operator><name pos:line="703" pos:column="42">XPath</name></name></expr>)</condition><then pos:line="703" pos:column="48">
            <block pos:line="704" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="705" pos:column="17">dataGridView1</name><op:operator pos:line="705" pos:column="30">.</op:operator><name pos:line="705" pos:column="31">DataSource</name></name> <op:operator pos:line="705" pos:column="42">=</op:operator> <name><name pos:line="705" pos:column="44">this</name><op:operator pos:line="705" pos:column="48">.</op:operator><name pos:line="705" pos:column="49">data</name></name></expr>;</expr_stmt>
            }</block></then>
            <else pos:line="707" pos:column="13">else
            <block pos:line="708" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="709" pos:column="17">dataGridView1</name><op:operator pos:line="709" pos:column="30">.</op:operator><name pos:line="709" pos:column="31">DataSource</name></name> <op:operator pos:line="709" pos:column="42">=</op:operator> <op:operator pos:line="709" pos:column="44">(</op:operator><linq><from pos:line="709" pos:column="45">from <expr><name pos:line="709" pos:column="50">cell</name></expr> <in pos:line="709" pos:column="55">in <expr><name><name pos:line="709" pos:column="58">this</name><op:operator pos:line="709" pos:column="62">.</op:operator><name pos:line="709" pos:column="63">data</name></name></expr></in></from>
                                            <where pos:line="710" pos:column="45">where <expr><call><name><name pos:line="710" pos:column="51">cell</name><op:operator pos:line="710" pos:column="55">.</op:operator><name pos:line="710" pos:column="56">Category</name><op:operator pos:line="710" pos:column="64">.</op:operator><name pos:line="710" pos:column="65">StartsWith</name></name><argument_list pos:line="710" pos:column="75">(<argument><expr><name><name pos:line="710" pos:column="76">treeNode</name><op:operator pos:line="710" pos:column="84">.</op:operator><name pos:line="710" pos:column="85">XPath</name></name></expr></argument>)</argument_list></call></expr></where>
                                            <select pos:line="711" pos:column="45">select <expr><name pos:line="711" pos:column="52">cell</name></expr></select></linq><op:operator pos:line="711" pos:column="56">)</op:operator><op:operator pos:line="711" pos:column="57">.</op:operator><call><name pos:line="711" pos:column="58">ToList</name><argument_list pos:line="711" pos:column="64">()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
                                       
            <expr_stmt><expr><name><name pos:line="714" pos:column="13">messageLabel</name><op:operator pos:line="714" pos:column="25">.</op:operator><name pos:line="714" pos:column="26">Text</name></name> <op:operator pos:line="714" pos:column="31">=</op:operator> <call><name><name pos:line="714" pos:column="33">String</name><op:operator pos:line="714" pos:column="39">.</op:operator><name pos:line="714" pos:column="40">Format</name></name><argument_list pos:line="714" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="714" pos:column="47">"Selected {0} results ({1})"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="714" pos:column="77">dataGridView1</name><op:operator pos:line="714" pos:column="90">.</op:operator><name pos:line="714" pos:column="91">RowCount</name></name></expr></argument>, <argument><expr><name pos:line="714" pos:column="101">label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <class><specifier pos:line="718" pos:column="5">public</specifier> class <name pos:line="718" pos:column="18">SrcMLFileCreatedEventArgs</name> <super pos:line="718" pos:column="44">: <name pos:line="718" pos:column="46">EventArgs</name></super>
    <block pos:line="719" pos:column="5">{
        <constructor><specifier pos:line="720" pos:column="9">public</specifier> <name pos:line="720" pos:column="16">SrcMLFileCreatedEventArgs</name><parameter_list pos:line="720" pos:column="41">(<param><decl><type><name pos:line="720" pos:column="42">string</name></type> <name pos:line="720" pos:column="49">path</name></decl></param>)</parameter_list>
        <block pos:line="721" pos:column="9">{
            <expr_stmt><expr><name pos:line="722" pos:column="13">Path</name> <op:operator pos:line="722" pos:column="18">=</op:operator> <name pos:line="722" pos:column="20">path</name></expr>;</expr_stmt>
        }</block></constructor>

        <decl_stmt><decl><type><specifier pos:line="725" pos:column="9">public</specifier> <name pos:line="725" pos:column="16">string</name></type> <name pos:line="725" pos:column="23">Path</name>
        <block pos:line="726" pos:column="9">{
            <function_decl><name pos:line="727" pos:column="13">get</name>;</function_decl>
            <function_decl><name pos:line="728" pos:column="13">set</name>;</function_decl>
        }</block></decl></decl_stmt>
    }</block></class>

    <class><specifier pos:line="732" pos:column="5">public</specifier> class <name pos:line="732" pos:column="18">OpenFileEventArgs</name> <super pos:line="732" pos:column="36">: <name pos:line="732" pos:column="38">EventArgs</name></super>
    <block pos:line="733" pos:column="5">{
        <constructor><specifier pos:line="734" pos:column="9">public</specifier> <name pos:line="734" pos:column="16">OpenFileEventArgs</name><parameter_list pos:line="734" pos:column="33">(<param><decl><type><name pos:line="734" pos:column="34">string</name></type> <name pos:line="734" pos:column="41">filePath</name></decl></param>, <param><decl><type><name pos:line="734" pos:column="51">int</name></type> <name pos:line="734" pos:column="55">lineNumber</name></decl></param>, <param><decl><type><name pos:line="734" pos:column="67">int</name></type> <name pos:line="734" pos:column="71">endLineNumber</name></decl></param>)</parameter_list>
        <block pos:line="735" pos:column="9">{
            <expr_stmt><expr><name pos:line="736" pos:column="13">Path</name> <op:operator pos:line="736" pos:column="18">=</op:operator> <name pos:line="736" pos:column="20">filePath</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="737" pos:column="13">LineNumber</name> <op:operator pos:line="737" pos:column="24">=</op:operator> <name pos:line="737" pos:column="26">lineNumber</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="738" pos:column="13">EndLineNumber</name> <op:operator pos:line="738" pos:column="27">=</op:operator> <name pos:line="738" pos:column="29">endLineNumber</name></expr>;</expr_stmt>
        }</block></constructor>

        <decl_stmt><decl><type><specifier pos:line="741" pos:column="9">public</specifier> <name pos:line="741" pos:column="16">string</name></type> <name pos:line="741" pos:column="23">Path</name>
        <block pos:line="742" pos:column="9">{
            <function_decl><name pos:line="743" pos:column="13">get</name>;</function_decl>
            <function_decl><name pos:line="744" pos:column="13">set</name>;</function_decl>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="747" pos:column="9">public</specifier> <name pos:line="747" pos:column="16">int</name></type> <name pos:line="747" pos:column="20">LineNumber</name>
        <block pos:line="748" pos:column="9">{
            <function_decl><name pos:line="749" pos:column="13">get</name>;</function_decl>
            <function_decl><name pos:line="750" pos:column="13">set</name>;</function_decl>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="753" pos:column="9">public</specifier> <name pos:line="753" pos:column="16">int</name></type> <name pos:line="753" pos:column="20">EndLineNumber</name>
        <block pos:line="754" pos:column="9">{
            <function_decl><name pos:line="755" pos:column="13">get</name>;</function_decl>
            <function_decl><name pos:line="756" pos:column="13">set</name>;</function_decl>
        }</block></decl></decl_stmt>
    }</block></class>
}</block></namespace>
</unit>
