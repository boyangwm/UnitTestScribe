<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Test.Utilities\SrcMLFileUnitSetup.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2013 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">ABB</name><op:operator pos:line="12" pos:column="10">.</op:operator><name pos:line="12" pos:column="11">SrcML</name><op:operator pos:line="12" pos:column="16">.</op:operator><name pos:line="12" pos:column="17">Utilities</name></name>;</using>
<using pos:line="13" pos:column="1">using <name pos:line="13" pos:column="7">System</name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Text</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Xml</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Xml</name><op:operator pos:line="16" pos:column="17">.</op:operator><name pos:line="16" pos:column="18">Linq</name></name>;</using>

<namespace pos:line="18" pos:column="1">namespace <name><name pos:line="18" pos:column="11">ABB</name><op:operator pos:line="18" pos:column="14">.</op:operator><name pos:line="18" pos:column="15">SrcML</name><op:operator pos:line="18" pos:column="20">.</op:operator><name pos:line="18" pos:column="21">Test</name><op:operator pos:line="18" pos:column="25">.</op:operator><name pos:line="18" pos:column="26">Utilities</name></name> <block pos:line="18" pos:column="36">{

    <class><specifier pos:line="20" pos:column="5">public</specifier> class <name pos:line="20" pos:column="18">SrcMLFileUnitSetup</name> <block pos:line="20" pos:column="37">{

        <constructor><specifier pos:line="22" pos:column="9">public</specifier> <name pos:line="22" pos:column="16">SrcMLFileUnitSetup</name><parameter_list pos:line="22" pos:column="34">(<param><decl><type><name pos:line="22" pos:column="35">Language</name></type> <name pos:line="22" pos:column="44">sourceLanguage</name></decl></param>)</parameter_list> <block pos:line="22" pos:column="60">{
            <expr_stmt><expr><name pos:line="23" pos:column="13">FileTemplate</name> <op:operator pos:line="23" pos:column="26">=</op:operator> <call><name pos:line="23" pos:column="28">CreateFileUnitTemplate</name><argument_list pos:line="23" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="24" pos:column="13">SourceLanguage</name> <op:operator pos:line="24" pos:column="28">=</op:operator> <name pos:line="24" pos:column="30">sourceLanguage</name></expr>;</expr_stmt>
        }</block></constructor>

        <decl_stmt><decl><type><specifier pos:line="27" pos:column="9">private</specifier> <name pos:line="27" pos:column="17">string</name></type> <name pos:line="27" pos:column="24">FileTemplate</name> <block pos:line="27" pos:column="37">{ <function_decl><name pos:line="27" pos:column="39">get</name>;</function_decl> <function_decl><name pos:line="27" pos:column="44">set</name>;</function_decl> }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="29" pos:column="9">private</specifier> <name pos:line="29" pos:column="17">Language</name></type> <name pos:line="29" pos:column="26">SourceLanguage</name> <block pos:line="29" pos:column="41">{ <function_decl><name pos:line="29" pos:column="43">get</name>;</function_decl> <function_decl><name pos:line="29" pos:column="48">set</name>;</function_decl> }</block></decl></decl_stmt>

        <function><type><specifier pos:line="31" pos:column="9">public</specifier> <specifier pos:line="31" pos:column="16">static</specifier> <name pos:line="31" pos:column="23">string</name></type> <name pos:line="31" pos:column="30">CreateFileUnitTemplate</name><parameter_list pos:line="31" pos:column="52">()</parameter_list> <block pos:line="31" pos:column="55">{
            <comment type="line" pos:line="32" pos:column="13">//construct the necessary srcML wrapper unit tags</comment>
            <decl_stmt><decl><type><name pos:line="33" pos:column="13">XmlNamespaceManager</name></type> <name pos:line="33" pos:column="33">xnm</name> <init pos:line="33" pos:column="37">= <expr><name><name pos:line="33" pos:column="39">SrcML</name><op:operator pos:line="33" pos:column="44">.</op:operator><name pos:line="33" pos:column="45">NamespaceManager</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="34" pos:column="13">StringBuilder</name></type> <name pos:line="34" pos:column="27">namespaceDecls</name> <init pos:line="34" pos:column="42">= <expr><op:operator pos:line="34" pos:column="44">new</op:operator> <call><name pos:line="34" pos:column="48">StringBuilder</name><argument_list pos:line="34" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="35" pos:column="13">foreach(<init><decl><type><name pos:line="35" pos:column="21">string</name></type> <name pos:line="35" pos:column="28">prefix</name> <range pos:line="35" pos:column="35">in <expr><name pos:line="35" pos:column="38">xnm</name></expr></range></decl></init>) <block pos:line="35" pos:column="43">{
                <if pos:line="36" pos:column="17">if<condition pos:line="36" pos:column="19">(<expr><name pos:line="36" pos:column="20">prefix</name> <op:operator pos:line="36" pos:column="27">!=</op:operator> <name><name pos:line="36" pos:column="30">string</name><op:operator pos:line="36" pos:column="36">.</op:operator><name pos:line="36" pos:column="37">Empty</name> <type:modifier pos:line="36" pos:column="43">&amp;&amp;</type:modifier></name> <op:operator pos:line="36" pos:column="46">!</op:operator><call><name><name pos:line="36" pos:column="47">prefix</name><op:operator pos:line="36" pos:column="53">.</op:operator><name pos:line="36" pos:column="54">StartsWith</name></name><argument_list pos:line="36" pos:column="64">(<argument><expr><lit:literal type="string" pos:line="36" pos:column="65">"xml"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="72">StringComparison</name><op:operator pos:line="36" pos:column="88">.</op:operator><name pos:line="36" pos:column="89">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="36" pos:column="108"> <block pos:line="36" pos:column="109">{
                    <if pos:line="37" pos:column="21">if<condition pos:line="37" pos:column="23">(<expr><call><name><name pos:line="37" pos:column="24">prefix</name><op:operator pos:line="37" pos:column="30">.</op:operator><name pos:line="37" pos:column="31">Equals</name></name><argument_list pos:line="37" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="37" pos:column="38">"src"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="45">StringComparison</name><op:operator pos:line="37" pos:column="61">.</op:operator><name pos:line="37" pos:column="62">InvariantCultureIgnoreCase</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="37" pos:column="90"> <block pos:line="37" pos:column="91">{
                        <expr_stmt><expr><call><name><name pos:line="38" pos:column="25">namespaceDecls</name><op:operator pos:line="38" pos:column="39">.</op:operator><name pos:line="38" pos:column="40">AppendFormat</name></name><argument_list pos:line="38" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="38" pos:column="53">"xmlns=\"{0}\" "</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="38" pos:column="71">xnm</name><op:operator pos:line="38" pos:column="74">.</op:operator><name pos:line="38" pos:column="75">LookupNamespace</name></name><argument_list pos:line="38" pos:column="90">(<argument><expr><name pos:line="38" pos:column="91">prefix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else pos:line="39" pos:column="23">else <block pos:line="39" pos:column="28">{
                        <expr_stmt><expr><call><name><name pos:line="40" pos:column="25">namespaceDecls</name><op:operator pos:line="40" pos:column="39">.</op:operator><name pos:line="40" pos:column="40">AppendFormat</name></name><argument_list pos:line="40" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="40" pos:column="53">"xmlns:{0}=\"{1}\" "</lit:literal></expr></argument>, <argument><expr><name pos:line="40" pos:column="75">prefix</name></expr></argument>, <argument><expr><call><name><name pos:line="40" pos:column="83">xnm</name><op:operator pos:line="40" pos:column="86">.</op:operator><name pos:line="40" pos:column="87">LookupNamespace</name></name><argument_list pos:line="40" pos:column="102">(<argument><expr><name pos:line="40" pos:column="103">prefix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then></if>
            }</block></foreach>
            <return pos:line="44" pos:column="13">return <expr><call><name><name pos:line="44" pos:column="20">string</name><op:operator pos:line="44" pos:column="26">.</op:operator><name pos:line="44" pos:column="27">Format</name></name><argument_list pos:line="44" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="44" pos:column="34">"&lt;unit {0} filename=\"{{2}}\" language=\"{{1}}\"&gt;{{0}}&lt;/unit&gt;"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="44" pos:column="98">namespaceDecls</name><op:operator pos:line="44" pos:column="112">.</op:operator><name pos:line="44" pos:column="113">ToString</name></name><argument_list pos:line="44" pos:column="121">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="47" pos:column="9">public</specifier> <name pos:line="47" pos:column="16">XElement</name></type> <name pos:line="47" pos:column="25">GetFileUnitForXmlSnippet</name><parameter_list pos:line="47" pos:column="49">(<param><decl><type><name pos:line="47" pos:column="50">string</name></type> <name pos:line="47" pos:column="57">xmlSnippet</name></decl></param>, <param><decl><type><name pos:line="47" pos:column="69">string</name></type> <name pos:line="47" pos:column="76">fileName</name></decl></param>)</parameter_list> <block pos:line="47" pos:column="86">{
            <decl_stmt><decl><type><name pos:line="48" pos:column="13">var</name></type> <name pos:line="48" pos:column="17">xml</name> <init pos:line="48" pos:column="21">= <expr><call><name><name pos:line="48" pos:column="23">string</name><op:operator pos:line="48" pos:column="29">.</op:operator><name pos:line="48" pos:column="30">Format</name></name><argument_list pos:line="48" pos:column="36">(<argument><expr><name pos:line="48" pos:column="37">FileTemplate</name></expr></argument>, <argument><expr><name pos:line="48" pos:column="51">xmlSnippet</name></expr></argument>, <argument><expr><call><name><name pos:line="48" pos:column="63">KsuAdapter</name><op:operator pos:line="48" pos:column="73">.</op:operator><name pos:line="48" pos:column="74">GetLanguage</name></name><argument_list pos:line="48" pos:column="85">(<argument><expr><name pos:line="48" pos:column="86">SourceLanguage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="48" pos:column="103">fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="49" pos:column="13">var</name></type> <name pos:line="49" pos:column="17">fileUnit</name> <init pos:line="49" pos:column="26">= <expr><call><name><name pos:line="49" pos:column="28">XElement</name><op:operator pos:line="49" pos:column="36">.</op:operator><name pos:line="49" pos:column="37">Parse</name></name><argument_list pos:line="49" pos:column="42">(<argument><expr><name pos:line="49" pos:column="43">xml</name></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="48">LoadOptions</name><op:operator pos:line="49" pos:column="59">.</op:operator><name pos:line="49" pos:column="60">PreserveWhitespace</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="50" pos:column="13">return <expr><name pos:line="50" pos:column="20">fileUnit</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
