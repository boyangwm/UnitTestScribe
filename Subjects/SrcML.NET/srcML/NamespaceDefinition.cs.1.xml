<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data\NamespaceDefinition.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2013 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *    Patrick Francis (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">ABB</name><op:operator pos:line="13" pos:column="10">.</op:operator><name pos:line="13" pos:column="11">SrcML</name><op:operator pos:line="13" pos:column="16">.</op:operator><name pos:line="13" pos:column="17">Utilities</name></name>;</using>
<using pos:line="14" pos:column="1">using <name pos:line="14" pos:column="7">System</name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Collections</name><op:operator pos:line="15" pos:column="25">.</op:operator><name pos:line="15" pos:column="26">Generic</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Collections</name><op:operator pos:line="16" pos:column="25">.</op:operator><name pos:line="16" pos:column="26">ObjectModel</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Diagnostics</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Linq</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">System</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">Xml</name></name>;</using>

<namespace pos:line="21" pos:column="1">namespace <name><name pos:line="21" pos:column="11">ABB</name><op:operator pos:line="21" pos:column="14">.</op:operator><name pos:line="21" pos:column="15">SrcML</name><op:operator pos:line="21" pos:column="20">.</op:operator><name pos:line="21" pos:column="21">Data</name></name> <block pos:line="21" pos:column="26">{
    <comment type="line" pos:line="22" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="23" pos:column="5">/// Represents a namespace definition in a program.</comment>
    <comment type="line" pos:line="24" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><attribute pos:line="25" pos:column="5">[<expr><call><name pos:line="25" pos:column="6">DebuggerTypeProxy</name><argument_list pos:line="25" pos:column="23">(<argument><expr><call><name pos:line="25" pos:column="24">typeof</name><argument_list pos:line="25" pos:column="30">(<argument><expr><name pos:line="25" pos:column="31">StatementDebugView</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="26" pos:column="5">public</specifier> class <name pos:line="26" pos:column="18">NamespaceDefinition</name> <super pos:line="26" pos:column="38">: <name pos:line="26" pos:column="40">NamedScope</name></super> <block pos:line="26" pos:column="51">{
        <comment type="line" pos:line="27" pos:column="9">/// &lt;summary&gt; The XML name for NamespaceDefinition. &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="28" pos:column="9">public</specifier> <specifier pos:line="28" pos:column="16">new</specifier> <specifier pos:line="28" pos:column="20">const</specifier> <name pos:line="28" pos:column="26">string</name></type> <name pos:line="28" pos:column="33">XmlName</name> <init pos:line="28" pos:column="41">= <expr><lit:literal type="string" pos:line="28" pos:column="43">"Namespace"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="30" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="31" pos:column="9">/// Creates a new NamespaceDefinition object.</comment>
        <comment type="line" pos:line="32" pos:column="9">/// &lt;/summary&gt;</comment>
        <constructor><specifier pos:line="33" pos:column="9">public</specifier> <name pos:line="33" pos:column="16">NamespaceDefinition</name><parameter_list pos:line="33" pos:column="35">()</parameter_list> <member_list pos:line="33" pos:column="38">: <call><name pos:line="33" pos:column="40">base</name><argument_list pos:line="33" pos:column="44">()</argument_list></call> </member_list><block pos:line="33" pos:column="47">{}</block></constructor>

        <comment type="line" pos:line="35" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="36" pos:column="9">/// Returns true if this is an anonymous namespace</comment>
        <comment type="line" pos:line="37" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="38" pos:column="9">public</specifier> <name pos:line="38" pos:column="16">bool</name></type> <name pos:line="38" pos:column="21">IsAnonymous</name> <block pos:line="38" pos:column="33">{
            <function><name pos:line="39" pos:column="13">get</name> <block pos:line="39" pos:column="17">{ <return pos:line="39" pos:column="19">return <expr><call><name><name pos:line="39" pos:column="26">string</name><op:operator pos:line="39" pos:column="32">.</op:operator><name pos:line="39" pos:column="33">IsNullOrWhiteSpace</name></name><argument_list pos:line="39" pos:column="51">(<argument><expr><name pos:line="39" pos:column="52">Name</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="42" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="43" pos:column="9">/// &lt;para&gt;Returns true if this namespace represents the global namespace&lt;/para&gt; &lt;para&gt;A</comment>
        <comment type="line" pos:line="44" pos:column="9">/// namespace is global if the &lt;see cref="NamedScope.Name"/&gt; is &lt;c&gt;String.Empty&lt;/c&gt; and</comment>
        <comment type="line" pos:line="45" pos:column="9">/// the namespace has no parent.&lt;/para&gt;</comment>
        <comment type="line" pos:line="46" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="47" pos:column="9">public</specifier> <name pos:line="47" pos:column="16">bool</name></type> <name pos:line="47" pos:column="21">IsGlobal</name> <block pos:line="47" pos:column="30">{
            <function><name pos:line="48" pos:column="13">get</name> <block pos:line="48" pos:column="17">{ <return pos:line="48" pos:column="19">return <expr><name><name pos:line="48" pos:column="26">this</name><op:operator pos:line="48" pos:column="30">.</op:operator><name pos:line="48" pos:column="31">IsAnonymous</name> <type:modifier pos:line="48" pos:column="43">&amp;&amp;</type:modifier></name> <name><name pos:line="48" pos:column="46">this</name><op:operator pos:line="48" pos:column="50">.</op:operator><name pos:line="48" pos:column="51">ParentStatement</name></name> <op:operator pos:line="48" pos:column="67">==</op:operator> <name pos:line="48" pos:column="70">null</name></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="51" pos:column="9">protected</specifier> <specifier pos:line="51" pos:column="19">override</specifier> <name pos:line="51" pos:column="28">bool</name></type> <name pos:line="51" pos:column="33">ToBeDeleted</name> <block pos:line="51" pos:column="45">{ <function><name pos:line="51" pos:column="47">get</name> <block pos:line="51" pos:column="51">{ <return pos:line="51" pos:column="53">return <expr><call><name><name pos:line="51" pos:column="60">Locations</name><op:operator pos:line="51" pos:column="69">.</op:operator><name pos:line="51" pos:column="70">All</name></name><argument_list pos:line="51" pos:column="73">(<argument><expr><lambda><name pos:line="51" pos:column="74">l</name> <op:operator pos:line="51" pos:column="76">=&gt;</op:operator> <name><name pos:line="51" pos:column="79">l</name><op:operator pos:line="51" pos:column="80">.</op:operator><name pos:line="51" pos:column="81">IsReference</name></name></lambda></expr></argument>)</argument_list></call></expr>;</return> }</block></function> }</block></decl></decl_stmt>

        <comment type="line" pos:line="53" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="54" pos:column="9">/// Instance method for getting &lt;see cref="NamespaceDefinition.XmlName"/&gt;</comment>
        <comment type="line" pos:line="55" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="56" pos:column="9">/// &lt;returns&gt;Returns the XML name for NamespaceDefinition&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="57" pos:column="9">public</specifier> <specifier pos:line="57" pos:column="16">override</specifier> <name pos:line="57" pos:column="25">string</name></type> <name pos:line="57" pos:column="32">GetXmlName</name><parameter_list pos:line="57" pos:column="42">()</parameter_list> <block pos:line="57" pos:column="45">{ <return pos:line="57" pos:column="47">return <expr><name><name pos:line="57" pos:column="54">NamespaceDefinition</name><op:operator pos:line="57" pos:column="73">.</op:operator><name pos:line="57" pos:column="74">XmlName</name></name></expr>;</return> }</block></function>

        <function><type><specifier pos:line="59" pos:column="9">public</specifier> <specifier pos:line="59" pos:column="16">override</specifier> <name pos:line="59" pos:column="25">Statement</name></type> <name pos:line="59" pos:column="35">Merge</name><parameter_list pos:line="59" pos:column="40">(<param><decl><type><name pos:line="59" pos:column="41">Statement</name></type> <name pos:line="59" pos:column="51">otherStatement</name></decl></param>)</parameter_list> <block pos:line="59" pos:column="67">{
            <return pos:line="60" pos:column="13">return <expr><call><name pos:line="60" pos:column="20">Merge</name><argument_list pos:line="60" pos:column="25">(<argument><expr><name pos:line="60" pos:column="26">otherStatement</name> <op:operator pos:line="60" pos:column="41">as</op:operator> <name pos:line="60" pos:column="44">NamespaceDefinition</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="63" pos:column="9">public</specifier> <name pos:line="63" pos:column="16">NamespaceDefinition</name></type> <name pos:line="63" pos:column="36">Merge</name><parameter_list pos:line="63" pos:column="41">(<param><decl><type><name pos:line="63" pos:column="42">NamespaceDefinition</name></type> <name pos:line="63" pos:column="62">otherNamespaceDefinition</name></decl></param>)</parameter_list> <block pos:line="63" pos:column="88">{
            <if pos:line="64" pos:column="13">if<condition pos:line="64" pos:column="15">(<expr><name pos:line="64" pos:column="16">null</name> <op:operator pos:line="64" pos:column="21">==</op:operator> <name pos:line="64" pos:column="24">otherNamespaceDefinition</name></expr>)</condition><then pos:line="64" pos:column="49">
                <throw pos:line="65" pos:column="17">throw <expr><op:operator pos:line="65" pos:column="23">new</op:operator> <call><name pos:line="65" pos:column="27">ArgumentNullException</name><argument_list pos:line="65" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="65" pos:column="49">"otherNamespaceDefinition"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="67" pos:column="13">NamespaceDefinition</name></type> <name pos:line="67" pos:column="33">combinedNamespace</name> <init pos:line="67" pos:column="51">= <expr><call><name><name pos:line="67" pos:column="53">Merge</name><argument_list pos:line="67" pos:column="58">&lt;<argument><name pos:line="67" pos:column="59">NamespaceDefinition</name></argument>&gt;</argument_list></name><argument_list pos:line="67" pos:column="79">(<argument><expr><name pos:line="67" pos:column="80">this</name></expr></argument>, <argument><expr><name pos:line="67" pos:column="86">otherNamespaceDefinition</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="68" pos:column="13">combinedNamespace</name><op:operator pos:line="68" pos:column="30">.</op:operator><name pos:line="68" pos:column="31">Name</name></name> <op:operator pos:line="68" pos:column="36">=</op:operator> <name><name pos:line="68" pos:column="38">this</name><op:operator pos:line="68" pos:column="42">.</op:operator><name pos:line="68" pos:column="43">Name</name></name></expr>;</expr_stmt>
            <return pos:line="69" pos:column="13">return <expr><name pos:line="69" pos:column="20">combinedNamespace</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="72" pos:column="9">protected</specifier> <specifier pos:line="72" pos:column="19">override</specifier> <name pos:line="72" pos:column="28">string</name></type> <name pos:line="72" pos:column="35">ComputeMergeId</name><parameter_list pos:line="72" pos:column="49">()</parameter_list> <block pos:line="72" pos:column="52">{
            <if pos:line="73" pos:column="13">if<condition pos:line="73" pos:column="15">(<expr><name pos:line="73" pos:column="16">IsGlobal</name></expr>)</condition><then pos:line="73" pos:column="25"> <block pos:line="73" pos:column="26">{
                <return pos:line="74" pos:column="17">return <expr><lit:literal type="string" pos:line="74" pos:column="24">"NG"</lit:literal></expr>;</return>
            }</block></then> <else pos:line="75" pos:column="15">else <if pos:line="75" pos:column="20">if<condition pos:line="75" pos:column="22">(<expr><name pos:line="75" pos:column="23">IsAnonymous</name></expr>)</condition><then pos:line="75" pos:column="35"> <block pos:line="75" pos:column="36">{
                <return pos:line="76" pos:column="17">return <expr><call><name><name pos:line="76" pos:column="24">base</name><op:operator pos:line="76" pos:column="28">.</op:operator><name pos:line="76" pos:column="29">ComputeMergeId</name></name><argument_list pos:line="76" pos:column="43">()</argument_list></call></expr>;</return>
            }</block></then> <else pos:line="77" pos:column="15">else <block pos:line="77" pos:column="20">{
                <return pos:line="78" pos:column="17">return <expr><call><name><name pos:line="78" pos:column="24">String</name><op:operator pos:line="78" pos:column="30">.</op:operator><name pos:line="78" pos:column="31">Format</name></name><argument_list pos:line="78" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="78" pos:column="38">"{0}:N:{1}"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="78" pos:column="51">KsuAdapter</name><op:operator pos:line="78" pos:column="61">.</op:operator><name pos:line="78" pos:column="62">GetLanguage</name></name><argument_list pos:line="78" pos:column="73">(<argument><expr><name pos:line="78" pos:column="74">ProgrammingLanguage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="78" pos:column="96">this</name><op:operator pos:line="78" pos:column="100">.</op:operator><name pos:line="78" pos:column="101">Name</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></else></if></else></if>
        }</block></function>

        <comment type="line" pos:line="82" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="83" pos:column="9">/// Returns the children of this namespace that have the same name as the given &lt;paramref name="use"/&gt;, and the given type.</comment>
        <comment type="line" pos:line="84" pos:column="9">/// This method searches only the immediate children, and not further descendants.</comment>
        <comment type="line" pos:line="85" pos:column="9">/// If this is a global namespace, and the lanugage is C or C++, then only children that occur in the same file as, and prior to, the use will be returned.</comment>
        <comment type="line" pos:line="86" pos:column="9">/// If there are no such children, then all matching children will be returned.</comment>
        <comment type="line" pos:line="87" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="88" pos:column="9">/// &lt;typeparam name="T"&gt;The type of children to return.&lt;/typeparam&gt;</comment>
        <comment type="line" pos:line="89" pos:column="9">/// &lt;param name="use"&gt;The use containing the name to search for.&lt;/param&gt;</comment>
        <comment type="line" pos:line="90" pos:column="9">/// &lt;param name="searchDeclarations"&gt;Whether to search the child DeclarationStatements for named entities.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="91" pos:column="9">public</specifier> <specifier pos:line="91" pos:column="16">override</specifier> <name><name pos:line="91" pos:column="25">IEnumerable</name><argument_list pos:line="91" pos:column="36">&lt;<argument><name pos:line="91" pos:column="37">T</name></argument>&gt;</argument_list></name></type> <name><name pos:line="91" pos:column="40">GetNamedChildren</name><argument_list pos:line="91" pos:column="56">&lt;<argument><name pos:line="91" pos:column="57">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="91" pos:column="59">(<param><decl><type><name pos:line="91" pos:column="60">NameUse</name></type> <name pos:line="91" pos:column="68">use</name></decl></param>, <param><decl><type><name pos:line="91" pos:column="73">bool</name></type> <name pos:line="91" pos:column="78">searchDeclarations</name></decl></param>)</parameter_list> <block pos:line="91" pos:column="98">{
            <if pos:line="92" pos:column="13">if<condition pos:line="92" pos:column="15">(<expr><name pos:line="92" pos:column="16">use</name> <op:operator pos:line="92" pos:column="20">==</op:operator> <name pos:line="92" pos:column="23">null</name></expr>)</condition><then pos:line="92" pos:column="28"> <block pos:line="92" pos:column="29">{ <throw pos:line="92" pos:column="31">throw <expr><op:operator pos:line="92" pos:column="37">new</op:operator> <call><name pos:line="92" pos:column="41">ArgumentNullException</name><argument_list pos:line="92" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="92" pos:column="63">"use"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>
            <decl_stmt><decl><type><name pos:line="93" pos:column="13">var</name></type> <name pos:line="93" pos:column="17">matches</name> <init pos:line="93" pos:column="25">= <expr><call><name><name pos:line="93" pos:column="27">base</name><op:operator pos:line="93" pos:column="31">.</op:operator><name><name pos:line="93" pos:column="32">GetNamedChildren</name><argument_list pos:line="93" pos:column="48">&lt;<argument><name pos:line="93" pos:column="49">T</name></argument>&gt;</argument_list></name></name><argument_list pos:line="93" pos:column="51">(<argument><expr><name pos:line="93" pos:column="52">use</name></expr></argument>, <argument><expr><name pos:line="93" pos:column="57">searchDeclarations</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="94" pos:column="13">if<condition pos:line="94" pos:column="15">(<expr><name pos:line="94" pos:column="16">IsGlobal</name> <op:operator pos:line="94" pos:column="25">&amp;&amp;</op:operator> <op:operator pos:line="94" pos:column="28">(</op:operator><name pos:line="94" pos:column="29">ProgrammingLanguage</name> <op:operator pos:line="94" pos:column="49">==</op:operator> <name><name pos:line="94" pos:column="52">Language</name><op:operator pos:line="94" pos:column="60">.</op:operator><name pos:line="94" pos:column="61">C</name></name> <op:operator pos:line="94" pos:column="63">||</op:operator> <name pos:line="94" pos:column="66">ProgrammingLanguage</name> <op:operator pos:line="94" pos:column="86">==</op:operator> <name><name pos:line="94" pos:column="89">Language</name><op:operator pos:line="94" pos:column="97">.</op:operator><name pos:line="94" pos:column="98">CPlusPlus</name></name><op:operator pos:line="94" pos:column="107">)</op:operator></expr>)</condition><then pos:line="94" pos:column="109"> <block pos:line="94" pos:column="110">{
                <decl_stmt><decl><type><name><name pos:line="95" pos:column="17">Func</name><argument_list pos:line="95" pos:column="21">&lt;<argument><name pos:line="95" pos:column="22">INamedEntity</name></argument>, <argument><name pos:line="95" pos:column="36">bool</name></argument>&gt;</argument_list></name></type> <name pos:line="95" pos:column="42">occursBeforeUse</name> <init pos:line="95" pos:column="58">= <expr><lambda><name pos:line="95" pos:column="60">delegate</name><parameter_list pos:line="95" pos:column="68">(<param><decl><type><name pos:line="95" pos:column="69">INamedEntity</name></type> <name pos:line="95" pos:column="82">match</name></decl></param>)</parameter_list> <block pos:line="95" pos:column="89">{
                                                               <decl_stmt><decl><type><name pos:line="96" pos:column="64">var</name></type> <name pos:line="96" pos:column="68">matchLocs</name> <init pos:line="96" pos:column="78">= <expr><call><name><name pos:line="96" pos:column="80">match</name><op:operator pos:line="96" pos:column="85">.</op:operator><name pos:line="96" pos:column="86">GetLocations</name></name><argument_list pos:line="96" pos:column="98">()</argument_list></call><op:operator pos:line="96" pos:column="100">.</op:operator><call><name pos:line="96" pos:column="101">ToList</name><argument_list pos:line="96" pos:column="107">()</argument_list></call></expr></init></decl>;</decl_stmt>
                                                               <if pos:line="97" pos:column="64">if<condition pos:line="97" pos:column="66">(<expr><name><name pos:line="97" pos:column="67">matchLocs</name><op:operator pos:line="97" pos:column="76">.</op:operator><name pos:line="97" pos:column="77">Count</name></name> <op:operator pos:line="97" pos:column="83">==</op:operator> <lit:literal type="number" pos:line="97" pos:column="86">1</lit:literal>
                                                                  <op:operator pos:line="98" pos:column="67">&amp;&amp;</op:operator> <call><name><name pos:line="98" pos:column="70">string</name><op:operator pos:line="98" pos:column="76">.</op:operator><name pos:line="98" pos:column="77">Compare</name></name><argument_list pos:line="98" pos:column="84">(<argument><expr><name><name pos:line="98" pos:column="85">matchLocs</name><index pos:line="98" pos:column="94">[<expr><lit:literal type="number" pos:line="98" pos:column="95">0</lit:literal></expr>]</index></name><op:operator pos:line="98" pos:column="97">.</op:operator><name pos:line="98" pos:column="98">SourceFileName</name></expr></argument>, <argument><expr><name><name pos:line="98" pos:column="114">use</name><op:operator pos:line="98" pos:column="117">.</op:operator><name pos:line="98" pos:column="118">Location</name><op:operator pos:line="98" pos:column="126">.</op:operator><name pos:line="98" pos:column="127">SourceFileName</name></name></expr></argument>, <argument><expr><name><name pos:line="98" pos:column="143">StringComparison</name><op:operator pos:line="98" pos:column="159">.</op:operator><name pos:line="98" pos:column="160">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="98" pos:column="179">==</op:operator> <lit:literal type="number" pos:line="98" pos:column="182">0</lit:literal>
                                                                  <op:operator pos:line="99" pos:column="67">&amp;&amp;</op:operator> <call><name><name pos:line="99" pos:column="70">PositionComparer</name><op:operator pos:line="99" pos:column="86">.</op:operator><name pos:line="99" pos:column="87">CompareLocation</name></name><argument_list pos:line="99" pos:column="102">(<argument><expr><name><name pos:line="99" pos:column="103">matchLocs</name><index pos:line="99" pos:column="112">[<expr><lit:literal type="number" pos:line="99" pos:column="113">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name><name pos:line="99" pos:column="117">use</name><op:operator pos:line="99" pos:column="120">.</op:operator><name pos:line="99" pos:column="121">Location</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="99" pos:column="131">&gt;=</op:operator> <lit:literal type="number" pos:line="99" pos:column="134">0</lit:literal></expr>)</condition><then pos:line="99" pos:column="136"> <block pos:line="99" pos:column="137">{
                                                                   <comment type="line" pos:line="100" pos:column="68">//match occurs exclusively after the use, so don't include</comment>
                                                                   <return pos:line="101" pos:column="68">return <expr><lit:literal type="boolean" pos:line="101" pos:column="75">false</lit:literal></expr>;</return>
                                                               }</block></then></if>
                                                               <return pos:line="103" pos:column="64">return <expr><lit:literal type="boolean" pos:line="103" pos:column="71">true</lit:literal></expr>;</return>
                                                           }</block></lambda></expr></init></decl>;</decl_stmt>
                <return pos:line="105" pos:column="17">return <expr><call><name><name pos:line="105" pos:column="24">matches</name><op:operator pos:line="105" pos:column="31">.</op:operator><name pos:line="105" pos:column="32">Where</name></name><argument_list pos:line="105" pos:column="37">(<argument><expr><lambda><name pos:line="105" pos:column="38">m</name> <op:operator pos:line="105" pos:column="40">=&gt;</op:operator> <call><name pos:line="105" pos:column="43">occursBeforeUse</name><argument_list pos:line="105" pos:column="58">(<argument><expr><name pos:line="105" pos:column="59">m</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then> <else pos:line="106" pos:column="15">else <block pos:line="106" pos:column="20">{
                <return pos:line="107" pos:column="17">return <expr><name pos:line="107" pos:column="24">matches</name></expr>;</return>
            }</block></else></if>
        }</block></function>

        <comment type="line" pos:line="111" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="112" pos:column="9">/// Returns a string representation of this statement.</comment>
        <comment type="line" pos:line="113" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="114" pos:column="9">public</specifier> <specifier pos:line="114" pos:column="16">override</specifier> <name pos:line="114" pos:column="25">string</name></type> <name pos:line="114" pos:column="32">ToString</name><parameter_list pos:line="114" pos:column="40">()</parameter_list> <block pos:line="114" pos:column="43">{
            <if pos:line="115" pos:column="13">if<condition pos:line="115" pos:column="15">(<expr><name pos:line="115" pos:column="16">Accessibility</name> <op:operator pos:line="115" pos:column="30">==</op:operator> <name><name pos:line="115" pos:column="33">AccessModifier</name><op:operator pos:line="115" pos:column="47">.</op:operator><name pos:line="115" pos:column="48">None</name></name></expr>)</condition><then pos:line="115" pos:column="53"> <block pos:line="115" pos:column="54">{
                <return pos:line="116" pos:column="17">return <expr><call><name><name pos:line="116" pos:column="24">string</name><op:operator pos:line="116" pos:column="30">.</op:operator><name pos:line="116" pos:column="31">Format</name></name><argument_list pos:line="116" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="116" pos:column="38">"namespace {0}"</lit:literal></expr></argument>, <argument><expr><name pos:line="116" pos:column="55">Name</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then> <else pos:line="117" pos:column="15">else <block pos:line="117" pos:column="20">{
                <return pos:line="118" pos:column="17">return <expr><call><name><name pos:line="118" pos:column="24">string</name><op:operator pos:line="118" pos:column="30">.</op:operator><name pos:line="118" pos:column="31">Format</name></name><argument_list pos:line="118" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="118" pos:column="38">"{0} namespace {1}"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="118" pos:column="59">Accessibility</name><op:operator pos:line="118" pos:column="72">.</op:operator><name pos:line="118" pos:column="73">ToKeywordString</name></name><argument_list pos:line="118" pos:column="88">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="118" pos:column="92">Name</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></else></if>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
