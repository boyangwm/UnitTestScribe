<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML\AbstractGenerator.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2014 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - Initial implementation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">System</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Collections</name><op:operator pos:line="13" pos:column="25">.</op:operator><name pos:line="13" pos:column="26">Generic</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">IO</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Linq</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Text</name></name>;</using>

<namespace pos:line="18" pos:column="1">namespace <name><name pos:line="18" pos:column="11">ABB</name><op:operator pos:line="18" pos:column="14">.</op:operator><name pos:line="18" pos:column="15">SrcML</name></name> <block pos:line="18" pos:column="21">{
    <comment type="line" pos:line="19" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="20" pos:column="5">/// The abstract generator file takes an input file and creates an output file.</comment>
    <comment type="line" pos:line="21" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="22" pos:column="5">public</specifier> <specifier pos:line="22" pos:column="12">abstract</specifier> class <name pos:line="22" pos:column="27">AbstractGenerator</name> <block pos:line="22" pos:column="45">{
        <decl_stmt><decl><type><specifier pos:line="23" pos:column="9">private</specifier> <name pos:line="23" pos:column="17">TextWriter</name></type> <name pos:line="23" pos:column="28">_synchronizedErrorLog</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="25" pos:column="9">public</specifier> <name pos:line="25" pos:column="16">bool</name></type> <name pos:line="25" pos:column="21">IsLoggingErrors</name> <block pos:line="25" pos:column="37">{ <function_decl><name pos:line="25" pos:column="39">get</name>;</function_decl> <function_decl><name pos:line="25" pos:column="44">set</name>;</function_decl> }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="27" pos:column="9">public</specifier> <name pos:line="27" pos:column="16">TextWriter</name></type> <name pos:line="27" pos:column="27">ErrorLog</name> <block pos:line="27" pos:column="36">{
            <function><name pos:line="28" pos:column="13">get</name> <block pos:line="28" pos:column="17">{ <return pos:line="28" pos:column="19">return <expr><name pos:line="28" pos:column="26">_synchronizedErrorLog</name></expr>;</return> }</block></function>
            <function><name pos:line="29" pos:column="13">set</name> <block pos:line="29" pos:column="17">{ <expr_stmt><expr><name pos:line="29" pos:column="19">_synchronizedErrorLog</name> <op:operator pos:line="29" pos:column="41">=</op:operator> <op:operator pos:line="29" pos:column="43">(</op:operator><name pos:line="29" pos:column="44">value</name> <op:operator pos:line="29" pos:column="50">!=</op:operator> <name pos:line="29" pos:column="53">null</name> <op:operator pos:line="29" pos:column="58">?</op:operator> <call><name><name pos:line="29" pos:column="60">TextWriter</name><op:operator pos:line="29" pos:column="70">.</op:operator><name pos:line="29" pos:column="71">Synchronized</name></name><argument_list pos:line="29" pos:column="83">(<argument><expr><name pos:line="29" pos:column="84">value</name></expr></argument>)</argument_list></call> <op:operator pos:line="29" pos:column="91">:</op:operator> <name pos:line="29" pos:column="93">null</name><op:operator pos:line="29" pos:column="97">)</op:operator></expr>;</expr_stmt> }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="32" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="33" pos:column="9">/// Default constructor for the abstract generator</comment>
        <comment type="line" pos:line="34" pos:column="9">/// &lt;/summary&gt;</comment>
        <constructor><specifier pos:line="35" pos:column="9">protected</specifier> <name pos:line="35" pos:column="19">AbstractGenerator</name><parameter_list pos:line="35" pos:column="36">()</parameter_list> <block pos:line="35" pos:column="39">{
            <expr_stmt><expr><name pos:line="36" pos:column="13">IsLoggingErrors</name> <op:operator pos:line="36" pos:column="29">=</op:operator> <lit:literal type="boolean" pos:line="36" pos:column="31">false</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="37" pos:column="13">ErrorLog</name> <op:operator pos:line="37" pos:column="22">=</op:operator> <name><name pos:line="37" pos:column="24">Console</name><op:operator pos:line="37" pos:column="31">.</op:operator><name pos:line="37" pos:column="32">Error</name></name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="40" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="41" pos:column="9">/// A list of extensions supported by this generator</comment>
        <comment type="line" pos:line="42" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="43" pos:column="9">public</specifier> <specifier pos:line="43" pos:column="16">abstract</specifier> <name><name pos:line="43" pos:column="25">ICollection</name><argument_list pos:line="43" pos:column="36">&lt;<argument><name pos:line="43" pos:column="37">string</name></argument>&gt;</argument_list></name></type> <name pos:line="43" pos:column="45">SupportedExtensions</name> <block pos:line="43" pos:column="65">{ <function_decl><name pos:line="43" pos:column="67">get</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="45" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="46" pos:column="9">/// Generates &lt;paramref name="outputFileName"/&gt; from &lt;paramref name="inputFileName"/&gt;</comment>
        <comment type="line" pos:line="47" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="48" pos:column="9">/// &lt;param name="inputFileName"&gt;The input file&lt;/param&gt;</comment>
        <comment type="line" pos:line="49" pos:column="9">/// &lt;param name="outputFileName"&gt;the output file&lt;/param&gt;</comment>
        <function><type><specifier pos:line="50" pos:column="9">public</specifier> <name pos:line="50" pos:column="16">bool</name></type> <name pos:line="50" pos:column="21">Generate</name><parameter_list pos:line="50" pos:column="29">(<param><decl><type><name pos:line="50" pos:column="30">string</name></type> <name pos:line="50" pos:column="37">inputFileName</name></decl></param>, <param><decl><type><name pos:line="50" pos:column="52">string</name></type> <name pos:line="50" pos:column="59">outputFileName</name></decl></param>)</parameter_list> <block pos:line="50" pos:column="75">{
            <try pos:line="51" pos:column="13">try <block pos:line="51" pos:column="17">{
                <return pos:line="52" pos:column="17">return <expr><call><name pos:line="52" pos:column="24">GenerateImpl</name><argument_list pos:line="52" pos:column="36">(<argument><expr><name pos:line="52" pos:column="37">inputFileName</name></expr></argument>, <argument><expr><name pos:line="52" pos:column="52">outputFileName</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block> <catch pos:line="53" pos:column="15">catch<parameter_list pos:line="53" pos:column="20">(<param><decl><type><name pos:line="53" pos:column="21">Exception</name></type> <name pos:line="53" pos:column="31">e</name></decl></param>)</parameter_list> <block pos:line="53" pos:column="34">{
                <if pos:line="54" pos:column="17">if<condition pos:line="54" pos:column="19">(<expr><name pos:line="54" pos:column="20">IsLoggingErrors</name></expr>)</condition><then pos:line="54" pos:column="36"> <block pos:line="54" pos:column="37">{
                    <expr_stmt><expr><call><name pos:line="55" pos:column="21">LogError</name><argument_list pos:line="55" pos:column="29">(<argument><expr><name pos:line="55" pos:column="30">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return pos:line="56" pos:column="21">return <expr><lit:literal type="boolean" pos:line="56" pos:column="28">false</lit:literal></expr>;</return>
                }</block></then> <else pos:line="57" pos:column="19">else <block pos:line="57" pos:column="24">{
                    <throw pos:line="58" pos:column="21">throw;</throw>
                }</block></else></if>
            }</block></catch></try>
        }</block></function>

        <function><type><specifier pos:line="63" pos:column="9">protected</specifier> <specifier pos:line="63" pos:column="19">virtual</specifier> <name pos:line="63" pos:column="27">void</name></type> <name pos:line="63" pos:column="32">LogError</name><parameter_list pos:line="63" pos:column="40">(<param><decl><type><name pos:line="63" pos:column="41">Exception</name></type> <name pos:line="63" pos:column="51">e</name></decl></param>)</parameter_list> <block pos:line="63" pos:column="54">{
            <if pos:line="64" pos:column="13">if<condition pos:line="64" pos:column="15">(<expr><name pos:line="64" pos:column="16">null</name> <op:operator pos:line="64" pos:column="21">!=</op:operator> <name pos:line="64" pos:column="24">ErrorLog</name></expr>)</condition><then pos:line="64" pos:column="33"> <block pos:line="64" pos:column="34">{
                <expr_stmt><expr><call><name><name pos:line="65" pos:column="17">ErrorLog</name><op:operator pos:line="65" pos:column="25">.</op:operator><name pos:line="65" pos:column="26">WriteLine</name></name><argument_list pos:line="65" pos:column="35">(<argument><expr><name pos:line="65" pos:column="36">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="69" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="70" pos:column="9">/// Generates &lt;paramref name="outputFileName"/&gt; from &lt;paramref name="inputFileName"/&gt;</comment>
        <comment type="line" pos:line="71" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="72" pos:column="9">/// &lt;param name="inputFileName"&gt;The input file&lt;/param&gt;</comment>
        <comment type="line" pos:line="73" pos:column="9">/// &lt;param name="outputFileName"&gt;the output file&lt;/param&gt;</comment>
        <function_decl><type><specifier pos:line="74" pos:column="9">protected</specifier> <specifier pos:line="74" pos:column="19">abstract</specifier> <name pos:line="74" pos:column="28">bool</name></type> <name pos:line="74" pos:column="33">GenerateImpl</name><parameter_list pos:line="74" pos:column="45">(<param><decl><type><name pos:line="74" pos:column="46">string</name></type> <name pos:line="74" pos:column="53">inputFileName</name></decl></param>, <param><decl><type><name pos:line="74" pos:column="68">string</name></type> <name pos:line="74" pos:column="75">outputFileName</name></decl></param>)</parameter_list>;</function_decl>
    }</block></class>
}</block></namespace>
</unit>
