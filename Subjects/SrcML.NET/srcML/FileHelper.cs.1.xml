<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML\Utilities\FileHelper.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">IO</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Linq</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Text</name></name>;</using>

<namespace pos:line="7" pos:column="1">namespace <name><name pos:line="7" pos:column="11">ABB</name><op:operator pos:line="7" pos:column="14">.</op:operator><name pos:line="7" pos:column="15">SrcML</name><op:operator pos:line="7" pos:column="20">.</op:operator><name pos:line="7" pos:column="21">Utilities</name></name> <block pos:line="7" pos:column="31">{

    <comment type="line" pos:line="9" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="10" pos:column="5">/// FileHelper contains numerous static methods for working with files</comment>
    <comment type="line" pos:line="11" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="12" pos:column="5">public</specifier> <specifier pos:line="12" pos:column="12">static</specifier> class <name pos:line="12" pos:column="25">FileHelper</name> <block pos:line="12" pos:column="36">{

        <comment type="line" pos:line="14" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="15" pos:column="9">/// GetCommonPath finds the longest common path for all of the files in</comment>
        <comment type="line" pos:line="16" pos:column="9">/// &lt;paramref name="filePaths"/&gt;that is</comment>
        <comment type="line" pos:line="17" pos:column="9">/// &lt;paramref name="startingPoint"/&gt;or a parent of it.</comment>
        <comment type="line" pos:line="18" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="19" pos:column="9">/// &lt;param name="startingPoint"&gt;The starting point to start searching from&lt;/param&gt;</comment>
        <comment type="line" pos:line="20" pos:column="9">/// &lt;param name="filePaths"&gt;The enumerable of file paths&lt;/param&gt;</comment>
        <comment type="line" pos:line="21" pos:column="9">/// &lt;returns&gt;The longest path that is common to all</comment>
        <comment type="line" pos:line="22" pos:column="9">/// &lt;paramref name="filePaths"/&gt;. If it cannot find one, null is returned.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="23" pos:column="9">public</specifier> <specifier pos:line="23" pos:column="16">static</specifier> <name pos:line="23" pos:column="23">string</name></type> <name pos:line="23" pos:column="30">GetCommonPath</name><parameter_list pos:line="23" pos:column="43">(<param><decl><type><name pos:line="23" pos:column="44">string</name></type> <name pos:line="23" pos:column="51">startingPoint</name></decl></param>, <param><decl><type><name><name pos:line="23" pos:column="66">IEnumerable</name><argument_list pos:line="23" pos:column="77">&lt;<argument><name pos:line="23" pos:column="78">string</name></argument>&gt;</argument_list></name></type> <name pos:line="23" pos:column="86">filePaths</name></decl></param>)</parameter_list> <block pos:line="23" pos:column="97">{
            <if pos:line="24" pos:column="13">if<condition pos:line="24" pos:column="15">(<expr><name pos:line="24" pos:column="16">null</name> <op:operator pos:line="24" pos:column="21">==</op:operator> <name pos:line="24" pos:column="24">startingPoint</name></expr>)</condition><then pos:line="24" pos:column="38">
                <throw pos:line="25" pos:column="17">throw <expr><op:operator pos:line="25" pos:column="23">new</op:operator> <call><name pos:line="25" pos:column="27">ArgumentNullException</name><argument_list pos:line="25" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="25" pos:column="49">"startingPoint"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="26" pos:column="13">if<condition pos:line="26" pos:column="15">(<expr><name pos:line="26" pos:column="16">null</name> <op:operator pos:line="26" pos:column="21">==</op:operator> <name pos:line="26" pos:column="24">filePaths</name></expr>)</condition><then pos:line="26" pos:column="34">
                <throw pos:line="27" pos:column="17">throw <expr><op:operator pos:line="27" pos:column="23">new</op:operator> <call><name pos:line="27" pos:column="27">ArgumentNullException</name><argument_list pos:line="27" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="27" pos:column="49">"filePaths"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <decl_stmt><decl><type><name pos:line="28" pos:column="13">bool</name></type> <name pos:line="28" pos:column="18">commonPathFound</name> <init pos:line="28" pos:column="34">= <expr><lit:literal type="boolean" pos:line="28" pos:column="36">false</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="29" pos:column="13">string</name></type> <name pos:line="29" pos:column="20">commonPath</name> <init pos:line="29" pos:column="31">= <expr><name pos:line="29" pos:column="33">startingPoint</name></expr></init></decl>;</decl_stmt>
            <while pos:line="30" pos:column="13">while<condition pos:line="30" pos:column="18">(<expr><op:operator pos:line="30" pos:column="19">!</op:operator><name pos:line="30" pos:column="20">commonPathFound</name></expr>)</condition> <block pos:line="30" pos:column="37">{
                <expr_stmt><expr><name pos:line="31" pos:column="17">commonPathFound</name> <op:operator pos:line="31" pos:column="33">=</op:operator> <call><name><name pos:line="31" pos:column="35">filePaths</name><op:operator pos:line="31" pos:column="44">.</op:operator><name pos:line="31" pos:column="45">All</name></name><argument_list pos:line="31" pos:column="48">(<argument><expr><lambda><name pos:line="31" pos:column="49">f</name> <op:operator pos:line="31" pos:column="51">=&gt;</op:operator> <call><name><name pos:line="31" pos:column="54">f</name><op:operator pos:line="31" pos:column="55">.</op:operator><name pos:line="31" pos:column="56">StartsWith</name></name><argument_list pos:line="31" pos:column="66">(<argument><expr><name pos:line="31" pos:column="67">commonPath</name></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="79">StringComparison</name><op:operator pos:line="31" pos:column="95">.</op:operator><name pos:line="31" pos:column="96">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="32" pos:column="17">if<condition pos:line="32" pos:column="19">(<expr><name pos:line="32" pos:column="20">commonPathFound</name></expr>)</condition><then pos:line="32" pos:column="36"> <block pos:line="32" pos:column="37">{
                    <break pos:line="33" pos:column="21">break;</break>
                }</block></then></if>
                <expr_stmt><expr><name pos:line="35" pos:column="17">commonPath</name> <op:operator pos:line="35" pos:column="28">=</op:operator> <call><name><name pos:line="35" pos:column="30">Path</name><op:operator pos:line="35" pos:column="34">.</op:operator><name pos:line="35" pos:column="35">GetDirectoryName</name></name><argument_list pos:line="35" pos:column="51">(<argument><expr><name pos:line="35" pos:column="52">commonPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="36" pos:column="17">if<condition pos:line="36" pos:column="19">(<expr><name pos:line="36" pos:column="20">null</name> <op:operator pos:line="36" pos:column="25">==</op:operator> <name pos:line="36" pos:column="28">commonPath</name></expr>)</condition><then pos:line="36" pos:column="39"> <block pos:line="36" pos:column="40">{
                    <break pos:line="37" pos:column="21">break;</break>
                }</block></then></if>
            }</block></while>
            <return pos:line="40" pos:column="13">return <expr><name pos:line="40" pos:column="20">commonPath</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="43" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="44" pos:column="9">/// Finds the longest common path for all of the files in</comment>
        <comment type="line" pos:line="45" pos:column="9">/// &lt;paramref name="filePaths"/&gt;&lt;/summary&gt;</comment>
        <comment type="line" pos:line="46" pos:column="9">/// &lt;remarks&gt;</comment>
        <comment type="line" pos:line="47" pos:column="9">/// This calls &lt;see cref="GetCommonPath(string,IEnumerable{string})"/&gt; where the first file</comment>
        <comment type="line" pos:line="48" pos:column="9">/// in</comment>
        <comment type="line" pos:line="49" pos:column="9">/// &lt;paramref name="filePaths"/&gt;is used as the starting point</comment>
        <comment type="line" pos:line="50" pos:column="9">/// &lt;/remarks&gt;</comment>
        <comment type="line" pos:line="51" pos:column="9">/// &lt;param name="filePaths"&gt;The enumerable of file paths&lt;/param&gt;</comment>
        <comment type="line" pos:line="52" pos:column="9">/// &lt;returns&gt;The longest path that is common to all</comment>
        <comment type="line" pos:line="53" pos:column="9">/// &lt;paramref name="filePaths"/&gt;. If it cannot find one, null is returned.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="54" pos:column="9">public</specifier> <specifier pos:line="54" pos:column="16">static</specifier> <name pos:line="54" pos:column="23">string</name></type> <name pos:line="54" pos:column="30">GetCommonPath</name><parameter_list pos:line="54" pos:column="43">(<param><decl><type><name><name pos:line="54" pos:column="44">IEnumerable</name><argument_list pos:line="54" pos:column="55">&lt;<argument><name pos:line="54" pos:column="56">string</name></argument>&gt;</argument_list></name></type> <name pos:line="54" pos:column="64">filePaths</name></decl></param>)</parameter_list> <block pos:line="54" pos:column="75">{
            <decl_stmt><decl><type><name pos:line="55" pos:column="13">string</name></type> <name pos:line="55" pos:column="20">shortest</name> <init pos:line="55" pos:column="29">= <expr><name pos:line="55" pos:column="31">null</name></expr></init></decl>;</decl_stmt>
            <try pos:line="56" pos:column="13">try <block pos:line="56" pos:column="17">{
                <expr_stmt><expr><name pos:line="57" pos:column="17">shortest</name> <op:operator pos:line="57" pos:column="26">=</op:operator> <call><name><name pos:line="57" pos:column="28">filePaths</name><op:operator pos:line="57" pos:column="37">.</op:operator><name pos:line="57" pos:column="38">First</name></name><argument_list pos:line="57" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch pos:line="58" pos:column="15">catch<parameter_list pos:line="58" pos:column="20">(<param><decl><type><name pos:line="58" pos:column="21">InvalidOperationException</name></type></decl></param>)</parameter_list> <block pos:line="58" pos:column="48">{
                <expr_stmt><expr><name pos:line="59" pos:column="17">shortest</name> <op:operator pos:line="59" pos:column="26">=</op:operator> <name pos:line="59" pos:column="28">null</name></expr>;</expr_stmt>
            }</block></catch></try>

            <return pos:line="62" pos:column="13">return <expr><call><name pos:line="62" pos:column="20">GetCommonPath</name><argument_list pos:line="62" pos:column="33">(<argument><expr><name pos:line="62" pos:column="34">shortest</name></expr></argument>, <argument><expr><name pos:line="62" pos:column="44">filePaths</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>


        <comment type="line" pos:line="66" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="67" pos:column="9">/// Finds a list of common paths from the files in</comment>
        <comment type="line" pos:line="68" pos:column="9">/// &lt;paramref name="filePaths"/&gt;&lt;/summary&gt;</comment>
        <comment type="line" pos:line="69" pos:column="9">/// &lt;param name="filePaths"&gt;The enumerable of file paths&lt;/param&gt;</comment>
        <comment type="line" pos:line="70" pos:column="9">/// &lt;returns&gt;A list of common paths for all the files</comment>
        <comment type="line" pos:line="71" pos:column="9">/// &lt;paramref name="filePaths"/&gt;. If it cannot find any paths, an empty list is returned.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="72" pos:column="9">public</specifier> <specifier pos:line="72" pos:column="16">static</specifier> <name><name pos:line="72" pos:column="23">List</name><argument_list pos:line="72" pos:column="27">&lt;<argument><name pos:line="72" pos:column="28">string</name></argument>&gt;</argument_list></name></type> <name pos:line="72" pos:column="36">GetCommonPathList</name><parameter_list pos:line="72" pos:column="53">(<param><decl><type><name><name pos:line="72" pos:column="54">IEnumerable</name><argument_list pos:line="72" pos:column="65">&lt;<argument><name pos:line="72" pos:column="66">string</name></argument>&gt;</argument_list></name></type> <name pos:line="72" pos:column="74">filePaths</name></decl></param>)</parameter_list>
        <block pos:line="73" pos:column="9">{
            <if pos:line="74" pos:column="13">if <condition pos:line="74" pos:column="16">(<expr><name pos:line="74" pos:column="17">null</name> <op:operator pos:line="74" pos:column="22">==</op:operator> <name pos:line="74" pos:column="25">filePaths</name></expr>)</condition><then pos:line="74" pos:column="35">
                <throw pos:line="75" pos:column="17">throw <expr><op:operator pos:line="75" pos:column="23">new</op:operator> <call><name pos:line="75" pos:column="27">ArgumentNullException</name><argument_list pos:line="75" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="75" pos:column="49">"filePaths"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
           
            <decl_stmt><decl><type><name pos:line="77" pos:column="13">var</name></type> <name pos:line="77" pos:column="17">filePathsList</name> <init pos:line="77" pos:column="31">= <expr><call><name><name pos:line="77" pos:column="33">filePaths</name><op:operator pos:line="77" pos:column="42">.</op:operator><name pos:line="77" pos:column="43">Select</name></name><argument_list pos:line="77" pos:column="49">(<argument><expr><lambda><name pos:line="77" pos:column="50">f</name> <op:operator pos:line="77" pos:column="52">=&gt;</op:operator> <call><name><name pos:line="77" pos:column="55">Path</name><op:operator pos:line="77" pos:column="59">.</op:operator><name pos:line="77" pos:column="60">GetDirectoryName</name></name><argument_list pos:line="77" pos:column="76">(<argument><expr><name pos:line="77" pos:column="77">f</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="77" pos:column="80">.</op:operator><call><name pos:line="77" pos:column="81">OrderBy</name><argument_list pos:line="77" pos:column="88">(<argument><expr><lambda><name pos:line="77" pos:column="89">d</name> <op:operator pos:line="77" pos:column="91">=&gt;</op:operator> <name><name pos:line="77" pos:column="94">d</name><op:operator pos:line="77" pos:column="95">.</op:operator><name pos:line="77" pos:column="96">Length</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="77" pos:column="103">.</op:operator><call><name pos:line="77" pos:column="104">ToList</name><argument_list pos:line="77" pos:column="110">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="78" pos:column="13">var</name></type> <name pos:line="78" pos:column="17">commonPathList</name> <init pos:line="78" pos:column="32">= <expr><op:operator pos:line="78" pos:column="34">new</op:operator> <call><name><name pos:line="78" pos:column="38">List</name><argument_list pos:line="78" pos:column="42">&lt;<argument><name pos:line="78" pos:column="43">string</name></argument>&gt;</argument_list></name><argument_list pos:line="78" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while pos:line="79" pos:column="13">while <condition pos:line="79" pos:column="19">(<expr><call><name><name pos:line="79" pos:column="20">filePathsList</name><op:operator pos:line="79" pos:column="33">.</op:operator><name pos:line="79" pos:column="34">Any</name></name><argument_list pos:line="79" pos:column="37">()</argument_list></call></expr>)</condition>
            <block pos:line="80" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="81" pos:column="17">var</name></type> <name pos:line="81" pos:column="21">shortestPath</name> <init pos:line="81" pos:column="34">= <expr><call><name><name pos:line="81" pos:column="36">filePathsList</name><op:operator pos:line="81" pos:column="49">.</op:operator><name pos:line="81" pos:column="50">First</name></name><argument_list pos:line="81" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="82" pos:column="17">commonPathList</name><op:operator pos:line="82" pos:column="31">.</op:operator><name pos:line="82" pos:column="32">Add</name></name><argument_list pos:line="82" pos:column="35">(<argument><expr><name pos:line="82" pos:column="36">shortestPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="83" pos:column="17">filePathsList</name><op:operator pos:line="83" pos:column="30">.</op:operator><name pos:line="83" pos:column="31">RemoveAll</name></name><argument_list pos:line="83" pos:column="40">(<argument><expr><lambda><name pos:line="83" pos:column="41">f</name> <op:operator pos:line="83" pos:column="43">=&gt;</op:operator> <call><name><name pos:line="83" pos:column="46">f</name><op:operator pos:line="83" pos:column="47">.</op:operator><name pos:line="83" pos:column="48">StartsWith</name></name><argument_list pos:line="83" pos:column="58">(<argument><expr><name pos:line="83" pos:column="59">shortestPath</name></expr></argument>, <argument><expr><name><name pos:line="83" pos:column="73">StringComparison</name><op:operator pos:line="83" pos:column="89">.</op:operator><name pos:line="83" pos:column="90">Ordinal</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            <return pos:line="85" pos:column="13">return <expr><name pos:line="85" pos:column="20">commonPathList</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
