<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\VisualStudio\ABB.SrcML.VisualStudio.SrcMLService\SrcMLDataService.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2013 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine(ABB Group) - Initial implementation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">System</name><op:operator pos:line="12" pos:column="13">.</op:operator><name pos:line="12" pos:column="14">Threading</name><op:operator pos:line="12" pos:column="23">.</op:operator><name pos:line="12" pos:column="24">Tasks</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">ABB</name><op:operator pos:line="13" pos:column="10">.</op:operator><name pos:line="13" pos:column="11">SrcML</name><op:operator pos:line="13" pos:column="16">.</op:operator><name pos:line="13" pos:column="17">Data</name></name>;</using>
<using pos:line="14" pos:column="1">using <name pos:line="14" pos:column="7">System</name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Collections</name><op:operator pos:line="15" pos:column="25">.</op:operator><name pos:line="15" pos:column="26">Generic</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Linq</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Text</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">IO</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">ABB</name><op:operator pos:line="19" pos:column="10">.</op:operator><name pos:line="19" pos:column="11">VisualStudio</name></name>;</using>
<using pos:line="20" pos:column="1">using <name><name pos:line="20" pos:column="7">ABB</name><op:operator pos:line="20" pos:column="10">.</op:operator><name pos:line="20" pos:column="11">SrcML</name><op:operator pos:line="20" pos:column="16">.</op:operator><name pos:line="20" pos:column="17">Utilities</name></name>;</using>

<namespace pos:line="22" pos:column="1">namespace <name><name pos:line="22" pos:column="11">ABB</name><op:operator pos:line="22" pos:column="14">.</op:operator><name pos:line="22" pos:column="15">SrcML</name><op:operator pos:line="22" pos:column="20">.</op:operator><name pos:line="22" pos:column="21">VisualStudio</name></name> <block pos:line="22" pos:column="34">{
    <comment type="line" pos:line="23" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="24" pos:column="5">/// The default implementation for &lt;see cref="ISrcMLDataService"/&gt;</comment>
    <comment type="line" pos:line="25" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="26" pos:column="5">public</specifier> class <name pos:line="26" pos:column="18">SrcMLDataService</name> <super pos:line="26" pos:column="35">: <name pos:line="26" pos:column="37">ISrcMLDataService</name>, <name pos:line="26" pos:column="56">SSrcMLDataService</name></super> <block pos:line="26" pos:column="74">{
        <decl_stmt><decl><type><specifier pos:line="27" pos:column="9">private</specifier> <name pos:line="27" pos:column="17">bool</name></type> <name pos:line="27" pos:column="22">_isMonitoring</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="28" pos:column="9">private</specifier> <name pos:line="28" pos:column="17">bool</name></type> <name pos:line="28" pos:column="22">_isUpdating</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="29" pos:column="9">private</specifier> <name pos:line="29" pos:column="17">IServiceProvider</name></type> <name pos:line="29" pos:column="34">_serviceProvider</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="30" pos:column="9">private</specifier> <name pos:line="30" pos:column="17">ITaskManagerService</name></type> <name pos:line="30" pos:column="37">_taskManager</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="31" pos:column="9">private</specifier> <name pos:line="31" pos:column="17">ISrcMLGlobalService</name></type> <name pos:line="31" pos:column="37">_srcMLService</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="32" pos:column="9">private</specifier> <name pos:line="32" pos:column="17">IWorkingSetRegistrarService</name></type> <name pos:line="32" pos:column="45">_workingSetFactories</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="33" pos:column="9">private</specifier> <name><name pos:line="33" pos:column="17">ArchiveMonitor</name><argument_list pos:line="33" pos:column="31">&lt;<argument><name pos:line="33" pos:column="32">SrcMLArchive</name></argument>&gt;</argument_list></name></type> <name pos:line="33" pos:column="46">_srcMonitor</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="34" pos:column="9">private</specifier> <name pos:line="34" pos:column="17">DataArchive</name></type> <name pos:line="34" pos:column="29">CurrentDataArchive</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="36" pos:column="9">private</specifier> <name pos:line="36" pos:column="17">TaskScheduler</name></type> <name pos:line="36" pos:column="31">Scheduler</name> <block pos:line="36" pos:column="41">{ <function><name pos:line="36" pos:column="43">get</name> <block pos:line="36" pos:column="47">{ <return pos:line="36" pos:column="49">return <expr><op:operator pos:line="36" pos:column="56">(</op:operator><name pos:line="36" pos:column="57">null</name> <op:operator pos:line="36" pos:column="62">==</op:operator> <name pos:line="36" pos:column="65">_taskManager</name> <op:operator pos:line="36" pos:column="78">?</op:operator> <name><name pos:line="36" pos:column="80">TaskScheduler</name><op:operator pos:line="36" pos:column="93">.</op:operator><name pos:line="36" pos:column="94">Default</name></name> <op:operator pos:line="36" pos:column="102">:</op:operator> <name><name pos:line="36" pos:column="104">_taskManager</name><op:operator pos:line="36" pos:column="116">.</op:operator><name pos:line="36" pos:column="117">GlobalScheduler</name></name><op:operator pos:line="36" pos:column="132">)</op:operator></expr>;</return> }</block></function> }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="38" pos:column="9">private</specifier> <name pos:line="38" pos:column="17">TaskFactory</name></type> <name pos:line="38" pos:column="29">TaskFactory</name> <block pos:line="38" pos:column="41">{ <function><name pos:line="38" pos:column="43">get</name> <block pos:line="38" pos:column="47">{ <return pos:line="38" pos:column="49">return <expr><op:operator pos:line="38" pos:column="56">(</op:operator><name pos:line="38" pos:column="57">null</name> <op:operator pos:line="38" pos:column="62">==</op:operator> <name pos:line="38" pos:column="65">_taskManager</name> <op:operator pos:line="38" pos:column="78">?</op:operator> <name><name pos:line="38" pos:column="80">Task</name><op:operator pos:line="38" pos:column="84">.</op:operator><name pos:line="38" pos:column="85">Factory</name></name> <op:operator pos:line="38" pos:column="93">:</op:operator> <name><name pos:line="38" pos:column="95">_taskManager</name><op:operator pos:line="38" pos:column="107">.</op:operator><name pos:line="38" pos:column="108">GlobalFactory</name></name><op:operator pos:line="38" pos:column="121">)</op:operator></expr>;</return> }</block></function> }</block></decl></decl_stmt>

        <comment type="line" pos:line="40" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="41" pos:column="9">/// The current working set object</comment>
        <comment type="line" pos:line="42" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="43" pos:column="9">public</specifier> <name pos:line="43" pos:column="16">AbstractWorkingSet</name></type> <name pos:line="43" pos:column="35">CurrentWorkingSet</name> <block pos:line="43" pos:column="53">{ <function_decl><name pos:line="43" pos:column="55">get</name>;</function_decl> <function_decl><specifier pos:line="43" pos:column="60">private</specifier> <name pos:line="43" pos:column="68">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="45" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="46" pos:column="9">/// Raised when monitoring is started</comment>
        <comment type="line" pos:line="47" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="48" pos:column="9">public</specifier> <specifier pos:line="48" pos:column="16">event</specifier> <name pos:line="48" pos:column="22">EventHandler</name></type> <name pos:line="48" pos:column="35">MonitoringStarted</name></decl>;</decl_stmt>

        <comment type="line" pos:line="50" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="51" pos:column="9">/// Raised when monitoring is stopped</comment>
        <comment type="line" pos:line="52" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="53" pos:column="9">public</specifier> <specifier pos:line="53" pos:column="16">event</specifier> <name pos:line="53" pos:column="22">EventHandler</name></type> <name pos:line="53" pos:column="35">MonitoringStopped</name></decl>;</decl_stmt>

        <comment type="line" pos:line="55" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="56" pos:column="9">/// Raised when an update is started</comment>
        <comment type="line" pos:line="57" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="58" pos:column="9">public</specifier> <specifier pos:line="58" pos:column="16">event</specifier> <name pos:line="58" pos:column="22">EventHandler</name></type> <name pos:line="58" pos:column="35">UpdateStarted</name></decl>;</decl_stmt>

        <comment type="line" pos:line="60" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="61" pos:column="9">/// Raised when an update is complete</comment>
        <comment type="line" pos:line="62" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="63" pos:column="9">public</specifier> <specifier pos:line="63" pos:column="16">event</specifier> <name pos:line="63" pos:column="22">EventHandler</name></type> <name pos:line="63" pos:column="35">UpdateCompleted</name></decl>;</decl_stmt>

        <comment type="line" pos:line="65" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="66" pos:column="9">/// Raised when a file change is processed</comment>
        <comment type="line" pos:line="67" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="68" pos:column="9">public</specifier> <specifier pos:line="68" pos:column="16">event</specifier> <name><name pos:line="68" pos:column="22">EventHandler</name><argument_list pos:line="68" pos:column="34">&lt;<argument><name pos:line="68" pos:column="35">FileEventRaisedArgs</name></argument>&gt;</argument_list></name></type> <name pos:line="68" pos:column="56">FileProcessed</name></decl>;</decl_stmt>

        <comment type="line" pos:line="70" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="71" pos:column="9">/// If true, then &lt;see cref="MonitoringStarted"/&gt; has been raised and the service is currently monitoring the solution.</comment>
        <comment type="line" pos:line="72" pos:column="9">/// If false, then the service is not currently monitoring.</comment>
        <comment type="line" pos:line="73" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="74" pos:column="9">public</specifier> <name pos:line="74" pos:column="16">bool</name></type> <name pos:line="74" pos:column="21">IsMonitoring</name> <block pos:line="74" pos:column="34">{
            <function><name pos:line="75" pos:column="13">get</name> <block pos:line="75" pos:column="17">{ <return pos:line="75" pos:column="19">return <expr><name pos:line="75" pos:column="26">_isMonitoring</name></expr>;</return> }</block></function>
            <function><specifier pos:line="76" pos:column="13">private</specifier> <name pos:line="76" pos:column="21">set</name> <block pos:line="76" pos:column="25">{
                <if pos:line="77" pos:column="17">if<condition pos:line="77" pos:column="19">(<expr><name pos:line="77" pos:column="20">_isMonitoring</name> <op:operator pos:line="77" pos:column="34">!=</op:operator> <name pos:line="77" pos:column="37">value</name></expr>)</condition><then pos:line="77" pos:column="43"> <block pos:line="77" pos:column="44">{
                    <expr_stmt><expr><name pos:line="78" pos:column="21">_isMonitoring</name> <op:operator pos:line="78" pos:column="35">=</op:operator> <name pos:line="78" pos:column="37">value</name></expr>;</expr_stmt>
                    <if pos:line="79" pos:column="21">if<condition pos:line="79" pos:column="23">(<expr><name pos:line="79" pos:column="24">_isMonitoring</name></expr>)</condition><then pos:line="79" pos:column="38"> <block pos:line="79" pos:column="39">{
                        <expr_stmt><expr><call><name pos:line="80" pos:column="25">OnMonitoringStarted</name><argument_list pos:line="80" pos:column="44">(<argument><expr><op:operator pos:line="80" pos:column="45">new</op:operator> <call><name pos:line="80" pos:column="49">EventArgs</name><argument_list pos:line="80" pos:column="58">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else pos:line="81" pos:column="23">else <block pos:line="81" pos:column="28">{
                        <expr_stmt><expr><call><name pos:line="82" pos:column="25">OnMonitoringStopped</name><argument_list pos:line="82" pos:column="44">(<argument><expr><op:operator pos:line="82" pos:column="45">new</op:operator> <call><name pos:line="82" pos:column="49">EventArgs</name><argument_list pos:line="82" pos:column="58">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then></if>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="88" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="89" pos:column="9">/// If true, then &lt;see cref="UpdateStarted"/&gt; has been raised and the service is currently updating.</comment>
        <comment type="line" pos:line="90" pos:column="9">/// If false, then the service is not currently updating.</comment>
        <comment type="line" pos:line="91" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="92" pos:column="9">public</specifier> <name pos:line="92" pos:column="16">bool</name></type> <name pos:line="92" pos:column="21">IsUpdating</name> <block pos:line="92" pos:column="32">{
            <function><name pos:line="93" pos:column="13">get</name> <block pos:line="93" pos:column="17">{ <return pos:line="93" pos:column="19">return <expr><name pos:line="93" pos:column="26">_isUpdating</name></expr>;</return> }</block></function>
            <function><specifier pos:line="94" pos:column="13">private</specifier> <name pos:line="94" pos:column="21">set</name> <block pos:line="94" pos:column="25">{
                <if pos:line="95" pos:column="17">if<condition pos:line="95" pos:column="19">(<expr><name pos:line="95" pos:column="20">_isUpdating</name> <op:operator pos:line="95" pos:column="32">!=</op:operator> <name pos:line="95" pos:column="35">value</name></expr>)</condition><then pos:line="95" pos:column="41"> <block pos:line="95" pos:column="42">{
                    <expr_stmt><expr><name pos:line="96" pos:column="21">_isUpdating</name> <op:operator pos:line="96" pos:column="33">=</op:operator> <name pos:line="96" pos:column="35">value</name></expr>;</expr_stmt>
                    <if pos:line="97" pos:column="21">if<condition pos:line="97" pos:column="23">(<expr><name pos:line="97" pos:column="24">_isUpdating</name></expr>)</condition><then pos:line="97" pos:column="36"> <block pos:line="97" pos:column="37">{
                        <expr_stmt><expr><call><name pos:line="98" pos:column="25">OnUpdateStarted</name><argument_list pos:line="98" pos:column="40">(<argument><expr><op:operator pos:line="98" pos:column="41">new</op:operator> <call><name pos:line="98" pos:column="45">EventArgs</name><argument_list pos:line="98" pos:column="54">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else pos:line="99" pos:column="23">else <block pos:line="99" pos:column="28">{
                        <expr_stmt><expr><call><name pos:line="100" pos:column="25">OnUpdateCompleted</name><argument_list pos:line="100" pos:column="42">(<argument><expr><op:operator pos:line="100" pos:column="43">new</op:operator> <call><name pos:line="100" pos:column="47">EventArgs</name><argument_list pos:line="100" pos:column="56">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then></if>
            }</block></function>
        }</block></decl></decl_stmt>


        <comment type="line" pos:line="107" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="108" pos:column="9">/// Creates a new data service object</comment>
        <comment type="line" pos:line="109" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="110" pos:column="9">/// &lt;param name="serviceProvider"&gt;The service provider where this service is sited&lt;/param&gt;</comment>
        <constructor><specifier pos:line="111" pos:column="9">public</specifier> <name pos:line="111" pos:column="16">SrcMLDataService</name><parameter_list pos:line="111" pos:column="32">(<param><decl><type><name pos:line="111" pos:column="33">IServiceProvider</name></type> <name pos:line="111" pos:column="50">serviceProvider</name></decl></param>)</parameter_list> <block pos:line="111" pos:column="67">{
            <expr_stmt><expr><name pos:line="112" pos:column="13">_isMonitoring</name> <op:operator pos:line="112" pos:column="27">=</op:operator> <lit:literal type="boolean" pos:line="112" pos:column="29">false</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="113" pos:column="13">_isUpdating</name> <op:operator pos:line="113" pos:column="25">=</op:operator> <lit:literal type="boolean" pos:line="113" pos:column="27">false</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="114" pos:column="13">_serviceProvider</name> <op:operator pos:line="114" pos:column="30">=</op:operator> <name pos:line="114" pos:column="32">serviceProvider</name></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="116" pos:column="13">_workingSetFactories</name> <op:operator pos:line="116" pos:column="34">=</op:operator> <call><name><name pos:line="116" pos:column="36">serviceProvider</name><op:operator pos:line="116" pos:column="51">.</op:operator><name pos:line="116" pos:column="52">GetService</name></name><argument_list pos:line="116" pos:column="62">(<argument><expr><call><name pos:line="116" pos:column="63">typeof</name><argument_list pos:line="116" pos:column="69">(<argument><expr><name pos:line="116" pos:column="70">SWorkingSetRegistrarService</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="116" pos:column="100">as</op:operator> <name pos:line="116" pos:column="103">IWorkingSetRegistrarService</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="117" pos:column="13">_taskManager</name> <op:operator pos:line="117" pos:column="26">=</op:operator> <call><name><name pos:line="117" pos:column="28">_serviceProvider</name><op:operator pos:line="117" pos:column="44">.</op:operator><name pos:line="117" pos:column="45">GetService</name></name><argument_list pos:line="117" pos:column="55">(<argument><expr><call><name pos:line="117" pos:column="56">typeof</name><argument_list pos:line="117" pos:column="62">(<argument><expr><name pos:line="117" pos:column="63">STaskManagerService</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="117" pos:column="85">as</op:operator> <name pos:line="117" pos:column="88">ITaskManagerService</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="118" pos:column="13">_srcMLService</name> <op:operator pos:line="118" pos:column="27">=</op:operator> <call><name><name pos:line="118" pos:column="29">_serviceProvider</name><op:operator pos:line="118" pos:column="45">.</op:operator><name pos:line="118" pos:column="46">GetService</name></name><argument_list pos:line="118" pos:column="56">(<argument><expr><call><name pos:line="118" pos:column="57">typeof</name><argument_list pos:line="118" pos:column="63">(<argument><expr><name pos:line="118" pos:column="64">SSrcMLGlobalService</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="118" pos:column="86">as</op:operator> <name pos:line="118" pos:column="89">ISrcMLGlobalService</name></expr>;</expr_stmt>
            
            <if pos:line="120" pos:column="13">if<condition pos:line="120" pos:column="15">(<expr><name pos:line="120" pos:column="16">_srcMLService</name> <op:operator pos:line="120" pos:column="30">!=</op:operator> <name pos:line="120" pos:column="33">null</name></expr>)</condition><then pos:line="120" pos:column="38"> <block pos:line="120" pos:column="39">{
                <if pos:line="121" pos:column="17">if<condition pos:line="121" pos:column="19">(<expr><name><name pos:line="121" pos:column="20">_srcMLService</name><op:operator pos:line="121" pos:column="33">.</op:operator><name pos:line="121" pos:column="34">IsMonitoring</name></name></expr>)</condition><then pos:line="121" pos:column="47"> <block pos:line="121" pos:column="48">{
                    <expr_stmt><expr><call><name pos:line="122" pos:column="21">RespondToMonitoringStarted</name><argument_list pos:line="122" pos:column="47">(<argument><expr><name pos:line="122" pos:column="48">this</name></expr></argument>, <argument><expr><op:operator pos:line="122" pos:column="54">new</op:operator> <call><name pos:line="122" pos:column="58">EventArgs</name><argument_list pos:line="122" pos:column="67">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name pos:line="124" pos:column="17">SubscribeToEvents</name><argument_list pos:line="124" pos:column="34">()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></constructor>

        <comment type="line" pos:line="128" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="129" pos:column="9">/// Raises the file processed event</comment>
        <comment type="line" pos:line="130" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="131" pos:column="9">/// &lt;param name="e"&gt;The event arguments&lt;/param&gt;</comment>
        <function><type><specifier pos:line="132" pos:column="9">protected</specifier> <specifier pos:line="132" pos:column="19">virtual</specifier> <name pos:line="132" pos:column="27">void</name></type> <name pos:line="132" pos:column="32">OnFileProcessed</name><parameter_list pos:line="132" pos:column="47">(<param><decl><type><name pos:line="132" pos:column="48">FileEventRaisedArgs</name></type> <name pos:line="132" pos:column="68">e</name></decl></param>)</parameter_list> <block pos:line="132" pos:column="71">{
            <decl_stmt><decl><type><name><name pos:line="133" pos:column="13">EventHandler</name><argument_list pos:line="133" pos:column="25">&lt;<argument><name pos:line="133" pos:column="26">FileEventRaisedArgs</name></argument>&gt;</argument_list></name></type> <name pos:line="133" pos:column="47">handler</name> <init pos:line="133" pos:column="55">= <expr><name pos:line="133" pos:column="57">FileProcessed</name></expr></init></decl>;</decl_stmt>
            <if pos:line="134" pos:column="13">if<condition pos:line="134" pos:column="15">(<expr><name pos:line="134" pos:column="16">handler</name> <op:operator pos:line="134" pos:column="24">!=</op:operator> <name pos:line="134" pos:column="27">null</name></expr>)</condition><then pos:line="134" pos:column="32"> <block pos:line="134" pos:column="33">{
                <expr_stmt><expr><call><name pos:line="135" pos:column="17">handler</name><argument_list pos:line="135" pos:column="24">(<argument><expr><name pos:line="135" pos:column="25">this</name></expr></argument>, <argument><expr><name pos:line="135" pos:column="31">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="139" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="140" pos:column="9">/// Raises the update started event</comment>
        <comment type="line" pos:line="141" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="142" pos:column="9">/// &lt;param name="e"&gt;The event arguments&lt;/param&gt;</comment>
        <function><type><specifier pos:line="143" pos:column="9">protected</specifier> <specifier pos:line="143" pos:column="19">virtual</specifier> <name pos:line="143" pos:column="27">void</name></type> <name pos:line="143" pos:column="32">OnUpdateStarted</name><parameter_list pos:line="143" pos:column="47">(<param><decl><type><name pos:line="143" pos:column="48">EventArgs</name></type> <name pos:line="143" pos:column="58">e</name></decl></param>)</parameter_list> <block pos:line="143" pos:column="61">{
            <decl_stmt><decl><type><name pos:line="144" pos:column="13">EventHandler</name></type> <name pos:line="144" pos:column="26">handler</name> <init pos:line="144" pos:column="34">= <expr><name pos:line="144" pos:column="36">UpdateStarted</name></expr></init></decl>;</decl_stmt>
            <if pos:line="145" pos:column="13">if<condition pos:line="145" pos:column="15">(<expr><name pos:line="145" pos:column="16">null</name> <op:operator pos:line="145" pos:column="21">!=</op:operator> <name pos:line="145" pos:column="24">handler</name></expr>)</condition><then pos:line="145" pos:column="32"> <block pos:line="145" pos:column="33">{
                <expr_stmt><expr><call><name pos:line="146" pos:column="17">handler</name><argument_list pos:line="146" pos:column="24">(<argument><expr><name pos:line="146" pos:column="25">this</name></expr></argument>, <argument><expr><name pos:line="146" pos:column="31">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="150" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="151" pos:column="9">/// Raises the update completed event</comment>
        <comment type="line" pos:line="152" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="153" pos:column="9">/// &lt;param name="e"&gt;The event arguments&lt;/param&gt;</comment>
        <function><type><specifier pos:line="154" pos:column="9">protected</specifier> <specifier pos:line="154" pos:column="19">virtual</specifier> <name pos:line="154" pos:column="27">void</name></type> <name pos:line="154" pos:column="32">OnUpdateCompleted</name><parameter_list pos:line="154" pos:column="49">(<param><decl><type><name pos:line="154" pos:column="50">EventArgs</name></type> <name pos:line="154" pos:column="60">e</name></decl></param>)</parameter_list> <block pos:line="154" pos:column="63">{
            <decl_stmt><decl><type><name pos:line="155" pos:column="13">EventHandler</name></type> <name pos:line="155" pos:column="26">handler</name> <init pos:line="155" pos:column="34">= <expr><name pos:line="155" pos:column="36">UpdateCompleted</name></expr></init></decl>;</decl_stmt>
            <if pos:line="156" pos:column="13">if<condition pos:line="156" pos:column="15">(<expr><name pos:line="156" pos:column="16">null</name> <op:operator pos:line="156" pos:column="21">!=</op:operator> <name pos:line="156" pos:column="24">handler</name></expr>)</condition><then pos:line="156" pos:column="32"> <block pos:line="156" pos:column="33">{
                <expr_stmt><expr><call><name pos:line="157" pos:column="17">handler</name><argument_list pos:line="157" pos:column="24">(<argument><expr><name pos:line="157" pos:column="25">this</name></expr></argument>, <argument><expr><name pos:line="157" pos:column="31">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="161" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="162" pos:column="9">/// Raises the monitoring started event</comment>
        <comment type="line" pos:line="163" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="164" pos:column="9">/// &lt;param name="e"&gt;The event arguments&lt;/param&gt;</comment>
        <function><type><specifier pos:line="165" pos:column="9">protected</specifier> <specifier pos:line="165" pos:column="19">virtual</specifier> <name pos:line="165" pos:column="27">void</name></type> <name pos:line="165" pos:column="32">OnMonitoringStarted</name><parameter_list pos:line="165" pos:column="51">(<param><decl><type><name pos:line="165" pos:column="52">EventArgs</name></type> <name pos:line="165" pos:column="62">e</name></decl></param>)</parameter_list> <block pos:line="165" pos:column="65">{
            <decl_stmt><decl><type><name pos:line="166" pos:column="13">EventHandler</name></type> <name pos:line="166" pos:column="26">handler</name> <init pos:line="166" pos:column="34">= <expr><name pos:line="166" pos:column="36">MonitoringStarted</name></expr></init></decl>;</decl_stmt>
            <if pos:line="167" pos:column="13">if<condition pos:line="167" pos:column="15">(<expr><name pos:line="167" pos:column="16">handler</name> <op:operator pos:line="167" pos:column="24">!=</op:operator> <name pos:line="167" pos:column="27">null</name></expr>)</condition><then pos:line="167" pos:column="32"> <block pos:line="167" pos:column="33">{
                <expr_stmt><expr><call><name pos:line="168" pos:column="17">handler</name><argument_list pos:line="168" pos:column="24">(<argument><expr><name pos:line="168" pos:column="25">this</name></expr></argument>, <argument><expr><name pos:line="168" pos:column="31">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="172" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="173" pos:column="9">/// Raises the monitoring stopped event</comment>
        <comment type="line" pos:line="174" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="175" pos:column="9">/// &lt;param name="e"&gt;The event arguments&lt;/param&gt;</comment>
        <function><type><specifier pos:line="176" pos:column="9">protected</specifier> <specifier pos:line="176" pos:column="19">virtual</specifier> <name pos:line="176" pos:column="27">void</name></type> <name pos:line="176" pos:column="32">OnMonitoringStopped</name><parameter_list pos:line="176" pos:column="51">(<param><decl><type><name pos:line="176" pos:column="52">EventArgs</name></type> <name pos:line="176" pos:column="62">e</name></decl></param>)</parameter_list> <block pos:line="176" pos:column="65">{
            <decl_stmt><decl><type><name pos:line="177" pos:column="13">EventHandler</name></type> <name pos:line="177" pos:column="26">handler</name> <init pos:line="177" pos:column="34">= <expr><name pos:line="177" pos:column="36">MonitoringStopped</name></expr></init></decl>;</decl_stmt>
            <if pos:line="178" pos:column="13">if<condition pos:line="178" pos:column="15">(<expr><name pos:line="178" pos:column="16">handler</name> <op:operator pos:line="178" pos:column="24">!=</op:operator> <name pos:line="178" pos:column="27">null</name></expr>)</condition><then pos:line="178" pos:column="32"> <block pos:line="178" pos:column="33">{
                <expr_stmt><expr><call><name pos:line="179" pos:column="17">handler</name><argument_list pos:line="179" pos:column="24">(<argument><expr><name pos:line="179" pos:column="25">this</name></expr></argument>, <argument><expr><name pos:line="179" pos:column="31">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="183" pos:column="9">private</specifier> <name pos:line="183" pos:column="17">void</name></type> <name pos:line="183" pos:column="22">SubscribeToEvents</name><parameter_list pos:line="183" pos:column="39">()</parameter_list> <block pos:line="183" pos:column="42">{
            <expr_stmt><expr><name><name pos:line="184" pos:column="13">_srcMLService</name><op:operator pos:line="184" pos:column="26">.</op:operator><name pos:line="184" pos:column="27">MonitoringStarted</name></name> <op:operator pos:line="184" pos:column="45">+=</op:operator> <name pos:line="184" pos:column="48">RespondToMonitoringStarted</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="185" pos:column="13">_srcMLService</name><op:operator pos:line="185" pos:column="26">.</op:operator><name pos:line="185" pos:column="27">MonitoringStopped</name></name> <op:operator pos:line="185" pos:column="45">+=</op:operator> <name pos:line="185" pos:column="48">RespondToMonitoringStopped</name></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="188" pos:column="9">private</specifier> <name pos:line="188" pos:column="17">void</name></type> <name pos:line="188" pos:column="22">RespondToMonitoringStopped</name><parameter_list pos:line="188" pos:column="48">(<param><decl><type><name pos:line="188" pos:column="49">object</name></type> <name pos:line="188" pos:column="56">sender</name></decl></param>, <param><decl><type><name pos:line="188" pos:column="64">EventArgs</name></type> <name pos:line="188" pos:column="74">e</name></decl></param>)</parameter_list> <block pos:line="188" pos:column="77">{

            <try pos:line="190" pos:column="13">try <block pos:line="190" pos:column="17">{
                <if pos:line="191" pos:column="17">if<condition pos:line="191" pos:column="19">(<expr><name pos:line="191" pos:column="20">null</name> <op:operator pos:line="191" pos:column="25">!=</op:operator> <name pos:line="191" pos:column="28">CurrentWorkingSet</name></expr>)</condition><then pos:line="191" pos:column="46"> <block pos:line="191" pos:column="47">{
                    <expr_stmt><expr><name pos:line="192" pos:column="21">IsMonitoring</name> <op:operator pos:line="192" pos:column="34">=</op:operator> <lit:literal type="boolean" pos:line="192" pos:column="36">false</lit:literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="193" pos:column="21">CurrentWorkingSet</name><op:operator pos:line="193" pos:column="38">.</op:operator><name pos:line="193" pos:column="39">StopMonitoring</name></name><argument_list pos:line="193" pos:column="53">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="194" pos:column="21">_srcMonitor</name><op:operator pos:line="194" pos:column="32">.</op:operator><name pos:line="194" pos:column="33">StopMonitoring</name></name><argument_list pos:line="194" pos:column="47">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="195" pos:column="21">CurrentWorkingSet</name><op:operator pos:line="195" pos:column="38">.</op:operator><name pos:line="195" pos:column="39">Dispose</name></name><argument_list pos:line="195" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="196" pos:column="21">_srcMonitor</name><op:operator pos:line="196" pos:column="32">.</op:operator><name pos:line="196" pos:column="33">Dispose</name></name><argument_list pos:line="196" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="197" pos:column="21">CurrentWorkingSet</name> <op:operator pos:line="197" pos:column="39">=</op:operator> <name pos:line="197" pos:column="41">null</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="198" pos:column="21">CurrentDataArchive</name> <op:operator pos:line="198" pos:column="40">=</op:operator> <name pos:line="198" pos:column="42">null</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="199" pos:column="21">_srcMonitor</name> <op:operator pos:line="199" pos:column="33">=</op:operator> <name pos:line="199" pos:column="35">null</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block> <catch pos:line="201" pos:column="15">catch<parameter_list pos:line="201" pos:column="20">(<param><decl><type><name pos:line="201" pos:column="21">Exception</name></type> <name pos:line="201" pos:column="31">ex</name></decl></param>)</parameter_list> <block pos:line="201" pos:column="35">{
                <expr_stmt><expr><call><name><name pos:line="202" pos:column="17">SrcMLFileLogger</name><op:operator pos:line="202" pos:column="32">.</op:operator><name pos:line="202" pos:column="33">DefaultLogger</name><op:operator pos:line="202" pos:column="46">.</op:operator><name pos:line="202" pos:column="47">Error</name></name><argument_list pos:line="202" pos:column="52">(<argument><expr><call><name><name pos:line="202" pos:column="53">SrcMLExceptionFormatter</name><op:operator pos:line="202" pos:column="76">.</op:operator><name pos:line="202" pos:column="77">CreateMessage</name></name><argument_list pos:line="202" pos:column="90">(<argument><expr><name pos:line="202" pos:column="91">ex</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="202" pos:column="95">"Exception in SrcMLDataService.RespondToMonitoringStopped"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
            
        }</block></function>

        <function><type><specifier pos:line="207" pos:column="9">private</specifier> <name pos:line="207" pos:column="17">void</name></type> <name pos:line="207" pos:column="22">RespondToMonitoringStarted</name><parameter_list pos:line="207" pos:column="48">(<param><decl><type><name pos:line="207" pos:column="49">object</name></type> <name pos:line="207" pos:column="56">sender</name></decl></param>, <param><decl><type><name pos:line="207" pos:column="64">EventArgs</name></type> <name pos:line="207" pos:column="74">e</name></decl></param>)</parameter_list> <block pos:line="207" pos:column="77">{
            <expr_stmt><expr><name pos:line="208" pos:column="13">CurrentDataArchive</name> <op:operator pos:line="208" pos:column="32">=</op:operator> <op:operator pos:line="208" pos:column="34">new</op:operator> <call><name pos:line="208" pos:column="38">DataArchive</name><argument_list pos:line="208" pos:column="49">(<argument><expr><name><name pos:line="208" pos:column="50">_srcMLService</name><op:operator pos:line="208" pos:column="63">.</op:operator><name pos:line="208" pos:column="64">CurrentMonitor</name><op:operator pos:line="208" pos:column="78">.</op:operator><name pos:line="208" pos:column="79">MonitorStoragePath</name></name></expr></argument>, <argument><expr><name><name pos:line="208" pos:column="99">_srcMLService</name><op:operator pos:line="208" pos:column="112">.</op:operator><name pos:line="208" pos:column="113">CurrentSrcMLArchive</name></name></expr></argument>, <argument><expr><name pos:line="208" pos:column="134">Scheduler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="209" pos:column="13">CurrentDataArchive</name><op:operator pos:line="209" pos:column="31">.</op:operator><name pos:line="209" pos:column="32">Generator</name><op:operator pos:line="209" pos:column="41">.</op:operator><name pos:line="209" pos:column="42">ErrorLog</name></name> <op:operator pos:line="209" pos:column="51">=</op:operator> <name><name pos:line="209" pos:column="53">_srcMLService</name><op:operator pos:line="209" pos:column="66">.</op:operator><name pos:line="209" pos:column="67">CurrentSrcMLArchive</name><op:operator pos:line="209" pos:column="86">.</op:operator><name pos:line="209" pos:column="87">Generator</name><op:operator pos:line="209" pos:column="96">.</op:operator><name pos:line="209" pos:column="97">ErrorLog</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="210" pos:column="13">CurrentDataArchive</name><op:operator pos:line="210" pos:column="31">.</op:operator><name pos:line="210" pos:column="32">Generator</name><op:operator pos:line="210" pos:column="41">.</op:operator><name pos:line="210" pos:column="42">IsLoggingErrors</name></name> <op:operator pos:line="210" pos:column="58">=</op:operator> <lit:literal type="boolean" pos:line="210" pos:column="60">true</lit:literal></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="212" pos:column="13">_srcMonitor</name> <op:operator pos:line="212" pos:column="25">=</op:operator> <op:operator pos:line="212" pos:column="27">new</op:operator> <call><name><name pos:line="212" pos:column="31">ArchiveMonitor</name><argument_list pos:line="212" pos:column="45">&lt;<argument><name pos:line="212" pos:column="46">SrcMLArchive</name></argument>&gt;</argument_list></name><argument_list pos:line="212" pos:column="59">(<argument><expr><name pos:line="212" pos:column="60">Scheduler</name></expr></argument>, <argument><expr><name><name pos:line="212" pos:column="71">_srcMLService</name><op:operator pos:line="212" pos:column="84">.</op:operator><name pos:line="212" pos:column="85">CurrentMonitor</name><op:operator pos:line="212" pos:column="99">.</op:operator><name pos:line="212" pos:column="100">MonitorStoragePath</name></name></expr></argument>, <argument><expr><name><name pos:line="212" pos:column="120">_srcMLService</name><op:operator pos:line="212" pos:column="133">.</op:operator><name pos:line="212" pos:column="134">CurrentSrcMLArchive</name></name></expr></argument>, <argument><expr><name pos:line="212" pos:column="155">CurrentDataArchive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="213" pos:column="13">CurrentWorkingSet</name> <op:operator pos:line="213" pos:column="31">=</op:operator> <call><name><name pos:line="213" pos:column="33">_workingSetFactories</name><op:operator pos:line="213" pos:column="53">.</op:operator><name pos:line="213" pos:column="54">Default</name><op:operator pos:line="213" pos:column="61">.</op:operator><name pos:line="213" pos:column="62">CreateWorkingSet</name></name><argument_list pos:line="213" pos:column="78">(<argument><expr><name><name pos:line="213" pos:column="79">_srcMLService</name><op:operator pos:line="213" pos:column="92">.</op:operator><name pos:line="213" pos:column="93">CurrentMonitor</name><op:operator pos:line="213" pos:column="107">.</op:operator><name pos:line="213" pos:column="108">MonitorStoragePath</name></name></expr></argument>, <argument><expr><name pos:line="213" pos:column="128">CurrentDataArchive</name></expr></argument>, <argument><expr><name pos:line="213" pos:column="148">TaskFactory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <if pos:line="215" pos:column="13">if<condition pos:line="215" pos:column="15">(<expr><name><name pos:line="215" pos:column="16">_srcMLService</name><op:operator pos:line="215" pos:column="29">.</op:operator><name pos:line="215" pos:column="30">IsUpdating</name></name></expr>)</condition><then pos:line="215" pos:column="41"> <block pos:line="215" pos:column="42">{
                <expr_stmt><expr><name><name pos:line="216" pos:column="17">_srcMLService</name><op:operator pos:line="216" pos:column="30">.</op:operator><name pos:line="216" pos:column="31">UpdateArchivesCompleted</name></name> <op:operator pos:line="216" pos:column="55">+=</op:operator> <name pos:line="216" pos:column="58">GenerateDataAfterUpdate</name></expr>;</expr_stmt>
            }</block></then> <else pos:line="217" pos:column="15">else <block pos:line="217" pos:column="20">{
                <expr_stmt><expr><call><name pos:line="218" pos:column="17">GenerateDataAfterUpdate</name><argument_list pos:line="218" pos:column="40">(<argument><expr><name pos:line="218" pos:column="41">this</name></expr></argument>, <argument><expr><name pos:line="218" pos:column="47">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name pos:line="220" pos:column="13">IsMonitoring</name> <op:operator pos:line="220" pos:column="26">=</op:operator> <lit:literal type="boolean" pos:line="220" pos:column="28">true</lit:literal></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="223" pos:column="9">private</specifier> <name pos:line="223" pos:column="17">void</name></type> <name pos:line="223" pos:column="22">RespondToFileProcessed</name><parameter_list pos:line="223" pos:column="44">(<param><decl><type><name pos:line="223" pos:column="45">object</name></type> <name pos:line="223" pos:column="52">sender</name></decl></param>, <param><decl><type><name pos:line="223" pos:column="60">FileEventRaisedArgs</name></type> <name pos:line="223" pos:column="80">e</name></decl></param>)</parameter_list> <block pos:line="223" pos:column="83">{
            <expr_stmt><expr><call><name pos:line="224" pos:column="13">OnFileProcessed</name><argument_list pos:line="224" pos:column="28">(<argument><expr><name pos:line="224" pos:column="29">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="227" pos:column="9">private</specifier> <name pos:line="227" pos:column="17">void</name></type> <name pos:line="227" pos:column="22">GenerateDataAfterUpdate</name><parameter_list pos:line="227" pos:column="45">(<param><decl><type><name pos:line="227" pos:column="46">object</name></type> <name pos:line="227" pos:column="53">sender</name></decl></param>, <param><decl><type><name pos:line="227" pos:column="61">EventArgs</name></type> <name pos:line="227" pos:column="71">e</name></decl></param>)</parameter_list> <block pos:line="227" pos:column="74">{
            <expr_stmt><expr><name><name pos:line="228" pos:column="13">_srcMLService</name><op:operator pos:line="228" pos:column="26">.</op:operator><name pos:line="228" pos:column="27">UpdateArchivesCompleted</name></name> <op:operator pos:line="228" pos:column="51">-=</op:operator> <name pos:line="228" pos:column="54">GenerateDataAfterUpdate</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="229" pos:column="13">IsUpdating</name> <op:operator pos:line="229" pos:column="24">=</op:operator> <lit:literal type="boolean" pos:line="229" pos:column="26">true</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="230" pos:column="13">_srcMonitor</name><op:operator pos:line="230" pos:column="24">.</op:operator><name pos:line="230" pos:column="25">UpdateArchivesAsync</name></name><argument_list pos:line="230" pos:column="44">()</argument_list></call>
                       <op:operator pos:line="231" pos:column="24">.</op:operator><call><name pos:line="231" pos:column="25">ContinueWith</name><argument_list pos:line="231" pos:column="37">(<argument><expr><lambda><parameter_list pos:line="231" pos:column="38">(<param><decl><name pos:line="231" pos:column="39">t</name></decl></param>)</parameter_list> <op:operator pos:line="231" pos:column="42">=&gt;</op:operator> <block pos:line="231" pos:column="45">{
                           <expr_stmt><expr><call><name><name pos:line="232" pos:column="28">_srcMonitor</name><op:operator pos:line="232" pos:column="39">.</op:operator><name pos:line="232" pos:column="40">Save</name></name><argument_list pos:line="232" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><call><name><name pos:line="233" pos:column="28">CurrentWorkingSet</name><op:operator pos:line="233" pos:column="45">.</op:operator><name pos:line="233" pos:column="46">InitializeAsync</name></name><argument_list pos:line="233" pos:column="61">()</argument_list></call><op:operator pos:line="233" pos:column="63">.</op:operator><call><name pos:line="233" pos:column="64">Wait</name><argument_list pos:line="233" pos:column="68">()</argument_list></call></expr>;</expr_stmt>
                       }</block></lambda></expr></argument>, <argument><expr><name><name pos:line="234" pos:column="27">TaskContinuationOptions</name><op:operator pos:line="234" pos:column="50">.</op:operator><name pos:line="234" pos:column="51">OnlyOnRanToCompletion</name></name></expr></argument>)</argument_list></call>
                       <op:operator pos:line="235" pos:column="24">.</op:operator><call><name pos:line="235" pos:column="25">ContinueWith</name><argument_list pos:line="235" pos:column="37">(<argument><expr><lambda><parameter_list pos:line="235" pos:column="38">(<param><decl><name pos:line="235" pos:column="39">t</name></decl></param>)</parameter_list> <op:operator pos:line="235" pos:column="42">=&gt;</op:operator> <block pos:line="235" pos:column="45">{
                           <expr_stmt><expr><name pos:line="236" pos:column="28">IsUpdating</name> <op:operator pos:line="236" pos:column="39">=</op:operator> <lit:literal type="boolean" pos:line="236" pos:column="41">false</lit:literal></expr>;</expr_stmt>
                           <expr_stmt><expr><call><name><name pos:line="237" pos:column="28">_srcMonitor</name><op:operator pos:line="237" pos:column="39">.</op:operator><name pos:line="237" pos:column="40">StartMonitoring</name></name><argument_list pos:line="237" pos:column="55">()</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><call><name><name pos:line="238" pos:column="28">CurrentWorkingSet</name><op:operator pos:line="238" pos:column="45">.</op:operator><name pos:line="238" pos:column="46">StartMonitoring</name></name><argument_list pos:line="238" pos:column="61">()</argument_list></call></expr>;</expr_stmt>
                       }</block></lambda></expr></argument>, <argument><expr><name><name pos:line="239" pos:column="27">TaskContinuationOptions</name><op:operator pos:line="239" pos:column="50">.</op:operator><name pos:line="239" pos:column="51">OnlyOnRanToCompletion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
