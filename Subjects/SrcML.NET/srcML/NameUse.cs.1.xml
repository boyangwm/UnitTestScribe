<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data\NameUse.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2014 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *    Patrick Francis (ABB Group) - API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="13" pos:column="1">using <name pos:line="13" pos:column="7">System</name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Collections</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">Generic</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Collections</name><op:operator pos:line="15" pos:column="25">.</op:operator><name pos:line="15" pos:column="26">ObjectModel</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Linq</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Text</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Xml</name></name>;</using>

<namespace pos:line="20" pos:column="1">namespace <name><name pos:line="20" pos:column="11">ABB</name><op:operator pos:line="20" pos:column="14">.</op:operator><name pos:line="20" pos:column="15">SrcML</name><op:operator pos:line="20" pos:column="20">.</op:operator><name pos:line="20" pos:column="21">Data</name></name> <block pos:line="20" pos:column="26">{
    <comment type="line" pos:line="21" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="22" pos:column="5">/// Represents the generalized use of a name. This does not distinguish whether the name represents a type, or variable, or what.</comment>
    <comment type="line" pos:line="23" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="24" pos:column="5">public</specifier> class <name pos:line="24" pos:column="18">NameUse</name> <super pos:line="24" pos:column="26">: <name pos:line="24" pos:column="28">Expression</name></super> <block pos:line="24" pos:column="39">{
        <decl_stmt><decl><type><specifier pos:line="25" pos:column="9">private</specifier> <name pos:line="25" pos:column="17">NamePrefix</name></type> <name pos:line="25" pos:column="28">prefix</name></decl>;</decl_stmt>
        <comment type="line" pos:line="26" pos:column="9">/// &lt;summary&gt; The aliases and imports active at this use. &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="27" pos:column="9">private</specifier> <name><name pos:line="27" pos:column="17">List</name><argument_list pos:line="27" pos:column="21">&lt;<argument><name pos:line="27" pos:column="22">Statement</name></argument>&gt;</argument_list></name></type> <name pos:line="27" pos:column="33">aliases</name></decl>;</decl_stmt>
        
        <comment type="line" pos:line="29" pos:column="9">/// &lt;summary&gt; The XML name for NameUse &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="30" pos:column="9">public</specifier> <specifier pos:line="30" pos:column="16">new</specifier> <specifier pos:line="30" pos:column="20">const</specifier> <name pos:line="30" pos:column="26">string</name></type> <name pos:line="30" pos:column="33">XmlName</name> <init pos:line="30" pos:column="41">= <expr><lit:literal type="string" pos:line="30" pos:column="43">"n"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="32" pos:column="9">/// &lt;summary&gt; XML Name for &lt;see cref="Name" /&gt; &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="33" pos:column="9">public</specifier> <specifier pos:line="33" pos:column="16">const</specifier> <name pos:line="33" pos:column="22">string</name></type> <name pos:line="33" pos:column="29">XmlNameName</name> <init pos:line="33" pos:column="41">= <expr><lit:literal type="string" pos:line="33" pos:column="43">"val"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="35" pos:column="9">/// &lt;summary&gt; XML Name for &lt;see cref="Prefix" /&gt; &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="36" pos:column="9">public</specifier> <specifier pos:line="36" pos:column="16">const</specifier> <name pos:line="36" pos:column="22">string</name></type> <name pos:line="36" pos:column="29">XmlPrefixName</name> <init pos:line="36" pos:column="43">= <expr><lit:literal type="string" pos:line="36" pos:column="45">"Prefix"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="38" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="39" pos:column="9">/// The binary operators that indicate that the name on the right-hand side is a child of the left-hand side.</comment>
        <comment type="line" pos:line="40" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="41" pos:column="9">protected</specifier> <specifier pos:line="41" pos:column="19">static</specifier> <specifier pos:line="41" pos:column="26">readonly</specifier> <name pos:line="41" pos:column="35">string</name><index pos:line="41" pos:column="41">[]</index></type> <name pos:line="41" pos:column="44">NameInclusionOperators</name> <init pos:line="41" pos:column="67">= <expr><block pos:line="41" pos:column="69">{<expr><lit:literal type="string" pos:line="41" pos:column="70">"."</lit:literal></expr>, <expr><lit:literal type="string" pos:line="41" pos:column="75">"-&gt;"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="41" pos:column="81">"::"</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="43" pos:column="9">/// &lt;summary&gt; The name being used. &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="44" pos:column="9">public</specifier> <name pos:line="44" pos:column="16">string</name></type> <name pos:line="44" pos:column="23">Name</name> <block pos:line="44" pos:column="28">{ <function_decl><name pos:line="44" pos:column="30">get</name>;</function_decl> <function_decl><name pos:line="44" pos:column="35">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="46" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="47" pos:column="9">/// The prefix of the name. In a fully-qualified name like System.IO.File, the name is File and the prefix is System.IO.</comment>
        <comment type="line" pos:line="48" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="49" pos:column="9">public</specifier> <name pos:line="49" pos:column="16">NamePrefix</name></type> <name pos:line="49" pos:column="27">Prefix</name> <block pos:line="49" pos:column="34">{
            <function><name pos:line="50" pos:column="13">get</name> <block pos:line="50" pos:column="17">{ <return pos:line="50" pos:column="19">return <expr><name pos:line="50" pos:column="26">prefix</name></expr>;</return> }</block></function>
            <function><name pos:line="51" pos:column="13">set</name> <block pos:line="51" pos:column="17">{
                <expr_stmt><expr><name pos:line="52" pos:column="17">prefix</name> <op:operator pos:line="52" pos:column="24">=</op:operator> <name pos:line="52" pos:column="26">value</name></expr>;</expr_stmt>
                <if pos:line="53" pos:column="17">if<condition pos:line="53" pos:column="19">(<expr><name pos:line="53" pos:column="20">prefix</name> <op:operator pos:line="53" pos:column="27">!=</op:operator> <name pos:line="53" pos:column="30">null</name></expr>)</condition><then pos:line="53" pos:column="35"> <block pos:line="53" pos:column="36">{
                    <expr_stmt><expr><name><name pos:line="54" pos:column="21">prefix</name><op:operator pos:line="54" pos:column="27">.</op:operator><name pos:line="54" pos:column="28">ParentExpression</name></name> <op:operator pos:line="54" pos:column="45">=</op:operator> <name pos:line="54" pos:column="47">this</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="55" pos:column="21">prefix</name><op:operator pos:line="55" pos:column="27">.</op:operator><name pos:line="55" pos:column="28">ParentStatement</name></name> <op:operator pos:line="55" pos:column="44">=</op:operator> <name><name pos:line="55" pos:column="46">this</name><op:operator pos:line="55" pos:column="50">.</op:operator><name pos:line="55" pos:column="51">ParentStatement</name></name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="60" pos:column="9">/// &lt;summary&gt; The statement containing this expression. &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="61" pos:column="9">public</specifier> <specifier pos:line="61" pos:column="16">override</specifier> <name pos:line="61" pos:column="25">Statement</name></type> <name pos:line="61" pos:column="35">ParentStatement</name> <block pos:line="61" pos:column="51">{
            <function><name pos:line="62" pos:column="13">get</name> <block pos:line="62" pos:column="17">{ <return pos:line="62" pos:column="19">return <expr><name><name pos:line="62" pos:column="26">base</name><op:operator pos:line="62" pos:column="30">.</op:operator><name pos:line="62" pos:column="31">ParentStatement</name></name></expr>;</return> }</block></function>
            <function><name pos:line="63" pos:column="13">set</name> <block pos:line="63" pos:column="17">{
                <expr_stmt><expr><name><name pos:line="64" pos:column="17">base</name><op:operator pos:line="64" pos:column="21">.</op:operator><name pos:line="64" pos:column="22">ParentStatement</name></name> <op:operator pos:line="64" pos:column="38">=</op:operator> <name pos:line="64" pos:column="40">value</name></expr>;</expr_stmt>
                <if pos:line="65" pos:column="17">if<condition pos:line="65" pos:column="19">(<expr><name pos:line="65" pos:column="20">Prefix</name> <op:operator pos:line="65" pos:column="27">!=</op:operator> <name pos:line="65" pos:column="30">null</name></expr>)</condition><then pos:line="65" pos:column="35"> <block pos:line="65" pos:column="36">{ <expr_stmt><expr><name><name pos:line="65" pos:column="38">Prefix</name><op:operator pos:line="65" pos:column="44">.</op:operator><name pos:line="65" pos:column="45">ParentStatement</name></name> <op:operator pos:line="65" pos:column="61">=</op:operator> <name pos:line="65" pos:column="63">value</name></expr>;</expr_stmt> }</block></then></if>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="69" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="70" pos:column="9">/// Determines the set of aliases active at the site of this name use, sorted in reverse document order.</comment>
        <comment type="line" pos:line="71" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="72" pos:column="9">/// &lt;returns&gt;The AliasStatements occuring prior to this NameUse.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="73" pos:column="9">public</specifier> <name><name pos:line="73" pos:column="16">IEnumerable</name><argument_list pos:line="73" pos:column="27">&lt;<argument><name pos:line="73" pos:column="28">AliasStatement</name></argument>&gt;</argument_list></name></type> <name pos:line="73" pos:column="44">GetAliases</name><parameter_list pos:line="73" pos:column="54">()</parameter_list> <block pos:line="73" pos:column="57">{
            <if pos:line="74" pos:column="13">if<condition pos:line="74" pos:column="15">(<expr><name pos:line="74" pos:column="16">aliases</name> <op:operator pos:line="74" pos:column="24">==</op:operator> <name pos:line="74" pos:column="27">null</name></expr>)</condition><then pos:line="74" pos:column="32"> <block pos:line="74" pos:column="33">{
                <expr_stmt><expr><name pos:line="75" pos:column="17">aliases</name> <op:operator pos:line="75" pos:column="25">=</op:operator> <call><name pos:line="75" pos:column="27">DetermineAliases</name><argument_list pos:line="75" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <return pos:line="77" pos:column="13">return <expr><call><name><name pos:line="77" pos:column="20">aliases</name><op:operator pos:line="77" pos:column="27">.</op:operator><name><name pos:line="77" pos:column="28">OfType</name><argument_list pos:line="77" pos:column="34">&lt;<argument><name pos:line="77" pos:column="35">AliasStatement</name></argument>&gt;</argument_list></name></name><argument_list pos:line="77" pos:column="50">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="80" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="81" pos:column="9">/// Determines the set of imports active at the site of this name use, sorted in reverse document order.</comment>
        <comment type="line" pos:line="82" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="83" pos:column="9">/// &lt;returns&gt;The ImportStatements occuring prior to this NameUse.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="84" pos:column="9">public</specifier> <name><name pos:line="84" pos:column="16">IEnumerable</name><argument_list pos:line="84" pos:column="27">&lt;<argument><name pos:line="84" pos:column="28">ImportStatement</name></argument>&gt;</argument_list></name></type> <name pos:line="84" pos:column="45">GetImports</name><parameter_list pos:line="84" pos:column="55">()</parameter_list> <block pos:line="84" pos:column="58">{
            <if pos:line="85" pos:column="13">if<condition pos:line="85" pos:column="15">(<expr><name pos:line="85" pos:column="16">aliases</name> <op:operator pos:line="85" pos:column="24">==</op:operator> <name pos:line="85" pos:column="27">null</name></expr>)</condition><then pos:line="85" pos:column="32"> <block pos:line="85" pos:column="33">{
                <expr_stmt><expr><name pos:line="86" pos:column="17">aliases</name> <op:operator pos:line="86" pos:column="25">=</op:operator> <call><name pos:line="86" pos:column="27">DetermineAliases</name><argument_list pos:line="86" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <return pos:line="88" pos:column="13">return <expr><call><name><name pos:line="88" pos:column="20">aliases</name><op:operator pos:line="88" pos:column="27">.</op:operator><name><name pos:line="88" pos:column="28">OfType</name><argument_list pos:line="88" pos:column="34">&lt;<argument><name pos:line="88" pos:column="35">ImportStatement</name></argument>&gt;</argument_list></name></name><argument_list pos:line="88" pos:column="51">()</argument_list></call></expr>;</return>
        }</block></function>
        

        <comment type="line" pos:line="92" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="93" pos:column="9">/// Returns the child expressions, including the Prefix.</comment>
        <comment type="line" pos:line="94" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="95" pos:column="9">protected</specifier> <specifier pos:line="95" pos:column="19">override</specifier> <name><name pos:line="95" pos:column="28">IEnumerable</name><argument_list pos:line="95" pos:column="39">&lt;<argument><name pos:line="95" pos:column="40">AbstractProgramElement</name></argument>&gt;</argument_list></name></type> <name pos:line="95" pos:column="64">GetChildren</name><parameter_list pos:line="95" pos:column="75">()</parameter_list> <block pos:line="95" pos:column="78">{
            <if pos:line="96" pos:column="13">if<condition pos:line="96" pos:column="15">(<expr><name pos:line="96" pos:column="16">Prefix</name> <op:operator pos:line="96" pos:column="23">!=</op:operator> <name pos:line="96" pos:column="26">null</name></expr>)</condition><then pos:line="96" pos:column="31"> <block pos:line="96" pos:column="32">{
                <return pos:line="97" pos:column="17">return <expr><call><name><name pos:line="97" pos:column="24">Enumerable</name><op:operator pos:line="97" pos:column="34">.</op:operator><name pos:line="97" pos:column="35">Repeat</name></name><argument_list pos:line="97" pos:column="41">(<argument><expr><name pos:line="97" pos:column="42">Prefix</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="97" pos:column="50">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="97" pos:column="52">.</op:operator><call><name pos:line="97" pos:column="53">Concat</name><argument_list pos:line="97" pos:column="59">(<argument><expr><call><name><name pos:line="97" pos:column="60">base</name><op:operator pos:line="97" pos:column="64">.</op:operator><name pos:line="97" pos:column="65">GetChildren</name></name><argument_list pos:line="97" pos:column="76">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then> <else pos:line="98" pos:column="15">else <block pos:line="98" pos:column="20">{
                <return pos:line="99" pos:column="17">return <expr><call><name><name pos:line="99" pos:column="24">base</name><op:operator pos:line="99" pos:column="28">.</op:operator><name pos:line="99" pos:column="29">GetChildren</name></name><argument_list pos:line="99" pos:column="40">()</argument_list></call></expr>;</return>
            }</block></else></if>
        }</block></function>

        <comment type="line" pos:line="103" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="104" pos:column="9">/// Instance method for getting &lt;see cref="NameUse.XmlName"/&gt;</comment>
        <comment type="line" pos:line="105" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="106" pos:column="9">/// &lt;returns&gt;Returns the XML name for NameUse&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="107" pos:column="9">public</specifier> <specifier pos:line="107" pos:column="16">override</specifier> <name pos:line="107" pos:column="25">string</name></type> <name pos:line="107" pos:column="32">GetXmlName</name><parameter_list pos:line="107" pos:column="42">()</parameter_list> <block pos:line="107" pos:column="45">{ <return pos:line="107" pos:column="47">return <expr><name><name pos:line="107" pos:column="54">NameUse</name><op:operator pos:line="107" pos:column="61">.</op:operator><name pos:line="107" pos:column="62">XmlName</name></name></expr>;</return> }</block></function>

        <comment type="line" pos:line="109" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="110" pos:column="9">/// Processes the child of the current reader position into a child of this object.</comment>
        <comment type="line" pos:line="111" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="112" pos:column="9">/// &lt;param name="reader"&gt;The XML reader&lt;/param&gt;</comment>
        <function><type><specifier pos:line="113" pos:column="9">protected</specifier> <specifier pos:line="113" pos:column="19">override</specifier> <name pos:line="113" pos:column="28">void</name></type> <name pos:line="113" pos:column="33">ReadXmlChild</name><parameter_list pos:line="113" pos:column="45">(<param><decl><type><name pos:line="113" pos:column="46">XmlReader</name></type> <name pos:line="113" pos:column="56">reader</name></decl></param>)</parameter_list> <block pos:line="113" pos:column="64">{
            <if pos:line="114" pos:column="13">if<condition pos:line="114" pos:column="15">(<expr><name pos:line="114" pos:column="16">XmlPrefixName</name> <op:operator pos:line="114" pos:column="30">==</op:operator> <name><name pos:line="114" pos:column="33">reader</name><op:operator pos:line="114" pos:column="39">.</op:operator><name pos:line="114" pos:column="40">Name</name></name></expr>)</condition><then pos:line="114" pos:column="45"> <block pos:line="114" pos:column="46">{
                <expr_stmt><expr><name pos:line="115" pos:column="17">Prefix</name> <op:operator pos:line="115" pos:column="24">=</op:operator> <call><name><name pos:line="115" pos:column="26">XmlSerialization</name><op:operator pos:line="115" pos:column="42">.</op:operator><name pos:line="115" pos:column="43">ReadChildExpression</name></name><argument_list pos:line="115" pos:column="62">(<argument><expr><name pos:line="115" pos:column="63">reader</name></expr></argument>)</argument_list></call> <op:operator pos:line="115" pos:column="71">as</op:operator> <name pos:line="115" pos:column="74">NamePrefix</name></expr>;</expr_stmt>
            }</block></then> <else pos:line="116" pos:column="15">else <block pos:line="116" pos:column="20">{
                <expr_stmt><expr><call><name><name pos:line="117" pos:column="17">base</name><op:operator pos:line="117" pos:column="21">.</op:operator><name pos:line="117" pos:column="22">ReadXmlChild</name></name><argument_list pos:line="117" pos:column="34">(<argument><expr><name pos:line="117" pos:column="35">reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></function>

        <comment type="line" pos:line="121" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="122" pos:column="9">/// Read the XML attributes from the current &lt;paramref name="reader"/&gt; position</comment>
        <comment type="line" pos:line="123" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="124" pos:column="9">/// &lt;param name="reader"&gt;The XML reader&lt;/param&gt;</comment>
        <function><type><specifier pos:line="125" pos:column="9">protected</specifier> <specifier pos:line="125" pos:column="19">override</specifier> <name pos:line="125" pos:column="28">void</name></type> <name pos:line="125" pos:column="33">ReadXmlAttributes</name><parameter_list pos:line="125" pos:column="50">(<param><decl><type><name pos:line="125" pos:column="51">XmlReader</name></type> <name pos:line="125" pos:column="61">reader</name></decl></param>)</parameter_list> <block pos:line="125" pos:column="69">{
            <decl_stmt><decl><type><name pos:line="126" pos:column="13">string</name></type> <name pos:line="126" pos:column="20">attribute</name> <init pos:line="126" pos:column="30">= <expr><call><name><name pos:line="126" pos:column="32">reader</name><op:operator pos:line="126" pos:column="38">.</op:operator><name pos:line="126" pos:column="39">GetAttribute</name></name><argument_list pos:line="126" pos:column="51">(<argument><expr><name pos:line="126" pos:column="52">XmlNameName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="127" pos:column="13">if<condition pos:line="127" pos:column="15">(<expr><op:operator pos:line="127" pos:column="16">!</op:operator><call><name><name pos:line="127" pos:column="17">String</name><op:operator pos:line="127" pos:column="23">.</op:operator><name pos:line="127" pos:column="24">IsNullOrEmpty</name></name><argument_list pos:line="127" pos:column="37">(<argument><expr><name pos:line="127" pos:column="38">attribute</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="127" pos:column="49"> <block pos:line="127" pos:column="50">{
                <expr_stmt><expr><name pos:line="128" pos:column="17">Name</name> <op:operator pos:line="128" pos:column="22">=</op:operator> <name pos:line="128" pos:column="24">attribute</name></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name pos:line="130" pos:column="13">base</name><op:operator pos:line="130" pos:column="17">.</op:operator><name pos:line="130" pos:column="18">ReadXmlAttributes</name></name><argument_list pos:line="130" pos:column="35">(<argument><expr><name pos:line="130" pos:column="36">reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="133" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="134" pos:column="9">/// Writes the contents of this object to &lt;paramref name="writer"/&gt;.</comment>
        <comment type="line" pos:line="135" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="136" pos:column="9">/// &lt;param name="writer"&gt;The XML writer to write to&lt;/param&gt;</comment>
        <function><type><specifier pos:line="137" pos:column="9">protected</specifier> <specifier pos:line="137" pos:column="19">override</specifier> <name pos:line="137" pos:column="28">void</name></type> <name pos:line="137" pos:column="33">WriteXmlContents</name><parameter_list pos:line="137" pos:column="49">(<param><decl><type><name pos:line="137" pos:column="50">XmlWriter</name></type> <name pos:line="137" pos:column="60">writer</name></decl></param>)</parameter_list> <block pos:line="137" pos:column="68">{
            <if pos:line="138" pos:column="13">if<condition pos:line="138" pos:column="15">(<expr><name pos:line="138" pos:column="16">null</name> <op:operator pos:line="138" pos:column="21">!=</op:operator> <name pos:line="138" pos:column="24">Prefix</name></expr>)</condition><then pos:line="138" pos:column="31"> <block pos:line="138" pos:column="32">{
                <expr_stmt><expr><call><name><name pos:line="139" pos:column="17">XmlSerialization</name><op:operator pos:line="139" pos:column="33">.</op:operator><name pos:line="139" pos:column="34">WriteElement</name></name><argument_list pos:line="139" pos:column="46">(<argument><expr><name pos:line="139" pos:column="47">writer</name></expr></argument>, <argument><expr><name pos:line="139" pos:column="55">Prefix</name></expr></argument>, <argument><expr><name pos:line="139" pos:column="63">XmlPrefixName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name pos:line="141" pos:column="13">base</name><op:operator pos:line="141" pos:column="17">.</op:operator><name pos:line="141" pos:column="18">WriteXmlContents</name></name><argument_list pos:line="141" pos:column="34">(<argument><expr><name pos:line="141" pos:column="35">writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="144" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="145" pos:column="9">/// Writes XML attributes from this object to the XML writer</comment>
        <comment type="line" pos:line="146" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="147" pos:column="9">/// &lt;param name="writer"&gt;The XML writer&lt;/param&gt;</comment>
        <function><type><specifier pos:line="148" pos:column="9">protected</specifier> <specifier pos:line="148" pos:column="19">override</specifier> <name pos:line="148" pos:column="28">void</name></type> <name pos:line="148" pos:column="33">WriteXmlAttributes</name><parameter_list pos:line="148" pos:column="51">(<param><decl><type><name pos:line="148" pos:column="52">XmlWriter</name></type> <name pos:line="148" pos:column="62">writer</name></decl></param>)</parameter_list> <block pos:line="148" pos:column="70">{
            <expr_stmt><expr><call><name><name pos:line="149" pos:column="13">writer</name><op:operator pos:line="149" pos:column="19">.</op:operator><name pos:line="149" pos:column="20">WriteAttributeString</name></name><argument_list pos:line="149" pos:column="40">(<argument><expr><name pos:line="149" pos:column="41">XmlNameName</name></expr></argument>, <argument><expr><name pos:line="149" pos:column="54">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="150" pos:column="13">base</name><op:operator pos:line="150" pos:column="17">.</op:operator><name pos:line="150" pos:column="18">WriteXmlAttributes</name></name><argument_list pos:line="150" pos:column="36">(<argument><expr><name pos:line="150" pos:column="37">writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="153" pos:column="9">/// &lt;summary&gt; Returns a string representation of this object. &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="154" pos:column="9">public</specifier> <specifier pos:line="154" pos:column="16">override</specifier> <name pos:line="154" pos:column="25">string</name></type> <name pos:line="154" pos:column="32">ToString</name><parameter_list pos:line="154" pos:column="40">()</parameter_list> <block pos:line="154" pos:column="43">{
            <return pos:line="155" pos:column="13">return <expr><call><name><name pos:line="155" pos:column="20">string</name><op:operator pos:line="155" pos:column="26">.</op:operator><name pos:line="155" pos:column="27">Format</name></name><argument_list pos:line="155" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="155" pos:column="34">"{0}{1}"</lit:literal></expr></argument>, <argument><expr><name pos:line="155" pos:column="44">Prefix</name></expr></argument>, <argument><expr><name pos:line="155" pos:column="52">Name</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="158" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="159" pos:column="9">/// Finds definitions that match this name.</comment>
        <comment type="line" pos:line="160" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="161" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="162" pos:column="9">public</specifier> <specifier pos:line="162" pos:column="16">virtual</specifier> <name><name pos:line="162" pos:column="24">IEnumerable</name><argument_list pos:line="162" pos:column="35">&lt;<argument><name pos:line="162" pos:column="36">INamedEntity</name></argument>&gt;</argument_list></name></type> <name pos:line="162" pos:column="50">FindMatches</name><parameter_list pos:line="162" pos:column="61">()</parameter_list> <block pos:line="162" pos:column="64">{
            <if pos:line="163" pos:column="13">if<condition pos:line="163" pos:column="15">(<expr><name pos:line="163" pos:column="16">ParentStatement</name> <op:operator pos:line="163" pos:column="32">==</op:operator> <name pos:line="163" pos:column="35">null</name></expr>)</condition><then pos:line="163" pos:column="40"> <block pos:line="163" pos:column="41">{
                <throw pos:line="164" pos:column="17">throw <expr><op:operator pos:line="164" pos:column="23">new</op:operator> <call><name pos:line="164" pos:column="27">InvalidOperationException</name><argument_list pos:line="164" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="164" pos:column="53">"ParentStatement is null"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <comment type="line" pos:line="167" pos:column="13">//handle keywords</comment>
            <if pos:line="168" pos:column="13">if<condition pos:line="168" pos:column="15">(<expr><name pos:line="168" pos:column="16">Name</name> <op:operator pos:line="168" pos:column="21">==</op:operator> <lit:literal type="string" pos:line="168" pos:column="24">"this"</lit:literal> <op:operator pos:line="168" pos:column="31">||</op:operator>
               <op:operator pos:line="169" pos:column="16">(</op:operator><name pos:line="169" pos:column="17">Name</name> <op:operator pos:line="169" pos:column="22">==</op:operator> <lit:literal type="string" pos:line="169" pos:column="25">"base"</lit:literal> <op:operator pos:line="169" pos:column="32">&amp;&amp;</op:operator> <name pos:line="169" pos:column="35">ProgrammingLanguage</name> <op:operator pos:line="169" pos:column="55">==</op:operator> <name><name pos:line="169" pos:column="58">Language</name><op:operator pos:line="169" pos:column="66">.</op:operator><name pos:line="169" pos:column="67">CSharp</name></name><op:operator pos:line="169" pos:column="73">)</op:operator> <op:operator pos:line="169" pos:column="75">||</op:operator>
               <op:operator pos:line="170" pos:column="16">(</op:operator><name pos:line="170" pos:column="17">Name</name> <op:operator pos:line="170" pos:column="22">==</op:operator> <lit:literal type="string" pos:line="170" pos:column="25">"super"</lit:literal> <op:operator pos:line="170" pos:column="33">&amp;&amp;</op:operator> <name pos:line="170" pos:column="36">ProgrammingLanguage</name> <op:operator pos:line="170" pos:column="56">==</op:operator> <name><name pos:line="170" pos:column="59">Language</name><op:operator pos:line="170" pos:column="67">.</op:operator><name pos:line="170" pos:column="68">Java</name></name><op:operator pos:line="170" pos:column="72">)</op:operator></expr>)</condition><then pos:line="170" pos:column="74"> <block pos:line="170" pos:column="75">{
                <return pos:line="171" pos:column="17">return <expr><call><name><name pos:line="171" pos:column="24">TypeDefinition</name><op:operator pos:line="171" pos:column="38">.</op:operator><name pos:line="171" pos:column="39">GetTypeForKeyword</name></name><argument_list pos:line="171" pos:column="56">(<argument><expr><name pos:line="171" pos:column="57">this</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>

            <comment type="line" pos:line="174" pos:column="13">//We don't want to match a NameUse to a MethodDefinition, so exclude them in all the queries</comment>

            <comment type="line" pos:line="176" pos:column="13">//If there's a prefix, resolve that and search under results</comment>
            <if pos:line="177" pos:column="13">if<condition pos:line="177" pos:column="15">(<expr><name pos:line="177" pos:column="16">Prefix</name> <op:operator pos:line="177" pos:column="23">!=</op:operator> <name pos:line="177" pos:column="26">null</name></expr>)</condition><then pos:line="177" pos:column="31"> <block pos:line="177" pos:column="32">{
                <return pos:line="178" pos:column="17">return <expr><call><name><name pos:line="178" pos:column="24">Prefix</name><op:operator pos:line="178" pos:column="30">.</op:operator><name pos:line="178" pos:column="31">FindMatches</name></name><argument_list pos:line="178" pos:column="42">()</argument_list></call><op:operator pos:line="178" pos:column="44">.</op:operator><call><name pos:line="178" pos:column="45">SelectMany</name><argument_list pos:line="178" pos:column="55">(<argument><expr><lambda><name pos:line="178" pos:column="56">ns</name> <op:operator pos:line="178" pos:column="59">=&gt;</op:operator> <call><name><name pos:line="178" pos:column="62">ns</name><op:operator pos:line="178" pos:column="64">.</op:operator><name><name pos:line="178" pos:column="65">GetNamedChildren</name><argument_list pos:line="178" pos:column="81">&lt;<argument><name pos:line="178" pos:column="82">INamedEntity</name></argument>&gt;</argument_list></name></name><argument_list pos:line="178" pos:column="95">(<argument><expr><name><name pos:line="178" pos:column="96">this</name><op:operator pos:line="178" pos:column="100">.</op:operator><name pos:line="178" pos:column="101">Name</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="178" pos:column="107">.</op:operator><call><name pos:line="178" pos:column="108">Where</name><argument_list pos:line="178" pos:column="113">(<argument><expr><lambda><name pos:line="178" pos:column="114">e</name> <op:operator pos:line="178" pos:column="116">=&gt;</op:operator> <op:operator pos:line="178" pos:column="119">!</op:operator><op:operator pos:line="178" pos:column="120">(</op:operator><name pos:line="178" pos:column="121">e</name> <op:operator pos:line="178" pos:column="123">is</op:operator> <name pos:line="178" pos:column="126">MethodDefinition</name><op:operator pos:line="178" pos:column="142">)</op:operator></lambda></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>

            <comment type="line" pos:line="181" pos:column="13">//If there's a calling expression, match and search under results</comment>
            <decl_stmt><decl><type><name pos:line="182" pos:column="13">var</name></type> <name pos:line="182" pos:column="17">callingScopes</name> <init pos:line="182" pos:column="31">= <expr><call><name pos:line="182" pos:column="33">GetCallingScope</name><argument_list pos:line="182" pos:column="48">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="183" pos:column="13">if<condition pos:line="183" pos:column="15">(<expr><name pos:line="183" pos:column="16">callingScopes</name> <op:operator pos:line="183" pos:column="30">!=</op:operator> <name pos:line="183" pos:column="33">null</name></expr>)</condition><then pos:line="183" pos:column="38"> <block pos:line="183" pos:column="39">{
                <decl_stmt><decl><type><name><name pos:line="184" pos:column="17">IEnumerable</name><argument_list pos:line="184" pos:column="28">&lt;<argument><name pos:line="184" pos:column="29">INamedEntity</name></argument>&gt;</argument_list></name></type> <name pos:line="184" pos:column="43">matches</name> <init pos:line="184" pos:column="51">= <expr><call><name><name pos:line="184" pos:column="53">Enumerable</name><op:operator pos:line="184" pos:column="63">.</op:operator><name><name pos:line="184" pos:column="64">Empty</name><argument_list pos:line="184" pos:column="69">&lt;<argument><name pos:line="184" pos:column="70">INamedEntity</name></argument>&gt;</argument_list></name></name><argument_list pos:line="184" pos:column="83">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <foreach pos:line="185" pos:column="17">foreach(<init><decl><type><name pos:line="185" pos:column="25">var</name></type> <name pos:line="185" pos:column="29">scope</name> <range pos:line="185" pos:column="35">in <expr><name pos:line="185" pos:column="38">callingScopes</name></expr></range></decl></init>) <block pos:line="185" pos:column="53">{
                    <decl_stmt><decl><type><name pos:line="186" pos:column="21">var</name></type> <name pos:line="186" pos:column="25">localMatches</name> <init pos:line="186" pos:column="38">= <expr><call><name><name pos:line="186" pos:column="40">scope</name><op:operator pos:line="186" pos:column="45">.</op:operator><name pos:line="186" pos:column="46">GetNamedChildren</name></name><argument_list pos:line="186" pos:column="62">(<argument><expr><name><name pos:line="186" pos:column="63">this</name><op:operator pos:line="186" pos:column="67">.</op:operator><name pos:line="186" pos:column="68">Name</name></name></expr></argument>)</argument_list></call><op:operator pos:line="186" pos:column="73">.</op:operator><call><name pos:line="186" pos:column="74">Where</name><argument_list pos:line="186" pos:column="79">(<argument><expr><lambda><name pos:line="186" pos:column="80">e</name> <op:operator pos:line="186" pos:column="82">=&gt;</op:operator> <op:operator pos:line="186" pos:column="85">!</op:operator><op:operator pos:line="186" pos:column="86">(</op:operator><name pos:line="186" pos:column="87">e</name> <op:operator pos:line="186" pos:column="89">is</op:operator> <name pos:line="186" pos:column="92">MethodDefinition</name><op:operator pos:line="186" pos:column="108">)</op:operator></lambda></expr></argument>)</argument_list></call><op:operator pos:line="186" pos:column="110">.</op:operator><call><name pos:line="186" pos:column="111">ToList</name><argument_list pos:line="186" pos:column="117">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="187" pos:column="21">var</name></type> <name pos:line="187" pos:column="25">callingType</name> <init pos:line="187" pos:column="37">= <expr><name pos:line="187" pos:column="39">scope</name> <op:operator pos:line="187" pos:column="45">as</op:operator> <name pos:line="187" pos:column="48">TypeDefinition</name></expr></init></decl>;</decl_stmt>
                    <if pos:line="188" pos:column="21">if<condition pos:line="188" pos:column="23">(<expr><op:operator pos:line="188" pos:column="24">!</op:operator><call><name><name pos:line="188" pos:column="25">localMatches</name><op:operator pos:line="188" pos:column="37">.</op:operator><name pos:line="188" pos:column="38">Any</name></name><argument_list pos:line="188" pos:column="41">()</argument_list></call> <op:operator pos:line="188" pos:column="44">&amp;&amp;</op:operator> <name pos:line="188" pos:column="47">callingType</name> <op:operator pos:line="188" pos:column="59">!=</op:operator> <name pos:line="188" pos:column="62">null</name></expr>)</condition><then pos:line="188" pos:column="67"> <block pos:line="188" pos:column="68">{
                        <comment type="line" pos:line="189" pos:column="25">//also search under the base types of the calling scope</comment>
                        <expr_stmt><expr><name pos:line="190" pos:column="25">matches</name> <op:operator pos:line="190" pos:column="33">=</op:operator> <call><name><name pos:line="190" pos:column="35">matches</name><op:operator pos:line="190" pos:column="42">.</op:operator><name pos:line="190" pos:column="43">Concat</name></name><argument_list pos:line="190" pos:column="49">(<argument><expr><call><name><name pos:line="190" pos:column="50">callingType</name><op:operator pos:line="190" pos:column="61">.</op:operator><name><name pos:line="190" pos:column="62">SearchParentTypes</name><argument_list pos:line="190" pos:column="79">&lt;<argument><name pos:line="190" pos:column="80">INamedEntity</name></argument>&gt;</argument_list></name></name><argument_list pos:line="190" pos:column="93">(<argument><expr><name><name pos:line="190" pos:column="94">this</name><op:operator pos:line="190" pos:column="98">.</op:operator><name pos:line="190" pos:column="99">Name</name></name></expr></argument>, <argument><expr><lambda><name pos:line="190" pos:column="105">e</name> <op:operator pos:line="190" pos:column="107">=&gt;</op:operator> <op:operator pos:line="190" pos:column="110">!</op:operator><op:operator pos:line="190" pos:column="111">(</op:operator><name pos:line="190" pos:column="112">e</name> <op:operator pos:line="190" pos:column="114">is</op:operator> <name pos:line="190" pos:column="117">MethodDefinition</name><op:operator pos:line="190" pos:column="133">)</op:operator></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else pos:line="191" pos:column="23">else <block pos:line="191" pos:column="28">{
                        <expr_stmt><expr><name pos:line="192" pos:column="25">matches</name> <op:operator pos:line="192" pos:column="33">=</op:operator> <call><name><name pos:line="192" pos:column="35">matches</name><op:operator pos:line="192" pos:column="42">.</op:operator><name pos:line="192" pos:column="43">Concat</name></name><argument_list pos:line="192" pos:column="49">(<argument><expr><name pos:line="192" pos:column="50">localMatches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></foreach>
                <return pos:line="195" pos:column="17">return <expr><name pos:line="195" pos:column="24">matches</name></expr>;</return>
            }</block></then></if>

            <comment type="line" pos:line="198" pos:column="13">//search enclosing scopes and base types</comment>
            <foreach pos:line="199" pos:column="13">foreach(<init><decl><type><name pos:line="199" pos:column="21">var</name></type> <name pos:line="199" pos:column="25">scope</name> <range pos:line="199" pos:column="31">in <expr><call><name><name pos:line="199" pos:column="34">ParentStatement</name><op:operator pos:line="199" pos:column="49">.</op:operator><name pos:line="199" pos:column="50">GetAncestors</name></name><argument_list pos:line="199" pos:column="62">()</argument_list></call></expr></range></decl></init>) <block pos:line="199" pos:column="66">{
                <decl_stmt><decl><type><name pos:line="200" pos:column="17">var</name></type> <name pos:line="200" pos:column="21">matches</name> <init pos:line="200" pos:column="29">= <expr><call><name><name pos:line="200" pos:column="31">scope</name><op:operator pos:line="200" pos:column="36">.</op:operator><name pos:line="200" pos:column="37">GetNamedChildren</name></name><argument_list pos:line="200" pos:column="53">(<argument><expr><name pos:line="200" pos:column="54">this</name></expr></argument>)</argument_list></call><op:operator pos:line="200" pos:column="59">.</op:operator><call><name pos:line="200" pos:column="60">Where</name><argument_list pos:line="200" pos:column="65">(<argument><expr><lambda><name pos:line="200" pos:column="66">e</name> <op:operator pos:line="200" pos:column="68">=&gt;</op:operator> <op:operator pos:line="200" pos:column="71">!</op:operator><op:operator pos:line="200" pos:column="72">(</op:operator><name pos:line="200" pos:column="73">e</name> <op:operator pos:line="200" pos:column="75">is</op:operator> <name pos:line="200" pos:column="78">MethodDefinition</name><op:operator pos:line="200" pos:column="94">)</op:operator></lambda></expr></argument>)</argument_list></call><op:operator pos:line="200" pos:column="96">.</op:operator><call><name pos:line="200" pos:column="97">ToList</name><argument_list pos:line="200" pos:column="103">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="201" pos:column="17">if<condition pos:line="201" pos:column="19">(<expr><call><name><name pos:line="201" pos:column="20">matches</name><op:operator pos:line="201" pos:column="27">.</op:operator><name pos:line="201" pos:column="28">Any</name></name><argument_list pos:line="201" pos:column="31">()</argument_list></call></expr>)</condition><then pos:line="201" pos:column="34"> <block pos:line="201" pos:column="35">{
                    <return pos:line="202" pos:column="21">return <expr><name pos:line="202" pos:column="28">matches</name></expr>;</return>
                }</block></then></if>
                <decl_stmt><decl><type><name pos:line="204" pos:column="17">var</name></type> <name pos:line="204" pos:column="21">expMatches</name> <init pos:line="204" pos:column="32">= <expr><op:operator pos:line="204" pos:column="34">(</op:operator><linq><from pos:line="204" pos:column="35">from <expr><name pos:line="204" pos:column="40">decl</name></expr> <in pos:line="204" pos:column="45">in <expr><call><name><name pos:line="204" pos:column="48">scope</name><op:operator pos:line="204" pos:column="53">.</op:operator><name pos:line="204" pos:column="54">GetExpressions</name></name><argument_list pos:line="204" pos:column="68">()</argument_list></call><op:operator pos:line="204" pos:column="70">.</op:operator><call><name pos:line="204" pos:column="71">SelectMany</name><argument_list pos:line="204" pos:column="81">(<argument><expr><lambda><name pos:line="204" pos:column="82">e</name> <op:operator pos:line="204" pos:column="84">=&gt;</op:operator> <call><name><name pos:line="204" pos:column="87">e</name><op:operator pos:line="204" pos:column="88">.</op:operator><name><name pos:line="204" pos:column="89">GetDescendantsAndSelf</name><argument_list pos:line="204" pos:column="110">&lt;<argument><name pos:line="204" pos:column="111">VariableDeclaration</name></argument>&gt;</argument_list></name></name><argument_list pos:line="204" pos:column="131">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></in></from>
                                  <where pos:line="205" pos:column="35">where <expr><name><name pos:line="205" pos:column="41">decl</name><op:operator pos:line="205" pos:column="45">.</op:operator><name pos:line="205" pos:column="46">Name</name></name> <op:operator pos:line="205" pos:column="51">==</op:operator> <name><name pos:line="205" pos:column="54">this</name><op:operator pos:line="205" pos:column="58">.</op:operator><name pos:line="205" pos:column="59">Name</name></name></expr></where>
                                  <select pos:line="206" pos:column="35">select <expr><name pos:line="206" pos:column="42">decl</name></expr></select></linq><op:operator pos:line="206" pos:column="46">)</op:operator><op:operator pos:line="206" pos:column="47">.</op:operator><call><name pos:line="206" pos:column="48">ToList</name><argument_list pos:line="206" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="207" pos:column="17">if<condition pos:line="207" pos:column="19">(<expr><call><name><name pos:line="207" pos:column="20">expMatches</name><op:operator pos:line="207" pos:column="30">.</op:operator><name pos:line="207" pos:column="31">Any</name></name><argument_list pos:line="207" pos:column="34">()</argument_list></call></expr>)</condition><then pos:line="207" pos:column="37"> <block pos:line="207" pos:column="38">{
                    <return pos:line="208" pos:column="21">return <expr><name pos:line="208" pos:column="28">expMatches</name></expr>;</return>
                }</block></then></if>
                <decl_stmt><decl><type><name pos:line="210" pos:column="17">var</name></type> <name pos:line="210" pos:column="21">typeDef</name> <init pos:line="210" pos:column="29">= <expr><name pos:line="210" pos:column="31">scope</name> <op:operator pos:line="210" pos:column="37">as</op:operator> <name pos:line="210" pos:column="40">TypeDefinition</name></expr></init></decl>;</decl_stmt>
                <if pos:line="211" pos:column="17">if<condition pos:line="211" pos:column="19">(<expr><name pos:line="211" pos:column="20">typeDef</name> <op:operator pos:line="211" pos:column="28">!=</op:operator> <name pos:line="211" pos:column="31">null</name></expr>)</condition><then pos:line="211" pos:column="36"> <block pos:line="211" pos:column="37">{
                    <decl_stmt><decl><type><name pos:line="212" pos:column="21">var</name></type> <name pos:line="212" pos:column="25">baseTypeMatches</name> <init pos:line="212" pos:column="41">= <expr><call><name><name pos:line="212" pos:column="43">typeDef</name><op:operator pos:line="212" pos:column="50">.</op:operator><name><name pos:line="212" pos:column="51">SearchParentTypes</name><argument_list pos:line="212" pos:column="68">&lt;<argument><name pos:line="212" pos:column="69">INamedEntity</name></argument>&gt;</argument_list></name></name><argument_list pos:line="212" pos:column="82">(<argument><expr><name><name pos:line="212" pos:column="83">this</name><op:operator pos:line="212" pos:column="87">.</op:operator><name pos:line="212" pos:column="88">Name</name></name></expr></argument>, <argument><expr><lambda><name pos:line="212" pos:column="94">e</name> <op:operator pos:line="212" pos:column="96">=&gt;</op:operator> <op:operator pos:line="212" pos:column="99">!</op:operator><op:operator pos:line="212" pos:column="100">(</op:operator><name pos:line="212" pos:column="101">e</name> <op:operator pos:line="212" pos:column="103">is</op:operator> <name pos:line="212" pos:column="106">MethodDefinition</name><op:operator pos:line="212" pos:column="122">)</op:operator></lambda></expr></argument>)</argument_list></call><op:operator pos:line="212" pos:column="124">.</op:operator><call><name pos:line="212" pos:column="125">ToList</name><argument_list pos:line="212" pos:column="131">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="213" pos:column="21">if<condition pos:line="213" pos:column="23">(<expr><call><name><name pos:line="213" pos:column="24">baseTypeMatches</name><op:operator pos:line="213" pos:column="39">.</op:operator><name pos:line="213" pos:column="40">Any</name></name><argument_list pos:line="213" pos:column="43">()</argument_list></call></expr>)</condition><then pos:line="213" pos:column="46"> <block pos:line="213" pos:column="47">{
                        <return pos:line="214" pos:column="25">return <expr><name pos:line="214" pos:column="32">baseTypeMatches</name></expr>;</return>
                    }</block></then></if>
                }</block></then></if>
            }</block></foreach>

            <comment type="line" pos:line="219" pos:column="13">//search if there is an alias for this name</comment>
            <foreach pos:line="220" pos:column="13">foreach(<init><decl><type><name pos:line="220" pos:column="21">var</name></type> <name pos:line="220" pos:column="25">alias</name> <range pos:line="220" pos:column="31">in <expr><call><name pos:line="220" pos:column="34">GetAliases</name><argument_list pos:line="220" pos:column="44">()</argument_list></call></expr></range></decl></init>) <block pos:line="220" pos:column="48">{
                <if pos:line="221" pos:column="17">if<condition pos:line="221" pos:column="19">(<expr><name><name pos:line="221" pos:column="20">alias</name><op:operator pos:line="221" pos:column="25">.</op:operator><name pos:line="221" pos:column="26">AliasName</name></name> <op:operator pos:line="221" pos:column="36">==</op:operator> <name><name pos:line="221" pos:column="39">this</name><op:operator pos:line="221" pos:column="43">.</op:operator><name pos:line="221" pos:column="44">Name</name></name></expr>)</condition><then pos:line="221" pos:column="49"> <block pos:line="221" pos:column="50">{
                    <decl_stmt><decl><type><name pos:line="222" pos:column="21">var</name></type> <name pos:line="222" pos:column="25">targetName</name> <init pos:line="222" pos:column="36">= <expr><name><name pos:line="222" pos:column="38">alias</name><op:operator pos:line="222" pos:column="43">.</op:operator><name pos:line="222" pos:column="44">Target</name></name> <op:operator pos:line="222" pos:column="51">as</op:operator> <name pos:line="222" pos:column="54">NameUse</name></expr></init></decl>;</decl_stmt>
                    <if pos:line="223" pos:column="21">if<condition pos:line="223" pos:column="23">(<expr><name pos:line="223" pos:column="24">targetName</name> <op:operator pos:line="223" pos:column="35">==</op:operator> <name pos:line="223" pos:column="38">null</name></expr>)</condition><then pos:line="223" pos:column="43"> <block pos:line="223" pos:column="44">{
                        <comment type="line" pos:line="224" pos:column="25">//Target is not a NameUse, probably an Expression</comment>
                        <expr_stmt><expr><name pos:line="225" pos:column="25">targetName</name> <op:operator pos:line="225" pos:column="36">=</op:operator> <call><name><name pos:line="225" pos:column="38">alias</name><op:operator pos:line="225" pos:column="43">.</op:operator><name pos:line="225" pos:column="44">Target</name><op:operator pos:line="225" pos:column="50">.</op:operator><name><name pos:line="225" pos:column="51">GetDescendantsAndSelf</name><argument_list pos:line="225" pos:column="72">&lt;<argument><name pos:line="225" pos:column="73">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="225" pos:column="81">()</argument_list></call><op:operator pos:line="225" pos:column="83">.</op:operator><call><name pos:line="225" pos:column="84">LastOrDefault</name><argument_list pos:line="225" pos:column="97">()</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <if pos:line="227" pos:column="21">if<condition pos:line="227" pos:column="23">(<expr><name pos:line="227" pos:column="24">targetName</name> <op:operator pos:line="227" pos:column="35">!=</op:operator> <name pos:line="227" pos:column="38">null</name></expr>)</condition><then pos:line="227" pos:column="43"> <block pos:line="227" pos:column="44">{
                        <return pos:line="228" pos:column="25">return <expr><call><name><name pos:line="228" pos:column="32">targetName</name><op:operator pos:line="228" pos:column="42">.</op:operator><name pos:line="228" pos:column="43">FindMatches</name></name><argument_list pos:line="228" pos:column="54">()</argument_list></call></expr>;</return>
                    }</block></then></if>
                }</block></then></if>
            }</block></foreach>

            <comment type="line" pos:line="233" pos:column="13">//we didn't find it locally, search under imported namespaces</comment>
            <return pos:line="234" pos:column="13">return <expr><op:operator pos:line="234" pos:column="20">(</op:operator><linq><from pos:line="234" pos:column="21">from <expr><name pos:line="234" pos:column="26">import</name></expr> <in pos:line="234" pos:column="33">in <expr><call><name pos:line="234" pos:column="36">GetImports</name><argument_list pos:line="234" pos:column="46">()</argument_list></call></expr></in></from>
                    <from pos:line="235" pos:column="21">from <expr><name pos:line="235" pos:column="26">match</name></expr> <in pos:line="235" pos:column="32">in <expr><call><name><name pos:line="235" pos:column="35">import</name><op:operator pos:line="235" pos:column="41">.</op:operator><name pos:line="235" pos:column="42">ImportedNamespace</name><op:operator pos:line="235" pos:column="59">.</op:operator><name><name pos:line="235" pos:column="60">GetDescendantsAndSelf</name><argument_list pos:line="235" pos:column="81">&lt;<argument><name pos:line="235" pos:column="82">NameUse</name></argument>&gt;</argument_list></name></name><argument_list pos:line="235" pos:column="90">()</argument_list></call><op:operator pos:line="235" pos:column="92">.</op:operator><call><name pos:line="235" pos:column="93">Last</name><argument_list pos:line="235" pos:column="97">()</argument_list></call><op:operator pos:line="235" pos:column="99">.</op:operator><call><name pos:line="235" pos:column="100">FindMatches</name><argument_list pos:line="235" pos:column="111">()</argument_list></call><op:operator pos:line="235" pos:column="113">.</op:operator><call><name><name pos:line="235" pos:column="114">OfType</name><argument_list pos:line="235" pos:column="120">&lt;<argument><name pos:line="235" pos:column="121">NamedScope</name></argument>&gt;</argument_list></name><argument_list pos:line="235" pos:column="132">()</argument_list></call></expr></in></from>
                    <from pos:line="236" pos:column="21">from <expr><name pos:line="236" pos:column="26">child</name></expr> <in pos:line="236" pos:column="32">in <expr><call><name><name pos:line="236" pos:column="35">match</name><op:operator pos:line="236" pos:column="40">.</op:operator><name pos:line="236" pos:column="41">GetNamedChildren</name></name><argument_list pos:line="236" pos:column="57">(<argument><expr><name><name pos:line="236" pos:column="58">this</name><op:operator pos:line="236" pos:column="62">.</op:operator><name pos:line="236" pos:column="63">Name</name></name></expr></argument>)</argument_list></call></expr></in></from>
                    <where pos:line="237" pos:column="21">where <expr><op:operator pos:line="237" pos:column="27">!</op:operator><op:operator pos:line="237" pos:column="28">(</op:operator><name pos:line="237" pos:column="29">child</name> <op:operator pos:line="237" pos:column="35">is</op:operator> <name pos:line="237" pos:column="38">MethodDefinition</name><op:operator pos:line="237" pos:column="54">)</op:operator></expr></where>
                    <select pos:line="238" pos:column="21">select <expr><name pos:line="238" pos:column="28">child</name></expr></select></linq><op:operator pos:line="238" pos:column="33">)</op:operator></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="241" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="242" pos:column="9">/// Determines the possible types of this expression.</comment>
        <comment type="line" pos:line="243" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="244" pos:column="9">/// &lt;returns&gt;An enumerable of the matching TypeDefinitions for this expression's possible types.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="245" pos:column="9">public</specifier> <specifier pos:line="245" pos:column="16">override</specifier> <name><name pos:line="245" pos:column="25">IEnumerable</name><argument_list pos:line="245" pos:column="36">&lt;<argument><name pos:line="245" pos:column="37">TypeDefinition</name></argument>&gt;</argument_list></name></type> <name pos:line="245" pos:column="53">ResolveType</name><parameter_list pos:line="245" pos:column="64">()</parameter_list> <block pos:line="245" pos:column="67">{
            <comment type="line" pos:line="246" pos:column="13">//TODO: add type to INamedEntity interface, and update this method to retrieve it from the results of FindMatches()</comment>

            <decl_stmt><decl><type><name pos:line="248" pos:column="13">var</name></type> <name pos:line="248" pos:column="17">matches</name> <init pos:line="248" pos:column="25">= <expr><call><name pos:line="248" pos:column="27">FindMatches</name><argument_list pos:line="248" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="249" pos:column="13">foreach(<init><decl><type><name pos:line="249" pos:column="21">var</name></type> <name pos:line="249" pos:column="25">match</name> <range pos:line="249" pos:column="31">in <expr><name pos:line="249" pos:column="34">matches</name></expr></range></decl></init>) <block pos:line="249" pos:column="43">{
                <if pos:line="250" pos:column="17">if<condition pos:line="250" pos:column="19">(<expr><name pos:line="250" pos:column="20">match</name> <op:operator pos:line="250" pos:column="26">is</op:operator> <name pos:line="250" pos:column="29">TypeDefinition</name></expr>)</condition><then pos:line="250" pos:column="44"> <block pos:line="250" pos:column="45">{
                    <return><specifier pos:line="251" pos:column="21">yield</specifier> return <expr><name pos:line="251" pos:column="34">match</name> <op:operator pos:line="251" pos:column="40">as</op:operator> <name pos:line="251" pos:column="43">TypeDefinition</name></expr>;</return>
                }</block></then> <else pos:line="252" pos:column="19">else <if pos:line="252" pos:column="24">if<condition pos:line="252" pos:column="26">(<expr><name pos:line="252" pos:column="27">match</name> <op:operator pos:line="252" pos:column="33">is</op:operator> <name pos:line="252" pos:column="36">PropertyDefinition</name></expr>)</condition><then pos:line="252" pos:column="55"> <block pos:line="252" pos:column="56">{
                    <foreach pos:line="253" pos:column="21">foreach(<init><decl><type><name pos:line="253" pos:column="29">var</name></type> <name pos:line="253" pos:column="33">retType</name> <range pos:line="253" pos:column="41">in <expr><op:operator pos:line="253" pos:column="44">(</op:operator><op:operator pos:line="253" pos:column="45">(</op:operator><name pos:line="253" pos:column="46">PropertyDefinition</name><op:operator pos:line="253" pos:column="64">)</op:operator><name pos:line="253" pos:column="65">match</name><op:operator pos:line="253" pos:column="70">)</op:operator><op:operator pos:line="253" pos:column="71">.</op:operator><call><name><name pos:line="253" pos:column="72">ReturnType</name><op:operator pos:line="253" pos:column="82">.</op:operator><name pos:line="253" pos:column="83">ResolveType</name></name><argument_list pos:line="253" pos:column="94">()</argument_list></call></expr></range></decl></init>) <block pos:line="253" pos:column="98">{
                        <return><specifier pos:line="254" pos:column="25">yield</specifier> return <expr><name pos:line="254" pos:column="38">retType</name></expr>;</return>
                    }</block></foreach>
                }</block></then> <else pos:line="256" pos:column="19">else <if pos:line="256" pos:column="24">if<condition pos:line="256" pos:column="26">(<expr><name pos:line="256" pos:column="27">match</name> <op:operator pos:line="256" pos:column="33">is</op:operator> <name pos:line="256" pos:column="36">MethodDefinition</name></expr>)</condition><then pos:line="256" pos:column="53"> <block pos:line="256" pos:column="54">{
                    <foreach pos:line="257" pos:column="21">foreach(<init><decl><type><name pos:line="257" pos:column="29">var</name></type> <name pos:line="257" pos:column="33">retType</name> <range pos:line="257" pos:column="41">in <expr><op:operator pos:line="257" pos:column="44">(</op:operator><op:operator pos:line="257" pos:column="45">(</op:operator><name pos:line="257" pos:column="46">MethodDefinition</name><op:operator pos:line="257" pos:column="62">)</op:operator><name pos:line="257" pos:column="63">match</name><op:operator pos:line="257" pos:column="68">)</op:operator><op:operator pos:line="257" pos:column="69">.</op:operator><call><name><name pos:line="257" pos:column="70">ReturnType</name><op:operator pos:line="257" pos:column="80">.</op:operator><name pos:line="257" pos:column="81">ResolveType</name></name><argument_list pos:line="257" pos:column="92">()</argument_list></call></expr></range></decl></init>) <block pos:line="257" pos:column="96">{
                        <return><specifier pos:line="258" pos:column="25">yield</specifier> return <expr><name pos:line="258" pos:column="38">retType</name></expr>;</return>
                    }</block></foreach>
                }</block></then> <else pos:line="260" pos:column="19">else <if pos:line="260" pos:column="24">if<condition pos:line="260" pos:column="26">(<expr><name pos:line="260" pos:column="27">match</name> <op:operator pos:line="260" pos:column="33">is</op:operator> <name pos:line="260" pos:column="36">VariableDeclaration</name></expr>)</condition><then pos:line="260" pos:column="56"> <block pos:line="260" pos:column="57">{
                    <foreach pos:line="261" pos:column="21">foreach(<init><decl><type><name pos:line="261" pos:column="29">var</name></type> <name pos:line="261" pos:column="33">retType</name> <range pos:line="261" pos:column="41">in <expr><op:operator pos:line="261" pos:column="44">(</op:operator><op:operator pos:line="261" pos:column="45">(</op:operator><name pos:line="261" pos:column="46">VariableDeclaration</name><op:operator pos:line="261" pos:column="65">)</op:operator><name pos:line="261" pos:column="66">match</name><op:operator pos:line="261" pos:column="71">)</op:operator><op:operator pos:line="261" pos:column="72">.</op:operator><call><name><name pos:line="261" pos:column="73">VariableType</name><op:operator pos:line="261" pos:column="85">.</op:operator><name pos:line="261" pos:column="86">ResolveType</name></name><argument_list pos:line="261" pos:column="97">()</argument_list></call></expr></range></decl></init>) <block pos:line="261" pos:column="101">{
                        <return><specifier pos:line="262" pos:column="25">yield</specifier> return <expr><name pos:line="262" pos:column="38">retType</name></expr>;</return>
                    }</block></foreach>
                }</block></then></if></else></if></else></if></else></if> 
            }</block></foreach>
        }</block></function>

        <comment type="line" pos:line="268" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="269" pos:column="9">/// If there is a calling expession preceding this NameUse, this method resolves it</comment>
        <comment type="line" pos:line="270" pos:column="9">/// to determine the scope(s) in which to search for the use's name.</comment>
        <comment type="line" pos:line="271" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="272" pos:column="9">/// &lt;returns&gt;An enumerable of the named entities that may contain the name being used in this NameUse.</comment>
        <comment type="line" pos:line="273" pos:column="9">/// Returns null if there is no suitable calling expression.</comment>
        <comment type="line" pos:line="274" pos:column="9">/// Returns an empty enumerable if there is a calling expression, but no matches are found.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="275" pos:column="9">protected</specifier> <name><name pos:line="275" pos:column="19">IEnumerable</name><argument_list pos:line="275" pos:column="30">&lt;<argument><name pos:line="275" pos:column="31">NamedScope</name></argument>&gt;</argument_list></name></type> <name pos:line="275" pos:column="43">GetCallingScope</name><parameter_list pos:line="275" pos:column="58">()</parameter_list> <block pos:line="275" pos:column="61">{
            <decl_stmt><decl><type><name pos:line="276" pos:column="13">var</name></type> <name pos:line="276" pos:column="17">siblings</name> <init pos:line="276" pos:column="26">= <expr><call><name pos:line="276" pos:column="28">GetSiblingsBeforeSelf</name><argument_list pos:line="276" pos:column="49">()</argument_list></call><op:operator pos:line="276" pos:column="51">.</op:operator><call><name pos:line="276" pos:column="52">ToList</name><argument_list pos:line="276" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="277" pos:column="13">var</name></type> <name pos:line="277" pos:column="17">priorOp</name> <init pos:line="277" pos:column="25">= <expr><call><name><name pos:line="277" pos:column="27">siblings</name><op:operator pos:line="277" pos:column="35">.</op:operator><name pos:line="277" pos:column="36">LastOrDefault</name></name><argument_list pos:line="277" pos:column="49">()</argument_list></call> <op:operator pos:line="277" pos:column="52">as</op:operator> <name pos:line="277" pos:column="55">OperatorUse</name></expr></init></decl>;</decl_stmt>
            <if pos:line="278" pos:column="13">if<condition pos:line="278" pos:column="15">(<expr><name pos:line="278" pos:column="16">priorOp</name> <op:operator pos:line="278" pos:column="24">==</op:operator> <name pos:line="278" pos:column="27">null</name> <op:operator pos:line="278" pos:column="32">||</op:operator> <op:operator pos:line="278" pos:column="35">!</op:operator><call><name><name pos:line="278" pos:column="36">NameInclusionOperators</name><op:operator pos:line="278" pos:column="58">.</op:operator><name pos:line="278" pos:column="59">Contains</name></name><argument_list pos:line="278" pos:column="67">(<argument><expr><name><name pos:line="278" pos:column="68">priorOp</name><op:operator pos:line="278" pos:column="75">.</op:operator><name pos:line="278" pos:column="76">Text</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="278" pos:column="82"> <block pos:line="278" pos:column="83">{
                <return pos:line="279" pos:column="17">return <expr><name pos:line="279" pos:column="24">null</name></expr>;</return>
            }</block></then></if>

            <if pos:line="282" pos:column="13">if<condition pos:line="282" pos:column="15">(<expr><name><name pos:line="282" pos:column="16">siblings</name><op:operator pos:line="282" pos:column="24">.</op:operator><name pos:line="282" pos:column="25">Count</name></name> <op:operator pos:line="282" pos:column="31">==</op:operator> <lit:literal type="number" pos:line="282" pos:column="34">1</lit:literal></expr>)</condition><then pos:line="282" pos:column="36"> <block pos:line="282" pos:column="37">{
                <comment type="line" pos:line="283" pos:column="17">//This use is preceded by a name inclusion operator and nothing else</comment>
                <comment type="line" pos:line="284" pos:column="17">//this is probably only possible in C++: ::MyGlobalClass</comment>
                <comment type="line" pos:line="285" pos:column="17">//just return the global namespace</comment>
                <return pos:line="286" pos:column="17">return <expr><call><name><name pos:line="286" pos:column="24">ParentStatement</name><op:operator pos:line="286" pos:column="39">.</op:operator><name><name pos:line="286" pos:column="40">GetAncestorsAndSelf</name><argument_list pos:line="286" pos:column="59">&lt;<argument><name pos:line="286" pos:column="60">NamespaceDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="286" pos:column="80">()</argument_list></call><op:operator pos:line="286" pos:column="82">.</op:operator><call><name pos:line="286" pos:column="83">Where</name><argument_list pos:line="286" pos:column="88">(<argument><expr><lambda><name pos:line="286" pos:column="89">n</name> <op:operator pos:line="286" pos:column="91">=&gt;</op:operator> <name><name pos:line="286" pos:column="94">n</name><op:operator pos:line="286" pos:column="95">.</op:operator><name pos:line="286" pos:column="96">IsGlobal</name></name></lambda></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="289" pos:column="13">var</name></type> <name pos:line="289" pos:column="17">callingExp</name> <init pos:line="289" pos:column="28">= <expr><name><name pos:line="289" pos:column="30">siblings</name><index pos:line="289" pos:column="38">[<expr><name><name pos:line="289" pos:column="39">siblings</name><op:operator pos:line="289" pos:column="47">.</op:operator><name pos:line="289" pos:column="48">Count</name></name> <op:operator pos:line="289" pos:column="54">-</op:operator> <lit:literal type="number" pos:line="289" pos:column="56">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="289" pos:column="60">//second-to-last sibling</comment>
            <decl_stmt><decl><type><name pos:line="290" pos:column="13">var</name></type> <name pos:line="290" pos:column="17">callingName</name> <init pos:line="290" pos:column="29">= <expr><name pos:line="290" pos:column="31">callingExp</name> <op:operator pos:line="290" pos:column="42">as</op:operator> <name pos:line="290" pos:column="45">NameUse</name></expr></init></decl>;</decl_stmt>
            <if pos:line="291" pos:column="13">if<condition pos:line="291" pos:column="15">(<expr><name pos:line="291" pos:column="16">callingName</name> <op:operator pos:line="291" pos:column="28">==</op:operator> <name pos:line="291" pos:column="31">null</name></expr>)</condition><then pos:line="291" pos:column="36"> <block pos:line="291" pos:column="37">{
                <comment type="line" pos:line="292" pos:column="17">//Not a NameUse, probably an Expression</comment>
                <return pos:line="293" pos:column="17">return <expr><call><name><name pos:line="293" pos:column="24">callingExp</name><op:operator pos:line="293" pos:column="34">.</op:operator><name pos:line="293" pos:column="35">ResolveType</name></name><argument_list pos:line="293" pos:column="46">()</argument_list></call></expr>;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="296" pos:column="13">var</name></type> <name pos:line="296" pos:column="17">matches</name> <init pos:line="296" pos:column="25">= <expr><call><name><name pos:line="296" pos:column="27">callingName</name><op:operator pos:line="296" pos:column="38">.</op:operator><name pos:line="296" pos:column="39">FindMatches</name></name><argument_list pos:line="296" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="297" pos:column="13">var</name></type> <name pos:line="297" pos:column="17">scopes</name> <init pos:line="297" pos:column="24">= <expr><op:operator pos:line="297" pos:column="26">new</op:operator> <call><name><name pos:line="297" pos:column="30">List</name><argument_list pos:line="297" pos:column="34">&lt;<argument><name pos:line="297" pos:column="35">NamedScope</name></argument>&gt;</argument_list></name><argument_list pos:line="297" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="298" pos:column="13">foreach(<init><decl><type><name pos:line="298" pos:column="21">var</name></type> <name pos:line="298" pos:column="25">match</name> <range pos:line="298" pos:column="31">in <expr><name pos:line="298" pos:column="34">matches</name></expr></range></decl></init>) <block pos:line="298" pos:column="43">{
                <comment type="line" pos:line="299" pos:column="17">//TODO: update this to use polymorphism</comment>
                <if pos:line="300" pos:column="17">if<condition pos:line="300" pos:column="19">(<expr><name pos:line="300" pos:column="20">match</name> <op:operator pos:line="300" pos:column="26">is</op:operator> <name pos:line="300" pos:column="29">MethodDefinition</name></expr>)</condition><then pos:line="300" pos:column="46"> <block pos:line="300" pos:column="47">{
                    <decl_stmt><decl><type><name pos:line="301" pos:column="21">var</name></type> <name pos:line="301" pos:column="25">method</name> <init pos:line="301" pos:column="32">= <expr><name pos:line="301" pos:column="34">match</name> <op:operator pos:line="301" pos:column="40">as</op:operator> <name pos:line="301" pos:column="43">MethodDefinition</name></expr></init></decl>;</decl_stmt>
                    <if pos:line="302" pos:column="21">if<condition pos:line="302" pos:column="23">(<expr><name><name pos:line="302" pos:column="24">method</name><op:operator pos:line="302" pos:column="30">.</op:operator><name pos:line="302" pos:column="31">ReturnType</name></name> <op:operator pos:line="302" pos:column="42">!=</op:operator> <name pos:line="302" pos:column="45">null</name></expr>)</condition><then pos:line="302" pos:column="50"> <block pos:line="302" pos:column="51">{
                        <expr_stmt><expr><call><name><name pos:line="303" pos:column="25">scopes</name><op:operator pos:line="303" pos:column="31">.</op:operator><name pos:line="303" pos:column="32">AddRange</name></name><argument_list pos:line="303" pos:column="40">(<argument><expr><op:operator pos:line="303" pos:column="41">(</op:operator><op:operator pos:line="303" pos:column="42">(</op:operator><name pos:line="303" pos:column="43">MethodDefinition</name><op:operator pos:line="303" pos:column="59">)</op:operator><name pos:line="303" pos:column="60">match</name><op:operator pos:line="303" pos:column="65">)</op:operator><op:operator pos:line="303" pos:column="66">.</op:operator><call><name><name pos:line="303" pos:column="67">ReturnType</name><op:operator pos:line="303" pos:column="77">.</op:operator><name pos:line="303" pos:column="78">ResolveType</name></name><argument_list pos:line="303" pos:column="89">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else pos:line="304" pos:column="23">else <if pos:line="304" pos:column="28">if<condition pos:line="304" pos:column="30">(<expr><name><name pos:line="304" pos:column="31">method</name><op:operator pos:line="304" pos:column="37">.</op:operator><name pos:line="304" pos:column="38">IsConstructor</name></name></expr>)</condition><then pos:line="304" pos:column="52"> <block pos:line="304" pos:column="53">{
                        <comment type="line" pos:line="305" pos:column="25">//create the constructor return type</comment>
                        <decl_stmt><decl><type><name pos:line="306" pos:column="25">var</name></type> <name pos:line="306" pos:column="29">tempTypeUse</name> <init pos:line="306" pos:column="41">= <expr><op:operator pos:line="306" pos:column="43">new</op:operator> <call><name pos:line="306" pos:column="47">TypeUse</name><argument_list pos:line="306" pos:column="54">()</argument_list></call> <block pos:line="306" pos:column="57">{
                            <expr><name pos:line="307" pos:column="29">Name</name> <op:operator pos:line="307" pos:column="34">=</op:operator> <name><name pos:line="307" pos:column="36">method</name><op:operator pos:line="307" pos:column="42">.</op:operator><name pos:line="307" pos:column="43">Name</name></name></expr>,
                            <expr><name pos:line="308" pos:column="29">ParentStatement</name> <op:operator pos:line="308" pos:column="45">=</op:operator> <name><name pos:line="308" pos:column="47">method</name><op:operator pos:line="308" pos:column="53">.</op:operator><name pos:line="308" pos:column="54">ParentStatement</name></name></expr>,
                            <expr><name pos:line="309" pos:column="29">Location</name> <op:operator pos:line="309" pos:column="38">=</op:operator> <name><name pos:line="309" pos:column="40">method</name><op:operator pos:line="309" pos:column="46">.</op:operator><name pos:line="309" pos:column="47">PrimaryLocation</name></name></expr>
                        }</block></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name pos:line="311" pos:column="25">scopes</name><op:operator pos:line="311" pos:column="31">.</op:operator><name pos:line="311" pos:column="32">AddRange</name></name><argument_list pos:line="311" pos:column="40">(<argument><expr><call><name><name pos:line="311" pos:column="41">tempTypeUse</name><op:operator pos:line="311" pos:column="52">.</op:operator><name pos:line="311" pos:column="53">ResolveType</name></name><argument_list pos:line="311" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if></else></if> 
                }</block></then> <else pos:line="313" pos:column="19">else <if pos:line="313" pos:column="24">if<condition pos:line="313" pos:column="26">(<expr><name pos:line="313" pos:column="27">match</name> <op:operator pos:line="313" pos:column="33">is</op:operator> <name pos:line="313" pos:column="36">PropertyDefinition</name></expr>)</condition><then pos:line="313" pos:column="55"> <block pos:line="313" pos:column="56">{
                    <expr_stmt><expr><call><name><name pos:line="314" pos:column="21">scopes</name><op:operator pos:line="314" pos:column="27">.</op:operator><name pos:line="314" pos:column="28">AddRange</name></name><argument_list pos:line="314" pos:column="36">(<argument><expr><op:operator pos:line="314" pos:column="37">(</op:operator><op:operator pos:line="314" pos:column="38">(</op:operator><name pos:line="314" pos:column="39">PropertyDefinition</name><op:operator pos:line="314" pos:column="57">)</op:operator><name pos:line="314" pos:column="58">match</name><op:operator pos:line="314" pos:column="63">)</op:operator><op:operator pos:line="314" pos:column="64">.</op:operator><call><name><name pos:line="314" pos:column="65">ReturnType</name><op:operator pos:line="314" pos:column="75">.</op:operator><name pos:line="314" pos:column="76">ResolveType</name></name><argument_list pos:line="314" pos:column="87">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="315" pos:column="19">else <if pos:line="315" pos:column="24">if<condition pos:line="315" pos:column="26">(<expr><name pos:line="315" pos:column="27">match</name> <op:operator pos:line="315" pos:column="33">is</op:operator> <name pos:line="315" pos:column="36">VariableDeclaration</name></expr>)</condition><then pos:line="315" pos:column="56"> <block pos:line="315" pos:column="57">{
                    <expr_stmt><expr><call><name><name pos:line="316" pos:column="21">scopes</name><op:operator pos:line="316" pos:column="27">.</op:operator><name pos:line="316" pos:column="28">AddRange</name></name><argument_list pos:line="316" pos:column="36">(<argument><expr><op:operator pos:line="316" pos:column="37">(</op:operator><op:operator pos:line="316" pos:column="38">(</op:operator><name pos:line="316" pos:column="39">VariableDeclaration</name><op:operator pos:line="316" pos:column="58">)</op:operator><name pos:line="316" pos:column="59">match</name><op:operator pos:line="316" pos:column="64">)</op:operator><op:operator pos:line="316" pos:column="65">.</op:operator><call><name><name pos:line="316" pos:column="66">VariableType</name><op:operator pos:line="316" pos:column="78">.</op:operator><name pos:line="316" pos:column="79">ResolveType</name></name><argument_list pos:line="316" pos:column="90">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="317" pos:column="19">else <block pos:line="317" pos:column="24">{
                    <comment type="line" pos:line="318" pos:column="21">//the only other possibilities are all NamedScopes</comment>
                    <expr_stmt><expr><call><name><name pos:line="319" pos:column="21">scopes</name><op:operator pos:line="319" pos:column="27">.</op:operator><name pos:line="319" pos:column="28">Add</name></name><argument_list pos:line="319" pos:column="31">(<argument><expr><op:operator pos:line="319" pos:column="32">(</op:operator><name pos:line="319" pos:column="33">NamedScope</name><op:operator pos:line="319" pos:column="43">)</op:operator><name pos:line="319" pos:column="44">match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if></else></if></else></if>
            }</block></foreach>
            <return pos:line="322" pos:column="13">return <expr><name pos:line="322" pos:column="20">scopes</name></expr>;</return>
        }</block></function>


        <cpp:region pos:line="326" pos:column="9">#<cpp:directive pos:line="326" pos:column="10">region</cpp:directive> Private Methods</cpp:region>
        <comment type="line" pos:line="327" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="328" pos:column="9">/// Searches for the ImportStatements/AliasStatements that occur prior to this NameUse.</comment>
        <comment type="line" pos:line="329" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="330" pos:column="9">private</specifier> <name><name pos:line="330" pos:column="17">List</name><argument_list pos:line="330" pos:column="21">&lt;<argument><name pos:line="330" pos:column="22">Statement</name></argument>&gt;</argument_list></name></type> <name pos:line="330" pos:column="33">DetermineAliases</name><parameter_list pos:line="330" pos:column="49">()</parameter_list> <block pos:line="330" pos:column="52">{
            <comment type="line" pos:line="331" pos:column="13">//TODO: do we also need to search base types?</comment>
            <decl_stmt><decl><type><name pos:line="332" pos:column="13">SourceLocation</name></type> <name pos:line="332" pos:column="28">parentLoc</name></decl>;</decl_stmt>
            <if pos:line="333" pos:column="13">if<condition pos:line="333" pos:column="15">(<expr><name><name pos:line="333" pos:column="16">ParentStatement</name><op:operator pos:line="333" pos:column="31">.</op:operator><name pos:line="333" pos:column="32">Locations</name><op:operator pos:line="333" pos:column="41">.</op:operator><name pos:line="333" pos:column="42">Count</name></name> <op:operator pos:line="333" pos:column="48">==</op:operator> <lit:literal type="number" pos:line="333" pos:column="51">1</lit:literal></expr>)</condition><then pos:line="333" pos:column="53"> <block pos:line="333" pos:column="54">{
                <expr_stmt><expr><name pos:line="334" pos:column="17">parentLoc</name> <op:operator pos:line="334" pos:column="27">=</op:operator> <name><name pos:line="334" pos:column="29">ParentStatement</name><op:operator pos:line="334" pos:column="44">.</op:operator><name pos:line="334" pos:column="45">PrimaryLocation</name></name></expr>;</expr_stmt>
            }</block></then> <else pos:line="335" pos:column="15">else <block pos:line="335" pos:column="20">{
                <expr_stmt><expr><name pos:line="336" pos:column="17">parentLoc</name> <op:operator pos:line="336" pos:column="27">=</op:operator> <call><name><name pos:line="336" pos:column="29">ParentStatement</name><op:operator pos:line="336" pos:column="44">.</op:operator><name pos:line="336" pos:column="45">Locations</name><op:operator pos:line="336" pos:column="54">.</op:operator><name pos:line="336" pos:column="55">First</name></name><argument_list pos:line="336" pos:column="60">(<argument><expr><lambda><name pos:line="336" pos:column="61">l</name> <op:operator pos:line="336" pos:column="63">=&gt;</op:operator> <call><name><name pos:line="336" pos:column="66">l</name><op:operator pos:line="336" pos:column="67">.</op:operator><name pos:line="336" pos:column="68">Contains</name></name><argument_list pos:line="336" pos:column="76">(<argument><expr><name><name pos:line="336" pos:column="77">this</name><op:operator pos:line="336" pos:column="81">.</op:operator><name pos:line="336" pos:column="82">Location</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <return pos:line="338" pos:column="13">return <expr><call><name><name pos:line="338" pos:column="20">ParentStatement</name><op:operator pos:line="338" pos:column="35">.</op:operator><name pos:line="338" pos:column="36">GetAncestors</name></name><argument_list pos:line="338" pos:column="48">()</argument_list></call><op:operator pos:line="338" pos:column="50">.</op:operator><call><name pos:line="338" pos:column="51">SelectMany</name><argument_list pos:line="338" pos:column="61">(<argument><expr><lambda><name pos:line="338" pos:column="62">s</name> <op:operator pos:line="338" pos:column="64">=&gt;</op:operator> <call><name><name pos:line="338" pos:column="67">s</name><op:operator pos:line="338" pos:column="68">.</op:operator><name pos:line="338" pos:column="69">GetFileSpecificStatements</name></name><argument_list pos:line="338" pos:column="94">(<argument><expr><name pos:line="338" pos:column="95">parentLoc</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="338" pos:column="106">.</op:operator><call><name pos:line="338" pos:column="107">ToList</name><argument_list pos:line="338" pos:column="113">()</argument_list></call></expr>;</return>
        }</block></function>

        <cpp:endregion pos:line="341" pos:column="9">#<cpp:directive pos:line="341" pos:column="10">endregion</cpp:directive> Private Methods</cpp:endregion>
    }</block></class>
}</block></namespace>
</unit>
