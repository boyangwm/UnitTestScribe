<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Test\IConcurrencyStrategyTests.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">ABB</name><op:operator pos:line="1" pos:column="10">.</op:operator><name pos:line="1" pos:column="11">SrcML</name><op:operator pos:line="1" pos:column="16">.</op:operator><name pos:line="1" pos:column="17">Utilities</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">NUnit</name><op:operator pos:line="2" pos:column="12">.</op:operator><name pos:line="2" pos:column="13">Framework</name></name>;</using>
<using pos:line="3" pos:column="1">using <name pos:line="3" pos:column="7">System</name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Collections</name><op:operator pos:line="4" pos:column="25">.</op:operator><name pos:line="4" pos:column="26">Generic</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Linq</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">Text</name></name>;</using>

<namespace pos:line="8" pos:column="1">namespace <name><name pos:line="8" pos:column="11">ABB</name><op:operator pos:line="8" pos:column="14">.</op:operator><name pos:line="8" pos:column="15">SrcML</name><op:operator pos:line="8" pos:column="20">.</op:operator><name pos:line="8" pos:column="21">Test</name></name> <block pos:line="8" pos:column="26">{
    <class><attribute pos:line="9" pos:column="5">[<expr><name pos:line="9" pos:column="6">TestFixture</name></expr><op:operator pos:line="9" pos:column="17">,</op:operator><expr><call><name pos:line="9" pos:column="18">Category</name><argument_list pos:line="9" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="9" pos:column="27">"Build"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    class <name pos:line="10" pos:column="11">IConcurrencyStrategyTests</name> <block pos:line="10" pos:column="37">{
        <function><type><attribute pos:line="11" pos:column="9">[<expr><name pos:line="11" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="12" pos:column="9">public</specifier> <name pos:line="12" pos:column="16">void</name></type> <name pos:line="12" pos:column="21">TestSingleCoreStrategy</name><parameter_list pos:line="12" pos:column="43">()</parameter_list> <block pos:line="12" pos:column="46">{
            <decl_stmt><decl><type><name pos:line="13" pos:column="13">IConcurrencyStrategy</name></type> <name pos:line="13" pos:column="34">strategy</name> <init pos:line="13" pos:column="43">= <expr><op:operator pos:line="13" pos:column="45">new</op:operator> <call><name pos:line="13" pos:column="49">SingleCoreStrategy</name><argument_list pos:line="13" pos:column="67">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="14" pos:column="13">Assert</name><op:operator pos:line="14" pos:column="19">.</op:operator><name pos:line="14" pos:column="20">AreEqual</name></name><argument_list pos:line="14" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="14" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="14" pos:column="32">strategy</name><op:operator pos:line="14" pos:column="40">.</op:operator><name pos:line="14" pos:column="41">ComputeAvailableCores</name></name><argument_list pos:line="14" pos:column="62">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="17" pos:column="9">[<expr><name pos:line="17" pos:column="10">Test</name></expr><op:operator pos:line="17" pos:column="14">,</op:operator> <expr><call><name pos:line="17" pos:column="16">ExpectedException</name><argument_list pos:line="17" pos:column="33">(<argument><expr><name pos:line="17" pos:column="34">ExpectedException</name><op:operator pos:line="17" pos:column="51">=</op:operator><call><name pos:line="17" pos:column="52">typeof</name><argument_list pos:line="17" pos:column="58">(<argument><expr><name pos:line="17" pos:column="59">ArgumentOutOfRangeException</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="18" pos:column="9">public</specifier> <name pos:line="18" pos:column="16">void</name></type> <name pos:line="18" pos:column="21">TestZeroCores</name><parameter_list pos:line="18" pos:column="34">()</parameter_list> <block pos:line="18" pos:column="37">{
            <decl_stmt><decl><type><name pos:line="19" pos:column="13">IConcurrencyStrategy</name></type> <name pos:line="19" pos:column="34">strategy</name> <init pos:line="19" pos:column="43">= <expr><op:operator pos:line="19" pos:column="45">new</op:operator> <call><name pos:line="19" pos:column="49">ConservativeAbbCoreStrategy</name><argument_list pos:line="19" pos:column="76">(<argument><expr><lit:literal type="number" pos:line="19" pos:column="77">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        }</block></function>
        <function><type><attribute pos:line="21" pos:column="9">[<expr><name pos:line="21" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="22" pos:column="9">public</specifier> <name pos:line="22" pos:column="16">void</name></type> <name pos:line="22" pos:column="21">TestConservativeAbbCoreStrategy</name><parameter_list pos:line="22" pos:column="52">()</parameter_list> <block pos:line="22" pos:column="55">{
            <decl_stmt><decl><type><name><name pos:line="23" pos:column="13">Dictionary</name><argument_list pos:line="23" pos:column="23">&lt;<argument><name pos:line="23" pos:column="24">int</name></argument>, <argument><name pos:line="23" pos:column="29">int</name></argument>&gt;</argument_list></name></type> <name pos:line="23" pos:column="34">tests</name> <init pos:line="23" pos:column="40">= <expr><op:operator pos:line="23" pos:column="42">new</op:operator> <call><name><name pos:line="23" pos:column="46">Dictionary</name><argument_list pos:line="23" pos:column="56">&lt;<argument><name pos:line="23" pos:column="57">int</name></argument>, <argument><name pos:line="23" pos:column="62">int</name></argument>&gt;</argument_list></name><argument_list pos:line="23" pos:column="66">()</argument_list></call> <block pos:line="23" pos:column="69">{
                <expr><block pos:line="24" pos:column="17">{<expr><lit:literal type="number" pos:line="24" pos:column="18">1</lit:literal></expr>, <expr><lit:literal type="number" pos:line="24" pos:column="21">1</lit:literal></expr>}</block></expr>,
                <expr><block pos:line="25" pos:column="17">{<expr><lit:literal type="number" pos:line="25" pos:column="18">2</lit:literal></expr>, <expr><lit:literal type="number" pos:line="25" pos:column="21">1</lit:literal></expr>}</block></expr>,
                <expr><block pos:line="26" pos:column="17">{<expr><lit:literal type="number" pos:line="26" pos:column="18">3</lit:literal></expr>, <expr><lit:literal type="number" pos:line="26" pos:column="21">1</lit:literal></expr>}</block></expr>,
                <expr><block pos:line="27" pos:column="17">{<expr><lit:literal type="number" pos:line="27" pos:column="18">4</lit:literal></expr>, <expr><lit:literal type="number" pos:line="27" pos:column="21">2</lit:literal></expr>}</block></expr>,
                <expr><block pos:line="28" pos:column="17">{<expr><lit:literal type="number" pos:line="28" pos:column="18">5</lit:literal></expr>, <expr><lit:literal type="number" pos:line="28" pos:column="21">2</lit:literal></expr>}</block></expr>,
                <expr><block pos:line="29" pos:column="17">{<expr><lit:literal type="number" pos:line="29" pos:column="18">8</lit:literal></expr>, <expr><lit:literal type="number" pos:line="29" pos:column="21">4</lit:literal></expr>}</block></expr>,
                <expr><block pos:line="30" pos:column="17">{<expr><lit:literal type="number" pos:line="30" pos:column="18">9</lit:literal></expr>, <expr><lit:literal type="number" pos:line="30" pos:column="21">4</lit:literal></expr>}</block></expr>,
                <expr><block pos:line="31" pos:column="17">{<expr><lit:literal type="number" pos:line="31" pos:column="18">16</lit:literal></expr>, <expr><lit:literal type="number" pos:line="31" pos:column="22">8</lit:literal></expr>}</block></expr>,
            }</block></expr></init></decl>;</decl_stmt>

            <foreach pos:line="34" pos:column="13">foreach(<init><decl><type><name pos:line="34" pos:column="21">var</name></type> <name pos:line="34" pos:column="25">key</name> <range pos:line="34" pos:column="29">in <expr><name><name pos:line="34" pos:column="32">tests</name><op:operator pos:line="34" pos:column="37">.</op:operator><name pos:line="34" pos:column="38">Keys</name></name></expr></range></decl></init>) <block pos:line="34" pos:column="44">{
                <decl_stmt><decl><type><name pos:line="35" pos:column="17">IConcurrencyStrategy</name></type> <name pos:line="35" pos:column="38">strategy</name> <init pos:line="35" pos:column="47">= <expr><op:operator pos:line="35" pos:column="49">new</op:operator> <call><name pos:line="35" pos:column="53">ConservativeAbbCoreStrategy</name><argument_list pos:line="35" pos:column="80">(<argument><expr><name pos:line="35" pos:column="81">key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="36" pos:column="17">Assert</name><op:operator pos:line="36" pos:column="23">.</op:operator><name pos:line="36" pos:column="24">AreEqual</name></name><argument_list pos:line="36" pos:column="32">(<argument><expr><name><name pos:line="36" pos:column="33">tests</name><index pos:line="36" pos:column="38">[<expr><name pos:line="36" pos:column="39">key</name></expr>]</index></name></expr></argument>, <argument><expr><call><name><name pos:line="36" pos:column="45">strategy</name><op:operator pos:line="36" pos:column="53">.</op:operator><name pos:line="36" pos:column="54">ComputeAvailableCores</name></name><argument_list pos:line="36" pos:column="75">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="36" pos:column="79">String</name><op:operator pos:line="36" pos:column="85">.</op:operator><name pos:line="36" pos:column="86">Format</name></name><argument_list pos:line="36" pos:column="92">(<argument><expr><lit:literal type="string" pos:line="36" pos:column="93">"{0} cores should return {1}"</lit:literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="124">key</name></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="129">tests</name><index pos:line="36" pos:column="134">[<expr><name pos:line="36" pos:column="135">key</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
