<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data.Test\MultithreadedAccessTests.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">NUnit</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">Framework</name></name>;</using>
<using pos:line="2" pos:column="1">using <name pos:line="2" pos:column="7">System</name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Collections</name><op:operator pos:line="3" pos:column="25">.</op:operator><name pos:line="3" pos:column="26">Generic</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">IO</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Linq</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">Text</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">System</name><op:operator pos:line="7" pos:column="13">.</op:operator><name pos:line="7" pos:column="14">Threading</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">System</name><op:operator pos:line="8" pos:column="13">.</op:operator><name pos:line="8" pos:column="14">Threading</name><op:operator pos:line="8" pos:column="23">.</op:operator><name pos:line="8" pos:column="24">Tasks</name></name>;</using>

<namespace pos:line="10" pos:column="1">namespace <name><name pos:line="10" pos:column="11">ABB</name><op:operator pos:line="10" pos:column="14">.</op:operator><name pos:line="10" pos:column="15">SrcML</name><op:operator pos:line="10" pos:column="20">.</op:operator><name pos:line="10" pos:column="21">Data</name><op:operator pos:line="10" pos:column="25">.</op:operator><name pos:line="10" pos:column="26">Test</name></name> <block pos:line="10" pos:column="31">{

    <class><attribute pos:line="12" pos:column="5">[<expr><name pos:line="12" pos:column="6">TestFixture</name></expr>]</attribute>
    <attribute pos:line="13" pos:column="5">[<expr><call><name pos:line="13" pos:column="6">Category</name><argument_list pos:line="13" pos:column="14">(<argument><expr><lit:literal type="string" pos:line="13" pos:column="15">"Build"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="14" pos:column="5">public</specifier> class <name pos:line="14" pos:column="18">MultithreadedAccessTests</name> <block pos:line="14" pos:column="43">{

        <function><type><attribute pos:line="16" pos:column="9">[<expr><name pos:line="16" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="17" pos:column="9">public</specifier> <name pos:line="17" pos:column="16">void</name></type> <name pos:line="17" pos:column="21">TestQueryDuringUpdate</name><parameter_list pos:line="17" pos:column="42">()</parameter_list> <block pos:line="17" pos:column="45">{
            <decl_stmt><decl><type><name pos:line="18" pos:column="13">var</name></type> <name pos:line="18" pos:column="17">sourceFolder</name> <init pos:line="18" pos:column="30">= <expr><lit:literal type="string" pos:line="18" pos:column="32">"TestQueryDuringUpdate"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="19" pos:column="13">var</name></type> <name pos:line="19" pos:column="17">dataFolder</name> <init pos:line="19" pos:column="28">= <expr><lit:literal type="string" pos:line="19" pos:column="30">"TestQueryDuringUpdate_Data"</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="20" pos:column="13">Directory</name><op:operator pos:line="20" pos:column="22">.</op:operator><name pos:line="20" pos:column="23">CreateDirectory</name></name><argument_list pos:line="20" pos:column="38">(<argument><expr><name pos:line="20" pos:column="39">sourceFolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="21" pos:column="13">string</name></type> <name pos:line="21" pos:column="20">fooSourcePath</name> <init pos:line="21" pos:column="34">= <expr><call><name><name pos:line="21" pos:column="36">Path</name><op:operator pos:line="21" pos:column="40">.</op:operator><name pos:line="21" pos:column="41">Combine</name></name><argument_list pos:line="21" pos:column="48">(<argument><expr><name pos:line="21" pos:column="49">sourceFolder</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="21" pos:column="63">"foo.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="22" pos:column="13">string</name></type> <name pos:line="22" pos:column="20">barSourcePath</name> <init pos:line="22" pos:column="34">= <expr><call><name><name pos:line="22" pos:column="36">Path</name><op:operator pos:line="22" pos:column="40">.</op:operator><name pos:line="22" pos:column="41">Combine</name></name><argument_list pos:line="22" pos:column="48">(<argument><expr><name pos:line="22" pos:column="49">sourceFolder</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="22" pos:column="63">"bar.cpp"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="24" pos:column="13">var</name></type> <name pos:line="24" pos:column="17">fooRevisions</name> <init pos:line="24" pos:column="30">= <expr><op:operator pos:line="24" pos:column="32">new</op:operator> <name><name pos:line="24" pos:column="36">string</name><index pos:line="24" pos:column="42">[]</index></name> <block pos:line="24" pos:column="45">{ <expr><lit:literal type="string" pos:line="24" pos:column="47">"void foo() { }"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="24" pos:column="65">"void foo() { bar(); }"</lit:literal></expr> }</block></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="26" pos:column="13">File</name><op:operator pos:line="26" pos:column="17">.</op:operator><name pos:line="26" pos:column="18">WriteAllText</name></name><argument_list pos:line="26" pos:column="30">(<argument><expr><name pos:line="26" pos:column="31">fooSourcePath</name></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="46">fooRevisions</name><index pos:line="26" pos:column="58">[<expr><lit:literal type="number" pos:line="26" pos:column="59">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="27" pos:column="13">File</name><op:operator pos:line="27" pos:column="17">.</op:operator><name pos:line="27" pos:column="18">WriteAllText</name></name><argument_list pos:line="27" pos:column="30">(<argument><expr><name pos:line="27" pos:column="31">barSourcePath</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="27" pos:column="46">"void bar() { }"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="29" pos:column="13">int</name></type> <name pos:line="29" pos:column="17">iterations</name> <init pos:line="29" pos:column="28">= <expr><lit:literal type="number" pos:line="29" pos:column="30">1000</lit:literal></expr></init></decl>;</decl_stmt>
            <using pos:line="30" pos:column="13">using(<decl><type><name pos:line="30" pos:column="19">var</name></type> <name pos:line="30" pos:column="23">project</name> <init pos:line="30" pos:column="31">= <expr><op:operator pos:line="30" pos:column="33">new</op:operator> <call><name><name pos:line="30" pos:column="37">DataProject</name><argument_list pos:line="30" pos:column="48">&lt;<argument><name pos:line="30" pos:column="49">CompleteWorkingSet</name></argument>&gt;</argument_list></name><argument_list pos:line="30" pos:column="68">(<argument><expr><name pos:line="30" pos:column="69">dataFolder</name></expr></argument>, <argument><expr><name pos:line="30" pos:column="81">sourceFolder</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="30" pos:column="95">"SrcML"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>) <block pos:line="30" pos:column="105">{
                <expr_stmt><expr><call><name><name pos:line="31" pos:column="17">project</name><op:operator pos:line="31" pos:column="24">.</op:operator><name pos:line="31" pos:column="25">Update</name></name><argument_list pos:line="31" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="32" pos:column="17">project</name><op:operator pos:line="32" pos:column="24">.</op:operator><name pos:line="32" pos:column="25">StartMonitoring</name></name><argument_list pos:line="32" pos:column="40">()</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name pos:line="34" pos:column="17">var</name></type> <name pos:line="34" pos:column="21">developer</name> <init pos:line="34" pos:column="31">= <expr><op:operator pos:line="34" pos:column="33">new</op:operator> <call><name pos:line="34" pos:column="37">Task</name><argument_list pos:line="34" pos:column="41">(<argument><expr><lambda><parameter_list pos:line="34" pos:column="42">()</parameter_list> <op:operator pos:line="34" pos:column="45">=&gt;</op:operator> <block pos:line="34" pos:column="48">{
                    <for pos:line="35" pos:column="21">for(<init><decl><type><name pos:line="35" pos:column="25">int</name></type> <name pos:line="35" pos:column="29">i</name> <init pos:line="35" pos:column="31">= <expr><lit:literal type="number" pos:line="35" pos:column="33">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="35" pos:column="36">i</name> <op:operator pos:line="35" pos:column="38">&lt;</op:operator> <name pos:line="35" pos:column="40">iterations</name></expr>;</condition> <incr><expr><name pos:line="35" pos:column="52">i</name><op:operator pos:line="35" pos:column="53">++</op:operator></expr></incr>) <block pos:line="35" pos:column="57">{
                        <expr_stmt><expr><call><name><name pos:line="36" pos:column="25">File</name><op:operator pos:line="36" pos:column="29">.</op:operator><name pos:line="36" pos:column="30">WriteAllText</name></name><argument_list pos:line="36" pos:column="42">(<argument><expr><name pos:line="36" pos:column="43">fooSourcePath</name></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="58">fooRevisions</name><index pos:line="36" pos:column="70">[<expr><name pos:line="36" pos:column="71">i</name> <op:operator pos:line="36" pos:column="73">%</op:operator> <lit:literal type="number" pos:line="36" pos:column="75">2</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></for>
                }</block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name pos:line="40" pos:column="17">developer</name><op:operator pos:line="40" pos:column="26">.</op:operator><name pos:line="40" pos:column="27">Start</name></name><argument_list pos:line="40" pos:column="32">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="41" pos:column="17">Assert</name><op:operator pos:line="41" pos:column="23">.</op:operator><name pos:line="41" pos:column="24">DoesNotThrow</name></name><argument_list pos:line="41" pos:column="36">(<argument><expr><lambda><parameter_list pos:line="41" pos:column="37">()</parameter_list> <op:operator pos:line="41" pos:column="40">=&gt;</op:operator> <block pos:line="41" pos:column="43">{
                    <for pos:line="42" pos:column="21">for(<init><decl><type><name pos:line="42" pos:column="25">int</name></type> <name pos:line="42" pos:column="29">i</name> <init pos:line="42" pos:column="31">= <expr><lit:literal type="number" pos:line="42" pos:column="33">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="42" pos:column="36">i</name> <op:operator pos:line="42" pos:column="38">&lt;</op:operator> <name pos:line="42" pos:column="40">iterations</name></expr>;</condition> <incr><expr><name pos:line="42" pos:column="52">i</name><op:operator pos:line="42" pos:column="53">++</op:operator></expr></incr>) <block pos:line="42" pos:column="57">{
                        <decl_stmt><decl><type><name pos:line="43" pos:column="25">var</name></type> <name pos:line="43" pos:column="29">foo</name> <init pos:line="43" pos:column="33">= <expr><call><name pos:line="43" pos:column="35">GetMethodWithName</name><argument_list pos:line="43" pos:column="52">(<argument><expr><name><name pos:line="43" pos:column="53">project</name><op:operator pos:line="43" pos:column="60">.</op:operator><name pos:line="43" pos:column="61">WorkingSet</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="43" pos:column="73">500</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="43" pos:column="78">"foo"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name pos:line="44" pos:column="25">var</name></type> <name pos:line="44" pos:column="29">bar</name> <init pos:line="44" pos:column="33">= <expr><call><name pos:line="44" pos:column="35">GetMethodWithName</name><argument_list pos:line="44" pos:column="52">(<argument><expr><name><name pos:line="44" pos:column="53">project</name><op:operator pos:line="44" pos:column="60">.</op:operator><name pos:line="44" pos:column="61">WorkingSet</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="44" pos:column="73">500</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="44" pos:column="78">"bar"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name pos:line="45" pos:column="25">foo</name><op:operator pos:line="45" pos:column="28">.</op:operator><name pos:line="45" pos:column="29">ContainsCallTo</name></name><argument_list pos:line="45" pos:column="43">(<argument><expr><name pos:line="45" pos:column="44">bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if pos:line="46" pos:column="25">if<condition pos:line="46" pos:column="27">(<expr><name pos:line="46" pos:column="28">i</name> <op:operator pos:line="46" pos:column="30">%</op:operator> <lit:literal type="number" pos:line="46" pos:column="32">10</lit:literal> <op:operator pos:line="46" pos:column="35">==</op:operator> <lit:literal type="number" pos:line="46" pos:column="38">0</lit:literal> <op:operator pos:line="46" pos:column="40">&amp;&amp;</op:operator> <name pos:line="46" pos:column="43">i</name> <op:operator pos:line="46" pos:column="45">&gt;</op:operator> <lit:literal type="number" pos:line="46" pos:column="47">0</lit:literal></expr>)</condition><then pos:line="46" pos:column="49"> <block pos:line="46" pos:column="50">{
                            <expr_stmt><expr><call><name><name pos:line="47" pos:column="29">Console</name><op:operator pos:line="47" pos:column="36">.</op:operator><name pos:line="47" pos:column="37">WriteLine</name></name><argument_list pos:line="47" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="47" pos:column="47">"Finished {0} iterations"</lit:literal></expr></argument>, <argument><expr><name pos:line="47" pos:column="74">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></for>
                }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="51" pos:column="17">developer</name><op:operator pos:line="51" pos:column="26">.</op:operator><name pos:line="51" pos:column="27">Wait</name></name><argument_list pos:line="51" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
            }</block></using>
        }</block></function>

        <function><type><specifier pos:line="55" pos:column="9">private</specifier> <specifier pos:line="55" pos:column="17">static</specifier> <name pos:line="55" pos:column="24">MethodDefinition</name></type> <name pos:line="55" pos:column="41">GetMethodWithName</name><parameter_list pos:line="55" pos:column="58">(<param><decl><type><name pos:line="55" pos:column="59">AbstractWorkingSet</name></type> <name pos:line="55" pos:column="78">workingSet</name></decl></param>, <param><decl><type><name pos:line="55" pos:column="90">int</name></type> <name pos:line="55" pos:column="94">timeout</name></decl></param>, <param><decl><type><name pos:line="55" pos:column="103">string</name></type> <name pos:line="55" pos:column="110">methodName</name></decl></param>)</parameter_list> <block pos:line="55" pos:column="122">{
            <decl_stmt><decl><type><name pos:line="56" pos:column="13">MethodDefinition</name></type> <name pos:line="56" pos:column="30">result</name> <init pos:line="56" pos:column="37">= <expr><name pos:line="56" pos:column="39">null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="57" pos:column="13">NamespaceDefinition</name></type> <name pos:line="57" pos:column="33">globalScope</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="58" pos:column="13">Assert</name><op:operator pos:line="58" pos:column="19">.</op:operator><name pos:line="58" pos:column="20">That</name></name><argument_list pos:line="58" pos:column="24">(<argument><expr><call><name><name pos:line="58" pos:column="25">workingSet</name><op:operator pos:line="58" pos:column="35">.</op:operator><name pos:line="58" pos:column="36">TryObtainReadLock</name></name><argument_list pos:line="58" pos:column="53">(<argument><expr><name pos:line="58" pos:column="54">timeout</name></expr></argument>, <argument><expr pos:line="58" pos:column="63">out <name pos:line="58" pos:column="67">globalScope</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try pos:line="59" pos:column="13">try <block pos:line="59" pos:column="17">{
                <expr_stmt><expr><name pos:line="60" pos:column="17">result</name> <op:operator pos:line="60" pos:column="24">=</op:operator> <call><name><name pos:line="60" pos:column="26">globalScope</name><op:operator pos:line="60" pos:column="37">.</op:operator><name><name pos:line="60" pos:column="38">GetNamedChildren</name><argument_list pos:line="60" pos:column="54">&lt;<argument><name pos:line="60" pos:column="55">MethodDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="60" pos:column="72">(<argument><expr><lit:literal type="string" pos:line="60" pos:column="73">"foo"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="60" pos:column="79">.</op:operator><call><name pos:line="60" pos:column="80">FirstOrDefault</name><argument_list pos:line="60" pos:column="94">()</argument_list></call></expr>;</expr_stmt>
                <return pos:line="61" pos:column="17">return <expr><name pos:line="61" pos:column="24">result</name></expr>;</return>
            }</block> <finally pos:line="62" pos:column="15">finally <block pos:line="62" pos:column="23">{
                <expr_stmt><expr><call><name><name pos:line="63" pos:column="17">workingSet</name><op:operator pos:line="63" pos:column="27">.</op:operator><name pos:line="63" pos:column="28">ReleaseReadLock</name></name><argument_list pos:line="63" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>

        }</block></function>
    }</block></class>
}</block></namespace></unit>
