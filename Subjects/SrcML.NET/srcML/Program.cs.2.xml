<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\Tools\ABB.SrcML.Tools.DataTester\Program.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">ABB</name><op:operator pos:line="1" pos:column="10">.</op:operator><name pos:line="1" pos:column="11">SrcML</name><op:operator pos:line="1" pos:column="16">.</op:operator><name pos:line="1" pos:column="17">Data</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">Newtonsoft</name><op:operator pos:line="2" pos:column="17">.</op:operator><name pos:line="2" pos:column="18">Json</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">Newtonsoft</name><op:operator pos:line="3" pos:column="17">.</op:operator><name pos:line="3" pos:column="18">Json</name><op:operator pos:line="3" pos:column="22">.</op:operator><name pos:line="3" pos:column="23">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name pos:line="4" pos:column="7">System</name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Collections</name><op:operator pos:line="5" pos:column="25">.</op:operator><name pos:line="5" pos:column="26">Generic</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">Diagnostics</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">System</name><op:operator pos:line="7" pos:column="13">.</op:operator><name pos:line="7" pos:column="14">IO</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">System</name><op:operator pos:line="8" pos:column="13">.</op:operator><name pos:line="8" pos:column="14">Linq</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">System</name><op:operator pos:line="9" pos:column="13">.</op:operator><name pos:line="9" pos:column="14">Text</name></name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">System</name><op:operator pos:line="10" pos:column="13">.</op:operator><name pos:line="10" pos:column="14">Threading</name></name>;</using>
<using pos:line="11" pos:column="1">using <name><name pos:line="11" pos:column="7">System</name><op:operator pos:line="11" pos:column="13">.</op:operator><name pos:line="11" pos:column="14">Threading</name><op:operator pos:line="11" pos:column="23">.</op:operator><name pos:line="11" pos:column="24">Tasks</name></name>;</using>

<namespace pos:line="13" pos:column="1">namespace <name><name pos:line="13" pos:column="11">ABB</name><op:operator pos:line="13" pos:column="14">.</op:operator><name pos:line="13" pos:column="15">SrcML</name><op:operator pos:line="13" pos:column="20">.</op:operator><name pos:line="13" pos:column="21">Tools</name><op:operator pos:line="13" pos:column="26">.</op:operator><name pos:line="13" pos:column="27">DataTester</name></name> <block pos:line="13" pos:column="38">{

    <class><specifier pos:line="15" pos:column="5">internal</specifier> class <name pos:line="15" pos:column="20">Program</name> <block pos:line="15" pos:column="28">{

        <function><type><specifier pos:line="17" pos:column="9">private</specifier> <specifier pos:line="17" pos:column="17">static</specifier> <name pos:line="17" pos:column="24">void</name></type> <name pos:line="17" pos:column="29">GenerateData</name><parameter_list pos:line="17" pos:column="41">(<param><decl><type><name pos:line="17" pos:column="42">string</name></type> <name pos:line="17" pos:column="49">sourcePath</name></decl></param>, <param><decl><type><name pos:line="17" pos:column="61">string</name></type> <name pos:line="17" pos:column="68">dataPath</name></decl></param>, <param><decl><type><name pos:line="17" pos:column="78">string</name></type> <name pos:line="17" pos:column="85">csvDirectory</name></decl></param>)</parameter_list> <block pos:line="17" pos:column="99">{
            <comment type="line" pos:line="18" pos:column="13">//Dictionary&lt;Language, AbstractCodeParser&gt; CodeParser = new Dictionary&lt;Language, AbstractCodeParser&gt;() {</comment>
            <comment type="line" pos:line="19" pos:column="13">//    { Language.CPlusPlus, new CPlusPlusCodeParser() },</comment>
            <comment type="line" pos:line="20" pos:column="13">//    { Language.Java, new JavaCodeParser() },</comment>
            <comment type="line" pos:line="21" pos:column="13">//    { Language.CSharp, new CSharpCodeParser() }</comment>
            <comment type="line" pos:line="22" pos:column="13">//};</comment>

            <comment type="line" pos:line="24" pos:column="13">//string fileLogPath = Path.Combine(dataPath, "parse.log");</comment>
            <comment type="line" pos:line="25" pos:column="13">//string callLogPath = Path.Combine(dataPath, "methodcalls.log");</comment>
            <comment type="line" pos:line="26" pos:column="13">//string csvPath = Path.Combine(csvDirectory, "timing.csv");</comment>
            <comment type="line" pos:line="27" pos:column="13">//string jsonPath = String.Format("{0}.json", Path.Combine(@"c:\Workspace\DataVisualization", dataPath.Substring(23)));</comment>

            <comment type="line" pos:line="29" pos:column="13">//if(!Directory.Exists(sourcePath)) {</comment>
            <comment type="line" pos:line="30" pos:column="13">//    Console.Error.WriteLine("{0} does not exist", sourcePath);</comment>
            <comment type="line" pos:line="31" pos:column="13">//    return;</comment>
            <comment type="line" pos:line="32" pos:column="13">//}</comment>

            <comment type="line" pos:line="34" pos:column="13">//if(File.Exists(callLogPath)) {</comment>
            <comment type="line" pos:line="35" pos:column="13">//    File.Delete(callLogPath);</comment>
            <comment type="line" pos:line="36" pos:column="13">//}</comment>
            <comment type="line" pos:line="37" pos:column="13">//if(File.Exists(fileLogPath)) {</comment>
            <comment type="line" pos:line="38" pos:column="13">//    File.Delete(fileLogPath);</comment>
            <comment type="line" pos:line="39" pos:column="13">//}</comment>

            <comment type="line" pos:line="41" pos:column="13">//var archive = new SrcMLArchive(dataPath);</comment>
            <comment type="line" pos:line="42" pos:column="13">//archive.XmlGenerator.ExtensionMapping[".cxx"] = Language.CPlusPlus;</comment>
            <comment type="line" pos:line="43" pos:column="13">//archive.XmlGenerator.ExtensionMapping[".c"] = Language.CPlusPlus;</comment>
            <comment type="line" pos:line="44" pos:column="13">//archive.XmlGenerator.ExtensionMapping[".cc"] = Language.CPlusPlus;</comment>
            <comment type="line" pos:line="45" pos:column="13">//archive.XmlGenerator.ExtensionMapping[".hpp"] = Language.CPlusPlus;</comment>

            <comment type="line" pos:line="47" pos:column="13">//AbstractFileMonitor monitor = new FileSystemFolderMonitor(sourcePath, dataPath, new LastModifiedArchive(dataPath), archive);</comment>

            <comment type="line" pos:line="49" pos:column="13">//ManualResetEvent mre = new ManualResetEvent(false);</comment>
            <comment type="line" pos:line="50" pos:column="13">//Stopwatch timer = new Stopwatch();</comment>
            <comment type="line" pos:line="51" pos:column="13">//bool startupCompleted = false;</comment>

            <comment type="line" pos:line="53" pos:column="13">//monitor.UpdateArchivesCompleted  += (o, e) =&gt; {</comment>
            <comment type="line" pos:line="54" pos:column="13">//    timer.Stop();</comment>
            <comment type="line" pos:line="55" pos:column="13">//    startupCompleted = true;</comment>
            <comment type="line" pos:line="56" pos:column="13">//    mre.Set();</comment>
            <comment type="line" pos:line="57" pos:column="13">//};</comment>

            <comment type="line" pos:line="59" pos:column="13">//timer.Start();</comment>
            <comment type="line" pos:line="60" pos:column="13">//var task = monitor.UpdateArchivesAsync();</comment>
            
            <comment type="line" pos:line="62" pos:column="13">//string[] spinner = new string[] { "\\\r", "|\r", "/\r" };</comment>
            <comment type="line" pos:line="63" pos:column="13">//int spinner_index = -1;</comment>
            <comment type="line" pos:line="64" pos:column="13">//while(!startupCompleted) {</comment>
            <comment type="line" pos:line="65" pos:column="13">//    spinner_index = (++spinner_index) % 3;</comment>
            <comment type="line" pos:line="66" pos:column="13">//    Console.Write("Updating archive for {0}... {1}", sourcePath, spinner[spinner_index]);</comment>
            <comment type="line" pos:line="67" pos:column="13">//    startupCompleted = mre.WaitOne(5000);</comment>
            <comment type="line" pos:line="68" pos:column="13">//}</comment>
            <comment type="line" pos:line="69" pos:column="13">//timer.Stop();</comment>
            <comment type="line" pos:line="70" pos:column="13">//Console.WriteLine("Updating archive for {0}... {1}", sourcePath, timer.Elapsed);</comment>

            <comment type="line" pos:line="72" pos:column="13">//NamespaceDefinition globalScope = null;</comment>
            <comment type="line" pos:line="73" pos:column="13">//timer.Reset();</comment>

            <comment type="line" pos:line="75" pos:column="13">//int numberOfFailures = 0;</comment>
            <comment type="line" pos:line="76" pos:column="13">//int numberOfSuccesses = 0;</comment>
            <comment type="line" pos:line="77" pos:column="13">//int numberOfFiles = 0;</comment>
            <comment type="line" pos:line="78" pos:column="13">//Dictionary&lt;string, List&lt;string&gt;&gt; errors = new Dictionary&lt;string, List&lt;string&gt;&gt;();</comment>

            <comment type="line" pos:line="80" pos:column="13">//if(!File.Exists(csvPath)) {</comment>
            <comment type="line" pos:line="81" pos:column="13">//    File.WriteAllLines(csvPath, new string[] { String.Join(",", "Project", "Files", "Failures", "Time (s)") });</comment>
            <comment type="line" pos:line="82" pos:column="13">//}</comment>
            <comment type="line" pos:line="83" pos:column="13">//using(StreamWriter fileLog = new StreamWriter(fileLogPath), csvFile = new StreamWriter(csvPath, true)) {</comment>
            <comment type="line" pos:line="84" pos:column="13">//    timer.Start();</comment>
            <comment type="line" pos:line="85" pos:column="13">//    foreach(var unit in archive.FileUnits) {</comment>
            <comment type="line" pos:line="86" pos:column="13">//        var fileName = SrcMLElement.GetFileNameForUnit(unit);</comment>
            <comment type="line" pos:line="87" pos:column="13">//        var language = SrcMLElement.GetLanguageForUnit(unit);</comment>

            <comment type="line" pos:line="89" pos:column="13">//        try {</comment>
            <comment type="line" pos:line="90" pos:column="13">//            var scopeForUnit = CodeParser[language].ParseFileUnit(unit);</comment>

            <comment type="line" pos:line="92" pos:column="13">//            if(null == globalScope) {</comment>
            <comment type="line" pos:line="93" pos:column="13">//                globalScope = scopeForUnit;</comment>
            <comment type="line" pos:line="94" pos:column="13">//            } else {</comment>
            <comment type="line" pos:line="95" pos:column="13">//                globalScope = globalScope.Merge(scopeForUnit);</comment>
            <comment type="line" pos:line="96" pos:column="13">//            }</comment>
            <comment type="line" pos:line="97" pos:column="13">//            timer.Stop();</comment>
            <comment type="line" pos:line="98" pos:column="13">//            fileLog.WriteLine("Parsing {0} PASSED", fileName);</comment>
            <comment type="line" pos:line="99" pos:column="13">//            numberOfSuccesses++;</comment>
            <comment type="line" pos:line="100" pos:column="13">//        } catch(Exception e) {</comment>
            <comment type="line" pos:line="101" pos:column="13">//            timer.Stop();</comment>
            <comment type="line" pos:line="102" pos:column="13">//            fileLog.WriteLine("Parsing {0} FAILED", fileName);</comment>
            <comment type="line" pos:line="103" pos:column="13">//            fileLog.WriteLine(e.StackTrace);</comment>
            <comment type="line" pos:line="104" pos:column="13">//            var key = e.StackTrace.Split('\n')[0].Trim();</comment>
            <comment type="line" pos:line="105" pos:column="13">//            if(!errors.ContainsKey(key)) {</comment>
            <comment type="line" pos:line="106" pos:column="13">//                errors[key] = new List&lt;string&gt;();</comment>
            <comment type="line" pos:line="107" pos:column="13">//            }</comment>
            <comment type="line" pos:line="108" pos:column="13">//            errors[key].Add(fileName);</comment>

            <comment type="line" pos:line="110" pos:column="13">//            numberOfFailures++;</comment>
            <comment type="line" pos:line="111" pos:column="13">//        } finally {</comment>
            <comment type="line" pos:line="112" pos:column="13">//            if(++numberOfFiles % 50 == 0) {</comment>
            <comment type="line" pos:line="113" pos:column="13">//                Console.Write("{0,5:N0} files completed in {1} with {2,5:N0} failures\r", numberOfFiles, timer.Elapsed, numberOfFailures);</comment>
            <comment type="line" pos:line="114" pos:column="13">//                csvFile.WriteLine(string.Join(",", sourcePath, numberOfFiles, numberOfFailures, timer.Elapsed.TotalSeconds));</comment>
            <comment type="line" pos:line="115" pos:column="13">//            }</comment>
            <comment type="line" pos:line="116" pos:column="13">//            timer.Start();</comment>
            <comment type="line" pos:line="117" pos:column="13">//        }</comment>
            <comment type="line" pos:line="118" pos:column="13">//    }</comment>
            <comment type="line" pos:line="119" pos:column="13">//}</comment>
            <comment type="line" pos:line="120" pos:column="13">//timer.Stop();</comment>
            <comment type="line" pos:line="121" pos:column="13">//Console.WriteLine("{0,5:N0} files completed in {1} with {2,5:N0} failures", numberOfFiles, timer.Elapsed, numberOfFailures);</comment>

            <comment type="line" pos:line="123" pos:column="13">//Console.WriteLine("\nSummary");</comment>
            <comment type="line" pos:line="124" pos:column="13">//Console.WriteLine("===================");</comment>

            <comment type="line" pos:line="126" pos:column="13">//Console.WriteLine("{0,10:N0} failures  ({1,8:P2})", numberOfFailures, ((float) numberOfFailures) / numberOfFiles);</comment>
            <comment type="line" pos:line="127" pos:column="13">//Console.WriteLine("{0,10:N0} successes ({1,8:P2})", numberOfSuccesses, ((float) numberOfSuccesses) / numberOfFiles);</comment>
            <comment type="line" pos:line="128" pos:column="13">//Console.WriteLine("{0} to generate data", timer.Elapsed);</comment>
            <comment type="line" pos:line="129" pos:column="13">//Console.WriteLine("See parse log at {0}", fileLogPath);</comment>

            <comment type="line" pos:line="131" pos:column="13">//OutputCallGraphByType(globalScope, jsonPath);</comment>

            <comment type="line" pos:line="133" pos:column="13">//PrintScopeReport(globalScope, sourcePath, csvDirectory);</comment>
            <comment type="line" pos:line="134" pos:column="13">//PrintMethodCallReport(globalScope, sourcePath, csvDirectory, callLogPath);</comment>
            <comment type="line" pos:line="135" pos:column="13">//TODO reimplement once merge has been implemented</comment>
            <throw pos:line="136" pos:column="13">throw <expr><op:operator pos:line="136" pos:column="19">new</op:operator> <call><name pos:line="136" pos:column="23">NotImplementedException</name><argument_list pos:line="136" pos:column="46">()</argument_list></call></expr>;</throw>
        }</block></function>

        <function><type><specifier pos:line="139" pos:column="9">private</specifier> <specifier pos:line="139" pos:column="17">static</specifier> <name pos:line="139" pos:column="24">void</name></type> <name pos:line="139" pos:column="29">Main</name><parameter_list pos:line="139" pos:column="33">(<param><decl><type><name><name pos:line="139" pos:column="34">string</name><index pos:line="139" pos:column="40">[]</index></name></type> <name pos:line="139" pos:column="43">args</name></decl></param>)</parameter_list> <block pos:line="139" pos:column="49">{
            <decl_stmt><decl><type><name pos:line="140" pos:column="13">var</name></type> <name pos:line="140" pos:column="17">projects</name> <init pos:line="140" pos:column="26">= <expr><call><name pos:line="140" pos:column="28">ReadMapping</name><argument_list pos:line="140" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="140" pos:column="40">@"C:\Workspace\source-srcmldata-mapping.txt"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="141" pos:column="13">foreach(<init><decl><type><name pos:line="141" pos:column="21">var</name></type> <name pos:line="141" pos:column="25">project</name> <range pos:line="141" pos:column="33">in <expr><name pos:line="141" pos:column="36">projects</name></expr></range></decl></init>) <block pos:line="141" pos:column="46">{
                <expr_stmt><expr><call><name pos:line="142" pos:column="17">GenerateData</name><argument_list pos:line="142" pos:column="29">(<argument><expr><name><name pos:line="142" pos:column="30">project</name><op:operator pos:line="142" pos:column="37">.</op:operator><name pos:line="142" pos:column="38">Key</name></name></expr></argument>, <argument><expr><name><name pos:line="142" pos:column="43">project</name><op:operator pos:line="142" pos:column="50">.</op:operator><name pos:line="142" pos:column="51">Value</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="142" pos:column="58">@"c:\Workspace\SrcMLData"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>

        <function><type><specifier pos:line="146" pos:column="9">private</specifier> <specifier pos:line="146" pos:column="17">static</specifier> <name pos:line="146" pos:column="24">void</name></type> <name pos:line="146" pos:column="29">OutputCallGraphByType</name><parameter_list pos:line="146" pos:column="50">(<param><decl><type><name pos:line="146" pos:column="51">NamespaceDefinition</name></type> <name pos:line="146" pos:column="71">globalScope</name></decl></param>, <param><decl><type><name pos:line="146" pos:column="84">string</name></type> <name pos:line="146" pos:column="91">jsonPath</name></decl></param>)</parameter_list> <block pos:line="146" pos:column="101">{
            <comment type="line" pos:line="147" pos:column="13">//TODO reimplement once MethodCalls has been reimplemented</comment>
            <comment type="line" pos:line="148" pos:column="13">//using(var writer = new JsonTextWriter(new StreamWriter(jsonPath))) {</comment>
            <comment type="line" pos:line="149" pos:column="13">//    writer.WriteStartArray();</comment>
            <comment type="line" pos:line="150" pos:column="13">//    foreach(var typeDefinition in globalScope.GetDescendantsAndSelf&lt;TypeDefinition&gt;()) {</comment>
            <comment type="line" pos:line="151" pos:column="13">//        writer.WriteStartObject();</comment>
            <comment type="line" pos:line="152" pos:column="13">//        writer.WritePropertyName("name");</comment>
            <comment type="line" pos:line="153" pos:column="13">//        writer.WriteValue(typeDefinition.GetFullName());</comment>

            <comment type="line" pos:line="155" pos:column="13">//        var calls = from scope in typeDefinition.GetDescendantsAndSelf()</comment>
            <comment type="line" pos:line="156" pos:column="13">//                    from call in scope.MethodCalls</comment>
            <comment type="line" pos:line="157" pos:column="13">//                    select call;</comment>

            <comment type="line" pos:line="159" pos:column="13">//        writer.WritePropertyName("size");</comment>
            <comment type="line" pos:line="160" pos:column="13">//        writer.WriteValue(calls.Count());</comment>

            <comment type="line" pos:line="162" pos:column="13">//        // find the parent type of all the calls</comment>
            <comment type="line" pos:line="163" pos:column="13">//        var callMatches = from call in calls</comment>
            <comment type="line" pos:line="164" pos:column="13">//                          let match = call.FindMatches().FirstOrDefault()</comment>
            <comment type="line" pos:line="165" pos:column="13">//                          where match != null</comment>
            <comment type="line" pos:line="166" pos:column="13">//                          let parentOfMatch = match.GetFirstParent&lt;ITypeDefinition&gt;()</comment>
            <comment type="line" pos:line="167" pos:column="13">//                          where parentOfMatch != null</comment>
            <comment type="line" pos:line="168" pos:column="13">//                          select parentOfMatch.GetFullName();</comment>
            <comment type="line" pos:line="169" pos:column="13">//        // output the calls property and array</comment>
            <comment type="line" pos:line="170" pos:column="13">//        writer.WritePropertyName("calls");</comment>
            <comment type="line" pos:line="171" pos:column="13">//        writer.WriteStartArray();</comment>
            <comment type="line" pos:line="172" pos:column="13">//        foreach(var call in callMatches) {</comment>
            <comment type="line" pos:line="173" pos:column="13">//            writer.WriteValue(call);</comment>
            <comment type="line" pos:line="174" pos:column="13">//        }</comment>
            <comment type="line" pos:line="175" pos:column="13">//        writer.WriteEndArray();</comment>
            <comment type="line" pos:line="176" pos:column="13">//        writer.WriteEndObject();</comment>
            <comment type="line" pos:line="177" pos:column="13">//    }</comment>
            <comment type="line" pos:line="178" pos:column="13">//    writer.WriteEndArray();</comment>
            <comment type="line" pos:line="179" pos:column="13">//}</comment>
            <throw pos:line="180" pos:column="13">throw <expr><op:operator pos:line="180" pos:column="19">new</op:operator> <call><name pos:line="180" pos:column="23">NotImplementedException</name><argument_list pos:line="180" pos:column="46">()</argument_list></call></expr>;</throw>
        }</block></function>

        <function><type><specifier pos:line="183" pos:column="9">private</specifier> <specifier pos:line="183" pos:column="17">static</specifier> <name pos:line="183" pos:column="24">void</name></type> <name pos:line="183" pos:column="29">PrintMethodCallReport</name><parameter_list pos:line="183" pos:column="50">(<param><decl><type><name pos:line="183" pos:column="51">NamespaceDefinition</name></type> <name pos:line="183" pos:column="71">globalScope</name></decl></param>, <param><decl><type><name pos:line="183" pos:column="84">string</name></type> <name pos:line="183" pos:column="91">sourcePath</name></decl></param>, <param><decl><type><name pos:line="183" pos:column="103">string</name></type> <name pos:line="183" pos:column="110">csvDirectory</name></decl></param>, <param><decl><type><name pos:line="183" pos:column="124">string</name></type> <name pos:line="183" pos:column="131">callLogPath</name></decl></param>)</parameter_list> <block pos:line="183" pos:column="144">{
            <comment type="line" pos:line="184" pos:column="13">//TODO reimpleement once visitors have been modified</comment>
            <comment type="line" pos:line="185" pos:column="13">//var csvPath = Path.Combine(csvDirectory, "methodcalls.csv");</comment>
            <comment type="line" pos:line="186" pos:column="13">//Console.WriteLine("\nMethod Call Report");</comment>
            <comment type="line" pos:line="187" pos:column="13">//Console.WriteLine("===============");</comment>
            <comment type="line" pos:line="188" pos:column="13">//var methodCalls = from scope in VariableScopeIterator.Visit(globalScope)</comment>
            <comment type="line" pos:line="189" pos:column="13">//                  from call in scope.MethodCalls</comment>
            <comment type="line" pos:line="190" pos:column="13">//                  select call;</comment>

            <comment type="line" pos:line="192" pos:column="13">//int numMethodCalls = 0;</comment>
            <comment type="line" pos:line="193" pos:column="13">//int numMatchedMethodCalls = 0;</comment>
            <comment type="line" pos:line="194" pos:column="13">//Stopwatch sw = new Stopwatch();</comment>

            <comment type="line" pos:line="196" pos:column="13">//using(var callLog = new StreamWriter(callLogPath)) {</comment>
            <comment type="line" pos:line="197" pos:column="13">//    foreach(var call in methodCalls) {</comment>
            <comment type="line" pos:line="198" pos:column="13">//        sw.Start();</comment>
            <comment type="line" pos:line="199" pos:column="13">//        var match = call.FindMatches().FirstOrDefault();</comment>
            <comment type="line" pos:line="200" pos:column="13">//        sw.Stop();</comment>
            <comment type="line" pos:line="201" pos:column="13">//        numMethodCalls++;</comment>
            <comment type="line" pos:line="202" pos:column="13">//        if(null != match) {</comment>
            <comment type="line" pos:line="203" pos:column="13">//            numMatchedMethodCalls++;</comment>
            <comment type="line" pos:line="204" pos:column="13">//            callLog.WriteLine("{0} ({1}:{2}) -&gt; {3} ({4}:{5})", call.Name, call.Location.SourceFileName, call.Location.StartingLineNumber, match.Name, match.PrimaryLocation.SourceFileName, match.PrimaryLocation.StartingLineNumber);</comment>
            <comment type="line" pos:line="205" pos:column="13">//        }</comment>
            <comment type="line" pos:line="206" pos:column="13">//    }</comment>
            <comment type="line" pos:line="207" pos:column="13">//}</comment>

            <comment type="line" pos:line="209" pos:column="13">//Console.WriteLine("{0,10:N0} method calls", numMethodCalls);</comment>
            <comment type="line" pos:line="210" pos:column="13">//Console.WriteLine("{0,10:N0} matched method calls ({1,8:P2})", numMatchedMethodCalls, ((float) numMatchedMethodCalls) / numMethodCalls);</comment>
            <comment type="line" pos:line="211" pos:column="13">//Console.WriteLine("{0,10:N0} matches / millisecond ({1,7:N0} ms elapsed)", ((float) numMethodCalls) / sw.ElapsedMilliseconds, sw.ElapsedMilliseconds);</comment>
            <comment type="line" pos:line="212" pos:column="13">//Console.WriteLine("See matched method calls in {0}", callLogPath);</comment>

            <comment type="line" pos:line="214" pos:column="13">//if(!File.Exists(csvPath)) {</comment>
            <comment type="line" pos:line="215" pos:column="13">//    File.WriteAllText(csvPath, String.Format("{0}{1}", String.Join(",", "Project", "Method Calls", "Matched Method Calls", "Time (ms)"), Environment.NewLine));</comment>
            <comment type="line" pos:line="216" pos:column="13">//}</comment>
            <comment type="line" pos:line="217" pos:column="13">//File.AppendAllText(csvPath, String.Format("{0}{1}", String.Join(",", sourcePath, numMethodCalls, numMatchedMethodCalls, sw.ElapsedMilliseconds), Environment.NewLine));</comment>
            <throw pos:line="218" pos:column="13">throw <expr><op:operator pos:line="218" pos:column="19">new</op:operator> <call><name pos:line="218" pos:column="23">NotImplementedException</name><argument_list pos:line="218" pos:column="46">()</argument_list></call></expr>;</throw>
        }</block></function>

        <function><type><specifier pos:line="221" pos:column="9">private</specifier> <specifier pos:line="221" pos:column="17">static</specifier> <name pos:line="221" pos:column="24">void</name></type> <name pos:line="221" pos:column="29">PrintScopeReport</name><parameter_list pos:line="221" pos:column="45">(<param><decl><type><name pos:line="221" pos:column="46">NamespaceDefinition</name></type> <name pos:line="221" pos:column="66">globalScope</name></decl></param>, <param><decl><type><name pos:line="221" pos:column="79">string</name></type> <name pos:line="221" pos:column="86">sourcePath</name></decl></param>, <param><decl><type><name pos:line="221" pos:column="98">string</name></type> <name pos:line="221" pos:column="105">csvDirectory</name></decl></param>)</parameter_list> <block pos:line="221" pos:column="119">{
            <comment type="line" pos:line="222" pos:column="13">//var csvPath = Path.Combine(csvDirectory, "scopes.csv");</comment>
            <comment type="line" pos:line="223" pos:column="13">//Console.WriteLine("\nScope Report");</comment>
            <comment type="line" pos:line="224" pos:column="13">//Console.WriteLine("===============");</comment>

            <comment type="line" pos:line="226" pos:column="13">//var allScopes = VariableScopeIterator.Visit(globalScope);</comment>
            <comment type="line" pos:line="227" pos:column="13">//int numScopes = allScopes.Count();</comment>
            <comment type="line" pos:line="228" pos:column="13">//int numNamedScopes = allScopes.OfType&lt;INamedScope&gt;().Count();</comment>
            <comment type="line" pos:line="229" pos:column="13">//int numNamespaces = allScopes.OfType&lt;NamespaceDefinition&gt;().Count();</comment>
            <comment type="line" pos:line="230" pos:column="13">//int numTypes = allScopes.OfType&lt;ITypeDefinition&gt;().Count();</comment>
            <comment type="line" pos:line="231" pos:column="13">//int numMethods = allScopes.OfType&lt;IMethodDefinition&gt;().Count();</comment>

            <comment type="line" pos:line="233" pos:column="13">//Console.WriteLine("{0,10:N0} scopes", numScopes);</comment>

            <comment type="line" pos:line="235" pos:column="13">//Console.WriteLine("{0,10:N0} named scopes", numNamedScopes);</comment>

            <comment type="line" pos:line="237" pos:column="13">//Console.WriteLine("{0,10:N0} namespaces", numNamespaces);</comment>
            <comment type="line" pos:line="238" pos:column="13">//Console.WriteLine("{0,10:N0} types", numTypes);</comment>
            <comment type="line" pos:line="239" pos:column="13">//Console.WriteLine("{0,10:N0} methods", numMethods);</comment>
            <comment type="line" pos:line="240" pos:column="13">//if(!File.Exists(csvPath)) {</comment>
            <comment type="line" pos:line="241" pos:column="13">//    File.WriteAllText(csvPath, String.Format("{0}{1}", String.Join(",", "Project", "Scopes", "Named Scopes", "Namespaces", "Types", "Methods"), Environment.NewLine));</comment>
            <comment type="line" pos:line="242" pos:column="13">//}</comment>
            <comment type="line" pos:line="243" pos:column="13">//File.AppendAllText(csvPath, String.Format("{0}{1}", String.Join(",", sourcePath, numScopes, numNamedScopes, numNamespaces, numTypes, numMethods), Environment.NewLine));</comment>
            <throw pos:line="244" pos:column="13">throw <expr><op:operator pos:line="244" pos:column="19">new</op:operator> <call><name pos:line="244" pos:column="23">NotImplementedException</name><argument_list pos:line="244" pos:column="46">()</argument_list></call></expr>;</throw>
        }</block></function>

        <function><type><specifier pos:line="247" pos:column="9">private</specifier> <specifier pos:line="247" pos:column="17">static</specifier> <name><name pos:line="247" pos:column="24">Dictionary</name><argument_list pos:line="247" pos:column="34">&lt;<argument><name pos:line="247" pos:column="35">string</name></argument>, <argument><name pos:line="247" pos:column="43">string</name></argument>&gt;</argument_list></name></type> <name pos:line="247" pos:column="51">ReadMapping</name><parameter_list pos:line="247" pos:column="62">(<param><decl><type><name pos:line="247" pos:column="63">string</name></type> <name pos:line="247" pos:column="70">mappingFilePath</name></decl></param>)</parameter_list> <block pos:line="247" pos:column="87">{
            <decl_stmt><decl><type><name pos:line="248" pos:column="13">var</name></type> <name pos:line="248" pos:column="17">pairs</name> <init pos:line="248" pos:column="23">= <expr><linq><from pos:line="248" pos:column="25">from <expr><name pos:line="248" pos:column="30">line</name></expr> <in pos:line="248" pos:column="35">in <expr><call><name><name pos:line="248" pos:column="38">File</name><op:operator pos:line="248" pos:column="42">.</op:operator><name pos:line="248" pos:column="43">ReadAllLines</name></name><argument_list pos:line="248" pos:column="55">(<argument><expr><name pos:line="248" pos:column="56">mappingFilePath</name></expr></argument>)</argument_list></call></expr></in></from>
                        <let pos:line="249" pos:column="25">let <expr><name pos:line="249" pos:column="29">parts</name> <op:operator pos:line="249" pos:column="35">=</op:operator> <call><name><name pos:line="249" pos:column="37">line</name><op:operator pos:line="249" pos:column="41">.</op:operator><name pos:line="249" pos:column="42">Split</name></name><argument_list pos:line="249" pos:column="47">(<argument><expr><lit:literal type="char" pos:line="249" pos:column="48">'|'</lit:literal></expr></argument>)</argument_list></call></expr></let>
                        <where pos:line="250" pos:column="25">where <expr><name><name pos:line="250" pos:column="31">parts</name><op:operator pos:line="250" pos:column="36">.</op:operator><name pos:line="250" pos:column="37">Length</name></name> <op:operator pos:line="250" pos:column="44">==</op:operator> <lit:literal type="number" pos:line="250" pos:column="47">2</lit:literal></expr></where>
                        <select pos:line="251" pos:column="25">select <expr><op:operator pos:line="251" pos:column="32">new</op:operator> <block pos:line="251" pos:column="36">{ <expr><name pos:line="251" pos:column="38">Key</name> <op:operator pos:line="251" pos:column="42">=</op:operator> <name><name pos:line="251" pos:column="44">parts</name><index pos:line="251" pos:column="49">[<expr><lit:literal type="number" pos:line="251" pos:column="50">0</lit:literal></expr>]</index></name></expr>, <expr><name pos:line="251" pos:column="54">Value</name> <op:operator pos:line="251" pos:column="60">=</op:operator> <name><name pos:line="251" pos:column="62">parts</name><index pos:line="251" pos:column="67">[<expr><lit:literal type="number" pos:line="251" pos:column="68">1</lit:literal></expr>]</index></name></expr> }</block></expr></select></linq></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="252" pos:column="13">var</name></type> <name pos:line="252" pos:column="17">mapping</name> <init pos:line="252" pos:column="25">= <expr><op:operator pos:line="252" pos:column="27">new</op:operator> <call><name><name pos:line="252" pos:column="31">Dictionary</name><argument_list pos:line="252" pos:column="41">&lt;<argument><name pos:line="252" pos:column="42">string</name></argument>, <argument><name pos:line="252" pos:column="50">string</name></argument>&gt;</argument_list></name><argument_list pos:line="252" pos:column="57">(<argument><expr><call><name><name pos:line="252" pos:column="58">pairs</name><op:operator pos:line="252" pos:column="63">.</op:operator><name pos:line="252" pos:column="64">Count</name></name><argument_list pos:line="252" pos:column="69">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="253" pos:column="13">foreach(<init><decl><type><name pos:line="253" pos:column="21">var</name></type> <name pos:line="253" pos:column="25">pair</name> <range pos:line="253" pos:column="30">in <expr><name pos:line="253" pos:column="33">pairs</name></expr></range></decl></init>) <block pos:line="253" pos:column="40">{
                <expr_stmt><expr><call><name><name pos:line="254" pos:column="17">mapping</name><op:operator pos:line="254" pos:column="24">.</op:operator><name pos:line="254" pos:column="25">Add</name></name><argument_list pos:line="254" pos:column="28">(<argument><expr><name><name pos:line="254" pos:column="29">pair</name><op:operator pos:line="254" pos:column="33">.</op:operator><name pos:line="254" pos:column="34">Key</name></name></expr></argument>, <argument><expr><name><name pos:line="254" pos:column="39">pair</name><op:operator pos:line="254" pos:column="43">.</op:operator><name pos:line="254" pos:column="44">Value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
            <return pos:line="256" pos:column="13">return <expr><name pos:line="256" pos:column="20">mapping</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
