<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data\AbstractWorkingSet.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2014 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *  Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">System</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Collections</name><op:operator pos:line="13" pos:column="25">.</op:operator><name pos:line="13" pos:column="26">Generic</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">IO</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Linq</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Text</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Threading</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Threading</name><op:operator pos:line="18" pos:column="23">.</op:operator><name pos:line="18" pos:column="24">Tasks</name></name>;</using>

<namespace pos:line="20" pos:column="1">namespace <name><name pos:line="20" pos:column="11">ABB</name><op:operator pos:line="20" pos:column="14">.</op:operator><name pos:line="20" pos:column="15">SrcML</name><op:operator pos:line="20" pos:column="20">.</op:operator><name pos:line="20" pos:column="21">Data</name></name> <block pos:line="20" pos:column="26">{
    <comment type="line" pos:line="21" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="22" pos:column="5">/// Working set objects track a given &lt;see cref="Archive"&gt;data archive&lt;/see&gt;. They maintain a merged scope based on files</comment>
    <comment type="line" pos:line="23" pos:column="5">/// in &lt;see cref="Archive"/&gt;. Sub-classes should maintain a subset of the &lt;see cref="Archive"/&gt; files  for use by their clients</comment>
    <comment type="line" pos:line="24" pos:column="5">/// Working set implementations should be changed by doing the following:</comment>
    <comment type="line" pos:line="25" pos:column="5">/// </comment>
    <comment type="line" pos:line="26" pos:column="5">/// &lt;list type="number"&gt;</comment>
    <comment type="line" pos:line="27" pos:column="5">/// &lt;item&gt;&lt;description&gt;Obtain a write lock via &lt;see cref="TryObtainWriteLock"/&gt;&lt;/description&gt;&lt;/item&gt;</comment>
    <comment type="line" pos:line="28" pos:column="5">/// &lt;item&gt;&lt;description&gt;&lt;/description&gt;Modify the method possibly via calls to &lt;see cref="TryAddOrUpdateFile"/&gt;,</comment>
    <comment type="line" pos:line="29" pos:column="5">/// &lt;see cref="TryRemoveFile"/&gt;, and &lt;see cref="ContainsFile(NamespaceDefinition,string)"/&gt;&lt;/item&gt;</comment>
    <comment type="line" pos:line="30" pos:column="5">/// &lt;item&gt;&lt;description&gt;Release the write lock &lt;see cref="ReleaseWriteLock"/&gt;&lt;/description&gt;&lt;/item&gt;</comment>
    <comment type="line" pos:line="31" pos:column="5">/// &lt;item&gt;&lt;description&gt;If the working set has changed, call &lt;see cref="OnChanged"/&gt; to notify subscribed clients&lt;/description&gt;&lt;/item&gt;</comment>
    <comment type="line" pos:line="32" pos:column="5">/// &lt;/list&gt;</comment>
    <comment type="line" pos:line="33" pos:column="5">/// </comment>
    <comment type="line" pos:line="34" pos:column="5">/// Clients that use a working set can obtain the a &lt;see cref="NamespaceDefinition.Merge(NamespaceDefinition)"&gt;merged scope&lt;/see&gt; for</comment>
    <comment type="line" pos:line="35" pos:column="5">/// the working set by calling &lt;see cref="TryObtainReadLock"/&gt; and &lt;see cref="ReleaseReadLock"/&gt;.</comment>
    <comment type="line" pos:line="36" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="37" pos:column="5">public</specifier> <specifier pos:line="37" pos:column="12">abstract</specifier> class <name pos:line="37" pos:column="27">AbstractWorkingSet</name> <super pos:line="37" pos:column="46">: <name pos:line="37" pos:column="48">IDisposable</name></super> <block pos:line="37" pos:column="60">{
        <decl_stmt><decl><type><specifier pos:line="38" pos:column="9">private</specifier> <name pos:line="38" pos:column="17">GlobalScopeManager</name></type> <name pos:line="38" pos:column="36">_globalScopeManager</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="39" pos:column="9">private</specifier> <name pos:line="39" pos:column="17">ReaderWriterLockSlim</name></type> <name pos:line="39" pos:column="38">_globalScopeLock</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="40" pos:column="9">private</specifier> <name pos:line="40" pos:column="17">bool</name></type> <name pos:line="40" pos:column="22">_isMonitoring</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="41" pos:column="9">private</specifier> <name pos:line="41" pos:column="17">bool</name></type> <name pos:line="41" pos:column="22">_isUpdating</name></decl>;</decl_stmt>
        
        <comment type="line" pos:line="43" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="44" pos:column="9">/// Event that indicates this working set has changed</comment>
        <comment type="line" pos:line="45" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="46" pos:column="9">public</specifier> <specifier pos:line="46" pos:column="16">event</specifier> <name pos:line="46" pos:column="22">EventHandler</name></type> <name pos:line="46" pos:column="35">Changed</name></decl>;</decl_stmt>

        <comment type="line" pos:line="48" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="49" pos:column="9">/// Event that indicates that this working set is not monitoring &lt;see cref="Archive"/&gt;</comment>
        <comment type="line" pos:line="50" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="51" pos:column="9">public</specifier> <specifier pos:line="51" pos:column="16">event</specifier> <name pos:line="51" pos:column="22">EventHandler</name></type> <name pos:line="51" pos:column="35">MonitoringStopped</name></decl>;</decl_stmt>

        <comment type="line" pos:line="53" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="54" pos:column="9">/// Event that indicates that this working has started monitoring &lt;see cref="Archive"/&gt;</comment>
        <comment type="line" pos:line="55" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="56" pos:column="9">public</specifier> <specifier pos:line="56" pos:column="16">event</specifier> <name pos:line="56" pos:column="22">EventHandler</name></type> <name pos:line="56" pos:column="35">MonitoringStarted</name></decl>;</decl_stmt>
        
        <comment type="line" pos:line="58" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="59" pos:column="9">/// Event that indicates that an update has completed</comment>
        <comment type="line" pos:line="60" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="61" pos:column="9">public</specifier> <specifier pos:line="61" pos:column="16">event</specifier> <name pos:line="61" pos:column="22">EventHandler</name></type> <name pos:line="61" pos:column="35">UpdateCompleted</name></decl>;</decl_stmt>

        <comment type="line" pos:line="63" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="64" pos:column="9">/// Event that indicates that an update has started</comment>
        <comment type="line" pos:line="65" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="66" pos:column="9">public</specifier> <specifier pos:line="66" pos:column="16">event</specifier> <name pos:line="66" pos:column="22">EventHandler</name></type> <name pos:line="66" pos:column="35">UpdateStarted</name></decl>;</decl_stmt>

        <comment type="line" pos:line="68" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="69" pos:column="9">/// Data archive for this working set</comment>
        <comment type="line" pos:line="70" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="71" pos:column="9">public</specifier> <name pos:line="71" pos:column="16">DataArchive</name></type> <name pos:line="71" pos:column="28">Archive</name> <block pos:line="71" pos:column="36">{ <function_decl><name pos:line="71" pos:column="38">get</name>;</function_decl> <function_decl><name pos:line="71" pos:column="43">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="73" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="74" pos:column="9">/// The task factory to use for asynchronous methods</comment>
        <comment type="line" pos:line="75" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="76" pos:column="9">public</specifier> <name pos:line="76" pos:column="16">TaskFactory</name></type> <name pos:line="76" pos:column="28">Factory</name> <block pos:line="76" pos:column="36">{ <function_decl><name pos:line="76" pos:column="38">get</name>;</function_decl> <function_decl><name pos:line="76" pos:column="43">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="78" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="79" pos:column="9">/// Returns true if &lt;see cref="Dispose"/&gt; has been called</comment>
        <comment type="line" pos:line="80" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="81" pos:column="9">protected</specifier> <name pos:line="81" pos:column="19">bool</name></type> <name pos:line="81" pos:column="24">IsDisposed</name> <block pos:line="81" pos:column="35">{ <function_decl><name pos:line="81" pos:column="37">get</name>;</function_decl> <function_decl><specifier pos:line="81" pos:column="42">private</specifier> <name pos:line="81" pos:column="50">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="83" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="84" pos:column="9">/// True if the working set is currently monitoring &lt;see cref="Archive"/&gt;; false, otherwise</comment>
        <comment type="line" pos:line="85" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="86" pos:column="9">public</specifier> <name pos:line="86" pos:column="16">bool</name></type> <name pos:line="86" pos:column="21">IsMonitoring</name> <block pos:line="86" pos:column="34">{
            <function><name pos:line="87" pos:column="13">get</name> <block pos:line="87" pos:column="17">{ <return pos:line="87" pos:column="19">return <expr><name pos:line="87" pos:column="26">_isMonitoring</name></expr>;</return> }</block></function>
            <function><specifier pos:line="88" pos:column="13">protected</specifier> <name pos:line="88" pos:column="23">set</name> <block pos:line="88" pos:column="27">{ <expr_stmt><expr><call><name pos:line="88" pos:column="29">SetBooleanField</name><argument_list pos:line="88" pos:column="44">(<argument><expr pos:line="88" pos:column="45">ref <name pos:line="88" pos:column="49">_isMonitoring</name></expr></argument>, <argument><expr><name pos:line="88" pos:column="64">value</name></expr></argument>, <argument><expr><name pos:line="88" pos:column="71">OnMonitoringStarted</name></expr></argument>, <argument><expr><name pos:line="88" pos:column="92">OnMonitoringStopped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="91" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="92" pos:column="9">/// True if this working set is currently updating; false otherwise</comment>
        <comment type="line" pos:line="93" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="94" pos:column="9">public</specifier> <name pos:line="94" pos:column="16">bool</name></type> <name pos:line="94" pos:column="21">IsUpdating</name> <block pos:line="94" pos:column="32">{
            <function><name pos:line="95" pos:column="13">get</name> <block pos:line="95" pos:column="17">{ <return pos:line="95" pos:column="19">return <expr><name pos:line="95" pos:column="26">_isUpdating</name></expr>;</return> }</block></function>
            <function><specifier pos:line="96" pos:column="13">protected</specifier> <name pos:line="96" pos:column="23">set</name> <block pos:line="96" pos:column="27">{ <expr_stmt><expr><call><name pos:line="96" pos:column="29">SetBooleanField</name><argument_list pos:line="96" pos:column="44">(<argument><expr pos:line="96" pos:column="45">ref <name pos:line="96" pos:column="49">_isUpdating</name></expr></argument>, <argument><expr><name pos:line="96" pos:column="62">value</name></expr></argument>, <argument><expr><name pos:line="96" pos:column="69">OnUpdateStarted</name></expr></argument>, <argument><expr><name pos:line="96" pos:column="86">OnUpdateCompleted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
        }</block></decl></decl_stmt>
        <comment type="line" pos:line="98" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="99" pos:column="9">/// If true, this working set will use asynchronous methods in &lt;see cref="Archive_FileChanged"/&gt;. By default, this is false.</comment>
        <comment type="line" pos:line="100" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="101" pos:column="9">public</specifier> <name pos:line="101" pos:column="16">bool</name></type> <name pos:line="101" pos:column="21">UseAsynchronousMethods</name> <block pos:line="101" pos:column="44">{ <function_decl><name pos:line="101" pos:column="46">get</name>;</function_decl> <function_decl><name pos:line="101" pos:column="51">set</name>;</function_decl> }</block></decl></decl_stmt>

        <comment type="line" pos:line="103" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="104" pos:column="9">/// Creates a new working set object</comment>
        <comment type="line" pos:line="105" pos:column="9">/// &lt;/summary&gt;</comment>
        <constructor><specifier pos:line="106" pos:column="9">protected</specifier> <name pos:line="106" pos:column="19">AbstractWorkingSet</name><parameter_list pos:line="106" pos:column="37">()</parameter_list> <member_list pos:line="106" pos:column="40">: <call><name pos:line="106" pos:column="42">this</name><argument_list pos:line="106" pos:column="46">(<argument><expr><name pos:line="106" pos:column="47">null</name></expr></argument>, <argument><expr><name><name pos:line="106" pos:column="53">Task</name><op:operator pos:line="106" pos:column="57">.</op:operator><name pos:line="106" pos:column="58">Factory</name></name></expr></argument>)</argument_list></call> </member_list><block pos:line="106" pos:column="67">{ }</block></constructor>

        <comment type="line" pos:line="108" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="109" pos:column="9">/// Creates a new working set object</comment>
        <comment type="line" pos:line="110" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="111" pos:column="9">/// &lt;param name="archive"&gt;The archive to monitor&lt;/param&gt;</comment>
        <comment type="line" pos:line="112" pos:column="9">/// &lt;param name="factory"&gt;The task factory&lt;/param&gt;</comment>
        <constructor><specifier pos:line="113" pos:column="9">protected</specifier> <name pos:line="113" pos:column="19">AbstractWorkingSet</name><parameter_list pos:line="113" pos:column="37">(<param><decl><type><name pos:line="113" pos:column="38">DataArchive</name></type> <name pos:line="113" pos:column="50">archive</name></decl></param>, <param><decl><type><name pos:line="113" pos:column="59">TaskFactory</name></type> <name pos:line="113" pos:column="71">factory</name></decl></param>)</parameter_list> <block pos:line="113" pos:column="80">{
            <expr_stmt><expr><name pos:line="114" pos:column="13">Archive</name> <op:operator pos:line="114" pos:column="21">=</op:operator> <name pos:line="114" pos:column="23">archive</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="115" pos:column="13">Factory</name> <op:operator pos:line="115" pos:column="21">=</op:operator> <name pos:line="115" pos:column="23">factory</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="116" pos:column="13">IsDisposed</name> <op:operator pos:line="116" pos:column="24">=</op:operator> <lit:literal type="boolean" pos:line="116" pos:column="26">false</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="117" pos:column="13">UseAsynchronousMethods</name> <op:operator pos:line="117" pos:column="36">=</op:operator> <lit:literal type="boolean" pos:line="117" pos:column="38">false</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="118" pos:column="13">_globalScopeManager</name> <op:operator pos:line="118" pos:column="33">=</op:operator> <op:operator pos:line="118" pos:column="35">new</op:operator> <call><name pos:line="118" pos:column="39">GlobalScopeManager</name><argument_list pos:line="118" pos:column="57">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="119" pos:column="13">_globalScopeLock</name> <op:operator pos:line="119" pos:column="30">=</op:operator> <op:operator pos:line="119" pos:column="32">new</op:operator> <call><name pos:line="119" pos:column="36">ReaderWriterLockSlim</name><argument_list pos:line="119" pos:column="56">()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="122" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="123" pos:column="9">/// Checks to see if the working set contains &lt;paramref name="sourceFileName"/&gt;. This calls </comment>
        <comment type="line" pos:line="124" pos:column="9">/// &lt;see cref="ContainsFile(string,int)"/&gt; with &lt;see cref="Timeout.Infinite"/&gt; for the timeout.</comment>
        <comment type="line" pos:line="125" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="126" pos:column="9">/// &lt;param name="sourceFileName"&gt;The source file name to search for&lt;/param&gt;</comment>
        <comment type="line" pos:line="127" pos:column="9">/// &lt;returns&gt;True if the working set contains &lt;paramref name="sourceFileName"/&gt;, False if not&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="128" pos:column="9">public</specifier> <specifier pos:line="128" pos:column="16">virtual</specifier> <name pos:line="128" pos:column="24">bool</name></type> <name pos:line="128" pos:column="29">ContainsFile</name><parameter_list pos:line="128" pos:column="41">(<param><decl><type><name pos:line="128" pos:column="42">string</name></type> <name pos:line="128" pos:column="49">sourceFileName</name></decl></param>)</parameter_list> <block pos:line="128" pos:column="65">{
            <return pos:line="129" pos:column="13">return <expr><call><name pos:line="129" pos:column="20">ContainsFile</name><argument_list pos:line="129" pos:column="32">(<argument><expr><name pos:line="129" pos:column="33">sourceFileName</name></expr></argument>, <argument><expr><name><name pos:line="129" pos:column="49">Timeout</name><op:operator pos:line="129" pos:column="56">.</op:operator><name pos:line="129" pos:column="57">Infinite</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="132" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="133" pos:column="9">/// Checks to see if the working set contains &lt;paramref name="sourceFileName"/&gt;</comment>
        <comment type="line" pos:line="134" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="135" pos:column="9">/// &lt;param name="sourceFileName"&gt;The source file name to search for&lt;/param&gt;</comment>
        <comment type="line" pos:line="136" pos:column="9">/// &lt;param name="readLockTimeout"&gt;The timeout in milliseconds to wait for the read lock&lt;/param&gt;</comment>
        <comment type="line" pos:line="137" pos:column="9">/// &lt;returns&gt;True if the working set contains &lt;paramref name="sourceFileName"/&gt;, False otherwise&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="138" pos:column="9">public</specifier> <specifier pos:line="138" pos:column="16">virtual</specifier> <name pos:line="138" pos:column="24">bool</name></type> <name pos:line="138" pos:column="29">ContainsFile</name><parameter_list pos:line="138" pos:column="41">(<param><decl><type><name pos:line="138" pos:column="42">string</name></type> <name pos:line="138" pos:column="49">sourceFileName</name></decl></param>, <param><decl><type><name pos:line="138" pos:column="65">int</name></type> <name pos:line="138" pos:column="69">readLockTimeout</name></decl></param>)</parameter_list> <block pos:line="138" pos:column="86">{
            <if pos:line="139" pos:column="13">if<condition pos:line="139" pos:column="15">(<expr><name pos:line="139" pos:column="16">IsDisposed</name></expr>)</condition><then pos:line="139" pos:column="27"> <block pos:line="139" pos:column="28">{ <throw pos:line="139" pos:column="30">throw <expr><op:operator pos:line="139" pos:column="36">new</op:operator> <call><name pos:line="139" pos:column="40">ObjectDisposedException</name><argument_list pos:line="139" pos:column="63">(<argument><expr><name pos:line="139" pos:column="64">null</name></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>
            <if pos:line="140" pos:column="13">if<condition pos:line="140" pos:column="15">(<expr><call><name><name pos:line="140" pos:column="16">String</name><op:operator pos:line="140" pos:column="22">.</op:operator><name pos:line="140" pos:column="23">IsNullOrWhiteSpace</name></name><argument_list pos:line="140" pos:column="41">(<argument><expr><name pos:line="140" pos:column="42">sourceFileName</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="140" pos:column="58"> <block pos:line="140" pos:column="59">{ <throw pos:line="140" pos:column="61">throw <expr><op:operator pos:line="140" pos:column="67">new</op:operator> <call><name pos:line="140" pos:column="71">ArgumentException</name><argument_list pos:line="140" pos:column="88">(<argument><expr><lit:literal type="string" pos:line="140" pos:column="89">"Argument is null or empty"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="140" pos:column="118">"sourceFileName"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>

            <decl_stmt><decl><type><name pos:line="142" pos:column="13">NamespaceDefinition</name></type> <name pos:line="142" pos:column="33">globalScope</name></decl>;</decl_stmt>

            <if pos:line="144" pos:column="13">if<condition pos:line="144" pos:column="15">(<expr><call><name pos:line="144" pos:column="16">TryObtainReadLock</name><argument_list pos:line="144" pos:column="33">(<argument><expr><name pos:line="144" pos:column="34">readLockTimeout</name></expr></argument>, <argument><expr pos:line="144" pos:column="51">out <name pos:line="144" pos:column="55">globalScope</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="144" pos:column="68"> <block pos:line="144" pos:column="69">{
                <try pos:line="145" pos:column="17">try <block pos:line="145" pos:column="21">{
                    <return pos:line="146" pos:column="21">return <expr><call><name pos:line="146" pos:column="28">ContainsFile</name><argument_list pos:line="146" pos:column="40">(<argument><expr><name pos:line="146" pos:column="41">globalScope</name></expr></argument>, <argument><expr><name pos:line="146" pos:column="54">sourceFileName</name></expr></argument>)</argument_list></call></expr>;</return>
                }</block> <finally pos:line="147" pos:column="19">finally <block pos:line="147" pos:column="27">{
                    <expr_stmt><expr><call><name pos:line="148" pos:column="21">ReleaseReadLock</name><argument_list pos:line="148" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
                }</block></finally></try>
            }</block></then></if>
            <throw pos:line="151" pos:column="13">throw <expr><op:operator pos:line="151" pos:column="19">new</op:operator> <call><name pos:line="151" pos:column="23">TimeoutException</name><argument_list pos:line="151" pos:column="39">()</argument_list></call></expr>;</throw>
        }</block></function>

        <comment type="line" pos:line="154" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="155" pos:column="9">/// Sets up the working set</comment>
        <comment type="line" pos:line="156" pos:column="9">/// &lt;/summary&gt;</comment>
        <function_decl><type><specifier pos:line="157" pos:column="9">public</specifier> <specifier pos:line="157" pos:column="16">abstract</specifier> <name pos:line="157" pos:column="25">void</name></type> <name pos:line="157" pos:column="30">Initialize</name><parameter_list pos:line="157" pos:column="40">()</parameter_list>;</function_decl>

        <comment type="line" pos:line="159" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="160" pos:column="9">/// Sets up the working set asynchronously</comment>
        <comment type="line" pos:line="161" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="162" pos:column="9">/// &lt;returns&gt;The initialization task&lt;/returns&gt;</comment>
        <function_decl><type><specifier pos:line="163" pos:column="9">public</specifier> <specifier pos:line="163" pos:column="16">abstract</specifier> <name pos:line="163" pos:column="25">Task</name></type> <name pos:line="163" pos:column="30">InitializeAsync</name><parameter_list pos:line="163" pos:column="45">()</parameter_list>;</function_decl>

        <comment type="line" pos:line="165" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="166" pos:column="9">/// Starts monitoring &lt;see cref="Archive"/&gt; by responding to</comment>
        <comment type="line" pos:line="167" pos:column="9">/// &lt;see cref="AbstractArchive.FileChanged"/&gt; with &lt;see cref="Archive_FileChanged"/&gt;.</comment>
        <comment type="line" pos:line="168" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="169" pos:column="9">public</specifier> <specifier pos:line="169" pos:column="16">virtual</specifier> <name pos:line="169" pos:column="24">void</name></type> <name pos:line="169" pos:column="29">StartMonitoring</name><parameter_list pos:line="169" pos:column="44">()</parameter_list> <block pos:line="169" pos:column="47">{
            <if pos:line="170" pos:column="13">if<condition pos:line="170" pos:column="15">(<expr><name pos:line="170" pos:column="16">IsDisposed</name></expr>)</condition><then pos:line="170" pos:column="27"> <block pos:line="170" pos:column="28">{ <throw pos:line="170" pos:column="30">throw <expr><op:operator pos:line="170" pos:column="36">new</op:operator> <call><name pos:line="170" pos:column="40">ObjectDisposedException</name><argument_list pos:line="170" pos:column="63">(<argument><expr><name pos:line="170" pos:column="64">null</name></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>
            <expr_stmt><expr><call><name pos:line="171" pos:column="13">SubscribeToArchive</name><argument_list pos:line="171" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="172" pos:column="13">IsMonitoring</name> <op:operator pos:line="172" pos:column="26">=</op:operator> <lit:literal type="boolean" pos:line="172" pos:column="28">true</lit:literal></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="175" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="176" pos:column="9">/// Stops monitoring &lt;see cref="Archive"/&gt;</comment>
        <comment type="line" pos:line="177" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="178" pos:column="9">public</specifier> <specifier pos:line="178" pos:column="16">virtual</specifier> <name pos:line="178" pos:column="24">void</name></type> <name pos:line="178" pos:column="29">StopMonitoring</name><parameter_list pos:line="178" pos:column="43">()</parameter_list> <block pos:line="178" pos:column="46">{
            <if pos:line="179" pos:column="13">if<condition pos:line="179" pos:column="15">(<expr><name pos:line="179" pos:column="16">IsDisposed</name></expr>)</condition><then pos:line="179" pos:column="27"> <block pos:line="179" pos:column="28">{ <throw pos:line="179" pos:column="30">throw <expr><op:operator pos:line="179" pos:column="36">new</op:operator> <call><name pos:line="179" pos:column="40">ObjectDisposedException</name><argument_list pos:line="179" pos:column="63">(<argument><expr><name pos:line="179" pos:column="64">null</name></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>
            <expr_stmt><expr><call><name pos:line="180" pos:column="13">UnsubscribeFromArchive</name><argument_list pos:line="180" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="181" pos:column="13">IsMonitoring</name> <op:operator pos:line="181" pos:column="26">=</op:operator> <lit:literal type="boolean" pos:line="181" pos:column="28">false</lit:literal></expr>;</expr_stmt>
        }</block></function>

        <cpp:region pos:line="184" pos:column="9">#<cpp:directive pos:line="184" pos:column="10">region</cpp:directive> global scope modification</cpp:region>
        <comment type="line" pos:line="185" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="186" pos:column="9">/// Adds the specified file from the data set. If the file is not present in the archive, then nothing happens</comment>
        <comment type="line" pos:line="187" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="188" pos:column="9">/// &lt;param name="sourceFileName"&gt;the source file to add&lt;/param&gt;</comment>
        <function><type><specifier pos:line="189" pos:column="9">public</specifier> <specifier pos:line="189" pos:column="16">virtual</specifier> <name pos:line="189" pos:column="24">void</name></type> <name pos:line="189" pos:column="29">AddOrUpdateFile</name><parameter_list pos:line="189" pos:column="44">(<param><decl><type><name pos:line="189" pos:column="45">string</name></type> <name pos:line="189" pos:column="52">sourceFileName</name></decl></param>)</parameter_list> <block pos:line="189" pos:column="68">{
            <if pos:line="190" pos:column="13">if<condition pos:line="190" pos:column="15">(<expr><name pos:line="190" pos:column="16">IsDisposed</name></expr>)</condition><then pos:line="190" pos:column="27"> <block pos:line="190" pos:column="28">{ <throw pos:line="190" pos:column="30">throw <expr><op:operator pos:line="190" pos:column="36">new</op:operator> <call><name pos:line="190" pos:column="40">ObjectDisposedException</name><argument_list pos:line="190" pos:column="63">(<argument><expr><name pos:line="190" pos:column="64">null</name></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>

            <decl_stmt><decl><type><name pos:line="192" pos:column="13">bool</name></type> <name pos:line="192" pos:column="18">workingSetChanged</name> <init pos:line="192" pos:column="36">= <expr><lit:literal type="boolean" pos:line="192" pos:column="38">false</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="193" pos:column="13">GlobalScopeManager</name></type> <name pos:line="193" pos:column="32">scopeManager</name></decl>;</decl_stmt>
            
            <if pos:line="195" pos:column="13">if<condition pos:line="195" pos:column="15">(<expr><call><name pos:line="195" pos:column="16">TryObtainWriteLock</name><argument_list pos:line="195" pos:column="34">(<argument><expr><name><name pos:line="195" pos:column="35">Timeout</name><op:operator pos:line="195" pos:column="42">.</op:operator><name pos:line="195" pos:column="43">Infinite</name></name></expr></argument>, <argument><expr pos:line="195" pos:column="53">out <name pos:line="195" pos:column="57">scopeManager</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="195" pos:column="71"> <block pos:line="195" pos:column="72">{
                <try pos:line="196" pos:column="17">try <block pos:line="196" pos:column="21">{
                    <expr_stmt><expr><name pos:line="197" pos:column="21">workingSetChanged</name> <op:operator pos:line="197" pos:column="39">=</op:operator> <call><name pos:line="197" pos:column="41">TryAddOrUpdateFile</name><argument_list pos:line="197" pos:column="59">(<argument><expr><name pos:line="197" pos:column="60">scopeManager</name></expr></argument>, <argument><expr><name pos:line="197" pos:column="74">sourceFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <finally pos:line="198" pos:column="19">finally <block pos:line="198" pos:column="27">{
                    <expr_stmt><expr><call><name pos:line="199" pos:column="21">ReleaseWriteLock</name><argument_list pos:line="199" pos:column="37">()</argument_list></call></expr>;</expr_stmt>
                }</block></finally></try>
            }</block></then></if>

            <if pos:line="203" pos:column="13">if<condition pos:line="203" pos:column="15">(<expr><name pos:line="203" pos:column="16">workingSetChanged</name></expr>)</condition><then pos:line="203" pos:column="34"> <block pos:line="203" pos:column="35">{
                <expr_stmt><expr><call><name pos:line="204" pos:column="17">OnChanged</name><argument_list pos:line="204" pos:column="26">(<argument><expr><op:operator pos:line="204" pos:column="27">new</op:operator> <call><name pos:line="204" pos:column="31">EventArgs</name><argument_list pos:line="204" pos:column="40">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="208" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="209" pos:column="9">/// Adds the specified file from the data set. If the file is not present in the archive, then nothing happens</comment>
        <comment type="line" pos:line="210" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="211" pos:column="9">/// &lt;param name="sourceFileName"&gt;the source file to add&lt;/param&gt;</comment>
        <comment type="line" pos:line="212" pos:column="9">/// &lt;returns&gt;A task for this file update&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="213" pos:column="9">public</specifier> <specifier pos:line="213" pos:column="16">virtual</specifier> <name pos:line="213" pos:column="24">Task</name></type> <name pos:line="213" pos:column="29">AddOrUpdateFileAsync</name><parameter_list pos:line="213" pos:column="49">(<param><decl><type><name pos:line="213" pos:column="50">string</name></type> <name pos:line="213" pos:column="57">sourceFileName</name></decl></param>)</parameter_list> <block pos:line="213" pos:column="73">{
            <return pos:line="214" pos:column="13">return <expr><call><name><name pos:line="214" pos:column="20">Factory</name><op:operator pos:line="214" pos:column="27">.</op:operator><name pos:line="214" pos:column="28">StartNew</name></name><argument_list pos:line="214" pos:column="36">(<argument><expr><lambda><parameter_list pos:line="214" pos:column="37">()</parameter_list> <op:operator pos:line="214" pos:column="40">=&gt;</op:operator> <call><name pos:line="214" pos:column="43">AddOrUpdateFile</name><argument_list pos:line="214" pos:column="58">(<argument><expr><name pos:line="214" pos:column="59">sourceFileName</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="217" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="218" pos:column="9">/// Clears the data in this working set</comment>
        <comment type="line" pos:line="219" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="220" pos:column="9">public</specifier> <specifier pos:line="220" pos:column="16">virtual</specifier> <name pos:line="220" pos:column="24">void</name></type> <name pos:line="220" pos:column="29">Clear</name><parameter_list pos:line="220" pos:column="34">()</parameter_list> <block pos:line="220" pos:column="37">{
            <if pos:line="221" pos:column="13">if<condition pos:line="221" pos:column="15">(<expr><name pos:line="221" pos:column="16">IsDisposed</name></expr>)</condition><then pos:line="221" pos:column="27"> <block pos:line="221" pos:column="28">{ <throw pos:line="221" pos:column="30">throw <expr><op:operator pos:line="221" pos:column="36">new</op:operator> <call><name pos:line="221" pos:column="40">ObjectDisposedException</name><argument_list pos:line="221" pos:column="63">(<argument><expr><name pos:line="221" pos:column="64">null</name></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>

            <decl_stmt><decl><type><name pos:line="223" pos:column="13">bool</name></type> <name pos:line="223" pos:column="18">workingSetChanged</name> <init pos:line="223" pos:column="36">= <expr><lit:literal type="boolean" pos:line="223" pos:column="38">false</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="224" pos:column="13">GlobalScopeManager</name></type> <name pos:line="224" pos:column="32">scopeManager</name></decl>;</decl_stmt>

            <if pos:line="226" pos:column="13">if<condition pos:line="226" pos:column="15">(<expr><call><name pos:line="226" pos:column="16">TryObtainWriteLock</name><argument_list pos:line="226" pos:column="34">(<argument><expr><name><name pos:line="226" pos:column="35">Timeout</name><op:operator pos:line="226" pos:column="42">.</op:operator><name pos:line="226" pos:column="43">Infinite</name></name></expr></argument>, <argument><expr pos:line="226" pos:column="53">out <name pos:line="226" pos:column="57">scopeManager</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="226" pos:column="71"> <block pos:line="226" pos:column="72">{
                <try pos:line="227" pos:column="17">try <block pos:line="227" pos:column="21">{
                    <if pos:line="228" pos:column="21">if<condition pos:line="228" pos:column="23">(<expr><name pos:line="228" pos:column="24">null</name> <op:operator pos:line="228" pos:column="29">!=</op:operator> <name pos:line="228" pos:column="32">scopeManager</name></expr>)</condition><then pos:line="228" pos:column="45"> <block pos:line="228" pos:column="46">{
                        <expr_stmt><expr><name><name pos:line="229" pos:column="25">scopeManager</name><op:operator pos:line="229" pos:column="37">.</op:operator><name pos:line="229" pos:column="38">GlobalScope</name></name> <op:operator pos:line="229" pos:column="50">=</op:operator> <name pos:line="229" pos:column="52">null</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="230" pos:column="25">workingSetChanged</name> <op:operator pos:line="230" pos:column="43">=</op:operator> <lit:literal type="boolean" pos:line="230" pos:column="45">true</lit:literal></expr>;</expr_stmt>
                    }</block></then></if>
                }</block> <finally pos:line="232" pos:column="19">finally <block pos:line="232" pos:column="27">{
                    <expr_stmt><expr><call><name pos:line="233" pos:column="21">ReleaseWriteLock</name><argument_list pos:line="233" pos:column="37">()</argument_list></call></expr>;</expr_stmt>
                }</block></finally></try>
            }</block></then></if>
            <if pos:line="236" pos:column="13">if<condition pos:line="236" pos:column="15">(<expr><name pos:line="236" pos:column="16">workingSetChanged</name></expr>)</condition><then pos:line="236" pos:column="34"> <block pos:line="236" pos:column="35">{
                <expr_stmt><expr><call><name pos:line="237" pos:column="17">OnChanged</name><argument_list pos:line="237" pos:column="26">(<argument><expr><op:operator pos:line="237" pos:column="27">new</op:operator> <call><name pos:line="237" pos:column="31">EventArgs</name><argument_list pos:line="237" pos:column="40">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="241" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="242" pos:column="9">/// Removes &lt;paramref name="sourceFileName"/&gt; from the working set.</comment>
        <comment type="line" pos:line="243" pos:column="9">/// If the file does not exist, nothing is done.</comment>
        <comment type="line" pos:line="244" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="245" pos:column="9">/// &lt;param name="sourceFileName"&gt;The source file to remove&lt;/param&gt;</comment>
        <function><type><specifier pos:line="246" pos:column="9">public</specifier> <specifier pos:line="246" pos:column="16">virtual</specifier> <name pos:line="246" pos:column="24">void</name></type> <name pos:line="246" pos:column="29">RemoveFile</name><parameter_list pos:line="246" pos:column="39">(<param><decl><type><name pos:line="246" pos:column="40">string</name></type> <name pos:line="246" pos:column="47">sourceFileName</name></decl></param>)</parameter_list> <block pos:line="246" pos:column="63">{
            <if pos:line="247" pos:column="13">if<condition pos:line="247" pos:column="15">(<expr><name pos:line="247" pos:column="16">IsDisposed</name></expr>)</condition><then pos:line="247" pos:column="27"> <block pos:line="247" pos:column="28">{ <throw pos:line="247" pos:column="30">throw <expr><op:operator pos:line="247" pos:column="36">new</op:operator> <call><name pos:line="247" pos:column="40">ObjectDisposedException</name><argument_list pos:line="247" pos:column="63">(<argument><expr><name pos:line="247" pos:column="64">null</name></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>

            <decl_stmt><decl><type><name pos:line="249" pos:column="13">bool</name></type> <name pos:line="249" pos:column="18">workingSetChanged</name> <init pos:line="249" pos:column="36">= <expr><lit:literal type="boolean" pos:line="249" pos:column="38">false</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="250" pos:column="13">GlobalScopeManager</name></type> <name pos:line="250" pos:column="32">scopeManager</name></decl>;</decl_stmt>

            <if pos:line="252" pos:column="13">if<condition pos:line="252" pos:column="15">(<expr><call><name pos:line="252" pos:column="16">TryObtainWriteLock</name><argument_list pos:line="252" pos:column="34">(<argument><expr><name><name pos:line="252" pos:column="35">Timeout</name><op:operator pos:line="252" pos:column="42">.</op:operator><name pos:line="252" pos:column="43">Infinite</name></name></expr></argument>, <argument><expr pos:line="252" pos:column="53">out <name pos:line="252" pos:column="57">scopeManager</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="252" pos:column="71"> <block pos:line="252" pos:column="72">{
                <try pos:line="253" pos:column="17">try <block pos:line="253" pos:column="21">{
                    <expr_stmt><expr><name pos:line="254" pos:column="21">workingSetChanged</name> <op:operator pos:line="254" pos:column="39">=</op:operator> <call><name pos:line="254" pos:column="41">TryRemoveFile</name><argument_list pos:line="254" pos:column="54">(<argument><expr><name pos:line="254" pos:column="55">scopeManager</name></expr></argument>, <argument><expr><name pos:line="254" pos:column="69">sourceFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <finally pos:line="255" pos:column="19">finally <block pos:line="255" pos:column="27">{
                    <expr_stmt><expr><call><name pos:line="256" pos:column="21">ReleaseWriteLock</name><argument_list pos:line="256" pos:column="37">()</argument_list></call></expr>;</expr_stmt>
                }</block></finally></try>
            }</block></then></if>

            <if pos:line="260" pos:column="13">if<condition pos:line="260" pos:column="15">(<expr><name pos:line="260" pos:column="16">workingSetChanged</name></expr>)</condition><then pos:line="260" pos:column="34"> <block pos:line="260" pos:column="35">{
                <expr_stmt><expr><call><name pos:line="261" pos:column="17">OnChanged</name><argument_list pos:line="261" pos:column="26">(<argument><expr><op:operator pos:line="261" pos:column="27">new</op:operator> <call><name pos:line="261" pos:column="31">EventArgs</name><argument_list pos:line="261" pos:column="40">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="265" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="266" pos:column="9">/// Removes &lt;paramref name="sourceFileName"/&gt; from the working set.</comment>
        <comment type="line" pos:line="267" pos:column="9">/// If the file does not exist, nothing is done.</comment>
        <comment type="line" pos:line="268" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="269" pos:column="9">/// &lt;param name="sourceFileName"&gt;The source file to remove&lt;/param&gt;</comment>
        <comment type="line" pos:line="270" pos:column="9">/// &lt;returns&gt;A task for this file deletion&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="271" pos:column="9">public</specifier> <specifier pos:line="271" pos:column="16">virtual</specifier> <name pos:line="271" pos:column="24">Task</name></type> <name pos:line="271" pos:column="29">RemoveFileAsync</name><parameter_list pos:line="271" pos:column="44">(<param><decl><type><name pos:line="271" pos:column="45">string</name></type> <name pos:line="271" pos:column="52">sourceFileName</name></decl></param>)</parameter_list> <block pos:line="271" pos:column="68">{
            <return pos:line="272" pos:column="13">return <expr><call><name><name pos:line="272" pos:column="20">Factory</name><op:operator pos:line="272" pos:column="27">.</op:operator><name pos:line="272" pos:column="28">StartNew</name></name><argument_list pos:line="272" pos:column="36">(<argument><expr><lambda><parameter_list pos:line="272" pos:column="37">()</parameter_list> <op:operator pos:line="272" pos:column="40">=&gt;</op:operator> <call><name pos:line="272" pos:column="43">RemoveFile</name><argument_list pos:line="272" pos:column="53">(<argument><expr><name pos:line="272" pos:column="54">sourceFileName</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="275" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="276" pos:column="9">/// Renames &lt;paramref name="oldSourceFileName"/&gt; to &lt;paramref name="newSourceFileName"/&gt;</comment>
        <comment type="line" pos:line="277" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="278" pos:column="9">/// &lt;param name="oldSourceFileName"&gt;the old file name to be removed&lt;/param&gt;</comment>
        <comment type="line" pos:line="279" pos:column="9">/// &lt;param name="newSourceFileName"&gt;the new file name to be added&lt;/param&gt;</comment>
        <function><type><specifier pos:line="280" pos:column="9">public</specifier> <specifier pos:line="280" pos:column="16">virtual</specifier> <name pos:line="280" pos:column="24">void</name></type> <name pos:line="280" pos:column="29">RenameFile</name><parameter_list pos:line="280" pos:column="39">(<param><decl><type><name pos:line="280" pos:column="40">string</name></type> <name pos:line="280" pos:column="47">oldSourceFileName</name></decl></param>, <param><decl><type><name pos:line="280" pos:column="66">string</name></type> <name pos:line="280" pos:column="73">newSourceFileName</name></decl></param>)</parameter_list> <block pos:line="280" pos:column="92">{
            <if pos:line="281" pos:column="13">if<condition pos:line="281" pos:column="15">(<expr><name pos:line="281" pos:column="16">IsDisposed</name></expr>)</condition><then pos:line="281" pos:column="27"> <block pos:line="281" pos:column="28">{ <throw pos:line="281" pos:column="30">throw <expr><op:operator pos:line="281" pos:column="36">new</op:operator> <call><name pos:line="281" pos:column="40">ObjectDisposedException</name><argument_list pos:line="281" pos:column="63">(<argument><expr><name pos:line="281" pos:column="64">null</name></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>

            <decl_stmt><decl><type><name pos:line="283" pos:column="13">bool</name></type> <name pos:line="283" pos:column="18">workingSetChanged</name> <init pos:line="283" pos:column="36">= <expr><lit:literal type="boolean" pos:line="283" pos:column="38">false</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="284" pos:column="13">GlobalScopeManager</name></type> <name pos:line="284" pos:column="32">scopeManager</name></decl>;</decl_stmt>

            <if pos:line="286" pos:column="13">if<condition pos:line="286" pos:column="15">(<expr><call><name pos:line="286" pos:column="16">TryObtainWriteLock</name><argument_list pos:line="286" pos:column="34">(<argument><expr><name><name pos:line="286" pos:column="35">Timeout</name><op:operator pos:line="286" pos:column="42">.</op:operator><name pos:line="286" pos:column="43">Infinite</name></name></expr></argument>, <argument><expr pos:line="286" pos:column="53">out <name pos:line="286" pos:column="57">scopeManager</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="286" pos:column="71"> <block pos:line="286" pos:column="72">{
                <try pos:line="287" pos:column="17">try <block pos:line="287" pos:column="21">{
                    <expr_stmt><expr><name pos:line="288" pos:column="21">workingSetChanged</name> <op:operator pos:line="288" pos:column="39">=</op:operator> <call><name pos:line="288" pos:column="41">TryRenameFile</name><argument_list pos:line="288" pos:column="54">(<argument><expr><name pos:line="288" pos:column="55">scopeManager</name></expr></argument>, <argument><expr><name pos:line="288" pos:column="69">oldSourceFileName</name></expr></argument>, <argument><expr><name pos:line="288" pos:column="88">newSourceFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <finally pos:line="289" pos:column="19">finally <block pos:line="289" pos:column="27">{
                    <expr_stmt><expr><call><name pos:line="290" pos:column="21">ReleaseWriteLock</name><argument_list pos:line="290" pos:column="37">()</argument_list></call></expr>;</expr_stmt>
                }</block></finally></try>
            }</block></then></if>

            <if pos:line="294" pos:column="13">if<condition pos:line="294" pos:column="15">(<expr><name pos:line="294" pos:column="16">workingSetChanged</name></expr>)</condition><then pos:line="294" pos:column="34"> <block pos:line="294" pos:column="35">{
                <expr_stmt><expr><call><name pos:line="295" pos:column="17">OnChanged</name><argument_list pos:line="295" pos:column="26">(<argument><expr><op:operator pos:line="295" pos:column="27">new</op:operator> <call><name pos:line="295" pos:column="31">EventArgs</name><argument_list pos:line="295" pos:column="40">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="299" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="300" pos:column="9">/// Renames &lt;paramref name="oldSourceFileName"/&gt; to &lt;paramref name="newSourceFileName"/&gt;</comment>
        <comment type="line" pos:line="301" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="302" pos:column="9">/// &lt;param name="oldSourceFileName"&gt;the old file name to be removed&lt;/param&gt;</comment>
        <comment type="line" pos:line="303" pos:column="9">/// &lt;param name="newSourceFileName"&gt;the new file name to be added&lt;/param&gt;</comment>
        <comment type="line" pos:line="304" pos:column="9">/// &lt;returns&gt;A task for this file rename&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="305" pos:column="9">public</specifier> <specifier pos:line="305" pos:column="16">virtual</specifier> <name pos:line="305" pos:column="24">Task</name></type> <name pos:line="305" pos:column="29">RenameFileAsync</name><parameter_list pos:line="305" pos:column="44">(<param><decl><type><name pos:line="305" pos:column="45">string</name></type> <name pos:line="305" pos:column="52">oldSourceFileName</name></decl></param>, <param><decl><type><name pos:line="305" pos:column="71">string</name></type> <name pos:line="305" pos:column="78">newSourceFileName</name></decl></param>)</parameter_list> <block pos:line="305" pos:column="97">{
            <return pos:line="306" pos:column="13">return <expr><call><name><name pos:line="306" pos:column="20">Factory</name><op:operator pos:line="306" pos:column="27">.</op:operator><name pos:line="306" pos:column="28">StartNew</name></name><argument_list pos:line="306" pos:column="36">(<argument><expr><lambda><parameter_list pos:line="306" pos:column="37">()</parameter_list> <op:operator pos:line="306" pos:column="40">=&gt;</op:operator> <call><name pos:line="306" pos:column="43">RenameFile</name><argument_list pos:line="306" pos:column="53">(<argument><expr><name pos:line="306" pos:column="54">oldSourceFileName</name></expr></argument>, <argument><expr><name pos:line="306" pos:column="73">newSourceFileName</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
        <cpp:endregion pos:line="308" pos:column="9">#<cpp:directive pos:line="308" pos:column="10">endregion</cpp:directive> global scope modification</cpp:endregion>

        <cpp:region pos:line="310" pos:column="9">#<cpp:directive pos:line="310" pos:column="10">region</cpp:directive> global scope access</cpp:region>
        <comment type="line" pos:line="311" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="312" pos:column="9">/// Releases the read lock</comment>
        <comment type="line" pos:line="313" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="314" pos:column="9">public</specifier> <name pos:line="314" pos:column="16">void</name></type> <name pos:line="314" pos:column="21">ReleaseReadLock</name><parameter_list pos:line="314" pos:column="36">()</parameter_list> <block pos:line="314" pos:column="39">{
            <if pos:line="315" pos:column="13">if<condition pos:line="315" pos:column="15">(<expr><name pos:line="315" pos:column="16">IsDisposed</name></expr>)</condition><then pos:line="315" pos:column="27"> <block pos:line="315" pos:column="28">{ <throw pos:line="315" pos:column="30">throw <expr><op:operator pos:line="315" pos:column="36">new</op:operator> <call><name pos:line="315" pos:column="40">ObjectDisposedException</name><argument_list pos:line="315" pos:column="63">(<argument><expr><name pos:line="315" pos:column="64">null</name></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>
            <expr_stmt><expr><call><name><name pos:line="316" pos:column="13">_globalScopeLock</name><op:operator pos:line="316" pos:column="29">.</op:operator><name pos:line="316" pos:column="30">ExitReadLock</name></name><argument_list pos:line="316" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="319" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="320" pos:column="9">/// Releases the write lock</comment>
        <comment type="line" pos:line="321" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="322" pos:column="9">protected</specifier> <name pos:line="322" pos:column="19">void</name></type> <name pos:line="322" pos:column="24">ReleaseWriteLock</name><parameter_list pos:line="322" pos:column="40">()</parameter_list> <block pos:line="322" pos:column="43">{
            <if pos:line="323" pos:column="13">if<condition pos:line="323" pos:column="15">(<expr><name pos:line="323" pos:column="16">IsDisposed</name></expr>)</condition><then pos:line="323" pos:column="27"> <block pos:line="323" pos:column="28">{ <throw pos:line="323" pos:column="30">throw <expr><op:operator pos:line="323" pos:column="36">new</op:operator> <call><name pos:line="323" pos:column="40">ObjectDisposedException</name><argument_list pos:line="323" pos:column="63">(<argument><expr><name pos:line="323" pos:column="64">null</name></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>
            <expr_stmt><expr><call><name><name pos:line="324" pos:column="13">_globalScopeLock</name><op:operator pos:line="324" pos:column="29">.</op:operator><name pos:line="324" pos:column="30">ExitWriteLock</name></name><argument_list pos:line="324" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="327" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="328" pos:column="9">/// Gets a read lock for this working set. If timeout is exceeded, then false is returned and &lt;paramref name="globalScope"/&gt; will be null.</comment>
        <comment type="line" pos:line="329" pos:column="9">/// If the read lock is obtained, true is returned and &lt;paramref name="globalScope"/&gt; will contain the global scope object.</comment>
        <comment type="line" pos:line="330" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="331" pos:column="9">/// &lt;param name="millisecondsTimeout"&gt;the timeout&lt;/param&gt;</comment>
        <comment type="line" pos:line="332" pos:column="9">/// &lt;param name="globalScope"&gt;out parameter for the global scope&lt;/param&gt;</comment>
        <comment type="line" pos:line="333" pos:column="9">/// &lt;returns&gt;True if the read lock was obtained; false otherwise&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="334" pos:column="9">public</specifier> <name pos:line="334" pos:column="16">bool</name></type> <name pos:line="334" pos:column="21">TryObtainReadLock</name><parameter_list pos:line="334" pos:column="38">(<param><decl><type><name pos:line="334" pos:column="39">int</name></type> <name pos:line="334" pos:column="43">millisecondsTimeout</name></decl></param>, <param><decl><type><specifier pos:line="334" pos:column="64">out</specifier> <name pos:line="334" pos:column="68">NamespaceDefinition</name></type> <name pos:line="334" pos:column="88">globalScope</name></decl></param>)</parameter_list> <block pos:line="334" pos:column="101">{
            <if pos:line="335" pos:column="13">if<condition pos:line="335" pos:column="15">(<expr><name pos:line="335" pos:column="16">IsDisposed</name></expr>)</condition><then pos:line="335" pos:column="27"> <block pos:line="335" pos:column="28">{ <throw pos:line="335" pos:column="30">throw <expr><op:operator pos:line="335" pos:column="36">new</op:operator> <call><name pos:line="335" pos:column="40">ObjectDisposedException</name><argument_list pos:line="335" pos:column="63">(<argument><expr><name pos:line="335" pos:column="64">null</name></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>
            <if pos:line="336" pos:column="13">if<condition pos:line="336" pos:column="15">(<expr><call><name><name pos:line="336" pos:column="16">_globalScopeLock</name><op:operator pos:line="336" pos:column="32">.</op:operator><name pos:line="336" pos:column="33">TryEnterReadLock</name></name><argument_list pos:line="336" pos:column="49">(<argument><expr><name pos:line="336" pos:column="50">millisecondsTimeout</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="336" pos:column="71"> <block pos:line="336" pos:column="72">{
                <expr_stmt><expr><name pos:line="337" pos:column="17">globalScope</name> <op:operator pos:line="337" pos:column="29">=</op:operator> <name><name pos:line="337" pos:column="31">this</name><op:operator pos:line="337" pos:column="35">.</op:operator><name pos:line="337" pos:column="36">_globalScopeManager</name><op:operator pos:line="337" pos:column="55">.</op:operator><name pos:line="337" pos:column="56">GlobalScope</name></name></expr>;</expr_stmt>
                <return pos:line="338" pos:column="17">return <expr><lit:literal type="boolean" pos:line="338" pos:column="24">true</lit:literal></expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><name pos:line="340" pos:column="13">globalScope</name> <op:operator pos:line="340" pos:column="25">=</op:operator> <name pos:line="340" pos:column="27">null</name></expr>;</expr_stmt>
            <return pos:line="341" pos:column="13">return <expr><lit:literal type="boolean" pos:line="341" pos:column="20">false</lit:literal></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="344" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="345" pos:column="9">/// Gets a write lock for this working set. If timeout is exceeded, then false is returned and &lt;paramref name="scopeManager"/&gt; will be null.</comment>
        <comment type="line" pos:line="346" pos:column="9">/// If the write lock is obtained, true is returned and &lt;paramref name="scopeManager"/&gt; will contain the internal scope manager for this object.</comment>
        <comment type="line" pos:line="347" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="348" pos:column="9">/// &lt;param name="millisecondsTimeout"&gt;the timeout&lt;/param&gt;</comment>
        <comment type="line" pos:line="349" pos:column="9">/// &lt;param name="scopeManager"&gt;out parameter for the global scope manager&lt;/param&gt;</comment>
        <comment type="line" pos:line="350" pos:column="9">/// &lt;returns&gt;True if the write lock was obtained; false otherwise&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="351" pos:column="9">protected</specifier> <name pos:line="351" pos:column="19">bool</name></type> <name pos:line="351" pos:column="24">TryObtainWriteLock</name><parameter_list pos:line="351" pos:column="42">(<param><decl><type><name pos:line="351" pos:column="43">int</name></type> <name pos:line="351" pos:column="47">millisecondsTimeout</name></decl></param>, <param><decl><type><specifier pos:line="351" pos:column="68">out</specifier> <name pos:line="351" pos:column="72">GlobalScopeManager</name></type> <name pos:line="351" pos:column="91">scopeManager</name></decl></param>)</parameter_list> <block pos:line="351" pos:column="105">{
            <if pos:line="352" pos:column="13">if<condition pos:line="352" pos:column="15">(<expr><name pos:line="352" pos:column="16">IsDisposed</name></expr>)</condition><then pos:line="352" pos:column="27"> <block pos:line="352" pos:column="28">{ <throw pos:line="352" pos:column="30">throw <expr><op:operator pos:line="352" pos:column="36">new</op:operator> <call><name pos:line="352" pos:column="40">ObjectDisposedException</name><argument_list pos:line="352" pos:column="63">(<argument><expr><name pos:line="352" pos:column="64">null</name></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>

            <if pos:line="354" pos:column="13">if<condition pos:line="354" pos:column="15">(<expr><call><name><name pos:line="354" pos:column="16">_globalScopeLock</name><op:operator pos:line="354" pos:column="32">.</op:operator><name pos:line="354" pos:column="33">TryEnterWriteLock</name></name><argument_list pos:line="354" pos:column="50">(<argument><expr><name pos:line="354" pos:column="51">millisecondsTimeout</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="354" pos:column="72"> <block pos:line="354" pos:column="73">{
                <expr_stmt><expr><name pos:line="355" pos:column="17">scopeManager</name> <op:operator pos:line="355" pos:column="30">=</op:operator> <name pos:line="355" pos:column="32">_globalScopeManager</name></expr>;</expr_stmt>
                <return pos:line="356" pos:column="17">return <expr><lit:literal type="boolean" pos:line="356" pos:column="24">true</lit:literal></expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><name pos:line="358" pos:column="13">scopeManager</name> <op:operator pos:line="358" pos:column="26">=</op:operator> <name pos:line="358" pos:column="28">null</name></expr>;</expr_stmt>
            <return pos:line="359" pos:column="13">return <expr><lit:literal type="boolean" pos:line="359" pos:column="20">false</lit:literal></expr>;</return>
        }</block></function>

        <cpp:endregion pos:line="362" pos:column="9">#<cpp:directive pos:line="362" pos:column="10">endregion</cpp:directive> global scope access</cpp:endregion>

        <comment type="line" pos:line="364" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="365" pos:column="9">/// Dispose of this working set. The methods on this class will throw an ObjectDisposedException if they are called after Dispose is called.</comment>
        <comment type="line" pos:line="366" pos:column="9">/// This will also call &lt;see cref="AbstractArchive.Dispose()"/&gt; on the &lt;see cref="Archive"/&gt;.</comment>
        <comment type="line" pos:line="367" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="368" pos:column="9">public</specifier> <name pos:line="368" pos:column="16">void</name></type> <name pos:line="368" pos:column="21">Dispose</name><parameter_list pos:line="368" pos:column="28">()</parameter_list> <block pos:line="368" pos:column="31">{
            <if pos:line="369" pos:column="13">if<condition pos:line="369" pos:column="15">(<expr><op:operator pos:line="369" pos:column="16">!</op:operator><name pos:line="369" pos:column="17">IsDisposed</name></expr>)</condition><then pos:line="369" pos:column="28"> <block pos:line="369" pos:column="29">{
                <expr_stmt><expr><call><name pos:line="370" pos:column="17">StopMonitoring</name><argument_list pos:line="370" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="371" pos:column="17">_globalScopeManager</name><op:operator pos:line="371" pos:column="36">.</op:operator><name pos:line="371" pos:column="37">GlobalScope</name></name> <op:operator pos:line="371" pos:column="49">=</op:operator> <name pos:line="371" pos:column="51">null</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="372" pos:column="17">_globalScopeManager</name> <op:operator pos:line="372" pos:column="37">=</op:operator> <name pos:line="372" pos:column="39">null</name></expr>;</expr_stmt>

                <if pos:line="374" pos:column="17">if<condition pos:line="374" pos:column="19">(<expr><name pos:line="374" pos:column="20">null</name> <op:operator pos:line="374" pos:column="25">!=</op:operator> <name pos:line="374" pos:column="28">Archive</name></expr>)</condition><then pos:line="374" pos:column="36"> <block pos:line="374" pos:column="37">{
                    <expr_stmt><expr><call><name><name pos:line="375" pos:column="21">Archive</name><op:operator pos:line="375" pos:column="28">.</op:operator><name pos:line="375" pos:column="29">Dispose</name></name><argument_list pos:line="375" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <expr_stmt><expr><name pos:line="378" pos:column="17">IsDisposed</name> <op:operator pos:line="378" pos:column="28">=</op:operator> <lit:literal type="boolean" pos:line="378" pos:column="30">true</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="379" pos:column="17">Changed</name> <op:operator pos:line="379" pos:column="25">=</op:operator> <name pos:line="379" pos:column="27">null</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="380" pos:column="17">_globalScopeLock</name><op:operator pos:line="380" pos:column="33">.</op:operator><name pos:line="380" pos:column="34">Dispose</name></name><argument_list pos:line="380" pos:column="41">()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="384" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="385" pos:column="9">/// Responds to &lt;see cref="AbstractArchive.FileChanged"/&gt; events from &lt;see cref="Archive"/&gt;.</comment>
        <comment type="line" pos:line="386" pos:column="9">/// Subclasses should override this method and only respond when the </comment>
        <comment type="line" pos:line="387" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="388" pos:column="9">/// &lt;param name="sender"&gt;The event sender&lt;/param&gt;</comment>
        <comment type="line" pos:line="389" pos:column="9">/// &lt;param name="e"&gt;The event argument&lt;/param&gt;</comment>
        <function><type><specifier pos:line="390" pos:column="9">protected</specifier> <specifier pos:line="390" pos:column="19">virtual</specifier> <name pos:line="390" pos:column="27">void</name></type> <name pos:line="390" pos:column="32">Archive_FileChanged</name><parameter_list pos:line="390" pos:column="51">(<param><decl><type><name pos:line="390" pos:column="52">object</name></type> <name pos:line="390" pos:column="59">sender</name></decl></param>, <param><decl><type><name pos:line="390" pos:column="67">FileEventRaisedArgs</name></type> <name pos:line="390" pos:column="87">e</name></decl></param>)</parameter_list> <block pos:line="390" pos:column="90">{
            <switch pos:line="391" pos:column="13">switch<condition pos:line="391" pos:column="19">(<expr><name><name pos:line="391" pos:column="20">e</name><op:operator pos:line="391" pos:column="21">.</op:operator><name pos:line="391" pos:column="22">EventType</name></name></expr>)</condition> <block pos:line="391" pos:column="33">{
                <case pos:line="392" pos:column="17">case <expr><name><name pos:line="392" pos:column="22">FileEventType</name><op:operator pos:line="392" pos:column="35">.</op:operator><name pos:line="392" pos:column="36">FileAdded</name></name></expr>:
                    <goto pos:line="393" pos:column="21">goto <name pos:line="393" pos:column="26">case FileEventType.FileChanged</name>;</goto>
                </case><case pos:line="394" pos:column="17">case <expr><name><name pos:line="394" pos:column="22">FileEventType</name><op:operator pos:line="394" pos:column="35">.</op:operator><name pos:line="394" pos:column="36">FileChanged</name></name></expr>:
                    <if pos:line="395" pos:column="21">if<condition pos:line="395" pos:column="23">(<expr><name pos:line="395" pos:column="24">UseAsynchronousMethods</name></expr>)</condition><then pos:line="395" pos:column="47"> <block pos:line="395" pos:column="48">{
                        <expr_stmt><expr><call><name pos:line="396" pos:column="25">AddOrUpdateFileAsync</name><argument_list pos:line="396" pos:column="45">(<argument><expr><name><name pos:line="396" pos:column="46">e</name><op:operator pos:line="396" pos:column="47">.</op:operator><name pos:line="396" pos:column="48">FilePath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else pos:line="397" pos:column="23">else <block pos:line="397" pos:column="28">{
                        <expr_stmt><expr><call><name pos:line="398" pos:column="25">AddOrUpdateFile</name><argument_list pos:line="398" pos:column="40">(<argument><expr><name><name pos:line="398" pos:column="41">e</name><op:operator pos:line="398" pos:column="42">.</op:operator><name pos:line="398" pos:column="43">FilePath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                    <break pos:line="400" pos:column="21">break;</break>
                </case><case pos:line="401" pos:column="17">case <expr><name><name pos:line="401" pos:column="22">FileEventType</name><op:operator pos:line="401" pos:column="35">.</op:operator><name pos:line="401" pos:column="36">FileDeleted</name></name></expr>:
                    <if pos:line="402" pos:column="21">if<condition pos:line="402" pos:column="23">(<expr><name pos:line="402" pos:column="24">UseAsynchronousMethods</name></expr>)</condition><then pos:line="402" pos:column="47"> <block pos:line="402" pos:column="48">{
                        <expr_stmt><expr><call><name pos:line="403" pos:column="25">RemoveFileAsync</name><argument_list pos:line="403" pos:column="40">(<argument><expr><name><name pos:line="403" pos:column="41">e</name><op:operator pos:line="403" pos:column="42">.</op:operator><name pos:line="403" pos:column="43">FilePath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else pos:line="404" pos:column="23">else <block pos:line="404" pos:column="28">{
                        <expr_stmt><expr><call><name pos:line="405" pos:column="25">RemoveFile</name><argument_list pos:line="405" pos:column="35">(<argument><expr><name><name pos:line="405" pos:column="36">e</name><op:operator pos:line="405" pos:column="37">.</op:operator><name pos:line="405" pos:column="38">FilePath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                    <break pos:line="407" pos:column="21">break;</break>
                </case><case pos:line="408" pos:column="17">case <expr><name><name pos:line="408" pos:column="22">FileEventType</name><op:operator pos:line="408" pos:column="35">.</op:operator><name pos:line="408" pos:column="36">FileRenamed</name></name></expr>:
                    <if pos:line="409" pos:column="21">if<condition pos:line="409" pos:column="23">(<expr><name pos:line="409" pos:column="24">UseAsynchronousMethods</name></expr>)</condition><then pos:line="409" pos:column="47"> <block pos:line="409" pos:column="48">{
                        <expr_stmt><expr><call><name pos:line="410" pos:column="25">RenameFileAsync</name><argument_list pos:line="410" pos:column="40">(<argument><expr><name><name pos:line="410" pos:column="41">e</name><op:operator pos:line="410" pos:column="42">.</op:operator><name pos:line="410" pos:column="43">OldFilePath</name></name></expr></argument>, <argument><expr><name><name pos:line="410" pos:column="56">e</name><op:operator pos:line="410" pos:column="57">.</op:operator><name pos:line="410" pos:column="58">FilePath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else pos:line="411" pos:column="23">else <block pos:line="411" pos:column="28">{
                        <expr_stmt><expr><call><name pos:line="412" pos:column="25">RenameFile</name><argument_list pos:line="412" pos:column="35">(<argument><expr><name><name pos:line="412" pos:column="36">e</name><op:operator pos:line="412" pos:column="37">.</op:operator><name pos:line="412" pos:column="38">OldFilePath</name></name></expr></argument>, <argument><expr><name><name pos:line="412" pos:column="51">e</name><op:operator pos:line="412" pos:column="52">.</op:operator><name pos:line="412" pos:column="53">FilePath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                    <break pos:line="414" pos:column="21">break;</break>
                </case><default pos:line="415" pos:column="17">default:
                    <throw pos:line="416" pos:column="21">throw <expr><op:operator pos:line="416" pos:column="27">new</op:operator> <call><name pos:line="416" pos:column="31">InvalidOperationException</name><argument_list pos:line="416" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="416" pos:column="57">"Invalid FileEventType"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
            </default>}</block></switch>
        }</block></function>

        <comment type="line" pos:line="420" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="421" pos:column="9">/// Checks to see if the given &lt;paramref name="globalScope"/&gt; object contains &lt;paramref name="sourceFileName"/&gt;.</comment>
        <comment type="line" pos:line="422" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="423" pos:column="9">/// &lt;param name="globalScope"&gt;The global scope object&lt;/param&gt;</comment>
        <comment type="line" pos:line="424" pos:column="9">/// &lt;param name="sourceFileName"&gt;The source file to check for&lt;/param&gt;</comment>
        <comment type="line" pos:line="425" pos:column="9">/// &lt;returns&gt;True if &lt;paramref name="globalScope"/&gt; contains &lt;paramref name="sourceFileName"/&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="426" pos:column="9">protected</specifier> <name pos:line="426" pos:column="19">bool</name></type> <name pos:line="426" pos:column="24">ContainsFile</name><parameter_list pos:line="426" pos:column="36">(<param><decl><type><name pos:line="426" pos:column="37">NamespaceDefinition</name></type> <name pos:line="426" pos:column="57">globalScope</name></decl></param>, <param><decl><type><name pos:line="426" pos:column="70">string</name></type> <name pos:line="426" pos:column="77">sourceFileName</name></decl></param>)</parameter_list> <block pos:line="426" pos:column="93">{
            <if pos:line="427" pos:column="13">if<condition pos:line="427" pos:column="15">(<expr><name pos:line="427" pos:column="16">IsDisposed</name></expr>)</condition><then pos:line="427" pos:column="27"> <block pos:line="427" pos:column="28">{ <throw pos:line="427" pos:column="30">throw <expr><op:operator pos:line="427" pos:column="36">new</op:operator> <call><name pos:line="427" pos:column="40">ObjectDisposedException</name><argument_list pos:line="427" pos:column="63">(<argument><expr><name pos:line="427" pos:column="64">null</name></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>
            <if pos:line="428" pos:column="13">if<condition pos:line="428" pos:column="15">(<expr><call><name><name pos:line="428" pos:column="16">String</name><op:operator pos:line="428" pos:column="22">.</op:operator><name pos:line="428" pos:column="23">IsNullOrWhiteSpace</name></name><argument_list pos:line="428" pos:column="41">(<argument><expr><name pos:line="428" pos:column="42">sourceFileName</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="428" pos:column="58"> <block pos:line="428" pos:column="59">{ <throw pos:line="428" pos:column="61">throw <expr><op:operator pos:line="428" pos:column="67">new</op:operator> <call><name pos:line="428" pos:column="71">ArgumentNullException</name><argument_list pos:line="428" pos:column="92">(<argument><expr><lit:literal type="string" pos:line="428" pos:column="93">"sourceFileName"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>

            <return pos:line="430" pos:column="13">return <expr><call><name><name pos:line="430" pos:column="20">globalScope</name><op:operator pos:line="430" pos:column="31">.</op:operator><name pos:line="430" pos:column="32">Locations</name><op:operator pos:line="430" pos:column="41">.</op:operator><name pos:line="430" pos:column="42">Any</name></name><argument_list pos:line="430" pos:column="45">(<argument><expr><lambda><name pos:line="430" pos:column="46">l</name> <op:operator pos:line="430" pos:column="48">=&gt;</op:operator> <call><name><name pos:line="430" pos:column="51">l</name><op:operator pos:line="430" pos:column="52">.</op:operator><name pos:line="430" pos:column="53">SourceFileName</name><op:operator pos:line="430" pos:column="67">.</op:operator><name pos:line="430" pos:column="68">Equals</name></name><argument_list pos:line="430" pos:column="74">(<argument><expr><call><name><name pos:line="430" pos:column="75">Path</name><op:operator pos:line="430" pos:column="79">.</op:operator><name pos:line="430" pos:column="80">GetFullPath</name></name><argument_list pos:line="430" pos:column="91">(<argument><expr><name pos:line="430" pos:column="92">sourceFileName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="430" pos:column="109">StringComparison</name><op:operator pos:line="430" pos:column="125">.</op:operator><name pos:line="430" pos:column="126">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="433" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="434" pos:column="9">/// This method should only be used when initializing a working set. After initialization,</comment>
        <comment type="line" pos:line="435" pos:column="9">/// &lt;see cref="TryAddOrUpdateFile"/&gt; should be used as it first attempts to remove a file</comment>
        <comment type="line" pos:line="436" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="437" pos:column="9">/// &lt;param name="globalScope"&gt;The global scope object&lt;/param&gt;</comment>
        <comment type="line" pos:line="438" pos:column="9">/// &lt;param name="sourceFileName"&gt;True if &lt;paramref name="globalScope"/&gt; was modified; false otherwise&lt;/param&gt;</comment>
        <comment type="line" pos:line="439" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="440" pos:column="9">protected</specifier> <name pos:line="440" pos:column="19">bool</name></type> <name pos:line="440" pos:column="24">TryAddFile</name><parameter_list pos:line="440" pos:column="34">(<param><decl><type><name pos:line="440" pos:column="35">NamespaceDefinition</name></type> <name pos:line="440" pos:column="55">globalScope</name></decl></param>, <param><decl><type><name pos:line="440" pos:column="68">string</name></type> <name pos:line="440" pos:column="75">sourceFileName</name></decl></param>)</parameter_list> <block pos:line="440" pos:column="91">{
            <if pos:line="441" pos:column="13">if<condition pos:line="441" pos:column="15">(<expr><name pos:line="441" pos:column="16">IsDisposed</name></expr>)</condition><then pos:line="441" pos:column="27"> <block pos:line="441" pos:column="28">{ <throw pos:line="441" pos:column="30">throw <expr><op:operator pos:line="441" pos:column="36">new</op:operator> <call><name pos:line="441" pos:column="40">ObjectDisposedException</name><argument_list pos:line="441" pos:column="63">(<argument><expr><name pos:line="441" pos:column="64">null</name></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>
            <if pos:line="442" pos:column="13">if<condition pos:line="442" pos:column="15">(<expr><name pos:line="442" pos:column="16">null</name> <op:operator pos:line="442" pos:column="21">==</op:operator> <name pos:line="442" pos:column="24">Archive</name></expr>)</condition><then pos:line="442" pos:column="32"> <block pos:line="442" pos:column="33">{ <throw pos:line="442" pos:column="35">throw <expr><op:operator pos:line="442" pos:column="41">new</op:operator> <call><name pos:line="442" pos:column="45">InvalidOperationException</name><argument_list pos:line="442" pos:column="70">(<argument><expr><lit:literal type="string" pos:line="442" pos:column="71">"Archive is null"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>

            <decl_stmt><decl><type><name pos:line="444" pos:column="13">bool</name></type> <name pos:line="444" pos:column="18">workingSetChanged</name> <init pos:line="444" pos:column="36">= <expr><lit:literal type="boolean" pos:line="444" pos:column="38">false</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="445" pos:column="13">var</name></type> <name pos:line="445" pos:column="17">data</name> <init pos:line="445" pos:column="22">= <expr><call><name><name pos:line="445" pos:column="24">Archive</name><op:operator pos:line="445" pos:column="31">.</op:operator><name pos:line="445" pos:column="32">GetData</name></name><argument_list pos:line="445" pos:column="39">(<argument><expr><name pos:line="445" pos:column="40">sourceFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if pos:line="447" pos:column="13">if<condition pos:line="447" pos:column="15">(<expr><name pos:line="447" pos:column="16">null</name> <op:operator pos:line="447" pos:column="21">!=</op:operator> <name pos:line="447" pos:column="24">data</name></expr>)</condition><then pos:line="447" pos:column="29"> <block pos:line="447" pos:column="30">{
                <if pos:line="448" pos:column="17">if<condition pos:line="448" pos:column="19">(<expr><name pos:line="448" pos:column="20">null</name> <op:operator pos:line="448" pos:column="25">==</op:operator> <name pos:line="448" pos:column="28">globalScope</name></expr>)</condition><then pos:line="448" pos:column="40"> <block pos:line="448" pos:column="41">{
                    <expr_stmt><expr><name pos:line="449" pos:column="21">globalScope</name> <op:operator pos:line="449" pos:column="33">=</op:operator> <name pos:line="449" pos:column="35">data</name></expr>;</expr_stmt>
                }</block></then> <else pos:line="450" pos:column="19">else <block pos:line="450" pos:column="24">{
                    <expr_stmt><expr><name pos:line="451" pos:column="21">globalScope</name> <op:operator pos:line="451" pos:column="33">=</op:operator> <call><name><name pos:line="451" pos:column="35">globalScope</name><op:operator pos:line="451" pos:column="46">.</op:operator><name pos:line="451" pos:column="47">Merge</name></name><argument_list pos:line="451" pos:column="52">(<argument><expr><name pos:line="451" pos:column="53">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><name pos:line="453" pos:column="17">workingSetChanged</name> <op:operator pos:line="453" pos:column="35">=</op:operator> <lit:literal type="boolean" pos:line="453" pos:column="37">true</lit:literal></expr>;</expr_stmt>
            }</block></then></if>

            <return pos:line="456" pos:column="13">return <expr><name pos:line="456" pos:column="20">workingSetChanged</name></expr>;</return>
        }</block></function>
        <comment type="line" pos:line="458" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="459" pos:column="9">/// Adds or updates &lt;paramref name="sourceFileName"/&gt; in the given &lt;paramref name="scopeManager"/&gt;.</comment>
        <comment type="line" pos:line="460" pos:column="9">/// The file is removed from the global scope in &lt;paramref name="scopeManager"/&gt; if it already exists via &lt;see cref="TryRemoveFile"/&gt;.</comment>
        <comment type="line" pos:line="461" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="462" pos:column="9">/// &lt;param name="scopeManager"&gt;The global scope manager&lt;/param&gt;</comment>
        <comment type="line" pos:line="463" pos:column="9">/// &lt;param name="sourceFileName"&gt;The source file to check for&lt;/param&gt;</comment>
        <comment type="line" pos:line="464" pos:column="9">/// &lt;returns&gt;True if the global scope was modified; false otherwise&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="465" pos:column="9">protected</specifier> <name pos:line="465" pos:column="19">bool</name></type> <name pos:line="465" pos:column="24">TryAddOrUpdateFile</name><parameter_list pos:line="465" pos:column="42">(<param><decl><type><name pos:line="465" pos:column="43">GlobalScopeManager</name></type> <name pos:line="465" pos:column="62">scopeManager</name></decl></param>, <param><decl><type><name pos:line="465" pos:column="76">string</name></type> <name pos:line="465" pos:column="83">sourceFileName</name></decl></param>)</parameter_list> <block pos:line="465" pos:column="99">{
            <if pos:line="466" pos:column="13">if<condition pos:line="466" pos:column="15">(<expr><name pos:line="466" pos:column="16">IsDisposed</name></expr>)</condition><then pos:line="466" pos:column="27"> <block pos:line="466" pos:column="28">{ <throw pos:line="466" pos:column="30">throw <expr><op:operator pos:line="466" pos:column="36">new</op:operator> <call><name pos:line="466" pos:column="40">ObjectDisposedException</name><argument_list pos:line="466" pos:column="63">(<argument><expr><name pos:line="466" pos:column="64">null</name></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>
            <if pos:line="467" pos:column="13">if<condition pos:line="467" pos:column="15">(<expr><name pos:line="467" pos:column="16">null</name> <op:operator pos:line="467" pos:column="21">==</op:operator> <name pos:line="467" pos:column="24">Archive</name></expr>)</condition><then pos:line="467" pos:column="32"> <block pos:line="467" pos:column="33">{ <throw pos:line="467" pos:column="35">throw <expr><op:operator pos:line="467" pos:column="41">new</op:operator> <call><name pos:line="467" pos:column="45">InvalidOperationException</name><argument_list pos:line="467" pos:column="70">(<argument><expr><lit:literal type="string" pos:line="467" pos:column="71">"Archive is null"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>
            <if pos:line="468" pos:column="13">if<condition pos:line="468" pos:column="15">(<expr><name pos:line="468" pos:column="16">null</name> <op:operator pos:line="468" pos:column="21">==</op:operator> <name pos:line="468" pos:column="24">scopeManager</name></expr>)</condition><then pos:line="468" pos:column="37"> <block pos:line="468" pos:column="38">{ <throw pos:line="468" pos:column="40">throw <expr><op:operator pos:line="468" pos:column="46">new</op:operator> <call><name pos:line="468" pos:column="50">ArgumentNullException</name><argument_list pos:line="468" pos:column="71">(<argument><expr><lit:literal type="string" pos:line="468" pos:column="72">"scopeManager"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>

            <decl_stmt><decl><type><name pos:line="470" pos:column="13">bool</name></type> <name pos:line="470" pos:column="18">workingSetChanged</name> <init pos:line="470" pos:column="36">= <expr><lit:literal type="boolean" pos:line="470" pos:column="38">false</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="471" pos:column="13">var</name></type> <name pos:line="471" pos:column="17">data</name> <init pos:line="471" pos:column="22">= <expr><call><name><name pos:line="471" pos:column="24">Archive</name><op:operator pos:line="471" pos:column="31">.</op:operator><name pos:line="471" pos:column="32">GetData</name></name><argument_list pos:line="471" pos:column="39">(<argument><expr><name pos:line="471" pos:column="40">sourceFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if pos:line="473" pos:column="13">if<condition pos:line="473" pos:column="15">(<expr><name pos:line="473" pos:column="16">null</name> <op:operator pos:line="473" pos:column="21">!=</op:operator> <name pos:line="473" pos:column="24">data</name></expr>)</condition><then pos:line="473" pos:column="29"> <block pos:line="473" pos:column="30">{
                <if pos:line="474" pos:column="17">if<condition pos:line="474" pos:column="19">(<expr><name pos:line="474" pos:column="20">null</name> <op:operator pos:line="474" pos:column="25">==</op:operator> <name><name pos:line="474" pos:column="28">scopeManager</name><op:operator pos:line="474" pos:column="40">.</op:operator><name pos:line="474" pos:column="41">GlobalScope</name></name></expr>)</condition><then pos:line="474" pos:column="53"> <block pos:line="474" pos:column="54">{
                    <expr_stmt><expr><name><name pos:line="475" pos:column="21">scopeManager</name><op:operator pos:line="475" pos:column="33">.</op:operator><name pos:line="475" pos:column="34">GlobalScope</name></name> <op:operator pos:line="475" pos:column="46">=</op:operator> <name pos:line="475" pos:column="48">data</name></expr>;</expr_stmt>
                }</block></then> <else pos:line="476" pos:column="19">else <block pos:line="476" pos:column="24">{
                    <expr_stmt><expr><call><name pos:line="477" pos:column="21">TryRemoveFile</name><argument_list pos:line="477" pos:column="34">(<argument><expr><name pos:line="477" pos:column="35">scopeManager</name></expr></argument>, <argument><expr><name pos:line="477" pos:column="49">sourceFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="478" pos:column="21">scopeManager</name><op:operator pos:line="478" pos:column="33">.</op:operator><name pos:line="478" pos:column="34">GlobalScope</name></name> <op:operator pos:line="478" pos:column="46">=</op:operator> <call><name><name pos:line="478" pos:column="48">scopeManager</name><op:operator pos:line="478" pos:column="60">.</op:operator><name pos:line="478" pos:column="61">GlobalScope</name><op:operator pos:line="478" pos:column="72">.</op:operator><name pos:line="478" pos:column="73">Merge</name></name><argument_list pos:line="478" pos:column="78">(<argument><expr><name pos:line="478" pos:column="79">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><name pos:line="480" pos:column="17">workingSetChanged</name> <op:operator pos:line="480" pos:column="35">=</op:operator> <lit:literal type="boolean" pos:line="480" pos:column="37">true</lit:literal></expr>;</expr_stmt>
            }</block></then></if>

            <return pos:line="483" pos:column="13">return <expr><name pos:line="483" pos:column="20">workingSetChanged</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="486" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="487" pos:column="9">/// Removes &lt;paramref name="sourceFileName"/&gt; from &lt;paramref name="scopeManager"/&gt;</comment>
        <comment type="line" pos:line="488" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="489" pos:column="9">/// &lt;param name="scopeManager"&gt;The global scope manager&lt;/param&gt;</comment>
        <comment type="line" pos:line="490" pos:column="9">/// &lt;param name="sourceFileName"&gt;the source file to remove&lt;/param&gt;</comment>
        <comment type="line" pos:line="491" pos:column="9">/// &lt;returns&gt;True if the global scope was modified; false otherwise&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="492" pos:column="9">protected</specifier> <name pos:line="492" pos:column="19">bool</name></type> <name pos:line="492" pos:column="24">TryRemoveFile</name><parameter_list pos:line="492" pos:column="37">(<param><decl><type><name pos:line="492" pos:column="38">GlobalScopeManager</name></type> <name pos:line="492" pos:column="57">scopeManager</name></decl></param>, <param><decl><type><name pos:line="492" pos:column="71">string</name></type> <name pos:line="492" pos:column="78">sourceFileName</name></decl></param>)</parameter_list> <block pos:line="492" pos:column="94">{
            <if pos:line="493" pos:column="13">if<condition pos:line="493" pos:column="15">(<expr><name pos:line="493" pos:column="16">IsDisposed</name></expr>)</condition><then pos:line="493" pos:column="27"> <block pos:line="493" pos:column="28">{ <throw pos:line="493" pos:column="30">throw <expr><op:operator pos:line="493" pos:column="36">new</op:operator> <call><name pos:line="493" pos:column="40">ObjectDisposedException</name><argument_list pos:line="493" pos:column="63">(<argument><expr><name pos:line="493" pos:column="64">null</name></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>
            <if pos:line="494" pos:column="13">if<condition pos:line="494" pos:column="15">(<expr><name pos:line="494" pos:column="16">null</name> <op:operator pos:line="494" pos:column="21">==</op:operator> <name pos:line="494" pos:column="24">scopeManager</name></expr>)</condition><then pos:line="494" pos:column="37"> <block pos:line="494" pos:column="38">{ <throw pos:line="494" pos:column="40">throw <expr><op:operator pos:line="494" pos:column="46">new</op:operator> <call><name pos:line="494" pos:column="50">ArgumentNullException</name><argument_list pos:line="494" pos:column="71">(<argument><expr><lit:literal type="string" pos:line="494" pos:column="72">"scopeManager"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>

            <decl_stmt><decl><type><name pos:line="496" pos:column="13">bool</name></type> <name pos:line="496" pos:column="18">workingSetChanged</name> <init pos:line="496" pos:column="36">= <expr><lit:literal type="boolean" pos:line="496" pos:column="38">false</lit:literal></expr></init></decl>;</decl_stmt>

            <if pos:line="498" pos:column="13">if<condition pos:line="498" pos:column="15">(<expr><call><name pos:line="498" pos:column="16">ContainsFile</name><argument_list pos:line="498" pos:column="28">(<argument><expr><name><name pos:line="498" pos:column="29">scopeManager</name><op:operator pos:line="498" pos:column="41">.</op:operator><name pos:line="498" pos:column="42">GlobalScope</name></name></expr></argument>, <argument><expr><name pos:line="498" pos:column="55">sourceFileName</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="498" pos:column="71"> <block pos:line="498" pos:column="72">{
                <expr_stmt><expr><call><name><name pos:line="499" pos:column="17">scopeManager</name><op:operator pos:line="499" pos:column="29">.</op:operator><name pos:line="499" pos:column="30">GlobalScope</name><op:operator pos:line="499" pos:column="41">.</op:operator><name pos:line="499" pos:column="42">RemoveFile</name></name><argument_list pos:line="499" pos:column="52">(<argument><expr><name pos:line="499" pos:column="53">sourceFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="500" pos:column="17">workingSetChanged</name> <op:operator pos:line="500" pos:column="35">=</op:operator> <lit:literal type="boolean" pos:line="500" pos:column="37">true</lit:literal></expr>;</expr_stmt>
            }</block></then></if>

            <return pos:line="503" pos:column="13">return <expr><name pos:line="503" pos:column="20">workingSetChanged</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="506" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="507" pos:column="9">/// &lt;see cref="TryRemoveFile"&gt;Removes&lt;/see&gt; &lt;paramref name="oldSourceFileName"/&gt; and</comment>
        <comment type="line" pos:line="508" pos:column="9">/// &lt;see cref="TryAddOrUpdateFile"&gt;adds or updates&lt;/see&gt; &lt;paramref name="newSourceFileName"/&gt;from</comment>
        <comment type="line" pos:line="509" pos:column="9">/// the global scope.</comment>
        <comment type="line" pos:line="510" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="511" pos:column="9">/// &lt;param name="scopeManager"&gt;The global scope manager&lt;/param&gt;</comment>
        <comment type="line" pos:line="512" pos:column="9">/// &lt;param name="oldSourceFileName"&gt;The old file name to remove&lt;/param&gt;</comment>
        <comment type="line" pos:line="513" pos:column="9">/// &lt;param name="newSourceFileName"&gt;The new file name to add or update&lt;/param&gt;</comment>
        <comment type="line" pos:line="514" pos:column="9">/// &lt;returns&gt;True if the global scope was modified; false otherwise&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="515" pos:column="9">protected</specifier> <name pos:line="515" pos:column="19">bool</name></type> <name pos:line="515" pos:column="24">TryRenameFile</name><parameter_list pos:line="515" pos:column="37">(<param><decl><type><name pos:line="515" pos:column="38">GlobalScopeManager</name></type> <name pos:line="515" pos:column="57">scopeManager</name></decl></param>, <param><decl><type><name pos:line="515" pos:column="71">string</name></type> <name pos:line="515" pos:column="78">oldSourceFileName</name></decl></param>, <param><decl><type><name pos:line="515" pos:column="97">String</name></type> <name pos:line="515" pos:column="104">newSourceFileName</name></decl></param>)</parameter_list> <block pos:line="515" pos:column="123">{
            <if pos:line="516" pos:column="13">if<condition pos:line="516" pos:column="15">(<expr><name pos:line="516" pos:column="16">IsDisposed</name></expr>)</condition><then pos:line="516" pos:column="27"> <block pos:line="516" pos:column="28">{ <throw pos:line="516" pos:column="30">throw <expr><op:operator pos:line="516" pos:column="36">new</op:operator> <call><name pos:line="516" pos:column="40">ObjectDisposedException</name><argument_list pos:line="516" pos:column="63">(<argument><expr><name pos:line="516" pos:column="64">null</name></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>
            <if pos:line="517" pos:column="13">if<condition pos:line="517" pos:column="15">(<expr><name pos:line="517" pos:column="16">null</name> <op:operator pos:line="517" pos:column="21">==</op:operator> <name pos:line="517" pos:column="24">scopeManager</name></expr>)</condition><then pos:line="517" pos:column="37"> <block pos:line="517" pos:column="38">{ <throw pos:line="517" pos:column="40">throw <expr><op:operator pos:line="517" pos:column="46">new</op:operator> <call><name pos:line="517" pos:column="50">ArgumentNullException</name><argument_list pos:line="517" pos:column="71">(<argument><expr><lit:literal type="string" pos:line="517" pos:column="72">"scopeManager"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>

            <decl_stmt><decl><type><name pos:line="519" pos:column="13">bool</name></type> <name pos:line="519" pos:column="18">workingSetChanged</name> <init pos:line="519" pos:column="36">= <expr><call><name pos:line="519" pos:column="38">TryRemoveFile</name><argument_list pos:line="519" pos:column="51">(<argument><expr><name pos:line="519" pos:column="52">scopeManager</name></expr></argument>, <argument><expr><name pos:line="519" pos:column="66">oldSourceFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="520" pos:column="13">workingSetChanged</name> <op:operator pos:line="520" pos:column="31">=</op:operator> <call><name pos:line="520" pos:column="33">TryAddOrUpdateFile</name><argument_list pos:line="520" pos:column="51">(<argument><expr><name pos:line="520" pos:column="52">scopeManager</name></expr></argument>, <argument><expr><name pos:line="520" pos:column="66">newSourceFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="521" pos:column="13">return <expr><name pos:line="521" pos:column="20">workingSetChanged</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="524" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="525" pos:column="9">/// Raises the &lt;see cref="Changed"/&gt; event</comment>
        <comment type="line" pos:line="526" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="527" pos:column="9">/// &lt;param name="e"&gt;empty event args&lt;/param&gt;</comment>
        <function><type><specifier pos:line="528" pos:column="9">protected</specifier> <specifier pos:line="528" pos:column="19">virtual</specifier> <name pos:line="528" pos:column="27">void</name></type> <name pos:line="528" pos:column="32">OnChanged</name><parameter_list pos:line="528" pos:column="41">(<param><decl><type><name pos:line="528" pos:column="42">EventArgs</name></type> <name pos:line="528" pos:column="52">e</name></decl></param>)</parameter_list> <block pos:line="528" pos:column="55">{
            <if pos:line="529" pos:column="13">if<condition pos:line="529" pos:column="15">(<expr><name pos:line="529" pos:column="16">IsDisposed</name></expr>)</condition><then pos:line="529" pos:column="27"> <block pos:line="529" pos:column="28">{ <throw pos:line="529" pos:column="30">throw <expr><op:operator pos:line="529" pos:column="36">new</op:operator> <call><name pos:line="529" pos:column="40">ObjectDisposedException</name><argument_list pos:line="529" pos:column="63">(<argument><expr><name pos:line="529" pos:column="64">null</name></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>

            <decl_stmt><decl><type><name pos:line="531" pos:column="13">EventHandler</name></type> <name pos:line="531" pos:column="26">handler</name> <init pos:line="531" pos:column="34">= <expr><name pos:line="531" pos:column="36">Changed</name></expr></init></decl>;</decl_stmt>
            <if pos:line="532" pos:column="13">if<condition pos:line="532" pos:column="15">(<expr><name pos:line="532" pos:column="16">null</name> <op:operator pos:line="532" pos:column="21">!=</op:operator> <name pos:line="532" pos:column="24">handler</name></expr>)</condition><then pos:line="532" pos:column="32"> <block pos:line="532" pos:column="33">{
                <expr_stmt><expr><call><name pos:line="533" pos:column="17">handler</name><argument_list pos:line="533" pos:column="24">(<argument><expr><name pos:line="533" pos:column="25">this</name></expr></argument>, <argument><expr><name pos:line="533" pos:column="31">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="537" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="538" pos:column="9">/// Raises the &lt;see cref="MonitoringStarted"/&gt; event</comment>
        <comment type="line" pos:line="539" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="540" pos:column="9">/// &lt;param name="e"&gt;empty event args&lt;/param&gt;</comment>
        <function><type><specifier pos:line="541" pos:column="9">private</specifier> <name pos:line="541" pos:column="17">void</name></type> <name pos:line="541" pos:column="22">OnMonitoringStarted</name><parameter_list pos:line="541" pos:column="41">(<param><decl><type><name pos:line="541" pos:column="42">EventArgs</name></type> <name pos:line="541" pos:column="52">e</name></decl></param>)</parameter_list> <block pos:line="541" pos:column="55">{
            <if pos:line="542" pos:column="13">if<condition pos:line="542" pos:column="15">(<expr><name pos:line="542" pos:column="16">IsDisposed</name></expr>)</condition><then pos:line="542" pos:column="27"> <block pos:line="542" pos:column="28">{ <throw pos:line="542" pos:column="30">throw <expr><op:operator pos:line="542" pos:column="36">new</op:operator> <call><name pos:line="542" pos:column="40">ObjectDisposedException</name><argument_list pos:line="542" pos:column="63">(<argument><expr><name pos:line="542" pos:column="64">null</name></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>

            <decl_stmt><decl><type><name pos:line="544" pos:column="13">EventHandler</name></type> <name pos:line="544" pos:column="26">handler</name> <init pos:line="544" pos:column="34">= <expr><name pos:line="544" pos:column="36">MonitoringStarted</name></expr></init></decl>;</decl_stmt>
            <if pos:line="545" pos:column="13">if<condition pos:line="545" pos:column="15">(<expr><name pos:line="545" pos:column="16">null</name> <op:operator pos:line="545" pos:column="21">!=</op:operator> <name pos:line="545" pos:column="24">handler</name></expr>)</condition><then pos:line="545" pos:column="32"> <block pos:line="545" pos:column="33">{
                <expr_stmt><expr><call><name pos:line="546" pos:column="17">handler</name><argument_list pos:line="546" pos:column="24">(<argument><expr><name pos:line="546" pos:column="25">this</name></expr></argument>, <argument><expr><name pos:line="546" pos:column="31">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="550" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="551" pos:column="9">/// Raises the &lt;see cref="MonitoringStopped"/&gt; event</comment>
        <comment type="line" pos:line="552" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="553" pos:column="9">/// &lt;param name="e"&gt;empty event args&lt;/param&gt;</comment>
        <function><type><specifier pos:line="554" pos:column="9">protected</specifier> <specifier pos:line="554" pos:column="19">virtual</specifier> <name pos:line="554" pos:column="27">void</name></type> <name pos:line="554" pos:column="32">OnMonitoringStopped</name><parameter_list pos:line="554" pos:column="51">(<param><decl><type><name pos:line="554" pos:column="52">EventArgs</name></type> <name pos:line="554" pos:column="62">e</name></decl></param>)</parameter_list> <block pos:line="554" pos:column="65">{
            <if pos:line="555" pos:column="13">if<condition pos:line="555" pos:column="15">(<expr><name pos:line="555" pos:column="16">IsDisposed</name></expr>)</condition><then pos:line="555" pos:column="27"> <block pos:line="555" pos:column="28">{ <throw pos:line="555" pos:column="30">throw <expr><op:operator pos:line="555" pos:column="36">new</op:operator> <call><name pos:line="555" pos:column="40">ObjectDisposedException</name><argument_list pos:line="555" pos:column="63">(<argument><expr><name pos:line="555" pos:column="64">null</name></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>

            <decl_stmt><decl><type><name pos:line="557" pos:column="13">EventHandler</name></type> <name pos:line="557" pos:column="26">handler</name> <init pos:line="557" pos:column="34">= <expr><name pos:line="557" pos:column="36">MonitoringStopped</name></expr></init></decl>;</decl_stmt>
            <if pos:line="558" pos:column="13">if<condition pos:line="558" pos:column="15">(<expr><name pos:line="558" pos:column="16">null</name> <op:operator pos:line="558" pos:column="21">!=</op:operator> <name pos:line="558" pos:column="24">handler</name></expr>)</condition><then pos:line="558" pos:column="32"> <block pos:line="558" pos:column="33">{
                <expr_stmt><expr><call><name pos:line="559" pos:column="17">handler</name><argument_list pos:line="559" pos:column="24">(<argument><expr><name pos:line="559" pos:column="25">this</name></expr></argument>, <argument><expr><name pos:line="559" pos:column="31">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="563" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="564" pos:column="9">/// Raises the &lt;see cref="UpdateCompleted"/&gt; event</comment>
        <comment type="line" pos:line="565" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="566" pos:column="9">/// &lt;param name="e"&gt;empty event args&lt;/param&gt;</comment>
        <function><type><specifier pos:line="567" pos:column="9">protected</specifier> <specifier pos:line="567" pos:column="19">virtual</specifier> <name pos:line="567" pos:column="27">void</name></type> <name pos:line="567" pos:column="32">OnUpdateCompleted</name><parameter_list pos:line="567" pos:column="49">(<param><decl><type><name pos:line="567" pos:column="50">EventArgs</name></type> <name pos:line="567" pos:column="60">e</name></decl></param>)</parameter_list> <block pos:line="567" pos:column="63">{
            <if pos:line="568" pos:column="13">if<condition pos:line="568" pos:column="15">(<expr><name pos:line="568" pos:column="16">IsDisposed</name></expr>)</condition><then pos:line="568" pos:column="27"> <block pos:line="568" pos:column="28">{ <throw pos:line="568" pos:column="30">throw <expr><op:operator pos:line="568" pos:column="36">new</op:operator> <call><name pos:line="568" pos:column="40">ObjectDisposedException</name><argument_list pos:line="568" pos:column="63">(<argument><expr><name pos:line="568" pos:column="64">null</name></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>

            <decl_stmt><decl><type><name pos:line="570" pos:column="13">EventHandler</name></type> <name pos:line="570" pos:column="26">handler</name> <init pos:line="570" pos:column="34">= <expr><name pos:line="570" pos:column="36">UpdateCompleted</name></expr></init></decl>;</decl_stmt>
            <if pos:line="571" pos:column="13">if<condition pos:line="571" pos:column="15">(<expr><name pos:line="571" pos:column="16">null</name> <op:operator pos:line="571" pos:column="21">!=</op:operator> <name pos:line="571" pos:column="24">handler</name></expr>)</condition><then pos:line="571" pos:column="32"> <block pos:line="571" pos:column="33">{
                <expr_stmt><expr><call><name pos:line="572" pos:column="17">handler</name><argument_list pos:line="572" pos:column="24">(<argument><expr><name pos:line="572" pos:column="25">this</name></expr></argument>, <argument><expr><name pos:line="572" pos:column="31">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="line" pos:line="576" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="577" pos:column="9">/// Raises the &lt;see cref="UpdateStarted"/&gt; event</comment>
        <comment type="line" pos:line="578" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="579" pos:column="9">/// &lt;param name="e"&gt;empty event args&lt;/param&gt;</comment>
        <function><type><specifier pos:line="580" pos:column="9">protected</specifier> <specifier pos:line="580" pos:column="19">virtual</specifier> <name pos:line="580" pos:column="27">void</name></type> <name pos:line="580" pos:column="32">OnUpdateStarted</name><parameter_list pos:line="580" pos:column="47">(<param><decl><type><name pos:line="580" pos:column="48">EventArgs</name></type> <name pos:line="580" pos:column="58">e</name></decl></param>)</parameter_list> <block pos:line="580" pos:column="61">{
            <if pos:line="581" pos:column="13">if<condition pos:line="581" pos:column="15">(<expr><name pos:line="581" pos:column="16">IsDisposed</name></expr>)</condition><then pos:line="581" pos:column="27"> <block pos:line="581" pos:column="28">{ <throw pos:line="581" pos:column="30">throw <expr><op:operator pos:line="581" pos:column="36">new</op:operator> <call><name pos:line="581" pos:column="40">ObjectDisposedException</name><argument_list pos:line="581" pos:column="63">(<argument><expr><name pos:line="581" pos:column="64">null</name></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>

            <decl_stmt><decl><type><name pos:line="583" pos:column="13">EventHandler</name></type> <name pos:line="583" pos:column="26">handler</name> <init pos:line="583" pos:column="34">= <expr><name pos:line="583" pos:column="36">UpdateStarted</name></expr></init></decl>;</decl_stmt>
            <if pos:line="584" pos:column="13">if<condition pos:line="584" pos:column="15">(<expr><name pos:line="584" pos:column="16">null</name> <op:operator pos:line="584" pos:column="21">!=</op:operator> <name pos:line="584" pos:column="24">handler</name></expr>)</condition><then pos:line="584" pos:column="32"> <block pos:line="584" pos:column="33">{
                <expr_stmt><expr><call><name pos:line="585" pos:column="17">handler</name><argument_list pos:line="585" pos:column="24">(<argument><expr><name pos:line="585" pos:column="25">this</name></expr></argument>, <argument><expr><name pos:line="585" pos:column="31">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>
        <comment type="line" pos:line="588" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="589" pos:column="9">/// Subscribes &lt;see cref="Archive_FileChanged"/&gt; to &lt;see cref="Archive"/&gt;</comment>
        <comment type="line" pos:line="590" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="591" pos:column="9">protected</specifier> <name pos:line="591" pos:column="19">void</name></type> <name pos:line="591" pos:column="24">SubscribeToArchive</name><parameter_list pos:line="591" pos:column="42">()</parameter_list> <block pos:line="591" pos:column="45">{
            <if pos:line="592" pos:column="13">if<condition pos:line="592" pos:column="15">(<expr><name pos:line="592" pos:column="16">IsDisposed</name></expr>)</condition><then pos:line="592" pos:column="27"> <block pos:line="592" pos:column="28">{ <throw pos:line="592" pos:column="30">throw <expr><op:operator pos:line="592" pos:column="36">new</op:operator> <call><name pos:line="592" pos:column="40">ObjectDisposedException</name><argument_list pos:line="592" pos:column="63">(<argument><expr><name pos:line="592" pos:column="64">null</name></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>
            <if pos:line="593" pos:column="13">if<condition pos:line="593" pos:column="15">(<expr><name pos:line="593" pos:column="16">null</name> <op:operator pos:line="593" pos:column="21">==</op:operator> <name pos:line="593" pos:column="24">Archive</name></expr>)</condition><then pos:line="593" pos:column="32"> <block pos:line="593" pos:column="33">{ <throw pos:line="593" pos:column="35">throw <expr><op:operator pos:line="593" pos:column="41">new</op:operator> <call><name pos:line="593" pos:column="45">InvalidOperationException</name><argument_list pos:line="593" pos:column="70">(<argument><expr><lit:literal type="string" pos:line="593" pos:column="71">"Archive is null"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>

            <expr_stmt><expr><name><name pos:line="595" pos:column="13">Archive</name><op:operator pos:line="595" pos:column="20">.</op:operator><name pos:line="595" pos:column="21">FileChanged</name></name> <op:operator pos:line="595" pos:column="33">+=</op:operator> <name pos:line="595" pos:column="36">Archive_FileChanged</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="598" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="599" pos:column="9">/// Unsubscribes &lt;see cref="Archive_FileChanged"/&gt; from &lt;see cref="Archive"/&gt;</comment>
        <comment type="line" pos:line="600" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="601" pos:column="9">protected</specifier> <name pos:line="601" pos:column="19">void</name></type> <name pos:line="601" pos:column="24">UnsubscribeFromArchive</name><parameter_list pos:line="601" pos:column="46">()</parameter_list> <block pos:line="601" pos:column="49">{
            <if pos:line="602" pos:column="13">if<condition pos:line="602" pos:column="15">(<expr><name pos:line="602" pos:column="16">IsDisposed</name></expr>)</condition><then pos:line="602" pos:column="27"> <block pos:line="602" pos:column="28">{ <throw pos:line="602" pos:column="30">throw <expr><op:operator pos:line="602" pos:column="36">new</op:operator> <call><name pos:line="602" pos:column="40">ObjectDisposedException</name><argument_list pos:line="602" pos:column="63">(<argument><expr><name pos:line="602" pos:column="64">null</name></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>
            <if pos:line="603" pos:column="13">if<condition pos:line="603" pos:column="15">(<expr><name pos:line="603" pos:column="16">null</name> <op:operator pos:line="603" pos:column="21">==</op:operator> <name pos:line="603" pos:column="24">Archive</name></expr>)</condition><then pos:line="603" pos:column="32"> <block pos:line="603" pos:column="33">{ <throw pos:line="603" pos:column="35">throw <expr><op:operator pos:line="603" pos:column="41">new</op:operator> <call><name pos:line="603" pos:column="45">InvalidOperationException</name><argument_list pos:line="603" pos:column="70">(<argument><expr><lit:literal type="string" pos:line="603" pos:column="71">"Archive is null"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>

            <expr_stmt><expr><name><name pos:line="605" pos:column="13">Archive</name><op:operator pos:line="605" pos:column="20">.</op:operator><name pos:line="605" pos:column="21">FileChanged</name></name> <op:operator pos:line="605" pos:column="33">-=</op:operator> <name pos:line="605" pos:column="36">Archive_FileChanged</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="608" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="609" pos:column="9">/// Sets &lt;paramref name="field"/&gt; to &lt;paramref name="value"/&gt; and then executes the appropriate event handler if &lt;paramref name="field"/&gt; has changed</comment>
        <comment type="line" pos:line="610" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="611" pos:column="9">/// &lt;param name="field"&gt;The private field to set&lt;/param&gt;</comment>
        <comment type="line" pos:line="612" pos:column="9">/// &lt;param name="value"&gt;The value&lt;/param&gt;</comment>
        <comment type="line" pos:line="613" pos:column="9">/// &lt;param name="startEventHandler"&gt;The event handler to execute if &lt;paramref name="value"/&gt; is true&lt;/param&gt;</comment>
        <comment type="line" pos:line="614" pos:column="9">/// &lt;param name="endEventHandler"&gt;The event handler to execute if &lt;paramref name="value"/&gt; is false&lt;/param&gt;</comment>
        <comment type="line" pos:line="615" pos:column="9">/// &lt;returns&gt;True if the &lt;paramref name="field"/&gt; has changed; false otherwise&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="616" pos:column="9">protected</specifier> <name pos:line="616" pos:column="19">bool</name></type> <name pos:line="616" pos:column="24">SetBooleanField</name><parameter_list pos:line="616" pos:column="39">(<param><decl><type><specifier pos:line="616" pos:column="40">ref</specifier> <name pos:line="616" pos:column="44">bool</name></type> <name pos:line="616" pos:column="49">field</name></decl></param>, <param><decl><type><name pos:line="616" pos:column="56">bool</name></type> <name pos:line="616" pos:column="61">value</name></decl></param>, <param><decl><type><name><name pos:line="616" pos:column="68">Action</name><argument_list pos:line="616" pos:column="74">&lt;<argument><name pos:line="616" pos:column="75">EventArgs</name></argument>&gt;</argument_list></name></type> <name pos:line="616" pos:column="86">startEventHandler</name></decl></param>, <param><decl><type><name><name pos:line="616" pos:column="105">Action</name><argument_list pos:line="616" pos:column="111">&lt;<argument><name pos:line="616" pos:column="112">EventArgs</name></argument>&gt;</argument_list></name></type> <name pos:line="616" pos:column="123">endEventHandler</name></decl></param>)</parameter_list> <block pos:line="616" pos:column="140">{
            <if pos:line="617" pos:column="13">if<condition pos:line="617" pos:column="15">(<expr><name pos:line="617" pos:column="16">field</name> <op:operator pos:line="617" pos:column="22">==</op:operator> <name pos:line="617" pos:column="25">value</name></expr>)</condition><then pos:line="617" pos:column="31"> <block pos:line="617" pos:column="32">{ <return pos:line="617" pos:column="34">return <expr><lit:literal type="boolean" pos:line="617" pos:column="41">false</lit:literal></expr>;</return> }</block></then></if>
            <expr_stmt><expr><name pos:line="618" pos:column="13">field</name> <op:operator pos:line="618" pos:column="19">=</op:operator> <name pos:line="618" pos:column="21">value</name></expr>;</expr_stmt>
            <expr_stmt><expr><op:operator pos:line="619" pos:column="13">(</op:operator><name pos:line="619" pos:column="14">field</name> <op:operator pos:line="619" pos:column="20">?</op:operator> <name pos:line="619" pos:column="22">startEventHandler</name> <op:operator pos:line="619" pos:column="40">:</op:operator> <name pos:line="619" pos:column="42">endEventHandler</name><op:operator pos:line="619" pos:column="57">)</op:operator><op:operator pos:line="619" pos:column="58">(</op:operator><op:operator pos:line="619" pos:column="59">new</op:operator> <call><name pos:line="619" pos:column="63">EventArgs</name><argument_list pos:line="619" pos:column="72">()</argument_list></call><op:operator pos:line="619" pos:column="74">)</op:operator></expr>;</expr_stmt>
            <return pos:line="620" pos:column="13">return <expr><lit:literal type="boolean" pos:line="620" pos:column="20">true</lit:literal></expr>;</return>
        }</block></function>
        <comment type="line" pos:line="622" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="623" pos:column="9">/// The global scope manager provides a reference to a global scope object. It is returned via &lt;see cref="TryObtainWriteLock"/&gt;.</comment>
        <comment type="line" pos:line="624" pos:column="9">/// the global scope manager allows you to </comment>
        <comment type="line" pos:line="625" pos:column="9">/// &lt;/summary&gt;</comment>
        <class><specifier pos:line="626" pos:column="9">protected</specifier> class <name pos:line="626" pos:column="25">GlobalScopeManager</name> <block pos:line="626" pos:column="44">{
            <comment type="line" pos:line="627" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="628" pos:column="13">/// Create a new global scope manager</comment>
            <comment type="line" pos:line="629" pos:column="13">/// &lt;/summary&gt;</comment>
            <constructor><specifier pos:line="630" pos:column="13">public</specifier> <name pos:line="630" pos:column="20">GlobalScopeManager</name><parameter_list pos:line="630" pos:column="38">()</parameter_list> <block pos:line="630" pos:column="41">{
                <expr_stmt><expr><name pos:line="631" pos:column="17">GlobalScope</name> <op:operator pos:line="631" pos:column="29">=</op:operator> <name pos:line="631" pos:column="31">null</name></expr>;</expr_stmt>
            }</block></constructor>

            <comment type="line" pos:line="634" pos:column="13">/// &lt;summary&gt;</comment>
            <comment type="line" pos:line="635" pos:column="13">/// The global scope managed by this object</comment>
            <comment type="line" pos:line="636" pos:column="13">/// &lt;/summary&gt;</comment>
            <decl_stmt><decl><type><specifier pos:line="637" pos:column="13">public</specifier> <name pos:line="637" pos:column="20">NamespaceDefinition</name></type> <name pos:line="637" pos:column="40">GlobalScope</name> <block pos:line="637" pos:column="52">{ <function_decl><name pos:line="637" pos:column="54">get</name>;</function_decl> <function_decl><name pos:line="637" pos:column="59">set</name>;</function_decl> }</block></decl></decl_stmt>

        }</block></class>
    }</block></class>
}</block></namespace>
</unit>
