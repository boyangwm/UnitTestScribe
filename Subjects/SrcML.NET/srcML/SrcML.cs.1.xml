<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML\SrcML.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2010 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">Microsoft</name><op:operator pos:line="12" pos:column="16">.</op:operator><name pos:line="12" pos:column="17">CSharp</name></name>;</using>
<using pos:line="13" pos:column="1">using <name pos:line="13" pos:column="7">System</name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">CodeDom</name><op:operator pos:line="14" pos:column="21">.</op:operator><name pos:line="14" pos:column="22">Compiler</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Collections</name><op:operator pos:line="15" pos:column="25">.</op:operator><name pos:line="15" pos:column="26">Generic</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Diagnostics</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">IO</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Text</name><op:operator pos:line="18" pos:column="18">.</op:operator><name pos:line="18" pos:column="19">RegularExpressions</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">System</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">Linq</name></name>;</using>
<using pos:line="20" pos:column="1">using <name><name pos:line="20" pos:column="7">System</name><op:operator pos:line="20" pos:column="13">.</op:operator><name pos:line="20" pos:column="14">Xml</name><op:operator pos:line="20" pos:column="17">.</op:operator><name pos:line="20" pos:column="18">Linq</name></name>;</using>
<using pos:line="21" pos:column="1">using <name><name pos:line="21" pos:column="7">System</name><op:operator pos:line="21" pos:column="13">.</op:operator><name pos:line="21" pos:column="14">Collections</name><op:operator pos:line="21" pos:column="25">.</op:operator><name pos:line="21" pos:column="26">ObjectModel</name></name>;</using>
<using pos:line="22" pos:column="1">using <name><name pos:line="22" pos:column="7">ABB</name><op:operator pos:line="22" pos:column="10">.</op:operator><name pos:line="22" pos:column="11">SrcML</name><op:operator pos:line="22" pos:column="16">.</op:operator><name pos:line="22" pos:column="17">Utilities</name></name>;</using>
<using pos:line="23" pos:column="1">using <name><name pos:line="23" pos:column="7">System</name><op:operator pos:line="23" pos:column="13">.</op:operator><name pos:line="23" pos:column="14">Xml</name></name>;</using>
<using pos:line="24" pos:column="1">using <name><name pos:line="24" pos:column="7">System</name><op:operator pos:line="24" pos:column="13">.</op:operator><name pos:line="24" pos:column="14">Globalization</name></name>;</using>
<using pos:line="25" pos:column="1">using <name><name pos:line="25" pos:column="7">System</name><op:operator pos:line="25" pos:column="13">.</op:operator><name pos:line="25" pos:column="14">Security</name></name>;</using>

<namespace pos:line="27" pos:column="1">namespace <name><name pos:line="27" pos:column="11">ABB</name><op:operator pos:line="27" pos:column="14">.</op:operator><name pos:line="27" pos:column="15">SrcML</name></name>
<block pos:line="28" pos:column="1">{
    <comment type="line" pos:line="29" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="30" pos:column="5">/// This is a utility class for generating SrcML files. It has functions that use the original SrcML executables,</comment>
    <comment type="line" pos:line="31" pos:column="5">/// and some native C# functions for generating SrcML.</comment>
    <comment type="line" pos:line="32" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><attribute pos:line="33" pos:column="5">[<expr><call><name><name pos:line="33" pos:column="6">System</name><op:operator pos:line="33" pos:column="12">.</op:operator><name pos:line="33" pos:column="13">Diagnostics</name><op:operator pos:line="33" pos:column="24">.</op:operator><name pos:line="33" pos:column="25">CodeAnalysis</name><op:operator pos:line="33" pos:column="37">.</op:operator><name pos:line="33" pos:column="38">SuppressMessage</name></name><argument_list pos:line="33" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="33" pos:column="54">"Microsoft.Naming"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="33" pos:column="74">"CA1724:TypeNamesShouldNotMatchNamespaces"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="34" pos:column="5">public</specifier> class <name pos:line="34" pos:column="18">SrcML</name>
    <block pos:line="35" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="36" pos:column="9">private</specifier> <specifier pos:line="36" pos:column="17">readonly</specifier> <name><name pos:line="36" pos:column="26">DefaultsDictionary</name><argument_list pos:line="36" pos:column="44">&lt;<argument><name pos:line="36" pos:column="45">string</name></argument>, <argument><name pos:line="36" pos:column="53">Language</name></argument>&gt;</argument_list></name></type> <name pos:line="36" pos:column="63">_extensionMapping</name> <init pos:line="36" pos:column="81">= <expr><op:operator pos:line="36" pos:column="83">new</op:operator> <call><name><name pos:line="36" pos:column="87">DefaultsDictionary</name><argument_list pos:line="36" pos:column="105">&lt;<argument><name pos:line="36" pos:column="106">string</name></argument>, <argument><name pos:line="36" pos:column="114">Language</name></argument>&gt;</argument_list></name><argument_list pos:line="36" pos:column="123">(<argument><expr><op:operator pos:line="36" pos:column="124">new</op:operator> <call><name><name pos:line="36" pos:column="128">Dictionary</name><argument_list pos:line="36" pos:column="138">&lt;<argument><name pos:line="36" pos:column="139">string</name></argument>, <argument><name pos:line="36" pos:column="147">Language</name></argument>&gt;</argument_list></name><argument_list pos:line="36" pos:column="156">(<argument><expr><name><name pos:line="36" pos:column="157">StringComparer</name><op:operator pos:line="36" pos:column="171">.</op:operator><name pos:line="36" pos:column="172">OrdinalIgnoreCase</name></name></expr></argument>)</argument_list></call> <block pos:line="36" pos:column="191">{
                    <expr><block pos:line="37" pos:column="21">{ <expr><lit:literal type="string" pos:line="37" pos:column="23">".c"</lit:literal></expr> , <expr><name><name pos:line="37" pos:column="30">Language</name><op:operator pos:line="37" pos:column="38">.</op:operator><name pos:line="37" pos:column="39">C</name></name></expr> }</block></expr>,
                    <expr><block pos:line="38" pos:column="21">{ <expr><lit:literal type="string" pos:line="38" pos:column="23">".h"</lit:literal></expr>, <expr><name><name pos:line="38" pos:column="29">Language</name><op:operator pos:line="38" pos:column="37">.</op:operator><name pos:line="38" pos:column="38">C</name></name></expr> }</block></expr>,
                    <expr><block pos:line="39" pos:column="21">{ <expr><lit:literal type="string" pos:line="39" pos:column="23">".cpp"</lit:literal></expr>, <expr><name><name pos:line="39" pos:column="31">Language</name><op:operator pos:line="39" pos:column="39">.</op:operator><name pos:line="39" pos:column="40">CPlusPlus</name></name></expr> }</block></expr>,
                    <expr><block pos:line="40" pos:column="21">{ <expr><lit:literal type="string" pos:line="40" pos:column="23">".java"</lit:literal></expr>, <expr><name><name pos:line="40" pos:column="32">Language</name><op:operator pos:line="40" pos:column="40">.</op:operator><name pos:line="40" pos:column="41">Java</name></name></expr> }</block></expr>
        }</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="43" pos:column="9">private</specifier> <specifier pos:line="43" pos:column="17">readonly</specifier> <name pos:line="43" pos:column="26">string</name></type> <name pos:line="43" pos:column="33">src2srcml_exe</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="44" pos:column="9">private</specifier> <specifier pos:line="44" pos:column="17">readonly</specifier> <name pos:line="44" pos:column="26">string</name></type> <name pos:line="44" pos:column="33">srcml2src_exe</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="45" pos:column="9">private</specifier> <specifier pos:line="45" pos:column="17">readonly</specifier> <name pos:line="45" pos:column="26">string</name></type> <name pos:line="45" pos:column="33">srcmlDir</name></decl>;</decl_stmt>

        <comment type="line" pos:line="47" pos:column="9">/// &lt;summary&gt;executable name for src2srcml executable&lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="48" pos:column="9">public</specifier> <specifier pos:line="48" pos:column="16">const</specifier> <name pos:line="48" pos:column="22">string</name></type> <name pos:line="48" pos:column="29">Src2SrcMLExecutableName</name> <init pos:line="48" pos:column="53">= <expr><lit:literal type="string" pos:line="48" pos:column="55">"src2srcml.exe"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="50" pos:column="9">/// &lt;summary&gt;executable name for ExtractSourceFile executable&lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="51" pos:column="9">public</specifier> <specifier pos:line="51" pos:column="16">const</specifier> <name pos:line="51" pos:column="22">string</name></type> <name pos:line="51" pos:column="29">SrcML2SrcExecutableName</name> <init pos:line="51" pos:column="53">= <expr><lit:literal type="string" pos:line="51" pos:column="55">"srcml2src.exe"</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="53" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="54" pos:column="9">/// Mapping of source extensions to their languages.</comment>
        <comment type="line" pos:line="55" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="56" pos:column="9">public</specifier> <name><name pos:line="56" pos:column="16">DefaultsDictionary</name><argument_list pos:line="56" pos:column="34">&lt;<argument><name pos:line="56" pos:column="35">string</name></argument>, <argument><name pos:line="56" pos:column="43">Language</name></argument>&gt;</argument_list></name></type> <name pos:line="56" pos:column="53">ExtensionMapping</name>
        <block pos:line="57" pos:column="9">{
            <function><name pos:line="58" pos:column="13">get</name>
            <block pos:line="59" pos:column="13">{
                <return pos:line="60" pos:column="17">return <expr><name pos:line="60" pos:column="24">_extensionMapping</name></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="64" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="65" pos:column="9">/// List of common name space arguments that src2srcml.exe uses to modify its output.</comment>
        <comment type="line" pos:line="66" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="67" pos:column="9">public</specifier> <specifier pos:line="67" pos:column="16">static</specifier> <name><name pos:line="67" pos:column="23">Collection</name><argument_list pos:line="67" pos:column="33">&lt;<argument><name pos:line="67" pos:column="34">string</name></argument>&gt;</argument_list></name></type> <name pos:line="67" pos:column="42">DefaultNamespaceArguments</name>
        <block pos:line="68" pos:column="9">{
            <function><name pos:line="69" pos:column="13">get</name>
            <block pos:line="70" pos:column="13">{
                <return pos:line="71" pos:column="17">return <expr><op:operator pos:line="71" pos:column="24">new</op:operator> <name><name pos:line="71" pos:column="28">Collection</name><argument_list pos:line="71" pos:column="38">&lt;<argument><name pos:line="71" pos:column="39">string</name></argument>&gt;</argument_list></name> <block pos:line="71" pos:column="47">{ <expr><lit:literal type="string" pos:line="71" pos:column="49">"--literal"</lit:literal></expr><op:operator pos:line="71" pos:column="60">,</op:operator> <expr><lit:literal type="string" pos:line="71" pos:column="62">"--modifier"</lit:literal></expr><op:operator pos:line="71" pos:column="74">,</op:operator> <expr><lit:literal type="string" pos:line="71" pos:column="76">"--operator"</lit:literal></expr><op:operator pos:line="71" pos:column="88">,</op:operator> <expr><lit:literal type="string" pos:line="71" pos:column="90">"--position"</lit:literal></expr> }</block></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>


        <comment type="line" pos:line="76" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="77" pos:column="9">/// Creates a new SrcML object rooted in a default directory. If the SRCMLBINDIR environment variable is set, that is used.</comment>
        <comment type="line" pos:line="78" pos:column="9">/// If not, then c:\Program Files (x86)\SrcML\bin is used.</comment>
        <comment type="line" pos:line="79" pos:column="9">/// If that doesn't exist, c:\Program Files\SrcML\bin is used.</comment>
        <comment type="line" pos:line="80" pos:column="9">/// </comment>
        <comment type="line" pos:line="81" pos:column="9">/// If none of these directories is sued, the current directory is used.</comment>
        <comment type="line" pos:line="82" pos:column="9">/// &lt;seealso cref="SrcML(string)"/&gt;</comment>
        <comment type="line" pos:line="83" pos:column="9">/// &lt;/summary&gt;</comment>
        <constructor><specifier pos:line="84" pos:column="9">public</specifier> <name pos:line="84" pos:column="16">SrcML</name><parameter_list pos:line="84" pos:column="21">()</parameter_list> <member_list pos:line="84" pos:column="24">: <call><name pos:line="84" pos:column="26">this</name><argument_list pos:line="84" pos:column="30">(<argument><expr><call><name><name pos:line="84" pos:column="31">SrcMLHelper</name><op:operator pos:line="84" pos:column="42">.</op:operator><name pos:line="84" pos:column="43">GetSrcMLDefaultDirectory</name></name><argument_list pos:line="84" pos:column="67">()</argument_list></call></expr></argument>)</argument_list></call>
        </member_list><block pos:line="85" pos:column="9">{
        }</block></constructor>

        <comment type="line" pos:line="88" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="89" pos:column="9">/// Gets the directory that src2srcml and ExtractSourceFile can be found in</comment>
        <comment type="line" pos:line="90" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="91" pos:column="9">public</specifier> <name pos:line="91" pos:column="16">string</name></type> <name pos:line="91" pos:column="23">SrcMLDirectory</name>
        <block pos:line="92" pos:column="9">{
            <function><name pos:line="93" pos:column="13">get</name> <block pos:line="93" pos:column="17">{ <return pos:line="93" pos:column="19">return <expr><name><name pos:line="93" pos:column="26">this</name><op:operator pos:line="93" pos:column="30">.</op:operator><name pos:line="93" pos:column="31">srcmlDir</name></name></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>
        <comment type="line" pos:line="95" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="96" pos:column="9">/// Creates a new SrcML object rooted in the given directory.</comment>
        <comment type="line" pos:line="97" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="98" pos:column="9">/// &lt;param name="binDirectory"&gt;The path to the directory containing the SrcML executables.&lt;/param&gt;</comment>
        <constructor><specifier pos:line="99" pos:column="9">public</specifier> <name pos:line="99" pos:column="16">SrcML</name><parameter_list pos:line="99" pos:column="21">(<param><decl><type><name pos:line="99" pos:column="22">string</name></type> <name pos:line="99" pos:column="29">binDirectory</name></decl></param>)</parameter_list>
        <block pos:line="100" pos:column="9">{
            <expr_stmt><expr><name><name pos:line="101" pos:column="13">this</name><op:operator pos:line="101" pos:column="17">.</op:operator><name pos:line="101" pos:column="18">srcmlDir</name></name> <op:operator pos:line="101" pos:column="27">=</op:operator> <name pos:line="101" pos:column="29">binDirectory</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="102" pos:column="13">this</name><op:operator pos:line="102" pos:column="17">.</op:operator><name pos:line="102" pos:column="18">src2srcml_exe</name></name> <op:operator pos:line="102" pos:column="32">=</op:operator> <call><name><name pos:line="102" pos:column="34">Path</name><op:operator pos:line="102" pos:column="38">.</op:operator><name pos:line="102" pos:column="39">Combine</name></name><argument_list pos:line="102" pos:column="46">(<argument><expr><name pos:line="102" pos:column="47">binDirectory</name></expr></argument>, <argument><expr><name pos:line="102" pos:column="61">Src2SrcMLExecutableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="103" pos:column="13">this</name><op:operator pos:line="103" pos:column="17">.</op:operator><name pos:line="103" pos:column="18">srcml2src_exe</name></name> <op:operator pos:line="103" pos:column="32">=</op:operator> <call><name><name pos:line="103" pos:column="34">Path</name><op:operator pos:line="103" pos:column="38">.</op:operator><name pos:line="103" pos:column="39">Combine</name></name><argument_list pos:line="103" pos:column="46">(<argument><expr><name pos:line="103" pos:column="47">binDirectory</name></expr></argument>, <argument><expr><name pos:line="103" pos:column="61">SrcML2SrcExecutableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if pos:line="105" pos:column="13">if<condition pos:line="105" pos:column="15">(<expr><op:operator pos:line="105" pos:column="16">!</op:operator><call><name><name pos:line="105" pos:column="17">File</name><op:operator pos:line="105" pos:column="21">.</op:operator><name pos:line="105" pos:column="22">Exists</name></name><argument_list pos:line="105" pos:column="28">(<argument><expr><name><name pos:line="105" pos:column="29">this</name><op:operator pos:line="105" pos:column="33">.</op:operator><name pos:line="105" pos:column="34">src2srcml_exe</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="105" pos:column="49">
                <throw pos:line="106" pos:column="17">throw <expr><op:operator pos:line="106" pos:column="23">new</op:operator> <call><name pos:line="106" pos:column="27">FileNotFoundException</name><argument_list pos:line="106" pos:column="48">(<argument><expr><name><name pos:line="106" pos:column="49">this</name><op:operator pos:line="106" pos:column="53">.</op:operator><name pos:line="106" pos:column="54">src2srcml_exe</name></name> <op:operator pos:line="106" pos:column="68">+</op:operator> <lit:literal type="string" pos:line="106" pos:column="70">" does not exist!"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="107" pos:column="13">if <condition pos:line="107" pos:column="16">(<expr><op:operator pos:line="107" pos:column="17">!</op:operator><call><name><name pos:line="107" pos:column="18">File</name><op:operator pos:line="107" pos:column="22">.</op:operator><name pos:line="107" pos:column="23">Exists</name></name><argument_list pos:line="107" pos:column="29">(<argument><expr><name><name pos:line="107" pos:column="30">this</name><op:operator pos:line="107" pos:column="34">.</op:operator><name pos:line="107" pos:column="35">srcml2src_exe</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="107" pos:column="50">
                <throw pos:line="108" pos:column="17">throw <expr><op:operator pos:line="108" pos:column="23">new</op:operator> <call><name pos:line="108" pos:column="27">FileNotFoundException</name><argument_list pos:line="108" pos:column="48">(<argument><expr><name><name pos:line="108" pos:column="49">this</name><op:operator pos:line="108" pos:column="53">.</op:operator><name pos:line="108" pos:column="54">srcml2src_exe</name></name> <op:operator pos:line="108" pos:column="68">+</op:operator> <lit:literal type="string" pos:line="108" pos:column="70">" does not exist!"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
        }</block></constructor>

        <comment type="line" pos:line="111" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="112" pos:column="9">/// Gets the default XmlNamespaceManager that contains all of the SrcML namespaces</comment>
        <comment type="line" pos:line="113" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="114" pos:column="9">public</specifier> <specifier pos:line="114" pos:column="16">static</specifier> <name pos:line="114" pos:column="23">XmlNamespaceManager</name></type> <name pos:line="114" pos:column="43">NamespaceManager</name>
        <block pos:line="115" pos:column="9">{
            <function><name pos:line="116" pos:column="13">get</name>
            <block pos:line="117" pos:column="13">{
                <return pos:line="118" pos:column="17">return <expr><name><name pos:line="118" pos:column="24">SrcMLNamespaces</name><op:operator pos:line="118" pos:column="39">.</op:operator><name pos:line="118" pos:column="40">Manager</name></name></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

<cpp:region pos:line="122" pos:column="1">#<cpp:directive pos:line="122" pos:column="2">region</cpp:directive> Internal Code</cpp:region>
        <function><type><attribute pos:line="123" pos:column="9">[<expr><name pos:line="123" pos:column="10">SecurityCritical</name></expr>]</attribute>
        <specifier pos:line="124" pos:column="9">private</specifier> <name pos:line="124" pos:column="17">void</name></type> <name pos:line="124" pos:column="22">generateSrcMLDoc</name><parameter_list pos:line="124" pos:column="38">(<param><decl><type><name pos:line="124" pos:column="39">string</name></type> <name pos:line="124" pos:column="46">rootDirectory</name></decl></param>, <param><decl><type><name pos:line="124" pos:column="61">string</name></type> <name pos:line="124" pos:column="68">xmlFileName</name></decl></param>, <param><decl><type><name><name pos:line="124" pos:column="81">IEnumerable</name><argument_list pos:line="124" pos:column="92">&lt;<argument><name pos:line="124" pos:column="93">string</name></argument>&gt;</argument_list></name></type> <name pos:line="124" pos:column="101">fileNames</name></decl></param>)</parameter_list>
        <block pos:line="125" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="126" pos:column="13">var</name></type> <name pos:line="126" pos:column="17">arguments</name> <init pos:line="126" pos:column="27">= <expr><name pos:line="126" pos:column="29">DefaultNamespaceArguments</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="128" pos:column="13">var</name></type> <name pos:line="128" pos:column="17">tempFileListing</name> <init pos:line="128" pos:column="33">= <expr><call><name><name pos:line="128" pos:column="35">Path</name><op:operator pos:line="128" pos:column="39">.</op:operator><name pos:line="128" pos:column="40">GetTempFileName</name></name><argument_list pos:line="128" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <using pos:line="129" pos:column="13">using (<decl><type><name pos:line="129" pos:column="20">StreamWriter</name></type> <name pos:line="129" pos:column="33">writer</name> <init pos:line="129" pos:column="40">= <expr><op:operator pos:line="129" pos:column="42">new</op:operator> <call><name pos:line="129" pos:column="46">StreamWriter</name><argument_list pos:line="129" pos:column="58">(<argument><expr><name pos:line="129" pos:column="59">tempFileListing</name></expr></argument>)</argument_list></call></expr></init></decl>)
            <block pos:line="130" pos:column="13">{
                <foreach pos:line="131" pos:column="17">foreach (<init><decl><type><name pos:line="131" pos:column="26">var</name></type> <name pos:line="131" pos:column="30">fileName</name> <range pos:line="131" pos:column="39">in <expr><name pos:line="131" pos:column="42">fileNames</name></expr></range></decl></init>)
                <block pos:line="132" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="133" pos:column="21">writer</name><op:operator pos:line="133" pos:column="27">.</op:operator><name pos:line="133" pos:column="28">WriteLine</name></name><argument_list pos:line="133" pos:column="37">(<argument><expr><name pos:line="133" pos:column="38">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
            }</block></using>
            <expr_stmt><expr><call><name><name pos:line="136" pos:column="13">arguments</name><op:operator pos:line="136" pos:column="22">.</op:operator><name pos:line="136" pos:column="23">Add</name></name><argument_list pos:line="136" pos:column="26">(<argument><expr><call><name><name pos:line="136" pos:column="27">String</name><op:operator pos:line="136" pos:column="33">.</op:operator><name pos:line="136" pos:column="34">Format</name></name><argument_list pos:line="136" pos:column="40">(<argument><expr><name><name pos:line="136" pos:column="41">CultureInfo</name><op:operator pos:line="136" pos:column="52">.</op:operator><name pos:line="136" pos:column="53">InvariantCulture</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="136" pos:column="71">"--files-from=\"{0}\""</lit:literal></expr></argument>, <argument><expr><name pos:line="136" pos:column="95">tempFileListing</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="138" pos:column="13">arguments</name><op:operator pos:line="138" pos:column="22">.</op:operator><name pos:line="138" pos:column="23">Add</name></name><argument_list pos:line="138" pos:column="26">(<argument><expr><call><name><name pos:line="138" pos:column="27">String</name><op:operator pos:line="138" pos:column="33">.</op:operator><name pos:line="138" pos:column="34">Format</name></name><argument_list pos:line="138" pos:column="40">(<argument><expr><name><name pos:line="138" pos:column="41">CultureInfo</name><op:operator pos:line="138" pos:column="52">.</op:operator><name pos:line="138" pos:column="53">InvariantCulture</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="138" pos:column="71">"--directory=\"{0}\""</lit:literal></expr></argument>, <argument><expr><name pos:line="138" pos:column="94">rootDirectory</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="139" pos:column="13">arguments</name><op:operator pos:line="139" pos:column="22">.</op:operator><name pos:line="139" pos:column="23">Add</name></name><argument_list pos:line="139" pos:column="26">(<argument><expr><call><name><name pos:line="139" pos:column="27">String</name><op:operator pos:line="139" pos:column="33">.</op:operator><name pos:line="139" pos:column="34">Format</name></name><argument_list pos:line="139" pos:column="40">(<argument><expr><name><name pos:line="139" pos:column="41">CultureInfo</name><op:operator pos:line="139" pos:column="52">.</op:operator><name pos:line="139" pos:column="53">InvariantCulture</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="139" pos:column="71">"--output=\"{0}\""</lit:literal></expr></argument>, <argument><expr><name pos:line="139" pos:column="91">xmlFileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if pos:line="141" pos:column="13">if <condition pos:line="141" pos:column="16">(<expr><name><name pos:line="141" pos:column="17">ExtensionMapping</name><op:operator pos:line="141" pos:column="33">.</op:operator><name pos:line="141" pos:column="34">NonDefaultValueCount</name></name> <op:operator pos:line="141" pos:column="55">&gt;</op:operator> <lit:literal type="number" pos:line="141" pos:column="57">0</lit:literal></expr>)</condition><then pos:line="141" pos:column="59">
            <block pos:line="142" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="143" pos:column="17">arguments</name><op:operator pos:line="143" pos:column="26">.</op:operator><name pos:line="143" pos:column="27">Add</name></name><argument_list pos:line="143" pos:column="30">(<argument><expr><call><name><name pos:line="143" pos:column="31">String</name><op:operator pos:line="143" pos:column="37">.</op:operator><name pos:line="143" pos:column="38">Format</name></name><argument_list pos:line="143" pos:column="44">(<argument><expr><name><name pos:line="143" pos:column="45">CultureInfo</name><op:operator pos:line="143" pos:column="56">.</op:operator><name pos:line="143" pos:column="57">InvariantCulture</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="143" pos:column="75">"--register-ext {0}"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="143" pos:column="97">KsuAdapter</name><op:operator pos:line="143" pos:column="107">.</op:operator><name pos:line="143" pos:column="108">ConvertMappingToString</name></name><argument_list pos:line="143" pos:column="130">(<argument><expr><name pos:line="143" pos:column="131">ExtensionMapping</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="146" pos:column="13">var</name></type> <name pos:line="146" pos:column="17">argumentString</name> <init pos:line="146" pos:column="32">= <expr><call><name><name pos:line="146" pos:column="34">KsuAdapter</name><op:operator pos:line="146" pos:column="44">.</op:operator><name pos:line="146" pos:column="45">MakeArgumentString</name></name><argument_list pos:line="146" pos:column="63">(<argument><expr><name pos:line="146" pos:column="64">arguments</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <try pos:line="148" pos:column="13">try
            <block pos:line="149" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="150" pos:column="17">KsuAdapter</name><op:operator pos:line="150" pos:column="27">.</op:operator><name pos:line="150" pos:column="28">RunExecutable</name></name><argument_list pos:line="150" pos:column="41">(<argument><expr><name><name pos:line="150" pos:column="42">this</name><op:operator pos:line="150" pos:column="46">.</op:operator><name pos:line="150" pos:column="47">src2srcml_exe</name></name></expr></argument>, <argument><expr><name pos:line="150" pos:column="62">argumentString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch pos:line="152" pos:column="13">catch <parameter_list pos:line="152" pos:column="19">(<param><decl><type><name pos:line="152" pos:column="20">SrcMLRuntimeException</name></type> <name pos:line="152" pos:column="42">e</name></decl></param>)</parameter_list>
            <block pos:line="153" pos:column="13">{
                <throw pos:line="154" pos:column="17">throw <expr><op:operator pos:line="154" pos:column="23">new</op:operator> <call><name pos:line="154" pos:column="27">SrcMLException</name><argument_list pos:line="154" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="154" pos:column="42">"src2srcml.exe encountered an error"</lit:literal></expr></argument>, <argument><expr><name pos:line="154" pos:column="80">e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch>
            <finally pos:line="156" pos:column="13">finally
            <block pos:line="157" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="158" pos:column="17">File</name><op:operator pos:line="158" pos:column="21">.</op:operator><name pos:line="158" pos:column="22">Delete</name></name><argument_list pos:line="158" pos:column="28">(<argument><expr><name pos:line="158" pos:column="29">tempFileListing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>
        }</block></function>

        <function><type><attribute pos:line="162" pos:column="9">[<expr><name pos:line="162" pos:column="10">SecurityCritical</name></expr>]</attribute>
        <specifier pos:line="163" pos:column="9">private</specifier> <name pos:line="163" pos:column="17">void</name></type> <name pos:line="163" pos:column="22">generateSrcMLDoc</name><parameter_list pos:line="163" pos:column="38">(<param><decl><type><name pos:line="163" pos:column="39">string</name></type> <name pos:line="163" pos:column="46">path</name></decl></param>, <param><decl><type><name pos:line="163" pos:column="52">string</name></type> <name pos:line="163" pos:column="59">xmlFileName</name></decl></param>, <param><decl><type><name pos:line="163" pos:column="72">Language</name></type> <name pos:line="163" pos:column="81">language</name></decl></param>)</parameter_list>
        <block pos:line="164" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="165" pos:column="13">var</name></type> <name pos:line="165" pos:column="17">arguments</name> <init pos:line="165" pos:column="27">= <expr><name pos:line="165" pos:column="29">DefaultNamespaceArguments</name></expr></init></decl>;</decl_stmt>

            <if pos:line="167" pos:column="13">if <condition pos:line="167" pos:column="16">(<expr><name pos:line="167" pos:column="17">language</name> <op:operator pos:line="167" pos:column="26">&gt;</op:operator> <name><name pos:line="167" pos:column="28">Language</name><op:operator pos:line="167" pos:column="36">.</op:operator><name pos:line="167" pos:column="37">Any</name></name></expr>)</condition><then pos:line="167" pos:column="41">
            <block pos:line="168" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="169" pos:column="17">arguments</name><op:operator pos:line="169" pos:column="26">.</op:operator><name pos:line="169" pos:column="27">Add</name></name><argument_list pos:line="169" pos:column="30">(<argument><expr><call><name><name pos:line="169" pos:column="31">String</name><op:operator pos:line="169" pos:column="37">.</op:operator><name pos:line="169" pos:column="38">Format</name></name><argument_list pos:line="169" pos:column="44">(<argument><expr><name><name pos:line="169" pos:column="45">CultureInfo</name><op:operator pos:line="169" pos:column="56">.</op:operator><name pos:line="169" pos:column="57">InvariantCulture</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="169" pos:column="75">"--language={0}"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="169" pos:column="93">KsuAdapter</name><op:operator pos:line="169" pos:column="103">.</op:operator><name pos:line="169" pos:column="104">GetLanguage</name></name><argument_list pos:line="169" pos:column="115">(<argument><expr><name pos:line="169" pos:column="116">language</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name pos:line="171" pos:column="13">arguments</name><op:operator pos:line="171" pos:column="22">.</op:operator><name pos:line="171" pos:column="23">Add</name></name><argument_list pos:line="171" pos:column="26">(<argument><expr><call><name><name pos:line="171" pos:column="27">String</name><op:operator pos:line="171" pos:column="33">.</op:operator><name pos:line="171" pos:column="34">Format</name></name><argument_list pos:line="171" pos:column="40">(<argument><expr><name><name pos:line="171" pos:column="41">CultureInfo</name><op:operator pos:line="171" pos:column="52">.</op:operator><name pos:line="171" pos:column="53">InvariantCulture</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="171" pos:column="71">"\"{0}\""</lit:literal></expr></argument>, <argument><expr><name pos:line="171" pos:column="82">path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="172" pos:column="13">arguments</name><op:operator pos:line="172" pos:column="22">.</op:operator><name pos:line="172" pos:column="23">Add</name></name><argument_list pos:line="172" pos:column="26">(<argument><expr><call><name><name pos:line="172" pos:column="27">String</name><op:operator pos:line="172" pos:column="33">.</op:operator><name pos:line="172" pos:column="34">Format</name></name><argument_list pos:line="172" pos:column="40">(<argument><expr><name><name pos:line="172" pos:column="41">CultureInfo</name><op:operator pos:line="172" pos:column="52">.</op:operator><name pos:line="172" pos:column="53">InvariantCulture</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="172" pos:column="71">"--output=\"{0}\""</lit:literal></expr></argument>, <argument><expr><name pos:line="172" pos:column="91">xmlFileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="174" pos:column="13">var</name></type> <name pos:line="174" pos:column="17">argumentString</name> <init pos:line="174" pos:column="32">= <expr><call><name><name pos:line="174" pos:column="34">KsuAdapter</name><op:operator pos:line="174" pos:column="44">.</op:operator><name pos:line="174" pos:column="45">MakeArgumentString</name></name><argument_list pos:line="174" pos:column="63">(<argument><expr><name pos:line="174" pos:column="64">arguments</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <try pos:line="176" pos:column="13">try
            <block pos:line="177" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="178" pos:column="17">KsuAdapter</name><op:operator pos:line="178" pos:column="27">.</op:operator><name pos:line="178" pos:column="28">RunExecutable</name></name><argument_list pos:line="178" pos:column="41">(<argument><expr><name><name pos:line="178" pos:column="42">this</name><op:operator pos:line="178" pos:column="46">.</op:operator><name pos:line="178" pos:column="47">src2srcml_exe</name></name></expr></argument>, <argument><expr><name pos:line="178" pos:column="62">argumentString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch pos:line="180" pos:column="13">catch <parameter_list pos:line="180" pos:column="19">(<param><decl><type><name pos:line="180" pos:column="20">SrcMLRuntimeException</name></type> <name pos:line="180" pos:column="42">e</name></decl></param>)</parameter_list>
            <block pos:line="181" pos:column="13">{
                <throw pos:line="182" pos:column="17">throw <expr><op:operator pos:line="182" pos:column="23">new</op:operator> <call><name pos:line="182" pos:column="27">SrcMLException</name><argument_list pos:line="182" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="182" pos:column="42">"src2srcml.exe encountered an error"</lit:literal></expr></argument>, <argument><expr><name pos:line="182" pos:column="80">e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></function>
<cpp:endregion pos:line="185" pos:column="1">#<cpp:directive pos:line="185" pos:column="2">endregion</cpp:directive> Internal Code</cpp:endregion>

<cpp:region pos:line="187" pos:column="1">#<cpp:directive pos:line="187" pos:column="2">region</cpp:directive> String Conversion</cpp:region>
        <comment type="line" pos:line="188" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="189" pos:column="9">/// Generate SrcML from a given string of source code. The source code will be parsed as C++.</comment>
        <comment type="line" pos:line="190" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="191" pos:column="9">/// &lt;param name="source"&gt;A string containing the source code to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="192" pos:column="9">/// &lt;returns&gt;XML representing the source.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="193" pos:column="9">public</specifier> <name pos:line="193" pos:column="16">string</name></type> <name pos:line="193" pos:column="23">GenerateSrcMLFromString</name><parameter_list pos:line="193" pos:column="46">(<param><decl><type><name pos:line="193" pos:column="47">string</name></type> <name pos:line="193" pos:column="54">source</name></decl></param>)</parameter_list>
        <block pos:line="194" pos:column="9">{
            <return pos:line="195" pos:column="13">return <expr><call><name pos:line="195" pos:column="20">GenerateSrcMLFromString</name><argument_list pos:line="195" pos:column="43">(<argument><expr><name pos:line="195" pos:column="44">source</name></expr></argument>, <argument><expr><name><name pos:line="195" pos:column="52">Language</name><op:operator pos:line="195" pos:column="60">.</op:operator><name pos:line="195" pos:column="61">CPlusPlus</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="198" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="199" pos:column="9">/// Generate SrcML from a given string of source code.</comment>
        <comment type="line" pos:line="200" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="201" pos:column="9">/// &lt;param name="source"&gt;A string containing the source code to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="202" pos:column="9">/// &lt;param name="language"&gt;The source language to use (C,C++,Java,AspectJ).</comment>
        <comment type="line" pos:line="203" pos:column="9">/// If the source languageFilter is either not in this list or is null, the default source language (C++) will be used.&lt;/param&gt;</comment>
        <comment type="line" pos:line="204" pos:column="9">/// &lt;returns&gt;XML representing the source.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="205" pos:column="9">public</specifier> <name pos:line="205" pos:column="16">string</name></type> <name pos:line="205" pos:column="23">GenerateSrcMLFromString</name><parameter_list pos:line="205" pos:column="46">(<param><decl><type><name pos:line="205" pos:column="47">string</name></type> <name pos:line="205" pos:column="54">source</name></decl></param>, <param><decl><type><name pos:line="205" pos:column="62">Language</name></type> <name pos:line="205" pos:column="71">language</name></decl></param>)</parameter_list>
        <block pos:line="206" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="207" pos:column="13">Collection</name><argument_list pos:line="207" pos:column="23">&lt;<argument><name pos:line="207" pos:column="24">string</name></argument>&gt;</argument_list></name></type> <name pos:line="207" pos:column="32">arguments</name> <init pos:line="207" pos:column="42">= <expr><name pos:line="207" pos:column="44">DefaultNamespaceArguments</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="208" pos:column="13">arguments</name><op:operator pos:line="208" pos:column="22">.</op:operator><name pos:line="208" pos:column="23">Add</name></name><argument_list pos:line="208" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="208" pos:column="27">"--no-xml-declaration"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="209" pos:column="13">arguments</name><op:operator pos:line="209" pos:column="22">.</op:operator><name pos:line="209" pos:column="23">Add</name></name><argument_list pos:line="209" pos:column="26">(<argument><expr><call><name><name pos:line="209" pos:column="27">String</name><op:operator pos:line="209" pos:column="33">.</op:operator><name pos:line="209" pos:column="34">Format</name></name><argument_list pos:line="209" pos:column="40">(<argument><expr><name><name pos:line="209" pos:column="41">CultureInfo</name><op:operator pos:line="209" pos:column="52">.</op:operator><name pos:line="209" pos:column="53">InvariantCulture</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="209" pos:column="71">"--language={0}"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="209" pos:column="89">KsuAdapter</name><op:operator pos:line="209" pos:column="99">.</op:operator><name pos:line="209" pos:column="100">GetLanguage</name></name><argument_list pos:line="209" pos:column="111">(<argument><expr><name pos:line="209" pos:column="112">language</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="211" pos:column="13">var</name></type> <name pos:line="211" pos:column="17">argumentString</name> <init pos:line="211" pos:column="32">= <expr><call><name><name pos:line="211" pos:column="34">KsuAdapter</name><op:operator pos:line="211" pos:column="44">.</op:operator><name pos:line="211" pos:column="45">MakeArgumentString</name></name><argument_list pos:line="211" pos:column="63">(<argument><expr><name pos:line="211" pos:column="64">arguments</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <try pos:line="213" pos:column="13">try
            <block pos:line="214" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="215" pos:column="17">var</name></type> <name pos:line="215" pos:column="21">xml</name> <init pos:line="215" pos:column="25">= <expr><call><name><name pos:line="215" pos:column="27">KsuAdapter</name><op:operator pos:line="215" pos:column="37">.</op:operator><name pos:line="215" pos:column="38">RunExecutable</name></name><argument_list pos:line="215" pos:column="51">(<argument><expr><name><name pos:line="215" pos:column="52">this</name><op:operator pos:line="215" pos:column="56">.</op:operator><name pos:line="215" pos:column="57">src2srcml_exe</name></name></expr></argument>, <argument><expr><name pos:line="215" pos:column="72">argumentString</name></expr></argument>, <argument><expr><name pos:line="215" pos:column="88">source</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return pos:line="216" pos:column="17">return <expr><name pos:line="216" pos:column="24">xml</name></expr>;</return>
            }</block>
            <catch pos:line="218" pos:column="13">catch <parameter_list pos:line="218" pos:column="19">(<param><decl><type><name pos:line="218" pos:column="20">SrcMLRuntimeException</name></type> <name pos:line="218" pos:column="42">e</name></decl></param>)</parameter_list>
            <block pos:line="219" pos:column="13">{
                <throw pos:line="220" pos:column="17">throw <expr><op:operator pos:line="220" pos:column="23">new</op:operator> <call><name pos:line="220" pos:column="27">SrcMLException</name><argument_list pos:line="220" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="220" pos:column="42">"src2srcml encountered an error"</lit:literal></expr></argument>, <argument><expr><name pos:line="220" pos:column="76">e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></function>
<cpp:endregion pos:line="223" pos:column="1">#<cpp:directive pos:line="223" pos:column="2">endregion</cpp:directive></cpp:endregion>

<cpp:region pos:line="225" pos:column="1">#<cpp:directive pos:line="225" pos:column="2">region</cpp:directive> File Conversion</cpp:region>
        <comment type="line" pos:line="226" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="227" pos:column="9">/// Generate a SrcML document from a single source file. The language will be inferred from the extension.</comment>
        <comment type="line" pos:line="228" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="229" pos:column="9">/// &lt;param name="sourceFileName"&gt;path to the source file to convert.&lt;/param&gt;</comment>
        <comment type="line" pos:line="230" pos:column="9">/// &lt;param name="xmlFileName"&gt;The File name to write the resulting XML to.&lt;/param&gt;</comment>
        <comment type="line" pos:line="231" pos:column="9">/// &lt;returns&gt;A SrcMLFile for &lt;paramref name="xmlFileName"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="232" pos:column="9">public</specifier> <name pos:line="232" pos:column="16">SrcMLFile</name></type> <name pos:line="232" pos:column="26">GenerateSrcMLFromFile</name><parameter_list pos:line="232" pos:column="47">(<param><decl><type><name pos:line="232" pos:column="48">string</name></type> <name pos:line="232" pos:column="55">sourceFileName</name></decl></param>, <param><decl><type><name pos:line="232" pos:column="71">string</name></type> <name pos:line="232" pos:column="78">xmlFileName</name></decl></param>)</parameter_list>
        <block pos:line="233" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="234" pos:column="13">generateSrcMLDoc</name><argument_list pos:line="234" pos:column="29">(<argument><expr><name pos:line="234" pos:column="30">sourceFileName</name></expr></argument>, <argument><expr><name pos:line="234" pos:column="46">xmlFileName</name></expr></argument>, <argument><expr><name><name pos:line="234" pos:column="59">Language</name><op:operator pos:line="234" pos:column="67">.</op:operator><name pos:line="234" pos:column="68">Any</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:line="236" pos:column="13">return <expr><op:operator pos:line="236" pos:column="20">new</op:operator> <call><name pos:line="236" pos:column="24">SrcMLFile</name><argument_list pos:line="236" pos:column="33">(<argument><expr><name pos:line="236" pos:column="34">xmlFileName</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="239" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="240" pos:column="9">/// Generate a SrcML document from a single source file with the specified language.</comment>
        <comment type="line" pos:line="241" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="242" pos:column="9">/// &lt;param name="sourceFileName"&gt;The path to the source file to convert.&lt;/param&gt;</comment>
        <comment type="line" pos:line="243" pos:column="9">/// &lt;param name="xmlFileName"&gt;The file name to write the resulting XML to.&lt;/param&gt;</comment>
        <comment type="line" pos:line="244" pos:column="9">/// &lt;param name="language"&gt;The language to parse the source file as.&lt;/param&gt;</comment>
        <comment type="line" pos:line="245" pos:column="9">/// &lt;returns&gt;A SrcMLFile for &lt;paramref name="xmlFileName"/&gt;.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="246" pos:column="9">public</specifier> <name pos:line="246" pos:column="16">SrcMLFile</name></type> <name pos:line="246" pos:column="26">GenerateSrcMLFromFile</name><parameter_list pos:line="246" pos:column="47">(<param><decl><type><name pos:line="246" pos:column="48">string</name></type> <name pos:line="246" pos:column="55">sourceFileName</name></decl></param>, <param><decl><type><name pos:line="246" pos:column="71">string</name></type> <name pos:line="246" pos:column="78">xmlFileName</name></decl></param>, <param><decl><type><name pos:line="246" pos:column="91">Language</name></type> <name pos:line="246" pos:column="100">language</name></decl></param>)</parameter_list>
        <block pos:line="247" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="248" pos:column="13">generateSrcMLDoc</name><argument_list pos:line="248" pos:column="29">(<argument><expr><name pos:line="248" pos:column="30">sourceFileName</name></expr></argument>, <argument><expr><name pos:line="248" pos:column="46">xmlFileName</name></expr></argument>, <argument><expr><name pos:line="248" pos:column="59">language</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:line="250" pos:column="13">return <expr><op:operator pos:line="250" pos:column="20">new</op:operator> <call><name pos:line="250" pos:column="24">SrcMLFile</name><argument_list pos:line="250" pos:column="33">(<argument><expr><name pos:line="250" pos:column="34">xmlFileName</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
<cpp:endregion pos:line="252" pos:column="1">#<cpp:directive pos:line="252" pos:column="2">endregion</cpp:directive> File Conversion</cpp:endregion>

<cpp:region pos:line="254" pos:column="1"># <cpp:directive pos:line="254" pos:column="3">region</cpp:directive> Project Conversion</cpp:region>
        <comment type="line" pos:line="255" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="256" pos:column="9">/// Generate a SrcML file for the given Visual Studio project. The resulting XML</comment>
        <comment type="line" pos:line="257" pos:column="9">/// will be written to a file with the same name as the Visual Studio project</comment>
        <comment type="line" pos:line="258" pos:column="9">/// &lt;seealso cref="GenerateSrcMLFromProject(string, string)"/&gt;</comment>
        <comment type="line" pos:line="259" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="260" pos:column="9">/// &lt;param name="project"&gt;The path to the Visual Studio project file.&lt;/param&gt;</comment>
        <comment type="line" pos:line="261" pos:column="9">/// &lt;returns&gt;A SrcMLFile based on the project.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="262" pos:column="9">public</specifier> <name pos:line="262" pos:column="16">SrcMLFile</name></type> <name pos:line="262" pos:column="26">GenerateSrcMLFromProject</name><parameter_list pos:line="262" pos:column="50">(<param><decl><type><name pos:line="262" pos:column="51">string</name></type> <name pos:line="262" pos:column="58">project</name></decl></param>)</parameter_list>
        <block pos:line="263" pos:column="9">{
            <return pos:line="264" pos:column="13">return <expr><call><name pos:line="264" pos:column="20">GenerateSrcMLFromProject</name><argument_list pos:line="264" pos:column="44">(<argument><expr><name pos:line="264" pos:column="45">project</name></expr></argument>, <argument><expr><call><name><name pos:line="264" pos:column="54">Path</name><op:operator pos:line="264" pos:column="58">.</op:operator><name pos:line="264" pos:column="59">ChangeExtension</name></name><argument_list pos:line="264" pos:column="74">(<argument><expr><name pos:line="264" pos:column="75">project</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="264" pos:column="84">".xml"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="267" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="268" pos:column="9">/// Generate a SrcML file from the Visual Studio project file with the language C++.</comment>
        <comment type="line" pos:line="269" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="270" pos:column="9">/// &lt;param name="project"&gt;The path to the Visual Studo project file.&lt;/param&gt;</comment>
        <comment type="line" pos:line="271" pos:column="9">/// &lt;param name="xmlFileName"&gt;The file name to write the resulting XML to.&lt;/param&gt;</comment>
        <comment type="line" pos:line="272" pos:column="9">/// &lt;returns&gt;a SrcMLFile for &lt;paramref name="xmlFileName"/&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="273" pos:column="9">public</specifier> <name pos:line="273" pos:column="16">SrcMLFile</name></type> <name pos:line="273" pos:column="26">GenerateSrcMLFromProject</name><parameter_list pos:line="273" pos:column="50">(<param><decl><type><name pos:line="273" pos:column="51">string</name></type> <name pos:line="273" pos:column="58">project</name></decl></param>, <param><decl><type><name pos:line="273" pos:column="67">string</name></type> <name pos:line="273" pos:column="74">xmlFileName</name></decl></param>)</parameter_list>
        <block pos:line="274" pos:column="9">{

            <decl_stmt><decl><type><name pos:line="276" pos:column="13">string</name><index pos:line="276" pos:column="19">[]</index></type> <name pos:line="276" pos:column="22">srcfiles</name> <init pos:line="276" pos:column="31">= <expr><call><name><name pos:line="276" pos:column="33">VisualStudioProjectReader</name><op:operator pos:line="276" pos:column="58">.</op:operator><name pos:line="276" pos:column="59">ReadProjectFile</name></name><argument_list pos:line="276" pos:column="74">(<argument><expr><name pos:line="276" pos:column="75">project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="278" pos:column="13">var</name></type> <name pos:line="278" pos:column="17">directory</name> <init pos:line="278" pos:column="27">= <expr><call><name><name pos:line="278" pos:column="29">Path</name><op:operator pos:line="278" pos:column="33">.</op:operator><name pos:line="278" pos:column="34">GetDirectoryName</name></name><argument_list pos:line="278" pos:column="50">(<argument><expr><name pos:line="278" pos:column="51">project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name pos:line="280" pos:column="13">generateSrcMLDoc</name><argument_list pos:line="280" pos:column="29">(<argument><expr><name pos:line="280" pos:column="30">directory</name></expr></argument>, <argument><expr><name pos:line="280" pos:column="41">xmlFileName</name></expr></argument>, <argument><expr><name pos:line="280" pos:column="54">srcfiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="281" pos:column="13">return <expr><op:operator pos:line="281" pos:column="20">new</op:operator> <call><name pos:line="281" pos:column="24">SrcMLFile</name><argument_list pos:line="281" pos:column="33">(<argument><expr><name pos:line="281" pos:column="34">xmlFileName</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="284" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="285" pos:column="9">/// Generate a SrcML file from the Visual Studio project file, with the given language.</comment>
        <comment type="line" pos:line="286" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="287" pos:column="9">/// &lt;param name="project"&gt;The path to the Visual Studo project file.&lt;/param&gt;</comment>
        <comment type="line" pos:line="288" pos:column="9">/// &lt;param name="xmlFileName"&gt;The file name to write the resulting XML to.&lt;/param&gt;</comment>
        <comment type="line" pos:line="289" pos:column="9">/// &lt;param name="language"&gt;The source language to use (C,C++,Java,AspectJ)&lt;/param&gt;</comment>
        <comment type="line" pos:line="290" pos:column="9">/// &lt;returns&gt;a SrcMLFile for &lt;paramref name="xmlFileName"/&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="291" pos:column="9">public</specifier> <name pos:line="291" pos:column="16">SrcMLFile</name></type> <name pos:line="291" pos:column="26">GenerateSrcMLFromProject</name><parameter_list pos:line="291" pos:column="50">(<param><decl><type><name pos:line="291" pos:column="51">string</name></type> <name pos:line="291" pos:column="58">project</name></decl></param>, <param><decl><type><name pos:line="291" pos:column="67">string</name></type> <name pos:line="291" pos:column="74">xmlFileName</name></decl></param>, <param><decl><type><name pos:line="291" pos:column="87">Language</name></type> <name pos:line="291" pos:column="96">language</name></decl></param>)</parameter_list>
        <block pos:line="292" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="293" pos:column="13">string</name><index pos:line="293" pos:column="19">[]</index></type> <name pos:line="293" pos:column="22">srcfiles</name> <init pos:line="293" pos:column="31">= <expr><call><name><name pos:line="293" pos:column="33">VisualStudioProjectReader</name><op:operator pos:line="293" pos:column="58">.</op:operator><name pos:line="293" pos:column="59">ReadProjectFile</name></name><argument_list pos:line="293" pos:column="74">(<argument><expr><name pos:line="293" pos:column="75">project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="295" pos:column="13">var</name></type> <name pos:line="295" pos:column="17">sourceFiles</name> <init pos:line="295" pos:column="29">= <expr><linq><from pos:line="295" pos:column="31">from <expr><name pos:line="295" pos:column="36">sourceFile</name></expr> <in pos:line="295" pos:column="47">in <expr><name pos:line="295" pos:column="50">srcfiles</name></expr></in></from>
                              <let pos:line="296" pos:column="31">let <expr><name pos:line="296" pos:column="35">ext</name> <op:operator pos:line="296" pos:column="39">=</op:operator> <call><name><name pos:line="296" pos:column="41">Path</name><op:operator pos:line="296" pos:column="45">.</op:operator><name pos:line="296" pos:column="46">GetExtension</name></name><argument_list pos:line="296" pos:column="58">(<argument><expr><name pos:line="296" pos:column="59">sourceFile</name></expr></argument>)</argument_list></call></expr></let>
                              <where pos:line="297" pos:column="31">where <expr><name pos:line="297" pos:column="37">ext</name> <op:operator pos:line="297" pos:column="41">!=</op:operator> <name pos:line="297" pos:column="44">null</name> <op:operator pos:line="297" pos:column="49">&amp;&amp;</op:operator> <name><name pos:line="297" pos:column="52">ExtensionMapping</name><index pos:line="297" pos:column="68">[<expr><name pos:line="297" pos:column="69">ext</name></expr>]</index></name> <op:operator pos:line="297" pos:column="74">==</op:operator> <name pos:line="297" pos:column="77">language</name></expr></where>
                              <select pos:line="298" pos:column="31">select <expr><name pos:line="298" pos:column="38">sourceFile</name></expr></select></linq></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="300" pos:column="13">var</name></type> <name pos:line="300" pos:column="17">directory</name> <init pos:line="300" pos:column="27">= <expr><call><name><name pos:line="300" pos:column="29">Path</name><op:operator pos:line="300" pos:column="33">.</op:operator><name pos:line="300" pos:column="34">GetDirectoryName</name></name><argument_list pos:line="300" pos:column="50">(<argument><expr><name pos:line="300" pos:column="51">project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name pos:line="302" pos:column="13">generateSrcMLDoc</name><argument_list pos:line="302" pos:column="29">(<argument><expr><name pos:line="302" pos:column="30">directory</name></expr></argument>, <argument><expr><name pos:line="302" pos:column="41">xmlFileName</name></expr></argument>, <argument><expr><name pos:line="302" pos:column="54">sourceFiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="303" pos:column="13">return <expr><op:operator pos:line="303" pos:column="20">new</op:operator> <call><name pos:line="303" pos:column="24">SrcMLFile</name><argument_list pos:line="303" pos:column="33">(<argument><expr><name pos:line="303" pos:column="34">xmlFileName</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
<cpp:endregion pos:line="305" pos:column="1"># <cpp:directive pos:line="305" pos:column="3">endregion</cpp:directive> Project Conversion</cpp:endregion>

<cpp:region pos:line="307" pos:column="1">#<cpp:directive pos:line="307" pos:column="2">region</cpp:directive> Directory Conversion</cpp:region>
        <comment type="line" pos:line="308" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="309" pos:column="9">/// Generate a SrcML document from the given path and place it in the XML file.</comment>
        <comment type="line" pos:line="310" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="311" pos:column="9">/// &lt;param name="directoryPath"&gt;the directory path&lt;/param&gt;</comment>
        <comment type="line" pos:line="312" pos:column="9">/// &lt;param name="xmlFileName"&gt;the path of the xml file&lt;/param&gt;</comment>
        <comment type="line" pos:line="313" pos:column="9">/// &lt;returns&gt;A SrcMLFile that points at &lt;paramref name="xmlFileName"/&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="314" pos:column="9">public</specifier> <name pos:line="314" pos:column="16">SrcMLFile</name></type> <name pos:line="314" pos:column="26">GenerateSrcMLFromDirectory</name><parameter_list pos:line="314" pos:column="52">(<param><decl><type><name pos:line="314" pos:column="53">string</name></type> <name pos:line="314" pos:column="60">directoryPath</name></decl></param>, <param><decl><type><name pos:line="314" pos:column="75">string</name></type> <name pos:line="314" pos:column="82">xmlFileName</name></decl></param>)</parameter_list>
        <block pos:line="315" pos:column="9">{
            <return pos:line="316" pos:column="13">return <expr><call><name pos:line="316" pos:column="20">GenerateSrcMLFromDirectory</name><argument_list pos:line="316" pos:column="46">(<argument><expr><name pos:line="316" pos:column="47">directoryPath</name></expr></argument>, <argument><expr><name pos:line="316" pos:column="62">xmlFileName</name></expr></argument>, <argument><expr><call><name><name pos:line="316" pos:column="75">Enumerable</name><op:operator pos:line="316" pos:column="85">.</op:operator><name><name pos:line="316" pos:column="86">Empty</name><argument_list pos:line="316" pos:column="91">&lt;<argument><name pos:line="316" pos:column="92">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="316" pos:column="99">()</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="316" pos:column="103">Language</name><op:operator pos:line="316" pos:column="111">.</op:operator><name pos:line="316" pos:column="112">Any</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="319" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="320" pos:column="9">/// Generates a SrcML document from the given path and place it in the XML file. The XML document will only contain files classified as &lt;paramref name="languageFilter"/&gt;.</comment>
        <comment type="line" pos:line="321" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="322" pos:column="9">/// &lt;param name="directoryPath"&gt;the directory path&lt;/param&gt;</comment>
        <comment type="line" pos:line="323" pos:column="9">/// &lt;param name="xmlFileName"&gt;the path of the xml file&lt;/param&gt;</comment>
        <comment type="line" pos:line="324" pos:column="9">/// &lt;param name="languageFilter"&gt;the language to filter on&lt;/param&gt;</comment>
        <comment type="line" pos:line="325" pos:column="9">/// &lt;returns&gt;A SrcMLFile that points at &lt;paramref name="xmlFileName"/&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="326" pos:column="9">public</specifier> <name pos:line="326" pos:column="16">SrcMLFile</name></type> <name pos:line="326" pos:column="26">GenerateSrcMLFromDirectory</name><parameter_list pos:line="326" pos:column="52">(<param><decl><type><name pos:line="326" pos:column="53">string</name></type> <name pos:line="326" pos:column="60">directoryPath</name></decl></param>, <param><decl><type><name pos:line="326" pos:column="75">string</name></type> <name pos:line="326" pos:column="82">xmlFileName</name></decl></param>, <param><decl><type><name pos:line="326" pos:column="95">Language</name></type> <name pos:line="326" pos:column="104">languageFilter</name></decl></param>)</parameter_list>
        <block pos:line="327" pos:column="9">{
            <return pos:line="328" pos:column="13">return <expr><call><name pos:line="328" pos:column="20">GenerateSrcMLFromDirectory</name><argument_list pos:line="328" pos:column="46">(<argument><expr><name pos:line="328" pos:column="47">directoryPath</name></expr></argument>, <argument><expr><name pos:line="328" pos:column="62">xmlFileName</name></expr></argument>, <argument><expr><call><name><name pos:line="328" pos:column="75">Enumerable</name><op:operator pos:line="328" pos:column="85">.</op:operator><name><name pos:line="328" pos:column="86">Empty</name><argument_list pos:line="328" pos:column="91">&lt;<argument><name pos:line="328" pos:column="92">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="328" pos:column="99">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="328" pos:column="103">languageFilter</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="331" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="332" pos:column="9">/// Generates a SrcML document from the given path and place it in the XML file. The XML document will only contain files not present in &lt;paramref name="filesToExclude"/&gt;</comment>
        <comment type="line" pos:line="333" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="334" pos:column="9">/// &lt;param name="directoryPath"&gt;the directory path&lt;/param&gt;</comment>
        <comment type="line" pos:line="335" pos:column="9">/// &lt;param name="xmlFileName"&gt;the path of the xml file&lt;/param&gt;</comment>
        <comment type="line" pos:line="336" pos:column="9">/// &lt;param name="filesToExclude"&gt;A collection of files to exclude from &lt;paramref name="xmlFileName"/&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="337" pos:column="9">/// &lt;returns&gt;A SrcMLFile that points at &lt;paramref name="xmlFileName"/&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="338" pos:column="9">public</specifier> <name pos:line="338" pos:column="16">SrcMLFile</name></type> <name pos:line="338" pos:column="26">GenerateSrcMLFromDirectory</name><parameter_list pos:line="338" pos:column="52">(<param><decl><type><name pos:line="338" pos:column="53">string</name></type> <name pos:line="338" pos:column="60">directoryPath</name></decl></param>, <param><decl><type><name pos:line="338" pos:column="75">string</name></type> <name pos:line="338" pos:column="82">xmlFileName</name></decl></param>, <param><decl><type><name><name pos:line="338" pos:column="95">Collection</name><argument_list pos:line="338" pos:column="105">&lt;<argument><name pos:line="338" pos:column="106">string</name></argument>&gt;</argument_list></name></type> <name pos:line="338" pos:column="114">filesToExclude</name></decl></param>)</parameter_list>
        <block pos:line="339" pos:column="9">{
            <return pos:line="340" pos:column="13">return <expr><call><name pos:line="340" pos:column="20">GenerateSrcMLFromDirectory</name><argument_list pos:line="340" pos:column="46">(<argument><expr><name pos:line="340" pos:column="47">directoryPath</name></expr></argument>, <argument><expr><name pos:line="340" pos:column="62">xmlFileName</name></expr></argument>, <argument><expr><name pos:line="340" pos:column="75">filesToExclude</name></expr></argument>, <argument><expr><name><name pos:line="340" pos:column="91">Language</name><op:operator pos:line="340" pos:column="99">.</op:operator><name pos:line="340" pos:column="100">Any</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="343" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="344" pos:column="9">/// Generates a SrcML document from the given path and place it in the XML file.</comment>
        <comment type="line" pos:line="345" pos:column="9">/// The output can be controlled by using &lt;paramref name="filesToExclude"/&gt;, and &lt;paramref name="languageFilter"/&gt;</comment>
        <comment type="line" pos:line="346" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="347" pos:column="9">/// &lt;param name="directoryPath"&gt;the directory path&lt;/param&gt;</comment>
        <comment type="line" pos:line="348" pos:column="9">/// &lt;param name="xmlFileName"&gt;the path of the xml file&lt;/param&gt;</comment>
        <comment type="line" pos:line="349" pos:column="9">/// &lt;param name="filesToExclude"&gt;A collection of files to exclude from &lt;paramref name="xmlFileName"/&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="350" pos:column="9">/// &lt;param name="languageFilter"&gt;the language to filter on&lt;/param&gt;</comment>
        <comment type="line" pos:line="351" pos:column="9">/// &lt;returns&gt;A SrcMLFile that points at &lt;paramref name="xmlFileName"/&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="352" pos:column="9">public</specifier> <name pos:line="352" pos:column="16">SrcMLFile</name></type> <name pos:line="352" pos:column="26">GenerateSrcMLFromDirectory</name><parameter_list pos:line="352" pos:column="52">(<param><decl><type><name pos:line="352" pos:column="53">string</name></type> <name pos:line="352" pos:column="60">directoryPath</name></decl></param>, <param><decl><type><name pos:line="352" pos:column="75">string</name></type> <name pos:line="352" pos:column="82">xmlFileName</name></decl></param>, <param><decl><type><name><name pos:line="352" pos:column="95">IEnumerable</name><argument_list pos:line="352" pos:column="106">&lt;<argument><name pos:line="352" pos:column="107">string</name></argument>&gt;</argument_list></name></type> <name pos:line="352" pos:column="115">filesToExclude</name></decl></param>, <param><decl><type><name pos:line="352" pos:column="131">Language</name></type> <name pos:line="352" pos:column="140">languageFilter</name></decl></param>)</parameter_list>
        <block pos:line="353" pos:column="9">{
            <if pos:line="354" pos:column="13">if <condition pos:line="354" pos:column="16">(<expr><op:operator pos:line="354" pos:column="17">!</op:operator><call><name><name pos:line="354" pos:column="18">Directory</name><op:operator pos:line="354" pos:column="27">.</op:operator><name pos:line="354" pos:column="28">Exists</name></name><argument_list pos:line="354" pos:column="34">(<argument><expr><name pos:line="354" pos:column="35">directoryPath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="354" pos:column="50">
                <throw pos:line="355" pos:column="17">throw <expr><op:operator pos:line="355" pos:column="23">new</op:operator> <call><name pos:line="355" pos:column="27">DirectoryNotFoundException</name><argument_list pos:line="355" pos:column="53">(<argument><expr><call><name><name pos:line="355" pos:column="54">String</name><op:operator pos:line="355" pos:column="60">.</op:operator><name pos:line="355" pos:column="61">Format</name></name><argument_list pos:line="355" pos:column="67">(<argument><expr><name><name pos:line="355" pos:column="68">CultureInfo</name><op:operator pos:line="355" pos:column="79">.</op:operator><name pos:line="355" pos:column="80">CurrentCulture</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="355" pos:column="96">"{0} does not exist."</lit:literal></expr></argument>, <argument><expr><name pos:line="355" pos:column="119">directoryPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <decl_stmt><decl><type><name pos:line="357" pos:column="13">DirectoryInfo</name></type> <name pos:line="357" pos:column="27">dir</name> <init pos:line="357" pos:column="31">= <expr><op:operator pos:line="357" pos:column="33">new</op:operator> <call><name pos:line="357" pos:column="37">DirectoryInfo</name><argument_list pos:line="357" pos:column="50">(<argument><expr><name pos:line="357" pos:column="51">directoryPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="359" pos:column="13">var</name></type> <name pos:line="359" pos:column="17">fileObjectsToExclude</name> <init pos:line="359" pos:column="38">= <expr><linq><from pos:line="359" pos:column="40">from <expr><name pos:line="359" pos:column="45">f</name></expr> <in pos:line="359" pos:column="47">in <expr><name pos:line="359" pos:column="50">filesToExclude</name></expr></in></from>
                                       <select pos:line="360" pos:column="40">select <expr><op:operator pos:line="360" pos:column="47">new</op:operator> <call><name pos:line="360" pos:column="51">FileInfo</name><argument_list pos:line="360" pos:column="59">(<argument><expr><name pos:line="360" pos:column="60">f</name></expr></argument>)</argument_list></call></expr></select></linq></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="362" pos:column="13">var</name></type> <name pos:line="362" pos:column="17">files</name> <init pos:line="362" pos:column="23">= <expr><op:operator pos:line="362" pos:column="25">(</op:operator><linq><from pos:line="362" pos:column="26">from <expr><name pos:line="362" pos:column="31">filePath</name></expr> <in pos:line="362" pos:column="40">in <expr><call><name><name pos:line="362" pos:column="43">dir</name><op:operator pos:line="362" pos:column="46">.</op:operator><name pos:line="362" pos:column="47">GetFiles</name></name><argument_list pos:line="362" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="362" pos:column="56">"*"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="362" pos:column="61">SearchOption</name><op:operator pos:line="362" pos:column="73">.</op:operator><name pos:line="362" pos:column="74">AllDirectories</name></name></expr></argument>)</argument_list></call></expr></in></from>
                         <where pos:line="363" pos:column="26">where <expr><call><name><name pos:line="363" pos:column="32">ExtensionMapping</name><op:operator pos:line="363" pos:column="48">.</op:operator><name pos:line="363" pos:column="49">ContainsKey</name></name><argument_list pos:line="363" pos:column="60">(<argument><expr><name><name pos:line="363" pos:column="61">filePath</name><op:operator pos:line="363" pos:column="69">.</op:operator><name pos:line="363" pos:column="70">Extension</name></name></expr></argument>)</argument_list></call></expr></where>
                         <select pos:line="364" pos:column="26">select <expr><name pos:line="364" pos:column="33">filePath</name></expr></select></linq><op:operator pos:line="364" pos:column="41">)</op:operator><op:operator pos:line="364" pos:column="42">.</op:operator><call><name pos:line="364" pos:column="43">Except</name><argument_list pos:line="364" pos:column="49">(<argument><expr><name pos:line="364" pos:column="50">fileObjectsToExclude</name></expr></argument>, <argument><expr><op:operator pos:line="364" pos:column="72">new</op:operator> <call><name pos:line="364" pos:column="76">FileInfoComparer</name><argument_list pos:line="364" pos:column="92">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name><name pos:line="366" pos:column="13">IEnumerable</name><argument_list pos:line="366" pos:column="24">&lt;<argument><name pos:line="366" pos:column="25">string</name></argument>&gt;</argument_list></name></type> <name pos:line="366" pos:column="33">reducedFileList</name></decl>;</decl_stmt>
            <if pos:line="367" pos:column="13">if <condition pos:line="367" pos:column="16">(<expr><name><name pos:line="367" pos:column="17">Language</name><op:operator pos:line="367" pos:column="25">.</op:operator><name pos:line="367" pos:column="26">Any</name></name> <op:operator pos:line="367" pos:column="30">==</op:operator> <name pos:line="367" pos:column="33">languageFilter</name></expr>)</condition><then pos:line="367" pos:column="48">
            <block pos:line="368" pos:column="13">{
                <expr_stmt><expr><name pos:line="369" pos:column="17">reducedFileList</name> <op:operator pos:line="369" pos:column="33">=</op:operator> <linq><from pos:line="369" pos:column="35">from <expr><name pos:line="369" pos:column="40">f</name></expr> <in pos:line="369" pos:column="42">in <expr><name pos:line="369" pos:column="45">files</name></expr></in></from> <select pos:line="369" pos:column="51">select <expr><name><name pos:line="369" pos:column="58">f</name><op:operator pos:line="369" pos:column="59">.</op:operator><name pos:line="369" pos:column="60">FullName</name></name></expr></select></linq></expr>;</expr_stmt>
            }</block></then>
            <else pos:line="371" pos:column="13">else
            <block pos:line="372" pos:column="13">{
                <expr_stmt><expr><name pos:line="373" pos:column="17">reducedFileList</name> <op:operator pos:line="373" pos:column="33">=</op:operator> <linq><from pos:line="373" pos:column="35">from <expr><name pos:line="373" pos:column="40">f</name></expr> <in pos:line="373" pos:column="42">in <expr><name pos:line="373" pos:column="45">files</name></expr></in></from>
                                  <where pos:line="374" pos:column="35">where <expr><name pos:line="374" pos:column="41">languageFilter</name> <op:operator pos:line="374" pos:column="56">==</op:operator> <name><name pos:line="374" pos:column="59">ExtensionMapping</name><index pos:line="374" pos:column="75">[<expr><name><name pos:line="374" pos:column="76">f</name><op:operator pos:line="374" pos:column="77">.</op:operator><name pos:line="374" pos:column="78">Extension</name></name></expr>]</index></name></expr></where>
                                  <select pos:line="375" pos:column="35">select <expr><name><name pos:line="375" pos:column="42">f</name><op:operator pos:line="375" pos:column="43">.</op:operator><name pos:line="375" pos:column="44">FullName</name></name></expr></select></linq></expr>;</expr_stmt>
            }</block></else></if>

            <expr_stmt><expr><call><name pos:line="378" pos:column="13">generateSrcMLDoc</name><argument_list pos:line="378" pos:column="29">(<argument><expr><name><name pos:line="378" pos:column="30">dir</name><op:operator pos:line="378" pos:column="33">.</op:operator><name pos:line="378" pos:column="34">FullName</name></name></expr></argument>, <argument><expr><name pos:line="378" pos:column="44">xmlFileName</name></expr></argument>, <argument><expr><name pos:line="378" pos:column="57">reducedFileList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="379" pos:column="13">return <expr><op:operator pos:line="379" pos:column="20">new</op:operator> <call><name pos:line="379" pos:column="24">SrcMLFile</name><argument_list pos:line="379" pos:column="33">(<argument><expr><name pos:line="379" pos:column="34">xmlFileName</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
<cpp:endregion pos:line="381" pos:column="1">#<cpp:directive pos:line="381" pos:column="2">endregion</cpp:directive> Directory Conversion</cpp:endregion>

<cpp:region pos:line="383" pos:column="1">#<cpp:directive pos:line="383" pos:column="2">region</cpp:directive> srcml2src</cpp:region>
        <comment type="line" pos:line="384" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="385" pos:column="9">/// Runs the srcml2src.exe executable on the given SrcML document, and extracts the specific filename.</comment>
        <comment type="line" pos:line="386" pos:column="9">/// &lt;para&gt;It's probably better to use the &lt;see cref="Extensions.ToSource(XElement)"/&gt; function, as it does not require starting a new process.&lt;/para&gt;</comment>
        <comment type="line" pos:line="387" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="388" pos:column="9">/// &lt;param name="doc"&gt;The SrcML document to query.&lt;/param&gt;</comment>
        <comment type="line" pos:line="389" pos:column="9">/// &lt;param name="unitIndex"&gt;The index number of the SrcML document.&lt;/param&gt;</comment>
        <comment type="line" pos:line="390" pos:column="9">/// &lt;returns&gt;The source code.&lt;/returns&gt;</comment>
        <comment type="line" pos:line="391" pos:column="9">/// TODO change this to use AbstractDocument and use the new srcml2src that comes with srcdiff (remove the suppressmessage after)</comment>
        <function><type><attribute pos:line="392" pos:column="9">[<expr><call><name><name pos:line="392" pos:column="10">System</name><op:operator pos:line="392" pos:column="16">.</op:operator><name pos:line="392" pos:column="17">Diagnostics</name><op:operator pos:line="392" pos:column="28">.</op:operator><name pos:line="392" pos:column="29">CodeAnalysis</name><op:operator pos:line="392" pos:column="41">.</op:operator><name pos:line="392" pos:column="42">SuppressMessage</name></name><argument_list pos:line="392" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="392" pos:column="58">"Microsoft.Usage"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="392" pos:column="77">"CA2233:OperationsShouldNotOverflow"</lit:literal></expr></argument>, <argument><expr><name pos:line="392" pos:column="115">MessageId</name> <op:operator pos:line="392" pos:column="125">=</op:operator> <lit:literal type="string" pos:line="392" pos:column="127">"unitIndex+1"</lit:literal></expr></argument>,
                                                         <argument><expr><name pos:line="393" pos:column="58">Justification</name><op:operator pos:line="393" pos:column="71">=</op:operator><lit:literal type="string" pos:line="393" pos:column="72">"ArgumentOutOfRangeException is thrown if unitIndex==int.MaxValue"</lit:literal></expr></argument>)</argument_list></call></expr><op:operator pos:line="393" pos:column="139">,</op:operator> 
         <expr><call><name><name pos:line="394" pos:column="10">System</name><op:operator pos:line="394" pos:column="16">.</op:operator><name pos:line="394" pos:column="17">Diagnostics</name><op:operator pos:line="394" pos:column="28">.</op:operator><name pos:line="394" pos:column="29">CodeAnalysis</name><op:operator pos:line="394" pos:column="41">.</op:operator><name pos:line="394" pos:column="42">SuppressMessage</name></name><argument_list pos:line="394" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="394" pos:column="58">"Microsoft.Design"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="394" pos:column="78">"CA1011:ConsiderPassingBaseTypesAsParameters"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="395" pos:column="9">public</specifier> <name pos:line="395" pos:column="16">string</name></type> <name pos:line="395" pos:column="23">ExtractSourceFile</name><parameter_list pos:line="395" pos:column="40">(<param><decl><type><name pos:line="395" pos:column="41">SrcMLFile</name></type> <name pos:line="395" pos:column="51">doc</name></decl></param>, <param><decl><type><name pos:line="395" pos:column="56">int</name></type> <name pos:line="395" pos:column="60">unitIndex</name></decl></param>)</parameter_list>
        <block pos:line="396" pos:column="9">{
            <if pos:line="397" pos:column="13">if <condition pos:line="397" pos:column="16">(<expr><name pos:line="397" pos:column="17">null</name> <op:operator pos:line="397" pos:column="22">==</op:operator> <name pos:line="397" pos:column="25">doc</name></expr>)</condition><then pos:line="397" pos:column="29">
                <throw pos:line="398" pos:column="17">throw <expr><op:operator pos:line="398" pos:column="23">new</op:operator> <call><name pos:line="398" pos:column="27">ArgumentNullException</name><argument_list pos:line="398" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="398" pos:column="49">"doc"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            <if pos:line="399" pos:column="13">if <condition pos:line="399" pos:column="16">(<expr><name pos:line="399" pos:column="17">unitIndex</name> <op:operator pos:line="399" pos:column="27">==</op:operator> <name><name pos:line="399" pos:column="30">int</name><op:operator pos:line="399" pos:column="33">.</op:operator><name pos:line="399" pos:column="34">MaxValue</name></name></expr>)</condition><then pos:line="399" pos:column="43">
                <throw pos:line="400" pos:column="17">throw <expr><op:operator pos:line="400" pos:column="23">new</op:operator> <call><name pos:line="400" pos:column="27">ArgumentOutOfRangeException</name><argument_list pos:line="400" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="400" pos:column="55">"unitIndex"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="400" pos:column="68">"Unit index must be less than Int32.MaxValue"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
            
            <decl_stmt><decl><type><name pos:line="402" pos:column="13">string</name></type> <name pos:line="402" pos:column="20">output</name></decl><op:operator pos:line="402" pos:column="26">,</op:operator> <decl><type ref="prev"/><name pos:line="402" pos:column="28">outfile</name> <init pos:line="402" pos:column="36">= <expr><call><name><name pos:line="402" pos:column="38">Path</name><op:operator pos:line="402" pos:column="42">.</op:operator><name pos:line="402" pos:column="43">GetTempFileName</name></name><argument_list pos:line="402" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="403" pos:column="13">string</name></type> <name pos:line="403" pos:column="20">arguments</name> <init pos:line="403" pos:column="30">= <expr><call><name><name pos:line="403" pos:column="32">String</name><op:operator pos:line="403" pos:column="38">.</op:operator><name pos:line="403" pos:column="39">Format</name></name><argument_list pos:line="403" pos:column="45">(<argument><expr><name><name pos:line="403" pos:column="46">CultureInfo</name><op:operator pos:line="403" pos:column="57">.</op:operator><name pos:line="403" pos:column="58">InvariantCulture</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="403" pos:column="76">"-U {0} \"{1}\" \"{2}\""</lit:literal></expr></argument>, <argument><expr><name pos:line="403" pos:column="102">unitIndex</name> <op:operator pos:line="403" pos:column="112">+</op:operator> <lit:literal type="number" pos:line="403" pos:column="114">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="403" pos:column="117">doc</name><op:operator pos:line="403" pos:column="120">.</op:operator><name pos:line="403" pos:column="121">FileName</name></name></expr></argument>, <argument><expr><name pos:line="403" pos:column="131">outfile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <try pos:line="405" pos:column="13">try
            <block pos:line="406" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="407" pos:column="17">KsuAdapter</name><op:operator pos:line="407" pos:column="27">.</op:operator><name pos:line="407" pos:column="28">RunExecutable</name></name><argument_list pos:line="407" pos:column="41">(<argument><expr><name><name pos:line="407" pos:column="42">this</name><op:operator pos:line="407" pos:column="46">.</op:operator><name pos:line="407" pos:column="47">srcml2src_exe</name></name></expr></argument>, <argument><expr><name pos:line="407" pos:column="62">arguments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch pos:line="409" pos:column="13">catch <parameter_list pos:line="409" pos:column="19">(<param><decl><type><name pos:line="409" pos:column="20">SrcMLRuntimeException</name></type> <name pos:line="409" pos:column="42">e</name></decl></param>)</parameter_list>
            <block pos:line="410" pos:column="13">{
                <throw pos:line="411" pos:column="17">throw <expr><op:operator pos:line="411" pos:column="23">new</op:operator> <call><name pos:line="411" pos:column="27">SrcMLException</name><argument_list pos:line="411" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="411" pos:column="42">"srcml2src encountered an error"</lit:literal></expr></argument>, <argument><expr><name pos:line="411" pos:column="76">e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>

            <using pos:line="414" pos:column="13">using (<decl><type><name pos:line="414" pos:column="20">StreamReader</name></type> <name pos:line="414" pos:column="33">reader</name> <init pos:line="414" pos:column="40">= <expr><op:operator pos:line="414" pos:column="42">new</op:operator> <call><name pos:line="414" pos:column="46">StreamReader</name><argument_list pos:line="414" pos:column="58">(<argument><expr><name pos:line="414" pos:column="59">outfile</name></expr></argument>)</argument_list></call></expr></init></decl>)
            <block pos:line="415" pos:column="13">{
                <expr_stmt><expr><name pos:line="416" pos:column="17">output</name> <op:operator pos:line="416" pos:column="24">=</op:operator> <call><name><name pos:line="416" pos:column="26">reader</name><op:operator pos:line="416" pos:column="32">.</op:operator><name pos:line="416" pos:column="33">ReadToEnd</name></name><argument_list pos:line="416" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
            }</block></using>

            <expr_stmt><expr><call><name><name pos:line="419" pos:column="13">File</name><op:operator pos:line="419" pos:column="17">.</op:operator><name pos:line="419" pos:column="18">Delete</name></name><argument_list pos:line="419" pos:column="24">(<argument><expr><name pos:line="419" pos:column="25">outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:line="421" pos:column="13">return <expr><name pos:line="421" pos:column="20">output</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="424" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="425" pos:column="9">/// Takes the given &lt;paramref name="fileName"/&gt; in &lt;paramref name="doc"/&gt; and returns the original source code.</comment>
        <comment type="line" pos:line="426" pos:column="9">/// &lt;para&gt;Instead of this, use &lt;see cref="Extensions.ToSource(XElement,int)"/&gt;.&lt;/para&gt;</comment>
        <comment type="line" pos:line="427" pos:column="9">/// &lt;seealso cref="ExtractSourceFile(SrcMLFile, int)"/&gt;</comment>
        <comment type="line" pos:line="428" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="429" pos:column="9">/// &lt;param name="doc"&gt;The SrcML document to query.&lt;/param&gt;</comment>
        <comment type="line" pos:line="430" pos:column="9">/// &lt;param name="fileName"&gt;The file name to search for.&lt;/param&gt;</comment>
        <comment type="line" pos:line="431" pos:column="9">/// &lt;returns&gt;A string with the original source code.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="432" pos:column="9">public</specifier> <name pos:line="432" pos:column="16">string</name></type> <name pos:line="432" pos:column="23">ExtractSourceFile</name><parameter_list pos:line="432" pos:column="40">(<param><decl><type><name pos:line="432" pos:column="41">SrcMLFile</name></type> <name pos:line="432" pos:column="51">doc</name></decl></param>, <param><decl><type><name pos:line="432" pos:column="56">string</name></type> <name pos:line="432" pos:column="63">fileName</name></decl></param>)</parameter_list>
        <block pos:line="433" pos:column="9">{
            <if pos:line="434" pos:column="13">if <condition pos:line="434" pos:column="16">(<expr><name pos:line="434" pos:column="17">null</name> <op:operator pos:line="434" pos:column="22">==</op:operator> <name pos:line="434" pos:column="25">doc</name></expr>)</condition><then pos:line="434" pos:column="29">
                <throw pos:line="435" pos:column="17">throw <expr><op:operator pos:line="435" pos:column="23">new</op:operator> <call><name pos:line="435" pos:column="27">ArgumentNullException</name><argument_list pos:line="435" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="435" pos:column="49">"doc"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <return pos:line="437" pos:column="13">return <expr><call><name><name pos:line="437" pos:column="20">this</name><op:operator pos:line="437" pos:column="24">.</op:operator><name pos:line="437" pos:column="25">ExtractSourceFile</name></name><argument_list pos:line="437" pos:column="42">(<argument><expr><name pos:line="437" pos:column="43">doc</name></expr></argument>, <argument><expr><call><name><name pos:line="437" pos:column="48">doc</name><op:operator pos:line="437" pos:column="51">.</op:operator><name pos:line="437" pos:column="52">IndexOfUnit</name></name><argument_list pos:line="437" pos:column="63">(<argument><expr><name pos:line="437" pos:column="64">fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
<cpp:endregion pos:line="439" pos:column="1">#<cpp:directive pos:line="439" pos:column="2">endregion</cpp:directive> srcml2src</cpp:endregion>

<cpp:region pos:line="441" pos:column="1">#<cpp:directive pos:line="441" pos:column="2">region</cpp:directive> Deprecated APIs</cpp:region>
        <comment type="line" pos:line="442" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="443" pos:column="9">/// Gets the parent statement for the given element.</comment>
        <comment type="line" pos:line="444" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="445" pos:column="9">/// &lt;param name="element"&gt;The element to find the parent of.&lt;/param&gt;</comment>
        <comment type="line" pos:line="446" pos:column="9">/// &lt;returns&gt;The parent element for &lt;paramref name="element"/&gt;. It will be either &lt;see cref="SRC.ExpressionStatement"/&gt; or &lt;see cref="SRC.DeclarationStatement"/&gt;&lt;/returns&gt;</comment>
        <function><type><attribute pos:line="447" pos:column="9">[<expr><call><name pos:line="447" pos:column="10">Obsolete</name><argument_list pos:line="447" pos:column="18">(<argument><expr><lit:literal type="string" pos:line="447" pos:column="19">"use SRC.ParentStatement instead"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="448" pos:column="9">public</specifier> <specifier pos:line="448" pos:column="16">static</specifier> <name pos:line="448" pos:column="23">XElement</name></type> <name pos:line="448" pos:column="32">getParentStatement</name><parameter_list pos:line="448" pos:column="50">(<param><decl><type><name pos:line="448" pos:column="51">XElement</name></type> <name pos:line="448" pos:column="60">element</name></decl></param>)</parameter_list>
        <block pos:line="449" pos:column="9">{
            <if pos:line="450" pos:column="13">if <condition pos:line="450" pos:column="16">(<expr><name pos:line="450" pos:column="17">null</name> <op:operator pos:line="450" pos:column="22">==</op:operator> <name pos:line="450" pos:column="25">element</name></expr>)</condition><then pos:line="450" pos:column="33">
                <throw pos:line="451" pos:column="17">throw <expr><op:operator pos:line="451" pos:column="23">new</op:operator> <call><name pos:line="451" pos:column="27">ArgumentNullException</name><argument_list pos:line="451" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="451" pos:column="49">"element"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <if pos:line="453" pos:column="13">if <condition pos:line="453" pos:column="16">(<expr><op:operator pos:line="453" pos:column="17">!</op:operator><call><name><name pos:line="453" pos:column="18">element</name><op:operator pos:line="453" pos:column="25">.</op:operator><name pos:line="453" pos:column="26">Ancestors</name></name><argument_list pos:line="453" pos:column="35">()</argument_list></call><op:operator pos:line="453" pos:column="37">.</op:operator><call><name pos:line="453" pos:column="38">Any</name><argument_list pos:line="453" pos:column="41">()</argument_list></call></expr>)</condition><then pos:line="453" pos:column="44">
                <return pos:line="454" pos:column="17">return <expr><name pos:line="454" pos:column="24">null</name></expr>;</return></then></if>
            <return pos:line="455" pos:column="13">return <expr><call><name><name pos:line="455" pos:column="20">element</name><op:operator pos:line="455" pos:column="27">.</op:operator><name pos:line="455" pos:column="28">Ancestors</name></name><argument_list pos:line="455" pos:column="37">()</argument_list></call><op:operator pos:line="455" pos:column="39">.</op:operator><call><name pos:line="455" pos:column="40">Where</name><argument_list pos:line="455" pos:column="45">(<argument><expr><lambda><name pos:line="455" pos:column="46">a</name> <op:operator pos:line="455" pos:column="48">=&gt;</op:operator> <name><name pos:line="455" pos:column="51">a</name><op:operator pos:line="455" pos:column="52">.</op:operator><name pos:line="455" pos:column="53">Name</name></name> <op:operator pos:line="455" pos:column="58">==</op:operator> <name><name pos:line="455" pos:column="61">SRC</name><op:operator pos:line="455" pos:column="64">.</op:operator><name pos:line="455" pos:column="65">ExpressionStatement</name></name> <op:operator pos:line="455" pos:column="85">||</op:operator> <name><name pos:line="455" pos:column="88">a</name><op:operator pos:line="455" pos:column="89">.</op:operator><name pos:line="455" pos:column="90">Name</name></name> <op:operator pos:line="455" pos:column="95">==</op:operator> <name><name pos:line="455" pos:column="98">SRC</name><op:operator pos:line="455" pos:column="101">.</op:operator><name pos:line="455" pos:column="102">DeclarationStatement</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="455" pos:column="123">.</op:operator><call><name pos:line="455" pos:column="124">First</name><argument_list pos:line="455" pos:column="129">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="458" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="459" pos:column="9">/// Generate SrcML from a given string of source code.</comment>
        <comment type="line" pos:line="460" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="461" pos:column="9">/// &lt;param name="source"&gt;A string containing the source code to parse.&lt;/param&gt;</comment>
        <comment type="line" pos:line="462" pos:column="9">/// &lt;param name="language"&gt;The source language to use (C,C++,Java,AspectJ).</comment>
        <comment type="line" pos:line="463" pos:column="9">/// If the source langauge is either not in this list or is null, the default source language (C++) will be used.&lt;/param&gt;</comment>
        <comment type="line" pos:line="464" pos:column="9">/// &lt;returns&gt;XML representing the source.&lt;/returns&gt;</comment>
        <function><type><attribute pos:line="465" pos:column="9">[<expr><call><name pos:line="465" pos:column="10">Obsolete</name><argument_list pos:line="465" pos:column="18">(<argument><expr><lit:literal type="string" pos:line="465" pos:column="19">"Consider using GenerateSrcMLFromString(string,languageFilter)"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="466" pos:column="9">public</specifier> <name pos:line="466" pos:column="16">string</name></type> <name pos:line="466" pos:column="23">GenerateSrcMLFromString</name><parameter_list pos:line="466" pos:column="46">(<param><decl><type><name pos:line="466" pos:column="47">string</name></type> <name pos:line="466" pos:column="54">source</name></decl></param>, <param><decl><type><name pos:line="466" pos:column="62">string</name></type> <name pos:line="466" pos:column="69">language</name></decl></param>)</parameter_list>
        <block pos:line="467" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="468" pos:column="13">Language</name></type> <name pos:line="468" pos:column="22">lang</name></decl>;</decl_stmt>
            <if pos:line="469" pos:column="13">if <condition pos:line="469" pos:column="16">(<expr><name pos:line="469" pos:column="17">null</name> <op:operator pos:line="469" pos:column="22">==</op:operator> <name pos:line="469" pos:column="25">language</name></expr>)</condition><then pos:line="469" pos:column="34">
                <expr_stmt><expr><name pos:line="470" pos:column="17">lang</name> <op:operator pos:line="470" pos:column="22">=</op:operator> <name><name pos:line="470" pos:column="24">Language</name><op:operator pos:line="470" pos:column="32">.</op:operator><name pos:line="470" pos:column="33">CPlusPlus</name></name></expr>;</expr_stmt></then>
            <else pos:line="471" pos:column="13">else
                <expr_stmt><expr><name pos:line="472" pos:column="17">lang</name> <op:operator pos:line="472" pos:column="22">=</op:operator> <call><name><name pos:line="472" pos:column="24">SrcMLElement</name><op:operator pos:line="472" pos:column="36">.</op:operator><name pos:line="472" pos:column="37">GetLanguageFromString</name></name><argument_list pos:line="472" pos:column="58">(<argument><expr><name pos:line="472" pos:column="59">language</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

            <return pos:line="474" pos:column="13">return <expr><call><name pos:line="474" pos:column="20">GenerateSrcMLFromString</name><argument_list pos:line="474" pos:column="43">(<argument><expr><name pos:line="474" pos:column="44">source</name></expr></argument>, <argument><expr><name pos:line="474" pos:column="52">lang</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
        <comment type="line" pos:line="476" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="477" pos:column="9">/// Generate a SrcML document from a single source file with the specified language.</comment>
        <comment type="line" pos:line="478" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="479" pos:column="9">/// &lt;param name="sourceFileName"&gt;The path to the source file to convert.&lt;/param&gt;</comment>
        <comment type="line" pos:line="480" pos:column="9">/// &lt;param name="xmlFileName"&gt;The file name to write the resulting XML to.&lt;/param&gt;</comment>
        <comment type="line" pos:line="481" pos:column="9">/// &lt;param name="language"&gt;The language to parse the source file as.&lt;/param&gt;</comment>
        <comment type="line" pos:line="482" pos:column="9">/// &lt;returns&gt;A SrcMLFile for &lt;paramref name="xmlFileName"/&gt;.&lt;/returns&gt;</comment>
        <function><type><attribute pos:line="483" pos:column="9">[<expr><call><name pos:line="483" pos:column="10">Obsolete</name><argument_list pos:line="483" pos:column="18">(<argument><expr><lit:literal type="string" pos:line="483" pos:column="19">"Consider using GenerateSrcMLFromFile(string,string,Language)"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="484" pos:column="9">public</specifier> <name pos:line="484" pos:column="16">SrcMLFile</name></type> <name pos:line="484" pos:column="26">GenerateSrcMLFromFile</name><parameter_list pos:line="484" pos:column="47">(<param><decl><type><name pos:line="484" pos:column="48">string</name></type> <name pos:line="484" pos:column="55">sourceFileName</name></decl></param>, <param><decl><type><name pos:line="484" pos:column="71">string</name></type> <name pos:line="484" pos:column="78">xmlFileName</name></decl></param>, <param><decl><type><name pos:line="484" pos:column="91">string</name></type> <name pos:line="484" pos:column="98">language</name></decl></param>)</parameter_list>
        <block pos:line="485" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="486" pos:column="13">var</name></type> <name pos:line="486" pos:column="17">lang</name> <init pos:line="486" pos:column="22">= <expr><call><name><name pos:line="486" pos:column="24">SrcMLElement</name><op:operator pos:line="486" pos:column="36">.</op:operator><name pos:line="486" pos:column="37">GetLanguageFromString</name></name><argument_list pos:line="486" pos:column="58">(<argument><expr><name pos:line="486" pos:column="59">language</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="487" pos:column="13">string</name></type> <name pos:line="487" pos:column="20">fullPath</name> <init pos:line="487" pos:column="29">= <expr><call><name><name pos:line="487" pos:column="31">Path</name><op:operator pos:line="487" pos:column="35">.</op:operator><name pos:line="487" pos:column="36">GetFullPath</name></name><argument_list pos:line="487" pos:column="47">(<argument><expr><name pos:line="487" pos:column="48">sourceFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name pos:line="489" pos:column="13">generateSrcMLDoc</name><argument_list pos:line="489" pos:column="29">(<argument><expr><name pos:line="489" pos:column="30">sourceFileName</name></expr></argument>, <argument><expr><name pos:line="489" pos:column="46">xmlFileName</name></expr></argument>, <argument><expr><name pos:line="489" pos:column="59">lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:line="491" pos:column="13">return <expr><op:operator pos:line="491" pos:column="20">new</op:operator> <call><name pos:line="491" pos:column="24">SrcMLFile</name><argument_list pos:line="491" pos:column="33">(<argument><expr><name pos:line="491" pos:column="34">xmlFileName</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="494" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="495" pos:column="9">/// Generate a SrcML file from the Visual Studio project file, with the given languageFilter.</comment>
        <comment type="line" pos:line="496" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="497" pos:column="9">/// &lt;param name="project"&gt;The path to the Visual Studo project file.&lt;/param&gt;</comment>
        <comment type="line" pos:line="498" pos:column="9">/// &lt;param name="xmlFileName"&gt;The file name to write the resulting XML to.&lt;/param&gt;</comment>
        <comment type="line" pos:line="499" pos:column="9">/// &lt;param name="language"&gt;The source language to use (C,C++,Java,AspectJ)&lt;/param&gt;</comment>
        <comment type="line" pos:line="500" pos:column="9">/// &lt;returns&gt;a SrcMLFile for &lt;paramref name="xmlFileName"/&gt;&lt;/returns&gt;</comment>
        <function><type><attribute pos:line="501" pos:column="9">[<expr><call><name pos:line="501" pos:column="10">Obsolete</name><argument_list pos:line="501" pos:column="18">(<argument><expr><lit:literal type="string" pos:line="501" pos:column="19">"Consider using GenerateSrcMLFromProject(string,string,Language)"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="502" pos:column="9">public</specifier> <name pos:line="502" pos:column="16">SrcMLFile</name></type> <name pos:line="502" pos:column="26">GenerateSrcMLFromProject</name><parameter_list pos:line="502" pos:column="50">(<param><decl><type><name pos:line="502" pos:column="51">string</name></type> <name pos:line="502" pos:column="58">project</name></decl></param>, <param><decl><type><name pos:line="502" pos:column="67">string</name></type> <name pos:line="502" pos:column="74">xmlFileName</name></decl></param>, <param><decl><type><name pos:line="502" pos:column="87">string</name></type> <name pos:line="502" pos:column="94">language</name></decl></param>)</parameter_list>
        <block pos:line="503" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="504" pos:column="13">Language</name></type> <name pos:line="504" pos:column="22">lang</name> <init pos:line="504" pos:column="27">= <expr><call><name><name pos:line="504" pos:column="29">SrcMLElement</name><op:operator pos:line="504" pos:column="41">.</op:operator><name pos:line="504" pos:column="42">GetLanguageFromString</name></name><argument_list pos:line="504" pos:column="63">(<argument><expr><name pos:line="504" pos:column="64">language</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name pos:line="506" pos:column="13">GenerateSrcMLFromProject</name><argument_list pos:line="506" pos:column="37">(<argument><expr><name pos:line="506" pos:column="38">project</name></expr></argument>, <argument><expr><name pos:line="506" pos:column="47">xmlFileName</name></expr></argument>, <argument><expr><name pos:line="506" pos:column="60">lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="507" pos:column="13">return <expr><op:operator pos:line="507" pos:column="20">new</op:operator> <call><name pos:line="507" pos:column="24">SrcMLFile</name><argument_list pos:line="507" pos:column="33">(<argument><expr><name pos:line="507" pos:column="34">xmlFileName</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="510" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="511" pos:column="9">/// Generate a SrcML file from the given directory.</comment>
        <comment type="line" pos:line="512" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="513" pos:column="9">/// &lt;param name="path"&gt;The path to the source directory.&lt;/param&gt;</comment>
        <comment type="line" pos:line="514" pos:column="9">/// &lt;param name="xmlFileName"&gt;The path to write the resulting XML to.&lt;/param&gt;</comment>
        <comment type="line" pos:line="515" pos:column="9">/// &lt;param name="overrideJava"&gt;If true, parse Java files as C++&lt;/param&gt;</comment>
        <comment type="line" pos:line="516" pos:column="9">/// &lt;returns&gt;A SrcMLFile for &lt;paramref name="xmlFileName"/&gt;.&lt;/returns&gt;</comment>
        <function><type><attribute pos:line="517" pos:column="9">[<expr><call><name pos:line="517" pos:column="10">Obsolete</name><argument_list pos:line="517" pos:column="18">(<argument><expr><lit:literal type="string" pos:line="517" pos:column="19">"Consider using GenerateSrcMLFromDirectory(string,string,Dictionary&lt;string,Language&gt;,IEnumerable&lt;string&gt;,Language)"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="518" pos:column="9">public</specifier> <name pos:line="518" pos:column="16">SrcMLFile</name></type> <name pos:line="518" pos:column="26">GenerateSrcMLFromDirectory</name><parameter_list pos:line="518" pos:column="52">(<param><decl><type><name pos:line="518" pos:column="53">string</name></type> <name pos:line="518" pos:column="60">path</name></decl></param>, <param><decl><type><name pos:line="518" pos:column="66">string</name></type> <name pos:line="518" pos:column="73">xmlFileName</name></decl></param>, <param><decl><type><name pos:line="518" pos:column="86">bool</name></type> <name pos:line="518" pos:column="91">overrideJava</name></decl></param>)</parameter_list>
        <block pos:line="519" pos:column="9">{
            <return pos:line="520" pos:column="13">return <expr><call><name pos:line="520" pos:column="20">GenerateSrcMLFromDirectory</name><argument_list pos:line="520" pos:column="46">(<argument><expr><name pos:line="520" pos:column="47">path</name></expr></argument>, <argument><expr><name pos:line="520" pos:column="53">xmlFileName</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="520" pos:column="66">"Any"</lit:literal></expr></argument>, <argument><expr><name pos:line="520" pos:column="73">overrideJava</name></expr></argument>, <argument><expr><call><name><name pos:line="520" pos:column="87">Enumerable</name><op:operator pos:line="520" pos:column="97">.</op:operator><name><name pos:line="520" pos:column="98">Empty</name><argument_list pos:line="520" pos:column="103">&lt;<argument><name pos:line="520" pos:column="104">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="520" pos:column="111">()</argument_list></call><op:operator pos:line="520" pos:column="113">.</op:operator><call><name pos:line="520" pos:column="114">ToList</name><argument_list pos:line="520" pos:column="120">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="523" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="524" pos:column="9">/// Generate a SrcML file from the given directory, with the given languageFilter.</comment>
        <comment type="line" pos:line="525" pos:column="9">/// Only source files for the given languageFilter are included in the output.</comment>
        <comment type="line" pos:line="526" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="527" pos:column="9">/// &lt;param name="path"&gt;The path to the source directory.&lt;/param&gt;</comment>
        <comment type="line" pos:line="528" pos:column="9">/// &lt;param name="xmlFileName"&gt;The path to write the resulting XML to.&lt;/param&gt;</comment>
        <comment type="line" pos:line="529" pos:column="9">/// &lt;param name="language"&gt;The language to find files for.&lt;/param&gt;</comment>
        <comment type="line" pos:line="530" pos:column="9">/// &lt;param name="overrideJava"&gt;if true, parse Java files as C++&lt;/param&gt;</comment>
        <comment type="line" pos:line="531" pos:column="9">/// &lt;returns&gt;A SrcMLFile for &lt;paramref name="xmlFileName"/&gt;.&lt;/returns&gt;</comment>
        <function><type><attribute pos:line="532" pos:column="9">[<expr><call><name pos:line="532" pos:column="10">Obsolete</name><argument_list pos:line="532" pos:column="18">(<argument><expr><lit:literal type="string" pos:line="532" pos:column="19">"Consider using GenerateSrcMLFromDirectory(string,string,Dictionary&lt;string,Language&gt;,IEnumerable&lt;string&gt;,Language)"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="533" pos:column="9">public</specifier> <name pos:line="533" pos:column="16">SrcMLFile</name></type> <name pos:line="533" pos:column="26">GenerateSrcMLFromDirectory</name><parameter_list pos:line="533" pos:column="52">(<param><decl><type><name pos:line="533" pos:column="53">string</name></type> <name pos:line="533" pos:column="60">path</name></decl></param>, <param><decl><type><name pos:line="533" pos:column="66">string</name></type> <name pos:line="533" pos:column="73">xmlFileName</name></decl></param>, <param><decl><type><name pos:line="533" pos:column="86">string</name></type> <name pos:line="533" pos:column="93">language</name></decl></param>, <param><decl><type><name pos:line="533" pos:column="103">bool</name></type> <name pos:line="533" pos:column="108">overrideJava</name></decl></param>)</parameter_list>
        <block pos:line="534" pos:column="9">{
            <return pos:line="535" pos:column="13">return <expr><call><name pos:line="535" pos:column="20">GenerateSrcMLFromDirectory</name><argument_list pos:line="535" pos:column="46">(<argument><expr><name pos:line="535" pos:column="47">path</name></expr></argument>, <argument><expr><name pos:line="535" pos:column="53">xmlFileName</name></expr></argument>, <argument><expr><name pos:line="535" pos:column="66">language</name></expr></argument>, <argument><expr><name pos:line="535" pos:column="76">overrideJava</name></expr></argument>, <argument><expr><call><name><name pos:line="535" pos:column="90">Enumerable</name><op:operator pos:line="535" pos:column="100">.</op:operator><name><name pos:line="535" pos:column="101">Empty</name><argument_list pos:line="535" pos:column="106">&lt;<argument><name pos:line="535" pos:column="107">string</name></argument>&gt;</argument_list></name></name><argument_list pos:line="535" pos:column="114">()</argument_list></call><op:operator pos:line="535" pos:column="116">.</op:operator><call><name pos:line="535" pos:column="117">ToList</name><argument_list pos:line="535" pos:column="123">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="538" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="539" pos:column="9">/// Generate a SrcML file from the given directory, with the given languageFilter.</comment>
        <comment type="line" pos:line="540" pos:column="9">/// Only source files for the given languageFilter are included in the output.</comment>
        <comment type="line" pos:line="541" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="542" pos:column="9">/// &lt;param name="path"&gt;The path to the source directory.&lt;/param&gt;</comment>
        <comment type="line" pos:line="543" pos:column="9">/// &lt;param name="xmlFileName"&gt;The path to write the resulting XML to.&lt;/param&gt;</comment>
        <comment type="line" pos:line="544" pos:column="9">/// &lt;param name="language"&gt;The language to find files for.&lt;/param&gt;</comment>
        <comment type="line" pos:line="545" pos:column="9">/// &lt;param name="overrideJava"&gt;if true, parse Java files as C++&lt;/param&gt;</comment>
        <comment type="line" pos:line="546" pos:column="9">/// &lt;param name="fileExclusionList"&gt;List of files to exclude. This is accomplished via simple string matching; so the entire file path should be used.&lt;/param&gt;</comment>
        <comment type="line" pos:line="547" pos:column="9">/// &lt;returns&gt;A SrcMLFile for &lt;paramref name="xmlFileName"/&gt;.&lt;/returns&gt;</comment>
        <function><type><attribute pos:line="548" pos:column="9">[<expr><call><name pos:line="548" pos:column="10">Obsolete</name><argument_list pos:line="548" pos:column="18">(<argument><expr><lit:literal type="string" pos:line="548" pos:column="19">"Consider using GenerateSrcMLFromDirectory(string,string,Dictionary&lt;string,Language&gt;,IEnumerable&lt;string&gt;,Language)"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="549" pos:column="9">public</specifier> <name pos:line="549" pos:column="16">SrcMLFile</name></type> <name pos:line="549" pos:column="26">GenerateSrcMLFromDirectory</name><parameter_list pos:line="549" pos:column="52">(<param><decl><type><name pos:line="549" pos:column="53">string</name></type> <name pos:line="549" pos:column="60">path</name></decl></param>, <param><decl><type><name pos:line="549" pos:column="66">string</name></type> <name pos:line="549" pos:column="73">xmlFileName</name></decl></param>, <param><decl><type><name pos:line="549" pos:column="86">string</name></type> <name pos:line="549" pos:column="93">language</name></decl></param>, <param><decl><type><name pos:line="549" pos:column="103">bool</name></type> <name pos:line="549" pos:column="108">overrideJava</name></decl></param>, <param><decl><type><name><name pos:line="549" pos:column="122">List</name><argument_list pos:line="549" pos:column="126">&lt;<argument><name pos:line="549" pos:column="127">string</name></argument>&gt;</argument_list></name></type> <name pos:line="549" pos:column="135">fileExclusionList</name></decl></param>)</parameter_list>
        <block pos:line="550" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="551" pos:column="13">List</name><argument_list pos:line="551" pos:column="17">&lt;<argument><name pos:line="551" pos:column="18">string</name></argument>&gt;</argument_list></name></type> <name pos:line="551" pos:column="26">extensionsToRestore</name> <init pos:line="551" pos:column="46">= <expr><op:operator pos:line="551" pos:column="48">new</op:operator> <call><name><name pos:line="551" pos:column="52">List</name><argument_list pos:line="551" pos:column="56">&lt;<argument><name pos:line="551" pos:column="57">string</name></argument>&gt;</argument_list></name><argument_list pos:line="551" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="552" pos:column="13">if <condition pos:line="552" pos:column="16">(<expr><name pos:line="552" pos:column="17">overrideJava</name></expr>)</condition><then pos:line="552" pos:column="30">
            <block pos:line="553" pos:column="13">{
                
                <foreach pos:line="555" pos:column="17">foreach (<init><decl><type><name pos:line="555" pos:column="26">var</name></type> <name pos:line="555" pos:column="30">kvp</name> <range pos:line="555" pos:column="34">in <expr><name pos:line="555" pos:column="37">ExtensionMapping</name></expr></range></decl></init>)
                <block pos:line="556" pos:column="17">{
                    <if pos:line="557" pos:column="21">if <condition pos:line="557" pos:column="24">(<expr><name><name pos:line="557" pos:column="25">kvp</name><op:operator pos:line="557" pos:column="28">.</op:operator><name pos:line="557" pos:column="29">Value</name></name> <op:operator pos:line="557" pos:column="35">==</op:operator> <name><name pos:line="557" pos:column="38">Language</name><op:operator pos:line="557" pos:column="46">.</op:operator><name pos:line="557" pos:column="47">Java</name></name></expr>)</condition><then pos:line="557" pos:column="52">
                    <block pos:line="558" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="559" pos:column="25">extensionsToRestore</name><op:operator pos:line="559" pos:column="44">.</op:operator><name pos:line="559" pos:column="45">Add</name></name><argument_list pos:line="559" pos:column="48">(<argument><expr><name><name pos:line="559" pos:column="49">kvp</name><op:operator pos:line="559" pos:column="52">.</op:operator><name pos:line="559" pos:column="53">Key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name pos:line="560" pos:column="25">ExtensionMapping</name><index pos:line="560" pos:column="41">[<expr><name><name pos:line="560" pos:column="42">kvp</name><op:operator pos:line="560" pos:column="45">.</op:operator><name pos:line="560" pos:column="46">Key</name></name></expr>]</index></name> <op:operator pos:line="560" pos:column="51">=</op:operator> <name><name pos:line="560" pos:column="53">Language</name><op:operator pos:line="560" pos:column="61">.</op:operator><name pos:line="560" pos:column="62">CPlusPlus</name></name></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></foreach>
            }</block></then></if>

            <try pos:line="565" pos:column="13">try
            <block pos:line="566" pos:column="13">{
                <return pos:line="567" pos:column="17">return <expr><call><name pos:line="567" pos:column="24">GenerateSrcMLFromDirectory</name><argument_list pos:line="567" pos:column="50">(<argument><expr><name pos:line="567" pos:column="51">path</name></expr></argument>, <argument><expr><name pos:line="567" pos:column="57">xmlFileName</name></expr></argument>, <argument><expr><name pos:line="567" pos:column="70">fileExclusionList</name></expr></argument>, <argument><expr><call><name><name pos:line="567" pos:column="89">SrcMLElement</name><op:operator pos:line="567" pos:column="101">.</op:operator><name pos:line="567" pos:column="102">GetLanguageFromString</name></name><argument_list pos:line="567" pos:column="123">(<argument><expr><name pos:line="567" pos:column="124">language</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block>
            <finally pos:line="569" pos:column="13">finally
            <block pos:line="570" pos:column="13">{
                <foreach pos:line="571" pos:column="17">foreach (<init><decl><type><name pos:line="571" pos:column="26">var</name></type> <name pos:line="571" pos:column="30">ext</name> <range pos:line="571" pos:column="34">in <expr><name pos:line="571" pos:column="37">extensionsToRestore</name></expr></range></decl></init>)
                <block pos:line="572" pos:column="17">{
                    <expr_stmt><expr><name><name pos:line="573" pos:column="21">ExtensionMapping</name><index pos:line="573" pos:column="37">[<expr><name pos:line="573" pos:column="38">ext</name></expr>]</index></name> <op:operator pos:line="573" pos:column="43">=</op:operator> <name><name pos:line="573" pos:column="45">Language</name><op:operator pos:line="573" pos:column="53">.</op:operator><name pos:line="573" pos:column="54">Java</name></name></expr>;</expr_stmt>
                }</block></foreach>
            }</block></finally></try>
            
        }</block></function>

        <comment type="line" pos:line="579" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="580" pos:column="9">/// Generate a SrcML file from the given directory.</comment>
        <comment type="line" pos:line="581" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="582" pos:column="9">/// &lt;param name="path"&gt;The path to the source directory.&lt;/param&gt;</comment>
        <comment type="line" pos:line="583" pos:column="9">/// &lt;param name="xmlFileName"&gt;The path to write the resulting XML to.&lt;/param&gt;</comment>
        <comment type="line" pos:line="584" pos:column="9">/// &lt;param name="overrideJava"&gt;If true, parse Java files as C++&lt;/param&gt;</comment>
        <comment type="line" pos:line="585" pos:column="9">/// &lt;param name="exclusionListFile"&gt;A list of files to exclude from the SrcML document. If null; exclude no files.&lt;/param&gt;</comment>
        <comment type="line" pos:line="586" pos:column="9">/// &lt;returns&gt;A SrcMLFile for &lt;paramref name="xmlFileName"/&gt;.&lt;/returns&gt;</comment>
        <function><type><attribute pos:line="587" pos:column="9">[<expr><call><name pos:line="587" pos:column="10">Obsolete</name><argument_list pos:line="587" pos:column="18">(<argument><expr><lit:literal type="string" pos:line="587" pos:column="19">"Consider using GenerateSrcMLFromDirectory(string,string,Dictionary&lt;string,Language&gt;,IEnumerable&lt;string&gt;,Language)"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="588" pos:column="9">public</specifier> <name pos:line="588" pos:column="16">SrcMLFile</name></type> <name pos:line="588" pos:column="26">GenerateSrcMLFromDirectory</name><parameter_list pos:line="588" pos:column="52">(<param><decl><type><name pos:line="588" pos:column="53">string</name></type> <name pos:line="588" pos:column="60">path</name></decl></param>, <param><decl><type><name pos:line="588" pos:column="66">string</name></type> <name pos:line="588" pos:column="73">xmlFileName</name></decl></param>, <param><decl><type><name pos:line="588" pos:column="86">bool</name></type> <name pos:line="588" pos:column="91">overrideJava</name></decl></param>, <param><decl><type><name pos:line="588" pos:column="105">string</name></type> <name pos:line="588" pos:column="112">exclusionListFile</name></decl></param>)</parameter_list>
        <block pos:line="589" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="590" pos:column="13">List</name><argument_list pos:line="590" pos:column="17">&lt;<argument><name pos:line="590" pos:column="18">string</name></argument>&gt;</argument_list></name></type> <name pos:line="590" pos:column="26">excludedFiles</name></decl>;</decl_stmt>
            <if pos:line="591" pos:column="13">if <condition pos:line="591" pos:column="16">(<expr><name pos:line="591" pos:column="17">null</name> <op:operator pos:line="591" pos:column="22">!=</op:operator> <name pos:line="591" pos:column="25">exclusionListFile</name></expr>)</condition><then pos:line="591" pos:column="43">
                <expr_stmt><expr><name pos:line="592" pos:column="17">excludedFiles</name> <op:operator pos:line="592" pos:column="31">=</op:operator> <op:operator pos:line="592" pos:column="33">new</op:operator> <call><name><name pos:line="592" pos:column="37">List</name><argument_list pos:line="592" pos:column="41">&lt;<argument><name pos:line="592" pos:column="42">string</name></argument>&gt;</argument_list></name><argument_list pos:line="592" pos:column="49">(<argument><expr><call><name><name pos:line="592" pos:column="50">File</name><op:operator pos:line="592" pos:column="54">.</op:operator><name pos:line="592" pos:column="55">ReadAllLines</name></name><argument_list pos:line="592" pos:column="67">(<argument><expr><name pos:line="592" pos:column="68">exclusionListFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else pos:line="593" pos:column="13">else
                <expr_stmt><expr><name pos:line="594" pos:column="17">excludedFiles</name> <op:operator pos:line="594" pos:column="31">=</op:operator> <op:operator pos:line="594" pos:column="33">new</op:operator> <call><name><name pos:line="594" pos:column="37">List</name><argument_list pos:line="594" pos:column="41">&lt;<argument><name pos:line="594" pos:column="42">string</name></argument>&gt;</argument_list></name><argument_list pos:line="594" pos:column="49">()</argument_list></call></expr>;</expr_stmt></else></if>

            <return pos:line="596" pos:column="13">return <expr><call><name pos:line="596" pos:column="20">GenerateSrcMLFromDirectory</name><argument_list pos:line="596" pos:column="46">(<argument><expr><name pos:line="596" pos:column="47">path</name></expr></argument>, <argument><expr><name pos:line="596" pos:column="53">xmlFileName</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="596" pos:column="66">"Any"</lit:literal></expr></argument>, <argument><expr><name pos:line="596" pos:column="73">overrideJava</name></expr></argument>, <argument><expr><name pos:line="596" pos:column="87">excludedFiles</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
<cpp:endregion pos:line="598" pos:column="1">#<cpp:directive pos:line="598" pos:column="2">endregion</cpp:directive> Deprecated APIs</cpp:endregion>
    }</block></class>
}</block></namespace>
</unit>
