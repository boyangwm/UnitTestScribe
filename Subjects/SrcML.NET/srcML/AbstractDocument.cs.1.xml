<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML\AbstractDocument.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2010 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Vinay Augustine (ABB Group) - initial API, implementation, &amp; documentation
 *****************************************************************************/</comment>

<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">System</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Collections</name><op:operator pos:line="13" pos:column="25">.</op:operator><name pos:line="13" pos:column="26">Generic</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Linq</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Text</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Xml</name><op:operator pos:line="16" pos:column="17">.</op:operator><name pos:line="16" pos:column="18">Linq</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Xml</name></name>;</using>

<namespace pos:line="19" pos:column="1">namespace <name><name pos:line="19" pos:column="11">ABB</name><op:operator pos:line="19" pos:column="14">.</op:operator><name pos:line="19" pos:column="15">SrcML</name></name>
<block pos:line="20" pos:column="1">{
    <comment type="line" pos:line="21" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="22" pos:column="5">/// Provides base functionality for various srcML documents.</comment>
    <comment type="line" pos:line="23" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="24" pos:column="5">public</specifier> class <name pos:line="24" pos:column="18">AbstractDocument</name>
    <block pos:line="25" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="26" pos:column="9">private</specifier> <name pos:line="26" pos:column="17">string</name></type> <name pos:line="26" pos:column="24">_fileName</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="27" pos:column="9">private</specifier> <name pos:line="27" pos:column="17">int</name></type> <name pos:line="27" pos:column="21">_numNestedUnits</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="28" pos:column="9">private</specifier> <name><name pos:line="28" pos:column="17">Dictionary</name><argument_list pos:line="28" pos:column="27">&lt;<argument><name pos:line="28" pos:column="28">XName</name></argument>, <argument><name pos:line="28" pos:column="35">XAttribute</name></argument>&gt;</argument_list></name></type> <name pos:line="28" pos:column="47">_rootAttributeDictionary</name></decl>;</decl_stmt>

        <comment type="line" pos:line="30" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="31" pos:column="9">/// Initializes a new instance of the &lt;see cref="AbstractDocument"/&gt; class.</comment>
        <comment type="line" pos:line="32" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="33" pos:column="9">/// &lt;param name="fileName"&gt;Name of the file.&lt;/param&gt;</comment>
        <constructor><specifier pos:line="34" pos:column="9">protected</specifier> <name pos:line="34" pos:column="19">AbstractDocument</name><parameter_list pos:line="34" pos:column="35">(<param><decl><type><name pos:line="34" pos:column="36">string</name></type> <name pos:line="34" pos:column="43">fileName</name></decl></param>)</parameter_list>
        <block pos:line="35" pos:column="9">{
            <expr_stmt><expr><name><name pos:line="36" pos:column="13">this</name><op:operator pos:line="36" pos:column="17">.</op:operator><name pos:line="36" pos:column="18">_fileName</name></name> <op:operator pos:line="36" pos:column="28">=</op:operator> <name pos:line="36" pos:column="30">fileName</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="37" pos:column="13">this</name><op:operator pos:line="37" pos:column="17">.</op:operator><name pos:line="37" pos:column="18">_rootAttributeDictionary</name></name> <op:operator pos:line="37" pos:column="43">=</op:operator> <op:operator pos:line="37" pos:column="45">new</op:operator> <call><name><name pos:line="37" pos:column="49">Dictionary</name><argument_list pos:line="37" pos:column="59">&lt;<argument><name pos:line="37" pos:column="60">XName</name></argument>, <argument><name pos:line="37" pos:column="67">XAttribute</name></argument>&gt;</argument_list></name><argument_list pos:line="37" pos:column="78">(<argument><expr><call><name pos:line="37" pos:column="79">getRootAttributes</name><argument_list pos:line="37" pos:column="96">(<argument><expr><name pos:line="37" pos:column="97">fileName</name></expr></argument>)</argument_list></call><op:operator pos:line="37" pos:column="106">.</op:operator><call><name pos:line="37" pos:column="107">ToDictionary</name><argument_list pos:line="37" pos:column="119">(<argument><expr><lambda><name pos:line="37" pos:column="120">x</name> <op:operator pos:line="37" pos:column="122">=&gt;</op:operator> <name><name pos:line="37" pos:column="125">x</name><op:operator pos:line="37" pos:column="126">.</op:operator><name pos:line="37" pos:column="127">Name</name></name></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="38" pos:column="13">this</name><op:operator pos:line="38" pos:column="17">.</op:operator><name pos:line="38" pos:column="18">_numNestedUnits</name></name> <op:operator pos:line="38" pos:column="34">=</op:operator> <call><name><name pos:line="38" pos:column="36">XmlHelper</name><op:operator pos:line="38" pos:column="45">.</op:operator><name pos:line="38" pos:column="46">StreamElements</name></name><argument_list pos:line="38" pos:column="60">(<argument><expr><name><name pos:line="38" pos:column="61">this</name><op:operator pos:line="38" pos:column="65">.</op:operator><name pos:line="38" pos:column="66">FileName</name></name></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="76">SRC</name><op:operator pos:line="38" pos:column="79">.</op:operator><name pos:line="38" pos:column="80">Unit</name></name></expr></argument>)</argument_list></call><op:operator pos:line="38" pos:column="85">.</op:operator><call><name pos:line="38" pos:column="86">Count</name><argument_list pos:line="38" pos:column="91">()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line" pos:line="41" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="42" pos:column="9">/// Initializes a new instance of the &lt;see cref="AbstractDocument"/&gt; class based on &lt;paramref name="other"/&gt;.</comment>
        <comment type="line" pos:line="43" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="44" pos:column="9">/// &lt;param name="other"&gt;The other &lt;see cref="AbstractDocument"/&gt; object to copy&lt;/param&gt;</comment>
        <constructor><specifier pos:line="45" pos:column="9">protected</specifier> <name pos:line="45" pos:column="19">AbstractDocument</name><parameter_list pos:line="45" pos:column="35">(<param><decl><type><name pos:line="45" pos:column="36">AbstractDocument</name></type> <name pos:line="45" pos:column="53">other</name></decl></param>)</parameter_list>
        <block pos:line="46" pos:column="9">{
            <if pos:line="47" pos:column="13">if <condition pos:line="47" pos:column="16">(<expr><name pos:line="47" pos:column="17">null</name> <op:operator pos:line="47" pos:column="22">==</op:operator> <name pos:line="47" pos:column="25">other</name></expr>)</condition><then pos:line="47" pos:column="31">
                <throw pos:line="48" pos:column="17">throw <expr><op:operator pos:line="48" pos:column="23">new</op:operator> <call><name pos:line="48" pos:column="27">ArgumentNullException</name><argument_list pos:line="48" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="48" pos:column="49">"other"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <expr_stmt><expr><name><name pos:line="50" pos:column="13">this</name><op:operator pos:line="50" pos:column="17">.</op:operator><name pos:line="50" pos:column="18">_fileName</name></name> <op:operator pos:line="50" pos:column="28">=</op:operator> <name><name pos:line="50" pos:column="30">other</name><op:operator pos:line="50" pos:column="35">.</op:operator><name pos:line="50" pos:column="36">_fileName</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="51" pos:column="13">this</name><op:operator pos:line="51" pos:column="17">.</op:operator><name pos:line="51" pos:column="18">_rootAttributeDictionary</name></name> <op:operator pos:line="51" pos:column="43">=</op:operator> <name><name pos:line="51" pos:column="45">other</name><op:operator pos:line="51" pos:column="50">.</op:operator><name pos:line="51" pos:column="51">_rootAttributeDictionary</name></name></expr>;</expr_stmt>

        }</block></constructor>

        <comment type="line" pos:line="55" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="56" pos:column="9">/// Gets the filename underlying this SrcMLFile.</comment>
        <comment type="line" pos:line="57" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="58" pos:column="9">public</specifier> <name pos:line="58" pos:column="16">string</name></type> <name pos:line="58" pos:column="23">FileName</name>
        <block pos:line="59" pos:column="9">{
            <function><name pos:line="60" pos:column="13">get</name> <block pos:line="60" pos:column="17">{ <return pos:line="60" pos:column="19">return <expr><name><name pos:line="60" pos:column="26">this</name><op:operator pos:line="60" pos:column="30">.</op:operator><name pos:line="60" pos:column="31">_fileName</name></name></expr>;</return> }</block></function>
            <function><specifier pos:line="61" pos:column="13">protected</specifier> <name pos:line="61" pos:column="23">set</name> <block pos:line="61" pos:column="27">{ <expr_stmt><expr><name><name pos:line="61" pos:column="29">this</name><op:operator pos:line="61" pos:column="33">.</op:operator><name pos:line="61" pos:column="34">_fileName</name></name> <op:operator pos:line="61" pos:column="44">=</op:operator> <name pos:line="61" pos:column="46">value</name></expr>;</expr_stmt> }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="64" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="65" pos:column="9">/// Returns the attribute dictionary </comment>
        <comment type="line" pos:line="66" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="67" pos:column="9">public</specifier> <name><name pos:line="67" pos:column="16">Dictionary</name><argument_list pos:line="67" pos:column="26">&lt;<argument><name pos:line="67" pos:column="27">XName</name></argument>, <argument><name pos:line="67" pos:column="34">XAttribute</name></argument>&gt;</argument_list></name></type> <name pos:line="67" pos:column="46">RootAttributeDictionary</name>
        <block pos:line="68" pos:column="9">{
            <function><name pos:line="69" pos:column="13">get</name>
            <block pos:line="70" pos:column="13">{
                <return pos:line="71" pos:column="17">return <expr><name><name pos:line="71" pos:column="24">this</name><op:operator pos:line="71" pos:column="28">.</op:operator><name pos:line="71" pos:column="29">_rootAttributeDictionary</name></name></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="75" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="76" pos:column="9">/// Gets the number of nested file units.</comment>
        <comment type="line" pos:line="77" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="78" pos:column="9">protected</specifier> <name pos:line="78" pos:column="19">int</name></type> <name pos:line="78" pos:column="23">NumberOfNestedFileUnits</name>
        <block pos:line="79" pos:column="9">{
            <function><name pos:line="80" pos:column="13">get</name>
            <block pos:line="81" pos:column="13">{
                <return pos:line="82" pos:column="17">return <expr><name><name pos:line="82" pos:column="24">this</name><op:operator pos:line="82" pos:column="28">.</op:operator><name pos:line="82" pos:column="29">_numNestedUnits</name></name></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="86" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="87" pos:column="9">/// Get all units that have the "filename" attribute. This uses the &lt;see cref="XmlHelper.StreamElements"/&gt; function for low memory overhead,</comment>
        <comment type="line" pos:line="88" pos:column="9">/// unless the document is not compound (and the root unit is the only file unit). In that case, it uses &lt;see cref="SrcMLElement.Load(string)"/&gt;.</comment>
        <comment type="line" pos:line="89" pos:column="9">/// &lt;/summary&gt;</comment>
        <decl_stmt><decl><type><specifier pos:line="90" pos:column="9">public</specifier> <name><name pos:line="90" pos:column="16">IEnumerable</name><argument_list pos:line="90" pos:column="27">&lt;<argument><name pos:line="90" pos:column="28">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="90" pos:column="38">FileUnits</name>
        <block pos:line="91" pos:column="9">{
            <function><name pos:line="92" pos:column="13">get</name>
            <block pos:line="93" pos:column="13">{
                <if pos:line="94" pos:column="17">if <condition pos:line="94" pos:column="20">(<expr><lit:literal type="number" pos:line="94" pos:column="21">0</lit:literal> <op:operator pos:line="94" pos:column="23">==</op:operator> <name><name pos:line="94" pos:column="26">this</name><op:operator pos:line="94" pos:column="30">.</op:operator><name pos:line="94" pos:column="31">_numNestedUnits</name></name></expr>)</condition><then pos:line="94" pos:column="47">
                <block pos:line="95" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="96" pos:column="21">var</name></type> <name pos:line="96" pos:column="25">shortList</name> <init pos:line="96" pos:column="35">= <expr><op:operator pos:line="96" pos:column="37">new</op:operator> <call><name><name pos:line="96" pos:column="41">List</name><argument_list pos:line="96" pos:column="45">&lt;<argument><name pos:line="96" pos:column="46">XElement</name></argument>&gt;</argument_list></name><argument_list pos:line="96" pos:column="55">(<argument><expr><lit:literal type="number" pos:line="96" pos:column="56">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="97" pos:column="21">shortList</name><op:operator pos:line="97" pos:column="30">.</op:operator><name pos:line="97" pos:column="31">Add</name></name><argument_list pos:line="97" pos:column="34">(<argument><expr><call><name><name pos:line="97" pos:column="35">SrcMLElement</name><op:operator pos:line="97" pos:column="47">.</op:operator><name pos:line="97" pos:column="48">Load</name></name><argument_list pos:line="97" pos:column="52">(<argument><expr><name><name pos:line="97" pos:column="53">this</name><op:operator pos:line="97" pos:column="57">.</op:operator><name pos:line="97" pos:column="58">FileName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return pos:line="98" pos:column="21">return <expr><name pos:line="98" pos:column="28">shortList</name></expr>;</return>
                }</block></then></if>
                <decl_stmt><decl><type><name><name pos:line="100" pos:column="17">IEnumerable</name><argument_list pos:line="100" pos:column="28">&lt;<argument><name pos:line="100" pos:column="29">XElement</name></argument>&gt;</argument_list></name></type> <name pos:line="100" pos:column="39">units</name> <init pos:line="100" pos:column="45">= <expr><linq><from pos:line="100" pos:column="47">from <expr><name pos:line="100" pos:column="52">unit</name></expr> <in pos:line="100" pos:column="57">in <expr><call><name><name pos:line="100" pos:column="60">XmlHelper</name><op:operator pos:line="100" pos:column="69">.</op:operator><name pos:line="100" pos:column="70">StreamElements</name></name><argument_list pos:line="100" pos:column="84">(<argument><expr><name><name pos:line="100" pos:column="85">this</name><op:operator pos:line="100" pos:column="89">.</op:operator><name pos:line="100" pos:column="90">FileName</name></name></expr></argument>, <argument><expr><name><name pos:line="100" pos:column="100">SRC</name><op:operator pos:line="100" pos:column="103">.</op:operator><name pos:line="100" pos:column="104">Unit</name></name></expr></argument>)</argument_list></call></expr></in></from>
                                              <where pos:line="101" pos:column="47">where <expr><call><name><name pos:line="101" pos:column="53">unit</name><op:operator pos:line="101" pos:column="57">.</op:operator><name pos:line="101" pos:column="58">Attribute</name></name><argument_list pos:line="101" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="101" pos:column="68">"filename"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="101" pos:column="80">!=</op:operator> <name pos:line="101" pos:column="83">null</name></expr></where>
                                              <select pos:line="102" pos:column="47">select <expr><name pos:line="102" pos:column="54">unit</name></expr></select></linq></expr></init></decl>;</decl_stmt>
                <return pos:line="103" pos:column="17">return <expr><name pos:line="103" pos:column="24">units</name></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="107" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="108" pos:column="9">/// Write attribute strings for each SrcML namespace to the given XmlWriter. This should be called immediately after XmlWriter.WriteStartElement.</comment>
        <comment type="line" pos:line="109" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="110" pos:column="9">/// &lt;param name="writer"&gt;Instance of XmlWriter to write to.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="111" pos:column="9">public</specifier> <specifier pos:line="111" pos:column="16">static</specifier> <name pos:line="111" pos:column="23">void</name></type> <name pos:line="111" pos:column="28">WriteXmlnsAttributes</name><parameter_list pos:line="111" pos:column="48">(<param><decl><type><name pos:line="111" pos:column="49">XmlWriter</name></type> <name pos:line="111" pos:column="59">writer</name></decl></param>)</parameter_list>
        <block pos:line="112" pos:column="9">{
            <if pos:line="113" pos:column="13">if <condition pos:line="113" pos:column="16">(<expr><name pos:line="113" pos:column="17">null</name> <op:operator pos:line="113" pos:column="22">==</op:operator> <name pos:line="113" pos:column="25">writer</name></expr>)</condition><then pos:line="113" pos:column="32">
                <throw pos:line="114" pos:column="17">throw <expr><op:operator pos:line="114" pos:column="23">new</op:operator> <call><name pos:line="114" pos:column="27">ArgumentNullException</name><argument_list pos:line="114" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="114" pos:column="49">"writer"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

            <expr_stmt><expr><call><name><name pos:line="116" pos:column="13">writer</name><op:operator pos:line="116" pos:column="19">.</op:operator><name pos:line="116" pos:column="20">WriteAttributeString</name></name><argument_list pos:line="116" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="116" pos:column="41">"xmlns"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="116" pos:column="50">CPP</name><op:operator pos:line="116" pos:column="53">.</op:operator><name pos:line="116" pos:column="54">Prefix</name></name></expr></argument>, <argument><expr><name pos:line="116" pos:column="62">null</name></expr></argument>, <argument><expr><name><name pos:line="116" pos:column="68">CPP</name><op:operator pos:line="116" pos:column="71">.</op:operator><name pos:line="116" pos:column="72">NS</name><op:operator pos:line="116" pos:column="74">.</op:operator><name pos:line="116" pos:column="75">NamespaceName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="117" pos:column="13">writer</name><op:operator pos:line="117" pos:column="19">.</op:operator><name pos:line="117" pos:column="20">WriteAttributeString</name></name><argument_list pos:line="117" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="117" pos:column="41">"xmlns"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="117" pos:column="50">LIT</name><op:operator pos:line="117" pos:column="53">.</op:operator><name pos:line="117" pos:column="54">Prefix</name></name></expr></argument>, <argument><expr><name pos:line="117" pos:column="62">null</name></expr></argument>, <argument><expr><name><name pos:line="117" pos:column="68">LIT</name><op:operator pos:line="117" pos:column="71">.</op:operator><name pos:line="117" pos:column="72">NS</name><op:operator pos:line="117" pos:column="74">.</op:operator><name pos:line="117" pos:column="75">NamespaceName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="118" pos:column="13">writer</name><op:operator pos:line="118" pos:column="19">.</op:operator><name pos:line="118" pos:column="20">WriteAttributeString</name></name><argument_list pos:line="118" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="118" pos:column="41">"xmlns"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="118" pos:column="50">OP</name><op:operator pos:line="118" pos:column="52">.</op:operator><name pos:line="118" pos:column="53">Prefix</name></name></expr></argument>, <argument><expr><name pos:line="118" pos:column="61">null</name></expr></argument>, <argument><expr><name><name pos:line="118" pos:column="67">OP</name><op:operator pos:line="118" pos:column="69">.</op:operator><name pos:line="118" pos:column="70">NS</name><op:operator pos:line="118" pos:column="72">.</op:operator><name pos:line="118" pos:column="73">NamespaceName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="119" pos:column="13">writer</name><op:operator pos:line="119" pos:column="19">.</op:operator><name pos:line="119" pos:column="20">WriteAttributeString</name></name><argument_list pos:line="119" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="119" pos:column="41">"xmlns"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="119" pos:column="50">POS</name><op:operator pos:line="119" pos:column="53">.</op:operator><name pos:line="119" pos:column="54">Prefix</name></name></expr></argument>, <argument><expr><name pos:line="119" pos:column="62">null</name></expr></argument>, <argument><expr><name><name pos:line="119" pos:column="68">POS</name><op:operator pos:line="119" pos:column="71">.</op:operator><name pos:line="119" pos:column="72">NS</name><op:operator pos:line="119" pos:column="74">.</op:operator><name pos:line="119" pos:column="75">NamespaceName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="120" pos:column="13">writer</name><op:operator pos:line="120" pos:column="19">.</op:operator><name pos:line="120" pos:column="20">WriteAttributeString</name></name><argument_list pos:line="120" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="120" pos:column="41">"xmlns"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="120" pos:column="50">TYPE</name><op:operator pos:line="120" pos:column="54">.</op:operator><name pos:line="120" pos:column="55">Prefix</name></name></expr></argument>, <argument><expr><name pos:line="120" pos:column="63">null</name></expr></argument>, <argument><expr><name><name pos:line="120" pos:column="69">TYPE</name><op:operator pos:line="120" pos:column="73">.</op:operator><name pos:line="120" pos:column="74">NS</name><op:operator pos:line="120" pos:column="76">.</op:operator><name pos:line="120" pos:column="77">NamespaceName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="123" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="124" pos:column="9">/// Gets the root attributes.</comment>
        <comment type="line" pos:line="125" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="126" pos:column="9">/// &lt;param name="xmlFilePath"&gt;The XML file path.&lt;/param&gt;</comment>
        <comment type="line" pos:line="127" pos:column="9">/// &lt;returns&gt;the attributes attached to the root element.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="128" pos:column="9">private</specifier> <specifier pos:line="128" pos:column="17">static</specifier> <name><name pos:line="128" pos:column="24">IEnumerable</name><argument_list pos:line="128" pos:column="35">&lt;<argument><name pos:line="128" pos:column="36">XAttribute</name></argument>&gt;</argument_list></name></type> <name pos:line="128" pos:column="48">getRootAttributes</name><parameter_list pos:line="128" pos:column="65">(<param><decl><type><name pos:line="128" pos:column="66">string</name></type> <name pos:line="128" pos:column="73">xmlFilePath</name></decl></param>)</parameter_list>
        <block pos:line="129" pos:column="9">{
            <using pos:line="130" pos:column="13">using (<decl><type><name pos:line="130" pos:column="20">var</name></type> <name pos:line="130" pos:column="24">reader</name> <init pos:line="130" pos:column="31">= <expr><call><name><name pos:line="130" pos:column="33">XmlReader</name><op:operator pos:line="130" pos:column="42">.</op:operator><name pos:line="130" pos:column="43">Create</name></name><argument_list pos:line="130" pos:column="49">(<argument><expr><name pos:line="130" pos:column="50">xmlFilePath</name></expr></argument>)</argument_list></call></expr></init></decl>)
            <block pos:line="131" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="132" pos:column="17">reader</name><op:operator pos:line="132" pos:column="23">.</op:operator><name pos:line="132" pos:column="24">MoveToContent</name></name><argument_list pos:line="132" pos:column="37">()</argument_list></call></expr>;</expr_stmt>
                <if pos:line="133" pos:column="17">if <condition pos:line="133" pos:column="20">(<expr><call><name><name pos:line="133" pos:column="21">reader</name><op:operator pos:line="133" pos:column="27">.</op:operator><name pos:line="133" pos:column="28">MoveToFirstAttribute</name></name><argument_list pos:line="133" pos:column="48">()</argument_list></call></expr>)</condition><then pos:line="133" pos:column="51">
                <block pos:line="134" pos:column="17">{
                    <do pos:line="135" pos:column="21">do
                    <block pos:line="136" pos:column="21">{
                        <if pos:line="137" pos:column="25">if <condition pos:line="137" pos:column="28">(<expr><lit:literal type="string" pos:line="137" pos:column="29">"http://www.w3.org/2000/xmlns/"</lit:literal> <op:operator pos:line="137" pos:column="61">!=</op:operator> <name><name pos:line="137" pos:column="64">reader</name><op:operator pos:line="137" pos:column="70">.</op:operator><name pos:line="137" pos:column="71">NamespaceURI</name></name></expr>)</condition><then pos:line="137" pos:column="84">
                        <block pos:line="138" pos:column="25">{
                            <decl_stmt><decl><type><name pos:line="139" pos:column="29">var</name></type> <name pos:line="139" pos:column="33">attribute</name> <init pos:line="139" pos:column="43">= <expr><op:operator pos:line="139" pos:column="45">new</op:operator> <call><name pos:line="139" pos:column="49">XAttribute</name><argument_list pos:line="139" pos:column="59">(<argument><expr><call><name><name pos:line="139" pos:column="60">XName</name><op:operator pos:line="139" pos:column="65">.</op:operator><name pos:line="139" pos:column="66">Get</name></name><argument_list pos:line="139" pos:column="69">(<argument><expr><name><name pos:line="139" pos:column="70">reader</name><op:operator pos:line="139" pos:column="76">.</op:operator><name pos:line="139" pos:column="77">LocalName</name></name></expr></argument>, <argument><expr><name><name pos:line="139" pos:column="88">reader</name><op:operator pos:line="139" pos:column="94">.</op:operator><name pos:line="139" pos:column="95">NamespaceURI</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="139" pos:column="110">reader</name><op:operator pos:line="139" pos:column="116">.</op:operator><name pos:line="139" pos:column="117">Value</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <return><specifier pos:line="140" pos:column="29">yield</specifier> return <expr><name pos:line="140" pos:column="42">attribute</name></expr>;</return>
                        }</block></then></if>
                    }</block> while <condition pos:line="142" pos:column="29">(<expr><call><name><name pos:line="142" pos:column="30">reader</name><op:operator pos:line="142" pos:column="36">.</op:operator><name pos:line="142" pos:column="37">MoveToNextAttribute</name></name><argument_list pos:line="142" pos:column="56">()</argument_list></call></expr>)</condition>;</do>
                }</block></then></if>
            }</block></using>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
