<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\VisualStudio\SDML.SrcMLVSAddin.SyntaticCategory\XmlExtensions.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2011 Brian Bartman
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Brian Bartman (SDML) - initial API, implementation, &amp; documentation
 *    Vinay Augustine (ABB Group) - integration with ABB.SrcML Framework
 *****************************************************************************/</comment>

<using pos:line="13" pos:column="1">using <name pos:line="13" pos:column="7">System</name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Collections</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">Generic</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Linq</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Text</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Text</name><op:operator pos:line="17" pos:column="18">.</op:operator><name pos:line="17" pos:column="19">RegularExpressions</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Xml</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">System</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">Xml</name><op:operator pos:line="19" pos:column="17">.</op:operator><name pos:line="19" pos:column="18">Linq</name></name>;</using>

<namespace pos:line="21" pos:column="1">namespace <name><name pos:line="21" pos:column="11">SDML</name><op:operator pos:line="21" pos:column="15">.</op:operator><name pos:line="21" pos:column="16">SrcMLVSAddin</name><op:operator pos:line="21" pos:column="28">.</op:operator><name pos:line="21" pos:column="29">SrcML</name><op:operator pos:line="21" pos:column="34">.</op:operator><name pos:line="21" pos:column="35">XMLExtensions</name></name>
<block pos:line="22" pos:column="1">{

    <class><specifier pos:line="24" pos:column="5">public</specifier> <specifier pos:line="24" pos:column="12">static</specifier> class <name pos:line="24" pos:column="25">XmlExtensions</name>
    <block pos:line="25" pos:column="5">{

        <constructor><specifier pos:line="27" pos:column="9">static</specifier> <name pos:line="27" pos:column="16">XmlExtensions</name><parameter_list pos:line="27" pos:column="29">()</parameter_list>
        <block pos:line="28" pos:column="9">{

        }</block></constructor>

        <comment type="line" pos:line="32" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="33" pos:column="9">/// Returns the xpath of a node.</comment>
        <comment type="line" pos:line="34" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="35" pos:column="9">/// &lt;param name="currentXObj"&gt;The xobject the function this is being called on.&lt;/param&gt;</comment>
        <comment type="line" pos:line="36" pos:column="9">/// &lt;returns&gt;String representation of of the xpath to this node.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="37" pos:column="9">public</specifier> <specifier pos:line="37" pos:column="16">static</specifier> <name pos:line="37" pos:column="23">String</name></type> <name pos:line="37" pos:column="30">GetXPath</name><parameter_list pos:line="37" pos:column="38">(<param><decl><type><name pos:line="37" pos:column="39">this</name> <name pos:line="37" pos:column="44">XObject</name></type> <name pos:line="37" pos:column="52">currentXObj</name></decl></param>)</parameter_list>
        <block pos:line="38" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="39" pos:column="13">StringBuilder</name></type> <name pos:line="39" pos:column="27">xPathBuilder</name> <init pos:line="39" pos:column="40">= <expr><op:operator pos:line="39" pos:column="42">new</op:operator> <call><name pos:line="39" pos:column="46">StringBuilder</name><argument_list pos:line="39" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while pos:line="40" pos:column="13">while <condition pos:line="40" pos:column="19">(<expr><name pos:line="40" pos:column="20">currentXObj</name> <op:operator pos:line="40" pos:column="32">!=</op:operator> <name pos:line="40" pos:column="35">null</name></expr>)</condition>
            <block pos:line="41" pos:column="13">{
                <switch pos:line="42" pos:column="17">switch <condition pos:line="42" pos:column="24">(<expr><name><name pos:line="42" pos:column="25">currentXObj</name><op:operator pos:line="42" pos:column="36">.</op:operator><name pos:line="42" pos:column="37">NodeType</name></name></expr>)</condition>
                <block pos:line="43" pos:column="17">{
                    <comment type="line" pos:line="44" pos:column="21">// Handling XObjects.</comment>
                    <case pos:line="45" pos:column="21">case <expr><name><name pos:line="45" pos:column="26">XmlNodeType</name><op:operator pos:line="45" pos:column="37">.</op:operator><name pos:line="45" pos:column="38">Attribute</name></name></expr>:
                        <expr_stmt><expr><call><name><name pos:line="46" pos:column="25">xPathBuilder</name><op:operator pos:line="46" pos:column="37">.</op:operator><name pos:line="46" pos:column="38">Insert</name></name><argument_list pos:line="46" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="46" pos:column="45">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="46" pos:column="48">"/@"</lit:literal> <op:operator pos:line="46" pos:column="53">+</op:operator> <op:operator pos:line="46" pos:column="55">(</op:operator><op:operator pos:line="46" pos:column="56">(</op:operator><name pos:line="46" pos:column="57">XAttribute</name><op:operator pos:line="46" pos:column="67">)</op:operator><name pos:line="46" pos:column="68">currentXObj</name><op:operator pos:line="46" pos:column="79">)</op:operator><op:operator pos:line="46" pos:column="80">.</op:operator><name pos:line="46" pos:column="81">Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="47" pos:column="25">currentXObj</name> <op:operator pos:line="47" pos:column="37">=</op:operator> <name><name pos:line="47" pos:column="39">currentXObj</name><op:operator pos:line="47" pos:column="50">.</op:operator><name pos:line="47" pos:column="51">Parent</name></name></expr>;</expr_stmt>
                        <break pos:line="48" pos:column="25">break;</break>

                    <comment type="line" pos:line="50" pos:column="21">// Handling XElements</comment>
                    </case><case pos:line="51" pos:column="21">case <expr><name><name pos:line="51" pos:column="26">XmlNodeType</name><op:operator pos:line="51" pos:column="37">.</op:operator><name pos:line="51" pos:column="38">Element</name></name></expr>:
                        <expr_stmt><expr><call><name><name pos:line="52" pos:column="25">xPathBuilder</name><op:operator pos:line="52" pos:column="37">.</op:operator><name pos:line="52" pos:column="38">Insert</name></name><argument_list pos:line="52" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="52" pos:column="45">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="52" pos:column="48">"/"</lit:literal> <op:operator pos:line="52" pos:column="52">+</op:operator> <op:operator pos:line="52" pos:column="54">(</op:operator><op:operator pos:line="52" pos:column="55">(</op:operator><name pos:line="52" pos:column="56">XElement</name><op:operator pos:line="52" pos:column="64">)</op:operator><name pos:line="52" pos:column="65">currentXObj</name><op:operator pos:line="52" pos:column="76">)</op:operator><op:operator pos:line="52" pos:column="77">.</op:operator><name pos:line="52" pos:column="78">Name</name> <op:operator pos:line="52" pos:column="83">+</op:operator> <lit:literal type="string" pos:line="52" pos:column="85">"["</lit:literal> <op:operator pos:line="52" pos:column="89">+</op:operator> <op:operator pos:line="52" pos:column="91">(</op:operator><op:operator pos:line="52" pos:column="92">(</op:operator><name pos:line="52" pos:column="93">XElement</name><op:operator pos:line="52" pos:column="101">)</op:operator><name pos:line="52" pos:column="102">currentXObj</name><op:operator pos:line="52" pos:column="113">)</op:operator><op:operator pos:line="52" pos:column="114">.</op:operator><call><name pos:line="52" pos:column="115">IndexAsChild</name><argument_list pos:line="52" pos:column="127">()</argument_list></call> <op:operator pos:line="52" pos:column="130">+</op:operator> <lit:literal type="string" pos:line="52" pos:column="132">"]"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="53" pos:column="25">currentXObj</name> <op:operator pos:line="53" pos:column="37">=</op:operator> <name><name pos:line="53" pos:column="39">currentXObj</name><op:operator pos:line="53" pos:column="50">.</op:operator><name pos:line="53" pos:column="51">Parent</name></name></expr>;</expr_stmt>
                        <break pos:line="54" pos:column="25">break;</break>
                    </case><default pos:line="55" pos:column="21">default:
                        <throw pos:line="56" pos:column="25">throw <expr><op:operator pos:line="56" pos:column="31">new</op:operator> <call><name pos:line="56" pos:column="35">ArgumentException</name><argument_list pos:line="56" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="56" pos:column="53">"Only elements and attributes are supported"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
                </default>}</block></switch>
            }</block></while>
            <return pos:line="59" pos:column="13">return <expr><call><name><name pos:line="59" pos:column="20">xPathBuilder</name><op:operator pos:line="59" pos:column="32">.</op:operator><name pos:line="59" pos:column="33">ToString</name></name><argument_list pos:line="59" pos:column="41">()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="62" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="63" pos:column="9">/// Gets the index of an XElement as the child of it's parent.</comment>
        <comment type="line" pos:line="64" pos:column="9">/// If the element doesn't have a parent then 1 is returned.</comment>
        <comment type="line" pos:line="65" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="66" pos:column="9">/// &lt;param name="node"&gt;The XElement to get the index of.&lt;/param&gt;</comment>
        <comment type="line" pos:line="67" pos:column="9">/// &lt;returns&gt;The index of the the XElement inside of it's parent's children.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="68" pos:column="9">public</specifier> <specifier pos:line="68" pos:column="16">static</specifier> <name pos:line="68" pos:column="23">int</name></type> <name pos:line="68" pos:column="27">IndexAsChild</name><parameter_list pos:line="68" pos:column="39">(<param><decl><type><name pos:line="68" pos:column="40">this</name> <name pos:line="68" pos:column="45">XElement</name></type> <name pos:line="68" pos:column="54">node</name></decl></param>)</parameter_list>
        <block pos:line="69" pos:column="9">{
            <comment type="line" pos:line="70" pos:column="13">// if the node's parent is null then</comment>
            <comment type="line" pos:line="71" pos:column="13">// this node is the root node.</comment>
            <if pos:line="72" pos:column="13">if <condition pos:line="72" pos:column="16">(<expr><name><name pos:line="72" pos:column="17">node</name><op:operator pos:line="72" pos:column="21">.</op:operator><name pos:line="72" pos:column="22">Parent</name></name> <op:operator pos:line="72" pos:column="29">==</op:operator> <name pos:line="72" pos:column="32">null</name></expr>)</condition><then pos:line="72" pos:column="37">
            <block pos:line="73" pos:column="13">{
                <return pos:line="74" pos:column="17">return <expr><lit:literal type="number" pos:line="74" pos:column="24">1</lit:literal></expr>;</return>
            }</block></then></if>
            <return pos:line="76" pos:column="13">return <expr><call><name><name pos:line="76" pos:column="20">node</name><op:operator pos:line="76" pos:column="24">.</op:operator><name pos:line="76" pos:column="25">ElementsBeforeSelf</name></name><argument_list pos:line="76" pos:column="43">()</argument_list></call><op:operator pos:line="76" pos:column="45">.</op:operator><call><name pos:line="76" pos:column="46">Count</name><argument_list pos:line="76" pos:column="51">()</argument_list></call> <op:operator pos:line="76" pos:column="54">+</op:operator> <lit:literal type="number" pos:line="76" pos:column="56">1</lit:literal></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="79" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="80" pos:column="9">/// Searches for a XText node with the supplied value and returns</comment>
        <comment type="line" pos:line="81" pos:column="9">/// true if it finds the located value and false other wise.</comment>
        <comment type="line" pos:line="82" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="83" pos:column="9">/// &lt;param name="element"&gt;Extension element.&lt;/param&gt;</comment>
        <comment type="line" pos:line="84" pos:column="9">/// &lt;param name="strValue"&gt;String to search for.&lt;/param&gt;</comment>
        <comment type="line" pos:line="85" pos:column="9">/// &lt;returns&gt;True if the located XText node with a given value.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="86" pos:column="9">public</specifier> <specifier pos:line="86" pos:column="16">static</specifier> <name pos:line="86" pos:column="23">Boolean</name></type> <name pos:line="86" pos:column="31">ContainsXTextNode</name><parameter_list pos:line="86" pos:column="48">(<param><decl><type><name pos:line="86" pos:column="49">this</name> <name pos:line="86" pos:column="54">XElement</name></type> <name pos:line="86" pos:column="63">element</name></decl></param>, <param><decl><type><name pos:line="86" pos:column="72">String</name></type> <name pos:line="86" pos:column="79">strValue</name></decl></param>)</parameter_list>
        <block pos:line="87" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="88" pos:column="13">Func</name><argument_list pos:line="88" pos:column="17">&lt;<argument><name pos:line="88" pos:column="18">XNode</name></argument>, <argument><name pos:line="88" pos:column="25">bool</name></argument>&gt;</argument_list></name></type> <name pos:line="88" pos:column="31">myFunc</name> <init pos:line="88" pos:column="38">= <expr><lambda><parameter_list pos:line="88" pos:column="40">(<param><decl><name pos:line="88" pos:column="41">x</name></decl></param>)</parameter_list> <op:operator pos:line="88" pos:column="44">=&gt;</op:operator>
            <block pos:line="89" pos:column="13">{
                <if pos:line="90" pos:column="17">if <condition pos:line="90" pos:column="20">(<expr><op:operator pos:line="90" pos:column="21">!</op:operator><op:operator pos:line="90" pos:column="22">(</op:operator><name pos:line="90" pos:column="23">x</name> <op:operator pos:line="90" pos:column="25">is</op:operator> <name pos:line="90" pos:column="28">XText</name><op:operator pos:line="90" pos:column="33">)</op:operator></expr>)</condition><then pos:line="90" pos:column="35">
                <block pos:line="91" pos:column="17">{
                    <return pos:line="92" pos:column="21">return <expr><lit:literal type="boolean" pos:line="92" pos:column="28">false</lit:literal></expr>;</return>
                }</block></then></if>
                <if pos:line="94" pos:column="17">if <condition pos:line="94" pos:column="20">(<expr><op:operator pos:line="94" pos:column="21">(</op:operator><op:operator pos:line="94" pos:column="22">(</op:operator><name pos:line="94" pos:column="23">XText</name><op:operator pos:line="94" pos:column="28">)</op:operator><name pos:line="94" pos:column="29">x</name><op:operator pos:line="94" pos:column="30">)</op:operator><op:operator pos:line="94" pos:column="31">.</op:operator><name pos:line="94" pos:column="32">Value</name> <op:operator pos:line="94" pos:column="38">==</op:operator> <name pos:line="94" pos:column="41">strValue</name></expr>)</condition><then pos:line="94" pos:column="50">
                    <return pos:line="95" pos:column="21">return <expr><lit:literal type="boolean" pos:line="95" pos:column="28">true</lit:literal></expr>;</return></then></if>
                <return pos:line="96" pos:column="17">return <expr><lit:literal type="boolean" pos:line="96" pos:column="24">false</lit:literal></expr>;</return>
            }</block></lambda></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="98" pos:column="13">var</name></type> <name pos:line="98" pos:column="17">XTextNodes</name> <init pos:line="98" pos:column="28">= <expr><linq><from pos:line="98" pos:column="30">from <expr><name pos:line="98" pos:column="35">node</name></expr> <in pos:line="98" pos:column="40">in <expr><call><name><name pos:line="98" pos:column="43">element</name><op:operator pos:line="98" pos:column="50">.</op:operator><name pos:line="98" pos:column="51">Nodes</name></name><argument_list pos:line="98" pos:column="56">()</argument_list></call></expr></in></from>
                             <where pos:line="99" pos:column="30">where <expr><call><name pos:line="99" pos:column="36">myFunc</name><argument_list pos:line="99" pos:column="42">(<argument><expr><name pos:line="99" pos:column="43">node</name></expr></argument>)</argument_list></call></expr></where>
                             <select pos:line="100" pos:column="30">select <expr><name pos:line="100" pos:column="37">node</name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <return pos:line="101" pos:column="13">return <expr><call><name><name pos:line="101" pos:column="20">XTextNodes</name><op:operator pos:line="101" pos:column="30">.</op:operator><name pos:line="101" pos:column="31">Count</name></name><argument_list pos:line="101" pos:column="36">()</argument_list></call> <op:operator pos:line="101" pos:column="39">&gt;</op:operator> <lit:literal type="number" pos:line="101" pos:column="41">0</lit:literal></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="104" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="105" pos:column="9">/// Searches for a XText node with the supplied regular expression</comment>
        <comment type="line" pos:line="106" pos:column="9">/// and returns true of it located that node.</comment>
        <comment type="line" pos:line="107" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="108" pos:column="9">/// &lt;param name="element"&gt;Extension element.&lt;/param&gt;</comment>
        <comment type="line" pos:line="109" pos:column="9">/// &lt;param name="strValue"&gt;String to search for.&lt;/param&gt;</comment>
        <comment type="line" pos:line="110" pos:column="9">/// &lt;returns&gt;True if the located XText node with a given value.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="111" pos:column="9">public</specifier> <specifier pos:line="111" pos:column="16">static</specifier> <name pos:line="111" pos:column="23">Boolean</name></type> <name pos:line="111" pos:column="31">ContainsXTextWith</name><parameter_list pos:line="111" pos:column="48">(<param><decl><type><name pos:line="111" pos:column="49">this</name> <name pos:line="111" pos:column="54">XElement</name></type> <name pos:line="111" pos:column="63">element</name></decl></param>, <param><decl><type><name pos:line="111" pos:column="72">Regex</name></type> <name pos:line="111" pos:column="78">regex</name></decl></param>)</parameter_list>
        <block pos:line="112" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="113" pos:column="13">Func</name><argument_list pos:line="113" pos:column="17">&lt;<argument><name pos:line="113" pos:column="18">XNode</name></argument>, <argument><name pos:line="113" pos:column="25">bool</name></argument>&gt;</argument_list></name></type> <name pos:line="113" pos:column="31">myFunc</name> <init pos:line="113" pos:column="38">= <expr><lambda><parameter_list pos:line="113" pos:column="40">(<param><decl><name pos:line="113" pos:column="41">x</name></decl></param>)</parameter_list> <op:operator pos:line="113" pos:column="44">=&gt;</op:operator>
            <block pos:line="114" pos:column="13">{
                <if pos:line="115" pos:column="17">if <condition pos:line="115" pos:column="20">(<expr><op:operator pos:line="115" pos:column="21">!</op:operator><op:operator pos:line="115" pos:column="22">(</op:operator><name pos:line="115" pos:column="23">x</name> <op:operator pos:line="115" pos:column="25">is</op:operator> <name pos:line="115" pos:column="28">XText</name><op:operator pos:line="115" pos:column="33">)</op:operator></expr>)</condition><then pos:line="115" pos:column="35">
                <block pos:line="116" pos:column="17">{
                    <return pos:line="117" pos:column="21">return <expr><lit:literal type="boolean" pos:line="117" pos:column="28">false</lit:literal></expr>;</return>
                }</block></then></if>
                <return pos:line="119" pos:column="17">return <expr><call><name><name pos:line="119" pos:column="24">regex</name><op:operator pos:line="119" pos:column="29">.</op:operator><name pos:line="119" pos:column="30">IsMatch</name></name><argument_list pos:line="119" pos:column="37">(<argument><expr><op:operator pos:line="119" pos:column="38">(</op:operator><op:operator pos:line="119" pos:column="39">(</op:operator><name pos:line="119" pos:column="40">XText</name><op:operator pos:line="119" pos:column="45">)</op:operator><name pos:line="119" pos:column="46">x</name><op:operator pos:line="119" pos:column="47">)</op:operator><op:operator pos:line="119" pos:column="48">.</op:operator><name pos:line="119" pos:column="49">Value</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></lambda></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="121" pos:column="13">var</name></type> <name pos:line="121" pos:column="17">XTextNodes</name> <init pos:line="121" pos:column="28">= <expr><linq><from pos:line="121" pos:column="30">from <expr><name pos:line="121" pos:column="35">node</name></expr> <in pos:line="121" pos:column="40">in <expr><call><name><name pos:line="121" pos:column="43">element</name><op:operator pos:line="121" pos:column="50">.</op:operator><name pos:line="121" pos:column="51">Nodes</name></name><argument_list pos:line="121" pos:column="56">()</argument_list></call></expr></in></from>
                             <where pos:line="122" pos:column="30">where <expr><call><name pos:line="122" pos:column="36">myFunc</name><argument_list pos:line="122" pos:column="42">(<argument><expr><name pos:line="122" pos:column="43">node</name></expr></argument>)</argument_list></call></expr></where>
                             <select pos:line="123" pos:column="30">select <expr><name pos:line="123" pos:column="37">node</name></expr></select></linq></expr></init></decl>;</decl_stmt>
            <return pos:line="124" pos:column="13">return <expr><call><name><name pos:line="124" pos:column="20">XTextNodes</name><op:operator pos:line="124" pos:column="30">.</op:operator><name pos:line="124" pos:column="31">Count</name></name><argument_list pos:line="124" pos:column="36">()</argument_list></call> <op:operator pos:line="124" pos:column="39">&gt;</op:operator> <lit:literal type="number" pos:line="124" pos:column="41">0</lit:literal></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="127" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="128" pos:column="9">/// Checks to see if an element contains a non-empty XText node.</comment>
        <comment type="line" pos:line="129" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="130" pos:column="9">/// &lt;param name="element"&gt;The element this function is being called on.&lt;/param&gt;</comment>
        <comment type="line" pos:line="131" pos:column="9">/// &lt;returns&gt;True if it locates an XText node with a value and other wise false.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="132" pos:column="9">public</specifier> <specifier pos:line="132" pos:column="16">static</specifier> <name pos:line="132" pos:column="23">Boolean</name></type> <name pos:line="132" pos:column="31">ContainsNonEmptyXText</name><parameter_list pos:line="132" pos:column="52">(<param><decl><type><name pos:line="132" pos:column="53">this</name> <name pos:line="132" pos:column="58">XElement</name></type> <name pos:line="132" pos:column="67">element</name></decl></param>)</parameter_list>
        <block pos:line="133" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="134" pos:column="13">Regex</name></type> <name pos:line="134" pos:column="19">tempRegex</name> <init pos:line="134" pos:column="29">= <expr><op:operator pos:line="134" pos:column="31">new</op:operator> <call><name pos:line="134" pos:column="35">Regex</name><argument_list pos:line="134" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="134" pos:column="41">@"[^\s]*"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="135" pos:column="13">Func</name><argument_list pos:line="135" pos:column="17">&lt;<argument><name pos:line="135" pos:column="18">XNode</name></argument>, <argument><name pos:line="135" pos:column="25">bool</name></argument>&gt;</argument_list></name></type> <name pos:line="135" pos:column="31">myFunc</name> <init pos:line="135" pos:column="38">= <expr><lambda><parameter_list pos:line="135" pos:column="40">(<param><decl><name pos:line="135" pos:column="41">x</name></decl></param>)</parameter_list> <op:operator pos:line="135" pos:column="44">=&gt;</op:operator>
            <block pos:line="136" pos:column="13">{
                <if pos:line="137" pos:column="17">if <condition pos:line="137" pos:column="20">(<expr><op:operator pos:line="137" pos:column="21">!</op:operator><op:operator pos:line="137" pos:column="22">(</op:operator><name pos:line="137" pos:column="23">x</name> <op:operator pos:line="137" pos:column="25">is</op:operator> <name pos:line="137" pos:column="28">XText</name><op:operator pos:line="137" pos:column="33">)</op:operator></expr>)</condition><then pos:line="137" pos:column="35">
                <block pos:line="138" pos:column="17">{
                    <return pos:line="139" pos:column="21">return <expr><lit:literal type="boolean" pos:line="139" pos:column="28">false</lit:literal></expr>;</return>
                }</block></then></if>
                <return pos:line="141" pos:column="17">return <expr><call><name><name pos:line="141" pos:column="24">tempRegex</name><op:operator pos:line="141" pos:column="33">.</op:operator><name pos:line="141" pos:column="34">IsMatch</name></name><argument_list pos:line="141" pos:column="41">(<argument><expr><op:operator pos:line="141" pos:column="42">(</op:operator><op:operator pos:line="141" pos:column="43">(</op:operator><name pos:line="141" pos:column="44">XText</name><op:operator pos:line="141" pos:column="49">)</op:operator><name pos:line="141" pos:column="50">x</name><op:operator pos:line="141" pos:column="51">)</op:operator><op:operator pos:line="141" pos:column="52">.</op:operator><name pos:line="141" pos:column="53">Value</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></lambda></expr></init></decl>;</decl_stmt>

            <return pos:line="144" pos:column="13">return <expr><call><name><name pos:line="144" pos:column="20">element</name><op:operator pos:line="144" pos:column="27">.</op:operator><name pos:line="144" pos:column="28">Nodes</name></name><argument_list pos:line="144" pos:column="33">()</argument_list></call><op:operator pos:line="144" pos:column="35">.</op:operator><call><name pos:line="144" pos:column="36">First</name><argument_list pos:line="144" pos:column="41">(<argument><expr><name pos:line="144" pos:column="42">myFunc</name></expr></argument>)</argument_list></call> <op:operator pos:line="144" pos:column="50">!=</op:operator> <name pos:line="144" pos:column="53">null</name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="147" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="148" pos:column="9">/// Returns the name which can the qualified name of name of the element.</comment>
        <comment type="line" pos:line="149" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="150" pos:column="9">/// &lt;param name="element"&gt;XElement to get xpath name of.&lt;/param&gt;</comment>
        <comment type="line" pos:line="151" pos:column="9">/// &lt;returns&gt;String representation of the XPath name of the element.&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="152" pos:column="9">public</specifier> <specifier pos:line="152" pos:column="16">static</specifier> <name pos:line="152" pos:column="23">String</name></type> <name pos:line="152" pos:column="30">GetXPathName</name><parameter_list pos:line="152" pos:column="42">(<param><decl><type><name pos:line="152" pos:column="43">this</name> <name pos:line="152" pos:column="48">XElement</name></type> <name pos:line="152" pos:column="57">element</name></decl></param>)</parameter_list>
        <block pos:line="153" pos:column="9">{
            <if pos:line="154" pos:column="13">if <condition pos:line="154" pos:column="16">(<expr><name><name pos:line="154" pos:column="17">element</name><op:operator pos:line="154" pos:column="24">.</op:operator><name pos:line="154" pos:column="25">Name</name><op:operator pos:line="154" pos:column="29">.</op:operator><name pos:line="154" pos:column="30">Namespace</name></name> <op:operator pos:line="154" pos:column="40">!=</op:operator> <lit:literal type="string" pos:line="154" pos:column="43">""</lit:literal></expr>)</condition><then pos:line="154" pos:column="46">
            <block pos:line="155" pos:column="13">{
                <comment type="line" pos:line="156" pos:column="17">//XmlNamespaceManager namespaceManager = new XmlNamespaceManager(element.Document.CreateReader().NameTable);</comment>
                <comment type="line" pos:line="157" pos:column="17">//namespaceManager.AddNamespace("src", "http://www.sdml.info/srcML/src");</comment>
                <comment type="line" pos:line="158" pos:column="17">//namespaceManager.AddNamespace("cpp", "http://www.sdml.info/srcML/cpp");</comment>
                <comment type="line" pos:line="159" pos:column="17">//namespaceManager.AddNamespace("lit", "http://www.sdml.info/srcML/literal");</comment>
                <comment type="line" pos:line="160" pos:column="17">//namespaceManager.AddNamespace("op", "http://www.sdml.info/srcML/operator");</comment>
                <comment type="line" pos:line="161" pos:column="17">//namespaceManager.AddNamespace("mod", "http://www.sdml.info/srcML/modifier");</comment>
                <decl_stmt><decl><type><name pos:line="162" pos:column="17">XmlNamespaceManager</name></type> <name pos:line="162" pos:column="37">namespaceManager</name> <init pos:line="162" pos:column="54">= <expr><name><name pos:line="162" pos:column="56">ABB</name><op:operator pos:line="162" pos:column="59">.</op:operator><name pos:line="162" pos:column="60">SrcML</name><op:operator pos:line="162" pos:column="65">.</op:operator><name pos:line="162" pos:column="66">SrcML</name><op:operator pos:line="162" pos:column="71">.</op:operator><name pos:line="162" pos:column="72">NamespaceManager</name></name></expr></init></decl>;</decl_stmt>
                <return pos:line="163" pos:column="17">return <expr><call><name><name pos:line="163" pos:column="24">namespaceManager</name><op:operator pos:line="163" pos:column="40">.</op:operator><name pos:line="163" pos:column="41">LookupPrefix</name></name><argument_list pos:line="163" pos:column="53">(<argument><expr><name><name pos:line="163" pos:column="54">element</name><op:operator pos:line="163" pos:column="61">.</op:operator><name pos:line="163" pos:column="62">Name</name><op:operator pos:line="163" pos:column="66">.</op:operator><name pos:line="163" pos:column="67">NamespaceName</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="163" pos:column="82">+</op:operator> <lit:literal type="string" pos:line="163" pos:column="84">":"</lit:literal> <op:operator pos:line="163" pos:column="88">+</op:operator> <call><name><name pos:line="163" pos:column="90">element</name><op:operator pos:line="163" pos:column="97">.</op:operator><name pos:line="163" pos:column="98">Name</name><op:operator pos:line="163" pos:column="102">.</op:operator><name pos:line="163" pos:column="103">LocalName</name><op:operator pos:line="163" pos:column="112">.</op:operator><name pos:line="163" pos:column="113">ToString</name></name><argument_list pos:line="163" pos:column="121">()</argument_list></call></expr>;</return>
            }</block></then></if>
            <return pos:line="165" pos:column="13">return <expr><name><name pos:line="165" pos:column="20">element</name><op:operator pos:line="165" pos:column="27">.</op:operator><name pos:line="165" pos:column="28">Name</name><op:operator pos:line="165" pos:column="32">.</op:operator><name pos:line="165" pos:column="33">LocalName</name></name></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="168" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="169" pos:column="9">/// Visitor delegate used when visiting each element</comment>
        <comment type="line" pos:line="170" pos:column="9">/// in a depth first ordering.</comment>
        <comment type="line" pos:line="171" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="172" pos:column="9">/// &lt;param name="element"&gt;&lt;/param&gt;</comment>
        <function_decl><type><specifier pos:line="173" pos:column="9">public</specifier> <specifier pos:line="173" pos:column="16">delegate</specifier> <name pos:line="173" pos:column="25">void</name></type> <name pos:line="173" pos:column="30">DepthFirstDelegate</name><parameter_list pos:line="173" pos:column="48">(<param><decl><type><name pos:line="173" pos:column="49">XElement</name></type> <name pos:line="173" pos:column="58">element</name></decl></param>)</parameter_list>;</function_decl>

        <comment type="line" pos:line="175" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="176" pos:column="9">/// Depth First traversal function used to visit each of the</comment>
        <comment type="line" pos:line="177" pos:column="9">/// differnt elements in a depth first ordering.</comment>
        <comment type="line" pos:line="178" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="179" pos:column="9">/// &lt;param name="element"&gt;Element which this function is being called on.&lt;/param&gt;</comment>
        <comment type="line" pos:line="180" pos:column="9">/// &lt;param name="onVisit"&gt;A depth first visitor delegate. This is called the first time the node is reached.&lt;/param&gt;</comment>
        <comment type="line" pos:line="181" pos:column="9">/// &lt;param name="onLeave"&gt;A depth first visitor delegate. This is called after the last child has been visited.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="182" pos:column="9">public</specifier> <specifier pos:line="182" pos:column="16">static</specifier> <name pos:line="182" pos:column="23">void</name></type> <name pos:line="182" pos:column="28">DepthFirstVisit</name><parameter_list pos:line="182" pos:column="43">(<param><decl><type><name pos:line="182" pos:column="44">this</name> <name pos:line="182" pos:column="49">XElement</name></type> <name pos:line="182" pos:column="58">element</name></decl></param>, <param><decl><type><name pos:line="182" pos:column="67">DepthFirstDelegate</name></type> <name pos:line="182" pos:column="86">onVisit</name></decl></param>, <param><decl><type><name pos:line="182" pos:column="95">DepthFirstDelegate</name></type> <name pos:line="182" pos:column="114">onLeave</name></decl></param>)</parameter_list>
        <block pos:line="183" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="184" pos:column="13">DFVImpl</name><argument_list pos:line="184" pos:column="20">(<argument><expr><name pos:line="184" pos:column="21">element</name></expr></argument>, <argument><expr><name pos:line="184" pos:column="30">onVisit</name></expr></argument>, <argument><expr><name pos:line="184" pos:column="39">onLeave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="line" pos:line="187" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="188" pos:column="9">/// The depth first visit's implementation.</comment>
        <comment type="line" pos:line="189" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="190" pos:column="9">/// &lt;param name="onVisit"&gt;A depth first visitor delegate. This is called the first time the node is reached.&lt;/param&gt;</comment>
        <comment type="line" pos:line="191" pos:column="9">/// &lt;param name="onLeave"&gt;A depth first visitor delegate. This is called after the last child has been visited.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="192" pos:column="9">private</specifier> <specifier pos:line="192" pos:column="17">static</specifier> <name pos:line="192" pos:column="24">void</name></type> <name pos:line="192" pos:column="29">DFVImpl</name><parameter_list pos:line="192" pos:column="36">(<param><decl><type><name pos:line="192" pos:column="37">XElement</name></type> <name pos:line="192" pos:column="46">elem</name></decl></param>, <param><decl><type><name pos:line="192" pos:column="52">DepthFirstDelegate</name></type> <name pos:line="192" pos:column="71">onVisit</name></decl></param>, <param><decl><type><name pos:line="192" pos:column="80">DepthFirstDelegate</name></type> <name pos:line="192" pos:column="99">onLeave</name></decl></param>)</parameter_list>
        <block pos:line="193" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="194" pos:column="13">onVisit</name><argument_list pos:line="194" pos:column="20">(<argument><expr><name pos:line="194" pos:column="21">elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <foreach pos:line="195" pos:column="13">foreach (<init><decl><type><name pos:line="195" pos:column="22">XElement</name></type> <name pos:line="195" pos:column="31">childElement</name> <range pos:line="195" pos:column="44">in <expr><call><name><name pos:line="195" pos:column="47">elem</name><op:operator pos:line="195" pos:column="51">.</op:operator><name pos:line="195" pos:column="52">Elements</name></name><argument_list pos:line="195" pos:column="60">()</argument_list></call></expr></range></decl></init>)
            <block pos:line="196" pos:column="13">{
                <expr_stmt><expr><call><name pos:line="197" pos:column="17">DFVImpl</name><argument_list pos:line="197" pos:column="24">(<argument><expr><name pos:line="197" pos:column="25">childElement</name></expr></argument>, <argument><expr><name pos:line="197" pos:column="39">onVisit</name></expr></argument>, <argument><expr><name pos:line="197" pos:column="48">onLeave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
            <expr_stmt><expr><call><name pos:line="199" pos:column="13">onLeave</name><argument_list pos:line="199" pos:column="20">(<argument><expr><name pos:line="199" pos:column="21">elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
