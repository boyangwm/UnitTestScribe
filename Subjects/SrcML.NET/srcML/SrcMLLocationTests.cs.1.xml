<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\ABB.SrcML.Data.Test\SrcMLLocationTests.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">ABB</name><op:operator pos:line="1" pos:column="10">.</op:operator><name pos:line="1" pos:column="11">SrcML</name><op:operator pos:line="1" pos:column="16">.</op:operator><name pos:line="1" pos:column="17">Test</name><op:operator pos:line="1" pos:column="21">.</op:operator><name pos:line="1" pos:column="22">Utilities</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">NUnit</name><op:operator pos:line="2" pos:column="12">.</op:operator><name pos:line="2" pos:column="13">Framework</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">IO</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Linq</name></name>;</using>

<namespace pos:line="6" pos:column="1">namespace <name><name pos:line="6" pos:column="11">ABB</name><op:operator pos:line="6" pos:column="14">.</op:operator><name pos:line="6" pos:column="15">SrcML</name><op:operator pos:line="6" pos:column="20">.</op:operator><name pos:line="6" pos:column="21">Data</name><op:operator pos:line="6" pos:column="25">.</op:operator><name pos:line="6" pos:column="26">Test</name></name> <block pos:line="6" pos:column="31">{

    <class><attribute pos:line="8" pos:column="5">[<expr><name pos:line="8" pos:column="6">TestFixture</name></expr>]</attribute>
    <attribute pos:line="9" pos:column="5">[<expr><call><name pos:line="9" pos:column="6">Category</name><argument_list pos:line="9" pos:column="14">(<argument><expr><lit:literal type="string" pos:line="9" pos:column="15">"Build"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="10" pos:column="5">internal</specifier> class <name pos:line="10" pos:column="20">SrcMLLocationTests</name> <block pos:line="10" pos:column="39">{
        <decl_stmt><decl><type><specifier pos:line="11" pos:column="9">private</specifier> <name pos:line="11" pos:column="17">SrcMLFileUnitSetup</name></type> <name pos:line="11" pos:column="36">fileUnitSetup</name></decl>;</decl_stmt>

        <function><type><attribute pos:line="13" pos:column="9">[<expr><name pos:line="13" pos:column="10">TestFixtureSetUp</name></expr>]</attribute>
        <specifier pos:line="14" pos:column="9">public</specifier> <name pos:line="14" pos:column="16">void</name></type> <name pos:line="14" pos:column="21">SetUpFixture</name><parameter_list pos:line="14" pos:column="33">()</parameter_list> <block pos:line="14" pos:column="36">{
            <expr_stmt><expr><name pos:line="15" pos:column="13">fileUnitSetup</name> <op:operator pos:line="15" pos:column="27">=</op:operator> <op:operator pos:line="15" pos:column="29">new</op:operator> <call><name pos:line="15" pos:column="33">SrcMLFileUnitSetup</name><argument_list pos:line="15" pos:column="51">(<argument><expr><name><name pos:line="15" pos:column="52">Language</name><op:operator pos:line="15" pos:column="60">.</op:operator><name pos:line="15" pos:column="61">CSharp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="18" pos:column="9">[<expr><name pos:line="18" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="19" pos:column="9">public</specifier> <name pos:line="19" pos:column="16">void</name></type> <name pos:line="19" pos:column="21">TestContains_NoSibling</name><parameter_list pos:line="19" pos:column="43">()</parameter_list> <block pos:line="19" pos:column="46">{
            <comment type="line" pos:line="20" pos:column="13">////Foo.cs</comment>
            <comment type="line" pos:line="21" pos:column="13">//class Foo {</comment>
            <comment type="line" pos:line="22" pos:column="13">//    int Bar(){return 0;}</comment>
            <comment type="line" pos:line="23" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="24" pos:column="13">var</name></type> <name pos:line="24" pos:column="17">xml</name> <init pos:line="24" pos:column="21">= <expr><lit:literal type="string" pos:line="24" pos:column="23">@"&lt;class pos:line=""1"" pos:column="&gt;class &lt;name pos:line=""1"" pos:column="&gt;Foo&lt;/name&gt; &lt;block pos:line=""1"" pos:column=""&gt;{
    &lt;function&gt;&lt;type&gt;&lt;name pos:line=""2"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""2"" pos:column="&gt;Bar&lt;/name&gt;&lt;parameter_list pos:line=""2"" pos:column=""&gt;()&lt;/parameter_list&gt;&lt;block pos:line=""2"" pos:column=""&gt;{&lt;return pos:line=""2"" pos:column=""&gt;return &lt;expr&gt;&lt;lit:literal type=""number"" pos:line=""2"" pos:column=&gt;0&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt;}&lt;/block&gt;&lt;/function&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="27" pos:column="13">var</name></type> <name pos:line="27" pos:column="17">classElement</name> <init pos:line="27" pos:column="30">= <expr><call><name><name pos:line="27" pos:column="32">fileUnitSetup</name><op:operator pos:line="27" pos:column="45">.</op:operator><name pos:line="27" pos:column="46">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="27" pos:column="70">(<argument><expr><name pos:line="27" pos:column="71">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="27" pos:column="76">"Foo.cs"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="27" pos:column="85">.</op:operator><call><name pos:line="27" pos:column="86">Descendants</name><argument_list pos:line="27" pos:column="97">(<argument><expr><name><name pos:line="27" pos:column="98">SRC</name><op:operator pos:line="27" pos:column="101">.</op:operator><name pos:line="27" pos:column="102">Class</name></name></expr></argument>)</argument_list></call><op:operator pos:line="27" pos:column="108">.</op:operator><call><name pos:line="27" pos:column="109">First</name><argument_list pos:line="27" pos:column="114">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="28" pos:column="13">var</name></type> <name pos:line="28" pos:column="17">methodElement</name> <init pos:line="28" pos:column="31">= <expr><call><name><name pos:line="28" pos:column="33">classElement</name><op:operator pos:line="28" pos:column="45">.</op:operator><name pos:line="28" pos:column="46">Descendants</name></name><argument_list pos:line="28" pos:column="57">(<argument><expr><name><name pos:line="28" pos:column="58">SRC</name><op:operator pos:line="28" pos:column="61">.</op:operator><name pos:line="28" pos:column="62">Function</name></name></expr></argument>)</argument_list></call><op:operator pos:line="28" pos:column="71">.</op:operator><call><name pos:line="28" pos:column="72">First</name><argument_list pos:line="28" pos:column="77">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="29" pos:column="13">var</name></type> <name pos:line="29" pos:column="17">classLoc</name> <init pos:line="29" pos:column="26">= <expr><op:operator pos:line="29" pos:column="28">new</op:operator> <call><name pos:line="29" pos:column="32">SrcMLLocation</name><argument_list pos:line="29" pos:column="45">(<argument><expr><name pos:line="29" pos:column="46">classElement</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="29" pos:column="60">"Foo.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="30" pos:column="13">var</name></type> <name pos:line="30" pos:column="17">methodLoc</name> <init pos:line="30" pos:column="27">= <expr><op:operator pos:line="30" pos:column="29">new</op:operator> <call><name pos:line="30" pos:column="33">SrcMLLocation</name><argument_list pos:line="30" pos:column="46">(<argument><expr><name pos:line="30" pos:column="47">methodElement</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="30" pos:column="62">"Foo.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="31" pos:column="13">Assert</name><op:operator pos:line="31" pos:column="19">.</op:operator><name pos:line="31" pos:column="20">IsTrue</name></name><argument_list pos:line="31" pos:column="26">(<argument><expr><call><name><name pos:line="31" pos:column="27">classLoc</name><op:operator pos:line="31" pos:column="35">.</op:operator><name pos:line="31" pos:column="36">Contains</name></name><argument_list pos:line="31" pos:column="44">(<argument><expr><name pos:line="31" pos:column="45">methodLoc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="34" pos:column="9">[<expr><name pos:line="34" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="35" pos:column="9">public</specifier> <name pos:line="35" pos:column="16">void</name></type> <name pos:line="35" pos:column="21">TestContains_Reflexive</name><parameter_list pos:line="35" pos:column="43">()</parameter_list> <block pos:line="35" pos:column="46">{
            <comment type="line" pos:line="36" pos:column="13">////Foo.cs</comment>
            <comment type="line" pos:line="37" pos:column="13">//class Foo {</comment>
            <comment type="line" pos:line="38" pos:column="13">//    int Bar(){return 0;}</comment>
            <comment type="line" pos:line="39" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="40" pos:column="13">var</name></type> <name pos:line="40" pos:column="17">xml</name> <init pos:line="40" pos:column="21">= <expr><lit:literal type="string" pos:line="40" pos:column="23">@"&lt;class pos:line=""1"" pos:column="&gt;class &lt;name pos:line=""1"" pos:column="&gt;Foo&lt;/name&gt; &lt;block pos:line=""1"" pos:column=""&gt;{
    &lt;function&gt;&lt;type&gt;&lt;name pos:line=""2"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""2"" pos:column="&gt;Bar&lt;/name&gt;&lt;parameter_list pos:line=""2"" pos:column=""&gt;()&lt;/parameter_list&gt;&lt;block pos:line=""2"" pos:column=""&gt;{&lt;return pos:line=""2"" pos:column=""&gt;return &lt;expr&gt;&lt;lit:literal type=""number"" pos:line=""2"" pos:column=&gt;0&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt;}&lt;/block&gt;&lt;/function&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="43" pos:column="13">var</name></type> <name pos:line="43" pos:column="17">classElement</name> <init pos:line="43" pos:column="30">= <expr><call><name><name pos:line="43" pos:column="32">fileUnitSetup</name><op:operator pos:line="43" pos:column="45">.</op:operator><name pos:line="43" pos:column="46">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="43" pos:column="70">(<argument><expr><name pos:line="43" pos:column="71">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="43" pos:column="76">"Foo.cs"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="43" pos:column="85">.</op:operator><call><name pos:line="43" pos:column="86">Descendants</name><argument_list pos:line="43" pos:column="97">(<argument><expr><name><name pos:line="43" pos:column="98">SRC</name><op:operator pos:line="43" pos:column="101">.</op:operator><name pos:line="43" pos:column="102">Class</name></name></expr></argument>)</argument_list></call><op:operator pos:line="43" pos:column="108">.</op:operator><call><name pos:line="43" pos:column="109">First</name><argument_list pos:line="43" pos:column="114">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="44" pos:column="13">var</name></type> <name pos:line="44" pos:column="17">classLoc</name> <init pos:line="44" pos:column="26">= <expr><op:operator pos:line="44" pos:column="28">new</op:operator> <call><name pos:line="44" pos:column="32">SrcMLLocation</name><argument_list pos:line="44" pos:column="45">(<argument><expr><name pos:line="44" pos:column="46">classElement</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="44" pos:column="60">"Foo.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="45" pos:column="13">Assert</name><op:operator pos:line="45" pos:column="19">.</op:operator><name pos:line="45" pos:column="20">IsTrue</name></name><argument_list pos:line="45" pos:column="26">(<argument><expr><call><name><name pos:line="45" pos:column="27">classLoc</name><op:operator pos:line="45" pos:column="35">.</op:operator><name pos:line="45" pos:column="36">Contains</name></name><argument_list pos:line="45" pos:column="44">(<argument><expr><name pos:line="45" pos:column="45">classLoc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="48" pos:column="9">[<expr><name pos:line="48" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="49" pos:column="9">public</specifier> <name pos:line="49" pos:column="16">void</name></type> <name pos:line="49" pos:column="21">TestContains_Sibling</name><parameter_list pos:line="49" pos:column="41">()</parameter_list> <block pos:line="49" pos:column="44">{
            <comment type="line" pos:line="50" pos:column="13">////Foo.cs</comment>
            <comment type="line" pos:line="51" pos:column="13">//class Foo {</comment>
            <comment type="line" pos:line="52" pos:column="13">//    string Bar(){</comment>
            <comment type="line" pos:line="53" pos:column="13">//        string a = "Hello, world!";</comment>
            <comment type="line" pos:line="54" pos:column="13">//        return a;</comment>
            <comment type="line" pos:line="55" pos:column="13">//    }</comment>
            <comment type="line" pos:line="56" pos:column="13">//    int Baz(){ return 0; }</comment>
            <comment type="line" pos:line="57" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="58" pos:column="13">var</name></type> <name pos:line="58" pos:column="17">xml</name> <init pos:line="58" pos:column="21">= <expr><lit:literal type="string" pos:line="58" pos:column="23">@"&lt;class pos:line=""1"" pos:column="&gt;class &lt;name pos:line=""1"" pos:column="&gt;Foo&lt;/name&gt; &lt;block pos:line=""1"" pos:column=""&gt;{
    &lt;function&gt;&lt;type&gt;&lt;name pos:line=""2"" pos:column="&gt;string&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""2"" pos:column=""&gt;Bar&lt;/name&gt;&lt;parameter_list pos:line=""2"" pos:column=""&gt;()&lt;/parameter_list&gt;&lt;block pos:line=""2"" pos:column=""&gt;{
        &lt;decl_stmt&gt;&lt;decl&gt;&lt;type&gt;&lt;name pos:line=""3"" pos:column="&gt;string&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""3"" pos:column=""&gt;a&lt;/name&gt; =&lt;init pos:line=""3"" pos:column=""&gt; &lt;expr&gt;&lt;lit:literal type=""string"" pos:line=""3"" pos:column=&gt;""Hello, world!&lt;/lit:literal&gt;&lt;/expr&gt;&lt;/init&gt;&lt;/decl&gt;;&lt;/decl_stmt&gt;
        &lt;return pos:line=""4"" pos:column="&gt;return &lt;expr&gt;&lt;name pos:line=""4"" pos:column=""&gt;a&lt;/name&gt;&lt;/expr&gt;;&lt;/return&gt;
    }&lt;/block&gt;&lt;/function&gt;
    &lt;function&gt;&lt;type&gt;&lt;name pos:line=""6"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""6"" pos:column="&gt;Baz&lt;/name&gt;&lt;parameter_list pos:line=""6"" pos:column=""&gt;()&lt;/parameter_list&gt;&lt;block pos:line=""6"" pos:column=""&gt;{ &lt;return pos:line=""6"" pos:column=""&gt;return &lt;expr&gt;&lt;lit:literal type=""number"" pos:line=""6"" pos:column=&gt;0&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt; }&lt;/block&gt;&lt;/function&gt;
}&lt;/block&gt;&lt;/class&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="65" pos:column="13">var</name></type> <name pos:line="65" pos:column="17">methodElement</name> <init pos:line="65" pos:column="31">= <expr><call><name><name pos:line="65" pos:column="33">fileUnitSetup</name><op:operator pos:line="65" pos:column="46">.</op:operator><name pos:line="65" pos:column="47">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="65" pos:column="71">(<argument><expr><name pos:line="65" pos:column="72">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="65" pos:column="77">"Foo.cs"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="65" pos:column="86">.</op:operator><call><name pos:line="65" pos:column="87">Descendants</name><argument_list pos:line="65" pos:column="98">(<argument><expr><name><name pos:line="65" pos:column="99">SRC</name><op:operator pos:line="65" pos:column="102">.</op:operator><name pos:line="65" pos:column="103">Function</name></name></expr></argument>)</argument_list></call><op:operator pos:line="65" pos:column="112">.</op:operator><call><name pos:line="65" pos:column="113">First</name><argument_list pos:line="65" pos:column="118">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="66" pos:column="13">var</name></type> <name pos:line="66" pos:column="17">declElement</name> <init pos:line="66" pos:column="29">= <expr><call><name><name pos:line="66" pos:column="31">methodElement</name><op:operator pos:line="66" pos:column="44">.</op:operator><name pos:line="66" pos:column="45">Descendants</name></name><argument_list pos:line="66" pos:column="56">(<argument><expr><name><name pos:line="66" pos:column="57">SRC</name><op:operator pos:line="66" pos:column="60">.</op:operator><name pos:line="66" pos:column="61">DeclarationStatement</name></name></expr></argument>)</argument_list></call><op:operator pos:line="66" pos:column="82">.</op:operator><call><name pos:line="66" pos:column="83">First</name><argument_list pos:line="66" pos:column="88">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="67" pos:column="13">var</name></type> <name pos:line="67" pos:column="17">methodLoc</name> <init pos:line="67" pos:column="27">= <expr><op:operator pos:line="67" pos:column="29">new</op:operator> <call><name pos:line="67" pos:column="33">SrcMLLocation</name><argument_list pos:line="67" pos:column="46">(<argument><expr><name pos:line="67" pos:column="47">methodElement</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="67" pos:column="62">"Foo.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="68" pos:column="13">var</name></type> <name pos:line="68" pos:column="17">declLoc</name> <init pos:line="68" pos:column="25">= <expr><op:operator pos:line="68" pos:column="27">new</op:operator> <call><name pos:line="68" pos:column="31">SrcMLLocation</name><argument_list pos:line="68" pos:column="44">(<argument><expr><name pos:line="68" pos:column="45">declElement</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="68" pos:column="58">"Foo.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="69" pos:column="13">Assert</name><op:operator pos:line="69" pos:column="19">.</op:operator><name pos:line="69" pos:column="20">IsTrue</name></name><argument_list pos:line="69" pos:column="26">(<argument><expr><call><name><name pos:line="69" pos:column="27">methodLoc</name><op:operator pos:line="69" pos:column="36">.</op:operator><name pos:line="69" pos:column="37">Contains</name></name><argument_list pos:line="69" pos:column="45">(<argument><expr><name pos:line="69" pos:column="46">declLoc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="72" pos:column="9">[<expr><name pos:line="72" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="73" pos:column="9">public</specifier> <name pos:line="73" pos:column="16">void</name></type> <name pos:line="73" pos:column="21">TestContains_TwoLevel</name><parameter_list pos:line="73" pos:column="42">()</parameter_list> <block pos:line="73" pos:column="45">{
            <comment type="line" pos:line="74" pos:column="13">////Example.cs</comment>
            <comment type="line" pos:line="75" pos:column="13">//namespace Example {</comment>
            <comment type="line" pos:line="76" pos:column="13">//    class Foo {</comment>
            <comment type="line" pos:line="77" pos:column="13">//        int Bar(){return 0;}</comment>
            <comment type="line" pos:line="78" pos:column="13">//    }</comment>
            <comment type="line" pos:line="79" pos:column="13">//}</comment>
            <decl_stmt><decl><type><name pos:line="80" pos:column="13">var</name></type> <name pos:line="80" pos:column="17">xml</name> <init pos:line="80" pos:column="21">= <expr><lit:literal type="string" pos:line="80" pos:column="23">@"&lt;namespace pos:line=""1"" pos:column="&gt;namespace &lt;name pos:line=""1"" pos:column=""&gt;Example&lt;/name&gt; &lt;block pos:line=""1"" pos:column=""&gt;{
    &lt;class pos:line=""2"" pos:column="&gt;class &lt;name pos:line=""2"" pos:column=""&gt;Foo&lt;/name&gt; &lt;block pos:line=""2"" pos:column=""&gt;{
        &lt;function&gt;&lt;type&gt;&lt;name pos:line=""3"" pos:column="&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name pos:line=""3"" pos:column=""&gt;Bar&lt;/name&gt;&lt;parameter_list pos:line=""3"" pos:column=""&gt;()&lt;/parameter_list&gt;&lt;block pos:line=""3"" pos:column=""&gt;{&lt;return pos:line=""3"" pos:column=""&gt;return &lt;expr&gt;&lt;lit:literal type=""number"" pos:line=""3"" pos:column=&gt;0&lt;/lit:literal&gt;&lt;/expr&gt;;&lt;/return&gt;}&lt;/block&gt;&lt;/function&gt;
    }&lt;/block&gt;&lt;/class&gt;
}&lt;/block&gt;&lt;/namespace&gt;"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="85" pos:column="13">var</name></type> <name pos:line="85" pos:column="17">namespaceElement</name> <init pos:line="85" pos:column="34">= <expr><call><name><name pos:line="85" pos:column="36">fileUnitSetup</name><op:operator pos:line="85" pos:column="49">.</op:operator><name pos:line="85" pos:column="50">GetFileUnitForXmlSnippet</name></name><argument_list pos:line="85" pos:column="74">(<argument><expr><name pos:line="85" pos:column="75">xml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="85" pos:column="80">"Example.cs"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="85" pos:column="93">.</op:operator><call><name pos:line="85" pos:column="94">Element</name><argument_list pos:line="85" pos:column="101">(<argument><expr><name><name pos:line="85" pos:column="102">SRC</name><op:operator pos:line="85" pos:column="105">.</op:operator><name pos:line="85" pos:column="106">Namespace</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="86" pos:column="13">var</name></type> <name pos:line="86" pos:column="17">methodElement</name> <init pos:line="86" pos:column="31">= <expr><call><name><name pos:line="86" pos:column="33">namespaceElement</name><op:operator pos:line="86" pos:column="49">.</op:operator><name pos:line="86" pos:column="50">Descendants</name></name><argument_list pos:line="86" pos:column="61">(<argument><expr><name><name pos:line="86" pos:column="62">SRC</name><op:operator pos:line="86" pos:column="65">.</op:operator><name pos:line="86" pos:column="66">Function</name></name></expr></argument>)</argument_list></call><op:operator pos:line="86" pos:column="75">.</op:operator><call><name pos:line="86" pos:column="76">First</name><argument_list pos:line="86" pos:column="81">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="87" pos:column="13">var</name></type> <name pos:line="87" pos:column="17">namespaceLoc</name> <init pos:line="87" pos:column="30">= <expr><op:operator pos:line="87" pos:column="32">new</op:operator> <call><name pos:line="87" pos:column="36">SrcMLLocation</name><argument_list pos:line="87" pos:column="49">(<argument><expr><name pos:line="87" pos:column="50">namespaceElement</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="87" pos:column="68">"Example.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="88" pos:column="13">var</name></type> <name pos:line="88" pos:column="17">methodLoc</name> <init pos:line="88" pos:column="27">= <expr><op:operator pos:line="88" pos:column="29">new</op:operator> <call><name pos:line="88" pos:column="33">SrcMLLocation</name><argument_list pos:line="88" pos:column="46">(<argument><expr><name pos:line="88" pos:column="47">methodElement</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="88" pos:column="62">"Example.cs"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="89" pos:column="13">Assert</name><op:operator pos:line="89" pos:column="19">.</op:operator><name pos:line="89" pos:column="20">IsTrue</name></name><argument_list pos:line="89" pos:column="26">(<argument><expr><call><name><name pos:line="89" pos:column="27">namespaceLoc</name><op:operator pos:line="89" pos:column="39">.</op:operator><name pos:line="89" pos:column="40">Contains</name></name><argument_list pos:line="89" pos:column="48">(<argument><expr><name pos:line="89" pos:column="49">methodLoc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="92" pos:column="9">[<expr><name pos:line="92" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="93" pos:column="9">public</specifier> <name pos:line="93" pos:column="16">void</name></type> <name pos:line="93" pos:column="21">TestGetXElement</name><parameter_list pos:line="93" pos:column="36">()</parameter_list> <block pos:line="93" pos:column="39">{
            <decl_stmt><decl><type><name pos:line="94" pos:column="13">var</name></type> <name pos:line="94" pos:column="17">archive</name> <init pos:line="94" pos:column="25">= <expr><op:operator pos:line="94" pos:column="27">new</op:operator> <call><name pos:line="94" pos:column="31">SrcMLArchive</name><argument_list pos:line="94" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="94" pos:column="44">"SrcMLLocationTest"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="94" pos:column="65">false</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="94" pos:column="72">new</op:operator> <call><name pos:line="94" pos:column="76">SrcMLGenerator</name><argument_list pos:line="94" pos:column="90">(<argument><expr><lit:literal type="string" pos:line="94" pos:column="91">"SrcML"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="95" pos:column="13">var</name></type> <name pos:line="95" pos:column="17">sourcePath</name> <init pos:line="95" pos:column="28">= <expr><call><name><name pos:line="95" pos:column="30">Path</name><op:operator pos:line="95" pos:column="34">.</op:operator><name pos:line="95" pos:column="35">GetFullPath</name></name><argument_list pos:line="95" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="95" pos:column="47">@"..\..\TestInputs\class_test.h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="96" pos:column="13">archive</name><op:operator pos:line="96" pos:column="20">.</op:operator><name pos:line="96" pos:column="21">AddOrUpdateFile</name></name><argument_list pos:line="96" pos:column="36">(<argument><expr><name pos:line="96" pos:column="37">sourcePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="98" pos:column="13">var</name></type> <name pos:line="98" pos:column="17">unit</name> <init pos:line="98" pos:column="22">= <expr><call><name><name pos:line="98" pos:column="24">archive</name><op:operator pos:line="98" pos:column="31">.</op:operator><name pos:line="98" pos:column="32">GetXElementForSourceFile</name></name><argument_list pos:line="98" pos:column="56">(<argument><expr><name pos:line="98" pos:column="57">sourcePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="99" pos:column="13">Assert</name><op:operator pos:line="99" pos:column="19">.</op:operator><name pos:line="99" pos:column="20">IsNotNull</name></name><argument_list pos:line="99" pos:column="29">(<argument><expr><name pos:line="99" pos:column="30">unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="100" pos:column="13">var</name></type> <name pos:line="100" pos:column="17">classElement</name> <init pos:line="100" pos:column="30">= <expr><call><name><name pos:line="100" pos:column="32">unit</name><op:operator pos:line="100" pos:column="36">.</op:operator><name pos:line="100" pos:column="37">Descendants</name></name><argument_list pos:line="100" pos:column="48">(<argument><expr><name><name pos:line="100" pos:column="49">SRC</name><op:operator pos:line="100" pos:column="52">.</op:operator><name pos:line="100" pos:column="53">Class</name></name></expr></argument>)</argument_list></call><op:operator pos:line="100" pos:column="59">.</op:operator><call><name pos:line="100" pos:column="60">FirstOrDefault</name><argument_list pos:line="100" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="101" pos:column="13">Assert</name><op:operator pos:line="101" pos:column="19">.</op:operator><name pos:line="101" pos:column="20">IsNotNull</name></name><argument_list pos:line="101" pos:column="29">(<argument><expr><name pos:line="101" pos:column="30">classElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <decl_stmt><decl><type><name pos:line="103" pos:column="13">var</name></type> <name pos:line="103" pos:column="17">parser</name> <init pos:line="103" pos:column="24">= <expr><op:operator pos:line="103" pos:column="26">new</op:operator> <call><name pos:line="103" pos:column="30">CPlusPlusCodeParser</name><argument_list pos:line="103" pos:column="49">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="104" pos:column="13">var</name></type> <name pos:line="104" pos:column="17">globalScope</name> <init pos:line="104" pos:column="29">= <expr><call><name><name pos:line="104" pos:column="31">parser</name><op:operator pos:line="104" pos:column="37">.</op:operator><name pos:line="104" pos:column="38">ParseFileUnit</name></name><argument_list pos:line="104" pos:column="51">(<argument><expr><name pos:line="104" pos:column="52">unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="105" pos:column="13">var</name></type> <name pos:line="105" pos:column="17">typeDefinition</name> <init pos:line="105" pos:column="32">= <expr><call><name><name pos:line="105" pos:column="34">globalScope</name><op:operator pos:line="105" pos:column="45">.</op:operator><name pos:line="105" pos:column="46">ChildStatements</name><op:operator pos:line="105" pos:column="61">.</op:operator><name><name pos:line="105" pos:column="62">OfType</name><argument_list pos:line="105" pos:column="68">&lt;<argument><name pos:line="105" pos:column="69">TypeDefinition</name></argument>&gt;</argument_list></name></name><argument_list pos:line="105" pos:column="84">()</argument_list></call><op:operator pos:line="105" pos:column="86">.</op:operator><call><name pos:line="105" pos:column="87">FirstOrDefault</name><argument_list pos:line="105" pos:column="101">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="106" pos:column="13">Assert</name><op:operator pos:line="106" pos:column="19">.</op:operator><name pos:line="106" pos:column="20">IsNotNull</name></name><argument_list pos:line="106" pos:column="29">(<argument><expr><name pos:line="106" pos:column="30">typeDefinition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="108" pos:column="13">var</name></type> <name pos:line="108" pos:column="17">element</name> <init pos:line="108" pos:column="25">= <expr><call><name><name pos:line="108" pos:column="27">typeDefinition</name><op:operator pos:line="108" pos:column="41">.</op:operator><name pos:line="108" pos:column="42">PrimaryLocation</name><op:operator pos:line="108" pos:column="57">.</op:operator><name pos:line="108" pos:column="58">GetXElement</name></name><argument_list pos:line="108" pos:column="69">(<argument><expr><name pos:line="108" pos:column="70">archive</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="109" pos:column="13">Assert</name><op:operator pos:line="109" pos:column="19">.</op:operator><name pos:line="109" pos:column="20">IsNotNull</name></name><argument_list pos:line="109" pos:column="29">(<argument><expr><name pos:line="109" pos:column="30">element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="110" pos:column="13">Assert</name><op:operator pos:line="110" pos:column="19">.</op:operator><name pos:line="110" pos:column="20">AreEqual</name></name><argument_list pos:line="110" pos:column="28">(<argument><expr><call><name><name pos:line="110" pos:column="29">classElement</name><op:operator pos:line="110" pos:column="41">.</op:operator><name pos:line="110" pos:column="42">GetSrcLineNumber</name></name><argument_list pos:line="110" pos:column="58">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="110" pos:column="62">element</name><op:operator pos:line="110" pos:column="69">.</op:operator><name pos:line="110" pos:column="70">GetSrcLineNumber</name></name><argument_list pos:line="110" pos:column="86">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="111" pos:column="13">Assert</name><op:operator pos:line="111" pos:column="19">.</op:operator><name pos:line="111" pos:column="20">AreEqual</name></name><argument_list pos:line="111" pos:column="28">(<argument><expr><call><name><name pos:line="111" pos:column="29">classElement</name><op:operator pos:line="111" pos:column="41">.</op:operator><name pos:line="111" pos:column="42">GetSrcLinePosition</name></name><argument_list pos:line="111" pos:column="60">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="111" pos:column="64">element</name><op:operator pos:line="111" pos:column="71">.</op:operator><name pos:line="111" pos:column="72">GetSrcLinePosition</name></name><argument_list pos:line="111" pos:column="90">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="112" pos:column="13">Assert</name><op:operator pos:line="112" pos:column="19">.</op:operator><name pos:line="112" pos:column="20">AreEqual</name></name><argument_list pos:line="112" pos:column="28">(<argument><expr><call><name><name pos:line="112" pos:column="29">classElement</name><op:operator pos:line="112" pos:column="41">.</op:operator><name pos:line="112" pos:column="42">GetXPath</name></name><argument_list pos:line="112" pos:column="50">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="112" pos:column="54">element</name><op:operator pos:line="112" pos:column="61">.</op:operator><name pos:line="112" pos:column="62">GetXPath</name></name><argument_list pos:line="112" pos:column="70">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
