<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\SrcML.NET\Tools\ABB.SrcML.Tools.MethodCallSurvey\MainWindow.xaml.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">ABB</name><op:operator pos:line="1" pos:column="10">.</op:operator><name pos:line="1" pos:column="11">SrcML</name><op:operator pos:line="1" pos:column="16">.</op:operator><name pos:line="1" pos:column="17">Data</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">ABB</name><op:operator pos:line="2" pos:column="10">.</op:operator><name pos:line="2" pos:column="11">SrcML</name><op:operator pos:line="2" pos:column="16">.</op:operator><name pos:line="2" pos:column="17">Utilities</name></name>;</using>
<using pos:line="3" pos:column="1">using <name pos:line="3" pos:column="7">System</name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Collections</name><op:operator pos:line="4" pos:column="25">.</op:operator><name pos:line="4" pos:column="26">Generic</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Collections</name><op:operator pos:line="5" pos:column="25">.</op:operator><name pos:line="5" pos:column="26">ObjectModel</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">ComponentModel</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">System</name><op:operator pos:line="7" pos:column="13">.</op:operator><name pos:line="7" pos:column="14">Diagnostics</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">System</name><op:operator pos:line="8" pos:column="13">.</op:operator><name pos:line="8" pos:column="14">Linq</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">System</name><op:operator pos:line="9" pos:column="13">.</op:operator><name pos:line="9" pos:column="14">Text</name></name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">System</name><op:operator pos:line="10" pos:column="13">.</op:operator><name pos:line="10" pos:column="14">Threading</name><op:operator pos:line="10" pos:column="23">.</op:operator><name pos:line="10" pos:column="24">Tasks</name></name>;</using>
<using pos:line="11" pos:column="1">using <name><name pos:line="11" pos:column="7">System</name><op:operator pos:line="11" pos:column="13">.</op:operator><name pos:line="11" pos:column="14">Windows</name></name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">System</name><op:operator pos:line="12" pos:column="13">.</op:operator><name pos:line="12" pos:column="14">Windows</name><op:operator pos:line="12" pos:column="21">.</op:operator><name pos:line="12" pos:column="22">Controls</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Windows</name><op:operator pos:line="13" pos:column="21">.</op:operator><name pos:line="13" pos:column="22">Data</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Windows</name><op:operator pos:line="14" pos:column="21">.</op:operator><name pos:line="14" pos:column="22">Documents</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Windows</name><op:operator pos:line="15" pos:column="21">.</op:operator><name pos:line="15" pos:column="22">Input</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Windows</name><op:operator pos:line="16" pos:column="21">.</op:operator><name pos:line="16" pos:column="22">Media</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Windows</name><op:operator pos:line="17" pos:column="21">.</op:operator><name pos:line="17" pos:column="22">Media</name><op:operator pos:line="17" pos:column="27">.</op:operator><name pos:line="17" pos:column="28">Imaging</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Windows</name><op:operator pos:line="18" pos:column="21">.</op:operator><name pos:line="18" pos:column="22">Navigation</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">System</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">Windows</name><op:operator pos:line="19" pos:column="21">.</op:operator><name pos:line="19" pos:column="22">Shapes</name></name>;</using>
<using pos:line="20" pos:column="1">using <name pos:line="20" pos:column="7">FilePath</name> <init pos:line="20" pos:column="16">= <expr><name><name pos:line="20" pos:column="18">System</name><op:operator pos:line="20" pos:column="24">.</op:operator><name pos:line="20" pos:column="25">IO</name><op:operator pos:line="20" pos:column="27">.</op:operator><name pos:line="20" pos:column="28">Path</name></name></expr></init>;</using>

<namespace pos:line="22" pos:column="1">namespace <name><name pos:line="22" pos:column="11">ABB</name><op:operator pos:line="22" pos:column="14">.</op:operator><name pos:line="22" pos:column="15">SrcML</name><op:operator pos:line="22" pos:column="20">.</op:operator><name pos:line="22" pos:column="21">Tools</name><op:operator pos:line="22" pos:column="26">.</op:operator><name pos:line="22" pos:column="27">MethodCallSurvey</name></name> <block pos:line="22" pos:column="44">{

    <comment type="line" pos:line="24" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="25" pos:column="5">/// Interaction logic for MainWindow.xaml</comment>
    <comment type="line" pos:line="26" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="27" pos:column="5">public</specifier> <specifier pos:line="27" pos:column="12">partial</specifier> class <name pos:line="27" pos:column="26">MainWindow</name> <super pos:line="27" pos:column="37">: <name pos:line="27" pos:column="39">Window</name></super> <block pos:line="27" pos:column="46">{
        <decl_stmt><decl><type><specifier pos:line="28" pos:column="9">private</specifier> <name pos:line="28" pos:column="17">BackgroundWorker</name></type> <name pos:line="28" pos:column="34">loadWorker</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="29" pos:column="9">private</specifier> <name pos:line="29" pos:column="17">BackgroundWorker</name></type> <name pos:line="29" pos:column="34">sampleWorker</name></decl>;</decl_stmt>

        <constructor><specifier pos:line="31" pos:column="9">public</specifier> <name pos:line="31" pos:column="16">MainWindow</name><parameter_list pos:line="31" pos:column="26">()</parameter_list> <block pos:line="31" pos:column="29">{
            <expr_stmt><expr><call><name pos:line="32" pos:column="13">InitializeComponent</name><argument_list pos:line="32" pos:column="32">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name pos:line="34" pos:column="13">this</name><op:operator pos:line="34" pos:column="17">.</op:operator><name pos:line="34" pos:column="18">Sample</name></name> <op:operator pos:line="34" pos:column="25">=</op:operator> <op:operator pos:line="34" pos:column="27">new</op:operator> <call><name pos:line="34" pos:column="31">MethodCallSample</name><argument_list pos:line="34" pos:column="47">(<argument><expr><lit:literal type="number" pos:line="34" pos:column="48">25</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="35" pos:column="13">this</name><op:operator pos:line="35" pos:column="17">.</op:operator><name pos:line="35" pos:column="18">DataContext</name></name> <op:operator pos:line="35" pos:column="30">=</op:operator> <name><name pos:line="35" pos:column="32">this</name><op:operator pos:line="35" pos:column="36">.</op:operator><name pos:line="35" pos:column="37">Sample</name></name></expr>;</expr_stmt>

            <expr_stmt><expr><name><name pos:line="37" pos:column="13">this</name><op:operator pos:line="37" pos:column="17">.</op:operator><name pos:line="37" pos:column="18">Editor</name></name> <op:operator pos:line="37" pos:column="25">=</op:operator> <lit:literal type="string" pos:line="37" pos:column="27">@"C:\Program Files (x86)\Notepad++\notepad++.exe"</lit:literal></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="39" pos:column="13">loadWorker</name> <op:operator pos:line="39" pos:column="24">=</op:operator> <op:operator pos:line="39" pos:column="26">new</op:operator> <call><name pos:line="39" pos:column="30">BackgroundWorker</name><argument_list pos:line="39" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="40" pos:column="13">loadWorker</name><op:operator pos:line="40" pos:column="23">.</op:operator><name pos:line="40" pos:column="24">WorkerReportsProgress</name></name> <op:operator pos:line="40" pos:column="46">=</op:operator> <lit:literal type="boolean" pos:line="40" pos:column="48">true</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="41" pos:column="13">loadWorker</name><op:operator pos:line="41" pos:column="23">.</op:operator><name pos:line="41" pos:column="24">DoWork</name></name> <op:operator pos:line="41" pos:column="31">+=</op:operator> <name pos:line="41" pos:column="34">loadWorker_DoWork</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="42" pos:column="13">loadWorker</name><op:operator pos:line="42" pos:column="23">.</op:operator><name pos:line="42" pos:column="24">ProgressChanged</name></name> <op:operator pos:line="42" pos:column="40">+=</op:operator> <name pos:line="42" pos:column="43">ProgressChanged</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="43" pos:column="13">loadWorker</name><op:operator pos:line="43" pos:column="23">.</op:operator><name pos:line="43" pos:column="24">RunWorkerCompleted</name></name> <op:operator pos:line="43" pos:column="43">+=</op:operator> <name pos:line="43" pos:column="46">loadWorker_RunWorkerCompleted</name></expr>;</expr_stmt>

            <expr_stmt><expr><name pos:line="45" pos:column="13">sampleWorker</name> <op:operator pos:line="45" pos:column="26">=</op:operator> <op:operator pos:line="45" pos:column="28">new</op:operator> <call><name pos:line="45" pos:column="32">BackgroundWorker</name><argument_list pos:line="45" pos:column="48">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="46" pos:column="13">sampleWorker</name><op:operator pos:line="46" pos:column="25">.</op:operator><name pos:line="46" pos:column="26">WorkerReportsProgress</name></name> <op:operator pos:line="46" pos:column="48">=</op:operator> <lit:literal type="boolean" pos:line="46" pos:column="50">true</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="47" pos:column="13">sampleWorker</name><op:operator pos:line="47" pos:column="25">.</op:operator><name pos:line="47" pos:column="26">DoWork</name></name> <op:operator pos:line="47" pos:column="33">+=</op:operator> <name pos:line="47" pos:column="36">sampleWorker_DoWork</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="48" pos:column="13">sampleWorker</name><op:operator pos:line="48" pos:column="25">.</op:operator><name pos:line="48" pos:column="26">ProgressChanged</name></name> <op:operator pos:line="48" pos:column="42">+=</op:operator> <name pos:line="48" pos:column="45">ProgressChanged</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="49" pos:column="13">sampleWorker</name><op:operator pos:line="49" pos:column="25">.</op:operator><name pos:line="49" pos:column="26">RunWorkerCompleted</name></name> <op:operator pos:line="49" pos:column="45">+=</op:operator> <name pos:line="49" pos:column="48">sampleWorker_RunWorkerCompleted</name></expr>;</expr_stmt>
        }</block></constructor>

        <decl_stmt><decl><type><specifier pos:line="52" pos:column="9">public</specifier> <name pos:line="52" pos:column="16">string</name></type> <name pos:line="52" pos:column="23">Editor</name> <block pos:line="52" pos:column="30">{ <function_decl><name pos:line="52" pos:column="32">get</name>;</function_decl> <function_decl><name pos:line="52" pos:column="37">set</name>;</function_decl> }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="54" pos:column="9">public</specifier> <name pos:line="54" pos:column="16">MethodCallSample</name></type> <name pos:line="54" pos:column="33">Sample</name> <block pos:line="54" pos:column="40">{ <function_decl><name pos:line="54" pos:column="42">get</name>;</function_decl> <function_decl><specifier pos:line="54" pos:column="47">private</specifier> <name pos:line="54" pos:column="55">set</name>;</function_decl> }</block></decl></decl_stmt>

        <function><type><specifier pos:line="56" pos:column="9">protected</specifier> <name pos:line="56" pos:column="19">void</name></type> <name pos:line="56" pos:column="24">HandleDoubleClick</name><parameter_list pos:line="56" pos:column="41">(<param><decl><type><name pos:line="56" pos:column="42">object</name></type> <name pos:line="56" pos:column="49">sender</name></decl></param>, <param><decl><type><name pos:line="56" pos:column="57">MouseButtonEventArgs</name></type> <name pos:line="56" pos:column="78">e</name></decl></param>)</parameter_list> <block pos:line="56" pos:column="81">{
            <decl_stmt><decl><type><name pos:line="57" pos:column="13">Control</name></type> <name pos:line="57" pos:column="21">control</name> <init pos:line="57" pos:column="29">= <expr><name pos:line="57" pos:column="31">sender</name> <op:operator pos:line="57" pos:column="38">as</op:operator> <name pos:line="57" pos:column="41">Control</name></expr></init></decl>;</decl_stmt>
            <if pos:line="58" pos:column="13">if<condition pos:line="58" pos:column="15">(<expr><name pos:line="58" pos:column="16">null</name> <op:operator pos:line="58" pos:column="21">!=</op:operator> <name pos:line="58" pos:column="24">control</name></expr>)</condition><then pos:line="58" pos:column="32"> <block pos:line="58" pos:column="33">{
                <decl_stmt><decl><type><name pos:line="59" pos:column="17">var</name></type> <name pos:line="59" pos:column="21">l</name> <init pos:line="59" pos:column="23">= <expr><name><name pos:line="59" pos:column="25">control</name><op:operator pos:line="59" pos:column="32">.</op:operator><name pos:line="59" pos:column="33">DataContext</name></name> <op:operator pos:line="59" pos:column="45">as</op:operator> <name pos:line="59" pos:column="48">ILocatable</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="60" pos:column="17">Process</name></type> <name pos:line="60" pos:column="25">p</name> <init pos:line="60" pos:column="27">= <expr><op:operator pos:line="60" pos:column="29">new</op:operator> <call><name pos:line="60" pos:column="33">Process</name><argument_list pos:line="60" pos:column="40">()</argument_list></call></expr></init></decl>;</decl_stmt>

                <if pos:line="62" pos:column="17">if<condition pos:line="62" pos:column="19">(<expr><name pos:line="62" pos:column="20">null</name> <op:operator pos:line="62" pos:column="25">!=</op:operator> <name pos:line="62" pos:column="28">Editor</name> <op:operator pos:line="62" pos:column="35">&amp;&amp;</op:operator> <call><name><name pos:line="62" pos:column="38">System</name><op:operator pos:line="62" pos:column="44">.</op:operator><name pos:line="62" pos:column="45">IO</name><op:operator pos:line="62" pos:column="47">.</op:operator><name pos:line="62" pos:column="48">File</name><op:operator pos:line="62" pos:column="52">.</op:operator><name pos:line="62" pos:column="53">Exists</name></name><argument_list pos:line="62" pos:column="59">(<argument><expr><name pos:line="62" pos:column="60">Editor</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="62" pos:column="68"> <block pos:line="62" pos:column="69">{
                    <expr_stmt><expr><name><name pos:line="63" pos:column="21">p</name><op:operator pos:line="63" pos:column="22">.</op:operator><name pos:line="63" pos:column="23">StartInfo</name><op:operator pos:line="63" pos:column="32">.</op:operator><name pos:line="63" pos:column="33">FileName</name></name> <op:operator pos:line="63" pos:column="42">=</op:operator> <lit:literal type="string" pos:line="63" pos:column="44">@"C:\Program Files (x86)\Notepad++\notepad++.exe"</lit:literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="64" pos:column="21">p</name><op:operator pos:line="64" pos:column="22">.</op:operator><name pos:line="64" pos:column="23">StartInfo</name><op:operator pos:line="64" pos:column="32">.</op:operator><name pos:line="64" pos:column="33">Arguments</name></name> <op:operator pos:line="64" pos:column="43">=</op:operator> <call><name><name pos:line="64" pos:column="45">String</name><op:operator pos:line="64" pos:column="51">.</op:operator><name pos:line="64" pos:column="52">Format</name></name><argument_list pos:line="64" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="64" pos:column="59">"-nosession -ro -n{0} -c{1} \"{2}\""</lit:literal></expr></argument>, <argument><expr><name><name pos:line="64" pos:column="97">l</name><op:operator pos:line="64" pos:column="98">.</op:operator><name pos:line="64" pos:column="99">Location</name><op:operator pos:line="64" pos:column="107">.</op:operator><name pos:line="64" pos:column="108">StartingLineNumber</name></name></expr></argument>, <argument><expr><name><name pos:line="64" pos:column="128">l</name><op:operator pos:line="64" pos:column="129">.</op:operator><name pos:line="64" pos:column="130">Location</name><op:operator pos:line="64" pos:column="138">.</op:operator><name pos:line="64" pos:column="139">StartingColumnNumber</name></name></expr></argument>, <argument><expr><name><name pos:line="64" pos:column="161">l</name><op:operator pos:line="64" pos:column="162">.</op:operator><name pos:line="64" pos:column="163">Path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else pos:line="65" pos:column="19">else <block pos:line="65" pos:column="24">{
                    <expr_stmt><expr><name><name pos:line="66" pos:column="21">p</name><op:operator pos:line="66" pos:column="22">.</op:operator><name pos:line="66" pos:column="23">StartInfo</name><op:operator pos:line="66" pos:column="32">.</op:operator><name pos:line="66" pos:column="33">FileName</name></name> <op:operator pos:line="66" pos:column="42">=</op:operator> <name><name pos:line="66" pos:column="44">l</name><op:operator pos:line="66" pos:column="45">.</op:operator><name pos:line="66" pos:column="46">Path</name></name></expr>;</expr_stmt>
                }</block></else></if>

                <expr_stmt><expr><call><name><name pos:line="69" pos:column="17">p</name><op:operator pos:line="69" pos:column="18">.</op:operator><name pos:line="69" pos:column="19">Start</name></name><argument_list pos:line="69" pos:column="24">()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name><name pos:line="71" pos:column="13">e</name><op:operator pos:line="71" pos:column="14">.</op:operator><name pos:line="71" pos:column="15">Handled</name></name> <op:operator pos:line="71" pos:column="23">=</op:operator> <lit:literal type="boolean" pos:line="71" pos:column="25">true</lit:literal></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="74" pos:column="9">private</specifier> <name pos:line="74" pos:column="17">void</name></type> <name pos:line="74" pos:column="22">CallList_SelectionChanged</name><parameter_list pos:line="74" pos:column="47">(<param><decl><type><name pos:line="74" pos:column="48">object</name></type> <name pos:line="74" pos:column="55">sender</name></decl></param>, <param><decl><type><name pos:line="74" pos:column="63">SelectionChangedEventArgs</name></type> <name pos:line="74" pos:column="89">e</name></decl></param>)</parameter_list> <block pos:line="74" pos:column="92">{
            <decl_stmt><decl><type><name pos:line="75" pos:column="13">var</name></type> <name pos:line="75" pos:column="17">selectedCall</name> <init pos:line="75" pos:column="30">= <expr><name><name pos:line="75" pos:column="32">CallList</name><op:operator pos:line="75" pos:column="40">.</op:operator><name pos:line="75" pos:column="41">SelectedItem</name></name> <op:operator pos:line="75" pos:column="54">as</op:operator> <name pos:line="75" pos:column="57">MethodCall</name></expr></init></decl>;</decl_stmt>
            <if pos:line="76" pos:column="13">if<condition pos:line="76" pos:column="15">(<expr><name pos:line="76" pos:column="16">null</name> <op:operator pos:line="76" pos:column="21">!=</op:operator> <name pos:line="76" pos:column="24">selectedCall</name></expr>)</condition><then pos:line="76" pos:column="37"> <block pos:line="76" pos:column="38">{
                <expr_stmt><expr><name><name pos:line="77" pos:column="17">Sample</name><op:operator pos:line="77" pos:column="23">.</op:operator><name pos:line="77" pos:column="24">CurrentMatches</name></name> <op:operator pos:line="77" pos:column="39">=</op:operator> <name><name pos:line="77" pos:column="41">selectedCall</name><op:operator pos:line="77" pos:column="53">.</op:operator><name pos:line="77" pos:column="54">PossibleMatches</name></name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="81" pos:column="9">private</specifier> <name pos:line="81" pos:column="17">void</name></type> <name pos:line="81" pos:column="22">LoadArchive</name><parameter_list pos:line="81" pos:column="33">(<param><decl><type><name pos:line="81" pos:column="34">BackgroundWorker</name></type> <name pos:line="81" pos:column="51">worker</name></decl></param>, <param><decl><type><name pos:line="81" pos:column="59">string</name></type> <name pos:line="81" pos:column="66">pathToMappingFile</name></decl></param>, <param><decl><type><specifier pos:line="81" pos:column="85">out</specifier> <name pos:line="81" pos:column="89">SrcMLArchive</name></type> <name pos:line="81" pos:column="102">archive</name></decl></param>, <param><decl><type><specifier pos:line="81" pos:column="111">out</specifier> <name pos:line="81" pos:column="115">AbstractWorkingSet</name></type> <name pos:line="81" pos:column="134">data</name></decl></param>, <param><decl><type><specifier pos:line="81" pos:column="140">out</specifier> <name pos:line="81" pos:column="144">string</name></type> <name pos:line="81" pos:column="151">projectName</name></decl></param>)</parameter_list> <block pos:line="81" pos:column="164">{
            <throw pos:line="82" pos:column="13">throw <expr><op:operator pos:line="82" pos:column="19">new</op:operator> <call><name pos:line="82" pos:column="23">NotImplementedException</name><argument_list pos:line="82" pos:column="46">()</argument_list></call></expr>;</throw>
            <comment type="line" pos:line="83" pos:column="13">//string pathToArchive = FilePath.GetDirectoryName(pathToMappingFile);</comment>
            <comment type="line" pos:line="84" pos:column="13">//string archiveDirectoryName = FilePath.GetFileName(pathToArchive);</comment>
            <comment type="line" pos:line="85" pos:column="13">//string baseDirectory = FilePath.GetFullPath(FilePath.GetDirectoryName(pathToArchive));</comment>

            <comment type="line" pos:line="87" pos:column="13">//projectName = FilePath.GetFileName(baseDirectory);</comment>
            <comment type="line" pos:line="88" pos:column="13">//worker.ReportProgress(0, String.Format("Loading {0}", projectName));</comment>
            <comment type="line" pos:line="89" pos:column="13">//archive = new SrcMLArchive(baseDirectory, archiveDirectoryName);</comment>
            <comment type="line" pos:line="90" pos:column="13">//int numberOfFiles = archive.FileUnits.Count();</comment>
            <comment type="line" pos:line="91" pos:column="13">//worker.ReportProgress(0, String.Format("Loading {0} ({1} files)", projectName, numberOfFiles));</comment>

            <comment type="line" pos:line="93" pos:column="13">//data = new DataRepository(archive);</comment>
            <comment type="line" pos:line="94" pos:column="13">//int i = 0;</comment>
            <comment type="line" pos:line="95" pos:column="13">//foreach(var unit in archive.FileUnits) {</comment>
            <comment type="line" pos:line="96" pos:column="13">//    try {</comment>
            <comment type="line" pos:line="97" pos:column="13">//        data.AddFile(unit);</comment>
            <comment type="line" pos:line="98" pos:column="13">//    } catch(Exception) {</comment>
            <comment type="line" pos:line="99" pos:column="13">//    }</comment>

            <comment type="line" pos:line="101" pos:column="13">//    if(++i % 25 == 0) {</comment>
            <comment type="line" pos:line="102" pos:column="13">//        int percentComplete = (int) (100 * (double) i / (double) numberOfFiles);</comment>
            <comment type="line" pos:line="103" pos:column="13">//        worker.ReportProgress(percentComplete, String.Format("Loading {0} ({1} / {2} files)", projectName, i, numberOfFiles));</comment>
            <comment type="line" pos:line="104" pos:column="13">//    }</comment>
            <comment type="line" pos:line="105" pos:column="13">//}</comment>
            <comment type="line" pos:line="106" pos:column="13">//worker.ReportProgress(100, String.Format("Loaded {0} ({1} files)", baseDirectory, i));</comment>
        }</block></function>

        <function><type><specifier pos:line="109" pos:column="9">private</specifier> <name pos:line="109" pos:column="17">void</name></type> <name pos:line="109" pos:column="22">loadWorker_DoWork</name><parameter_list pos:line="109" pos:column="39">(<param><decl><type><name pos:line="109" pos:column="40">object</name></type> <name pos:line="109" pos:column="47">sender</name></decl></param>, <param><decl><type><name pos:line="109" pos:column="55">DoWorkEventArgs</name></type> <name pos:line="109" pos:column="71">e</name></decl></param>)</parameter_list> <block pos:line="109" pos:column="74">{
            <throw pos:line="110" pos:column="13">throw <expr><op:operator pos:line="110" pos:column="19">new</op:operator> <call><name pos:line="110" pos:column="23">NotImplementedException</name><argument_list pos:line="110" pos:column="46">()</argument_list></call></expr>;</throw>
            <comment type="line" pos:line="111" pos:column="13">//SrcMLArchive archive;</comment>
            <comment type="line" pos:line="112" pos:column="13">//DataRepository data;</comment>
            <comment type="line" pos:line="113" pos:column="13">//string projectName;</comment>
            <comment type="line" pos:line="114" pos:column="13">//LoadArchive(sender as BackgroundWorker, e.Argument as string, out archive, out data, out projectName);</comment>
            <comment type="line" pos:line="115" pos:column="13">//string commonPath = FileHelper.GetCommonPath(archive.GetFiles());</comment>
            <comment type="line" pos:line="116" pos:column="13">//List&lt;object&gt; results = new List&lt;object&gt;();</comment>
            <comment type="line" pos:line="117" pos:column="13">//results.Add(archive);</comment>
            <comment type="line" pos:line="118" pos:column="13">//results.Add(data);</comment>
            <comment type="line" pos:line="119" pos:column="13">//results.Add(projectName);</comment>
            <comment type="line" pos:line="120" pos:column="13">//e.Result = results;</comment>
        }</block></function>

        <function><type><specifier pos:line="123" pos:column="9">private</specifier> <name pos:line="123" pos:column="17">void</name></type> <name pos:line="123" pos:column="22">loadWorker_RunWorkerCompleted</name><parameter_list pos:line="123" pos:column="51">(<param><decl><type><name pos:line="123" pos:column="52">object</name></type> <name pos:line="123" pos:column="59">sender</name></decl></param>, <param><decl><type><name pos:line="123" pos:column="67">RunWorkerCompletedEventArgs</name></type> <name pos:line="123" pos:column="95">e</name></decl></param>)</parameter_list> <block pos:line="123" pos:column="98">{
            <throw pos:line="124" pos:column="13">throw <expr><op:operator pos:line="124" pos:column="19">new</op:operator> <call><name pos:line="124" pos:column="23">NotImplementedException</name><argument_list pos:line="124" pos:column="46">()</argument_list></call></expr>;</throw>
            <comment type="line" pos:line="125" pos:column="13">//List&lt;object&gt; results = e.Result as List&lt;object&gt;;</comment>
            <comment type="line" pos:line="126" pos:column="13">//Sample.Archive = results[0] as SrcMLArchive;</comment>
            <comment type="line" pos:line="127" pos:column="13">//Sample.Data = results[1] as DataRepository;</comment>
            <comment type="line" pos:line="128" pos:column="13">//Sample.ProjectName = results[2] as string;</comment>
            <comment type="line" pos:line="129" pos:column="13">//StatusBarProgress.Value = 0;</comment>
            <comment type="line" pos:line="130" pos:column="13">//sampleWorker.RunWorkerAsync(Sample);</comment>
        }</block></function>

        <function><type><specifier pos:line="133" pos:column="9">private</specifier> <name pos:line="133" pos:column="17">void</name></type> <name pos:line="133" pos:column="22">MenuItemOpenArchive_Click</name><parameter_list pos:line="133" pos:column="47">(<param><decl><type><name pos:line="133" pos:column="48">object</name></type> <name pos:line="133" pos:column="55">sender</name></decl></param>, <param><decl><type><name pos:line="133" pos:column="63">RoutedEventArgs</name></type> <name pos:line="133" pos:column="79">e</name></decl></param>)</parameter_list> <block pos:line="133" pos:column="82">{
            <decl_stmt><decl><type><name pos:line="134" pos:column="13">var</name></type> <name pos:line="134" pos:column="17">dialog</name> <init pos:line="134" pos:column="24">= <expr><op:operator pos:line="134" pos:column="26">new</op:operator> <call><name><name pos:line="134" pos:column="30">Microsoft</name><op:operator pos:line="134" pos:column="39">.</op:operator><name pos:line="134" pos:column="40">Win32</name><op:operator pos:line="134" pos:column="45">.</op:operator><name pos:line="134" pos:column="46">OpenFileDialog</name></name><argument_list pos:line="134" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="135" pos:column="13">dialog</name><op:operator pos:line="135" pos:column="19">.</op:operator><name pos:line="135" pos:column="20">FileName</name></name> <op:operator pos:line="135" pos:column="29">=</op:operator> <lit:literal type="string" pos:line="135" pos:column="31">"mapping"</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="136" pos:column="13">dialog</name><op:operator pos:line="136" pos:column="19">.</op:operator><name pos:line="136" pos:column="20">DefaultExt</name></name> <op:operator pos:line="136" pos:column="31">=</op:operator> <lit:literal type="string" pos:line="136" pos:column="33">".txt"</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="137" pos:column="13">dialog</name><op:operator pos:line="137" pos:column="19">.</op:operator><name pos:line="137" pos:column="20">Filter</name></name> <op:operator pos:line="137" pos:column="27">=</op:operator> <lit:literal type="string" pos:line="137" pos:column="29">"Mapping Files|mapping.txt"</lit:literal></expr>;</expr_stmt>

            <decl_stmt><decl><type><name><name pos:line="139" pos:column="13">Nullable</name><argument_list pos:line="139" pos:column="21">&lt;<argument><name pos:line="139" pos:column="22">bool</name></argument>&gt;</argument_list></name></type> <name pos:line="139" pos:column="28">result</name> <init pos:line="139" pos:column="35">= <expr><call><name><name pos:line="139" pos:column="37">dialog</name><op:operator pos:line="139" pos:column="43">.</op:operator><name pos:line="139" pos:column="44">ShowDialog</name></name><argument_list pos:line="139" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="140" pos:column="13">if<condition pos:line="140" pos:column="15">(<expr><name pos:line="140" pos:column="16">result</name> <op:operator pos:line="140" pos:column="23">==</op:operator> <lit:literal type="boolean" pos:line="140" pos:column="26">true</lit:literal></expr>)</condition><then pos:line="140" pos:column="31"> <block pos:line="140" pos:column="32">{
                <decl_stmt><decl><type><name pos:line="141" pos:column="17">string</name></type> <name pos:line="141" pos:column="24">mappingFileName</name> <init pos:line="141" pos:column="40">= <expr><name><name pos:line="141" pos:column="42">dialog</name><op:operator pos:line="141" pos:column="48">.</op:operator><name pos:line="141" pos:column="49">FileName</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="142" pos:column="17">loadWorker</name><op:operator pos:line="142" pos:column="27">.</op:operator><name pos:line="142" pos:column="28">RunWorkerAsync</name></name><argument_list pos:line="142" pos:column="42">(<argument><expr><name pos:line="142" pos:column="43">mappingFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="146" pos:column="9">private</specifier> <name pos:line="146" pos:column="17">void</name></type> <name pos:line="146" pos:column="22">ProgressChanged</name><parameter_list pos:line="146" pos:column="37">(<param><decl><type><name pos:line="146" pos:column="38">object</name></type> <name pos:line="146" pos:column="45">sender</name></decl></param>, <param><decl><type><name pos:line="146" pos:column="53">ProgressChangedEventArgs</name></type> <name pos:line="146" pos:column="78">e</name></decl></param>)</parameter_list> <block pos:line="146" pos:column="81">{
            <expr_stmt><expr><name><name pos:line="147" pos:column="13">StatusBarLabel</name><op:operator pos:line="147" pos:column="27">.</op:operator><name pos:line="147" pos:column="28">Content</name></name> <op:operator pos:line="147" pos:column="36">=</op:operator> <name><name pos:line="147" pos:column="38">e</name><op:operator pos:line="147" pos:column="39">.</op:operator><name pos:line="147" pos:column="40">UserState</name></name> <op:operator pos:line="147" pos:column="50">as</op:operator> <name pos:line="147" pos:column="53">string</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="148" pos:column="13">StatusBarProgress</name><op:operator pos:line="148" pos:column="30">.</op:operator><name pos:line="148" pos:column="31">Value</name></name> <op:operator pos:line="148" pos:column="37">=</op:operator> <name><name pos:line="148" pos:column="39">e</name><op:operator pos:line="148" pos:column="40">.</op:operator><name pos:line="148" pos:column="41">ProgressPercentage</name></name></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="151" pos:column="9">private</specifier> <name pos:line="151" pos:column="17">void</name></type> <name pos:line="151" pos:column="22">sampleWorker_DoWork</name><parameter_list pos:line="151" pos:column="41">(<param><decl><type><name pos:line="151" pos:column="42">object</name></type> <name pos:line="151" pos:column="49">sender</name></decl></param>, <param><decl><type><name pos:line="151" pos:column="57">DoWorkEventArgs</name></type> <name pos:line="151" pos:column="73">e</name></decl></param>)</parameter_list> <block pos:line="151" pos:column="76">{
            <decl_stmt><decl><type><name pos:line="152" pos:column="13">MethodCallSample</name></type> <name pos:line="152" pos:column="30">sampler</name> <init pos:line="152" pos:column="38">= <expr><name><name pos:line="152" pos:column="40">e</name><op:operator pos:line="152" pos:column="41">.</op:operator><name pos:line="152" pos:column="42">Argument</name></name> <op:operator pos:line="152" pos:column="51">as</op:operator> <name pos:line="152" pos:column="54">MethodCallSample</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="154" pos:column="13">var</name></type> <name pos:line="154" pos:column="17">samples</name> <init pos:line="154" pos:column="25">= <expr><call><name><name pos:line="154" pos:column="27">sampler</name><op:operator pos:line="154" pos:column="34">.</op:operator><name pos:line="154" pos:column="35">GetSampleOfMethodCalls</name></name><argument_list pos:line="154" pos:column="57">(<argument><expr><name pos:line="154" pos:column="58">sender</name> <op:operator pos:line="154" pos:column="65">as</op:operator> <name pos:line="154" pos:column="68">BackgroundWorker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="155" pos:column="13">e</name><op:operator pos:line="155" pos:column="14">.</op:operator><name pos:line="155" pos:column="15">Result</name></name> <op:operator pos:line="155" pos:column="22">=</op:operator> <name pos:line="155" pos:column="24">samples</name></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="158" pos:column="9">private</specifier> <name pos:line="158" pos:column="17">void</name></type> <name pos:line="158" pos:column="22">sampleWorker_RunWorkerCompleted</name><parameter_list pos:line="158" pos:column="53">(<param><decl><type><name pos:line="158" pos:column="54">object</name></type> <name pos:line="158" pos:column="61">sender</name></decl></param>, <param><decl><type><name pos:line="158" pos:column="69">RunWorkerCompletedEventArgs</name></type> <name pos:line="158" pos:column="97">e</name></decl></param>)</parameter_list> <block pos:line="158" pos:column="100">{
            <expr_stmt><expr><name><name pos:line="159" pos:column="13">Sample</name><op:operator pos:line="159" pos:column="19">.</op:operator><name pos:line="159" pos:column="20">CallSample</name></name> <op:operator pos:line="159" pos:column="31">=</op:operator> <name><name pos:line="159" pos:column="33">e</name><op:operator pos:line="159" pos:column="34">.</op:operator><name pos:line="159" pos:column="35">Result</name></name> <op:operator pos:line="159" pos:column="42">as</op:operator> <name><name pos:line="159" pos:column="45">ObservableCollection</name><argument_list pos:line="159" pos:column="65">&lt;<argument><name pos:line="159" pos:column="66">MethodCall</name></argument>&gt;</argument_list></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="160" pos:column="13">Sample</name><op:operator pos:line="160" pos:column="19">.</op:operator><name pos:line="160" pos:column="20">StartMonitoringCalls</name></name><argument_list pos:line="160" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="161" pos:column="13">CallList_SelectionChanged</name><argument_list pos:line="161" pos:column="38">(<argument><expr><name pos:line="161" pos:column="39">sender</name></expr></argument>, <argument><expr><name pos:line="161" pos:column="47">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
